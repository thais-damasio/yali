; ModuleID = 'Project_CodeNet_C++1400/p04002/s924453318.cpp'
source_filename = "Project_CodeNet_C++1400/p04002/s924453318.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::allocator" = type { i8 }
%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_" = type { %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_" }
%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_" = type { %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map"*, i64 }
%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_" = type { %"struct.std::pair"* }
%"struct.std::pair" = type <{ i64, i32, [4 x i8] }>
%"class.__gnu_pbds::detail::gp_ht_map" = type { %"class.__gnu_pbds::hash_standard_resize_policy", %"class.__gnu_pbds::detail::ranged_probe_fn", %"struct.__gnu_pbds::detail::types_traits", i64, i64, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* }
%"class.__gnu_pbds::hash_standard_resize_policy" = type { %"class.__gnu_pbds::hash_load_check_resize_trigger.base", %"class.__gnu_pbds::hash_exponential_size_policy", i64 }
%"class.__gnu_pbds::hash_load_check_resize_trigger.base" = type <{ i32 (...)**, float, float, i64, i64, i8 }>
%"class.__gnu_pbds::hash_exponential_size_policy" = type { i64, i64 }
%"class.__gnu_pbds::detail::ranged_probe_fn" = type { %"class.__gnu_pbds::direct_mask_range_hashing" }
%"class.__gnu_pbds::direct_mask_range_hashing" = type { %"class.__gnu_pbds::detail::mask_based_range_hashing" }
%"class.__gnu_pbds::detail::mask_based_range_hashing" = type { i64 }
%"struct.__gnu_pbds::detail::types_traits" = type { %"struct.std::tr1::integral_constant", %"struct.std::tr1::integral_constant.0" }
%"struct.std::tr1::integral_constant" = type { i8 }
%"struct.std::tr1::integral_constant.0" = type { i8 }
%"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry" = type { %"struct.__gnu_pbds::detail::stored_data", i8, [7 x i8] }
%"struct.__gnu_pbds::detail::stored_data" = type { %"struct.__gnu_pbds::detail::stored_value" }
%"struct.__gnu_pbds::detail::stored_value" = type { %"struct.std::pair" }
%"class.__gnu_pbds::gp_hash_table" = type { %"class.__gnu_pbds::basic_hash_table" }
%"class.__gnu_pbds::basic_hash_table" = type { %"class.__gnu_pbds::detail::gp_ht_map" }
%"class.__gnu_cxx::new_allocator" = type { i8 }
%"struct.__gnu_pbds::detail::hash_eq_fn" = type { i8 }
%"struct.std::equal_to" = type { i8 }
%"class.__gnu_pbds::hash_load_check_resize_trigger" = type <{ i32 (...)**, float, float, i64, i64, i8, [7 x i8] }>
%"struct.std::tr1::hash" = type { i8 }
%"class.__gnu_pbds::linear_probe_fn" = type { i8 }
%"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base" = type { i8 }
%"struct.__gnu_pbds::insert_error" = type { %"struct.__gnu_pbds::container_error" }
%"struct.__gnu_pbds::container_error" = type { %"class.std::logic_error" }
%"class.std::logic_error" = type { %"class.std::exception", %"struct.std::__cow_string" }
%"class.std::exception" = type { i32 (...)** }
%"struct.std::__cow_string" = type { %union.anon }
%union.anon = type { i8* }
%"struct.__gnu_pbds::resize_error" = type { %"struct.__gnu_pbds::container_error" }

$_Z2scIlJlEEvRT_DpRT0_ = comdat any

$_Z2scIiEbRT_ = comdat any

$_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEC2Ev = comdat any

$_Z2scIiJiEEvRT_DpRT0_ = comdat any

$_ZSt3maxIiERKT_S2_S2_ = comdat any

$_ZSt3minIiERKT_S2_S2_ = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEixERKl = comdat any

$_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE4sizeEv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5beginEv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE3endEv = comdat any

$_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_neERKSJ_ = comdat any

$_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_deEv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_ppEv = comdat any

$_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED2Ev = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE = comdat any

$_ZNSaIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEEC2Ev = comdat any

$_ZNSaIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEED2Ev = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2Ev = comdat any

$_Z2scIlEbRT_ = comdat any

$_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEC2Ev = comdat any

$_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED0Ev = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9do_resizeEm = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEC2Ev = comdat any

$_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED2Ev = comdat any

$_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED0Ev = comdat any

$_ZN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEC2Ev = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEC2Ev = comdat any

$_ZNK10__gnu_pbds28hash_exponential_size_policyImE23get_nearest_larger_sizeEm = comdat any

$_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEC2Em = comdat any

$_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE8allocateEmPKv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10initializeEv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEED2Ev = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEED0Ev = comdat any

$_ZN10__gnu_pbds28hash_exponential_size_policyImEC2Emm = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEC2Eff = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE25notify_externally_resizedEm = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED0Ev = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE9do_resizeEm = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED2Ev = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED0Ev = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE9do_resizeEm = comdat any

$_ZN10__gnu_pbds20__throw_insert_errorEv = comdat any

$_ZN10__gnu_pbds12insert_errorC2Ev = comdat any

$_ZN10__gnu_pbds12insert_errorD2Ev = comdat any

$_ZN10__gnu_pbds15container_errorC2Ev = comdat any

$_ZN10__gnu_pbds12insert_errorD0Ev = comdat any

$_ZN10__gnu_pbds15container_errorD2Ev = comdat any

$_ZN10__gnu_pbds15container_errorD0Ev = comdat any

$_ZN10__gnu_pbds25direct_mask_range_hashingImE14notify_resizedEm = comdat any

$_ZN10__gnu_pbds6detail24mask_based_range_hashingImE14notify_resizedEm = comdat any

$_ZNK9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE8max_sizeEv = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_resizedEm = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_clearedEv = comdat any

$_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EE14notify_resizedEm = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14notify_resizedEm = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14notify_clearedEv = comdat any

$_ZN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EE8set_sizeEm = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE14deallocate_allEv = comdat any

$__clang_call_terminate = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5clearEv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE23erase_all_valid_entriesEPNSI_5entryEm = comdat any

$_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE10deallocateEPSL_m = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE11erase_entryEPNSI_5entryE = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE28do_resize_if_needed_no_throwEv = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE13notify_erasedEm = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE13notify_erasedEm = comdat any

$_ZNK10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE16is_resize_neededEv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10resize_impEm = comdat any

$_ZNK10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE12get_new_sizeEmm = comdat any

$_ZNK10__gnu_pbds30hash_load_check_resize_triggerILb0EmE16is_resize_neededEv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10resize_impEPNSI_5entryEm = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE19resize_imp_reassignEPNSI_5entryESK_NS2_17integral_constantIiLi0EEE = comdat any

$_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKl = comdat any

$_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKlmm = comdat any

$_ZNK10__gnu_pbds25direct_mask_range_hashingImEclEm = comdat any

$_ZNKSt3tr14hashIlEclEl = comdat any

$_ZNK10__gnu_pbds6detail24mask_based_range_hashingImE10range_hashEm = comdat any

$_ZNK10__gnu_pbds15linear_probe_fnImEclEm = comdat any

$_ZNK10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14is_grow_neededEmm = comdat any

$_ZNK10__gnu_pbds28hash_exponential_size_policyImE24get_nearest_smaller_sizeEm = comdat any

$_ZN10__gnu_pbds20__throw_resize_errorEv = comdat any

$_ZN10__gnu_pbds12resize_errorC2Ev = comdat any

$_ZN10__gnu_pbds12resize_errorD2Ev = comdat any

$_ZN10__gnu_pbds12resize_errorD0Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEEC2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEED2Ev = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE13subscript_impERKlNS2_17integral_constantIiLi0EEE = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE12find_ins_posERKlNS2_17integral_constantIiLi0EEE = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE14insert_new_impERKSt4pairIKliEm = comdat any

$_ZNSt4pairIKliEC2IivEERS0_OT_ = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE26notify_insert_search_startEv = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE24notify_insert_search_endEv = comdat any

$_ZNK10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEclERKlS7_ = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE30notify_insert_search_collisionEv = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE26notify_insert_search_startEv = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE24notify_insert_search_endEv = comdat any

$_ZNKSt8equal_toIlEclERKlS2_ = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE30notify_insert_search_collisionEv = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE19do_resize_if_neededEv = comdat any

$_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE15notify_insertedEm = comdat any

$_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE15notify_insertedEm = comdat any

$_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE18get_start_it_stateERPSt4pairIKliERm = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2EPSt4pairIKliEmPSI_ = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE15const_iterator_C2EPKSt4pairIKliEmPKSI_ = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_C2EPKSt4pairIKliE = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2ERKSJ_ = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE15const_iterator_C2ERKSJ_ = comdat any

$_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_C2ERKSJ_ = comdat any

$_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE12inc_it_stateERPKSt4pairIKliERm = comdat any

$_ZTVN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE = comdat any

$_ZTSN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE = comdat any

$_ZTSN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE = comdat any

$_ZTSN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE = comdat any

$_ZTSN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEE = comdat any

$_ZTSSt8equal_toIlE = comdat any

$_ZTSSt15binary_functionIllbE = comdat any

$_ZTISt15binary_functionIllbE = comdat any

$_ZTISt8equal_toIlE = comdat any

$_ZTIN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEE = comdat any

$_ZTSN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE = comdat any

$_ZTSN10__gnu_pbds28hash_exponential_size_policyImEE = comdat any

$_ZTIN10__gnu_pbds28hash_exponential_size_policyImEE = comdat any

$_ZTSN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE = comdat any

$_ZTSN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EEE = comdat any

$_ZTIN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EEE = comdat any

$_ZTIN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE = comdat any

$_ZTIN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE = comdat any

$_ZTSN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEE = comdat any

$_ZTSNSt3tr14hashIlEE = comdat any

$_ZTSSt14unary_functionIlmE = comdat any

$_ZTISt14unary_functionIlmE = comdat any

$_ZTINSt3tr14hashIlEE = comdat any

$_ZTSN10__gnu_pbds25direct_mask_range_hashingImEE = comdat any

$_ZTSN10__gnu_pbds6detail24mask_based_range_hashingImEE = comdat any

$_ZTIN10__gnu_pbds6detail24mask_based_range_hashingImEE = comdat any

$_ZTIN10__gnu_pbds25direct_mask_range_hashingImEE = comdat any

$_ZTSN10__gnu_pbds15linear_probe_fnImEE = comdat any

$_ZTIN10__gnu_pbds15linear_probe_fnImEE = comdat any

$_ZTIN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEE = comdat any

$_ZTSN10__gnu_pbds6detail12types_traitsIliSaIcELb0EEE = comdat any

$_ZTSN10__gnu_pbds6detail9type_baseIliSaIcELb0EEE = comdat any

$_ZTIN10__gnu_pbds6detail9type_baseIliSaIcELb0EEE = comdat any

$_ZTIN10__gnu_pbds6detail12types_traitsIliSaIcELb0EEE = comdat any

$_ZTIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE = comdat any

$_ZTIN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE = comdat any

$_ZTIN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE = comdat any

$_ZTVN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE = comdat any

$_ZTVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE = comdat any

$_ZTVN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE = comdat any

$_ZTVN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE = comdat any

$_ZTSN10__gnu_pbds12insert_errorE = comdat any

$_ZTSN10__gnu_pbds15container_errorE = comdat any

$_ZTIN10__gnu_pbds15container_errorE = comdat any

$_ZTIN10__gnu_pbds12insert_errorE = comdat any

$_ZTVN10__gnu_pbds12insert_errorE = comdat any

$_ZTVN10__gnu_pbds15container_errorE = comdat any

$_ZTSN10__gnu_pbds12resize_errorE = comdat any

$_ZTIN10__gnu_pbds12resize_errorE = comdat any

$_ZTVN10__gnu_pbds12resize_errorE = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE = linkonce_odr global %"class.std::allocator" zeroinitializer, comdat, align 1
@_ZGVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE = linkonce_odr global i64 0, comdat($_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE), align 8
@_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE = linkonce_odr global %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_" zeroinitializer, comdat, align 8
@_ZGVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE = linkonce_odr global i64 0, comdat($_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE), align 8
@_ZTVN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE to i8*), i8* bitcast (void (%"class.__gnu_pbds::gp_hash_table"*)* @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED2Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::gp_hash_table"*)* @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED0Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::detail::gp_ht_map"*, i64)* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9do_resizeEm to i8*)] }, comdat, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE = linkonce_odr constant [251 x i8] c"N10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE\00", comdat
@_ZTSN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE = linkonce_odr constant [334 x i8] c"N10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE\00", comdat
@_ZTVN10__cxxabiv121__vmi_class_type_infoE = external global i8*
@_ZTSN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE = linkonce_odr constant [253 x i8] c"N10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE\00", comdat
@_ZTSN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEE = linkonce_odr constant [60 x i8] c"N10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEE\00", comdat
@_ZTSSt8equal_toIlE = linkonce_odr constant [15 x i8] c"St8equal_toIlE\00", comdat
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSSt15binary_functionIllbE = linkonce_odr constant [25 x i8] c"St15binary_functionIllbE\00", comdat
@_ZTISt15binary_functionIllbE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @_ZTSSt15binary_functionIllbE, i32 0, i32 0) }, comdat
@_ZTISt8equal_toIlE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @_ZTSSt8equal_toIlE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTISt15binary_functionIllbE to i8*) }, comdat
@_ZTIN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @_ZTSN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTISt8equal_toIlE to i8*) }, comdat
@_ZTSN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE = linkonce_odr constant [131 x i8] c"N10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE\00", comdat
@_ZTSN10__gnu_pbds28hash_exponential_size_policyImEE = linkonce_odr constant [48 x i8] c"N10__gnu_pbds28hash_exponential_size_policyImEE\00", comdat
@_ZTIN10__gnu_pbds28hash_exponential_size_policyImEE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @_ZTSN10__gnu_pbds28hash_exponential_size_policyImEE, i32 0, i32 0) }, comdat
@_ZTSN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE = linkonce_odr constant [54 x i8] c"N10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE\00", comdat
@_ZTSN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EEE = linkonce_odr constant [71 x i8] c"N10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EEE\00", comdat
@_ZTIN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EEE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @_ZTSN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EEE, i32 0, i32 0) }, comdat
@_ZTIN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE = linkonce_odr constant { i8*, i8*, i32, i32, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @_ZTSN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE, i32 0, i32 0), i32 0, i32 1, i8* bitcast ({ i8*, i8* }* @_ZTIN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EEE to i8*), i64 0 }, comdat
@_ZTIN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE = linkonce_odr constant { i8*, i8*, i32, i32, i8*, i64, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([131 x i8], [131 x i8]* @_ZTSN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE, i32 0, i32 0), i32 0, i32 2, i8* bitcast ({ i8*, i8* }* @_ZTIN10__gnu_pbds28hash_exponential_size_policyImEE to i8*), i64 10242, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64 }* @_ZTIN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE to i8*), i64 2 }, comdat
@_ZTSN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEE = linkonce_odr constant [125 x i8] c"N10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEE\00", comdat
@_ZTSNSt3tr14hashIlEE = linkonce_odr constant [17 x i8] c"NSt3tr14hashIlEE\00", comdat
@_ZTSSt14unary_functionIlmE = linkonce_odr constant [23 x i8] c"St14unary_functionIlmE\00", comdat
@_ZTISt14unary_functionIlmE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @_ZTSSt14unary_functionIlmE, i32 0, i32 0) }, comdat
@_ZTINSt3tr14hashIlEE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZTSNSt3tr14hashIlEE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTISt14unary_functionIlmE to i8*) }, comdat
@_ZTSN10__gnu_pbds25direct_mask_range_hashingImEE = linkonce_odr constant [45 x i8] c"N10__gnu_pbds25direct_mask_range_hashingImEE\00", comdat
@_ZTSN10__gnu_pbds6detail24mask_based_range_hashingImEE = linkonce_odr constant [51 x i8] c"N10__gnu_pbds6detail24mask_based_range_hashingImEE\00", comdat
@_ZTIN10__gnu_pbds6detail24mask_based_range_hashingImEE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @_ZTSN10__gnu_pbds6detail24mask_based_range_hashingImEE, i32 0, i32 0) }, comdat
@_ZTIN10__gnu_pbds25direct_mask_range_hashingImEE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @_ZTSN10__gnu_pbds25direct_mask_range_hashingImEE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN10__gnu_pbds6detail24mask_based_range_hashingImEE to i8*) }, comdat
@_ZTSN10__gnu_pbds15linear_probe_fnImEE = linkonce_odr constant [35 x i8] c"N10__gnu_pbds15linear_probe_fnImEE\00", comdat
@_ZTIN10__gnu_pbds15linear_probe_fnImEE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @_ZTSN10__gnu_pbds15linear_probe_fnImEE, i32 0, i32 0) }, comdat
@_ZTIN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEE = linkonce_odr constant { i8*, i8*, i32, i32, i8*, i64, i8*, i64, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([125 x i8], [125 x i8]* @_ZTSN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEE, i32 0, i32 0), i32 0, i32 3, i8* bitcast ({ i8*, i8*, i8* }* @_ZTINSt3tr14hashIlEE to i8*), i64 2, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds25direct_mask_range_hashingImEE to i8*), i64 2, i8* bitcast ({ i8*, i8* }* @_ZTIN10__gnu_pbds15linear_probe_fnImEE to i8*), i64 2 }, comdat
@_ZTSN10__gnu_pbds6detail12types_traitsIliSaIcELb0EEE = linkonce_odr constant [49 x i8] c"N10__gnu_pbds6detail12types_traitsIliSaIcELb0EEE\00", comdat
@_ZTSN10__gnu_pbds6detail9type_baseIliSaIcELb0EEE = linkonce_odr constant [45 x i8] c"N10__gnu_pbds6detail9type_baseIliSaIcELb0EEE\00", comdat
@_ZTIN10__gnu_pbds6detail9type_baseIliSaIcELb0EEE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @_ZTSN10__gnu_pbds6detail9type_baseIliSaIcELb0EEE, i32 0, i32 0) }, comdat
@_ZTIN10__gnu_pbds6detail12types_traitsIliSaIcELb0EEE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @_ZTSN10__gnu_pbds6detail12types_traitsIliSaIcELb0EEE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN10__gnu_pbds6detail9type_baseIliSaIcELb0EEE to i8*) }, comdat
@_ZTIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE = linkonce_odr constant { i8*, i8*, i32, i32, i8*, i64, i8*, i64, i8*, i64, i8*, i64 } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv121__vmi_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([253 x i8], [253 x i8]* @_ZTSN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE, i32 0, i32 0), i32 0, i32 4, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEE to i8*), i64 2, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE to i8*), i64 2, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64, i8*, i64 }* @_ZTIN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEE to i8*), i64 16386, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds6detail12types_traitsIliSaIcELb0EEE to i8*), i64 18434 }, comdat
@_ZTIN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([334 x i8], [334 x i8]* @_ZTSN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }* @_ZTIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE to i8*) }, comdat
@_ZTIN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([251 x i8], [251 x i8]* @_ZTSN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE to i8*) }, comdat
@_ZTVN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE to i8*), i8* bitcast (void (%"class.__gnu_pbds::basic_hash_table"*)* @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED2Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::basic_hash_table"*)* @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED0Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::detail::gp_ht_map"*, i64)* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9do_resizeEm to i8*)] }, comdat, align 8
@_ZTVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }* @_ZTIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE to i8*), i8* bitcast (void (%"class.__gnu_pbds::detail::gp_ht_map"*)* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEED2Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::detail::gp_ht_map"*)* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEED0Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::detail::gp_ht_map"*, i64)* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9do_resizeEm to i8*)] }, comdat, align 8
@_ZTVN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64, i8*, i64 }* @_ZTIN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE to i8*), i8* bitcast (void (%"class.__gnu_pbds::hash_standard_resize_policy"*)* @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::hash_standard_resize_policy"*)* @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED0Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::hash_standard_resize_policy"*, i64)* @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE9do_resizeEm to i8*)] }, comdat, align 8
@_ZTVN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i32, i32, i8*, i64 }* @_ZTIN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE to i8*), i8* bitcast (void (%"class.__gnu_pbds::hash_load_check_resize_trigger"*)* @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED2Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::hash_load_check_resize_trigger"*)* @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED0Ev to i8*), i8* bitcast (void (%"class.__gnu_pbds::hash_load_check_resize_trigger"*, i64)* @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE9do_resizeEm to i8*)] }, comdat, align 8
@_ZTSN10__gnu_pbds12insert_errorE = linkonce_odr constant [29 x i8] c"N10__gnu_pbds12insert_errorE\00", comdat
@_ZTSN10__gnu_pbds15container_errorE = linkonce_odr constant [32 x i8] c"N10__gnu_pbds15container_errorE\00", comdat
@_ZTISt11logic_error = external constant i8*
@_ZTIN10__gnu_pbds15container_errorE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @_ZTSN10__gnu_pbds15container_errorE, i32 0, i32 0), i8* bitcast (i8** @_ZTISt11logic_error to i8*) }, comdat
@_ZTIN10__gnu_pbds12insert_errorE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @_ZTSN10__gnu_pbds12insert_errorE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds15container_errorE to i8*) }, comdat
@_ZTVN10__gnu_pbds12insert_errorE = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds12insert_errorE to i8*), i8* bitcast (void (%"struct.__gnu_pbds::insert_error"*)* @_ZN10__gnu_pbds12insert_errorD2Ev to i8*), i8* bitcast (void (%"struct.__gnu_pbds::insert_error"*)* @_ZN10__gnu_pbds12insert_errorD0Ev to i8*), i8* bitcast (i8* (%"class.std::logic_error"*)* @_ZNKSt11logic_error4whatEv to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [28 x i8] c"__gnu_pbds::container_error\00", align 1
@_ZTVN10__gnu_pbds15container_errorE = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds15container_errorE to i8*), i8* bitcast (void (%"struct.__gnu_pbds::container_error"*)* @_ZN10__gnu_pbds15container_errorD2Ev to i8*), i8* bitcast (void (%"struct.__gnu_pbds::container_error"*)* @_ZN10__gnu_pbds15container_errorD0Ev to i8*), i8* bitcast (i8* (%"class.std::logic_error"*)* @_ZNKSt11logic_error4whatEv to i8*)] }, comdat, align 8
@_ZTSN10__gnu_pbds12resize_errorE = linkonce_odr constant [29 x i8] c"N10__gnu_pbds12resize_errorE\00", comdat
@_ZTIN10__gnu_pbds12resize_errorE = linkonce_odr constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @_ZTSN10__gnu_pbds12resize_errorE, i32 0, i32 0), i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds15container_errorE to i8*) }, comdat
@_ZTVN10__gnu_pbds12resize_errorE = linkonce_odr unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds12resize_errorE to i8*), i8* bitcast (void (%"struct.__gnu_pbds::resize_error"*)* @_ZN10__gnu_pbds12resize_errorD2Ev to i8*), i8* bitcast (void (%"struct.__gnu_pbds::resize_error"*)* @_ZN10__gnu_pbds12resize_errorD0Ev to i8*), i8* bitcast (i8* (%"class.std::logic_error"*)* @_ZNKSt11logic_error4whatEv to i8*)] }, comdat, align 8
@llvm.global_ctors = appending global [3 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @__cxx_global_var_init.1, i8* getelementptr inbounds (%"class.std::allocator", %"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE, i32 0, i32 0) }, { i32, void ()*, i8* } { i32 65535, void ()* @__cxx_global_var_init.2, i8* bitcast (%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE to i8*) }, { i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s924453318.cpp, i8* null }]
@x = common global i32 0
@y = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0
@x.111 = common global i32 0
@y.112 = common global i32 0
@x.113 = common global i32 0
@y.114 = common global i32 0
@x.115 = common global i32 0
@y.116 = common global i32 0
@x.117 = common global i32 0
@y.118 = common global i32 0
@x.119 = common global i32 0
@y.120 = common global i32 0
@x.121 = common global i32 0
@y.122 = common global i32 0
@x.123 = common global i32 0
@y.124 = common global i32 0
@x.125 = common global i32 0
@y.126 = common global i32 0
@x.127 = common global i32 0
@y.128 = common global i32 0
@x.129 = common global i32 0
@y.130 = common global i32 0
@x.131 = common global i32 0
@y.132 = common global i32 0
@x.133 = common global i32 0
@y.134 = common global i32 0
@x.135 = common global i32 0
@y.136 = common global i32 0
@x.137 = common global i32 0
@y.138 = common global i32 0
@x.139 = common global i32 0
@y.140 = common global i32 0
@x.141 = common global i32 0
@y.142 = common global i32 0
@x.143 = common global i32 0
@y.144 = common global i32 0
@x.145 = common global i32 0
@y.146 = common global i32 0
@x.147 = common global i32 0
@y.148 = common global i32 0
@x.149 = common global i32 0
@y.150 = common global i32 0
@x.151 = common global i32 0
@y.152 = common global i32 0
@x.153 = common global i32 0
@y.154 = common global i32 0
@x.155 = common global i32 0
@y.156 = common global i32 0
@x.157 = common global i32 0
@y.158 = common global i32 0
@x.159 = common global i32 0
@y.160 = common global i32 0
@x.161 = common global i32 0
@y.162 = common global i32 0
@x.163 = common global i32 0
@y.164 = common global i32 0
@x.165 = common global i32 0
@y.166 = common global i32 0
@x.167 = common global i32 0
@y.168 = common global i32 0
@x.169 = common global i32 0
@y.170 = common global i32 0
@x.171 = common global i32 0
@y.172 = common global i32 0
@x.173 = common global i32 0
@y.174 = common global i32 0
@x.175 = common global i32 0
@y.176 = common global i32 0
@x.177 = common global i32 0
@y.178 = common global i32 0
@x.179 = common global i32 0
@y.180 = common global i32 0
@x.181 = common global i32 0
@y.182 = common global i32 0
@x.183 = common global i32 0
@y.184 = common global i32 0
@x.185 = common global i32 0
@y.186 = common global i32 0
@x.187 = common global i32 0
@y.188 = common global i32 0
@x.189 = common global i32 0
@y.190 = common global i32 0
@x.191 = common global i32 0
@y.192 = common global i32 0
@x.193 = common global i32 0
@y.194 = common global i32 0
@x.195 = common global i32 0
@y.196 = common global i32 0
@x.197 = common global i32 0
@y.198 = common global i32 0
@x.199 = common global i32 0
@y.200 = common global i32 0
@x.201 = common global i32 0
@y.202 = common global i32 0
@x.203 = common global i32 0
@y.204 = common global i32 0
@x.205 = common global i32 0
@y.206 = common global i32 0
@x.207 = common global i32 0
@y.208 = common global i32 0
@x.209 = common global i32 0
@y.210 = common global i32 0
@x.211 = common global i32 0
@y.212 = common global i32 0
@x.213 = common global i32 0
@y.214 = common global i32 0
@x.215 = common global i32 0
@y.216 = common global i32 0
@x.217 = common global i32 0
@y.218 = common global i32 0
@x.219 = common global i32 0
@y.220 = common global i32 0
@x.221 = common global i32 0
@y.222 = common global i32 0
@x.223 = common global i32 0
@y.224 = common global i32 0
@x.225 = common global i32 0
@y.226 = common global i32 0
@x.227 = common global i32 0
@y.228 = common global i32 0
@x.229 = common global i32 0
@y.230 = common global i32 0

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() #4 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.__gnu_pbds::gp_hash_table", align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*
  %10 = alloca i32
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i64, align 8
  %20 = alloca [10 x i64], align 16
  %21 = alloca %"class.__gnu_pbds::gp_hash_table"*, align 8
  %22 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_", align 8
  %23 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_", align 8
  %24 = alloca %"struct.std::pair"*, align 8
  %25 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %26 = call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %27 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %28 = getelementptr i8, i8* %27, i64 -24
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %30
  %32 = bitcast i8* %31 to %"class.std::basic_ios"*
  %33 = call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %32, %"class.std::basic_ostream"* null)
  call void @_Z2scIlJlEEvRT_DpRT0_(i64* dereferenceable(8) %2, i64* dereferenceable(8) %3)
  %34 = load i64, i64* %2, align 8
  %35 = sub nsw i64 %34, 2
  %36 = load i64, i64* %3, align 8
  %37 = sub nsw i64 %36, 2
  %38 = mul nsw i64 %35, %37
  store i64 %38, i64* %4, align 8
  %39 = call zeroext i1 @_Z2scIiEbRT_(i32* dereferenceable(4) %5)
  call void @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEC2Ev(%"class.__gnu_pbds::gp_hash_table"* %6)
  br label %40

; <label>:40:                                     ; preds = %281, %0
  %41 = load i32, i32* %5, align 4
  %42 = add nsw i32 %41, -1
  store i32 %42, i32* %5, align 4
  %43 = icmp ne i32 %41, 0
  br i1 %43, label %44, label %282

; <label>:44:                                     ; preds = %40
  invoke void @_Z2scIiJiEEvRT_DpRT0_(i32* dereferenceable(4) %7, i32* dereferenceable(4) %8)
          to label %45 unwind label %219

; <label>:45:                                     ; preds = %44
  %46 = load i32, i32* @x.3
  %47 = load i32, i32* @y.4
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %410

; <label>:54:                                     ; preds = %45, %410
  store i32 1, i32* %12, align 4
  %55 = load i32, i32* %7, align 4
  %56 = sub nsw i32 %55, 2
  store i32 %56, i32* %13, align 4
  %57 = load i32, i32* @x.3
  %58 = load i32, i32* @y.4
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %65, label %410

; <label>:65:                                     ; preds = %54
  %66 = invoke dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4) %12, i32* dereferenceable(4) %13)
          to label %67 unwind label %219

; <label>:67:                                     ; preds = %65
  %68 = load i32, i32* %66, align 4
  store i32 %68, i32* %11, align 4
  br label %69

; <label>:69:                                     ; preds = %280, %67
  %70 = load i32, i32* @x.3
  %71 = load i32, i32* @y.4
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %78, label %421

; <label>:78:                                     ; preds = %69, %421
  %79 = load i32, i32* %11, align 4
  %80 = load i64, i64* %2, align 8
  %81 = trunc i64 %80 to i32
  %82 = sub nsw i32 %81, 2
  store i32 %82, i32* %14, align 4
  %83 = load i32, i32* @x.3
  %84 = load i32, i32* @y.4
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %91, label %421

; <label>:91:                                     ; preds = %78
  %92 = invoke dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* dereferenceable(4) %7, i32* dereferenceable(4) %14)
          to label %93 unwind label %219

; <label>:93:                                     ; preds = %91
  %94 = load i32, i32* %92, align 4
  %95 = icmp sle i32 %79, %94
  br i1 %95, label %96, label %281

; <label>:96:                                     ; preds = %93
  store i32 1, i32* %16, align 4
  %97 = load i32, i32* %8, align 4
  %98 = sub nsw i32 %97, 2
  store i32 %98, i32* %17, align 4
  %99 = invoke dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4) %16, i32* dereferenceable(4) %17)
          to label %100 unwind label %219

; <label>:100:                                    ; preds = %96
  %101 = load i32, i32* @x.3
  %102 = load i32, i32* @y.4
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %109, label %427

; <label>:109:                                    ; preds = %100, %427
  %110 = load i32, i32* %99, align 4
  store i32 %110, i32* %15, align 4
  %111 = load i32, i32* @x.3
  %112 = load i32, i32* @y.4
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %119, label %427

; <label>:119:                                    ; preds = %109
  br label %120

; <label>:120:                                    ; preds = %218, %119
  %121 = load i32, i32* @x.3
  %122 = load i32, i32* @y.4
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %129, label %429

; <label>:129:                                    ; preds = %120, %429
  %130 = load i32, i32* %15, align 4
  %131 = load i64, i64* %3, align 8
  %132 = trunc i64 %131 to i32
  %133 = sub nsw i32 %132, 2
  store i32 %133, i32* %18, align 4
  %134 = load i32, i32* @x.3
  %135 = load i32, i32* @y.4
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %142, label %429

; <label>:142:                                    ; preds = %129
  %143 = invoke dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* dereferenceable(4) %8, i32* dereferenceable(4) %18)
          to label %144 unwind label %219

; <label>:144:                                    ; preds = %142
  %145 = load i32, i32* @x.3
  %146 = load i32, i32* @y.4
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %153, label %435

; <label>:153:                                    ; preds = %144, %435
  %154 = load i32, i32* %143, align 4
  %155 = icmp sle i32 %130, %154
  %156 = load i32, i32* @x.3
  %157 = load i32, i32* @y.4
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %164, label %435

; <label>:164:                                    ; preds = %153
  br i1 %155, label %165, label %241

; <label>:165:                                    ; preds = %164
  %166 = bitcast %"class.__gnu_pbds::gp_hash_table"* %6 to %"class.__gnu_pbds::detail::gp_ht_map"*
  %167 = load i32, i32* %11, align 4
  %168 = sub nsw i32 %167, 1
  %169 = sext i32 %168 to i64
  %170 = load i64, i64* %3, align 8
  %171 = mul nsw i64 %169, %170
  %172 = load i32, i32* %15, align 4
  %173 = sext i32 %172 to i64
  %174 = add nsw i64 %171, %173
  %175 = sub nsw i64 %174, 1
  store i64 %175, i64* %19, align 8
  %176 = invoke dereferenceable(4) i32* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEixERKl(%"class.__gnu_pbds::detail::gp_ht_map"* %166, i64* dereferenceable(8) %19)
          to label %177 unwind label %219

; <label>:177:                                    ; preds = %165
  %178 = load i32, i32* @x.3
  %179 = load i32, i32* @y.4
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %186, label %438

; <label>:186:                                    ; preds = %177, %438
  %187 = load i32, i32* %176, align 4
  %188 = add nsw i32 %187, 1
  store i32 %188, i32* %176, align 4
  %189 = load i32, i32* @x.3
  %190 = load i32, i32* @y.4
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %197, label %438

; <label>:197:                                    ; preds = %186
  br label %198

; <label>:198:                                    ; preds = %197
  %199 = load i32, i32* @x.3
  %200 = load i32, i32* @y.4
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %207, label %448

; <label>:207:                                    ; preds = %198, %448
  %208 = load i32, i32* %15, align 4
  %209 = add nsw i32 %208, 1
  store i32 %209, i32* %15, align 4
  %210 = load i32, i32* @x.3
  %211 = load i32, i32* @y.4
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %218, label %448

; <label>:218:                                    ; preds = %207
  br label %120

; <label>:219:                                    ; preds = %361, %355, %330, %320, %297, %293, %288, %282, %165, %142, %96, %91, %65, %44
  %220 = load i32, i32* @x.3
  %221 = load i32, i32* @y.4
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %228, label %453

; <label>:228:                                    ; preds = %219, %453
  %229 = landingpad { i8*, i32 }
          cleanup
  %230 = extractvalue { i8*, i32 } %229, 0
  store i8* %230, i8** %9, align 8
  %231 = extractvalue { i8*, i32 } %229, 1
  store i32 %231, i32* %10, align 4
  call void @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED2Ev(%"class.__gnu_pbds::gp_hash_table"* %6) #3
  %232 = load i32, i32* @x.3
  %233 = load i32, i32* @y.4
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %240, label %453

; <label>:240:                                    ; preds = %228
  br label %387

; <label>:241:                                    ; preds = %164
  %242 = load i32, i32* @x.3
  %243 = load i32, i32* @y.4
  %244 = sub i32 %242, 1
  %245 = mul i32 %242, %244
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %247, %248
  br i1 %249, label %250, label %457

; <label>:250:                                    ; preds = %241, %457
  %251 = load i32, i32* @x.3
  %252 = load i32, i32* @y.4
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %259, label %457

; <label>:259:                                    ; preds = %250
  br label %260

; <label>:260:                                    ; preds = %259
  %261 = load i32, i32* @x.3
  %262 = load i32, i32* @y.4
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %269, label %458

; <label>:269:                                    ; preds = %260, %458
  %270 = load i32, i32* %11, align 4
  %271 = add nsw i32 %270, 1
  store i32 %271, i32* %11, align 4
  %272 = load i32, i32* @x.3
  %273 = load i32, i32* @y.4
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %280, label %458

; <label>:280:                                    ; preds = %269
  br label %69

; <label>:281:                                    ; preds = %93
  br label %40

; <label>:282:                                    ; preds = %40
  %283 = getelementptr inbounds [10 x i64], [10 x i64]* %20, i32 0, i32 0
  %284 = bitcast i64* %283 to i8*
  call void @llvm.memset.p0i8.i64(i8* %284, i8 0, i64 80, i32 16, i1 false)
  %285 = load i64, i64* %4, align 8
  %286 = bitcast %"class.__gnu_pbds::gp_hash_table"* %6 to %"class.__gnu_pbds::detail::gp_ht_map"*
  %287 = invoke i64 @_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE4sizeEv(%"class.__gnu_pbds::detail::gp_ht_map"* %286)
          to label %288 unwind label %219

; <label>:288:                                    ; preds = %282
  %289 = sub nsw i64 %285, %287
  %290 = getelementptr inbounds [10 x i64], [10 x i64]* %20, i64 0, i64 0
  store i64 %289, i64* %290, align 16
  store %"class.__gnu_pbds::gp_hash_table"* %6, %"class.__gnu_pbds::gp_hash_table"** %21, align 8
  %291 = load %"class.__gnu_pbds::gp_hash_table"*, %"class.__gnu_pbds::gp_hash_table"** %21, align 8
  %292 = bitcast %"class.__gnu_pbds::gp_hash_table"* %291 to %"class.__gnu_pbds::detail::gp_ht_map"*
  invoke void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5beginEv(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* sret %22, %"class.__gnu_pbds::detail::gp_ht_map"* %292)
          to label %293 unwind label %219

; <label>:293:                                    ; preds = %288
  %294 = load %"class.__gnu_pbds::gp_hash_table"*, %"class.__gnu_pbds::gp_hash_table"** %21, align 8
  %295 = bitcast %"class.__gnu_pbds::gp_hash_table"* %294 to %"class.__gnu_pbds::detail::gp_ht_map"*
  invoke void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE3endEv(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* sret %23, %"class.__gnu_pbds::detail::gp_ht_map"* %295)
          to label %296 unwind label %219

; <label>:296:                                    ; preds = %293
  br label %297

; <label>:297:                                    ; preds = %332, %296
  %298 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %22 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*
  %299 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %23 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*
  %300 = invoke zeroext i1 @_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_neERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %298, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* dereferenceable(8) %299)
          to label %301 unwind label %219

; <label>:301:                                    ; preds = %297
  br i1 %300, label %302, label %333

; <label>:302:                                    ; preds = %301
  %303 = load i32, i32* @x.3
  %304 = load i32, i32* @y.4
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %311, label %463

; <label>:311:                                    ; preds = %302, %463
  %312 = load i32, i32* @x.3
  %313 = load i32, i32* @y.4
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %320, label %463

; <label>:320:                                    ; preds = %311
  %321 = invoke dereferenceable(16) %"struct.std::pair"* @_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_deEv(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %22)
          to label %322 unwind label %219

; <label>:322:                                    ; preds = %320
  store %"struct.std::pair"* %321, %"struct.std::pair"** %24, align 8
  %323 = load %"struct.std::pair"*, %"struct.std::pair"** %24, align 8
  %324 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %323, i32 0, i32 1
  %325 = load i32, i32* %324, align 8
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds [10 x i64], [10 x i64]* %20, i64 0, i64 %326
  %328 = load i64, i64* %327, align 8
  %329 = add nsw i64 %328, 1
  store i64 %329, i64* %327, align 8
  br label %330

; <label>:330:                                    ; preds = %322
  %331 = invoke dereferenceable(24) %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_ppEv(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %22)
          to label %332 unwind label %219

; <label>:332:                                    ; preds = %330
  br label %297

; <label>:333:                                    ; preds = %301
  store i32 0, i32* %25, align 4
  br label %334

; <label>:334:                                    ; preds = %384, %333
  %335 = load i32, i32* @x.3
  %336 = load i32, i32* @y.4
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %343, label %464

; <label>:343:                                    ; preds = %334, %464
  %344 = load i32, i32* %25, align 4
  %345 = icmp slt i32 %344, 10
  %346 = load i32, i32* @x.3
  %347 = load i32, i32* @y.4
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %354, label %464

; <label>:354:                                    ; preds = %343
  br i1 %345, label %355, label %385

; <label>:355:                                    ; preds = %354
  %356 = load i32, i32* %25, align 4
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds [10 x i64], [10 x i64]* %20, i64 0, i64 %357
  %359 = load i64, i64* %358, align 8
  %360 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEl(%"class.std::basic_ostream"* @_ZSt4cout, i64 %359)
          to label %361 unwind label %219

; <label>:361:                                    ; preds = %355
  %362 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* dereferenceable(272) %360, i8 signext 10)
          to label %363 unwind label %219

; <label>:363:                                    ; preds = %361
  br label %364

; <label>:364:                                    ; preds = %363
  %365 = load i32, i32* @x.3
  %366 = load i32, i32* @y.4
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %373, label %467

; <label>:373:                                    ; preds = %364, %467
  %374 = load i32, i32* %25, align 4
  %375 = add nsw i32 %374, 1
  store i32 %375, i32* %25, align 4
  %376 = load i32, i32* @x.3
  %377 = load i32, i32* @y.4
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %384, label %467

; <label>:384:                                    ; preds = %373
  br label %334

; <label>:385:                                    ; preds = %354
  call void @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED2Ev(%"class.__gnu_pbds::gp_hash_table"* %6) #3
  %386 = load i32, i32* %1, align 4
  ret i32 %386

; <label>:387:                                    ; preds = %240
  %388 = load i32, i32* @x.3
  %389 = load i32, i32* @y.4
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %396, label %478

; <label>:396:                                    ; preds = %387, %478
  %397 = load i8*, i8** %9, align 8
  %398 = load i32, i32* %10, align 4
  %399 = insertvalue { i8*, i32 } undef, i8* %397, 0
  %400 = insertvalue { i8*, i32 } %399, i32 %398, 1
  %401 = load i32, i32* @x.3
  %402 = load i32, i32* @y.4
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %409, label %478

; <label>:409:                                    ; preds = %396
  resume { i8*, i32 } %400

; <label>:410:                                    ; preds = %54, %45
  store i32 1, i32* %12, align 4
  %411 = load i32, i32* %7, align 4
  %412 = sub i32 %411, 2
  %413 = mul i32 %412, 2
  %414 = sub i32 %411, 2
  %415 = mul i32 %414, 2
  %416 = sub i32 %411, 2
  %417 = mul i32 %416, 2
  %418 = sub i32 0, %411
  %419 = add i32 %418, 2
  %420 = sub nsw i32 %411, 2
  store i32 %420, i32* %13, align 4
  br label %54

; <label>:421:                                    ; preds = %78, %69
  %422 = load i32, i32* %11, align 4
  %423 = load i64, i64* %2, align 8
  %424 = trunc i64 %423 to i32
  %425 = shl i32 %424, 2
  %426 = sub nsw i32 %424, 2
  store i32 %426, i32* %14, align 4
  br label %78

; <label>:427:                                    ; preds = %109, %100
  %428 = load i32, i32* %99, align 4
  store i32 %428, i32* %15, align 4
  br label %109

; <label>:429:                                    ; preds = %129, %120
  %430 = load i32, i32* %15, align 4
  %431 = load i64, i64* %3, align 8
  %432 = trunc i64 %431 to i32
  %433 = shl i32 %432, 2
  %434 = sub nsw i32 %432, 2
  store i32 %434, i32* %18, align 4
  br label %129

; <label>:435:                                    ; preds = %153, %144
  %436 = load i32, i32* %143, align 4
  %437 = icmp sle i32 %130, %436
  br label %153

; <label>:438:                                    ; preds = %186, %177
  %439 = load i32, i32* %176, align 4
  %440 = sub i32 0, %439
  %441 = add i32 %440, 1
  %442 = sub i32 0, %439
  %443 = add i32 %442, 1
  %444 = shl i32 %439, 1
  %445 = sub i32 %439, 1
  %446 = mul i32 %445, 1
  %447 = add nsw i32 %439, 1
  store i32 %447, i32* %176, align 4
  br label %186

; <label>:448:                                    ; preds = %207, %198
  %449 = load i32, i32* %15, align 4
  %450 = sub i32 %449, 1
  %451 = mul i32 %450, 1
  %452 = add nsw i32 %449, 1
  store i32 %452, i32* %15, align 4
  br label %207

; <label>:453:                                    ; preds = %228, %219
  %454 = landingpad { i8*, i32 }
          cleanup
  %455 = extractvalue { i8*, i32 } %454, 0
  store i8* %455, i8** %9, align 8
  %456 = extractvalue { i8*, i32 } %454, 1
  store i32 %456, i32* %10, align 4
  call void @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED2Ev(%"class.__gnu_pbds::gp_hash_table"* %6) #3
  br label %228

; <label>:457:                                    ; preds = %250, %241
  br label %250

; <label>:458:                                    ; preds = %269, %260
  %459 = load i32, i32* %11, align 4
  %460 = sub i32 0, %459
  %461 = add i32 %460, 1
  %462 = add nsw i32 %459, 1
  store i32 %462, i32* %11, align 4
  br label %269

; <label>:463:                                    ; preds = %311, %302
  br label %311

; <label>:464:                                    ; preds = %343, %334
  %465 = load i32, i32* %25, align 4
  %466 = icmp slt i32 %465, 10
  br label %343

; <label>:467:                                    ; preds = %373, %364
  %468 = load i32, i32* %25, align 4
  %469 = shl i32 %468, 1
  %470 = shl i32 %468, 1
  %471 = sub i32 %468, 1
  %472 = mul i32 %471, 1
  %473 = sub i32 0, %468
  %474 = add i32 %473, 1
  %475 = sub i32 0, %468
  %476 = add i32 %475, 1
  %477 = add nsw i32 %468, 1
  store i32 %477, i32* %25, align 4
  br label %373

; <label>:478:                                    ; preds = %396, %387
  %479 = load i8*, i8** %9, align 8
  %480 = load i32, i32* %10, align 4
  %481 = insertvalue { i8*, i32 } undef, i8* %479, 0
  %482 = insertvalue { i8*, i32 } %481, i32 %480, 1
  br label %396
}

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) #1

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) #1

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z2scIlJlEEvRT_DpRT0_(i64* dereferenceable(8), i64* dereferenceable(8)) #0 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  store i8 0, i8* %5, align 1
  %7 = load i64*, i64** %3, align 8
  store i64 0, i64* %7, align 8
  br label %8

; <label>:8:                                      ; preds = %30, %2
  %9 = call i32 @getchar_unlocked()
  store i32 %9, i32* %6, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp slt i32 %10, 33
  br i1 %11, label %12, label %31

; <label>:12:                                     ; preds = %8
  %13 = load i32, i32* @x.5
  %14 = load i32, i32* @y.6
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %97

; <label>:21:                                     ; preds = %12, %97
  %22 = load i32, i32* @x.5
  %23 = load i32, i32* @y.6
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %97

; <label>:30:                                     ; preds = %21
  br label %8

; <label>:31:                                     ; preds = %8
  %32 = load i32, i32* @x.5
  %33 = load i32, i32* @y.6
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %40, label %98

; <label>:40:                                     ; preds = %31, %98
  %41 = load i32, i32* %6, align 4
  %42 = icmp eq i32 %41, 45
  %43 = load i32, i32* @x.5
  %44 = load i32, i32* @y.6
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %51, label %98

; <label>:51:                                     ; preds = %40
  br i1 %42, label %52, label %54

; <label>:52:                                     ; preds = %51
  store i8 1, i8* %5, align 1
  %53 = call i32 @getchar_unlocked()
  store i32 %53, i32* %6, align 4
  br label %54

; <label>:54:                                     ; preds = %52, %51
  br label %55

; <label>:55:                                     ; preds = %85, %54
  %56 = load i32, i32* %6, align 4
  %57 = icmp sgt i32 %56, 47
  br i1 %57, label %58, label %87

; <label>:58:                                     ; preds = %55
  %59 = load i32, i32* @x.5
  %60 = load i32, i32* @y.6
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %67, label %101

; <label>:67:                                     ; preds = %58, %101
  %68 = load i64*, i64** %3, align 8
  %69 = load i64, i64* %68, align 8
  %70 = mul nsw i64 %69, 10
  %71 = load i32, i32* %6, align 4
  %72 = sext i32 %71 to i64
  %73 = add nsw i64 %70, %72
  %74 = sub nsw i64 %73, 48
  %75 = load i64*, i64** %3, align 8
  store i64 %74, i64* %75, align 8
  %76 = load i32, i32* @x.5
  %77 = load i32, i32* @y.6
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %84, label %101

; <label>:84:                                     ; preds = %67
  br label %85

; <label>:85:                                     ; preds = %84
  %86 = call i32 @getchar_unlocked()
  store i32 %86, i32* %6, align 4
  br label %55

; <label>:87:                                     ; preds = %55
  %88 = load i8, i8* %5, align 1
  %89 = trunc i8 %88 to i1
  br i1 %89, label %90, label %94

; <label>:90:                                     ; preds = %87
  %91 = load i64*, i64** %3, align 8
  %92 = load i64, i64* %91, align 8
  %93 = mul nsw i64 %92, -1
  store i64 %93, i64* %91, align 8
  br label %94

; <label>:94:                                     ; preds = %90, %87
  %95 = load i64*, i64** %4, align 8
  %96 = call zeroext i1 @_Z2scIlEbRT_(i64* dereferenceable(8) %95)
  ret void

; <label>:97:                                     ; preds = %21, %12
  br label %21

; <label>:98:                                     ; preds = %40, %31
  %99 = load i32, i32* %6, align 4
  %100 = icmp eq i32 %99, 45
  br label %40

; <label>:101:                                    ; preds = %67, %58
  %102 = load i64*, i64** %3, align 8
  %103 = load i64, i64* %102, align 8
  %104 = sub i64 %103, 10
  %105 = mul i64 %104, 10
  %106 = sub i64 0, %103
  %107 = add i64 %106, 10
  %108 = shl i64 %103, 10
  %109 = sub i64 0, %103
  %110 = add i64 %109, 10
  %111 = sub i64 %103, 10
  %112 = mul i64 %111, 10
  %113 = sub i64 %103, 10
  %114 = mul i64 %113, 10
  %115 = shl i64 %103, 10
  %116 = mul nsw i64 %103, 10
  %117 = load i32, i32* %6, align 4
  %118 = sext i32 %117 to i64
  %119 = sub i64 %116, %118
  %120 = mul i64 %119, %118
  %121 = sub i64 %116, %118
  %122 = mul i64 %121, %118
  %123 = sub i64 0, %116
  %124 = add i64 %123, %118
  %125 = sub i64 0, %116
  %126 = add i64 %125, %118
  %127 = add nsw i64 %116, %118
  %128 = sub i64 0, %127
  %129 = add i64 %128, 48
  %130 = sub i64 0, %127
  %131 = add i64 %130, 48
  %132 = shl i64 %127, 48
  %133 = sub nsw i64 %127, 48
  %134 = load i64*, i64** %3, align 8
  store i64 %133, i64* %134, align 8
  br label %67
}

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_Z2scIiEbRT_(i32* dereferenceable(4)) #0 comdat {
  %2 = alloca i1, align 1
  %3 = alloca i32*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i8 0, i8* %4, align 1
  %6 = load i32*, i32** %3, align 8
  store i32 0, i32* %6, align 4
  br label %7

; <label>:7:                                      ; preds = %15, %1
  %8 = call i32 @getchar_unlocked()
  store i32 %8, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 33
  br i1 %10, label %11, label %16

; <label>:11:                                     ; preds = %7
  %12 = load i32, i32* %5, align 4
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %11
  store i1 false, i1* %2, align 1
  br label %115

; <label>:15:                                     ; preds = %11
  br label %7

; <label>:16:                                     ; preds = %7
  %17 = load i32, i32* @x.7
  %18 = load i32, i32* @y.8
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %25, label %117

; <label>:25:                                     ; preds = %16, %117
  %26 = load i32, i32* %5, align 4
  %27 = icmp eq i32 %26, 45
  %28 = load i32, i32* @x.7
  %29 = load i32, i32* @y.8
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %117

; <label>:36:                                     ; preds = %25
  br i1 %27, label %37, label %39

; <label>:37:                                     ; preds = %36
  store i8 1, i8* %4, align 1
  %38 = call i32 @getchar_unlocked()
  store i32 %38, i32* %5, align 4
  br label %39

; <label>:39:                                     ; preds = %37, %36
  br label %40

; <label>:40:                                     ; preds = %69, %39
  %41 = load i32, i32* %5, align 4
  %42 = icmp sgt i32 %41, 47
  br i1 %42, label %43, label %71

; <label>:43:                                     ; preds = %40
  %44 = load i32, i32* @x.7
  %45 = load i32, i32* @y.8
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %52, label %120

; <label>:52:                                     ; preds = %43, %120
  %53 = load i32*, i32** %3, align 8
  %54 = load i32, i32* %53, align 4
  %55 = mul nsw i32 %54, 10
  %56 = load i32, i32* %5, align 4
  %57 = add nsw i32 %55, %56
  %58 = sub nsw i32 %57, 48
  %59 = load i32*, i32** %3, align 8
  store i32 %58, i32* %59, align 4
  %60 = load i32, i32* @x.7
  %61 = load i32, i32* @y.8
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %68, label %120

; <label>:68:                                     ; preds = %52
  br label %69

; <label>:69:                                     ; preds = %68
  %70 = call i32 @getchar_unlocked()
  store i32 %70, i32* %5, align 4
  br label %40

; <label>:71:                                     ; preds = %40
  %72 = load i32, i32* @x.7
  %73 = load i32, i32* @y.8
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %80, label %146

; <label>:80:                                     ; preds = %71, %146
  %81 = load i8, i8* %4, align 1
  %82 = trunc i8 %81 to i1
  %83 = load i32, i32* @x.7
  %84 = load i32, i32* @y.8
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %91, label %146

; <label>:91:                                     ; preds = %80
  br i1 %82, label %92, label %96

; <label>:92:                                     ; preds = %91
  %93 = load i32*, i32** %3, align 8
  %94 = load i32, i32* %93, align 4
  %95 = mul nsw i32 %94, -1
  store i32 %95, i32* %93, align 4
  br label %96

; <label>:96:                                     ; preds = %92, %91
  %97 = load i32, i32* @x.7
  %98 = load i32, i32* @y.8
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %105, label %149

; <label>:105:                                    ; preds = %96, %149
  store i1 true, i1* %2, align 1
  %106 = load i32, i32* @x.7
  %107 = load i32, i32* @y.8
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %114, label %149

; <label>:114:                                    ; preds = %105
  br label %115

; <label>:115:                                    ; preds = %114, %14
  %116 = load i1, i1* %2, align 1
  ret i1 %116

; <label>:117:                                    ; preds = %25, %16
  %118 = load i32, i32* %5, align 4
  %119 = icmp eq i32 %118, 45
  br label %25

; <label>:120:                                    ; preds = %52, %43
  %121 = load i32*, i32** %3, align 8
  %122 = load i32, i32* %121, align 4
  %123 = shl i32 %122, 10
  %124 = sub i32 %122, 10
  %125 = mul i32 %124, 10
  %126 = sub i32 %122, 10
  %127 = mul i32 %126, 10
  %128 = sub i32 %122, 10
  %129 = mul i32 %128, 10
  %130 = shl i32 %122, 10
  %131 = mul nsw i32 %122, 10
  %132 = load i32, i32* %5, align 4
  %133 = add nsw i32 %131, %132
  %134 = sub i32 %133, 48
  %135 = mul i32 %134, 48
  %136 = sub i32 0, %133
  %137 = add i32 %136, 48
  %138 = shl i32 %133, 48
  %139 = shl i32 %133, 48
  %140 = sub i32 0, %133
  %141 = add i32 %140, 48
  %142 = sub i32 %133, 48
  %143 = mul i32 %142, 48
  %144 = sub nsw i32 %133, 48
  %145 = load i32*, i32** %3, align 8
  store i32 %144, i32* %145, align 4
  br label %52

; <label>:146:                                    ; preds = %80, %71
  %147 = load i8, i8* %4, align 1
  %148 = trunc i8 %147 to i1
  br label %80

; <label>:149:                                    ; preds = %105, %96
  store i1 true, i1* %2, align 1
  br label %105
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEC2Ev(%"class.__gnu_pbds::gp_hash_table"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::gp_hash_table"*, align 8
  store %"class.__gnu_pbds::gp_hash_table"* %0, %"class.__gnu_pbds::gp_hash_table"** %2, align 8
  %3 = load %"class.__gnu_pbds::gp_hash_table"*, %"class.__gnu_pbds::gp_hash_table"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::gp_hash_table"* %3 to %"class.__gnu_pbds::basic_hash_table"*
  call void @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEC2Ev(%"class.__gnu_pbds::basic_hash_table"* %4)
  %5 = bitcast %"class.__gnu_pbds::gp_hash_table"* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z2scIiJiEEvRT_DpRT0_(i32* dereferenceable(4), i32* dereferenceable(4)) #0 comdat {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i32* %1, i32** %4, align 8
  store i8 0, i8* %5, align 1
  %7 = load i32*, i32** %3, align 8
  store i32 0, i32* %7, align 4
  br label %8

; <label>:8:                                      ; preds = %30, %2
  %9 = load i32, i32* @x.11
  %10 = load i32, i32* @y.12
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %17, label %150

; <label>:17:                                     ; preds = %8, %150
  %18 = call i32 @getchar_unlocked()
  store i32 %18, i32* %6, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %19, 33
  %21 = load i32, i32* @x.11
  %22 = load i32, i32* @y.12
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %29, label %150

; <label>:29:                                     ; preds = %17
  br i1 %20, label %30, label %31

; <label>:30:                                     ; preds = %29
  br label %8

; <label>:31:                                     ; preds = %29
  %32 = load i32, i32* %6, align 4
  %33 = icmp eq i32 %32, 45
  br i1 %33, label %34, label %36

; <label>:34:                                     ; preds = %31
  store i8 1, i8* %5, align 1
  %35 = call i32 @getchar_unlocked()
  store i32 %35, i32* %6, align 4
  br label %36

; <label>:36:                                     ; preds = %34, %31
  %37 = load i32, i32* @x.11
  %38 = load i32, i32* @y.12
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %154

; <label>:45:                                     ; preds = %36, %154
  %46 = load i32, i32* @x.11
  %47 = load i32, i32* @y.12
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %154

; <label>:54:                                     ; preds = %45
  br label %55

; <label>:55:                                     ; preds = %103, %54
  %56 = load i32, i32* @x.11
  %57 = load i32, i32* @y.12
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %64, label %155

; <label>:64:                                     ; preds = %55, %155
  %65 = load i32, i32* %6, align 4
  %66 = icmp sgt i32 %65, 47
  %67 = load i32, i32* @x.11
  %68 = load i32, i32* @y.12
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %75, label %155

; <label>:75:                                     ; preds = %64
  br i1 %66, label %76, label %104

; <label>:76:                                     ; preds = %75
  %77 = load i32*, i32** %3, align 8
  %78 = load i32, i32* %77, align 4
  %79 = mul nsw i32 %78, 10
  %80 = load i32, i32* %6, align 4
  %81 = add nsw i32 %79, %80
  %82 = sub nsw i32 %81, 48
  %83 = load i32*, i32** %3, align 8
  store i32 %82, i32* %83, align 4
  br label %84

; <label>:84:                                     ; preds = %76
  %85 = load i32, i32* @x.11
  %86 = load i32, i32* @y.12
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %93, label %158

; <label>:93:                                     ; preds = %84, %158
  %94 = call i32 @getchar_unlocked()
  store i32 %94, i32* %6, align 4
  %95 = load i32, i32* @x.11
  %96 = load i32, i32* @y.12
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %103, label %158

; <label>:103:                                    ; preds = %93
  br label %55

; <label>:104:                                    ; preds = %75
  %105 = load i32, i32* @x.11
  %106 = load i32, i32* @y.12
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %113, label %160

; <label>:113:                                    ; preds = %104, %160
  %114 = load i8, i8* %5, align 1
  %115 = trunc i8 %114 to i1
  %116 = load i32, i32* @x.11
  %117 = load i32, i32* @y.12
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %124, label %160

; <label>:124:                                    ; preds = %113
  br i1 %115, label %125, label %129

; <label>:125:                                    ; preds = %124
  %126 = load i32*, i32** %3, align 8
  %127 = load i32, i32* %126, align 4
  %128 = mul nsw i32 %127, -1
  store i32 %128, i32* %126, align 4
  br label %129

; <label>:129:                                    ; preds = %125, %124
  %130 = load i32, i32* @x.11
  %131 = load i32, i32* @y.12
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %138, label %163

; <label>:138:                                    ; preds = %129, %163
  %139 = load i32*, i32** %4, align 8
  %140 = call zeroext i1 @_Z2scIiEbRT_(i32* dereferenceable(4) %139)
  %141 = load i32, i32* @x.11
  %142 = load i32, i32* @y.12
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %149, label %163

; <label>:149:                                    ; preds = %138
  ret void

; <label>:150:                                    ; preds = %17, %8
  %151 = call i32 @getchar_unlocked()
  store i32 %151, i32* %6, align 4
  %152 = load i32, i32* %6, align 4
  %153 = icmp slt i32 %152, 33
  br label %17

; <label>:154:                                    ; preds = %45, %36
  br label %45

; <label>:155:                                    ; preds = %64, %55
  %156 = load i32, i32* %6, align 4
  %157 = icmp sgt i32 %156, 47
  br label %64

; <label>:158:                                    ; preds = %93, %84
  %159 = call i32 @getchar_unlocked()
  store i32 %159, i32* %6, align 4
  br label %93

; <label>:160:                                    ; preds = %113, %104
  %161 = load i8, i8* %5, align 1
  %162 = trunc i8 %161 to i1
  br label %113

; <label>:163:                                    ; preds = %138, %129
  %164 = load i32*, i32** %4, align 8
  %165 = call zeroext i1 @_Z2scIiEbRT_(i32* dereferenceable(4) %164)
  br label %138
}

declare i32 @__gxx_personality_v0(...)

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4), i32* dereferenceable(4)) #5 comdat {
  %3 = load i32, i32* @x.13
  %4 = load i32, i32* @y.14
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %53

; <label>:11:                                     ; preds = %2, %53
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32*, align 8
  store i32* %0, i32** %13, align 8
  store i32* %1, i32** %14, align 8
  %15 = load i32*, i32** %13, align 8
  %16 = load i32, i32* %15, align 4
  %17 = load i32*, i32** %14, align 8
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %16, %18
  %20 = load i32, i32* @x.13
  %21 = load i32, i32* @y.14
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %28, label %53

; <label>:28:                                     ; preds = %11
  br i1 %19, label %29, label %31

; <label>:29:                                     ; preds = %28
  %30 = load i32*, i32** %14, align 8
  store i32* %30, i32** %12, align 8
  br label %33

; <label>:31:                                     ; preds = %28
  %32 = load i32*, i32** %13, align 8
  store i32* %32, i32** %12, align 8
  br label %33

; <label>:33:                                     ; preds = %31, %29
  %34 = load i32, i32* @x.13
  %35 = load i32, i32* @y.14
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %42, label %62

; <label>:42:                                     ; preds = %33, %62
  %43 = load i32*, i32** %12, align 8
  %44 = load i32, i32* @x.13
  %45 = load i32, i32* @y.14
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %52, label %62

; <label>:52:                                     ; preds = %42
  ret i32* %43

; <label>:53:                                     ; preds = %11, %2
  %54 = alloca i32*, align 8
  %55 = alloca i32*, align 8
  %56 = alloca i32*, align 8
  store i32* %0, i32** %55, align 8
  store i32* %1, i32** %56, align 8
  %57 = load i32*, i32** %55, align 8
  %58 = load i32, i32* %57, align 4
  %59 = load i32*, i32** %56, align 8
  %60 = load i32, i32* %59, align 4
  %61 = icmp slt i32 %58, %60
  br label %11

; <label>:62:                                     ; preds = %42, %33
  %63 = load i32*, i32** %12, align 8
  br label %42
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* dereferenceable(4), i32* dereferenceable(4)) #5 comdat {
  %3 = load i32, i32* @x.15
  %4 = load i32, i32* @y.16
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %35

; <label>:11:                                     ; preds = %2, %35
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32*, align 8
  store i32* %0, i32** %13, align 8
  store i32* %1, i32** %14, align 8
  %15 = load i32*, i32** %14, align 8
  %16 = load i32, i32* %15, align 4
  %17 = load i32*, i32** %13, align 8
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %16, %18
  %20 = load i32, i32* @x.15
  %21 = load i32, i32* @y.16
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %11
  br i1 %19, label %29, label %31

; <label>:29:                                     ; preds = %28
  %30 = load i32*, i32** %14, align 8
  store i32* %30, i32** %12, align 8
  br label %33

; <label>:31:                                     ; preds = %28
  %32 = load i32*, i32** %13, align 8
  store i32* %32, i32** %12, align 8
  br label %33

; <label>:33:                                     ; preds = %31, %29
  %34 = load i32*, i32** %12, align 8
  ret i32* %34

; <label>:35:                                     ; preds = %11, %2
  %36 = alloca i32*, align 8
  %37 = alloca i32*, align 8
  %38 = alloca i32*, align 8
  store i32* %0, i32** %37, align 8
  store i32* %1, i32** %38, align 8
  %39 = load i32*, i32** %38, align 8
  %40 = load i32, i32* %39, align 4
  %41 = load i32*, i32** %37, align 8
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %40, %42
  br label %11
}

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEixERKl(%"class.__gnu_pbds::detail::gp_ht_map"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca %"struct.std::tr1::integral_constant", align 1
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %6 to i8*
  %9 = getelementptr inbounds i8, i8* %8, i64 72
  %10 = bitcast i8* %9 to %"struct.__gnu_pbds::detail::types_traits"*
  %11 = getelementptr inbounds %"struct.__gnu_pbds::detail::types_traits", %"struct.__gnu_pbds::detail::types_traits"* %10, i32 0, i32 0
  %12 = call dereferenceable(4) i32* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE13subscript_impERKlNS2_17integral_constantIiLi0EEE(%"class.__gnu_pbds::detail::gp_ht_map"* %6, i64* dereferenceable(8) %7)
  ret i32* %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE4sizeEv(%"class.__gnu_pbds::detail::gp_ht_map"*) #5 comdat align 2 {
  %2 = load i32, i32* @x.19
  %3 = load i32, i32* @y.20
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %24

; <label>:10:                                     ; preds = %1, %24
  %11 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  %12 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  %13 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = load i32, i32* @x.19
  %16 = load i32, i32* @y.20
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %10
  ret i64 %14

; <label>:24:                                     ; preds = %10, %1
  %25 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %25, align 8
  %26 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %25, align 8
  %27 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %26, i32 0, i32 4
  %28 = load i64, i64* %27, align 8
  br label %10
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5beginEv(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* noalias sret, %"class.__gnu_pbds::detail::gp_ht_map"*) #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %4 = alloca %"struct.std::pair"*, align 8
  %5 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %1, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  %6 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE18get_start_it_stateERPSt4pairIKliERm(%"class.__gnu_pbds::detail::gp_ht_map"* %6, %"struct.std::pair"** dereferenceable(8) %4, i64* dereferenceable(8) %5)
  %7 = load %"struct.std::pair"*, %"struct.std::pair"** %4, align 8
  %8 = load i64, i64* %5, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2EPSt4pairIKliEmPSI_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %0, %"struct.std::pair"* %7, i64 %8, %"class.__gnu_pbds::detail::gp_ht_map"* %6)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE3endEv(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* noalias sret, %"class.__gnu_pbds::detail::gp_ht_map"*) #0 comdat align 2 {
  %3 = load i32, i32* @x.23
  %4 = load i32, i32* @y.24
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %23

; <label>:11:                                     ; preds = %2, %23
  %12 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %1, %"class.__gnu_pbds::detail::gp_ht_map"** %12, align 8
  %13 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %12, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2ERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* dereferenceable(24) @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE)
  %14 = load i32, i32* @x.23
  %15 = load i32, i32* @y.24
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %11
  ret void

; <label>:23:                                     ; preds = %11, %2
  %24 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %1, %"class.__gnu_pbds::detail::gp_ht_map"** %24, align 8
  %25 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %24, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2ERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* dereferenceable(24) @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE)
  br label %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_neERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* dereferenceable(8)) #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, align 8
  %4 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %3, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %1, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %4, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %3, align 8
  %6 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %5, i32 0, i32 0
  %7 = load %"struct.std::pair"*, %"struct.std::pair"** %6, align 8
  %8 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %4, align 8
  %9 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %8, i32 0, i32 0
  %10 = load %"struct.std::pair"*, %"struct.std::pair"** %9, align 8
  %11 = icmp ne %"struct.std::pair"* %7, %10
  ret i1 %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(16) %"struct.std::pair"* @_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_deEv(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*) #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %2, align 8
  %3 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %3 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*
  %5 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %4 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*
  %6 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %5, i32 0, i32 0
  %7 = load %"struct.std::pair"*, %"struct.std::pair"** %6, align 8
  ret %"struct.std::pair"* %7
}

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(24) %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_ppEv(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*) #0 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %2, align 8
  %3 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %3 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*
  %5 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %4, i32 0, i32 1
  %6 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %5, align 8
  %7 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %3 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*
  %8 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %7 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*
  %9 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %8, i32 0, i32 0
  %10 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %3 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*
  %11 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %10, i32 0, i32 2
  call void @_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE12inc_it_stateERPKSt4pairIKliERm(%"class.__gnu_pbds::detail::gp_ht_map"* %6, %"struct.std::pair"** dereferenceable(8) %9, i64* dereferenceable(8) %11)
  ret %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %3
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* dereferenceable(272), i8 signext) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEl(%"class.std::basic_ostream"*, i64) #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED2Ev(%"class.__gnu_pbds::gp_hash_table"*) unnamed_addr #5 comdat align 2 {
  %2 = load i32, i32* @x.31
  %3 = load i32, i32* @y.32
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %23

; <label>:10:                                     ; preds = %1, %23
  %11 = alloca %"class.__gnu_pbds::gp_hash_table"*, align 8
  store %"class.__gnu_pbds::gp_hash_table"* %0, %"class.__gnu_pbds::gp_hash_table"** %11, align 8
  %12 = load %"class.__gnu_pbds::gp_hash_table"*, %"class.__gnu_pbds::gp_hash_table"** %11, align 8
  %13 = bitcast %"class.__gnu_pbds::gp_hash_table"* %12 to %"class.__gnu_pbds::basic_hash_table"*
  call void @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED2Ev(%"class.__gnu_pbds::basic_hash_table"* %13) #3
  %14 = load i32, i32* @x.31
  %15 = load i32, i32* @y.32
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %10
  ret void

; <label>:23:                                     ; preds = %10, %1
  %24 = alloca %"class.__gnu_pbds::gp_hash_table"*, align 8
  store %"class.__gnu_pbds::gp_hash_table"* %0, %"class.__gnu_pbds::gp_hash_table"** %24, align 8
  %25 = load %"class.__gnu_pbds::gp_hash_table"*, %"class.__gnu_pbds::gp_hash_table"** %24, align 8
  %26 = bitcast %"class.__gnu_pbds::gp_hash_table"* %25 to %"class.__gnu_pbds::basic_hash_table"*
  call void @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED2Ev(%"class.__gnu_pbds::basic_hash_table"* %26) #3
  br label %10
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.1() #0 section ".text.startup" comdat($_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE) {
  %1 = load i8, i8* bitcast (i64* @_ZGVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE to i8*), align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %5

; <label>:3:                                      ; preds = %0
  call void @_ZNSaIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEEC2Ev(%"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE) #3
  %4 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::allocator"*)* @_ZNSaIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEED2Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::allocator", %"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE, i32 0, i32 0), i8* @__dso_handle) #3
  store i64 1, i64* @_ZGVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE, align 8
  br label %5

; <label>:5:                                      ; preds = %3, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEEC2Ev(%"class.std::allocator"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %2, align 8
  %3 = load %"class.std::allocator"*, %"class.std::allocator"** %2, align 8
  %4 = bitcast %"class.std::allocator"* %3 to %"class.__gnu_cxx::new_allocator"*
  call void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEEC2Ev(%"class.__gnu_cxx::new_allocator"* %4) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEED2Ev(%"class.std::allocator"*) unnamed_addr #5 comdat align 2 {
  %2 = load i32, i32* @x.37
  %3 = load i32, i32* @y.38
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %23

; <label>:10:                                     ; preds = %1, %23
  %11 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %11, align 8
  %12 = load %"class.std::allocator"*, %"class.std::allocator"** %11, align 8
  %13 = bitcast %"class.std::allocator"* %12 to %"class.__gnu_cxx::new_allocator"*
  call void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEED2Ev(%"class.__gnu_cxx::new_allocator"* %13) #3
  %14 = load i32, i32* @x.37
  %15 = load i32, i32* @y.38
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %10
  ret void

; <label>:23:                                     ; preds = %10, %1
  %24 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %24, align 8
  %25 = load %"class.std::allocator"*, %"class.std::allocator"** %24, align 8
  %26 = bitcast %"class.std::allocator"* %25 to %"class.__gnu_cxx::new_allocator"*
  call void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEED2Ev(%"class.__gnu_cxx::new_allocator"* %26) #3
  br label %10
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.2() #0 section ".text.startup" comdat($_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE) {
  %1 = load i32, i32* @x.39
  %2 = load i32, i32* @y.40
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %23

; <label>:9:                                      ; preds = %0, %23
  %10 = load i8, i8* bitcast (i64* @_ZGVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE to i8*), align 8
  %11 = icmp eq i8 %10, 0
  %12 = load i32, i32* @x.39
  %13 = load i32, i32* @y.40
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %9
  br i1 %11, label %21, label %22

; <label>:21:                                     ; preds = %20
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2Ev(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE)
  store i64 1, i64* @_ZGVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE, align 8
  br label %22

; <label>:22:                                     ; preds = %21, %20
  ret void

; <label>:23:                                     ; preds = %9, %0
  %24 = load i8, i8* bitcast (i64* @_ZGVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE8s_end_itE to i8*), align 8
  %25 = icmp eq i8 %24, 0
  br label %9
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2Ev(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %2, align 8
  %3 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %3 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE15const_iterator_C2EPKSt4pairIKliEmPKSI_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %4, %"struct.std::pair"* null, i64 0, %"class.__gnu_pbds::detail::gp_ht_map"* null)
  ret void
}

declare i32 @getchar_unlocked() #1

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_Z2scIlEbRT_(i64* dereferenceable(8)) #0 comdat {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %136

; <label>:10:                                     ; preds = %1, %136
  %11 = alloca i1, align 1
  %12 = alloca i64*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  store i64* %0, i64** %12, align 8
  store i8 0, i8* %13, align 1
  %15 = load i64*, i64** %12, align 8
  store i64 0, i64* %15, align 8
  %16 = load i32, i32* @x.43
  %17 = load i32, i32* @y.44
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %24, label %136

; <label>:24:                                     ; preds = %10
  br label %25

; <label>:25:                                     ; preds = %51, %24
  %26 = load i32, i32* @x.43
  %27 = load i32, i32* @y.44
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %34, label %142

; <label>:34:                                     ; preds = %25, %142
  %35 = call i32 @getchar_unlocked()
  store i32 %35, i32* %14, align 4
  %36 = load i32, i32* %14, align 4
  %37 = icmp slt i32 %36, 33
  %38 = load i32, i32* @x.43
  %39 = load i32, i32* @y.44
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %142

; <label>:46:                                     ; preds = %34
  br i1 %37, label %47, label %52

; <label>:47:                                     ; preds = %46
  %48 = load i32, i32* %14, align 4
  %49 = icmp eq i32 %48, -1
  br i1 %49, label %50, label %51

; <label>:50:                                     ; preds = %47
  store i1 false, i1* %11, align 1
  br label %134

; <label>:51:                                     ; preds = %47
  br label %25

; <label>:52:                                     ; preds = %46
  %53 = load i32, i32* @x.43
  %54 = load i32, i32* @y.44
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %61, label %146

; <label>:61:                                     ; preds = %52, %146
  %62 = load i32, i32* %14, align 4
  %63 = icmp eq i32 %62, 45
  %64 = load i32, i32* @x.43
  %65 = load i32, i32* @y.44
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %72, label %146

; <label>:72:                                     ; preds = %61
  br i1 %63, label %73, label %75

; <label>:73:                                     ; preds = %72
  store i8 1, i8* %13, align 1
  %74 = call i32 @getchar_unlocked()
  store i32 %74, i32* %14, align 4
  br label %75

; <label>:75:                                     ; preds = %73, %72
  br label %76

; <label>:76:                                     ; preds = %107, %75
  %77 = load i32, i32* %14, align 4
  %78 = icmp sgt i32 %77, 47
  br i1 %78, label %79, label %108

; <label>:79:                                     ; preds = %76
  %80 = load i64*, i64** %12, align 8
  %81 = load i64, i64* %80, align 8
  %82 = mul nsw i64 %81, 10
  %83 = load i32, i32* %14, align 4
  %84 = sext i32 %83 to i64
  %85 = add nsw i64 %82, %84
  %86 = sub nsw i64 %85, 48
  %87 = load i64*, i64** %12, align 8
  store i64 %86, i64* %87, align 8
  br label %88

; <label>:88:                                     ; preds = %79
  %89 = load i32, i32* @x.43
  %90 = load i32, i32* @y.44
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %97, label %149

; <label>:97:                                     ; preds = %88, %149
  %98 = call i32 @getchar_unlocked()
  store i32 %98, i32* %14, align 4
  %99 = load i32, i32* @x.43
  %100 = load i32, i32* @y.44
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %107, label %149

; <label>:107:                                    ; preds = %97
  br label %76

; <label>:108:                                    ; preds = %76
  %109 = load i32, i32* @x.43
  %110 = load i32, i32* @y.44
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %117, label %151

; <label>:117:                                    ; preds = %108, %151
  %118 = load i8, i8* %13, align 1
  %119 = trunc i8 %118 to i1
  %120 = load i32, i32* @x.43
  %121 = load i32, i32* @y.44
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %128, label %151

; <label>:128:                                    ; preds = %117
  br i1 %119, label %129, label %133

; <label>:129:                                    ; preds = %128
  %130 = load i64*, i64** %12, align 8
  %131 = load i64, i64* %130, align 8
  %132 = mul nsw i64 %131, -1
  store i64 %132, i64* %130, align 8
  br label %133

; <label>:133:                                    ; preds = %129, %128
  store i1 true, i1* %11, align 1
  br label %134

; <label>:134:                                    ; preds = %133, %50
  %135 = load i1, i1* %11, align 1
  ret i1 %135

; <label>:136:                                    ; preds = %10, %1
  %137 = alloca i1, align 1
  %138 = alloca i64*, align 8
  %139 = alloca i8, align 1
  %140 = alloca i32, align 4
  store i64* %0, i64** %138, align 8
  store i8 0, i8* %139, align 1
  %141 = load i64*, i64** %138, align 8
  store i64 0, i64* %141, align 8
  br label %10

; <label>:142:                                    ; preds = %34, %25
  %143 = call i32 @getchar_unlocked()
  store i32 %143, i32* %14, align 4
  %144 = load i32, i32* %14, align 4
  %145 = icmp slt i32 %144, 33
  br label %34

; <label>:146:                                    ; preds = %61, %52
  %147 = load i32, i32* %14, align 4
  %148 = icmp eq i32 %147, 45
  br label %61

; <label>:149:                                    ; preds = %97, %88
  %150 = call i32 @getchar_unlocked()
  store i32 %150, i32* %14, align 4
  br label %97

; <label>:151:                                    ; preds = %117, %108
  %152 = load i8, i8* %13, align 1
  %153 = trunc i8 %152 to i1
  br label %117
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEC2Ev(%"class.__gnu_pbds::basic_hash_table"*) unnamed_addr #0 comdat align 2 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %24

; <label>:10:                                     ; preds = %1, %24
  %11 = alloca %"class.__gnu_pbds::basic_hash_table"*, align 8
  store %"class.__gnu_pbds::basic_hash_table"* %0, %"class.__gnu_pbds::basic_hash_table"** %11, align 8
  %12 = load %"class.__gnu_pbds::basic_hash_table"*, %"class.__gnu_pbds::basic_hash_table"** %11, align 8
  %13 = bitcast %"class.__gnu_pbds::basic_hash_table"* %12 to %"class.__gnu_pbds::detail::gp_ht_map"*
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEC2Ev(%"class.__gnu_pbds::detail::gp_ht_map"* %13)
  %14 = bitcast %"class.__gnu_pbds::basic_hash_table"* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = load i32, i32* @x.45
  %16 = load i32, i32* @y.46
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %10
  ret void

; <label>:24:                                     ; preds = %10, %1
  %25 = alloca %"class.__gnu_pbds::basic_hash_table"*, align 8
  store %"class.__gnu_pbds::basic_hash_table"* %0, %"class.__gnu_pbds::basic_hash_table"** %25, align 8
  %26 = load %"class.__gnu_pbds::basic_hash_table"*, %"class.__gnu_pbds::basic_hash_table"** %25, align 8
  %27 = bitcast %"class.__gnu_pbds::basic_hash_table"* %26 to %"class.__gnu_pbds::detail::gp_ht_map"*
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEC2Ev(%"class.__gnu_pbds::detail::gp_ht_map"* %27)
  %28 = bitcast %"class.__gnu_pbds::basic_hash_table"* %26 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %28, align 8
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED0Ev(%"class.__gnu_pbds::gp_hash_table"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::gp_hash_table"*, align 8
  store %"class.__gnu_pbds::gp_hash_table"* %0, %"class.__gnu_pbds::gp_hash_table"** %2, align 8
  %3 = load %"class.__gnu_pbds::gp_hash_table"*, %"class.__gnu_pbds::gp_hash_table"** %2, align 8
  call void @_ZN10__gnu_pbds13gp_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ESaIcEED2Ev(%"class.__gnu_pbds::gp_hash_table"* %3) #3
  %4 = bitcast %"class.__gnu_pbds::gp_hash_table"* %3 to i8*
  call void @_ZdlPv(i8* %4) #12
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9do_resizeEm(%"class.__gnu_pbds::detail::gp_ht_map"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %7 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %6 to i8*
  %8 = getelementptr inbounds i8, i8* %7, i64 40
  %9 = bitcast i8* %8 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  %10 = load i64, i64* %4, align 8
  %11 = call i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE23get_nearest_larger_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"* %9, i64 %10)
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10resize_impEm(%"class.__gnu_pbds::detail::gp_ht_map"* %5, i64 %11)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEC2Ev(%"class.__gnu_pbds::detail::gp_ht_map"*) unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %137

; <label>:10:                                     ; preds = %1, %137
  %11 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %12 = alloca i8*
  %13 = alloca i32
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  %14 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  %15 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to %"struct.__gnu_pbds::detail::hash_eq_fn"*
  call void @_ZN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEC2Ev(%"struct.__gnu_pbds::detail::hash_eq_fn"* %15)
  %16 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEC2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %16)
  %17 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to i8*
  %19 = getelementptr inbounds i8, i8* %18, i64 64
  %20 = bitcast i8* %19 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %21 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %22 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %21 to i8*
  %23 = getelementptr inbounds i8, i8* %22, i64 40
  %24 = bitcast i8* %23 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  %25 = load i32, i32* @x.51
  %26 = load i32, i32* @y.52
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %33, label %137

; <label>:33:                                     ; preds = %10
  %34 = invoke i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE23get_nearest_larger_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"* %24, i64 1)
          to label %35 unwind label %127

; <label>:35:                                     ; preds = %33
  %36 = load i32, i32* @x.51
  %37 = load i32, i32* @y.52
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %44, label %152

; <label>:44:                                     ; preds = %35, %152
  %45 = load i32, i32* @x.51
  %46 = load i32, i32* @y.52
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %53, label %152

; <label>:53:                                     ; preds = %44
  invoke void @_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEC2Em(%"class.__gnu_pbds::detail::ranged_probe_fn"* %20, i64 %34)
          to label %54 unwind label %127

; <label>:54:                                     ; preds = %53
  %55 = load i32, i32* @x.51
  %56 = load i32, i32* @y.52
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %63, label %153

; <label>:63:                                     ; preds = %54, %153
  %64 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to i8*
  %65 = getelementptr inbounds i8, i8* %64, i64 72
  %66 = bitcast i8* %65 to %"struct.__gnu_pbds::detail::types_traits"*
  %67 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %67, align 8
  %68 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 3
  %69 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %70 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 40
  %72 = bitcast i8* %71 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  %73 = load i32, i32* @x.51
  %74 = load i32, i32* @y.52
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %81, label %153

; <label>:81:                                     ; preds = %63
  %82 = invoke i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE23get_nearest_larger_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"* %72, i64 1)
          to label %83 unwind label %127

; <label>:83:                                     ; preds = %81
  %84 = load i32, i32* @x.51
  %85 = load i32, i32* @y.52
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %92, label %163

; <label>:92:                                     ; preds = %83, %163
  store i64 %82, i64* %68, align 8
  %93 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 4
  store i64 0, i64* %93, align 8
  %94 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 5
  %95 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 3
  %96 = load i64, i64* %95, align 8
  %97 = load i32, i32* @x.51
  %98 = load i32, i32* @y.52
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %105, label %163

; <label>:105:                                    ; preds = %92
  %106 = invoke %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE8allocateEmPKv(%"class.__gnu_cxx::new_allocator"* bitcast (%"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE to %"class.__gnu_cxx::new_allocator"*), i64 %96, i8* null)
          to label %107 unwind label %127

; <label>:107:                                    ; preds = %105
  %108 = load i32, i32* @x.51
  %109 = load i32, i32* @y.52
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %116, label %168

; <label>:116:                                    ; preds = %107, %168
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %106, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %94, align 8
  %117 = load i32, i32* @x.51
  %118 = load i32, i32* @y.52
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %125, label %168

; <label>:125:                                    ; preds = %116
  invoke void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10initializeEv(%"class.__gnu_pbds::detail::gp_ht_map"* %14)
          to label %126 unwind label %127

; <label>:126:                                    ; preds = %125
  ret void

; <label>:127:                                    ; preds = %125, %105, %81, %53, %33
  %128 = landingpad { i8*, i32 }
          cleanup
  %129 = extractvalue { i8*, i32 } %128, 0
  store i8* %129, i8** %12, align 8
  %130 = extractvalue { i8*, i32 } %128, 1
  store i32 %130, i32* %13, align 4
  %131 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %131) #3
  br label %132

; <label>:132:                                    ; preds = %127
  %133 = load i8*, i8** %12, align 8
  %134 = load i32, i32* %13, align 4
  %135 = insertvalue { i8*, i32 } undef, i8* %133, 0
  %136 = insertvalue { i8*, i32 } %135, i32 %134, 1
  resume { i8*, i32 } %136

; <label>:137:                                    ; preds = %10, %1
  %138 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %139 = alloca i8*
  %140 = alloca i32
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %138, align 8
  %141 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %138, align 8
  %142 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %141 to %"struct.__gnu_pbds::detail::hash_eq_fn"*
  call void @_ZN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEC2Ev(%"struct.__gnu_pbds::detail::hash_eq_fn"* %142)
  %143 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %141 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEC2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %143)
  %144 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %141 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %144, align 8
  %145 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %141 to i8*
  %146 = getelementptr inbounds i8, i8* %145, i64 64
  %147 = bitcast i8* %146 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %148 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %141 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %149 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %148 to i8*
  %150 = getelementptr inbounds i8, i8* %149, i64 40
  %151 = bitcast i8* %150 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  br label %10

; <label>:152:                                    ; preds = %44, %35
  br label %44

; <label>:153:                                    ; preds = %63, %54
  %154 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to i8*
  %155 = getelementptr inbounds i8, i8* %154, i64 72
  %156 = bitcast i8* %155 to %"struct.__gnu_pbds::detail::types_traits"*
  %157 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %157, align 8
  %158 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 3
  %159 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %160 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %159 to i8*
  %161 = getelementptr inbounds i8, i8* %160, i64 40
  %162 = bitcast i8* %161 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  br label %63

; <label>:163:                                    ; preds = %92, %83
  store i64 %82, i64* %68, align 8
  %164 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 4
  store i64 0, i64* %164, align 8
  %165 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 5
  %166 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 3
  %167 = load i64, i64* %166, align 8
  br label %92

; <label>:168:                                    ; preds = %116, %107
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %106, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %94, align 8
  br label %116
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED2Ev(%"class.__gnu_pbds::basic_hash_table"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::basic_hash_table"*, align 8
  store %"class.__gnu_pbds::basic_hash_table"* %0, %"class.__gnu_pbds::basic_hash_table"** %2, align 8
  %3 = load %"class.__gnu_pbds::basic_hash_table"*, %"class.__gnu_pbds::basic_hash_table"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::basic_hash_table"* %3 to %"class.__gnu_pbds::detail::gp_ht_map"*
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEED2Ev(%"class.__gnu_pbds::detail::gp_ht_map"* %4) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED0Ev(%"class.__gnu_pbds::basic_hash_table"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::basic_hash_table"*, align 8
  store %"class.__gnu_pbds::basic_hash_table"* %0, %"class.__gnu_pbds::basic_hash_table"** %2, align 8
  %3 = load %"class.__gnu_pbds::basic_hash_table"*, %"class.__gnu_pbds::basic_hash_table"** %2, align 8
  call void @_ZN10__gnu_pbds16basic_hash_tableIliNSt3tr14hashIlEESt8equal_toIlENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEELb0ENS_11gp_hash_tagEN9__gnu_cxx8typelist4nodeINSE_5chainINS_25direct_mask_range_hashingImEENSG_INS_15linear_probe_fnImEENSE_9null_typeEEEEEEESaIcEED2Ev(%"class.__gnu_pbds::basic_hash_table"* %3) #3
  %4 = bitcast %"class.__gnu_pbds::basic_hash_table"* %3 to i8*
  call void @_ZdlPv(i8* %4) #12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEC2Ev(%"struct.__gnu_pbds::detail::hash_eq_fn"*) unnamed_addr #5 comdat align 2 {
  %2 = load i32, i32* @x.57
  %3 = load i32, i32* @y.58
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %23

; <label>:10:                                     ; preds = %1, %23
  %11 = alloca %"struct.__gnu_pbds::detail::hash_eq_fn"*, align 8
  store %"struct.__gnu_pbds::detail::hash_eq_fn"* %0, %"struct.__gnu_pbds::detail::hash_eq_fn"** %11, align 8
  %12 = load %"struct.__gnu_pbds::detail::hash_eq_fn"*, %"struct.__gnu_pbds::detail::hash_eq_fn"** %11, align 8
  %13 = bitcast %"struct.__gnu_pbds::detail::hash_eq_fn"* %12 to %"struct.std::equal_to"*
  %14 = load i32, i32* @x.57
  %15 = load i32, i32* @y.58
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %10
  ret void

; <label>:23:                                     ; preds = %10, %1
  %24 = alloca %"struct.__gnu_pbds::detail::hash_eq_fn"*, align 8
  store %"struct.__gnu_pbds::detail::hash_eq_fn"* %0, %"struct.__gnu_pbds::detail::hash_eq_fn"** %24, align 8
  %25 = load %"struct.__gnu_pbds::detail::hash_eq_fn"*, %"struct.__gnu_pbds::detail::hash_eq_fn"** %24, align 8
  %26 = bitcast %"struct.__gnu_pbds::detail::hash_eq_fn"* %25 to %"struct.std::equal_to"*
  br label %10
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEC2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"*) unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  %3 = alloca i8*
  %4 = alloca i32
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %5 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %6 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to i8*
  %7 = getelementptr inbounds i8, i8* %6, i64 40
  %8 = bitcast i8* %7 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  call void @_ZN10__gnu_pbds28hash_exponential_size_policyImEC2Emm(%"class.__gnu_pbds::hash_exponential_size_policy"* %8, i64 8, i64 2)
  %9 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEC2Eff(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %9, float 1.250000e-01, float 5.000000e-01)
  %10 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.__gnu_pbds::hash_standard_resize_policy", %"class.__gnu_pbds::hash_standard_resize_policy"* %5, i32 0, i32 2
  %12 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to i8*
  %13 = getelementptr inbounds i8, i8* %12, i64 40
  %14 = bitcast i8* %13 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  %15 = invoke i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE23get_nearest_larger_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"* %14, i64 1)
          to label %16 unwind label %21

; <label>:16:                                     ; preds = %1
  store i64 %15, i64* %11, align 8
  %17 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  %18 = getelementptr inbounds %"class.__gnu_pbds::hash_standard_resize_policy", %"class.__gnu_pbds::hash_standard_resize_policy"* %5, i32 0, i32 2
  %19 = load i64, i64* %18, align 8
  invoke void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE25notify_externally_resizedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %17, i64 %19)
          to label %20 unwind label %21

; <label>:20:                                     ; preds = %16
  ret void

; <label>:21:                                     ; preds = %16, %1
  %22 = load i32, i32* @x.59
  %23 = load i32, i32* @y.60
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %49

; <label>:30:                                     ; preds = %21, %49
  %31 = landingpad { i8*, i32 }
          cleanup
  %32 = extractvalue { i8*, i32 } %31, 0
  store i8* %32, i8** %3, align 8
  %33 = extractvalue { i8*, i32 } %31, 1
  store i32 %33, i32* %4, align 4
  %34 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED2Ev(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %34) #3
  %35 = load i32, i32* @x.59
  %36 = load i32, i32* @y.60
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %43, label %49

; <label>:43:                                     ; preds = %30
  br label %44

; <label>:44:                                     ; preds = %43
  %45 = load i8*, i8** %3, align 8
  %46 = load i32, i32* %4, align 4
  %47 = insertvalue { i8*, i32 } undef, i8* %45, 0
  %48 = insertvalue { i8*, i32 } %47, i32 %46, 1
  resume { i8*, i32 } %48

; <label>:49:                                     ; preds = %30, %21
  %50 = landingpad { i8*, i32 }
          cleanup
  %51 = extractvalue { i8*, i32 } %50, 0
  store i8* %51, i8** %3, align 8
  %52 = extractvalue { i8*, i32 } %50, 1
  store i32 %52, i32* %4, align 4
  %53 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED2Ev(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %53) #3
  br label %30
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE23get_nearest_larger_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"*, i64) #0 comdat align 2 {
  %3 = load i32, i32* @x.61
  %4 = load i32, i32* @y.62
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %63

; <label>:11:                                     ; preds = %2, %63
  %12 = alloca %"class.__gnu_pbds::hash_exponential_size_policy"*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_exponential_size_policy"* %0, %"class.__gnu_pbds::hash_exponential_size_policy"** %12, align 8
  store i64 %1, i64* %13, align 8
  %16 = load %"class.__gnu_pbds::hash_exponential_size_policy"*, %"class.__gnu_pbds::hash_exponential_size_policy"** %12, align 8
  %17 = getelementptr inbounds %"class.__gnu_pbds::hash_exponential_size_policy", %"class.__gnu_pbds::hash_exponential_size_policy"* %16, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %14, align 8
  %19 = load i32, i32* @x.61
  %20 = load i32, i32* @y.62
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %63

; <label>:27:                                     ; preds = %11
  br label %28

; <label>:28:                                     ; preds = %59, %27
  %29 = load i32, i32* @x.61
  %30 = load i32, i32* @y.62
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %37, label %71

; <label>:37:                                     ; preds = %28, %71
  %38 = load i64, i64* %14, align 8
  %39 = load i64, i64* %13, align 8
  %40 = icmp ule i64 %38, %39
  %41 = load i32, i32* @x.61
  %42 = load i32, i32* @y.62
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %49, label %71

; <label>:49:                                     ; preds = %37
  br i1 %40, label %50, label %61

; <label>:50:                                     ; preds = %49
  %51 = load i64, i64* %14, align 8
  %52 = getelementptr inbounds %"class.__gnu_pbds::hash_exponential_size_policy", %"class.__gnu_pbds::hash_exponential_size_policy"* %16, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = mul i64 %51, %53
  store i64 %54, i64* %15, align 8
  %55 = load i64, i64* %15, align 8
  %56 = load i64, i64* %14, align 8
  %57 = icmp ult i64 %55, %56
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %50
  call void @_ZN10__gnu_pbds20__throw_insert_errorEv()
  br label %59

; <label>:59:                                     ; preds = %58, %50
  %60 = load i64, i64* %15, align 8
  store i64 %60, i64* %14, align 8
  br label %28

; <label>:61:                                     ; preds = %49
  %62 = load i64, i64* %14, align 8
  ret i64 %62

; <label>:63:                                     ; preds = %11, %2
  %64 = alloca %"class.__gnu_pbds::hash_exponential_size_policy"*, align 8
  %65 = alloca i64, align 8
  %66 = alloca i64, align 8
  %67 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_exponential_size_policy"* %0, %"class.__gnu_pbds::hash_exponential_size_policy"** %64, align 8
  store i64 %1, i64* %65, align 8
  %68 = load %"class.__gnu_pbds::hash_exponential_size_policy"*, %"class.__gnu_pbds::hash_exponential_size_policy"** %64, align 8
  %69 = getelementptr inbounds %"class.__gnu_pbds::hash_exponential_size_policy", %"class.__gnu_pbds::hash_exponential_size_policy"* %68, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %66, align 8
  br label %11

; <label>:71:                                     ; preds = %37, %28
  %72 = load i64, i64* %14, align 8
  %73 = load i64, i64* %13, align 8
  %74 = icmp ule i64 %72, %73
  br label %37
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEC2Em(%"class.__gnu_pbds::detail::ranged_probe_fn"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::ranged_probe_fn"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::ranged_probe_fn"* %0, %"class.__gnu_pbds::detail::ranged_probe_fn"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::detail::ranged_probe_fn"*, %"class.__gnu_pbds::detail::ranged_probe_fn"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %5 to %"struct.std::tr1::hash"*
  %7 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %5 to %"class.__gnu_pbds::direct_mask_range_hashing"*
  %8 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %5 to %"class.__gnu_pbds::linear_probe_fn"*
  %9 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %5 to %"class.__gnu_pbds::direct_mask_range_hashing"*
  %10 = load i64, i64* %4, align 8
  call void @_ZN10__gnu_pbds25direct_mask_range_hashingImE14notify_resizedEm(%"class.__gnu_pbds::direct_mask_range_hashing"* %9, i64 %10)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE8allocateEmPKv(%"class.__gnu_cxx::new_allocator"*, i64, i8*) #0 comdat align 2 {
  %4 = load i32, i32* @x.65
  %5 = load i32, i32* @y.66
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %71

; <label>:12:                                     ; preds = %3, %71
  %13 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %13, align 8
  store i64 %1, i64* %14, align 8
  store i8* %2, i8** %15, align 8
  %16 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %13, align 8
  %17 = load i64, i64* %14, align 8
  %18 = call i64 @_ZNK9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE8max_sizeEv(%"class.__gnu_cxx::new_allocator"* %16) #3
  %19 = icmp ugt i64 %17, %18
  %20 = load i32, i32* @x.65
  %21 = load i32, i32* @y.66
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %28, label %71

; <label>:28:                                     ; preds = %12
  br i1 %19, label %29, label %48

; <label>:29:                                     ; preds = %28
  %30 = load i32, i32* @x.65
  %31 = load i32, i32* @y.66
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %38, label %79

; <label>:38:                                     ; preds = %29, %79
  call void @_ZSt17__throw_bad_allocv() #13
  %39 = load i32, i32* @x.65
  %40 = load i32, i32* @y.66
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %47, label %79

; <label>:47:                                     ; preds = %38
  unreachable

; <label>:48:                                     ; preds = %28
  %49 = load i32, i32* @x.65
  %50 = load i32, i32* @y.66
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %57, label %80

; <label>:57:                                     ; preds = %48, %80
  %58 = load i64, i64* %14, align 8
  %59 = mul i64 %58, 24
  %60 = call i8* @_Znwm(i64 %59)
  %61 = bitcast i8* %60 to %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %70, label %80

; <label>:70:                                     ; preds = %57
  ret %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %61

; <label>:71:                                     ; preds = %12, %3
  %72 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  %73 = alloca i64, align 8
  %74 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %72, align 8
  store i64 %1, i64* %73, align 8
  store i8* %2, i8** %74, align 8
  %75 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %72, align 8
  %76 = load i64, i64* %73, align 8
  %77 = call i64 @_ZNK9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE8max_sizeEv(%"class.__gnu_cxx::new_allocator"* %75) #3
  %78 = icmp ugt i64 %76, %77
  br label %12

; <label>:79:                                     ; preds = %38, %29
  call void @_ZSt17__throw_bad_allocv() #13
  br label %38

; <label>:80:                                     ; preds = %57, %48
  %81 = load i64, i64* %14, align 8
  %82 = mul i64 %81, 24
  %83 = call i8* @_Znwm(i64 %82)
  %84 = bitcast i8* %83 to %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*
  br label %57
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10initializeEv(%"class.__gnu_pbds::detail::gp_ht_map"*) #0 comdat align 2 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %47

; <label>:10:                                     ; preds = %1, %47
  %11 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %12 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  %13 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  %14 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %13 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %15 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %13, i32 0, i32 3
  %16 = load i64, i64* %15, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_resizedEm(%"class.__gnu_pbds::hash_standard_resize_policy"* %14, i64 %16)
  %17 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %13 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_clearedEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %17)
  %18 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %13 to i8*
  %19 = getelementptr inbounds i8, i8* %18, i64 64
  %20 = bitcast i8* %19 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %21 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %13, i32 0, i32 3
  %22 = load i64, i64* %21, align 8
  call void @_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EE14notify_resizedEm(%"class.__gnu_pbds::detail::ranged_probe_fn"* %20, i64 %22)
  store i64 0, i64* %12, align 8
  %23 = load i32, i32* @x.67
  %24 = load i32, i32* @y.68
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %31, label %47

; <label>:31:                                     ; preds = %10
  br label %32

; <label>:32:                                     ; preds = %43, %31
  %33 = load i64, i64* %12, align 8
  %34 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %13, i32 0, i32 3
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %33, %35
  br i1 %36, label %37, label %46

; <label>:37:                                     ; preds = %32
  %38 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %13, i32 0, i32 5
  %39 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %38, align 8
  %40 = load i64, i64* %12, align 8
  %41 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %39, i64 %40
  %42 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %41, i32 0, i32 1
  store i8 0, i8* %42, align 8
  br label %43

; <label>:43:                                     ; preds = %37
  %44 = load i64, i64* %12, align 8
  %45 = add i64 %44, 1
  store i64 %45, i64* %12, align 8
  br label %32

; <label>:46:                                     ; preds = %32
  ret void

; <label>:47:                                     ; preds = %10, %1
  %48 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %49 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %48, align 8
  %50 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %48, align 8
  %51 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %50 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %52 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %50, i32 0, i32 3
  %53 = load i64, i64* %52, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_resizedEm(%"class.__gnu_pbds::hash_standard_resize_policy"* %51, i64 %53)
  %54 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %50 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_clearedEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %54)
  %55 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %50 to i8*
  %56 = getelementptr inbounds i8, i8* %55, i64 64
  %57 = bitcast i8* %56 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %58 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %50, i32 0, i32 3
  %59 = load i64, i64* %58, align 8
  call void @_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EE14notify_resizedEm(%"class.__gnu_pbds::detail::ranged_probe_fn"* %57, i64 %59)
  store i64 0, i64* %49, align 8
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEED2Ev(%"class.__gnu_pbds::detail::gp_ht_map"*) unnamed_addr #5 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %3 = alloca i8*
  %4 = alloca i32
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %2, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %2, align 8
  %6 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %6, align 8
  invoke void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE14deallocate_allEv(%"class.__gnu_pbds::detail::gp_ht_map"* %5)
          to label %7 unwind label %27

; <label>:7:                                      ; preds = %1
  %8 = load i32, i32* @x.69
  %9 = load i32, i32* @y.70
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %16, label %70

; <label>:16:                                     ; preds = %7, %70
  %17 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %17) #3
  %18 = load i32, i32* @x.69
  %19 = load i32, i32* @y.70
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %70

; <label>:26:                                     ; preds = %16
  ret void

; <label>:27:                                     ; preds = %1
  %28 = load i32, i32* @x.69
  %29 = load i32, i32* @y.70
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %72

; <label>:36:                                     ; preds = %27, %72
  %37 = landingpad { i8*, i32 }
          catch i8* null
  %38 = extractvalue { i8*, i32 } %37, 0
  store i8* %38, i8** %3, align 8
  %39 = extractvalue { i8*, i32 } %37, 1
  store i32 %39, i32* %4, align 4
  %40 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %40) #3
  %41 = load i32, i32* @x.69
  %42 = load i32, i32* @y.70
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %49, label %72

; <label>:49:                                     ; preds = %36
  br label %50

; <label>:50:                                     ; preds = %49
  %51 = load i32, i32* @x.69
  %52 = load i32, i32* @y.70
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %59, label %77

; <label>:59:                                     ; preds = %50, %77
  %60 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %60) #14
  %61 = load i32, i32* @x.69
  %62 = load i32, i32* @y.70
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %69, label %77

; <label>:69:                                     ; preds = %59
  unreachable

; <label>:70:                                     ; preds = %16, %7
  %71 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %71) #3
  br label %16

; <label>:72:                                     ; preds = %36, %27
  %73 = landingpad { i8*, i32 }
          catch i8* null
  %74 = extractvalue { i8*, i32 } %73, 0
  store i8* %74, i8** %3, align 8
  %75 = extractvalue { i8*, i32 } %73, 1
  store i32 %75, i32* %4, align 4
  %76 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %76) #3
  br label %36

; <label>:77:                                     ; preds = %59, %50
  %78 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %78) #14
  br label %59
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEED0Ev(%"class.__gnu_pbds::detail::gp_ht_map"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %2, align 8
  %3 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %2, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEED2Ev(%"class.__gnu_pbds::detail::gp_ht_map"* %3) #3
  %4 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %3 to i8*
  call void @_ZdlPv(i8* %4) #12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds28hash_exponential_size_policyImEC2Emm(%"class.__gnu_pbds::hash_exponential_size_policy"*, i64, i64) unnamed_addr #5 comdat align 2 {
  %4 = alloca %"class.__gnu_pbds::hash_exponential_size_policy"*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_exponential_size_policy"* %0, %"class.__gnu_pbds::hash_exponential_size_policy"** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"class.__gnu_pbds::hash_exponential_size_policy"*, %"class.__gnu_pbds::hash_exponential_size_policy"** %4, align 8
  %8 = getelementptr inbounds %"class.__gnu_pbds::hash_exponential_size_policy", %"class.__gnu_pbds::hash_exponential_size_policy"* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds %"class.__gnu_pbds::hash_exponential_size_policy", %"class.__gnu_pbds::hash_exponential_size_policy"* %7, i32 0, i32 1
  %11 = load i64, i64* %6, align 8
  store i64 %11, i64* %10, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEC2Eff(%"class.__gnu_pbds::hash_load_check_resize_trigger"*, float, float) unnamed_addr #5 comdat align 2 {
  %4 = load i32, i32* @x.75
  %5 = load i32, i32* @y.76
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %35

; <label>:12:                                     ; preds = %3, %35
  %13 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %13, align 8
  store float %1, float* %14, align 4
  store float %2, float* %15, align 4
  %16 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %13, align 8
  %17 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %16 to %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*
  %18 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %16 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %16, i32 0, i32 1
  %20 = load float, float* %14, align 4
  store float %20, float* %19, align 8
  %21 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %16, i32 0, i32 2
  %22 = load float, float* %15, align 4
  store float %22, float* %21, align 4
  %23 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %16, i32 0, i32 3
  store i64 0, i64* %23, align 8
  %24 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %16, i32 0, i32 4
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %16, i32 0, i32 5
  store i8 0, i8* %25, align 8
  %26 = load i32, i32* @x.75
  %27 = load i32, i32* @y.76
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %34, label %35

; <label>:34:                                     ; preds = %12
  ret void

; <label>:35:                                     ; preds = %12, %3
  %36 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %37 = alloca float, align 4
  %38 = alloca float, align 4
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %36, align 8
  store float %1, float* %37, align 4
  store float %2, float* %38, align 4
  %39 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %36, align 8
  %40 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %39 to %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*
  %41 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %39 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds30hash_load_check_resize_triggerILb0EmEE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %41, align 8
  %42 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %39, i32 0, i32 1
  %43 = load float, float* %37, align 4
  store float %43, float* %42, align 8
  %44 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %39, i32 0, i32 2
  %45 = load float, float* %38, align 4
  store float %45, float* %44, align 4
  %46 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %39, i32 0, i32 3
  store i64 0, i64* %46, align 8
  %47 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %39, i32 0, i32 4
  store i64 0, i64* %47, align 8
  %48 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %39, i32 0, i32 5
  store i8 0, i8* %48, align 8
  br label %12
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE25notify_externally_resizedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"*, i64) #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %3, align 8
  %8 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 5
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 2
  %10 = load float, float* %9, align 4
  %11 = load i64, i64* %4, align 8
  %12 = uitofp i64 %11 to float
  %13 = fmul float %10, %12
  %14 = fsub float %13, 1.000000e+00
  %15 = fptoui float %14 to i64
  store i64 %15, i64* %5, align 8
  %16 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 1
  %17 = load float, float* %16, align 8
  %18 = load i64, i64* %4, align 8
  %19 = uitofp i64 %18 to float
  %20 = fmul float %17, %19
  %21 = fptoui float %20 to i64
  store i64 %21, i64* %6, align 8
  %22 = load i64, i64* %5, align 8
  %23 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 4
  %24 = load i64, i64* %23, align 8
  %25 = icmp uge i64 %22, %24
  br i1 %25, label %26, label %47

; <label>:26:                                     ; preds = %2
  %27 = load i32, i32* @x.77
  %28 = load i32, i32* @y.78
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %35, label %87

; <label>:35:                                     ; preds = %26, %87
  %36 = load i64, i64* %5, align 8
  %37 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 4
  store i64 %36, i64* %37, align 8
  %38 = load i32, i32* @x.77
  %39 = load i32, i32* @y.78
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %87

; <label>:46:                                     ; preds = %35
  br label %68

; <label>:47:                                     ; preds = %2
  %48 = load i32, i32* @x.77
  %49 = load i32, i32* @y.78
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %56, label %90

; <label>:56:                                     ; preds = %47, %90
  %57 = load i64, i64* %6, align 8
  %58 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 3
  store i64 %57, i64* %58, align 8
  %59 = load i32, i32* @x.77
  %60 = load i32, i32* @y.78
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %67, label %90

; <label>:67:                                     ; preds = %56
  br label %68

; <label>:68:                                     ; preds = %67, %46
  %69 = load i32, i32* @x.77
  %70 = load i32, i32* @y.78
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %77, label %93

; <label>:77:                                     ; preds = %68, %93
  %78 = load i32, i32* @x.77
  %79 = load i32, i32* @y.78
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %86, label %93

; <label>:86:                                     ; preds = %77
  ret void

; <label>:87:                                     ; preds = %35, %26
  %88 = load i64, i64* %5, align 8
  %89 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 4
  store i64 %88, i64* %89, align 8
  br label %35

; <label>:90:                                     ; preds = %56, %47
  %91 = load i64, i64* %6, align 8
  %92 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 3
  store i64 %91, i64* %92, align 8
  br label %56

; <label>:93:                                     ; preds = %77, %68
  br label %77
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %3 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED2Ev(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %4) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED0Ev(%"class.__gnu_pbds::hash_standard_resize_policy"*) unnamed_addr #5 comdat align 2 {
  %2 = load i32, i32* @x.81
  %3 = load i32, i32* @y.82
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %23

; <label>:10:                                     ; preds = %1, %23
  %11 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %11, align 8
  %12 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %11, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %12) #3
  %13 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %12 to i8*
  call void @_ZdlPv(i8* %13) #12
  %14 = load i32, i32* @x.81
  %15 = load i32, i32* @y.82
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %10
  ret void

; <label>:23:                                     ; preds = %10, %1
  %24 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %24, align 8
  %25 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %24, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmED2Ev(%"class.__gnu_pbds::hash_standard_resize_policy"* %25) #3
  %26 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %25 to i8*
  call void @_ZdlPv(i8* %26) #12
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE9do_resizeEm(%"class.__gnu_pbds::hash_standard_resize_policy"*, i64) unnamed_addr #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %3, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED2Ev(%"class.__gnu_pbds::hash_load_check_resize_trigger"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED0Ev(%"class.__gnu_pbds::hash_load_check_resize_trigger"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %2, align 8
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmED2Ev(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %3) #3
  %4 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %3 to i8*
  call void @_ZdlPv(i8* %4) #12
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE9do_resizeEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"*, i64) unnamed_addr #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %3, align 8
  call void @abort() #14
  unreachable
                                                  ; No predecessors!
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #7

; Function Attrs: noreturn nounwind
declare void @abort() #8

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds20__throw_insert_errorEv() #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i8*
  %2 = alloca i32
  %3 = call i8* @__cxa_allocate_exception(i64 16) #3
  %4 = bitcast i8* %3 to %"struct.__gnu_pbds::insert_error"*
  %5 = bitcast %"struct.__gnu_pbds::insert_error"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i32 16, i1 false)
  invoke void @_ZN10__gnu_pbds12insert_errorC2Ev(%"struct.__gnu_pbds::insert_error"* %4)
          to label %6 unwind label %25

; <label>:6:                                      ; preds = %0
  %7 = load i32, i32* @x.91
  %8 = load i32, i32* @y.92
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %15, label %35

; <label>:15:                                     ; preds = %6, %35
  call void @__cxa_throw(i8* %3, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds12insert_errorE to i8*), i8* bitcast (void (%"struct.__gnu_pbds::insert_error"*)* @_ZN10__gnu_pbds12insert_errorD2Ev to i8*)) #13
  %16 = load i32, i32* @x.91
  %17 = load i32, i32* @y.92
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %24, label %35

; <label>:24:                                     ; preds = %15
  unreachable

; <label>:25:                                     ; preds = %0
  %26 = landingpad { i8*, i32 }
          cleanup
  %27 = extractvalue { i8*, i32 } %26, 0
  store i8* %27, i8** %1, align 8
  %28 = extractvalue { i8*, i32 } %26, 1
  store i32 %28, i32* %2, align 4
  call void @__cxa_free_exception(i8* %3) #3
  br label %30
                                                  ; No predecessors!
  ret void

; <label>:30:                                     ; preds = %25
  %31 = load i8*, i8** %1, align 8
  %32 = load i32, i32* %2, align 4
  %33 = insertvalue { i8*, i32 } undef, i8* %31, 0
  %34 = insertvalue { i8*, i32 } %33, i32 %32, 1
  resume { i8*, i32 } %34

; <label>:35:                                     ; preds = %15, %6
  call void @__cxa_throw(i8* %3, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds12insert_errorE to i8*), i8* bitcast (void (%"struct.__gnu_pbds::insert_error"*)* @_ZN10__gnu_pbds12insert_errorD2Ev to i8*)) #13
  br label %15
}

declare i8* @__cxa_allocate_exception(i64)

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds12insert_errorC2Ev(%"struct.__gnu_pbds::insert_error"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.__gnu_pbds::insert_error"*, align 8
  store %"struct.__gnu_pbds::insert_error"* %0, %"struct.__gnu_pbds::insert_error"** %2, align 8
  %3 = load %"struct.__gnu_pbds::insert_error"*, %"struct.__gnu_pbds::insert_error"** %2, align 8
  %4 = bitcast %"struct.__gnu_pbds::insert_error"* %3 to %"struct.__gnu_pbds::container_error"*
  call void @_ZN10__gnu_pbds15container_errorC2Ev(%"struct.__gnu_pbds::container_error"* %4)
  %5 = bitcast %"struct.__gnu_pbds::insert_error"* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds12insert_errorE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

declare void @__cxa_free_exception(i8*)

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds12insert_errorD2Ev(%"struct.__gnu_pbds::insert_error"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"struct.__gnu_pbds::insert_error"*, align 8
  store %"struct.__gnu_pbds::insert_error"* %0, %"struct.__gnu_pbds::insert_error"** %2, align 8
  %3 = load %"struct.__gnu_pbds::insert_error"*, %"struct.__gnu_pbds::insert_error"** %2, align 8
  %4 = bitcast %"struct.__gnu_pbds::insert_error"* %3 to %"struct.__gnu_pbds::container_error"*
  call void @_ZN10__gnu_pbds15container_errorD2Ev(%"struct.__gnu_pbds::container_error"* %4) #3
  ret void
}

declare void @__cxa_throw(i8*, i8*, i8*)

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds15container_errorC2Ev(%"struct.__gnu_pbds::container_error"*) unnamed_addr #0 comdat align 2 {
  %2 = load i32, i32* @x.97
  %3 = load i32, i32* @y.98
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %24

; <label>:10:                                     ; preds = %1, %24
  %11 = alloca %"struct.__gnu_pbds::container_error"*, align 8
  store %"struct.__gnu_pbds::container_error"* %0, %"struct.__gnu_pbds::container_error"** %11, align 8
  %12 = load %"struct.__gnu_pbds::container_error"*, %"struct.__gnu_pbds::container_error"** %11, align 8
  %13 = bitcast %"struct.__gnu_pbds::container_error"* %12 to %"class.std::logic_error"*
  call void @_ZNSt11logic_errorC2EPKc(%"class.std::logic_error"* %13, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0))
  %14 = bitcast %"struct.__gnu_pbds::container_error"* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds15container_errorE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = load i32, i32* @x.97
  %16 = load i32, i32* @y.98
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %10
  ret void

; <label>:24:                                     ; preds = %10, %1
  %25 = alloca %"struct.__gnu_pbds::container_error"*, align 8
  store %"struct.__gnu_pbds::container_error"* %0, %"struct.__gnu_pbds::container_error"** %25, align 8
  %26 = load %"struct.__gnu_pbds::container_error"*, %"struct.__gnu_pbds::container_error"** %25, align 8
  %27 = bitcast %"struct.__gnu_pbds::container_error"* %26 to %"class.std::logic_error"*
  call void @_ZNSt11logic_errorC2EPKc(%"class.std::logic_error"* %27, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0))
  %28 = bitcast %"struct.__gnu_pbds::container_error"* %26 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds15container_errorE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %28, align 8
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds12insert_errorD0Ev(%"struct.__gnu_pbds::insert_error"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"struct.__gnu_pbds::insert_error"*, align 8
  store %"struct.__gnu_pbds::insert_error"* %0, %"struct.__gnu_pbds::insert_error"** %2, align 8
  %3 = load %"struct.__gnu_pbds::insert_error"*, %"struct.__gnu_pbds::insert_error"** %2, align 8
  call void @_ZN10__gnu_pbds12insert_errorD2Ev(%"struct.__gnu_pbds::insert_error"* %3) #3
  %4 = bitcast %"struct.__gnu_pbds::insert_error"* %3 to i8*
  call void @_ZdlPv(i8* %4) #12
  ret void
}

; Function Attrs: nounwind
declare i8* @_ZNKSt11logic_error4whatEv(%"class.std::logic_error"*) unnamed_addr #2

declare void @_ZNSt11logic_errorC2EPKc(%"class.std::logic_error"*, i8*) unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds15container_errorD2Ev(%"struct.__gnu_pbds::container_error"*) unnamed_addr #5 comdat align 2 {
  %2 = load i32, i32* @x.101
  %3 = load i32, i32* @y.102
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %23

; <label>:10:                                     ; preds = %1, %23
  %11 = alloca %"struct.__gnu_pbds::container_error"*, align 8
  store %"struct.__gnu_pbds::container_error"* %0, %"struct.__gnu_pbds::container_error"** %11, align 8
  %12 = load %"struct.__gnu_pbds::container_error"*, %"struct.__gnu_pbds::container_error"** %11, align 8
  %13 = bitcast %"struct.__gnu_pbds::container_error"* %12 to %"class.std::logic_error"*
  call void @_ZNSt11logic_errorD2Ev(%"class.std::logic_error"* %13) #3
  %14 = load i32, i32* @x.101
  %15 = load i32, i32* @y.102
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %10
  ret void

; <label>:23:                                     ; preds = %10, %1
  %24 = alloca %"struct.__gnu_pbds::container_error"*, align 8
  store %"struct.__gnu_pbds::container_error"* %0, %"struct.__gnu_pbds::container_error"** %24, align 8
  %25 = load %"struct.__gnu_pbds::container_error"*, %"struct.__gnu_pbds::container_error"** %24, align 8
  %26 = bitcast %"struct.__gnu_pbds::container_error"* %25 to %"class.std::logic_error"*
  call void @_ZNSt11logic_errorD2Ev(%"class.std::logic_error"* %26) #3
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds15container_errorD0Ev(%"struct.__gnu_pbds::container_error"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"struct.__gnu_pbds::container_error"*, align 8
  store %"struct.__gnu_pbds::container_error"* %0, %"struct.__gnu_pbds::container_error"** %2, align 8
  %3 = load %"struct.__gnu_pbds::container_error"*, %"struct.__gnu_pbds::container_error"** %2, align 8
  call void @_ZN10__gnu_pbds15container_errorD2Ev(%"struct.__gnu_pbds::container_error"* %3) #3
  %4 = bitcast %"struct.__gnu_pbds::container_error"* %3 to i8*
  call void @_ZdlPv(i8* %4) #12
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt11logic_errorD2Ev(%"class.std::logic_error"*) unnamed_addr #2

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds25direct_mask_range_hashingImE14notify_resizedEm(%"class.__gnu_pbds::direct_mask_range_hashing"*, i64) #0 comdat align 2 {
  %3 = load i32, i32* @x.105
  %4 = load i32, i32* @y.106
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %26

; <label>:11:                                     ; preds = %2, %26
  %12 = alloca %"class.__gnu_pbds::direct_mask_range_hashing"*, align 8
  %13 = alloca i64, align 8
  store %"class.__gnu_pbds::direct_mask_range_hashing"* %0, %"class.__gnu_pbds::direct_mask_range_hashing"** %12, align 8
  store i64 %1, i64* %13, align 8
  %14 = load %"class.__gnu_pbds::direct_mask_range_hashing"*, %"class.__gnu_pbds::direct_mask_range_hashing"** %12, align 8
  %15 = bitcast %"class.__gnu_pbds::direct_mask_range_hashing"* %14 to %"class.__gnu_pbds::detail::mask_based_range_hashing"*
  %16 = load i64, i64* %13, align 8
  call void @_ZN10__gnu_pbds6detail24mask_based_range_hashingImE14notify_resizedEm(%"class.__gnu_pbds::detail::mask_based_range_hashing"* %15, i64 %16)
  %17 = load i32, i32* @x.105
  %18 = load i32, i32* @y.106
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %11
  ret void

; <label>:26:                                     ; preds = %11, %2
  %27 = alloca %"class.__gnu_pbds::direct_mask_range_hashing"*, align 8
  %28 = alloca i64, align 8
  store %"class.__gnu_pbds::direct_mask_range_hashing"* %0, %"class.__gnu_pbds::direct_mask_range_hashing"** %27, align 8
  store i64 %1, i64* %28, align 8
  %29 = load %"class.__gnu_pbds::direct_mask_range_hashing"*, %"class.__gnu_pbds::direct_mask_range_hashing"** %27, align 8
  %30 = bitcast %"class.__gnu_pbds::direct_mask_range_hashing"* %29 to %"class.__gnu_pbds::detail::mask_based_range_hashing"*
  %31 = load i64, i64* %28, align 8
  call void @_ZN10__gnu_pbds6detail24mask_based_range_hashingImE14notify_resizedEm(%"class.__gnu_pbds::detail::mask_based_range_hashing"* %30, i64 %31)
  br label %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail24mask_based_range_hashingImE14notify_resizedEm(%"class.__gnu_pbds::detail::mask_based_range_hashing"*, i64) #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::mask_based_range_hashing"*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::mask_based_range_hashing"* %0, %"class.__gnu_pbds::detail::mask_based_range_hashing"** %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load %"class.__gnu_pbds::detail::mask_based_range_hashing"*, %"class.__gnu_pbds::detail::mask_based_range_hashing"** %3, align 8
  store i64 0, i64* %5, align 8
  br label %7

; <label>:7:                                      ; preds = %29, %2
  %8 = load i32, i32* @x.107
  %9 = load i32, i32* @y.108
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %16, label %85

; <label>:16:                                     ; preds = %7, %85
  %17 = load i64, i64* %4, align 8
  %18 = xor i64 %17, -9223372036854775808
  %19 = icmp ne i64 %18, 0
  %20 = load i32, i32* @x.107
  %21 = load i32, i32* @y.108
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %28, label %85

; <label>:28:                                     ; preds = %16
  br i1 %19, label %29, label %34

; <label>:29:                                     ; preds = %28
  %30 = load i64, i64* %4, align 8
  %31 = shl i64 %30, 1
  store i64 %31, i64* %4, align 8
  %32 = load i64, i64* %5, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %5, align 8
  br label %7

; <label>:34:                                     ; preds = %28
  %35 = getelementptr inbounds %"class.__gnu_pbds::detail::mask_based_range_hashing", %"class.__gnu_pbds::detail::mask_based_range_hashing"* %6, i32 0, i32 0
  store i64 1, i64* %35, align 8
  %36 = load i64, i64* %5, align 8
  %37 = add i64 %36, 2
  store i64 %37, i64* %5, align 8
  br label %38

; <label>:38:                                     ; preds = %65, %34
  %39 = load i64, i64* %5, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %5, align 8
  %41 = icmp ult i64 %39, 64
  br i1 %41, label %42, label %66

; <label>:42:                                     ; preds = %38
  %43 = load i32, i32* @x.107
  %44 = load i32, i32* @y.108
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %51, label %89

; <label>:51:                                     ; preds = %42, %89
  %52 = getelementptr inbounds %"class.__gnu_pbds::detail::mask_based_range_hashing", %"class.__gnu_pbds::detail::mask_based_range_hashing"* %6, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = shl i64 %53, 1
  %55 = xor i64 %54, 1
  %56 = getelementptr inbounds %"class.__gnu_pbds::detail::mask_based_range_hashing", %"class.__gnu_pbds::detail::mask_based_range_hashing"* %6, i32 0, i32 0
  store i64 %55, i64* %56, align 8
  %57 = load i32, i32* @x.107
  %58 = load i32, i32* @y.108
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %65, label %89

; <label>:65:                                     ; preds = %51
  br label %38

; <label>:66:                                     ; preds = %38
  %67 = load i32, i32* @x.107
  %68 = load i32, i32* @y.108
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %75, label %117

; <label>:75:                                     ; preds = %66, %117
  %76 = load i32, i32* @x.107
  %77 = load i32, i32* @y.108
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %84, label %117

; <label>:84:                                     ; preds = %75
  ret void

; <label>:85:                                     ; preds = %16, %7
  %86 = load i64, i64* %4, align 8
  %87 = xor i64 %86, -9223372036854775808
  %88 = icmp ne i64 %87, 0
  br label %16

; <label>:89:                                     ; preds = %51, %42
  %90 = getelementptr inbounds %"class.__gnu_pbds::detail::mask_based_range_hashing", %"class.__gnu_pbds::detail::mask_based_range_hashing"* %6, i32 0, i32 0
  %91 = load i64, i64* %90, align 8
  %92 = sub i64 %91, 1
  %93 = mul i64 %92, 1
  %94 = sub i64 0, %91
  %95 = add i64 %94, 1
  %96 = shl i64 %91, 1
  %97 = sub i64 0, %91
  %98 = add i64 %97, 1
  %99 = shl i64 %91, 1
  %100 = sub i64 0, %91
  %101 = add i64 %100, 1
  %102 = shl i64 %91, 1
  %103 = shl i64 %102, 1
  %104 = shl i64 %102, 1
  %105 = shl i64 %102, 1
  %106 = shl i64 %102, 1
  %107 = shl i64 %102, 1
  %108 = sub i64 %102, 1
  %109 = mul i64 %108, 1
  %110 = sub i64 %102, 1
  %111 = mul i64 %110, 1
  %112 = shl i64 %102, 1
  %113 = sub i64 0, %102
  %114 = add i64 %113, 1
  %115 = xor i64 %102, 1
  %116 = getelementptr inbounds %"class.__gnu_pbds::detail::mask_based_range_hashing", %"class.__gnu_pbds::detail::mask_based_range_hashing"* %6, i32 0, i32 0
  store i64 %115, i64* %116, align 8
  br label %51

; <label>:117:                                    ; preds = %75, %66
  br label %75
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNK9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE8max_sizeEv(%"class.__gnu_cxx::new_allocator"*) #5 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %2, align 8
  ret i64 768614336404564650
}

; Function Attrs: noreturn
declare void @_ZSt17__throw_bad_allocv() #9

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #10

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_resizedEm(%"class.__gnu_pbds::hash_standard_resize_policy"*, i64) #0 comdat align 2 {
  %3 = load i32, i32* @x.111
  %4 = load i32, i32* @y.112
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %28

; <label>:11:                                     ; preds = %2, %28
  %12 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  %13 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %12, align 8
  store i64 %1, i64* %13, align 8
  %14 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %12, align 8
  %15 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %14 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  %16 = load i64, i64* %13, align 8
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14notify_resizedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %15, i64 %16)
  %17 = load i64, i64* %13, align 8
  %18 = getelementptr inbounds %"class.__gnu_pbds::hash_standard_resize_policy", %"class.__gnu_pbds::hash_standard_resize_policy"* %14, i32 0, i32 2
  store i64 %17, i64* %18, align 8
  %19 = load i32, i32* @x.111
  %20 = load i32, i32* @y.112
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %11
  ret void

; <label>:28:                                     ; preds = %11, %2
  %29 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  %30 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %29, align 8
  store i64 %1, i64* %30, align 8
  %31 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %29, align 8
  %32 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %31 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  %33 = load i64, i64* %30, align 8
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14notify_resizedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %32, i64 %33)
  %34 = load i64, i64* %30, align 8
  %35 = getelementptr inbounds %"class.__gnu_pbds::hash_standard_resize_policy", %"class.__gnu_pbds::hash_standard_resize_policy"* %31, i32 0, i32 2
  store i64 %34, i64* %35, align 8
  br label %11
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_clearedEv(%"class.__gnu_pbds::hash_standard_resize_policy"*) #0 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %3 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14notify_clearedEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %4)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EE14notify_resizedEm(%"class.__gnu_pbds::detail::ranged_probe_fn"*, i64) #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::ranged_probe_fn"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::ranged_probe_fn"* %0, %"class.__gnu_pbds::detail::ranged_probe_fn"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::detail::ranged_probe_fn"*, %"class.__gnu_pbds::detail::ranged_probe_fn"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %5 to %"class.__gnu_pbds::direct_mask_range_hashing"*
  %7 = load i64, i64* %4, align 8
  call void @_ZN10__gnu_pbds25direct_mask_range_hashingImE14notify_resizedEm(%"class.__gnu_pbds::direct_mask_range_hashing"* %6, i64 %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14notify_resizedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"*, i64) #5 comdat align 2 {
  %3 = load i32, i32* @x.117
  %4 = load i32, i32* @y.118
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %40

; <label>:11:                                     ; preds = %2, %40
  %12 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %13 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %12, align 8
  store i64 %1, i64* %13, align 8
  %14 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %12, align 8
  %15 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %14, i32 0, i32 5
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %14, i32 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = load i64, i64* %13, align 8
  %19 = uitofp i64 %18 to float
  %20 = fmul float %17, %19
  %21 = fsub float %20, 1.000000e+00
  %22 = fptoui float %21 to i64
  %23 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %14, i32 0, i32 4
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %14, i32 0, i32 1
  %25 = load float, float* %24, align 8
  %26 = load i64, i64* %13, align 8
  %27 = uitofp i64 %26 to float
  %28 = fmul float %25, %27
  %29 = fptoui float %28 to i64
  %30 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %14, i32 0, i32 3
  store i64 %29, i64* %30, align 8
  %31 = load i32, i32* @x.117
  %32 = load i32, i32* @y.118
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %39, label %40

; <label>:39:                                     ; preds = %11
  ret void

; <label>:40:                                     ; preds = %11, %2
  %41 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %42 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %41, align 8
  store i64 %1, i64* %42, align 8
  %43 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %41, align 8
  %44 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %43, i32 0, i32 5
  store i8 0, i8* %44, align 8
  %45 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %43, i32 0, i32 2
  %46 = load float, float* %45, align 4
  %47 = load i64, i64* %42, align 8
  %48 = uitofp i64 %47 to float
  %49 = fsub float %46, %48
  %50 = fmul float %49, %48
  %51 = fsub float %46, %48
  %52 = fmul float %51, %48
  %53 = fmul float %46, %48
  %54 = fsub float -0.000000e+00, %53
  %55 = fadd float %54, 1.000000e+00
  %56 = fsub float %53, 1.000000e+00
  %57 = fmul float %56, 1.000000e+00
  %58 = fsub float -0.000000e+00, %53
  %59 = fadd float %58, 1.000000e+00
  %60 = fsub float -0.000000e+00, %53
  %61 = fadd float %60, 1.000000e+00
  %62 = fsub float %53, 1.000000e+00
  %63 = fmul float %62, 1.000000e+00
  %64 = fsub float -0.000000e+00, %53
  %65 = fadd float %64, 1.000000e+00
  %66 = fsub float %53, 1.000000e+00
  %67 = fptoui float %66 to i64
  %68 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %43, i32 0, i32 4
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %43, i32 0, i32 1
  %70 = load float, float* %69, align 8
  %71 = load i64, i64* %42, align 8
  %72 = uitofp i64 %71 to float
  %73 = fsub float -0.000000e+00, %70
  %74 = fadd float %73, %72
  %75 = fsub float -0.000000e+00, %70
  %76 = fadd float %75, %72
  %77 = fsub float %70, %72
  %78 = fmul float %77, %72
  %79 = fsub float %70, %72
  %80 = fmul float %79, %72
  %81 = fmul float %70, %72
  %82 = fptoui float %81 to i64
  %83 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %43, i32 0, i32 3
  store i64 %82, i64* %83, align 8
  br label %11
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14notify_clearedEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"*) #0 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %3 to %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*
  call void @_ZN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EE8set_sizeEm(%"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"* %4, i64 0)
  %5 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %3, i32 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 0, %6
  %8 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %3, i32 0, i32 5
  %9 = zext i1 %7 to i8
  store i8 %9, i8* %8, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EE8set_sizeEm(%"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*, i64) #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"* %0, %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*, %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"** %3, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE14deallocate_allEv(%"class.__gnu_pbds::detail::gp_ht_map"*) #0 comdat align 2 {
  %2 = load i32, i32* @x.123
  %3 = load i32, i32* @y.124
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %30

; <label>:10:                                     ; preds = %1, %30
  %11 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  %12 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5clearEv(%"class.__gnu_pbds::detail::gp_ht_map"* %12)
  %13 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 5
  %14 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %13, align 8
  %15 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %16 = load i64, i64* %15, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE23erase_all_valid_entriesEPNSI_5entryEm(%"class.__gnu_pbds::detail::gp_ht_map"* %12, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %14, i64 %16)
  %17 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 5
  %18 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %17, align 8
  %19 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %20 = load i64, i64* %19, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE10deallocateEPSL_m(%"class.__gnu_cxx::new_allocator"* bitcast (%"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE to %"class.__gnu_cxx::new_allocator"*), %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %18, i64 %20)
  %21 = load i32, i32* @x.123
  %22 = load i32, i32* @y.124
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %10
  ret void

; <label>:30:                                     ; preds = %10, %1
  %31 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %31, align 8
  %32 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %31, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5clearEv(%"class.__gnu_pbds::detail::gp_ht_map"* %32)
  %33 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %32, i32 0, i32 5
  %34 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %33, align 8
  %35 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %32, i32 0, i32 3
  %36 = load i64, i64* %35, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE23erase_all_valid_entriesEPNSI_5entryEm(%"class.__gnu_pbds::detail::gp_ht_map"* %32, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %34, i64 %36)
  %37 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %32, i32 0, i32 5
  %38 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %37, align 8
  %39 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %32, i32 0, i32 3
  %40 = load i64, i64* %39, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE10deallocateEPSL_m(%"class.__gnu_cxx::new_allocator"* bitcast (%"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE to %"class.__gnu_cxx::new_allocator"*), %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %38, i64 %40)
  br label %10
}

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8*) #11 comdat {
  %2 = call i8* @__cxa_begin_catch(i8* %0) #3
  call void @_ZSt9terminatev() #14
  unreachable
}

declare i8* @__cxa_begin_catch(i8*)

declare void @_ZSt9terminatev()

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5clearEv(%"class.__gnu_pbds::detail::gp_ht_map"*) #0 comdat align 2 {
  %2 = load i32, i32* @x.127
  %3 = load i32, i32* @y.128
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %83

; <label>:10:                                     ; preds = %1, %83
  %11 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  %14 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %11, align 8
  store i64 0, i64* %12, align 8
  %15 = load i32, i32* @x.127
  %16 = load i32, i32* @y.128
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %83

; <label>:23:                                     ; preds = %10
  br label %24

; <label>:24:                                     ; preds = %78, %23
  %25 = load i64, i64* %12, align 8
  %26 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = icmp ult i64 %25, %27
  br i1 %28, label %29, label %81

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %14, i32 0, i32 5
  %31 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %30, align 8
  %32 = load i64, i64* %12, align 8
  %33 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %31, i64 %32
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %33, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %13, align 8
  %34 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %13, align 8
  %35 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %34, i32 0, i32 1
  %36 = load i8, i8* %35, align 8
  %37 = zext i8 %36 to i32
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %59

; <label>:39:                                     ; preds = %29
  %40 = load i32, i32* @x.127
  %41 = load i32, i32* @y.128
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %48, label %88

; <label>:48:                                     ; preds = %39, %88
  %49 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %13, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE11erase_entryEPNSI_5entryE(%"class.__gnu_pbds::detail::gp_ht_map"* %14, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %49)
  %50 = load i32, i32* @x.127
  %51 = load i32, i32* @y.128
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %58, label %88

; <label>:58:                                     ; preds = %48
  br label %59

; <label>:59:                                     ; preds = %58, %29
  %60 = load i32, i32* @x.127
  %61 = load i32, i32* @y.128
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %68, label %90

; <label>:68:                                     ; preds = %59, %90
  %69 = load i32, i32* @x.127
  %70 = load i32, i32* @y.128
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %77, label %90

; <label>:77:                                     ; preds = %68
  br label %78

; <label>:78:                                     ; preds = %77
  %79 = load i64, i64* %12, align 8
  %80 = add i64 %79, 1
  store i64 %80, i64* %12, align 8
  br label %24

; <label>:81:                                     ; preds = %24
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE28do_resize_if_needed_no_throwEv(%"class.__gnu_pbds::detail::gp_ht_map"* %14)
  %82 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %14 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_clearedEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %82)
  ret void

; <label>:83:                                     ; preds = %10, %1
  %84 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %85 = alloca i64, align 8
  %86 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %84, align 8
  %87 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %84, align 8
  store i64 0, i64* %85, align 8
  br label %10

; <label>:88:                                     ; preds = %48, %39
  %89 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %13, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE11erase_entryEPNSI_5entryE(%"class.__gnu_pbds::detail::gp_ht_map"* %14, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %89)
  br label %48

; <label>:90:                                     ; preds = %68, %59
  br label %68
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE23erase_all_valid_entriesEPNSI_5entryEm(%"class.__gnu_pbds::detail::gp_ht_map"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, i64) #5 comdat align 2 {
  %4 = load i32, i32* @x.129
  %5 = load i32, i32* @y.130
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %104

; <label>:12:                                     ; preds = %3, %104
  %13 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %14 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %13, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %1, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %14, align 8
  store i64 %2, i64* %15, align 8
  %18 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %13, align 8
  store i64 0, i64* %16, align 8
  %19 = load i32, i32* @x.129
  %20 = load i32, i32* @y.130
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %104

; <label>:27:                                     ; preds = %12
  br label %28

; <label>:28:                                     ; preds = %102, %27
  %29 = load i64, i64* %16, align 8
  %30 = load i64, i64* %15, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %103

; <label>:32:                                     ; preds = %28
  %33 = load i32, i32* @x.129
  %34 = load i32, i32* @y.130
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %41, label %111

; <label>:41:                                     ; preds = %32, %111
  %42 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %14, align 8
  %43 = load i64, i64* %16, align 8
  %44 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %42, i64 %43
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %44, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %17, align 8
  %45 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %17, align 8
  %46 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %45, i32 0, i32 1
  %47 = load i8, i8* %46, align 8
  %48 = zext i8 %47 to i32
  %49 = icmp eq i32 %48, 1
  %50 = load i32, i32* @x.129
  %51 = load i32, i32* @y.130
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %58, label %111

; <label>:58:                                     ; preds = %41
  br i1 %49, label %59, label %81

; <label>:59:                                     ; preds = %58
  %60 = load i32, i32* @x.129
  %61 = load i32, i32* @y.130
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %68, label %120

; <label>:68:                                     ; preds = %59, %120
  %69 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %17, align 8
  %70 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %69 to %"struct.__gnu_pbds::detail::stored_value"*
  %71 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %70, i32 0, i32 0
  %72 = load i32, i32* @x.129
  %73 = load i32, i32* @y.130
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %80, label %120

; <label>:80:                                     ; preds = %68
  br label %81

; <label>:81:                                     ; preds = %80, %58
  br label %82

; <label>:82:                                     ; preds = %81
  %83 = load i32, i32* @x.129
  %84 = load i32, i32* @y.130
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %91, label %124

; <label>:91:                                     ; preds = %82, %124
  %92 = load i64, i64* %16, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %16, align 8
  %94 = load i32, i32* @x.129
  %95 = load i32, i32* @y.130
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %102, label %124

; <label>:102:                                    ; preds = %91
  br label %28

; <label>:103:                                    ; preds = %28
  ret void

; <label>:104:                                    ; preds = %12, %3
  %105 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %106 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %107 = alloca i64, align 8
  %108 = alloca i64, align 8
  %109 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %105, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %1, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %106, align 8
  store i64 %2, i64* %107, align 8
  %110 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %105, align 8
  store i64 0, i64* %108, align 8
  br label %12

; <label>:111:                                    ; preds = %41, %32
  %112 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %14, align 8
  %113 = load i64, i64* %16, align 8
  %114 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %112, i64 %113
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %114, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %17, align 8
  %115 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %17, align 8
  %116 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %115, i32 0, i32 1
  %117 = load i8, i8* %116, align 8
  %118 = zext i8 %117 to i32
  %119 = icmp eq i32 %118, 1
  br label %41

; <label>:120:                                    ; preds = %68, %59
  %121 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %17, align 8
  %122 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %121 to %"struct.__gnu_pbds::detail::stored_value"*
  %123 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %122, i32 0, i32 0
  br label %68

; <label>:124:                                    ; preds = %91, %82
  %125 = load i64, i64* %16, align 8
  %126 = sub i64 0, %125
  %127 = add i64 %126, 1
  %128 = add i64 %125, 1
  store i64 %128, i64* %16, align 8
  br label %91
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE10deallocateEPSL_m(%"class.__gnu_cxx::new_allocator"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, i64) #5 comdat align 2 {
  %4 = load i32, i32* @x.131
  %5 = load i32, i32* @y.132
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %28

; <label>:12:                                     ; preds = %3, %28
  %13 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  %14 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %15 = alloca i64, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %13, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %1, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %14, align 8
  store i64 %2, i64* %15, align 8
  %16 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %13, align 8
  %17 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %14, align 8
  %18 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %17 to i8*
  call void @_ZdlPv(i8* %18) #3
  %19 = load i32, i32* @x.131
  %20 = load i32, i32* @y.132
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %12
  ret void

; <label>:28:                                     ; preds = %12, %3
  %29 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  %30 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %31 = alloca i64, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %29, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %1, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %30, align 8
  store i64 %2, i64* %31, align 8
  %32 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %29, align 8
  %33 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %30, align 8
  %34 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %33 to i8*
  call void @_ZdlPv(i8* %34) #3
  br label %12
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE11erase_entryEPNSI_5entryE(%"class.__gnu_pbds::detail::gp_ht_map"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*) #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %4 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %1, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %4, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  %6 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %4, align 8
  %7 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %6 to %"struct.__gnu_pbds::detail::stored_value"*
  %8 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %7, i32 0, i32 0
  %9 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %4, align 8
  %10 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %9, i32 0, i32 1
  store i8 2, i8* %10, align 8
  %11 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %12 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %5, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, -1
  store i64 %14, i64* %12, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE13notify_erasedEm(%"class.__gnu_pbds::hash_standard_resize_policy"* %11, i64 %14)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE28do_resize_if_needed_no_throwEv(%"class.__gnu_pbds::detail::gp_ht_map"*) #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %3 = alloca i8*
  %4 = alloca i32
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %2, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %2, align 8
  %6 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %7 = call zeroext i1 @_ZNK10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE16is_resize_neededEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %6)
  br i1 %7, label %9, label %8

; <label>:8:                                      ; preds = %1
  br label %79

; <label>:9:                                      ; preds = %1
  %10 = load i32, i32* @x.135
  %11 = load i32, i32* @y.136
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %18, label %80

; <label>:18:                                     ; preds = %9, %80
  %19 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %20 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %5, i32 0, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %5, i32 0, i32 4
  %23 = load i64, i64* %22, align 8
  %24 = load i32, i32* @x.135
  %25 = load i32, i32* @y.136
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %32, label %80

; <label>:32:                                     ; preds = %18
  %33 = invoke i64 @_ZNK10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE12get_new_sizeEmm(%"class.__gnu_pbds::hash_standard_resize_policy"* %19, i64 %21, i64 %23)
          to label %34 unwind label %36

; <label>:34:                                     ; preds = %32
  invoke void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10resize_impEm(%"class.__gnu_pbds::detail::gp_ht_map"* %5, i64 %33)
          to label %35 unwind label %36

; <label>:35:                                     ; preds = %34
  br label %79

; <label>:36:                                     ; preds = %34, %32
  %37 = load i32, i32* @x.135
  %38 = load i32, i32* @y.136
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %86

; <label>:45:                                     ; preds = %36, %86
  %46 = landingpad { i8*, i32 }
          catch i8* null
  %47 = extractvalue { i8*, i32 } %46, 0
  store i8* %47, i8** %3, align 8
  %48 = extractvalue { i8*, i32 } %46, 1
  store i32 %48, i32* %4, align 4
  %49 = load i32, i32* @x.135
  %50 = load i32, i32* @y.136
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %57, label %86

; <label>:57:                                     ; preds = %45
  br label %58

; <label>:58:                                     ; preds = %57
  %59 = load i32, i32* @x.135
  %60 = load i32, i32* @y.136
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %67, label %90

; <label>:67:                                     ; preds = %58, %90
  %68 = load i8*, i8** %3, align 8
  %69 = call i8* @__cxa_begin_catch(i8* %68) #3
  call void @__cxa_end_catch()
  %70 = load i32, i32* @x.135
  %71 = load i32, i32* @y.136
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %67
  br label %79

; <label>:79:                                     ; preds = %8, %78, %35
  ret void

; <label>:80:                                     ; preds = %18, %9
  %81 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %5 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %82 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %5, i32 0, i32 3
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %5, i32 0, i32 4
  %85 = load i64, i64* %84, align 8
  br label %18

; <label>:86:                                     ; preds = %45, %36
  %87 = landingpad { i8*, i32 }
          catch i8* null
  %88 = extractvalue { i8*, i32 } %87, 0
  store i8* %88, i8** %3, align 8
  %89 = extractvalue { i8*, i32 } %87, 1
  store i32 %89, i32* %4, align 4
  br label %45

; <label>:90:                                     ; preds = %67, %58
  %91 = load i8*, i8** %3, align 8
  %92 = call i8* @__cxa_begin_catch(i8* %91) #3
  call void @__cxa_end_catch()
  br label %67
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE13notify_erasedEm(%"class.__gnu_pbds::hash_standard_resize_policy"*, i64) #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  %7 = load i64, i64* %4, align 8
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE13notify_erasedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %6, i64 %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE13notify_erasedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"*, i64) #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %5 to %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*
  %7 = load i64, i64* %4, align 8
  call void @_ZN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EE8set_sizeEm(%"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"* %6, i64 %7)
  %8 = load i64, i64* %4, align 8
  %9 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %5, i32 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp ule i64 %8, %10
  %12 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %5, i32 0, i32 5
  %13 = zext i1 %11 to i8
  store i8 %13, i8* %12, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_ZNK10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE16is_resize_neededEv(%"class.__gnu_pbds::hash_standard_resize_policy"*) #0 comdat align 2 {
  %2 = load i32, i32* @x.141
  %3 = load i32, i32* @y.142
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %24

; <label>:10:                                     ; preds = %1, %24
  %11 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %11, align 8
  %12 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %11, align 8
  %13 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %12 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  %14 = call zeroext i1 @_ZNK10__gnu_pbds30hash_load_check_resize_triggerILb0EmE16is_resize_neededEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %13)
  %15 = load i32, i32* @x.141
  %16 = load i32, i32* @y.142
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %10
  ret i1 %14

; <label>:24:                                     ; preds = %10, %1
  %25 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %25, align 8
  %26 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %25, align 8
  %27 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %26 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  %28 = call zeroext i1 @_ZNK10__gnu_pbds30hash_load_check_resize_triggerILb0EmE16is_resize_neededEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %27)
  br label %10
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10resize_impEm(%"class.__gnu_pbds::detail::gp_ht_map"*, i64) #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = load i32, i32* @x.143
  %4 = load i32, i32* @y.144
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %270

; <label>:11:                                     ; preds = %2, %270
  %12 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8*
  %18 = alloca i32
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %12, align 8
  store i64 %1, i64* %13, align 8
  %19 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %12, align 8
  %20 = load i64, i64* %13, align 8
  %21 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %20, %22
  %24 = load i32, i32* @x.143
  %25 = load i32, i32* @y.144
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %32, label %270

; <label>:32:                                     ; preds = %11
  br i1 %23, label %33, label %34

; <label>:33:                                     ; preds = %32
  br label %242

; <label>:34:                                     ; preds = %32
  %35 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 3
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %14, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* null, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %37 = load i64, i64* %13, align 8
  %38 = call %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE8allocateEmPKv(%"class.__gnu_cxx::new_allocator"* bitcast (%"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE to %"class.__gnu_cxx::new_allocator"*), i64 %37, i8* null)
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %38, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %39 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %19 to i8*
  %40 = getelementptr inbounds i8, i8* %39, i64 64
  %41 = bitcast i8* %40 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %42 = load i64, i64* %13, align 8
  call void @_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EE14notify_resizedEm(%"class.__gnu_pbds::detail::ranged_probe_fn"* %41, i64 %42)
  %43 = load i64, i64* %13, align 8
  %44 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 3
  store i64 %43, i64* %44, align 8
  store i64 0, i64* %16, align 8
  br label %45

; <label>:45:                                     ; preds = %73, %34
  %46 = load i32, i32* @x.143
  %47 = load i32, i32* @y.144
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %283

; <label>:54:                                     ; preds = %45, %283
  %55 = load i64, i64* %16, align 8
  %56 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 3
  %57 = load i64, i64* %56, align 8
  %58 = icmp ult i64 %55, %57
  %59 = load i32, i32* @x.143
  %60 = load i32, i32* @y.144
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %67, label %283

; <label>:67:                                     ; preds = %54
  br i1 %58, label %68, label %76

; <label>:68:                                     ; preds = %67
  %69 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %70 = load i64, i64* %16, align 8
  %71 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %69, i64 %70
  %72 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %71, i32 0, i32 1
  store i8 0, i8* %72, align 8
  br label %73

; <label>:73:                                     ; preds = %68
  %74 = load i64, i64* %16, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %16, align 8
  br label %45

; <label>:76:                                     ; preds = %67
  %77 = load i32, i32* @x.143
  %78 = load i32, i32* @y.144
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %85, label %288

; <label>:85:                                     ; preds = %76, %288
  %86 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %87 = load i64, i64* %14, align 8
  %88 = load i32, i32* @x.143
  %89 = load i32, i32* @y.144
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %96, label %288

; <label>:96:                                     ; preds = %85
  invoke void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10resize_impEPNSI_5entryEm(%"class.__gnu_pbds::detail::gp_ht_map"* %19, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %86, i64 %87)
          to label %97 unwind label %116

; <label>:97:                                     ; preds = %96
  %98 = load i32, i32* @x.143
  %99 = load i32, i32* @y.144
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %106, label %291

; <label>:106:                                    ; preds = %97, %291
  %107 = load i32, i32* @x.143
  %108 = load i32, i32* @y.144
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %115, label %291

; <label>:115:                                    ; preds = %106
  br label %213

; <label>:116:                                    ; preds = %96
  %117 = landingpad { i8*, i32 }
          catch i8* null
  %118 = extractvalue { i8*, i32 } %117, 0
  store i8* %118, i8** %17, align 8
  %119 = extractvalue { i8*, i32 } %117, 1
  store i32 %119, i32* %18, align 4
  br label %120

; <label>:120:                                    ; preds = %116
  %121 = load i32, i32* @x.143
  %122 = load i32, i32* @y.144
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %129, label %292

; <label>:129:                                    ; preds = %120, %292
  %130 = load i8*, i8** %17, align 8
  %131 = call i8* @__cxa_begin_catch(i8* %130) #3
  %132 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %133 = load i64, i64* %13, align 8
  %134 = load i32, i32* @x.143
  %135 = load i32, i32* @y.144
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %142, label %292

; <label>:142:                                    ; preds = %129
  invoke void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE23erase_all_valid_entriesEPNSI_5entryEm(%"class.__gnu_pbds::detail::gp_ht_map"* %19, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %132, i64 %133)
          to label %143 unwind label %190

; <label>:143:                                    ; preds = %142
  %144 = load i32, i32* @x.143
  %145 = load i32, i32* @y.144
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %152, label %297

; <label>:152:                                    ; preds = %143, %297
  %153 = load i64, i64* %14, align 8
  %154 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 3
  store i64 %153, i64* %154, align 8
  %155 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %156 = load i64, i64* %13, align 8
  %157 = load i32, i32* @x.143
  %158 = load i32, i32* @y.144
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %165, label %297

; <label>:165:                                    ; preds = %152
  invoke void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE10deallocateEPSL_m(%"class.__gnu_cxx::new_allocator"* bitcast (%"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE to %"class.__gnu_cxx::new_allocator"*), %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %155, i64 %156)
          to label %166 unwind label %190

; <label>:166:                                    ; preds = %165
  %167 = load i32, i32* @x.143
  %168 = load i32, i32* @y.144
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %175, label %302

; <label>:175:                                    ; preds = %166, %302
  %176 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %19 to i8*
  %177 = getelementptr inbounds i8, i8* %176, i64 64
  %178 = bitcast i8* %177 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %179 = load i64, i64* %14, align 8
  %180 = load i32, i32* @x.143
  %181 = load i32, i32* @y.144
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %188, label %302

; <label>:188:                                    ; preds = %175
  invoke void @_ZN10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EE14notify_resizedEm(%"class.__gnu_pbds::detail::ranged_probe_fn"* %178, i64 %179)
          to label %189 unwind label %190

; <label>:189:                                    ; preds = %188
  invoke void @__cxa_rethrow() #13
          to label %251 unwind label %190

; <label>:190:                                    ; preds = %189, %188, %165, %142
  %191 = load i32, i32* @x.143
  %192 = load i32, i32* @y.144
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %199, label %307

; <label>:199:                                    ; preds = %190, %307
  %200 = landingpad { i8*, i32 }
          cleanup
  %201 = extractvalue { i8*, i32 } %200, 0
  store i8* %201, i8** %17, align 8
  %202 = extractvalue { i8*, i32 } %200, 1
  store i32 %202, i32* %18, align 4
  %203 = load i32, i32* @x.143
  %204 = load i32, i32* @y.144
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %211, label %307

; <label>:211:                                    ; preds = %199
  invoke void @__cxa_end_catch()
          to label %212 unwind label %248

; <label>:212:                                    ; preds = %211
  br label %243

; <label>:213:                                    ; preds = %115
  %214 = load i32, i32* @x.143
  %215 = load i32, i32* @y.144
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %222, label %311

; <label>:222:                                    ; preds = %213, %311
  %223 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %19 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %224 = load i64, i64* %13, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_resizedEm(%"class.__gnu_pbds::hash_standard_resize_policy"* %223, i64 %224)
  %225 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 5
  %226 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %225, align 8
  %227 = load i64, i64* %14, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE23erase_all_valid_entriesEPNSI_5entryEm(%"class.__gnu_pbds::detail::gp_ht_map"* %19, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %226, i64 %227)
  %228 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 5
  %229 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %228, align 8
  %230 = load i64, i64* %14, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE10deallocateEPSL_m(%"class.__gnu_cxx::new_allocator"* bitcast (%"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE to %"class.__gnu_cxx::new_allocator"*), %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %229, i64 %230)
  %231 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %232 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 5
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %231, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %232, align 8
  %233 = load i32, i32* @x.143
  %234 = load i32, i32* @y.144
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %241, label %311

; <label>:241:                                    ; preds = %222
  br label %242

; <label>:242:                                    ; preds = %241, %33
  ret void

; <label>:243:                                    ; preds = %212
  %244 = load i8*, i8** %17, align 8
  %245 = load i32, i32* %18, align 4
  %246 = insertvalue { i8*, i32 } undef, i8* %244, 0
  %247 = insertvalue { i8*, i32 } %246, i32 %245, 1
  resume { i8*, i32 } %247

; <label>:248:                                    ; preds = %211
  %249 = landingpad { i8*, i32 }
          catch i8* null
  %250 = extractvalue { i8*, i32 } %249, 0
  call void @__clang_call_terminate(i8* %250) #14
  unreachable

; <label>:251:                                    ; preds = %189
  %252 = load i32, i32* @x.143
  %253 = load i32, i32* @y.144
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %260, label %322

; <label>:260:                                    ; preds = %251, %322
  %261 = load i32, i32* @x.143
  %262 = load i32, i32* @y.144
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %269, label %322

; <label>:269:                                    ; preds = %260
  unreachable

; <label>:270:                                    ; preds = %11, %2
  %271 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %272 = alloca i64, align 8
  %273 = alloca i64, align 8
  %274 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %275 = alloca i64, align 8
  %276 = alloca i8*
  %277 = alloca i32
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %271, align 8
  store i64 %1, i64* %272, align 8
  %278 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %271, align 8
  %279 = load i64, i64* %272, align 8
  %280 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %278, i32 0, i32 3
  %281 = load i64, i64* %280, align 8
  %282 = icmp eq i64 %279, %281
  br label %11

; <label>:283:                                    ; preds = %54, %45
  %284 = load i64, i64* %16, align 8
  %285 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 3
  %286 = load i64, i64* %285, align 8
  %287 = icmp ult i64 %284, %286
  br label %54

; <label>:288:                                    ; preds = %85, %76
  %289 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %290 = load i64, i64* %14, align 8
  br label %85

; <label>:291:                                    ; preds = %106, %97
  br label %106

; <label>:292:                                    ; preds = %129, %120
  %293 = load i8*, i8** %17, align 8
  %294 = call i8* @__cxa_begin_catch(i8* %293) #3
  %295 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %296 = load i64, i64* %13, align 8
  br label %129

; <label>:297:                                    ; preds = %152, %143
  %298 = load i64, i64* %14, align 8
  %299 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 3
  store i64 %298, i64* %299, align 8
  %300 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %301 = load i64, i64* %13, align 8
  br label %152

; <label>:302:                                    ; preds = %175, %166
  %303 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %19 to i8*
  %304 = getelementptr inbounds i8, i8* %303, i64 64
  %305 = bitcast i8* %304 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %306 = load i64, i64* %14, align 8
  br label %175

; <label>:307:                                    ; preds = %199, %190
  %308 = landingpad { i8*, i32 }
          cleanup
  %309 = extractvalue { i8*, i32 } %308, 0
  store i8* %309, i8** %17, align 8
  %310 = extractvalue { i8*, i32 } %308, 1
  store i32 %310, i32* %18, align 4
  br label %199

; <label>:311:                                    ; preds = %222, %213
  %312 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %19 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %313 = load i64, i64* %13, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE14notify_resizedEm(%"class.__gnu_pbds::hash_standard_resize_policy"* %312, i64 %313)
  %314 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 5
  %315 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %314, align 8
  %316 = load i64, i64* %14, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE23erase_all_valid_entriesEPNSI_5entryEm(%"class.__gnu_pbds::detail::gp_ht_map"* %19, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %315, i64 %316)
  %317 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 5
  %318 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %317, align 8
  %319 = load i64, i64* %14, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEE10deallocateEPSL_m(%"class.__gnu_cxx::new_allocator"* bitcast (%"class.std::allocator"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE17s_entry_allocatorE to %"class.__gnu_cxx::new_allocator"*), %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %318, i64 %319)
  %320 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %321 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %19, i32 0, i32 5
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %320, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %321, align 8
  br label %222

; <label>:322:                                    ; preds = %260, %251
  br label %260
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE12get_new_sizeEmm(%"class.__gnu_pbds::hash_standard_resize_policy"*, i64, i64) #0 comdat align 2 {
  %4 = alloca i64, align 8
  %5 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  %8 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %5, align 8
  %9 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %8 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  %10 = load i64, i64* %6, align 8
  %11 = load i64, i64* %7, align 8
  %12 = call zeroext i1 @_ZNK10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14is_grow_neededEmm(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %9, i64 %10, i64 %11)
  br i1 %12, label %13, label %37

; <label>:13:                                     ; preds = %3
  %14 = load i32, i32* @x.145
  %15 = load i32, i32* @y.146
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %45

; <label>:22:                                     ; preds = %13, %45
  %23 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %8 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 40
  %25 = bitcast i8* %24 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  %26 = load i64, i64* %6, align 8
  %27 = call i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE23get_nearest_larger_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"* %25, i64 %26)
  store i64 %27, i64* %4, align 8
  %28 = load i32, i32* @x.145
  %29 = load i32, i32* @y.146
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %45

; <label>:36:                                     ; preds = %22
  br label %43

; <label>:37:                                     ; preds = %3
  %38 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %8 to i8*
  %39 = getelementptr inbounds i8, i8* %38, i64 40
  %40 = bitcast i8* %39 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  %41 = load i64, i64* %6, align 8
  %42 = call i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE24get_nearest_smaller_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"* %40, i64 %41)
  store i64 %42, i64* %4, align 8
  br label %43

; <label>:43:                                     ; preds = %37, %36
  %44 = load i64, i64* %4, align 8
  ret i64 %44

; <label>:45:                                     ; preds = %22, %13
  %46 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %8 to i8*
  %47 = getelementptr inbounds i8, i8* %46, i64 40
  %48 = bitcast i8* %47 to %"class.__gnu_pbds::hash_exponential_size_policy"*
  %49 = load i64, i64* %6, align 8
  %50 = call i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE23get_nearest_larger_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"* %48, i64 %49)
  store i64 %50, i64* %4, align 8
  br label %22
}

declare void @__cxa_end_catch()

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK10__gnu_pbds30hash_load_check_resize_triggerILb0EmE16is_resize_neededEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"*) #5 comdat align 2 {
  %2 = load i32, i32* @x.147
  %3 = load i32, i32* @y.148
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %25

; <label>:10:                                     ; preds = %1, %25
  %11 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %11, align 8
  %12 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %11, align 8
  %13 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %12, i32 0, i32 5
  %14 = load i8, i8* %13, align 8
  %15 = trunc i8 %14 to i1
  %16 = load i32, i32* @x.147
  %17 = load i32, i32* @y.148
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %10
  ret i1 %15

; <label>:25:                                     ; preds = %10, %1
  %26 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %26, align 8
  %27 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %26, align 8
  %28 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %27, i32 0, i32 5
  %29 = load i8, i8* %28, align 8
  %30 = trunc i8 %29 to i1
  br label %10
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10resize_impEPNSI_5entryEm(%"class.__gnu_pbds::detail::gp_ht_map"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, i64) #0 comdat align 2 {
  %4 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %5 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %"struct.std::tr1::integral_constant", align 1
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %4, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %1, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %5, align 8
  store i64 %2, i64* %6, align 8
  %9 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %4, align 8
  store i64 0, i64* %7, align 8
  br label %10

; <label>:10:                                     ; preds = %52, %3
  %11 = load i32, i32* @x.149
  %12 = load i32, i32* @y.150
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %19, label %74

; <label>:19:                                     ; preds = %10, %74
  %20 = load i64, i64* %7, align 8
  %21 = load i64, i64* %6, align 8
  %22 = icmp ult i64 %20, %21
  %23 = load i32, i32* @x.149
  %24 = load i32, i32* @y.150
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %31, label %74

; <label>:31:                                     ; preds = %19
  br i1 %22, label %32, label %55

; <label>:32:                                     ; preds = %31
  %33 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %9, i32 0, i32 5
  %34 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %33, align 8
  %35 = load i64, i64* %7, align 8
  %36 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %34, i64 %35
  %37 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %36, i32 0, i32 1
  %38 = load i8, i8* %37, align 8
  %39 = zext i8 %38 to i32
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %51

; <label>:41:                                     ; preds = %32
  %42 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %9, i32 0, i32 5
  %43 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %42, align 8
  %44 = load i64, i64* %7, align 8
  %45 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %43, i64 %44
  %46 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %5, align 8
  %47 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %9 to i8*
  %48 = getelementptr inbounds i8, i8* %47, i64 72
  %49 = bitcast i8* %48 to %"struct.__gnu_pbds::detail::types_traits"*
  %50 = getelementptr inbounds %"struct.__gnu_pbds::detail::types_traits", %"struct.__gnu_pbds::detail::types_traits"* %49, i32 0, i32 0
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE19resize_imp_reassignEPNSI_5entryESK_NS2_17integral_constantIiLi0EEE(%"class.__gnu_pbds::detail::gp_ht_map"* %9, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %45, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %46)
  br label %51

; <label>:51:                                     ; preds = %41, %32
  br label %52

; <label>:52:                                     ; preds = %51
  %53 = load i64, i64* %7, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %7, align 8
  br label %10

; <label>:55:                                     ; preds = %31
  %56 = load i32, i32* @x.149
  %57 = load i32, i32* @y.150
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %64, label %78

; <label>:64:                                     ; preds = %55, %78
  %65 = load i32, i32* @x.149
  %66 = load i32, i32* @y.150
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %73, label %78

; <label>:73:                                     ; preds = %64
  ret void

; <label>:74:                                     ; preds = %19, %10
  %75 = load i64, i64* %7, align 8
  %76 = load i64, i64* %6, align 8
  %77 = icmp ult i64 %75, %76
  br label %19

; <label>:78:                                     ; preds = %64, %55
  br label %64
}

declare void @__cxa_rethrow()

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE19resize_imp_reassignEPNSI_5entryESK_NS2_17integral_constantIiLi0EEE(%"class.__gnu_pbds::detail::gp_ht_map"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*) #0 comdat align 2 {
  %4 = load i32, i32* @x.151
  %5 = load i32, i32* @y.152
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %137

; <label>:12:                                     ; preds = %3, %137
  %13 = alloca %"struct.std::tr1::integral_constant", align 1
  %14 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %15 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %16 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %17 = alloca i64*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %14, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %1, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %2, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %16, align 8
  %22 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %14, align 8
  %23 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %24 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %23 to %"struct.__gnu_pbds::detail::stored_value"*
  %25 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %24, i32 0, i32 0
  %26 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %25, i32 0, i32 0
  store i64* %26, i64** %17, align 8
  %27 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %22 to i8*
  %28 = getelementptr inbounds i8, i8* %27, i64 64
  %29 = bitcast i8* %28 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %30 = load i64*, i64** %17, align 8
  %31 = call i64 @_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKl(%"class.__gnu_pbds::detail::ranged_probe_fn"* %29, i64* dereferenceable(8) %30)
  store i64 %31, i64* %18, align 8
  store i64 0, i64* %19, align 8
  %32 = load i32, i32* @x.151
  %33 = load i32, i32* @y.152
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %40, label %137

; <label>:40:                                     ; preds = %12
  br label %41

; <label>:41:                                     ; preds = %132, %40
  %42 = load i64, i64* %19, align 8
  %43 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %22, i32 0, i32 3
  %44 = load i64, i64* %43, align 8
  %45 = icmp ult i64 %42, %44
  br i1 %45, label %46, label %135

; <label>:46:                                     ; preds = %41
  %47 = load i32, i32* @x.151
  %48 = load i32, i32* @y.152
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %55, label %157

; <label>:55:                                     ; preds = %46, %157
  %56 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %22 to i8*
  %57 = getelementptr inbounds i8, i8* %56, i64 64
  %58 = bitcast i8* %57 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %59 = load i64*, i64** %17, align 8
  %60 = load i64, i64* %18, align 8
  %61 = load i64, i64* %19, align 8
  %62 = call i64 @_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKlmm(%"class.__gnu_pbds::detail::ranged_probe_fn"* %58, i64* dereferenceable(8) %59, i64 %60, i64 %61)
  store i64 %62, i64* %20, align 8
  %63 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %16, align 8
  %64 = load i64, i64* %20, align 8
  %65 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %63, i64 %64
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %65, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %21, align 8
  %66 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %21, align 8
  %67 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %66, i32 0, i32 1
  %68 = load i8, i8* %67, align 8
  %69 = zext i8 %68 to i32
  %70 = load i32, i32* @x.151
  %71 = load i32, i32* @y.152
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %78, label %157

; <label>:78:                                     ; preds = %55
  switch i32 %69, label %112 [
    i32 0, label %79
    i32 2, label %92
    i32 1, label %111
  ]

; <label>:79:                                     ; preds = %78
  %80 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %21, align 8
  %81 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %80 to %"struct.__gnu_pbds::detail::stored_value"*
  %82 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %81, i32 0, i32 0
  %83 = bitcast %"struct.std::pair"* %82 to i8*
  %84 = bitcast i8* %83 to %"struct.std::pair"*
  %85 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %15, align 8
  %86 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %85 to %"struct.__gnu_pbds::detail::stored_value"*
  %87 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %86, i32 0, i32 0
  %88 = bitcast %"struct.std::pair"* %84 to i8*
  %89 = bitcast %"struct.std::pair"* %87 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %88, i8* %89, i64 16, i32 8, i1 false)
  %90 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %21, align 8
  %91 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %90, i32 0, i32 1
  store i8 1, i8* %91, align 8
  br label %136

; <label>:92:                                     ; preds = %78
  %93 = load i32, i32* @x.151
  %94 = load i32, i32* @y.152
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %101, label %172

; <label>:101:                                    ; preds = %92, %172
  %102 = load i32, i32* @x.151
  %103 = load i32, i32* @y.152
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %110, label %172

; <label>:110:                                    ; preds = %101
  br label %113

; <label>:111:                                    ; preds = %78
  br label %113

; <label>:112:                                    ; preds = %78
  br label %113

; <label>:113:                                    ; preds = %112, %111, %110
  %114 = load i32, i32* @x.151
  %115 = load i32, i32* @y.152
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %122, label %173

; <label>:122:                                    ; preds = %113, %173
  %123 = load i32, i32* @x.151
  %124 = load i32, i32* @y.152
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %131, label %173

; <label>:131:                                    ; preds = %122
  br label %132

; <label>:132:                                    ; preds = %131
  %133 = load i64, i64* %19, align 8
  %134 = add i64 %133, 1
  store i64 %134, i64* %19, align 8
  br label %41

; <label>:135:                                    ; preds = %41
  call void @_ZN10__gnu_pbds20__throw_insert_errorEv()
  br label %136

; <label>:136:                                    ; preds = %135, %79
  ret void

; <label>:137:                                    ; preds = %12, %3
  %138 = alloca %"struct.std::tr1::integral_constant", align 1
  %139 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %140 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %141 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %142 = alloca i64*, align 8
  %143 = alloca i64, align 8
  %144 = alloca i64, align 8
  %145 = alloca i64, align 8
  %146 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %139, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %1, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %140, align 8
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %2, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %141, align 8
  %147 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %139, align 8
  %148 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %140, align 8
  %149 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %148 to %"struct.__gnu_pbds::detail::stored_value"*
  %150 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %149, i32 0, i32 0
  %151 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %150, i32 0, i32 0
  store i64* %151, i64** %142, align 8
  %152 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %147 to i8*
  %153 = getelementptr inbounds i8, i8* %152, i64 64
  %154 = bitcast i8* %153 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %155 = load i64*, i64** %142, align 8
  %156 = call i64 @_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKl(%"class.__gnu_pbds::detail::ranged_probe_fn"* %154, i64* dereferenceable(8) %155)
  store i64 %156, i64* %143, align 8
  store i64 0, i64* %144, align 8
  br label %12

; <label>:157:                                    ; preds = %55, %46
  %158 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %22 to i8*
  %159 = getelementptr inbounds i8, i8* %158, i64 64
  %160 = bitcast i8* %159 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %161 = load i64*, i64** %17, align 8
  %162 = load i64, i64* %18, align 8
  %163 = load i64, i64* %19, align 8
  %164 = call i64 @_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKlmm(%"class.__gnu_pbds::detail::ranged_probe_fn"* %160, i64* dereferenceable(8) %161, i64 %162, i64 %163)
  store i64 %164, i64* %20, align 8
  %165 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %16, align 8
  %166 = load i64, i64* %20, align 8
  %167 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %165, i64 %166
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %167, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %21, align 8
  %168 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %21, align 8
  %169 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %168, i32 0, i32 1
  %170 = load i8, i8* %169, align 8
  %171 = zext i8 %170 to i32
  br label %55

; <label>:172:                                    ; preds = %101, %92
  br label %101

; <label>:173:                                    ; preds = %122, %113
  br label %122
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKl(%"class.__gnu_pbds::detail::ranged_probe_fn"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::ranged_probe_fn"*, align 8
  %4 = alloca i64*, align 8
  store %"class.__gnu_pbds::detail::ranged_probe_fn"* %0, %"class.__gnu_pbds::detail::ranged_probe_fn"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"class.__gnu_pbds::detail::ranged_probe_fn"*, %"class.__gnu_pbds::detail::ranged_probe_fn"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %5 to %"class.__gnu_pbds::direct_mask_range_hashing"*
  %7 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %5 to %"struct.std::tr1::hash"*
  %8 = load i64*, i64** %4, align 8
  %9 = load i64, i64* %8, align 8
  %10 = call i64 @_ZNKSt3tr14hashIlEclEl(%"struct.std::tr1::hash"* %7, i64 %9)
  %11 = call i64 @_ZNK10__gnu_pbds25direct_mask_range_hashingImEclEm(%"class.__gnu_pbds::direct_mask_range_hashing"* %6, i64 %10)
  ret i64 %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKlmm(%"class.__gnu_pbds::detail::ranged_probe_fn"*, i64* dereferenceable(8), i64, i64) #0 comdat align 2 {
  %5 = load i32, i32* @x.155
  %6 = load i32, i32* @y.156
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %13, label %35

; <label>:13:                                     ; preds = %4, %35
  %14 = alloca %"class.__gnu_pbds::detail::ranged_probe_fn"*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::ranged_probe_fn"* %0, %"class.__gnu_pbds::detail::ranged_probe_fn"** %14, align 8
  store i64* %1, i64** %15, align 8
  store i64 %2, i64* %16, align 8
  store i64 %3, i64* %17, align 8
  %18 = load %"class.__gnu_pbds::detail::ranged_probe_fn"*, %"class.__gnu_pbds::detail::ranged_probe_fn"** %14, align 8
  %19 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %18 to %"class.__gnu_pbds::direct_mask_range_hashing"*
  %20 = load i64, i64* %16, align 8
  %21 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %18 to %"class.__gnu_pbds::linear_probe_fn"*
  %22 = load i64, i64* %17, align 8
  %23 = call i64 @_ZNK10__gnu_pbds15linear_probe_fnImEclEm(%"class.__gnu_pbds::linear_probe_fn"* %21, i64 %22)
  %24 = add i64 %20, %23
  %25 = call i64 @_ZNK10__gnu_pbds25direct_mask_range_hashingImEclEm(%"class.__gnu_pbds::direct_mask_range_hashing"* %19, i64 %24)
  %26 = load i32, i32* @x.155
  %27 = load i32, i32* @y.156
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %34, label %35

; <label>:34:                                     ; preds = %13
  ret i64 %25

; <label>:35:                                     ; preds = %13, %4
  %36 = alloca %"class.__gnu_pbds::detail::ranged_probe_fn"*, align 8
  %37 = alloca i64*, align 8
  %38 = alloca i64, align 8
  %39 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::ranged_probe_fn"* %0, %"class.__gnu_pbds::detail::ranged_probe_fn"** %36, align 8
  store i64* %1, i64** %37, align 8
  store i64 %2, i64* %38, align 8
  store i64 %3, i64* %39, align 8
  %40 = load %"class.__gnu_pbds::detail::ranged_probe_fn"*, %"class.__gnu_pbds::detail::ranged_probe_fn"** %36, align 8
  %41 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %40 to %"class.__gnu_pbds::direct_mask_range_hashing"*
  %42 = load i64, i64* %38, align 8
  %43 = bitcast %"class.__gnu_pbds::detail::ranged_probe_fn"* %40 to %"class.__gnu_pbds::linear_probe_fn"*
  %44 = load i64, i64* %39, align 8
  %45 = call i64 @_ZNK10__gnu_pbds15linear_probe_fnImEclEm(%"class.__gnu_pbds::linear_probe_fn"* %43, i64 %44)
  %46 = sub i64 %42, %45
  %47 = mul i64 %46, %45
  %48 = sub i64 0, %42
  %49 = add i64 %48, %45
  %50 = sub i64 %42, %45
  %51 = mul i64 %50, %45
  %52 = add i64 %42, %45
  %53 = call i64 @_ZNK10__gnu_pbds25direct_mask_range_hashingImEclEm(%"class.__gnu_pbds::direct_mask_range_hashing"* %41, i64 %52)
  br label %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds25direct_mask_range_hashingImEclEm(%"class.__gnu_pbds::direct_mask_range_hashing"*, i64) #0 comdat align 2 {
  %3 = load i32, i32* @x.157
  %4 = load i32, i32* @y.158
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %27

; <label>:11:                                     ; preds = %2, %27
  %12 = alloca %"class.__gnu_pbds::direct_mask_range_hashing"*, align 8
  %13 = alloca i64, align 8
  store %"class.__gnu_pbds::direct_mask_range_hashing"* %0, %"class.__gnu_pbds::direct_mask_range_hashing"** %12, align 8
  store i64 %1, i64* %13, align 8
  %14 = load %"class.__gnu_pbds::direct_mask_range_hashing"*, %"class.__gnu_pbds::direct_mask_range_hashing"** %12, align 8
  %15 = bitcast %"class.__gnu_pbds::direct_mask_range_hashing"* %14 to %"class.__gnu_pbds::detail::mask_based_range_hashing"*
  %16 = load i64, i64* %13, align 8
  %17 = call i64 @_ZNK10__gnu_pbds6detail24mask_based_range_hashingImE10range_hashEm(%"class.__gnu_pbds::detail::mask_based_range_hashing"* %15, i64 %16)
  %18 = load i32, i32* @x.157
  %19 = load i32, i32* @y.158
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %11
  ret i64 %17

; <label>:27:                                     ; preds = %11, %2
  %28 = alloca %"class.__gnu_pbds::direct_mask_range_hashing"*, align 8
  %29 = alloca i64, align 8
  store %"class.__gnu_pbds::direct_mask_range_hashing"* %0, %"class.__gnu_pbds::direct_mask_range_hashing"** %28, align 8
  store i64 %1, i64* %29, align 8
  %30 = load %"class.__gnu_pbds::direct_mask_range_hashing"*, %"class.__gnu_pbds::direct_mask_range_hashing"** %28, align 8
  %31 = bitcast %"class.__gnu_pbds::direct_mask_range_hashing"* %30 to %"class.__gnu_pbds::detail::mask_based_range_hashing"*
  %32 = load i64, i64* %29, align 8
  %33 = call i64 @_ZNK10__gnu_pbds6detail24mask_based_range_hashingImE10range_hashEm(%"class.__gnu_pbds::detail::mask_based_range_hashing"* %31, i64 %32)
  br label %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt3tr14hashIlEclEl(%"struct.std::tr1::hash"*, i64) #5 comdat align 2 {
  %3 = alloca %"struct.std::tr1::hash"*, align 8
  %4 = alloca i64, align 8
  store %"struct.std::tr1::hash"* %0, %"struct.std::tr1::hash"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"struct.std::tr1::hash"*, %"struct.std::tr1::hash"** %3, align 8
  %6 = load i64, i64* %4, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds6detail24mask_based_range_hashingImE10range_hashEm(%"class.__gnu_pbds::detail::mask_based_range_hashing"*, i64) #5 comdat align 2 {
  %3 = load i32, i32* @x.161
  %4 = load i32, i32* @y.162
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %28

; <label>:11:                                     ; preds = %2, %28
  %12 = alloca %"class.__gnu_pbds::detail::mask_based_range_hashing"*, align 8
  %13 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::mask_based_range_hashing"* %0, %"class.__gnu_pbds::detail::mask_based_range_hashing"** %12, align 8
  store i64 %1, i64* %13, align 8
  %14 = load %"class.__gnu_pbds::detail::mask_based_range_hashing"*, %"class.__gnu_pbds::detail::mask_based_range_hashing"** %12, align 8
  %15 = load i64, i64* %13, align 8
  %16 = getelementptr inbounds %"class.__gnu_pbds::detail::mask_based_range_hashing", %"class.__gnu_pbds::detail::mask_based_range_hashing"* %14, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = and i64 %15, %17
  %19 = load i32, i32* @x.161
  %20 = load i32, i32* @y.162
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %11
  ret i64 %18

; <label>:28:                                     ; preds = %11, %2
  %29 = alloca %"class.__gnu_pbds::detail::mask_based_range_hashing"*, align 8
  %30 = alloca i64, align 8
  store %"class.__gnu_pbds::detail::mask_based_range_hashing"* %0, %"class.__gnu_pbds::detail::mask_based_range_hashing"** %29, align 8
  store i64 %1, i64* %30, align 8
  %31 = load %"class.__gnu_pbds::detail::mask_based_range_hashing"*, %"class.__gnu_pbds::detail::mask_based_range_hashing"** %29, align 8
  %32 = load i64, i64* %30, align 8
  %33 = getelementptr inbounds %"class.__gnu_pbds::detail::mask_based_range_hashing", %"class.__gnu_pbds::detail::mask_based_range_hashing"* %31, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 0, %32
  %36 = add i64 %35, %34
  %37 = sub i64 %32, %34
  %38 = mul i64 %37, %34
  %39 = sub i64 %32, %34
  %40 = mul i64 %39, %34
  %41 = sub i64 0, %32
  %42 = add i64 %41, %34
  %43 = sub i64 0, %32
  %44 = add i64 %43, %34
  %45 = sub i64 0, %32
  %46 = add i64 %45, %34
  %47 = shl i64 %32, %34
  %48 = and i64 %32, %34
  br label %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds15linear_probe_fnImEclEm(%"class.__gnu_pbds::linear_probe_fn"*, i64) #5 comdat align 2 {
  %3 = load i32, i32* @x.163
  %4 = load i32, i32* @y.164
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %25

; <label>:11:                                     ; preds = %2, %25
  %12 = alloca %"class.__gnu_pbds::linear_probe_fn"*, align 8
  %13 = alloca i64, align 8
  store %"class.__gnu_pbds::linear_probe_fn"* %0, %"class.__gnu_pbds::linear_probe_fn"** %12, align 8
  store i64 %1, i64* %13, align 8
  %14 = load %"class.__gnu_pbds::linear_probe_fn"*, %"class.__gnu_pbds::linear_probe_fn"** %12, align 8
  %15 = load i64, i64* %13, align 8
  %16 = load i32, i32* @x.163
  %17 = load i32, i32* @y.164
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %11
  ret i64 %15

; <label>:25:                                     ; preds = %11, %2
  %26 = alloca %"class.__gnu_pbds::linear_probe_fn"*, align 8
  %27 = alloca i64, align 8
  store %"class.__gnu_pbds::linear_probe_fn"* %0, %"class.__gnu_pbds::linear_probe_fn"** %26, align 8
  store i64 %1, i64* %27, align 8
  %28 = load %"class.__gnu_pbds::linear_probe_fn"*, %"class.__gnu_pbds::linear_probe_fn"** %26, align 8
  %29 = load i64, i64* %27, align 8
  br label %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK10__gnu_pbds30hash_load_check_resize_triggerILb0EmE14is_grow_neededEmm(%"class.__gnu_pbds::hash_load_check_resize_trigger"*, i64, i64) #5 comdat align 2 {
  %4 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %4, align 8
  %8 = load i64, i64* %6, align 8
  %9 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %7, i32 0, i32 4
  %10 = load i64, i64* %9, align 8
  %11 = icmp uge i64 %8, %10
  ret i1 %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNK10__gnu_pbds28hash_exponential_size_policyImE24get_nearest_smaller_sizeEm(%"class.__gnu_pbds::hash_exponential_size_policy"*, i64) #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::hash_exponential_size_policy"*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_exponential_size_policy"* %0, %"class.__gnu_pbds::hash_exponential_size_policy"** %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load %"class.__gnu_pbds::hash_exponential_size_policy"*, %"class.__gnu_pbds::hash_exponential_size_policy"** %3, align 8
  %8 = getelementptr inbounds %"class.__gnu_pbds::hash_exponential_size_policy", %"class.__gnu_pbds::hash_exponential_size_policy"* %7, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %5, align 8
  br label %10

; <label>:10:                                     ; preds = %2, %61
  %11 = load i32, i32* @x.167
  %12 = load i32, i32* @y.168
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %19, label %63

; <label>:19:                                     ; preds = %10, %63
  %20 = load i64, i64* %5, align 8
  %21 = getelementptr inbounds %"class.__gnu_pbds::hash_exponential_size_policy", %"class.__gnu_pbds::hash_exponential_size_policy"* %7, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = mul i64 %20, %22
  store i64 %23, i64* %6, align 8
  %24 = load i64, i64* %6, align 8
  %25 = load i64, i64* %5, align 8
  %26 = icmp ult i64 %24, %25
  %27 = load i32, i32* @x.167
  %28 = load i32, i32* @y.168
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %35, label %63

; <label>:35:                                     ; preds = %19
  br i1 %26, label %36, label %55

; <label>:36:                                     ; preds = %35
  %37 = load i32, i32* @x.167
  %38 = load i32, i32* @y.168
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %76

; <label>:45:                                     ; preds = %36, %76
  call void @_ZN10__gnu_pbds20__throw_resize_errorEv()
  %46 = load i32, i32* @x.167
  %47 = load i32, i32* @y.168
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %76

; <label>:54:                                     ; preds = %45
  br label %55

; <label>:55:                                     ; preds = %54, %35
  %56 = load i64, i64* %6, align 8
  %57 = load i64, i64* %4, align 8
  %58 = icmp uge i64 %56, %57
  br i1 %58, label %59, label %61

; <label>:59:                                     ; preds = %55
  %60 = load i64, i64* %5, align 8
  ret i64 %60

; <label>:61:                                     ; preds = %55
  %62 = load i64, i64* %6, align 8
  store i64 %62, i64* %5, align 8
  br label %10

; <label>:63:                                     ; preds = %19, %10
  %64 = load i64, i64* %5, align 8
  %65 = getelementptr inbounds %"class.__gnu_pbds::hash_exponential_size_policy", %"class.__gnu_pbds::hash_exponential_size_policy"* %7, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 0, %64
  %68 = add i64 %67, %66
  %69 = shl i64 %64, %66
  %70 = sub i64 0, %64
  %71 = add i64 %70, %66
  %72 = mul i64 %64, %66
  store i64 %72, i64* %6, align 8
  %73 = load i64, i64* %6, align 8
  %74 = load i64, i64* %5, align 8
  %75 = icmp ult i64 %73, %74
  br label %19

; <label>:76:                                     ; preds = %45, %36
  call void @_ZN10__gnu_pbds20__throw_resize_errorEv()
  br label %45
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds20__throw_resize_errorEv() #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = load i32, i32* @x.169
  %2 = load i32, i32* @y.170
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %53

; <label>:9:                                      ; preds = %0, %53
  %10 = alloca i8*
  %11 = alloca i32
  %12 = call i8* @__cxa_allocate_exception(i64 16) #3
  %13 = bitcast i8* %12 to %"struct.__gnu_pbds::resize_error"*
  %14 = bitcast %"struct.__gnu_pbds::resize_error"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 16, i32 16, i1 false)
  %15 = load i32, i32* @x.169
  %16 = load i32, i32* @y.170
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %53

; <label>:23:                                     ; preds = %9
  invoke void @_ZN10__gnu_pbds12resize_errorC2Ev(%"struct.__gnu_pbds::resize_error"* %13)
          to label %24 unwind label %25

; <label>:24:                                     ; preds = %23
  call void @__cxa_throw(i8* %12, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN10__gnu_pbds12resize_errorE to i8*), i8* bitcast (void (%"struct.__gnu_pbds::resize_error"*)* @_ZN10__gnu_pbds12resize_errorD2Ev to i8*)) #13
  unreachable

; <label>:25:                                     ; preds = %23
  %26 = load i32, i32* @x.169
  %27 = load i32, i32* @y.170
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %34, label %59

; <label>:34:                                     ; preds = %25, %59
  %35 = landingpad { i8*, i32 }
          cleanup
  %36 = extractvalue { i8*, i32 } %35, 0
  store i8* %36, i8** %10, align 8
  %37 = extractvalue { i8*, i32 } %35, 1
  store i32 %37, i32* %11, align 4
  call void @__cxa_free_exception(i8* %12) #3
  %38 = load i32, i32* @x.169
  %39 = load i32, i32* @y.170
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %59

; <label>:46:                                     ; preds = %34
  br label %48
                                                  ; No predecessors!
  ret void

; <label>:48:                                     ; preds = %46
  %49 = load i8*, i8** %10, align 8
  %50 = load i32, i32* %11, align 4
  %51 = insertvalue { i8*, i32 } undef, i8* %49, 0
  %52 = insertvalue { i8*, i32 } %51, i32 %50, 1
  resume { i8*, i32 } %52

; <label>:53:                                     ; preds = %9, %0
  %54 = alloca i8*
  %55 = alloca i32
  %56 = call i8* @__cxa_allocate_exception(i64 16) #3
  %57 = bitcast i8* %56 to %"struct.__gnu_pbds::resize_error"*
  %58 = bitcast %"struct.__gnu_pbds::resize_error"* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* %58, i8 0, i64 16, i32 16, i1 false)
  br label %9

; <label>:59:                                     ; preds = %34, %25
  %60 = landingpad { i8*, i32 }
          cleanup
  %61 = extractvalue { i8*, i32 } %60, 0
  store i8* %61, i8** %10, align 8
  %62 = extractvalue { i8*, i32 } %60, 1
  store i32 %62, i32* %11, align 4
  call void @__cxa_free_exception(i8* %12) #3
  br label %34
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds12resize_errorC2Ev(%"struct.__gnu_pbds::resize_error"*) unnamed_addr #0 comdat align 2 {
  %2 = load i32, i32* @x.171
  %3 = load i32, i32* @y.172
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %24

; <label>:10:                                     ; preds = %1, %24
  %11 = alloca %"struct.__gnu_pbds::resize_error"*, align 8
  store %"struct.__gnu_pbds::resize_error"* %0, %"struct.__gnu_pbds::resize_error"** %11, align 8
  %12 = load %"struct.__gnu_pbds::resize_error"*, %"struct.__gnu_pbds::resize_error"** %11, align 8
  %13 = bitcast %"struct.__gnu_pbds::resize_error"* %12 to %"struct.__gnu_pbds::container_error"*
  call void @_ZN10__gnu_pbds15container_errorC2Ev(%"struct.__gnu_pbds::container_error"* %13)
  %14 = bitcast %"struct.__gnu_pbds::resize_error"* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds12resize_errorE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = load i32, i32* @x.171
  %16 = load i32, i32* @y.172
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %10
  ret void

; <label>:24:                                     ; preds = %10, %1
  %25 = alloca %"struct.__gnu_pbds::resize_error"*, align 8
  store %"struct.__gnu_pbds::resize_error"* %0, %"struct.__gnu_pbds::resize_error"** %25, align 8
  %26 = load %"struct.__gnu_pbds::resize_error"*, %"struct.__gnu_pbds::resize_error"** %25, align 8
  %27 = bitcast %"struct.__gnu_pbds::resize_error"* %26 to %"struct.__gnu_pbds::container_error"*
  call void @_ZN10__gnu_pbds15container_errorC2Ev(%"struct.__gnu_pbds::container_error"* %27)
  %28 = bitcast %"struct.__gnu_pbds::resize_error"* %26 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN10__gnu_pbds12resize_errorE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %28, align 8
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds12resize_errorD2Ev(%"struct.__gnu_pbds::resize_error"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"struct.__gnu_pbds::resize_error"*, align 8
  store %"struct.__gnu_pbds::resize_error"* %0, %"struct.__gnu_pbds::resize_error"** %2, align 8
  %3 = load %"struct.__gnu_pbds::resize_error"*, %"struct.__gnu_pbds::resize_error"** %2, align 8
  %4 = bitcast %"struct.__gnu_pbds::resize_error"* %3 to %"struct.__gnu_pbds::container_error"*
  call void @_ZN10__gnu_pbds15container_errorD2Ev(%"struct.__gnu_pbds::container_error"* %4) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds12resize_errorD0Ev(%"struct.__gnu_pbds::resize_error"*) unnamed_addr #5 comdat align 2 {
  %2 = load i32, i32* @x.175
  %3 = load i32, i32* @y.176
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %23

; <label>:10:                                     ; preds = %1, %23
  %11 = alloca %"struct.__gnu_pbds::resize_error"*, align 8
  store %"struct.__gnu_pbds::resize_error"* %0, %"struct.__gnu_pbds::resize_error"** %11, align 8
  %12 = load %"struct.__gnu_pbds::resize_error"*, %"struct.__gnu_pbds::resize_error"** %11, align 8
  call void @_ZN10__gnu_pbds12resize_errorD2Ev(%"struct.__gnu_pbds::resize_error"* %12) #3
  %13 = bitcast %"struct.__gnu_pbds::resize_error"* %12 to i8*
  call void @_ZdlPv(i8* %13) #12
  %14 = load i32, i32* @x.175
  %15 = load i32, i32* @y.176
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %10
  ret void

; <label>:23:                                     ; preds = %10, %1
  %24 = alloca %"struct.__gnu_pbds::resize_error"*, align 8
  store %"struct.__gnu_pbds::resize_error"* %0, %"struct.__gnu_pbds::resize_error"** %24, align 8
  %25 = load %"struct.__gnu_pbds::resize_error"*, %"struct.__gnu_pbds::resize_error"** %24, align 8
  call void @_ZN10__gnu_pbds12resize_errorD2Ev(%"struct.__gnu_pbds::resize_error"* %25) #3
  %26 = bitcast %"struct.__gnu_pbds::resize_error"* %25 to i8*
  call void @_ZdlPv(i8* %26) #12
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEEC2Ev(%"class.__gnu_cxx::new_allocator"*) unnamed_addr #5 comdat align 2 {
  %2 = load i32, i32* @x.177
  %3 = load i32, i32* @y.178
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %22

; <label>:10:                                     ; preds = %1, %22
  %11 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %11, align 8
  %12 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %11, align 8
  %13 = load i32, i32* @x.177
  %14 = load i32, i32* @y.178
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %10
  ret void

; <label>:22:                                     ; preds = %10, %1
  %23 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %23, align 8
  %24 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %23, align 8
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS1_25direct_mask_range_hashingImEENS1_15linear_probe_fnImEENS1_27hash_standard_resize_policyINS1_28hash_exponential_size_policyImEENS1_30hash_load_check_resize_triggerILb0EmEELb0EmEEE5entryEED2Ev(%"class.__gnu_cxx::new_allocator"*) unnamed_addr #5 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %2, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(4) i32* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE13subscript_impERKlNS2_17integral_constantIiLi0EEE(%"class.__gnu_pbds::detail::gp_ht_map"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = load i32, i32* @x.181
  %4 = load i32, i32* @y.182
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %58

; <label>:11:                                     ; preds = %2, %58
  %12 = alloca i32*, align 8
  %13 = alloca %"struct.std::tr1::integral_constant", align 1
  %14 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %15 = alloca i64*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %"struct.std::tr1::integral_constant", align 1
  %18 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %19 = alloca %"struct.std::pair", align 8
  %20 = alloca i32, align 4
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %14, align 8
  store i64* %1, i64** %15, align 8
  %21 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %14, align 8
  %22 = load i64*, i64** %15, align 8
  %23 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %21 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 72
  %25 = bitcast i8* %24 to %"struct.__gnu_pbds::detail::types_traits"*
  %26 = getelementptr inbounds %"struct.__gnu_pbds::detail::types_traits", %"struct.__gnu_pbds::detail::types_traits"* %25, i32 0, i32 0
  %27 = call i64 @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE12find_ins_posERKlNS2_17integral_constantIiLi0EEE(%"class.__gnu_pbds::detail::gp_ht_map"* %21, i64* dereferenceable(8) %22)
  store i64 %27, i64* %16, align 8
  %28 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %21, i32 0, i32 5
  %29 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %28, align 8
  %30 = load i64, i64* %16, align 8
  %31 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %29, i64 %30
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %31, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %18, align 8
  %32 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %18, align 8
  %33 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %32, i32 0, i32 1
  %34 = load i8, i8* %33, align 8
  %35 = zext i8 %34 to i32
  %36 = icmp ne i32 %35, 1
  %37 = load i32, i32* @x.181
  %38 = load i32, i32* @y.182
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %58

; <label>:45:                                     ; preds = %11
  br i1 %36, label %46, label %51

; <label>:46:                                     ; preds = %45
  %47 = load i64*, i64** %15, align 8
  store i32 0, i32* %20, align 4
  call void @_ZNSt4pairIKliEC2IivEERS0_OT_(%"struct.std::pair"* %19, i64* dereferenceable(8) %47, i32* dereferenceable(4) %20)
  %48 = load i64, i64* %16, align 8
  %49 = call %"struct.std::pair"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE14insert_new_impERKSt4pairIKliEm(%"class.__gnu_pbds::detail::gp_ht_map"* %21, %"struct.std::pair"* dereferenceable(16) %19, i64 %48)
  %50 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %49, i32 0, i32 1
  store i32* %50, i32** %12, align 8
  br label %56

; <label>:51:                                     ; preds = %45
  %52 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %18, align 8
  %53 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %52 to %"struct.__gnu_pbds::detail::stored_value"*
  %54 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %53, i32 0, i32 0
  %55 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %54, i32 0, i32 1
  store i32* %55, i32** %12, align 8
  br label %56

; <label>:56:                                     ; preds = %51, %46
  %57 = load i32*, i32** %12, align 8
  ret i32* %57

; <label>:58:                                     ; preds = %11, %2
  %59 = alloca i32*, align 8
  %60 = alloca %"struct.std::tr1::integral_constant", align 1
  %61 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %62 = alloca i64*, align 8
  %63 = alloca i64, align 8
  %64 = alloca %"struct.std::tr1::integral_constant", align 1
  %65 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  %66 = alloca %"struct.std::pair", align 8
  %67 = alloca i32, align 4
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %61, align 8
  store i64* %1, i64** %62, align 8
  %68 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %61, align 8
  %69 = load i64*, i64** %62, align 8
  %70 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %68 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 72
  %72 = bitcast i8* %71 to %"struct.__gnu_pbds::detail::types_traits"*
  %73 = getelementptr inbounds %"struct.__gnu_pbds::detail::types_traits", %"struct.__gnu_pbds::detail::types_traits"* %72, i32 0, i32 0
  %74 = call i64 @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE12find_ins_posERKlNS2_17integral_constantIiLi0EEE(%"class.__gnu_pbds::detail::gp_ht_map"* %68, i64* dereferenceable(8) %69)
  store i64 %74, i64* %63, align 8
  %75 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %68, i32 0, i32 5
  %76 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %75, align 8
  %77 = load i64, i64* %63, align 8
  %78 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %76, i64 %77
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %78, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %65, align 8
  %79 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %65, align 8
  %80 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %79, i32 0, i32 1
  %81 = load i8, i8* %80, align 8
  %82 = zext i8 %81 to i32
  %83 = icmp ne i32 %82, 1
  br label %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE12find_ins_posERKlNS2_17integral_constantIiLi0EEE(%"class.__gnu_pbds::detail::gp_ht_map"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca i64, align 8
  %4 = alloca %"struct.std::tr1::integral_constant", align 1
  %5 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %5, align 8
  store i64* %1, i64** %6, align 8
  %12 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %5, align 8
  %13 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 64
  %15 = bitcast i8* %14 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %16 = load i64*, i64** %6, align 8
  %17 = call i64 @_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKl(%"class.__gnu_pbds::detail::ranged_probe_fn"* %15, i64* dereferenceable(8) %16)
  store i64 %17, i64* %7, align 8
  %18 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %9, align 8
  %20 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %12 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE26notify_insert_search_startEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %20)
  store i64 0, i64* %8, align 8
  br label %21

; <label>:21:                                     ; preds = %151, %2
  %22 = load i32, i32* @x.183
  %23 = load i32, i32* @y.184
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %181

; <label>:30:                                     ; preds = %21, %181
  %31 = load i64, i64* %8, align 8
  %32 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %31, %33
  %35 = load i32, i32* @x.183
  %36 = load i32, i32* @y.184
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %43, label %181

; <label>:43:                                     ; preds = %30
  br i1 %34, label %44, label %152

; <label>:44:                                     ; preds = %43
  %45 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %12 to i8*
  %46 = getelementptr inbounds i8, i8* %45, i64 64
  %47 = bitcast i8* %46 to %"class.__gnu_pbds::detail::ranged_probe_fn"*
  %48 = load i64*, i64** %6, align 8
  %49 = load i64, i64* %7, align 8
  %50 = load i64, i64* %8, align 8
  %51 = call i64 @_ZNK10__gnu_pbds6detail15ranged_probe_fnIlNSt3tr14hashIlEESaIcENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEELb0EEclERKlmm(%"class.__gnu_pbds::detail::ranged_probe_fn"* %47, i64* dereferenceable(8) %48, i64 %49, i64 %50)
  store i64 %51, i64* %10, align 8
  %52 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 5
  %53 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %52, align 8
  %54 = load i64, i64* %10, align 8
  %55 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %53, i64 %54
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %55, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %11, align 8
  %56 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %11, align 8
  %57 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %56, i32 0, i32 1
  %58 = load i8, i8* %57, align 8
  %59 = zext i8 %58 to i32
  switch i32 %59, label %110 [
    i32 0, label %60
    i32 2, label %72
    i32 1, label %98
  ]

; <label>:60:                                     ; preds = %44
  %61 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %12 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE24notify_insert_search_endEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %61)
  %62 = load i64, i64* %9, align 8
  %63 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %62, %64
  br i1 %65, label %66, label %68

; <label>:66:                                     ; preds = %60
  %67 = load i64, i64* %10, align 8
  br label %70

; <label>:68:                                     ; preds = %60
  %69 = load i64, i64* %9, align 8
  br label %70

; <label>:70:                                     ; preds = %68, %66
  %71 = phi i64 [ %67, %66 ], [ %69, %68 ]
  store i64 %71, i64* %3, align 8
  br label %179

; <label>:72:                                     ; preds = %44
  %73 = load i32, i32* @x.183
  %74 = load i32, i32* @y.184
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %81, label %186

; <label>:81:                                     ; preds = %72, %186
  %82 = load i64, i64* %9, align 8
  %83 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %84 = load i64, i64* %83, align 8
  %85 = icmp eq i64 %82, %84
  %86 = load i32, i32* @x.183
  %87 = load i32, i32* @y.184
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %94, label %186

; <label>:94:                                     ; preds = %81
  br i1 %85, label %95, label %97

; <label>:95:                                     ; preds = %94
  %96 = load i64, i64* %10, align 8
  store i64 %96, i64* %9, align 8
  br label %97

; <label>:97:                                     ; preds = %95, %94
  br label %129

; <label>:98:                                     ; preds = %44
  %99 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %12 to %"struct.__gnu_pbds::detail::hash_eq_fn"*
  %100 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %11, align 8
  %101 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %100 to %"struct.__gnu_pbds::detail::stored_value"*
  %102 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %101, i32 0, i32 0
  %103 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %102, i32 0, i32 0
  %104 = load i64*, i64** %6, align 8
  %105 = call zeroext i1 @_ZNK10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEclERKlS7_(%"struct.__gnu_pbds::detail::hash_eq_fn"* %99, i64* dereferenceable(8) %103, i64* dereferenceable(8) %104)
  br i1 %105, label %106, label %109

; <label>:106:                                    ; preds = %98
  %107 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %12 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE24notify_insert_search_endEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %107)
  %108 = load i64, i64* %10, align 8
  store i64 %108, i64* %3, align 8
  br label %179

; <label>:109:                                    ; preds = %98
  br label %129

; <label>:110:                                    ; preds = %44
  %111 = load i32, i32* @x.183
  %112 = load i32, i32* @y.184
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %119, label %191

; <label>:119:                                    ; preds = %110, %191
  %120 = load i32, i32* @x.183
  %121 = load i32, i32* @y.184
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %128, label %191

; <label>:128:                                    ; preds = %119
  br label %129

; <label>:129:                                    ; preds = %128, %109, %97
  %130 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %12 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE30notify_insert_search_collisionEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %130)
  br label %131

; <label>:131:                                    ; preds = %129
  %132 = load i32, i32* @x.183
  %133 = load i32, i32* @y.184
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %140, label %192

; <label>:140:                                    ; preds = %131, %192
  %141 = load i64, i64* %8, align 8
  %142 = add i64 %141, 1
  store i64 %142, i64* %8, align 8
  %143 = load i32, i32* @x.183
  %144 = load i32, i32* @y.184
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %151, label %192

; <label>:151:                                    ; preds = %140
  br label %21

; <label>:152:                                    ; preds = %43
  %153 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %12 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE24notify_insert_search_endEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %153)
  %154 = load i64, i64* %9, align 8
  %155 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %156 = load i64, i64* %155, align 8
  %157 = icmp eq i64 %154, %156
  br i1 %157, label %158, label %177

; <label>:158:                                    ; preds = %152
  %159 = load i32, i32* @x.183
  %160 = load i32, i32* @y.184
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %167, label %206

; <label>:167:                                    ; preds = %158, %206
  call void @_ZN10__gnu_pbds20__throw_insert_errorEv()
  %168 = load i32, i32* @x.183
  %169 = load i32, i32* @y.184
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %176, label %206

; <label>:176:                                    ; preds = %167
  br label %177

; <label>:177:                                    ; preds = %176, %152
  %178 = load i64, i64* %9, align 8
  store i64 %178, i64* %3, align 8
  br label %179

; <label>:179:                                    ; preds = %177, %106, %70
  %180 = load i64, i64* %3, align 8
  ret i64 %180

; <label>:181:                                    ; preds = %30, %21
  %182 = load i64, i64* %8, align 8
  %183 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %184 = load i64, i64* %183, align 8
  %185 = icmp ult i64 %182, %184
  br label %30

; <label>:186:                                    ; preds = %81, %72
  %187 = load i64, i64* %9, align 8
  %188 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %12, i32 0, i32 3
  %189 = load i64, i64* %188, align 8
  %190 = icmp eq i64 %187, %189
  br label %81

; <label>:191:                                    ; preds = %119, %110
  br label %119

; <label>:192:                                    ; preds = %140, %131
  %193 = load i64, i64* %8, align 8
  %194 = sub i64 %193, 1
  %195 = mul i64 %194, 1
  %196 = sub i64 %193, 1
  %197 = mul i64 %196, 1
  %198 = shl i64 %193, 1
  %199 = shl i64 %193, 1
  %200 = shl i64 %193, 1
  %201 = shl i64 %193, 1
  %202 = sub i64 0, %193
  %203 = add i64 %202, 1
  %204 = shl i64 %193, 1
  %205 = add i64 %193, 1
  store i64 %205, i64* %8, align 8
  br label %140

; <label>:206:                                    ; preds = %167, %158
  call void @_ZN10__gnu_pbds20__throw_insert_errorEv()
  br label %167
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::pair"* @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE14insert_new_impERKSt4pairIKliEm(%"class.__gnu_pbds::detail::gp_ht_map"*, %"struct.std::pair"* dereferenceable(16), i64) #0 comdat align 2 {
  %4 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %5 = alloca %"struct.std::pair"*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"struct.std::tr1::integral_constant", align 1
  %8 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %4, align 8
  store %"struct.std::pair"* %1, %"struct.std::pair"** %5, align 8
  store i64 %2, i64* %6, align 8
  %9 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %4, align 8
  %10 = call zeroext i1 @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE19do_resize_if_neededEv(%"class.__gnu_pbds::detail::gp_ht_map"* %9)
  br i1 %10, label %11, label %19

; <label>:11:                                     ; preds = %3
  %12 = load %"struct.std::pair"*, %"struct.std::pair"** %5, align 8
  %13 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %12, i32 0, i32 0
  %14 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %9 to i8*
  %15 = getelementptr inbounds i8, i8* %14, i64 72
  %16 = bitcast i8* %15 to %"struct.__gnu_pbds::detail::types_traits"*
  %17 = getelementptr inbounds %"struct.__gnu_pbds::detail::types_traits", %"struct.__gnu_pbds::detail::types_traits"* %16, i32 0, i32 0
  %18 = call i64 @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE12find_ins_posERKlNS2_17integral_constantIiLi0EEE(%"class.__gnu_pbds::detail::gp_ht_map"* %9, i64* dereferenceable(8) %13)
  store i64 %18, i64* %6, align 8
  br label %19

; <label>:19:                                     ; preds = %11, %3
  %20 = load i32, i32* @x.185
  %21 = load i32, i32* @y.186
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %28, label %59

; <label>:28:                                     ; preds = %19, %59
  %29 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %9, i32 0, i32 5
  %30 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %29, align 8
  %31 = load i64, i64* %6, align 8
  %32 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %30, i64 %31
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %32, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %8, align 8
  %33 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %8, align 8
  %34 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %33 to %"struct.__gnu_pbds::detail::stored_value"*
  %35 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %34, i32 0, i32 0
  %36 = bitcast %"struct.std::pair"* %35 to i8*
  %37 = bitcast i8* %36 to %"struct.std::pair"*
  %38 = load %"struct.std::pair"*, %"struct.std::pair"** %5, align 8
  %39 = bitcast %"struct.std::pair"* %37 to i8*
  %40 = bitcast %"struct.std::pair"* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false)
  %41 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %8, align 8
  %42 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %41, i32 0, i32 1
  store i8 1, i8* %42, align 8
  %43 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %9 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %44 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %9, i32 0, i32 4
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %44, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE15notify_insertedEm(%"class.__gnu_pbds::hash_standard_resize_policy"* %43, i64 %46)
  %47 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %8, align 8
  %48 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %47 to %"struct.__gnu_pbds::detail::stored_value"*
  %49 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %48, i32 0, i32 0
  %50 = load i32, i32* @x.185
  %51 = load i32, i32* @y.186
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %28
  ret %"struct.std::pair"* %49

; <label>:59:                                     ; preds = %28, %19
  %60 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %9, i32 0, i32 5
  %61 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %60, align 8
  %62 = load i64, i64* %6, align 8
  %63 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %61, i64 %62
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %63, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %8, align 8
  %64 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %8, align 8
  %65 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %64 to %"struct.__gnu_pbds::detail::stored_value"*
  %66 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %65, i32 0, i32 0
  %67 = bitcast %"struct.std::pair"* %66 to i8*
  %68 = bitcast i8* %67 to %"struct.std::pair"*
  %69 = load %"struct.std::pair"*, %"struct.std::pair"** %5, align 8
  %70 = bitcast %"struct.std::pair"* %68 to i8*
  %71 = bitcast %"struct.std::pair"* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 16, i32 8, i1 false)
  %72 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %8, align 8
  %73 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %72, i32 0, i32 1
  store i8 1, i8* %73, align 8
  %74 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %9 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %75 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %9, i32 0, i32 4
  %76 = load i64, i64* %75, align 8
  %77 = shl i64 %76, 1
  %78 = shl i64 %76, 1
  %79 = sub i64 %76, 1
  %80 = mul i64 %79, 1
  %81 = sub i64 %76, 1
  %82 = mul i64 %81, 1
  %83 = shl i64 %76, 1
  %84 = shl i64 %76, 1
  %85 = shl i64 %76, 1
  %86 = shl i64 %76, 1
  %87 = add i64 %76, 1
  store i64 %87, i64* %75, align 8
  call void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE15notify_insertedEm(%"class.__gnu_pbds::hash_standard_resize_policy"* %74, i64 %87)
  %88 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %8, align 8
  %89 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %88 to %"struct.__gnu_pbds::detail::stored_value"*
  %90 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %89, i32 0, i32 0
  br label %28
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt4pairIKliEC2IivEERS0_OT_(%"struct.std::pair"*, i64* dereferenceable(8), i32* dereferenceable(4)) unnamed_addr #5 comdat align 2 {
  %4 = load i32, i32* @x.187
  %5 = load i32, i32* @y.188
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %33

; <label>:12:                                     ; preds = %3, %33
  %13 = alloca %"struct.std::pair"*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i32*, align 8
  store %"struct.std::pair"* %0, %"struct.std::pair"** %13, align 8
  store i64* %1, i64** %14, align 8
  store i32* %2, i32** %15, align 8
  %16 = load %"struct.std::pair"*, %"struct.std::pair"** %13, align 8
  %17 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %16, i32 0, i32 0
  %18 = load i64*, i64** %14, align 8
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %17, align 8
  %20 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %16, i32 0, i32 1
  %21 = load i32*, i32** %15, align 8
  %22 = call dereferenceable(4) i32* @_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE(i32* dereferenceable(4) %21) #3
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %20, align 8
  %24 = load i32, i32* @x.187
  %25 = load i32, i32* @y.188
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %12
  ret void

; <label>:33:                                     ; preds = %12, %3
  %34 = alloca %"struct.std::pair"*, align 8
  %35 = alloca i64*, align 8
  %36 = alloca i32*, align 8
  store %"struct.std::pair"* %0, %"struct.std::pair"** %34, align 8
  store i64* %1, i64** %35, align 8
  store i32* %2, i32** %36, align 8
  %37 = load %"struct.std::pair"*, %"struct.std::pair"** %34, align 8
  %38 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %37, i32 0, i32 0
  %39 = load i64*, i64** %35, align 8
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %38, align 8
  %41 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %37, i32 0, i32 1
  %42 = load i32*, i32** %36, align 8
  %43 = call dereferenceable(4) i32* @_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE(i32* dereferenceable(4) %42) #3
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %41, align 8
  br label %12
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE26notify_insert_search_startEv(%"class.__gnu_pbds::hash_standard_resize_policy"*) #0 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %3 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE26notify_insert_search_startEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %4)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE24notify_insert_search_endEv(%"class.__gnu_pbds::hash_standard_resize_policy"*) #0 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %3 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE24notify_insert_search_endEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %4)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_ZNK10__gnu_pbds6detail10hash_eq_fnIlSt8equal_toIlESaIcELb0EEclERKlS7_(%"struct.__gnu_pbds::detail::hash_eq_fn"*, i64* dereferenceable(8), i64* dereferenceable(8)) #0 comdat align 2 {
  %4 = alloca %"struct.__gnu_pbds::detail::hash_eq_fn"*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store %"struct.__gnu_pbds::detail::hash_eq_fn"* %0, %"struct.__gnu_pbds::detail::hash_eq_fn"** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load %"struct.__gnu_pbds::detail::hash_eq_fn"*, %"struct.__gnu_pbds::detail::hash_eq_fn"** %4, align 8
  %8 = bitcast %"struct.__gnu_pbds::detail::hash_eq_fn"* %7 to %"struct.std::equal_to"*
  %9 = load i64*, i64** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call zeroext i1 @_ZNKSt8equal_toIlEclERKlS2_(%"struct.std::equal_to"* %8, i64* dereferenceable(8) %9, i64* dereferenceable(8) %10)
  ret i1 %11
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE30notify_insert_search_collisionEv(%"class.__gnu_pbds::hash_standard_resize_policy"*) #0 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %2, align 8
  %4 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %3 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE30notify_insert_search_collisionEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %4)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE26notify_insert_search_startEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"*) #5 comdat align 2 {
  %2 = load i32, i32* @x.197
  %3 = load i32, i32* @y.198
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %22

; <label>:10:                                     ; preds = %1, %22
  %11 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %11, align 8
  %12 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %11, align 8
  %13 = load i32, i32* @x.197
  %14 = load i32, i32* @y.198
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %10
  ret void

; <label>:22:                                     ; preds = %10, %1
  %23 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %23, align 8
  %24 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %23, align 8
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE24notify_insert_search_endEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"*) #5 comdat align 2 {
  %2 = load i32, i32* @x.199
  %3 = load i32, i32* @y.200
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %22

; <label>:10:                                     ; preds = %1, %22
  %11 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %11, align 8
  %12 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %11, align 8
  %13 = load i32, i32* @x.199
  %14 = load i32, i32* @y.200
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %10
  ret void

; <label>:22:                                     ; preds = %10, %1
  %23 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %23, align 8
  %24 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %23, align 8
  br label %10
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNKSt8equal_toIlEclERKlS2_(%"struct.std::equal_to"*, i64* dereferenceable(8), i64* dereferenceable(8)) #5 comdat align 2 {
  %4 = load i32, i32* @x.201
  %5 = load i32, i32* @y.202
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %31

; <label>:12:                                     ; preds = %3, %31
  %13 = alloca %"struct.std::equal_to"*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca i64*, align 8
  store %"struct.std::equal_to"* %0, %"struct.std::equal_to"** %13, align 8
  store i64* %1, i64** %14, align 8
  store i64* %2, i64** %15, align 8
  %16 = load %"struct.std::equal_to"*, %"struct.std::equal_to"** %13, align 8
  %17 = load i64*, i64** %14, align 8
  %18 = load i64, i64* %17, align 8
  %19 = load i64*, i64** %15, align 8
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %18, %20
  %22 = load i32, i32* @x.201
  %23 = load i32, i32* @y.202
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %12
  ret i1 %21

; <label>:31:                                     ; preds = %12, %3
  %32 = alloca %"struct.std::equal_to"*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca i64*, align 8
  store %"struct.std::equal_to"* %0, %"struct.std::equal_to"** %32, align 8
  store i64* %1, i64** %33, align 8
  store i64* %2, i64** %34, align 8
  %35 = load %"struct.std::equal_to"*, %"struct.std::equal_to"** %32, align 8
  %36 = load i64*, i64** %33, align 8
  %37 = load i64, i64* %36, align 8
  %38 = load i64*, i64** %34, align 8
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %37, %39
  br label %12
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE30notify_insert_search_collisionEv(%"class.__gnu_pbds::hash_load_check_resize_trigger"*) #5 comdat align 2 {
  %2 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %2, align 8
  %3 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %2, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE19do_resize_if_neededEv(%"class.__gnu_pbds::detail::gp_ht_map"*) #0 comdat align 2 {
  %2 = alloca i1, align 1
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  %4 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %3, align 8
  %5 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %4 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %6 = call zeroext i1 @_ZNK10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE16is_resize_neededEv(%"class.__gnu_pbds::hash_standard_resize_policy"* %5)
  br i1 %6, label %26, label %7

; <label>:7:                                      ; preds = %1
  %8 = load i32, i32* @x.205
  %9 = load i32, i32* @y.206
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %16, label %35

; <label>:16:                                     ; preds = %7, %35
  store i1 false, i1* %2, align 1
  %17 = load i32, i32* @x.205
  %18 = load i32, i32* @y.206
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %16
  br label %33

; <label>:26:                                     ; preds = %1
  %27 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"* %4 to %"class.__gnu_pbds::hash_standard_resize_policy"*
  %28 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %4, i32 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %4, i32 0, i32 4
  %31 = load i64, i64* %30, align 8
  %32 = call i64 @_ZNK10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE12get_new_sizeEmm(%"class.__gnu_pbds::hash_standard_resize_policy"* %27, i64 %29, i64 %31)
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE10resize_impEm(%"class.__gnu_pbds::detail::gp_ht_map"* %4, i64 %32)
  store i1 true, i1* %2, align 1
  br label %33

; <label>:33:                                     ; preds = %26, %25
  %34 = load i1, i1* %2, align 1
  ret i1 %34

; <label>:35:                                     ; preds = %16, %7
  store i1 false, i1* %2, align 1
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmE15notify_insertedEm(%"class.__gnu_pbds::hash_standard_resize_policy"*, i64) #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::hash_standard_resize_policy"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_standard_resize_policy"* %0, %"class.__gnu_pbds::hash_standard_resize_policy"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_pbds::hash_standard_resize_policy"*, %"class.__gnu_pbds::hash_standard_resize_policy"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::hash_standard_resize_policy"* %5 to %"class.__gnu_pbds::hash_load_check_resize_trigger"*
  %7 = load i64, i64* %4, align 8
  call void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE15notify_insertedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"* %6, i64 %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds30hash_load_check_resize_triggerILb0EmE15notify_insertedEm(%"class.__gnu_pbds::hash_load_check_resize_trigger"*, i64) #5 comdat align 2 {
  %3 = load i32, i32* @x.209
  %4 = load i32, i32* @y.210
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %32

; <label>:11:                                     ; preds = %2, %32
  %12 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %13 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %12, align 8
  store i64 %1, i64* %13, align 8
  %14 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %12, align 8
  %15 = load i64, i64* %13, align 8
  %16 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %14, i32 0, i32 4
  %17 = load i64, i64* %16, align 8
  %18 = icmp uge i64 %15, %17
  %19 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %14, i32 0, i32 5
  %20 = zext i1 %18 to i8
  store i8 %20, i8* %19, align 8
  %21 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %14 to %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*
  %22 = load i64, i64* %13, align 8
  call void @_ZN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EE8set_sizeEm(%"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"* %21, i64 %22)
  %23 = load i32, i32* @x.209
  %24 = load i32, i32* @y.210
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %31, label %32

; <label>:31:                                     ; preds = %11
  ret void

; <label>:32:                                     ; preds = %11, %2
  %33 = alloca %"class.__gnu_pbds::hash_load_check_resize_trigger"*, align 8
  %34 = alloca i64, align 8
  store %"class.__gnu_pbds::hash_load_check_resize_trigger"* %0, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %33, align 8
  store i64 %1, i64* %34, align 8
  %35 = load %"class.__gnu_pbds::hash_load_check_resize_trigger"*, %"class.__gnu_pbds::hash_load_check_resize_trigger"** %33, align 8
  %36 = load i64, i64* %34, align 8
  %37 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %35, i32 0, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = icmp uge i64 %36, %38
  %40 = getelementptr inbounds %"class.__gnu_pbds::hash_load_check_resize_trigger", %"class.__gnu_pbds::hash_load_check_resize_trigger"* %35, i32 0, i32 5
  %41 = zext i1 %39 to i8
  store i8 %41, i8* %40, align 8
  %42 = bitcast %"class.__gnu_pbds::hash_load_check_resize_trigger"* %35 to %"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"*
  %43 = load i64, i64* %34, align 8
  call void @_ZN10__gnu_pbds6detail40hash_load_check_resize_trigger_size_baseImLb0EE8set_sizeEm(%"class.__gnu_pbds::detail::hash_load_check_resize_trigger_size_base"* %42, i64 %43)
  br label %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE(i32* dereferenceable(4)) #5 comdat {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  %3 = load i32*, i32** %2, align 8
  ret i32* %3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE18get_start_it_stateERPSt4pairIKliERm(%"class.__gnu_pbds::detail::gp_ht_map"*, %"struct.std::pair"** dereferenceable(8), i64* dereferenceable(8)) #5 comdat align 2 {
  %4 = load i32, i32* @x.213
  %5 = load i32, i32* @y.214
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %58

; <label>:12:                                     ; preds = %3, %58
  %13 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %14 = alloca %"struct.std::pair"**, align 8
  %15 = alloca i64*, align 8
  %16 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %13, align 8
  store %"struct.std::pair"** %1, %"struct.std::pair"*** %14, align 8
  store i64* %2, i64** %15, align 8
  %17 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %13, align 8
  %18 = load i64*, i64** %15, align 8
  store i64 0, i64* %18, align 8
  %19 = load i32, i32* @x.213
  %20 = load i32, i32* @y.214
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %58

; <label>:27:                                     ; preds = %12
  br label %28

; <label>:28:                                     ; preds = %51, %27
  %29 = load i64*, i64** %15, align 8
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %17, i32 0, i32 3
  %32 = load i64, i64* %31, align 8
  %33 = icmp ult i64 %30, %32
  br i1 %33, label %34, label %55

; <label>:34:                                     ; preds = %28
  %35 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %17, i32 0, i32 5
  %36 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %35, align 8
  %37 = load i64*, i64** %15, align 8
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %36, i64 %38
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %39, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %16, align 8
  %40 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %16, align 8
  %41 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %40, i32 0, i32 1
  %42 = load i8, i8* %41, align 8
  %43 = zext i8 %42 to i32
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %50

; <label>:45:                                     ; preds = %34
  %46 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %16, align 8
  %47 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %46 to %"struct.__gnu_pbds::detail::stored_value"*
  %48 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %47, i32 0, i32 0
  %49 = load %"struct.std::pair"**, %"struct.std::pair"*** %14, align 8
  store %"struct.std::pair"* %48, %"struct.std::pair"** %49, align 8
  br label %57

; <label>:50:                                     ; preds = %34
  br label %51

; <label>:51:                                     ; preds = %50
  %52 = load i64*, i64** %15, align 8
  %53 = load i64, i64* %52, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %52, align 8
  br label %28

; <label>:55:                                     ; preds = %28
  %56 = load %"struct.std::pair"**, %"struct.std::pair"*** %14, align 8
  store %"struct.std::pair"* null, %"struct.std::pair"** %56, align 8
  br label %57

; <label>:57:                                     ; preds = %55, %45
  ret void

; <label>:58:                                     ; preds = %12, %3
  %59 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %60 = alloca %"struct.std::pair"**, align 8
  %61 = alloca i64*, align 8
  %62 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %59, align 8
  store %"struct.std::pair"** %1, %"struct.std::pair"*** %60, align 8
  store i64* %2, i64** %61, align 8
  %63 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %59, align 8
  %64 = load i64*, i64** %61, align 8
  store i64 0, i64* %64, align 8
  br label %12
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2EPSt4pairIKliEmPSI_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, %"struct.std::pair"*, i64, %"class.__gnu_pbds::detail::gp_ht_map"*) unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, align 8
  %6 = alloca %"struct.std::pair"*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %5, align 8
  store %"struct.std::pair"* %1, %"struct.std::pair"** %6, align 8
  store i64 %2, i64* %7, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %3, %"class.__gnu_pbds::detail::gp_ht_map"** %8, align 8
  %9 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %5, align 8
  %10 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %9 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*
  %11 = load %"struct.std::pair"*, %"struct.std::pair"** %6, align 8
  %12 = load i64, i64* %7, align 8
  %13 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %8, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE15const_iterator_C2EPKSt4pairIKliEmPKSI_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %10, %"struct.std::pair"* %11, i64 %12, %"class.__gnu_pbds::detail::gp_ht_map"* %13)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE15const_iterator_C2EPKSt4pairIKliEmPKSI_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, %"struct.std::pair"*, i64, %"class.__gnu_pbds::detail::gp_ht_map"*) unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, align 8
  %6 = alloca %"struct.std::pair"*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"** %5, align 8
  store %"struct.std::pair"* %1, %"struct.std::pair"** %6, align 8
  store i64 %2, i64* %7, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %3, %"class.__gnu_pbds::detail::gp_ht_map"** %8, align 8
  %9 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"** %5, align 8
  %10 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %9 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*
  %11 = load %"struct.std::pair"*, %"struct.std::pair"** %6, align 8
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_C2EPKSt4pairIKliE(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %10, %"struct.std::pair"* %11)
  %12 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %9, i32 0, i32 1
  %13 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %8, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %13, %"class.__gnu_pbds::detail::gp_ht_map"** %12, align 8
  %14 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %9, i32 0, i32 2
  %15 = load i64, i64* %7, align 8
  store i64 %15, i64* %14, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_C2EPKSt4pairIKliE(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, %"struct.std::pair"*) unnamed_addr #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, align 8
  %4 = alloca %"struct.std::pair"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %3, align 8
  store %"struct.std::pair"* %1, %"struct.std::pair"** %4, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %3, align 8
  %6 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %5, i32 0, i32 0
  %7 = load %"struct.std::pair"*, %"struct.std::pair"** %4, align 8
  store %"struct.std::pair"* %7, %"struct.std::pair"** %6, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE9iterator_C2ERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, align 8
  %4 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %3, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %1, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %4, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %5 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*
  %7 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"** %4, align 8
  %8 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::iterator_"* %7 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE15const_iterator_C2ERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %6, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* dereferenceable(24) %8)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE15const_iterator_C2ERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, align 8
  %4 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"** %3, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %1, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"** %4, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"** %3, align 8
  %6 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %5 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*
  %7 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"** %4, align 8
  %8 = bitcast %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %7 to %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*
  call void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_C2ERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %6, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* dereferenceable(8) %8)
  %9 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %5, i32 0, i32 1
  %10 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"** %4, align 8
  %11 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::const_iterator_"* %10, i32 0, i32 1
  %12 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"** %9 to i8*
  %13 = bitcast %"class.__gnu_pbds::detail::gp_ht_map"** %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE21point_const_iterator_C2ERKSJ_(%"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* dereferenceable(8)) unnamed_addr #5 comdat align 2 {
  %3 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, align 8
  %4 = alloca %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %0, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %3, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %1, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %4, align 8
  %5 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %3, align 8
  %6 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %5, i32 0, i32 0
  %7 = load %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"*, %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"** %4, align 8
  %8 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_", %"class.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::point_const_iterator_"* %7, i32 0, i32 0
  %9 = load %"struct.std::pair"*, %"struct.std::pair"** %8, align 8
  store %"struct.std::pair"* %9, %"struct.std::pair"** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNK10__gnu_pbds6detail9gp_ht_mapIliNSt3tr14hashIlEESt8equal_toIlESaIcELb0ENS_25direct_mask_range_hashingImEENS_15linear_probe_fnImEENS_27hash_standard_resize_policyINS_28hash_exponential_size_policyImEENS_30hash_load_check_resize_triggerILb0EmEELb0EmEEE12inc_it_stateERPKSt4pairIKliERm(%"class.__gnu_pbds::detail::gp_ht_map"*, %"struct.std::pair"** dereferenceable(8), i64* dereferenceable(8)) #5 comdat align 2 {
  %4 = alloca %"class.__gnu_pbds::detail::gp_ht_map"*, align 8
  %5 = alloca %"struct.std::pair"**, align 8
  %6 = alloca i64*, align 8
  %7 = alloca %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, align 8
  store %"class.__gnu_pbds::detail::gp_ht_map"* %0, %"class.__gnu_pbds::detail::gp_ht_map"** %4, align 8
  store %"struct.std::pair"** %1, %"struct.std::pair"*** %5, align 8
  store i64* %2, i64** %6, align 8
  %8 = load %"class.__gnu_pbds::detail::gp_ht_map"*, %"class.__gnu_pbds::detail::gp_ht_map"** %4, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 1
  store i64 %11, i64* %9, align 8
  br label %12

; <label>:12:                                     ; preds = %53, %3
  %13 = load i64*, i64** %6, align 8
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %8, i32 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %14, %16
  br i1 %17, label %18, label %57

; <label>:18:                                     ; preds = %12
  %19 = getelementptr inbounds %"class.__gnu_pbds::detail::gp_ht_map", %"class.__gnu_pbds::detail::gp_ht_map"* %8, i32 0, i32 5
  %20 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %19, align 8
  %21 = load i64*, i64** %6, align 8
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %20, i64 %22
  store %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %23, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %7, align 8
  %24 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %7, align 8
  %25 = getelementptr inbounds %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry", %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %24, i32 0, i32 1
  %26 = load i8, i8* %25, align 8
  %27 = zext i8 %26 to i32
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %52

; <label>:29:                                     ; preds = %18
  %30 = load i32, i32* @x.227
  %31 = load i32, i32* @y.228
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %38, label %96

; <label>:38:                                     ; preds = %29, %96
  %39 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %7, align 8
  %40 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %39 to %"struct.__gnu_pbds::detail::stored_value"*
  %41 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %40, i32 0, i32 0
  %42 = load %"struct.std::pair"**, %"struct.std::pair"*** %5, align 8
  store %"struct.std::pair"* %41, %"struct.std::pair"** %42, align 8
  %43 = load i32, i32* @x.227
  %44 = load i32, i32* @y.228
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %51, label %96

; <label>:51:                                     ; preds = %38
  br label %77

; <label>:52:                                     ; preds = %18
  br label %53

; <label>:53:                                     ; preds = %52
  %54 = load i64*, i64** %6, align 8
  %55 = load i64, i64* %54, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %54, align 8
  br label %12

; <label>:57:                                     ; preds = %12
  %58 = load i32, i32* @x.227
  %59 = load i32, i32* @y.228
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %66, label %101

; <label>:66:                                     ; preds = %57, %101
  %67 = load %"struct.std::pair"**, %"struct.std::pair"*** %5, align 8
  store %"struct.std::pair"* null, %"struct.std::pair"** %67, align 8
  %68 = load i32, i32* @x.227
  %69 = load i32, i32* @y.228
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %76, label %101

; <label>:76:                                     ; preds = %66
  br label %77

; <label>:77:                                     ; preds = %76, %51
  %78 = load i32, i32* @x.227
  %79 = load i32, i32* @y.228
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %86, label %103

; <label>:86:                                     ; preds = %77, %103
  %87 = load i32, i32* @x.227
  %88 = load i32, i32* @y.228
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %95, label %103

; <label>:95:                                     ; preds = %86
  ret void

; <label>:96:                                     ; preds = %38, %29
  %97 = load %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"*, %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"** %7, align 8
  %98 = bitcast %"struct.__gnu_pbds::detail::gp_ht_map<long, int, std::tr1::hash<long>, std::equal_to<long>, std::allocator<char>, false, __gnu_pbds::direct_mask_range_hashing<unsigned long>, __gnu_pbds::linear_probe_fn<unsigned long>, __gnu_pbds::hash_standard_resize_policy<__gnu_pbds::hash_exponential_size_policy<unsigned long>, __gnu_pbds::hash_load_check_resize_trigger<false, unsigned long>, false, unsigned long> >::entry"* %97 to %"struct.__gnu_pbds::detail::stored_value"*
  %99 = getelementptr inbounds %"struct.__gnu_pbds::detail::stored_value", %"struct.__gnu_pbds::detail::stored_value"* %98, i32 0, i32 0
  %100 = load %"struct.std::pair"**, %"struct.std::pair"*** %5, align 8
  store %"struct.std::pair"* %99, %"struct.std::pair"** %100, align 8
  br label %38

; <label>:101:                                    ; preds = %66, %57
  %102 = load %"struct.std::pair"**, %"struct.std::pair"*** %5, align 8
  store %"struct.std::pair"* null, %"struct.std::pair"** %102, align 8
  br label %66

; <label>:103:                                    ; preds = %86, %77
  br label %86
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s924453318.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline noreturn nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn }
attributes #14 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
