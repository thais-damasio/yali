; ModuleID = 'Project_CodeNet_C++1400/p03735/s229975691.cpp'
source_filename = "Project_CodeNet_C++1400/p03735/s229975691.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl" }
%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl" = type { i64*, i64*, i64* }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::allocator" = type { i8 }
%"class.__gnu_cxx::__normal_iterator.7" = type { i64* }
%"class.__gnu_cxx::__normal_iterator" = type { i64* }
%struct.ball = type { i64, i64 }
%class.anon = type { i8 }
%class.anon.0 = type { i8 }
%class.anon.2 = type { i8 }
%"class.std::multiset" = type { %"class.std::_Rb_tree" }
%"class.std::_Rb_tree" = type { %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl" }
%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl" = type { %"struct.std::less", %"struct.std::_Rb_tree_node_base", i64 }
%"struct.std::less" = type { i8 }
%"struct.std::_Rb_tree_node_base" = type { i32, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
%"struct.std::_Rb_tree_const_iterator" = type { %"struct.std::_Rb_tree_node_base"* }
%"class.std::reverse_iterator" = type { %"struct.std::_Rb_tree_const_iterator" }
%"struct.__gnu_cxx::__ops::_Iter_comp_iter" = type { %class.anon }
%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8" = type { %class.anon.0 }
%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11" = type { %class.anon.2 }
%"struct.std::_Rb_tree_iterator" = type { %"struct.std::_Rb_tree_node_base"* }
%"struct.std::_Rb_tree_node" = type { %"struct.std::_Rb_tree_node_base", %"struct.__gnu_cxx::__aligned_membuf" }
%"struct.__gnu_cxx::__aligned_membuf" = type { [8 x i8] }
%"class.std::allocator.4" = type { i8 }
%"class.__gnu_cxx::new_allocator.5" = type { i8 }
%"class.__gnu_cxx::new_allocator" = type { i8 }
%"class.std::move_iterator" = type { i64* }
%"struct.__gnu_cxx::__ops::_Iter_comp_val" = type { %class.anon }
%"struct.__gnu_cxx::__ops::_Val_comp_iter" = type { %class.anon }
%"struct.__gnu_cxx::__ops::_Iter_comp_val.9" = type { %class.anon.0 }
%"struct.__gnu_cxx::__ops::_Val_comp_iter.10" = type { %class.anon.0 }
%"struct.__gnu_cxx::__ops::_Iter_comp_val.12" = type { %class.anon.2 }
%"struct.__gnu_cxx::__ops::_Val_comp_iter.13" = type { %class.anon.2 }
%"struct.std::pair" = type { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }
%"struct.std::_Identity" = type { i8 }
%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node" = type { %"class.std::_Rb_tree"* }
%"struct.std::iterator" = type { i8 }

$_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_ = comdat any

$_ZNSt6vectorIxSaIxEEC2Ev = comdat any

$_ZNSt6vectorIxSaIxEED2Ev = comdat any

$_ZNSt6vectorIxSaIxEE6resizeEmRKx = comdat any

$_ZNSt6vectorIxSaIxEEixEm = comdat any

$_ZSt4swapIxEvRT_S1_ = comdat any

$_ZSt3maxIxERKT_S2_S2_ = comdat any

$_ZSt3minIxERKT_S2_S2_ = comdat any

$_ZNSt8multisetIxSt4lessIxESaIxEEC2Ev = comdat any

$_ZNSt8multisetIxSt4lessIxESaIxEE6insertERKx = comdat any

$_ZNKSt8multisetIxSt4lessIxESaIxEE6rbeginEv = comdat any

$_ZNKSt16reverse_iteratorISt23_Rb_tree_const_iteratorIxEEdeEv = comdat any

$_ZNKSt8multisetIxSt4lessIxESaIxEE5beginEv = comdat any

$_ZNKSt23_Rb_tree_const_iteratorIxEdeEv = comdat any

$_ZNSt8multisetIxSt4lessIxESaIxEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIxE = comdat any

$_ZNSt8multisetIxSt4lessIxESaIxEE4findERKx = comdat any

$_ZNSt8multisetIxSt4lessIxESaIxEED2Ev = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEED2Ev = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_eraseEPSt13_Rb_tree_nodeIxE = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_beginEv = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EED2Ev = comdat any

$__clang_call_terminate = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_rightEPSt18_Rb_tree_node_base = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE7_S_leftEPSt18_Rb_tree_node_base = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE12_M_drop_nodeEPSt13_Rb_tree_nodeIxE = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIxE = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_M_put_nodeEPSt13_Rb_tree_nodeIxE = comdat any

$_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE7destroyIxEEvRS2_PT_ = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE21_M_get_Node_allocatorEv = comdat any

$_ZNSt13_Rb_tree_nodeIxE9_M_valptrEv = comdat any

$_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE7destroyIxEEvPT_ = comdat any

$_ZN9__gnu_cxx16__aligned_membufIxE6_M_ptrEv = comdat any

$_ZN9__gnu_cxx16__aligned_membufIxE7_M_addrEv = comdat any

$_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE10deallocateERS2_PS1_m = comdat any

$_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE10deallocateEPS2_m = comdat any

$_ZNSaISt13_Rb_tree_nodeIxEED2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEED2Ev = comdat any

$_ZNSt12_Vector_baseIxSaIxEEC2Ev = comdat any

$_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2Ev = comdat any

$_ZNSaIxEC2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIxEC2Ev = comdat any

$_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E = comdat any

$_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv = comdat any

$_ZNSt12_Vector_baseIxSaIxEED2Ev = comdat any

$_ZSt8_DestroyIPxEvT_S1_ = comdat any

$_ZNSt12_Destroy_auxILb1EE9__destroyIPxEEvT_S3_ = comdat any

$_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm = comdat any

$_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev = comdat any

$_ZNSt16allocator_traitsISaIxEE10deallocateERS0_Pxm = comdat any

$_ZN9__gnu_cxx13new_allocatorIxE10deallocateEPxm = comdat any

$_ZNSaIxED2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIxED2Ev = comdat any

$_ZNKSt6vectorIxSaIxEE4sizeEv = comdat any

$_ZNSt6vectorIxSaIxEE6insertEN9__gnu_cxx17__normal_iteratorIPKxS1_EEmRS4_ = comdat any

$_ZNSt6vectorIxSaIxEE3endEv = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEEC2IPxEERKNS0_IT_NS_11__enable_ifIXsr3std10__are_sameIS9_S8_EE7__valueES5_E6__typeEEE = comdat any

$_ZNSt6vectorIxSaIxEE15_M_erase_at_endEPx = comdat any

$_ZN9__gnu_cxxmiIPKxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_ = comdat any

$_ZNKSt6vectorIxSaIxEE6cbeginEv = comdat any

$_ZNSt6vectorIxSaIxEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPxS1_EEmRKx = comdat any

$_ZNSt6vectorIxSaIxEE5beginEv = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEE4baseEv = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEEC2ERKS2_ = comdat any

$_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_ = comdat any

$_ZSt22__uninitialized_move_aIPxS0_SaIxEET0_T_S3_S2_RT1_ = comdat any

$_ZSt13move_backwardIPxS0_ET0_T_S2_S1_ = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv = comdat any

$_ZSt4fillIPxxEvT_S1_RKT0_ = comdat any

$_ZSt24__uninitialized_fill_n_aIPxmxxET_S1_T0_RKT1_RSaIT2_E = comdat any

$_ZNKSt6vectorIxSaIxEE12_M_check_lenEmPKc = comdat any

$_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm = comdat any

$_ZSt34__uninitialized_move_if_noexcept_aIPxS0_SaIxEET0_T_S3_S2_RT1_ = comdat any

$_ZSt22__uninitialized_copy_aISt13move_iteratorIPxES1_xET0_T_S4_S3_RSaIT1_E = comdat any

$_ZSt18make_move_iteratorIPxESt13move_iteratorIT_ES2_ = comdat any

$_ZSt18uninitialized_copyISt13move_iteratorIPxES1_ET0_T_S4_S3_ = comdat any

$_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPxES3_EET0_T_S6_S5_ = comdat any

$_ZSt4copyISt13move_iteratorIPxES1_ET0_T_S4_S3_ = comdat any

$_ZSt14__copy_move_a2ILb1EPxS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_ = comdat any

$_ZSt13__copy_move_aILb1EPxS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_ = comdat any

$_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_ = comdat any

$_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_ = comdat any

$_ZNSt10_Iter_baseISt13move_iteratorIPxELb1EE7_S_baseES2_ = comdat any

$_ZNKSt13move_iteratorIPxE4baseEv = comdat any

$_ZNSt13move_iteratorIPxEC2ES0_ = comdat any

$_ZSt23__copy_move_backward_a2ILb1EPxS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__miter_baseIPxENSt11_Miter_baseIT_E13iterator_typeES2_ = comdat any

$_ZSt22__copy_move_backward_aILb1EPxS0_ET1_T0_S2_S1_ = comdat any

$_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIxEEPT_PKS3_S6_S4_ = comdat any

$_ZSt8__fill_aIPxxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_ = comdat any

$_ZSt20uninitialized_fill_nIPxmxET_S1_T0_RKT1_ = comdat any

$_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPxmxEET_S3_T0_RKT1_ = comdat any

$_ZSt6fill_nIPxmxET_S1_T0_RKT1_ = comdat any

$_ZSt10__fill_n_aIPxmxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_ = comdat any

$_ZNKSt6vectorIxSaIxEE8max_sizeEv = comdat any

$_ZSt3maxImERKT_S2_S2_ = comdat any

$_ZNSt16allocator_traitsISaIxEE8max_sizeERKS0_ = comdat any

$_ZNKSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv = comdat any

$_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv = comdat any

$_ZNSt16allocator_traitsISaIxEE8allocateERS0_m = comdat any

$_ZN9__gnu_cxx13new_allocatorIxE8allocateEmPKv = comdat any

$_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_ = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_ = comdat any

$_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_ = comdat any

$_ZSt4__lgl = comdat any

$_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_ = comdat any

$_ZSt9iter_swapIP4ballS1_EvT_T0_ = comdat any

$_ZSt4swapI4ballEvRT_S2_ = comdat any

$_ZSt13move_backwardIP4ballS1_ET0_T_S3_S2_ = comdat any

$_ZSt23__copy_move_backward_a2ILb1EP4ballS1_ET1_T0_S3_S2_ = comdat any

$_ZSt12__miter_baseIP4ballENSt11_Miter_baseIT_E13iterator_typeES3_ = comdat any

$_ZSt22__copy_move_backward_aILb1EP4ballS1_ET1_T0_S3_S2_ = comdat any

$_ZSt12__niter_baseIP4ballENSt11_Niter_baseIT_E13iterator_typeES3_ = comdat any

$_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI4ballEEPT_PKS4_S7_S5_ = comdat any

$_ZNSt10_Iter_baseIP4ballLb0EE7_S_baseES1_ = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEEC2Ev = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EEC2Ev = comdat any

$_ZNSaISt13_Rb_tree_nodeIxEEC2Ev = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EE13_M_initializeEv = comdat any

$_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEEC2Ev = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE15_M_insert_equalIRKxEESt17_Rb_tree_iteratorIxEOT_ = comdat any

$_ZNSt23_Rb_tree_const_iteratorIxEC2ERKSt17_Rb_tree_iteratorIxE = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE23_M_get_insert_equal_posERKx = comdat any

$_ZNKSt9_IdentityIxEclERKx = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_Alloc_nodeC2ERS5_ = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE10_M_insert_IRKxNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIxEPSt18_Rb_tree_node_baseSD_OT_RT0_ = comdat any

$_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_M_endEv = comdat any

$_ZNKSt4lessIxEclERKxS2_ = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt13_Rb_tree_nodeIxE = comdat any

$_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIxES7_vEEOT_OT0_ = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_valueEPKSt13_Rb_tree_nodeIxE = comdat any

$_ZNKSt13_Rb_tree_nodeIxE9_M_valptrEv = comdat any

$_ZNK9__gnu_cxx16__aligned_membufIxE6_M_ptrEv = comdat any

$_ZNK9__gnu_cxx16__aligned_membufIxE7_M_addrEv = comdat any

$_ZSt7forwardIRPSt13_Rb_tree_nodeIxEEOT_RNSt16remove_referenceIS4_E4typeE = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt18_Rb_tree_node_base = comdat any

$_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_Alloc_nodeclIRKxEEPSt13_Rb_tree_nodeIxEOT_ = comdat any

$_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_valueEPKSt18_Rb_tree_node_base = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE14_M_create_nodeIJRKxEEEPSt13_Rb_tree_nodeIxEDpOT_ = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_M_get_nodeEv = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE17_M_construct_nodeIJRKxEEEvPSt13_Rb_tree_nodeIxEDpOT_ = comdat any

$_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE8allocateERS2_m = comdat any

$_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE8allocateEmPKv = comdat any

$_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE8max_sizeEv = comdat any

$_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE9constructIxJRKxEEEvRS2_PT_DpOT0_ = comdat any

$_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE9constructIxJRKxEEEvPT_DpOT0_ = comdat any

$_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6rbeginEv = comdat any

$_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE3endEv = comdat any

$_ZNSt16reverse_iteratorISt23_Rb_tree_const_iteratorIxEEC2ES1_ = comdat any

$_ZNSt23_Rb_tree_const_iteratorIxEC2EPKSt18_Rb_tree_node_base = comdat any

$_ZNSt23_Rb_tree_const_iteratorIxEmmEv = comdat any

$_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE5beginEv = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE4findERKx = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE14_M_lower_boundEPSt13_Rb_tree_nodeIxES8_RKx = comdat any

$_ZNKSt17_Rb_tree_iteratorIxEeqERKS0_ = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE3endEv = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIxE = comdat any

$_ZNSt23_Rb_tree_const_iteratorIxEppEv = comdat any

$_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE12_M_erase_auxESt23_Rb_tree_const_iteratorIxE = comdat any

$_ZNKSt23_Rb_tree_const_iteratorIxE13_M_const_castEv = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZL3MOD = internal global i64 0, align 8
@_ZL5LLINF = internal global i64 0, align 8
@_ZL3INF = internal global i32 0, align 4
@fac = global %"class.std::vector" zeroinitializer, align 8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [23 x i8] c"vector::_M_fill_insert\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s229975691.cpp, i8* null }]
@x = common global i32 0
@y = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0
@x.111 = common global i32 0
@y.112 = common global i32 0
@x.113 = common global i32 0
@y.114 = common global i32 0
@x.115 = common global i32 0
@y.116 = common global i32 0
@x.117 = common global i32 0
@y.118 = common global i32 0
@x.119 = common global i32 0
@y.120 = common global i32 0
@x.121 = common global i32 0
@y.122 = common global i32 0
@x.123 = common global i32 0
@y.124 = common global i32 0
@x.125 = common global i32 0
@y.126 = common global i32 0
@x.127 = common global i32 0
@y.128 = common global i32 0
@x.129 = common global i32 0
@y.130 = common global i32 0
@x.131 = common global i32 0
@y.132 = common global i32 0
@x.133 = common global i32 0
@y.134 = common global i32 0
@x.135 = common global i32 0
@y.136 = common global i32 0
@x.137 = common global i32 0
@y.138 = common global i32 0
@x.139 = common global i32 0
@y.140 = common global i32 0
@x.141 = common global i32 0
@y.142 = common global i32 0
@x.143 = common global i32 0
@y.144 = common global i32 0
@x.145 = common global i32 0
@y.146 = common global i32 0
@x.147 = common global i32 0
@y.148 = common global i32 0
@x.149 = common global i32 0
@y.150 = common global i32 0
@x.151 = common global i32 0
@y.152 = common global i32 0
@x.153 = common global i32 0
@y.154 = common global i32 0
@x.155 = common global i32 0
@y.156 = common global i32 0
@x.157 = common global i32 0
@y.158 = common global i32 0
@x.159 = common global i32 0
@y.160 = common global i32 0
@x.161 = common global i32 0
@y.162 = common global i32 0
@x.163 = common global i32 0
@y.164 = common global i32 0
@x.165 = common global i32 0
@y.166 = common global i32 0
@x.167 = common global i32 0
@y.168 = common global i32 0
@x.169 = common global i32 0
@y.170 = common global i32 0
@x.171 = common global i32 0
@y.172 = common global i32 0
@x.173 = common global i32 0
@y.174 = common global i32 0
@x.175 = common global i32 0
@y.176 = common global i32 0
@x.177 = common global i32 0
@y.178 = common global i32 0
@x.179 = common global i32 0
@y.180 = common global i32 0
@x.181 = common global i32 0
@y.182 = common global i32 0
@x.183 = common global i32 0
@y.184 = common global i32 0
@x.185 = common global i32 0
@y.186 = common global i32 0
@x.187 = common global i32 0
@y.188 = common global i32 0
@x.189 = common global i32 0
@y.190 = common global i32 0
@x.191 = common global i32 0
@y.192 = common global i32 0
@x.193 = common global i32 0
@y.194 = common global i32 0
@x.195 = common global i32 0
@y.196 = common global i32 0
@x.197 = common global i32 0
@y.198 = common global i32 0
@x.199 = common global i32 0
@y.200 = common global i32 0
@x.201 = common global i32 0
@y.202 = common global i32 0
@x.203 = common global i32 0
@y.204 = common global i32 0
@x.205 = common global i32 0
@y.206 = common global i32 0
@x.207 = common global i32 0
@y.208 = common global i32 0
@x.209 = common global i32 0
@y.210 = common global i32 0
@x.211 = common global i32 0
@y.212 = common global i32 0
@x.213 = common global i32 0
@y.214 = common global i32 0
@x.215 = common global i32 0
@y.216 = common global i32 0
@x.217 = common global i32 0
@y.218 = common global i32 0
@x.219 = common global i32 0
@y.220 = common global i32 0
@x.221 = common global i32 0
@y.222 = common global i32 0
@x.223 = common global i32 0
@y.224 = common global i32 0
@x.225 = common global i32 0
@y.226 = common global i32 0
@x.227 = common global i32 0
@y.228 = common global i32 0
@x.229 = common global i32 0
@y.230 = common global i32 0
@x.231 = common global i32 0
@y.232 = common global i32 0
@x.233 = common global i32 0
@y.234 = common global i32 0
@x.235 = common global i32 0
@y.236 = common global i32 0
@x.237 = common global i32 0
@y.238 = common global i32 0
@x.239 = common global i32 0
@y.240 = common global i32 0
@x.241 = common global i32 0
@y.242 = common global i32 0
@x.243 = common global i32 0
@y.244 = common global i32 0
@x.245 = common global i32 0
@y.246 = common global i32 0
@x.247 = common global i32 0
@y.248 = common global i32 0
@x.249 = common global i32 0
@y.250 = common global i32 0
@x.251 = common global i32 0
@y.252 = common global i32 0
@x.253 = common global i32 0
@y.254 = common global i32 0
@x.255 = common global i32 0
@y.256 = common global i32 0
@x.257 = common global i32 0
@y.258 = common global i32 0
@x.259 = common global i32 0
@y.260 = common global i32 0
@x.261 = common global i32 0
@y.262 = common global i32 0
@x.263 = common global i32 0
@y.264 = common global i32 0
@x.265 = common global i32 0
@y.266 = common global i32 0
@x.267 = common global i32 0
@y.268 = common global i32 0
@x.269 = common global i32 0
@y.270 = common global i32 0
@x.271 = common global i32 0
@y.272 = common global i32 0
@x.273 = common global i32 0
@y.274 = common global i32 0
@x.275 = common global i32 0
@y.276 = common global i32 0
@x.277 = common global i32 0
@y.278 = common global i32 0
@x.279 = common global i32 0
@y.280 = common global i32 0
@x.281 = common global i32 0
@y.282 = common global i32 0
@x.283 = common global i32 0
@y.284 = common global i32 0
@x.285 = common global i32 0
@y.286 = common global i32 0
@x.287 = common global i32 0
@y.288 = common global i32 0
@x.289 = common global i32 0
@y.290 = common global i32 0
@x.291 = common global i32 0
@y.292 = common global i32 0
@x.293 = common global i32 0
@y.294 = common global i32 0
@x.295 = common global i32 0
@y.296 = common global i32 0
@x.297 = common global i32 0
@y.298 = common global i32 0
@x.299 = common global i32 0
@y.300 = common global i32 0
@x.301 = common global i32 0
@y.302 = common global i32 0
@x.303 = common global i32 0
@y.304 = common global i32 0
@x.305 = common global i32 0
@y.306 = common global i32 0
@x.307 = common global i32 0
@y.308 = common global i32 0
@x.309 = common global i32 0
@y.310 = common global i32 0
@x.311 = common global i32 0
@y.312 = common global i32 0
@x.313 = common global i32 0
@y.314 = common global i32 0
@x.315 = common global i32 0
@y.316 = common global i32 0
@x.317 = common global i32 0
@y.318 = common global i32 0
@x.319 = common global i32 0
@y.320 = common global i32 0
@x.321 = common global i32 0
@y.322 = common global i32 0
@x.323 = common global i32 0
@y.324 = common global i32 0
@x.325 = common global i32 0
@y.326 = common global i32 0
@x.327 = common global i32 0
@y.328 = common global i32 0
@x.329 = common global i32 0
@y.330 = common global i32 0
@x.331 = common global i32 0
@y.332 = common global i32 0
@x.333 = common global i32 0
@y.334 = common global i32 0
@x.335 = common global i32 0
@y.336 = common global i32 0
@x.337 = common global i32 0
@y.338 = common global i32 0
@x.339 = common global i32 0
@y.340 = common global i32 0
@x.341 = common global i32 0
@y.342 = common global i32 0
@x.343 = common global i32 0
@y.344 = common global i32 0
@x.345 = common global i32 0
@y.346 = common global i32 0
@x.347 = common global i32 0
@y.348 = common global i32 0
@x.349 = common global i32 0
@y.350 = common global i32 0
@x.351 = common global i32 0
@y.352 = common global i32 0
@x.353 = common global i32 0
@y.354 = common global i32 0
@x.355 = common global i32 0
@y.356 = common global i32 0
@x.357 = common global i32 0
@y.358 = common global i32 0
@x.359 = common global i32 0
@y.360 = common global i32 0
@x.361 = common global i32 0
@y.362 = common global i32 0
@x.363 = common global i32 0
@y.364 = common global i32 0
@x.365 = common global i32 0
@y.366 = common global i32 0
@x.367 = common global i32 0
@y.368 = common global i32 0
@x.369 = common global i32 0
@y.370 = common global i32 0
@x.371 = common global i32 0
@y.372 = common global i32 0
@x.373 = common global i32 0
@y.374 = common global i32 0
@x.375 = common global i32 0
@y.376 = common global i32 0
@x.377 = common global i32 0
@y.378 = common global i32 0
@x.379 = common global i32 0
@y.380 = common global i32 0
@x.381 = common global i32 0
@y.382 = common global i32 0
@x.383 = common global i32 0
@y.384 = common global i32 0
@x.385 = common global i32 0
@y.386 = common global i32 0
@x.387 = common global i32 0
@y.388 = common global i32 0
@x.389 = common global i32 0
@y.390 = common global i32 0
@x.391 = common global i32 0
@y.392 = common global i32 0
@x.393 = common global i32 0
@y.394 = common global i32 0
@x.395 = common global i32 0
@y.396 = common global i32 0
@x.397 = common global i32 0
@y.398 = common global i32 0
@x.399 = common global i32 0
@y.400 = common global i32 0
@x.401 = common global i32 0
@y.402 = common global i32 0
@x.403 = common global i32 0
@y.404 = common global i32 0
@x.405 = common global i32 0
@y.406 = common global i32 0
@x.407 = common global i32 0
@y.408 = common global i32 0
@x.409 = common global i32 0
@y.410 = common global i32 0
@x.411 = common global i32 0
@y.412 = common global i32 0
@x.413 = common global i32 0
@y.414 = common global i32 0
@x.415 = common global i32 0
@y.416 = common global i32 0
@x.417 = common global i32 0
@y.418 = common global i32 0
@x.419 = common global i32 0
@y.420 = common global i32 0
@x.421 = common global i32 0
@y.422 = common global i32 0
@x.423 = common global i32 0
@y.424 = common global i32 0
@x.425 = common global i32 0
@y.426 = common global i32 0
@x.427 = common global i32 0
@y.428 = common global i32 0
@x.429 = common global i32 0
@y.430 = common global i32 0
@x.431 = common global i32 0
@y.432 = common global i32 0
@x.433 = common global i32 0
@y.434 = common global i32 0
@x.435 = common global i32 0
@y.436 = common global i32 0
@x.437 = common global i32 0
@y.438 = common global i32 0
@x.439 = common global i32 0
@y.440 = common global i32 0
@x.441 = common global i32 0
@y.442 = common global i32 0
@x.443 = common global i32 0
@y.444 = common global i32 0
@x.445 = common global i32 0
@y.446 = common global i32 0
@x.447 = common global i32 0
@y.448 = common global i32 0
@x.449 = common global i32 0
@y.450 = common global i32 0
@x.451 = common global i32 0
@y.452 = common global i32 0
@x.453 = common global i32 0
@y.454 = common global i32 0
@x.455 = common global i32 0
@y.456 = common global i32 0
@x.457 = common global i32 0
@y.458 = common global i32 0
@x.459 = common global i32 0
@y.460 = common global i32 0
@x.461 = common global i32 0
@y.462 = common global i32 0
@x.463 = common global i32 0
@y.464 = common global i32 0
@x.465 = common global i32 0
@y.466 = common global i32 0
@x.467 = common global i32 0
@y.468 = common global i32 0
@x.469 = common global i32 0
@y.470 = common global i32 0
@x.471 = common global i32 0
@y.472 = common global i32 0
@x.473 = common global i32 0
@y.474 = common global i32 0
@x.475 = common global i32 0
@y.476 = common global i32 0
@x.477 = common global i32 0
@y.478 = common global i32 0
@x.479 = common global i32 0
@y.480 = common global i32 0
@x.481 = common global i32 0
@y.482 = common global i32 0
@x.483 = common global i32 0
@y.484 = common global i32 0
@x.485 = common global i32 0
@y.486 = common global i32 0
@x.487 = common global i32 0
@y.488 = common global i32 0
@x.489 = common global i32 0
@y.490 = common global i32 0
@x.491 = common global i32 0
@y.492 = common global i32 0
@x.493 = common global i32 0
@y.494 = common global i32 0
@x.495 = common global i32 0
@y.496 = common global i32 0
@x.497 = common global i32 0
@y.498 = common global i32 0
@x.499 = common global i32 0
@y.500 = common global i32 0
@x.501 = common global i32 0
@y.502 = common global i32 0
@x.503 = common global i32 0
@y.504 = common global i32 0
@x.505 = common global i32 0
@y.506 = common global i32 0
@x.507 = common global i32 0
@y.508 = common global i32 0
@x.509 = common global i32 0
@y.510 = common global i32 0
@x.511 = common global i32 0
@y.512 = common global i32 0
@x.513 = common global i32 0
@y.514 = common global i32 0
@x.515 = common global i32 0
@y.516 = common global i32 0

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.1() #0 section ".text.startup" {
  %1 = call double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32 10, i32 9)
  %2 = fadd double %1, 7.000000e+00
  %3 = fptosi double %2 to i64
  store i64 %3, i64* @_ZL3MOD, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32, i32) #4 comdat {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = sitofp i32 %5 to double
  %7 = load i32, i32* %4, align 4
  %8 = sitofp i32 %7 to double
  %9 = call double @pow(double %6, double %8) #3
  ret double %9
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.2() #0 section ".text.startup" {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.9
  %4 = load i32, i32* @y.10
  %5 = sub i32 %3, -1631370430
  %6 = sub i32 %5, 1
  %7 = add i32 %6, -1631370430
  %8 = sub i32 %3, 1
  %9 = mul i32 %3, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %2
  %12 = icmp slt i32 %4, 10
  store i1 %12, i1* %1
  %13 = alloca i32
  store i32 1455181696, i32* %13
  br label %14

; <label>:14:                                     ; preds = %0, %81
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 1455181696, label %17
    i32 -1273614989, label %37
    i32 -2060574573, label %68
    i32 -1699333487, label %69
  ]

; <label>:16:                                     ; preds = %14
  br label %81

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %2
  %19 = load volatile i1, i1* %1
  %20 = xor i1 %18, true
  %21 = xor i1 %19, true
  %22 = xor i1 true, true
  %23 = and i1 %20, true
  %24 = and i1 %18, %22
  %25 = and i1 %21, true
  %26 = and i1 %19, %22
  %27 = or i1 %23, %24
  %28 = or i1 %25, %26
  %29 = xor i1 %27, %28
  %30 = or i1 %20, %21
  %31 = xor i1 %30, true
  %32 = or i1 true, %22
  %33 = and i1 %31, %32
  %34 = or i1 %29, %33
  %35 = or i1 %18, %19
  %36 = select i1 %34, i32 -1273614989, i32 -1699333487
  store i32 %36, i32* %13
  br label %81

; <label>:37:                                     ; preds = %14
  %38 = call double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32 2, i32 61)
  %39 = fsub double %38, 1.000000e+00
  %40 = fptosi double %39 to i64
  store i64 %40, i64* @_ZL5LLINF, align 8
  %41 = load i32, i32* @x.9
  %42 = load i32, i32* @y.10
  %43 = sub i32 %41, 788016125
  %44 = sub i32 %43, 1
  %45 = add i32 %44, 788016125
  %46 = sub i32 %41, 1
  %47 = mul i32 %41, %45
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %42, 10
  %51 = xor i1 %49, true
  %52 = xor i1 %50, true
  %53 = xor i1 true, true
  %54 = and i1 %51, true
  %55 = and i1 %49, %53
  %56 = and i1 %52, true
  %57 = and i1 %50, %53
  %58 = or i1 %54, %55
  %59 = or i1 %56, %57
  %60 = xor i1 %58, %59
  %61 = or i1 %51, %52
  %62 = xor i1 %61, true
  %63 = or i1 true, %53
  %64 = and i1 %62, %63
  %65 = or i1 %60, %64
  %66 = or i1 %49, %50
  %67 = select i1 %65, i32 -2060574573, i32 -1699333487
  store i32 %67, i32* %13
  br label %81

; <label>:68:                                     ; preds = %14
  ret void

; <label>:69:                                     ; preds = %14
  %70 = call double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32 2, i32 61)
  %71 = fsub double -0.000000e+00, %70
  %72 = fadd double %71, 1.000000e+00
  %73 = fsub double %70, 1.000000e+00
  %74 = fmul double %73, 1.000000e+00
  %75 = fsub double -0.000000e+00, %70
  %76 = fadd double %75, 1.000000e+00
  %77 = fsub double %70, 1.000000e+00
  %78 = fmul double %77, 1.000000e+00
  %79 = fsub double %70, 1.000000e+00
  %80 = fptosi double %79 to i64
  store i64 %80, i64* @_ZL5LLINF, align 8
  store i32 -1273614989, i32* %13
  br label %81

; <label>:81:                                     ; preds = %69, %37, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.3() #0 section ".text.startup" {
  %1 = call double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32 2, i32 30)
  %2 = fsub double %1, 1.000000e+00
  %3 = fptosi double %2 to i32
  store i32 %3, i32* @_ZL3INF, align 4
  ret void
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.4() #0 section ".text.startup" {
  call void @_ZNSt6vectorIxSaIxEEC2Ev(%"class.std::vector"* @fac) #3
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector"*)* @_ZNSt6vectorIxSaIxEED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector"* @fac to i8*), i8* @__dso_handle) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEEC2Ev(%"class.std::vector"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %2, align 8
  %3 = load %"class.std::vector"*, %"class.std::vector"** %2, align 8
  %4 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  invoke void @_ZNSt12_Vector_baseIxSaIxEEC2Ev(%"struct.std::_Vector_base"* %4)
          to label %5 unwind label %6

; <label>:5:                                      ; preds = %1
  ret void

; <label>:6:                                      ; preds = %1
  %7 = load i32, i32* @x.15
  %8 = load i32, i32* @y.16
  %9 = add i32 %7, -178351076
  %10 = sub i32 %9, 1
  %11 = sub i32 %10, -178351076
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %8, 10
  %17 = and i1 %15, %16
  %18 = xor i1 %15, %16
  %19 = or i1 %17, %18
  %20 = or i1 %15, %16
  br i1 %19, label %21, label %38

; <label>:21:                                     ; preds = %6, %38
  %22 = landingpad { i8*, i32 }
          catch i8* null
  %23 = extractvalue { i8*, i32 } %22, 0
  call void @__clang_call_terminate(i8* %23) #13
  %24 = load i32, i32* @x.15
  %25 = load i32, i32* @y.16
  %26 = sub i32 0, 1
  %27 = add i32 %24, %26
  %28 = sub i32 %24, 1
  %29 = mul i32 %24, %27
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %25, 10
  %33 = and i1 %31, %32
  %34 = xor i1 %31, %32
  %35 = or i1 %33, %34
  %36 = or i1 %31, %32
  br i1 %35, label %37, label %38

; <label>:37:                                     ; preds = %21
  unreachable

; <label>:38:                                     ; preds = %21, %6
  %39 = landingpad { i8*, i32 }
          catch i8* null
  %40 = extractvalue { i8*, i32 } %39, 0
  call void @__clang_call_terminate(i8* %40) #13
  br label %21
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEED2Ev(%"class.std::vector"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::vector"*, align 8
  %3 = alloca i8*
  %4 = alloca i32
  store %"class.std::vector"* %0, %"class.std::vector"** %2, align 8
  %5 = load %"class.std::vector"*, %"class.std::vector"** %2, align 8
  %6 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %7 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %6, i32 0, i32 0
  %8 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %7, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %11 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %10, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %11, i32 0, i32 1
  %13 = load i64*, i64** %12, align 8
  %14 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %15 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %14) #3
  invoke void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %9, i64* %13, %"class.std::allocator"* dereferenceable(1) %15)
          to label %16 unwind label %18

; <label>:16:                                     ; preds = %1
  %17 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  call void @_ZNSt12_Vector_baseIxSaIxEED2Ev(%"struct.std::_Vector_base"* %17) #3
  ret void

; <label>:18:                                     ; preds = %1
  %19 = landingpad { i8*, i32 }
          catch i8* null
  %20 = extractvalue { i8*, i32 } %19, 0
  store i8* %20, i8** %3, align 8
  %21 = extractvalue { i8*, i32 } %19, 1
  store i32 %21, i32* %4, align 4
  %22 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  call void @_ZNSt12_Vector_baseIxSaIxEED2Ev(%"struct.std::_Vector_base"* %22) #3
  br label %23

; <label>:23:                                     ; preds = %18
  %24 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %24) #13
  unreachable
}

; Function Attrs: noinline uwtable
define void @_Z5c_faci(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* %2, align 4
  %6 = sext i32 %5 to i64
  store i64 1, i64* %3, align 8
  call void @_ZNSt6vectorIxSaIxEE6resizeEmRKx(%"class.std::vector"* @fac, i64 %6, i64* dereferenceable(8) %3)
  store i32 0, i32* %4, align 4
  %7 = alloca i32
  store i32 209002787, i32* %7
  %8 = alloca i64
  br label %9

; <label>:9:                                      ; preds = %1, %94
  %10 = load i32, i32* %7
  switch i32 %10, label %11 [
    i32 209002787, label %12
    i32 -889808492, label %17
    i32 1627282107, label %21
    i32 805304597, label %35
    i32 199829690, label %51
    i32 -44600882, label %79
    i32 78405435, label %80
    i32 -1701729590, label %85
    i32 1909226118, label %92
    i32 -753854053, label %93
  ]

; <label>:11:                                     ; preds = %9
  br label %94

; <label>:12:                                     ; preds = %9
  %13 = load i32, i32* %4, align 4
  %14 = load i32, i32* %2, align 4
  %15 = icmp slt i32 %13, %14
  %16 = select i1 %15, i32 -889808492, i32 1909226118
  store i32 %16, i32* %7
  br label %94

; <label>:17:                                     ; preds = %9
  %18 = load i32, i32* %4, align 4
  %19 = icmp ne i32 %18, 0
  %20 = select i1 %19, i32 1627282107, i32 805304597
  store i32 %20, i32* %7
  br label %94

; <label>:21:                                     ; preds = %9
  %22 = load i32, i32* %4, align 4
  %23 = sub i32 %22, -1779485679
  %24 = sub i32 %23, 1
  %25 = add i32 %24, -1779485679
  %26 = sub nsw i32 %22, 1
  %27 = sext i32 %25 to i64
  %28 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @fac, i64 %27) #3
  %29 = load i64, i64* %28, align 8
  %30 = load i32, i32* %4, align 4
  %31 = sext i32 %30 to i64
  %32 = mul nsw i64 %29, %31
  %33 = load i64, i64* @_ZL3MOD, align 8
  %34 = srem i64 %32, %33
  store i32 78405435, i32* %7
  store i64 %34, i64* %8
  br label %94

; <label>:35:                                     ; preds = %9
  %36 = load i32, i32* @x.19
  %37 = load i32, i32* @y.20
  %38 = add i32 %36, -501663750
  %39 = sub i32 %38, 1
  %40 = sub i32 %39, -501663750
  %41 = sub i32 %36, 1
  %42 = mul i32 %36, %40
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %37, 10
  %46 = and i1 %44, %45
  %47 = xor i1 %44, %45
  %48 = or i1 %46, %47
  %49 = or i1 %44, %45
  %50 = select i1 %48, i32 199829690, i32 -753854053
  store i32 %50, i32* %7
  br label %94

; <label>:51:                                     ; preds = %9
  %52 = load i32, i32* @x.19
  %53 = load i32, i32* @y.20
  %54 = sub i32 %52, -318678671
  %55 = sub i32 %54, 1
  %56 = add i32 %55, -318678671
  %57 = sub i32 %52, 1
  %58 = mul i32 %52, %56
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %53, 10
  %62 = xor i1 %60, true
  %63 = xor i1 %61, true
  %64 = xor i1 false, true
  %65 = and i1 %62, false
  %66 = and i1 %60, %64
  %67 = and i1 %63, false
  %68 = and i1 %61, %64
  %69 = or i1 %65, %66
  %70 = or i1 %67, %68
  %71 = xor i1 %69, %70
  %72 = or i1 %62, %63
  %73 = xor i1 %72, true
  %74 = or i1 false, %64
  %75 = and i1 %73, %74
  %76 = or i1 %71, %75
  %77 = or i1 %60, %61
  %78 = select i1 %76, i32 -44600882, i32 -753854053
  store i32 %78, i32* %7
  br label %94

; <label>:79:                                     ; preds = %9
  store i32 78405435, i32* %7
  store i64 1, i64* %8
  br label %94

; <label>:80:                                     ; preds = %9
  %81 = load i64, i64* %8
  %82 = load i32, i32* %4, align 4
  %83 = sext i32 %82 to i64
  %84 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @fac, i64 %83) #3
  store i64 %81, i64* %84, align 8
  store i32 -1701729590, i32* %7
  br label %94

; <label>:85:                                     ; preds = %9
  %86 = load i32, i32* %4, align 4
  %87 = sub i32 0, %86
  %88 = sub i32 0, 1
  %89 = add i32 %87, %88
  %90 = sub i32 0, %89
  %91 = add nsw i32 %86, 1
  store i32 %90, i32* %4, align 4
  store i32 209002787, i32* %7
  br label %94

; <label>:92:                                     ; preds = %9
  ret void

; <label>:93:                                     ; preds = %9
  store i32 199829690, i32* %7
  br label %94

; <label>:94:                                     ; preds = %93, %85, %80, %79, %51, %35, %21, %17, %12, %11
  br label %9
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE6resizeEmRKx(%"class.std::vector"*, i64, i64* dereferenceable(8)) #0 comdat align 2 {
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca %"class.std::vector"*
  %7 = alloca %"class.std::vector"*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.7", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %7, align 8
  store i64 %1, i64* %8, align 8
  store i64* %2, i64** %9, align 8
  %13 = load %"class.std::vector"*, %"class.std::vector"** %7, align 8
  store %"class.std::vector"* %13, %"class.std::vector"** %6
  %14 = load i64, i64* %8, align 8
  store i64 %14, i64* %5
  %15 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %16 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %15) #3
  store i64 %16, i64* %4
  %17 = alloca i32
  store i32 -703723010, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %91
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -703723010, label %21
    i32 -602069593, label %26
    i32 1176531920, label %42
    i32 1330421270, label %48
    i32 1575820015, label %57
    i32 -1595886347, label %73
    i32 1109384988, label %88
    i32 727014072, label %89
    i32 1668712620, label %90
  ]

; <label>:20:                                     ; preds = %18
  br label %91

; <label>:21:                                     ; preds = %18
  %22 = load volatile i64, i64* %5
  %23 = load volatile i64, i64* %4
  %24 = icmp ugt i64 %22, %23
  %25 = select i1 %24, i32 -602069593, i32 1176531920
  store i32 %25, i32* %17
  br label %91

; <label>:26:                                     ; preds = %18
  %27 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %28 = call i64* @_ZNSt6vectorIxSaIxEE3endEv(%"class.std::vector"* %27) #3
  %29 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  store i64* %28, i64** %29, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEEC2IPxEERKNS0_IT_NS_11__enable_ifIXsr3std10__are_sameIS9_S8_EE7__valueES5_E6__typeEEE(%"class.__gnu_cxx::__normal_iterator.7"* %10, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %11) #3
  %30 = load i64, i64* %8, align 8
  %31 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %32 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %31) #3
  %33 = sub i64 0, %32
  %34 = add i64 %30, %33
  %35 = sub i64 %30, %32
  %36 = load i64*, i64** %9, align 8
  %37 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %10, i32 0, i32 0
  %38 = load i64*, i64** %37, align 8
  %39 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %40 = call i64* @_ZNSt6vectorIxSaIxEE6insertEN9__gnu_cxx17__normal_iteratorIPKxS1_EEmRS4_(%"class.std::vector"* %39, i64* %38, i64 %34, i64* dereferenceable(8) %36)
  %41 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  store i64* %40, i64** %41, align 8
  store i32 727014072, i32* %17
  br label %91

; <label>:42:                                     ; preds = %18
  %43 = load i64, i64* %8, align 8
  %44 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %45 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %44) #3
  %46 = icmp ult i64 %43, %45
  %47 = select i1 %46, i32 1330421270, i32 1575820015
  store i32 %47, i32* %17
  br label %91

; <label>:48:                                     ; preds = %18
  %49 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %50 = bitcast %"class.std::vector"* %49 to %"struct.std::_Vector_base"*
  %51 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %50, i32 0, i32 0
  %52 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %51, i32 0, i32 0
  %53 = load i64*, i64** %52, align 8
  %54 = load i64, i64* %8, align 8
  %55 = getelementptr inbounds i64, i64* %53, i64 %54
  %56 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  call void @_ZNSt6vectorIxSaIxEE15_M_erase_at_endEPx(%"class.std::vector"* %56, i64* %55) #3
  store i32 1575820015, i32* %17
  br label %91

; <label>:57:                                     ; preds = %18
  %58 = load i32, i32* @x.21
  %59 = load i32, i32* @y.22
  %60 = add i32 %58, -1355404146
  %61 = sub i32 %60, 1
  %62 = sub i32 %61, -1355404146
  %63 = sub i32 %58, 1
  %64 = mul i32 %58, %62
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %59, 10
  %68 = and i1 %66, %67
  %69 = xor i1 %66, %67
  %70 = or i1 %68, %69
  %71 = or i1 %66, %67
  %72 = select i1 %70, i32 -1595886347, i32 1668712620
  store i32 %72, i32* %17
  br label %91

; <label>:73:                                     ; preds = %18
  %74 = load i32, i32* @x.21
  %75 = load i32, i32* @y.22
  %76 = sub i32 0, 1
  %77 = add i32 %74, %76
  %78 = sub i32 %74, 1
  %79 = mul i32 %74, %77
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %75, 10
  %83 = and i1 %81, %82
  %84 = xor i1 %81, %82
  %85 = or i1 %83, %84
  %86 = or i1 %81, %82
  %87 = select i1 %85, i32 1109384988, i32 1668712620
  store i32 %87, i32* %17
  br label %91

; <label>:88:                                     ; preds = %18
  store i32 727014072, i32* %17
  br label %91

; <label>:89:                                     ; preds = %18
  ret void

; <label>:90:                                     ; preds = %18
  store i32 -1595886347, i32* %17
  br label %91

; <label>:91:                                     ; preds = %90, %88, %73, %57, %48, %42, %26, %21, %20
  br label %18
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"*, i64) #4 comdat align 2 {
  %3 = alloca %"class.std::vector"*, align 8
  %4 = alloca i64, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %6 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %7 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %6, i32 0, i32 0
  %8 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %7, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %4, align 8
  %11 = getelementptr inbounds i64, i64* %9, i64 %10
  ret i64* %11
}

; Function Attrs: noinline nounwind uwtable
define i64 @_Z3invxx(i64, i64) #4 {
  %3 = alloca i32*
  %4 = alloca i64*
  %5 = alloca i64*
  %6 = alloca i64*
  %7 = alloca i64*
  %8 = alloca i64*
  %9 = alloca i1
  %10 = alloca i1
  %11 = load i32, i32* @x.25
  %12 = load i32, i32* @y.26
  %13 = add i32 %11, 578879518
  %14 = sub i32 %13, 1
  %15 = sub i32 %14, 578879518
  %16 = sub i32 %11, 1
  %17 = mul i32 %11, %15
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  store i1 %19, i1* %10
  %20 = icmp slt i32 %12, 10
  store i1 %20, i1* %9
  %21 = alloca i32
  store i32 464149467, i32* %21
  br label %22

; <label>:22:                                     ; preds = %2, %137
  %23 = load i32, i32* %21
  switch i32 %23, label %24 [
    i32 464149467, label %25
    i32 2015984911, label %33
    i32 -1986676669, label %74
    i32 3279266, label %75
    i32 -1346209618, label %80
    i32 1674411926, label %118
    i32 -1534061789, label %129
  ]

; <label>:24:                                     ; preds = %22
  br label %137

; <label>:25:                                     ; preds = %22
  %26 = load volatile i1, i1* %10
  %27 = load volatile i1, i1* %9
  %28 = and i1 %26, %27
  %29 = xor i1 %26, %27
  %30 = or i1 %28, %29
  %31 = or i1 %26, %27
  %32 = select i1 %30, i32 2015984911, i32 -1534061789
  store i32 %32, i32* %21
  br label %137

; <label>:33:                                     ; preds = %22
  %34 = alloca i64, align 8
  store i64* %34, i64** %8
  %35 = alloca i64, align 8
  store i64* %35, i64** %7
  %36 = alloca i64, align 8
  store i64* %36, i64** %6
  %37 = alloca i64, align 8
  store i64* %37, i64** %5
  %38 = alloca i64, align 8
  store i64* %38, i64** %4
  %39 = alloca i32, align 4
  store i32* %39, i32** %3
  %40 = load volatile i64*, i64** %8
  store i64 %0, i64* %40, align 8
  %41 = load volatile i64*, i64** %7
  store i64 %1, i64* %41, align 8
  %42 = load volatile i64*, i64** %7
  %43 = load i64, i64* %42, align 8
  %44 = load volatile i64*, i64** %6
  store i64 %43, i64* %44, align 8
  %45 = load volatile i64*, i64** %5
  store i64 1, i64* %45, align 8
  %46 = load volatile i64*, i64** %4
  store i64 0, i64* %46, align 8
  %47 = load i32, i32* @x.25
  %48 = load i32, i32* @y.26
  %49 = sub i32 %47, -46750276
  %50 = sub i32 %49, 1
  %51 = add i32 %50, -46750276
  %52 = sub i32 %47, 1
  %53 = mul i32 %47, %51
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %48, 10
  %57 = xor i1 %55, true
  %58 = xor i1 %56, true
  %59 = xor i1 false, true
  %60 = and i1 %57, false
  %61 = and i1 %55, %59
  %62 = and i1 %58, false
  %63 = and i1 %56, %59
  %64 = or i1 %60, %61
  %65 = or i1 %62, %63
  %66 = xor i1 %64, %65
  %67 = or i1 %57, %58
  %68 = xor i1 %67, true
  %69 = or i1 false, %59
  %70 = and i1 %68, %69
  %71 = or i1 %66, %70
  %72 = or i1 %55, %56
  %73 = select i1 %71, i32 -1986676669, i32 -1534061789
  store i32 %73, i32* %21
  br label %137

; <label>:74:                                     ; preds = %22
  store i32 3279266, i32* %21
  br label %137

; <label>:75:                                     ; preds = %22
  %76 = load volatile i64*, i64** %6
  %77 = load i64, i64* %76, align 8
  %78 = icmp ne i64 %77, 0
  %79 = select i1 %78, i32 -1346209618, i32 1674411926
  store i32 %79, i32* %21
  br label %137

; <label>:80:                                     ; preds = %22
  %81 = load volatile i64*, i64** %8
  %82 = load i64, i64* %81, align 8
  %83 = load volatile i64*, i64** %6
  %84 = load i64, i64* %83, align 8
  %85 = sdiv i64 %82, %84
  %86 = trunc i64 %85 to i32
  %87 = load volatile i32*, i32** %3
  store i32 %86, i32* %87, align 4
  %88 = load volatile i64*, i64** %6
  %89 = load i64, i64* %88, align 8
  %90 = load volatile i32*, i32** %3
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %89, %92
  %94 = load volatile i64*, i64** %8
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %95, 4182853859667231085
  %97 = sub i64 %96, %93
  %98 = sub i64 %97, 4182853859667231085
  %99 = sub nsw i64 %95, %93
  %100 = load volatile i64*, i64** %8
  store i64 %98, i64* %100, align 8
  %101 = load volatile i64*, i64** %8
  %102 = load volatile i64*, i64** %6
  call void @_ZSt4swapIxEvRT_S1_(i64* dereferenceable(8) %101, i64* dereferenceable(8) %102) #3
  %103 = load volatile i64*, i64** %4
  %104 = load i64, i64* %103, align 8
  %105 = load volatile i32*, i32** %3
  %106 = load i32, i32* %105, align 4
  %107 = sext i32 %106 to i64
  %108 = mul nsw i64 %104, %107
  %109 = load volatile i64*, i64** %5
  %110 = load i64, i64* %109, align 8
  %111 = sub i64 %110, -7580727758864165515
  %112 = sub i64 %111, %108
  %113 = add i64 %112, -7580727758864165515
  %114 = sub nsw i64 %110, %108
  %115 = load volatile i64*, i64** %5
  store i64 %113, i64* %115, align 8
  %116 = load volatile i64*, i64** %5
  %117 = load volatile i64*, i64** %4
  call void @_ZSt4swapIxEvRT_S1_(i64* dereferenceable(8) %116, i64* dereferenceable(8) %117) #3
  store i32 3279266, i32* %21
  br label %137

; <label>:118:                                    ; preds = %22
  %119 = load volatile i64*, i64** %5
  %120 = load i64, i64* %119, align 8
  %121 = load volatile i64*, i64** %7
  %122 = load i64, i64* %121, align 8
  %123 = sub i64 0, %122
  %124 = sub i64 %120, %123
  %125 = add nsw i64 %120, %122
  %126 = load volatile i64*, i64** %7
  %127 = load i64, i64* %126, align 8
  %128 = srem i64 %124, %127
  ret i64 %128

; <label>:129:                                    ; preds = %22
  %130 = alloca i64, align 8
  %131 = alloca i64, align 8
  %132 = alloca i64, align 8
  %133 = alloca i64, align 8
  %134 = alloca i64, align 8
  %135 = alloca i32, align 4
  store i64 %0, i64* %130, align 8
  store i64 %1, i64* %131, align 8
  %136 = load i64, i64* %131, align 8
  store i64 %136, i64* %132, align 8
  store i64 1, i64* %133, align 8
  store i64 0, i64* %134, align 8
  store i32 2015984911, i32* %21
  br label %137

; <label>:137:                                    ; preds = %129, %80, %75, %74, %33, %25, %24
  br label %22
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt4swapIxEvRT_S1_(i64* dereferenceable(8), i64* dereferenceable(8)) #4 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.27
  %6 = load i32, i32* @y.28
  %7 = add i32 %5, 108654371
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, 108654371
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -256242828, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %95
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -256242828, label %19
    i32 -795731647, label %39
    i32 806140631, label %80
    i32 1710187785, label %81
  ]

; <label>:18:                                     ; preds = %16
  br label %95

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -795731647, i32 1710187785
  store i32 %38, i32* %15
  br label %95

; <label>:39:                                     ; preds = %16
  %40 = alloca i64*, align 8
  %41 = alloca i64*, align 8
  %42 = alloca i64, align 8
  store i64* %0, i64** %40, align 8
  store i64* %1, i64** %41, align 8
  %43 = load i64*, i64** %40, align 8
  %44 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %43) #3
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %42, align 8
  %46 = load i64*, i64** %41, align 8
  %47 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %46) #3
  %48 = load i64, i64* %47, align 8
  %49 = load i64*, i64** %40, align 8
  store i64 %48, i64* %49, align 8
  %50 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %42) #3
  %51 = load i64, i64* %50, align 8
  %52 = load i64*, i64** %41, align 8
  store i64 %51, i64* %52, align 8
  %53 = load i32, i32* @x.27
  %54 = load i32, i32* @y.28
  %55 = sub i32 %53, 28927721
  %56 = sub i32 %55, 1
  %57 = add i32 %56, 28927721
  %58 = sub i32 %53, 1
  %59 = mul i32 %53, %57
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %54, 10
  %63 = xor i1 %61, true
  %64 = xor i1 %62, true
  %65 = xor i1 true, true
  %66 = and i1 %63, true
  %67 = and i1 %61, %65
  %68 = and i1 %64, true
  %69 = and i1 %62, %65
  %70 = or i1 %66, %67
  %71 = or i1 %68, %69
  %72 = xor i1 %70, %71
  %73 = or i1 %63, %64
  %74 = xor i1 %73, true
  %75 = or i1 true, %65
  %76 = and i1 %74, %75
  %77 = or i1 %72, %76
  %78 = or i1 %61, %62
  %79 = select i1 %77, i32 806140631, i32 1710187785
  store i32 %79, i32* %15
  br label %95

; <label>:80:                                     ; preds = %16
  ret void

; <label>:81:                                     ; preds = %16
  %82 = alloca i64*, align 8
  %83 = alloca i64*, align 8
  %84 = alloca i64, align 8
  store i64* %0, i64** %82, align 8
  store i64* %1, i64** %83, align 8
  %85 = load i64*, i64** %82, align 8
  %86 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %85) #3
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %84, align 8
  %88 = load i64*, i64** %83, align 8
  %89 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %88) #3
  %90 = load i64, i64* %89, align 8
  %91 = load i64*, i64** %82, align 8
  store i64 %90, i64* %91, align 8
  %92 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %84) #3
  %93 = load i64, i64* %92, align 8
  %94 = load i64*, i64** %83, align 8
  store i64 %93, i64* %94, align 8
  store i32 -795731647, i32* %15
  br label %95

; <label>:95:                                     ; preds = %81, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define i64 @_Z3nckxx(i64, i64) #4 {
  %3 = alloca i64
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.29
  %7 = load i32, i32* @y.30
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 -79366757, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %196
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -79366757, label %19
    i32 -1140586306, label %39
    i32 -2108333264, label %89
    i32 -389831623, label %91
  ]

; <label>:18:                                     ; preds = %16
  br label %196

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -1140586306, i32 -389831623
  store i32 %38, i32* %15
  br label %196

; <label>:39:                                     ; preds = %16
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  store i64 %0, i64* %40, align 8
  store i64 %1, i64* %41, align 8
  %42 = load i64, i64* %40, align 8
  %43 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @fac, i64 %42) #3
  %44 = load i64, i64* %43, align 8
  %45 = load i64, i64* %41, align 8
  %46 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @fac, i64 %45) #3
  %47 = load i64, i64* %46, align 8
  %48 = load i64, i64* %40, align 8
  %49 = load i64, i64* %41, align 8
  %50 = sub i64 0, %49
  %51 = add i64 %48, %50
  %52 = sub nsw i64 %48, %49
  %53 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @fac, i64 %51) #3
  %54 = load i64, i64* %53, align 8
  %55 = mul nsw i64 %47, %54
  %56 = load i64, i64* @_ZL3MOD, align 8
  %57 = srem i64 %55, %56
  %58 = load i64, i64* @_ZL3MOD, align 8
  %59 = call i64 @_Z3invxx(i64 %57, i64 %58)
  %60 = mul nsw i64 %44, %59
  %61 = load i64, i64* @_ZL3MOD, align 8
  %62 = srem i64 %60, %61
  store i64 %62, i64* %3
  %63 = load i32, i32* @x.29
  %64 = load i32, i32* @y.30
  %65 = sub i32 0, 1
  %66 = add i32 %63, %65
  %67 = sub i32 %63, 1
  %68 = mul i32 %63, %66
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %64, 10
  %72 = xor i1 %70, true
  %73 = xor i1 %71, true
  %74 = xor i1 true, true
  %75 = and i1 %72, true
  %76 = and i1 %70, %74
  %77 = and i1 %73, true
  %78 = and i1 %71, %74
  %79 = or i1 %75, %76
  %80 = or i1 %77, %78
  %81 = xor i1 %79, %80
  %82 = or i1 %72, %73
  %83 = xor i1 %82, true
  %84 = or i1 true, %74
  %85 = and i1 %83, %84
  %86 = or i1 %81, %85
  %87 = or i1 %70, %71
  %88 = select i1 %86, i32 -2108333264, i32 -389831623
  store i32 %88, i32* %15
  br label %196

; <label>:89:                                     ; preds = %16
  %90 = load volatile i64, i64* %3
  ret i64 %90

; <label>:91:                                     ; preds = %16
  %92 = alloca i64, align 8
  %93 = alloca i64, align 8
  store i64 %0, i64* %92, align 8
  store i64 %1, i64* %93, align 8
  %94 = load i64, i64* %92, align 8
  %95 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @fac, i64 %94) #3
  %96 = load i64, i64* %95, align 8
  %97 = load i64, i64* %93, align 8
  %98 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @fac, i64 %97) #3
  %99 = load i64, i64* %98, align 8
  %100 = load i64, i64* %92, align 8
  %101 = load i64, i64* %93, align 8
  %102 = sub i64 0, -4055304562202408212
  %103 = sub i64 %102, %100
  %104 = add i64 %103, -4055304562202408212
  %105 = sub i64 0, %100
  %106 = sub i64 0, %101
  %107 = sub i64 %104, %106
  %108 = add i64 %104, %101
  %109 = shl i64 %100, %101
  %110 = shl i64 %100, %101
  %111 = sub i64 %100, -3697470306363894508
  %112 = sub i64 %111, %101
  %113 = add i64 %112, -3697470306363894508
  %114 = sub i64 %100, %101
  %115 = mul i64 %113, %101
  %116 = sub i64 0, %101
  %117 = add i64 %100, %116
  %118 = sub nsw i64 %100, %101
  %119 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @fac, i64 %117) #3
  %120 = load i64, i64* %119, align 8
  %121 = add i64 %99, -4250496754386024943
  %122 = sub i64 %121, %120
  %123 = sub i64 %122, -4250496754386024943
  %124 = sub i64 %99, %120
  %125 = mul i64 %123, %120
  %126 = shl i64 %99, %120
  %127 = sub i64 0, %120
  %128 = add i64 %99, %127
  %129 = sub i64 %99, %120
  %130 = mul i64 %128, %120
  %131 = mul nsw i64 %99, %120
  %132 = load i64, i64* @_ZL3MOD, align 8
  %133 = add i64 %131, 7314782979232926473
  %134 = sub i64 %133, %132
  %135 = sub i64 %134, 7314782979232926473
  %136 = sub i64 %131, %132
  %137 = mul i64 %135, %132
  %138 = sub i64 %131, -7102130843494940742
  %139 = sub i64 %138, %132
  %140 = add i64 %139, -7102130843494940742
  %141 = sub i64 %131, %132
  %142 = mul i64 %140, %132
  %143 = shl i64 %131, %132
  %144 = shl i64 %131, %132
  %145 = shl i64 %131, %132
  %146 = sub i64 %131, 4835741200770888269
  %147 = sub i64 %146, %132
  %148 = add i64 %147, 4835741200770888269
  %149 = sub i64 %131, %132
  %150 = mul i64 %148, %132
  %151 = srem i64 %131, %132
  %152 = load i64, i64* @_ZL3MOD, align 8
  %153 = call i64 @_Z3invxx(i64 %151, i64 %152)
  %154 = shl i64 %96, %153
  %155 = shl i64 %96, %153
  %156 = shl i64 %96, %153
  %157 = sub i64 0, 4353087496924554280
  %158 = sub i64 %157, %96
  %159 = add i64 %158, 4353087496924554280
  %160 = sub i64 0, %96
  %161 = sub i64 0, %159
  %162 = sub i64 0, %153
  %163 = add i64 %161, %162
  %164 = sub i64 0, %163
  %165 = add i64 %159, %153
  %166 = sub i64 %96, -5219638792948123993
  %167 = sub i64 %166, %153
  %168 = add i64 %167, -5219638792948123993
  %169 = sub i64 %96, %153
  %170 = mul i64 %168, %153
  %171 = add i64 0, -5046663239194248086
  %172 = sub i64 %171, %96
  %173 = sub i64 %172, -5046663239194248086
  %174 = sub i64 0, %96
  %175 = sub i64 0, %173
  %176 = sub i64 0, %153
  %177 = add i64 %175, %176
  %178 = sub i64 0, %177
  %179 = add i64 %173, %153
  %180 = shl i64 %96, %153
  %181 = sub i64 0, %96
  %182 = add i64 0, %181
  %183 = sub i64 0, %96
  %184 = sub i64 %182, -8049214590510925945
  %185 = add i64 %184, %153
  %186 = add i64 %185, -8049214590510925945
  %187 = add i64 %182, %153
  %188 = sub i64 0, %153
  %189 = add i64 %96, %188
  %190 = sub i64 %96, %153
  %191 = mul i64 %189, %153
  %192 = mul nsw i64 %96, %153
  %193 = load i64, i64* @_ZL3MOD, align 8
  %194 = shl i64 %192, %193
  %195 = srem i64 %192, %193
  store i32 -1140586306, i32* %15
  br label %196

; <label>:196:                                    ; preds = %91, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define i64 @_Z3gcdxx(i64, i64) #0 {
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %5
  %9 = load i64, i64* %7, align 8
  store i64 %9, i64* %4
  %10 = alloca i32
  store i32 1513205446, i32* %10
  %11 = alloca i64
  br label %12

; <label>:12:                                     ; preds = %2, %93
  %13 = load i32, i32* %10
  switch i32 %13, label %14 [
    i32 1513205446, label %15
    i32 1920964808, label %20
    i32 -1863171784, label %21
    i32 283081742, label %25
    i32 246154409, label %52
    i32 1823013856, label %81
    i32 -1438294297, label %83
    i32 1273923506, label %89
    i32 1226294955, label %91
  ]

; <label>:14:                                     ; preds = %12
  br label %93

; <label>:15:                                     ; preds = %12
  %16 = load volatile i64, i64* %5
  %17 = load volatile i64, i64* %4
  %18 = icmp slt i64 %16, %17
  %19 = select i1 %18, i32 1920964808, i32 -1863171784
  store i32 %19, i32* %10
  br label %93

; <label>:20:                                     ; preds = %12
  call void @_ZSt4swapIxEvRT_S1_(i64* dereferenceable(8) %6, i64* dereferenceable(8) %7) #3
  store i32 -1863171784, i32* %10
  br label %93

; <label>:21:                                     ; preds = %12
  %22 = load i64, i64* %7, align 8
  %23 = icmp eq i64 %22, 0
  %24 = select i1 %23, i32 283081742, i32 -1438294297
  store i32 %24, i32* %10
  br label %93

; <label>:25:                                     ; preds = %12
  %26 = load i32, i32* @x.31
  %27 = load i32, i32* @y.32
  %28 = sub i32 0, 1
  %29 = add i32 %26, %28
  %30 = sub i32 %26, 1
  %31 = mul i32 %26, %29
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %27, 10
  %35 = xor i1 %33, true
  %36 = xor i1 %34, true
  %37 = xor i1 true, true
  %38 = and i1 %35, true
  %39 = and i1 %33, %37
  %40 = and i1 %36, true
  %41 = and i1 %34, %37
  %42 = or i1 %38, %39
  %43 = or i1 %40, %41
  %44 = xor i1 %42, %43
  %45 = or i1 %35, %36
  %46 = xor i1 %45, true
  %47 = or i1 true, %37
  %48 = and i1 %46, %47
  %49 = or i1 %44, %48
  %50 = or i1 %33, %34
  %51 = select i1 %49, i32 246154409, i32 1226294955
  store i32 %51, i32* %10
  br label %93

; <label>:52:                                     ; preds = %12
  %53 = load i64, i64* %6, align 8
  store i64 %53, i64* %3
  %54 = load i32, i32* @x.31
  %55 = load i32, i32* @y.32
  %56 = add i32 %54, 557599546
  %57 = sub i32 %56, 1
  %58 = sub i32 %57, 557599546
  %59 = sub i32 %54, 1
  %60 = mul i32 %54, %58
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %55, 10
  %64 = xor i1 %62, true
  %65 = xor i1 %63, true
  %66 = xor i1 false, true
  %67 = and i1 %64, false
  %68 = and i1 %62, %66
  %69 = and i1 %65, false
  %70 = and i1 %63, %66
  %71 = or i1 %67, %68
  %72 = or i1 %69, %70
  %73 = xor i1 %71, %72
  %74 = or i1 %64, %65
  %75 = xor i1 %74, true
  %76 = or i1 false, %66
  %77 = and i1 %75, %76
  %78 = or i1 %73, %77
  %79 = or i1 %62, %63
  %80 = select i1 %78, i32 1823013856, i32 1226294955
  store i32 %80, i32* %10
  br label %93

; <label>:81:                                     ; preds = %12
  store i32 1273923506, i32* %10
  %82 = load volatile i64, i64* %3
  store i64 %82, i64* %11
  br label %93

; <label>:83:                                     ; preds = %12
  %84 = load i64, i64* %7, align 8
  %85 = load i64, i64* %6, align 8
  %86 = load i64, i64* %7, align 8
  %87 = srem i64 %85, %86
  %88 = call i64 @_Z3gcdxx(i64 %84, i64 %87)
  store i32 1273923506, i32* %10
  store i64 %88, i64* %11
  br label %93

; <label>:89:                                     ; preds = %12
  %90 = load i64, i64* %11
  ret i64 %90

; <label>:91:                                     ; preds = %12
  %92 = load i64, i64* %6, align 8
  store i32 246154409, i32* %10
  br label %93

; <label>:93:                                     ; preds = %91, %83, %81, %52, %25, %21, %20, %15, %14
  br label %12
}

; Function Attrs: noinline uwtable
define i64 @_Z3lcmxx(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = load i64, i64* %4, align 8
  %8 = call i64 @_Z3gcdxx(i64 %6, i64 %7)
  %9 = sdiv i64 %5, %8
  %10 = load i64, i64* %4, align 8
  %11 = mul nsw i64 %9, %10
  ret i64 %11
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() #5 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.ball, align 8
  %8 = alloca i32
  %9 = alloca %class.anon, align 1
  %10 = alloca %class.anon.0, align 1
  %11 = alloca %class.anon.2, align 1
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca %"class.std::multiset", align 8
  %21 = alloca i8*
  %22 = alloca i32
  %23 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %24 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %25 = alloca i32, align 4
  %26 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %27 = alloca i64, align 8
  %28 = alloca %"class.std::reverse_iterator", align 8
  %29 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %30 = alloca i32, align 4
  %31 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %32 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %33 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %34 = alloca i64, align 8
  %35 = alloca %"class.std::reverse_iterator", align 8
  %36 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %37 = alloca i64, align 8
  %38 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  %39 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* @_ZSt3cin, i32* dereferenceable(4) %2)
  %40 = load i32, i32* %2, align 4
  %41 = zext i32 %40 to i64
  %42 = call i8* @llvm.stacksave()
  store i8* %42, i8** %3, align 8
  %43 = alloca %struct.ball, i64 %41, align 16
  store i32 0, i32* %4, align 4
  br label %44

; <label>:44:                                     ; preds = %165, %0
  %45 = load i32, i32* %4, align 4
  %46 = load i32, i32* %2, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %166

; <label>:48:                                     ; preds = %44
  %49 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* dereferenceable(8) %5)
  %50 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %49, i64* dereferenceable(8) %6)
  %51 = load i64, i64* %5, align 8
  %52 = load i64, i64* %6, align 8
  %53 = icmp sgt i64 %51, %52
  br i1 %53, label %54, label %55

; <label>:54:                                     ; preds = %48
  call void @_ZSt4swapIxEvRT_S1_(i64* dereferenceable(8) %5, i64* dereferenceable(8) %6) #3
  br label %55

; <label>:55:                                     ; preds = %54, %48
  %56 = load i32, i32* @x.35
  %57 = load i32, i32* @y.36
  %58 = sub i32 %56, -13721344
  %59 = sub i32 %58, 1
  %60 = add i32 %59, -13721344
  %61 = sub i32 %56, 1
  %62 = mul i32 %56, %60
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %57, 10
  %66 = xor i1 %64, true
  %67 = xor i1 %65, true
  %68 = xor i1 true, true
  %69 = and i1 %66, true
  %70 = and i1 %64, %68
  %71 = and i1 %67, true
  %72 = and i1 %65, %68
  %73 = or i1 %69, %70
  %74 = or i1 %71, %72
  %75 = xor i1 %73, %74
  %76 = or i1 %66, %67
  %77 = xor i1 %76, true
  %78 = or i1 true, %68
  %79 = and i1 %77, %78
  %80 = or i1 %75, %79
  %81 = or i1 %64, %65
  br i1 %80, label %82, label %639

; <label>:82:                                     ; preds = %55, %639
  %83 = getelementptr inbounds %struct.ball, %struct.ball* %7, i32 0, i32 0
  %84 = load i64, i64* %5, align 8
  store i64 %84, i64* %83, align 8
  %85 = getelementptr inbounds %struct.ball, %struct.ball* %7, i32 0, i32 1
  %86 = load i64, i64* %6, align 8
  store i64 %86, i64* %85, align 8
  %87 = load i32, i32* %4, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %88
  %90 = bitcast %struct.ball* %89 to i8*
  %91 = bitcast %struct.ball* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %90, i8* %91, i64 16, i32 8, i1 false)
  %92 = load i32, i32* @x.35
  %93 = load i32, i32* @y.36
  %94 = sub i32 %92, -586991912
  %95 = sub i32 %94, 1
  %96 = add i32 %95, -586991912
  %97 = sub i32 %92, 1
  %98 = mul i32 %92, %96
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %93, 10
  %102 = xor i1 %100, true
  %103 = xor i1 %101, true
  %104 = xor i1 false, true
  %105 = and i1 %102, false
  %106 = and i1 %100, %104
  %107 = and i1 %103, false
  %108 = and i1 %101, %104
  %109 = or i1 %105, %106
  %110 = or i1 %107, %108
  %111 = xor i1 %109, %110
  %112 = or i1 %102, %103
  %113 = xor i1 %112, true
  %114 = or i1 false, %104
  %115 = and i1 %113, %114
  %116 = or i1 %111, %115
  %117 = or i1 %100, %101
  br i1 %116, label %118, label %639

; <label>:118:                                    ; preds = %82
  br label %119

; <label>:119:                                    ; preds = %118
  %120 = load i32, i32* @x.35
  %121 = load i32, i32* @y.36
  %122 = sub i32 0, 1
  %123 = add i32 %120, %122
  %124 = sub i32 %120, 1
  %125 = mul i32 %120, %123
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %121, 10
  %129 = xor i1 %127, true
  %130 = xor i1 %128, true
  %131 = xor i1 false, true
  %132 = and i1 %129, false
  %133 = and i1 %127, %131
  %134 = and i1 %130, false
  %135 = and i1 %128, %131
  %136 = or i1 %132, %133
  %137 = or i1 %134, %135
  %138 = xor i1 %136, %137
  %139 = or i1 %129, %130
  %140 = xor i1 %139, true
  %141 = or i1 false, %131
  %142 = and i1 %140, %141
  %143 = or i1 %138, %142
  %144 = or i1 %127, %128
  br i1 %143, label %145, label %649

; <label>:145:                                    ; preds = %119, %649
  %146 = load i32, i32* %4, align 4
  %147 = sub i32 0, %146
  %148 = sub i32 0, 1
  %149 = add i32 %147, %148
  %150 = sub i32 0, %149
  %151 = add nsw i32 %146, 1
  store i32 %150, i32* %4, align 4
  %152 = load i32, i32* @x.35
  %153 = load i32, i32* @y.36
  %154 = sub i32 0, 1
  %155 = add i32 %152, %154
  %156 = sub i32 %152, 1
  %157 = mul i32 %152, %155
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %153, 10
  %161 = and i1 %159, %160
  %162 = xor i1 %159, %160
  %163 = or i1 %161, %162
  %164 = or i1 %159, %160
  br i1 %163, label %165, label %649

; <label>:165:                                    ; preds = %145
  br label %44

; <label>:166:                                    ; preds = %44
  %167 = load i32, i32* %2, align 4
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %169, label %172

; <label>:169:                                    ; preds = %166
  %170 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* @_ZSt4cout, i32 0)
  %171 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* %170, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  store i32 0, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %631

; <label>:172:                                    ; preds = %166
  %173 = load i32, i32* %2, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %174
  call void @"_ZSt4sortIP4ballZ4mainE3$_0EvT_S3_T0_"(%struct.ball* %43, %struct.ball* %175)
  %176 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 1
  %177 = load i32, i32* %2, align 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %178
  call void @"_ZSt4sortIP4ballZ4mainE3$_1EvT_S3_T0_"(%struct.ball* %176, %struct.ball* %179)
  %180 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 1
  %181 = load i32, i32* %2, align 4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %182
  %184 = getelementptr inbounds %struct.ball, %struct.ball* %183, i64 -1
  call void @"_ZSt4sortIP4ballZ4mainE3$_2EvT_S3_T0_"(%struct.ball* %180, %struct.ball* %184)
  store i64 0, i64* %12, align 8
  %185 = load i32, i32* @_ZL3INF, align 4
  %186 = sext i32 %185 to i64
  store i64 %186, i64* %13, align 8
  store i64 0, i64* %14, align 8
  %187 = load i32, i32* @_ZL3INF, align 4
  %188 = sext i32 %187 to i64
  store i64 %188, i64* %15, align 8
  store i32 0, i32* %16, align 4
  br label %189

; <label>:189:                                    ; preds = %252, %172
  %190 = load i32, i32* %16, align 4
  %191 = load i32, i32* %2, align 4
  %192 = icmp slt i32 %190, %191
  br i1 %192, label %193, label %253

; <label>:193:                                    ; preds = %189
  %194 = load i32, i32* %16, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %195
  %197 = getelementptr inbounds %struct.ball, %struct.ball* %196, i32 0, i32 0
  %198 = call dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* dereferenceable(8) %12, i64* dereferenceable(8) %197)
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %12, align 8
  %200 = load i32, i32* %16, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %201
  %203 = getelementptr inbounds %struct.ball, %struct.ball* %202, i32 0, i32 0
  %204 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %13, i64* dereferenceable(8) %203)
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %13, align 8
  %206 = load i32, i32* %16, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %207
  %209 = getelementptr inbounds %struct.ball, %struct.ball* %208, i32 0, i32 1
  %210 = call dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* dereferenceable(8) %14, i64* dereferenceable(8) %209)
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %14, align 8
  %212 = load i32, i32* %16, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %213
  %215 = getelementptr inbounds %struct.ball, %struct.ball* %214, i32 0, i32 1
  %216 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %15, i64* dereferenceable(8) %215)
  %217 = load i64, i64* %216, align 8
  store i64 %217, i64* %15, align 8
  br label %218

; <label>:218:                                    ; preds = %193
  %219 = load i32, i32* @x.35
  %220 = load i32, i32* @y.36
  %221 = sub i32 0, 1
  %222 = add i32 %219, %221
  %223 = sub i32 %219, 1
  %224 = mul i32 %219, %222
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %220, 10
  %228 = and i1 %226, %227
  %229 = xor i1 %226, %227
  %230 = or i1 %228, %229
  %231 = or i1 %226, %227
  br i1 %230, label %232, label %665

; <label>:232:                                    ; preds = %218, %665
  %233 = load i32, i32* %16, align 4
  %234 = add i32 %233, -942165709
  %235 = add i32 %234, 1
  %236 = sub i32 %235, -942165709
  %237 = add nsw i32 %233, 1
  store i32 %236, i32* %16, align 4
  %238 = load i32, i32* @x.35
  %239 = load i32, i32* @y.36
  %240 = add i32 %238, 443683846
  %241 = sub i32 %240, 1
  %242 = sub i32 %241, 443683846
  %243 = sub i32 %238, 1
  %244 = mul i32 %238, %242
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %239, 10
  %248 = and i1 %246, %247
  %249 = xor i1 %246, %247
  %250 = or i1 %248, %249
  %251 = or i1 %246, %247
  br i1 %250, label %252, label %665

; <label>:252:                                    ; preds = %232
  br label %189

; <label>:253:                                    ; preds = %189
  %254 = load i64, i64* %12, align 8
  %255 = load i64, i64* %13, align 8
  %256 = add i64 %254, -7171057406236991989
  %257 = sub i64 %256, %255
  %258 = sub i64 %257, -7171057406236991989
  %259 = sub nsw i64 %254, %255
  %260 = load i64, i64* %14, align 8
  %261 = load i64, i64* %15, align 8
  %262 = sub i64 0, %261
  %263 = add i64 %260, %262
  %264 = sub nsw i64 %260, %261
  %265 = mul nsw i64 %258, %263
  store i64 %265, i64* %17, align 8
  %266 = load i32, i32* %2, align 4
  %267 = sub i32 %266, -407699597
  %268 = sub i32 %267, 1
  %269 = add i32 %268, -407699597
  %270 = sub nsw i32 %266, 1
  %271 = sext i32 %269 to i64
  %272 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %271
  %273 = getelementptr inbounds %struct.ball, %struct.ball* %272, i32 0, i32 1
  %274 = load i64, i64* %273, align 8
  %275 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 0
  %276 = getelementptr inbounds %struct.ball, %struct.ball* %275, i32 0, i32 0
  %277 = load i64, i64* %276, align 16
  %278 = add i64 %274, -4775691930357858436
  %279 = sub i64 %278, %277
  %280 = sub i64 %279, -4775691930357858436
  %281 = sub nsw i64 %274, %277
  store i64 %280, i64* %18, align 8
  %282 = load i32, i32* @_ZL3INF, align 4
  %283 = sext i32 %282 to i64
  store i64 %283, i64* %19, align 8
  call void @_ZNSt8multisetIxSt4lessIxESaIxEEC2Ev(%"class.std::multiset"* %20) #3
  %284 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 0
  %285 = getelementptr inbounds %struct.ball, %struct.ball* %284, i32 0, i32 1
  %286 = invoke %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE6insertERKx(%"class.std::multiset"* %20, i64* dereferenceable(8) %285)
          to label %287 unwind label %416

; <label>:287:                                    ; preds = %253
  %288 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %23, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %286, %"struct.std::_Rb_tree_node_base"** %288, align 8
  %289 = load i32, i32* %2, align 4
  %290 = add i32 %289, 303844636
  %291 = sub i32 %290, 1
  %292 = sub i32 %291, 303844636
  %293 = sub nsw i32 %289, 1
  %294 = sext i32 %292 to i64
  %295 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %294
  %296 = getelementptr inbounds %struct.ball, %struct.ball* %295, i32 0, i32 0
  %297 = invoke %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE6insertERKx(%"class.std::multiset"* %20, i64* dereferenceable(8) %296)
          to label %298 unwind label %416

; <label>:298:                                    ; preds = %287
  %299 = load i32, i32* @x.35
  %300 = load i32, i32* @y.36
  %301 = sub i32 %299, -2012830336
  %302 = sub i32 %301, 1
  %303 = add i32 %302, -2012830336
  %304 = sub i32 %299, 1
  %305 = mul i32 %299, %303
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %300, 10
  %309 = and i1 %307, %308
  %310 = xor i1 %307, %308
  %311 = or i1 %309, %310
  %312 = or i1 %307, %308
  br i1 %311, label %313, label %705

; <label>:313:                                    ; preds = %298, %705
  %314 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %24, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %297, %"struct.std::_Rb_tree_node_base"** %314, align 8
  store i32 1, i32* %25, align 4
  %315 = load i32, i32* @x.35
  %316 = load i32, i32* @y.36
  %317 = sub i32 %315, 842510911
  %318 = sub i32 %317, 1
  %319 = add i32 %318, 842510911
  %320 = sub i32 %315, 1
  %321 = mul i32 %315, %319
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %316, 10
  %325 = xor i1 %323, true
  %326 = xor i1 %324, true
  %327 = xor i1 true, true
  %328 = and i1 %325, true
  %329 = and i1 %323, %327
  %330 = and i1 %326, true
  %331 = and i1 %324, %327
  %332 = or i1 %328, %329
  %333 = or i1 %330, %331
  %334 = xor i1 %332, %333
  %335 = or i1 %325, %326
  %336 = xor i1 %335, true
  %337 = or i1 true, %327
  %338 = and i1 %336, %337
  %339 = or i1 %334, %338
  %340 = or i1 %323, %324
  br i1 %339, label %341, label %705

; <label>:341:                                    ; preds = %313
  br label %342

; <label>:342:                                    ; preds = %410, %341
  %343 = load i32, i32* @x.35
  %344 = load i32, i32* @y.36
  %345 = sub i32 0, 1
  %346 = add i32 %343, %345
  %347 = sub i32 %343, 1
  %348 = mul i32 %343, %346
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %344, 10
  %352 = xor i1 %350, true
  %353 = xor i1 %351, true
  %354 = xor i1 false, true
  %355 = and i1 %352, false
  %356 = and i1 %350, %354
  %357 = and i1 %353, false
  %358 = and i1 %351, %354
  %359 = or i1 %355, %356
  %360 = or i1 %357, %358
  %361 = xor i1 %359, %360
  %362 = or i1 %352, %353
  %363 = xor i1 %362, true
  %364 = or i1 false, %354
  %365 = and i1 %363, %364
  %366 = or i1 %361, %365
  %367 = or i1 %350, %351
  br i1 %366, label %368, label %707

; <label>:368:                                    ; preds = %342, %707
  %369 = load i32, i32* %25, align 4
  %370 = load i32, i32* %2, align 4
  %371 = sub i32 0, 1
  %372 = add i32 %370, %371
  %373 = sub nsw i32 %370, 1
  %374 = icmp slt i32 %369, %372
  %375 = load i32, i32* @x.35
  %376 = load i32, i32* @y.36
  %377 = sub i32 %375, 579180324
  %378 = sub i32 %377, 1
  %379 = add i32 %378, 579180324
  %380 = sub i32 %375, 1
  %381 = mul i32 %375, %379
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %376, 10
  %385 = xor i1 %383, true
  %386 = xor i1 %384, true
  %387 = xor i1 true, true
  %388 = and i1 %385, true
  %389 = and i1 %383, %387
  %390 = and i1 %386, true
  %391 = and i1 %384, %387
  %392 = or i1 %388, %389
  %393 = or i1 %390, %391
  %394 = xor i1 %392, %393
  %395 = or i1 %385, %386
  %396 = xor i1 %395, true
  %397 = or i1 true, %387
  %398 = and i1 %396, %397
  %399 = or i1 %394, %398
  %400 = or i1 %383, %384
  br i1 %399, label %401, label %707

; <label>:401:                                    ; preds = %368
  br i1 %374, label %402, label %420

; <label>:402:                                    ; preds = %401
  %403 = load i32, i32* %25, align 4
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %404
  %406 = getelementptr inbounds %struct.ball, %struct.ball* %405, i32 0, i32 0
  %407 = invoke %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE6insertERKx(%"class.std::multiset"* %20, i64* dereferenceable(8) %406)
          to label %408 unwind label %416

; <label>:408:                                    ; preds = %402
  %409 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %26, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %407, %"struct.std::_Rb_tree_node_base"** %409, align 8
  br label %410

; <label>:410:                                    ; preds = %408
  %411 = load i32, i32* %25, align 4
  %412 = sub i32 %411, 109795814
  %413 = add i32 %412, 1
  %414 = add i32 %413, 109795814
  %415 = add nsw i32 %411, 1
  store i32 %414, i32* %25, align 4
  br label %342

; <label>:416:                                    ; preds = %628, %624, %619, %599, %596, %594, %546, %483, %422, %420, %402, %287, %253
  %417 = landingpad { i8*, i32 }
          cleanup
  %418 = extractvalue { i8*, i32 } %417, 0
  store i8* %418, i8** %21, align 8
  %419 = extractvalue { i8*, i32 } %417, 1
  store i32 %419, i32* %22, align 4
  call void @_ZNSt8multisetIxSt4lessIxESaIxEED2Ev(%"class.std::multiset"* %20) #3
  br label %634

; <label>:420:                                    ; preds = %401
  call void @_ZNKSt8multisetIxSt4lessIxESaIxEE6rbeginEv(%"class.std::reverse_iterator"* sret %28, %"class.std::multiset"* %20) #3
  %421 = invoke dereferenceable(8) i64* @_ZNKSt16reverse_iteratorISt23_Rb_tree_const_iteratorIxEEdeEv(%"class.std::reverse_iterator"* %28)
          to label %422 unwind label %416

; <label>:422:                                    ; preds = %420
  %423 = load i64, i64* %421, align 8
  %424 = call %"struct.std::_Rb_tree_node_base"* @_ZNKSt8multisetIxSt4lessIxESaIxEE5beginEv(%"class.std::multiset"* %20) #3
  %425 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %29, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %424, %"struct.std::_Rb_tree_node_base"** %425, align 8
  %426 = call dereferenceable(8) i64* @_ZNKSt23_Rb_tree_const_iteratorIxEdeEv(%"struct.std::_Rb_tree_const_iterator"* %29) #3
  %427 = load i64, i64* %426, align 8
  %428 = sub i64 0, %427
  %429 = add i64 %423, %428
  %430 = sub nsw i64 %423, %427
  store i64 %429, i64* %27, align 8
  %431 = invoke dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %19, i64* dereferenceable(8) %27)
          to label %432 unwind label %416

; <label>:432:                                    ; preds = %422
  %433 = load i32, i32* @x.35
  %434 = load i32, i32* @y.36
  %435 = sub i32 0, 1
  %436 = add i32 %433, %435
  %437 = sub i32 %433, 1
  %438 = mul i32 %433, %436
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %434, 10
  %442 = and i1 %440, %441
  %443 = xor i1 %440, %441
  %444 = or i1 %442, %443
  %445 = or i1 %440, %441
  br i1 %444, label %446, label %740

; <label>:446:                                    ; preds = %432, %740
  %447 = load i64, i64* %431, align 8
  store i64 %447, i64* %19, align 8
  store i32 1, i32* %30, align 4
  %448 = load i32, i32* @x.35
  %449 = load i32, i32* @y.36
  %450 = add i32 %448, -335501161
  %451 = sub i32 %450, 1
  %452 = sub i32 %451, -335501161
  %453 = sub i32 %448, 1
  %454 = mul i32 %448, %452
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %449, 10
  %458 = xor i1 %456, true
  %459 = xor i1 %457, true
  %460 = xor i1 true, true
  %461 = and i1 %458, true
  %462 = and i1 %456, %460
  %463 = and i1 %459, true
  %464 = and i1 %457, %460
  %465 = or i1 %461, %462
  %466 = or i1 %463, %464
  %467 = xor i1 %465, %466
  %468 = or i1 %458, %459
  %469 = xor i1 %468, true
  %470 = or i1 true, %460
  %471 = and i1 %469, %470
  %472 = or i1 %467, %471
  %473 = or i1 %456, %457
  br i1 %472, label %474, label %740

; <label>:474:                                    ; preds = %446
  br label %475

; <label>:475:                                    ; preds = %612, %474
  %476 = load i32, i32* %30, align 4
  %477 = load i32, i32* %2, align 4
  %478 = add i32 %477, 39034081
  %479 = sub i32 %478, 1
  %480 = sub i32 %479, 39034081
  %481 = sub nsw i32 %477, 1
  %482 = icmp slt i32 %476, %480
  br i1 %482, label %483, label %619

; <label>:483:                                    ; preds = %475
  %484 = load i32, i32* %30, align 4
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %485
  %487 = getelementptr inbounds %struct.ball, %struct.ball* %486, i32 0, i32 0
  %488 = invoke %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE4findERKx(%"class.std::multiset"* %20, i64* dereferenceable(8) %487)
          to label %489 unwind label %416

; <label>:489:                                    ; preds = %483
  %490 = load i32, i32* @x.35
  %491 = load i32, i32* @y.36
  %492 = add i32 %490, -1219806907
  %493 = sub i32 %492, 1
  %494 = sub i32 %493, -1219806907
  %495 = sub i32 %490, 1
  %496 = mul i32 %490, %494
  %497 = urem i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = icmp slt i32 %491, 10
  %500 = xor i1 %498, true
  %501 = xor i1 %499, true
  %502 = xor i1 false, true
  %503 = and i1 %500, false
  %504 = and i1 %498, %502
  %505 = and i1 %501, false
  %506 = and i1 %499, %502
  %507 = or i1 %503, %504
  %508 = or i1 %505, %506
  %509 = xor i1 %507, %508
  %510 = or i1 %500, %501
  %511 = xor i1 %510, true
  %512 = or i1 false, %502
  %513 = and i1 %511, %512
  %514 = or i1 %509, %513
  %515 = or i1 %498, %499
  br i1 %514, label %516, label %742

; <label>:516:                                    ; preds = %489, %742
  %517 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %31, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %488, %"struct.std::_Rb_tree_node_base"** %517, align 8
  %518 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %31, i32 0, i32 0
  %519 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %518, align 8
  %520 = load i32, i32* @x.35
  %521 = load i32, i32* @y.36
  %522 = sub i32 %520, 916467727
  %523 = sub i32 %522, 1
  %524 = add i32 %523, 916467727
  %525 = sub i32 %520, 1
  %526 = mul i32 %520, %524
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %521, 10
  %530 = xor i1 %528, true
  %531 = xor i1 %529, true
  %532 = xor i1 true, true
  %533 = and i1 %530, true
  %534 = and i1 %528, %532
  %535 = and i1 %531, true
  %536 = and i1 %529, %532
  %537 = or i1 %533, %534
  %538 = or i1 %535, %536
  %539 = xor i1 %537, %538
  %540 = or i1 %530, %531
  %541 = xor i1 %540, true
  %542 = or i1 true, %532
  %543 = and i1 %541, %542
  %544 = or i1 %539, %543
  %545 = or i1 %528, %529
  br i1 %544, label %546, label %742

; <label>:546:                                    ; preds = %516
  %547 = invoke %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIxE(%"class.std::multiset"* %20, %"struct.std::_Rb_tree_node_base"* %519)
          to label %548 unwind label %416

; <label>:548:                                    ; preds = %546
  %549 = load i32, i32* @x.35
  %550 = load i32, i32* @y.36
  %551 = sub i32 0, 1
  %552 = add i32 %549, %551
  %553 = sub i32 %549, 1
  %554 = mul i32 %549, %552
  %555 = urem i32 %554, 2
  %556 = icmp eq i32 %555, 0
  %557 = icmp slt i32 %550, 10
  %558 = and i1 %556, %557
  %559 = xor i1 %556, %557
  %560 = or i1 %558, %559
  %561 = or i1 %556, %557
  br i1 %560, label %562, label %746

; <label>:562:                                    ; preds = %548, %746
  %563 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %32, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %547, %"struct.std::_Rb_tree_node_base"** %563, align 8
  %564 = load i32, i32* %30, align 4
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %565
  %567 = getelementptr inbounds %struct.ball, %struct.ball* %566, i32 0, i32 1
  %568 = load i32, i32* @x.35
  %569 = load i32, i32* @y.36
  %570 = sub i32 %568, 1638862212
  %571 = sub i32 %570, 1
  %572 = add i32 %571, 1638862212
  %573 = sub i32 %568, 1
  %574 = mul i32 %568, %572
  %575 = urem i32 %574, 2
  %576 = icmp eq i32 %575, 0
  %577 = icmp slt i32 %569, 10
  %578 = xor i1 %576, true
  %579 = xor i1 %577, true
  %580 = xor i1 true, true
  %581 = and i1 %578, true
  %582 = and i1 %576, %580
  %583 = and i1 %579, true
  %584 = and i1 %577, %580
  %585 = or i1 %581, %582
  %586 = or i1 %583, %584
  %587 = xor i1 %585, %586
  %588 = or i1 %578, %579
  %589 = xor i1 %588, true
  %590 = or i1 true, %580
  %591 = and i1 %589, %590
  %592 = or i1 %587, %591
  %593 = or i1 %576, %577
  br i1 %592, label %594, label %746

; <label>:594:                                    ; preds = %562
  %595 = invoke %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE6insertERKx(%"class.std::multiset"* %20, i64* dereferenceable(8) %567)
          to label %596 unwind label %416

; <label>:596:                                    ; preds = %594
  %597 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %33, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %595, %"struct.std::_Rb_tree_node_base"** %597, align 8
  call void @_ZNKSt8multisetIxSt4lessIxESaIxEE6rbeginEv(%"class.std::reverse_iterator"* sret %35, %"class.std::multiset"* %20) #3
  %598 = invoke dereferenceable(8) i64* @_ZNKSt16reverse_iteratorISt23_Rb_tree_const_iteratorIxEEdeEv(%"class.std::reverse_iterator"* %35)
          to label %599 unwind label %416

; <label>:599:                                    ; preds = %596
  %600 = load i64, i64* %598, align 8
  %601 = call %"struct.std::_Rb_tree_node_base"* @_ZNKSt8multisetIxSt4lessIxESaIxEE5beginEv(%"class.std::multiset"* %20) #3
  %602 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %36, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %601, %"struct.std::_Rb_tree_node_base"** %602, align 8
  %603 = call dereferenceable(8) i64* @_ZNKSt23_Rb_tree_const_iteratorIxEdeEv(%"struct.std::_Rb_tree_const_iterator"* %36) #3
  %604 = load i64, i64* %603, align 8
  %605 = sub i64 %600, -7072569771752382478
  %606 = sub i64 %605, %604
  %607 = add i64 %606, -7072569771752382478
  %608 = sub nsw i64 %600, %604
  store i64 %607, i64* %34, align 8
  %609 = invoke dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %19, i64* dereferenceable(8) %34)
          to label %610 unwind label %416

; <label>:610:                                    ; preds = %599
  %611 = load i64, i64* %609, align 8
  store i64 %611, i64* %19, align 8
  br label %612

; <label>:612:                                    ; preds = %610
  %613 = load i32, i32* %30, align 4
  %614 = sub i32 0, %613
  %615 = sub i32 0, 1
  %616 = add i32 %614, %615
  %617 = sub i32 0, %616
  %618 = add nsw i32 %613, 1
  store i32 %617, i32* %30, align 4
  br label %475

; <label>:619:                                    ; preds = %475
  %620 = load i64, i64* %18, align 8
  %621 = load i64, i64* %19, align 8
  %622 = mul nsw i64 %620, %621
  store i64 %622, i64* %37, align 8
  %623 = invoke dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %17, i64* dereferenceable(8) %37)
          to label %624 unwind label %416

; <label>:624:                                    ; preds = %619
  %625 = load i64, i64* %623, align 8
  store i64 %625, i64* %38, align 8
  %626 = load i64, i64* %38, align 8
  %627 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %626)
          to label %628 unwind label %416

; <label>:628:                                    ; preds = %624
  %629 = invoke dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* %627, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
          to label %630 unwind label %416

; <label>:630:                                    ; preds = %628
  store i32 0, i32* %1, align 4
  store i32 1, i32* %8, align 4
  call void @_ZNSt8multisetIxSt4lessIxESaIxEED2Ev(%"class.std::multiset"* %20) #3
  br label %631

; <label>:631:                                    ; preds = %630, %169
  %632 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %632)
  %633 = load i32, i32* %1, align 4
  ret i32 %633

; <label>:634:                                    ; preds = %416
  %635 = load i8*, i8** %21, align 8
  %636 = load i32, i32* %22, align 4
  %637 = insertvalue { i8*, i32 } undef, i8* %635, 0
  %638 = insertvalue { i8*, i32 } %637, i32 %636, 1
  resume { i8*, i32 } %638

; <label>:639:                                    ; preds = %82, %55
  %640 = getelementptr inbounds %struct.ball, %struct.ball* %7, i32 0, i32 0
  %641 = load i64, i64* %5, align 8
  store i64 %641, i64* %640, align 8
  %642 = getelementptr inbounds %struct.ball, %struct.ball* %7, i32 0, i32 1
  %643 = load i64, i64* %6, align 8
  store i64 %643, i64* %642, align 8
  %644 = load i32, i32* %4, align 4
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %645
  %647 = bitcast %struct.ball* %646 to i8*
  %648 = bitcast %struct.ball* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %647, i8* %648, i64 16, i32 8, i1 false)
  br label %82

; <label>:649:                                    ; preds = %145, %119
  %650 = load i32, i32* %4, align 4
  %651 = sub i32 0, 1
  %652 = add i32 %650, %651
  %653 = sub i32 %650, 1
  %654 = mul i32 %652, 1
  %655 = shl i32 %650, 1
  %656 = sub i32 %650, -1119377874
  %657 = sub i32 %656, 1
  %658 = add i32 %657, -1119377874
  %659 = sub i32 %650, 1
  %660 = mul i32 %658, 1
  %661 = sub i32 %650, 307427442
  %662 = add i32 %661, 1
  %663 = add i32 %662, 307427442
  %664 = add nsw i32 %650, 1
  store i32 %663, i32* %4, align 4
  br label %145

; <label>:665:                                    ; preds = %232, %218
  %666 = load i32, i32* %16, align 4
  %667 = sub i32 %666, -1558756918
  %668 = sub i32 %667, 1
  %669 = add i32 %668, -1558756918
  %670 = sub i32 %666, 1
  %671 = mul i32 %669, 1
  %672 = sub i32 0, 446977124
  %673 = sub i32 %672, %666
  %674 = add i32 %673, 446977124
  %675 = sub i32 0, %666
  %676 = sub i32 %674, 1746384147
  %677 = add i32 %676, 1
  %678 = add i32 %677, 1746384147
  %679 = add i32 %674, 1
  %680 = sub i32 %666, -582944730
  %681 = sub i32 %680, 1
  %682 = add i32 %681, -582944730
  %683 = sub i32 %666, 1
  %684 = mul i32 %682, 1
  %685 = sub i32 0, 1
  %686 = add i32 %666, %685
  %687 = sub i32 %666, 1
  %688 = mul i32 %686, 1
  %689 = add i32 %666, -1472888031
  %690 = sub i32 %689, 1
  %691 = sub i32 %690, -1472888031
  %692 = sub i32 %666, 1
  %693 = mul i32 %691, 1
  %694 = sub i32 0, %666
  %695 = add i32 0, %694
  %696 = sub i32 0, %666
  %697 = sub i32 %695, -282511197
  %698 = add i32 %697, 1
  %699 = add i32 %698, -282511197
  %700 = add i32 %695, 1
  %701 = add i32 %666, 1531204161
  %702 = add i32 %701, 1
  %703 = sub i32 %702, 1531204161
  %704 = add nsw i32 %666, 1
  store i32 %703, i32* %16, align 4
  br label %232

; <label>:705:                                    ; preds = %313, %298
  %706 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %24, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %297, %"struct.std::_Rb_tree_node_base"** %706, align 8
  store i32 1, i32* %25, align 4
  br label %313

; <label>:707:                                    ; preds = %368, %342
  %708 = load i32, i32* %25, align 4
  %709 = load i32, i32* %2, align 4
  %710 = sub i32 0, 1453108480
  %711 = sub i32 %710, %709
  %712 = add i32 %711, 1453108480
  %713 = sub i32 0, %709
  %714 = sub i32 0, %712
  %715 = sub i32 0, 1
  %716 = add i32 %714, %715
  %717 = sub i32 0, %716
  %718 = add i32 %712, 1
  %719 = sub i32 0, 1
  %720 = add i32 %709, %719
  %721 = sub i32 %709, 1
  %722 = mul i32 %720, 1
  %723 = shl i32 %709, 1
  %724 = sub i32 0, %709
  %725 = add i32 0, %724
  %726 = sub i32 0, %709
  %727 = sub i32 0, 1
  %728 = sub i32 %725, %727
  %729 = add i32 %725, 1
  %730 = add i32 %709, -533494641
  %731 = sub i32 %730, 1
  %732 = sub i32 %731, -533494641
  %733 = sub i32 %709, 1
  %734 = mul i32 %732, 1
  %735 = sub i32 %709, 235895782
  %736 = sub i32 %735, 1
  %737 = add i32 %736, 235895782
  %738 = sub nsw i32 %709, 1
  %739 = icmp slt i32 %708, %737
  br label %368

; <label>:740:                                    ; preds = %446, %432
  %741 = load i64, i64* %431, align 8
  store i64 %741, i64* %19, align 8
  store i32 1, i32* %30, align 4
  br label %446

; <label>:742:                                    ; preds = %516, %489
  %743 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %31, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %488, %"struct.std::_Rb_tree_node_base"** %743, align 8
  %744 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %31, i32 0, i32 0
  %745 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %744, align 8
  br label %516

; <label>:746:                                    ; preds = %562, %548
  %747 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %32, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %547, %"struct.std::_Rb_tree_node_base"** %747, align 8
  %748 = load i32, i32* %30, align 4
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds %struct.ball, %struct.ball* %43, i64 %749
  %751 = getelementptr inbounds %struct.ball, %struct.ball* %750, i32 0, i32 1
  br label %562
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #6

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"*, i32) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline uwtable
define internal void @"_ZSt4sortIP4ballZ4mainE3$_0EvT_S3_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %class.anon, align 1
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %7 = alloca %class.anon, align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  %9 = load %struct.ball*, %struct.ball** %4, align 8
  %10 = load %struct.ball*, %struct.ball** %5, align 8
  call void @"_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ4mainE3$_0EENS0_15_Iter_comp_iterIT_EES4_"()
  call void @"_ZSt6__sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %9, %struct.ball* %10)
  ret void
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt4sortIP4ballZ4mainE3$_1EvT_S3_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.39
  %6 = load i32, i32* @y.40
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 140639583, i32* %14
  br label %15

; <label>:15:                                     ; preds = %2, %72
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 140639583, label %18
    i32 1490645526, label %38
    i32 1056545588, label %62
    i32 5509013, label %63
  ]

; <label>:17:                                     ; preds = %15
  br label %72

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 true, true
  %24 = and i1 %21, true
  %25 = and i1 %19, %23
  %26 = and i1 %22, true
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 true, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 1490645526, i32 5509013
  store i32 %37, i32* %14
  br label %72

; <label>:38:                                     ; preds = %15
  %39 = alloca %class.anon.0, align 1
  %40 = alloca %struct.ball*, align 8
  %41 = alloca %struct.ball*, align 8
  %42 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %43 = alloca %class.anon.0, align 1
  %44 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %40, align 8
  store %struct.ball* %1, %struct.ball** %41, align 8
  %45 = load %struct.ball*, %struct.ball** %40, align 8
  %46 = load %struct.ball*, %struct.ball** %41, align 8
  call void @"_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ4mainE3$_1EENS0_15_Iter_comp_iterIT_EES4_"()
  call void @"_ZSt6__sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %45, %struct.ball* %46)
  %47 = load i32, i32* @x.39
  %48 = load i32, i32* @y.40
  %49 = sub i32 %47, -1165381335
  %50 = sub i32 %49, 1
  %51 = add i32 %50, -1165381335
  %52 = sub i32 %47, 1
  %53 = mul i32 %47, %51
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %48, 10
  %57 = and i1 %55, %56
  %58 = xor i1 %55, %56
  %59 = or i1 %57, %58
  %60 = or i1 %55, %56
  %61 = select i1 %59, i32 1056545588, i32 5509013
  store i32 %61, i32* %14
  br label %72

; <label>:62:                                     ; preds = %15
  ret void

; <label>:63:                                     ; preds = %15
  %64 = alloca %class.anon.0, align 1
  %65 = alloca %struct.ball*, align 8
  %66 = alloca %struct.ball*, align 8
  %67 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %68 = alloca %class.anon.0, align 1
  %69 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %65, align 8
  store %struct.ball* %1, %struct.ball** %66, align 8
  %70 = load %struct.ball*, %struct.ball** %65, align 8
  %71 = load %struct.ball*, %struct.ball** %66, align 8
  call void @"_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ4mainE3$_1EENS0_15_Iter_comp_iterIT_EES4_"()
  call void @"_ZSt6__sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %70, %struct.ball* %71)
  store i32 1490645526, i32* %14
  br label %72

; <label>:72:                                     ; preds = %63, %38, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt4sortIP4ballZ4mainE3$_2EvT_S3_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %class.anon.2, align 1
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %7 = alloca %class.anon.2, align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  %9 = load %struct.ball*, %struct.ball** %4, align 8
  %10 = load %struct.ball*, %struct.ball** %5, align 8
  call void @"_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ4mainE3$_2EENS0_15_Iter_comp_iterIT_EES4_"()
  call void @"_ZSt6__sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball* %9, %struct.ball* %10)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* dereferenceable(8), i64* dereferenceable(8)) #4 comdat {
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  store i64* %0, i64** %6, align 8
  store i64* %1, i64** %7, align 8
  %8 = load i64*, i64** %6, align 8
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %4
  %10 = load i64*, i64** %7, align 8
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %3
  %12 = alloca i32
  store i32 -484616025, i32* %12
  br label %13

; <label>:13:                                     ; preds = %2, %27
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 -484616025, label %16
    i32 -1644433920, label %21
    i32 -1383848799, label %23
    i32 -973750156, label %25
  ]

; <label>:15:                                     ; preds = %13
  br label %27

; <label>:16:                                     ; preds = %13
  %17 = load volatile i64, i64* %4
  %18 = load volatile i64, i64* %3
  %19 = icmp slt i64 %17, %18
  %20 = select i1 %19, i32 -1644433920, i32 -1383848799
  store i32 %20, i32* %12
  br label %27

; <label>:21:                                     ; preds = %13
  %22 = load i64*, i64** %7, align 8
  store i64* %22, i64** %5, align 8
  store i32 -973750156, i32* %12
  br label %27

; <label>:23:                                     ; preds = %13
  %24 = load i64*, i64** %6, align 8
  store i64* %24, i64** %5, align 8
  store i32 -973750156, i32* %12
  br label %27

; <label>:25:                                     ; preds = %13
  %26 = load i64*, i64** %5, align 8
  ret i64* %26

; <label>:27:                                     ; preds = %23, %21, %16, %15
  br label %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8), i64* dereferenceable(8)) #4 comdat {
  %3 = alloca i1
  %4 = alloca i64**
  %5 = alloca i64**
  %6 = alloca i64**
  %7 = alloca i1
  %8 = alloca i1
  %9 = load i32, i32* @x.45
  %10 = load i32, i32* @y.46
  %11 = sub i32 0, 1
  %12 = add i32 %9, %11
  %13 = sub i32 %9, 1
  %14 = mul i32 %9, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %8
  %17 = icmp slt i32 %10, 10
  store i1 %17, i1* %7
  %18 = alloca i32
  store i32 -641511829, i32* %18
  br label %19

; <label>:19:                                     ; preds = %2, %140
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 -641511829, label %22
    i32 146696427, label %42
    i32 261959251, label %69
    i32 1096356525, label %72
    i32 -263040390, label %100
    i32 696697539, label %119
    i32 40510215, label %120
    i32 1064019692, label %124
    i32 1651447061, label %127
    i32 -37203418, label %136
  ]

; <label>:21:                                     ; preds = %19
  br label %140

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %8
  %24 = load volatile i1, i1* %7
  %25 = xor i1 %23, true
  %26 = xor i1 %24, true
  %27 = xor i1 true, true
  %28 = and i1 %25, true
  %29 = and i1 %23, %27
  %30 = and i1 %26, true
  %31 = and i1 %24, %27
  %32 = or i1 %28, %29
  %33 = or i1 %30, %31
  %34 = xor i1 %32, %33
  %35 = or i1 %25, %26
  %36 = xor i1 %35, true
  %37 = or i1 true, %27
  %38 = and i1 %36, %37
  %39 = or i1 %34, %38
  %40 = or i1 %23, %24
  %41 = select i1 %39, i32 146696427, i32 1651447061
  store i32 %41, i32* %18
  br label %140

; <label>:42:                                     ; preds = %19
  %43 = alloca i64*, align 8
  store i64** %43, i64*** %6
  %44 = alloca i64*, align 8
  store i64** %44, i64*** %5
  %45 = alloca i64*, align 8
  store i64** %45, i64*** %4
  %46 = load volatile i64**, i64*** %5
  store i64* %0, i64** %46, align 8
  %47 = load volatile i64**, i64*** %4
  store i64* %1, i64** %47, align 8
  %48 = load volatile i64**, i64*** %4
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = load volatile i64**, i64*** %5
  %52 = load i64*, i64** %51, align 8
  %53 = load i64, i64* %52, align 8
  %54 = icmp slt i64 %50, %53
  store i1 %54, i1* %3
  %55 = load i32, i32* @x.45
  %56 = load i32, i32* @y.46
  %57 = sub i32 0, 1
  %58 = add i32 %55, %57
  %59 = sub i32 %55, 1
  %60 = mul i32 %55, %58
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %56, 10
  %64 = and i1 %62, %63
  %65 = xor i1 %62, %63
  %66 = or i1 %64, %65
  %67 = or i1 %62, %63
  %68 = select i1 %66, i32 261959251, i32 1651447061
  store i32 %68, i32* %18
  br label %140

; <label>:69:                                     ; preds = %19
  %70 = load volatile i1, i1* %3
  %71 = select i1 %70, i32 1096356525, i32 40510215
  store i32 %71, i32* %18
  br label %140

; <label>:72:                                     ; preds = %19
  %73 = load i32, i32* @x.45
  %74 = load i32, i32* @y.46
  %75 = add i32 %73, 119367053
  %76 = sub i32 %75, 1
  %77 = sub i32 %76, 119367053
  %78 = sub i32 %73, 1
  %79 = mul i32 %73, %77
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %74, 10
  %83 = xor i1 %81, true
  %84 = xor i1 %82, true
  %85 = xor i1 false, true
  %86 = and i1 %83, false
  %87 = and i1 %81, %85
  %88 = and i1 %84, false
  %89 = and i1 %82, %85
  %90 = or i1 %86, %87
  %91 = or i1 %88, %89
  %92 = xor i1 %90, %91
  %93 = or i1 %83, %84
  %94 = xor i1 %93, true
  %95 = or i1 false, %85
  %96 = and i1 %94, %95
  %97 = or i1 %92, %96
  %98 = or i1 %81, %82
  %99 = select i1 %97, i32 -263040390, i32 -37203418
  store i32 %99, i32* %18
  br label %140

; <label>:100:                                    ; preds = %19
  %101 = load volatile i64**, i64*** %4
  %102 = load i64*, i64** %101, align 8
  %103 = load volatile i64**, i64*** %6
  store i64* %102, i64** %103, align 8
  %104 = load i32, i32* @x.45
  %105 = load i32, i32* @y.46
  %106 = add i32 %104, 1067287104
  %107 = sub i32 %106, 1
  %108 = sub i32 %107, 1067287104
  %109 = sub i32 %104, 1
  %110 = mul i32 %104, %108
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %105, 10
  %114 = and i1 %112, %113
  %115 = xor i1 %112, %113
  %116 = or i1 %114, %115
  %117 = or i1 %112, %113
  %118 = select i1 %116, i32 696697539, i32 -37203418
  store i32 %118, i32* %18
  br label %140

; <label>:119:                                    ; preds = %19
  store i32 1064019692, i32* %18
  br label %140

; <label>:120:                                    ; preds = %19
  %121 = load volatile i64**, i64*** %5
  %122 = load i64*, i64** %121, align 8
  %123 = load volatile i64**, i64*** %6
  store i64* %122, i64** %123, align 8
  store i32 1064019692, i32* %18
  br label %140

; <label>:124:                                    ; preds = %19
  %125 = load volatile i64**, i64*** %6
  %126 = load i64*, i64** %125, align 8
  ret i64* %126

; <label>:127:                                    ; preds = %19
  %128 = alloca i64*, align 8
  %129 = alloca i64*, align 8
  %130 = alloca i64*, align 8
  store i64* %0, i64** %129, align 8
  store i64* %1, i64** %130, align 8
  %131 = load i64*, i64** %130, align 8
  %132 = load i64, i64* %131, align 8
  %133 = load i64*, i64** %129, align 8
  %134 = load i64, i64* %133, align 8
  %135 = icmp slt i64 %132, %134
  store i32 146696427, i32* %18
  br label %140

; <label>:136:                                    ; preds = %19
  %137 = load volatile i64**, i64*** %4
  %138 = load i64*, i64** %137, align 8
  %139 = load volatile i64**, i64*** %6
  store i64* %138, i64** %139, align 8
  store i32 -263040390, i32* %18
  br label %140

; <label>:140:                                    ; preds = %136, %127, %120, %119, %100, %72, %69, %42, %22, %21
  br label %19
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8multisetIxSt4lessIxESaIxEEC2Ev(%"class.std::multiset"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::multiset"*, align 8
  store %"class.std::multiset"* %0, %"class.std::multiset"** %2, align 8
  %3 = load %"class.std::multiset"*, %"class.std::multiset"** %2, align 8
  %4 = getelementptr inbounds %"class.std::multiset", %"class.std::multiset"* %3, i32 0, i32 0
  invoke void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEEC2Ev(%"class.std::_Rb_tree"* %4)
          to label %5 unwind label %6

; <label>:5:                                      ; preds = %1
  ret void

; <label>:6:                                      ; preds = %1
  %7 = landingpad { i8*, i32 }
          catch i8* null
  %8 = extractvalue { i8*, i32 } %7, 0
  call void @__clang_call_terminate(i8* %8) #13
  unreachable
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE6insertERKx(%"class.std::multiset"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_node_base"*
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.49
  %7 = load i32, i32* @y.50
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 -46475513, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %92
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -46475513, label %19
    i32 -1562156452, label %39
    i32 -1743676433, label %78
    i32 1315118449, label %80
  ]

; <label>:18:                                     ; preds = %16
  br label %92

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -1562156452, i32 1315118449
  store i32 %38, i32* %15
  br label %92

; <label>:39:                                     ; preds = %16
  %40 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %41 = alloca %"class.std::multiset"*, align 8
  %42 = alloca i64*, align 8
  %43 = alloca %"struct.std::_Rb_tree_iterator", align 8
  store %"class.std::multiset"* %0, %"class.std::multiset"** %41, align 8
  store i64* %1, i64** %42, align 8
  %44 = load %"class.std::multiset"*, %"class.std::multiset"** %41, align 8
  %45 = getelementptr inbounds %"class.std::multiset", %"class.std::multiset"* %44, i32 0, i32 0
  %46 = load i64*, i64** %42, align 8
  %47 = call %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE15_M_insert_equalIRKxEESt17_Rb_tree_iteratorIxEOT_(%"class.std::_Rb_tree"* %45, i64* dereferenceable(8) %46)
  %48 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %43, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %47, %"struct.std::_Rb_tree_node_base"** %48, align 8
  call void @_ZNSt23_Rb_tree_const_iteratorIxEC2ERKSt17_Rb_tree_iteratorIxE(%"struct.std::_Rb_tree_const_iterator"* %40, %"struct.std::_Rb_tree_iterator"* dereferenceable(8) %43) #3
  %49 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %40, i32 0, i32 0
  %50 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %49, align 8
  store %"struct.std::_Rb_tree_node_base"* %50, %"struct.std::_Rb_tree_node_base"** %3
  %51 = load i32, i32* @x.49
  %52 = load i32, i32* @y.50
  %53 = sub i32 %51, -1216482134
  %54 = sub i32 %53, 1
  %55 = add i32 %54, -1216482134
  %56 = sub i32 %51, 1
  %57 = mul i32 %51, %55
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %52, 10
  %61 = xor i1 %59, true
  %62 = xor i1 %60, true
  %63 = xor i1 true, true
  %64 = and i1 %61, true
  %65 = and i1 %59, %63
  %66 = and i1 %62, true
  %67 = and i1 %60, %63
  %68 = or i1 %64, %65
  %69 = or i1 %66, %67
  %70 = xor i1 %68, %69
  %71 = or i1 %61, %62
  %72 = xor i1 %71, true
  %73 = or i1 true, %63
  %74 = and i1 %72, %73
  %75 = or i1 %70, %74
  %76 = or i1 %59, %60
  %77 = select i1 %75, i32 -1743676433, i32 1315118449
  store i32 %77, i32* %15
  br label %92

; <label>:78:                                     ; preds = %16
  %79 = load volatile %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %3
  ret %"struct.std::_Rb_tree_node_base"* %79

; <label>:80:                                     ; preds = %16
  %81 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %82 = alloca %"class.std::multiset"*, align 8
  %83 = alloca i64*, align 8
  %84 = alloca %"struct.std::_Rb_tree_iterator", align 8
  store %"class.std::multiset"* %0, %"class.std::multiset"** %82, align 8
  store i64* %1, i64** %83, align 8
  %85 = load %"class.std::multiset"*, %"class.std::multiset"** %82, align 8
  %86 = getelementptr inbounds %"class.std::multiset", %"class.std::multiset"* %85, i32 0, i32 0
  %87 = load i64*, i64** %83, align 8
  %88 = call %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE15_M_insert_equalIRKxEESt17_Rb_tree_iteratorIxEOT_(%"class.std::_Rb_tree"* %86, i64* dereferenceable(8) %87)
  %89 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %84, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %88, %"struct.std::_Rb_tree_node_base"** %89, align 8
  call void @_ZNSt23_Rb_tree_const_iteratorIxEC2ERKSt17_Rb_tree_iteratorIxE(%"struct.std::_Rb_tree_const_iterator"* %81, %"struct.std::_Rb_tree_iterator"* dereferenceable(8) %84) #3
  %90 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %81, i32 0, i32 0
  %91 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %90, align 8
  store i32 -1562156452, i32* %15
  br label %92

; <label>:92:                                     ; preds = %80, %39, %19, %18
  br label %16
}

declare i32 @__gxx_personality_v0(...)

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNKSt8multisetIxSt4lessIxESaIxEE6rbeginEv(%"class.std::reverse_iterator"* noalias sret, %"class.std::multiset"*) #4 comdat align 2 {
  %3 = alloca %"class.std::multiset"*, align 8
  store %"class.std::multiset"* %1, %"class.std::multiset"** %3, align 8
  %4 = load %"class.std::multiset"*, %"class.std::multiset"** %3, align 8
  %5 = getelementptr inbounds %"class.std::multiset", %"class.std::multiset"* %4, i32 0, i32 0
  call void @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6rbeginEv(%"class.std::reverse_iterator"* sret %0, %"class.std::_Rb_tree"* %5) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNKSt16reverse_iteratorISt23_Rb_tree_const_iteratorIxEEdeEv(%"class.std::reverse_iterator"*) #4 comdat align 2 {
  %2 = alloca %"class.std::reverse_iterator"*, align 8
  %3 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  store %"class.std::reverse_iterator"* %0, %"class.std::reverse_iterator"** %2, align 8
  %4 = load %"class.std::reverse_iterator"*, %"class.std::reverse_iterator"** %2, align 8
  %5 = getelementptr inbounds %"class.std::reverse_iterator", %"class.std::reverse_iterator"* %4, i32 0, i32 0
  %6 = bitcast %"struct.std::_Rb_tree_const_iterator"* %3 to i8*
  %7 = bitcast %"struct.std::_Rb_tree_const_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 8, i32 8, i1 false)
  %8 = call dereferenceable(8) %"struct.std::_Rb_tree_const_iterator"* @_ZNSt23_Rb_tree_const_iteratorIxEmmEv(%"struct.std::_Rb_tree_const_iterator"* %3) #3
  %9 = call dereferenceable(8) i64* @_ZNKSt23_Rb_tree_const_iteratorIxEdeEv(%"struct.std::_Rb_tree_const_iterator"* %8) #3
  ret i64* %9
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNKSt8multisetIxSt4lessIxESaIxEE5beginEv(%"class.std::multiset"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %3 = alloca %"class.std::multiset"*, align 8
  store %"class.std::multiset"* %0, %"class.std::multiset"** %3, align 8
  %4 = load %"class.std::multiset"*, %"class.std::multiset"** %3, align 8
  %5 = getelementptr inbounds %"class.std::multiset", %"class.std::multiset"* %4, i32 0, i32 0
  %6 = call %"struct.std::_Rb_tree_node_base"* @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE5beginEv(%"class.std::_Rb_tree"* %5) #3
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %2, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %6, %"struct.std::_Rb_tree_node_base"** %7, align 8
  %8 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %2, i32 0, i32 0
  %9 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %8, align 8
  ret %"struct.std::_Rb_tree_node_base"* %9
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNKSt23_Rb_tree_const_iteratorIxEdeEv(%"struct.std::_Rb_tree_const_iterator"*) #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = load i32, i32* @x.57
  %3 = load i32, i32* @y.58
  %4 = sub i32 0, 1
  %5 = add i32 %2, %4
  %6 = sub i32 %2, 1
  %7 = mul i32 %2, %5
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %3, 10
  %11 = xor i1 %9, true
  %12 = xor i1 %10, true
  %13 = xor i1 false, true
  %14 = and i1 %11, false
  %15 = and i1 %9, %13
  %16 = and i1 %12, false
  %17 = and i1 %10, %13
  %18 = or i1 %14, %15
  %19 = or i1 %16, %17
  %20 = xor i1 %18, %19
  %21 = or i1 %11, %12
  %22 = xor i1 %21, true
  %23 = or i1 false, %13
  %24 = and i1 %22, %23
  %25 = or i1 %20, %24
  %26 = or i1 %9, %10
  br i1 %25, label %27, label %94

; <label>:27:                                     ; preds = %1, %94
  %28 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %28, align 8
  %29 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %28, align 8
  %30 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %29, i32 0, i32 0
  %31 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %30, align 8
  %32 = bitcast %"struct.std::_Rb_tree_node_base"* %31 to %"struct.std::_Rb_tree_node"*
  %33 = load i32, i32* @x.57
  %34 = load i32, i32* @y.58
  %35 = sub i32 %33, -590786660
  %36 = sub i32 %35, 1
  %37 = add i32 %36, -590786660
  %38 = sub i32 %33, 1
  %39 = mul i32 %33, %37
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %34, 10
  %43 = and i1 %41, %42
  %44 = xor i1 %41, %42
  %45 = or i1 %43, %44
  %46 = or i1 %41, %42
  br i1 %45, label %47, label %94

; <label>:47:                                     ; preds = %27
  %48 = invoke i64* @_ZNKSt13_Rb_tree_nodeIxE9_M_valptrEv(%"struct.std::_Rb_tree_node"* %32)
          to label %49 unwind label %91

; <label>:49:                                     ; preds = %47
  %50 = load i32, i32* @x.57
  %51 = load i32, i32* @y.58
  %52 = sub i32 %50, 164125777
  %53 = sub i32 %52, 1
  %54 = add i32 %53, 164125777
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = xor i1 %58, true
  %61 = xor i1 %59, true
  %62 = xor i1 false, true
  %63 = and i1 %60, false
  %64 = and i1 %58, %62
  %65 = and i1 %61, false
  %66 = and i1 %59, %62
  %67 = or i1 %63, %64
  %68 = or i1 %65, %66
  %69 = xor i1 %67, %68
  %70 = or i1 %60, %61
  %71 = xor i1 %70, true
  %72 = or i1 false, %62
  %73 = and i1 %71, %72
  %74 = or i1 %69, %73
  %75 = or i1 %58, %59
  br i1 %74, label %76, label %100

; <label>:76:                                     ; preds = %49, %100
  %77 = load i32, i32* @x.57
  %78 = load i32, i32* @y.58
  %79 = sub i32 0, 1
  %80 = add i32 %77, %79
  %81 = sub i32 %77, 1
  %82 = mul i32 %77, %80
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %78, 10
  %86 = and i1 %84, %85
  %87 = xor i1 %84, %85
  %88 = or i1 %86, %87
  %89 = or i1 %84, %85
  br i1 %88, label %90, label %100

; <label>:90:                                     ; preds = %76
  ret i64* %48

; <label>:91:                                     ; preds = %47
  %92 = landingpad { i8*, i32 }
          catch i8* null
  %93 = extractvalue { i8*, i32 } %92, 0
  call void @__clang_call_terminate(i8* %93) #13
  unreachable

; <label>:94:                                     ; preds = %27, %1
  %95 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %95, align 8
  %96 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %95, align 8
  %97 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %96, i32 0, i32 0
  %98 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %97, align 8
  %99 = bitcast %"struct.std::_Rb_tree_node_base"* %98 to %"struct.std::_Rb_tree_node"*
  br label %27

; <label>:100:                                    ; preds = %76, %49
  br label %76
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIxE(%"class.std::multiset"*, %"struct.std::_Rb_tree_node_base"*) #0 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %4 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %5 = alloca %"class.std::multiset"*, align 8
  %6 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %7 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %8 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %4, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %8, align 8
  store %"class.std::multiset"* %0, %"class.std::multiset"** %5, align 8
  %9 = load %"class.std::multiset"*, %"class.std::multiset"** %5, align 8
  %10 = getelementptr inbounds %"class.std::multiset", %"class.std::multiset"* %9, i32 0, i32 0
  %11 = bitcast %"struct.std::_Rb_tree_const_iterator"* %7 to i8*
  %12 = bitcast %"struct.std::_Rb_tree_const_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 8, i32 8, i1 false)
  %13 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %7, i32 0, i32 0
  %14 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %13, align 8
  %15 = call %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIxE(%"class.std::_Rb_tree"* %10, %"struct.std::_Rb_tree_node_base"* %14)
  %16 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %6, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %15, %"struct.std::_Rb_tree_node_base"** %16, align 8
  call void @_ZNSt23_Rb_tree_const_iteratorIxEC2ERKSt17_Rb_tree_iteratorIxE(%"struct.std::_Rb_tree_const_iterator"* %3, %"struct.std::_Rb_tree_iterator"* dereferenceable(8) %6) #3
  %17 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  %18 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %17, align 8
  ret %"struct.std::_Rb_tree_node_base"* %18
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8multisetIxSt4lessIxESaIxEE4findERKx(%"class.std::multiset"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %4 = alloca %"class.std::multiset"*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca %"struct.std::_Rb_tree_iterator", align 8
  store %"class.std::multiset"* %0, %"class.std::multiset"** %4, align 8
  store i64* %1, i64** %5, align 8
  %7 = load %"class.std::multiset"*, %"class.std::multiset"** %4, align 8
  %8 = getelementptr inbounds %"class.std::multiset", %"class.std::multiset"* %7, i32 0, i32 0
  %9 = load i64*, i64** %5, align 8
  %10 = call %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE4findERKx(%"class.std::_Rb_tree"* %8, i64* dereferenceable(8) %9)
  %11 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %6, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %10, %"struct.std::_Rb_tree_node_base"** %11, align 8
  call void @_ZNSt23_Rb_tree_const_iteratorIxEC2ERKSt17_Rb_tree_iteratorIxE(%"struct.std::_Rb_tree_const_iterator"* %3, %"struct.std::_Rb_tree_iterator"* dereferenceable(8) %6) #3
  %12 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  %13 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %12, align 8
  ret %"struct.std::_Rb_tree_node_base"* %13
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8multisetIxSt4lessIxESaIxEED2Ev(%"class.std::multiset"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.std::multiset"*, align 8
  store %"class.std::multiset"* %0, %"class.std::multiset"** %2, align 8
  %3 = load %"class.std::multiset"*, %"class.std::multiset"** %2, align 8
  %4 = getelementptr inbounds %"class.std::multiset", %"class.std::multiset"* %3, i32 0, i32 0
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEED2Ev(%"class.std::_Rb_tree"* %4) #3
  ret void
}

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

; Function Attrs: nounwind
declare double @pow(double, double) #2

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEED2Ev(%"class.std::_Rb_tree"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = load i32, i32* @x.65
  %3 = load i32, i32* @y.66
  %4 = sub i32 0, 1
  %5 = add i32 %2, %4
  %6 = sub i32 %2, 1
  %7 = mul i32 %2, %5
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %3, 10
  %11 = xor i1 %9, true
  %12 = xor i1 %10, true
  %13 = xor i1 true, true
  %14 = and i1 %11, true
  %15 = and i1 %9, %13
  %16 = and i1 %12, true
  %17 = and i1 %10, %13
  %18 = or i1 %14, %15
  %19 = or i1 %16, %17
  %20 = xor i1 %18, %19
  %21 = or i1 %11, %12
  %22 = xor i1 %21, true
  %23 = or i1 true, %13
  %24 = and i1 %22, %23
  %25 = or i1 %20, %24
  %26 = or i1 %9, %10
  br i1 %25, label %27, label %98

; <label>:27:                                     ; preds = %1, %98
  %28 = alloca %"class.std::_Rb_tree"*, align 8
  %29 = alloca i8*
  %30 = alloca i32
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %28, align 8
  %31 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %28, align 8
  %32 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_beginEv(%"class.std::_Rb_tree"* %31) #3
  %33 = load i32, i32* @x.65
  %34 = load i32, i32* @y.66
  %35 = sub i32 0, 1
  %36 = add i32 %33, %35
  %37 = sub i32 %33, 1
  %38 = mul i32 %33, %36
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %34, 10
  %42 = xor i1 %40, true
  %43 = xor i1 %41, true
  %44 = xor i1 false, true
  %45 = and i1 %42, false
  %46 = and i1 %40, %44
  %47 = and i1 %43, false
  %48 = and i1 %41, %44
  %49 = or i1 %45, %46
  %50 = or i1 %47, %48
  %51 = xor i1 %49, %50
  %52 = or i1 %42, %43
  %53 = xor i1 %52, true
  %54 = or i1 false, %44
  %55 = and i1 %53, %54
  %56 = or i1 %51, %55
  %57 = or i1 %40, %41
  br i1 %56, label %58, label %98

; <label>:58:                                     ; preds = %27
  invoke void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_eraseEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %31, %"struct.std::_Rb_tree_node"* %32)
          to label %59 unwind label %91

; <label>:59:                                     ; preds = %58
  %60 = load i32, i32* @x.65
  %61 = load i32, i32* @y.66
  %62 = add i32 %60, -1977289691
  %63 = sub i32 %62, 1
  %64 = sub i32 %63, -1977289691
  %65 = sub i32 %60, 1
  %66 = mul i32 %60, %64
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %61, 10
  %70 = and i1 %68, %69
  %71 = xor i1 %68, %69
  %72 = or i1 %70, %71
  %73 = or i1 %68, %69
  br i1 %72, label %74, label %104

; <label>:74:                                     ; preds = %59, %104
  %75 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %31, i32 0, i32 0
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EED2Ev(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %75) #3
  %76 = load i32, i32* @x.65
  %77 = load i32, i32* @y.66
  %78 = sub i32 %76, 42836218
  %79 = sub i32 %78, 1
  %80 = add i32 %79, 42836218
  %81 = sub i32 %76, 1
  %82 = mul i32 %76, %80
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %77, 10
  %86 = and i1 %84, %85
  %87 = xor i1 %84, %85
  %88 = or i1 %86, %87
  %89 = or i1 %84, %85
  br i1 %88, label %90, label %104

; <label>:90:                                     ; preds = %74
  ret void

; <label>:91:                                     ; preds = %58
  %92 = landingpad { i8*, i32 }
          catch i8* null
  %93 = extractvalue { i8*, i32 } %92, 0
  store i8* %93, i8** %29, align 8
  %94 = extractvalue { i8*, i32 } %92, 1
  store i32 %94, i32* %30, align 4
  %95 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %31, i32 0, i32 0
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EED2Ev(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %95) #3
  br label %96

; <label>:96:                                     ; preds = %91
  %97 = load i8*, i8** %29, align 8
  call void @__clang_call_terminate(i8* %97) #13
  unreachable

; <label>:98:                                     ; preds = %27, %1
  %99 = alloca %"class.std::_Rb_tree"*, align 8
  %100 = alloca i8*
  %101 = alloca i32
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %99, align 8
  %102 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %99, align 8
  %103 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_beginEv(%"class.std::_Rb_tree"* %102) #3
  br label %27

; <label>:104:                                    ; preds = %74, %59
  %105 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %31, i32 0, i32 0
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EED2Ev(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %105) #3
  br label %74
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_eraseEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node"*) #0 comdat align 2 {
  %3 = alloca %"class.std::_Rb_tree"*
  %4 = alloca %"struct.std::_Rb_tree_node"**
  %5 = alloca %"struct.std::_Rb_tree_node"**
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.67
  %9 = load i32, i32* @y.68
  %10 = sub i32 %8, -1522224046
  %11 = sub i32 %10, 1
  %12 = add i32 %11, -1522224046
  %13 = sub i32 %8, 1
  %14 = mul i32 %8, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %7
  %17 = icmp slt i32 %9, 10
  store i1 %17, i1* %6
  %18 = alloca i32
  store i32 -440465271, i32* %18
  br label %19

; <label>:19:                                     ; preds = %2, %186
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 -440465271, label %22
    i32 -1577672619, label %42
    i32 -1669899714, label %63
    i32 1094588752, label %64
    i32 107982427, label %69
    i32 1260419324, label %97
    i32 -1038698269, label %129
    i32 -1485668147, label %130
    i32 388792621, label %146
    i32 -1218683023, label %162
    i32 600025941, label %163
    i32 307555108, label %168
    i32 1229486187, label %185
  ]

; <label>:21:                                     ; preds = %19
  br label %186

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %7
  %24 = load volatile i1, i1* %6
  %25 = xor i1 %23, true
  %26 = xor i1 %24, true
  %27 = xor i1 true, true
  %28 = and i1 %25, true
  %29 = and i1 %23, %27
  %30 = and i1 %26, true
  %31 = and i1 %24, %27
  %32 = or i1 %28, %29
  %33 = or i1 %30, %31
  %34 = xor i1 %32, %33
  %35 = or i1 %25, %26
  %36 = xor i1 %35, true
  %37 = or i1 true, %27
  %38 = and i1 %36, %37
  %39 = or i1 %34, %38
  %40 = or i1 %23, %24
  %41 = select i1 %39, i32 -1577672619, i32 600025941
  store i32 %41, i32* %18
  br label %186

; <label>:42:                                     ; preds = %19
  %43 = alloca %"class.std::_Rb_tree"*, align 8
  %44 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"struct.std::_Rb_tree_node"** %44, %"struct.std::_Rb_tree_node"*** %5
  %45 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"struct.std::_Rb_tree_node"** %45, %"struct.std::_Rb_tree_node"*** %4
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %43, align 8
  %46 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %46, align 8
  %47 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %43, align 8
  store %"class.std::_Rb_tree"* %47, %"class.std::_Rb_tree"** %3
  %48 = load i32, i32* @x.67
  %49 = load i32, i32* @y.68
  %50 = add i32 %48, 901914167
  %51 = sub i32 %50, 1
  %52 = sub i32 %51, 901914167
  %53 = sub i32 %48, 1
  %54 = mul i32 %48, %52
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %49, 10
  %58 = and i1 %56, %57
  %59 = xor i1 %56, %57
  %60 = or i1 %58, %59
  %61 = or i1 %56, %57
  %62 = select i1 %60, i32 -1669899714, i32 600025941
  store i32 %62, i32* %18
  br label %186

; <label>:63:                                     ; preds = %19
  store i32 1094588752, i32* %18
  br label %186

; <label>:64:                                     ; preds = %19
  %65 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  %66 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %65, align 8
  %67 = icmp ne %"struct.std::_Rb_tree_node"* %66, null
  %68 = select i1 %67, i32 107982427, i32 -1485668147
  store i32 %68, i32* %18
  br label %186

; <label>:69:                                     ; preds = %19
  %70 = load i32, i32* @x.67
  %71 = load i32, i32* @y.68
  %72 = sub i32 %70, -1191570289
  %73 = sub i32 %72, 1
  %74 = add i32 %73, -1191570289
  %75 = sub i32 %70, 1
  %76 = mul i32 %70, %74
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %71, 10
  %80 = xor i1 %78, true
  %81 = xor i1 %79, true
  %82 = xor i1 true, true
  %83 = and i1 %80, true
  %84 = and i1 %78, %82
  %85 = and i1 %81, true
  %86 = and i1 %79, %82
  %87 = or i1 %83, %84
  %88 = or i1 %85, %86
  %89 = xor i1 %87, %88
  %90 = or i1 %80, %81
  %91 = xor i1 %90, true
  %92 = or i1 true, %82
  %93 = and i1 %91, %92
  %94 = or i1 %89, %93
  %95 = or i1 %78, %79
  %96 = select i1 %94, i32 1260419324, i32 307555108
  store i32 %96, i32* %18
  br label %186

; <label>:97:                                     ; preds = %19
  %98 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  %99 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %98, align 8
  %100 = bitcast %"struct.std::_Rb_tree_node"* %99 to %"struct.std::_Rb_tree_node_base"*
  %101 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_rightEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %100) #3
  %102 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_eraseEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %102, %"struct.std::_Rb_tree_node"* %101)
  %103 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  %104 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %103, align 8
  %105 = bitcast %"struct.std::_Rb_tree_node"* %104 to %"struct.std::_Rb_tree_node_base"*
  %106 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE7_S_leftEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %105) #3
  %107 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %4
  store %"struct.std::_Rb_tree_node"* %106, %"struct.std::_Rb_tree_node"** %107, align 8
  %108 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  %109 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %108, align 8
  %110 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE12_M_drop_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %110, %"struct.std::_Rb_tree_node"* %109) #3
  %111 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %4
  %112 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %111, align 8
  %113 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  store %"struct.std::_Rb_tree_node"* %112, %"struct.std::_Rb_tree_node"** %113, align 8
  %114 = load i32, i32* @x.67
  %115 = load i32, i32* @y.68
  %116 = add i32 %114, 1507437817
  %117 = sub i32 %116, 1
  %118 = sub i32 %117, 1507437817
  %119 = sub i32 %114, 1
  %120 = mul i32 %114, %118
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %115, 10
  %124 = and i1 %122, %123
  %125 = xor i1 %122, %123
  %126 = or i1 %124, %125
  %127 = or i1 %122, %123
  %128 = select i1 %126, i32 -1038698269, i32 307555108
  store i32 %128, i32* %18
  br label %186

; <label>:129:                                    ; preds = %19
  store i32 1094588752, i32* %18
  br label %186

; <label>:130:                                    ; preds = %19
  %131 = load i32, i32* @x.67
  %132 = load i32, i32* @y.68
  %133 = sub i32 %131, 517865294
  %134 = sub i32 %133, 1
  %135 = add i32 %134, 517865294
  %136 = sub i32 %131, 1
  %137 = mul i32 %131, %135
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %132, 10
  %141 = and i1 %139, %140
  %142 = xor i1 %139, %140
  %143 = or i1 %141, %142
  %144 = or i1 %139, %140
  %145 = select i1 %143, i32 388792621, i32 1229486187
  store i32 %145, i32* %18
  br label %186

; <label>:146:                                    ; preds = %19
  %147 = load i32, i32* @x.67
  %148 = load i32, i32* @y.68
  %149 = add i32 %147, -1721541424
  %150 = sub i32 %149, 1
  %151 = sub i32 %150, -1721541424
  %152 = sub i32 %147, 1
  %153 = mul i32 %147, %151
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %148, 10
  %157 = and i1 %155, %156
  %158 = xor i1 %155, %156
  %159 = or i1 %157, %158
  %160 = or i1 %155, %156
  %161 = select i1 %159, i32 -1218683023, i32 1229486187
  store i32 %161, i32* %18
  br label %186

; <label>:162:                                    ; preds = %19
  ret void

; <label>:163:                                    ; preds = %19
  %164 = alloca %"class.std::_Rb_tree"*, align 8
  %165 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %166 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %164, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %165, align 8
  %167 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %164, align 8
  store i32 -1577672619, i32* %18
  br label %186

; <label>:168:                                    ; preds = %19
  %169 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  %170 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %169, align 8
  %171 = bitcast %"struct.std::_Rb_tree_node"* %170 to %"struct.std::_Rb_tree_node_base"*
  %172 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_rightEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %171) #3
  %173 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_eraseEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %173, %"struct.std::_Rb_tree_node"* %172)
  %174 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  %175 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %174, align 8
  %176 = bitcast %"struct.std::_Rb_tree_node"* %175 to %"struct.std::_Rb_tree_node_base"*
  %177 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE7_S_leftEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %176) #3
  %178 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %4
  store %"struct.std::_Rb_tree_node"* %177, %"struct.std::_Rb_tree_node"** %178, align 8
  %179 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  %180 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %179, align 8
  %181 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE12_M_drop_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %181, %"struct.std::_Rb_tree_node"* %180) #3
  %182 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %4
  %183 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %182, align 8
  %184 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %5
  store %"struct.std::_Rb_tree_node"* %183, %"struct.std::_Rb_tree_node"** %184, align 8
  store i32 1260419324, i32* %18
  br label %186

; <label>:185:                                    ; preds = %19
  store i32 388792621, i32* %18
  br label %186

; <label>:186:                                    ; preds = %185, %168, %163, %146, %130, %129, %97, %69, %64, %63, %42, %22, %21
  br label %19
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_beginEv(%"class.std::_Rb_tree"*) #4 comdat align 2 {
  %2 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %2, align 8
  %3 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %2, align 8
  %4 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %3, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %4, i32 0, i32 1
  %6 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %5, i32 0, i32 1
  %7 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %6, align 8
  %8 = bitcast %"struct.std::_Rb_tree_node_base"* %7 to %"struct.std::_Rb_tree_node"*
  ret %"struct.std::_Rb_tree_node"* %8
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EED2Ev(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*, align 8
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %0, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"** %2, align 8
  %3 = load %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"** %2, align 8
  %4 = bitcast %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %3 to %"class.std::allocator.4"*
  call void @_ZNSaISt13_Rb_tree_nodeIxEED2Ev(%"class.std::allocator.4"* %4) #3
  ret void
}

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8*) #7 comdat {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.73
  %5 = load i32, i32* @y.74
  %6 = add i32 %4, 1686622053
  %7 = sub i32 %6, 1
  %8 = sub i32 %7, 1686622053
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 1702526995, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %45
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 1702526995, label %18
    i32 -1139978180, label %26
    i32 -2121633661, label %42
    i32 -651348737, label %43
  ]

; <label>:17:                                     ; preds = %15
  br label %45

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 -1139978180, i32 -651348737
  store i32 %25, i32* %14
  br label %45

; <label>:26:                                     ; preds = %15
  %27 = call i8* @__cxa_begin_catch(i8* %0) #3
  call void @_ZSt9terminatev() #13
  %28 = load i32, i32* @x.73
  %29 = load i32, i32* @y.74
  %30 = sub i32 0, 1
  %31 = add i32 %28, %30
  %32 = sub i32 %28, 1
  %33 = mul i32 %28, %31
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %29, 10
  %37 = and i1 %35, %36
  %38 = xor i1 %35, %36
  %39 = or i1 %37, %38
  %40 = or i1 %35, %36
  %41 = select i1 %39, i32 -2121633661, i32 -651348737
  store i32 %41, i32* %14
  br label %45

; <label>:42:                                     ; preds = %15
  unreachable

; <label>:43:                                     ; preds = %15
  %44 = call i8* @__cxa_begin_catch(i8* %0) #3
  call void @_ZSt9terminatev() #13
  store i32 -1139978180, i32* %14
  br label %45

; <label>:45:                                     ; preds = %43, %26, %18, %17
  br label %15
}

declare i8* @__cxa_begin_catch(i8*)

declare void @_ZSt9terminatev()

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_rightEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  store %"struct.std::_Rb_tree_node_base"* %0, %"struct.std::_Rb_tree_node_base"** %2, align 8
  %3 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %3, i32 0, i32 3
  %5 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %4, align 8
  %6 = bitcast %"struct.std::_Rb_tree_node_base"* %5 to %"struct.std::_Rb_tree_node"*
  ret %"struct.std::_Rb_tree_node"* %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE7_S_leftEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  store %"struct.std::_Rb_tree_node_base"* %0, %"struct.std::_Rb_tree_node_base"** %2, align 8
  %3 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %3, i32 0, i32 2
  %5 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %4, align 8
  %6 = bitcast %"struct.std::_Rb_tree_node_base"* %5 to %"struct.std::_Rb_tree_node"*
  ret %"struct.std::_Rb_tree_node"* %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE12_M_drop_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node"*) #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.79
  %6 = load i32, i32* @y.80
  %7 = add i32 %5, 1541239555
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, 1541239555
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1308703895, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %79
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1308703895, label %19
    i32 -1470703983, label %39
    i32 406195737, label %72
    i32 1630748631, label %73
  ]

; <label>:18:                                     ; preds = %16
  br label %79

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -1470703983, i32 1630748631
  store i32 %38, i32* %15
  br label %79

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::_Rb_tree"*, align 8
  %41 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %40, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %41, align 8
  %42 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %40, align 8
  %43 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %41, align 8
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %42, %"struct.std::_Rb_tree_node"* %43) #3
  %44 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %41, align 8
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_M_put_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %42, %"struct.std::_Rb_tree_node"* %44) #3
  %45 = load i32, i32* @x.79
  %46 = load i32, i32* @y.80
  %47 = add i32 %45, 306434349
  %48 = sub i32 %47, 1
  %49 = sub i32 %48, 306434349
  %50 = sub i32 %45, 1
  %51 = mul i32 %45, %49
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %46, 10
  %55 = xor i1 %53, true
  %56 = xor i1 %54, true
  %57 = xor i1 false, true
  %58 = and i1 %55, false
  %59 = and i1 %53, %57
  %60 = and i1 %56, false
  %61 = and i1 %54, %57
  %62 = or i1 %58, %59
  %63 = or i1 %60, %61
  %64 = xor i1 %62, %63
  %65 = or i1 %55, %56
  %66 = xor i1 %65, true
  %67 = or i1 false, %57
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  %70 = or i1 %53, %54
  %71 = select i1 %69, i32 406195737, i32 1630748631
  store i32 %71, i32* %15
  br label %79

; <label>:72:                                     ; preds = %16
  ret void

; <label>:73:                                     ; preds = %16
  %74 = alloca %"class.std::_Rb_tree"*, align 8
  %75 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %74, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %75, align 8
  %76 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %74, align 8
  %77 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %75, align 8
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %76, %"struct.std::_Rb_tree_node"* %77) #3
  %78 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %75, align 8
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_M_put_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %76, %"struct.std::_Rb_tree_node"* %78) #3
  store i32 -1470703983, i32* %15
  br label %79

; <label>:79:                                     ; preds = %73, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node"*) #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::_Rb_tree"*, align 8
  %4 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %3, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %4, align 8
  %5 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3, align 8
  %6 = call dereferenceable(1) %"class.std::allocator.4"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE21_M_get_Node_allocatorEv(%"class.std::_Rb_tree"* %5) #3
  %7 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %4, align 8
  %8 = invoke i64* @_ZNSt13_Rb_tree_nodeIxE9_M_valptrEv(%"struct.std::_Rb_tree_node"* %7)
          to label %9 unwind label %12

; <label>:9:                                      ; preds = %2
  invoke void @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE7destroyIxEEvRS2_PT_(%"class.std::allocator.4"* dereferenceable(1) %6, i64* %8)
          to label %10 unwind label %12

; <label>:10:                                     ; preds = %9
  %11 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %4, align 8
  ret void

; <label>:12:                                     ; preds = %9, %2
  %13 = landingpad { i8*, i32 }
          catch i8* null
  %14 = extractvalue { i8*, i32 } %13, 0
  call void @__clang_call_terminate(i8* %14) #13
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_M_put_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node"*) #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = load i32, i32* @x.83
  %4 = load i32, i32* @y.84
  %5 = sub i32 0, 1
  %6 = add i32 %3, %5
  %7 = sub i32 %3, 1
  %8 = mul i32 %3, %6
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %4, 10
  %12 = xor i1 %10, true
  %13 = xor i1 %11, true
  %14 = xor i1 true, true
  %15 = and i1 %12, true
  %16 = and i1 %10, %14
  %17 = and i1 %13, true
  %18 = and i1 %11, %14
  %19 = or i1 %15, %16
  %20 = or i1 %17, %18
  %21 = xor i1 %19, %20
  %22 = or i1 %12, %13
  %23 = xor i1 %22, true
  %24 = or i1 true, %14
  %25 = and i1 %23, %24
  %26 = or i1 %21, %25
  %27 = or i1 %10, %11
  br i1 %26, label %28, label %52

; <label>:28:                                     ; preds = %2, %52
  %29 = alloca %"class.std::_Rb_tree"*, align 8
  %30 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %29, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %30, align 8
  %31 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %29, align 8
  %32 = call dereferenceable(1) %"class.std::allocator.4"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE21_M_get_Node_allocatorEv(%"class.std::_Rb_tree"* %31) #3
  %33 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %30, align 8
  %34 = load i32, i32* @x.83
  %35 = load i32, i32* @y.84
  %36 = sub i32 0, 1
  %37 = add i32 %34, %36
  %38 = sub i32 %34, 1
  %39 = mul i32 %34, %37
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %35, 10
  %43 = and i1 %41, %42
  %44 = xor i1 %41, %42
  %45 = or i1 %43, %44
  %46 = or i1 %41, %42
  br i1 %45, label %47, label %52

; <label>:47:                                     ; preds = %28
  invoke void @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE10deallocateERS2_PS1_m(%"class.std::allocator.4"* dereferenceable(1) %32, %"struct.std::_Rb_tree_node"* %33, i64 1)
          to label %48 unwind label %49

; <label>:48:                                     ; preds = %47
  ret void

; <label>:49:                                     ; preds = %47
  %50 = landingpad { i8*, i32 }
          catch i8* null
  %51 = extractvalue { i8*, i32 } %50, 0
  call void @__clang_call_terminate(i8* %51) #13
  unreachable

; <label>:52:                                     ; preds = %28, %2
  %53 = alloca %"class.std::_Rb_tree"*, align 8
  %54 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %53, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %54, align 8
  %55 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %53, align 8
  %56 = call dereferenceable(1) %"class.std::allocator.4"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE21_M_get_Node_allocatorEv(%"class.std::_Rb_tree"* %55) #3
  %57 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %54, align 8
  br label %28
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE7destroyIxEEvRS2_PT_(%"class.std::allocator.4"* dereferenceable(1), i64*) #0 comdat align 2 {
  %3 = alloca %"class.std::allocator.4"*, align 8
  %4 = alloca i64*, align 8
  store %"class.std::allocator.4"* %0, %"class.std::allocator.4"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"class.std::allocator.4"*, %"class.std::allocator.4"** %3, align 8
  %6 = bitcast %"class.std::allocator.4"* %5 to %"class.__gnu_cxx::new_allocator.5"*
  %7 = load i64*, i64** %4, align 8
  call void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE7destroyIxEEvPT_(%"class.__gnu_cxx::new_allocator.5"* %6, i64* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator.4"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE21_M_get_Node_allocatorEv(%"class.std::_Rb_tree"*) #4 comdat align 2 {
  %2 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %2, align 8
  %3 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %2, align 8
  %4 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %3, i32 0, i32 0
  %5 = bitcast %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %4 to %"class.std::allocator.4"*
  ret %"class.std::allocator.4"* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt13_Rb_tree_nodeIxE9_M_valptrEv(%"struct.std::_Rb_tree_node"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"struct.std::_Rb_tree_node"* %0, %"struct.std::_Rb_tree_node"** %2, align 8
  %3 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %3, i32 0, i32 1
  %5 = call i64* @_ZN9__gnu_cxx16__aligned_membufIxE6_M_ptrEv(%"struct.__gnu_cxx::__aligned_membuf"* %4) #3
  ret i64* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE7destroyIxEEvPT_(%"class.__gnu_cxx::new_allocator.5"*, i64*) #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.91
  %6 = load i32, i32* @y.92
  %7 = add i32 %5, -2027144356
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -2027144356
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1573962843, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %63
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1573962843, label %19
    i32 -32341183, label %27
    i32 -1407547758, label %58
    i32 -1121131103, label %59
  ]

; <label>:18:                                     ; preds = %16
  br label %63

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -32341183, i32 -1121131103
  store i32 %26, i32* %15
  br label %63

; <label>:27:                                     ; preds = %16
  %28 = alloca %"class.__gnu_cxx::new_allocator.5"*, align 8
  %29 = alloca i64*, align 8
  store %"class.__gnu_cxx::new_allocator.5"* %0, %"class.__gnu_cxx::new_allocator.5"** %28, align 8
  store i64* %1, i64** %29, align 8
  %30 = load %"class.__gnu_cxx::new_allocator.5"*, %"class.__gnu_cxx::new_allocator.5"** %28, align 8
  %31 = load i32, i32* @x.91
  %32 = load i32, i32* @y.92
  %33 = add i32 %31, -1869498226
  %34 = sub i32 %33, 1
  %35 = sub i32 %34, -1869498226
  %36 = sub i32 %31, 1
  %37 = mul i32 %31, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %32, 10
  %41 = xor i1 %39, true
  %42 = xor i1 %40, true
  %43 = xor i1 true, true
  %44 = and i1 %41, true
  %45 = and i1 %39, %43
  %46 = and i1 %42, true
  %47 = and i1 %40, %43
  %48 = or i1 %44, %45
  %49 = or i1 %46, %47
  %50 = xor i1 %48, %49
  %51 = or i1 %41, %42
  %52 = xor i1 %51, true
  %53 = or i1 true, %43
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = or i1 %39, %40
  %57 = select i1 %55, i32 -1407547758, i32 -1121131103
  store i32 %57, i32* %15
  br label %63

; <label>:58:                                     ; preds = %16
  ret void

; <label>:59:                                     ; preds = %16
  %60 = alloca %"class.__gnu_cxx::new_allocator.5"*, align 8
  %61 = alloca i64*, align 8
  store %"class.__gnu_cxx::new_allocator.5"* %0, %"class.__gnu_cxx::new_allocator.5"** %60, align 8
  store i64* %1, i64** %61, align 8
  %62 = load %"class.__gnu_cxx::new_allocator.5"*, %"class.__gnu_cxx::new_allocator.5"** %60, align 8
  store i32 -32341183, i32* %15
  br label %63

; <label>:63:                                     ; preds = %59, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZN9__gnu_cxx16__aligned_membufIxE6_M_ptrEv(%"struct.__gnu_cxx::__aligned_membuf"*) #4 comdat align 2 {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.93
  %6 = load i32, i32* @y.94
  %7 = sub i32 %5, -187501597
  %8 = sub i32 %7, 1
  %9 = add i32 %8, -187501597
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1390777778, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %66
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1390777778, label %19
    i32 2094406206, label %39
    i32 -1576228813, label %59
    i32 -110462767, label %61
  ]

; <label>:18:                                     ; preds = %16
  br label %66

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 2094406206, i32 -110462767
  store i32 %38, i32* %15
  br label %66

; <label>:39:                                     ; preds = %16
  %40 = alloca %"struct.__gnu_cxx::__aligned_membuf"*, align 8
  store %"struct.__gnu_cxx::__aligned_membuf"* %0, %"struct.__gnu_cxx::__aligned_membuf"** %40, align 8
  %41 = load %"struct.__gnu_cxx::__aligned_membuf"*, %"struct.__gnu_cxx::__aligned_membuf"** %40, align 8
  %42 = call i8* @_ZN9__gnu_cxx16__aligned_membufIxE7_M_addrEv(%"struct.__gnu_cxx::__aligned_membuf"* %41) #3
  %43 = bitcast i8* %42 to i64*
  store i64* %43, i64** %2
  %44 = load i32, i32* @x.93
  %45 = load i32, i32* @y.94
  %46 = sub i32 %44, 458402705
  %47 = sub i32 %46, 1
  %48 = add i32 %47, 458402705
  %49 = sub i32 %44, 1
  %50 = mul i32 %44, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %45, 10
  %54 = and i1 %52, %53
  %55 = xor i1 %52, %53
  %56 = or i1 %54, %55
  %57 = or i1 %52, %53
  %58 = select i1 %56, i32 -1576228813, i32 -110462767
  store i32 %58, i32* %15
  br label %66

; <label>:59:                                     ; preds = %16
  %60 = load volatile i64*, i64** %2
  ret i64* %60

; <label>:61:                                     ; preds = %16
  %62 = alloca %"struct.__gnu_cxx::__aligned_membuf"*, align 8
  store %"struct.__gnu_cxx::__aligned_membuf"* %0, %"struct.__gnu_cxx::__aligned_membuf"** %62, align 8
  %63 = load %"struct.__gnu_cxx::__aligned_membuf"*, %"struct.__gnu_cxx::__aligned_membuf"** %62, align 8
  %64 = call i8* @_ZN9__gnu_cxx16__aligned_membufIxE7_M_addrEv(%"struct.__gnu_cxx::__aligned_membuf"* %63) #3
  %65 = bitcast i8* %64 to i64*
  store i32 2094406206, i32* %15
  br label %66

; <label>:66:                                     ; preds = %61, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i8* @_ZN9__gnu_cxx16__aligned_membufIxE7_M_addrEv(%"struct.__gnu_cxx::__aligned_membuf"*) #4 comdat align 2 {
  %2 = alloca %"struct.__gnu_cxx::__aligned_membuf"*, align 8
  store %"struct.__gnu_cxx::__aligned_membuf"* %0, %"struct.__gnu_cxx::__aligned_membuf"** %2, align 8
  %3 = load %"struct.__gnu_cxx::__aligned_membuf"*, %"struct.__gnu_cxx::__aligned_membuf"** %2, align 8
  %4 = getelementptr inbounds %"struct.__gnu_cxx::__aligned_membuf", %"struct.__gnu_cxx::__aligned_membuf"* %3, i32 0, i32 0
  %5 = bitcast [8 x i8]* %4 to i8*
  ret i8* %5
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE10deallocateERS2_PS1_m(%"class.std::allocator.4"* dereferenceable(1), %"struct.std::_Rb_tree_node"*, i64) #0 comdat align 2 {
  %4 = alloca %"class.std::allocator.4"*, align 8
  %5 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %6 = alloca i64, align 8
  store %"class.std::allocator.4"* %0, %"class.std::allocator.4"** %4, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"class.std::allocator.4"*, %"class.std::allocator.4"** %4, align 8
  %8 = bitcast %"class.std::allocator.4"* %7 to %"class.__gnu_cxx::new_allocator.5"*
  %9 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  %10 = load i64, i64* %6, align 8
  call void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE10deallocateEPS2_m(%"class.__gnu_cxx::new_allocator.5"* %8, %"struct.std::_Rb_tree_node"* %9, i64 %10)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE10deallocateEPS2_m(%"class.__gnu_cxx::new_allocator.5"*, %"struct.std::_Rb_tree_node"*, i64) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::new_allocator.5"*, align 8
  %5 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %6 = alloca i64, align 8
  store %"class.__gnu_cxx::new_allocator.5"* %0, %"class.__gnu_cxx::new_allocator.5"** %4, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"class.__gnu_cxx::new_allocator.5"*, %"class.__gnu_cxx::new_allocator.5"** %4, align 8
  %8 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  %9 = bitcast %"struct.std::_Rb_tree_node"* %8 to i8*
  call void @_ZdlPv(i8* %9) #3
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #8

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaISt13_Rb_tree_nodeIxEED2Ev(%"class.std::allocator.4"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.std::allocator.4"*, align 8
  store %"class.std::allocator.4"* %0, %"class.std::allocator.4"** %2, align 8
  %3 = load %"class.std::allocator.4"*, %"class.std::allocator.4"** %2, align 8
  %4 = bitcast %"class.std::allocator.4"* %3 to %"class.__gnu_cxx::new_allocator.5"*
  call void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEED2Ev(%"class.__gnu_cxx::new_allocator.5"* %4) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEED2Ev(%"class.__gnu_cxx::new_allocator.5"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.5"*, align 8
  store %"class.__gnu_cxx::new_allocator.5"* %0, %"class.__gnu_cxx::new_allocator.5"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator.5"*, %"class.__gnu_cxx::new_allocator.5"** %2, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEEC2Ev(%"struct.std::_Vector_base"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %2, align 8
  %3 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %3, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %4)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.107
  %5 = load i32, i32* @y.108
  %6 = add i32 %4, -321487703
  %7 = sub i32 %6, 1
  %8 = sub i32 %7, -321487703
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 -2012771630, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %80
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -2012771630, label %18
    i32 248305069, label %38
    i32 1430604959, label %72
    i32 240971436, label %73
  ]

; <label>:17:                                     ; preds = %15
  br label %80

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 false, true
  %24 = and i1 %21, false
  %25 = and i1 %19, %23
  %26 = and i1 %22, false
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 false, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 248305069, i32 240971436
  store i32 %37, i32* %14
  br label %80

; <label>:38:                                     ; preds = %15
  %39 = alloca %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %0, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %39, align 8
  %40 = load %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %39, align 8
  %41 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %40 to %"class.std::allocator"*
  call void @_ZNSaIxEC2Ev(%"class.std::allocator"* %41) #3
  %42 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %40, i32 0, i32 0
  store i64* null, i64** %42, align 8
  %43 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %40, i32 0, i32 1
  store i64* null, i64** %43, align 8
  %44 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %40, i32 0, i32 2
  store i64* null, i64** %44, align 8
  %45 = load i32, i32* @x.107
  %46 = load i32, i32* @y.108
  %47 = sub i32 %45, 1851773436
  %48 = sub i32 %47, 1
  %49 = add i32 %48, 1851773436
  %50 = sub i32 %45, 1
  %51 = mul i32 %45, %49
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %46, 10
  %55 = xor i1 %53, true
  %56 = xor i1 %54, true
  %57 = xor i1 true, true
  %58 = and i1 %55, true
  %59 = and i1 %53, %57
  %60 = and i1 %56, true
  %61 = and i1 %54, %57
  %62 = or i1 %58, %59
  %63 = or i1 %60, %61
  %64 = xor i1 %62, %63
  %65 = or i1 %55, %56
  %66 = xor i1 %65, true
  %67 = or i1 true, %57
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  %70 = or i1 %53, %54
  %71 = select i1 %69, i32 1430604959, i32 240971436
  store i32 %71, i32* %14
  br label %80

; <label>:72:                                     ; preds = %15
  ret void

; <label>:73:                                     ; preds = %15
  %74 = alloca %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %0, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %74, align 8
  %75 = load %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %74, align 8
  %76 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %75 to %"class.std::allocator"*
  call void @_ZNSaIxEC2Ev(%"class.std::allocator"* %76) #3
  %77 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %75, i32 0, i32 0
  store i64* null, i64** %77, align 8
  %78 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %75, i32 0, i32 1
  store i64* null, i64** %78, align 8
  %79 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %75, i32 0, i32 2
  store i64* null, i64** %79, align 8
  store i32 248305069, i32* %14
  br label %80

; <label>:80:                                     ; preds = %73, %38, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaIxEC2Ev(%"class.std::allocator"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %2, align 8
  %3 = load %"class.std::allocator"*, %"class.std::allocator"** %2, align 8
  %4 = bitcast %"class.std::allocator"* %3 to %"class.__gnu_cxx::new_allocator"*
  call void @_ZN9__gnu_cxx13new_allocatorIxEC2Ev(%"class.__gnu_cxx::new_allocator"* %4) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxEC2Ev(%"class.__gnu_cxx::new_allocator"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %2, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64*, i64*, %"class.std::allocator"* dereferenceable(1)) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca %"class.std::allocator"*, align 8
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store %"class.std::allocator"* %2, %"class.std::allocator"** %6, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = load i64*, i64** %5, align 8
  call void @_ZSt8_DestroyIPxEvT_S1_(i64* %7, i64* %8)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %2, align 8
  %3 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %3, i32 0, i32 0
  %5 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %4 to %"class.std::allocator"*
  ret %"class.std::allocator"* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEED2Ev(%"struct.std::_Vector_base"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"struct.std::_Vector_base"*, align 8
  %3 = alloca i8*
  %4 = alloca i32
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %2, align 8
  %5 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %2, align 8
  %6 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %6, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %9, i32 0, i32 2
  %11 = load i64*, i64** %10, align 8
  %12 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %13 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %12, i32 0, i32 0
  %14 = load i64*, i64** %13, align 8
  %15 = ptrtoint i64* %11 to i64
  %16 = ptrtoint i64* %14 to i64
  %17 = add i64 %15, -4557084400966742755
  %18 = sub i64 %17, %16
  %19 = sub i64 %18, -4557084400966742755
  %20 = sub i64 %15, %16
  %21 = sdiv exact i64 %19, 8
  invoke void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %5, i64* %8, i64 %21)
          to label %22 unwind label %24

; <label>:22:                                     ; preds = %1
  %23 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %23) #3
  ret void

; <label>:24:                                     ; preds = %1
  %25 = landingpad { i8*, i32 }
          catch i8* null
  %26 = extractvalue { i8*, i32 } %25, 0
  store i8* %26, i8** %3, align 8
  %27 = extractvalue { i8*, i32 } %25, 1
  store i32 %27, i32* %4, align 4
  %28 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %28) #3
  br label %29

; <label>:29:                                     ; preds = %24
  %30 = load i32, i32* @x.117
  %31 = load i32, i32* @y.118
  %32 = sub i32 0, 1
  %33 = add i32 %30, %32
  %34 = sub i32 %30, 1
  %35 = mul i32 %30, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %31, 10
  %39 = and i1 %37, %38
  %40 = xor i1 %37, %38
  %41 = or i1 %39, %40
  %42 = or i1 %37, %38
  br i1 %41, label %43, label %72

; <label>:43:                                     ; preds = %29, %72
  %44 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %44) #13
  %45 = load i32, i32* @x.117
  %46 = load i32, i32* @y.118
  %47 = sub i32 %45, 279031815
  %48 = sub i32 %47, 1
  %49 = add i32 %48, 279031815
  %50 = sub i32 %45, 1
  %51 = mul i32 %45, %49
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %46, 10
  %55 = xor i1 %53, true
  %56 = xor i1 %54, true
  %57 = xor i1 true, true
  %58 = and i1 %55, true
  %59 = and i1 %53, %57
  %60 = and i1 %56, true
  %61 = and i1 %54, %57
  %62 = or i1 %58, %59
  %63 = or i1 %60, %61
  %64 = xor i1 %62, %63
  %65 = or i1 %55, %56
  %66 = xor i1 %65, true
  %67 = or i1 true, %57
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  %70 = or i1 %53, %54
  br i1 %69, label %71, label %72

; <label>:71:                                     ; preds = %43
  unreachable

; <label>:72:                                     ; preds = %43, %29
  %73 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %73) #13
  br label %43
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt8_DestroyIPxEvT_S1_(i64*, i64*) #0 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load i64*, i64** %3, align 8
  %6 = load i64*, i64** %4, align 8
  call void @_ZNSt12_Destroy_auxILb1EE9__destroyIPxEEvT_S3_(i64* %5, i64* %6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Destroy_auxILb1EE9__destroyIPxEEvT_S3_(i64*, i64*) #4 comdat align 2 {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"*, i64*, i64) #0 comdat align 2 {
  %4 = alloca i64*
  %5 = alloca %"struct.std::_Vector_base"*
  %6 = alloca %"struct.std::_Vector_base"*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %6, align 8
  store i64* %1, i64** %7, align 8
  store i64 %2, i64* %8, align 8
  %9 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %6, align 8
  store %"struct.std::_Vector_base"* %9, %"struct.std::_Vector_base"** %5
  %10 = load i64*, i64** %7, align 8
  store i64* %10, i64** %4
  %11 = alloca i32
  store i32 651896597, i32* %11
  br label %12

; <label>:12:                                     ; preds = %3, %26
  %13 = load i32, i32* %11
  switch i32 %13, label %14 [
    i32 651896597, label %15
    i32 -1285557910, label %19
    i32 -1756923727, label %25
  ]

; <label>:14:                                     ; preds = %12
  br label %26

; <label>:15:                                     ; preds = %12
  %16 = load volatile i64*, i64** %4
  %17 = icmp ne i64* %16, null
  %18 = select i1 %17, i32 -1285557910, i32 -1756923727
  store i32 %18, i32* %11
  br label %26

; <label>:19:                                     ; preds = %12
  %20 = load volatile %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %5
  %21 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %20, i32 0, i32 0
  %22 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %21 to %"class.std::allocator"*
  %23 = load i64*, i64** %7, align 8
  %24 = load i64, i64* %8, align 8
  call void @_ZNSt16allocator_traitsISaIxEE10deallocateERS0_Pxm(%"class.std::allocator"* dereferenceable(1) %22, i64* %23, i64 %24)
  store i32 -1756923727, i32* %11
  br label %26

; <label>:25:                                     ; preds = %12
  ret void

; <label>:26:                                     ; preds = %19, %15, %14
  br label %12
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %0, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %2, align 8
  %3 = load %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %2, align 8
  %4 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %3 to %"class.std::allocator"*
  call void @_ZNSaIxED2Ev(%"class.std::allocator"* %4) #3
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaIxEE10deallocateERS0_Pxm(%"class.std::allocator"* dereferenceable(1), i64*, i64) #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.127
  %7 = load i32, i32* @y.128
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 -381983153, i32* %15
  br label %16

; <label>:16:                                     ; preds = %3, %71
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -381983153, label %19
    i32 -1610195889, label %27
    i32 -1598229386, label %62
    i32 -509342915, label %63
  ]

; <label>:18:                                     ; preds = %16
  br label %71

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -1610195889, i32 -509342915
  store i32 %26, i32* %15
  br label %71

; <label>:27:                                     ; preds = %16
  %28 = alloca %"class.std::allocator"*, align 8
  %29 = alloca i64*, align 8
  %30 = alloca i64, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %28, align 8
  store i64* %1, i64** %29, align 8
  store i64 %2, i64* %30, align 8
  %31 = load %"class.std::allocator"*, %"class.std::allocator"** %28, align 8
  %32 = bitcast %"class.std::allocator"* %31 to %"class.__gnu_cxx::new_allocator"*
  %33 = load i64*, i64** %29, align 8
  %34 = load i64, i64* %30, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIxE10deallocateEPxm(%"class.__gnu_cxx::new_allocator"* %32, i64* %33, i64 %34)
  %35 = load i32, i32* @x.127
  %36 = load i32, i32* @y.128
  %37 = sub i32 %35, 1644691546
  %38 = sub i32 %37, 1
  %39 = add i32 %38, 1644691546
  %40 = sub i32 %35, 1
  %41 = mul i32 %35, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %36, 10
  %45 = xor i1 %43, true
  %46 = xor i1 %44, true
  %47 = xor i1 false, true
  %48 = and i1 %45, false
  %49 = and i1 %43, %47
  %50 = and i1 %46, false
  %51 = and i1 %44, %47
  %52 = or i1 %48, %49
  %53 = or i1 %50, %51
  %54 = xor i1 %52, %53
  %55 = or i1 %45, %46
  %56 = xor i1 %55, true
  %57 = or i1 false, %47
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  %60 = or i1 %43, %44
  %61 = select i1 %59, i32 -1598229386, i32 -509342915
  store i32 %61, i32* %15
  br label %71

; <label>:62:                                     ; preds = %16
  ret void

; <label>:63:                                     ; preds = %16
  %64 = alloca %"class.std::allocator"*, align 8
  %65 = alloca i64*, align 8
  %66 = alloca i64, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %64, align 8
  store i64* %1, i64** %65, align 8
  store i64 %2, i64* %66, align 8
  %67 = load %"class.std::allocator"*, %"class.std::allocator"** %64, align 8
  %68 = bitcast %"class.std::allocator"* %67 to %"class.__gnu_cxx::new_allocator"*
  %69 = load i64*, i64** %65, align 8
  %70 = load i64, i64* %66, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIxE10deallocateEPxm(%"class.__gnu_cxx::new_allocator"* %68, i64* %69, i64 %70)
  store i32 -1610195889, i32* %15
  br label %71

; <label>:71:                                     ; preds = %63, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxE10deallocateEPxm(%"class.__gnu_cxx::new_allocator"*, i64*, i64) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %4, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = bitcast i64* %8 to i8*
  call void @_ZdlPv(i8* %9) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaIxED2Ev(%"class.std::allocator"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %2, align 8
  %3 = load %"class.std::allocator"*, %"class.std::allocator"** %2, align 8
  %4 = bitcast %"class.std::allocator"* %3 to %"class.__gnu_cxx::new_allocator"*
  call void @_ZN9__gnu_cxx13new_allocatorIxED2Ev(%"class.__gnu_cxx::new_allocator"* %4) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxED2Ev(%"class.__gnu_cxx::new_allocator"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %2, align 8
  %3 = load %"class.std::vector"*, %"class.std::vector"** %2, align 8
  %4 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %5 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %5, i32 0, i32 1
  %7 = load i64*, i64** %6, align 8
  %8 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %9 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %8, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %9, i32 0, i32 0
  %11 = load i64*, i64** %10, align 8
  %12 = ptrtoint i64* %7 to i64
  %13 = ptrtoint i64* %11 to i64
  %14 = sub i64 %12, 5738662067555463592
  %15 = sub i64 %14, %13
  %16 = add i64 %15, 5738662067555463592
  %17 = sub i64 %12, %13
  %18 = sdiv exact i64 %16, 8
  ret i64 %18
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt6vectorIxSaIxEE6insertEN9__gnu_cxx17__normal_iteratorIPKxS1_EEmRS4_(%"class.std::vector"*, i64*, i64, i64* dereferenceable(8)) #0 comdat align 2 {
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.7", align 8
  %7 = alloca %"class.std::vector"*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i64, align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.7", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %6, i32 0, i32 0
  store i64* %1, i64** %15, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64* %3, i64** %9, align 8
  %16 = load %"class.std::vector"*, %"class.std::vector"** %7, align 8
  %17 = call i64* @_ZNKSt6vectorIxSaIxEE6cbeginEv(%"class.std::vector"* %16) #3
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %11, i32 0, i32 0
  store i64* %17, i64** %18, align 8
  %19 = call i64 @_ZN9__gnu_cxxmiIPKxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator.7"* dereferenceable(8) %6, %"class.__gnu_cxx::__normal_iterator.7"* dereferenceable(8) %11) #3
  store i64 %19, i64* %10, align 8
  %20 = call i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"* %16) #3
  %21 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %13, i32 0, i32 0
  store i64* %20, i64** %21, align 8
  %22 = load i64, i64* %10, align 8
  %23 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator"* %13, i64 %22) #3
  %24 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  store i64* %23, i64** %24, align 8
  %25 = load i64, i64* %8, align 8
  %26 = load i64*, i64** %9, align 8
  %27 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  %28 = load i64*, i64** %27, align 8
  call void @_ZNSt6vectorIxSaIxEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPxS1_EEmRKx(%"class.std::vector"* %16, i64* %28, i64 %25, i64* dereferenceable(8) %26)
  %29 = call i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"* %16) #3
  %30 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  store i64* %29, i64** %30, align 8
  %31 = load i64, i64* %10, align 8
  %32 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator"* %14, i64 %31) #3
  %33 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store i64* %32, i64** %33, align 8
  %34 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  ret i64* %35
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt6vectorIxSaIxEE3endEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %3 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  %4 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %5 = bitcast %"class.std::vector"* %4 to %"struct.std::_Vector_base"*
  %6 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %6, i32 0, i32 1
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator"* %2, i64** dereferenceable(8) %7) #3
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %2, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  ret i64* %9
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEEC2IPxEERKNS0_IT_NS_11__enable_ifIXsr3std10__are_sameIS9_S8_EE7__valueES5_E6__typeEEE(%"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8)) unnamed_addr #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.141
  %6 = load i32, i32* @y.142
  %7 = add i32 %5, -903341635
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -903341635
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1867398366, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %59
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1867398366, label %19
    i32 -553843972, label %27
    i32 903738818, label %50
    i32 -524340031, label %51
  ]

; <label>:18:                                     ; preds = %16
  br label %59

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -553843972, i32 -524340031
  store i32 %26, i32* %15
  br label %59

; <label>:27:                                     ; preds = %16
  %28 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  %29 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %0, %"class.__gnu_cxx::__normal_iterator.7"** %28, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %29, align 8
  %30 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %28, align 8
  %31 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %30, i32 0, i32 0
  %32 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %29, align 8
  %33 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %32) #3
  %34 = load i64*, i64** %33, align 8
  store i64* %34, i64** %31, align 8
  %35 = load i32, i32* @x.141
  %36 = load i32, i32* @y.142
  %37 = sub i32 %35, 291355445
  %38 = sub i32 %37, 1
  %39 = add i32 %38, 291355445
  %40 = sub i32 %35, 1
  %41 = mul i32 %35, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %36, 10
  %45 = and i1 %43, %44
  %46 = xor i1 %43, %44
  %47 = or i1 %45, %46
  %48 = or i1 %43, %44
  %49 = select i1 %47, i32 903738818, i32 -524340031
  store i32 %49, i32* %15
  br label %59

; <label>:50:                                     ; preds = %16
  ret void

; <label>:51:                                     ; preds = %16
  %52 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  %53 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %0, %"class.__gnu_cxx::__normal_iterator.7"** %52, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %53, align 8
  %54 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %52, align 8
  %55 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %54, i32 0, i32 0
  %56 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %53, align 8
  %57 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %56) #3
  %58 = load i64*, i64** %57, align 8
  store i64* %58, i64** %55, align 8
  store i32 -553843972, i32* %15
  br label %59

; <label>:59:                                     ; preds = %51, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE15_M_erase_at_endEPx(%"class.std::vector"*, i64*) #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::vector"*, align 8
  %4 = alloca i64*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %6 = load i64*, i64** %4, align 8
  %7 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %8 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %7, i32 0, i32 0
  %9 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %8, i32 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %12 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %11) #3
  invoke void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %6, i64* %10, %"class.std::allocator"* dereferenceable(1) %12)
          to label %13 unwind label %59

; <label>:13:                                     ; preds = %2
  %14 = load i32, i32* @x.143
  %15 = load i32, i32* @y.144
  %16 = sub i32 0, 1
  %17 = add i32 %14, %16
  %18 = sub i32 %14, 1
  %19 = mul i32 %14, %17
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %15, 10
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 true, true
  %26 = and i1 %23, true
  %27 = and i1 %21, %25
  %28 = and i1 %24, true
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 true, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  br i1 %37, label %39, label %91

; <label>:39:                                     ; preds = %13, %91
  %40 = load i64*, i64** %4, align 8
  %41 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %42 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %41, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %42, i32 0, i32 1
  store i64* %40, i64** %43, align 8
  %44 = load i32, i32* @x.143
  %45 = load i32, i32* @y.144
  %46 = add i32 %44, -911362164
  %47 = sub i32 %46, 1
  %48 = sub i32 %47, -911362164
  %49 = sub i32 %44, 1
  %50 = mul i32 %44, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %45, 10
  %54 = and i1 %52, %53
  %55 = xor i1 %52, %53
  %56 = or i1 %54, %55
  %57 = or i1 %52, %53
  br i1 %56, label %58, label %91

; <label>:58:                                     ; preds = %39
  ret void

; <label>:59:                                     ; preds = %2
  %60 = load i32, i32* @x.143
  %61 = load i32, i32* @y.144
  %62 = sub i32 0, 1
  %63 = add i32 %60, %62
  %64 = sub i32 %60, 1
  %65 = mul i32 %60, %63
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %61, 10
  %69 = and i1 %67, %68
  %70 = xor i1 %67, %68
  %71 = or i1 %69, %70
  %72 = or i1 %67, %68
  br i1 %71, label %73, label %96

; <label>:73:                                     ; preds = %59, %96
  %74 = landingpad { i8*, i32 }
          catch i8* null
  %75 = extractvalue { i8*, i32 } %74, 0
  call void @__clang_call_terminate(i8* %75) #13
  %76 = load i32, i32* @x.143
  %77 = load i32, i32* @y.144
  %78 = sub i32 %76, 187763041
  %79 = sub i32 %78, 1
  %80 = add i32 %79, 187763041
  %81 = sub i32 %76, 1
  %82 = mul i32 %76, %80
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %77, 10
  %86 = and i1 %84, %85
  %87 = xor i1 %84, %85
  %88 = or i1 %86, %87
  %89 = or i1 %84, %85
  br i1 %88, label %90, label %96

; <label>:90:                                     ; preds = %73
  unreachable

; <label>:91:                                     ; preds = %39, %13
  %92 = load i64*, i64** %4, align 8
  %93 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %94 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %93, i32 0, i32 0
  %95 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %94, i32 0, i32 1
  store i64* %92, i64** %95, align 8
  br label %39

; <label>:96:                                     ; preds = %73, %59
  %97 = landingpad { i8*, i32 }
          catch i8* null
  %98 = extractvalue { i8*, i32 } %97, 0
  call void @__clang_call_terminate(i8* %98) #13
  br label %73
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN9__gnu_cxxmiIPKxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator.7"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator.7"* dereferenceable(8)) #4 comdat {
  %3 = alloca i64
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.145
  %7 = load i32, i32* @y.146
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 1725990640, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %127
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1725990640, label %19
    i32 1682016709, label %39
    i32 -1513120589, label %70
    i32 683253349, label %72
  ]

; <label>:18:                                     ; preds = %16
  br label %127

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 1682016709, i32 683253349
  store i32 %38, i32* %15
  br label %127

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  %41 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %0, %"class.__gnu_cxx::__normal_iterator.7"** %40, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %1, %"class.__gnu_cxx::__normal_iterator.7"** %41, align 8
  %42 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %40, align 8
  %43 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.7"* %42) #3
  %44 = load i64*, i64** %43, align 8
  %45 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %41, align 8
  %46 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.7"* %45) #3
  %47 = load i64*, i64** %46, align 8
  %48 = ptrtoint i64* %44 to i64
  %49 = ptrtoint i64* %47 to i64
  %50 = sub i64 %48, -302431608818666536
  %51 = sub i64 %50, %49
  %52 = add i64 %51, -302431608818666536
  %53 = sub i64 %48, %49
  %54 = sdiv exact i64 %52, 8
  store i64 %54, i64* %3
  %55 = load i32, i32* @x.145
  %56 = load i32, i32* @y.146
  %57 = sub i32 %55, -459464255
  %58 = sub i32 %57, 1
  %59 = add i32 %58, -459464255
  %60 = sub i32 %55, 1
  %61 = mul i32 %55, %59
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %56, 10
  %65 = and i1 %63, %64
  %66 = xor i1 %63, %64
  %67 = or i1 %65, %66
  %68 = or i1 %63, %64
  %69 = select i1 %67, i32 -1513120589, i32 683253349
  store i32 %69, i32* %15
  br label %127

; <label>:70:                                     ; preds = %16
  %71 = load volatile i64, i64* %3
  ret i64 %71

; <label>:72:                                     ; preds = %16
  %73 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  %74 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %0, %"class.__gnu_cxx::__normal_iterator.7"** %73, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %1, %"class.__gnu_cxx::__normal_iterator.7"** %74, align 8
  %75 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %73, align 8
  %76 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.7"* %75) #3
  %77 = load i64*, i64** %76, align 8
  %78 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %74, align 8
  %79 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.7"* %78) #3
  %80 = load i64*, i64** %79, align 8
  %81 = ptrtoint i64* %77 to i64
  %82 = ptrtoint i64* %80 to i64
  %83 = shl i64 %81, %82
  %84 = sub i64 0, %81
  %85 = add i64 0, %84
  %86 = sub i64 0, %81
  %87 = add i64 %85, 6620899346433983637
  %88 = add i64 %87, %82
  %89 = sub i64 %88, 6620899346433983637
  %90 = add i64 %85, %82
  %91 = shl i64 %81, %82
  %92 = sub i64 0, -4575708376935688743
  %93 = sub i64 %92, %81
  %94 = add i64 %93, -4575708376935688743
  %95 = sub i64 0, %81
  %96 = sub i64 0, %94
  %97 = sub i64 0, %82
  %98 = add i64 %96, %97
  %99 = sub i64 0, %98
  %100 = add i64 %94, %82
  %101 = sub i64 0, %82
  %102 = add i64 %81, %101
  %103 = sub i64 %81, %82
  %104 = mul i64 %102, %82
  %105 = sub i64 0, %81
  %106 = add i64 0, %105
  %107 = sub i64 0, %81
  %108 = sub i64 %106, -6327580648320116018
  %109 = add i64 %108, %82
  %110 = add i64 %109, -6327580648320116018
  %111 = add i64 %106, %82
  %112 = add i64 %81, 6356128275719294274
  %113 = sub i64 %112, %82
  %114 = sub i64 %113, 6356128275719294274
  %115 = sub i64 %81, %82
  %116 = sub i64 0, 8
  %117 = add i64 %114, %116
  %118 = sub i64 %114, 8
  %119 = mul i64 %117, 8
  %120 = shl i64 %114, 8
  %121 = add i64 %114, 59874081537059176
  %122 = sub i64 %121, 8
  %123 = sub i64 %122, 59874081537059176
  %124 = sub i64 %114, 8
  %125 = mul i64 %123, 8
  %126 = sdiv exact i64 %114, 8
  store i32 1682016709, i32* %15
  br label %127

; <label>:127:                                    ; preds = %72, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNKSt6vectorIxSaIxEE6cbeginEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.7", align 8
  %3 = alloca %"class.std::vector"*, align 8
  %4 = alloca i64*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  %5 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %6 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %7 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %6, i32 0, i32 0
  %8 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %7, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  store i64* %9, i64** %4, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEEC2ERKS2_(%"class.__gnu_cxx::__normal_iterator.7"* %2, i64** dereferenceable(8) %4) #3
  %10 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %2, i32 0, i32 0
  %11 = load i64*, i64** %10, align 8
  ret i64* %11
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPxS1_EEmRKx(%"class.std::vector"*, i64*, i64, i64* dereferenceable(8)) #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = load i32, i32* @x.149
  %6 = load i32, i32* @y.150
  %7 = sub i32 %5, 534210677
  %8 = sub i32 %7, 1
  %9 = add i32 %8, 534210677
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %6, 10
  %15 = and i1 %13, %14
  %16 = xor i1 %13, %14
  %17 = or i1 %15, %16
  %18 = or i1 %13, %14
  br i1 %17, label %19, label %727

; <label>:19:                                     ; preds = %4, %727
  %20 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %21 = alloca %"class.std::vector"*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64*, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %27 = alloca i64*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i8*
  %34 = alloca i32
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %20, i32 0, i32 0
  store i64* %1, i64** %35, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %21, align 8
  store i64 %2, i64* %22, align 8
  store i64* %3, i64** %23, align 8
  %36 = load %"class.std::vector"*, %"class.std::vector"** %21, align 8
  %37 = load i64, i64* %22, align 8
  %38 = icmp ne i64 %37, 0
  %39 = load i32, i32* @x.149
  %40 = load i32, i32* @y.150
  %41 = sub i32 0, 1
  %42 = add i32 %39, %41
  %43 = sub i32 %39, 1
  %44 = mul i32 %39, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %40, 10
  %48 = and i1 %46, %47
  %49 = xor i1 %46, %47
  %50 = or i1 %48, %49
  %51 = or i1 %46, %47
  br i1 %50, label %52, label %727

; <label>:52:                                     ; preds = %19
  br i1 %38, label %53, label %622

; <label>:53:                                     ; preds = %52
  %54 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %55 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %54, i32 0, i32 0
  %56 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %55, i32 0, i32 2
  %57 = load i64*, i64** %56, align 8
  %58 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %59 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %58, i32 0, i32 0
  %60 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %59, i32 0, i32 1
  %61 = load i64*, i64** %60, align 8
  %62 = ptrtoint i64* %57 to i64
  %63 = ptrtoint i64* %61 to i64
  %64 = sub i64 %62, 4102562518008942622
  %65 = sub i64 %64, %63
  %66 = add i64 %65, 4102562518008942622
  %67 = sub i64 %62, %63
  %68 = sdiv exact i64 %66, 8
  %69 = load i64, i64* %22, align 8
  %70 = icmp uge i64 %68, %69
  br i1 %70, label %71, label %289

; <label>:71:                                     ; preds = %53
  %72 = load i32, i32* @x.149
  %73 = load i32, i32* @y.150
  %74 = add i32 %72, 1008280370
  %75 = sub i32 %74, 1
  %76 = sub i32 %75, 1008280370
  %77 = sub i32 %72, 1
  %78 = mul i32 %72, %76
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %73, 10
  %82 = and i1 %80, %81
  %83 = xor i1 %80, %81
  %84 = or i1 %82, %83
  %85 = or i1 %80, %81
  br i1 %84, label %86, label %747

; <label>:86:                                     ; preds = %71, %747
  %87 = load i64*, i64** %23, align 8
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %24, align 8
  %89 = call i64* @_ZNSt6vectorIxSaIxEE3endEv(%"class.std::vector"* %36) #3
  %90 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %26, i32 0, i32 0
  store i64* %89, i64** %90, align 8
  %91 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %26, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %20) #3
  store i64 %91, i64* %25, align 8
  %92 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %93 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %92, i32 0, i32 0
  %94 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %93, i32 0, i32 1
  %95 = load i64*, i64** %94, align 8
  store i64* %95, i64** %27, align 8
  %96 = load i64, i64* %25, align 8
  %97 = load i64, i64* %22, align 8
  %98 = icmp ugt i64 %96, %97
  %99 = load i32, i32* @x.149
  %100 = load i32, i32* @y.150
  %101 = sub i32 %99, -2118873152
  %102 = sub i32 %101, 1
  %103 = add i32 %102, -2118873152
  %104 = sub i32 %99, 1
  %105 = mul i32 %99, %103
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %100, 10
  %109 = xor i1 %107, true
  %110 = xor i1 %108, true
  %111 = xor i1 true, true
  %112 = and i1 %109, true
  %113 = and i1 %107, %111
  %114 = and i1 %110, true
  %115 = and i1 %108, %111
  %116 = or i1 %112, %113
  %117 = or i1 %114, %115
  %118 = xor i1 %116, %117
  %119 = or i1 %109, %110
  %120 = xor i1 %119, true
  %121 = or i1 true, %111
  %122 = and i1 %120, %121
  %123 = or i1 %118, %122
  %124 = or i1 %107, %108
  br i1 %123, label %125, label %747

; <label>:125:                                    ; preds = %86
  br i1 %98, label %126, label %211

; <label>:126:                                    ; preds = %125
  %127 = load i32, i32* @x.149
  %128 = load i32, i32* @y.150
  %129 = sub i32 0, 1
  %130 = add i32 %127, %129
  %131 = sub i32 %127, 1
  %132 = mul i32 %127, %130
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %128, 10
  %136 = xor i1 %134, true
  %137 = xor i1 %135, true
  %138 = xor i1 false, true
  %139 = and i1 %136, false
  %140 = and i1 %134, %138
  %141 = and i1 %137, false
  %142 = and i1 %135, %138
  %143 = or i1 %139, %140
  %144 = or i1 %141, %142
  %145 = xor i1 %143, %144
  %146 = or i1 %136, %137
  %147 = xor i1 %146, true
  %148 = or i1 false, %138
  %149 = and i1 %147, %148
  %150 = or i1 %145, %149
  %151 = or i1 %134, %135
  br i1 %150, label %152, label %760

; <label>:152:                                    ; preds = %126, %760
  %153 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %154 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %153, i32 0, i32 0
  %155 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %154, i32 0, i32 1
  %156 = load i64*, i64** %155, align 8
  %157 = load i64, i64* %22, align 8
  %158 = add i64 0, 1723063133000129090
  %159 = sub i64 %158, %157
  %160 = sub i64 %159, 1723063133000129090
  %161 = sub i64 0, %157
  %162 = getelementptr inbounds i64, i64* %156, i64 %160
  %163 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %164 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %163, i32 0, i32 0
  %165 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %164, i32 0, i32 1
  %166 = load i64*, i64** %165, align 8
  %167 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %168 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %167, i32 0, i32 0
  %169 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %168, i32 0, i32 1
  %170 = load i64*, i64** %169, align 8
  %171 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %172 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %171) #3
  %173 = call i64* @_ZSt22__uninitialized_move_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64* %162, i64* %166, i64* %170, %"class.std::allocator"* dereferenceable(1) %172)
  %174 = load i64, i64* %22, align 8
  %175 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %176 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %175, i32 0, i32 0
  %177 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %176, i32 0, i32 1
  %178 = load i64*, i64** %177, align 8
  %179 = getelementptr inbounds i64, i64* %178, i64 %174
  store i64* %179, i64** %177, align 8
  %180 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %181 = load i64*, i64** %180, align 8
  %182 = load i64*, i64** %27, align 8
  %183 = load i64, i64* %22, align 8
  %184 = sub i64 0, 4607778500474386987
  %185 = sub i64 %184, %183
  %186 = add i64 %185, 4607778500474386987
  %187 = sub i64 0, %183
  %188 = getelementptr inbounds i64, i64* %182, i64 %186
  %189 = load i64*, i64** %27, align 8
  %190 = call i64* @_ZSt13move_backwardIPxS0_ET0_T_S2_S1_(i64* %181, i64* %188, i64* %189)
  %191 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %192 = load i64*, i64** %191, align 8
  %193 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %194 = load i64*, i64** %193, align 8
  %195 = load i64, i64* %22, align 8
  %196 = getelementptr inbounds i64, i64* %194, i64 %195
  call void @_ZSt4fillIPxxEvT_S1_RKT0_(i64* %192, i64* %196, i64* dereferenceable(8) %24)
  %197 = load i32, i32* @x.149
  %198 = load i32, i32* @y.150
  %199 = sub i32 0, 1
  %200 = add i32 %197, %199
  %201 = sub i32 %197, 1
  %202 = mul i32 %197, %200
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %198, 10
  %206 = and i1 %204, %205
  %207 = xor i1 %204, %205
  %208 = or i1 %206, %207
  %209 = or i1 %204, %205
  br i1 %208, label %210, label %760

; <label>:210:                                    ; preds = %152
  br label %247

; <label>:211:                                    ; preds = %125
  %212 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %213 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %212, i32 0, i32 0
  %214 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %213, i32 0, i32 1
  %215 = load i64*, i64** %214, align 8
  %216 = load i64, i64* %22, align 8
  %217 = load i64, i64* %25, align 8
  %218 = sub i64 %216, -8854167108192708522
  %219 = sub i64 %218, %217
  %220 = add i64 %219, -8854167108192708522
  %221 = sub i64 %216, %217
  %222 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %223 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %222) #3
  %224 = call i64* @_ZSt24__uninitialized_fill_n_aIPxmxxET_S1_T0_RKT1_RSaIT2_E(i64* %215, i64 %220, i64* dereferenceable(8) %24, %"class.std::allocator"* dereferenceable(1) %223)
  %225 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %226 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %225, i32 0, i32 0
  %227 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %226, i32 0, i32 1
  store i64* %224, i64** %227, align 8
  %228 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %229 = load i64*, i64** %228, align 8
  %230 = load i64*, i64** %27, align 8
  %231 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %232 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %231, i32 0, i32 0
  %233 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %232, i32 0, i32 1
  %234 = load i64*, i64** %233, align 8
  %235 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %236 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %235) #3
  %237 = call i64* @_ZSt22__uninitialized_move_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64* %229, i64* %230, i64* %234, %"class.std::allocator"* dereferenceable(1) %236)
  %238 = load i64, i64* %25, align 8
  %239 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %240 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %239, i32 0, i32 0
  %241 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %240, i32 0, i32 1
  %242 = load i64*, i64** %241, align 8
  %243 = getelementptr inbounds i64, i64* %242, i64 %238
  store i64* %243, i64** %241, align 8
  %244 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %245 = load i64*, i64** %244, align 8
  %246 = load i64*, i64** %27, align 8
  call void @_ZSt4fillIPxxEvT_S1_RKT0_(i64* %245, i64* %246, i64* dereferenceable(8) %24)
  br label %247

; <label>:247:                                    ; preds = %211, %210
  %248 = load i32, i32* @x.149
  %249 = load i32, i32* @y.150
  %250 = sub i32 0, 1
  %251 = add i32 %248, %250
  %252 = sub i32 %248, 1
  %253 = mul i32 %248, %251
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %249, 10
  %257 = and i1 %255, %256
  %258 = xor i1 %255, %256
  %259 = or i1 %257, %258
  %260 = or i1 %255, %256
  br i1 %259, label %261, label %823

; <label>:261:                                    ; preds = %247, %823
  %262 = load i32, i32* @x.149
  %263 = load i32, i32* @y.150
  %264 = sub i32 %262, 326242388
  %265 = sub i32 %264, 1
  %266 = add i32 %265, 326242388
  %267 = sub i32 %262, 1
  %268 = mul i32 %262, %266
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %263, 10
  %272 = xor i1 %270, true
  %273 = xor i1 %271, true
  %274 = xor i1 true, true
  %275 = and i1 %272, true
  %276 = and i1 %270, %274
  %277 = and i1 %273, true
  %278 = and i1 %271, %274
  %279 = or i1 %275, %276
  %280 = or i1 %277, %278
  %281 = xor i1 %279, %280
  %282 = or i1 %272, %273
  %283 = xor i1 %282, true
  %284 = or i1 true, %274
  %285 = and i1 %283, %284
  %286 = or i1 %281, %285
  %287 = or i1 %270, %271
  br i1 %286, label %288, label %823

; <label>:288:                                    ; preds = %261
  br label %621

; <label>:289:                                    ; preds = %53
  %290 = load i32, i32* @x.149
  %291 = load i32, i32* @y.150
  %292 = add i32 %290, -1422708426
  %293 = sub i32 %292, 1
  %294 = sub i32 %293, -1422708426
  %295 = sub i32 %290, 1
  %296 = mul i32 %290, %294
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %291, 10
  %300 = and i1 %298, %299
  %301 = xor i1 %298, %299
  %302 = or i1 %300, %301
  %303 = or i1 %298, %299
  br i1 %302, label %304, label %824

; <label>:304:                                    ; preds = %289, %824
  %305 = load i64, i64* %22, align 8
  %306 = call i64 @_ZNKSt6vectorIxSaIxEE12_M_check_lenEmPKc(%"class.std::vector"* %36, i64 %305, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0))
  store i64 %306, i64* %28, align 8
  %307 = call i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"* %36) #3
  %308 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %30, i32 0, i32 0
  store i64* %307, i64** %308, align 8
  %309 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %20, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %30) #3
  store i64 %309, i64* %29, align 8
  %310 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %311 = load i64, i64* %28, align 8
  %312 = call i64* @_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm(%"struct.std::_Vector_base"* %310, i64 %311)
  store i64* %312, i64** %31, align 8
  %313 = load i64*, i64** %31, align 8
  store i64* %313, i64** %32, align 8
  %314 = load i64*, i64** %31, align 8
  %315 = load i64, i64* %29, align 8
  %316 = getelementptr inbounds i64, i64* %314, i64 %315
  %317 = load i64, i64* %22, align 8
  %318 = load i64*, i64** %23, align 8
  %319 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %320 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %319) #3
  %321 = load i32, i32* @x.149
  %322 = load i32, i32* @y.150
  %323 = sub i32 0, 1
  %324 = add i32 %321, %323
  %325 = sub i32 %321, 1
  %326 = mul i32 %321, %324
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %322, 10
  %330 = xor i1 %328, true
  %331 = xor i1 %329, true
  %332 = xor i1 false, true
  %333 = and i1 %330, false
  %334 = and i1 %328, %332
  %335 = and i1 %331, false
  %336 = and i1 %329, %332
  %337 = or i1 %333, %334
  %338 = or i1 %335, %336
  %339 = xor i1 %337, %338
  %340 = or i1 %330, %331
  %341 = xor i1 %340, true
  %342 = or i1 false, %332
  %343 = and i1 %341, %342
  %344 = or i1 %339, %343
  %345 = or i1 %328, %329
  br i1 %344, label %346, label %824

; <label>:346:                                    ; preds = %304
  %347 = invoke i64* @_ZSt24__uninitialized_fill_n_aIPxmxxET_S1_T0_RKT1_RSaIT2_E(i64* %316, i64 %317, i64* dereferenceable(8) %318, %"class.std::allocator"* dereferenceable(1) %320)
          to label %348 unwind label %456

; <label>:348:                                    ; preds = %346
  %349 = load i32, i32* @x.149
  %350 = load i32, i32* @y.150
  %351 = add i32 %349, 2136995819
  %352 = sub i32 %351, 1
  %353 = sub i32 %352, 2136995819
  %354 = sub i32 %349, 1
  %355 = mul i32 %349, %353
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %350, 10
  %359 = xor i1 %357, true
  %360 = xor i1 %358, true
  %361 = xor i1 true, true
  %362 = and i1 %359, true
  %363 = and i1 %357, %361
  %364 = and i1 %360, true
  %365 = and i1 %358, %361
  %366 = or i1 %362, %363
  %367 = or i1 %364, %365
  %368 = xor i1 %366, %367
  %369 = or i1 %359, %360
  %370 = xor i1 %369, true
  %371 = or i1 true, %361
  %372 = and i1 %370, %371
  %373 = or i1 %368, %372
  %374 = or i1 %357, %358
  br i1 %373, label %375, label %841

; <label>:375:                                    ; preds = %348, %841
  store i64* null, i64** %32, align 8
  %376 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %377 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %376, i32 0, i32 0
  %378 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %377, i32 0, i32 0
  %379 = load i64*, i64** %378, align 8
  %380 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %381 = load i64*, i64** %380, align 8
  %382 = load i64*, i64** %31, align 8
  %383 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %384 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %383) #3
  %385 = load i32, i32* @x.149
  %386 = load i32, i32* @y.150
  %387 = sub i32 0, 1
  %388 = add i32 %385, %387
  %389 = sub i32 %385, 1
  %390 = mul i32 %385, %388
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %386, 10
  %394 = and i1 %392, %393
  %395 = xor i1 %392, %393
  %396 = or i1 %394, %395
  %397 = or i1 %392, %393
  br i1 %396, label %398, label %841

; <label>:398:                                    ; preds = %375
  %399 = invoke i64* @_ZSt34__uninitialized_move_if_noexcept_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64* %379, i64* %381, i64* %382, %"class.std::allocator"* dereferenceable(1) %384)
          to label %400 unwind label %456

; <label>:400:                                    ; preds = %398
  store i64* %399, i64** %32, align 8
  %401 = load i64, i64* %22, align 8
  %402 = load i64*, i64** %32, align 8
  %403 = getelementptr inbounds i64, i64* %402, i64 %401
  store i64* %403, i64** %32, align 8
  %404 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %405 = load i64*, i64** %404, align 8
  %406 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %407 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %406, i32 0, i32 0
  %408 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %407, i32 0, i32 1
  %409 = load i64*, i64** %408, align 8
  %410 = load i64*, i64** %32, align 8
  %411 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %412 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %411) #3
  %413 = invoke i64* @_ZSt34__uninitialized_move_if_noexcept_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64* %405, i64* %409, i64* %410, %"class.std::allocator"* dereferenceable(1) %412)
          to label %414 unwind label %456

; <label>:414:                                    ; preds = %400
  %415 = load i32, i32* @x.149
  %416 = load i32, i32* @y.150
  %417 = sub i32 0, 1
  %418 = add i32 %415, %417
  %419 = sub i32 %415, 1
  %420 = mul i32 %415, %418
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %416, 10
  %424 = xor i1 %422, true
  %425 = xor i1 %423, true
  %426 = xor i1 true, true
  %427 = and i1 %424, true
  %428 = and i1 %422, %426
  %429 = and i1 %425, true
  %430 = and i1 %423, %426
  %431 = or i1 %427, %428
  %432 = or i1 %429, %430
  %433 = xor i1 %431, %432
  %434 = or i1 %424, %425
  %435 = xor i1 %434, true
  %436 = or i1 true, %426
  %437 = and i1 %435, %436
  %438 = or i1 %433, %437
  %439 = or i1 %422, %423
  br i1 %438, label %440, label %851

; <label>:440:                                    ; preds = %414, %851
  store i64* %413, i64** %32, align 8
  %441 = load i32, i32* @x.149
  %442 = load i32, i32* @y.150
  %443 = add i32 %441, 1160101217
  %444 = sub i32 %443, 1
  %445 = sub i32 %444, 1160101217
  %446 = sub i32 %441, 1
  %447 = mul i32 %441, %445
  %448 = urem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %442, 10
  %451 = and i1 %449, %450
  %452 = xor i1 %449, %450
  %453 = or i1 %451, %452
  %454 = or i1 %449, %450
  br i1 %453, label %455, label %851

; <label>:455:                                    ; preds = %440
  br label %576

; <label>:456:                                    ; preds = %400, %398, %346
  %457 = landingpad { i8*, i32 }
          catch i8* null
  %458 = extractvalue { i8*, i32 } %457, 0
  store i8* %458, i8** %33, align 8
  %459 = extractvalue { i8*, i32 } %457, 1
  store i32 %459, i32* %34, align 4
  br label %460

; <label>:460:                                    ; preds = %456
  %461 = load i8*, i8** %33, align 8
  %462 = call i8* @__cxa_begin_catch(i8* %461) #3
  %463 = load i64*, i64** %32, align 8
  %464 = icmp ne i64* %463, null
  br i1 %464, label %510, label %465

; <label>:465:                                    ; preds = %460
  %466 = load i64*, i64** %31, align 8
  %467 = load i64, i64* %29, align 8
  %468 = getelementptr inbounds i64, i64* %466, i64 %467
  %469 = load i64*, i64** %31, align 8
  %470 = load i64, i64* %29, align 8
  %471 = getelementptr inbounds i64, i64* %469, i64 %470
  %472 = load i64, i64* %22, align 8
  %473 = getelementptr inbounds i64, i64* %471, i64 %472
  %474 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %475 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %474) #3
  invoke void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %468, i64* %473, %"class.std::allocator"* dereferenceable(1) %475)
          to label %476 unwind label %477

; <label>:476:                                    ; preds = %465
  br label %516

; <label>:477:                                    ; preds = %574, %516, %510, %465
  %478 = load i32, i32* @x.149
  %479 = load i32, i32* @y.150
  %480 = sub i32 0, 1
  %481 = add i32 %478, %480
  %482 = sub i32 %478, 1
  %483 = mul i32 %478, %481
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %479, 10
  %487 = and i1 %485, %486
  %488 = xor i1 %485, %486
  %489 = or i1 %487, %488
  %490 = or i1 %485, %486
  br i1 %489, label %491, label %852

; <label>:491:                                    ; preds = %477, %852
  %492 = landingpad { i8*, i32 }
          cleanup
  %493 = extractvalue { i8*, i32 } %492, 0
  store i8* %493, i8** %33, align 8
  %494 = extractvalue { i8*, i32 } %492, 1
  store i32 %494, i32* %34, align 4
  %495 = load i32, i32* @x.149
  %496 = load i32, i32* @y.150
  %497 = sub i32 %495, 767434605
  %498 = sub i32 %497, 1
  %499 = add i32 %498, 767434605
  %500 = sub i32 %495, 1
  %501 = mul i32 %495, %499
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %496, 10
  %505 = and i1 %503, %504
  %506 = xor i1 %503, %504
  %507 = or i1 %505, %506
  %508 = or i1 %503, %504
  br i1 %507, label %509, label %852

; <label>:509:                                    ; preds = %491
  invoke void @__cxa_end_catch()
          to label %575 unwind label %682

; <label>:510:                                    ; preds = %460
  %511 = load i64*, i64** %31, align 8
  %512 = load i64*, i64** %32, align 8
  %513 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %514 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %513) #3
  invoke void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %511, i64* %512, %"class.std::allocator"* dereferenceable(1) %514)
          to label %515 unwind label %477

; <label>:515:                                    ; preds = %510
  br label %516

; <label>:516:                                    ; preds = %515, %476
  %517 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %518 = load i64*, i64** %31, align 8
  %519 = load i64, i64* %28, align 8
  invoke void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %517, i64* %518, i64 %519)
          to label %520 unwind label %477

; <label>:520:                                    ; preds = %516
  %521 = load i32, i32* @x.149
  %522 = load i32, i32* @y.150
  %523 = add i32 %521, -1851153065
  %524 = sub i32 %523, 1
  %525 = sub i32 %524, -1851153065
  %526 = sub i32 %521, 1
  %527 = mul i32 %521, %525
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %522, 10
  %531 = xor i1 %529, true
  %532 = xor i1 %530, true
  %533 = xor i1 false, true
  %534 = and i1 %531, false
  %535 = and i1 %529, %533
  %536 = and i1 %532, false
  %537 = and i1 %530, %533
  %538 = or i1 %534, %535
  %539 = or i1 %536, %537
  %540 = xor i1 %538, %539
  %541 = or i1 %531, %532
  %542 = xor i1 %541, true
  %543 = or i1 false, %533
  %544 = and i1 %542, %543
  %545 = or i1 %540, %544
  %546 = or i1 %529, %530
  br i1 %545, label %547, label %856

; <label>:547:                                    ; preds = %520, %856
  %548 = load i32, i32* @x.149
  %549 = load i32, i32* @y.150
  %550 = sub i32 %548, -557759367
  %551 = sub i32 %550, 1
  %552 = add i32 %551, -557759367
  %553 = sub i32 %548, 1
  %554 = mul i32 %548, %552
  %555 = urem i32 %554, 2
  %556 = icmp eq i32 %555, 0
  %557 = icmp slt i32 %549, 10
  %558 = xor i1 %556, true
  %559 = xor i1 %557, true
  %560 = xor i1 false, true
  %561 = and i1 %558, false
  %562 = and i1 %556, %560
  %563 = and i1 %559, false
  %564 = and i1 %557, %560
  %565 = or i1 %561, %562
  %566 = or i1 %563, %564
  %567 = xor i1 %565, %566
  %568 = or i1 %558, %559
  %569 = xor i1 %568, true
  %570 = or i1 false, %560
  %571 = and i1 %569, %570
  %572 = or i1 %567, %571
  %573 = or i1 %556, %557
  br i1 %572, label %574, label %856

; <label>:574:                                    ; preds = %547
  invoke void @__cxa_rethrow() #14
          to label %726 unwind label %477

; <label>:575:                                    ; preds = %509
  br label %623

; <label>:576:                                    ; preds = %455
  %577 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %578 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %577, i32 0, i32 0
  %579 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %578, i32 0, i32 0
  %580 = load i64*, i64** %579, align 8
  %581 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %582 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %581, i32 0, i32 0
  %583 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %582, i32 0, i32 1
  %584 = load i64*, i64** %583, align 8
  %585 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %586 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %585) #3
  call void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %580, i64* %584, %"class.std::allocator"* dereferenceable(1) %586)
  %587 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %588 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %589 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %588, i32 0, i32 0
  %590 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %589, i32 0, i32 0
  %591 = load i64*, i64** %590, align 8
  %592 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %593 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %592, i32 0, i32 0
  %594 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %593, i32 0, i32 2
  %595 = load i64*, i64** %594, align 8
  %596 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %597 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %596, i32 0, i32 0
  %598 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %597, i32 0, i32 0
  %599 = load i64*, i64** %598, align 8
  %600 = ptrtoint i64* %595 to i64
  %601 = ptrtoint i64* %599 to i64
  %602 = sub i64 %600, -6276408248122204817
  %603 = sub i64 %602, %601
  %604 = add i64 %603, -6276408248122204817
  %605 = sub i64 %600, %601
  %606 = sdiv exact i64 %604, 8
  call void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %587, i64* %591, i64 %606)
  %607 = load i64*, i64** %31, align 8
  %608 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %609 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %608, i32 0, i32 0
  %610 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %609, i32 0, i32 0
  store i64* %607, i64** %610, align 8
  %611 = load i64*, i64** %32, align 8
  %612 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %613 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %612, i32 0, i32 0
  %614 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %613, i32 0, i32 1
  store i64* %611, i64** %614, align 8
  %615 = load i64*, i64** %31, align 8
  %616 = load i64, i64* %28, align 8
  %617 = getelementptr inbounds i64, i64* %615, i64 %616
  %618 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %619 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %618, i32 0, i32 0
  %620 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %619, i32 0, i32 2
  store i64* %617, i64** %620, align 8
  br label %621

; <label>:621:                                    ; preds = %576, %288
  br label %622

; <label>:622:                                    ; preds = %621, %52
  ret void

; <label>:623:                                    ; preds = %575
  %624 = load i32, i32* @x.149
  %625 = load i32, i32* @y.150
  %626 = sub i32 %624, 1817823556
  %627 = sub i32 %626, 1
  %628 = add i32 %627, 1817823556
  %629 = sub i32 %624, 1
  %630 = mul i32 %624, %628
  %631 = urem i32 %630, 2
  %632 = icmp eq i32 %631, 0
  %633 = icmp slt i32 %625, 10
  %634 = xor i1 %632, true
  %635 = xor i1 %633, true
  %636 = xor i1 false, true
  %637 = and i1 %634, false
  %638 = and i1 %632, %636
  %639 = and i1 %635, false
  %640 = and i1 %633, %636
  %641 = or i1 %637, %638
  %642 = or i1 %639, %640
  %643 = xor i1 %641, %642
  %644 = or i1 %634, %635
  %645 = xor i1 %644, true
  %646 = or i1 false, %636
  %647 = and i1 %645, %646
  %648 = or i1 %643, %647
  %649 = or i1 %632, %633
  br i1 %648, label %650, label %857

; <label>:650:                                    ; preds = %623, %857
  %651 = load i8*, i8** %33, align 8
  %652 = load i32, i32* %34, align 4
  %653 = insertvalue { i8*, i32 } undef, i8* %651, 0
  %654 = insertvalue { i8*, i32 } %653, i32 %652, 1
  %655 = load i32, i32* @x.149
  %656 = load i32, i32* @y.150
  %657 = add i32 %655, 1556839446
  %658 = sub i32 %657, 1
  %659 = sub i32 %658, 1556839446
  %660 = sub i32 %655, 1
  %661 = mul i32 %655, %659
  %662 = urem i32 %661, 2
  %663 = icmp eq i32 %662, 0
  %664 = icmp slt i32 %656, 10
  %665 = xor i1 %663, true
  %666 = xor i1 %664, true
  %667 = xor i1 true, true
  %668 = and i1 %665, true
  %669 = and i1 %663, %667
  %670 = and i1 %666, true
  %671 = and i1 %664, %667
  %672 = or i1 %668, %669
  %673 = or i1 %670, %671
  %674 = xor i1 %672, %673
  %675 = or i1 %665, %666
  %676 = xor i1 %675, true
  %677 = or i1 true, %667
  %678 = and i1 %676, %677
  %679 = or i1 %674, %678
  %680 = or i1 %663, %664
  br i1 %679, label %681, label %857

; <label>:681:                                    ; preds = %650
  resume { i8*, i32 } %654

; <label>:682:                                    ; preds = %509
  %683 = load i32, i32* @x.149
  %684 = load i32, i32* @y.150
  %685 = sub i32 0, 1
  %686 = add i32 %683, %685
  %687 = sub i32 %683, 1
  %688 = mul i32 %683, %686
  %689 = urem i32 %688, 2
  %690 = icmp eq i32 %689, 0
  %691 = icmp slt i32 %684, 10
  %692 = xor i1 %690, true
  %693 = xor i1 %691, true
  %694 = xor i1 true, true
  %695 = and i1 %692, true
  %696 = and i1 %690, %694
  %697 = and i1 %693, true
  %698 = and i1 %691, %694
  %699 = or i1 %695, %696
  %700 = or i1 %697, %698
  %701 = xor i1 %699, %700
  %702 = or i1 %692, %693
  %703 = xor i1 %702, true
  %704 = or i1 true, %694
  %705 = and i1 %703, %704
  %706 = or i1 %701, %705
  %707 = or i1 %690, %691
  br i1 %706, label %708, label %862

; <label>:708:                                    ; preds = %682, %862
  %709 = landingpad { i8*, i32 }
          catch i8* null
  %710 = extractvalue { i8*, i32 } %709, 0
  call void @__clang_call_terminate(i8* %710) #13
  %711 = load i32, i32* @x.149
  %712 = load i32, i32* @y.150
  %713 = add i32 %711, -153131847
  %714 = sub i32 %713, 1
  %715 = sub i32 %714, -153131847
  %716 = sub i32 %711, 1
  %717 = mul i32 %711, %715
  %718 = urem i32 %717, 2
  %719 = icmp eq i32 %718, 0
  %720 = icmp slt i32 %712, 10
  %721 = and i1 %719, %720
  %722 = xor i1 %719, %720
  %723 = or i1 %721, %722
  %724 = or i1 %719, %720
  br i1 %723, label %725, label %862

; <label>:725:                                    ; preds = %708
  unreachable

; <label>:726:                                    ; preds = %574
  unreachable

; <label>:727:                                    ; preds = %19, %4
  %728 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %729 = alloca %"class.std::vector"*, align 8
  %730 = alloca i64, align 8
  %731 = alloca i64*, align 8
  %732 = alloca i64, align 8
  %733 = alloca i64, align 8
  %734 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %735 = alloca i64*, align 8
  %736 = alloca i64, align 8
  %737 = alloca i64, align 8
  %738 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %739 = alloca i64*, align 8
  %740 = alloca i64*, align 8
  %741 = alloca i8*
  %742 = alloca i32
  %743 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %728, i32 0, i32 0
  store i64* %1, i64** %743, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %729, align 8
  store i64 %2, i64* %730, align 8
  store i64* %3, i64** %731, align 8
  %744 = load %"class.std::vector"*, %"class.std::vector"** %729, align 8
  %745 = load i64, i64* %730, align 8
  %746 = icmp ne i64 %745, 0
  br label %19

; <label>:747:                                    ; preds = %86, %71
  %748 = load i64*, i64** %23, align 8
  %749 = load i64, i64* %748, align 8
  store i64 %749, i64* %24, align 8
  %750 = call i64* @_ZNSt6vectorIxSaIxEE3endEv(%"class.std::vector"* %36) #3
  %751 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %26, i32 0, i32 0
  store i64* %750, i64** %751, align 8
  %752 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %26, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %20) #3
  store i64 %752, i64* %25, align 8
  %753 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %754 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %753, i32 0, i32 0
  %755 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %754, i32 0, i32 1
  %756 = load i64*, i64** %755, align 8
  store i64* %756, i64** %27, align 8
  %757 = load i64, i64* %25, align 8
  %758 = load i64, i64* %22, align 8
  %759 = icmp ugt i64 %757, %758
  br label %86

; <label>:760:                                    ; preds = %152, %126
  %761 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %762 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %761, i32 0, i32 0
  %763 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %762, i32 0, i32 1
  %764 = load i64*, i64** %763, align 8
  %765 = load i64, i64* %22, align 8
  %766 = sub i64 0, 0
  %767 = add i64 0, %766
  %768 = sub i64 0, 0
  %769 = add i64 %767, -2559711777000198675
  %770 = add i64 %769, %765
  %771 = sub i64 %770, -2559711777000198675
  %772 = add i64 %767, %765
  %773 = shl i64 0, %765
  %774 = sub i64 0, 723334677968919589
  %775 = sub i64 %774, %765
  %776 = add i64 %775, 723334677968919589
  %777 = sub i64 0, %765
  %778 = getelementptr inbounds i64, i64* %764, i64 %776
  %779 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %780 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %779, i32 0, i32 0
  %781 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %780, i32 0, i32 1
  %782 = load i64*, i64** %781, align 8
  %783 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %784 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %783, i32 0, i32 0
  %785 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %784, i32 0, i32 1
  %786 = load i64*, i64** %785, align 8
  %787 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %788 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %787) #3
  %789 = call i64* @_ZSt22__uninitialized_move_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64* %778, i64* %782, i64* %786, %"class.std::allocator"* dereferenceable(1) %788)
  %790 = load i64, i64* %22, align 8
  %791 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %792 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %791, i32 0, i32 0
  %793 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %792, i32 0, i32 1
  %794 = load i64*, i64** %793, align 8
  %795 = getelementptr inbounds i64, i64* %794, i64 %790
  store i64* %795, i64** %793, align 8
  %796 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %797 = load i64*, i64** %796, align 8
  %798 = load i64*, i64** %27, align 8
  %799 = load i64, i64* %22, align 8
  %800 = shl i64 0, %799
  %801 = shl i64 0, %799
  %802 = shl i64 0, %799
  %803 = sub i64 0, 0
  %804 = add i64 0, %803
  %805 = sub i64 0, 0
  %806 = sub i64 0, %804
  %807 = sub i64 0, %799
  %808 = add i64 %806, %807
  %809 = sub i64 0, %808
  %810 = add i64 %804, %799
  %811 = sub i64 0, %799
  %812 = add i64 0, %811
  %813 = sub i64 0, %799
  %814 = getelementptr inbounds i64, i64* %798, i64 %812
  %815 = load i64*, i64** %27, align 8
  %816 = call i64* @_ZSt13move_backwardIPxS0_ET0_T_S2_S1_(i64* %797, i64* %814, i64* %815)
  %817 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %818 = load i64*, i64** %817, align 8
  %819 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %820 = load i64*, i64** %819, align 8
  %821 = load i64, i64* %22, align 8
  %822 = getelementptr inbounds i64, i64* %820, i64 %821
  call void @_ZSt4fillIPxxEvT_S1_RKT0_(i64* %818, i64* %822, i64* dereferenceable(8) %24)
  br label %152

; <label>:823:                                    ; preds = %261, %247
  br label %261

; <label>:824:                                    ; preds = %304, %289
  %825 = load i64, i64* %22, align 8
  %826 = call i64 @_ZNKSt6vectorIxSaIxEE12_M_check_lenEmPKc(%"class.std::vector"* %36, i64 %825, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0))
  store i64 %826, i64* %28, align 8
  %827 = call i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"* %36) #3
  %828 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %30, i32 0, i32 0
  store i64* %827, i64** %828, align 8
  %829 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %20, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %30) #3
  store i64 %829, i64* %29, align 8
  %830 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %831 = load i64, i64* %28, align 8
  %832 = call i64* @_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm(%"struct.std::_Vector_base"* %830, i64 %831)
  store i64* %832, i64** %31, align 8
  %833 = load i64*, i64** %31, align 8
  store i64* %833, i64** %32, align 8
  %834 = load i64*, i64** %31, align 8
  %835 = load i64, i64* %29, align 8
  %836 = getelementptr inbounds i64, i64* %834, i64 %835
  %837 = load i64, i64* %22, align 8
  %838 = load i64*, i64** %23, align 8
  %839 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %840 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %839) #3
  br label %304

; <label>:841:                                    ; preds = %375, %348
  store i64* null, i64** %32, align 8
  %842 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %843 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %842, i32 0, i32 0
  %844 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %843, i32 0, i32 0
  %845 = load i64*, i64** %844, align 8
  %846 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %847 = load i64*, i64** %846, align 8
  %848 = load i64*, i64** %31, align 8
  %849 = bitcast %"class.std::vector"* %36 to %"struct.std::_Vector_base"*
  %850 = call dereferenceable(1) %"class.std::allocator"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %849) #3
  br label %375

; <label>:851:                                    ; preds = %440, %414
  store i64* %413, i64** %32, align 8
  br label %440

; <label>:852:                                    ; preds = %491, %477
  %853 = landingpad { i8*, i32 }
          cleanup
  %854 = extractvalue { i8*, i32 } %853, 0
  store i8* %854, i8** %33, align 8
  %855 = extractvalue { i8*, i32 } %853, 1
  store i32 %855, i32* %34, align 4
  br label %491

; <label>:856:                                    ; preds = %547, %520
  br label %547

; <label>:857:                                    ; preds = %650, %623
  %858 = load i8*, i8** %33, align 8
  %859 = load i32, i32* %34, align 4
  %860 = insertvalue { i8*, i32 } undef, i8* %858, 0
  %861 = insertvalue { i8*, i32 } %860, i32 %859, 1
  br label %650

; <label>:862:                                    ; preds = %708, %682
  %863 = landingpad { i8*, i32 }
          catch i8* null
  %864 = extractvalue { i8*, i32 } %863, 0
  call void @__clang_call_terminate(i8* %864) #13
  br label %708
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.151
  %6 = load i32, i32* @y.152
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -697066030, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %61
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -697066030, label %18
    i32 1952381183, label %26
    i32 -1039859048, label %50
    i32 -500380731, label %52
  ]

; <label>:17:                                     ; preds = %15
  br label %61

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 1952381183, i32 -500380731
  store i32 %25, i32* %14
  br label %61

; <label>:26:                                     ; preds = %15
  %27 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %28 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %28, align 8
  %29 = load %"class.std::vector"*, %"class.std::vector"** %28, align 8
  %30 = bitcast %"class.std::vector"* %29 to %"struct.std::_Vector_base"*
  %31 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %30, i32 0, i32 0
  %32 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %31, i32 0, i32 0
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator"* %27, i64** dereferenceable(8) %32) #3
  %33 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %27, i32 0, i32 0
  %34 = load i64*, i64** %33, align 8
  store i64* %34, i64** %2
  %35 = load i32, i32* @x.151
  %36 = load i32, i32* @y.152
  %37 = add i32 %35, -1012749491
  %38 = sub i32 %37, 1
  %39 = sub i32 %38, -1012749491
  %40 = sub i32 %35, 1
  %41 = mul i32 %35, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %36, 10
  %45 = and i1 %43, %44
  %46 = xor i1 %43, %44
  %47 = or i1 %45, %46
  %48 = or i1 %43, %44
  %49 = select i1 %47, i32 -1039859048, i32 -500380731
  store i32 %49, i32* %14
  br label %61

; <label>:50:                                     ; preds = %15
  %51 = load volatile i64*, i64** %2
  ret i64* %51

; <label>:52:                                     ; preds = %15
  %53 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %54 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %54, align 8
  %55 = load %"class.std::vector"*, %"class.std::vector"** %54, align 8
  %56 = bitcast %"class.std::vector"* %55 to %"struct.std::_Vector_base"*
  %57 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %56, i32 0, i32 0
  %58 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %57, i32 0, i32 0
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator"* %53, i64** dereferenceable(8) %58) #3
  %59 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %53, i32 0, i32 0
  %60 = load i64*, i64** %59, align 8
  store i32 1952381183, i32* %14
  br label %61

; <label>:61:                                     ; preds = %52, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator"*, i64) #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %4, align 8
  store i64 %1, i64* %5, align 8
  %7 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %4, align 8
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i64, i64* %9, i64 %10
  store i64* %11, i64** %6, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator"* %3, i64** dereferenceable(8) %6) #3
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  %13 = load i64*, i64** %12, align 8
  ret i64* %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.7"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %0, %"class.__gnu_cxx::__normal_iterator.7"** %2, align 8
  %3 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %2, align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %3, i32 0, i32 0
  ret i64** %4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx17__normal_iteratorIPKxSt6vectorIxSaIxEEEC2ERKS2_(%"class.__gnu_cxx::__normal_iterator.7"*, i64** dereferenceable(8)) unnamed_addr #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.157
  %6 = load i32, i32* @y.158
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -1331254887, i32* %14
  br label %15

; <label>:15:                                     ; preds = %2, %56
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -1331254887, label %18
    i32 1580648099, label %26
    i32 61755711, label %48
    i32 -1747243507, label %49
  ]

; <label>:17:                                     ; preds = %15
  br label %56

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 1580648099, i32 -1747243507
  store i32 %25, i32* %14
  br label %56

; <label>:26:                                     ; preds = %15
  %27 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  %28 = alloca i64**, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %0, %"class.__gnu_cxx::__normal_iterator.7"** %27, align 8
  store i64** %1, i64*** %28, align 8
  %29 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %27, align 8
  %30 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %29, i32 0, i32 0
  %31 = load i64**, i64*** %28, align 8
  %32 = load i64*, i64** %31, align 8
  store i64* %32, i64** %30, align 8
  %33 = load i32, i32* @x.157
  %34 = load i32, i32* @y.158
  %35 = sub i32 %33, -126227726
  %36 = sub i32 %35, 1
  %37 = add i32 %36, -126227726
  %38 = sub i32 %33, 1
  %39 = mul i32 %33, %37
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %34, 10
  %43 = and i1 %41, %42
  %44 = xor i1 %41, %42
  %45 = or i1 %43, %44
  %46 = or i1 %41, %42
  %47 = select i1 %45, i32 61755711, i32 -1747243507
  store i32 %47, i32* %14
  br label %56

; <label>:48:                                     ; preds = %15
  ret void

; <label>:49:                                     ; preds = %15
  %50 = alloca %"class.__gnu_cxx::__normal_iterator.7"*, align 8
  %51 = alloca i64**, align 8
  store %"class.__gnu_cxx::__normal_iterator.7"* %0, %"class.__gnu_cxx::__normal_iterator.7"** %50, align 8
  store i64** %1, i64*** %51, align 8
  %52 = load %"class.__gnu_cxx::__normal_iterator.7"*, %"class.__gnu_cxx::__normal_iterator.7"** %50, align 8
  %53 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.7", %"class.__gnu_cxx::__normal_iterator.7"* %52, i32 0, i32 0
  %54 = load i64**, i64*** %51, align 8
  %55 = load i64*, i64** %54, align 8
  store i64* %55, i64** %53, align 8
  store i32 1580648099, i32* %14
  br label %56

; <label>:56:                                     ; preds = %49, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8)) #4 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %3, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %4, align 8
  %5 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %3, align 8
  %6 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %5) #3
  %7 = load i64*, i64** %6, align 8
  %8 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %4, align 8
  %9 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %8) #3
  %10 = load i64*, i64** %9, align 8
  %11 = ptrtoint i64* %7 to i64
  %12 = ptrtoint i64* %10 to i64
  %13 = sub i64 0, %12
  %14 = add i64 %11, %13
  %15 = sub i64 %11, %12
  %16 = sdiv exact i64 %14, 8
  ret i64 %16
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt22__uninitialized_move_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64*, i64*, i64*, %"class.std::allocator"* dereferenceable(1)) #0 comdat {
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %"class.std::allocator"*, align 8
  %9 = alloca %"class.std::move_iterator", align 8
  %10 = alloca %"class.std::move_iterator", align 8
  store i64* %0, i64** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store %"class.std::allocator"* %3, %"class.std::allocator"** %8, align 8
  %11 = load i64*, i64** %5, align 8
  %12 = call i64* @_ZSt18make_move_iteratorIPxESt13move_iteratorIT_ES2_(i64* %11)
  %13 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %9, i32 0, i32 0
  store i64* %12, i64** %13, align 8
  %14 = load i64*, i64** %6, align 8
  %15 = call i64* @_ZSt18make_move_iteratorIPxESt13move_iteratorIT_ES2_(i64* %14)
  %16 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %10, i32 0, i32 0
  store i64* %15, i64** %16, align 8
  %17 = load i64*, i64** %7, align 8
  %18 = load %"class.std::allocator"*, %"class.std::allocator"** %8, align 8
  %19 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %9, i32 0, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %10, i32 0, i32 0
  %22 = load i64*, i64** %21, align 8
  %23 = call i64* @_ZSt22__uninitialized_copy_aISt13move_iteratorIPxES1_xET0_T_S4_S3_RSaIT1_E(i64* %20, i64* %22, i64* %17, %"class.std::allocator"* dereferenceable(1) %18)
  ret i64* %23
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt13move_backwardIPxS0_ET0_T_S2_S1_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = call i64* @_ZSt12__miter_baseIPxENSt11_Miter_baseIT_E13iterator_typeES2_(i64* %7)
  %9 = load i64*, i64** %5, align 8
  %10 = call i64* @_ZSt12__miter_baseIPxENSt11_Miter_baseIT_E13iterator_typeES2_(i64* %9)
  %11 = load i64*, i64** %6, align 8
  %12 = call i64* @_ZSt23__copy_move_backward_a2ILb1EPxS0_ET1_T0_S2_S1_(i64* %8, i64* %10, i64* %11)
  ret i64* %12
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator"*) #4 comdat align 2 {
  %2 = alloca i64**
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.165
  %6 = load i32, i32* @y.166
  %7 = sub i32 %5, -1391801704
  %8 = sub i32 %7, 1
  %9 = add i32 %8, -1391801704
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 2039975818, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %64
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 2039975818, label %19
    i32 1746100743, label %39
    i32 2137261605, label %58
    i32 1783244178, label %60
  ]

; <label>:18:                                     ; preds = %16
  br label %64

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 1746100743, i32 1783244178
  store i32 %38, i32* %15
  br label %64

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %40, align 8
  %41 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %40, align 8
  %42 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %41, i32 0, i32 0
  store i64** %42, i64*** %2
  %43 = load i32, i32* @x.165
  %44 = load i32, i32* @y.166
  %45 = add i32 %43, -245424144
  %46 = sub i32 %45, 1
  %47 = sub i32 %46, -245424144
  %48 = sub i32 %43, 1
  %49 = mul i32 %43, %47
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %44, 10
  %53 = and i1 %51, %52
  %54 = xor i1 %51, %52
  %55 = or i1 %53, %54
  %56 = or i1 %51, %52
  %57 = select i1 %55, i32 2137261605, i32 1783244178
  store i32 %57, i32* %15
  br label %64

; <label>:58:                                     ; preds = %16
  %59 = load volatile i64**, i64*** %2
  ret i64** %59

; <label>:60:                                     ; preds = %16
  %61 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %61, align 8
  %62 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %61, align 8
  %63 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %62, i32 0, i32 0
  store i32 1746100743, i32* %15
  br label %64

; <label>:64:                                     ; preds = %60, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt4fillIPxxEvT_S1_RKT0_(i64*, i64*, i64* dereferenceable(8)) #0 comdat {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.167
  %7 = load i32, i32* @y.168
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 1817904771, i32* %15
  br label %16

; <label>:16:                                     ; preds = %3, %73
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1817904771, label %19
    i32 -1162688428, label %39
    i32 -586336170, label %63
    i32 2109984683, label %64
  ]

; <label>:18:                                     ; preds = %16
  br label %73

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -1162688428, i32 2109984683
  store i32 %38, i32* %15
  br label %73

; <label>:39:                                     ; preds = %16
  %40 = alloca i64*, align 8
  %41 = alloca i64*, align 8
  %42 = alloca i64*, align 8
  store i64* %0, i64** %40, align 8
  store i64* %1, i64** %41, align 8
  store i64* %2, i64** %42, align 8
  %43 = load i64*, i64** %40, align 8
  %44 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %43)
  %45 = load i64*, i64** %41, align 8
  %46 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %45)
  %47 = load i64*, i64** %42, align 8
  call void @_ZSt8__fill_aIPxxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i64* %44, i64* %46, i64* dereferenceable(8) %47)
  %48 = load i32, i32* @x.167
  %49 = load i32, i32* @y.168
  %50 = sub i32 %48, -589322553
  %51 = sub i32 %50, 1
  %52 = add i32 %51, -589322553
  %53 = sub i32 %48, 1
  %54 = mul i32 %48, %52
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %49, 10
  %58 = and i1 %56, %57
  %59 = xor i1 %56, %57
  %60 = or i1 %58, %59
  %61 = or i1 %56, %57
  %62 = select i1 %60, i32 -586336170, i32 2109984683
  store i32 %62, i32* %15
  br label %73

; <label>:63:                                     ; preds = %16
  ret void

; <label>:64:                                     ; preds = %16
  %65 = alloca i64*, align 8
  %66 = alloca i64*, align 8
  %67 = alloca i64*, align 8
  store i64* %0, i64** %65, align 8
  store i64* %1, i64** %66, align 8
  store i64* %2, i64** %67, align 8
  %68 = load i64*, i64** %65, align 8
  %69 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %68)
  %70 = load i64*, i64** %66, align 8
  %71 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %70)
  %72 = load i64*, i64** %67, align 8
  call void @_ZSt8__fill_aIPxxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i64* %69, i64* %71, i64* dereferenceable(8) %72)
  store i32 -1162688428, i32* %15
  br label %73

; <label>:73:                                     ; preds = %64, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt24__uninitialized_fill_n_aIPxmxxET_S1_T0_RKT1_RSaIT2_E(i64*, i64, i64* dereferenceable(8), %"class.std::allocator"* dereferenceable(1)) #0 comdat {
  %5 = alloca i64*
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.169
  %9 = load i32, i32* @y.170
  %10 = add i32 %8, -155101865
  %11 = sub i32 %10, 1
  %12 = sub i32 %11, -155101865
  %13 = sub i32 %8, 1
  %14 = mul i32 %8, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %7
  %17 = icmp slt i32 %9, 10
  store i1 %17, i1* %6
  %18 = alloca i32
  store i32 -847692010, i32* %18
  br label %19

; <label>:19:                                     ; preds = %4, %88
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 -847692010, label %22
    i32 373925082, label %42
    i32 -1388435329, label %77
    i32 -1686023266, label %79
  ]

; <label>:21:                                     ; preds = %19
  br label %88

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %7
  %24 = load volatile i1, i1* %6
  %25 = xor i1 %23, true
  %26 = xor i1 %24, true
  %27 = xor i1 true, true
  %28 = and i1 %25, true
  %29 = and i1 %23, %27
  %30 = and i1 %26, true
  %31 = and i1 %24, %27
  %32 = or i1 %28, %29
  %33 = or i1 %30, %31
  %34 = xor i1 %32, %33
  %35 = or i1 %25, %26
  %36 = xor i1 %35, true
  %37 = or i1 true, %27
  %38 = and i1 %36, %37
  %39 = or i1 %34, %38
  %40 = or i1 %23, %24
  %41 = select i1 %39, i32 373925082, i32 -1686023266
  store i32 %41, i32* %18
  br label %88

; <label>:42:                                     ; preds = %19
  %43 = alloca i64*, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64*, align 8
  %46 = alloca %"class.std::allocator"*, align 8
  store i64* %0, i64** %43, align 8
  store i64 %1, i64* %44, align 8
  store i64* %2, i64** %45, align 8
  store %"class.std::allocator"* %3, %"class.std::allocator"** %46, align 8
  %47 = load i64*, i64** %43, align 8
  %48 = load i64, i64* %44, align 8
  %49 = load i64*, i64** %45, align 8
  %50 = call i64* @_ZSt20uninitialized_fill_nIPxmxET_S1_T0_RKT1_(i64* %47, i64 %48, i64* dereferenceable(8) %49)
  store i64* %50, i64** %5
  %51 = load i32, i32* @x.169
  %52 = load i32, i32* @y.170
  %53 = sub i32 0, 1
  %54 = add i32 %51, %53
  %55 = sub i32 %51, 1
  %56 = mul i32 %51, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %52, 10
  %60 = xor i1 %58, true
  %61 = xor i1 %59, true
  %62 = xor i1 true, true
  %63 = and i1 %60, true
  %64 = and i1 %58, %62
  %65 = and i1 %61, true
  %66 = and i1 %59, %62
  %67 = or i1 %63, %64
  %68 = or i1 %65, %66
  %69 = xor i1 %67, %68
  %70 = or i1 %60, %61
  %71 = xor i1 %70, true
  %72 = or i1 true, %62
  %73 = and i1 %71, %72
  %74 = or i1 %69, %73
  %75 = or i1 %58, %59
  %76 = select i1 %74, i32 -1388435329, i32 -1686023266
  store i32 %76, i32* %18
  br label %88

; <label>:77:                                     ; preds = %19
  %78 = load volatile i64*, i64** %5
  ret i64* %78

; <label>:79:                                     ; preds = %19
  %80 = alloca i64*, align 8
  %81 = alloca i64, align 8
  %82 = alloca i64*, align 8
  %83 = alloca %"class.std::allocator"*, align 8
  store i64* %0, i64** %80, align 8
  store i64 %1, i64* %81, align 8
  store i64* %2, i64** %82, align 8
  store %"class.std::allocator"* %3, %"class.std::allocator"** %83, align 8
  %84 = load i64*, i64** %80, align 8
  %85 = load i64, i64* %81, align 8
  %86 = load i64*, i64** %82, align 8
  %87 = call i64* @_ZSt20uninitialized_fill_nIPxmxET_S1_T0_RKT1_(i64* %84, i64 %85, i64* dereferenceable(8) %86)
  store i32 373925082, i32* %18
  br label %88

; <label>:88:                                     ; preds = %79, %42, %22, %21
  br label %19
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNKSt6vectorIxSaIxEE12_M_check_lenEmPKc(%"class.std::vector"*, i64, i8*) #0 comdat align 2 {
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i1
  %7 = alloca i1
  %8 = alloca %"class.std::vector"*
  %9 = alloca i64*
  %10 = alloca i64*
  %11 = alloca i8**
  %12 = alloca i64*
  %13 = alloca i1
  %14 = alloca i1
  %15 = load i32, i32* @x.171
  %16 = load i32, i32* @y.172
  %17 = sub i32 %15, 405258577
  %18 = sub i32 %17, 1
  %19 = add i32 %18, 405258577
  %20 = sub i32 %15, 1
  %21 = mul i32 %15, %19
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  store i1 %23, i1* %14
  %24 = icmp slt i32 %16, 10
  store i1 %24, i1* %13
  %25 = alloca i32
  store i32 -23053535, i32* %25
  %26 = alloca i64
  br label %27

; <label>:27:                                     ; preds = %3, %380
  %28 = load i32, i32* %25
  switch i32 %28, label %29 [
    i32 -23053535, label %30
    i32 -1275613040, label %50
    i32 1332657933, label %84
    i32 1702267698, label %87
    i32 -1221059287, label %114
    i32 -975561576, label %132
    i32 1673571770, label %133
    i32 -1308010847, label %161
    i32 1858450182, label %197
    i32 -1388542476, label %200
    i32 292710101, label %207
    i32 1790578092, label %235
    i32 634084489, label %265
    i32 145740296, label %267
    i32 963456357, label %270
    i32 -1087739162, label %298
    i32 -405895402, label %314
    i32 1216041543, label %316
    i32 1926899192, label %338
    i32 155295549, label %341
    i32 216537767, label %376
    i32 980803622, label %379
  ]

; <label>:29:                                     ; preds = %27
  br label %380

; <label>:30:                                     ; preds = %27
  %31 = load volatile i1, i1* %14
  %32 = load volatile i1, i1* %13
  %33 = xor i1 %31, true
  %34 = xor i1 %32, true
  %35 = xor i1 false, true
  %36 = and i1 %33, false
  %37 = and i1 %31, %35
  %38 = and i1 %34, false
  %39 = and i1 %32, %35
  %40 = or i1 %36, %37
  %41 = or i1 %38, %39
  %42 = xor i1 %40, %41
  %43 = or i1 %33, %34
  %44 = xor i1 %43, true
  %45 = or i1 false, %35
  %46 = and i1 %44, %45
  %47 = or i1 %42, %46
  %48 = or i1 %31, %32
  %49 = select i1 %47, i32 -1275613040, i32 1216041543
  store i32 %49, i32* %25
  br label %380

; <label>:50:                                     ; preds = %27
  %51 = alloca %"class.std::vector"*, align 8
  %52 = alloca i64, align 8
  store i64* %52, i64** %12
  %53 = alloca i8*, align 8
  store i8** %53, i8*** %11
  %54 = alloca i64, align 8
  store i64* %54, i64** %10
  %55 = alloca i64, align 8
  store i64* %55, i64** %9
  store %"class.std::vector"* %0, %"class.std::vector"** %51, align 8
  %56 = load volatile i64*, i64** %12
  store i64 %1, i64* %56, align 8
  %57 = load volatile i8**, i8*** %11
  store i8* %2, i8** %57, align 8
  %58 = load %"class.std::vector"*, %"class.std::vector"** %51, align 8
  store %"class.std::vector"* %58, %"class.std::vector"** %8
  %59 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %60 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %59) #3
  %61 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %62 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %61) #3
  %63 = sub i64 0, %62
  %64 = add i64 %60, %63
  %65 = sub i64 %60, %62
  %66 = load volatile i64*, i64** %12
  %67 = load i64, i64* %66, align 8
  %68 = icmp ult i64 %64, %67
  store i1 %68, i1* %7
  %69 = load i32, i32* @x.171
  %70 = load i32, i32* @y.172
  %71 = add i32 %69, 1966509532
  %72 = sub i32 %71, 1
  %73 = sub i32 %72, 1966509532
  %74 = sub i32 %69, 1
  %75 = mul i32 %69, %73
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %70, 10
  %79 = and i1 %77, %78
  %80 = xor i1 %77, %78
  %81 = or i1 %79, %80
  %82 = or i1 %77, %78
  %83 = select i1 %81, i32 1332657933, i32 1216041543
  store i32 %83, i32* %25
  br label %380

; <label>:84:                                     ; preds = %27
  %85 = load volatile i1, i1* %7
  %86 = select i1 %85, i32 1702267698, i32 1673571770
  store i32 %86, i32* %25
  br label %380

; <label>:87:                                     ; preds = %27
  %88 = load i32, i32* @x.171
  %89 = load i32, i32* @y.172
  %90 = sub i32 0, 1
  %91 = add i32 %88, %90
  %92 = sub i32 %88, 1
  %93 = mul i32 %88, %91
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %89, 10
  %97 = xor i1 %95, true
  %98 = xor i1 %96, true
  %99 = xor i1 false, true
  %100 = and i1 %97, false
  %101 = and i1 %95, %99
  %102 = and i1 %98, false
  %103 = and i1 %96, %99
  %104 = or i1 %100, %101
  %105 = or i1 %102, %103
  %106 = xor i1 %104, %105
  %107 = or i1 %97, %98
  %108 = xor i1 %107, true
  %109 = or i1 false, %99
  %110 = and i1 %108, %109
  %111 = or i1 %106, %110
  %112 = or i1 %95, %96
  %113 = select i1 %111, i32 -1221059287, i32 1926899192
  store i32 %113, i32* %25
  br label %380

; <label>:114:                                    ; preds = %27
  %115 = load volatile i8**, i8*** %11
  %116 = load i8*, i8** %115, align 8
  call void @_ZSt20__throw_length_errorPKc(i8* %116) #14
  %117 = load i32, i32* @x.171
  %118 = load i32, i32* @y.172
  %119 = add i32 %117, 1682412256
  %120 = sub i32 %119, 1
  %121 = sub i32 %120, 1682412256
  %122 = sub i32 %117, 1
  %123 = mul i32 %117, %121
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %118, 10
  %127 = and i1 %125, %126
  %128 = xor i1 %125, %126
  %129 = or i1 %127, %128
  %130 = or i1 %125, %126
  %131 = select i1 %129, i32 -975561576, i32 1926899192
  store i32 %131, i32* %25
  br label %380

; <label>:132:                                    ; preds = %27
  unreachable

; <label>:133:                                    ; preds = %27
  %134 = load i32, i32* @x.171
  %135 = load i32, i32* @y.172
  %136 = sub i32 %134, 970751955
  %137 = sub i32 %136, 1
  %138 = add i32 %137, 970751955
  %139 = sub i32 %134, 1
  %140 = mul i32 %134, %138
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %135, 10
  %144 = xor i1 %142, true
  %145 = xor i1 %143, true
  %146 = xor i1 true, true
  %147 = and i1 %144, true
  %148 = and i1 %142, %146
  %149 = and i1 %145, true
  %150 = and i1 %143, %146
  %151 = or i1 %147, %148
  %152 = or i1 %149, %150
  %153 = xor i1 %151, %152
  %154 = or i1 %144, %145
  %155 = xor i1 %154, true
  %156 = or i1 true, %146
  %157 = and i1 %155, %156
  %158 = or i1 %153, %157
  %159 = or i1 %142, %143
  %160 = select i1 %158, i32 -1308010847, i32 155295549
  store i32 %160, i32* %25
  br label %380

; <label>:161:                                    ; preds = %27
  %162 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %163 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %162) #3
  %164 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %165 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %164) #3
  %166 = load volatile i64*, i64** %9
  store i64 %165, i64* %166, align 8
  %167 = load volatile i64*, i64** %12
  %168 = load volatile i64*, i64** %9
  %169 = call dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8) %168, i64* dereferenceable(8) %167)
  %170 = load i64, i64* %169, align 8
  %171 = sub i64 0, %163
  %172 = sub i64 0, %170
  %173 = add i64 %171, %172
  %174 = sub i64 0, %173
  %175 = add i64 %163, %170
  %176 = load volatile i64*, i64** %10
  store i64 %174, i64* %176, align 8
  %177 = load volatile i64*, i64** %10
  %178 = load i64, i64* %177, align 8
  %179 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %180 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %179) #3
  %181 = icmp ult i64 %178, %180
  store i1 %181, i1* %6
  %182 = load i32, i32* @x.171
  %183 = load i32, i32* @y.172
  %184 = sub i32 %182, 1342186430
  %185 = sub i32 %184, 1
  %186 = add i32 %185, 1342186430
  %187 = sub i32 %182, 1
  %188 = mul i32 %182, %186
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %183, 10
  %192 = and i1 %190, %191
  %193 = xor i1 %190, %191
  %194 = or i1 %192, %193
  %195 = or i1 %190, %191
  %196 = select i1 %194, i32 1858450182, i32 155295549
  store i32 %196, i32* %25
  br label %380

; <label>:197:                                    ; preds = %27
  %198 = load volatile i1, i1* %6
  %199 = select i1 %198, i32 292710101, i32 -1388542476
  store i32 %199, i32* %25
  br label %380

; <label>:200:                                    ; preds = %27
  %201 = load volatile i64*, i64** %10
  %202 = load i64, i64* %201, align 8
  %203 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %204 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %203) #3
  %205 = icmp ugt i64 %202, %204
  %206 = select i1 %205, i32 292710101, i32 145740296
  store i32 %206, i32* %25
  br label %380

; <label>:207:                                    ; preds = %27
  %208 = load i32, i32* @x.171
  %209 = load i32, i32* @y.172
  %210 = sub i32 %208, 977664242
  %211 = sub i32 %210, 1
  %212 = add i32 %211, 977664242
  %213 = sub i32 %208, 1
  %214 = mul i32 %208, %212
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %209, 10
  %218 = xor i1 %216, true
  %219 = xor i1 %217, true
  %220 = xor i1 true, true
  %221 = and i1 %218, true
  %222 = and i1 %216, %220
  %223 = and i1 %219, true
  %224 = and i1 %217, %220
  %225 = or i1 %221, %222
  %226 = or i1 %223, %224
  %227 = xor i1 %225, %226
  %228 = or i1 %218, %219
  %229 = xor i1 %228, true
  %230 = or i1 true, %220
  %231 = and i1 %229, %230
  %232 = or i1 %227, %231
  %233 = or i1 %216, %217
  %234 = select i1 %232, i32 1790578092, i32 216537767
  store i32 %234, i32* %25
  br label %380

; <label>:235:                                    ; preds = %27
  %236 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %237 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %236) #3
  store i64 %237, i64* %5
  %238 = load i32, i32* @x.171
  %239 = load i32, i32* @y.172
  %240 = sub i32 %238, 1739907488
  %241 = sub i32 %240, 1
  %242 = add i32 %241, 1739907488
  %243 = sub i32 %238, 1
  %244 = mul i32 %238, %242
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %239, 10
  %248 = xor i1 %246, true
  %249 = xor i1 %247, true
  %250 = xor i1 true, true
  %251 = and i1 %248, true
  %252 = and i1 %246, %250
  %253 = and i1 %249, true
  %254 = and i1 %247, %250
  %255 = or i1 %251, %252
  %256 = or i1 %253, %254
  %257 = xor i1 %255, %256
  %258 = or i1 %248, %249
  %259 = xor i1 %258, true
  %260 = or i1 true, %250
  %261 = and i1 %259, %260
  %262 = or i1 %257, %261
  %263 = or i1 %246, %247
  %264 = select i1 %262, i32 634084489, i32 216537767
  store i32 %264, i32* %25
  br label %380

; <label>:265:                                    ; preds = %27
  store i32 963456357, i32* %25
  %266 = load volatile i64, i64* %5
  store i64 %266, i64* %26
  br label %380

; <label>:267:                                    ; preds = %27
  %268 = load volatile i64*, i64** %10
  %269 = load i64, i64* %268, align 8
  store i32 963456357, i32* %25
  store i64 %269, i64* %26
  br label %380

; <label>:270:                                    ; preds = %27
  %271 = load i64, i64* %26
  store i64 %271, i64* %4
  %272 = load i32, i32* @x.171
  %273 = load i32, i32* @y.172
  %274 = sub i32 0, 1
  %275 = add i32 %272, %274
  %276 = sub i32 %272, 1
  %277 = mul i32 %272, %275
  %278 = urem i32 %277, 2
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %273, 10
  %281 = xor i1 %279, true
  %282 = xor i1 %280, true
  %283 = xor i1 false, true
  %284 = and i1 %281, false
  %285 = and i1 %279, %283
  %286 = and i1 %282, false
  %287 = and i1 %280, %283
  %288 = or i1 %284, %285
  %289 = or i1 %286, %287
  %290 = xor i1 %288, %289
  %291 = or i1 %281, %282
  %292 = xor i1 %291, true
  %293 = or i1 false, %283
  %294 = and i1 %292, %293
  %295 = or i1 %290, %294
  %296 = or i1 %279, %280
  %297 = select i1 %295, i32 -1087739162, i32 980803622
  store i32 %297, i32* %25
  br label %380

; <label>:298:                                    ; preds = %27
  %299 = load i32, i32* @x.171
  %300 = load i32, i32* @y.172
  %301 = sub i32 %299, -556198670
  %302 = sub i32 %301, 1
  %303 = add i32 %302, -556198670
  %304 = sub i32 %299, 1
  %305 = mul i32 %299, %303
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %300, 10
  %309 = and i1 %307, %308
  %310 = xor i1 %307, %308
  %311 = or i1 %309, %310
  %312 = or i1 %307, %308
  %313 = select i1 %311, i32 -405895402, i32 980803622
  store i32 %313, i32* %25
  br label %380

; <label>:314:                                    ; preds = %27
  %315 = load volatile i64, i64* %4
  ret i64 %315

; <label>:316:                                    ; preds = %27
  %317 = alloca %"class.std::vector"*, align 8
  %318 = alloca i64, align 8
  %319 = alloca i8*, align 8
  %320 = alloca i64, align 8
  %321 = alloca i64, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %317, align 8
  store i64 %1, i64* %318, align 8
  store i8* %2, i8** %319, align 8
  %322 = load %"class.std::vector"*, %"class.std::vector"** %317, align 8
  %323 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %322) #3
  %324 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %322) #3
  %325 = add i64 0, 954209626375907503
  %326 = sub i64 %325, %323
  %327 = sub i64 %326, 954209626375907503
  %328 = sub i64 0, %323
  %329 = sub i64 0, %324
  %330 = sub i64 %327, %329
  %331 = add i64 %327, %324
  %332 = add i64 %323, 8623361313306360285
  %333 = sub i64 %332, %324
  %334 = sub i64 %333, 8623361313306360285
  %335 = sub i64 %323, %324
  %336 = load i64, i64* %318, align 8
  %337 = icmp ult i64 %334, %336
  store i32 -1275613040, i32* %25
  br label %380

; <label>:338:                                    ; preds = %27
  %339 = load volatile i8**, i8*** %11
  %340 = load i8*, i8** %339, align 8
  call void @_ZSt20__throw_length_errorPKc(i8* %340) #14
  store i32 -1221059287, i32* %25
  br label %380

; <label>:341:                                    ; preds = %27
  %342 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %343 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %342) #3
  %344 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %345 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %344) #3
  %346 = load volatile i64*, i64** %9
  store i64 %345, i64* %346, align 8
  %347 = load volatile i64*, i64** %12
  %348 = load volatile i64*, i64** %9
  %349 = call dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8) %348, i64* dereferenceable(8) %347)
  %350 = load i64, i64* %349, align 8
  %351 = sub i64 0, %343
  %352 = add i64 0, %351
  %353 = sub i64 0, %343
  %354 = sub i64 0, %352
  %355 = sub i64 0, %350
  %356 = add i64 %354, %355
  %357 = sub i64 0, %356
  %358 = add i64 %352, %350
  %359 = add i64 0, -6449747611865814834
  %360 = sub i64 %359, %343
  %361 = sub i64 %360, -6449747611865814834
  %362 = sub i64 0, %343
  %363 = sub i64 0, %350
  %364 = sub i64 %361, %363
  %365 = add i64 %361, %350
  %366 = sub i64 %343, -3812558208747946458
  %367 = add i64 %366, %350
  %368 = add i64 %367, -3812558208747946458
  %369 = add i64 %343, %350
  %370 = load volatile i64*, i64** %10
  store i64 %368, i64* %370, align 8
  %371 = load volatile i64*, i64** %10
  %372 = load i64, i64* %371, align 8
  %373 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %374 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %373) #3
  %375 = icmp ult i64 %372, %374
  store i32 -1308010847, i32* %25
  br label %380

; <label>:376:                                    ; preds = %27
  %377 = load volatile %"class.std::vector"*, %"class.std::vector"** %8
  %378 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %377) #3
  store i32 1790578092, i32* %25
  br label %380

; <label>:379:                                    ; preds = %27
  store i32 -1087739162, i32* %25
  br label %380

; <label>:380:                                    ; preds = %379, %376, %341, %338, %316, %298, %270, %267, %265, %235, %207, %200, %197, %161, %133, %114, %87, %84, %50, %30, %29
  br label %27
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm(%"struct.std::_Vector_base"*, i64) #0 comdat align 2 {
  %3 = alloca i64
  %4 = alloca %"struct.std::_Vector_base"*
  %5 = alloca %"struct.std::_Vector_base"*, align 8
  %6 = alloca i64, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %5, align 8
  store i64 %1, i64* %6, align 8
  %7 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %5, align 8
  store %"struct.std::_Vector_base"* %7, %"struct.std::_Vector_base"** %4
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %3
  %9 = alloca i32
  store i32 -656108689, i32* %9
  %10 = alloca i64*
  br label %11

; <label>:11:                                     ; preds = %2, %27
  %12 = load i32, i32* %9
  switch i32 %12, label %13 [
    i32 -656108689, label %14
    i32 -1271894839, label %18
    i32 -535455026, label %24
    i32 53265988, label %25
  ]

; <label>:13:                                     ; preds = %11
  br label %27

; <label>:14:                                     ; preds = %11
  %15 = load volatile i64, i64* %3
  %16 = icmp ne i64 %15, 0
  %17 = select i1 %16, i32 -1271894839, i32 -535455026
  store i32 %17, i32* %9
  br label %27

; <label>:18:                                     ; preds = %11
  %19 = load volatile %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %4
  %20 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %19, i32 0, i32 0
  %21 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %20 to %"class.std::allocator"*
  %22 = load i64, i64* %6, align 8
  %23 = call i64* @_ZNSt16allocator_traitsISaIxEE8allocateERS0_m(%"class.std::allocator"* dereferenceable(1) %21, i64 %22)
  store i32 53265988, i32* %9
  store i64* %23, i64** %10
  br label %27

; <label>:24:                                     ; preds = %11
  store i32 53265988, i32* %9
  store i64* null, i64** %10
  br label %27

; <label>:25:                                     ; preds = %11
  %26 = load i64*, i64** %10
  ret i64* %26

; <label>:27:                                     ; preds = %24, %18, %14, %13
  br label %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt34__uninitialized_move_if_noexcept_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64*, i64*, i64*, %"class.std::allocator"* dereferenceable(1)) #0 comdat {
  %5 = alloca i64*
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.175
  %9 = load i32, i32* @y.176
  %10 = add i32 %8, 800146865
  %11 = sub i32 %10, 1
  %12 = sub i32 %11, 800146865
  %13 = sub i32 %8, 1
  %14 = mul i32 %8, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %7
  %17 = icmp slt i32 %9, 10
  store i1 %17, i1* %6
  %18 = alloca i32
  store i32 2108805568, i32* %18
  br label %19

; <label>:19:                                     ; preds = %4, %98
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 2108805568, label %22
    i32 -954582968, label %30
    i32 -1899023100, label %76
    i32 -1047290482, label %78
  ]

; <label>:21:                                     ; preds = %19
  br label %98

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %7
  %24 = load volatile i1, i1* %6
  %25 = and i1 %23, %24
  %26 = xor i1 %23, %24
  %27 = or i1 %25, %26
  %28 = or i1 %23, %24
  %29 = select i1 %27, i32 -954582968, i32 -1047290482
  store i32 %29, i32* %18
  br label %98

; <label>:30:                                     ; preds = %19
  %31 = alloca i64*, align 8
  %32 = alloca i64*, align 8
  %33 = alloca i64*, align 8
  %34 = alloca %"class.std::allocator"*, align 8
  %35 = alloca %"class.std::move_iterator", align 8
  %36 = alloca %"class.std::move_iterator", align 8
  store i64* %0, i64** %31, align 8
  store i64* %1, i64** %32, align 8
  store i64* %2, i64** %33, align 8
  store %"class.std::allocator"* %3, %"class.std::allocator"** %34, align 8
  %37 = load i64*, i64** %31, align 8
  %38 = call i64* @_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_(i64* %37)
  %39 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %35, i32 0, i32 0
  store i64* %38, i64** %39, align 8
  %40 = load i64*, i64** %32, align 8
  %41 = call i64* @_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_(i64* %40)
  %42 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %36, i32 0, i32 0
  store i64* %41, i64** %42, align 8
  %43 = load i64*, i64** %33, align 8
  %44 = load %"class.std::allocator"*, %"class.std::allocator"** %34, align 8
  %45 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %35, i32 0, i32 0
  %46 = load i64*, i64** %45, align 8
  %47 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %36, i32 0, i32 0
  %48 = load i64*, i64** %47, align 8
  %49 = call i64* @_ZSt22__uninitialized_copy_aISt13move_iteratorIPxES1_xET0_T_S4_S3_RSaIT1_E(i64* %46, i64* %48, i64* %43, %"class.std::allocator"* dereferenceable(1) %44)
  store i64* %49, i64** %5
  %50 = load i32, i32* @x.175
  %51 = load i32, i32* @y.176
  %52 = sub i32 0, 1
  %53 = add i32 %50, %52
  %54 = sub i32 %50, 1
  %55 = mul i32 %50, %53
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %51, 10
  %59 = xor i1 %57, true
  %60 = xor i1 %58, true
  %61 = xor i1 false, true
  %62 = and i1 %59, false
  %63 = and i1 %57, %61
  %64 = and i1 %60, false
  %65 = and i1 %58, %61
  %66 = or i1 %62, %63
  %67 = or i1 %64, %65
  %68 = xor i1 %66, %67
  %69 = or i1 %59, %60
  %70 = xor i1 %69, true
  %71 = or i1 false, %61
  %72 = and i1 %70, %71
  %73 = or i1 %68, %72
  %74 = or i1 %57, %58
  %75 = select i1 %73, i32 -1899023100, i32 -1047290482
  store i32 %75, i32* %18
  br label %98

; <label>:76:                                     ; preds = %19
  %77 = load volatile i64*, i64** %5
  ret i64* %77

; <label>:78:                                     ; preds = %19
  %79 = alloca i64*, align 8
  %80 = alloca i64*, align 8
  %81 = alloca i64*, align 8
  %82 = alloca %"class.std::allocator"*, align 8
  %83 = alloca %"class.std::move_iterator", align 8
  %84 = alloca %"class.std::move_iterator", align 8
  store i64* %0, i64** %79, align 8
  store i64* %1, i64** %80, align 8
  store i64* %2, i64** %81, align 8
  store %"class.std::allocator"* %3, %"class.std::allocator"** %82, align 8
  %85 = load i64*, i64** %79, align 8
  %86 = call i64* @_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_(i64* %85)
  %87 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %83, i32 0, i32 0
  store i64* %86, i64** %87, align 8
  %88 = load i64*, i64** %80, align 8
  %89 = call i64* @_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_(i64* %88)
  %90 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %84, i32 0, i32 0
  store i64* %89, i64** %90, align 8
  %91 = load i64*, i64** %81, align 8
  %92 = load %"class.std::allocator"*, %"class.std::allocator"** %82, align 8
  %93 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %83, i32 0, i32 0
  %94 = load i64*, i64** %93, align 8
  %95 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %84, i32 0, i32 0
  %96 = load i64*, i64** %95, align 8
  %97 = call i64* @_ZSt22__uninitialized_copy_aISt13move_iteratorIPxES1_xET0_T_S4_S3_RSaIT1_E(i64* %94, i64* %96, i64* %91, %"class.std::allocator"* dereferenceable(1) %92)
  store i32 -954582968, i32* %18
  br label %98

; <label>:98:                                     ; preds = %78, %30, %22, %21
  br label %19
}

declare void @__cxa_rethrow()

declare void @__cxa_end_catch()

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt22__uninitialized_copy_aISt13move_iteratorIPxES1_xET0_T_S4_S3_RSaIT1_E(i64*, i64*, i64*, %"class.std::allocator"* dereferenceable(1)) #0 comdat {
  %5 = alloca %"class.std::move_iterator", align 8
  %6 = alloca %"class.std::move_iterator", align 8
  %7 = alloca i64*, align 8
  %8 = alloca %"class.std::allocator"*, align 8
  %9 = alloca %"class.std::move_iterator", align 8
  %10 = alloca %"class.std::move_iterator", align 8
  %11 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %5, i32 0, i32 0
  store i64* %0, i64** %11, align 8
  %12 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %6, i32 0, i32 0
  store i64* %1, i64** %12, align 8
  store i64* %2, i64** %7, align 8
  store %"class.std::allocator"* %3, %"class.std::allocator"** %8, align 8
  %13 = bitcast %"class.std::move_iterator"* %9 to i8*
  %14 = bitcast %"class.std::move_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 8, i32 8, i1 false)
  %15 = bitcast %"class.std::move_iterator"* %10 to i8*
  %16 = bitcast %"class.std::move_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 8, i32 8, i1 false)
  %17 = load i64*, i64** %7, align 8
  %18 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %9, i32 0, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %10, i32 0, i32 0
  %21 = load i64*, i64** %20, align 8
  %22 = call i64* @_ZSt18uninitialized_copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64* %19, i64* %21, i64* %17)
  ret i64* %22
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt18make_move_iteratorIPxESt13move_iteratorIT_ES2_(i64*) #0 comdat {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.179
  %6 = load i32, i32* @y.180
  %7 = add i32 %5, -1596051454
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -1596051454
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1295185003, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %68
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1295185003, label %19
    i32 1659420410, label %27
    i32 -1916622255, label %60
    i32 -1191727500, label %62
  ]

; <label>:18:                                     ; preds = %16
  br label %68

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 1659420410, i32 -1191727500
  store i32 %26, i32* %15
  br label %68

; <label>:27:                                     ; preds = %16
  %28 = alloca %"class.std::move_iterator", align 8
  %29 = alloca i64*, align 8
  store i64* %0, i64** %29, align 8
  %30 = load i64*, i64** %29, align 8
  call void @_ZNSt13move_iteratorIPxEC2ES0_(%"class.std::move_iterator"* %28, i64* %30)
  %31 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %28, i32 0, i32 0
  %32 = load i64*, i64** %31, align 8
  store i64* %32, i64** %2
  %33 = load i32, i32* @x.179
  %34 = load i32, i32* @y.180
  %35 = add i32 %33, -657129960
  %36 = sub i32 %35, 1
  %37 = sub i32 %36, -657129960
  %38 = sub i32 %33, 1
  %39 = mul i32 %33, %37
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %34, 10
  %43 = xor i1 %41, true
  %44 = xor i1 %42, true
  %45 = xor i1 true, true
  %46 = and i1 %43, true
  %47 = and i1 %41, %45
  %48 = and i1 %44, true
  %49 = and i1 %42, %45
  %50 = or i1 %46, %47
  %51 = or i1 %48, %49
  %52 = xor i1 %50, %51
  %53 = or i1 %43, %44
  %54 = xor i1 %53, true
  %55 = or i1 true, %45
  %56 = and i1 %54, %55
  %57 = or i1 %52, %56
  %58 = or i1 %41, %42
  %59 = select i1 %57, i32 -1916622255, i32 -1191727500
  store i32 %59, i32* %15
  br label %68

; <label>:60:                                     ; preds = %16
  %61 = load volatile i64*, i64** %2
  ret i64* %61

; <label>:62:                                     ; preds = %16
  %63 = alloca %"class.std::move_iterator", align 8
  %64 = alloca i64*, align 8
  store i64* %0, i64** %64, align 8
  %65 = load i64*, i64** %64, align 8
  call void @_ZNSt13move_iteratorIPxEC2ES0_(%"class.std::move_iterator"* %63, i64* %65)
  %66 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %63, i32 0, i32 0
  %67 = load i64*, i64** %66, align 8
  store i32 1659420410, i32* %15
  br label %68

; <label>:68:                                     ; preds = %62, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt18uninitialized_copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca %"class.std::move_iterator", align 8
  %5 = alloca %"class.std::move_iterator", align 8
  %6 = alloca i64*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %"class.std::move_iterator", align 8
  %9 = alloca %"class.std::move_iterator", align 8
  %10 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %4, i32 0, i32 0
  store i64* %0, i64** %10, align 8
  %11 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %5, i32 0, i32 0
  store i64* %1, i64** %11, align 8
  store i64* %2, i64** %6, align 8
  store i8 1, i8* %7, align 1
  %12 = bitcast %"class.std::move_iterator"* %8 to i8*
  %13 = bitcast %"class.std::move_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 8, i32 8, i1 false)
  %14 = bitcast %"class.std::move_iterator"* %9 to i8*
  %15 = bitcast %"class.std::move_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  %16 = load i64*, i64** %6, align 8
  %17 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %8, i32 0, i32 0
  %18 = load i64*, i64** %17, align 8
  %19 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %9, i32 0, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = call i64* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPxES3_EET0_T_S6_S5_(i64* %18, i64* %20, i64* %16)
  ret i64* %21
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPxES3_EET0_T_S6_S5_(i64*, i64*, i64*) #0 comdat align 2 {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.183
  %8 = load i32, i32* @y.184
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 -18939902, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %105
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -18939902, label %20
    i32 1254151858, label %40
    i32 -376858404, label %85
    i32 632937131, label %87
  ]

; <label>:19:                                     ; preds = %17
  br label %105

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 1254151858, i32 632937131
  store i32 %39, i32* %16
  br label %105

; <label>:40:                                     ; preds = %17
  %41 = alloca %"class.std::move_iterator", align 8
  %42 = alloca %"class.std::move_iterator", align 8
  %43 = alloca i64*, align 8
  %44 = alloca %"class.std::move_iterator", align 8
  %45 = alloca %"class.std::move_iterator", align 8
  %46 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %41, i32 0, i32 0
  store i64* %0, i64** %46, align 8
  %47 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %42, i32 0, i32 0
  store i64* %1, i64** %47, align 8
  store i64* %2, i64** %43, align 8
  %48 = bitcast %"class.std::move_iterator"* %44 to i8*
  %49 = bitcast %"class.std::move_iterator"* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 8, i32 8, i1 false)
  %50 = bitcast %"class.std::move_iterator"* %45 to i8*
  %51 = bitcast %"class.std::move_iterator"* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 8, i32 8, i1 false)
  %52 = load i64*, i64** %43, align 8
  %53 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %44, i32 0, i32 0
  %54 = load i64*, i64** %53, align 8
  %55 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %45, i32 0, i32 0
  %56 = load i64*, i64** %55, align 8
  %57 = call i64* @_ZSt4copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64* %54, i64* %56, i64* %52)
  store i64* %57, i64** %4
  %58 = load i32, i32* @x.183
  %59 = load i32, i32* @y.184
  %60 = sub i32 %58, -2084641577
  %61 = sub i32 %60, 1
  %62 = add i32 %61, -2084641577
  %63 = sub i32 %58, 1
  %64 = mul i32 %58, %62
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %59, 10
  %68 = xor i1 %66, true
  %69 = xor i1 %67, true
  %70 = xor i1 true, true
  %71 = and i1 %68, true
  %72 = and i1 %66, %70
  %73 = and i1 %69, true
  %74 = and i1 %67, %70
  %75 = or i1 %71, %72
  %76 = or i1 %73, %74
  %77 = xor i1 %75, %76
  %78 = or i1 %68, %69
  %79 = xor i1 %78, true
  %80 = or i1 true, %70
  %81 = and i1 %79, %80
  %82 = or i1 %77, %81
  %83 = or i1 %66, %67
  %84 = select i1 %82, i32 -376858404, i32 632937131
  store i32 %84, i32* %16
  br label %105

; <label>:85:                                     ; preds = %17
  %86 = load volatile i64*, i64** %4
  ret i64* %86

; <label>:87:                                     ; preds = %17
  %88 = alloca %"class.std::move_iterator", align 8
  %89 = alloca %"class.std::move_iterator", align 8
  %90 = alloca i64*, align 8
  %91 = alloca %"class.std::move_iterator", align 8
  %92 = alloca %"class.std::move_iterator", align 8
  %93 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %88, i32 0, i32 0
  store i64* %0, i64** %93, align 8
  %94 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %89, i32 0, i32 0
  store i64* %1, i64** %94, align 8
  store i64* %2, i64** %90, align 8
  %95 = bitcast %"class.std::move_iterator"* %91 to i8*
  %96 = bitcast %"class.std::move_iterator"* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* %96, i64 8, i32 8, i1 false)
  %97 = bitcast %"class.std::move_iterator"* %92 to i8*
  %98 = bitcast %"class.std::move_iterator"* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 8, i32 8, i1 false)
  %99 = load i64*, i64** %90, align 8
  %100 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %91, i32 0, i32 0
  %101 = load i64*, i64** %100, align 8
  %102 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %92, i32 0, i32 0
  %103 = load i64*, i64** %102, align 8
  %104 = call i64* @_ZSt4copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64* %101, i64* %103, i64* %99)
  store i32 1254151858, i32* %16
  br label %105

; <label>:105:                                    ; preds = %87, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt4copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca %"class.std::move_iterator", align 8
  %5 = alloca %"class.std::move_iterator", align 8
  %6 = alloca i64*, align 8
  %7 = alloca %"class.std::move_iterator", align 8
  %8 = alloca %"class.std::move_iterator", align 8
  %9 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %4, i32 0, i32 0
  store i64* %0, i64** %9, align 8
  %10 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %5, i32 0, i32 0
  store i64* %1, i64** %10, align 8
  store i64* %2, i64** %6, align 8
  %11 = bitcast %"class.std::move_iterator"* %7 to i8*
  %12 = bitcast %"class.std::move_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 8, i32 8, i1 false)
  %13 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %7, i32 0, i32 0
  %14 = load i64*, i64** %13, align 8
  %15 = call i64* @_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_(i64* %14)
  %16 = bitcast %"class.std::move_iterator"* %8 to i8*
  %17 = bitcast %"class.std::move_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 8, i32 8, i1 false)
  %18 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %8, i32 0, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = call i64* @_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_(i64* %19)
  %21 = load i64*, i64** %6, align 8
  %22 = call i64* @_ZSt14__copy_move_a2ILb1EPxS0_ET1_T0_S2_S1_(i64* %15, i64* %20, i64* %21)
  ret i64* %22
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt14__copy_move_a2ILb1EPxS0_ET1_T0_S2_S1_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.187
  %8 = load i32, i32* @y.188
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 988337938, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %79
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 988337938, label %20
    i32 -1616070012, label %40
    i32 2086228963, label %66
    i32 1982218732, label %68
  ]

; <label>:19:                                     ; preds = %17
  br label %79

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 -1616070012, i32 1982218732
  store i32 %39, i32* %16
  br label %79

; <label>:40:                                     ; preds = %17
  %41 = alloca i64*, align 8
  %42 = alloca i64*, align 8
  %43 = alloca i64*, align 8
  store i64* %0, i64** %41, align 8
  store i64* %1, i64** %42, align 8
  store i64* %2, i64** %43, align 8
  %44 = load i64*, i64** %41, align 8
  %45 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %44)
  %46 = load i64*, i64** %42, align 8
  %47 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %46)
  %48 = load i64*, i64** %43, align 8
  %49 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %48)
  %50 = call i64* @_ZSt13__copy_move_aILb1EPxS0_ET1_T0_S2_S1_(i64* %45, i64* %47, i64* %49)
  store i64* %50, i64** %4
  %51 = load i32, i32* @x.187
  %52 = load i32, i32* @y.188
  %53 = sub i32 %51, -457307447
  %54 = sub i32 %53, 1
  %55 = add i32 %54, -457307447
  %56 = sub i32 %51, 1
  %57 = mul i32 %51, %55
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %52, 10
  %61 = and i1 %59, %60
  %62 = xor i1 %59, %60
  %63 = or i1 %61, %62
  %64 = or i1 %59, %60
  %65 = select i1 %63, i32 2086228963, i32 1982218732
  store i32 %65, i32* %16
  br label %79

; <label>:66:                                     ; preds = %17
  %67 = load volatile i64*, i64** %4
  ret i64* %67

; <label>:68:                                     ; preds = %17
  %69 = alloca i64*, align 8
  %70 = alloca i64*, align 8
  %71 = alloca i64*, align 8
  store i64* %0, i64** %69, align 8
  store i64* %1, i64** %70, align 8
  store i64* %2, i64** %71, align 8
  %72 = load i64*, i64** %69, align 8
  %73 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %72)
  %74 = load i64*, i64** %70, align 8
  %75 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %74)
  %76 = load i64*, i64** %71, align 8
  %77 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %76)
  %78 = call i64* @_ZSt13__copy_move_aILb1EPxS0_ET1_T0_S2_S1_(i64* %73, i64* %75, i64* %77)
  store i32 -1616070012, i32* %16
  br label %79

; <label>:79:                                     ; preds = %68, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_(i64*) #0 comdat {
  %2 = alloca %"class.std::move_iterator", align 8
  %3 = alloca %"class.std::move_iterator", align 8
  %4 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %2, i32 0, i32 0
  store i64* %0, i64** %4, align 8
  %5 = bitcast %"class.std::move_iterator"* %3 to i8*
  %6 = bitcast %"class.std::move_iterator"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 8, i32 8, i1 false)
  %7 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %3, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = call i64* @_ZNSt10_Iter_baseISt13move_iteratorIPxELb1EE7_S_baseES2_(i64* %8)
  ret i64* %9
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt13__copy_move_aILb1EPxS0_ET1_T0_S2_S1_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.191
  %8 = load i32, i32* @y.192
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 -1167784008, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %74
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -1167784008, label %20
    i32 -704593539, label %40
    i32 -1834961191, label %63
    i32 902693402, label %65
  ]

; <label>:19:                                     ; preds = %17
  br label %74

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 -704593539, i32 902693402
  store i32 %39, i32* %16
  br label %74

; <label>:40:                                     ; preds = %17
  %41 = alloca i64*, align 8
  %42 = alloca i64*, align 8
  %43 = alloca i64*, align 8
  %44 = alloca i8, align 1
  store i64* %0, i64** %41, align 8
  store i64* %1, i64** %42, align 8
  store i64* %2, i64** %43, align 8
  store i8 1, i8* %44, align 1
  %45 = load i64*, i64** %41, align 8
  %46 = load i64*, i64** %42, align 8
  %47 = load i64*, i64** %43, align 8
  %48 = call i64* @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_(i64* %45, i64* %46, i64* %47)
  store i64* %48, i64** %4
  %49 = load i32, i32* @x.191
  %50 = load i32, i32* @y.192
  %51 = sub i32 0, 1
  %52 = add i32 %49, %51
  %53 = sub i32 %49, 1
  %54 = mul i32 %49, %52
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %50, 10
  %58 = and i1 %56, %57
  %59 = xor i1 %56, %57
  %60 = or i1 %58, %59
  %61 = or i1 %56, %57
  %62 = select i1 %60, i32 -1834961191, i32 902693402
  store i32 %62, i32* %16
  br label %74

; <label>:63:                                     ; preds = %17
  %64 = load volatile i64*, i64** %4
  ret i64* %64

; <label>:65:                                     ; preds = %17
  %66 = alloca i64*, align 8
  %67 = alloca i64*, align 8
  %68 = alloca i64*, align 8
  %69 = alloca i8, align 1
  store i64* %0, i64** %66, align 8
  store i64* %1, i64** %67, align 8
  store i64* %2, i64** %68, align 8
  store i8 1, i8* %69, align 1
  %70 = load i64*, i64** %66, align 8
  %71 = load i64*, i64** %67, align 8
  %72 = load i64*, i64** %68, align 8
  %73 = call i64* @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_(i64* %70, i64* %71, i64* %72)
  store i32 -704593539, i32* %16
  br label %74

; <label>:74:                                     ; preds = %65, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64*) #0 comdat {
  %2 = alloca i64*, align 8
  store i64* %0, i64** %2, align 8
  %3 = load i64*, i64** %2, align 8
  %4 = call i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %3)
  ret i64* %4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_(i64*, i64*, i64*) #4 comdat align 2 {
  %4 = alloca i64
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64*, i64** %5, align 8
  %11 = ptrtoint i64* %9 to i64
  %12 = ptrtoint i64* %10 to i64
  %13 = add i64 %11, -4907116210506099337
  %14 = sub i64 %13, %12
  %15 = sub i64 %14, -4907116210506099337
  %16 = sub i64 %11, %12
  %17 = sdiv exact i64 %15, 8
  store i64 %17, i64* %8, align 8
  %18 = load i64, i64* %8, align 8
  store i64 %18, i64* %4
  %19 = alloca i32
  store i32 -2080004526, i32* %19
  br label %20

; <label>:20:                                     ; preds = %3, %38
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 -2080004526, label %23
    i32 1160329389, label %27
    i32 534339386, label %34
  ]

; <label>:22:                                     ; preds = %20
  br label %38

; <label>:23:                                     ; preds = %20
  %24 = load volatile i64, i64* %4
  %25 = icmp ne i64 %24, 0
  %26 = select i1 %25, i32 1160329389, i32 534339386
  store i32 %26, i32* %19
  br label %38

; <label>:27:                                     ; preds = %20
  %28 = load i64*, i64** %7, align 8
  %29 = bitcast i64* %28 to i8*
  %30 = load i64*, i64** %5, align 8
  %31 = bitcast i64* %30 to i8*
  %32 = load i64, i64* %8, align 8
  %33 = mul i64 8, %32
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %29, i8* %31, i64 %33, i32 8, i1 false)
  store i32 534339386, i32* %19
  br label %38

; <label>:34:                                     ; preds = %20
  %35 = load i64*, i64** %7, align 8
  %36 = load i64, i64* %8, align 8
  %37 = getelementptr inbounds i64, i64* %35, i64 %36
  ret i64* %37

; <label>:38:                                     ; preds = %27, %23, %22
  br label %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64*) #4 comdat align 2 {
  %2 = alloca i64*, align 8
  store i64* %0, i64** %2, align 8
  %3 = load i64*, i64** %2, align 8
  ret i64* %3
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseISt13move_iteratorIPxELb1EE7_S_baseES2_(i64*) #0 comdat align 2 {
  %2 = alloca %"class.std::move_iterator", align 8
  %3 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %2, i32 0, i32 0
  store i64* %0, i64** %3, align 8
  %4 = call i64* @_ZNKSt13move_iteratorIPxE4baseEv(%"class.std::move_iterator"* %2)
  ret i64* %4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNKSt13move_iteratorIPxE4baseEv(%"class.std::move_iterator"*) #4 comdat align 2 {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.201
  %6 = load i32, i32* @y.202
  %7 = add i32 %5, -1063666974
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -1063666974
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 101069951, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %65
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 101069951, label %19
    i32 -1910793911, label %27
    i32 -1712466030, label %58
    i32 -1004442786, label %60
  ]

; <label>:18:                                     ; preds = %16
  br label %65

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -1910793911, i32 -1004442786
  store i32 %26, i32* %15
  br label %65

; <label>:27:                                     ; preds = %16
  %28 = alloca %"class.std::move_iterator"*, align 8
  store %"class.std::move_iterator"* %0, %"class.std::move_iterator"** %28, align 8
  %29 = load %"class.std::move_iterator"*, %"class.std::move_iterator"** %28, align 8
  %30 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %29, i32 0, i32 0
  %31 = load i64*, i64** %30, align 8
  store i64* %31, i64** %2
  %32 = load i32, i32* @x.201
  %33 = load i32, i32* @y.202
  %34 = sub i32 0, 1
  %35 = add i32 %32, %34
  %36 = sub i32 %32, 1
  %37 = mul i32 %32, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %33, 10
  %41 = xor i1 %39, true
  %42 = xor i1 %40, true
  %43 = xor i1 false, true
  %44 = and i1 %41, false
  %45 = and i1 %39, %43
  %46 = and i1 %42, false
  %47 = and i1 %40, %43
  %48 = or i1 %44, %45
  %49 = or i1 %46, %47
  %50 = xor i1 %48, %49
  %51 = or i1 %41, %42
  %52 = xor i1 %51, true
  %53 = or i1 false, %43
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = or i1 %39, %40
  %57 = select i1 %55, i32 -1712466030, i32 -1004442786
  store i32 %57, i32* %15
  br label %65

; <label>:58:                                     ; preds = %16
  %59 = load volatile i64*, i64** %2
  ret i64* %59

; <label>:60:                                     ; preds = %16
  %61 = alloca %"class.std::move_iterator"*, align 8
  store %"class.std::move_iterator"* %0, %"class.std::move_iterator"** %61, align 8
  %62 = load %"class.std::move_iterator"*, %"class.std::move_iterator"** %61, align 8
  %63 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %62, i32 0, i32 0
  %64 = load i64*, i64** %63, align 8
  store i32 -1910793911, i32* %15
  br label %65

; <label>:65:                                     ; preds = %60, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt13move_iteratorIPxEC2ES0_(%"class.std::move_iterator"*, i64*) unnamed_addr #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.203
  %6 = load i32, i32* @y.204
  %7 = add i32 %5, -715457037
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -715457037
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -635302913, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %78
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -635302913, label %19
    i32 881663534, label %39
    i32 6216684, label %71
    i32 941460335, label %72
  ]

; <label>:18:                                     ; preds = %16
  br label %78

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 881663534, i32 941460335
  store i32 %38, i32* %15
  br label %78

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::move_iterator"*, align 8
  %41 = alloca i64*, align 8
  store %"class.std::move_iterator"* %0, %"class.std::move_iterator"** %40, align 8
  store i64* %1, i64** %41, align 8
  %42 = load %"class.std::move_iterator"*, %"class.std::move_iterator"** %40, align 8
  %43 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %42, i32 0, i32 0
  %44 = load i64*, i64** %41, align 8
  store i64* %44, i64** %43, align 8
  %45 = load i32, i32* @x.203
  %46 = load i32, i32* @y.204
  %47 = sub i32 0, 1
  %48 = add i32 %45, %47
  %49 = sub i32 %45, 1
  %50 = mul i32 %45, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %46, 10
  %54 = xor i1 %52, true
  %55 = xor i1 %53, true
  %56 = xor i1 true, true
  %57 = and i1 %54, true
  %58 = and i1 %52, %56
  %59 = and i1 %55, true
  %60 = and i1 %53, %56
  %61 = or i1 %57, %58
  %62 = or i1 %59, %60
  %63 = xor i1 %61, %62
  %64 = or i1 %54, %55
  %65 = xor i1 %64, true
  %66 = or i1 true, %56
  %67 = and i1 %65, %66
  %68 = or i1 %63, %67
  %69 = or i1 %52, %53
  %70 = select i1 %68, i32 6216684, i32 941460335
  store i32 %70, i32* %15
  br label %78

; <label>:71:                                     ; preds = %16
  ret void

; <label>:72:                                     ; preds = %16
  %73 = alloca %"class.std::move_iterator"*, align 8
  %74 = alloca i64*, align 8
  store %"class.std::move_iterator"* %0, %"class.std::move_iterator"** %73, align 8
  store i64* %1, i64** %74, align 8
  %75 = load %"class.std::move_iterator"*, %"class.std::move_iterator"** %73, align 8
  %76 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %75, i32 0, i32 0
  %77 = load i64*, i64** %74, align 8
  store i64* %77, i64** %76, align 8
  store i32 881663534, i32* %15
  br label %78

; <label>:78:                                     ; preds = %72, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt23__copy_move_backward_a2ILb1EPxS0_ET1_T0_S2_S1_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %7)
  %9 = load i64*, i64** %5, align 8
  %10 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %9)
  %11 = load i64*, i64** %6, align 8
  %12 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %11)
  %13 = call i64* @_ZSt22__copy_move_backward_aILb1EPxS0_ET1_T0_S2_S1_(i64* %8, i64* %10, i64* %12)
  ret i64* %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZSt12__miter_baseIPxENSt11_Miter_baseIT_E13iterator_typeES2_(i64*) #4 comdat {
  %2 = alloca i64*, align 8
  store i64* %0, i64** %2, align 8
  %3 = load i64*, i64** %2, align 8
  %4 = call i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %3)
  ret i64* %4
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt22__copy_move_backward_aILb1EPxS0_ET1_T0_S2_S1_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i8, align 1
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  store i8 1, i8* %7, align 1
  %8 = load i64*, i64** %4, align 8
  %9 = load i64*, i64** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call i64* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIxEEPT_PKS3_S6_S4_(i64* %8, i64* %9, i64* %10)
  ret i64* %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIxEEPT_PKS3_S6_S4_(i64*, i64*, i64*) #4 comdat align 2 {
  %4 = alloca i64
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64*, i64** %5, align 8
  %11 = ptrtoint i64* %9 to i64
  %12 = ptrtoint i64* %10 to i64
  %13 = add i64 %11, 580471816129037210
  %14 = sub i64 %13, %12
  %15 = sub i64 %14, 580471816129037210
  %16 = sub i64 %11, %12
  %17 = sdiv exact i64 %15, 8
  store i64 %17, i64* %8, align 8
  %18 = load i64, i64* %8, align 8
  store i64 %18, i64* %4
  %19 = alloca i32
  store i32 799020848, i32* %19
  br label %20

; <label>:20:                                     ; preds = %3, %46
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 799020848, label %23
    i32 1699597426, label %27
    i32 727123318, label %39
  ]

; <label>:22:                                     ; preds = %20
  br label %46

; <label>:23:                                     ; preds = %20
  %24 = load volatile i64, i64* %4
  %25 = icmp ne i64 %24, 0
  %26 = select i1 %25, i32 1699597426, i32 727123318
  store i32 %26, i32* %19
  br label %46

; <label>:27:                                     ; preds = %20
  %28 = load i64*, i64** %7, align 8
  %29 = load i64, i64* %8, align 8
  %30 = sub i64 0, %29
  %31 = add i64 0, %30
  %32 = sub i64 0, %29
  %33 = getelementptr inbounds i64, i64* %28, i64 %31
  %34 = bitcast i64* %33 to i8*
  %35 = load i64*, i64** %5, align 8
  %36 = bitcast i64* %35 to i8*
  %37 = load i64, i64* %8, align 8
  %38 = mul i64 8, %37
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %34, i8* %36, i64 %38, i32 8, i1 false)
  store i32 727123318, i32* %19
  br label %46

; <label>:39:                                     ; preds = %20
  %40 = load i64*, i64** %7, align 8
  %41 = load i64, i64* %8, align 8
  %42 = sub i64 0, %41
  %43 = add i64 0, %42
  %44 = sub i64 0, %41
  %45 = getelementptr inbounds i64, i64* %40, i64 %43
  ret i64* %45

; <label>:46:                                     ; preds = %27, %23, %22
  br label %20
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt8__fill_aIPxxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i64*, i64*, i64* dereferenceable(8)) #4 comdat {
  %4 = alloca i64*
  %5 = alloca i64**
  %6 = alloca i64**
  %7 = alloca i1
  %8 = alloca i1
  %9 = load i32, i32* @x.213
  %10 = load i32, i32* @y.214
  %11 = sub i32 0, 1
  %12 = add i32 %9, %11
  %13 = sub i32 %9, 1
  %14 = mul i32 %9, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %8
  %17 = icmp slt i32 %10, 10
  store i1 %17, i1* %7
  %18 = alloca i32
  store i32 76754819, i32* %18
  br label %19

; <label>:19:                                     ; preds = %3, %129
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 76754819, label %22
    i32 1711995524, label %30
    i32 1875750221, label %54
    i32 -1576923463, label %55
    i32 1495694171, label %62
    i32 2045098739, label %67
    i32 -1501985421, label %95
    i32 138847720, label %115
    i32 150793684, label %116
    i32 -616962756, label %117
    i32 544407497, label %124
  ]

; <label>:21:                                     ; preds = %19
  br label %129

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %8
  %24 = load volatile i1, i1* %7
  %25 = and i1 %23, %24
  %26 = xor i1 %23, %24
  %27 = or i1 %25, %26
  %28 = or i1 %23, %24
  %29 = select i1 %27, i32 1711995524, i32 -616962756
  store i32 %29, i32* %18
  br label %129

; <label>:30:                                     ; preds = %19
  %31 = alloca i64*, align 8
  store i64** %31, i64*** %6
  %32 = alloca i64*, align 8
  store i64** %32, i64*** %5
  %33 = alloca i64*, align 8
  %34 = alloca i64, align 8
  store i64* %34, i64** %4
  %35 = load volatile i64**, i64*** %6
  store i64* %0, i64** %35, align 8
  %36 = load volatile i64**, i64*** %5
  store i64* %1, i64** %36, align 8
  store i64* %2, i64** %33, align 8
  %37 = load i64*, i64** %33, align 8
  %38 = load i64, i64* %37, align 8
  %39 = load volatile i64*, i64** %4
  store i64 %38, i64* %39, align 8
  %40 = load i32, i32* @x.213
  %41 = load i32, i32* @y.214
  %42 = sub i32 0, 1
  %43 = add i32 %40, %42
  %44 = sub i32 %40, 1
  %45 = mul i32 %40, %43
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %41, 10
  %49 = and i1 %47, %48
  %50 = xor i1 %47, %48
  %51 = or i1 %49, %50
  %52 = or i1 %47, %48
  %53 = select i1 %51, i32 1875750221, i32 -616962756
  store i32 %53, i32* %18
  br label %129

; <label>:54:                                     ; preds = %19
  store i32 -1576923463, i32* %18
  br label %129

; <label>:55:                                     ; preds = %19
  %56 = load volatile i64**, i64*** %6
  %57 = load i64*, i64** %56, align 8
  %58 = load volatile i64**, i64*** %5
  %59 = load i64*, i64** %58, align 8
  %60 = icmp ne i64* %57, %59
  %61 = select i1 %60, i32 1495694171, i32 150793684
  store i32 %61, i32* %18
  br label %129

; <label>:62:                                     ; preds = %19
  %63 = load volatile i64*, i64** %4
  %64 = load i64, i64* %63, align 8
  %65 = load volatile i64**, i64*** %6
  %66 = load i64*, i64** %65, align 8
  store i64 %64, i64* %66, align 8
  store i32 2045098739, i32* %18
  br label %129

; <label>:67:                                     ; preds = %19
  %68 = load i32, i32* @x.213
  %69 = load i32, i32* @y.214
  %70 = add i32 %68, -698270529
  %71 = sub i32 %70, 1
  %72 = sub i32 %71, -698270529
  %73 = sub i32 %68, 1
  %74 = mul i32 %68, %72
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %69, 10
  %78 = xor i1 %76, true
  %79 = xor i1 %77, true
  %80 = xor i1 true, true
  %81 = and i1 %78, true
  %82 = and i1 %76, %80
  %83 = and i1 %79, true
  %84 = and i1 %77, %80
  %85 = or i1 %81, %82
  %86 = or i1 %83, %84
  %87 = xor i1 %85, %86
  %88 = or i1 %78, %79
  %89 = xor i1 %88, true
  %90 = or i1 true, %80
  %91 = and i1 %89, %90
  %92 = or i1 %87, %91
  %93 = or i1 %76, %77
  %94 = select i1 %92, i32 -1501985421, i32 544407497
  store i32 %94, i32* %18
  br label %129

; <label>:95:                                     ; preds = %19
  %96 = load volatile i64**, i64*** %6
  %97 = load i64*, i64** %96, align 8
  %98 = getelementptr inbounds i64, i64* %97, i32 1
  %99 = load volatile i64**, i64*** %6
  store i64* %98, i64** %99, align 8
  %100 = load i32, i32* @x.213
  %101 = load i32, i32* @y.214
  %102 = sub i32 %100, 2028323074
  %103 = sub i32 %102, 1
  %104 = add i32 %103, 2028323074
  %105 = sub i32 %100, 1
  %106 = mul i32 %100, %104
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %101, 10
  %110 = and i1 %108, %109
  %111 = xor i1 %108, %109
  %112 = or i1 %110, %111
  %113 = or i1 %108, %109
  %114 = select i1 %112, i32 138847720, i32 544407497
  store i32 %114, i32* %18
  br label %129

; <label>:115:                                    ; preds = %19
  store i32 -1576923463, i32* %18
  br label %129

; <label>:116:                                    ; preds = %19
  ret void

; <label>:117:                                    ; preds = %19
  %118 = alloca i64*, align 8
  %119 = alloca i64*, align 8
  %120 = alloca i64*, align 8
  %121 = alloca i64, align 8
  store i64* %0, i64** %118, align 8
  store i64* %1, i64** %119, align 8
  store i64* %2, i64** %120, align 8
  %122 = load i64*, i64** %120, align 8
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %121, align 8
  store i32 1711995524, i32* %18
  br label %129

; <label>:124:                                    ; preds = %19
  %125 = load volatile i64**, i64*** %6
  %126 = load i64*, i64** %125, align 8
  %127 = getelementptr inbounds i64, i64* %126, i32 1
  %128 = load volatile i64**, i64*** %6
  store i64* %127, i64** %128, align 8
  store i32 -1501985421, i32* %18
  br label %129

; <label>:129:                                    ; preds = %124, %117, %115, %95, %67, %62, %55, %54, %30, %22, %21
  br label %19
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt20uninitialized_fill_nIPxmxET_S1_T0_RKT1_(i64*, i64, i64* dereferenceable(8)) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i8, align 1
  store i64* %0, i64** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64* %2, i64** %6, align 8
  store i8 1, i8* %7, align 1
  %8 = load i64*, i64** %4, align 8
  %9 = load i64, i64* %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call i64* @_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPxmxEET_S3_T0_RKT1_(i64* %8, i64 %9, i64* dereferenceable(8) %10)
  ret i64* %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPxmxEET_S3_T0_RKT1_(i64*, i64, i64* dereferenceable(8)) #0 comdat align 2 {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.217
  %8 = load i32, i32* @y.218
  %9 = add i32 %7, -780202956
  %10 = sub i32 %9, 1
  %11 = sub i32 %10, -780202956
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 784506356, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %74
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 784506356, label %21
    i32 1724875021, label %29
    i32 -1312586634, label %64
    i32 879867160, label %66
  ]

; <label>:20:                                     ; preds = %18
  br label %74

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  %28 = select i1 %26, i32 1724875021, i32 879867160
  store i32 %28, i32* %17
  br label %74

; <label>:29:                                     ; preds = %18
  %30 = alloca i64*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64*, align 8
  store i64* %0, i64** %30, align 8
  store i64 %1, i64* %31, align 8
  store i64* %2, i64** %32, align 8
  %33 = load i64*, i64** %30, align 8
  %34 = load i64, i64* %31, align 8
  %35 = load i64*, i64** %32, align 8
  %36 = call i64* @_ZSt6fill_nIPxmxET_S1_T0_RKT1_(i64* %33, i64 %34, i64* dereferenceable(8) %35)
  store i64* %36, i64** %4
  %37 = load i32, i32* @x.217
  %38 = load i32, i32* @y.218
  %39 = sub i32 %37, -725604387
  %40 = sub i32 %39, 1
  %41 = add i32 %40, -725604387
  %42 = sub i32 %37, 1
  %43 = mul i32 %37, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %38, 10
  %47 = xor i1 %45, true
  %48 = xor i1 %46, true
  %49 = xor i1 true, true
  %50 = and i1 %47, true
  %51 = and i1 %45, %49
  %52 = and i1 %48, true
  %53 = and i1 %46, %49
  %54 = or i1 %50, %51
  %55 = or i1 %52, %53
  %56 = xor i1 %54, %55
  %57 = or i1 %47, %48
  %58 = xor i1 %57, true
  %59 = or i1 true, %49
  %60 = and i1 %58, %59
  %61 = or i1 %56, %60
  %62 = or i1 %45, %46
  %63 = select i1 %61, i32 -1312586634, i32 879867160
  store i32 %63, i32* %17
  br label %74

; <label>:64:                                     ; preds = %18
  %65 = load volatile i64*, i64** %4
  ret i64* %65

; <label>:66:                                     ; preds = %18
  %67 = alloca i64*, align 8
  %68 = alloca i64, align 8
  %69 = alloca i64*, align 8
  store i64* %0, i64** %67, align 8
  store i64 %1, i64* %68, align 8
  store i64* %2, i64** %69, align 8
  %70 = load i64*, i64** %67, align 8
  %71 = load i64, i64* %68, align 8
  %72 = load i64*, i64** %69, align 8
  %73 = call i64* @_ZSt6fill_nIPxmxET_S1_T0_RKT1_(i64* %70, i64 %71, i64* dereferenceable(8) %72)
  store i32 1724875021, i32* %17
  br label %74

; <label>:74:                                     ; preds = %66, %29, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt6fill_nIPxmxET_S1_T0_RKT1_(i64*, i64, i64* dereferenceable(8)) #0 comdat {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.219
  %8 = load i32, i32* @y.220
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 2006937411, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %63
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 2006937411, label %20
    i32 1097175611, label %28
    i32 1641229537, label %52
    i32 -1571309411, label %54
  ]

; <label>:19:                                     ; preds = %17
  br label %63

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 1097175611, i32 -1571309411
  store i32 %27, i32* %16
  br label %63

; <label>:28:                                     ; preds = %17
  %29 = alloca i64*, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64*, align 8
  store i64* %0, i64** %29, align 8
  store i64 %1, i64* %30, align 8
  store i64* %2, i64** %31, align 8
  %32 = load i64*, i64** %29, align 8
  %33 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %32)
  %34 = load i64, i64* %30, align 8
  %35 = load i64*, i64** %31, align 8
  %36 = call i64* @_ZSt10__fill_n_aIPxmxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(i64* %33, i64 %34, i64* dereferenceable(8) %35)
  store i64* %36, i64** %4
  %37 = load i32, i32* @x.219
  %38 = load i32, i32* @y.220
  %39 = sub i32 %37, 1552593012
  %40 = sub i32 %39, 1
  %41 = add i32 %40, 1552593012
  %42 = sub i32 %37, 1
  %43 = mul i32 %37, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %38, 10
  %47 = and i1 %45, %46
  %48 = xor i1 %45, %46
  %49 = or i1 %47, %48
  %50 = or i1 %45, %46
  %51 = select i1 %49, i32 1641229537, i32 -1571309411
  store i32 %51, i32* %16
  br label %63

; <label>:52:                                     ; preds = %17
  %53 = load volatile i64*, i64** %4
  ret i64* %53

; <label>:54:                                     ; preds = %17
  %55 = alloca i64*, align 8
  %56 = alloca i64, align 8
  %57 = alloca i64*, align 8
  store i64* %0, i64** %55, align 8
  store i64 %1, i64* %56, align 8
  store i64* %2, i64** %57, align 8
  %58 = load i64*, i64** %55, align 8
  %59 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %58)
  %60 = load i64, i64* %56, align 8
  %61 = load i64*, i64** %57, align 8
  %62 = call i64* @_ZSt10__fill_n_aIPxmxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(i64* %59, i64 %60, i64* dereferenceable(8) %61)
  store i32 1097175611, i32* %16
  br label %63

; <label>:63:                                     ; preds = %54, %28, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZSt10__fill_n_aIPxmxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(i64*, i64, i64* dereferenceable(8)) #4 comdat {
  %4 = alloca i64*
  %5 = alloca i64*
  %6 = alloca i64**
  %7 = alloca i1
  %8 = alloca i1
  %9 = load i32, i32* @x.221
  %10 = load i32, i32* @y.222
  %11 = sub i32 %9, -67281724
  %12 = sub i32 %11, 1
  %13 = add i32 %12, -67281724
  %14 = sub i32 %9, 1
  %15 = mul i32 %9, %13
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  store i1 %17, i1* %8
  %18 = icmp slt i32 %10, 10
  store i1 %18, i1* %7
  %19 = alloca i32
  store i32 320625436, i32* %19
  br label %20

; <label>:20:                                     ; preds = %3, %91
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 320625436, label %23
    i32 -1445289038, label %31
    i32 -930643068, label %57
    i32 1228214971, label %58
    i32 -1095702593, label %63
    i32 -216422990, label %68
    i32 -1328673185, label %79
    i32 1697180322, label %82
  ]

; <label>:22:                                     ; preds = %20
  br label %91

; <label>:23:                                     ; preds = %20
  %24 = load volatile i1, i1* %8
  %25 = load volatile i1, i1* %7
  %26 = and i1 %24, %25
  %27 = xor i1 %24, %25
  %28 = or i1 %26, %27
  %29 = or i1 %24, %25
  %30 = select i1 %28, i32 -1445289038, i32 1697180322
  store i32 %30, i32* %19
  br label %91

; <label>:31:                                     ; preds = %20
  %32 = alloca i64*, align 8
  store i64** %32, i64*** %6
  %33 = alloca i64, align 8
  %34 = alloca i64*, align 8
  %35 = alloca i64, align 8
  store i64* %35, i64** %5
  %36 = alloca i64, align 8
  store i64* %36, i64** %4
  %37 = load volatile i64**, i64*** %6
  store i64* %0, i64** %37, align 8
  store i64 %1, i64* %33, align 8
  store i64* %2, i64** %34, align 8
  %38 = load i64*, i64** %34, align 8
  %39 = load i64, i64* %38, align 8
  %40 = load volatile i64*, i64** %5
  store i64 %39, i64* %40, align 8
  %41 = load i64, i64* %33, align 8
  %42 = load volatile i64*, i64** %4
  store i64 %41, i64* %42, align 8
  %43 = load i32, i32* @x.221
  %44 = load i32, i32* @y.222
  %45 = sub i32 0, 1
  %46 = add i32 %43, %45
  %47 = sub i32 %43, 1
  %48 = mul i32 %43, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %44, 10
  %52 = and i1 %50, %51
  %53 = xor i1 %50, %51
  %54 = or i1 %52, %53
  %55 = or i1 %50, %51
  %56 = select i1 %54, i32 -930643068, i32 1697180322
  store i32 %56, i32* %19
  br label %91

; <label>:57:                                     ; preds = %20
  store i32 1228214971, i32* %19
  br label %91

; <label>:58:                                     ; preds = %20
  %59 = load volatile i64*, i64** %4
  %60 = load i64, i64* %59, align 8
  %61 = icmp ugt i64 %60, 0
  %62 = select i1 %61, i32 -1095702593, i32 -1328673185
  store i32 %62, i32* %19
  br label %91

; <label>:63:                                     ; preds = %20
  %64 = load volatile i64*, i64** %5
  %65 = load i64, i64* %64, align 8
  %66 = load volatile i64**, i64*** %6
  %67 = load i64*, i64** %66, align 8
  store i64 %65, i64* %67, align 8
  store i32 -216422990, i32* %19
  br label %91

; <label>:68:                                     ; preds = %20
  %69 = load volatile i64*, i64** %4
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 0, -1
  %72 = sub i64 %70, %71
  %73 = add i64 %70, -1
  %74 = load volatile i64*, i64** %4
  store i64 %72, i64* %74, align 8
  %75 = load volatile i64**, i64*** %6
  %76 = load i64*, i64** %75, align 8
  %77 = getelementptr inbounds i64, i64* %76, i32 1
  %78 = load volatile i64**, i64*** %6
  store i64* %77, i64** %78, align 8
  store i32 1228214971, i32* %19
  br label %91

; <label>:79:                                     ; preds = %20
  %80 = load volatile i64**, i64*** %6
  %81 = load i64*, i64** %80, align 8
  ret i64* %81

; <label>:82:                                     ; preds = %20
  %83 = alloca i64*, align 8
  %84 = alloca i64, align 8
  %85 = alloca i64*, align 8
  %86 = alloca i64, align 8
  %87 = alloca i64, align 8
  store i64* %0, i64** %83, align 8
  store i64 %1, i64* %84, align 8
  store i64* %2, i64** %85, align 8
  %88 = load i64*, i64** %85, align 8
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %86, align 8
  %90 = load i64, i64* %84, align 8
  store i64 %90, i64* %87, align 8
  store i32 -1445289038, i32* %19
  br label %91

; <label>:91:                                     ; preds = %82, %68, %63, %58, %57, %31, %23, %22
  br label %20
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %2, align 8
  %3 = load %"class.std::vector"*, %"class.std::vector"** %2, align 8
  %4 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %5 = call dereferenceable(1) %"class.std::allocator"* @_ZNKSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %4) #3
  %6 = call i64 @_ZNSt16allocator_traitsISaIxEE8max_sizeERKS0_(%"class.std::allocator"* dereferenceable(1) %5) #3
  ret i64 %6
}

; Function Attrs: noreturn
declare void @_ZSt20__throw_length_errorPKc(i8*) #9

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8), i64* dereferenceable(8)) #4 comdat {
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  store i64* %0, i64** %6, align 8
  store i64* %1, i64** %7, align 8
  %8 = load i64*, i64** %6, align 8
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %4
  %10 = load i64*, i64** %7, align 8
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %3
  %12 = alloca i32
  store i32 883873727, i32* %12
  br label %13

; <label>:13:                                     ; preds = %2, %27
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 883873727, label %16
    i32 -657131156, label %21
    i32 696639967, label %23
    i32 -1330639252, label %25
  ]

; <label>:15:                                     ; preds = %13
  br label %27

; <label>:16:                                     ; preds = %13
  %17 = load volatile i64, i64* %4
  %18 = load volatile i64, i64* %3
  %19 = icmp ult i64 %17, %18
  %20 = select i1 %19, i32 -657131156, i32 696639967
  store i32 %20, i32* %12
  br label %27

; <label>:21:                                     ; preds = %13
  %22 = load i64*, i64** %7, align 8
  store i64* %22, i64** %5, align 8
  store i32 -1330639252, i32* %12
  br label %27

; <label>:23:                                     ; preds = %13
  %24 = load i64*, i64** %6, align 8
  store i64* %24, i64** %5, align 8
  store i32 -1330639252, i32* %12
  br label %27

; <label>:25:                                     ; preds = %13
  %26 = load i64*, i64** %5, align 8
  ret i64* %26

; <label>:27:                                     ; preds = %23, %21, %16, %15
  br label %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNSt16allocator_traitsISaIxEE8max_sizeERKS0_(%"class.std::allocator"* dereferenceable(1)) #4 comdat align 2 {
  %2 = alloca i64
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.227
  %6 = load i32, i32* @y.228
  %7 = add i32 %5, -786155470
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -786155470
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1868046256, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %77
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1868046256, label %19
    i32 -2001861792, label %39
    i32 -686820836, label %70
    i32 2064930819, label %72
  ]

; <label>:18:                                     ; preds = %16
  br label %77

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -2001861792, i32 2064930819
  store i32 %38, i32* %15
  br label %77

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %40, align 8
  %41 = load %"class.std::allocator"*, %"class.std::allocator"** %40, align 8
  %42 = bitcast %"class.std::allocator"* %41 to %"class.__gnu_cxx::new_allocator"*
  %43 = call i64 @_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv(%"class.__gnu_cxx::new_allocator"* %42) #3
  store i64 %43, i64* %2
  %44 = load i32, i32* @x.227
  %45 = load i32, i32* @y.228
  %46 = sub i32 0, 1
  %47 = add i32 %44, %46
  %48 = sub i32 %44, 1
  %49 = mul i32 %44, %47
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %45, 10
  %53 = xor i1 %51, true
  %54 = xor i1 %52, true
  %55 = xor i1 false, true
  %56 = and i1 %53, false
  %57 = and i1 %51, %55
  %58 = and i1 %54, false
  %59 = and i1 %52, %55
  %60 = or i1 %56, %57
  %61 = or i1 %58, %59
  %62 = xor i1 %60, %61
  %63 = or i1 %53, %54
  %64 = xor i1 %63, true
  %65 = or i1 false, %55
  %66 = and i1 %64, %65
  %67 = or i1 %62, %66
  %68 = or i1 %51, %52
  %69 = select i1 %67, i32 -686820836, i32 2064930819
  store i32 %69, i32* %15
  br label %77

; <label>:70:                                     ; preds = %16
  %71 = load volatile i64, i64* %2
  ret i64 %71

; <label>:72:                                     ; preds = %16
  %73 = alloca %"class.std::allocator"*, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %73, align 8
  %74 = load %"class.std::allocator"*, %"class.std::allocator"** %73, align 8
  %75 = bitcast %"class.std::allocator"* %74 to %"class.__gnu_cxx::new_allocator"*
  %76 = call i64 @_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv(%"class.__gnu_cxx::new_allocator"* %75) #3
  store i32 -2001861792, i32* %15
  br label %77

; <label>:77:                                     ; preds = %72, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator"* @_ZNKSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"*) #4 comdat align 2 {
  %2 = alloca %"class.std::allocator"*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.229
  %6 = load i32, i32* @y.230
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -49787155, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %64
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -49787155, label %18
    i32 -1544310589, label %38
    i32 188650028, label %57
    i32 1229168450, label %59
  ]

; <label>:17:                                     ; preds = %15
  br label %64

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 true, true
  %24 = and i1 %21, true
  %25 = and i1 %19, %23
  %26 = and i1 %22, true
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 true, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 -1544310589, i32 1229168450
  store i32 %37, i32* %14
  br label %64

; <label>:38:                                     ; preds = %15
  %39 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %39, align 8
  %40 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %39, align 8
  %41 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %40, i32 0, i32 0
  %42 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %41 to %"class.std::allocator"*
  store %"class.std::allocator"* %42, %"class.std::allocator"** %2
  %43 = load i32, i32* @x.229
  %44 = load i32, i32* @y.230
  %45 = sub i32 0, 1
  %46 = add i32 %43, %45
  %47 = sub i32 %43, 1
  %48 = mul i32 %43, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %44, 10
  %52 = and i1 %50, %51
  %53 = xor i1 %50, %51
  %54 = or i1 %52, %53
  %55 = or i1 %50, %51
  %56 = select i1 %54, i32 188650028, i32 1229168450
  store i32 %56, i32* %14
  br label %64

; <label>:57:                                     ; preds = %15
  %58 = load volatile %"class.std::allocator"*, %"class.std::allocator"** %2
  ret %"class.std::allocator"* %58

; <label>:59:                                     ; preds = %15
  %60 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %60, align 8
  %61 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %60, align 8
  %62 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %61, i32 0, i32 0
  %63 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %62 to %"class.std::allocator"*
  store i32 -1544310589, i32* %14
  br label %64

; <label>:64:                                     ; preds = %59, %38, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv(%"class.__gnu_cxx::new_allocator"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %2, align 8
  ret i64 2305843009213693951
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt16allocator_traitsISaIxEE8allocateERS0_m(%"class.std::allocator"* dereferenceable(1), i64) #0 comdat align 2 {
  %3 = alloca i64*
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.233
  %7 = load i32, i32* @y.234
  %8 = add i32 %6, 921439645
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, 921439645
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 274680092, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %71
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 274680092, label %20
    i32 -1827059054, label %28
    i32 430914678, label %62
    i32 534546610, label %64
  ]

; <label>:19:                                     ; preds = %17
  br label %71

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 -1827059054, i32 534546610
  store i32 %27, i32* %16
  br label %71

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.std::allocator"*, align 8
  %30 = alloca i64, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %29, align 8
  store i64 %1, i64* %30, align 8
  %31 = load %"class.std::allocator"*, %"class.std::allocator"** %29, align 8
  %32 = bitcast %"class.std::allocator"* %31 to %"class.__gnu_cxx::new_allocator"*
  %33 = load i64, i64* %30, align 8
  %34 = call i64* @_ZN9__gnu_cxx13new_allocatorIxE8allocateEmPKv(%"class.__gnu_cxx::new_allocator"* %32, i64 %33, i8* null)
  store i64* %34, i64** %3
  %35 = load i32, i32* @x.233
  %36 = load i32, i32* @y.234
  %37 = sub i32 %35, 1333593280
  %38 = sub i32 %37, 1
  %39 = add i32 %38, 1333593280
  %40 = sub i32 %35, 1
  %41 = mul i32 %35, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %36, 10
  %45 = xor i1 %43, true
  %46 = xor i1 %44, true
  %47 = xor i1 true, true
  %48 = and i1 %45, true
  %49 = and i1 %43, %47
  %50 = and i1 %46, true
  %51 = and i1 %44, %47
  %52 = or i1 %48, %49
  %53 = or i1 %50, %51
  %54 = xor i1 %52, %53
  %55 = or i1 %45, %46
  %56 = xor i1 %55, true
  %57 = or i1 true, %47
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  %60 = or i1 %43, %44
  %61 = select i1 %59, i32 430914678, i32 534546610
  store i32 %61, i32* %16
  br label %71

; <label>:62:                                     ; preds = %17
  %63 = load volatile i64*, i64** %3
  ret i64* %63

; <label>:64:                                     ; preds = %17
  %65 = alloca %"class.std::allocator"*, align 8
  %66 = alloca i64, align 8
  store %"class.std::allocator"* %0, %"class.std::allocator"** %65, align 8
  store i64 %1, i64* %66, align 8
  %67 = load %"class.std::allocator"*, %"class.std::allocator"** %65, align 8
  %68 = bitcast %"class.std::allocator"* %67 to %"class.__gnu_cxx::new_allocator"*
  %69 = load i64, i64* %66, align 8
  %70 = call i64* @_ZN9__gnu_cxx13new_allocatorIxE8allocateEmPKv(%"class.__gnu_cxx::new_allocator"* %68, i64 %69, i8* null)
  store i32 -1827059054, i32* %16
  br label %71

; <label>:71:                                     ; preds = %64, %28, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZN9__gnu_cxx13new_allocatorIxE8allocateEmPKv(%"class.__gnu_cxx::new_allocator"*, i64, i8*) #0 comdat align 2 {
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca %"class.__gnu_cxx::new_allocator"*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator"* %0, %"class.__gnu_cxx::new_allocator"** %6, align 8
  store i64 %1, i64* %7, align 8
  store i8* %2, i8** %8, align 8
  %9 = load %"class.__gnu_cxx::new_allocator"*, %"class.__gnu_cxx::new_allocator"** %6, align 8
  %10 = load i64, i64* %7, align 8
  store i64 %10, i64* %5
  %11 = call i64 @_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv(%"class.__gnu_cxx::new_allocator"* %9) #3
  store i64 %11, i64* %4
  %12 = alloca i32
  store i32 -1137137349, i32* %12
  br label %13

; <label>:13:                                     ; preds = %3, %27
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 -1137137349, label %16
    i32 125948510, label %21
    i32 421928259, label %22
  ]

; <label>:15:                                     ; preds = %13
  br label %27

; <label>:16:                                     ; preds = %13
  %17 = load volatile i64, i64* %5
  %18 = load volatile i64, i64* %4
  %19 = icmp ugt i64 %17, %18
  %20 = select i1 %19, i32 125948510, i32 421928259
  store i32 %20, i32* %12
  br label %27

; <label>:21:                                     ; preds = %13
  call void @_ZSt17__throw_bad_allocv() #14
  unreachable

; <label>:22:                                     ; preds = %13
  %23 = load i64, i64* %7, align 8
  %24 = mul i64 %23, 8
  %25 = call i8* @_Znwm(i64 %24)
  %26 = bitcast i8* %25 to i64*
  ret i64* %26

; <label>:27:                                     ; preds = %16, %15
  br label %13
}

; Function Attrs: noreturn
declare void @_ZSt17__throw_bad_allocv() #9

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #10

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_(i64*) #0 comdat {
  %2 = alloca %"class.std::move_iterator", align 8
  %3 = alloca i64*, align 8
  store i64* %0, i64** %3, align 8
  %4 = load i64*, i64** %3, align 8
  call void @_ZNSt13move_iteratorIPxEC2ES0_(%"class.std::move_iterator"* %2, i64* %4)
  %5 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %2, i32 0, i32 0
  %6 = load i64*, i64** %5, align 8
  ret i64* %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator"*, i64** dereferenceable(8)) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %4 = alloca i64**, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %3, align 8
  store i64** %1, i64*** %4, align 8
  %5 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %3, align 8
  %6 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  %7 = load i64**, i64*** %4, align 8
  %8 = load i64*, i64** %7, align 8
  store i64* %8, i64** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8)) #4 comdat {
  %2 = alloca i64*, align 8
  store i64* %0, i64** %2, align 8
  %3 = load i64*, i64** %2, align 8
  ret i64* %3
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt6__sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %6 = alloca %struct.ball**
  %7 = alloca %struct.ball**
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %9 = alloca i1
  %10 = alloca i1
  %11 = load i32, i32* @x.243
  %12 = load i32, i32* @y.244
  %13 = sub i32 0, 1
  %14 = add i32 %11, %13
  %15 = sub i32 %11, 1
  %16 = mul i32 %11, %14
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  store i1 %18, i1* %10
  %19 = icmp slt i32 %12, 10
  store i1 %19, i1* %9
  %20 = alloca i32
  store i32 1838822492, i32* %20
  br label %21

; <label>:21:                                     ; preds = %2, %240
  %22 = load i32, i32* %20
  switch i32 %22, label %23 [
    i32 1838822492, label %24
    i32 488967379, label %32
    i32 1058304374, label %60
    i32 185223901, label %63
    i32 -1499639617, label %91
    i32 1040949049, label %147
    i32 -1633070681, label %148
    i32 -1209819676, label %149
    i32 -1026181591, label %158
  ]

; <label>:23:                                     ; preds = %21
  br label %240

; <label>:24:                                     ; preds = %21
  %25 = load volatile i1, i1* %10
  %26 = load volatile i1, i1* %9
  %27 = and i1 %25, %26
  %28 = xor i1 %25, %26
  %29 = or i1 %27, %28
  %30 = or i1 %25, %26
  %31 = select i1 %29, i32 488967379, i32 -1209819676
  store i32 %31, i32* %20
  br label %240

; <label>:32:                                     ; preds = %21
  %33 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %33, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8
  %34 = alloca %struct.ball*, align 8
  store %struct.ball** %34, %struct.ball*** %7
  %35 = alloca %struct.ball*, align 8
  store %struct.ball** %35, %struct.ball*** %6
  %36 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %36, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %5
  %37 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %37, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4
  %38 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %0, %struct.ball** %38, align 8
  %39 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %1, %struct.ball** %39, align 8
  %40 = load volatile %struct.ball**, %struct.ball*** %7
  %41 = load %struct.ball*, %struct.ball** %40, align 8
  %42 = load volatile %struct.ball**, %struct.ball*** %6
  %43 = load %struct.ball*, %struct.ball** %42, align 8
  %44 = icmp ne %struct.ball* %41, %43
  store i1 %44, i1* %3
  %45 = load i32, i32* @x.243
  %46 = load i32, i32* @y.244
  %47 = sub i32 %45, -23030221
  %48 = sub i32 %47, 1
  %49 = add i32 %48, -23030221
  %50 = sub i32 %45, 1
  %51 = mul i32 %45, %49
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %46, 10
  %55 = and i1 %53, %54
  %56 = xor i1 %53, %54
  %57 = or i1 %55, %56
  %58 = or i1 %53, %54
  %59 = select i1 %57, i32 1058304374, i32 -1209819676
  store i32 %59, i32* %20
  br label %240

; <label>:60:                                     ; preds = %21
  %61 = load volatile i1, i1* %3
  %62 = select i1 %61, i32 185223901, i32 -1633070681
  store i32 %62, i32* %20
  br label %240

; <label>:63:                                     ; preds = %21
  %64 = load i32, i32* @x.243
  %65 = load i32, i32* @y.244
  %66 = add i32 %64, 1517592976
  %67 = sub i32 %66, 1
  %68 = sub i32 %67, 1517592976
  %69 = sub i32 %64, 1
  %70 = mul i32 %64, %68
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %65, 10
  %74 = xor i1 %72, true
  %75 = xor i1 %73, true
  %76 = xor i1 false, true
  %77 = and i1 %74, false
  %78 = and i1 %72, %76
  %79 = and i1 %75, false
  %80 = and i1 %73, %76
  %81 = or i1 %77, %78
  %82 = or i1 %79, %80
  %83 = xor i1 %81, %82
  %84 = or i1 %74, %75
  %85 = xor i1 %84, true
  %86 = or i1 false, %76
  %87 = and i1 %85, %86
  %88 = or i1 %83, %87
  %89 = or i1 %72, %73
  %90 = select i1 %88, i32 -1499639617, i32 -1026181591
  store i32 %90, i32* %20
  br label %240

; <label>:91:                                     ; preds = %21
  %92 = load volatile %struct.ball**, %struct.ball*** %7
  %93 = load %struct.ball*, %struct.ball** %92, align 8
  %94 = load volatile %struct.ball**, %struct.ball*** %6
  %95 = load %struct.ball*, %struct.ball** %94, align 8
  %96 = load volatile %struct.ball**, %struct.ball*** %6
  %97 = load %struct.ball*, %struct.ball** %96, align 8
  %98 = load volatile %struct.ball**, %struct.ball*** %7
  %99 = load %struct.ball*, %struct.ball** %98, align 8
  %100 = ptrtoint %struct.ball* %97 to i64
  %101 = ptrtoint %struct.ball* %99 to i64
  %102 = add i64 %100, -3254246670527279700
  %103 = sub i64 %102, %101
  %104 = sub i64 %103, -3254246670527279700
  %105 = sub i64 %100, %101
  %106 = sdiv exact i64 %104, 16
  %107 = call i64 @_ZSt4__lgl(i64 %106)
  %108 = mul nsw i64 %107, 2
  %109 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %5
  %110 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %109 to i8*
  %111 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8
  %112 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %110, i8* %112, i64 1, i32 1, i1 false)
  call void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_T1_"(%struct.ball* %93, %struct.ball* %95, i64 %108)
  %113 = load volatile %struct.ball**, %struct.ball*** %7
  %114 = load %struct.ball*, %struct.ball** %113, align 8
  %115 = load volatile %struct.ball**, %struct.ball*** %6
  %116 = load %struct.ball*, %struct.ball** %115, align 8
  %117 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4
  %118 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %117 to i8*
  %119 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8
  %120 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %119 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %118, i8* %120, i64 1, i32 1, i1 false)
  call void @"_ZSt22__final_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %114, %struct.ball* %116)
  %121 = load i32, i32* @x.243
  %122 = load i32, i32* @y.244
  %123 = sub i32 0, 1
  %124 = add i32 %121, %123
  %125 = sub i32 %121, 1
  %126 = mul i32 %121, %124
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %122, 10
  %130 = xor i1 %128, true
  %131 = xor i1 %129, true
  %132 = xor i1 false, true
  %133 = and i1 %130, false
  %134 = and i1 %128, %132
  %135 = and i1 %131, false
  %136 = and i1 %129, %132
  %137 = or i1 %133, %134
  %138 = or i1 %135, %136
  %139 = xor i1 %137, %138
  %140 = or i1 %130, %131
  %141 = xor i1 %140, true
  %142 = or i1 false, %132
  %143 = and i1 %141, %142
  %144 = or i1 %139, %143
  %145 = or i1 %128, %129
  %146 = select i1 %144, i32 1040949049, i32 -1026181591
  store i32 %146, i32* %20
  br label %240

; <label>:147:                                    ; preds = %21
  store i32 -1633070681, i32* %20
  br label %240

; <label>:148:                                    ; preds = %21
  ret void

; <label>:149:                                    ; preds = %21
  %150 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %151 = alloca %struct.ball*, align 8
  %152 = alloca %struct.ball*, align 8
  %153 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %154 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %151, align 8
  store %struct.ball* %1, %struct.ball** %152, align 8
  %155 = load %struct.ball*, %struct.ball** %151, align 8
  %156 = load %struct.ball*, %struct.ball** %152, align 8
  %157 = icmp ne %struct.ball* %155, %156
  store i32 488967379, i32* %20
  br label %240

; <label>:158:                                    ; preds = %21
  %159 = load volatile %struct.ball**, %struct.ball*** %7
  %160 = load %struct.ball*, %struct.ball** %159, align 8
  %161 = load volatile %struct.ball**, %struct.ball*** %6
  %162 = load %struct.ball*, %struct.ball** %161, align 8
  %163 = load volatile %struct.ball**, %struct.ball*** %6
  %164 = load %struct.ball*, %struct.ball** %163, align 8
  %165 = load volatile %struct.ball**, %struct.ball*** %7
  %166 = load %struct.ball*, %struct.ball** %165, align 8
  %167 = ptrtoint %struct.ball* %164 to i64
  %168 = ptrtoint %struct.ball* %166 to i64
  %169 = add i64 %167, 6618091344967478361
  %170 = sub i64 %169, %168
  %171 = sub i64 %170, 6618091344967478361
  %172 = sub i64 %167, %168
  %173 = mul i64 %171, %168
  %174 = shl i64 %167, %168
  %175 = sub i64 0, %168
  %176 = add i64 %167, %175
  %177 = sub i64 %167, %168
  %178 = mul i64 %176, %168
  %179 = sub i64 0, %168
  %180 = add i64 %167, %179
  %181 = sub i64 %167, %168
  %182 = sub i64 0, 6572482570672562240
  %183 = sub i64 %182, %180
  %184 = add i64 %183, 6572482570672562240
  %185 = sub i64 0, %180
  %186 = add i64 %184, -3696885554125272715
  %187 = add i64 %186, 16
  %188 = sub i64 %187, -3696885554125272715
  %189 = add i64 %184, 16
  %190 = sub i64 0, 16
  %191 = add i64 %180, %190
  %192 = sub i64 %180, 16
  %193 = mul i64 %191, 16
  %194 = sub i64 0, 16
  %195 = add i64 %180, %194
  %196 = sub i64 %180, 16
  %197 = mul i64 %195, 16
  %198 = shl i64 %180, 16
  %199 = sub i64 0, 3303212665580814801
  %200 = sub i64 %199, %180
  %201 = add i64 %200, 3303212665580814801
  %202 = sub i64 0, %180
  %203 = add i64 %201, 6258899143202474032
  %204 = add i64 %203, 16
  %205 = sub i64 %204, 6258899143202474032
  %206 = add i64 %201, 16
  %207 = add i64 0, -1275864172617618373
  %208 = sub i64 %207, %180
  %209 = sub i64 %208, -1275864172617618373
  %210 = sub i64 0, %180
  %211 = sub i64 0, %209
  %212 = sub i64 0, 16
  %213 = add i64 %211, %212
  %214 = sub i64 0, %213
  %215 = add i64 %209, 16
  %216 = add i64 0, -474192016677608958
  %217 = sub i64 %216, %180
  %218 = sub i64 %217, -474192016677608958
  %219 = sub i64 0, %180
  %220 = add i64 %218, 5863329213059865033
  %221 = add i64 %220, 16
  %222 = sub i64 %221, 5863329213059865033
  %223 = add i64 %218, 16
  %224 = sdiv exact i64 %180, 16
  %225 = call i64 @_ZSt4__lgl(i64 %224)
  %226 = shl i64 %225, 2
  %227 = mul nsw i64 %225, 2
  %228 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %5
  %229 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %228 to i8*
  %230 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8
  %231 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %229, i8* %231, i64 1, i32 1, i1 false)
  call void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_T1_"(%struct.ball* %160, %struct.ball* %162, i64 %227)
  %232 = load volatile %struct.ball**, %struct.ball*** %7
  %233 = load %struct.ball*, %struct.ball** %232, align 8
  %234 = load volatile %struct.ball**, %struct.ball*** %6
  %235 = load %struct.ball*, %struct.ball** %234, align 8
  %236 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %4
  %237 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %236 to i8*
  %238 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8
  %239 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %238 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %237, i8* %239, i64 1, i32 1, i1 false)
  call void @"_ZSt22__final_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %233, %struct.ball* %235)
  store i32 -1499639617, i32* %20
  br label %240

; <label>:240:                                    ; preds = %158, %149, %147, %91, %63, %60, %32, %24, %23
  br label %21
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ4mainE3$_0EENS0_15_Iter_comp_iterIT_EES4_"() #0 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %2 = alloca %class.anon, align 1
  %3 = alloca %class.anon, align 1
  call void @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %1)
  ret void
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_T1_"(%struct.ball*, %struct.ball*, i64) #0 {
  %4 = alloca i1
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %10 = alloca %struct.ball*, align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %6, align 8
  store %struct.ball* %1, %struct.ball** %7, align 8
  store i64 %2, i64* %8, align 8
  %13 = alloca i32
  store i32 630321613, i32* %13
  br label %14

; <label>:14:                                     ; preds = %3, %163
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 630321613, label %17
    i32 -1759131382, label %33
    i32 1185292350, label %59
    i32 803997865, label %62
    i32 1363351619, label %66
    i32 -1893161987, label %72
    i32 2024923249, label %89
    i32 -1620899027, label %104
    i32 252862387, label %132
    i32 -1365456584, label %133
    i32 864929236, label %162
  ]

; <label>:16:                                     ; preds = %14
  br label %163

; <label>:17:                                     ; preds = %14
  %18 = load i32, i32* @x.247
  %19 = load i32, i32* @y.248
  %20 = add i32 %18, -960179717
  %21 = sub i32 %20, 1
  %22 = sub i32 %21, -960179717
  %23 = sub i32 %18, 1
  %24 = mul i32 %18, %22
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %19, 10
  %28 = and i1 %26, %27
  %29 = xor i1 %26, %27
  %30 = or i1 %28, %29
  %31 = or i1 %26, %27
  %32 = select i1 %30, i32 -1759131382, i32 -1365456584
  store i32 %32, i32* %13
  br label %163

; <label>:33:                                     ; preds = %14
  %34 = load %struct.ball*, %struct.ball** %7, align 8
  %35 = load %struct.ball*, %struct.ball** %6, align 8
  %36 = ptrtoint %struct.ball* %34 to i64
  %37 = ptrtoint %struct.ball* %35 to i64
  %38 = sub i64 %36, -7676842934072095926
  %39 = sub i64 %38, %37
  %40 = add i64 %39, -7676842934072095926
  %41 = sub i64 %36, %37
  %42 = sdiv exact i64 %40, 16
  %43 = icmp sgt i64 %42, 16
  store i1 %43, i1* %4
  %44 = load i32, i32* @x.247
  %45 = load i32, i32* @y.248
  %46 = add i32 %44, 1828256621
  %47 = sub i32 %46, 1
  %48 = sub i32 %47, 1828256621
  %49 = sub i32 %44, 1
  %50 = mul i32 %44, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %45, 10
  %54 = and i1 %52, %53
  %55 = xor i1 %52, %53
  %56 = or i1 %54, %55
  %57 = or i1 %52, %53
  %58 = select i1 %56, i32 1185292350, i32 -1365456584
  store i32 %58, i32* %13
  br label %163

; <label>:59:                                     ; preds = %14
  %60 = load volatile i1, i1* %4
  %61 = select i1 %60, i32 803997865, i32 2024923249
  store i32 %61, i32* %13
  br label %163

; <label>:62:                                     ; preds = %14
  %63 = load i64, i64* %8, align 8
  %64 = icmp eq i64 %63, 0
  %65 = select i1 %64, i32 1363351619, i32 -1893161987
  store i32 %65, i32* %13
  br label %163

; <label>:66:                                     ; preds = %14
  %67 = load %struct.ball*, %struct.ball** %6, align 8
  %68 = load %struct.ball*, %struct.ball** %7, align 8
  %69 = load %struct.ball*, %struct.ball** %7, align 8
  %70 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9 to i8*
  %71 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 1, i32 1, i1 false)
  call void @"_ZSt14__partial_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_T0_"(%struct.ball* %67, %struct.ball* %68, %struct.ball* %69)
  store i32 2024923249, i32* %13
  br label %163

; <label>:72:                                     ; preds = %14
  %73 = load i64, i64* %8, align 8
  %74 = add i64 %73, 4661329082581587466
  %75 = add i64 %74, -1
  %76 = sub i64 %75, 4661329082581587466
  %77 = add nsw i64 %73, -1
  store i64 %76, i64* %8, align 8
  %78 = load %struct.ball*, %struct.ball** %6, align 8
  %79 = load %struct.ball*, %struct.ball** %7, align 8
  %80 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %81 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %80, i8* %81, i64 1, i32 1, i1 false)
  %82 = call %struct.ball* @"_ZSt27__unguarded_partition_pivotIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEET_S7_S7_T0_"(%struct.ball* %78, %struct.ball* %79)
  store %struct.ball* %82, %struct.ball** %10, align 8
  %83 = load %struct.ball*, %struct.ball** %10, align 8
  %84 = load %struct.ball*, %struct.ball** %7, align 8
  %85 = load i64, i64* %8, align 8
  %86 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12 to i8*
  %87 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 1, i32 1, i1 false)
  call void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_T1_"(%struct.ball* %83, %struct.ball* %84, i64 %85)
  %88 = load %struct.ball*, %struct.ball** %10, align 8
  store %struct.ball* %88, %struct.ball** %7, align 8
  store i32 630321613, i32* %13
  br label %163

; <label>:89:                                     ; preds = %14
  %90 = load i32, i32* @x.247
  %91 = load i32, i32* @y.248
  %92 = sub i32 0, 1
  %93 = add i32 %90, %92
  %94 = sub i32 %90, 1
  %95 = mul i32 %90, %93
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %91, 10
  %99 = and i1 %97, %98
  %100 = xor i1 %97, %98
  %101 = or i1 %99, %100
  %102 = or i1 %97, %98
  %103 = select i1 %101, i32 -1620899027, i32 864929236
  store i32 %103, i32* %13
  br label %163

; <label>:104:                                    ; preds = %14
  %105 = load i32, i32* @x.247
  %106 = load i32, i32* @y.248
  %107 = add i32 %105, -267820210
  %108 = sub i32 %107, 1
  %109 = sub i32 %108, -267820210
  %110 = sub i32 %105, 1
  %111 = mul i32 %105, %109
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %106, 10
  %115 = xor i1 %113, true
  %116 = xor i1 %114, true
  %117 = xor i1 false, true
  %118 = and i1 %115, false
  %119 = and i1 %113, %117
  %120 = and i1 %116, false
  %121 = and i1 %114, %117
  %122 = or i1 %118, %119
  %123 = or i1 %120, %121
  %124 = xor i1 %122, %123
  %125 = or i1 %115, %116
  %126 = xor i1 %125, true
  %127 = or i1 false, %117
  %128 = and i1 %126, %127
  %129 = or i1 %124, %128
  %130 = or i1 %113, %114
  %131 = select i1 %129, i32 252862387, i32 864929236
  store i32 %131, i32* %13
  br label %163

; <label>:132:                                    ; preds = %14
  ret void

; <label>:133:                                    ; preds = %14
  %134 = load %struct.ball*, %struct.ball** %7, align 8
  %135 = load %struct.ball*, %struct.ball** %6, align 8
  %136 = ptrtoint %struct.ball* %134 to i64
  %137 = ptrtoint %struct.ball* %135 to i64
  %138 = shl i64 %136, %137
  %139 = sub i64 0, %137
  %140 = add i64 %136, %139
  %141 = sub i64 %136, %137
  %142 = mul i64 %140, %137
  %143 = shl i64 %136, %137
  %144 = add i64 %136, 1245319882800638490
  %145 = sub i64 %144, %137
  %146 = sub i64 %145, 1245319882800638490
  %147 = sub i64 %136, %137
  %148 = mul i64 %146, %137
  %149 = shl i64 %136, %137
  %150 = shl i64 %136, %137
  %151 = sub i64 0, %137
  %152 = add i64 %136, %151
  %153 = sub i64 %136, %137
  %154 = add i64 %152, -3890702876229334032
  %155 = sub i64 %154, 16
  %156 = sub i64 %155, -3890702876229334032
  %157 = sub i64 %152, 16
  %158 = mul i64 %156, 16
  %159 = shl i64 %152, 16
  %160 = sdiv exact i64 %152, 16
  %161 = icmp sgt i64 %160, 16
  store i32 -1759131382, i32* %13
  br label %163

; <label>:162:                                    ; preds = %14
  store i32 -1620899027, i32* %13
  br label %163

; <label>:163:                                    ; preds = %162, %133, %104, %89, %72, %66, %62, %59, %33, %17, %16
  br label %14
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt4__lgl(i64) #4 comdat {
  %2 = alloca i64
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.249
  %6 = load i32, i32* @y.250
  %7 = add i32 %5, 839801939
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, 839801939
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 83303270, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %82
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 83303270, label %19
    i32 -829787024, label %27
    i32 2065511263, label %64
    i32 -341402298, label %66
  ]

; <label>:18:                                     ; preds = %16
  br label %82

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -829787024, i32 -341402298
  store i32 %26, i32* %15
  br label %82

; <label>:27:                                     ; preds = %16
  %28 = alloca i64, align 8
  store i64 %0, i64* %28, align 8
  %29 = load i64, i64* %28, align 8
  %30 = call i64 @llvm.ctlz.i64(i64 %29, i1 true)
  %31 = trunc i64 %30 to i32
  %32 = sext i32 %31 to i64
  %33 = add i64 63, -2254636614852925033
  %34 = sub i64 %33, %32
  %35 = sub i64 %34, -2254636614852925033
  %36 = sub i64 63, %32
  store i64 %35, i64* %2
  %37 = load i32, i32* @x.249
  %38 = load i32, i32* @y.250
  %39 = sub i32 %37, -273711019
  %40 = sub i32 %39, 1
  %41 = add i32 %40, -273711019
  %42 = sub i32 %37, 1
  %43 = mul i32 %37, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %38, 10
  %47 = xor i1 %45, true
  %48 = xor i1 %46, true
  %49 = xor i1 false, true
  %50 = and i1 %47, false
  %51 = and i1 %45, %49
  %52 = and i1 %48, false
  %53 = and i1 %46, %49
  %54 = or i1 %50, %51
  %55 = or i1 %52, %53
  %56 = xor i1 %54, %55
  %57 = or i1 %47, %48
  %58 = xor i1 %57, true
  %59 = or i1 false, %49
  %60 = and i1 %58, %59
  %61 = or i1 %56, %60
  %62 = or i1 %45, %46
  %63 = select i1 %61, i32 2065511263, i32 -341402298
  store i32 %63, i32* %15
  br label %82

; <label>:64:                                     ; preds = %16
  %65 = load volatile i64, i64* %2
  ret i64 %65

; <label>:66:                                     ; preds = %16
  %67 = alloca i64, align 8
  store i64 %0, i64* %67, align 8
  %68 = load i64, i64* %67, align 8
  %69 = call i64 @llvm.ctlz.i64(i64 %68, i1 true)
  %70 = trunc i64 %69 to i32
  %71 = sext i32 %70 to i64
  %72 = sub i64 0, -6602737237160850641
  %73 = sub i64 %72, 63
  %74 = add i64 %73, -6602737237160850641
  %75 = sub i64 0, 63
  %76 = sub i64 0, %71
  %77 = sub i64 %74, %76
  %78 = add i64 %74, %71
  %79 = sub i64 0, %71
  %80 = add i64 63, %79
  %81 = sub i64 63, %71
  store i32 -829787024, i32* %15
  br label %82

; <label>:82:                                     ; preds = %66, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt22__final_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i64
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  %11 = load %struct.ball*, %struct.ball** %5, align 8
  %12 = ptrtoint %struct.ball* %10 to i64
  %13 = ptrtoint %struct.ball* %11 to i64
  %14 = add i64 %12, 7169498574769855038
  %15 = sub i64 %14, %13
  %16 = sub i64 %15, 7169498574769855038
  %17 = sub i64 %12, %13
  %18 = sdiv exact i64 %16, 16
  store i64 %18, i64* %3
  %19 = alloca i32
  store i32 1266850294, i32* %19
  br label %20

; <label>:20:                                     ; preds = %2, %124
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 1266850294, label %23
    i32 1375625405, label %27
    i32 -2133565621, label %38
    i32 1529974455, label %54
    i32 1598732260, label %73
    i32 -1993586584, label %74
    i32 -1366603210, label %102
    i32 14702206, label %117
    i32 -835315608, label %118
    i32 715972473, label %123
  ]

; <label>:22:                                     ; preds = %20
  br label %124

; <label>:23:                                     ; preds = %20
  %24 = load volatile i64, i64* %3
  %25 = icmp sgt i64 %24, 16
  %26 = select i1 %25, i32 1375625405, i32 -2133565621
  store i32 %26, i32* %19
  br label %124

; <label>:27:                                     ; preds = %20
  %28 = load %struct.ball*, %struct.ball** %5, align 8
  %29 = load %struct.ball*, %struct.ball** %5, align 8
  %30 = getelementptr inbounds %struct.ball, %struct.ball* %29, i64 16
  %31 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  %32 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 1, i32 1, i1 false)
  call void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %28, %struct.ball* %30)
  %33 = load %struct.ball*, %struct.ball** %5, align 8
  %34 = getelementptr inbounds %struct.ball, %struct.ball* %33, i64 16
  %35 = load %struct.ball*, %struct.ball** %6, align 8
  %36 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %37 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 1, i32 1, i1 false)
  call void @"_ZSt26__unguarded_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %34, %struct.ball* %35)
  store i32 -1993586584, i32* %19
  br label %124

; <label>:38:                                     ; preds = %20
  %39 = load i32, i32* @x.251
  %40 = load i32, i32* @y.252
  %41 = sub i32 %39, 623599745
  %42 = sub i32 %41, 1
  %43 = add i32 %42, 623599745
  %44 = sub i32 %39, 1
  %45 = mul i32 %39, %43
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %40, 10
  %49 = and i1 %47, %48
  %50 = xor i1 %47, %48
  %51 = or i1 %49, %50
  %52 = or i1 %47, %48
  %53 = select i1 %51, i32 1529974455, i32 -835315608
  store i32 %53, i32* %19
  br label %124

; <label>:54:                                     ; preds = %20
  %55 = load %struct.ball*, %struct.ball** %5, align 8
  %56 = load %struct.ball*, %struct.ball** %6, align 8
  %57 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9 to i8*
  %58 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 1, i32 1, i1 false)
  call void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %55, %struct.ball* %56)
  %59 = load i32, i32* @x.251
  %60 = load i32, i32* @y.252
  %61 = sub i32 0, 1
  %62 = add i32 %59, %61
  %63 = sub i32 %59, 1
  %64 = mul i32 %59, %62
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %60, 10
  %68 = and i1 %66, %67
  %69 = xor i1 %66, %67
  %70 = or i1 %68, %69
  %71 = or i1 %66, %67
  %72 = select i1 %70, i32 1598732260, i32 -835315608
  store i32 %72, i32* %19
  br label %124

; <label>:73:                                     ; preds = %20
  store i32 -1993586584, i32* %19
  br label %124

; <label>:74:                                     ; preds = %20
  %75 = load i32, i32* @x.251
  %76 = load i32, i32* @y.252
  %77 = sub i32 %75, 996424920
  %78 = sub i32 %77, 1
  %79 = add i32 %78, 996424920
  %80 = sub i32 %75, 1
  %81 = mul i32 %75, %79
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %76, 10
  %85 = xor i1 %83, true
  %86 = xor i1 %84, true
  %87 = xor i1 true, true
  %88 = and i1 %85, true
  %89 = and i1 %83, %87
  %90 = and i1 %86, true
  %91 = and i1 %84, %87
  %92 = or i1 %88, %89
  %93 = or i1 %90, %91
  %94 = xor i1 %92, %93
  %95 = or i1 %85, %86
  %96 = xor i1 %95, true
  %97 = or i1 true, %87
  %98 = and i1 %96, %97
  %99 = or i1 %94, %98
  %100 = or i1 %83, %84
  %101 = select i1 %99, i32 -1366603210, i32 715972473
  store i32 %101, i32* %19
  br label %124

; <label>:102:                                    ; preds = %20
  %103 = load i32, i32* @x.251
  %104 = load i32, i32* @y.252
  %105 = sub i32 0, 1
  %106 = add i32 %103, %105
  %107 = sub i32 %103, 1
  %108 = mul i32 %103, %106
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %104, 10
  %112 = and i1 %110, %111
  %113 = xor i1 %110, %111
  %114 = or i1 %112, %113
  %115 = or i1 %110, %111
  %116 = select i1 %114, i32 14702206, i32 715972473
  store i32 %116, i32* %19
  br label %124

; <label>:117:                                    ; preds = %20
  ret void

; <label>:118:                                    ; preds = %20
  %119 = load %struct.ball*, %struct.ball** %5, align 8
  %120 = load %struct.ball*, %struct.ball** %6, align 8
  %121 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9 to i8*
  %122 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %122, i64 1, i32 1, i1 false)
  call void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %119, %struct.ball* %120)
  store i32 1529974455, i32* %19
  br label %124

; <label>:123:                                    ; preds = %20
  store i32 -1366603210, i32* %19
  br label %124

; <label>:124:                                    ; preds = %123, %118, %102, %74, %73, %54, %38, %27, %23, %22
  br label %20
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt14__partial_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  store %struct.ball* %2, %struct.ball** %7, align 8
  %10 = load %struct.ball*, %struct.ball** %5, align 8
  %11 = load %struct.ball*, %struct.ball** %6, align 8
  %12 = load %struct.ball*, %struct.ball** %7, align 8
  %13 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %14 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 1, i32 1, i1 false)
  call void @"_ZSt13__heap_selectIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_T0_"(%struct.ball* %10, %struct.ball* %11, %struct.ball* %12)
  %15 = load %struct.ball*, %struct.ball** %5, align 8
  %16 = load %struct.ball*, %struct.ball** %6, align 8
  %17 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9 to i8*
  %18 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 1, i32 1, i1 false)
  call void @"_ZSt11__sort_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %15, %struct.ball* %16)
  ret void
}

; Function Attrs: noinline uwtable
define internal %struct.ball* @"_ZSt27__unguarded_partition_pivotIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEET_S7_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  %9 = load %struct.ball*, %struct.ball** %4, align 8
  %10 = load %struct.ball*, %struct.ball** %5, align 8
  %11 = load %struct.ball*, %struct.ball** %4, align 8
  %12 = ptrtoint %struct.ball* %10 to i64
  %13 = ptrtoint %struct.ball* %11 to i64
  %14 = sub i64 %12, -1406241409699862828
  %15 = sub i64 %14, %13
  %16 = add i64 %15, -1406241409699862828
  %17 = sub i64 %12, %13
  %18 = sdiv exact i64 %16, 16
  %19 = sdiv i64 %18, 2
  %20 = getelementptr inbounds %struct.ball, %struct.ball* %9, i64 %19
  store %struct.ball* %20, %struct.ball** %6, align 8
  %21 = load %struct.ball*, %struct.ball** %4, align 8
  %22 = load %struct.ball*, %struct.ball** %4, align 8
  %23 = getelementptr inbounds %struct.ball, %struct.ball* %22, i64 1
  %24 = load %struct.ball*, %struct.ball** %6, align 8
  %25 = load %struct.ball*, %struct.ball** %5, align 8
  %26 = getelementptr inbounds %struct.ball, %struct.ball* %25, i64 -1
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  %28 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 1, i32 1, i1 false)
  call void @"_ZSt22__move_median_to_firstIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_S7_T0_"(%struct.ball* %21, %struct.ball* %23, %struct.ball* %24, %struct.ball* %26)
  %29 = load %struct.ball*, %struct.ball** %4, align 8
  %30 = getelementptr inbounds %struct.ball, %struct.ball* %29, i64 1
  %31 = load %struct.ball*, %struct.ball** %5, align 8
  %32 = load %struct.ball*, %struct.ball** %4, align 8
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  %34 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 1, i32 1, i1 false)
  %35 = call %struct.ball* @"_ZSt21__unguarded_partitionIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEET_S7_S7_S7_T0_"(%struct.ball* %30, %struct.ball* %31, %struct.ball* %32)
  ret %struct.ball* %35
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt13__heap_selectIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %struct.ball*, align 8
  %9 = alloca %struct.ball*, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %11 = alloca %struct.ball*, align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %7, align 8
  store %struct.ball* %1, %struct.ball** %8, align 8
  store %struct.ball* %2, %struct.ball** %9, align 8
  %13 = load %struct.ball*, %struct.ball** %7, align 8
  %14 = load %struct.ball*, %struct.ball** %8, align 8
  %15 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10 to i8*
  %16 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 1, i32 1, i1 false)
  call void @"_ZSt11__make_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball* %13, %struct.ball* %14)
  %17 = load %struct.ball*, %struct.ball** %8, align 8
  store %struct.ball* %17, %struct.ball** %11, align 8
  %18 = alloca i32
  store i32 -567347699, i32* %18
  br label %19

; <label>:19:                                     ; preds = %3, %129
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 -567347699, label %22
    i32 1277919652, label %38
    i32 -627356098, label %57
    i32 1966907782, label %60
    i32 2129572054, label %76
    i32 755966320, label %107
    i32 1153281339, label %110
    i32 1610450237, label %116
    i32 -1468108787, label %117
    i32 -1224690557, label %120
    i32 -579299721, label %121
    i32 2057586077, label %125
  ]

; <label>:21:                                     ; preds = %19
  br label %129

; <label>:22:                                     ; preds = %19
  %23 = load i32, i32* @x.257
  %24 = load i32, i32* @y.258
  %25 = sub i32 %23, -142981682
  %26 = sub i32 %25, 1
  %27 = add i32 %26, -142981682
  %28 = sub i32 %23, 1
  %29 = mul i32 %23, %27
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %24, 10
  %33 = and i1 %31, %32
  %34 = xor i1 %31, %32
  %35 = or i1 %33, %34
  %36 = or i1 %31, %32
  %37 = select i1 %35, i32 1277919652, i32 -579299721
  store i32 %37, i32* %18
  br label %129

; <label>:38:                                     ; preds = %19
  %39 = load %struct.ball*, %struct.ball** %11, align 8
  %40 = load %struct.ball*, %struct.ball** %9, align 8
  %41 = icmp ult %struct.ball* %39, %40
  store i1 %41, i1* %5
  %42 = load i32, i32* @x.257
  %43 = load i32, i32* @y.258
  %44 = add i32 %42, 1012612986
  %45 = sub i32 %44, 1
  %46 = sub i32 %45, 1012612986
  %47 = sub i32 %42, 1
  %48 = mul i32 %42, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %43, 10
  %52 = and i1 %50, %51
  %53 = xor i1 %50, %51
  %54 = or i1 %52, %53
  %55 = or i1 %50, %51
  %56 = select i1 %54, i32 -627356098, i32 -579299721
  store i32 %56, i32* %18
  br label %129

; <label>:57:                                     ; preds = %19
  %58 = load volatile i1, i1* %5
  %59 = select i1 %58, i32 1966907782, i32 -1224690557
  store i32 %59, i32* %18
  br label %129

; <label>:60:                                     ; preds = %19
  %61 = load i32, i32* @x.257
  %62 = load i32, i32* @y.258
  %63 = add i32 %61, 801457025
  %64 = sub i32 %63, 1
  %65 = sub i32 %64, 801457025
  %66 = sub i32 %61, 1
  %67 = mul i32 %61, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %62, 10
  %71 = and i1 %69, %70
  %72 = xor i1 %69, %70
  %73 = or i1 %71, %72
  %74 = or i1 %69, %70
  %75 = select i1 %73, i32 2129572054, i32 2057586077
  store i32 %75, i32* %18
  br label %129

; <label>:76:                                     ; preds = %19
  %77 = load %struct.ball*, %struct.ball** %11, align 8
  %78 = load %struct.ball*, %struct.ball** %7, align 8
  %79 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6, %struct.ball* %77, %struct.ball* %78)
  store i1 %79, i1* %4
  %80 = load i32, i32* @x.257
  %81 = load i32, i32* @y.258
  %82 = sub i32 %80, -2080809758
  %83 = sub i32 %82, 1
  %84 = add i32 %83, -2080809758
  %85 = sub i32 %80, 1
  %86 = mul i32 %80, %84
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %81, 10
  %90 = xor i1 %88, true
  %91 = xor i1 %89, true
  %92 = xor i1 true, true
  %93 = and i1 %90, true
  %94 = and i1 %88, %92
  %95 = and i1 %91, true
  %96 = and i1 %89, %92
  %97 = or i1 %93, %94
  %98 = or i1 %95, %96
  %99 = xor i1 %97, %98
  %100 = or i1 %90, %91
  %101 = xor i1 %100, true
  %102 = or i1 true, %92
  %103 = and i1 %101, %102
  %104 = or i1 %99, %103
  %105 = or i1 %88, %89
  %106 = select i1 %104, i32 755966320, i32 2057586077
  store i32 %106, i32* %18
  br label %129

; <label>:107:                                    ; preds = %19
  %108 = load volatile i1, i1* %4
  %109 = select i1 %108, i32 1153281339, i32 1610450237
  store i32 %109, i32* %18
  br label %129

; <label>:110:                                    ; preds = %19
  %111 = load %struct.ball*, %struct.ball** %7, align 8
  %112 = load %struct.ball*, %struct.ball** %8, align 8
  %113 = load %struct.ball*, %struct.ball** %11, align 8
  %114 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12 to i8*
  %115 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %114, i8* %115, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_T0_"(%struct.ball* %111, %struct.ball* %112, %struct.ball* %113)
  store i32 1610450237, i32* %18
  br label %129

; <label>:116:                                    ; preds = %19
  store i32 -1468108787, i32* %18
  br label %129

; <label>:117:                                    ; preds = %19
  %118 = load %struct.ball*, %struct.ball** %11, align 8
  %119 = getelementptr inbounds %struct.ball, %struct.ball* %118, i32 1
  store %struct.ball* %119, %struct.ball** %11, align 8
  store i32 -567347699, i32* %18
  br label %129

; <label>:120:                                    ; preds = %19
  ret void

; <label>:121:                                    ; preds = %19
  %122 = load %struct.ball*, %struct.ball** %11, align 8
  %123 = load %struct.ball*, %struct.ball** %9, align 8
  %124 = icmp ult %struct.ball* %122, %123
  store i32 1277919652, i32* %18
  br label %129

; <label>:125:                                    ; preds = %19
  %126 = load %struct.ball*, %struct.ball** %11, align 8
  %127 = load %struct.ball*, %struct.ball** %7, align 8
  %128 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6, %struct.ball* %126, %struct.ball* %127)
  store i32 2129572054, i32* %18
  br label %129

; <label>:129:                                    ; preds = %125, %121, %117, %116, %110, %107, %76, %60, %57, %38, %22, %21
  br label %19
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__sort_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  %7 = alloca i32
  store i32 790875105, i32* %7
  br label %8

; <label>:8:                                      ; preds = %2, %114
  %9 = load i32, i32* %7
  switch i32 %9, label %10 [
    i32 790875105, label %11
    i32 -1792883428, label %22
    i32 -46088845, label %37
    i32 958892135, label %59
    i32 1478981620, label %60
    i32 -2012765757, label %76
    i32 184617308, label %104
    i32 298717271, label %105
    i32 3680477, label %113
  ]

; <label>:10:                                     ; preds = %8
  br label %114

; <label>:11:                                     ; preds = %8
  %12 = load %struct.ball*, %struct.ball** %5, align 8
  %13 = load %struct.ball*, %struct.ball** %4, align 8
  %14 = ptrtoint %struct.ball* %12 to i64
  %15 = ptrtoint %struct.ball* %13 to i64
  %16 = sub i64 0, %15
  %17 = add i64 %14, %16
  %18 = sub i64 %14, %15
  %19 = sdiv exact i64 %17, 16
  %20 = icmp sgt i64 %19, 1
  %21 = select i1 %20, i32 -1792883428, i32 1478981620
  store i32 %21, i32* %7
  br label %114

; <label>:22:                                     ; preds = %8
  %23 = load i32, i32* @x.259
  %24 = load i32, i32* @y.260
  %25 = sub i32 0, 1
  %26 = add i32 %23, %25
  %27 = sub i32 %23, 1
  %28 = mul i32 %23, %26
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %24, 10
  %32 = and i1 %30, %31
  %33 = xor i1 %30, %31
  %34 = or i1 %32, %33
  %35 = or i1 %30, %31
  %36 = select i1 %34, i32 -46088845, i32 298717271
  store i32 %36, i32* %7
  br label %114

; <label>:37:                                     ; preds = %8
  %38 = load %struct.ball*, %struct.ball** %5, align 8
  %39 = getelementptr inbounds %struct.ball, %struct.ball* %38, i32 -1
  store %struct.ball* %39, %struct.ball** %5, align 8
  %40 = load %struct.ball*, %struct.ball** %4, align 8
  %41 = load %struct.ball*, %struct.ball** %5, align 8
  %42 = load %struct.ball*, %struct.ball** %5, align 8
  %43 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  %44 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_T0_"(%struct.ball* %40, %struct.ball* %41, %struct.ball* %42)
  %45 = load i32, i32* @x.259
  %46 = load i32, i32* @y.260
  %47 = sub i32 0, 1
  %48 = add i32 %45, %47
  %49 = sub i32 %45, 1
  %50 = mul i32 %45, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %46, 10
  %54 = and i1 %52, %53
  %55 = xor i1 %52, %53
  %56 = or i1 %54, %55
  %57 = or i1 %52, %53
  %58 = select i1 %56, i32 958892135, i32 298717271
  store i32 %58, i32* %7
  br label %114

; <label>:59:                                     ; preds = %8
  store i32 790875105, i32* %7
  br label %114

; <label>:60:                                     ; preds = %8
  %61 = load i32, i32* @x.259
  %62 = load i32, i32* @y.260
  %63 = sub i32 %61, 783038222
  %64 = sub i32 %63, 1
  %65 = add i32 %64, 783038222
  %66 = sub i32 %61, 1
  %67 = mul i32 %61, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %62, 10
  %71 = and i1 %69, %70
  %72 = xor i1 %69, %70
  %73 = or i1 %71, %72
  %74 = or i1 %69, %70
  %75 = select i1 %73, i32 -2012765757, i32 3680477
  store i32 %75, i32* %7
  br label %114

; <label>:76:                                     ; preds = %8
  %77 = load i32, i32* @x.259
  %78 = load i32, i32* @y.260
  %79 = sub i32 %77, -1685057589
  %80 = sub i32 %79, 1
  %81 = add i32 %80, -1685057589
  %82 = sub i32 %77, 1
  %83 = mul i32 %77, %81
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %78, 10
  %87 = xor i1 %85, true
  %88 = xor i1 %86, true
  %89 = xor i1 true, true
  %90 = and i1 %87, true
  %91 = and i1 %85, %89
  %92 = and i1 %88, true
  %93 = and i1 %86, %89
  %94 = or i1 %90, %91
  %95 = or i1 %92, %93
  %96 = xor i1 %94, %95
  %97 = or i1 %87, %88
  %98 = xor i1 %97, true
  %99 = or i1 true, %89
  %100 = and i1 %98, %99
  %101 = or i1 %96, %100
  %102 = or i1 %85, %86
  %103 = select i1 %101, i32 184617308, i32 3680477
  store i32 %103, i32* %7
  br label %114

; <label>:104:                                    ; preds = %8
  ret void

; <label>:105:                                    ; preds = %8
  %106 = load %struct.ball*, %struct.ball** %5, align 8
  %107 = getelementptr inbounds %struct.ball, %struct.ball* %106, i32 -1
  store %struct.ball* %107, %struct.ball** %5, align 8
  %108 = load %struct.ball*, %struct.ball** %4, align 8
  %109 = load %struct.ball*, %struct.ball** %5, align 8
  %110 = load %struct.ball*, %struct.ball** %5, align 8
  %111 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  %112 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* %112, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_T0_"(%struct.ball* %108, %struct.ball* %109, %struct.ball* %110)
  store i32 -46088845, i32* %7
  br label %114

; <label>:113:                                    ; preds = %8
  store i32 -2012765757, i32* %7
  br label %114

; <label>:114:                                    ; preds = %113, %105, %76, %60, %59, %37, %22, %11, %10
  br label %8
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__make_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca i64
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.ball, align 8
  %11 = alloca %struct.ball, align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %6, align 8
  store %struct.ball* %1, %struct.ball** %7, align 8
  %13 = load %struct.ball*, %struct.ball** %7, align 8
  %14 = load %struct.ball*, %struct.ball** %6, align 8
  %15 = ptrtoint %struct.ball* %13 to i64
  %16 = ptrtoint %struct.ball* %14 to i64
  %17 = sub i64 %15, 7626138676978252529
  %18 = sub i64 %17, %16
  %19 = add i64 %18, 7626138676978252529
  %20 = sub i64 %15, %16
  %21 = sdiv exact i64 %19, 16
  store i64 %21, i64* %4
  %22 = alloca i32
  store i32 -653399237, i32* %22
  br label %23

; <label>:23:                                     ; preds = %2, %268
  %24 = load i32, i32* %22
  switch i32 %24, label %25 [
    i32 -653399237, label %26
    i32 -151826246, label %30
    i32 -271585335, label %31
    i32 1185239595, label %46
    i32 -802046760, label %76
    i32 93330424, label %77
    i32 1752724983, label %93
    i32 42681437, label %142
    i32 1459751220, label %145
    i32 -1771151721, label %146
    i32 698028376, label %153
    i32 957261115, label %154
    i32 599472456, label %246
  ]

; <label>:25:                                     ; preds = %23
  br label %268

; <label>:26:                                     ; preds = %23
  %27 = load volatile i64, i64* %4
  %28 = icmp slt i64 %27, 2
  %29 = select i1 %28, i32 -151826246, i32 -271585335
  store i32 %29, i32* %22
  br label %268

; <label>:30:                                     ; preds = %23
  store i32 698028376, i32* %22
  br label %268

; <label>:31:                                     ; preds = %23
  %32 = load i32, i32* @x.261
  %33 = load i32, i32* @y.262
  %34 = sub i32 0, 1
  %35 = add i32 %32, %34
  %36 = sub i32 %32, 1
  %37 = mul i32 %32, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %33, 10
  %41 = and i1 %39, %40
  %42 = xor i1 %39, %40
  %43 = or i1 %41, %42
  %44 = or i1 %39, %40
  %45 = select i1 %43, i32 1185239595, i32 957261115
  store i32 %45, i32* %22
  br label %268

; <label>:46:                                     ; preds = %23
  %47 = load %struct.ball*, %struct.ball** %7, align 8
  %48 = load %struct.ball*, %struct.ball** %6, align 8
  %49 = ptrtoint %struct.ball* %47 to i64
  %50 = ptrtoint %struct.ball* %48 to i64
  %51 = sub i64 0, %50
  %52 = add i64 %49, %51
  %53 = sub i64 %49, %50
  %54 = sdiv exact i64 %52, 16
  store i64 %54, i64* %8, align 8
  %55 = load i64, i64* %8, align 8
  %56 = sub i64 %55, 2459266450039219038
  %57 = sub i64 %56, 2
  %58 = add i64 %57, 2459266450039219038
  %59 = sub nsw i64 %55, 2
  %60 = sdiv i64 %58, 2
  store i64 %60, i64* %9, align 8
  %61 = load i32, i32* @x.261
  %62 = load i32, i32* @y.262
  %63 = sub i32 %61, 325793120
  %64 = sub i32 %63, 1
  %65 = add i32 %64, 325793120
  %66 = sub i32 %61, 1
  %67 = mul i32 %61, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %62, 10
  %71 = and i1 %69, %70
  %72 = xor i1 %69, %70
  %73 = or i1 %71, %72
  %74 = or i1 %69, %70
  %75 = select i1 %73, i32 -802046760, i32 957261115
  store i32 %75, i32* %22
  br label %268

; <label>:76:                                     ; preds = %23
  store i32 93330424, i32* %22
  br label %268

; <label>:77:                                     ; preds = %23
  %78 = load i32, i32* @x.261
  %79 = load i32, i32* @y.262
  %80 = sub i32 %78, 689136899
  %81 = sub i32 %80, 1
  %82 = add i32 %81, 689136899
  %83 = sub i32 %78, 1
  %84 = mul i32 %78, %82
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %79, 10
  %88 = and i1 %86, %87
  %89 = xor i1 %86, %87
  %90 = or i1 %88, %89
  %91 = or i1 %86, %87
  %92 = select i1 %90, i32 1752724983, i32 599472456
  store i32 %92, i32* %22
  br label %268

; <label>:93:                                     ; preds = %23
  %94 = load %struct.ball*, %struct.ball** %6, align 8
  %95 = load i64, i64* %9, align 8
  %96 = getelementptr inbounds %struct.ball, %struct.ball* %94, i64 %95
  %97 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %96) #3
  %98 = bitcast %struct.ball* %10 to i8*
  %99 = bitcast %struct.ball* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %98, i8* %99, i64 16, i32 8, i1 false)
  %100 = load %struct.ball*, %struct.ball** %6, align 8
  %101 = load i64, i64* %9, align 8
  %102 = load i64, i64* %8, align 8
  %103 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %10) #3
  %104 = bitcast %struct.ball* %11 to i8*
  %105 = bitcast %struct.ball* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %104, i8* %105, i64 16, i32 8, i1 false)
  %106 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12 to i8*
  %107 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %106, i8* %107, i64 1, i32 1, i1 false)
  %108 = bitcast %struct.ball* %11 to { i64, i64 }*
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %108, i32 0, i32 0
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %108, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_T0_S8_T1_T2_"(%struct.ball* %100, i64 %101, i64 %102, i64 %110, i64 %112)
  %113 = load i64, i64* %9, align 8
  %114 = icmp eq i64 %113, 0
  store i1 %114, i1* %3
  %115 = load i32, i32* @x.261
  %116 = load i32, i32* @y.262
  %117 = add i32 %115, 1823296669
  %118 = sub i32 %117, 1
  %119 = sub i32 %118, 1823296669
  %120 = sub i32 %115, 1
  %121 = mul i32 %115, %119
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %116, 10
  %125 = xor i1 %123, true
  %126 = xor i1 %124, true
  %127 = xor i1 false, true
  %128 = and i1 %125, false
  %129 = and i1 %123, %127
  %130 = and i1 %126, false
  %131 = and i1 %124, %127
  %132 = or i1 %128, %129
  %133 = or i1 %130, %131
  %134 = xor i1 %132, %133
  %135 = or i1 %125, %126
  %136 = xor i1 %135, true
  %137 = or i1 false, %127
  %138 = and i1 %136, %137
  %139 = or i1 %134, %138
  %140 = or i1 %123, %124
  %141 = select i1 %139, i32 42681437, i32 599472456
  store i32 %141, i32* %22
  br label %268

; <label>:142:                                    ; preds = %23
  %143 = load volatile i1, i1* %3
  %144 = select i1 %143, i32 1459751220, i32 -1771151721
  store i32 %144, i32* %22
  br label %268

; <label>:145:                                    ; preds = %23
  store i32 698028376, i32* %22
  br label %268

; <label>:146:                                    ; preds = %23
  %147 = load i64, i64* %9, align 8
  %148 = sub i64 0, %147
  %149 = sub i64 0, -1
  %150 = add i64 %148, %149
  %151 = sub i64 0, %150
  %152 = add nsw i64 %147, -1
  store i64 %151, i64* %9, align 8
  store i32 93330424, i32* %22
  br label %268

; <label>:153:                                    ; preds = %23
  ret void

; <label>:154:                                    ; preds = %23
  %155 = load %struct.ball*, %struct.ball** %7, align 8
  %156 = load %struct.ball*, %struct.ball** %6, align 8
  %157 = ptrtoint %struct.ball* %155 to i64
  %158 = ptrtoint %struct.ball* %156 to i64
  %159 = shl i64 %157, %158
  %160 = shl i64 %157, %158
  %161 = sub i64 0, %158
  %162 = add i64 %157, %161
  %163 = sub i64 %157, %158
  %164 = mul i64 %162, %158
  %165 = sub i64 0, %157
  %166 = add i64 0, %165
  %167 = sub i64 0, %157
  %168 = sub i64 0, %166
  %169 = sub i64 0, %158
  %170 = add i64 %168, %169
  %171 = sub i64 0, %170
  %172 = add i64 %166, %158
  %173 = sub i64 %157, 8617070911981931774
  %174 = sub i64 %173, %158
  %175 = add i64 %174, 8617070911981931774
  %176 = sub i64 %157, %158
  %177 = mul i64 %175, %158
  %178 = shl i64 %157, %158
  %179 = sub i64 %157, 4182611677432377656
  %180 = sub i64 %179, %158
  %181 = add i64 %180, 4182611677432377656
  %182 = sub i64 %157, %158
  %183 = sub i64 0, %181
  %184 = add i64 0, %183
  %185 = sub i64 0, %181
  %186 = sub i64 %184, -2216278252508625273
  %187 = add i64 %186, 16
  %188 = add i64 %187, -2216278252508625273
  %189 = add i64 %184, 16
  %190 = sub i64 0, 4539575676877706447
  %191 = sub i64 %190, %181
  %192 = add i64 %191, 4539575676877706447
  %193 = sub i64 0, %181
  %194 = sub i64 0, %192
  %195 = sub i64 0, 16
  %196 = add i64 %194, %195
  %197 = sub i64 0, %196
  %198 = add i64 %192, 16
  %199 = shl i64 %181, 16
  %200 = sub i64 0, %181
  %201 = add i64 0, %200
  %202 = sub i64 0, %181
  %203 = sub i64 %201, -8408736062541683791
  %204 = add i64 %203, 16
  %205 = add i64 %204, -8408736062541683791
  %206 = add i64 %201, 16
  %207 = shl i64 %181, 16
  %208 = sub i64 %181, -764120789397349101
  %209 = sub i64 %208, 16
  %210 = add i64 %209, -764120789397349101
  %211 = sub i64 %181, 16
  %212 = mul i64 %210, 16
  %213 = sdiv exact i64 %181, 16
  store i64 %213, i64* %8, align 8
  %214 = load i64, i64* %8, align 8
  %215 = sub i64 0, 2
  %216 = add i64 %214, %215
  %217 = sub i64 %214, 2
  %218 = mul i64 %216, 2
  %219 = add i64 %214, 8771886102436893787
  %220 = sub i64 %219, 2
  %221 = sub i64 %220, 8771886102436893787
  %222 = sub i64 %214, 2
  %223 = mul i64 %221, 2
  %224 = shl i64 %214, 2
  %225 = sub i64 0, -8915809263630809208
  %226 = sub i64 %225, %214
  %227 = add i64 %226, -8915809263630809208
  %228 = sub i64 0, %214
  %229 = add i64 %227, 5784429811591499783
  %230 = add i64 %229, 2
  %231 = sub i64 %230, 5784429811591499783
  %232 = add i64 %227, 2
  %233 = add i64 0, 6338979464142834935
  %234 = sub i64 %233, %214
  %235 = sub i64 %234, 6338979464142834935
  %236 = sub i64 0, %214
  %237 = add i64 %235, -4067594218542735400
  %238 = add i64 %237, 2
  %239 = sub i64 %238, -4067594218542735400
  %240 = add i64 %235, 2
  %241 = sub i64 0, 2
  %242 = add i64 %214, %241
  %243 = sub nsw i64 %214, 2
  %244 = shl i64 %242, 2
  %245 = sdiv i64 %242, 2
  store i64 %245, i64* %9, align 8
  store i32 1185239595, i32* %22
  br label %268

; <label>:246:                                    ; preds = %23
  %247 = load %struct.ball*, %struct.ball** %6, align 8
  %248 = load i64, i64* %9, align 8
  %249 = getelementptr inbounds %struct.ball, %struct.ball* %247, i64 %248
  %250 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %249) #3
  %251 = bitcast %struct.ball* %10 to i8*
  %252 = bitcast %struct.ball* %250 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %251, i8* %252, i64 16, i32 8, i1 false)
  %253 = load %struct.ball*, %struct.ball** %6, align 8
  %254 = load i64, i64* %9, align 8
  %255 = load i64, i64* %8, align 8
  %256 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %10) #3
  %257 = bitcast %struct.ball* %11 to i8*
  %258 = bitcast %struct.ball* %256 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %257, i8* %258, i64 16, i32 8, i1 false)
  %259 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12 to i8*
  %260 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %259, i8* %260, i64 1, i32 1, i1 false)
  %261 = bitcast %struct.ball* %11 to { i64, i64 }*
  %262 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %261, i32 0, i32 0
  %263 = load i64, i64* %262, align 8
  %264 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %261, i32 0, i32 1
  %265 = load i64, i64* %264, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_T0_S8_T1_T2_"(%struct.ball* %253, i64 %254, i64 %255, i64 %263, i64 %265)
  %266 = load i64, i64* %9, align 8
  %267 = icmp eq i64 %266, 0
  store i32 1752724983, i32* %22
  br label %268

; <label>:268:                                    ; preds = %246, %154, %146, %145, %142, %93, %77, %76, %46, %31, %30, %26, %25
  br label %23
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %struct.ball*, %struct.ball*) #4 align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.263
  %8 = load i32, i32* @y.264
  %9 = add i32 %7, 429257086
  %10 = sub i32 %9, 1
  %11 = sub i32 %10, 429257086
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 243812030, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %76
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 243812030, label %21
    i32 1806568186, label %41
    i32 -114343569, label %65
    i32 412293640, label %67
  ]

; <label>:20:                                     ; preds = %18
  br label %76

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = xor i1 %22, true
  %25 = xor i1 %23, true
  %26 = xor i1 false, true
  %27 = and i1 %24, false
  %28 = and i1 %22, %26
  %29 = and i1 %25, false
  %30 = and i1 %23, %26
  %31 = or i1 %27, %28
  %32 = or i1 %29, %30
  %33 = xor i1 %31, %32
  %34 = or i1 %24, %25
  %35 = xor i1 %34, true
  %36 = or i1 false, %26
  %37 = and i1 %35, %36
  %38 = or i1 %33, %37
  %39 = or i1 %22, %23
  %40 = select i1 %38, i32 1806568186, i32 412293640
  store i32 %40, i32* %17
  br label %76

; <label>:41:                                     ; preds = %18
  %42 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %43 = alloca %struct.ball*, align 8
  %44 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %42, align 8
  store %struct.ball* %1, %struct.ball** %43, align 8
  store %struct.ball* %2, %struct.ball** %44, align 8
  %45 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %42, align 8
  %46 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %45, i32 0, i32 0
  %47 = load %struct.ball*, %struct.ball** %43, align 8
  %48 = load %struct.ball*, %struct.ball** %44, align 8
  %49 = call zeroext i1 @"_ZZ4mainENK3$_0clERK4ballS2_"(%class.anon* %46, %struct.ball* dereferenceable(16) %47, %struct.ball* dereferenceable(16) %48)
  store i1 %49, i1* %4
  %50 = load i32, i32* @x.263
  %51 = load i32, i32* @y.264
  %52 = sub i32 %50, 1624630851
  %53 = sub i32 %52, 1
  %54 = add i32 %53, 1624630851
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = and i1 %58, %59
  %61 = xor i1 %58, %59
  %62 = or i1 %60, %61
  %63 = or i1 %58, %59
  %64 = select i1 %62, i32 -114343569, i32 412293640
  store i32 %64, i32* %17
  br label %76

; <label>:65:                                     ; preds = %18
  %66 = load volatile i1, i1* %4
  ret i1 %66

; <label>:67:                                     ; preds = %18
  %68 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %69 = alloca %struct.ball*, align 8
  %70 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %68, align 8
  store %struct.ball* %1, %struct.ball** %69, align 8
  store %struct.ball* %2, %struct.ball** %70, align 8
  %71 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %68, align 8
  %72 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %71, i32 0, i32 0
  %73 = load %struct.ball*, %struct.ball** %69, align 8
  %74 = load %struct.ball*, %struct.ball** %70, align 8
  %75 = call zeroext i1 @"_ZZ4mainENK3$_0clERK4ballS2_"(%class.anon* %72, %struct.ball* dereferenceable(16) %73, %struct.ball* dereferenceable(16) %74)
  store i32 1806568186, i32* %17
  br label %76

; <label>:76:                                     ; preds = %67, %41, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.265
  %7 = load i32, i32* @y.266
  %8 = add i32 %6, 2116384976
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, 2116384976
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 -1134996096, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %170
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -1134996096, label %20
    i32 1184088475, label %28
    i32 1949914211, label %91
    i32 -1238863409, label %92
  ]

; <label>:19:                                     ; preds = %17
  br label %170

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 1184088475, i32 -1238863409
  store i32 %27, i32* %16
  br label %170

; <label>:28:                                     ; preds = %17
  %29 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %30 = alloca %struct.ball*, align 8
  %31 = alloca %struct.ball*, align 8
  %32 = alloca %struct.ball*, align 8
  %33 = alloca %struct.ball, align 8
  %34 = alloca %struct.ball, align 8
  %35 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %30, align 8
  store %struct.ball* %1, %struct.ball** %31, align 8
  store %struct.ball* %2, %struct.ball** %32, align 8
  %36 = load %struct.ball*, %struct.ball** %32, align 8
  %37 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %36) #3
  %38 = bitcast %struct.ball* %33 to i8*
  %39 = bitcast %struct.ball* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 16, i32 8, i1 false)
  %40 = load %struct.ball*, %struct.ball** %30, align 8
  %41 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %40) #3
  %42 = load %struct.ball*, %struct.ball** %32, align 8
  %43 = bitcast %struct.ball* %42 to i8*
  %44 = bitcast %struct.ball* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 16, i32 8, i1 false)
  %45 = load %struct.ball*, %struct.ball** %30, align 8
  %46 = load %struct.ball*, %struct.ball** %31, align 8
  %47 = load %struct.ball*, %struct.ball** %30, align 8
  %48 = ptrtoint %struct.ball* %46 to i64
  %49 = ptrtoint %struct.ball* %47 to i64
  %50 = sub i64 0, %49
  %51 = add i64 %48, %50
  %52 = sub i64 %48, %49
  %53 = sdiv exact i64 %51, 16
  %54 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %33) #3
  %55 = bitcast %struct.ball* %34 to i8*
  %56 = bitcast %struct.ball* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* %56, i64 16, i32 8, i1 false)
  %57 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %35 to i8*
  %58 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 1, i32 1, i1 false)
  %59 = bitcast %struct.ball* %34 to { i64, i64 }*
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_T0_S8_T1_T2_"(%struct.ball* %45, i64 0, i64 %53, i64 %61, i64 %63)
  %64 = load i32, i32* @x.265
  %65 = load i32, i32* @y.266
  %66 = sub i32 %64, -1439596961
  %67 = sub i32 %66, 1
  %68 = add i32 %67, -1439596961
  %69 = sub i32 %64, 1
  %70 = mul i32 %64, %68
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %65, 10
  %74 = xor i1 %72, true
  %75 = xor i1 %73, true
  %76 = xor i1 true, true
  %77 = and i1 %74, true
  %78 = and i1 %72, %76
  %79 = and i1 %75, true
  %80 = and i1 %73, %76
  %81 = or i1 %77, %78
  %82 = or i1 %79, %80
  %83 = xor i1 %81, %82
  %84 = or i1 %74, %75
  %85 = xor i1 %84, true
  %86 = or i1 true, %76
  %87 = and i1 %85, %86
  %88 = or i1 %83, %87
  %89 = or i1 %72, %73
  %90 = select i1 %88, i32 1949914211, i32 -1238863409
  store i32 %90, i32* %16
  br label %170

; <label>:91:                                     ; preds = %17
  ret void

; <label>:92:                                     ; preds = %17
  %93 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %94 = alloca %struct.ball*, align 8
  %95 = alloca %struct.ball*, align 8
  %96 = alloca %struct.ball*, align 8
  %97 = alloca %struct.ball, align 8
  %98 = alloca %struct.ball, align 8
  %99 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %94, align 8
  store %struct.ball* %1, %struct.ball** %95, align 8
  store %struct.ball* %2, %struct.ball** %96, align 8
  %100 = load %struct.ball*, %struct.ball** %96, align 8
  %101 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %100) #3
  %102 = bitcast %struct.ball* %97 to i8*
  %103 = bitcast %struct.ball* %101 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %102, i8* %103, i64 16, i32 8, i1 false)
  %104 = load %struct.ball*, %struct.ball** %94, align 8
  %105 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %104) #3
  %106 = load %struct.ball*, %struct.ball** %96, align 8
  %107 = bitcast %struct.ball* %106 to i8*
  %108 = bitcast %struct.ball* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %107, i8* %108, i64 16, i32 8, i1 false)
  %109 = load %struct.ball*, %struct.ball** %94, align 8
  %110 = load %struct.ball*, %struct.ball** %95, align 8
  %111 = load %struct.ball*, %struct.ball** %94, align 8
  %112 = ptrtoint %struct.ball* %110 to i64
  %113 = ptrtoint %struct.ball* %111 to i64
  %114 = add i64 %112, 2673328222666531114
  %115 = sub i64 %114, %113
  %116 = sub i64 %115, 2673328222666531114
  %117 = sub i64 %112, %113
  %118 = mul i64 %116, %113
  %119 = shl i64 %112, %113
  %120 = add i64 %112, 1495718295016387009
  %121 = sub i64 %120, %113
  %122 = sub i64 %121, 1495718295016387009
  %123 = sub i64 %112, %113
  %124 = mul i64 %122, %113
  %125 = add i64 %112, 9053387500896559433
  %126 = sub i64 %125, %113
  %127 = sub i64 %126, 9053387500896559433
  %128 = sub i64 %112, %113
  %129 = sub i64 %127, 6241965518153224340
  %130 = sub i64 %129, 16
  %131 = add i64 %130, 6241965518153224340
  %132 = sub i64 %127, 16
  %133 = mul i64 %131, 16
  %134 = sub i64 %127, 5833578601046538187
  %135 = sub i64 %134, 16
  %136 = add i64 %135, 5833578601046538187
  %137 = sub i64 %127, 16
  %138 = mul i64 %136, 16
  %139 = add i64 %127, -6352598711173672188
  %140 = sub i64 %139, 16
  %141 = sub i64 %140, -6352598711173672188
  %142 = sub i64 %127, 16
  %143 = mul i64 %141, 16
  %144 = shl i64 %127, 16
  %145 = shl i64 %127, 16
  %146 = add i64 %127, 7750599080320072116
  %147 = sub i64 %146, 16
  %148 = sub i64 %147, 7750599080320072116
  %149 = sub i64 %127, 16
  %150 = mul i64 %148, 16
  %151 = sub i64 0, %127
  %152 = add i64 0, %151
  %153 = sub i64 0, %127
  %154 = sub i64 0, %152
  %155 = sub i64 0, 16
  %156 = add i64 %154, %155
  %157 = sub i64 0, %156
  %158 = add i64 %152, 16
  %159 = sdiv exact i64 %127, 16
  %160 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %97) #3
  %161 = bitcast %struct.ball* %98 to i8*
  %162 = bitcast %struct.ball* %160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %161, i8* %162, i64 16, i32 8, i1 false)
  %163 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %99 to i8*
  %164 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %163, i8* %164, i64 1, i32 1, i1 false)
  %165 = bitcast %struct.ball* %98 to { i64, i64 }*
  %166 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %165, i32 0, i32 0
  %167 = load i64, i64* %166, align 8
  %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %165, i32 0, i32 1
  %169 = load i64, i64* %168, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_T0_S8_T1_T2_"(%struct.ball* %109, i64 0, i64 %159, i64 %167, i64 %169)
  store i32 1184088475, i32* %16
  br label %170

; <label>:170:                                    ; preds = %92, %28, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16)) #4 comdat {
  %2 = alloca %struct.ball*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.267
  %6 = load i32, i32* @y.268
  %7 = sub i32 %5, 1930663316
  %8 = sub i32 %7, 1
  %9 = add i32 %8, 1930663316
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -766372586, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %49
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -766372586, label %19
    i32 1522991809, label %27
    i32 -1078120494, label %44
    i32 213906331, label %46
  ]

; <label>:18:                                     ; preds = %16
  br label %49

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 1522991809, i32 213906331
  store i32 %26, i32* %15
  br label %49

; <label>:27:                                     ; preds = %16
  %28 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %28, align 8
  %29 = load %struct.ball*, %struct.ball** %28, align 8
  store %struct.ball* %29, %struct.ball** %2
  %30 = load i32, i32* @x.267
  %31 = load i32, i32* @y.268
  %32 = sub i32 0, 1
  %33 = add i32 %30, %32
  %34 = sub i32 %30, 1
  %35 = mul i32 %30, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %31, 10
  %39 = and i1 %37, %38
  %40 = xor i1 %37, %38
  %41 = or i1 %39, %40
  %42 = or i1 %37, %38
  %43 = select i1 %41, i32 -1078120494, i32 213906331
  store i32 %43, i32* %15
  br label %49

; <label>:44:                                     ; preds = %16
  %45 = load volatile %struct.ball*, %struct.ball** %2
  ret %struct.ball* %45

; <label>:46:                                     ; preds = %16
  %47 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %47, align 8
  %48 = load %struct.ball*, %struct.ball** %47, align 8
  store i32 1522991809, i32* %15
  br label %49

; <label>:49:                                     ; preds = %46, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_T0_S8_T1_T2_"(%struct.ball*, i64, i64, i64, i64) #0 {
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %7 = alloca %struct.ball*
  %8 = alloca i64*
  %9 = alloca i64*
  %10 = alloca i64*
  %11 = alloca i64*
  %12 = alloca %struct.ball**
  %13 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %14 = alloca %struct.ball*
  %15 = alloca i1
  %16 = alloca i1
  %17 = load i32, i32* @x.269
  %18 = load i32, i32* @y.270
  %19 = add i32 %17, -1069878355
  %20 = sub i32 %19, 1
  %21 = sub i32 %20, -1069878355
  %22 = sub i32 %17, 1
  %23 = mul i32 %17, %21
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  store i1 %25, i1* %16
  %26 = icmp slt i32 %18, 10
  store i1 %26, i1* %15
  %27 = alloca i32
  store i32 -1059392922, i32* %27
  br label %28

; <label>:28:                                     ; preds = %5, %375
  %29 = load i32, i32* %27
  switch i32 %29, label %30 [
    i32 -1059392922, label %31
    i32 1055146372, label %51
    i32 -835399630, label %90
    i32 412541940, label %91
    i32 1510837551, label %103
    i32 1757672169, label %130
    i32 522128176, label %138
    i32 1445307636, label %166
    i32 1049190592, label %209
    i32 483513425, label %210
    i32 782423799, label %219
    i32 -492165677, label %231
    i32 412771897, label %265
    i32 1973549972, label %281
    i32 1220072558, label %318
    i32 1134125329, label %319
    i32 -1569727516, label %336
    i32 -1428845149, label %353
  ]

; <label>:30:                                     ; preds = %28
  br label %375

; <label>:31:                                     ; preds = %28
  %32 = load volatile i1, i1* %16
  %33 = load volatile i1, i1* %15
  %34 = xor i1 %32, true
  %35 = xor i1 %33, true
  %36 = xor i1 false, true
  %37 = and i1 %34, false
  %38 = and i1 %32, %36
  %39 = and i1 %35, false
  %40 = and i1 %33, %36
  %41 = or i1 %37, %38
  %42 = or i1 %39, %40
  %43 = xor i1 %41, %42
  %44 = or i1 %34, %35
  %45 = xor i1 %44, true
  %46 = or i1 false, %36
  %47 = and i1 %45, %46
  %48 = or i1 %43, %47
  %49 = or i1 %32, %33
  %50 = select i1 %48, i32 1055146372, i32 1134125329
  store i32 %50, i32* %27
  br label %375

; <label>:51:                                     ; preds = %28
  %52 = alloca %struct.ball, align 8
  store %struct.ball* %52, %struct.ball** %14
  %53 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %53, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %13
  %54 = alloca %struct.ball*, align 8
  store %struct.ball** %54, %struct.ball*** %12
  %55 = alloca i64, align 8
  store i64* %55, i64** %11
  %56 = alloca i64, align 8
  store i64* %56, i64** %10
  %57 = alloca i64, align 8
  store i64* %57, i64** %9
  %58 = alloca i64, align 8
  store i64* %58, i64** %8
  %59 = alloca %struct.ball, align 8
  store %struct.ball* %59, %struct.ball** %7
  %60 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 1
  %61 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %61, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6
  %62 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 1
  %63 = load volatile %struct.ball*, %struct.ball** %14
  %64 = bitcast %struct.ball* %63 to { i64, i64 }*
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %64, i32 0, i32 0
  store i64 %3, i64* %65, align 8
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %64, i32 0, i32 1
  store i64 %4, i64* %66, align 8
  %67 = load volatile %struct.ball**, %struct.ball*** %12
  store %struct.ball* %0, %struct.ball** %67, align 8
  %68 = load volatile i64*, i64** %11
  store i64 %1, i64* %68, align 8
  %69 = load volatile i64*, i64** %10
  store i64 %2, i64* %69, align 8
  %70 = load volatile i64*, i64** %11
  %71 = load i64, i64* %70, align 8
  %72 = load volatile i64*, i64** %9
  store i64 %71, i64* %72, align 8
  %73 = load volatile i64*, i64** %11
  %74 = load i64, i64* %73, align 8
  %75 = load volatile i64*, i64** %8
  store i64 %74, i64* %75, align 8
  %76 = load i32, i32* @x.269
  %77 = load i32, i32* @y.270
  %78 = sub i32 0, 1
  %79 = add i32 %76, %78
  %80 = sub i32 %76, 1
  %81 = mul i32 %76, %79
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %77, 10
  %85 = and i1 %83, %84
  %86 = xor i1 %83, %84
  %87 = or i1 %85, %86
  %88 = or i1 %83, %84
  %89 = select i1 %87, i32 -835399630, i32 1134125329
  store i32 %89, i32* %27
  br label %375

; <label>:90:                                     ; preds = %28
  store i32 412541940, i32* %27
  br label %375

; <label>:91:                                     ; preds = %28
  %92 = load volatile i64*, i64** %8
  %93 = load i64, i64* %92, align 8
  %94 = load volatile i64*, i64** %10
  %95 = load i64, i64* %94, align 8
  %96 = sub i64 %95, 809984889528587340
  %97 = sub i64 %96, 1
  %98 = add i64 %97, 809984889528587340
  %99 = sub nsw i64 %95, 1
  %100 = sdiv i64 %98, 2
  %101 = icmp slt i64 %93, %100
  %102 = select i1 %101, i32 1510837551, i32 483513425
  store i32 %102, i32* %27
  br label %375

; <label>:103:                                    ; preds = %28
  %104 = load volatile i64*, i64** %8
  %105 = load i64, i64* %104, align 8
  %106 = sub i64 0, %105
  %107 = sub i64 0, 1
  %108 = add i64 %106, %107
  %109 = sub i64 0, %108
  %110 = add nsw i64 %105, 1
  %111 = mul nsw i64 2, %109
  %112 = load volatile i64*, i64** %8
  store i64 %111, i64* %112, align 8
  %113 = load volatile %struct.ball**, %struct.ball*** %12
  %114 = load %struct.ball*, %struct.ball** %113, align 8
  %115 = load volatile i64*, i64** %8
  %116 = load i64, i64* %115, align 8
  %117 = getelementptr inbounds %struct.ball, %struct.ball* %114, i64 %116
  %118 = load volatile %struct.ball**, %struct.ball*** %12
  %119 = load %struct.ball*, %struct.ball** %118, align 8
  %120 = load volatile i64*, i64** %8
  %121 = load i64, i64* %120, align 8
  %122 = add i64 %121, 2205932694763193426
  %123 = sub i64 %122, 1
  %124 = sub i64 %123, 2205932694763193426
  %125 = sub nsw i64 %121, 1
  %126 = getelementptr inbounds %struct.ball, %struct.ball* %119, i64 %124
  %127 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %13
  %128 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %127, %struct.ball* %117, %struct.ball* %126)
  %129 = select i1 %128, i32 1757672169, i32 522128176
  store i32 %129, i32* %27
  br label %375

; <label>:130:                                    ; preds = %28
  %131 = load volatile i64*, i64** %8
  %132 = load i64, i64* %131, align 8
  %133 = add i64 %132, -1359779948727343738
  %134 = add i64 %133, -1
  %135 = sub i64 %134, -1359779948727343738
  %136 = add nsw i64 %132, -1
  %137 = load volatile i64*, i64** %8
  store i64 %135, i64* %137, align 8
  store i32 522128176, i32* %27
  br label %375

; <label>:138:                                    ; preds = %28
  %139 = load i32, i32* @x.269
  %140 = load i32, i32* @y.270
  %141 = sub i32 %139, 1748449529
  %142 = sub i32 %141, 1
  %143 = add i32 %142, 1748449529
  %144 = sub i32 %139, 1
  %145 = mul i32 %139, %143
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %140, 10
  %149 = xor i1 %147, true
  %150 = xor i1 %148, true
  %151 = xor i1 true, true
  %152 = and i1 %149, true
  %153 = and i1 %147, %151
  %154 = and i1 %150, true
  %155 = and i1 %148, %151
  %156 = or i1 %152, %153
  %157 = or i1 %154, %155
  %158 = xor i1 %156, %157
  %159 = or i1 %149, %150
  %160 = xor i1 %159, true
  %161 = or i1 true, %151
  %162 = and i1 %160, %161
  %163 = or i1 %158, %162
  %164 = or i1 %147, %148
  %165 = select i1 %163, i32 1445307636, i32 -1569727516
  store i32 %165, i32* %27
  br label %375

; <label>:166:                                    ; preds = %28
  %167 = load volatile %struct.ball**, %struct.ball*** %12
  %168 = load %struct.ball*, %struct.ball** %167, align 8
  %169 = load volatile i64*, i64** %8
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %struct.ball, %struct.ball* %168, i64 %170
  %172 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %171) #3
  %173 = load volatile %struct.ball**, %struct.ball*** %12
  %174 = load %struct.ball*, %struct.ball** %173, align 8
  %175 = load volatile i64*, i64** %11
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %struct.ball, %struct.ball* %174, i64 %176
  %178 = bitcast %struct.ball* %177 to i8*
  %179 = bitcast %struct.ball* %172 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %178, i8* %179, i64 16, i32 8, i1 false)
  %180 = load volatile i64*, i64** %8
  %181 = load i64, i64* %180, align 8
  %182 = load volatile i64*, i64** %11
  store i64 %181, i64* %182, align 8
  %183 = load i32, i32* @x.269
  %184 = load i32, i32* @y.270
  %185 = sub i32 0, 1
  %186 = add i32 %183, %185
  %187 = sub i32 %183, 1
  %188 = mul i32 %183, %186
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %184, 10
  %192 = xor i1 %190, true
  %193 = xor i1 %191, true
  %194 = xor i1 false, true
  %195 = and i1 %192, false
  %196 = and i1 %190, %194
  %197 = and i1 %193, false
  %198 = and i1 %191, %194
  %199 = or i1 %195, %196
  %200 = or i1 %197, %198
  %201 = xor i1 %199, %200
  %202 = or i1 %192, %193
  %203 = xor i1 %202, true
  %204 = or i1 false, %194
  %205 = and i1 %203, %204
  %206 = or i1 %201, %205
  %207 = or i1 %190, %191
  %208 = select i1 %206, i32 1049190592, i32 -1569727516
  store i32 %208, i32* %27
  br label %375

; <label>:209:                                    ; preds = %28
  store i32 412541940, i32* %27
  br label %375

; <label>:210:                                    ; preds = %28
  %211 = load volatile i64*, i64** %10
  %212 = load i64, i64* %211, align 8
  %213 = xor i64 1, -1
  %214 = xor i64 %212, %213
  %215 = and i64 %214, %212
  %216 = and i64 %212, 1
  %217 = icmp eq i64 %215, 0
  %218 = select i1 %217, i32 782423799, i32 412771897
  store i32 %218, i32* %27
  br label %375

; <label>:219:                                    ; preds = %28
  %220 = load volatile i64*, i64** %8
  %221 = load i64, i64* %220, align 8
  %222 = load volatile i64*, i64** %10
  %223 = load i64, i64* %222, align 8
  %224 = add i64 %223, 4799396766883064833
  %225 = sub i64 %224, 2
  %226 = sub i64 %225, 4799396766883064833
  %227 = sub nsw i64 %223, 2
  %228 = sdiv i64 %226, 2
  %229 = icmp eq i64 %221, %228
  %230 = select i1 %229, i32 -492165677, i32 412771897
  store i32 %230, i32* %27
  br label %375

; <label>:231:                                    ; preds = %28
  %232 = load volatile i64*, i64** %8
  %233 = load i64, i64* %232, align 8
  %234 = sub i64 0, %233
  %235 = sub i64 0, 1
  %236 = add i64 %234, %235
  %237 = sub i64 0, %236
  %238 = add nsw i64 %233, 1
  %239 = mul nsw i64 2, %237
  %240 = load volatile i64*, i64** %8
  store i64 %239, i64* %240, align 8
  %241 = load volatile %struct.ball**, %struct.ball*** %12
  %242 = load %struct.ball*, %struct.ball** %241, align 8
  %243 = load volatile i64*, i64** %8
  %244 = load i64, i64* %243, align 8
  %245 = sub i64 %244, 992276381489873456
  %246 = sub i64 %245, 1
  %247 = add i64 %246, 992276381489873456
  %248 = sub nsw i64 %244, 1
  %249 = getelementptr inbounds %struct.ball, %struct.ball* %242, i64 %247
  %250 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %249) #3
  %251 = load volatile %struct.ball**, %struct.ball*** %12
  %252 = load %struct.ball*, %struct.ball** %251, align 8
  %253 = load volatile i64*, i64** %11
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds %struct.ball, %struct.ball* %252, i64 %254
  %256 = bitcast %struct.ball* %255 to i8*
  %257 = bitcast %struct.ball* %250 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %256, i8* %257, i64 16, i32 8, i1 false)
  %258 = load volatile i64*, i64** %8
  %259 = load i64, i64* %258, align 8
  %260 = add i64 %259, 8188887749616005417
  %261 = sub i64 %260, 1
  %262 = sub i64 %261, 8188887749616005417
  %263 = sub nsw i64 %259, 1
  %264 = load volatile i64*, i64** %11
  store i64 %262, i64* %264, align 8
  store i32 412771897, i32* %27
  br label %375

; <label>:265:                                    ; preds = %28
  %266 = load i32, i32* @x.269
  %267 = load i32, i32* @y.270
  %268 = add i32 %266, 1305216621
  %269 = sub i32 %268, 1
  %270 = sub i32 %269, 1305216621
  %271 = sub i32 %266, 1
  %272 = mul i32 %266, %270
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %267, 10
  %276 = and i1 %274, %275
  %277 = xor i1 %274, %275
  %278 = or i1 %276, %277
  %279 = or i1 %274, %275
  %280 = select i1 %278, i32 1973549972, i32 -1428845149
  store i32 %280, i32* %27
  br label %375

; <label>:281:                                    ; preds = %28
  %282 = load volatile %struct.ball**, %struct.ball*** %12
  %283 = load %struct.ball*, %struct.ball** %282, align 8
  %284 = load volatile i64*, i64** %11
  %285 = load i64, i64* %284, align 8
  %286 = load volatile i64*, i64** %9
  %287 = load i64, i64* %286, align 8
  %288 = load volatile %struct.ball*, %struct.ball** %14
  %289 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %288) #3
  %290 = load volatile %struct.ball*, %struct.ball** %7
  %291 = bitcast %struct.ball* %290 to i8*
  %292 = bitcast %struct.ball* %289 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %291, i8* %292, i64 16, i32 8, i1 false)
  %293 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6
  %294 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %293 to i8*
  %295 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %13
  %296 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %295 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %294, i8* %296, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__iter_comp_valIZ4mainE3$_0EENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS4_EE"()
  %297 = load volatile %struct.ball*, %struct.ball** %7
  %298 = bitcast %struct.ball* %297 to { i64, i64 }*
  %299 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %298, i32 0, i32 0
  %300 = load i64, i64* %299, align 8
  %301 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %298, i32 0, i32 1
  %302 = load i64, i64* %301, align 8
  call void @"_ZSt11__push_heapIP4balllS0_N9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_0EEEvT_T0_S8_T1_T2_"(%struct.ball* %283, i64 %285, i64 %287, i64 %300, i64 %302)
  %303 = load i32, i32* @x.269
  %304 = load i32, i32* @y.270
  %305 = sub i32 %303, -458410683
  %306 = sub i32 %305, 1
  %307 = add i32 %306, -458410683
  %308 = sub i32 %303, 1
  %309 = mul i32 %303, %307
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %304, 10
  %313 = and i1 %311, %312
  %314 = xor i1 %311, %312
  %315 = or i1 %313, %314
  %316 = or i1 %311, %312
  %317 = select i1 %315, i32 1220072558, i32 -1428845149
  store i32 %317, i32* %27
  br label %375

; <label>:318:                                    ; preds = %28
  ret void

; <label>:319:                                    ; preds = %28
  %320 = alloca %struct.ball, align 8
  %321 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %322 = alloca %struct.ball*, align 8
  %323 = alloca i64, align 8
  %324 = alloca i64, align 8
  %325 = alloca i64, align 8
  %326 = alloca i64, align 8
  %327 = alloca %struct.ball, align 8
  %328 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 1
  %329 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %330 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 1
  %331 = bitcast %struct.ball* %320 to { i64, i64 }*
  %332 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %331, i32 0, i32 0
  store i64 %3, i64* %332, align 8
  %333 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %331, i32 0, i32 1
  store i64 %4, i64* %333, align 8
  store %struct.ball* %0, %struct.ball** %322, align 8
  store i64 %1, i64* %323, align 8
  store i64 %2, i64* %324, align 8
  %334 = load i64, i64* %323, align 8
  store i64 %334, i64* %325, align 8
  %335 = load i64, i64* %323, align 8
  store i64 %335, i64* %326, align 8
  store i32 1055146372, i32* %27
  br label %375

; <label>:336:                                    ; preds = %28
  %337 = load volatile %struct.ball**, %struct.ball*** %12
  %338 = load %struct.ball*, %struct.ball** %337, align 8
  %339 = load volatile i64*, i64** %8
  %340 = load i64, i64* %339, align 8
  %341 = getelementptr inbounds %struct.ball, %struct.ball* %338, i64 %340
  %342 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %341) #3
  %343 = load volatile %struct.ball**, %struct.ball*** %12
  %344 = load %struct.ball*, %struct.ball** %343, align 8
  %345 = load volatile i64*, i64** %11
  %346 = load i64, i64* %345, align 8
  %347 = getelementptr inbounds %struct.ball, %struct.ball* %344, i64 %346
  %348 = bitcast %struct.ball* %347 to i8*
  %349 = bitcast %struct.ball* %342 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %348, i8* %349, i64 16, i32 8, i1 false)
  %350 = load volatile i64*, i64** %8
  %351 = load i64, i64* %350, align 8
  %352 = load volatile i64*, i64** %11
  store i64 %351, i64* %352, align 8
  store i32 1445307636, i32* %27
  br label %375

; <label>:353:                                    ; preds = %28
  %354 = load volatile %struct.ball**, %struct.ball*** %12
  %355 = load %struct.ball*, %struct.ball** %354, align 8
  %356 = load volatile i64*, i64** %11
  %357 = load i64, i64* %356, align 8
  %358 = load volatile i64*, i64** %9
  %359 = load i64, i64* %358, align 8
  %360 = load volatile %struct.ball*, %struct.ball** %14
  %361 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %360) #3
  %362 = load volatile %struct.ball*, %struct.ball** %7
  %363 = bitcast %struct.ball* %362 to i8*
  %364 = bitcast %struct.ball* %361 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %363, i8* %364, i64 16, i32 8, i1 false)
  %365 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6
  %366 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %365 to i8*
  %367 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %13
  %368 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %366, i8* %368, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__iter_comp_valIZ4mainE3$_0EENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS4_EE"()
  %369 = load volatile %struct.ball*, %struct.ball** %7
  %370 = bitcast %struct.ball* %369 to { i64, i64 }*
  %371 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %370, i32 0, i32 0
  %372 = load i64, i64* %371, align 8
  %373 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %370, i32 0, i32 1
  %374 = load i64, i64* %373, align 8
  call void @"_ZSt11__push_heapIP4balllS0_N9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_0EEEvT_T0_S8_T1_T2_"(%struct.ball* %355, i64 %357, i64 %359, i64 %372, i64 %374)
  store i32 1973549972, i32* %27
  br label %375

; <label>:375:                                    ; preds = %353, %336, %319, %281, %265, %231, %219, %210, %209, %166, %138, %130, %103, %91, %90, %51, %31, %30
  br label %28
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__push_heapIP4balllS0_N9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_0EEEvT_T0_S8_T1_T2_"(%struct.ball*, i64, i64, i64, i64) #0 {
  %6 = alloca i1
  %7 = alloca i1
  %8 = alloca %struct.ball, align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 1
  %10 = alloca %struct.ball*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = bitcast %struct.ball* %8 to { i64, i64 }*
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 0
  store i64 %3, i64* %15, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 1
  store i64 %4, i64* %16, align 8
  store %struct.ball* %0, %struct.ball** %10, align 8
  store i64 %1, i64* %11, align 8
  store i64 %2, i64* %12, align 8
  %17 = load i64, i64* %11, align 8
  %18 = add i64 %17, 8767396975774762354
  %19 = sub i64 %18, 1
  %20 = sub i64 %19, 8767396975774762354
  %21 = sub nsw i64 %17, 1
  %22 = sdiv i64 %20, 2
  store i64 %22, i64* %13, align 8
  %23 = alloca i32
  store i32 672875438, i32* %23
  %24 = alloca i1
  br label %25

; <label>:25:                                     ; preds = %5, %275
  %26 = load i32, i32* %23
  switch i32 %26, label %27 [
    i32 672875438, label %28
    i32 1083228666, label %55
    i32 1142009192, label %86
    i32 -1731538898, label %89
    i32 -1535790485, label %94
    i32 -1531608719, label %111
    i32 749199451, label %139
    i32 942308518, label %142
    i32 1043287552, label %169
    i32 -74048283, label %212
    i32 2118755512, label %213
    i32 -631993858, label %220
    i32 1540620535, label %224
    i32 373616874, label %225
  ]

; <label>:27:                                     ; preds = %25
  br label %275

; <label>:28:                                     ; preds = %25
  %29 = load i32, i32* @x.271
  %30 = load i32, i32* @y.272
  %31 = sub i32 0, 1
  %32 = add i32 %29, %31
  %33 = sub i32 %29, 1
  %34 = mul i32 %29, %32
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %30, 10
  %38 = xor i1 %36, true
  %39 = xor i1 %37, true
  %40 = xor i1 true, true
  %41 = and i1 %38, true
  %42 = and i1 %36, %40
  %43 = and i1 %39, true
  %44 = and i1 %37, %40
  %45 = or i1 %41, %42
  %46 = or i1 %43, %44
  %47 = xor i1 %45, %46
  %48 = or i1 %38, %39
  %49 = xor i1 %48, true
  %50 = or i1 true, %40
  %51 = and i1 %49, %50
  %52 = or i1 %47, %51
  %53 = or i1 %36, %37
  %54 = select i1 %52, i32 1083228666, i32 -631993858
  store i32 %54, i32* %23
  br label %275

; <label>:55:                                     ; preds = %25
  %56 = load i64, i64* %11, align 8
  %57 = load i64, i64* %12, align 8
  %58 = icmp sgt i64 %56, %57
  store i1 %58, i1* %7
  %59 = load i32, i32* @x.271
  %60 = load i32, i32* @y.272
  %61 = sub i32 %59, -667585593
  %62 = sub i32 %61, 1
  %63 = add i32 %62, -667585593
  %64 = sub i32 %59, 1
  %65 = mul i32 %59, %63
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %60, 10
  %69 = xor i1 %67, true
  %70 = xor i1 %68, true
  %71 = xor i1 true, true
  %72 = and i1 %69, true
  %73 = and i1 %67, %71
  %74 = and i1 %70, true
  %75 = and i1 %68, %71
  %76 = or i1 %72, %73
  %77 = or i1 %74, %75
  %78 = xor i1 %76, %77
  %79 = or i1 %69, %70
  %80 = xor i1 %79, true
  %81 = or i1 true, %71
  %82 = and i1 %80, %81
  %83 = or i1 %78, %82
  %84 = or i1 %67, %68
  %85 = select i1 %83, i32 1142009192, i32 -631993858
  store i32 %85, i32* %23
  br label %275

; <label>:86:                                     ; preds = %25
  %87 = load volatile i1, i1* %7
  %88 = select i1 %87, i32 -1731538898, i32 -1535790485
  store i32 %88, i32* %23
  store i1 false, i1* %24
  br label %275

; <label>:89:                                     ; preds = %25
  %90 = load %struct.ball*, %struct.ball** %10, align 8
  %91 = load i64, i64* %13, align 8
  %92 = getelementptr inbounds %struct.ball, %struct.ball* %90, i64 %91
  %93 = call zeroext i1 @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_0EclIP4ballS5_EEbT_RT0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val"* %9, %struct.ball* %92, %struct.ball* dereferenceable(16) %8)
  store i32 -1535790485, i32* %23
  store i1 %93, i1* %24
  br label %275

; <label>:94:                                     ; preds = %25
  %95 = load i1, i1* %24
  store i1 %95, i1* %6
  %96 = load i32, i32* @x.271
  %97 = load i32, i32* @y.272
  %98 = sub i32 %96, 1046116236
  %99 = sub i32 %98, 1
  %100 = add i32 %99, 1046116236
  %101 = sub i32 %96, 1
  %102 = mul i32 %96, %100
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %97, 10
  %106 = and i1 %104, %105
  %107 = xor i1 %104, %105
  %108 = or i1 %106, %107
  %109 = or i1 %104, %105
  %110 = select i1 %108, i32 -1531608719, i32 1540620535
  store i32 %110, i32* %23
  br label %275

; <label>:111:                                    ; preds = %25
  %112 = load i32, i32* @x.271
  %113 = load i32, i32* @y.272
  %114 = add i32 %112, -1150903057
  %115 = sub i32 %114, 1
  %116 = sub i32 %115, -1150903057
  %117 = sub i32 %112, 1
  %118 = mul i32 %112, %116
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %113, 10
  %122 = xor i1 %120, true
  %123 = xor i1 %121, true
  %124 = xor i1 true, true
  %125 = and i1 %122, true
  %126 = and i1 %120, %124
  %127 = and i1 %123, true
  %128 = and i1 %121, %124
  %129 = or i1 %125, %126
  %130 = or i1 %127, %128
  %131 = xor i1 %129, %130
  %132 = or i1 %122, %123
  %133 = xor i1 %132, true
  %134 = or i1 true, %124
  %135 = and i1 %133, %134
  %136 = or i1 %131, %135
  %137 = or i1 %120, %121
  %138 = select i1 %136, i32 749199451, i32 1540620535
  store i32 %138, i32* %23
  br label %275

; <label>:139:                                    ; preds = %25
  %140 = load volatile i1, i1* %6
  %141 = select i1 %140, i32 942308518, i32 2118755512
  store i32 %141, i32* %23
  br label %275

; <label>:142:                                    ; preds = %25
  %143 = load i32, i32* @x.271
  %144 = load i32, i32* @y.272
  %145 = sub i32 0, 1
  %146 = add i32 %143, %145
  %147 = sub i32 %143, 1
  %148 = mul i32 %143, %146
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %144, 10
  %152 = xor i1 %150, true
  %153 = xor i1 %151, true
  %154 = xor i1 true, true
  %155 = and i1 %152, true
  %156 = and i1 %150, %154
  %157 = and i1 %153, true
  %158 = and i1 %151, %154
  %159 = or i1 %155, %156
  %160 = or i1 %157, %158
  %161 = xor i1 %159, %160
  %162 = or i1 %152, %153
  %163 = xor i1 %162, true
  %164 = or i1 true, %154
  %165 = and i1 %163, %164
  %166 = or i1 %161, %165
  %167 = or i1 %150, %151
  %168 = select i1 %166, i32 1043287552, i32 373616874
  store i32 %168, i32* %23
  br label %275

; <label>:169:                                    ; preds = %25
  %170 = load %struct.ball*, %struct.ball** %10, align 8
  %171 = load i64, i64* %13, align 8
  %172 = getelementptr inbounds %struct.ball, %struct.ball* %170, i64 %171
  %173 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %172) #3
  %174 = load %struct.ball*, %struct.ball** %10, align 8
  %175 = load i64, i64* %11, align 8
  %176 = getelementptr inbounds %struct.ball, %struct.ball* %174, i64 %175
  %177 = bitcast %struct.ball* %176 to i8*
  %178 = bitcast %struct.ball* %173 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %177, i8* %178, i64 16, i32 8, i1 false)
  %179 = load i64, i64* %13, align 8
  store i64 %179, i64* %11, align 8
  %180 = load i64, i64* %11, align 8
  %181 = add i64 %180, 9109286637758443218
  %182 = sub i64 %181, 1
  %183 = sub i64 %182, 9109286637758443218
  %184 = sub nsw i64 %180, 1
  %185 = sdiv i64 %183, 2
  store i64 %185, i64* %13, align 8
  %186 = load i32, i32* @x.271
  %187 = load i32, i32* @y.272
  %188 = sub i32 0, 1
  %189 = add i32 %186, %188
  %190 = sub i32 %186, 1
  %191 = mul i32 %186, %189
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %187, 10
  %195 = xor i1 %193, true
  %196 = xor i1 %194, true
  %197 = xor i1 false, true
  %198 = and i1 %195, false
  %199 = and i1 %193, %197
  %200 = and i1 %196, false
  %201 = and i1 %194, %197
  %202 = or i1 %198, %199
  %203 = or i1 %200, %201
  %204 = xor i1 %202, %203
  %205 = or i1 %195, %196
  %206 = xor i1 %205, true
  %207 = or i1 false, %197
  %208 = and i1 %206, %207
  %209 = or i1 %204, %208
  %210 = or i1 %193, %194
  %211 = select i1 %209, i32 -74048283, i32 373616874
  store i32 %211, i32* %23
  br label %275

; <label>:212:                                    ; preds = %25
  store i32 672875438, i32* %23
  br label %275

; <label>:213:                                    ; preds = %25
  %214 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %8) #3
  %215 = load %struct.ball*, %struct.ball** %10, align 8
  %216 = load i64, i64* %11, align 8
  %217 = getelementptr inbounds %struct.ball, %struct.ball* %215, i64 %216
  %218 = bitcast %struct.ball* %217 to i8*
  %219 = bitcast %struct.ball* %214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %218, i8* %219, i64 16, i32 8, i1 false)
  ret void

; <label>:220:                                    ; preds = %25
  %221 = load i64, i64* %11, align 8
  %222 = load i64, i64* %12, align 8
  %223 = icmp sgt i64 %221, %222
  store i32 1083228666, i32* %23
  br label %275

; <label>:224:                                    ; preds = %25
  store i32 -1531608719, i32* %23
  br label %275

; <label>:225:                                    ; preds = %25
  %226 = load %struct.ball*, %struct.ball** %10, align 8
  %227 = load i64, i64* %13, align 8
  %228 = getelementptr inbounds %struct.ball, %struct.ball* %226, i64 %227
  %229 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %228) #3
  %230 = load %struct.ball*, %struct.ball** %10, align 8
  %231 = load i64, i64* %11, align 8
  %232 = getelementptr inbounds %struct.ball, %struct.ball* %230, i64 %231
  %233 = bitcast %struct.ball* %232 to i8*
  %234 = bitcast %struct.ball* %229 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %233, i8* %234, i64 16, i32 8, i1 false)
  %235 = load i64, i64* %13, align 8
  store i64 %235, i64* %11, align 8
  %236 = load i64, i64* %11, align 8
  %237 = shl i64 %236, 1
  %238 = shl i64 %236, 1
  %239 = shl i64 %236, 1
  %240 = shl i64 %236, 1
  %241 = shl i64 %236, 1
  %242 = sub i64 0, 1
  %243 = add i64 %236, %242
  %244 = sub nsw i64 %236, 1
  %245 = sub i64 0, %243
  %246 = add i64 0, %245
  %247 = sub i64 0, %243
  %248 = sub i64 %246, 4552279612037088161
  %249 = add i64 %248, 2
  %250 = add i64 %249, 4552279612037088161
  %251 = add i64 %246, 2
  %252 = shl i64 %243, 2
  %253 = sub i64 0, %243
  %254 = add i64 0, %253
  %255 = sub i64 0, %243
  %256 = sub i64 %254, 8846835247732168014
  %257 = add i64 %256, 2
  %258 = add i64 %257, 8846835247732168014
  %259 = add i64 %254, 2
  %260 = sub i64 %243, 222024592605076754
  %261 = sub i64 %260, 2
  %262 = add i64 %261, 222024592605076754
  %263 = sub i64 %243, 2
  %264 = mul i64 %262, 2
  %265 = add i64 0, 2660295336193471676
  %266 = sub i64 %265, %243
  %267 = sub i64 %266, 2660295336193471676
  %268 = sub i64 0, %243
  %269 = sub i64 0, %267
  %270 = sub i64 0, 2
  %271 = add i64 %269, %270
  %272 = sub i64 0, %271
  %273 = add i64 %267, 2
  %274 = sdiv i64 %243, 2
  store i64 %274, i64* %13, align 8
  store i32 1043287552, i32* %23
  br label %275

; <label>:275:                                    ; preds = %225, %224, %220, %212, %169, %142, %139, %111, %94, %89, %86, %55, %28, %27
  br label %25
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops15__iter_comp_valIZ4mainE3$_0EENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS4_EE"() #0 {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.273
  %4 = load i32, i32* @y.274
  %5 = sub i32 0, 1
  %6 = add i32 %3, %5
  %7 = sub i32 %3, 1
  %8 = mul i32 %3, %6
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %2
  %11 = icmp slt i32 %4, 10
  store i1 %11, i1* %1
  %12 = alloca i32
  store i32 1639538863, i32* %12
  br label %13

; <label>:13:                                     ; preds = %0, %73
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 1639538863, label %16
    i32 -1846523350, label %36
    i32 -1950261331, label %67
    i32 1541560832, label %68
  ]

; <label>:15:                                     ; preds = %13
  br label %73

; <label>:16:                                     ; preds = %13
  %17 = load volatile i1, i1* %2
  %18 = load volatile i1, i1* %1
  %19 = xor i1 %17, true
  %20 = xor i1 %18, true
  %21 = xor i1 false, true
  %22 = and i1 %19, false
  %23 = and i1 %17, %21
  %24 = and i1 %20, false
  %25 = and i1 %18, %21
  %26 = or i1 %22, %23
  %27 = or i1 %24, %25
  %28 = xor i1 %26, %27
  %29 = or i1 %19, %20
  %30 = xor i1 %29, true
  %31 = or i1 false, %21
  %32 = and i1 %30, %31
  %33 = or i1 %28, %32
  %34 = or i1 %17, %18
  %35 = select i1 %33, i32 -1846523350, i32 1541560832
  store i32 %35, i32* %12
  br label %73

; <label>:36:                                     ; preds = %13
  %37 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 1
  %38 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %39 = alloca %class.anon, align 1
  %40 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %38, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_0EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val"* %37)
  %41 = load i32, i32* @x.273
  %42 = load i32, i32* @y.274
  %43 = sub i32 0, 1
  %44 = add i32 %41, %43
  %45 = sub i32 %41, 1
  %46 = mul i32 %41, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %42, 10
  %50 = xor i1 %48, true
  %51 = xor i1 %49, true
  %52 = xor i1 true, true
  %53 = and i1 %50, true
  %54 = and i1 %48, %52
  %55 = and i1 %51, true
  %56 = and i1 %49, %52
  %57 = or i1 %53, %54
  %58 = or i1 %55, %56
  %59 = xor i1 %57, %58
  %60 = or i1 %50, %51
  %61 = xor i1 %60, true
  %62 = or i1 true, %52
  %63 = and i1 %61, %62
  %64 = or i1 %59, %63
  %65 = or i1 %48, %49
  %66 = select i1 %64, i32 -1950261331, i32 1541560832
  store i32 %66, i32* %12
  br label %73

; <label>:67:                                     ; preds = %13
  ret void

; <label>:68:                                     ; preds = %13
  %69 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 1
  %70 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %71 = alloca %class.anon, align 1
  %72 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %70, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_0EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val"* %69)
  store i32 -1846523350, i32* %12
  br label %73

; <label>:73:                                     ; preds = %68, %36, %16, %15
  br label %13
}

; Function Attrs: noinline uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_0EclIP4ballS5_EEbT_RT0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val"*, %struct.ball*, %struct.ball* dereferenceable(16)) #0 align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.275
  %8 = load i32, i32* @y.276
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 -2080040168, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %75
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -2080040168, label %20
    i32 -15825223, label %28
    i32 1163494761, label %64
    i32 -289244052, label %66
  ]

; <label>:19:                                     ; preds = %17
  br label %75

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 -15825223, i32 -289244052
  store i32 %27, i32* %16
  br label %75

; <label>:28:                                     ; preds = %17
  %29 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, align 8
  %30 = alloca %struct.ball*, align 8
  %31 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %29, align 8
  store %struct.ball* %1, %struct.ball** %30, align 8
  store %struct.ball* %2, %struct.ball** %31, align 8
  %32 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %29, align 8
  %33 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %32, i32 0, i32 0
  %34 = load %struct.ball*, %struct.ball** %30, align 8
  %35 = load %struct.ball*, %struct.ball** %31, align 8
  %36 = call zeroext i1 @"_ZZ4mainENK3$_0clERK4ballS2_"(%class.anon* %33, %struct.ball* dereferenceable(16) %34, %struct.ball* dereferenceable(16) %35)
  store i1 %36, i1* %4
  %37 = load i32, i32* @x.275
  %38 = load i32, i32* @y.276
  %39 = sub i32 %37, -1940748196
  %40 = sub i32 %39, 1
  %41 = add i32 %40, -1940748196
  %42 = sub i32 %37, 1
  %43 = mul i32 %37, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %38, 10
  %47 = xor i1 %45, true
  %48 = xor i1 %46, true
  %49 = xor i1 true, true
  %50 = and i1 %47, true
  %51 = and i1 %45, %49
  %52 = and i1 %48, true
  %53 = and i1 %46, %49
  %54 = or i1 %50, %51
  %55 = or i1 %52, %53
  %56 = xor i1 %54, %55
  %57 = or i1 %47, %48
  %58 = xor i1 %57, true
  %59 = or i1 true, %49
  %60 = and i1 %58, %59
  %61 = or i1 %56, %60
  %62 = or i1 %45, %46
  %63 = select i1 %61, i32 1163494761, i32 -289244052
  store i32 %63, i32* %16
  br label %75

; <label>:64:                                     ; preds = %17
  %65 = load volatile i1, i1* %4
  ret i1 %65

; <label>:66:                                     ; preds = %17
  %67 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, align 8
  %68 = alloca %struct.ball*, align 8
  %69 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %67, align 8
  store %struct.ball* %1, %struct.ball** %68, align 8
  store %struct.ball* %2, %struct.ball** %69, align 8
  %70 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %67, align 8
  %71 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %70, i32 0, i32 0
  %72 = load %struct.ball*, %struct.ball** %68, align 8
  %73 = load %struct.ball*, %struct.ball** %69, align 8
  %74 = call zeroext i1 @"_ZZ4mainENK3$_0clERK4ballS2_"(%class.anon* %71, %struct.ball* dereferenceable(16) %72, %struct.ball* dereferenceable(16) %73)
  store i32 -15825223, i32* %16
  br label %75

; <label>:75:                                     ; preds = %66, %28, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZZ4mainENK3$_0clERK4ballS2_"(%class.anon*, %struct.ball* dereferenceable(16), %struct.ball* dereferenceable(16)) #4 align 2 {
  %4 = alloca %class.anon*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %class.anon* %0, %class.anon** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %class.anon*, %class.anon** %4, align 8
  %8 = load %struct.ball*, %struct.ball** %5, align 8
  %9 = getelementptr inbounds %struct.ball, %struct.ball* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load %struct.ball*, %struct.ball** %6, align 8
  %12 = getelementptr inbounds %struct.ball, %struct.ball* %11, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp slt i64 %10, %13
  ret i1 %14
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_0EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val"*) unnamed_addr #4 align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.279
  %5 = load i32, i32* @y.280
  %6 = sub i32 0, 1
  %7 = add i32 %4, %6
  %8 = sub i32 %4, 1
  %9 = mul i32 %4, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %3
  %12 = icmp slt i32 %5, 10
  store i1 %12, i1* %2
  %13 = alloca i32
  store i32 1912992411, i32* %13
  br label %14

; <label>:14:                                     ; preds = %1, %75
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 1912992411, label %17
    i32 -996101821, label %37
    i32 1134042245, label %69
    i32 -579709754, label %70
  ]

; <label>:16:                                     ; preds = %14
  br label %75

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %3
  %19 = load volatile i1, i1* %2
  %20 = xor i1 %18, true
  %21 = xor i1 %19, true
  %22 = xor i1 false, true
  %23 = and i1 %20, false
  %24 = and i1 %18, %22
  %25 = and i1 %21, false
  %26 = and i1 %19, %22
  %27 = or i1 %23, %24
  %28 = or i1 %25, %26
  %29 = xor i1 %27, %28
  %30 = or i1 %20, %21
  %31 = xor i1 %30, true
  %32 = or i1 false, %22
  %33 = and i1 %31, %32
  %34 = or i1 %29, %33
  %35 = or i1 %18, %19
  %36 = select i1 %34, i32 -996101821, i32 -579709754
  store i32 %36, i32* %13
  br label %75

; <label>:37:                                     ; preds = %14
  %38 = alloca %class.anon, align 1
  %39 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %39, align 8
  %40 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %39, align 8
  %41 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %40, i32 0, i32 0
  %42 = load i32, i32* @x.279
  %43 = load i32, i32* @y.280
  %44 = add i32 %42, 126484868
  %45 = sub i32 %44, 1
  %46 = sub i32 %45, 126484868
  %47 = sub i32 %42, 1
  %48 = mul i32 %42, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %43, 10
  %52 = xor i1 %50, true
  %53 = xor i1 %51, true
  %54 = xor i1 false, true
  %55 = and i1 %52, false
  %56 = and i1 %50, %54
  %57 = and i1 %53, false
  %58 = and i1 %51, %54
  %59 = or i1 %55, %56
  %60 = or i1 %57, %58
  %61 = xor i1 %59, %60
  %62 = or i1 %52, %53
  %63 = xor i1 %62, true
  %64 = or i1 false, %54
  %65 = and i1 %63, %64
  %66 = or i1 %61, %65
  %67 = or i1 %50, %51
  %68 = select i1 %66, i32 1134042245, i32 -579709754
  store i32 %68, i32* %13
  br label %75

; <label>:69:                                     ; preds = %14
  ret void

; <label>:70:                                     ; preds = %14
  %71 = alloca %class.anon, align 1
  %72 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %72, align 8
  %73 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %72, align 8
  %74 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %73, i32 0, i32 0
  store i32 -996101821, i32* %13
  br label %75

; <label>:75:                                     ; preds = %70, %37, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt22__move_median_to_firstIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %5 = alloca i1
  %6 = alloca i1
  %7 = alloca %struct.ball*
  %8 = alloca %struct.ball*
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %10 = alloca %struct.ball*, align 8
  %11 = alloca %struct.ball*, align 8
  %12 = alloca %struct.ball*, align 8
  %13 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %10, align 8
  store %struct.ball* %1, %struct.ball** %11, align 8
  store %struct.ball* %2, %struct.ball** %12, align 8
  store %struct.ball* %3, %struct.ball** %13, align 8
  %14 = load %struct.ball*, %struct.ball** %11, align 8
  store %struct.ball* %14, %struct.ball** %8
  %15 = load %struct.ball*, %struct.ball** %12, align 8
  store %struct.ball* %15, %struct.ball** %7
  %16 = alloca i32
  store i32 -212014355, i32* %16
  br label %17

; <label>:17:                                     ; preds = %4, %267
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -212014355, label %20
    i32 1878602607, label %25
    i32 -960761711, label %30
    i32 -1890998728, label %33
    i32 1471301977, label %49
    i32 1475274592, label %80
    i32 -2095535668, label %83
    i32 2108688729, label %86
    i32 -785058643, label %89
    i32 -1642662374, label %117
    i32 545051132, label %145
    i32 -486471201, label %146
    i32 -1030415060, label %147
    i32 -1760859556, label %163
    i32 896386018, label %181
    i32 1068162259, label %184
    i32 -1833429367, label %187
    i32 -1498889913, label %192
    i32 -1097373105, label %195
    i32 1723328251, label %198
    i32 1216718384, label %199
    i32 820416608, label %200
    i32 396218881, label %228
    i32 327847620, label %256
    i32 -1154145996, label %257
    i32 382061462, label %261
    i32 1319321756, label %262
    i32 1725603772, label %266
  ]

; <label>:19:                                     ; preds = %17
  br label %267

; <label>:20:                                     ; preds = %17
  %21 = load volatile %struct.ball*, %struct.ball** %8
  %22 = load volatile %struct.ball*, %struct.ball** %7
  %23 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9, %struct.ball* %21, %struct.ball* %22)
  %24 = select i1 %23, i32 1878602607, i32 -1030415060
  store i32 %24, i32* %16
  br label %267

; <label>:25:                                     ; preds = %17
  %26 = load %struct.ball*, %struct.ball** %12, align 8
  %27 = load %struct.ball*, %struct.ball** %13, align 8
  %28 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9, %struct.ball* %26, %struct.ball* %27)
  %29 = select i1 %28, i32 -960761711, i32 -1890998728
  store i32 %29, i32* %16
  br label %267

; <label>:30:                                     ; preds = %17
  %31 = load %struct.ball*, %struct.ball** %10, align 8
  %32 = load %struct.ball*, %struct.ball** %12, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %31, %struct.ball* %32)
  store i32 -486471201, i32* %16
  br label %267

; <label>:33:                                     ; preds = %17
  %34 = load i32, i32* @x.281
  %35 = load i32, i32* @y.282
  %36 = sub i32 %34, 1786297745
  %37 = sub i32 %36, 1
  %38 = add i32 %37, 1786297745
  %39 = sub i32 %34, 1
  %40 = mul i32 %34, %38
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %35, 10
  %44 = and i1 %42, %43
  %45 = xor i1 %42, %43
  %46 = or i1 %44, %45
  %47 = or i1 %42, %43
  %48 = select i1 %46, i32 1471301977, i32 -1154145996
  store i32 %48, i32* %16
  br label %267

; <label>:49:                                     ; preds = %17
  %50 = load %struct.ball*, %struct.ball** %11, align 8
  %51 = load %struct.ball*, %struct.ball** %13, align 8
  %52 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9, %struct.ball* %50, %struct.ball* %51)
  store i1 %52, i1* %6
  %53 = load i32, i32* @x.281
  %54 = load i32, i32* @y.282
  %55 = add i32 %53, 2023622641
  %56 = sub i32 %55, 1
  %57 = sub i32 %56, 2023622641
  %58 = sub i32 %53, 1
  %59 = mul i32 %53, %57
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %54, 10
  %63 = xor i1 %61, true
  %64 = xor i1 %62, true
  %65 = xor i1 false, true
  %66 = and i1 %63, false
  %67 = and i1 %61, %65
  %68 = and i1 %64, false
  %69 = and i1 %62, %65
  %70 = or i1 %66, %67
  %71 = or i1 %68, %69
  %72 = xor i1 %70, %71
  %73 = or i1 %63, %64
  %74 = xor i1 %73, true
  %75 = or i1 false, %65
  %76 = and i1 %74, %75
  %77 = or i1 %72, %76
  %78 = or i1 %61, %62
  %79 = select i1 %77, i32 1475274592, i32 -1154145996
  store i32 %79, i32* %16
  br label %267

; <label>:80:                                     ; preds = %17
  %81 = load volatile i1, i1* %6
  %82 = select i1 %81, i32 -2095535668, i32 2108688729
  store i32 %82, i32* %16
  br label %267

; <label>:83:                                     ; preds = %17
  %84 = load %struct.ball*, %struct.ball** %10, align 8
  %85 = load %struct.ball*, %struct.ball** %13, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %84, %struct.ball* %85)
  store i32 -785058643, i32* %16
  br label %267

; <label>:86:                                     ; preds = %17
  %87 = load %struct.ball*, %struct.ball** %10, align 8
  %88 = load %struct.ball*, %struct.ball** %11, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %87, %struct.ball* %88)
  store i32 -785058643, i32* %16
  br label %267

; <label>:89:                                     ; preds = %17
  %90 = load i32, i32* @x.281
  %91 = load i32, i32* @y.282
  %92 = sub i32 %90, 1648656423
  %93 = sub i32 %92, 1
  %94 = add i32 %93, 1648656423
  %95 = sub i32 %90, 1
  %96 = mul i32 %90, %94
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %91, 10
  %100 = xor i1 %98, true
  %101 = xor i1 %99, true
  %102 = xor i1 true, true
  %103 = and i1 %100, true
  %104 = and i1 %98, %102
  %105 = and i1 %101, true
  %106 = and i1 %99, %102
  %107 = or i1 %103, %104
  %108 = or i1 %105, %106
  %109 = xor i1 %107, %108
  %110 = or i1 %100, %101
  %111 = xor i1 %110, true
  %112 = or i1 true, %102
  %113 = and i1 %111, %112
  %114 = or i1 %109, %113
  %115 = or i1 %98, %99
  %116 = select i1 %114, i32 -1642662374, i32 382061462
  store i32 %116, i32* %16
  br label %267

; <label>:117:                                    ; preds = %17
  %118 = load i32, i32* @x.281
  %119 = load i32, i32* @y.282
  %120 = add i32 %118, 1105988893
  %121 = sub i32 %120, 1
  %122 = sub i32 %121, 1105988893
  %123 = sub i32 %118, 1
  %124 = mul i32 %118, %122
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %119, 10
  %128 = xor i1 %126, true
  %129 = xor i1 %127, true
  %130 = xor i1 false, true
  %131 = and i1 %128, false
  %132 = and i1 %126, %130
  %133 = and i1 %129, false
  %134 = and i1 %127, %130
  %135 = or i1 %131, %132
  %136 = or i1 %133, %134
  %137 = xor i1 %135, %136
  %138 = or i1 %128, %129
  %139 = xor i1 %138, true
  %140 = or i1 false, %130
  %141 = and i1 %139, %140
  %142 = or i1 %137, %141
  %143 = or i1 %126, %127
  %144 = select i1 %142, i32 545051132, i32 382061462
  store i32 %144, i32* %16
  br label %267

; <label>:145:                                    ; preds = %17
  store i32 -486471201, i32* %16
  br label %267

; <label>:146:                                    ; preds = %17
  store i32 820416608, i32* %16
  br label %267

; <label>:147:                                    ; preds = %17
  %148 = load i32, i32* @x.281
  %149 = load i32, i32* @y.282
  %150 = add i32 %148, 1813244650
  %151 = sub i32 %150, 1
  %152 = sub i32 %151, 1813244650
  %153 = sub i32 %148, 1
  %154 = mul i32 %148, %152
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %149, 10
  %158 = and i1 %156, %157
  %159 = xor i1 %156, %157
  %160 = or i1 %158, %159
  %161 = or i1 %156, %157
  %162 = select i1 %160, i32 -1760859556, i32 1319321756
  store i32 %162, i32* %16
  br label %267

; <label>:163:                                    ; preds = %17
  %164 = load %struct.ball*, %struct.ball** %11, align 8
  %165 = load %struct.ball*, %struct.ball** %13, align 8
  %166 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9, %struct.ball* %164, %struct.ball* %165)
  store i1 %166, i1* %5
  %167 = load i32, i32* @x.281
  %168 = load i32, i32* @y.282
  %169 = sub i32 0, 1
  %170 = add i32 %167, %169
  %171 = sub i32 %167, 1
  %172 = mul i32 %167, %170
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %168, 10
  %176 = and i1 %174, %175
  %177 = xor i1 %174, %175
  %178 = or i1 %176, %177
  %179 = or i1 %174, %175
  %180 = select i1 %178, i32 896386018, i32 1319321756
  store i32 %180, i32* %16
  br label %267

; <label>:181:                                    ; preds = %17
  %182 = load volatile i1, i1* %5
  %183 = select i1 %182, i32 1068162259, i32 -1833429367
  store i32 %183, i32* %16
  br label %267

; <label>:184:                                    ; preds = %17
  %185 = load %struct.ball*, %struct.ball** %10, align 8
  %186 = load %struct.ball*, %struct.ball** %11, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %185, %struct.ball* %186)
  store i32 1216718384, i32* %16
  br label %267

; <label>:187:                                    ; preds = %17
  %188 = load %struct.ball*, %struct.ball** %12, align 8
  %189 = load %struct.ball*, %struct.ball** %13, align 8
  %190 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9, %struct.ball* %188, %struct.ball* %189)
  %191 = select i1 %190, i32 -1498889913, i32 -1097373105
  store i32 %191, i32* %16
  br label %267

; <label>:192:                                    ; preds = %17
  %193 = load %struct.ball*, %struct.ball** %10, align 8
  %194 = load %struct.ball*, %struct.ball** %13, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %193, %struct.ball* %194)
  store i32 1723328251, i32* %16
  br label %267

; <label>:195:                                    ; preds = %17
  %196 = load %struct.ball*, %struct.ball** %10, align 8
  %197 = load %struct.ball*, %struct.ball** %12, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %196, %struct.ball* %197)
  store i32 1723328251, i32* %16
  br label %267

; <label>:198:                                    ; preds = %17
  store i32 1216718384, i32* %16
  br label %267

; <label>:199:                                    ; preds = %17
  store i32 820416608, i32* %16
  br label %267

; <label>:200:                                    ; preds = %17
  %201 = load i32, i32* @x.281
  %202 = load i32, i32* @y.282
  %203 = add i32 %201, -737238591
  %204 = sub i32 %203, 1
  %205 = sub i32 %204, -737238591
  %206 = sub i32 %201, 1
  %207 = mul i32 %201, %205
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %202, 10
  %211 = xor i1 %209, true
  %212 = xor i1 %210, true
  %213 = xor i1 true, true
  %214 = and i1 %211, true
  %215 = and i1 %209, %213
  %216 = and i1 %212, true
  %217 = and i1 %210, %213
  %218 = or i1 %214, %215
  %219 = or i1 %216, %217
  %220 = xor i1 %218, %219
  %221 = or i1 %211, %212
  %222 = xor i1 %221, true
  %223 = or i1 true, %213
  %224 = and i1 %222, %223
  %225 = or i1 %220, %224
  %226 = or i1 %209, %210
  %227 = select i1 %225, i32 396218881, i32 1725603772
  store i32 %227, i32* %16
  br label %267

; <label>:228:                                    ; preds = %17
  %229 = load i32, i32* @x.281
  %230 = load i32, i32* @y.282
  %231 = sub i32 %229, -1035318733
  %232 = sub i32 %231, 1
  %233 = add i32 %232, -1035318733
  %234 = sub i32 %229, 1
  %235 = mul i32 %229, %233
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %230, 10
  %239 = xor i1 %237, true
  %240 = xor i1 %238, true
  %241 = xor i1 false, true
  %242 = and i1 %239, false
  %243 = and i1 %237, %241
  %244 = and i1 %240, false
  %245 = and i1 %238, %241
  %246 = or i1 %242, %243
  %247 = or i1 %244, %245
  %248 = xor i1 %246, %247
  %249 = or i1 %239, %240
  %250 = xor i1 %249, true
  %251 = or i1 false, %241
  %252 = and i1 %250, %251
  %253 = or i1 %248, %252
  %254 = or i1 %237, %238
  %255 = select i1 %253, i32 327847620, i32 1725603772
  store i32 %255, i32* %16
  br label %267

; <label>:256:                                    ; preds = %17
  ret void

; <label>:257:                                    ; preds = %17
  %258 = load %struct.ball*, %struct.ball** %11, align 8
  %259 = load %struct.ball*, %struct.ball** %13, align 8
  %260 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9, %struct.ball* %258, %struct.ball* %259)
  store i32 1471301977, i32* %16
  br label %267

; <label>:261:                                    ; preds = %17
  store i32 -1642662374, i32* %16
  br label %267

; <label>:262:                                    ; preds = %17
  %263 = load %struct.ball*, %struct.ball** %11, align 8
  %264 = load %struct.ball*, %struct.ball** %13, align 8
  %265 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9, %struct.ball* %263, %struct.ball* %264)
  store i32 -1760859556, i32* %16
  br label %267

; <label>:266:                                    ; preds = %17
  store i32 396218881, i32* %16
  br label %267

; <label>:267:                                    ; preds = %266, %262, %261, %257, %228, %200, %199, %198, %195, %192, %187, %184, %181, %163, %147, %146, %145, %117, %89, %86, %83, %80, %49, %33, %30, %25, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ball* @"_ZSt21__unguarded_partitionIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEET_S7_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #4 {
  %4 = alloca %struct.ball*
  %5 = alloca i1
  %6 = alloca %struct.ball**
  %7 = alloca %struct.ball**
  %8 = alloca %struct.ball**
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %10 = alloca i1
  %11 = alloca i1
  %12 = load i32, i32* @x.283
  %13 = load i32, i32* @y.284
  %14 = sub i32 %12, 1368905699
  %15 = sub i32 %14, 1
  %16 = add i32 %15, 1368905699
  %17 = sub i32 %12, 1
  %18 = mul i32 %12, %16
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  store i1 %20, i1* %11
  %21 = icmp slt i32 %13, 10
  store i1 %21, i1* %10
  %22 = alloca i32
  store i32 -2073504916, i32* %22
  br label %23

; <label>:23:                                     ; preds = %3, %249
  %24 = load i32, i32* %22
  switch i32 %24, label %25 [
    i32 -2073504916, label %26
    i32 1330893470, label %46
    i32 -875687148, label %69
    i32 585836387, label %70
    i32 2028330285, label %71
    i32 -1400718509, label %99
    i32 305640025, label %121
    i32 -1827868141, label %124
    i32 651580948, label %139
    i32 -1827288437, label %159
    i32 1368917731, label %160
    i32 -751098206, label %165
    i32 940095161, label %173
    i32 154208131, label %178
    i32 1228882757, label %185
    i32 -1465896437, label %201
    i32 688438139, label %218
    i32 -911394629, label %220
    i32 25623380, label %229
    i32 -1898894772, label %234
    i32 110758240, label %241
    i32 -1237709947, label %246
  ]

; <label>:25:                                     ; preds = %23
  br label %249

; <label>:26:                                     ; preds = %23
  %27 = load volatile i1, i1* %11
  %28 = load volatile i1, i1* %10
  %29 = xor i1 %27, true
  %30 = xor i1 %28, true
  %31 = xor i1 false, true
  %32 = and i1 %29, false
  %33 = and i1 %27, %31
  %34 = and i1 %30, false
  %35 = and i1 %28, %31
  %36 = or i1 %32, %33
  %37 = or i1 %34, %35
  %38 = xor i1 %36, %37
  %39 = or i1 %29, %30
  %40 = xor i1 %39, true
  %41 = or i1 false, %31
  %42 = and i1 %40, %41
  %43 = or i1 %38, %42
  %44 = or i1 %27, %28
  %45 = select i1 %43, i32 1330893470, i32 25623380
  store i32 %45, i32* %22
  br label %249

; <label>:46:                                     ; preds = %23
  %47 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %47, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %9
  %48 = alloca %struct.ball*, align 8
  store %struct.ball** %48, %struct.ball*** %8
  %49 = alloca %struct.ball*, align 8
  store %struct.ball** %49, %struct.ball*** %7
  %50 = alloca %struct.ball*, align 8
  store %struct.ball** %50, %struct.ball*** %6
  %51 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %0, %struct.ball** %51, align 8
  %52 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %1, %struct.ball** %52, align 8
  %53 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %2, %struct.ball** %53, align 8
  %54 = load i32, i32* @x.283
  %55 = load i32, i32* @y.284
  %56 = add i32 %54, 1859263405
  %57 = sub i32 %56, 1
  %58 = sub i32 %57, 1859263405
  %59 = sub i32 %54, 1
  %60 = mul i32 %54, %58
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %55, 10
  %64 = and i1 %62, %63
  %65 = xor i1 %62, %63
  %66 = or i1 %64, %65
  %67 = or i1 %62, %63
  %68 = select i1 %66, i32 -875687148, i32 25623380
  store i32 %68, i32* %22
  br label %249

; <label>:69:                                     ; preds = %23
  store i32 585836387, i32* %22
  br label %249

; <label>:70:                                     ; preds = %23
  store i32 2028330285, i32* %22
  br label %249

; <label>:71:                                     ; preds = %23
  %72 = load i32, i32* @x.283
  %73 = load i32, i32* @y.284
  %74 = sub i32 %72, -1309958502
  %75 = sub i32 %74, 1
  %76 = add i32 %75, -1309958502
  %77 = sub i32 %72, 1
  %78 = mul i32 %72, %76
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %73, 10
  %82 = xor i1 %80, true
  %83 = xor i1 %81, true
  %84 = xor i1 true, true
  %85 = and i1 %82, true
  %86 = and i1 %80, %84
  %87 = and i1 %83, true
  %88 = and i1 %81, %84
  %89 = or i1 %85, %86
  %90 = or i1 %87, %88
  %91 = xor i1 %89, %90
  %92 = or i1 %82, %83
  %93 = xor i1 %92, true
  %94 = or i1 true, %84
  %95 = and i1 %93, %94
  %96 = or i1 %91, %95
  %97 = or i1 %80, %81
  %98 = select i1 %96, i32 -1400718509, i32 -1898894772
  store i32 %98, i32* %22
  br label %249

; <label>:99:                                     ; preds = %23
  %100 = load volatile %struct.ball**, %struct.ball*** %8
  %101 = load %struct.ball*, %struct.ball** %100, align 8
  %102 = load volatile %struct.ball**, %struct.ball*** %6
  %103 = load %struct.ball*, %struct.ball** %102, align 8
  %104 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %9
  %105 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %104, %struct.ball* %101, %struct.ball* %103)
  store i1 %105, i1* %5
  %106 = load i32, i32* @x.283
  %107 = load i32, i32* @y.284
  %108 = add i32 %106, -255899542
  %109 = sub i32 %108, 1
  %110 = sub i32 %109, -255899542
  %111 = sub i32 %106, 1
  %112 = mul i32 %106, %110
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %107, 10
  %116 = and i1 %114, %115
  %117 = xor i1 %114, %115
  %118 = or i1 %116, %117
  %119 = or i1 %114, %115
  %120 = select i1 %118, i32 305640025, i32 -1898894772
  store i32 %120, i32* %22
  br label %249

; <label>:121:                                    ; preds = %23
  %122 = load volatile i1, i1* %5
  %123 = select i1 %122, i32 -1827868141, i32 1368917731
  store i32 %123, i32* %22
  br label %249

; <label>:124:                                    ; preds = %23
  %125 = load i32, i32* @x.283
  %126 = load i32, i32* @y.284
  %127 = sub i32 0, 1
  %128 = add i32 %125, %127
  %129 = sub i32 %125, 1
  %130 = mul i32 %125, %128
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %126, 10
  %134 = and i1 %132, %133
  %135 = xor i1 %132, %133
  %136 = or i1 %134, %135
  %137 = or i1 %132, %133
  %138 = select i1 %136, i32 651580948, i32 110758240
  store i32 %138, i32* %22
  br label %249

; <label>:139:                                    ; preds = %23
  %140 = load volatile %struct.ball**, %struct.ball*** %8
  %141 = load %struct.ball*, %struct.ball** %140, align 8
  %142 = getelementptr inbounds %struct.ball, %struct.ball* %141, i32 1
  %143 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %142, %struct.ball** %143, align 8
  %144 = load i32, i32* @x.283
  %145 = load i32, i32* @y.284
  %146 = sub i32 %144, 1014748445
  %147 = sub i32 %146, 1
  %148 = add i32 %147, 1014748445
  %149 = sub i32 %144, 1
  %150 = mul i32 %144, %148
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %145, 10
  %154 = and i1 %152, %153
  %155 = xor i1 %152, %153
  %156 = or i1 %154, %155
  %157 = or i1 %152, %153
  %158 = select i1 %156, i32 -1827288437, i32 110758240
  store i32 %158, i32* %22
  br label %249

; <label>:159:                                    ; preds = %23
  store i32 2028330285, i32* %22
  br label %249

; <label>:160:                                    ; preds = %23
  %161 = load volatile %struct.ball**, %struct.ball*** %7
  %162 = load %struct.ball*, %struct.ball** %161, align 8
  %163 = getelementptr inbounds %struct.ball, %struct.ball* %162, i32 -1
  %164 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %163, %struct.ball** %164, align 8
  store i32 -751098206, i32* %22
  br label %249

; <label>:165:                                    ; preds = %23
  %166 = load volatile %struct.ball**, %struct.ball*** %6
  %167 = load %struct.ball*, %struct.ball** %166, align 8
  %168 = load volatile %struct.ball**, %struct.ball*** %7
  %169 = load %struct.ball*, %struct.ball** %168, align 8
  %170 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %9
  %171 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %170, %struct.ball* %167, %struct.ball* %169)
  %172 = select i1 %171, i32 940095161, i32 154208131
  store i32 %172, i32* %22
  br label %249

; <label>:173:                                    ; preds = %23
  %174 = load volatile %struct.ball**, %struct.ball*** %7
  %175 = load %struct.ball*, %struct.ball** %174, align 8
  %176 = getelementptr inbounds %struct.ball, %struct.ball* %175, i32 -1
  %177 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %176, %struct.ball** %177, align 8
  store i32 -751098206, i32* %22
  br label %249

; <label>:178:                                    ; preds = %23
  %179 = load volatile %struct.ball**, %struct.ball*** %8
  %180 = load %struct.ball*, %struct.ball** %179, align 8
  %181 = load volatile %struct.ball**, %struct.ball*** %7
  %182 = load %struct.ball*, %struct.ball** %181, align 8
  %183 = icmp ult %struct.ball* %180, %182
  %184 = select i1 %183, i32 -911394629, i32 1228882757
  store i32 %184, i32* %22
  br label %249

; <label>:185:                                    ; preds = %23
  %186 = load i32, i32* @x.283
  %187 = load i32, i32* @y.284
  %188 = sub i32 %186, -464967434
  %189 = sub i32 %188, 1
  %190 = add i32 %189, -464967434
  %191 = sub i32 %186, 1
  %192 = mul i32 %186, %190
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %187, 10
  %196 = and i1 %194, %195
  %197 = xor i1 %194, %195
  %198 = or i1 %196, %197
  %199 = or i1 %194, %195
  %200 = select i1 %198, i32 -1465896437, i32 -1237709947
  store i32 %200, i32* %22
  br label %249

; <label>:201:                                    ; preds = %23
  %202 = load volatile %struct.ball**, %struct.ball*** %8
  %203 = load %struct.ball*, %struct.ball** %202, align 8
  store %struct.ball* %203, %struct.ball** %4
  %204 = load i32, i32* @x.283
  %205 = load i32, i32* @y.284
  %206 = sub i32 0, 1
  %207 = add i32 %204, %206
  %208 = sub i32 %204, 1
  %209 = mul i32 %204, %207
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %205, 10
  %213 = and i1 %211, %212
  %214 = xor i1 %211, %212
  %215 = or i1 %213, %214
  %216 = or i1 %211, %212
  %217 = select i1 %215, i32 688438139, i32 -1237709947
  store i32 %217, i32* %22
  br label %249

; <label>:218:                                    ; preds = %23
  %219 = load volatile %struct.ball*, %struct.ball** %4
  ret %struct.ball* %219

; <label>:220:                                    ; preds = %23
  %221 = load volatile %struct.ball**, %struct.ball*** %8
  %222 = load %struct.ball*, %struct.ball** %221, align 8
  %223 = load volatile %struct.ball**, %struct.ball*** %7
  %224 = load %struct.ball*, %struct.ball** %223, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %222, %struct.ball* %224)
  %225 = load volatile %struct.ball**, %struct.ball*** %8
  %226 = load %struct.ball*, %struct.ball** %225, align 8
  %227 = getelementptr inbounds %struct.ball, %struct.ball* %226, i32 1
  %228 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %227, %struct.ball** %228, align 8
  store i32 585836387, i32* %22
  br label %249

; <label>:229:                                    ; preds = %23
  %230 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %231 = alloca %struct.ball*, align 8
  %232 = alloca %struct.ball*, align 8
  %233 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %231, align 8
  store %struct.ball* %1, %struct.ball** %232, align 8
  store %struct.ball* %2, %struct.ball** %233, align 8
  store i32 1330893470, i32* %22
  br label %249

; <label>:234:                                    ; preds = %23
  %235 = load volatile %struct.ball**, %struct.ball*** %8
  %236 = load %struct.ball*, %struct.ball** %235, align 8
  %237 = load volatile %struct.ball**, %struct.ball*** %6
  %238 = load %struct.ball*, %struct.ball** %237, align 8
  %239 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %9
  %240 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %239, %struct.ball* %236, %struct.ball* %238)
  store i32 -1400718509, i32* %22
  br label %249

; <label>:241:                                    ; preds = %23
  %242 = load volatile %struct.ball**, %struct.ball*** %8
  %243 = load %struct.ball*, %struct.ball** %242, align 8
  %244 = getelementptr inbounds %struct.ball, %struct.ball* %243, i32 1
  %245 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %244, %struct.ball** %245, align 8
  store i32 651580948, i32* %22
  br label %249

; <label>:246:                                    ; preds = %23
  %247 = load volatile %struct.ball**, %struct.ball*** %8
  %248 = load %struct.ball*, %struct.ball** %247, align 8
  store i32 -1465896437, i32* %22
  br label %249

; <label>:249:                                    ; preds = %246, %241, %234, %229, %220, %201, %185, %178, %173, %165, %160, %159, %139, %124, %121, %99, %71, %70, %69, %46, %26, %25
  br label %23
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball*, %struct.ball*) #4 comdat {
  %3 = alloca %struct.ball*, align 8
  %4 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %3, align 8
  store %struct.ball* %1, %struct.ball** %4, align 8
  %5 = load %struct.ball*, %struct.ball** %3, align 8
  %6 = load %struct.ball*, %struct.ball** %4, align 8
  call void @_ZSt4swapI4ballEvRT_S2_(%struct.ball* dereferenceable(16) %5, %struct.ball* dereferenceable(16) %6) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt4swapI4ballEvRT_S2_(%struct.ball* dereferenceable(16), %struct.ball* dereferenceable(16)) #4 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.287
  %6 = load i32, i32* @y.288
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -724821056, i32* %14
  br label %15

; <label>:15:                                     ; preds = %2, %87
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -724821056, label %18
    i32 1827900876, label %38
    i32 200490406, label %69
    i32 1693055144, label %70
  ]

; <label>:17:                                     ; preds = %15
  br label %87

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 true, true
  %24 = and i1 %21, true
  %25 = and i1 %19, %23
  %26 = and i1 %22, true
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 true, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 1827900876, i32 1693055144
  store i32 %37, i32* %14
  br label %87

; <label>:38:                                     ; preds = %15
  %39 = alloca %struct.ball*, align 8
  %40 = alloca %struct.ball*, align 8
  %41 = alloca %struct.ball, align 8
  store %struct.ball* %0, %struct.ball** %39, align 8
  store %struct.ball* %1, %struct.ball** %40, align 8
  %42 = load %struct.ball*, %struct.ball** %39, align 8
  %43 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %42) #3
  %44 = bitcast %struct.ball* %41 to i8*
  %45 = bitcast %struct.ball* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 16, i32 8, i1 false)
  %46 = load %struct.ball*, %struct.ball** %40, align 8
  %47 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %46) #3
  %48 = load %struct.ball*, %struct.ball** %39, align 8
  %49 = bitcast %struct.ball* %48 to i8*
  %50 = bitcast %struct.ball* %47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* %50, i64 16, i32 8, i1 false)
  %51 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %41) #3
  %52 = load %struct.ball*, %struct.ball** %40, align 8
  %53 = bitcast %struct.ball* %52 to i8*
  %54 = bitcast %struct.ball* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 16, i32 8, i1 false)
  %55 = load i32, i32* @x.287
  %56 = load i32, i32* @y.288
  %57 = sub i32 0, 1
  %58 = add i32 %55, %57
  %59 = sub i32 %55, 1
  %60 = mul i32 %55, %58
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %56, 10
  %64 = and i1 %62, %63
  %65 = xor i1 %62, %63
  %66 = or i1 %64, %65
  %67 = or i1 %62, %63
  %68 = select i1 %66, i32 200490406, i32 1693055144
  store i32 %68, i32* %14
  br label %87

; <label>:69:                                     ; preds = %15
  ret void

; <label>:70:                                     ; preds = %15
  %71 = alloca %struct.ball*, align 8
  %72 = alloca %struct.ball*, align 8
  %73 = alloca %struct.ball, align 8
  store %struct.ball* %0, %struct.ball** %71, align 8
  store %struct.ball* %1, %struct.ball** %72, align 8
  %74 = load %struct.ball*, %struct.ball** %71, align 8
  %75 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %74) #3
  %76 = bitcast %struct.ball* %73 to i8*
  %77 = bitcast %struct.ball* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %77, i64 16, i32 8, i1 false)
  %78 = load %struct.ball*, %struct.ball** %72, align 8
  %79 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %78) #3
  %80 = load %struct.ball*, %struct.ball** %71, align 8
  %81 = bitcast %struct.ball* %80 to i8*
  %82 = bitcast %struct.ball* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false)
  %83 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %73) #3
  %84 = load %struct.ball*, %struct.ball** %72, align 8
  %85 = bitcast %struct.ball* %84 to i8*
  %86 = bitcast %struct.ball* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 16, i32 8, i1 false)
  store i32 1827900876, i32* %14
  br label %87

; <label>:87:                                     ; preds = %70, %38, %18, %17
  br label %15
}

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #11

; Function Attrs: noinline uwtable
define internal void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %7 = alloca %struct.ball*
  %8 = alloca %struct.ball**
  %9 = alloca %struct.ball**
  %10 = alloca %struct.ball**
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %12 = alloca i1
  %13 = alloca i1
  %14 = load i32, i32* @x.289
  %15 = load i32, i32* @y.290
  %16 = sub i32 %14, -1062874560
  %17 = sub i32 %16, 1
  %18 = add i32 %17, -1062874560
  %19 = sub i32 %14, 1
  %20 = mul i32 %14, %18
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  store i1 %22, i1* %13
  %23 = icmp slt i32 %15, 10
  store i1 %23, i1* %12
  %24 = alloca i32
  store i32 244610844, i32* %24
  br label %25

; <label>:25:                                     ; preds = %2, %444
  %26 = load i32, i32* %24
  switch i32 %26, label %27 [
    i32 244610844, label %28
    i32 892928876, label %48
    i32 1273061981, label %79
    i32 512741952, label %82
    i32 -1912936515, label %98
    i32 1091519995, label %126
    i32 733246863, label %127
    i32 369563232, label %132
    i32 -1493700063, label %148
    i32 1327363912, label %169
    i32 347874001, label %172
    i32 369322348, label %199
    i32 1403362991, label %232
    i32 371771660, label %235
    i32 -1283186456, label %256
    i32 -913765604, label %263
    i32 1347003497, label %291
    i32 2035290468, label %318
    i32 -1564921599, label %319
    i32 -6195017, label %347
    i32 1990858211, label %366
    i32 -2108068106, label %367
    i32 2029812638, label %382
    i32 1847361223, label %410
    i32 627773491, label %411
    i32 -1077384858, label %423
    i32 -1102120071, label %424
    i32 165693658, label %430
    i32 377975920, label %437
    i32 177321011, label %438
    i32 -109366030, label %443
  ]

; <label>:27:                                     ; preds = %25
  br label %444

; <label>:28:                                     ; preds = %25
  %29 = load volatile i1, i1* %13
  %30 = load volatile i1, i1* %12
  %31 = xor i1 %29, true
  %32 = xor i1 %30, true
  %33 = xor i1 true, true
  %34 = and i1 %31, true
  %35 = and i1 %29, %33
  %36 = and i1 %32, true
  %37 = and i1 %30, %33
  %38 = or i1 %34, %35
  %39 = or i1 %36, %37
  %40 = xor i1 %38, %39
  %41 = or i1 %31, %32
  %42 = xor i1 %41, true
  %43 = or i1 true, %33
  %44 = and i1 %42, %43
  %45 = or i1 %40, %44
  %46 = or i1 %29, %30
  %47 = select i1 %45, i32 892928876, i32 627773491
  store i32 %47, i32* %24
  br label %444

; <label>:48:                                     ; preds = %25
  %49 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %49, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11
  %50 = alloca %struct.ball*, align 8
  store %struct.ball** %50, %struct.ball*** %10
  %51 = alloca %struct.ball*, align 8
  store %struct.ball** %51, %struct.ball*** %9
  %52 = alloca %struct.ball*, align 8
  store %struct.ball** %52, %struct.ball*** %8
  %53 = alloca %struct.ball, align 8
  store %struct.ball* %53, %struct.ball** %7
  %54 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  %55 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %55, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6
  %56 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  %57 = load volatile %struct.ball**, %struct.ball*** %10
  store %struct.ball* %0, %struct.ball** %57, align 8
  %58 = load volatile %struct.ball**, %struct.ball*** %9
  store %struct.ball* %1, %struct.ball** %58, align 8
  %59 = load volatile %struct.ball**, %struct.ball*** %10
  %60 = load %struct.ball*, %struct.ball** %59, align 8
  %61 = load volatile %struct.ball**, %struct.ball*** %9
  %62 = load %struct.ball*, %struct.ball** %61, align 8
  %63 = icmp eq %struct.ball* %60, %62
  store i1 %63, i1* %5
  %64 = load i32, i32* @x.289
  %65 = load i32, i32* @y.290
  %66 = sub i32 %64, 378488929
  %67 = sub i32 %66, 1
  %68 = add i32 %67, 378488929
  %69 = sub i32 %64, 1
  %70 = mul i32 %64, %68
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %65, 10
  %74 = and i1 %72, %73
  %75 = xor i1 %72, %73
  %76 = or i1 %74, %75
  %77 = or i1 %72, %73
  %78 = select i1 %76, i32 1273061981, i32 627773491
  store i32 %78, i32* %24
  br label %444

; <label>:79:                                     ; preds = %25
  %80 = load volatile i1, i1* %5
  %81 = select i1 %80, i32 512741952, i32 733246863
  store i32 %81, i32* %24
  br label %444

; <label>:82:                                     ; preds = %25
  %83 = load i32, i32* @x.289
  %84 = load i32, i32* @y.290
  %85 = add i32 %83, 1606293217
  %86 = sub i32 %85, 1
  %87 = sub i32 %86, 1606293217
  %88 = sub i32 %83, 1
  %89 = mul i32 %83, %87
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %84, 10
  %93 = and i1 %91, %92
  %94 = xor i1 %91, %92
  %95 = or i1 %93, %94
  %96 = or i1 %91, %92
  %97 = select i1 %95, i32 -1912936515, i32 -1077384858
  store i32 %97, i32* %24
  br label %444

; <label>:98:                                     ; preds = %25
  %99 = load i32, i32* @x.289
  %100 = load i32, i32* @y.290
  %101 = add i32 %99, -1383416004
  %102 = sub i32 %101, 1
  %103 = sub i32 %102, -1383416004
  %104 = sub i32 %99, 1
  %105 = mul i32 %99, %103
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %100, 10
  %109 = xor i1 %107, true
  %110 = xor i1 %108, true
  %111 = xor i1 true, true
  %112 = and i1 %109, true
  %113 = and i1 %107, %111
  %114 = and i1 %110, true
  %115 = and i1 %108, %111
  %116 = or i1 %112, %113
  %117 = or i1 %114, %115
  %118 = xor i1 %116, %117
  %119 = or i1 %109, %110
  %120 = xor i1 %119, true
  %121 = or i1 true, %111
  %122 = and i1 %120, %121
  %123 = or i1 %118, %122
  %124 = or i1 %107, %108
  %125 = select i1 %123, i32 1091519995, i32 -1077384858
  store i32 %125, i32* %24
  br label %444

; <label>:126:                                    ; preds = %25
  store i32 -2108068106, i32* %24
  br label %444

; <label>:127:                                    ; preds = %25
  %128 = load volatile %struct.ball**, %struct.ball*** %10
  %129 = load %struct.ball*, %struct.ball** %128, align 8
  %130 = getelementptr inbounds %struct.ball, %struct.ball* %129, i64 1
  %131 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %130, %struct.ball** %131, align 8
  store i32 369563232, i32* %24
  br label %444

; <label>:132:                                    ; preds = %25
  %133 = load i32, i32* @x.289
  %134 = load i32, i32* @y.290
  %135 = sub i32 %133, -978455364
  %136 = sub i32 %135, 1
  %137 = add i32 %136, -978455364
  %138 = sub i32 %133, 1
  %139 = mul i32 %133, %137
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %134, 10
  %143 = and i1 %141, %142
  %144 = xor i1 %141, %142
  %145 = or i1 %143, %144
  %146 = or i1 %141, %142
  %147 = select i1 %145, i32 -1493700063, i32 -1102120071
  store i32 %147, i32* %24
  br label %444

; <label>:148:                                    ; preds = %25
  %149 = load volatile %struct.ball**, %struct.ball*** %8
  %150 = load %struct.ball*, %struct.ball** %149, align 8
  %151 = load volatile %struct.ball**, %struct.ball*** %9
  %152 = load %struct.ball*, %struct.ball** %151, align 8
  %153 = icmp ne %struct.ball* %150, %152
  store i1 %153, i1* %4
  %154 = load i32, i32* @x.289
  %155 = load i32, i32* @y.290
  %156 = sub i32 %154, 1915384496
  %157 = sub i32 %156, 1
  %158 = add i32 %157, 1915384496
  %159 = sub i32 %154, 1
  %160 = mul i32 %154, %158
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %155, 10
  %164 = and i1 %162, %163
  %165 = xor i1 %162, %163
  %166 = or i1 %164, %165
  %167 = or i1 %162, %163
  %168 = select i1 %166, i32 1327363912, i32 -1102120071
  store i32 %168, i32* %24
  br label %444

; <label>:169:                                    ; preds = %25
  %170 = load volatile i1, i1* %4
  %171 = select i1 %170, i32 347874001, i32 -2108068106
  store i32 %171, i32* %24
  br label %444

; <label>:172:                                    ; preds = %25
  %173 = load i32, i32* @x.289
  %174 = load i32, i32* @y.290
  %175 = sub i32 0, 1
  %176 = add i32 %173, %175
  %177 = sub i32 %173, 1
  %178 = mul i32 %173, %176
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %174, 10
  %182 = xor i1 %180, true
  %183 = xor i1 %181, true
  %184 = xor i1 true, true
  %185 = and i1 %182, true
  %186 = and i1 %180, %184
  %187 = and i1 %183, true
  %188 = and i1 %181, %184
  %189 = or i1 %185, %186
  %190 = or i1 %187, %188
  %191 = xor i1 %189, %190
  %192 = or i1 %182, %183
  %193 = xor i1 %192, true
  %194 = or i1 true, %184
  %195 = and i1 %193, %194
  %196 = or i1 %191, %195
  %197 = or i1 %180, %181
  %198 = select i1 %196, i32 369322348, i32 165693658
  store i32 %198, i32* %24
  br label %444

; <label>:199:                                    ; preds = %25
  %200 = load volatile %struct.ball**, %struct.ball*** %8
  %201 = load %struct.ball*, %struct.ball** %200, align 8
  %202 = load volatile %struct.ball**, %struct.ball*** %10
  %203 = load %struct.ball*, %struct.ball** %202, align 8
  %204 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11
  %205 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %204, %struct.ball* %201, %struct.ball* %203)
  store i1 %205, i1* %3
  %206 = load i32, i32* @x.289
  %207 = load i32, i32* @y.290
  %208 = sub i32 0, 1
  %209 = add i32 %206, %208
  %210 = sub i32 %206, 1
  %211 = mul i32 %206, %209
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %207, 10
  %215 = xor i1 %213, true
  %216 = xor i1 %214, true
  %217 = xor i1 true, true
  %218 = and i1 %215, true
  %219 = and i1 %213, %217
  %220 = and i1 %216, true
  %221 = and i1 %214, %217
  %222 = or i1 %218, %219
  %223 = or i1 %220, %221
  %224 = xor i1 %222, %223
  %225 = or i1 %215, %216
  %226 = xor i1 %225, true
  %227 = or i1 true, %217
  %228 = and i1 %226, %227
  %229 = or i1 %224, %228
  %230 = or i1 %213, %214
  %231 = select i1 %229, i32 1403362991, i32 165693658
  store i32 %231, i32* %24
  br label %444

; <label>:232:                                    ; preds = %25
  %233 = load volatile i1, i1* %3
  %234 = select i1 %233, i32 371771660, i32 -1283186456
  store i32 %234, i32* %24
  br label %444

; <label>:235:                                    ; preds = %25
  %236 = load volatile %struct.ball**, %struct.ball*** %8
  %237 = load %struct.ball*, %struct.ball** %236, align 8
  %238 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %237) #3
  %239 = load volatile %struct.ball*, %struct.ball** %7
  %240 = bitcast %struct.ball* %239 to i8*
  %241 = bitcast %struct.ball* %238 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %240, i8* %241, i64 16, i32 8, i1 false)
  %242 = load volatile %struct.ball**, %struct.ball*** %10
  %243 = load %struct.ball*, %struct.ball** %242, align 8
  %244 = load volatile %struct.ball**, %struct.ball*** %8
  %245 = load %struct.ball*, %struct.ball** %244, align 8
  %246 = load volatile %struct.ball**, %struct.ball*** %8
  %247 = load %struct.ball*, %struct.ball** %246, align 8
  %248 = getelementptr inbounds %struct.ball, %struct.ball* %247, i64 1
  %249 = call %struct.ball* @_ZSt13move_backwardIP4ballS1_ET0_T_S3_S2_(%struct.ball* %243, %struct.ball* %245, %struct.ball* %248)
  %250 = load volatile %struct.ball*, %struct.ball** %7
  %251 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %250) #3
  %252 = load volatile %struct.ball**, %struct.ball*** %10
  %253 = load %struct.ball*, %struct.ball** %252, align 8
  %254 = bitcast %struct.ball* %253 to i8*
  %255 = bitcast %struct.ball* %251 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %254, i8* %255, i64 16, i32 8, i1 false)
  store i32 -913765604, i32* %24
  br label %444

; <label>:256:                                    ; preds = %25
  %257 = load volatile %struct.ball**, %struct.ball*** %8
  %258 = load %struct.ball*, %struct.ball** %257, align 8
  %259 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6
  %260 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %259 to i8*
  %261 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11
  %262 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %261 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %260, i8* %262, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"()
  call void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_0EEEvT_T0_"(%struct.ball* %258)
  store i32 -913765604, i32* %24
  br label %444

; <label>:263:                                    ; preds = %25
  %264 = load i32, i32* @x.289
  %265 = load i32, i32* @y.290
  %266 = sub i32 %264, -333804385
  %267 = sub i32 %266, 1
  %268 = add i32 %267, -333804385
  %269 = sub i32 %264, 1
  %270 = mul i32 %264, %268
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %265, 10
  %274 = xor i1 %272, true
  %275 = xor i1 %273, true
  %276 = xor i1 true, true
  %277 = and i1 %274, true
  %278 = and i1 %272, %276
  %279 = and i1 %275, true
  %280 = and i1 %273, %276
  %281 = or i1 %277, %278
  %282 = or i1 %279, %280
  %283 = xor i1 %281, %282
  %284 = or i1 %274, %275
  %285 = xor i1 %284, true
  %286 = or i1 true, %276
  %287 = and i1 %285, %286
  %288 = or i1 %283, %287
  %289 = or i1 %272, %273
  %290 = select i1 %288, i32 1347003497, i32 377975920
  store i32 %290, i32* %24
  br label %444

; <label>:291:                                    ; preds = %25
  %292 = load i32, i32* @x.289
  %293 = load i32, i32* @y.290
  %294 = sub i32 0, 1
  %295 = add i32 %292, %294
  %296 = sub i32 %292, 1
  %297 = mul i32 %292, %295
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %293, 10
  %301 = xor i1 %299, true
  %302 = xor i1 %300, true
  %303 = xor i1 true, true
  %304 = and i1 %301, true
  %305 = and i1 %299, %303
  %306 = and i1 %302, true
  %307 = and i1 %300, %303
  %308 = or i1 %304, %305
  %309 = or i1 %306, %307
  %310 = xor i1 %308, %309
  %311 = or i1 %301, %302
  %312 = xor i1 %311, true
  %313 = or i1 true, %303
  %314 = and i1 %312, %313
  %315 = or i1 %310, %314
  %316 = or i1 %299, %300
  %317 = select i1 %315, i32 2035290468, i32 377975920
  store i32 %317, i32* %24
  br label %444

; <label>:318:                                    ; preds = %25
  store i32 -1564921599, i32* %24
  br label %444

; <label>:319:                                    ; preds = %25
  %320 = load i32, i32* @x.289
  %321 = load i32, i32* @y.290
  %322 = sub i32 %320, 951835282
  %323 = sub i32 %322, 1
  %324 = add i32 %323, 951835282
  %325 = sub i32 %320, 1
  %326 = mul i32 %320, %324
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %321, 10
  %330 = xor i1 %328, true
  %331 = xor i1 %329, true
  %332 = xor i1 false, true
  %333 = and i1 %330, false
  %334 = and i1 %328, %332
  %335 = and i1 %331, false
  %336 = and i1 %329, %332
  %337 = or i1 %333, %334
  %338 = or i1 %335, %336
  %339 = xor i1 %337, %338
  %340 = or i1 %330, %331
  %341 = xor i1 %340, true
  %342 = or i1 false, %332
  %343 = and i1 %341, %342
  %344 = or i1 %339, %343
  %345 = or i1 %328, %329
  %346 = select i1 %344, i32 -6195017, i32 177321011
  store i32 %346, i32* %24
  br label %444

; <label>:347:                                    ; preds = %25
  %348 = load volatile %struct.ball**, %struct.ball*** %8
  %349 = load %struct.ball*, %struct.ball** %348, align 8
  %350 = getelementptr inbounds %struct.ball, %struct.ball* %349, i32 1
  %351 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %350, %struct.ball** %351, align 8
  %352 = load i32, i32* @x.289
  %353 = load i32, i32* @y.290
  %354 = sub i32 0, 1
  %355 = add i32 %352, %354
  %356 = sub i32 %352, 1
  %357 = mul i32 %352, %355
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %353, 10
  %361 = and i1 %359, %360
  %362 = xor i1 %359, %360
  %363 = or i1 %361, %362
  %364 = or i1 %359, %360
  %365 = select i1 %363, i32 1990858211, i32 177321011
  store i32 %365, i32* %24
  br label %444

; <label>:366:                                    ; preds = %25
  store i32 369563232, i32* %24
  br label %444

; <label>:367:                                    ; preds = %25
  %368 = load i32, i32* @x.289
  %369 = load i32, i32* @y.290
  %370 = sub i32 0, 1
  %371 = add i32 %368, %370
  %372 = sub i32 %368, 1
  %373 = mul i32 %368, %371
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %369, 10
  %377 = and i1 %375, %376
  %378 = xor i1 %375, %376
  %379 = or i1 %377, %378
  %380 = or i1 %375, %376
  %381 = select i1 %379, i32 2029812638, i32 -109366030
  store i32 %381, i32* %24
  br label %444

; <label>:382:                                    ; preds = %25
  %383 = load i32, i32* @x.289
  %384 = load i32, i32* @y.290
  %385 = sub i32 %383, -1660716522
  %386 = sub i32 %385, 1
  %387 = add i32 %386, -1660716522
  %388 = sub i32 %383, 1
  %389 = mul i32 %383, %387
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %384, 10
  %393 = xor i1 %391, true
  %394 = xor i1 %392, true
  %395 = xor i1 true, true
  %396 = and i1 %393, true
  %397 = and i1 %391, %395
  %398 = and i1 %394, true
  %399 = and i1 %392, %395
  %400 = or i1 %396, %397
  %401 = or i1 %398, %399
  %402 = xor i1 %400, %401
  %403 = or i1 %393, %394
  %404 = xor i1 %403, true
  %405 = or i1 true, %395
  %406 = and i1 %404, %405
  %407 = or i1 %402, %406
  %408 = or i1 %391, %392
  %409 = select i1 %407, i32 1847361223, i32 -109366030
  store i32 %409, i32* %24
  br label %444

; <label>:410:                                    ; preds = %25
  ret void

; <label>:411:                                    ; preds = %25
  %412 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %413 = alloca %struct.ball*, align 8
  %414 = alloca %struct.ball*, align 8
  %415 = alloca %struct.ball*, align 8
  %416 = alloca %struct.ball, align 8
  %417 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  %418 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %419 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %413, align 8
  store %struct.ball* %1, %struct.ball** %414, align 8
  %420 = load %struct.ball*, %struct.ball** %413, align 8
  %421 = load %struct.ball*, %struct.ball** %414, align 8
  %422 = icmp eq %struct.ball* %420, %421
  store i32 892928876, i32* %24
  br label %444

; <label>:423:                                    ; preds = %25
  store i32 -1912936515, i32* %24
  br label %444

; <label>:424:                                    ; preds = %25
  %425 = load volatile %struct.ball**, %struct.ball*** %8
  %426 = load %struct.ball*, %struct.ball** %425, align 8
  %427 = load volatile %struct.ball**, %struct.ball*** %9
  %428 = load %struct.ball*, %struct.ball** %427, align 8
  %429 = icmp ne %struct.ball* %426, %428
  store i32 -1493700063, i32* %24
  br label %444

; <label>:430:                                    ; preds = %25
  %431 = load volatile %struct.ball**, %struct.ball*** %8
  %432 = load %struct.ball*, %struct.ball** %431, align 8
  %433 = load volatile %struct.ball**, %struct.ball*** %10
  %434 = load %struct.ball*, %struct.ball** %433, align 8
  %435 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11
  %436 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %435, %struct.ball* %432, %struct.ball* %434)
  store i32 369322348, i32* %24
  br label %444

; <label>:437:                                    ; preds = %25
  store i32 1347003497, i32* %24
  br label %444

; <label>:438:                                    ; preds = %25
  %439 = load volatile %struct.ball**, %struct.ball*** %8
  %440 = load %struct.ball*, %struct.ball** %439, align 8
  %441 = getelementptr inbounds %struct.ball, %struct.ball* %440, i32 1
  %442 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %441, %struct.ball** %442, align 8
  store i32 -6195017, i32* %24
  br label %444

; <label>:443:                                    ; preds = %25
  store i32 2029812638, i32* %24
  br label %444

; <label>:444:                                    ; preds = %443, %438, %437, %430, %424, %423, %411, %382, %367, %366, %347, %319, %318, %291, %263, %256, %235, %232, %199, %172, %169, %148, %132, %127, %126, %98, %82, %79, %48, %28, %27
  br label %25
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt26__unguarded_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %4 = alloca %struct.ball**
  %5 = alloca %struct.ball**
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %7 = alloca i1
  %8 = alloca i1
  %9 = load i32, i32* @x.291
  %10 = load i32, i32* @y.292
  %11 = sub i32 0, 1
  %12 = add i32 %9, %11
  %13 = sub i32 %9, 1
  %14 = mul i32 %9, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %8
  %17 = icmp slt i32 %10, 10
  store i1 %17, i1* %7
  %18 = alloca i32
  store i32 1685322238, i32* %18
  br label %19

; <label>:19:                                     ; preds = %2, %148
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 1685322238, label %22
    i32 923207058, label %30
    i32 1150673713, label %56
    i32 1543841221, label %57
    i32 -147575755, label %64
    i32 1951709082, label %91
    i32 382007797, label %125
    i32 -268742791, label %126
    i32 -871411465, label %131
    i32 173135323, label %132
    i32 -1765779199, label %141
  ]

; <label>:21:                                     ; preds = %19
  br label %148

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %8
  %24 = load volatile i1, i1* %7
  %25 = and i1 %23, %24
  %26 = xor i1 %23, %24
  %27 = or i1 %25, %26
  %28 = or i1 %23, %24
  %29 = select i1 %27, i32 923207058, i32 173135323
  store i32 %29, i32* %18
  br label %148

; <label>:30:                                     ; preds = %19
  %31 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %31, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6
  %32 = alloca %struct.ball*, align 8
  %33 = alloca %struct.ball*, align 8
  store %struct.ball** %33, %struct.ball*** %5
  %34 = alloca %struct.ball*, align 8
  store %struct.ball** %34, %struct.ball*** %4
  %35 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  %36 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %36, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3
  %37 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %32, align 8
  %38 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %1, %struct.ball** %38, align 8
  %39 = load %struct.ball*, %struct.ball** %32, align 8
  %40 = load volatile %struct.ball**, %struct.ball*** %4
  store %struct.ball* %39, %struct.ball** %40, align 8
  %41 = load i32, i32* @x.291
  %42 = load i32, i32* @y.292
  %43 = sub i32 %41, 271220240
  %44 = sub i32 %43, 1
  %45 = add i32 %44, 271220240
  %46 = sub i32 %41, 1
  %47 = mul i32 %41, %45
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %42, 10
  %51 = and i1 %49, %50
  %52 = xor i1 %49, %50
  %53 = or i1 %51, %52
  %54 = or i1 %49, %50
  %55 = select i1 %53, i32 1150673713, i32 173135323
  store i32 %55, i32* %18
  br label %148

; <label>:56:                                     ; preds = %19
  store i32 1543841221, i32* %18
  br label %148

; <label>:57:                                     ; preds = %19
  %58 = load volatile %struct.ball**, %struct.ball*** %4
  %59 = load %struct.ball*, %struct.ball** %58, align 8
  %60 = load volatile %struct.ball**, %struct.ball*** %5
  %61 = load %struct.ball*, %struct.ball** %60, align 8
  %62 = icmp ne %struct.ball* %59, %61
  %63 = select i1 %62, i32 -147575755, i32 -871411465
  store i32 %63, i32* %18
  br label %148

; <label>:64:                                     ; preds = %19
  %65 = load i32, i32* @x.291
  %66 = load i32, i32* @y.292
  %67 = sub i32 0, 1
  %68 = add i32 %65, %67
  %69 = sub i32 %65, 1
  %70 = mul i32 %65, %68
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %66, 10
  %74 = xor i1 %72, true
  %75 = xor i1 %73, true
  %76 = xor i1 true, true
  %77 = and i1 %74, true
  %78 = and i1 %72, %76
  %79 = and i1 %75, true
  %80 = and i1 %73, %76
  %81 = or i1 %77, %78
  %82 = or i1 %79, %80
  %83 = xor i1 %81, %82
  %84 = or i1 %74, %75
  %85 = xor i1 %84, true
  %86 = or i1 true, %76
  %87 = and i1 %85, %86
  %88 = or i1 %83, %87
  %89 = or i1 %72, %73
  %90 = select i1 %88, i32 1951709082, i32 -1765779199
  store i32 %90, i32* %18
  br label %148

; <label>:91:                                     ; preds = %19
  %92 = load volatile %struct.ball**, %struct.ball*** %4
  %93 = load %struct.ball*, %struct.ball** %92, align 8
  %94 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3
  %95 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %94 to i8*
  %96 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6
  %97 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* %97, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"()
  call void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_0EEEvT_T0_"(%struct.ball* %93)
  %98 = load i32, i32* @x.291
  %99 = load i32, i32* @y.292
  %100 = add i32 %98, 543383502
  %101 = sub i32 %100, 1
  %102 = sub i32 %101, 543383502
  %103 = sub i32 %98, 1
  %104 = mul i32 %98, %102
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %99, 10
  %108 = xor i1 %106, true
  %109 = xor i1 %107, true
  %110 = xor i1 false, true
  %111 = and i1 %108, false
  %112 = and i1 %106, %110
  %113 = and i1 %109, false
  %114 = and i1 %107, %110
  %115 = or i1 %111, %112
  %116 = or i1 %113, %114
  %117 = xor i1 %115, %116
  %118 = or i1 %108, %109
  %119 = xor i1 %118, true
  %120 = or i1 false, %110
  %121 = and i1 %119, %120
  %122 = or i1 %117, %121
  %123 = or i1 %106, %107
  %124 = select i1 %122, i32 382007797, i32 -1765779199
  store i32 %124, i32* %18
  br label %148

; <label>:125:                                    ; preds = %19
  store i32 -268742791, i32* %18
  br label %148

; <label>:126:                                    ; preds = %19
  %127 = load volatile %struct.ball**, %struct.ball*** %4
  %128 = load %struct.ball*, %struct.ball** %127, align 8
  %129 = getelementptr inbounds %struct.ball, %struct.ball* %128, i32 1
  %130 = load volatile %struct.ball**, %struct.ball*** %4
  store %struct.ball* %129, %struct.ball** %130, align 8
  store i32 1543841221, i32* %18
  br label %148

; <label>:131:                                    ; preds = %19
  ret void

; <label>:132:                                    ; preds = %19
  %133 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %134 = alloca %struct.ball*, align 8
  %135 = alloca %struct.ball*, align 8
  %136 = alloca %struct.ball*, align 8
  %137 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  %138 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %139 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  store %struct.ball* %0, %struct.ball** %134, align 8
  store %struct.ball* %1, %struct.ball** %135, align 8
  %140 = load %struct.ball*, %struct.ball** %134, align 8
  store %struct.ball* %140, %struct.ball** %136, align 8
  store i32 923207058, i32* %18
  br label %148

; <label>:141:                                    ; preds = %19
  %142 = load volatile %struct.ball**, %struct.ball*** %4
  %143 = load %struct.ball*, %struct.ball** %142, align 8
  %144 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3
  %145 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %144 to i8*
  %146 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %6
  %147 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %145, i8* %147, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"()
  call void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_0EEEvT_T0_"(%struct.ball* %143)
  store i32 1951709082, i32* %18
  br label %148

; <label>:148:                                    ; preds = %141, %132, %126, %125, %91, %64, %57, %56, %30, %22, %21
  br label %19
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.ball* @_ZSt13move_backwardIP4ballS1_ET0_T_S3_S2_(%struct.ball*, %struct.ball*, %struct.ball*) #0 comdat {
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %struct.ball*, %struct.ball** %4, align 8
  %8 = call %struct.ball* @_ZSt12__miter_baseIP4ballENSt11_Miter_baseIT_E13iterator_typeES3_(%struct.ball* %7)
  %9 = load %struct.ball*, %struct.ball** %5, align 8
  %10 = call %struct.ball* @_ZSt12__miter_baseIP4ballENSt11_Miter_baseIT_E13iterator_typeES3_(%struct.ball* %9)
  %11 = load %struct.ball*, %struct.ball** %6, align 8
  %12 = call %struct.ball* @_ZSt23__copy_move_backward_a2ILb1EP4ballS1_ET1_T0_S3_S2_(%struct.ball* %8, %struct.ball* %10, %struct.ball* %11)
  ret %struct.ball* %12
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_0EEEvT_T0_"(%struct.ball*) #0 {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  %3 = alloca %struct.ball*, align 8
  %4 = alloca %struct.ball, align 8
  %5 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %3, align 8
  %6 = load %struct.ball*, %struct.ball** %3, align 8
  %7 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %6) #3
  %8 = bitcast %struct.ball* %4 to i8*
  %9 = bitcast %struct.ball* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 16, i32 8, i1 false)
  %10 = load %struct.ball*, %struct.ball** %3, align 8
  store %struct.ball* %10, %struct.ball** %5, align 8
  %11 = load %struct.ball*, %struct.ball** %5, align 8
  %12 = getelementptr inbounds %struct.ball, %struct.ball* %11, i32 -1
  store %struct.ball* %12, %struct.ball** %5, align 8
  %13 = alloca i32
  store i32 -433547146, i32* %13
  br label %14

; <label>:14:                                     ; preds = %1, %35
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -433547146, label %17
    i32 939414311, label %21
    i32 364232823, label %30
  ]

; <label>:16:                                     ; preds = %14
  br label %35

; <label>:17:                                     ; preds = %14
  %18 = load %struct.ball*, %struct.ball** %5, align 8
  %19 = call zeroext i1 @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_0EclI4ballPS5_EEbRT_T0_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter"* %2, %struct.ball* dereferenceable(16) %4, %struct.ball* %18)
  %20 = select i1 %19, i32 939414311, i32 364232823
  store i32 %20, i32* %13
  br label %35

; <label>:21:                                     ; preds = %14
  %22 = load %struct.ball*, %struct.ball** %5, align 8
  %23 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %22) #3
  %24 = load %struct.ball*, %struct.ball** %3, align 8
  %25 = bitcast %struct.ball* %24 to i8*
  %26 = bitcast %struct.ball* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  %27 = load %struct.ball*, %struct.ball** %5, align 8
  store %struct.ball* %27, %struct.ball** %3, align 8
  %28 = load %struct.ball*, %struct.ball** %5, align 8
  %29 = getelementptr inbounds %struct.ball, %struct.ball* %28, i32 -1
  store %struct.ball* %29, %struct.ball** %5, align 8
  store i32 -433547146, i32* %13
  br label %35

; <label>:30:                                     ; preds = %14
  %31 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %4) #3
  %32 = load %struct.ball*, %struct.ball** %3, align 8
  %33 = bitcast %struct.ball* %32 to i8*
  %34 = bitcast %struct.ball* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 16, i32 8, i1 false)
  ret void

; <label>:35:                                     ; preds = %21, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_0EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"() #0 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 1
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 1
  %3 = alloca %class.anon, align 1
  %4 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_0EC2ES2_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter"* %1)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.ball* @_ZSt23__copy_move_backward_a2ILb1EP4ballS1_ET1_T0_S3_S2_(%struct.ball*, %struct.ball*, %struct.ball*) #0 comdat {
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %struct.ball*, %struct.ball** %4, align 8
  %8 = call %struct.ball* @_ZSt12__niter_baseIP4ballENSt11_Niter_baseIT_E13iterator_typeES3_(%struct.ball* %7)
  %9 = load %struct.ball*, %struct.ball** %5, align 8
  %10 = call %struct.ball* @_ZSt12__niter_baseIP4ballENSt11_Niter_baseIT_E13iterator_typeES3_(%struct.ball* %9)
  %11 = load %struct.ball*, %struct.ball** %6, align 8
  %12 = call %struct.ball* @_ZSt12__niter_baseIP4ballENSt11_Niter_baseIT_E13iterator_typeES3_(%struct.ball* %11)
  %13 = call %struct.ball* @_ZSt22__copy_move_backward_aILb1EP4ballS1_ET1_T0_S3_S2_(%struct.ball* %8, %struct.ball* %10, %struct.ball* %12)
  ret %struct.ball* %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.ball* @_ZSt12__miter_baseIP4ballENSt11_Miter_baseIT_E13iterator_typeES3_(%struct.ball*) #4 comdat {
  %2 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %2, align 8
  %3 = load %struct.ball*, %struct.ball** %2, align 8
  %4 = call %struct.ball* @_ZNSt10_Iter_baseIP4ballLb0EE7_S_baseES1_(%struct.ball* %3)
  ret %struct.ball* %4
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.ball* @_ZSt22__copy_move_backward_aILb1EP4ballS1_ET1_T0_S3_S2_(%struct.ball*, %struct.ball*, %struct.ball*) #0 comdat {
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca i8, align 1
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  store i8 1, i8* %7, align 1
  %8 = load %struct.ball*, %struct.ball** %4, align 8
  %9 = load %struct.ball*, %struct.ball** %5, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  %11 = call %struct.ball* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI4ballEEPT_PKS4_S7_S5_(%struct.ball* %8, %struct.ball* %9, %struct.ball* %10)
  ret %struct.ball* %11
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.ball* @_ZSt12__niter_baseIP4ballENSt11_Niter_baseIT_E13iterator_typeES3_(%struct.ball*) #0 comdat {
  %2 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %2, align 8
  %3 = load %struct.ball*, %struct.ball** %2, align 8
  %4 = call %struct.ball* @_ZNSt10_Iter_baseIP4ballLb0EE7_S_baseES1_(%struct.ball* %3)
  ret %struct.ball* %4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.ball* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI4ballEEPT_PKS4_S7_S5_(%struct.ball*, %struct.ball*, %struct.ball*) #4 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i64*
  %6 = alloca %struct.ball**
  %7 = alloca %struct.ball**
  %8 = alloca i1
  %9 = alloca i1
  %10 = load i32, i32* @x.307
  %11 = load i32, i32* @y.308
  %12 = sub i32 %10, 977104598
  %13 = sub i32 %12, 1
  %14 = add i32 %13, 977104598
  %15 = sub i32 %10, 1
  %16 = mul i32 %10, %14
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  store i1 %18, i1* %9
  %19 = icmp slt i32 %11, 10
  store i1 %19, i1* %8
  %20 = alloca i32
  store i32 -882560380, i32* %20
  br label %21

; <label>:21:                                     ; preds = %3, %133
  %22 = load i32, i32* %20
  switch i32 %22, label %23 [
    i32 -882560380, label %24
    i32 1301880285, label %44
    i32 -1929702473, label %80
    i32 157882675, label %83
    i32 2023910720, label %100
    i32 -876999522, label %109
  ]

; <label>:23:                                     ; preds = %21
  br label %133

; <label>:24:                                     ; preds = %21
  %25 = load volatile i1, i1* %9
  %26 = load volatile i1, i1* %8
  %27 = xor i1 %25, true
  %28 = xor i1 %26, true
  %29 = xor i1 false, true
  %30 = and i1 %27, false
  %31 = and i1 %25, %29
  %32 = and i1 %28, false
  %33 = and i1 %26, %29
  %34 = or i1 %30, %31
  %35 = or i1 %32, %33
  %36 = xor i1 %34, %35
  %37 = or i1 %27, %28
  %38 = xor i1 %37, true
  %39 = or i1 false, %29
  %40 = and i1 %38, %39
  %41 = or i1 %36, %40
  %42 = or i1 %25, %26
  %43 = select i1 %41, i32 1301880285, i32 -876999522
  store i32 %43, i32* %20
  br label %133

; <label>:44:                                     ; preds = %21
  %45 = alloca %struct.ball*, align 8
  store %struct.ball** %45, %struct.ball*** %7
  %46 = alloca %struct.ball*, align 8
  %47 = alloca %struct.ball*, align 8
  store %struct.ball** %47, %struct.ball*** %6
  %48 = alloca i64, align 8
  store i64* %48, i64** %5
  %49 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %0, %struct.ball** %49, align 8
  store %struct.ball* %1, %struct.ball** %46, align 8
  %50 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %2, %struct.ball** %50, align 8
  %51 = load %struct.ball*, %struct.ball** %46, align 8
  %52 = load volatile %struct.ball**, %struct.ball*** %7
  %53 = load %struct.ball*, %struct.ball** %52, align 8
  %54 = ptrtoint %struct.ball* %51 to i64
  %55 = ptrtoint %struct.ball* %53 to i64
  %56 = sub i64 %54, 1269837593203846714
  %57 = sub i64 %56, %55
  %58 = add i64 %57, 1269837593203846714
  %59 = sub i64 %54, %55
  %60 = sdiv exact i64 %58, 16
  %61 = load volatile i64*, i64** %5
  store i64 %60, i64* %61, align 8
  %62 = load volatile i64*, i64** %5
  %63 = load i64, i64* %62, align 8
  %64 = icmp ne i64 %63, 0
  store i1 %64, i1* %4
  %65 = load i32, i32* @x.307
  %66 = load i32, i32* @y.308
  %67 = add i32 %65, -1339765928
  %68 = sub i32 %67, 1
  %69 = sub i32 %68, -1339765928
  %70 = sub i32 %65, 1
  %71 = mul i32 %65, %69
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %66, 10
  %75 = and i1 %73, %74
  %76 = xor i1 %73, %74
  %77 = or i1 %75, %76
  %78 = or i1 %73, %74
  %79 = select i1 %77, i32 -1929702473, i32 -876999522
  store i32 %79, i32* %20
  br label %133

; <label>:80:                                     ; preds = %21
  %81 = load volatile i1, i1* %4
  %82 = select i1 %81, i32 157882675, i32 2023910720
  store i32 %82, i32* %20
  br label %133

; <label>:83:                                     ; preds = %21
  %84 = load volatile %struct.ball**, %struct.ball*** %6
  %85 = load %struct.ball*, %struct.ball** %84, align 8
  %86 = load volatile i64*, i64** %5
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 0, -5138910941468354933
  %89 = sub i64 %88, %87
  %90 = add i64 %89, -5138910941468354933
  %91 = sub i64 0, %87
  %92 = getelementptr inbounds %struct.ball, %struct.ball* %85, i64 %90
  %93 = bitcast %struct.ball* %92 to i8*
  %94 = load volatile %struct.ball**, %struct.ball*** %7
  %95 = load %struct.ball*, %struct.ball** %94, align 8
  %96 = bitcast %struct.ball* %95 to i8*
  %97 = load volatile i64*, i64** %5
  %98 = load i64, i64* %97, align 8
  %99 = mul i64 16, %98
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %93, i8* %96, i64 %99, i32 8, i1 false)
  store i32 2023910720, i32* %20
  br label %133

; <label>:100:                                    ; preds = %21
  %101 = load volatile %struct.ball**, %struct.ball*** %6
  %102 = load %struct.ball*, %struct.ball** %101, align 8
  %103 = load volatile i64*, i64** %5
  %104 = load i64, i64* %103, align 8
  %105 = sub i64 0, %104
  %106 = add i64 0, %105
  %107 = sub i64 0, %104
  %108 = getelementptr inbounds %struct.ball, %struct.ball* %102, i64 %106
  ret %struct.ball* %108

; <label>:109:                                    ; preds = %21
  %110 = alloca %struct.ball*, align 8
  %111 = alloca %struct.ball*, align 8
  %112 = alloca %struct.ball*, align 8
  %113 = alloca i64, align 8
  store %struct.ball* %0, %struct.ball** %110, align 8
  store %struct.ball* %1, %struct.ball** %111, align 8
  store %struct.ball* %2, %struct.ball** %112, align 8
  %114 = load %struct.ball*, %struct.ball** %111, align 8
  %115 = load %struct.ball*, %struct.ball** %110, align 8
  %116 = ptrtoint %struct.ball* %114 to i64
  %117 = ptrtoint %struct.ball* %115 to i64
  %118 = sub i64 0, -6530946912707919446
  %119 = sub i64 %118, %116
  %120 = add i64 %119, -6530946912707919446
  %121 = sub i64 0, %116
  %122 = sub i64 %120, -900290676302456121
  %123 = add i64 %122, %117
  %124 = add i64 %123, -900290676302456121
  %125 = add i64 %120, %117
  %126 = shl i64 %116, %117
  %127 = sub i64 0, %117
  %128 = add i64 %116, %127
  %129 = sub i64 %116, %117
  %130 = sdiv exact i64 %128, 16
  store i64 %130, i64* %113, align 8
  %131 = load i64, i64* %113, align 8
  %132 = icmp ne i64 %131, 0
  store i32 1301880285, i32* %20
  br label %133

; <label>:133:                                    ; preds = %109, %83, %80, %44, %24, %23
  br label %21
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.ball* @_ZNSt10_Iter_baseIP4ballLb0EE7_S_baseES1_(%struct.ball*) #4 comdat align 2 {
  %2 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %2, align 8
  %3 = load %struct.ball*, %struct.ball** %2, align 8
  ret %struct.ball* %3
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_0EclI4ballPS5_EEbRT_T0_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter"*, %struct.ball* dereferenceable(16), %struct.ball*) #4 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %7, i32 0, i32 0
  %9 = load %struct.ball*, %struct.ball** %5, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  %11 = call zeroext i1 @"_ZZ4mainENK3$_0clERK4ballS2_"(%class.anon* %8, %struct.ball* dereferenceable(16) %9, %struct.ball* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_0EC2ES2_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter"*) unnamed_addr #4 align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.313
  %5 = load i32, i32* @y.314
  %6 = sub i32 %4, -326863008
  %7 = sub i32 %6, 1
  %8 = add i32 %7, -326863008
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 -1944127740, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %64
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -1944127740, label %18
    i32 -1365416620, label %26
    i32 126564327, label %58
    i32 997670779, label %59
  ]

; <label>:17:                                     ; preds = %15
  br label %64

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 -1365416620, i32 997670779
  store i32 %25, i32* %14
  br label %64

; <label>:26:                                     ; preds = %15
  %27 = alloca %class.anon, align 1
  %28 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %28, align 8
  %29 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %28, align 8
  %30 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %29, i32 0, i32 0
  %31 = load i32, i32* @x.313
  %32 = load i32, i32* @y.314
  %33 = add i32 %31, -173507885
  %34 = sub i32 %33, 1
  %35 = sub i32 %34, -173507885
  %36 = sub i32 %31, 1
  %37 = mul i32 %31, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %32, 10
  %41 = xor i1 %39, true
  %42 = xor i1 %40, true
  %43 = xor i1 false, true
  %44 = and i1 %41, false
  %45 = and i1 %39, %43
  %46 = and i1 %42, false
  %47 = and i1 %40, %43
  %48 = or i1 %44, %45
  %49 = or i1 %46, %47
  %50 = xor i1 %48, %49
  %51 = or i1 %41, %42
  %52 = xor i1 %51, true
  %53 = or i1 false, %43
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = or i1 %39, %40
  %57 = select i1 %55, i32 126564327, i32 997670779
  store i32 %57, i32* %14
  br label %64

; <label>:58:                                     ; preds = %15
  ret void

; <label>:59:                                     ; preds = %15
  %60 = alloca %class.anon, align 1
  %61 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %61, align 8
  %62 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %61, align 8
  %63 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %62, i32 0, i32 0
  store i32 -1365416620, i32* %14
  br label %64

; <label>:64:                                     ; preds = %59, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_0EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*) unnamed_addr #4 align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.315
  %5 = load i32, i32* @y.316
  %6 = add i32 %4, -2042071458
  %7 = sub i32 %6, 1
  %8 = sub i32 %7, -2042071458
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 -2084014443, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %51
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -2084014443, label %18
    i32 -1788747132, label %26
    i32 1085360980, label %45
    i32 -1677005819, label %46
  ]

; <label>:17:                                     ; preds = %15
  br label %51

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 -1788747132, i32 -1677005819
  store i32 %25, i32* %14
  br label %51

; <label>:26:                                     ; preds = %15
  %27 = alloca %class.anon, align 1
  %28 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %28, align 8
  %29 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %28, align 8
  %30 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %29, i32 0, i32 0
  %31 = load i32, i32* @x.315
  %32 = load i32, i32* @y.316
  %33 = sub i32 0, 1
  %34 = add i32 %31, %33
  %35 = sub i32 %31, 1
  %36 = mul i32 %31, %34
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %32, 10
  %40 = and i1 %38, %39
  %41 = xor i1 %38, %39
  %42 = or i1 %40, %41
  %43 = or i1 %38, %39
  %44 = select i1 %42, i32 1085360980, i32 -1677005819
  store i32 %44, i32* %14
  br label %51

; <label>:45:                                     ; preds = %15
  ret void

; <label>:46:                                     ; preds = %15
  %47 = alloca %class.anon, align 1
  %48 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %48, align 8
  %49 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %48, align 8
  %50 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %49, i32 0, i32 0
  store i32 -1788747132, i32* %14
  br label %51

; <label>:51:                                     ; preds = %46, %26, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt6__sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %struct.ball*
  %4 = alloca %struct.ball*
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %6, align 8
  store %struct.ball* %1, %struct.ball** %7, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  store %struct.ball* %10, %struct.ball** %4
  %11 = load %struct.ball*, %struct.ball** %7, align 8
  store %struct.ball* %11, %struct.ball** %3
  %12 = alloca i32
  store i32 -830671464, i32* %12
  br label %13

; <label>:13:                                     ; preds = %2, %84
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 -830671464, label %16
    i32 121055409, label %21
    i32 -75116912, label %40
    i32 585306061, label %55
    i32 749675630, label %82
    i32 -1449581854, label %83
  ]

; <label>:15:                                     ; preds = %13
  br label %84

; <label>:16:                                     ; preds = %13
  %17 = load volatile %struct.ball*, %struct.ball** %4
  %18 = load volatile %struct.ball*, %struct.ball** %3
  %19 = icmp ne %struct.ball* %17, %18
  %20 = select i1 %19, i32 121055409, i32 -75116912
  store i32 %20, i32* %12
  br label %84

; <label>:21:                                     ; preds = %13
  %22 = load %struct.ball*, %struct.ball** %6, align 8
  %23 = load %struct.ball*, %struct.ball** %7, align 8
  %24 = load %struct.ball*, %struct.ball** %7, align 8
  %25 = load %struct.ball*, %struct.ball** %6, align 8
  %26 = ptrtoint %struct.ball* %24 to i64
  %27 = ptrtoint %struct.ball* %25 to i64
  %28 = sub i64 0, %27
  %29 = add i64 %26, %28
  %30 = sub i64 %26, %27
  %31 = sdiv exact i64 %29, 16
  %32 = call i64 @_ZSt4__lgl(i64 %31)
  %33 = mul nsw i64 %32, 2
  %34 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %8 to i8*
  %35 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 1, i32 1, i1 false)
  call void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_T1_"(%struct.ball* %22, %struct.ball* %23, i64 %33)
  %36 = load %struct.ball*, %struct.ball** %6, align 8
  %37 = load %struct.ball*, %struct.ball** %7, align 8
  %38 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9 to i8*
  %39 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 1, i32 1, i1 false)
  call void @"_ZSt22__final_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %36, %struct.ball* %37)
  store i32 -75116912, i32* %12
  br label %84

; <label>:40:                                     ; preds = %13
  %41 = load i32, i32* @x.317
  %42 = load i32, i32* @y.318
  %43 = sub i32 0, 1
  %44 = add i32 %41, %43
  %45 = sub i32 %41, 1
  %46 = mul i32 %41, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %42, 10
  %50 = and i1 %48, %49
  %51 = xor i1 %48, %49
  %52 = or i1 %50, %51
  %53 = or i1 %48, %49
  %54 = select i1 %52, i32 585306061, i32 -1449581854
  store i32 %54, i32* %12
  br label %84

; <label>:55:                                     ; preds = %13
  %56 = load i32, i32* @x.317
  %57 = load i32, i32* @y.318
  %58 = sub i32 0, 1
  %59 = add i32 %56, %58
  %60 = sub i32 %56, 1
  %61 = mul i32 %56, %59
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %57, 10
  %65 = xor i1 %63, true
  %66 = xor i1 %64, true
  %67 = xor i1 false, true
  %68 = and i1 %65, false
  %69 = and i1 %63, %67
  %70 = and i1 %66, false
  %71 = and i1 %64, %67
  %72 = or i1 %68, %69
  %73 = or i1 %70, %71
  %74 = xor i1 %72, %73
  %75 = or i1 %65, %66
  %76 = xor i1 %75, true
  %77 = or i1 false, %67
  %78 = and i1 %76, %77
  %79 = or i1 %74, %78
  %80 = or i1 %63, %64
  %81 = select i1 %79, i32 749675630, i32 -1449581854
  store i32 %81, i32* %12
  br label %84

; <label>:82:                                     ; preds = %13
  ret void

; <label>:83:                                     ; preds = %13
  store i32 585306061, i32* %12
  br label %84

; <label>:84:                                     ; preds = %83, %55, %40, %21, %16, %15
  br label %13
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ4mainE3$_1EENS0_15_Iter_comp_iterIT_EES4_"() #0 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %2 = alloca %class.anon.0, align 1
  %3 = alloca %class.anon.0, align 1
  call void @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %1)
  ret void
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_T1_"(%struct.ball*, %struct.ball*, i64) #0 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %9 = alloca %struct.ball*, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  store i64 %2, i64* %7, align 8
  %12 = alloca i32
  store i32 1279389819, i32* %12
  br label %13

; <label>:13:                                     ; preds = %3, %57
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 1279389819, label %16
    i32 79967031, label %28
    i32 1920005331, label %32
    i32 -1771692604, label %38
    i32 -1903007536, label %56
  ]

; <label>:15:                                     ; preds = %13
  br label %57

; <label>:16:                                     ; preds = %13
  %17 = load %struct.ball*, %struct.ball** %6, align 8
  %18 = load %struct.ball*, %struct.ball** %5, align 8
  %19 = ptrtoint %struct.ball* %17 to i64
  %20 = ptrtoint %struct.ball* %18 to i64
  %21 = add i64 %19, 8065322122828392683
  %22 = sub i64 %21, %20
  %23 = sub i64 %22, 8065322122828392683
  %24 = sub i64 %19, %20
  %25 = sdiv exact i64 %23, 16
  %26 = icmp sgt i64 %25, 16
  %27 = select i1 %26, i32 79967031, i32 -1903007536
  store i32 %27, i32* %12
  br label %57

; <label>:28:                                     ; preds = %13
  %29 = load i64, i64* %7, align 8
  %30 = icmp eq i64 %29, 0
  %31 = select i1 %30, i32 1920005331, i32 -1771692604
  store i32 %31, i32* %12
  br label %57

; <label>:32:                                     ; preds = %13
  %33 = load %struct.ball*, %struct.ball** %5, align 8
  %34 = load %struct.ball*, %struct.ball** %6, align 8
  %35 = load %struct.ball*, %struct.ball** %6, align 8
  %36 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %8 to i8*
  %37 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 1, i32 1, i1 false)
  call void @"_ZSt14__partial_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball* %33, %struct.ball* %34, %struct.ball* %35)
  store i32 -1903007536, i32* %12
  br label %57

; <label>:38:                                     ; preds = %13
  %39 = load i64, i64* %7, align 8
  %40 = sub i64 0, %39
  %41 = sub i64 0, -1
  %42 = add i64 %40, %41
  %43 = sub i64 0, %42
  %44 = add nsw i64 %39, -1
  store i64 %43, i64* %7, align 8
  %45 = load %struct.ball*, %struct.ball** %5, align 8
  %46 = load %struct.ball*, %struct.ball** %6, align 8
  %47 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %10 to i8*
  %48 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 1, i32 1, i1 false)
  %49 = call %struct.ball* @"_ZSt27__unguarded_partition_pivotIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEET_S7_S7_T0_"(%struct.ball* %45, %struct.ball* %46)
  store %struct.ball* %49, %struct.ball** %9, align 8
  %50 = load %struct.ball*, %struct.ball** %9, align 8
  %51 = load %struct.ball*, %struct.ball** %6, align 8
  %52 = load i64, i64* %7, align 8
  %53 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %11 to i8*
  %54 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 1, i32 1, i1 false)
  call void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_T1_"(%struct.ball* %50, %struct.ball* %51, i64 %52)
  %55 = load %struct.ball*, %struct.ball** %9, align 8
  store %struct.ball* %55, %struct.ball** %6, align 8
  store i32 1279389819, i32* %12
  br label %57

; <label>:56:                                     ; preds = %13
  ret void

; <label>:57:                                     ; preds = %38, %32, %28, %16, %15
  br label %13
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt22__final_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %7 = alloca %struct.ball**
  %8 = alloca %struct.ball**
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %10 = alloca i1
  %11 = alloca i1
  %12 = load i32, i32* @x.323
  %13 = load i32, i32* @y.324
  %14 = add i32 %12, 987911306
  %15 = sub i32 %14, 1
  %16 = sub i32 %15, 987911306
  %17 = sub i32 %12, 1
  %18 = mul i32 %12, %16
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  store i1 %20, i1* %11
  %21 = icmp slt i32 %13, 10
  store i1 %21, i1* %10
  %22 = alloca i32
  store i32 394080707, i32* %22
  br label %23

; <label>:23:                                     ; preds = %2, %164
  %24 = load i32, i32* %22
  switch i32 %24, label %25 [
    i32 394080707, label %26
    i32 314301610, label %46
    i32 -1879492920, label %92
    i32 -931515129, label %95
    i32 -1070920997, label %114
    i32 -1698567979, label %123
    i32 -1194479540, label %124
  ]

; <label>:25:                                     ; preds = %23
  br label %164

; <label>:26:                                     ; preds = %23
  %27 = load volatile i1, i1* %11
  %28 = load volatile i1, i1* %10
  %29 = xor i1 %27, true
  %30 = xor i1 %28, true
  %31 = xor i1 false, true
  %32 = and i1 %29, false
  %33 = and i1 %27, %31
  %34 = and i1 %30, false
  %35 = and i1 %28, %31
  %36 = or i1 %32, %33
  %37 = or i1 %34, %35
  %38 = xor i1 %36, %37
  %39 = or i1 %29, %30
  %40 = xor i1 %39, true
  %41 = or i1 false, %31
  %42 = and i1 %40, %41
  %43 = or i1 %38, %42
  %44 = or i1 %27, %28
  %45 = select i1 %43, i32 314301610, i32 -1194479540
  store i32 %45, i32* %22
  br label %164

; <label>:46:                                     ; preds = %23
  %47 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %47, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %9
  %48 = alloca %struct.ball*, align 8
  store %struct.ball** %48, %struct.ball*** %8
  %49 = alloca %struct.ball*, align 8
  store %struct.ball** %49, %struct.ball*** %7
  %50 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %50, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %6
  %51 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %51, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %5
  %52 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %52, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %4
  %53 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %0, %struct.ball** %53, align 8
  %54 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %1, %struct.ball** %54, align 8
  %55 = load volatile %struct.ball**, %struct.ball*** %7
  %56 = load %struct.ball*, %struct.ball** %55, align 8
  %57 = load volatile %struct.ball**, %struct.ball*** %8
  %58 = load %struct.ball*, %struct.ball** %57, align 8
  %59 = ptrtoint %struct.ball* %56 to i64
  %60 = ptrtoint %struct.ball* %58 to i64
  %61 = sub i64 0, %60
  %62 = add i64 %59, %61
  %63 = sub i64 %59, %60
  %64 = sdiv exact i64 %62, 16
  %65 = icmp sgt i64 %64, 16
  store i1 %65, i1* %3
  %66 = load i32, i32* @x.323
  %67 = load i32, i32* @y.324
  %68 = sub i32 0, 1
  %69 = add i32 %66, %68
  %70 = sub i32 %66, 1
  %71 = mul i32 %66, %69
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %67, 10
  %75 = xor i1 %73, true
  %76 = xor i1 %74, true
  %77 = xor i1 true, true
  %78 = and i1 %75, true
  %79 = and i1 %73, %77
  %80 = and i1 %76, true
  %81 = and i1 %74, %77
  %82 = or i1 %78, %79
  %83 = or i1 %80, %81
  %84 = xor i1 %82, %83
  %85 = or i1 %75, %76
  %86 = xor i1 %85, true
  %87 = or i1 true, %77
  %88 = and i1 %86, %87
  %89 = or i1 %84, %88
  %90 = or i1 %73, %74
  %91 = select i1 %89, i32 -1879492920, i32 -1194479540
  store i32 %91, i32* %22
  br label %164

; <label>:92:                                     ; preds = %23
  %93 = load volatile i1, i1* %3
  %94 = select i1 %93, i32 -931515129, i32 -1070920997
  store i32 %94, i32* %22
  br label %164

; <label>:95:                                     ; preds = %23
  %96 = load volatile %struct.ball**, %struct.ball*** %8
  %97 = load %struct.ball*, %struct.ball** %96, align 8
  %98 = load volatile %struct.ball**, %struct.ball*** %8
  %99 = load %struct.ball*, %struct.ball** %98, align 8
  %100 = getelementptr inbounds %struct.ball, %struct.ball* %99, i64 16
  %101 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %6
  %102 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %101 to i8*
  %103 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %9
  %104 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %102, i8* %104, i64 1, i32 1, i1 false)
  call void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %97, %struct.ball* %100)
  %105 = load volatile %struct.ball**, %struct.ball*** %8
  %106 = load %struct.ball*, %struct.ball** %105, align 8
  %107 = getelementptr inbounds %struct.ball, %struct.ball* %106, i64 16
  %108 = load volatile %struct.ball**, %struct.ball*** %7
  %109 = load %struct.ball*, %struct.ball** %108, align 8
  %110 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %5
  %111 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %110 to i8*
  %112 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %9
  %113 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* %113, i64 1, i32 1, i1 false)
  call void @"_ZSt26__unguarded_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %107, %struct.ball* %109)
  store i32 -1698567979, i32* %22
  br label %164

; <label>:114:                                    ; preds = %23
  %115 = load volatile %struct.ball**, %struct.ball*** %8
  %116 = load %struct.ball*, %struct.ball** %115, align 8
  %117 = load volatile %struct.ball**, %struct.ball*** %7
  %118 = load %struct.ball*, %struct.ball** %117, align 8
  %119 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %4
  %120 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %119 to i8*
  %121 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %9
  %122 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %120, i8* %122, i64 1, i32 1, i1 false)
  call void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %116, %struct.ball* %118)
  store i32 -1698567979, i32* %22
  br label %164

; <label>:123:                                    ; preds = %23
  ret void

; <label>:124:                                    ; preds = %23
  %125 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %126 = alloca %struct.ball*, align 8
  %127 = alloca %struct.ball*, align 8
  %128 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %129 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %130 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %126, align 8
  store %struct.ball* %1, %struct.ball** %127, align 8
  %131 = load %struct.ball*, %struct.ball** %127, align 8
  %132 = load %struct.ball*, %struct.ball** %126, align 8
  %133 = ptrtoint %struct.ball* %131 to i64
  %134 = ptrtoint %struct.ball* %132 to i64
  %135 = sub i64 %133, -4801848735328241322
  %136 = sub i64 %135, %134
  %137 = add i64 %136, -4801848735328241322
  %138 = sub i64 %133, %134
  %139 = mul i64 %137, %134
  %140 = shl i64 %133, %134
  %141 = sub i64 0, %134
  %142 = add i64 %133, %141
  %143 = sub i64 %133, %134
  %144 = sub i64 0, -1389656444976441252
  %145 = sub i64 %144, %142
  %146 = add i64 %145, -1389656444976441252
  %147 = sub i64 0, %142
  %148 = sub i64 0, 16
  %149 = sub i64 %146, %148
  %150 = add i64 %146, 16
  %151 = add i64 %142, 5192733078830263814
  %152 = sub i64 %151, 16
  %153 = sub i64 %152, 5192733078830263814
  %154 = sub i64 %142, 16
  %155 = mul i64 %153, 16
  %156 = shl i64 %142, 16
  %157 = add i64 %142, -8006593020507302413
  %158 = sub i64 %157, 16
  %159 = sub i64 %158, -8006593020507302413
  %160 = sub i64 %142, 16
  %161 = mul i64 %159, 16
  %162 = sdiv exact i64 %142, 16
  %163 = icmp sgt i64 %162, 16
  store i32 314301610, i32* %22
  br label %164

; <label>:164:                                    ; preds = %124, %114, %95, %92, %46, %26, %25
  br label %23
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt14__partial_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.325
  %7 = load i32, i32* @y.326
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 -1512312812, i32* %15
  br label %16

; <label>:16:                                     ; preds = %3, %87
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1512312812, label %19
    i32 -259550701, label %39
    i32 -828515627, label %70
    i32 1305630002, label %71
  ]

; <label>:18:                                     ; preds = %16
  br label %87

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -259550701, i32 1305630002
  store i32 %38, i32* %15
  br label %87

; <label>:39:                                     ; preds = %16
  %40 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %41 = alloca %struct.ball*, align 8
  %42 = alloca %struct.ball*, align 8
  %43 = alloca %struct.ball*, align 8
  %44 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %45 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %41, align 8
  store %struct.ball* %1, %struct.ball** %42, align 8
  store %struct.ball* %2, %struct.ball** %43, align 8
  %46 = load %struct.ball*, %struct.ball** %41, align 8
  %47 = load %struct.ball*, %struct.ball** %42, align 8
  %48 = load %struct.ball*, %struct.ball** %43, align 8
  %49 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %44 to i8*
  %50 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* %50, i64 1, i32 1, i1 false)
  call void @"_ZSt13__heap_selectIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball* %46, %struct.ball* %47, %struct.ball* %48)
  %51 = load %struct.ball*, %struct.ball** %41, align 8
  %52 = load %struct.ball*, %struct.ball** %42, align 8
  %53 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %45 to i8*
  %54 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 1, i32 1, i1 false)
  call void @"_ZSt11__sort_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %51, %struct.ball* %52)
  %55 = load i32, i32* @x.325
  %56 = load i32, i32* @y.326
  %57 = sub i32 %55, 553667816
  %58 = sub i32 %57, 1
  %59 = add i32 %58, 553667816
  %60 = sub i32 %55, 1
  %61 = mul i32 %55, %59
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %56, 10
  %65 = and i1 %63, %64
  %66 = xor i1 %63, %64
  %67 = or i1 %65, %66
  %68 = or i1 %63, %64
  %69 = select i1 %67, i32 -828515627, i32 1305630002
  store i32 %69, i32* %15
  br label %87

; <label>:70:                                     ; preds = %16
  ret void

; <label>:71:                                     ; preds = %16
  %72 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %73 = alloca %struct.ball*, align 8
  %74 = alloca %struct.ball*, align 8
  %75 = alloca %struct.ball*, align 8
  %76 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %77 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %73, align 8
  store %struct.ball* %1, %struct.ball** %74, align 8
  store %struct.ball* %2, %struct.ball** %75, align 8
  %78 = load %struct.ball*, %struct.ball** %73, align 8
  %79 = load %struct.ball*, %struct.ball** %74, align 8
  %80 = load %struct.ball*, %struct.ball** %75, align 8
  %81 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %76 to i8*
  %82 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 1, i32 1, i1 false)
  call void @"_ZSt13__heap_selectIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball* %78, %struct.ball* %79, %struct.ball* %80)
  %83 = load %struct.ball*, %struct.ball** %73, align 8
  %84 = load %struct.ball*, %struct.ball** %74, align 8
  %85 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %77 to i8*
  %86 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 1, i32 1, i1 false)
  call void @"_ZSt11__sort_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %83, %struct.ball* %84)
  store i32 -259550701, i32* %15
  br label %87

; <label>:87:                                     ; preds = %71, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define internal %struct.ball* @"_ZSt27__unguarded_partition_pivotIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEET_S7_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  %9 = load %struct.ball*, %struct.ball** %4, align 8
  %10 = load %struct.ball*, %struct.ball** %5, align 8
  %11 = load %struct.ball*, %struct.ball** %4, align 8
  %12 = ptrtoint %struct.ball* %10 to i64
  %13 = ptrtoint %struct.ball* %11 to i64
  %14 = sub i64 %12, -6154551352429969265
  %15 = sub i64 %14, %13
  %16 = add i64 %15, -6154551352429969265
  %17 = sub i64 %12, %13
  %18 = sdiv exact i64 %16, 16
  %19 = sdiv i64 %18, 2
  %20 = getelementptr inbounds %struct.ball, %struct.ball* %9, i64 %19
  store %struct.ball* %20, %struct.ball** %6, align 8
  %21 = load %struct.ball*, %struct.ball** %4, align 8
  %22 = load %struct.ball*, %struct.ball** %4, align 8
  %23 = getelementptr inbounds %struct.ball, %struct.ball* %22, i64 1
  %24 = load %struct.ball*, %struct.ball** %6, align 8
  %25 = load %struct.ball*, %struct.ball** %5, align 8
  %26 = getelementptr inbounds %struct.ball, %struct.ball* %25, i64 -1
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %7 to i8*
  %28 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 1, i32 1, i1 false)
  call void @"_ZSt22__move_median_to_firstIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_S7_T0_"(%struct.ball* %21, %struct.ball* %23, %struct.ball* %24, %struct.ball* %26)
  %29 = load %struct.ball*, %struct.ball** %4, align 8
  %30 = getelementptr inbounds %struct.ball, %struct.ball* %29, i64 1
  %31 = load %struct.ball*, %struct.ball** %5, align 8
  %32 = load %struct.ball*, %struct.ball** %4, align 8
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %8 to i8*
  %34 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 1, i32 1, i1 false)
  %35 = call %struct.ball* @"_ZSt21__unguarded_partitionIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEET_S7_S7_S7_T0_"(%struct.ball* %30, %struct.ball* %31, %struct.ball* %32)
  ret %struct.ball* %35
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt13__heap_selectIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %9 = alloca %struct.ball*, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  store %struct.ball* %2, %struct.ball** %7, align 8
  %11 = load %struct.ball*, %struct.ball** %5, align 8
  %12 = load %struct.ball*, %struct.ball** %6, align 8
  %13 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %8 to i8*
  %14 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 1, i32 1, i1 false)
  call void @"_ZSt11__make_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball* %11, %struct.ball* %12)
  %15 = load %struct.ball*, %struct.ball** %6, align 8
  store %struct.ball* %15, %struct.ball** %9, align 8
  %16 = alloca i32
  store i32 154158375, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %41
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 154158375, label %20
    i32 225021125, label %25
    i32 2034299979, label %30
    i32 -611634752, label %36
    i32 1667046566, label %37
    i32 1218441228, label %40
  ]

; <label>:19:                                     ; preds = %17
  br label %41

; <label>:20:                                     ; preds = %17
  %21 = load %struct.ball*, %struct.ball** %9, align 8
  %22 = load %struct.ball*, %struct.ball** %7, align 8
  %23 = icmp ult %struct.ball* %21, %22
  %24 = select i1 %23, i32 225021125, i32 1218441228
  store i32 %24, i32* %16
  br label %41

; <label>:25:                                     ; preds = %17
  %26 = load %struct.ball*, %struct.ball** %9, align 8
  %27 = load %struct.ball*, %struct.ball** %5, align 8
  %28 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4, %struct.ball* %26, %struct.ball* %27)
  %29 = select i1 %28, i32 2034299979, i32 -611634752
  store i32 %29, i32* %16
  br label %41

; <label>:30:                                     ; preds = %17
  %31 = load %struct.ball*, %struct.ball** %5, align 8
  %32 = load %struct.ball*, %struct.ball** %6, align 8
  %33 = load %struct.ball*, %struct.ball** %9, align 8
  %34 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %10 to i8*
  %35 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball* %31, %struct.ball* %32, %struct.ball* %33)
  store i32 -611634752, i32* %16
  br label %41

; <label>:36:                                     ; preds = %17
  store i32 1667046566, i32* %16
  br label %41

; <label>:37:                                     ; preds = %17
  %38 = load %struct.ball*, %struct.ball** %9, align 8
  %39 = getelementptr inbounds %struct.ball, %struct.ball* %38, i32 1
  store %struct.ball* %39, %struct.ball** %9, align 8
  store i32 154158375, i32* %16
  br label %41

; <label>:40:                                     ; preds = %17
  ret void

; <label>:41:                                     ; preds = %37, %36, %30, %25, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__sort_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %5 = alloca %struct.ball**
  %6 = alloca %struct.ball**
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %8 = alloca i1
  %9 = alloca i1
  %10 = load i32, i32* @x.331
  %11 = load i32, i32* @y.332
  %12 = sub i32 %10, 1962615500
  %13 = sub i32 %12, 1
  %14 = add i32 %13, 1962615500
  %15 = sub i32 %10, 1
  %16 = mul i32 %10, %14
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  store i1 %18, i1* %9
  %19 = icmp slt i32 %11, 10
  store i1 %19, i1* %8
  %20 = alloca i32
  store i32 -1199297783, i32* %20
  br label %21

; <label>:21:                                     ; preds = %2, %232
  %22 = load i32, i32* %20
  switch i32 %22, label %23 [
    i32 -1199297783, label %24
    i32 -72417330, label %32
    i32 -789453919, label %66
    i32 1165414783, label %67
    i32 -1811924624, label %82
    i32 403736961, label %109
    i32 -1806557243, label %112
    i32 1334756157, label %139
    i32 -24728588, label %181
    i32 -313658616, label %182
    i32 612717677, label %183
    i32 2003087915, label %188
    i32 -674236577, label %217
  ]

; <label>:23:                                     ; preds = %21
  br label %232

; <label>:24:                                     ; preds = %21
  %25 = load volatile i1, i1* %9
  %26 = load volatile i1, i1* %8
  %27 = and i1 %25, %26
  %28 = xor i1 %25, %26
  %29 = or i1 %27, %28
  %30 = or i1 %25, %26
  %31 = select i1 %29, i32 -72417330, i32 612717677
  store i32 %31, i32* %20
  br label %232

; <label>:32:                                     ; preds = %21
  %33 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %33, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %7
  %34 = alloca %struct.ball*, align 8
  store %struct.ball** %34, %struct.ball*** %6
  %35 = alloca %struct.ball*, align 8
  store %struct.ball** %35, %struct.ball*** %5
  %36 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %36, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %4
  %37 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %0, %struct.ball** %37, align 8
  %38 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %1, %struct.ball** %38, align 8
  %39 = load i32, i32* @x.331
  %40 = load i32, i32* @y.332
  %41 = sub i32 %39, -1468192179
  %42 = sub i32 %41, 1
  %43 = add i32 %42, -1468192179
  %44 = sub i32 %39, 1
  %45 = mul i32 %39, %43
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %40, 10
  %49 = xor i1 %47, true
  %50 = xor i1 %48, true
  %51 = xor i1 false, true
  %52 = and i1 %49, false
  %53 = and i1 %47, %51
  %54 = and i1 %50, false
  %55 = and i1 %48, %51
  %56 = or i1 %52, %53
  %57 = or i1 %54, %55
  %58 = xor i1 %56, %57
  %59 = or i1 %49, %50
  %60 = xor i1 %59, true
  %61 = or i1 false, %51
  %62 = and i1 %60, %61
  %63 = or i1 %58, %62
  %64 = or i1 %47, %48
  %65 = select i1 %63, i32 -789453919, i32 612717677
  store i32 %65, i32* %20
  br label %232

; <label>:66:                                     ; preds = %21
  store i32 1165414783, i32* %20
  br label %232

; <label>:67:                                     ; preds = %21
  %68 = load i32, i32* @x.331
  %69 = load i32, i32* @y.332
  %70 = sub i32 0, 1
  %71 = add i32 %68, %70
  %72 = sub i32 %68, 1
  %73 = mul i32 %68, %71
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %69, 10
  %77 = and i1 %75, %76
  %78 = xor i1 %75, %76
  %79 = or i1 %77, %78
  %80 = or i1 %75, %76
  %81 = select i1 %79, i32 -1811924624, i32 2003087915
  store i32 %81, i32* %20
  br label %232

; <label>:82:                                     ; preds = %21
  %83 = load volatile %struct.ball**, %struct.ball*** %5
  %84 = load %struct.ball*, %struct.ball** %83, align 8
  %85 = load volatile %struct.ball**, %struct.ball*** %6
  %86 = load %struct.ball*, %struct.ball** %85, align 8
  %87 = ptrtoint %struct.ball* %84 to i64
  %88 = ptrtoint %struct.ball* %86 to i64
  %89 = add i64 %87, -5402524173215945419
  %90 = sub i64 %89, %88
  %91 = sub i64 %90, -5402524173215945419
  %92 = sub i64 %87, %88
  %93 = sdiv exact i64 %91, 16
  %94 = icmp sgt i64 %93, 1
  store i1 %94, i1* %3
  %95 = load i32, i32* @x.331
  %96 = load i32, i32* @y.332
  %97 = sub i32 0, 1
  %98 = add i32 %95, %97
  %99 = sub i32 %95, 1
  %100 = mul i32 %95, %98
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %96, 10
  %104 = and i1 %102, %103
  %105 = xor i1 %102, %103
  %106 = or i1 %104, %105
  %107 = or i1 %102, %103
  %108 = select i1 %106, i32 403736961, i32 2003087915
  store i32 %108, i32* %20
  br label %232

; <label>:109:                                    ; preds = %21
  %110 = load volatile i1, i1* %3
  %111 = select i1 %110, i32 -1806557243, i32 -313658616
  store i32 %111, i32* %20
  br label %232

; <label>:112:                                    ; preds = %21
  %113 = load i32, i32* @x.331
  %114 = load i32, i32* @y.332
  %115 = sub i32 0, 1
  %116 = add i32 %113, %115
  %117 = sub i32 %113, 1
  %118 = mul i32 %113, %116
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %114, 10
  %122 = xor i1 %120, true
  %123 = xor i1 %121, true
  %124 = xor i1 false, true
  %125 = and i1 %122, false
  %126 = and i1 %120, %124
  %127 = and i1 %123, false
  %128 = and i1 %121, %124
  %129 = or i1 %125, %126
  %130 = or i1 %127, %128
  %131 = xor i1 %129, %130
  %132 = or i1 %122, %123
  %133 = xor i1 %132, true
  %134 = or i1 false, %124
  %135 = and i1 %133, %134
  %136 = or i1 %131, %135
  %137 = or i1 %120, %121
  %138 = select i1 %136, i32 1334756157, i32 -674236577
  store i32 %138, i32* %20
  br label %232

; <label>:139:                                    ; preds = %21
  %140 = load volatile %struct.ball**, %struct.ball*** %5
  %141 = load %struct.ball*, %struct.ball** %140, align 8
  %142 = getelementptr inbounds %struct.ball, %struct.ball* %141, i32 -1
  %143 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %142, %struct.ball** %143, align 8
  %144 = load volatile %struct.ball**, %struct.ball*** %6
  %145 = load %struct.ball*, %struct.ball** %144, align 8
  %146 = load volatile %struct.ball**, %struct.ball*** %5
  %147 = load %struct.ball*, %struct.ball** %146, align 8
  %148 = load volatile %struct.ball**, %struct.ball*** %5
  %149 = load %struct.ball*, %struct.ball** %148, align 8
  %150 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %4
  %151 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %150 to i8*
  %152 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %7
  %153 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %151, i8* %153, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball* %145, %struct.ball* %147, %struct.ball* %149)
  %154 = load i32, i32* @x.331
  %155 = load i32, i32* @y.332
  %156 = add i32 %154, -1205747859
  %157 = sub i32 %156, 1
  %158 = sub i32 %157, -1205747859
  %159 = sub i32 %154, 1
  %160 = mul i32 %154, %158
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %155, 10
  %164 = xor i1 %162, true
  %165 = xor i1 %163, true
  %166 = xor i1 true, true
  %167 = and i1 %164, true
  %168 = and i1 %162, %166
  %169 = and i1 %165, true
  %170 = and i1 %163, %166
  %171 = or i1 %167, %168
  %172 = or i1 %169, %170
  %173 = xor i1 %171, %172
  %174 = or i1 %164, %165
  %175 = xor i1 %174, true
  %176 = or i1 true, %166
  %177 = and i1 %175, %176
  %178 = or i1 %173, %177
  %179 = or i1 %162, %163
  %180 = select i1 %178, i32 -24728588, i32 -674236577
  store i32 %180, i32* %20
  br label %232

; <label>:181:                                    ; preds = %21
  store i32 1165414783, i32* %20
  br label %232

; <label>:182:                                    ; preds = %21
  ret void

; <label>:183:                                    ; preds = %21
  %184 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %185 = alloca %struct.ball*, align 8
  %186 = alloca %struct.ball*, align 8
  %187 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %185, align 8
  store %struct.ball* %1, %struct.ball** %186, align 8
  store i32 -72417330, i32* %20
  br label %232

; <label>:188:                                    ; preds = %21
  %189 = load volatile %struct.ball**, %struct.ball*** %5
  %190 = load %struct.ball*, %struct.ball** %189, align 8
  %191 = load volatile %struct.ball**, %struct.ball*** %6
  %192 = load %struct.ball*, %struct.ball** %191, align 8
  %193 = ptrtoint %struct.ball* %190 to i64
  %194 = ptrtoint %struct.ball* %192 to i64
  %195 = sub i64 0, %193
  %196 = add i64 0, %195
  %197 = sub i64 0, %193
  %198 = add i64 %196, 1296322543242505565
  %199 = add i64 %198, %194
  %200 = sub i64 %199, 1296322543242505565
  %201 = add i64 %196, %194
  %202 = add i64 %193, 5569567328800258191
  %203 = sub i64 %202, %194
  %204 = sub i64 %203, 5569567328800258191
  %205 = sub i64 %193, %194
  %206 = mul i64 %204, %194
  %207 = sub i64 %193, -2428516930901638740
  %208 = sub i64 %207, %194
  %209 = add i64 %208, -2428516930901638740
  %210 = sub i64 %193, %194
  %211 = sub i64 0, 16
  %212 = add i64 %209, %211
  %213 = sub i64 %209, 16
  %214 = mul i64 %212, 16
  %215 = sdiv exact i64 %209, 16
  %216 = icmp sgt i64 %215, 1
  store i32 -1811924624, i32* %20
  br label %232

; <label>:217:                                    ; preds = %21
  %218 = load volatile %struct.ball**, %struct.ball*** %5
  %219 = load %struct.ball*, %struct.ball** %218, align 8
  %220 = getelementptr inbounds %struct.ball, %struct.ball* %219, i32 -1
  %221 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %220, %struct.ball** %221, align 8
  %222 = load volatile %struct.ball**, %struct.ball*** %6
  %223 = load %struct.ball*, %struct.ball** %222, align 8
  %224 = load volatile %struct.ball**, %struct.ball*** %5
  %225 = load %struct.ball*, %struct.ball** %224, align 8
  %226 = load volatile %struct.ball**, %struct.ball*** %5
  %227 = load %struct.ball*, %struct.ball** %226, align 8
  %228 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %4
  %229 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %228 to i8*
  %230 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %7
  %231 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %229, i8* %231, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball* %223, %struct.ball* %225, %struct.ball* %227)
  store i32 1334756157, i32* %20
  br label %232

; <label>:232:                                    ; preds = %217, %188, %183, %181, %139, %112, %109, %82, %67, %66, %32, %24, %23
  br label %21
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__make_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %6 = alloca %struct.ball*
  %7 = alloca %struct.ball*
  %8 = alloca i64*
  %9 = alloca i64*
  %10 = alloca %struct.ball**
  %11 = alloca %struct.ball**
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %13 = alloca i1
  %14 = alloca i1
  %15 = load i32, i32* @x.333
  %16 = load i32, i32* @y.334
  %17 = sub i32 %15, -1696606689
  %18 = sub i32 %17, 1
  %19 = add i32 %18, -1696606689
  %20 = sub i32 %15, 1
  %21 = mul i32 %15, %19
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  store i1 %23, i1* %14
  %24 = icmp slt i32 %16, 10
  store i1 %24, i1* %13
  %25 = alloca i32
  store i32 1569638543, i32* %25
  br label %26

; <label>:26:                                     ; preds = %2, %353
  %27 = load i32, i32* %25
  switch i32 %27, label %28 [
    i32 1569638543, label %29
    i32 948007528, label %49
    i32 1829755723, label %86
    i32 1467569350, label %89
    i32 1104625822, label %90
    i32 -2102138480, label %111
    i32 -816798035, label %139
    i32 -692481663, label %200
    i32 -414445096, label %203
    i32 -353264687, label %204
    i32 805809417, label %220
    i32 -1579429259, label %255
    i32 -1813692937, label %256
    i32 1334052190, label %257
    i32 -522932071, label %288
    i32 1490364544, label %322
  ]

; <label>:28:                                     ; preds = %26
  br label %353

; <label>:29:                                     ; preds = %26
  %30 = load volatile i1, i1* %14
  %31 = load volatile i1, i1* %13
  %32 = xor i1 %30, true
  %33 = xor i1 %31, true
  %34 = xor i1 false, true
  %35 = and i1 %32, false
  %36 = and i1 %30, %34
  %37 = and i1 %33, false
  %38 = and i1 %31, %34
  %39 = or i1 %35, %36
  %40 = or i1 %37, %38
  %41 = xor i1 %39, %40
  %42 = or i1 %32, %33
  %43 = xor i1 %42, true
  %44 = or i1 false, %34
  %45 = and i1 %43, %44
  %46 = or i1 %41, %45
  %47 = or i1 %30, %31
  %48 = select i1 %46, i32 948007528, i32 1334052190
  store i32 %48, i32* %25
  br label %353

; <label>:49:                                     ; preds = %26
  %50 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %50, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %12
  %51 = alloca %struct.ball*, align 8
  store %struct.ball** %51, %struct.ball*** %11
  %52 = alloca %struct.ball*, align 8
  store %struct.ball** %52, %struct.ball*** %10
  %53 = alloca i64, align 8
  store i64* %53, i64** %9
  %54 = alloca i64, align 8
  store i64* %54, i64** %8
  %55 = alloca %struct.ball, align 8
  store %struct.ball* %55, %struct.ball** %7
  %56 = alloca %struct.ball, align 8
  store %struct.ball* %56, %struct.ball** %6
  %57 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %57, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %5
  %58 = load volatile %struct.ball**, %struct.ball*** %11
  store %struct.ball* %0, %struct.ball** %58, align 8
  %59 = load volatile %struct.ball**, %struct.ball*** %10
  store %struct.ball* %1, %struct.ball** %59, align 8
  %60 = load volatile %struct.ball**, %struct.ball*** %10
  %61 = load %struct.ball*, %struct.ball** %60, align 8
  %62 = load volatile %struct.ball**, %struct.ball*** %11
  %63 = load %struct.ball*, %struct.ball** %62, align 8
  %64 = ptrtoint %struct.ball* %61 to i64
  %65 = ptrtoint %struct.ball* %63 to i64
  %66 = sub i64 0, %65
  %67 = add i64 %64, %66
  %68 = sub i64 %64, %65
  %69 = sdiv exact i64 %67, 16
  %70 = icmp slt i64 %69, 2
  store i1 %70, i1* %4
  %71 = load i32, i32* @x.333
  %72 = load i32, i32* @y.334
  %73 = add i32 %71, -63132410
  %74 = sub i32 %73, 1
  %75 = sub i32 %74, -63132410
  %76 = sub i32 %71, 1
  %77 = mul i32 %71, %75
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %72, 10
  %81 = and i1 %79, %80
  %82 = xor i1 %79, %80
  %83 = or i1 %81, %82
  %84 = or i1 %79, %80
  %85 = select i1 %83, i32 1829755723, i32 1334052190
  store i32 %85, i32* %25
  br label %353

; <label>:86:                                     ; preds = %26
  %87 = load volatile i1, i1* %4
  %88 = select i1 %87, i32 1467569350, i32 1104625822
  store i32 %88, i32* %25
  br label %353

; <label>:89:                                     ; preds = %26
  store i32 -1813692937, i32* %25
  br label %353

; <label>:90:                                     ; preds = %26
  %91 = load volatile %struct.ball**, %struct.ball*** %10
  %92 = load %struct.ball*, %struct.ball** %91, align 8
  %93 = load volatile %struct.ball**, %struct.ball*** %11
  %94 = load %struct.ball*, %struct.ball** %93, align 8
  %95 = ptrtoint %struct.ball* %92 to i64
  %96 = ptrtoint %struct.ball* %94 to i64
  %97 = sub i64 %95, -997881505597768498
  %98 = sub i64 %97, %96
  %99 = add i64 %98, -997881505597768498
  %100 = sub i64 %95, %96
  %101 = sdiv exact i64 %99, 16
  %102 = load volatile i64*, i64** %9
  store i64 %101, i64* %102, align 8
  %103 = load volatile i64*, i64** %9
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %104, 255243026421047911
  %106 = sub i64 %105, 2
  %107 = sub i64 %106, 255243026421047911
  %108 = sub nsw i64 %104, 2
  %109 = sdiv i64 %107, 2
  %110 = load volatile i64*, i64** %8
  store i64 %109, i64* %110, align 8
  store i32 -2102138480, i32* %25
  br label %353

; <label>:111:                                    ; preds = %26
  %112 = load i32, i32* @x.333
  %113 = load i32, i32* @y.334
  %114 = sub i32 %112, -1389122761
  %115 = sub i32 %114, 1
  %116 = add i32 %115, -1389122761
  %117 = sub i32 %112, 1
  %118 = mul i32 %112, %116
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %113, 10
  %122 = xor i1 %120, true
  %123 = xor i1 %121, true
  %124 = xor i1 false, true
  %125 = and i1 %122, false
  %126 = and i1 %120, %124
  %127 = and i1 %123, false
  %128 = and i1 %121, %124
  %129 = or i1 %125, %126
  %130 = or i1 %127, %128
  %131 = xor i1 %129, %130
  %132 = or i1 %122, %123
  %133 = xor i1 %132, true
  %134 = or i1 false, %124
  %135 = and i1 %133, %134
  %136 = or i1 %131, %135
  %137 = or i1 %120, %121
  %138 = select i1 %136, i32 -816798035, i32 -522932071
  store i32 %138, i32* %25
  br label %353

; <label>:139:                                    ; preds = %26
  %140 = load volatile %struct.ball**, %struct.ball*** %11
  %141 = load %struct.ball*, %struct.ball** %140, align 8
  %142 = load volatile i64*, i64** %8
  %143 = load i64, i64* %142, align 8
  %144 = getelementptr inbounds %struct.ball, %struct.ball* %141, i64 %143
  %145 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %144) #3
  %146 = load volatile %struct.ball*, %struct.ball** %7
  %147 = bitcast %struct.ball* %146 to i8*
  %148 = bitcast %struct.ball* %145 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %147, i8* %148, i64 16, i32 8, i1 false)
  %149 = load volatile %struct.ball**, %struct.ball*** %11
  %150 = load %struct.ball*, %struct.ball** %149, align 8
  %151 = load volatile i64*, i64** %8
  %152 = load i64, i64* %151, align 8
  %153 = load volatile i64*, i64** %9
  %154 = load i64, i64* %153, align 8
  %155 = load volatile %struct.ball*, %struct.ball** %7
  %156 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %155) #3
  %157 = load volatile %struct.ball*, %struct.ball** %6
  %158 = bitcast %struct.ball* %157 to i8*
  %159 = bitcast %struct.ball* %156 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %158, i8* %159, i64 16, i32 8, i1 false)
  %160 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %5
  %161 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %160 to i8*
  %162 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %12
  %163 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %162 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %161, i8* %163, i64 1, i32 1, i1 false)
  %164 = load volatile %struct.ball*, %struct.ball** %6
  %165 = bitcast %struct.ball* %164 to { i64, i64 }*
  %166 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %165, i32 0, i32 0
  %167 = load i64, i64* %166, align 8
  %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %165, i32 0, i32 1
  %169 = load i64, i64* %168, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_T0_S8_T1_T2_"(%struct.ball* %150, i64 %152, i64 %154, i64 %167, i64 %169)
  %170 = load volatile i64*, i64** %8
  %171 = load i64, i64* %170, align 8
  %172 = icmp eq i64 %171, 0
  store i1 %172, i1* %3
  %173 = load i32, i32* @x.333
  %174 = load i32, i32* @y.334
  %175 = sub i32 %173, -1257357131
  %176 = sub i32 %175, 1
  %177 = add i32 %176, -1257357131
  %178 = sub i32 %173, 1
  %179 = mul i32 %173, %177
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %174, 10
  %183 = xor i1 %181, true
  %184 = xor i1 %182, true
  %185 = xor i1 true, true
  %186 = and i1 %183, true
  %187 = and i1 %181, %185
  %188 = and i1 %184, true
  %189 = and i1 %182, %185
  %190 = or i1 %186, %187
  %191 = or i1 %188, %189
  %192 = xor i1 %190, %191
  %193 = or i1 %183, %184
  %194 = xor i1 %193, true
  %195 = or i1 true, %185
  %196 = and i1 %194, %195
  %197 = or i1 %192, %196
  %198 = or i1 %181, %182
  %199 = select i1 %197, i32 -692481663, i32 -522932071
  store i32 %199, i32* %25
  br label %353

; <label>:200:                                    ; preds = %26
  %201 = load volatile i1, i1* %3
  %202 = select i1 %201, i32 -414445096, i32 -353264687
  store i32 %202, i32* %25
  br label %353

; <label>:203:                                    ; preds = %26
  store i32 -1813692937, i32* %25
  br label %353

; <label>:204:                                    ; preds = %26
  %205 = load i32, i32* @x.333
  %206 = load i32, i32* @y.334
  %207 = sub i32 %205, 1553059713
  %208 = sub i32 %207, 1
  %209 = add i32 %208, 1553059713
  %210 = sub i32 %205, 1
  %211 = mul i32 %205, %209
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %206, 10
  %215 = and i1 %213, %214
  %216 = xor i1 %213, %214
  %217 = or i1 %215, %216
  %218 = or i1 %213, %214
  %219 = select i1 %217, i32 805809417, i32 1490364544
  store i32 %219, i32* %25
  br label %353

; <label>:220:                                    ; preds = %26
  %221 = load volatile i64*, i64** %8
  %222 = load i64, i64* %221, align 8
  %223 = add i64 %222, -6425847248349964357
  %224 = add i64 %223, -1
  %225 = sub i64 %224, -6425847248349964357
  %226 = add nsw i64 %222, -1
  %227 = load volatile i64*, i64** %8
  store i64 %225, i64* %227, align 8
  %228 = load i32, i32* @x.333
  %229 = load i32, i32* @y.334
  %230 = add i32 %228, -693953493
  %231 = sub i32 %230, 1
  %232 = sub i32 %231, -693953493
  %233 = sub i32 %228, 1
  %234 = mul i32 %228, %232
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %229, 10
  %238 = xor i1 %236, true
  %239 = xor i1 %237, true
  %240 = xor i1 false, true
  %241 = and i1 %238, false
  %242 = and i1 %236, %240
  %243 = and i1 %239, false
  %244 = and i1 %237, %240
  %245 = or i1 %241, %242
  %246 = or i1 %243, %244
  %247 = xor i1 %245, %246
  %248 = or i1 %238, %239
  %249 = xor i1 %248, true
  %250 = or i1 false, %240
  %251 = and i1 %249, %250
  %252 = or i1 %247, %251
  %253 = or i1 %236, %237
  %254 = select i1 %252, i32 -1579429259, i32 1490364544
  store i32 %254, i32* %25
  br label %353

; <label>:255:                                    ; preds = %26
  store i32 -2102138480, i32* %25
  br label %353

; <label>:256:                                    ; preds = %26
  ret void

; <label>:257:                                    ; preds = %26
  %258 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %259 = alloca %struct.ball*, align 8
  %260 = alloca %struct.ball*, align 8
  %261 = alloca i64, align 8
  %262 = alloca i64, align 8
  %263 = alloca %struct.ball, align 8
  %264 = alloca %struct.ball, align 8
  %265 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %259, align 8
  store %struct.ball* %1, %struct.ball** %260, align 8
  %266 = load %struct.ball*, %struct.ball** %260, align 8
  %267 = load %struct.ball*, %struct.ball** %259, align 8
  %268 = ptrtoint %struct.ball* %266 to i64
  %269 = ptrtoint %struct.ball* %267 to i64
  %270 = sub i64 0, %269
  %271 = add i64 %268, %270
  %272 = sub i64 %268, %269
  %273 = sub i64 0, %271
  %274 = add i64 0, %273
  %275 = sub i64 0, %271
  %276 = sub i64 0, %274
  %277 = sub i64 0, 16
  %278 = add i64 %276, %277
  %279 = sub i64 0, %278
  %280 = add i64 %274, 16
  %281 = sub i64 0, 16
  %282 = add i64 %271, %281
  %283 = sub i64 %271, 16
  %284 = mul i64 %282, 16
  %285 = shl i64 %271, 16
  %286 = sdiv exact i64 %271, 16
  %287 = icmp slt i64 %286, 2
  store i32 948007528, i32* %25
  br label %353

; <label>:288:                                    ; preds = %26
  %289 = load volatile %struct.ball**, %struct.ball*** %11
  %290 = load %struct.ball*, %struct.ball** %289, align 8
  %291 = load volatile i64*, i64** %8
  %292 = load i64, i64* %291, align 8
  %293 = getelementptr inbounds %struct.ball, %struct.ball* %290, i64 %292
  %294 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %293) #3
  %295 = load volatile %struct.ball*, %struct.ball** %7
  %296 = bitcast %struct.ball* %295 to i8*
  %297 = bitcast %struct.ball* %294 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %296, i8* %297, i64 16, i32 8, i1 false)
  %298 = load volatile %struct.ball**, %struct.ball*** %11
  %299 = load %struct.ball*, %struct.ball** %298, align 8
  %300 = load volatile i64*, i64** %8
  %301 = load i64, i64* %300, align 8
  %302 = load volatile i64*, i64** %9
  %303 = load i64, i64* %302, align 8
  %304 = load volatile %struct.ball*, %struct.ball** %7
  %305 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %304) #3
  %306 = load volatile %struct.ball*, %struct.ball** %6
  %307 = bitcast %struct.ball* %306 to i8*
  %308 = bitcast %struct.ball* %305 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %307, i8* %308, i64 16, i32 8, i1 false)
  %309 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %5
  %310 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %309 to i8*
  %311 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %12
  %312 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %311 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %310, i8* %312, i64 1, i32 1, i1 false)
  %313 = load volatile %struct.ball*, %struct.ball** %6
  %314 = bitcast %struct.ball* %313 to { i64, i64 }*
  %315 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %314, i32 0, i32 0
  %316 = load i64, i64* %315, align 8
  %317 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %314, i32 0, i32 1
  %318 = load i64, i64* %317, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_T0_S8_T1_T2_"(%struct.ball* %299, i64 %301, i64 %303, i64 %316, i64 %318)
  %319 = load volatile i64*, i64** %8
  %320 = load i64, i64* %319, align 8
  %321 = icmp eq i64 %320, 0
  store i32 -816798035, i32* %25
  br label %353

; <label>:322:                                    ; preds = %26
  %323 = load volatile i64*, i64** %8
  %324 = load i64, i64* %323, align 8
  %325 = add i64 0, 753036474158969429
  %326 = sub i64 %325, %324
  %327 = sub i64 %326, 753036474158969429
  %328 = sub i64 0, %324
  %329 = sub i64 0, %327
  %330 = sub i64 0, -1
  %331 = add i64 %329, %330
  %332 = sub i64 0, %331
  %333 = add i64 %327, -1
  %334 = add i64 %324, 6535058881516074456
  %335 = sub i64 %334, -1
  %336 = sub i64 %335, 6535058881516074456
  %337 = sub i64 %324, -1
  %338 = mul i64 %336, -1
  %339 = shl i64 %324, -1
  %340 = sub i64 0, -6564550192800131528
  %341 = sub i64 %340, %324
  %342 = add i64 %341, -6564550192800131528
  %343 = sub i64 0, %324
  %344 = sub i64 0, %342
  %345 = sub i64 0, -1
  %346 = add i64 %344, %345
  %347 = sub i64 0, %346
  %348 = add i64 %342, -1
  %349 = sub i64 0, -1
  %350 = sub i64 %324, %349
  %351 = add nsw i64 %324, -1
  %352 = load volatile i64*, i64** %8
  store i64 %350, i64* %352, align 8
  store i32 805809417, i32* %25
  br label %353

; <label>:353:                                    ; preds = %322, %288, %257, %255, %220, %204, %203, %200, %139, %111, %90, %89, %86, %49, %29, %28
  br label %26
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %struct.ball*, %struct.ball*) #4 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %7, i32 0, i32 0
  %9 = load %struct.ball*, %struct.ball** %5, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  %11 = call zeroext i1 @"_ZZ4mainENK3$_1clERK4ballS2_"(%class.anon.0* %8, %struct.ball* dereferenceable(16) %9, %struct.ball* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %struct.ball, align 8
  %9 = alloca %struct.ball, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  store %struct.ball* %2, %struct.ball** %7, align 8
  %11 = load %struct.ball*, %struct.ball** %7, align 8
  %12 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %11) #3
  %13 = bitcast %struct.ball* %8 to i8*
  %14 = bitcast %struct.ball* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  %15 = load %struct.ball*, %struct.ball** %5, align 8
  %16 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %15) #3
  %17 = load %struct.ball*, %struct.ball** %7, align 8
  %18 = bitcast %struct.ball* %17 to i8*
  %19 = bitcast %struct.ball* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 16, i32 8, i1 false)
  %20 = load %struct.ball*, %struct.ball** %5, align 8
  %21 = load %struct.ball*, %struct.ball** %6, align 8
  %22 = load %struct.ball*, %struct.ball** %5, align 8
  %23 = ptrtoint %struct.ball* %21 to i64
  %24 = ptrtoint %struct.ball* %22 to i64
  %25 = sub i64 0, %24
  %26 = add i64 %23, %25
  %27 = sub i64 %23, %24
  %28 = sdiv exact i64 %26, 16
  %29 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %8) #3
  %30 = bitcast %struct.ball* %9 to i8*
  %31 = bitcast %struct.ball* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false)
  %32 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %10 to i8*
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 1, i32 1, i1 false)
  %34 = bitcast %struct.ball* %9 to { i64, i64 }*
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_T0_S8_T1_T2_"(%struct.ball* %20, i64 0, i64 %28, i64 %36, i64 %38)
  ret void
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_T0_S8_T1_T2_"(%struct.ball*, i64, i64, i64, i64) #0 {
  %6 = alloca i1
  %7 = alloca i1
  %8 = alloca %struct.ball, align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %10 = alloca %struct.ball*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca %struct.ball, align 8
  %16 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.9", align 1
  %17 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %18 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.9", align 1
  %19 = bitcast %struct.ball* %8 to { i64, i64 }*
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0
  store i64 %3, i64* %20, align 8
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 1
  store i64 %4, i64* %21, align 8
  store %struct.ball* %0, %struct.ball** %10, align 8
  store i64 %1, i64* %11, align 8
  store i64 %2, i64* %12, align 8
  %22 = load i64, i64* %11, align 8
  store i64 %22, i64* %13, align 8
  %23 = load i64, i64* %11, align 8
  store i64 %23, i64* %14, align 8
  %24 = alloca i32
  store i32 1384377618, i32* %24
  br label %25

; <label>:25:                                     ; preds = %5, %327
  %26 = load i32, i32* %24
  switch i32 %26, label %27 [
    i32 1384377618, label %28
    i32 1676617188, label %56
    i32 854595514, label %92
    i32 -970142900, label %95
    i32 1671948214, label %114
    i32 -634837201, label %119
    i32 226932421, label %130
    i32 396839572, label %138
    i32 1905119885, label %166
    i32 -25603294, label %189
    i32 797636848, label %192
    i32 2136101297, label %215
    i32 -984999073, label %229
    i32 2062365366, label %277
  ]

; <label>:27:                                     ; preds = %25
  br label %327

; <label>:28:                                     ; preds = %25
  %29 = load i32, i32* @x.339
  %30 = load i32, i32* @y.340
  %31 = add i32 %29, 1769648671
  %32 = sub i32 %31, 1
  %33 = sub i32 %32, 1769648671
  %34 = sub i32 %29, 1
  %35 = mul i32 %29, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %30, 10
  %39 = xor i1 %37, true
  %40 = xor i1 %38, true
  %41 = xor i1 false, true
  %42 = and i1 %39, false
  %43 = and i1 %37, %41
  %44 = and i1 %40, false
  %45 = and i1 %38, %41
  %46 = or i1 %42, %43
  %47 = or i1 %44, %45
  %48 = xor i1 %46, %47
  %49 = or i1 %39, %40
  %50 = xor i1 %49, true
  %51 = or i1 false, %41
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  %54 = or i1 %37, %38
  %55 = select i1 %53, i32 1676617188, i32 -984999073
  store i32 %55, i32* %24
  br label %327

; <label>:56:                                     ; preds = %25
  %57 = load i64, i64* %14, align 8
  %58 = load i64, i64* %12, align 8
  %59 = add i64 %58, 1800320412918854984
  %60 = sub i64 %59, 1
  %61 = sub i64 %60, 1800320412918854984
  %62 = sub nsw i64 %58, 1
  %63 = sdiv i64 %61, 2
  %64 = icmp slt i64 %57, %63
  store i1 %64, i1* %7
  %65 = load i32, i32* @x.339
  %66 = load i32, i32* @y.340
  %67 = add i32 %65, -573310564
  %68 = sub i32 %67, 1
  %69 = sub i32 %68, -573310564
  %70 = sub i32 %65, 1
  %71 = mul i32 %65, %69
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %66, 10
  %75 = xor i1 %73, true
  %76 = xor i1 %74, true
  %77 = xor i1 false, true
  %78 = and i1 %75, false
  %79 = and i1 %73, %77
  %80 = and i1 %76, false
  %81 = and i1 %74, %77
  %82 = or i1 %78, %79
  %83 = or i1 %80, %81
  %84 = xor i1 %82, %83
  %85 = or i1 %75, %76
  %86 = xor i1 %85, true
  %87 = or i1 false, %77
  %88 = and i1 %86, %87
  %89 = or i1 %84, %88
  %90 = or i1 %73, %74
  %91 = select i1 %89, i32 854595514, i32 -984999073
  store i32 %91, i32* %24
  br label %327

; <label>:92:                                     ; preds = %25
  %93 = load volatile i1, i1* %7
  %94 = select i1 %93, i32 -970142900, i32 226932421
  store i32 %94, i32* %24
  br label %327

; <label>:95:                                     ; preds = %25
  %96 = load i64, i64* %14, align 8
  %97 = add i64 %96, 6863151042343962016
  %98 = add i64 %97, 1
  %99 = sub i64 %98, 6863151042343962016
  %100 = add nsw i64 %96, 1
  %101 = mul nsw i64 2, %99
  store i64 %101, i64* %14, align 8
  %102 = load %struct.ball*, %struct.ball** %10, align 8
  %103 = load i64, i64* %14, align 8
  %104 = getelementptr inbounds %struct.ball, %struct.ball* %102, i64 %103
  %105 = load %struct.ball*, %struct.ball** %10, align 8
  %106 = load i64, i64* %14, align 8
  %107 = add i64 %106, -8057042036375742940
  %108 = sub i64 %107, 1
  %109 = sub i64 %108, -8057042036375742940
  %110 = sub nsw i64 %106, 1
  %111 = getelementptr inbounds %struct.ball, %struct.ball* %105, i64 %109
  %112 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9, %struct.ball* %104, %struct.ball* %111)
  %113 = select i1 %112, i32 1671948214, i32 -634837201
  store i32 %113, i32* %24
  br label %327

; <label>:114:                                    ; preds = %25
  %115 = load i64, i64* %14, align 8
  %116 = sub i64 0, -1
  %117 = sub i64 %115, %116
  %118 = add nsw i64 %115, -1
  store i64 %117, i64* %14, align 8
  store i32 -634837201, i32* %24
  br label %327

; <label>:119:                                    ; preds = %25
  %120 = load %struct.ball*, %struct.ball** %10, align 8
  %121 = load i64, i64* %14, align 8
  %122 = getelementptr inbounds %struct.ball, %struct.ball* %120, i64 %121
  %123 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %122) #3
  %124 = load %struct.ball*, %struct.ball** %10, align 8
  %125 = load i64, i64* %11, align 8
  %126 = getelementptr inbounds %struct.ball, %struct.ball* %124, i64 %125
  %127 = bitcast %struct.ball* %126 to i8*
  %128 = bitcast %struct.ball* %123 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %127, i8* %128, i64 16, i32 8, i1 false)
  %129 = load i64, i64* %14, align 8
  store i64 %129, i64* %11, align 8
  store i32 1384377618, i32* %24
  br label %327

; <label>:130:                                    ; preds = %25
  %131 = load i64, i64* %12, align 8
  %132 = xor i64 1, -1
  %133 = xor i64 %131, %132
  %134 = and i64 %133, %131
  %135 = and i64 %131, 1
  %136 = icmp eq i64 %134, 0
  %137 = select i1 %136, i32 396839572, i32 2136101297
  store i32 %137, i32* %24
  br label %327

; <label>:138:                                    ; preds = %25
  %139 = load i32, i32* @x.339
  %140 = load i32, i32* @y.340
  %141 = add i32 %139, 351195590
  %142 = sub i32 %141, 1
  %143 = sub i32 %142, 351195590
  %144 = sub i32 %139, 1
  %145 = mul i32 %139, %143
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %140, 10
  %149 = xor i1 %147, true
  %150 = xor i1 %148, true
  %151 = xor i1 false, true
  %152 = and i1 %149, false
  %153 = and i1 %147, %151
  %154 = and i1 %150, false
  %155 = and i1 %148, %151
  %156 = or i1 %152, %153
  %157 = or i1 %154, %155
  %158 = xor i1 %156, %157
  %159 = or i1 %149, %150
  %160 = xor i1 %159, true
  %161 = or i1 false, %151
  %162 = and i1 %160, %161
  %163 = or i1 %158, %162
  %164 = or i1 %147, %148
  %165 = select i1 %163, i32 1905119885, i32 2062365366
  store i32 %165, i32* %24
  br label %327

; <label>:166:                                    ; preds = %25
  %167 = load i64, i64* %14, align 8
  %168 = load i64, i64* %12, align 8
  %169 = sub i64 %168, 534011469824987432
  %170 = sub i64 %169, 2
  %171 = add i64 %170, 534011469824987432
  %172 = sub nsw i64 %168, 2
  %173 = sdiv i64 %171, 2
  %174 = icmp eq i64 %167, %173
  store i1 %174, i1* %6
  %175 = load i32, i32* @x.339
  %176 = load i32, i32* @y.340
  %177 = sub i32 0, 1
  %178 = add i32 %175, %177
  %179 = sub i32 %175, 1
  %180 = mul i32 %175, %178
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %176, 10
  %184 = and i1 %182, %183
  %185 = xor i1 %182, %183
  %186 = or i1 %184, %185
  %187 = or i1 %182, %183
  %188 = select i1 %186, i32 -25603294, i32 2062365366
  store i32 %188, i32* %24
  br label %327

; <label>:189:                                    ; preds = %25
  %190 = load volatile i1, i1* %6
  %191 = select i1 %190, i32 797636848, i32 2136101297
  store i32 %191, i32* %24
  br label %327

; <label>:192:                                    ; preds = %25
  %193 = load i64, i64* %14, align 8
  %194 = sub i64 0, 1
  %195 = sub i64 %193, %194
  %196 = add nsw i64 %193, 1
  %197 = mul nsw i64 2, %195
  store i64 %197, i64* %14, align 8
  %198 = load %struct.ball*, %struct.ball** %10, align 8
  %199 = load i64, i64* %14, align 8
  %200 = sub i64 0, 1
  %201 = add i64 %199, %200
  %202 = sub nsw i64 %199, 1
  %203 = getelementptr inbounds %struct.ball, %struct.ball* %198, i64 %201
  %204 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %203) #3
  %205 = load %struct.ball*, %struct.ball** %10, align 8
  %206 = load i64, i64* %11, align 8
  %207 = getelementptr inbounds %struct.ball, %struct.ball* %205, i64 %206
  %208 = bitcast %struct.ball* %207 to i8*
  %209 = bitcast %struct.ball* %204 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %208, i8* %209, i64 16, i32 8, i1 false)
  %210 = load i64, i64* %14, align 8
  %211 = add i64 %210, -8158427166920304636
  %212 = sub i64 %211, 1
  %213 = sub i64 %212, -8158427166920304636
  %214 = sub nsw i64 %210, 1
  store i64 %213, i64* %11, align 8
  store i32 2136101297, i32* %24
  br label %327

; <label>:215:                                    ; preds = %25
  %216 = load %struct.ball*, %struct.ball** %10, align 8
  %217 = load i64, i64* %11, align 8
  %218 = load i64, i64* %13, align 8
  %219 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %8) #3
  %220 = bitcast %struct.ball* %15 to i8*
  %221 = bitcast %struct.ball* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %220, i8* %221, i64 16, i32 8, i1 false)
  %222 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %17 to i8*
  %223 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %222, i8* %223, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__iter_comp_valIZ4mainE3$_1EENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS4_EE"()
  %224 = bitcast %struct.ball* %15 to { i64, i64 }*
  %225 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %224, i32 0, i32 0
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %224, i32 0, i32 1
  %228 = load i64, i64* %227, align 8
  call void @"_ZSt11__push_heapIP4balllS0_N9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_1EEEvT_T0_S8_T1_T2_"(%struct.ball* %216, i64 %217, i64 %218, i64 %226, i64 %228)
  ret void

; <label>:229:                                    ; preds = %25
  %230 = load i64, i64* %14, align 8
  %231 = load i64, i64* %12, align 8
  %232 = add i64 0, -7540816218989946858
  %233 = sub i64 %232, %231
  %234 = sub i64 %233, -7540816218989946858
  %235 = sub i64 0, %231
  %236 = add i64 %234, -249295853470857398
  %237 = add i64 %236, 1
  %238 = sub i64 %237, -249295853470857398
  %239 = add i64 %234, 1
  %240 = sub i64 %231, 94606072972659203
  %241 = sub i64 %240, 1
  %242 = add i64 %241, 94606072972659203
  %243 = sub nsw i64 %231, 1
  %244 = sub i64 0, 2
  %245 = add i64 %242, %244
  %246 = sub i64 %242, 2
  %247 = mul i64 %245, 2
  %248 = sub i64 %242, 4379669835624695044
  %249 = sub i64 %248, 2
  %250 = add i64 %249, 4379669835624695044
  %251 = sub i64 %242, 2
  %252 = mul i64 %250, 2
  %253 = add i64 0, -5496495794178525075
  %254 = sub i64 %253, %242
  %255 = sub i64 %254, -5496495794178525075
  %256 = sub i64 0, %242
  %257 = sub i64 0, %255
  %258 = sub i64 0, 2
  %259 = add i64 %257, %258
  %260 = sub i64 0, %259
  %261 = add i64 %255, 2
  %262 = shl i64 %242, 2
  %263 = shl i64 %242, 2
  %264 = sub i64 0, 2
  %265 = add i64 %242, %264
  %266 = sub i64 %242, 2
  %267 = mul i64 %265, 2
  %268 = sub i64 0, -8685269895380498214
  %269 = sub i64 %268, %242
  %270 = add i64 %269, -8685269895380498214
  %271 = sub i64 0, %242
  %272 = sub i64 0, 2
  %273 = sub i64 %270, %272
  %274 = add i64 %270, 2
  %275 = sdiv i64 %242, 2
  %276 = icmp slt i64 %230, %275
  store i32 1676617188, i32* %24
  br label %327

; <label>:277:                                    ; preds = %25
  %278 = load i64, i64* %14, align 8
  %279 = load i64, i64* %12, align 8
  %280 = add i64 %279, 2620973523671529857
  %281 = sub i64 %280, 2
  %282 = sub i64 %281, 2620973523671529857
  %283 = sub i64 %279, 2
  %284 = mul i64 %282, 2
  %285 = shl i64 %279, 2
  %286 = shl i64 %279, 2
  %287 = sub i64 %279, -3298722275301518515
  %288 = sub i64 %287, 2
  %289 = add i64 %288, -3298722275301518515
  %290 = sub i64 %279, 2
  %291 = mul i64 %289, 2
  %292 = add i64 0, -2724455267334014699
  %293 = sub i64 %292, %279
  %294 = sub i64 %293, -2724455267334014699
  %295 = sub i64 0, %279
  %296 = sub i64 0, 2
  %297 = sub i64 %294, %296
  %298 = add i64 %294, 2
  %299 = sub i64 0, 2
  %300 = add i64 %279, %299
  %301 = sub i64 %279, 2
  %302 = mul i64 %300, 2
  %303 = add i64 %279, 3982903359482188428
  %304 = sub i64 %303, 2
  %305 = sub i64 %304, 3982903359482188428
  %306 = sub nsw i64 %279, 2
  %307 = add i64 0, 4470947568958148824
  %308 = sub i64 %307, %305
  %309 = sub i64 %308, 4470947568958148824
  %310 = sub i64 0, %305
  %311 = add i64 %309, -5616113076776783820
  %312 = add i64 %311, 2
  %313 = sub i64 %312, -5616113076776783820
  %314 = add i64 %309, 2
  %315 = add i64 %305, -7287447295834207007
  %316 = sub i64 %315, 2
  %317 = sub i64 %316, -7287447295834207007
  %318 = sub i64 %305, 2
  %319 = mul i64 %317, 2
  %320 = sub i64 %305, -3911863970968828508
  %321 = sub i64 %320, 2
  %322 = add i64 %321, -3911863970968828508
  %323 = sub i64 %305, 2
  %324 = mul i64 %322, 2
  %325 = sdiv i64 %305, 2
  %326 = icmp eq i64 %278, %325
  store i32 1905119885, i32* %24
  br label %327

; <label>:327:                                    ; preds = %277, %229, %192, %189, %166, %138, %130, %119, %114, %95, %92, %56, %28, %27
  br label %25
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__push_heapIP4balllS0_N9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_1EEEvT_T0_S8_T1_T2_"(%struct.ball*, i64, i64, i64, i64) #0 {
  %6 = alloca i64*
  %7 = alloca i64*
  %8 = alloca i64*
  %9 = alloca %struct.ball**
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"*
  %11 = alloca %struct.ball*
  %12 = alloca i1
  %13 = alloca i1
  %14 = load i32, i32* @x.341
  %15 = load i32, i32* @y.342
  %16 = sub i32 0, 1
  %17 = add i32 %14, %16
  %18 = sub i32 %14, 1
  %19 = mul i32 %14, %17
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  store i1 %21, i1* %13
  %22 = icmp slt i32 %15, 10
  store i1 %22, i1* %12
  %23 = alloca i32
  store i32 -1576860703, i32* %23
  %24 = alloca i1
  br label %25

; <label>:25:                                     ; preds = %5, %310
  %26 = load i32, i32* %23
  switch i32 %26, label %27 [
    i32 -1576860703, label %28
    i32 -1190013010, label %36
    i32 -938192146, label %84
    i32 1281168252, label %85
    i32 930072941, label %92
    i32 1973800618, label %101
    i32 -1962771401, label %104
    i32 1445216764, label %131
    i32 -1273309588, label %170
    i32 1784894707, label %171
    i32 -1449303401, label %181
    i32 -1817681588, label %215
  ]

; <label>:27:                                     ; preds = %25
  br label %310

; <label>:28:                                     ; preds = %25
  %29 = load volatile i1, i1* %13
  %30 = load volatile i1, i1* %12
  %31 = and i1 %29, %30
  %32 = xor i1 %29, %30
  %33 = or i1 %31, %32
  %34 = or i1 %29, %30
  %35 = select i1 %33, i32 -1190013010, i32 -1449303401
  store i32 %35, i32* %23
  br label %310

; <label>:36:                                     ; preds = %25
  %37 = alloca %struct.ball, align 8
  store %struct.ball* %37, %struct.ball** %11
  %38 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.9", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"* %38, %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"** %10
  %39 = alloca %struct.ball*, align 8
  store %struct.ball** %39, %struct.ball*** %9
  %40 = alloca i64, align 8
  store i64* %40, i64** %8
  %41 = alloca i64, align 8
  store i64* %41, i64** %7
  %42 = alloca i64, align 8
  store i64* %42, i64** %6
  %43 = load volatile %struct.ball*, %struct.ball** %11
  %44 = bitcast %struct.ball* %43 to { i64, i64 }*
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 0
  store i64 %3, i64* %45, align 8
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 1
  store i64 %4, i64* %46, align 8
  %47 = load volatile %struct.ball**, %struct.ball*** %9
  store %struct.ball* %0, %struct.ball** %47, align 8
  %48 = load volatile i64*, i64** %8
  store i64 %1, i64* %48, align 8
  %49 = load volatile i64*, i64** %7
  store i64 %2, i64* %49, align 8
  %50 = load volatile i64*, i64** %8
  %51 = load i64, i64* %50, align 8
  %52 = sub i64 %51, -2136359492377399346
  %53 = sub i64 %52, 1
  %54 = add i64 %53, -2136359492377399346
  %55 = sub nsw i64 %51, 1
  %56 = sdiv i64 %54, 2
  %57 = load volatile i64*, i64** %6
  store i64 %56, i64* %57, align 8
  %58 = load i32, i32* @x.341
  %59 = load i32, i32* @y.342
  %60 = sub i32 0, 1
  %61 = add i32 %58, %60
  %62 = sub i32 %58, 1
  %63 = mul i32 %58, %61
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %59, 10
  %67 = xor i1 %65, true
  %68 = xor i1 %66, true
  %69 = xor i1 true, true
  %70 = and i1 %67, true
  %71 = and i1 %65, %69
  %72 = and i1 %68, true
  %73 = and i1 %66, %69
  %74 = or i1 %70, %71
  %75 = or i1 %72, %73
  %76 = xor i1 %74, %75
  %77 = or i1 %67, %68
  %78 = xor i1 %77, true
  %79 = or i1 true, %69
  %80 = and i1 %78, %79
  %81 = or i1 %76, %80
  %82 = or i1 %65, %66
  %83 = select i1 %81, i32 -938192146, i32 -1449303401
  store i32 %83, i32* %23
  br label %310

; <label>:84:                                     ; preds = %25
  store i32 1281168252, i32* %23
  br label %310

; <label>:85:                                     ; preds = %25
  %86 = load volatile i64*, i64** %8
  %87 = load i64, i64* %86, align 8
  %88 = load volatile i64*, i64** %7
  %89 = load i64, i64* %88, align 8
  %90 = icmp sgt i64 %87, %89
  %91 = select i1 %90, i32 930072941, i32 1973800618
  store i32 %91, i32* %23
  store i1 false, i1* %24
  br label %310

; <label>:92:                                     ; preds = %25
  %93 = load volatile %struct.ball**, %struct.ball*** %9
  %94 = load %struct.ball*, %struct.ball** %93, align 8
  %95 = load volatile i64*, i64** %6
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %struct.ball, %struct.ball* %94, i64 %96
  %98 = load volatile %struct.ball*, %struct.ball** %11
  %99 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"** %10
  %100 = call zeroext i1 @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_1EclIP4ballS5_EEbT_RT0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.9"* %99, %struct.ball* %97, %struct.ball* dereferenceable(16) %98)
  store i32 1973800618, i32* %23
  store i1 %100, i1* %24
  br label %310

; <label>:101:                                    ; preds = %25
  %102 = load i1, i1* %24
  %103 = select i1 %102, i32 -1962771401, i32 1784894707
  store i32 %103, i32* %23
  br label %310

; <label>:104:                                    ; preds = %25
  %105 = load i32, i32* @x.341
  %106 = load i32, i32* @y.342
  %107 = sub i32 0, 1
  %108 = add i32 %105, %107
  %109 = sub i32 %105, 1
  %110 = mul i32 %105, %108
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %106, 10
  %114 = xor i1 %112, true
  %115 = xor i1 %113, true
  %116 = xor i1 true, true
  %117 = and i1 %114, true
  %118 = and i1 %112, %116
  %119 = and i1 %115, true
  %120 = and i1 %113, %116
  %121 = or i1 %117, %118
  %122 = or i1 %119, %120
  %123 = xor i1 %121, %122
  %124 = or i1 %114, %115
  %125 = xor i1 %124, true
  %126 = or i1 true, %116
  %127 = and i1 %125, %126
  %128 = or i1 %123, %127
  %129 = or i1 %112, %113
  %130 = select i1 %128, i32 1445216764, i32 -1817681588
  store i32 %130, i32* %23
  br label %310

; <label>:131:                                    ; preds = %25
  %132 = load volatile %struct.ball**, %struct.ball*** %9
  %133 = load %struct.ball*, %struct.ball** %132, align 8
  %134 = load volatile i64*, i64** %6
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %struct.ball, %struct.ball* %133, i64 %135
  %137 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %136) #3
  %138 = load volatile %struct.ball**, %struct.ball*** %9
  %139 = load %struct.ball*, %struct.ball** %138, align 8
  %140 = load volatile i64*, i64** %8
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds %struct.ball, %struct.ball* %139, i64 %141
  %143 = bitcast %struct.ball* %142 to i8*
  %144 = bitcast %struct.ball* %137 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %143, i8* %144, i64 16, i32 8, i1 false)
  %145 = load volatile i64*, i64** %6
  %146 = load i64, i64* %145, align 8
  %147 = load volatile i64*, i64** %8
  store i64 %146, i64* %147, align 8
  %148 = load volatile i64*, i64** %8
  %149 = load i64, i64* %148, align 8
  %150 = sub i64 0, 1
  %151 = add i64 %149, %150
  %152 = sub nsw i64 %149, 1
  %153 = sdiv i64 %151, 2
  %154 = load volatile i64*, i64** %6
  store i64 %153, i64* %154, align 8
  %155 = load i32, i32* @x.341
  %156 = load i32, i32* @y.342
  %157 = sub i32 %155, -1750025055
  %158 = sub i32 %157, 1
  %159 = add i32 %158, -1750025055
  %160 = sub i32 %155, 1
  %161 = mul i32 %155, %159
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %156, 10
  %165 = and i1 %163, %164
  %166 = xor i1 %163, %164
  %167 = or i1 %165, %166
  %168 = or i1 %163, %164
  %169 = select i1 %167, i32 -1273309588, i32 -1817681588
  store i32 %169, i32* %23
  br label %310

; <label>:170:                                    ; preds = %25
  store i32 1281168252, i32* %23
  br label %310

; <label>:171:                                    ; preds = %25
  %172 = load volatile %struct.ball*, %struct.ball** %11
  %173 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %172) #3
  %174 = load volatile %struct.ball**, %struct.ball*** %9
  %175 = load %struct.ball*, %struct.ball** %174, align 8
  %176 = load volatile i64*, i64** %8
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %struct.ball, %struct.ball* %175, i64 %177
  %179 = bitcast %struct.ball* %178 to i8*
  %180 = bitcast %struct.ball* %173 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %179, i8* %180, i64 16, i32 8, i1 false)
  ret void

; <label>:181:                                    ; preds = %25
  %182 = alloca %struct.ball, align 8
  %183 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.9", align 1
  %184 = alloca %struct.ball*, align 8
  %185 = alloca i64, align 8
  %186 = alloca i64, align 8
  %187 = alloca i64, align 8
  %188 = bitcast %struct.ball* %182 to { i64, i64 }*
  %189 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %188, i32 0, i32 0
  store i64 %3, i64* %189, align 8
  %190 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %188, i32 0, i32 1
  store i64 %4, i64* %190, align 8
  store %struct.ball* %0, %struct.ball** %184, align 8
  store i64 %1, i64* %185, align 8
  store i64 %2, i64* %186, align 8
  %191 = load i64, i64* %185, align 8
  %192 = shl i64 %191, 1
  %193 = add i64 0, -3754941283314052453
  %194 = sub i64 %193, %191
  %195 = sub i64 %194, -3754941283314052453
  %196 = sub i64 0, %191
  %197 = add i64 %195, 6119519583433315550
  %198 = add i64 %197, 1
  %199 = sub i64 %198, 6119519583433315550
  %200 = add i64 %195, 1
  %201 = sub i64 %191, -6951300574739013593
  %202 = sub i64 %201, 1
  %203 = add i64 %202, -6951300574739013593
  %204 = sub nsw i64 %191, 1
  %205 = sub i64 0, %203
  %206 = add i64 0, %205
  %207 = sub i64 0, %203
  %208 = sub i64 0, 2
  %209 = sub i64 %206, %208
  %210 = add i64 %206, 2
  %211 = shl i64 %203, 2
  %212 = shl i64 %203, 2
  %213 = shl i64 %203, 2
  %214 = sdiv i64 %203, 2
  store i64 %214, i64* %187, align 8
  store i32 -1190013010, i32* %23
  br label %310

; <label>:215:                                    ; preds = %25
  %216 = load volatile %struct.ball**, %struct.ball*** %9
  %217 = load %struct.ball*, %struct.ball** %216, align 8
  %218 = load volatile i64*, i64** %6
  %219 = load i64, i64* %218, align 8
  %220 = getelementptr inbounds %struct.ball, %struct.ball* %217, i64 %219
  %221 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %220) #3
  %222 = load volatile %struct.ball**, %struct.ball*** %9
  %223 = load %struct.ball*, %struct.ball** %222, align 8
  %224 = load volatile i64*, i64** %8
  %225 = load i64, i64* %224, align 8
  %226 = getelementptr inbounds %struct.ball, %struct.ball* %223, i64 %225
  %227 = bitcast %struct.ball* %226 to i8*
  %228 = bitcast %struct.ball* %221 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %227, i8* %228, i64 16, i32 8, i1 false)
  %229 = load volatile i64*, i64** %6
  %230 = load i64, i64* %229, align 8
  %231 = load volatile i64*, i64** %8
  store i64 %230, i64* %231, align 8
  %232 = load volatile i64*, i64** %8
  %233 = load i64, i64* %232, align 8
  %234 = sub i64 0, 4120907162734199259
  %235 = sub i64 %234, %233
  %236 = add i64 %235, 4120907162734199259
  %237 = sub i64 0, %233
  %238 = sub i64 0, 1
  %239 = sub i64 %236, %238
  %240 = add i64 %236, 1
  %241 = sub i64 0, -8391052428687504253
  %242 = sub i64 %241, %233
  %243 = add i64 %242, -8391052428687504253
  %244 = sub i64 0, %233
  %245 = sub i64 0, %243
  %246 = sub i64 0, 1
  %247 = add i64 %245, %246
  %248 = sub i64 0, %247
  %249 = add i64 %243, 1
  %250 = shl i64 %233, 1
  %251 = add i64 0, 4971036658639651047
  %252 = sub i64 %251, %233
  %253 = sub i64 %252, 4971036658639651047
  %254 = sub i64 0, %233
  %255 = add i64 %253, -8614328105333132561
  %256 = add i64 %255, 1
  %257 = sub i64 %256, -8614328105333132561
  %258 = add i64 %253, 1
  %259 = sub i64 0, 1
  %260 = add i64 %233, %259
  %261 = sub nsw i64 %233, 1
  %262 = sub i64 %260, 146485285450268075
  %263 = sub i64 %262, 2
  %264 = add i64 %263, 146485285450268075
  %265 = sub i64 %260, 2
  %266 = mul i64 %264, 2
  %267 = sub i64 0, %260
  %268 = add i64 0, %267
  %269 = sub i64 0, %260
  %270 = sub i64 %268, -123103421753458324
  %271 = add i64 %270, 2
  %272 = add i64 %271, -123103421753458324
  %273 = add i64 %268, 2
  %274 = sub i64 0, -937797924659542032
  %275 = sub i64 %274, %260
  %276 = add i64 %275, -937797924659542032
  %277 = sub i64 0, %260
  %278 = sub i64 0, 2
  %279 = sub i64 %276, %278
  %280 = add i64 %276, 2
  %281 = add i64 0, 2211084578964840269
  %282 = sub i64 %281, %260
  %283 = sub i64 %282, 2211084578964840269
  %284 = sub i64 0, %260
  %285 = sub i64 0, 2
  %286 = sub i64 %283, %285
  %287 = add i64 %283, 2
  %288 = sub i64 0, %260
  %289 = add i64 0, %288
  %290 = sub i64 0, %260
  %291 = sub i64 0, %289
  %292 = sub i64 0, 2
  %293 = add i64 %291, %292
  %294 = sub i64 0, %293
  %295 = add i64 %289, 2
  %296 = sub i64 0, %260
  %297 = add i64 0, %296
  %298 = sub i64 0, %260
  %299 = add i64 %297, 7240127283599237357
  %300 = add i64 %299, 2
  %301 = sub i64 %300, 7240127283599237357
  %302 = add i64 %297, 2
  %303 = add i64 %260, -9006320984308194777
  %304 = sub i64 %303, 2
  %305 = sub i64 %304, -9006320984308194777
  %306 = sub i64 %260, 2
  %307 = mul i64 %305, 2
  %308 = sdiv i64 %260, 2
  %309 = load volatile i64*, i64** %6
  store i64 %308, i64* %309, align 8
  store i32 1445216764, i32* %23
  br label %310

; <label>:310:                                    ; preds = %215, %181, %170, %131, %104, %101, %92, %85, %84, %36, %28, %27
  br label %25
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops15__iter_comp_valIZ4mainE3$_1EENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS4_EE"() #0 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.9", align 1
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %3 = alloca %class.anon.0, align 1
  %4 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %2, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_1EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.9"* %1)
  ret void
}

; Function Attrs: noinline uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_1EclIP4ballS5_EEbT_RT0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.9"*, %struct.ball*, %struct.ball* dereferenceable(16)) #0 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val.9", %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"* %7, i32 0, i32 0
  %9 = load %struct.ball*, %struct.ball** %5, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  %11 = call zeroext i1 @"_ZZ4mainENK3$_1clERK4ballS2_"(%class.anon.0* %8, %struct.ball* dereferenceable(16) %9, %struct.ball* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZZ4mainENK3$_1clERK4ballS2_"(%class.anon.0*, %struct.ball* dereferenceable(16), %struct.ball* dereferenceable(16)) #4 align 2 {
  %4 = alloca %class.anon.0*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %class.anon.0* %0, %class.anon.0** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %class.anon.0*, %class.anon.0** %4, align 8
  %8 = load %struct.ball*, %struct.ball** %5, align 8
  %9 = getelementptr inbounds %struct.ball, %struct.ball* %8, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = load %struct.ball*, %struct.ball** %6, align 8
  %12 = getelementptr inbounds %struct.ball, %struct.ball* %11, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp slt i64 %10, %13
  ret i1 %14
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_1EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.9"*) unnamed_addr #4 align 2 {
  %2 = alloca %class.anon.0, align 1
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"** %3, align 8
  %4 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"** %3, align 8
  %5 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val.9", %"struct.__gnu_cxx::__ops::_Iter_comp_val.9"* %4, i32 0, i32 0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZSt22__move_median_to_firstIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*, %struct.ball*) #4 {
  %5 = alloca i1
  %6 = alloca i1
  %7 = alloca %struct.ball*
  %8 = alloca %struct.ball*
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %10 = alloca %struct.ball*, align 8
  %11 = alloca %struct.ball*, align 8
  %12 = alloca %struct.ball*, align 8
  %13 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %10, align 8
  store %struct.ball* %1, %struct.ball** %11, align 8
  store %struct.ball* %2, %struct.ball** %12, align 8
  store %struct.ball* %3, %struct.ball** %13, align 8
  %14 = load %struct.ball*, %struct.ball** %11, align 8
  store %struct.ball* %14, %struct.ball** %8
  %15 = load %struct.ball*, %struct.ball** %12, align 8
  store %struct.ball* %15, %struct.ball** %7
  %16 = alloca i32
  store i32 1378949606, i32* %16
  br label %17

; <label>:17:                                     ; preds = %4, %354
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 1378949606, label %20
    i32 -739314731, label %25
    i32 753299948, label %41
    i32 1366485443, label %72
    i32 -758610534, label %75
    i32 -688294684, label %78
    i32 -855179511, label %83
    i32 -541496334, label %86
    i32 -1399340288, label %89
    i32 937991845, label %105
    i32 458625435, label %133
    i32 167049930, label %134
    i32 841891050, label %161
    i32 317337523, label %176
    i32 -581984814, label %177
    i32 -1291029620, label %192
    i32 -391683017, label %223
    i32 761998100, label %226
    i32 -978715230, label %229
    i32 1238620945, label %234
    i32 -798844353, label %237
    i32 -1524419970, label %240
    i32 -233504357, label %268
    i32 -2024760810, label %283
    i32 -103569469, label %284
    i32 1736829627, label %285
    i32 1449518341, label %313
    i32 -335473578, label %341
    i32 -2141182957, label %342
    i32 801510208, label %346
    i32 1923429408, label %347
    i32 -687841290, label %348
    i32 -1219028283, label %352
    i32 1148467041, label %353
  ]

; <label>:19:                                     ; preds = %17
  br label %354

; <label>:20:                                     ; preds = %17
  %21 = load volatile %struct.ball*, %struct.ball** %8
  %22 = load volatile %struct.ball*, %struct.ball** %7
  %23 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9, %struct.ball* %21, %struct.ball* %22)
  %24 = select i1 %23, i32 -739314731, i32 -581984814
  store i32 %24, i32* %16
  br label %354

; <label>:25:                                     ; preds = %17
  %26 = load i32, i32* @x.351
  %27 = load i32, i32* @y.352
  %28 = add i32 %26, 901403399
  %29 = sub i32 %28, 1
  %30 = sub i32 %29, 901403399
  %31 = sub i32 %26, 1
  %32 = mul i32 %26, %30
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %27, 10
  %36 = and i1 %34, %35
  %37 = xor i1 %34, %35
  %38 = or i1 %36, %37
  %39 = or i1 %34, %35
  %40 = select i1 %38, i32 753299948, i32 -2141182957
  store i32 %40, i32* %16
  br label %354

; <label>:41:                                     ; preds = %17
  %42 = load %struct.ball*, %struct.ball** %12, align 8
  %43 = load %struct.ball*, %struct.ball** %13, align 8
  %44 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9, %struct.ball* %42, %struct.ball* %43)
  store i1 %44, i1* %6
  %45 = load i32, i32* @x.351
  %46 = load i32, i32* @y.352
  %47 = sub i32 %45, 1402934290
  %48 = sub i32 %47, 1
  %49 = add i32 %48, 1402934290
  %50 = sub i32 %45, 1
  %51 = mul i32 %45, %49
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %46, 10
  %55 = xor i1 %53, true
  %56 = xor i1 %54, true
  %57 = xor i1 true, true
  %58 = and i1 %55, true
  %59 = and i1 %53, %57
  %60 = and i1 %56, true
  %61 = and i1 %54, %57
  %62 = or i1 %58, %59
  %63 = or i1 %60, %61
  %64 = xor i1 %62, %63
  %65 = or i1 %55, %56
  %66 = xor i1 %65, true
  %67 = or i1 true, %57
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  %70 = or i1 %53, %54
  %71 = select i1 %69, i32 1366485443, i32 -2141182957
  store i32 %71, i32* %16
  br label %354

; <label>:72:                                     ; preds = %17
  %73 = load volatile i1, i1* %6
  %74 = select i1 %73, i32 -758610534, i32 -688294684
  store i32 %74, i32* %16
  br label %354

; <label>:75:                                     ; preds = %17
  %76 = load %struct.ball*, %struct.ball** %10, align 8
  %77 = load %struct.ball*, %struct.ball** %12, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %76, %struct.ball* %77)
  store i32 167049930, i32* %16
  br label %354

; <label>:78:                                     ; preds = %17
  %79 = load %struct.ball*, %struct.ball** %11, align 8
  %80 = load %struct.ball*, %struct.ball** %13, align 8
  %81 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9, %struct.ball* %79, %struct.ball* %80)
  %82 = select i1 %81, i32 -855179511, i32 -541496334
  store i32 %82, i32* %16
  br label %354

; <label>:83:                                     ; preds = %17
  %84 = load %struct.ball*, %struct.ball** %10, align 8
  %85 = load %struct.ball*, %struct.ball** %13, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %84, %struct.ball* %85)
  store i32 -1399340288, i32* %16
  br label %354

; <label>:86:                                     ; preds = %17
  %87 = load %struct.ball*, %struct.ball** %10, align 8
  %88 = load %struct.ball*, %struct.ball** %11, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %87, %struct.ball* %88)
  store i32 -1399340288, i32* %16
  br label %354

; <label>:89:                                     ; preds = %17
  %90 = load i32, i32* @x.351
  %91 = load i32, i32* @y.352
  %92 = add i32 %90, 931390619
  %93 = sub i32 %92, 1
  %94 = sub i32 %93, 931390619
  %95 = sub i32 %90, 1
  %96 = mul i32 %90, %94
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %91, 10
  %100 = and i1 %98, %99
  %101 = xor i1 %98, %99
  %102 = or i1 %100, %101
  %103 = or i1 %98, %99
  %104 = select i1 %102, i32 937991845, i32 801510208
  store i32 %104, i32* %16
  br label %354

; <label>:105:                                    ; preds = %17
  %106 = load i32, i32* @x.351
  %107 = load i32, i32* @y.352
  %108 = sub i32 %106, -394709716
  %109 = sub i32 %108, 1
  %110 = add i32 %109, -394709716
  %111 = sub i32 %106, 1
  %112 = mul i32 %106, %110
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %107, 10
  %116 = xor i1 %114, true
  %117 = xor i1 %115, true
  %118 = xor i1 false, true
  %119 = and i1 %116, false
  %120 = and i1 %114, %118
  %121 = and i1 %117, false
  %122 = and i1 %115, %118
  %123 = or i1 %119, %120
  %124 = or i1 %121, %122
  %125 = xor i1 %123, %124
  %126 = or i1 %116, %117
  %127 = xor i1 %126, true
  %128 = or i1 false, %118
  %129 = and i1 %127, %128
  %130 = or i1 %125, %129
  %131 = or i1 %114, %115
  %132 = select i1 %130, i32 458625435, i32 801510208
  store i32 %132, i32* %16
  br label %354

; <label>:133:                                    ; preds = %17
  store i32 167049930, i32* %16
  br label %354

; <label>:134:                                    ; preds = %17
  %135 = load i32, i32* @x.351
  %136 = load i32, i32* @y.352
  %137 = sub i32 0, 1
  %138 = add i32 %135, %137
  %139 = sub i32 %135, 1
  %140 = mul i32 %135, %138
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %136, 10
  %144 = xor i1 %142, true
  %145 = xor i1 %143, true
  %146 = xor i1 true, true
  %147 = and i1 %144, true
  %148 = and i1 %142, %146
  %149 = and i1 %145, true
  %150 = and i1 %143, %146
  %151 = or i1 %147, %148
  %152 = or i1 %149, %150
  %153 = xor i1 %151, %152
  %154 = or i1 %144, %145
  %155 = xor i1 %154, true
  %156 = or i1 true, %146
  %157 = and i1 %155, %156
  %158 = or i1 %153, %157
  %159 = or i1 %142, %143
  %160 = select i1 %158, i32 841891050, i32 1923429408
  store i32 %160, i32* %16
  br label %354

; <label>:161:                                    ; preds = %17
  %162 = load i32, i32* @x.351
  %163 = load i32, i32* @y.352
  %164 = sub i32 0, 1
  %165 = add i32 %162, %164
  %166 = sub i32 %162, 1
  %167 = mul i32 %162, %165
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %163, 10
  %171 = and i1 %169, %170
  %172 = xor i1 %169, %170
  %173 = or i1 %171, %172
  %174 = or i1 %169, %170
  %175 = select i1 %173, i32 317337523, i32 1923429408
  store i32 %175, i32* %16
  br label %354

; <label>:176:                                    ; preds = %17
  store i32 1736829627, i32* %16
  br label %354

; <label>:177:                                    ; preds = %17
  %178 = load i32, i32* @x.351
  %179 = load i32, i32* @y.352
  %180 = sub i32 0, 1
  %181 = add i32 %178, %180
  %182 = sub i32 %178, 1
  %183 = mul i32 %178, %181
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %179, 10
  %187 = and i1 %185, %186
  %188 = xor i1 %185, %186
  %189 = or i1 %187, %188
  %190 = or i1 %185, %186
  %191 = select i1 %189, i32 -1291029620, i32 -687841290
  store i32 %191, i32* %16
  br label %354

; <label>:192:                                    ; preds = %17
  %193 = load %struct.ball*, %struct.ball** %11, align 8
  %194 = load %struct.ball*, %struct.ball** %13, align 8
  %195 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9, %struct.ball* %193, %struct.ball* %194)
  store i1 %195, i1* %5
  %196 = load i32, i32* @x.351
  %197 = load i32, i32* @y.352
  %198 = add i32 %196, -480210522
  %199 = sub i32 %198, 1
  %200 = sub i32 %199, -480210522
  %201 = sub i32 %196, 1
  %202 = mul i32 %196, %200
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %197, 10
  %206 = xor i1 %204, true
  %207 = xor i1 %205, true
  %208 = xor i1 false, true
  %209 = and i1 %206, false
  %210 = and i1 %204, %208
  %211 = and i1 %207, false
  %212 = and i1 %205, %208
  %213 = or i1 %209, %210
  %214 = or i1 %211, %212
  %215 = xor i1 %213, %214
  %216 = or i1 %206, %207
  %217 = xor i1 %216, true
  %218 = or i1 false, %208
  %219 = and i1 %217, %218
  %220 = or i1 %215, %219
  %221 = or i1 %204, %205
  %222 = select i1 %220, i32 -391683017, i32 -687841290
  store i32 %222, i32* %16
  br label %354

; <label>:223:                                    ; preds = %17
  %224 = load volatile i1, i1* %5
  %225 = select i1 %224, i32 761998100, i32 -978715230
  store i32 %225, i32* %16
  br label %354

; <label>:226:                                    ; preds = %17
  %227 = load %struct.ball*, %struct.ball** %10, align 8
  %228 = load %struct.ball*, %struct.ball** %11, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %227, %struct.ball* %228)
  store i32 -103569469, i32* %16
  br label %354

; <label>:229:                                    ; preds = %17
  %230 = load %struct.ball*, %struct.ball** %12, align 8
  %231 = load %struct.ball*, %struct.ball** %13, align 8
  %232 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9, %struct.ball* %230, %struct.ball* %231)
  %233 = select i1 %232, i32 1238620945, i32 -798844353
  store i32 %233, i32* %16
  br label %354

; <label>:234:                                    ; preds = %17
  %235 = load %struct.ball*, %struct.ball** %10, align 8
  %236 = load %struct.ball*, %struct.ball** %13, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %235, %struct.ball* %236)
  store i32 -1524419970, i32* %16
  br label %354

; <label>:237:                                    ; preds = %17
  %238 = load %struct.ball*, %struct.ball** %10, align 8
  %239 = load %struct.ball*, %struct.ball** %12, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %238, %struct.ball* %239)
  store i32 -1524419970, i32* %16
  br label %354

; <label>:240:                                    ; preds = %17
  %241 = load i32, i32* @x.351
  %242 = load i32, i32* @y.352
  %243 = sub i32 %241, -1821274034
  %244 = sub i32 %243, 1
  %245 = add i32 %244, -1821274034
  %246 = sub i32 %241, 1
  %247 = mul i32 %241, %245
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %242, 10
  %251 = xor i1 %249, true
  %252 = xor i1 %250, true
  %253 = xor i1 true, true
  %254 = and i1 %251, true
  %255 = and i1 %249, %253
  %256 = and i1 %252, true
  %257 = and i1 %250, %253
  %258 = or i1 %254, %255
  %259 = or i1 %256, %257
  %260 = xor i1 %258, %259
  %261 = or i1 %251, %252
  %262 = xor i1 %261, true
  %263 = or i1 true, %253
  %264 = and i1 %262, %263
  %265 = or i1 %260, %264
  %266 = or i1 %249, %250
  %267 = select i1 %265, i32 -233504357, i32 -1219028283
  store i32 %267, i32* %16
  br label %354

; <label>:268:                                    ; preds = %17
  %269 = load i32, i32* @x.351
  %270 = load i32, i32* @y.352
  %271 = sub i32 0, 1
  %272 = add i32 %269, %271
  %273 = sub i32 %269, 1
  %274 = mul i32 %269, %272
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %270, 10
  %278 = and i1 %276, %277
  %279 = xor i1 %276, %277
  %280 = or i1 %278, %279
  %281 = or i1 %276, %277
  %282 = select i1 %280, i32 -2024760810, i32 -1219028283
  store i32 %282, i32* %16
  br label %354

; <label>:283:                                    ; preds = %17
  store i32 -103569469, i32* %16
  br label %354

; <label>:284:                                    ; preds = %17
  store i32 1736829627, i32* %16
  br label %354

; <label>:285:                                    ; preds = %17
  %286 = load i32, i32* @x.351
  %287 = load i32, i32* @y.352
  %288 = sub i32 %286, -1965324026
  %289 = sub i32 %288, 1
  %290 = add i32 %289, -1965324026
  %291 = sub i32 %286, 1
  %292 = mul i32 %286, %290
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %287, 10
  %296 = xor i1 %294, true
  %297 = xor i1 %295, true
  %298 = xor i1 false, true
  %299 = and i1 %296, false
  %300 = and i1 %294, %298
  %301 = and i1 %297, false
  %302 = and i1 %295, %298
  %303 = or i1 %299, %300
  %304 = or i1 %301, %302
  %305 = xor i1 %303, %304
  %306 = or i1 %296, %297
  %307 = xor i1 %306, true
  %308 = or i1 false, %298
  %309 = and i1 %307, %308
  %310 = or i1 %305, %309
  %311 = or i1 %294, %295
  %312 = select i1 %310, i32 1449518341, i32 1148467041
  store i32 %312, i32* %16
  br label %354

; <label>:313:                                    ; preds = %17
  %314 = load i32, i32* @x.351
  %315 = load i32, i32* @y.352
  %316 = add i32 %314, 119528188
  %317 = sub i32 %316, 1
  %318 = sub i32 %317, 119528188
  %319 = sub i32 %314, 1
  %320 = mul i32 %314, %318
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %315, 10
  %324 = xor i1 %322, true
  %325 = xor i1 %323, true
  %326 = xor i1 false, true
  %327 = and i1 %324, false
  %328 = and i1 %322, %326
  %329 = and i1 %325, false
  %330 = and i1 %323, %326
  %331 = or i1 %327, %328
  %332 = or i1 %329, %330
  %333 = xor i1 %331, %332
  %334 = or i1 %324, %325
  %335 = xor i1 %334, true
  %336 = or i1 false, %326
  %337 = and i1 %335, %336
  %338 = or i1 %333, %337
  %339 = or i1 %322, %323
  %340 = select i1 %338, i32 -335473578, i32 1148467041
  store i32 %340, i32* %16
  br label %354

; <label>:341:                                    ; preds = %17
  ret void

; <label>:342:                                    ; preds = %17
  %343 = load %struct.ball*, %struct.ball** %12, align 8
  %344 = load %struct.ball*, %struct.ball** %13, align 8
  %345 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9, %struct.ball* %343, %struct.ball* %344)
  store i32 753299948, i32* %16
  br label %354

; <label>:346:                                    ; preds = %17
  store i32 937991845, i32* %16
  br label %354

; <label>:347:                                    ; preds = %17
  store i32 841891050, i32* %16
  br label %354

; <label>:348:                                    ; preds = %17
  %349 = load %struct.ball*, %struct.ball** %11, align 8
  %350 = load %struct.ball*, %struct.ball** %13, align 8
  %351 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9, %struct.ball* %349, %struct.ball* %350)
  store i32 -1291029620, i32* %16
  br label %354

; <label>:352:                                    ; preds = %17
  store i32 -233504357, i32* %16
  br label %354

; <label>:353:                                    ; preds = %17
  store i32 1449518341, i32* %16
  br label %354

; <label>:354:                                    ; preds = %353, %352, %348, %347, %346, %342, %313, %285, %284, %283, %268, %240, %237, %234, %229, %226, %223, %192, %177, %176, %161, %134, %133, %105, %89, %86, %83, %78, %75, %72, %41, %25, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ball* @"_ZSt21__unguarded_partitionIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEET_S7_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #4 {
  %4 = alloca %struct.ball**
  %5 = alloca %struct.ball**
  %6 = alloca %struct.ball**
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %8 = alloca i1
  %9 = alloca i1
  %10 = load i32, i32* @x.353
  %11 = load i32, i32* @y.354
  %12 = sub i32 %10, -84998921
  %13 = sub i32 %12, 1
  %14 = add i32 %13, -84998921
  %15 = sub i32 %10, 1
  %16 = mul i32 %10, %14
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  store i1 %18, i1* %9
  %19 = icmp slt i32 %11, 10
  store i1 %19, i1* %8
  %20 = alloca i32
  store i32 -381957023, i32* %20
  br label %21

; <label>:21:                                     ; preds = %3, %221
  %22 = load i32, i32* %20
  switch i32 %22, label %23 [
    i32 -381957023, label %24
    i32 -1950517402, label %32
    i32 -1541918974, label %67
    i32 -2097751810, label %68
    i32 -1513612406, label %69
    i32 -171004924, label %77
    i32 -1636599647, label %93
    i32 868771601, label %113
    i32 -398015315, label %114
    i32 2091713046, label %119
    i32 1437737640, label %127
    i32 1933160877, label %154
    i32 -864881427, label %186
    i32 1961321028, label %187
    i32 1852216842, label %194
    i32 -1395275563, label %197
    i32 345742130, label %206
    i32 -1484541995, label %211
    i32 -1847273049, label %216
  ]

; <label>:23:                                     ; preds = %21
  br label %221

; <label>:24:                                     ; preds = %21
  %25 = load volatile i1, i1* %9
  %26 = load volatile i1, i1* %8
  %27 = and i1 %25, %26
  %28 = xor i1 %25, %26
  %29 = or i1 %27, %28
  %30 = or i1 %25, %26
  %31 = select i1 %29, i32 -1950517402, i32 345742130
  store i32 %31, i32* %20
  br label %221

; <label>:32:                                     ; preds = %21
  %33 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %33, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %7
  %34 = alloca %struct.ball*, align 8
  store %struct.ball** %34, %struct.ball*** %6
  %35 = alloca %struct.ball*, align 8
  store %struct.ball** %35, %struct.ball*** %5
  %36 = alloca %struct.ball*, align 8
  store %struct.ball** %36, %struct.ball*** %4
  %37 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %0, %struct.ball** %37, align 8
  %38 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %1, %struct.ball** %38, align 8
  %39 = load volatile %struct.ball**, %struct.ball*** %4
  store %struct.ball* %2, %struct.ball** %39, align 8
  %40 = load i32, i32* @x.353
  %41 = load i32, i32* @y.354
  %42 = sub i32 %40, 7263250
  %43 = sub i32 %42, 1
  %44 = add i32 %43, 7263250
  %45 = sub i32 %40, 1
  %46 = mul i32 %40, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %41, 10
  %50 = xor i1 %48, true
  %51 = xor i1 %49, true
  %52 = xor i1 false, true
  %53 = and i1 %50, false
  %54 = and i1 %48, %52
  %55 = and i1 %51, false
  %56 = and i1 %49, %52
  %57 = or i1 %53, %54
  %58 = or i1 %55, %56
  %59 = xor i1 %57, %58
  %60 = or i1 %50, %51
  %61 = xor i1 %60, true
  %62 = or i1 false, %52
  %63 = and i1 %61, %62
  %64 = or i1 %59, %63
  %65 = or i1 %48, %49
  %66 = select i1 %64, i32 -1541918974, i32 345742130
  store i32 %66, i32* %20
  br label %221

; <label>:67:                                     ; preds = %21
  store i32 -2097751810, i32* %20
  br label %221

; <label>:68:                                     ; preds = %21
  store i32 -1513612406, i32* %20
  br label %221

; <label>:69:                                     ; preds = %21
  %70 = load volatile %struct.ball**, %struct.ball*** %6
  %71 = load %struct.ball*, %struct.ball** %70, align 8
  %72 = load volatile %struct.ball**, %struct.ball*** %4
  %73 = load %struct.ball*, %struct.ball** %72, align 8
  %74 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %7
  %75 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %74, %struct.ball* %71, %struct.ball* %73)
  %76 = select i1 %75, i32 -171004924, i32 -398015315
  store i32 %76, i32* %20
  br label %221

; <label>:77:                                     ; preds = %21
  %78 = load i32, i32* @x.353
  %79 = load i32, i32* @y.354
  %80 = sub i32 %78, 486514447
  %81 = sub i32 %80, 1
  %82 = add i32 %81, 486514447
  %83 = sub i32 %78, 1
  %84 = mul i32 %78, %82
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %79, 10
  %88 = and i1 %86, %87
  %89 = xor i1 %86, %87
  %90 = or i1 %88, %89
  %91 = or i1 %86, %87
  %92 = select i1 %90, i32 -1636599647, i32 -1484541995
  store i32 %92, i32* %20
  br label %221

; <label>:93:                                     ; preds = %21
  %94 = load volatile %struct.ball**, %struct.ball*** %6
  %95 = load %struct.ball*, %struct.ball** %94, align 8
  %96 = getelementptr inbounds %struct.ball, %struct.ball* %95, i32 1
  %97 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %96, %struct.ball** %97, align 8
  %98 = load i32, i32* @x.353
  %99 = load i32, i32* @y.354
  %100 = add i32 %98, 926736954
  %101 = sub i32 %100, 1
  %102 = sub i32 %101, 926736954
  %103 = sub i32 %98, 1
  %104 = mul i32 %98, %102
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %99, 10
  %108 = and i1 %106, %107
  %109 = xor i1 %106, %107
  %110 = or i1 %108, %109
  %111 = or i1 %106, %107
  %112 = select i1 %110, i32 868771601, i32 -1484541995
  store i32 %112, i32* %20
  br label %221

; <label>:113:                                    ; preds = %21
  store i32 -1513612406, i32* %20
  br label %221

; <label>:114:                                    ; preds = %21
  %115 = load volatile %struct.ball**, %struct.ball*** %5
  %116 = load %struct.ball*, %struct.ball** %115, align 8
  %117 = getelementptr inbounds %struct.ball, %struct.ball* %116, i32 -1
  %118 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %117, %struct.ball** %118, align 8
  store i32 2091713046, i32* %20
  br label %221

; <label>:119:                                    ; preds = %21
  %120 = load volatile %struct.ball**, %struct.ball*** %4
  %121 = load %struct.ball*, %struct.ball** %120, align 8
  %122 = load volatile %struct.ball**, %struct.ball*** %5
  %123 = load %struct.ball*, %struct.ball** %122, align 8
  %124 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %7
  %125 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %124, %struct.ball* %121, %struct.ball* %123)
  %126 = select i1 %125, i32 1437737640, i32 1961321028
  store i32 %126, i32* %20
  br label %221

; <label>:127:                                    ; preds = %21
  %128 = load i32, i32* @x.353
  %129 = load i32, i32* @y.354
  %130 = sub i32 0, 1
  %131 = add i32 %128, %130
  %132 = sub i32 %128, 1
  %133 = mul i32 %128, %131
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %129, 10
  %137 = xor i1 %135, true
  %138 = xor i1 %136, true
  %139 = xor i1 false, true
  %140 = and i1 %137, false
  %141 = and i1 %135, %139
  %142 = and i1 %138, false
  %143 = and i1 %136, %139
  %144 = or i1 %140, %141
  %145 = or i1 %142, %143
  %146 = xor i1 %144, %145
  %147 = or i1 %137, %138
  %148 = xor i1 %147, true
  %149 = or i1 false, %139
  %150 = and i1 %148, %149
  %151 = or i1 %146, %150
  %152 = or i1 %135, %136
  %153 = select i1 %151, i32 1933160877, i32 -1847273049
  store i32 %153, i32* %20
  br label %221

; <label>:154:                                    ; preds = %21
  %155 = load volatile %struct.ball**, %struct.ball*** %5
  %156 = load %struct.ball*, %struct.ball** %155, align 8
  %157 = getelementptr inbounds %struct.ball, %struct.ball* %156, i32 -1
  %158 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %157, %struct.ball** %158, align 8
  %159 = load i32, i32* @x.353
  %160 = load i32, i32* @y.354
  %161 = add i32 %159, 381505688
  %162 = sub i32 %161, 1
  %163 = sub i32 %162, 381505688
  %164 = sub i32 %159, 1
  %165 = mul i32 %159, %163
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %160, 10
  %169 = xor i1 %167, true
  %170 = xor i1 %168, true
  %171 = xor i1 false, true
  %172 = and i1 %169, false
  %173 = and i1 %167, %171
  %174 = and i1 %170, false
  %175 = and i1 %168, %171
  %176 = or i1 %172, %173
  %177 = or i1 %174, %175
  %178 = xor i1 %176, %177
  %179 = or i1 %169, %170
  %180 = xor i1 %179, true
  %181 = or i1 false, %171
  %182 = and i1 %180, %181
  %183 = or i1 %178, %182
  %184 = or i1 %167, %168
  %185 = select i1 %183, i32 -864881427, i32 -1847273049
  store i32 %185, i32* %20
  br label %221

; <label>:186:                                    ; preds = %21
  store i32 2091713046, i32* %20
  br label %221

; <label>:187:                                    ; preds = %21
  %188 = load volatile %struct.ball**, %struct.ball*** %6
  %189 = load %struct.ball*, %struct.ball** %188, align 8
  %190 = load volatile %struct.ball**, %struct.ball*** %5
  %191 = load %struct.ball*, %struct.ball** %190, align 8
  %192 = icmp ult %struct.ball* %189, %191
  %193 = select i1 %192, i32 -1395275563, i32 1852216842
  store i32 %193, i32* %20
  br label %221

; <label>:194:                                    ; preds = %21
  %195 = load volatile %struct.ball**, %struct.ball*** %6
  %196 = load %struct.ball*, %struct.ball** %195, align 8
  ret %struct.ball* %196

; <label>:197:                                    ; preds = %21
  %198 = load volatile %struct.ball**, %struct.ball*** %6
  %199 = load %struct.ball*, %struct.ball** %198, align 8
  %200 = load volatile %struct.ball**, %struct.ball*** %5
  %201 = load %struct.ball*, %struct.ball** %200, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %199, %struct.ball* %201)
  %202 = load volatile %struct.ball**, %struct.ball*** %6
  %203 = load %struct.ball*, %struct.ball** %202, align 8
  %204 = getelementptr inbounds %struct.ball, %struct.ball* %203, i32 1
  %205 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %204, %struct.ball** %205, align 8
  store i32 -2097751810, i32* %20
  br label %221

; <label>:206:                                    ; preds = %21
  %207 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %208 = alloca %struct.ball*, align 8
  %209 = alloca %struct.ball*, align 8
  %210 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %208, align 8
  store %struct.ball* %1, %struct.ball** %209, align 8
  store %struct.ball* %2, %struct.ball** %210, align 8
  store i32 -1950517402, i32* %20
  br label %221

; <label>:211:                                    ; preds = %21
  %212 = load volatile %struct.ball**, %struct.ball*** %6
  %213 = load %struct.ball*, %struct.ball** %212, align 8
  %214 = getelementptr inbounds %struct.ball, %struct.ball* %213, i32 1
  %215 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %214, %struct.ball** %215, align 8
  store i32 -1636599647, i32* %20
  br label %221

; <label>:216:                                    ; preds = %21
  %217 = load volatile %struct.ball**, %struct.ball*** %5
  %218 = load %struct.ball*, %struct.ball** %217, align 8
  %219 = getelementptr inbounds %struct.ball, %struct.ball* %218, i32 -1
  %220 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %219, %struct.ball** %220, align 8
  store i32 1933160877, i32* %20
  br label %221

; <label>:221:                                    ; preds = %216, %211, %206, %197, %187, %186, %154, %127, %119, %114, %113, %93, %77, %69, %68, %67, %32, %24, %23
  br label %21
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %6 = alloca %struct.ball*
  %7 = alloca %struct.ball**
  %8 = alloca %struct.ball**
  %9 = alloca %struct.ball**
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*
  %11 = alloca i1
  %12 = alloca i1
  %13 = load i32, i32* @x.355
  %14 = load i32, i32* @y.356
  %15 = add i32 %13, 518074094
  %16 = sub i32 %15, 1
  %17 = sub i32 %16, 518074094
  %18 = sub i32 %13, 1
  %19 = mul i32 %13, %17
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  store i1 %21, i1* %12
  %22 = icmp slt i32 %14, 10
  store i1 %22, i1* %11
  %23 = alloca i32
  store i32 1085933137, i32* %23
  br label %24

; <label>:24:                                     ; preds = %2, %368
  %25 = load i32, i32* %23
  switch i32 %25, label %26 [
    i32 1085933137, label %27
    i32 1392933360, label %47
    i32 -1469889960, label %89
    i32 1831900343, label %92
    i32 964217459, label %107
    i32 2114712582, label %134
    i32 -26251486, label %135
    i32 971900044, label %163
    i32 808478596, label %183
    i32 -1210976115, label %184
    i32 -1770104050, label %191
    i32 681420731, label %207
    i32 552722419, label %241
    i32 -1097463723, label %244
    i32 158212790, label %260
    i32 661211495, label %307
    i32 -1045528410, label %308
    i32 -335289527, label %315
    i32 1562290657, label %316
    i32 -2036506972, label %321
    i32 -67175129, label %322
    i32 1053423942, label %334
    i32 997895315, label %335
    i32 1664678395, label %340
    i32 1745610360, label %347
  ]

; <label>:26:                                     ; preds = %24
  br label %368

; <label>:27:                                     ; preds = %24
  %28 = load volatile i1, i1* %12
  %29 = load volatile i1, i1* %11
  %30 = xor i1 %28, true
  %31 = xor i1 %29, true
  %32 = xor i1 false, true
  %33 = and i1 %30, false
  %34 = and i1 %28, %32
  %35 = and i1 %31, false
  %36 = and i1 %29, %32
  %37 = or i1 %33, %34
  %38 = or i1 %35, %36
  %39 = xor i1 %37, %38
  %40 = or i1 %30, %31
  %41 = xor i1 %40, true
  %42 = or i1 false, %32
  %43 = and i1 %41, %42
  %44 = or i1 %39, %43
  %45 = or i1 %28, %29
  %46 = select i1 %44, i32 1392933360, i32 -67175129
  store i32 %46, i32* %23
  br label %368

; <label>:47:                                     ; preds = %24
  %48 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %48, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %10
  %49 = alloca %struct.ball*, align 8
  store %struct.ball** %49, %struct.ball*** %9
  %50 = alloca %struct.ball*, align 8
  store %struct.ball** %50, %struct.ball*** %8
  %51 = alloca %struct.ball*, align 8
  store %struct.ball** %51, %struct.ball*** %7
  %52 = alloca %struct.ball, align 8
  store %struct.ball* %52, %struct.ball** %6
  %53 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  %54 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %54, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %5
  %55 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  %56 = load volatile %struct.ball**, %struct.ball*** %9
  store %struct.ball* %0, %struct.ball** %56, align 8
  %57 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %1, %struct.ball** %57, align 8
  %58 = load volatile %struct.ball**, %struct.ball*** %9
  %59 = load %struct.ball*, %struct.ball** %58, align 8
  %60 = load volatile %struct.ball**, %struct.ball*** %8
  %61 = load %struct.ball*, %struct.ball** %60, align 8
  %62 = icmp eq %struct.ball* %59, %61
  store i1 %62, i1* %4
  %63 = load i32, i32* @x.355
  %64 = load i32, i32* @y.356
  %65 = sub i32 0, 1
  %66 = add i32 %63, %65
  %67 = sub i32 %63, 1
  %68 = mul i32 %63, %66
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %64, 10
  %72 = xor i1 %70, true
  %73 = xor i1 %71, true
  %74 = xor i1 true, true
  %75 = and i1 %72, true
  %76 = and i1 %70, %74
  %77 = and i1 %73, true
  %78 = and i1 %71, %74
  %79 = or i1 %75, %76
  %80 = or i1 %77, %78
  %81 = xor i1 %79, %80
  %82 = or i1 %72, %73
  %83 = xor i1 %82, true
  %84 = or i1 true, %74
  %85 = and i1 %83, %84
  %86 = or i1 %81, %85
  %87 = or i1 %70, %71
  %88 = select i1 %86, i32 -1469889960, i32 -67175129
  store i32 %88, i32* %23
  br label %368

; <label>:89:                                     ; preds = %24
  %90 = load volatile i1, i1* %4
  %91 = select i1 %90, i32 1831900343, i32 -26251486
  store i32 %91, i32* %23
  br label %368

; <label>:92:                                     ; preds = %24
  %93 = load i32, i32* @x.355
  %94 = load i32, i32* @y.356
  %95 = sub i32 0, 1
  %96 = add i32 %93, %95
  %97 = sub i32 %93, 1
  %98 = mul i32 %93, %96
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %94, 10
  %102 = and i1 %100, %101
  %103 = xor i1 %100, %101
  %104 = or i1 %102, %103
  %105 = or i1 %100, %101
  %106 = select i1 %104, i32 964217459, i32 1053423942
  store i32 %106, i32* %23
  br label %368

; <label>:107:                                    ; preds = %24
  %108 = load i32, i32* @x.355
  %109 = load i32, i32* @y.356
  %110 = sub i32 0, 1
  %111 = add i32 %108, %110
  %112 = sub i32 %108, 1
  %113 = mul i32 %108, %111
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %109, 10
  %117 = xor i1 %115, true
  %118 = xor i1 %116, true
  %119 = xor i1 true, true
  %120 = and i1 %117, true
  %121 = and i1 %115, %119
  %122 = and i1 %118, true
  %123 = and i1 %116, %119
  %124 = or i1 %120, %121
  %125 = or i1 %122, %123
  %126 = xor i1 %124, %125
  %127 = or i1 %117, %118
  %128 = xor i1 %127, true
  %129 = or i1 true, %119
  %130 = and i1 %128, %129
  %131 = or i1 %126, %130
  %132 = or i1 %115, %116
  %133 = select i1 %131, i32 2114712582, i32 1053423942
  store i32 %133, i32* %23
  br label %368

; <label>:134:                                    ; preds = %24
  store i32 -2036506972, i32* %23
  br label %368

; <label>:135:                                    ; preds = %24
  %136 = load i32, i32* @x.355
  %137 = load i32, i32* @y.356
  %138 = sub i32 %136, -28305893
  %139 = sub i32 %138, 1
  %140 = add i32 %139, -28305893
  %141 = sub i32 %136, 1
  %142 = mul i32 %136, %140
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %137, 10
  %146 = xor i1 %144, true
  %147 = xor i1 %145, true
  %148 = xor i1 false, true
  %149 = and i1 %146, false
  %150 = and i1 %144, %148
  %151 = and i1 %147, false
  %152 = and i1 %145, %148
  %153 = or i1 %149, %150
  %154 = or i1 %151, %152
  %155 = xor i1 %153, %154
  %156 = or i1 %146, %147
  %157 = xor i1 %156, true
  %158 = or i1 false, %148
  %159 = and i1 %157, %158
  %160 = or i1 %155, %159
  %161 = or i1 %144, %145
  %162 = select i1 %160, i32 971900044, i32 997895315
  store i32 %162, i32* %23
  br label %368

; <label>:163:                                    ; preds = %24
  %164 = load volatile %struct.ball**, %struct.ball*** %9
  %165 = load %struct.ball*, %struct.ball** %164, align 8
  %166 = getelementptr inbounds %struct.ball, %struct.ball* %165, i64 1
  %167 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %166, %struct.ball** %167, align 8
  %168 = load i32, i32* @x.355
  %169 = load i32, i32* @y.356
  %170 = sub i32 %168, 1816199016
  %171 = sub i32 %170, 1
  %172 = add i32 %171, 1816199016
  %173 = sub i32 %168, 1
  %174 = mul i32 %168, %172
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %169, 10
  %178 = and i1 %176, %177
  %179 = xor i1 %176, %177
  %180 = or i1 %178, %179
  %181 = or i1 %176, %177
  %182 = select i1 %180, i32 808478596, i32 997895315
  store i32 %182, i32* %23
  br label %368

; <label>:183:                                    ; preds = %24
  store i32 -1210976115, i32* %23
  br label %368

; <label>:184:                                    ; preds = %24
  %185 = load volatile %struct.ball**, %struct.ball*** %7
  %186 = load %struct.ball*, %struct.ball** %185, align 8
  %187 = load volatile %struct.ball**, %struct.ball*** %8
  %188 = load %struct.ball*, %struct.ball** %187, align 8
  %189 = icmp ne %struct.ball* %186, %188
  %190 = select i1 %189, i32 -1770104050, i32 -2036506972
  store i32 %190, i32* %23
  br label %368

; <label>:191:                                    ; preds = %24
  %192 = load i32, i32* @x.355
  %193 = load i32, i32* @y.356
  %194 = add i32 %192, 455705401
  %195 = sub i32 %194, 1
  %196 = sub i32 %195, 455705401
  %197 = sub i32 %192, 1
  %198 = mul i32 %192, %196
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %193, 10
  %202 = and i1 %200, %201
  %203 = xor i1 %200, %201
  %204 = or i1 %202, %203
  %205 = or i1 %200, %201
  %206 = select i1 %204, i32 681420731, i32 1664678395
  store i32 %206, i32* %23
  br label %368

; <label>:207:                                    ; preds = %24
  %208 = load volatile %struct.ball**, %struct.ball*** %7
  %209 = load %struct.ball*, %struct.ball** %208, align 8
  %210 = load volatile %struct.ball**, %struct.ball*** %9
  %211 = load %struct.ball*, %struct.ball** %210, align 8
  %212 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %10
  %213 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %212, %struct.ball* %209, %struct.ball* %211)
  store i1 %213, i1* %3
  %214 = load i32, i32* @x.355
  %215 = load i32, i32* @y.356
  %216 = sub i32 %214, 2116120476
  %217 = sub i32 %216, 1
  %218 = add i32 %217, 2116120476
  %219 = sub i32 %214, 1
  %220 = mul i32 %214, %218
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %215, 10
  %224 = xor i1 %222, true
  %225 = xor i1 %223, true
  %226 = xor i1 false, true
  %227 = and i1 %224, false
  %228 = and i1 %222, %226
  %229 = and i1 %225, false
  %230 = and i1 %223, %226
  %231 = or i1 %227, %228
  %232 = or i1 %229, %230
  %233 = xor i1 %231, %232
  %234 = or i1 %224, %225
  %235 = xor i1 %234, true
  %236 = or i1 false, %226
  %237 = and i1 %235, %236
  %238 = or i1 %233, %237
  %239 = or i1 %222, %223
  %240 = select i1 %238, i32 552722419, i32 1664678395
  store i32 %240, i32* %23
  br label %368

; <label>:241:                                    ; preds = %24
  %242 = load volatile i1, i1* %3
  %243 = select i1 %242, i32 -1097463723, i32 -1045528410
  store i32 %243, i32* %23
  br label %368

; <label>:244:                                    ; preds = %24
  %245 = load i32, i32* @x.355
  %246 = load i32, i32* @y.356
  %247 = add i32 %245, -117253205
  %248 = sub i32 %247, 1
  %249 = sub i32 %248, -117253205
  %250 = sub i32 %245, 1
  %251 = mul i32 %245, %249
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %246, 10
  %255 = and i1 %253, %254
  %256 = xor i1 %253, %254
  %257 = or i1 %255, %256
  %258 = or i1 %253, %254
  %259 = select i1 %257, i32 158212790, i32 1745610360
  store i32 %259, i32* %23
  br label %368

; <label>:260:                                    ; preds = %24
  %261 = load volatile %struct.ball**, %struct.ball*** %7
  %262 = load %struct.ball*, %struct.ball** %261, align 8
  %263 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %262) #3
  %264 = load volatile %struct.ball*, %struct.ball** %6
  %265 = bitcast %struct.ball* %264 to i8*
  %266 = bitcast %struct.ball* %263 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %265, i8* %266, i64 16, i32 8, i1 false)
  %267 = load volatile %struct.ball**, %struct.ball*** %9
  %268 = load %struct.ball*, %struct.ball** %267, align 8
  %269 = load volatile %struct.ball**, %struct.ball*** %7
  %270 = load %struct.ball*, %struct.ball** %269, align 8
  %271 = load volatile %struct.ball**, %struct.ball*** %7
  %272 = load %struct.ball*, %struct.ball** %271, align 8
  %273 = getelementptr inbounds %struct.ball, %struct.ball* %272, i64 1
  %274 = call %struct.ball* @_ZSt13move_backwardIP4ballS1_ET0_T_S3_S2_(%struct.ball* %268, %struct.ball* %270, %struct.ball* %273)
  %275 = load volatile %struct.ball*, %struct.ball** %6
  %276 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %275) #3
  %277 = load volatile %struct.ball**, %struct.ball*** %9
  %278 = load %struct.ball*, %struct.ball** %277, align 8
  %279 = bitcast %struct.ball* %278 to i8*
  %280 = bitcast %struct.ball* %276 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %279, i8* %280, i64 16, i32 8, i1 false)
  %281 = load i32, i32* @x.355
  %282 = load i32, i32* @y.356
  %283 = sub i32 0, 1
  %284 = add i32 %281, %283
  %285 = sub i32 %281, 1
  %286 = mul i32 %281, %284
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %282, 10
  %290 = xor i1 %288, true
  %291 = xor i1 %289, true
  %292 = xor i1 true, true
  %293 = and i1 %290, true
  %294 = and i1 %288, %292
  %295 = and i1 %291, true
  %296 = and i1 %289, %292
  %297 = or i1 %293, %294
  %298 = or i1 %295, %296
  %299 = xor i1 %297, %298
  %300 = or i1 %290, %291
  %301 = xor i1 %300, true
  %302 = or i1 true, %292
  %303 = and i1 %301, %302
  %304 = or i1 %299, %303
  %305 = or i1 %288, %289
  %306 = select i1 %304, i32 661211495, i32 1745610360
  store i32 %306, i32* %23
  br label %368

; <label>:307:                                    ; preds = %24
  store i32 -335289527, i32* %23
  br label %368

; <label>:308:                                    ; preds = %24
  %309 = load volatile %struct.ball**, %struct.ball*** %7
  %310 = load %struct.ball*, %struct.ball** %309, align 8
  %311 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %5
  %312 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %311 to i8*
  %313 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %10
  %314 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %313 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %312, i8* %314, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_1EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"()
  call void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EEEvT_T0_"(%struct.ball* %310)
  store i32 -335289527, i32* %23
  br label %368

; <label>:315:                                    ; preds = %24
  store i32 1562290657, i32* %23
  br label %368

; <label>:316:                                    ; preds = %24
  %317 = load volatile %struct.ball**, %struct.ball*** %7
  %318 = load %struct.ball*, %struct.ball** %317, align 8
  %319 = getelementptr inbounds %struct.ball, %struct.ball* %318, i32 1
  %320 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %319, %struct.ball** %320, align 8
  store i32 -1210976115, i32* %23
  br label %368

; <label>:321:                                    ; preds = %24
  ret void

; <label>:322:                                    ; preds = %24
  %323 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %324 = alloca %struct.ball*, align 8
  %325 = alloca %struct.ball*, align 8
  %326 = alloca %struct.ball*, align 8
  %327 = alloca %struct.ball, align 8
  %328 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  %329 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %330 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  store %struct.ball* %0, %struct.ball** %324, align 8
  store %struct.ball* %1, %struct.ball** %325, align 8
  %331 = load %struct.ball*, %struct.ball** %324, align 8
  %332 = load %struct.ball*, %struct.ball** %325, align 8
  %333 = icmp eq %struct.ball* %331, %332
  store i32 1392933360, i32* %23
  br label %368

; <label>:334:                                    ; preds = %24
  store i32 964217459, i32* %23
  br label %368

; <label>:335:                                    ; preds = %24
  %336 = load volatile %struct.ball**, %struct.ball*** %9
  %337 = load %struct.ball*, %struct.ball** %336, align 8
  %338 = getelementptr inbounds %struct.ball, %struct.ball* %337, i64 1
  %339 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %338, %struct.ball** %339, align 8
  store i32 971900044, i32* %23
  br label %368

; <label>:340:                                    ; preds = %24
  %341 = load volatile %struct.ball**, %struct.ball*** %7
  %342 = load %struct.ball*, %struct.ball** %341, align 8
  %343 = load volatile %struct.ball**, %struct.ball*** %9
  %344 = load %struct.ball*, %struct.ball** %343, align 8
  %345 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %10
  %346 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %345, %struct.ball* %342, %struct.ball* %344)
  store i32 681420731, i32* %23
  br label %368

; <label>:347:                                    ; preds = %24
  %348 = load volatile %struct.ball**, %struct.ball*** %7
  %349 = load %struct.ball*, %struct.ball** %348, align 8
  %350 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %349) #3
  %351 = load volatile %struct.ball*, %struct.ball** %6
  %352 = bitcast %struct.ball* %351 to i8*
  %353 = bitcast %struct.ball* %350 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %352, i8* %353, i64 16, i32 8, i1 false)
  %354 = load volatile %struct.ball**, %struct.ball*** %9
  %355 = load %struct.ball*, %struct.ball** %354, align 8
  %356 = load volatile %struct.ball**, %struct.ball*** %7
  %357 = load %struct.ball*, %struct.ball** %356, align 8
  %358 = load volatile %struct.ball**, %struct.ball*** %7
  %359 = load %struct.ball*, %struct.ball** %358, align 8
  %360 = getelementptr inbounds %struct.ball, %struct.ball* %359, i64 1
  %361 = call %struct.ball* @_ZSt13move_backwardIP4ballS1_ET0_T_S3_S2_(%struct.ball* %355, %struct.ball* %357, %struct.ball* %360)
  %362 = load volatile %struct.ball*, %struct.ball** %6
  %363 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %362) #3
  %364 = load volatile %struct.ball**, %struct.ball*** %9
  %365 = load %struct.ball*, %struct.ball** %364, align 8
  %366 = bitcast %struct.ball* %365 to i8*
  %367 = bitcast %struct.ball* %363 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %366, i8* %367, i64 16, i32 8, i1 false)
  store i32 158212790, i32* %23
  br label %368

; <label>:368:                                    ; preds = %347, %340, %335, %334, %322, %316, %315, %308, %307, %260, %244, %241, %207, %191, %184, %183, %163, %135, %134, %107, %92, %89, %47, %27, %26
  br label %24
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt26__unguarded_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %10 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  %11 = load %struct.ball*, %struct.ball** %5, align 8
  store %struct.ball* %11, %struct.ball** %7, align 8
  %12 = alloca i32
  store i32 132540231, i32* %12
  br label %13

; <label>:13:                                     ; preds = %2, %124
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 132540231, label %16
    i32 -1014594724, label %44
    i32 1603293086, label %62
    i32 -1962023595, label %65
    i32 294424794, label %93
    i32 300127849, label %111
    i32 -265559069, label %112
    i32 -720710668, label %115
    i32 1649591478, label %116
    i32 975314762, label %120
  ]

; <label>:15:                                     ; preds = %13
  br label %124

; <label>:16:                                     ; preds = %13
  %17 = load i32, i32* @x.357
  %18 = load i32, i32* @y.358
  %19 = sub i32 %17, -2006594748
  %20 = sub i32 %19, 1
  %21 = add i32 %20, -2006594748
  %22 = sub i32 %17, 1
  %23 = mul i32 %17, %21
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %18, 10
  %27 = xor i1 %25, true
  %28 = xor i1 %26, true
  %29 = xor i1 false, true
  %30 = and i1 %27, false
  %31 = and i1 %25, %29
  %32 = and i1 %28, false
  %33 = and i1 %26, %29
  %34 = or i1 %30, %31
  %35 = or i1 %32, %33
  %36 = xor i1 %34, %35
  %37 = or i1 %27, %28
  %38 = xor i1 %37, true
  %39 = or i1 false, %29
  %40 = and i1 %38, %39
  %41 = or i1 %36, %40
  %42 = or i1 %25, %26
  %43 = select i1 %41, i32 -1014594724, i32 1649591478
  store i32 %43, i32* %12
  br label %124

; <label>:44:                                     ; preds = %13
  %45 = load %struct.ball*, %struct.ball** %7, align 8
  %46 = load %struct.ball*, %struct.ball** %6, align 8
  %47 = icmp ne %struct.ball* %45, %46
  store i1 %47, i1* %3
  %48 = load i32, i32* @x.357
  %49 = load i32, i32* @y.358
  %50 = sub i32 0, 1
  %51 = add i32 %48, %50
  %52 = sub i32 %48, 1
  %53 = mul i32 %48, %51
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %49, 10
  %57 = and i1 %55, %56
  %58 = xor i1 %55, %56
  %59 = or i1 %57, %58
  %60 = or i1 %55, %56
  %61 = select i1 %59, i32 1603293086, i32 1649591478
  store i32 %61, i32* %12
  br label %124

; <label>:62:                                     ; preds = %13
  %63 = load volatile i1, i1* %3
  %64 = select i1 %63, i32 -1962023595, i32 -720710668
  store i32 %64, i32* %12
  br label %124

; <label>:65:                                     ; preds = %13
  %66 = load i32, i32* @x.357
  %67 = load i32, i32* @y.358
  %68 = sub i32 %66, 1289018693
  %69 = sub i32 %68, 1
  %70 = add i32 %69, 1289018693
  %71 = sub i32 %66, 1
  %72 = mul i32 %66, %70
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %67, 10
  %76 = xor i1 %74, true
  %77 = xor i1 %75, true
  %78 = xor i1 true, true
  %79 = and i1 %76, true
  %80 = and i1 %74, %78
  %81 = and i1 %77, true
  %82 = and i1 %75, %78
  %83 = or i1 %79, %80
  %84 = or i1 %81, %82
  %85 = xor i1 %83, %84
  %86 = or i1 %76, %77
  %87 = xor i1 %86, true
  %88 = or i1 true, %78
  %89 = and i1 %87, %88
  %90 = or i1 %85, %89
  %91 = or i1 %74, %75
  %92 = select i1 %90, i32 294424794, i32 975314762
  store i32 %92, i32* %12
  br label %124

; <label>:93:                                     ; preds = %13
  %94 = load %struct.ball*, %struct.ball** %7, align 8
  %95 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9 to i8*
  %96 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* %96, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_1EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"()
  call void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EEEvT_T0_"(%struct.ball* %94)
  %97 = load i32, i32* @x.357
  %98 = load i32, i32* @y.358
  %99 = sub i32 0, 1
  %100 = add i32 %97, %99
  %101 = sub i32 %97, 1
  %102 = mul i32 %97, %100
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %98, 10
  %106 = and i1 %104, %105
  %107 = xor i1 %104, %105
  %108 = or i1 %106, %107
  %109 = or i1 %104, %105
  %110 = select i1 %108, i32 300127849, i32 975314762
  store i32 %110, i32* %12
  br label %124

; <label>:111:                                    ; preds = %13
  store i32 -265559069, i32* %12
  br label %124

; <label>:112:                                    ; preds = %13
  %113 = load %struct.ball*, %struct.ball** %7, align 8
  %114 = getelementptr inbounds %struct.ball, %struct.ball* %113, i32 1
  store %struct.ball* %114, %struct.ball** %7, align 8
  store i32 132540231, i32* %12
  br label %124

; <label>:115:                                    ; preds = %13
  ret void

; <label>:116:                                    ; preds = %13
  %117 = load %struct.ball*, %struct.ball** %7, align 8
  %118 = load %struct.ball*, %struct.ball** %6, align 8
  %119 = icmp ne %struct.ball* %117, %118
  store i32 -1014594724, i32* %12
  br label %124

; <label>:120:                                    ; preds = %13
  %121 = load %struct.ball*, %struct.ball** %7, align 8
  %122 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %9 to i8*
  %123 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %122, i8* %123, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_1EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"()
  call void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EEEvT_T0_"(%struct.ball* %121)
  store i32 294424794, i32* %12
  br label %124

; <label>:124:                                    ; preds = %120, %116, %112, %111, %93, %65, %62, %44, %16, %15
  br label %13
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EEEvT_T0_"(%struct.ball*) #0 {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  %3 = alloca %struct.ball*, align 8
  %4 = alloca %struct.ball, align 8
  %5 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %3, align 8
  %6 = load %struct.ball*, %struct.ball** %3, align 8
  %7 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %6) #3
  %8 = bitcast %struct.ball* %4 to i8*
  %9 = bitcast %struct.ball* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 16, i32 8, i1 false)
  %10 = load %struct.ball*, %struct.ball** %3, align 8
  store %struct.ball* %10, %struct.ball** %5, align 8
  %11 = load %struct.ball*, %struct.ball** %5, align 8
  %12 = getelementptr inbounds %struct.ball, %struct.ball* %11, i32 -1
  store %struct.ball* %12, %struct.ball** %5, align 8
  %13 = alloca i32
  store i32 -1405266486, i32* %13
  br label %14

; <label>:14:                                     ; preds = %1, %35
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -1405266486, label %17
    i32 -1230238059, label %21
    i32 -1855281216, label %30
  ]

; <label>:16:                                     ; preds = %14
  br label %35

; <label>:17:                                     ; preds = %14
  %18 = load %struct.ball*, %struct.ball** %5, align 8
  %19 = call zeroext i1 @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EclI4ballPS5_EEbRT_T0_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %2, %struct.ball* dereferenceable(16) %4, %struct.ball* %18)
  %20 = select i1 %19, i32 -1230238059, i32 -1855281216
  store i32 %20, i32* %13
  br label %35

; <label>:21:                                     ; preds = %14
  %22 = load %struct.ball*, %struct.ball** %5, align 8
  %23 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %22) #3
  %24 = load %struct.ball*, %struct.ball** %3, align 8
  %25 = bitcast %struct.ball* %24 to i8*
  %26 = bitcast %struct.ball* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  %27 = load %struct.ball*, %struct.ball** %5, align 8
  store %struct.ball* %27, %struct.ball** %3, align 8
  %28 = load %struct.ball*, %struct.ball** %5, align 8
  %29 = getelementptr inbounds %struct.ball, %struct.ball* %28, i32 -1
  store %struct.ball* %29, %struct.ball** %5, align 8
  store i32 -1405266486, i32* %13
  br label %35

; <label>:30:                                     ; preds = %14
  %31 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %4) #3
  %32 = load %struct.ball*, %struct.ball** %3, align 8
  %33 = bitcast %struct.ball* %32 to i8*
  %34 = bitcast %struct.ball* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 16, i32 8, i1 false)
  ret void

; <label>:35:                                     ; preds = %21, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_1EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"() #0 {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.361
  %4 = load i32, i32* @y.362
  %5 = sub i32 %3, 1255153872
  %6 = sub i32 %5, 1
  %7 = add i32 %6, 1255153872
  %8 = sub i32 %3, 1
  %9 = mul i32 %3, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %2
  %12 = icmp slt i32 %4, 10
  store i1 %12, i1* %1
  %13 = alloca i32
  store i32 106275877, i32* %13
  br label %14

; <label>:14:                                     ; preds = %0, %50
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 106275877, label %17
    i32 1764120361, label %25
    i32 1070020297, label %44
    i32 1609611713, label %45
  ]

; <label>:16:                                     ; preds = %14
  br label %50

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %2
  %19 = load volatile i1, i1* %1
  %20 = and i1 %18, %19
  %21 = xor i1 %18, %19
  %22 = or i1 %20, %21
  %23 = or i1 %18, %19
  %24 = select i1 %22, i32 1764120361, i32 1609611713
  store i32 %24, i32* %13
  br label %50

; <label>:25:                                     ; preds = %14
  %26 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  %27 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %28 = alloca %class.anon.0, align 1
  %29 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %27, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EC2ES2_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %26)
  %30 = load i32, i32* @x.361
  %31 = load i32, i32* @y.362
  %32 = sub i32 0, 1
  %33 = add i32 %30, %32
  %34 = sub i32 %30, 1
  %35 = mul i32 %30, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %31, 10
  %39 = and i1 %37, %38
  %40 = xor i1 %37, %38
  %41 = or i1 %39, %40
  %42 = or i1 %37, %38
  %43 = select i1 %41, i32 1070020297, i32 1609611713
  store i32 %43, i32* %13
  br label %50

; <label>:44:                                     ; preds = %14
  ret void

; <label>:45:                                     ; preds = %14
  %46 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", align 1
  %47 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", align 1
  %48 = alloca %class.anon.0, align 1
  %49 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %47, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EC2ES2_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %46)
  store i32 1764120361, i32* %13
  br label %50

; <label>:50:                                     ; preds = %45, %25, %17, %16
  br label %14
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EclI4ballPS5_EEbRT_T0_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.10"*, %struct.ball* dereferenceable(16), %struct.ball*) #4 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %7, i32 0, i32 0
  %9 = load %struct.ball*, %struct.ball** %5, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  %11 = call zeroext i1 @"_ZZ4mainENK3$_1clERK4ballS2_"(%class.anon.0* %8, %struct.ball* dereferenceable(16) %9, %struct.ball* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_1EC2ES2_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.10"*) unnamed_addr #4 align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.365
  %5 = load i32, i32* @y.366
  %6 = add i32 %4, -1697199694
  %7 = sub i32 %6, 1
  %8 = sub i32 %7, -1697199694
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 -830744870, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %52
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -830744870, label %18
    i32 -1489871050, label %26
    i32 -1732991249, label %46
    i32 -389489212, label %47
  ]

; <label>:17:                                     ; preds = %15
  br label %52

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 -1489871050, i32 -389489212
  store i32 %25, i32* %14
  br label %52

; <label>:26:                                     ; preds = %15
  %27 = alloca %class.anon.0, align 1
  %28 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"** %28, align 8
  %29 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"** %28, align 8
  %30 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %29, i32 0, i32 0
  %31 = load i32, i32* @x.365
  %32 = load i32, i32* @y.366
  %33 = add i32 %31, -1289345197
  %34 = sub i32 %33, 1
  %35 = sub i32 %34, -1289345197
  %36 = sub i32 %31, 1
  %37 = mul i32 %31, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %32, 10
  %41 = and i1 %39, %40
  %42 = xor i1 %39, %40
  %43 = or i1 %41, %42
  %44 = or i1 %39, %40
  %45 = select i1 %43, i32 -1732991249, i32 -389489212
  store i32 %45, i32* %14
  br label %52

; <label>:46:                                     ; preds = %15
  ret void

; <label>:47:                                     ; preds = %15
  %48 = alloca %class.anon.0, align 1
  %49 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"** %49, align 8
  %50 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"** %49, align 8
  %51 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter.10", %"struct.__gnu_cxx::__ops::_Val_comp_iter.10"* %50, i32 0, i32 0
  store i32 -1489871050, i32* %14
  br label %52

; <label>:52:                                     ; preds = %47, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_1EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*) unnamed_addr #4 align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.367
  %5 = load i32, i32* @y.368
  %6 = sub i32 0, 1
  %7 = add i32 %4, %6
  %8 = sub i32 %4, 1
  %9 = mul i32 %4, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %3
  %12 = icmp slt i32 %5, 10
  store i1 %12, i1* %2
  %13 = alloca i32
  store i32 -620797866, i32* %13
  br label %14

; <label>:14:                                     ; preds = %1, %62
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -620797866, label %17
    i32 1965956225, label %37
    i32 -1153779190, label %56
    i32 81943074, label %57
  ]

; <label>:16:                                     ; preds = %14
  br label %62

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %3
  %19 = load volatile i1, i1* %2
  %20 = xor i1 %18, true
  %21 = xor i1 %19, true
  %22 = xor i1 false, true
  %23 = and i1 %20, false
  %24 = and i1 %18, %22
  %25 = and i1 %21, false
  %26 = and i1 %19, %22
  %27 = or i1 %23, %24
  %28 = or i1 %25, %26
  %29 = xor i1 %27, %28
  %30 = or i1 %20, %21
  %31 = xor i1 %30, true
  %32 = or i1 false, %22
  %33 = and i1 %31, %32
  %34 = or i1 %29, %33
  %35 = or i1 %18, %19
  %36 = select i1 %34, i32 1965956225, i32 81943074
  store i32 %36, i32* %13
  br label %62

; <label>:37:                                     ; preds = %14
  %38 = alloca %class.anon.0, align 1
  %39 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %39, align 8
  %40 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %39, align 8
  %41 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %40, i32 0, i32 0
  %42 = load i32, i32* @x.367
  %43 = load i32, i32* @y.368
  %44 = sub i32 0, 1
  %45 = add i32 %42, %44
  %46 = sub i32 %42, 1
  %47 = mul i32 %42, %45
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %43, 10
  %51 = and i1 %49, %50
  %52 = xor i1 %49, %50
  %53 = or i1 %51, %52
  %54 = or i1 %49, %50
  %55 = select i1 %53, i32 -1153779190, i32 81943074
  store i32 %55, i32* %13
  br label %62

; <label>:56:                                     ; preds = %14
  ret void

; <label>:57:                                     ; preds = %14
  %58 = alloca %class.anon.0, align 1
  %59 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %59, align 8
  %60 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"** %59, align 8
  %61 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.8"* %60, i32 0, i32 0
  store i32 1965956225, i32* %13
  br label %62

; <label>:62:                                     ; preds = %57, %37, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt6__sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %struct.ball*
  %4 = alloca %struct.ball*
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %6, align 8
  store %struct.ball* %1, %struct.ball** %7, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  store %struct.ball* %10, %struct.ball** %4
  %11 = load %struct.ball*, %struct.ball** %7, align 8
  store %struct.ball* %11, %struct.ball** %3
  %12 = alloca i32
  store i32 -551964794, i32* %12
  br label %13

; <label>:13:                                     ; preds = %2, %42
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 -551964794, label %16
    i32 -598056593, label %21
    i32 928101512, label %41
  ]

; <label>:15:                                     ; preds = %13
  br label %42

; <label>:16:                                     ; preds = %13
  %17 = load volatile %struct.ball*, %struct.ball** %4
  %18 = load volatile %struct.ball*, %struct.ball** %3
  %19 = icmp ne %struct.ball* %17, %18
  %20 = select i1 %19, i32 -598056593, i32 928101512
  store i32 %20, i32* %12
  br label %42

; <label>:21:                                     ; preds = %13
  %22 = load %struct.ball*, %struct.ball** %6, align 8
  %23 = load %struct.ball*, %struct.ball** %7, align 8
  %24 = load %struct.ball*, %struct.ball** %7, align 8
  %25 = load %struct.ball*, %struct.ball** %6, align 8
  %26 = ptrtoint %struct.ball* %24 to i64
  %27 = ptrtoint %struct.ball* %25 to i64
  %28 = add i64 %26, 3878223372064971379
  %29 = sub i64 %28, %27
  %30 = sub i64 %29, 3878223372064971379
  %31 = sub i64 %26, %27
  %32 = sdiv exact i64 %30, 16
  %33 = call i64 @_ZSt4__lgl(i64 %32)
  %34 = mul nsw i64 %33, 2
  %35 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %8 to i8*
  %36 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 1, i32 1, i1 false)
  call void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_T1_"(%struct.ball* %22, %struct.ball* %23, i64 %34)
  %37 = load %struct.ball*, %struct.ball** %6, align 8
  %38 = load %struct.ball*, %struct.ball** %7, align 8
  %39 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9 to i8*
  %40 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 1, i32 1, i1 false)
  call void @"_ZSt22__final_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball* %37, %struct.ball* %38)
  store i32 928101512, i32* %12
  br label %42

; <label>:41:                                     ; preds = %13
  ret void

; <label>:42:                                     ; preds = %21, %16, %15
  br label %13
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops16__iter_comp_iterIZ4mainE3$_2EENS0_15_Iter_comp_iterIT_EES4_"() #0 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %2 = alloca %class.anon.2, align 1
  %3 = alloca %class.anon.2, align 1
  call void @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %1)
  ret void
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_T1_"(%struct.ball*, %struct.ball*, i64) #0 {
  %4 = alloca i1
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %10 = alloca %struct.ball*, align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %6, align 8
  store %struct.ball* %1, %struct.ball** %7, align 8
  store i64 %2, i64* %8, align 8
  %13 = alloca i32
  store i32 -899522914, i32* %13
  br label %14

; <label>:14:                                     ; preds = %3, %214
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -899522914, label %17
    i32 -1012980142, label %28
    i32 1309079087, label %44
    i32 2009713307, label %73
    i32 -862487867, label %76
    i32 187481357, label %82
    i32 1777280764, label %109
    i32 -953579375, label %153
    i32 -692726196, label %154
    i32 1753692076, label %155
    i32 1217833333, label %158
  ]

; <label>:16:                                     ; preds = %14
  br label %214

; <label>:17:                                     ; preds = %14
  %18 = load %struct.ball*, %struct.ball** %7, align 8
  %19 = load %struct.ball*, %struct.ball** %6, align 8
  %20 = ptrtoint %struct.ball* %18 to i64
  %21 = ptrtoint %struct.ball* %19 to i64
  %22 = sub i64 0, %21
  %23 = add i64 %20, %22
  %24 = sub i64 %20, %21
  %25 = sdiv exact i64 %23, 16
  %26 = icmp sgt i64 %25, 16
  %27 = select i1 %26, i32 -1012980142, i32 -692726196
  store i32 %27, i32* %13
  br label %214

; <label>:28:                                     ; preds = %14
  %29 = load i32, i32* @x.373
  %30 = load i32, i32* @y.374
  %31 = add i32 %29, 2072012907
  %32 = sub i32 %31, 1
  %33 = sub i32 %32, 2072012907
  %34 = sub i32 %29, 1
  %35 = mul i32 %29, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %30, 10
  %39 = and i1 %37, %38
  %40 = xor i1 %37, %38
  %41 = or i1 %39, %40
  %42 = or i1 %37, %38
  %43 = select i1 %41, i32 1309079087, i32 1753692076
  store i32 %43, i32* %13
  br label %214

; <label>:44:                                     ; preds = %14
  %45 = load i64, i64* %8, align 8
  %46 = icmp eq i64 %45, 0
  store i1 %46, i1* %4
  %47 = load i32, i32* @x.373
  %48 = load i32, i32* @y.374
  %49 = sub i32 0, 1
  %50 = add i32 %47, %49
  %51 = sub i32 %47, 1
  %52 = mul i32 %47, %50
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %48, 10
  %56 = xor i1 %54, true
  %57 = xor i1 %55, true
  %58 = xor i1 false, true
  %59 = and i1 %56, false
  %60 = and i1 %54, %58
  %61 = and i1 %57, false
  %62 = and i1 %55, %58
  %63 = or i1 %59, %60
  %64 = or i1 %61, %62
  %65 = xor i1 %63, %64
  %66 = or i1 %56, %57
  %67 = xor i1 %66, true
  %68 = or i1 false, %58
  %69 = and i1 %67, %68
  %70 = or i1 %65, %69
  %71 = or i1 %54, %55
  %72 = select i1 %70, i32 2009713307, i32 1753692076
  store i32 %72, i32* %13
  br label %214

; <label>:73:                                     ; preds = %14
  %74 = load volatile i1, i1* %4
  %75 = select i1 %74, i32 -862487867, i32 187481357
  store i32 %75, i32* %13
  br label %214

; <label>:76:                                     ; preds = %14
  %77 = load %struct.ball*, %struct.ball** %6, align 8
  %78 = load %struct.ball*, %struct.ball** %7, align 8
  %79 = load %struct.ball*, %struct.ball** %7, align 8
  %80 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9 to i8*
  %81 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %80, i8* %81, i64 1, i32 1, i1 false)
  call void @"_ZSt14__partial_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_T0_"(%struct.ball* %77, %struct.ball* %78, %struct.ball* %79)
  store i32 -692726196, i32* %13
  br label %214

; <label>:82:                                     ; preds = %14
  %83 = load i32, i32* @x.373
  %84 = load i32, i32* @y.374
  %85 = sub i32 0, 1
  %86 = add i32 %83, %85
  %87 = sub i32 %83, 1
  %88 = mul i32 %83, %86
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %84, 10
  %92 = xor i1 %90, true
  %93 = xor i1 %91, true
  %94 = xor i1 true, true
  %95 = and i1 %92, true
  %96 = and i1 %90, %94
  %97 = and i1 %93, true
  %98 = and i1 %91, %94
  %99 = or i1 %95, %96
  %100 = or i1 %97, %98
  %101 = xor i1 %99, %100
  %102 = or i1 %92, %93
  %103 = xor i1 %102, true
  %104 = or i1 true, %94
  %105 = and i1 %103, %104
  %106 = or i1 %101, %105
  %107 = or i1 %90, %91
  %108 = select i1 %106, i32 1777280764, i32 1217833333
  store i32 %108, i32* %13
  br label %214

; <label>:109:                                    ; preds = %14
  %110 = load i64, i64* %8, align 8
  %111 = sub i64 0, %110
  %112 = sub i64 0, -1
  %113 = add i64 %111, %112
  %114 = sub i64 0, %113
  %115 = add nsw i64 %110, -1
  store i64 %114, i64* %8, align 8
  %116 = load %struct.ball*, %struct.ball** %6, align 8
  %117 = load %struct.ball*, %struct.ball** %7, align 8
  %118 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %11 to i8*
  %119 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %118, i8* %119, i64 1, i32 1, i1 false)
  %120 = call %struct.ball* @"_ZSt27__unguarded_partition_pivotIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEET_S7_S7_T0_"(%struct.ball* %116, %struct.ball* %117)
  store %struct.ball* %120, %struct.ball** %10, align 8
  %121 = load %struct.ball*, %struct.ball** %10, align 8
  %122 = load %struct.ball*, %struct.ball** %7, align 8
  %123 = load i64, i64* %8, align 8
  %124 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %12 to i8*
  %125 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %124, i8* %125, i64 1, i32 1, i1 false)
  call void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_T1_"(%struct.ball* %121, %struct.ball* %122, i64 %123)
  %126 = load %struct.ball*, %struct.ball** %10, align 8
  store %struct.ball* %126, %struct.ball** %7, align 8
  %127 = load i32, i32* @x.373
  %128 = load i32, i32* @y.374
  %129 = sub i32 0, 1
  %130 = add i32 %127, %129
  %131 = sub i32 %127, 1
  %132 = mul i32 %127, %130
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %128, 10
  %136 = xor i1 %134, true
  %137 = xor i1 %135, true
  %138 = xor i1 true, true
  %139 = and i1 %136, true
  %140 = and i1 %134, %138
  %141 = and i1 %137, true
  %142 = and i1 %135, %138
  %143 = or i1 %139, %140
  %144 = or i1 %141, %142
  %145 = xor i1 %143, %144
  %146 = or i1 %136, %137
  %147 = xor i1 %146, true
  %148 = or i1 true, %138
  %149 = and i1 %147, %148
  %150 = or i1 %145, %149
  %151 = or i1 %134, %135
  %152 = select i1 %150, i32 -953579375, i32 1217833333
  store i32 %152, i32* %13
  br label %214

; <label>:153:                                    ; preds = %14
  store i32 -899522914, i32* %13
  br label %214

; <label>:154:                                    ; preds = %14
  ret void

; <label>:155:                                    ; preds = %14
  %156 = load i64, i64* %8, align 8
  %157 = icmp eq i64 %156, 0
  store i32 1309079087, i32* %13
  br label %214

; <label>:158:                                    ; preds = %14
  %159 = load i64, i64* %8, align 8
  %160 = sub i64 0, %159
  %161 = add i64 0, %160
  %162 = sub i64 0, %159
  %163 = sub i64 %161, -7288112124642188246
  %164 = add i64 %163, -1
  %165 = add i64 %164, -7288112124642188246
  %166 = add i64 %161, -1
  %167 = sub i64 %159, 41535959413608623
  %168 = sub i64 %167, -1
  %169 = add i64 %168, 41535959413608623
  %170 = sub i64 %159, -1
  %171 = mul i64 %169, -1
  %172 = sub i64 0, -8755203055379053064
  %173 = sub i64 %172, %159
  %174 = add i64 %173, -8755203055379053064
  %175 = sub i64 0, %159
  %176 = sub i64 %174, -7915884124023405517
  %177 = add i64 %176, -1
  %178 = add i64 %177, -7915884124023405517
  %179 = add i64 %174, -1
  %180 = shl i64 %159, -1
  %181 = add i64 %159, 2902180048949122806
  %182 = sub i64 %181, -1
  %183 = sub i64 %182, 2902180048949122806
  %184 = sub i64 %159, -1
  %185 = mul i64 %183, -1
  %186 = shl i64 %159, -1
  %187 = sub i64 0, %159
  %188 = add i64 0, %187
  %189 = sub i64 0, %159
  %190 = sub i64 0, -1
  %191 = sub i64 %188, %190
  %192 = add i64 %188, -1
  %193 = sub i64 0, %159
  %194 = add i64 0, %193
  %195 = sub i64 0, %159
  %196 = add i64 %194, 4573878401674845966
  %197 = add i64 %196, -1
  %198 = sub i64 %197, 4573878401674845966
  %199 = add i64 %194, -1
  %200 = sub i64 0, -1
  %201 = sub i64 %159, %200
  %202 = add nsw i64 %159, -1
  store i64 %201, i64* %8, align 8
  %203 = load %struct.ball*, %struct.ball** %6, align 8
  %204 = load %struct.ball*, %struct.ball** %7, align 8
  %205 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %11 to i8*
  %206 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %205, i8* %206, i64 1, i32 1, i1 false)
  %207 = call %struct.ball* @"_ZSt27__unguarded_partition_pivotIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEET_S7_S7_T0_"(%struct.ball* %203, %struct.ball* %204)
  store %struct.ball* %207, %struct.ball** %10, align 8
  %208 = load %struct.ball*, %struct.ball** %10, align 8
  %209 = load %struct.ball*, %struct.ball** %7, align 8
  %210 = load i64, i64* %8, align 8
  %211 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %12 to i8*
  %212 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %211, i8* %212, i64 1, i32 1, i1 false)
  call void @"_ZSt16__introsort_loopIP4balllN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_T1_"(%struct.ball* %208, %struct.ball* %209, i64 %210)
  %213 = load %struct.ball*, %struct.ball** %10, align 8
  store %struct.ball* %213, %struct.ball** %7, align 8
  store i32 1777280764, i32* %13
  br label %214

; <label>:214:                                    ; preds = %158, %155, %153, %109, %82, %76, %73, %44, %28, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt22__final_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*
  %7 = alloca %struct.ball**
  %8 = alloca %struct.ball**
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*
  %10 = alloca i1
  %11 = alloca i1
  %12 = load i32, i32* @x.375
  %13 = load i32, i32* @y.376
  %14 = add i32 %12, 833130262
  %15 = sub i32 %14, 1
  %16 = sub i32 %15, 833130262
  %17 = sub i32 %12, 1
  %18 = mul i32 %12, %16
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  store i1 %20, i1* %11
  %21 = icmp slt i32 %13, 10
  store i1 %21, i1* %10
  %22 = alloca i32
  store i32 -917450284, i32* %22
  br label %23

; <label>:23:                                     ; preds = %2, %216
  %24 = load i32, i32* %22
  switch i32 %24, label %25 [
    i32 -917450284, label %26
    i32 -1203203628, label %34
    i32 -414525155, label %82
    i32 1789793770, label %85
    i32 1415460653, label %104
    i32 -426818157, label %131
    i32 -1226820676, label %154
    i32 -1307984520, label %155
    i32 -537010035, label %156
    i32 1830942511, label %207
  ]

; <label>:25:                                     ; preds = %23
  br label %216

; <label>:26:                                     ; preds = %23
  %27 = load volatile i1, i1* %11
  %28 = load volatile i1, i1* %10
  %29 = and i1 %27, %28
  %30 = xor i1 %27, %28
  %31 = or i1 %29, %30
  %32 = or i1 %27, %28
  %33 = select i1 %31, i32 -1203203628, i32 -537010035
  store i32 %33, i32* %22
  br label %216

; <label>:34:                                     ; preds = %23
  %35 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %35, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %9
  %36 = alloca %struct.ball*, align 8
  store %struct.ball** %36, %struct.ball*** %8
  %37 = alloca %struct.ball*, align 8
  store %struct.ball** %37, %struct.ball*** %7
  %38 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %38, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %6
  %39 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %39, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %5
  %40 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %40, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %4
  %41 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %0, %struct.ball** %41, align 8
  %42 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %1, %struct.ball** %42, align 8
  %43 = load volatile %struct.ball**, %struct.ball*** %7
  %44 = load %struct.ball*, %struct.ball** %43, align 8
  %45 = load volatile %struct.ball**, %struct.ball*** %8
  %46 = load %struct.ball*, %struct.ball** %45, align 8
  %47 = ptrtoint %struct.ball* %44 to i64
  %48 = ptrtoint %struct.ball* %46 to i64
  %49 = sub i64 %47, -8591590996777648525
  %50 = sub i64 %49, %48
  %51 = add i64 %50, -8591590996777648525
  %52 = sub i64 %47, %48
  %53 = sdiv exact i64 %51, 16
  %54 = icmp sgt i64 %53, 16
  store i1 %54, i1* %3
  %55 = load i32, i32* @x.375
  %56 = load i32, i32* @y.376
  %57 = add i32 %55, -768633175
  %58 = sub i32 %57, 1
  %59 = sub i32 %58, -768633175
  %60 = sub i32 %55, 1
  %61 = mul i32 %55, %59
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %56, 10
  %65 = xor i1 %63, true
  %66 = xor i1 %64, true
  %67 = xor i1 false, true
  %68 = and i1 %65, false
  %69 = and i1 %63, %67
  %70 = and i1 %66, false
  %71 = and i1 %64, %67
  %72 = or i1 %68, %69
  %73 = or i1 %70, %71
  %74 = xor i1 %72, %73
  %75 = or i1 %65, %66
  %76 = xor i1 %75, true
  %77 = or i1 false, %67
  %78 = and i1 %76, %77
  %79 = or i1 %74, %78
  %80 = or i1 %63, %64
  %81 = select i1 %79, i32 -414525155, i32 -537010035
  store i32 %81, i32* %22
  br label %216

; <label>:82:                                     ; preds = %23
  %83 = load volatile i1, i1* %3
  %84 = select i1 %83, i32 1789793770, i32 1415460653
  store i32 %84, i32* %22
  br label %216

; <label>:85:                                     ; preds = %23
  %86 = load volatile %struct.ball**, %struct.ball*** %8
  %87 = load %struct.ball*, %struct.ball** %86, align 8
  %88 = load volatile %struct.ball**, %struct.ball*** %8
  %89 = load %struct.ball*, %struct.ball** %88, align 8
  %90 = getelementptr inbounds %struct.ball, %struct.ball* %89, i64 16
  %91 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %6
  %92 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %91 to i8*
  %93 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %9
  %94 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %92, i8* %94, i64 1, i32 1, i1 false)
  call void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball* %87, %struct.ball* %90)
  %95 = load volatile %struct.ball**, %struct.ball*** %8
  %96 = load %struct.ball*, %struct.ball** %95, align 8
  %97 = getelementptr inbounds %struct.ball, %struct.ball* %96, i64 16
  %98 = load volatile %struct.ball**, %struct.ball*** %7
  %99 = load %struct.ball*, %struct.ball** %98, align 8
  %100 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %5
  %101 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %100 to i8*
  %102 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %9
  %103 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %101, i8* %103, i64 1, i32 1, i1 false)
  call void @"_ZSt26__unguarded_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball* %97, %struct.ball* %99)
  store i32 -1307984520, i32* %22
  br label %216

; <label>:104:                                    ; preds = %23
  %105 = load i32, i32* @x.375
  %106 = load i32, i32* @y.376
  %107 = sub i32 0, 1
  %108 = add i32 %105, %107
  %109 = sub i32 %105, 1
  %110 = mul i32 %105, %108
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %106, 10
  %114 = xor i1 %112, true
  %115 = xor i1 %113, true
  %116 = xor i1 true, true
  %117 = and i1 %114, true
  %118 = and i1 %112, %116
  %119 = and i1 %115, true
  %120 = and i1 %113, %116
  %121 = or i1 %117, %118
  %122 = or i1 %119, %120
  %123 = xor i1 %121, %122
  %124 = or i1 %114, %115
  %125 = xor i1 %124, true
  %126 = or i1 true, %116
  %127 = and i1 %125, %126
  %128 = or i1 %123, %127
  %129 = or i1 %112, %113
  %130 = select i1 %128, i32 -426818157, i32 1830942511
  store i32 %130, i32* %22
  br label %216

; <label>:131:                                    ; preds = %23
  %132 = load volatile %struct.ball**, %struct.ball*** %8
  %133 = load %struct.ball*, %struct.ball** %132, align 8
  %134 = load volatile %struct.ball**, %struct.ball*** %7
  %135 = load %struct.ball*, %struct.ball** %134, align 8
  %136 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %4
  %137 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %136 to i8*
  %138 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %9
  %139 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %138 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %137, i8* %139, i64 1, i32 1, i1 false)
  call void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball* %133, %struct.ball* %135)
  %140 = load i32, i32* @x.375
  %141 = load i32, i32* @y.376
  %142 = sub i32 0, 1
  %143 = add i32 %140, %142
  %144 = sub i32 %140, 1
  %145 = mul i32 %140, %143
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %141, 10
  %149 = and i1 %147, %148
  %150 = xor i1 %147, %148
  %151 = or i1 %149, %150
  %152 = or i1 %147, %148
  %153 = select i1 %151, i32 -1226820676, i32 1830942511
  store i32 %153, i32* %22
  br label %216

; <label>:154:                                    ; preds = %23
  store i32 -1307984520, i32* %22
  br label %216

; <label>:155:                                    ; preds = %23
  ret void

; <label>:156:                                    ; preds = %23
  %157 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %158 = alloca %struct.ball*, align 8
  %159 = alloca %struct.ball*, align 8
  %160 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %161 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %162 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %158, align 8
  store %struct.ball* %1, %struct.ball** %159, align 8
  %163 = load %struct.ball*, %struct.ball** %159, align 8
  %164 = load %struct.ball*, %struct.ball** %158, align 8
  %165 = ptrtoint %struct.ball* %163 to i64
  %166 = ptrtoint %struct.ball* %164 to i64
  %167 = shl i64 %165, %166
  %168 = sub i64 %165, 4890693777729886354
  %169 = sub i64 %168, %166
  %170 = add i64 %169, 4890693777729886354
  %171 = sub i64 %165, %166
  %172 = mul i64 %170, %166
  %173 = add i64 0, -2551353165906812375
  %174 = sub i64 %173, %165
  %175 = sub i64 %174, -2551353165906812375
  %176 = sub i64 0, %165
  %177 = sub i64 0, %166
  %178 = sub i64 %175, %177
  %179 = add i64 %175, %166
  %180 = sub i64 0, 1209977000243422408
  %181 = sub i64 %180, %165
  %182 = add i64 %181, 1209977000243422408
  %183 = sub i64 0, %165
  %184 = add i64 %182, -8597544697837508066
  %185 = add i64 %184, %166
  %186 = sub i64 %185, -8597544697837508066
  %187 = add i64 %182, %166
  %188 = add i64 0, 7651674139415367681
  %189 = sub i64 %188, %165
  %190 = sub i64 %189, 7651674139415367681
  %191 = sub i64 0, %165
  %192 = sub i64 %190, -5229125970900871324
  %193 = add i64 %192, %166
  %194 = add i64 %193, -5229125970900871324
  %195 = add i64 %190, %166
  %196 = shl i64 %165, %166
  %197 = sub i64 0, %166
  %198 = add i64 %165, %197
  %199 = sub i64 %165, %166
  %200 = sub i64 %198, 8416010222961207849
  %201 = sub i64 %200, 16
  %202 = add i64 %201, 8416010222961207849
  %203 = sub i64 %198, 16
  %204 = mul i64 %202, 16
  %205 = sdiv exact i64 %198, 16
  %206 = icmp sgt i64 %205, 16
  store i32 -1203203628, i32* %22
  br label %216

; <label>:207:                                    ; preds = %23
  %208 = load volatile %struct.ball**, %struct.ball*** %8
  %209 = load %struct.ball*, %struct.ball** %208, align 8
  %210 = load volatile %struct.ball**, %struct.ball*** %7
  %211 = load %struct.ball*, %struct.ball** %210, align 8
  %212 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %4
  %213 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %212 to i8*
  %214 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %9
  %215 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %213, i8* %215, i64 1, i32 1, i1 false)
  call void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball* %209, %struct.ball* %211)
  store i32 -426818157, i32* %22
  br label %216

; <label>:216:                                    ; preds = %207, %156, %154, %131, %104, %85, %82, %34, %26, %25
  br label %23
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt14__partial_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  store %struct.ball* %2, %struct.ball** %7, align 8
  %10 = load %struct.ball*, %struct.ball** %5, align 8
  %11 = load %struct.ball*, %struct.ball** %6, align 8
  %12 = load %struct.ball*, %struct.ball** %7, align 8
  %13 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %8 to i8*
  %14 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 1, i32 1, i1 false)
  call void @"_ZSt13__heap_selectIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_T0_"(%struct.ball* %10, %struct.ball* %11, %struct.ball* %12)
  %15 = load %struct.ball*, %struct.ball** %5, align 8
  %16 = load %struct.ball*, %struct.ball** %6, align 8
  %17 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9 to i8*
  %18 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 1, i32 1, i1 false)
  call void @"_ZSt11__sort_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball* %15, %struct.ball* %16)
  ret void
}

; Function Attrs: noinline uwtable
define internal %struct.ball* @"_ZSt27__unguarded_partition_pivotIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEET_S7_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %4 = alloca %struct.ball*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  %9 = load %struct.ball*, %struct.ball** %4, align 8
  %10 = load %struct.ball*, %struct.ball** %5, align 8
  %11 = load %struct.ball*, %struct.ball** %4, align 8
  %12 = ptrtoint %struct.ball* %10 to i64
  %13 = ptrtoint %struct.ball* %11 to i64
  %14 = sub i64 %12, 3478050805906815419
  %15 = sub i64 %14, %13
  %16 = add i64 %15, 3478050805906815419
  %17 = sub i64 %12, %13
  %18 = sdiv exact i64 %16, 16
  %19 = sdiv i64 %18, 2
  %20 = getelementptr inbounds %struct.ball, %struct.ball* %9, i64 %19
  store %struct.ball* %20, %struct.ball** %6, align 8
  %21 = load %struct.ball*, %struct.ball** %4, align 8
  %22 = load %struct.ball*, %struct.ball** %4, align 8
  %23 = getelementptr inbounds %struct.ball, %struct.ball* %22, i64 1
  %24 = load %struct.ball*, %struct.ball** %6, align 8
  %25 = load %struct.ball*, %struct.ball** %5, align 8
  %26 = getelementptr inbounds %struct.ball, %struct.ball* %25, i64 -1
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %7 to i8*
  %28 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 1, i32 1, i1 false)
  call void @"_ZSt22__move_median_to_firstIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_S7_T0_"(%struct.ball* %21, %struct.ball* %23, %struct.ball* %24, %struct.ball* %26)
  %29 = load %struct.ball*, %struct.ball** %4, align 8
  %30 = getelementptr inbounds %struct.ball, %struct.ball* %29, i64 1
  %31 = load %struct.ball*, %struct.ball** %5, align 8
  %32 = load %struct.ball*, %struct.ball** %4, align 8
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %8 to i8*
  %34 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 1, i32 1, i1 false)
  %35 = call %struct.ball* @"_ZSt21__unguarded_partitionIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEET_S7_S7_S7_T0_"(%struct.ball* %30, %struct.ball* %31, %struct.ball* %32)
  ret %struct.ball* %35
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt13__heap_selectIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca i1
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %struct.ball*, align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %10 = alloca %struct.ball*, align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %6, align 8
  store %struct.ball* %1, %struct.ball** %7, align 8
  store %struct.ball* %2, %struct.ball** %8, align 8
  %12 = load %struct.ball*, %struct.ball** %6, align 8
  %13 = load %struct.ball*, %struct.ball** %7, align 8
  %14 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9 to i8*
  %15 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 1, i32 1, i1 false)
  call void @"_ZSt11__make_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball* %12, %struct.ball* %13)
  %16 = load %struct.ball*, %struct.ball** %7, align 8
  store %struct.ball* %16, %struct.ball** %10, align 8
  %17 = alloca i32
  store i32 -680570908, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %90
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -680570908, label %21
    i32 938542882, label %49
    i32 -795719548, label %67
    i32 1011417058, label %70
    i32 884212662, label %75
    i32 -479545060, label %81
    i32 -66234174, label %82
    i32 -1953366165, label %85
    i32 996507029, label %86
  ]

; <label>:20:                                     ; preds = %18
  br label %90

; <label>:21:                                     ; preds = %18
  %22 = load i32, i32* @x.381
  %23 = load i32, i32* @y.382
  %24 = sub i32 %22, 586457055
  %25 = sub i32 %24, 1
  %26 = add i32 %25, 586457055
  %27 = sub i32 %22, 1
  %28 = mul i32 %22, %26
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %23, 10
  %32 = xor i1 %30, true
  %33 = xor i1 %31, true
  %34 = xor i1 false, true
  %35 = and i1 %32, false
  %36 = and i1 %30, %34
  %37 = and i1 %33, false
  %38 = and i1 %31, %34
  %39 = or i1 %35, %36
  %40 = or i1 %37, %38
  %41 = xor i1 %39, %40
  %42 = or i1 %32, %33
  %43 = xor i1 %42, true
  %44 = or i1 false, %34
  %45 = and i1 %43, %44
  %46 = or i1 %41, %45
  %47 = or i1 %30, %31
  %48 = select i1 %46, i32 938542882, i32 996507029
  store i32 %48, i32* %17
  br label %90

; <label>:49:                                     ; preds = %18
  %50 = load %struct.ball*, %struct.ball** %10, align 8
  %51 = load %struct.ball*, %struct.ball** %8, align 8
  %52 = icmp ult %struct.ball* %50, %51
  store i1 %52, i1* %4
  %53 = load i32, i32* @x.381
  %54 = load i32, i32* @y.382
  %55 = sub i32 0, 1
  %56 = add i32 %53, %55
  %57 = sub i32 %53, 1
  %58 = mul i32 %53, %56
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %54, 10
  %62 = and i1 %60, %61
  %63 = xor i1 %60, %61
  %64 = or i1 %62, %63
  %65 = or i1 %60, %61
  %66 = select i1 %64, i32 -795719548, i32 996507029
  store i32 %66, i32* %17
  br label %90

; <label>:67:                                     ; preds = %18
  %68 = load volatile i1, i1* %4
  %69 = select i1 %68, i32 1011417058, i32 -1953366165
  store i32 %69, i32* %17
  br label %90

; <label>:70:                                     ; preds = %18
  %71 = load %struct.ball*, %struct.ball** %10, align 8
  %72 = load %struct.ball*, %struct.ball** %6, align 8
  %73 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5, %struct.ball* %71, %struct.ball* %72)
  %74 = select i1 %73, i32 884212662, i32 -479545060
  store i32 %74, i32* %17
  br label %90

; <label>:75:                                     ; preds = %18
  %76 = load %struct.ball*, %struct.ball** %6, align 8
  %77 = load %struct.ball*, %struct.ball** %7, align 8
  %78 = load %struct.ball*, %struct.ball** %10, align 8
  %79 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %11 to i8*
  %80 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_T0_"(%struct.ball* %76, %struct.ball* %77, %struct.ball* %78)
  store i32 -479545060, i32* %17
  br label %90

; <label>:81:                                     ; preds = %18
  store i32 -66234174, i32* %17
  br label %90

; <label>:82:                                     ; preds = %18
  %83 = load %struct.ball*, %struct.ball** %10, align 8
  %84 = getelementptr inbounds %struct.ball, %struct.ball* %83, i32 1
  store %struct.ball* %84, %struct.ball** %10, align 8
  store i32 -680570908, i32* %17
  br label %90

; <label>:85:                                     ; preds = %18
  ret void

; <label>:86:                                     ; preds = %18
  %87 = load %struct.ball*, %struct.ball** %10, align 8
  %88 = load %struct.ball*, %struct.ball** %8, align 8
  %89 = icmp ult %struct.ball* %87, %88
  store i32 938542882, i32* %17
  br label %90

; <label>:90:                                     ; preds = %86, %82, %81, %75, %70, %67, %49, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__sort_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  %8 = alloca i32
  store i32 -1158147709, i32* %8
  br label %9

; <label>:9:                                      ; preds = %2, %150
  %10 = load i32, i32* %8
  switch i32 %10, label %11 [
    i32 -1158147709, label %12
    i32 -2130276047, label %28
    i32 -10012577, label %65
    i32 -355558228, label %68
    i32 1522246431, label %84
    i32 -123149105, label %119
    i32 2084911580, label %120
    i32 -1002506535, label %121
    i32 1558952326, label %142
  ]

; <label>:11:                                     ; preds = %9
  br label %150

; <label>:12:                                     ; preds = %9
  %13 = load i32, i32* @x.383
  %14 = load i32, i32* @y.384
  %15 = sub i32 %13, -942990044
  %16 = sub i32 %15, 1
  %17 = add i32 %16, -942990044
  %18 = sub i32 %13, 1
  %19 = mul i32 %13, %17
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %14, 10
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 -2130276047, i32 -1002506535
  store i32 %27, i32* %8
  br label %150

; <label>:28:                                     ; preds = %9
  %29 = load %struct.ball*, %struct.ball** %6, align 8
  %30 = load %struct.ball*, %struct.ball** %5, align 8
  %31 = ptrtoint %struct.ball* %29 to i64
  %32 = ptrtoint %struct.ball* %30 to i64
  %33 = sub i64 0, %32
  %34 = add i64 %31, %33
  %35 = sub i64 %31, %32
  %36 = sdiv exact i64 %34, 16
  %37 = icmp sgt i64 %36, 1
  store i1 %37, i1* %3
  %38 = load i32, i32* @x.383
  %39 = load i32, i32* @y.384
  %40 = sub i32 %38, -192478725
  %41 = sub i32 %40, 1
  %42 = add i32 %41, -192478725
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 false, true
  %51 = and i1 %48, false
  %52 = and i1 %46, %50
  %53 = and i1 %49, false
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 false, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  %64 = select i1 %62, i32 -10012577, i32 -1002506535
  store i32 %64, i32* %8
  br label %150

; <label>:65:                                     ; preds = %9
  %66 = load volatile i1, i1* %3
  %67 = select i1 %66, i32 -355558228, i32 2084911580
  store i32 %67, i32* %8
  br label %150

; <label>:68:                                     ; preds = %9
  %69 = load i32, i32* @x.383
  %70 = load i32, i32* @y.384
  %71 = add i32 %69, 1546896611
  %72 = sub i32 %71, 1
  %73 = sub i32 %72, 1546896611
  %74 = sub i32 %69, 1
  %75 = mul i32 %69, %73
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %70, 10
  %79 = and i1 %77, %78
  %80 = xor i1 %77, %78
  %81 = or i1 %79, %80
  %82 = or i1 %77, %78
  %83 = select i1 %81, i32 1522246431, i32 1558952326
  store i32 %83, i32* %8
  br label %150

; <label>:84:                                     ; preds = %9
  %85 = load %struct.ball*, %struct.ball** %6, align 8
  %86 = getelementptr inbounds %struct.ball, %struct.ball* %85, i32 -1
  store %struct.ball* %86, %struct.ball** %6, align 8
  %87 = load %struct.ball*, %struct.ball** %5, align 8
  %88 = load %struct.ball*, %struct.ball** %6, align 8
  %89 = load %struct.ball*, %struct.ball** %6, align 8
  %90 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %7 to i8*
  %91 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %90, i8* %91, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_T0_"(%struct.ball* %87, %struct.ball* %88, %struct.ball* %89)
  %92 = load i32, i32* @x.383
  %93 = load i32, i32* @y.384
  %94 = sub i32 %92, -1646306496
  %95 = sub i32 %94, 1
  %96 = add i32 %95, -1646306496
  %97 = sub i32 %92, 1
  %98 = mul i32 %92, %96
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %93, 10
  %102 = xor i1 %100, true
  %103 = xor i1 %101, true
  %104 = xor i1 false, true
  %105 = and i1 %102, false
  %106 = and i1 %100, %104
  %107 = and i1 %103, false
  %108 = and i1 %101, %104
  %109 = or i1 %105, %106
  %110 = or i1 %107, %108
  %111 = xor i1 %109, %110
  %112 = or i1 %102, %103
  %113 = xor i1 %112, true
  %114 = or i1 false, %104
  %115 = and i1 %113, %114
  %116 = or i1 %111, %115
  %117 = or i1 %100, %101
  %118 = select i1 %116, i32 -123149105, i32 1558952326
  store i32 %118, i32* %8
  br label %150

; <label>:119:                                    ; preds = %9
  store i32 -1158147709, i32* %8
  br label %150

; <label>:120:                                    ; preds = %9
  ret void

; <label>:121:                                    ; preds = %9
  %122 = load %struct.ball*, %struct.ball** %6, align 8
  %123 = load %struct.ball*, %struct.ball** %5, align 8
  %124 = ptrtoint %struct.ball* %122 to i64
  %125 = ptrtoint %struct.ball* %123 to i64
  %126 = shl i64 %124, %125
  %127 = sub i64 %124, 8489684009223525677
  %128 = sub i64 %127, %125
  %129 = add i64 %128, 8489684009223525677
  %130 = sub i64 %124, %125
  %131 = sub i64 0, 16
  %132 = add i64 %129, %131
  %133 = sub i64 %129, 16
  %134 = mul i64 %132, 16
  %135 = sub i64 %129, 5148513523677696859
  %136 = sub i64 %135, 16
  %137 = add i64 %136, 5148513523677696859
  %138 = sub i64 %129, 16
  %139 = mul i64 %137, 16
  %140 = sdiv exact i64 %129, 16
  %141 = icmp sgt i64 %140, 1
  store i32 -2130276047, i32* %8
  br label %150

; <label>:142:                                    ; preds = %9
  %143 = load %struct.ball*, %struct.ball** %6, align 8
  %144 = getelementptr inbounds %struct.ball, %struct.ball* %143, i32 -1
  store %struct.ball* %144, %struct.ball** %6, align 8
  %145 = load %struct.ball*, %struct.ball** %5, align 8
  %146 = load %struct.ball*, %struct.ball** %6, align 8
  %147 = load %struct.ball*, %struct.ball** %6, align 8
  %148 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %7 to i8*
  %149 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %148, i8* %149, i64 1, i32 1, i1 false)
  call void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_T0_"(%struct.ball* %145, %struct.ball* %146, %struct.ball* %147)
  store i32 1522246431, i32* %8
  br label %150

; <label>:150:                                    ; preds = %142, %121, %119, %84, %68, %65, %28, %12, %11
  br label %9
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__make_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca i64
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.ball, align 8
  %11 = alloca %struct.ball, align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %6, align 8
  store %struct.ball* %1, %struct.ball** %7, align 8
  %13 = load %struct.ball*, %struct.ball** %7, align 8
  %14 = load %struct.ball*, %struct.ball** %6, align 8
  %15 = ptrtoint %struct.ball* %13 to i64
  %16 = ptrtoint %struct.ball* %14 to i64
  %17 = add i64 %15, -4579737403107565365
  %18 = sub i64 %17, %16
  %19 = sub i64 %18, -4579737403107565365
  %20 = sub i64 %15, %16
  %21 = sdiv exact i64 %19, 16
  store i64 %21, i64* %4
  %22 = alloca i32
  store i32 -1772510575, i32* %22
  br label %23

; <label>:23:                                     ; preds = %2, %299
  %24 = load i32, i32* %22
  switch i32 %24, label %25 [
    i32 -1772510575, label %26
    i32 -292338892, label %30
    i32 -1179306966, label %31
    i32 742546333, label %59
    i32 -749177767, label %89
    i32 -986680960, label %90
    i32 -402952379, label %105
    i32 -265332545, label %142
    i32 713755682, label %145
    i32 -260175664, label %146
    i32 165490636, label %153
    i32 1423840007, label %154
    i32 990564295, label %277
  ]

; <label>:25:                                     ; preds = %23
  br label %299

; <label>:26:                                     ; preds = %23
  %27 = load volatile i64, i64* %4
  %28 = icmp slt i64 %27, 2
  %29 = select i1 %28, i32 -292338892, i32 -1179306966
  store i32 %29, i32* %22
  br label %299

; <label>:30:                                     ; preds = %23
  store i32 165490636, i32* %22
  br label %299

; <label>:31:                                     ; preds = %23
  %32 = load i32, i32* @x.385
  %33 = load i32, i32* @y.386
  %34 = sub i32 %32, 684481330
  %35 = sub i32 %34, 1
  %36 = add i32 %35, 684481330
  %37 = sub i32 %32, 1
  %38 = mul i32 %32, %36
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %33, 10
  %42 = xor i1 %40, true
  %43 = xor i1 %41, true
  %44 = xor i1 false, true
  %45 = and i1 %42, false
  %46 = and i1 %40, %44
  %47 = and i1 %43, false
  %48 = and i1 %41, %44
  %49 = or i1 %45, %46
  %50 = or i1 %47, %48
  %51 = xor i1 %49, %50
  %52 = or i1 %42, %43
  %53 = xor i1 %52, true
  %54 = or i1 false, %44
  %55 = and i1 %53, %54
  %56 = or i1 %51, %55
  %57 = or i1 %40, %41
  %58 = select i1 %56, i32 742546333, i32 1423840007
  store i32 %58, i32* %22
  br label %299

; <label>:59:                                     ; preds = %23
  %60 = load %struct.ball*, %struct.ball** %7, align 8
  %61 = load %struct.ball*, %struct.ball** %6, align 8
  %62 = ptrtoint %struct.ball* %60 to i64
  %63 = ptrtoint %struct.ball* %61 to i64
  %64 = sub i64 %62, 6816628966249750574
  %65 = sub i64 %64, %63
  %66 = add i64 %65, 6816628966249750574
  %67 = sub i64 %62, %63
  %68 = sdiv exact i64 %66, 16
  store i64 %68, i64* %8, align 8
  %69 = load i64, i64* %8, align 8
  %70 = sub i64 %69, -3691417147333718643
  %71 = sub i64 %70, 2
  %72 = add i64 %71, -3691417147333718643
  %73 = sub nsw i64 %69, 2
  %74 = sdiv i64 %72, 2
  store i64 %74, i64* %9, align 8
  %75 = load i32, i32* @x.385
  %76 = load i32, i32* @y.386
  %77 = sub i32 0, 1
  %78 = add i32 %75, %77
  %79 = sub i32 %75, 1
  %80 = mul i32 %75, %78
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %76, 10
  %84 = and i1 %82, %83
  %85 = xor i1 %82, %83
  %86 = or i1 %84, %85
  %87 = or i1 %82, %83
  %88 = select i1 %86, i32 -749177767, i32 1423840007
  store i32 %88, i32* %22
  br label %299

; <label>:89:                                     ; preds = %23
  store i32 -986680960, i32* %22
  br label %299

; <label>:90:                                     ; preds = %23
  %91 = load i32, i32* @x.385
  %92 = load i32, i32* @y.386
  %93 = sub i32 0, 1
  %94 = add i32 %91, %93
  %95 = sub i32 %91, 1
  %96 = mul i32 %91, %94
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %92, 10
  %100 = and i1 %98, %99
  %101 = xor i1 %98, %99
  %102 = or i1 %100, %101
  %103 = or i1 %98, %99
  %104 = select i1 %102, i32 -402952379, i32 990564295
  store i32 %104, i32* %22
  br label %299

; <label>:105:                                    ; preds = %23
  %106 = load %struct.ball*, %struct.ball** %6, align 8
  %107 = load i64, i64* %9, align 8
  %108 = getelementptr inbounds %struct.ball, %struct.ball* %106, i64 %107
  %109 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %108) #3
  %110 = bitcast %struct.ball* %10 to i8*
  %111 = bitcast %struct.ball* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %110, i8* %111, i64 16, i32 8, i1 false)
  %112 = load %struct.ball*, %struct.ball** %6, align 8
  %113 = load i64, i64* %9, align 8
  %114 = load i64, i64* %8, align 8
  %115 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %10) #3
  %116 = bitcast %struct.ball* %11 to i8*
  %117 = bitcast %struct.ball* %115 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %116, i8* %117, i64 16, i32 8, i1 false)
  %118 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %12 to i8*
  %119 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %118, i8* %119, i64 1, i32 1, i1 false)
  %120 = bitcast %struct.ball* %11 to { i64, i64 }*
  %121 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %120, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %120, i32 0, i32 1
  %124 = load i64, i64* %123, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_T0_S8_T1_T2_"(%struct.ball* %112, i64 %113, i64 %114, i64 %122, i64 %124)
  %125 = load i64, i64* %9, align 8
  %126 = icmp eq i64 %125, 0
  store i1 %126, i1* %3
  %127 = load i32, i32* @x.385
  %128 = load i32, i32* @y.386
  %129 = add i32 %127, -1290875221
  %130 = sub i32 %129, 1
  %131 = sub i32 %130, -1290875221
  %132 = sub i32 %127, 1
  %133 = mul i32 %127, %131
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %128, 10
  %137 = and i1 %135, %136
  %138 = xor i1 %135, %136
  %139 = or i1 %137, %138
  %140 = or i1 %135, %136
  %141 = select i1 %139, i32 -265332545, i32 990564295
  store i32 %141, i32* %22
  br label %299

; <label>:142:                                    ; preds = %23
  %143 = load volatile i1, i1* %3
  %144 = select i1 %143, i32 713755682, i32 -260175664
  store i32 %144, i32* %22
  br label %299

; <label>:145:                                    ; preds = %23
  store i32 165490636, i32* %22
  br label %299

; <label>:146:                                    ; preds = %23
  %147 = load i64, i64* %9, align 8
  %148 = sub i64 0, %147
  %149 = sub i64 0, -1
  %150 = add i64 %148, %149
  %151 = sub i64 0, %150
  %152 = add nsw i64 %147, -1
  store i64 %151, i64* %9, align 8
  store i32 -986680960, i32* %22
  br label %299

; <label>:153:                                    ; preds = %23
  ret void

; <label>:154:                                    ; preds = %23
  %155 = load %struct.ball*, %struct.ball** %7, align 8
  %156 = load %struct.ball*, %struct.ball** %6, align 8
  %157 = ptrtoint %struct.ball* %155 to i64
  %158 = ptrtoint %struct.ball* %156 to i64
  %159 = add i64 0, 9076916528288668678
  %160 = sub i64 %159, %157
  %161 = sub i64 %160, 9076916528288668678
  %162 = sub i64 0, %157
  %163 = sub i64 %161, -4670761562331967852
  %164 = add i64 %163, %158
  %165 = add i64 %164, -4670761562331967852
  %166 = add i64 %161, %158
  %167 = sub i64 0, 9120192427445911526
  %168 = sub i64 %167, %157
  %169 = add i64 %168, 9120192427445911526
  %170 = sub i64 0, %157
  %171 = sub i64 %169, 5214368140381227169
  %172 = add i64 %171, %158
  %173 = add i64 %172, 5214368140381227169
  %174 = add i64 %169, %158
  %175 = shl i64 %157, %158
  %176 = add i64 0, 9035557648722611838
  %177 = sub i64 %176, %157
  %178 = sub i64 %177, 9035557648722611838
  %179 = sub i64 0, %157
  %180 = sub i64 0, %178
  %181 = sub i64 0, %158
  %182 = add i64 %180, %181
  %183 = sub i64 0, %182
  %184 = add i64 %178, %158
  %185 = add i64 %157, -497851343253696537
  %186 = sub i64 %185, %158
  %187 = sub i64 %186, -497851343253696537
  %188 = sub i64 %157, %158
  %189 = shl i64 %187, 16
  %190 = sub i64 %187, -4376331397369416755
  %191 = sub i64 %190, 16
  %192 = add i64 %191, -4376331397369416755
  %193 = sub i64 %187, 16
  %194 = mul i64 %192, 16
  %195 = shl i64 %187, 16
  %196 = sub i64 0, 7592869028638083937
  %197 = sub i64 %196, %187
  %198 = add i64 %197, 7592869028638083937
  %199 = sub i64 0, %187
  %200 = sub i64 %198, 2011437411198850434
  %201 = add i64 %200, 16
  %202 = add i64 %201, 2011437411198850434
  %203 = add i64 %198, 16
  %204 = sub i64 %187, 8769261143797410575
  %205 = sub i64 %204, 16
  %206 = add i64 %205, 8769261143797410575
  %207 = sub i64 %187, 16
  %208 = mul i64 %206, 16
  %209 = add i64 %187, 498038955438292549
  %210 = sub i64 %209, 16
  %211 = sub i64 %210, 498038955438292549
  %212 = sub i64 %187, 16
  %213 = mul i64 %211, 16
  %214 = sdiv exact i64 %187, 16
  store i64 %214, i64* %8, align 8
  %215 = load i64, i64* %8, align 8
  %216 = sub i64 0, -6251857862836825674
  %217 = sub i64 %216, %215
  %218 = add i64 %217, -6251857862836825674
  %219 = sub i64 0, %215
  %220 = sub i64 0, %218
  %221 = sub i64 0, 2
  %222 = add i64 %220, %221
  %223 = sub i64 0, %222
  %224 = add i64 %218, 2
  %225 = sub i64 0, 2
  %226 = add i64 %215, %225
  %227 = sub i64 %215, 2
  %228 = mul i64 %226, 2
  %229 = shl i64 %215, 2
  %230 = sub i64 0, %215
  %231 = add i64 0, %230
  %232 = sub i64 0, %215
  %233 = sub i64 0, 2
  %234 = sub i64 %231, %233
  %235 = add i64 %231, 2
  %236 = sub i64 %215, 3874962972504042681
  %237 = sub i64 %236, 2
  %238 = add i64 %237, 3874962972504042681
  %239 = sub nsw i64 %215, 2
  %240 = add i64 0, 8211185741758149033
  %241 = sub i64 %240, %238
  %242 = sub i64 %241, 8211185741758149033
  %243 = sub i64 0, %238
  %244 = add i64 %242, 4207684660452459127
  %245 = add i64 %244, 2
  %246 = sub i64 %245, 4207684660452459127
  %247 = add i64 %242, 2
  %248 = sub i64 0, 2
  %249 = add i64 %238, %248
  %250 = sub i64 %238, 2
  %251 = mul i64 %249, 2
  %252 = sub i64 0, %238
  %253 = add i64 0, %252
  %254 = sub i64 0, %238
  %255 = sub i64 0, 2
  %256 = sub i64 %253, %255
  %257 = add i64 %253, 2
  %258 = sub i64 0, 2422483315006813039
  %259 = sub i64 %258, %238
  %260 = add i64 %259, 2422483315006813039
  %261 = sub i64 0, %238
  %262 = sub i64 %260, -658878107380427605
  %263 = add i64 %262, 2
  %264 = add i64 %263, -658878107380427605
  %265 = add i64 %260, 2
  %266 = sub i64 0, 2
  %267 = add i64 %238, %266
  %268 = sub i64 %238, 2
  %269 = mul i64 %267, 2
  %270 = sub i64 0, %238
  %271 = add i64 0, %270
  %272 = sub i64 0, %238
  %273 = sub i64 0, 2
  %274 = sub i64 %271, %273
  %275 = add i64 %271, 2
  %276 = sdiv i64 %238, 2
  store i64 %276, i64* %9, align 8
  store i32 742546333, i32* %22
  br label %299

; <label>:277:                                    ; preds = %23
  %278 = load %struct.ball*, %struct.ball** %6, align 8
  %279 = load i64, i64* %9, align 8
  %280 = getelementptr inbounds %struct.ball, %struct.ball* %278, i64 %279
  %281 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %280) #3
  %282 = bitcast %struct.ball* %10 to i8*
  %283 = bitcast %struct.ball* %281 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %282, i8* %283, i64 16, i32 8, i1 false)
  %284 = load %struct.ball*, %struct.ball** %6, align 8
  %285 = load i64, i64* %9, align 8
  %286 = load i64, i64* %8, align 8
  %287 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %10) #3
  %288 = bitcast %struct.ball* %11 to i8*
  %289 = bitcast %struct.ball* %287 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %288, i8* %289, i64 16, i32 8, i1 false)
  %290 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %12 to i8*
  %291 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %290, i8* %291, i64 1, i32 1, i1 false)
  %292 = bitcast %struct.ball* %11 to { i64, i64 }*
  %293 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %292, i32 0, i32 0
  %294 = load i64, i64* %293, align 8
  %295 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %292, i32 0, i32 1
  %296 = load i64, i64* %295, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_T0_S8_T1_T2_"(%struct.ball* %284, i64 %285, i64 %286, i64 %294, i64 %296)
  %297 = load i64, i64* %9, align 8
  %298 = icmp eq i64 %297, 0
  store i32 -402952379, i32* %22
  br label %299

; <label>:299:                                    ; preds = %277, %154, %146, %145, %142, %105, %90, %89, %59, %31, %30, %26, %25
  br label %23
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %struct.ball*, %struct.ball*) #4 align 2 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, align 8
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %4, align 8
  store %struct.ball* %1, %struct.ball** %5, align 8
  store %struct.ball* %2, %struct.ball** %6, align 8
  %7 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %4, align 8
  %8 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %7, i32 0, i32 0
  %9 = load %struct.ball*, %struct.ball** %5, align 8
  %10 = load %struct.ball*, %struct.ball** %6, align 8
  %11 = call zeroext i1 @"_ZZ4mainENK3$_2clERK4ballS2_"(%class.anon.2* %8, %struct.ball* dereferenceable(16) %9, %struct.ball* dereferenceable(16) %10)
  ret i1 %11
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt10__pop_heapIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #0 {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %struct.ball, align 8
  %9 = alloca %struct.ball, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  store %struct.ball* %2, %struct.ball** %7, align 8
  %11 = load %struct.ball*, %struct.ball** %7, align 8
  %12 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %11) #3
  %13 = bitcast %struct.ball* %8 to i8*
  %14 = bitcast %struct.ball* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  %15 = load %struct.ball*, %struct.ball** %5, align 8
  %16 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %15) #3
  %17 = load %struct.ball*, %struct.ball** %7, align 8
  %18 = bitcast %struct.ball* %17 to i8*
  %19 = bitcast %struct.ball* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 16, i32 8, i1 false)
  %20 = load %struct.ball*, %struct.ball** %5, align 8
  %21 = load %struct.ball*, %struct.ball** %6, align 8
  %22 = load %struct.ball*, %struct.ball** %5, align 8
  %23 = ptrtoint %struct.ball* %21 to i64
  %24 = ptrtoint %struct.ball* %22 to i64
  %25 = sub i64 0, %24
  %26 = add i64 %23, %25
  %27 = sub i64 %23, %24
  %28 = sdiv exact i64 %26, 16
  %29 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %8) #3
  %30 = bitcast %struct.ball* %9 to i8*
  %31 = bitcast %struct.ball* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false)
  %32 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %10 to i8*
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 1, i32 1, i1 false)
  %34 = bitcast %struct.ball* %9 to { i64, i64 }*
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  call void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_T0_S8_T1_T2_"(%struct.ball* %20, i64 0, i64 %28, i64 %36, i64 %38)
  ret void
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt13__adjust_heapIP4balllS0_N9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_T0_S8_T1_T2_"(%struct.ball*, i64, i64, i64, i64) #0 {
  %6 = alloca i1
  %7 = alloca %struct.ball, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %9 = alloca %struct.ball*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %struct.ball, align 8
  %15 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.12", align 1
  %16 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %17 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.12", align 1
  %18 = bitcast %struct.ball* %7 to { i64, i64 }*
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 0
  store i64 %3, i64* %19, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %18, i32 0, i32 1
  store i64 %4, i64* %20, align 8
  store %struct.ball* %0, %struct.ball** %9, align 8
  store i64 %1, i64* %10, align 8
  store i64 %2, i64* %11, align 8
  %21 = load i64, i64* %10, align 8
  store i64 %21, i64* %12, align 8
  %22 = load i64, i64* %10, align 8
  store i64 %22, i64* %13, align 8
  %23 = alloca i32
  store i32 -136683497, i32* %23
  br label %24

; <label>:24:                                     ; preds = %5, %310
  %25 = load i32, i32* %23
  switch i32 %25, label %26 [
    i32 -136683497, label %27
    i32 1278617094, label %37
    i32 -66517777, label %53
    i32 -869465395, label %98
    i32 1601475748, label %101
    i32 825739356, label %107
    i32 774707060, label %118
    i32 1270374183, label %126
    i32 -2040521643, label %135
    i32 895294443, label %157
    i32 -2045619084, label %184
    i32 126303156, label %213
    i32 1850447813, label %214
    i32 -1427611182, label %296
  ]

; <label>:26:                                     ; preds = %24
  br label %310

; <label>:27:                                     ; preds = %24
  %28 = load i64, i64* %13, align 8
  %29 = load i64, i64* %11, align 8
  %30 = add i64 %29, 4519346159821890851
  %31 = sub i64 %30, 1
  %32 = sub i64 %31, 4519346159821890851
  %33 = sub nsw i64 %29, 1
  %34 = sdiv i64 %32, 2
  %35 = icmp slt i64 %28, %34
  %36 = select i1 %35, i32 1278617094, i32 774707060
  store i32 %36, i32* %23
  br label %310

; <label>:37:                                     ; preds = %24
  %38 = load i32, i32* @x.391
  %39 = load i32, i32* @y.392
  %40 = sub i32 %38, -782291513
  %41 = sub i32 %40, 1
  %42 = add i32 %41, -782291513
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = and i1 %46, %47
  %49 = xor i1 %46, %47
  %50 = or i1 %48, %49
  %51 = or i1 %46, %47
  %52 = select i1 %50, i32 -66517777, i32 1850447813
  store i32 %52, i32* %23
  br label %310

; <label>:53:                                     ; preds = %24
  %54 = load i64, i64* %13, align 8
  %55 = sub i64 0, %54
  %56 = sub i64 0, 1
  %57 = add i64 %55, %56
  %58 = sub i64 0, %57
  %59 = add nsw i64 %54, 1
  %60 = mul nsw i64 2, %58
  store i64 %60, i64* %13, align 8
  %61 = load %struct.ball*, %struct.ball** %9, align 8
  %62 = load i64, i64* %13, align 8
  %63 = getelementptr inbounds %struct.ball, %struct.ball* %61, i64 %62
  %64 = load %struct.ball*, %struct.ball** %9, align 8
  %65 = load i64, i64* %13, align 8
  %66 = sub i64 %65, 3832512682093372063
  %67 = sub i64 %66, 1
  %68 = add i64 %67, 3832512682093372063
  %69 = sub nsw i64 %65, 1
  %70 = getelementptr inbounds %struct.ball, %struct.ball* %64, i64 %68
  %71 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %8, %struct.ball* %63, %struct.ball* %70)
  store i1 %71, i1* %6
  %72 = load i32, i32* @x.391
  %73 = load i32, i32* @y.392
  %74 = sub i32 0, 1
  %75 = add i32 %72, %74
  %76 = sub i32 %72, 1
  %77 = mul i32 %72, %75
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %73, 10
  %81 = xor i1 %79, true
  %82 = xor i1 %80, true
  %83 = xor i1 false, true
  %84 = and i1 %81, false
  %85 = and i1 %79, %83
  %86 = and i1 %82, false
  %87 = and i1 %80, %83
  %88 = or i1 %84, %85
  %89 = or i1 %86, %87
  %90 = xor i1 %88, %89
  %91 = or i1 %81, %82
  %92 = xor i1 %91, true
  %93 = or i1 false, %83
  %94 = and i1 %92, %93
  %95 = or i1 %90, %94
  %96 = or i1 %79, %80
  %97 = select i1 %95, i32 -869465395, i32 1850447813
  store i32 %97, i32* %23
  br label %310

; <label>:98:                                     ; preds = %24
  %99 = load volatile i1, i1* %6
  %100 = select i1 %99, i32 1601475748, i32 825739356
  store i32 %100, i32* %23
  br label %310

; <label>:101:                                    ; preds = %24
  %102 = load i64, i64* %13, align 8
  %103 = add i64 %102, 6006417387923727400
  %104 = add i64 %103, -1
  %105 = sub i64 %104, 6006417387923727400
  %106 = add nsw i64 %102, -1
  store i64 %105, i64* %13, align 8
  store i32 825739356, i32* %23
  br label %310

; <label>:107:                                    ; preds = %24
  %108 = load %struct.ball*, %struct.ball** %9, align 8
  %109 = load i64, i64* %13, align 8
  %110 = getelementptr inbounds %struct.ball, %struct.ball* %108, i64 %109
  %111 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %110) #3
  %112 = load %struct.ball*, %struct.ball** %9, align 8
  %113 = load i64, i64* %10, align 8
  %114 = getelementptr inbounds %struct.ball, %struct.ball* %112, i64 %113
  %115 = bitcast %struct.ball* %114 to i8*
  %116 = bitcast %struct.ball* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %115, i8* %116, i64 16, i32 8, i1 false)
  %117 = load i64, i64* %13, align 8
  store i64 %117, i64* %10, align 8
  store i32 -136683497, i32* %23
  br label %310

; <label>:118:                                    ; preds = %24
  %119 = load i64, i64* %11, align 8
  %120 = xor i64 1, -1
  %121 = xor i64 %119, %120
  %122 = and i64 %121, %119
  %123 = and i64 %119, 1
  %124 = icmp eq i64 %122, 0
  %125 = select i1 %124, i32 1270374183, i32 895294443
  store i32 %125, i32* %23
  br label %310

; <label>:126:                                    ; preds = %24
  %127 = load i64, i64* %13, align 8
  %128 = load i64, i64* %11, align 8
  %129 = sub i64 0, 2
  %130 = add i64 %128, %129
  %131 = sub nsw i64 %128, 2
  %132 = sdiv i64 %130, 2
  %133 = icmp eq i64 %127, %132
  %134 = select i1 %133, i32 -2040521643, i32 895294443
  store i32 %134, i32* %23
  br label %310

; <label>:135:                                    ; preds = %24
  %136 = load i64, i64* %13, align 8
  %137 = sub i64 0, 1
  %138 = sub i64 %136, %137
  %139 = add nsw i64 %136, 1
  %140 = mul nsw i64 2, %138
  store i64 %140, i64* %13, align 8
  %141 = load %struct.ball*, %struct.ball** %9, align 8
  %142 = load i64, i64* %13, align 8
  %143 = sub i64 0, 1
  %144 = add i64 %142, %143
  %145 = sub nsw i64 %142, 1
  %146 = getelementptr inbounds %struct.ball, %struct.ball* %141, i64 %144
  %147 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %146) #3
  %148 = load %struct.ball*, %struct.ball** %9, align 8
  %149 = load i64, i64* %10, align 8
  %150 = getelementptr inbounds %struct.ball, %struct.ball* %148, i64 %149
  %151 = bitcast %struct.ball* %150 to i8*
  %152 = bitcast %struct.ball* %147 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %151, i8* %152, i64 16, i32 8, i1 false)
  %153 = load i64, i64* %13, align 8
  %154 = sub i64 0, 1
  %155 = add i64 %153, %154
  %156 = sub nsw i64 %153, 1
  store i64 %155, i64* %10, align 8
  store i32 895294443, i32* %23
  br label %310

; <label>:157:                                    ; preds = %24
  %158 = load i32, i32* @x.391
  %159 = load i32, i32* @y.392
  %160 = sub i32 0, 1
  %161 = add i32 %158, %160
  %162 = sub i32 %158, 1
  %163 = mul i32 %158, %161
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %159, 10
  %167 = xor i1 %165, true
  %168 = xor i1 %166, true
  %169 = xor i1 true, true
  %170 = and i1 %167, true
  %171 = and i1 %165, %169
  %172 = and i1 %168, true
  %173 = and i1 %166, %169
  %174 = or i1 %170, %171
  %175 = or i1 %172, %173
  %176 = xor i1 %174, %175
  %177 = or i1 %167, %168
  %178 = xor i1 %177, true
  %179 = or i1 true, %169
  %180 = and i1 %178, %179
  %181 = or i1 %176, %180
  %182 = or i1 %165, %166
  %183 = select i1 %181, i32 -2045619084, i32 -1427611182
  store i32 %183, i32* %23
  br label %310

; <label>:184:                                    ; preds = %24
  %185 = load %struct.ball*, %struct.ball** %9, align 8
  %186 = load i64, i64* %10, align 8
  %187 = load i64, i64* %12, align 8
  %188 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %7) #3
  %189 = bitcast %struct.ball* %14 to i8*
  %190 = bitcast %struct.ball* %188 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %189, i8* %190, i64 16, i32 8, i1 false)
  %191 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %16 to i8*
  %192 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %191, i8* %192, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__iter_comp_valIZ4mainE3$_2EENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS4_EE"()
  %193 = bitcast %struct.ball* %14 to { i64, i64 }*
  %194 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %193, i32 0, i32 0
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %193, i32 0, i32 1
  %197 = load i64, i64* %196, align 8
  call void @"_ZSt11__push_heapIP4balllS0_N9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_2EEEvT_T0_S8_T1_T2_"(%struct.ball* %185, i64 %186, i64 %187, i64 %195, i64 %197)
  %198 = load i32, i32* @x.391
  %199 = load i32, i32* @y.392
  %200 = add i32 %198, 1697697181
  %201 = sub i32 %200, 1
  %202 = sub i32 %201, 1697697181
  %203 = sub i32 %198, 1
  %204 = mul i32 %198, %202
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %199, 10
  %208 = and i1 %206, %207
  %209 = xor i1 %206, %207
  %210 = or i1 %208, %209
  %211 = or i1 %206, %207
  %212 = select i1 %210, i32 126303156, i32 -1427611182
  store i32 %212, i32* %23
  br label %310

; <label>:213:                                    ; preds = %24
  ret void

; <label>:214:                                    ; preds = %24
  %215 = load i64, i64* %13, align 8
  %216 = shl i64 %215, 1
  %217 = shl i64 %215, 1
  %218 = sub i64 0, 1
  %219 = add i64 %215, %218
  %220 = sub i64 %215, 1
  %221 = mul i64 %219, 1
  %222 = sub i64 0, %215
  %223 = add i64 0, %222
  %224 = sub i64 0, %215
  %225 = add i64 %223, 2366974688204223372
  %226 = add i64 %225, 1
  %227 = sub i64 %226, 2366974688204223372
  %228 = add i64 %223, 1
  %229 = sub i64 0, 1
  %230 = add i64 %215, %229
  %231 = sub i64 %215, 1
  %232 = mul i64 %230, 1
  %233 = sub i64 0, %215
  %234 = sub i64 0, 1
  %235 = add i64 %233, %234
  %236 = sub i64 0, %235
  %237 = add nsw i64 %215, 1
  %238 = add i64 0, 2522799730976208591
  %239 = sub i64 %238, 2
  %240 = sub i64 %239, 2522799730976208591
  %241 = sub i64 0, 2
  %242 = sub i64 0, %236
  %243 = sub i64 %240, %242
  %244 = add i64 %240, %236
  %245 = sub i64 0, %236
  %246 = add i64 2, %245
  %247 = sub i64 2, %236
  %248 = mul i64 %246, %236
  %249 = shl i64 2, %236
  %250 = shl i64 2, %236
  %251 = sub i64 0, 4466863574859180140
  %252 = sub i64 %251, 2
  %253 = add i64 %252, 4466863574859180140
  %254 = sub i64 0, 2
  %255 = sub i64 %253, 1406598916637576769
  %256 = add i64 %255, %236
  %257 = add i64 %256, 1406598916637576769
  %258 = add i64 %253, %236
  %259 = sub i64 0, %236
  %260 = add i64 2, %259
  %261 = sub i64 2, %236
  %262 = mul i64 %260, %236
  %263 = mul nsw i64 2, %236
  store i64 %263, i64* %13, align 8
  %264 = load %struct.ball*, %struct.ball** %9, align 8
  %265 = load i64, i64* %13, align 8
  %266 = getelementptr inbounds %struct.ball, %struct.ball* %264, i64 %265
  %267 = load %struct.ball*, %struct.ball** %9, align 8
  %268 = load i64, i64* %13, align 8
  %269 = sub i64 0, -4448010412810529469
  %270 = sub i64 %269, %268
  %271 = add i64 %270, -4448010412810529469
  %272 = sub i64 0, %268
  %273 = sub i64 %271, -4179734730746688830
  %274 = add i64 %273, 1
  %275 = add i64 %274, -4179734730746688830
  %276 = add i64 %271, 1
  %277 = add i64 0, -2437618868745464194
  %278 = sub i64 %277, %268
  %279 = sub i64 %278, -2437618868745464194
  %280 = sub i64 0, %268
  %281 = sub i64 0, 1
  %282 = sub i64 %279, %281
  %283 = add i64 %279, 1
  %284 = shl i64 %268, 1
  %285 = sub i64 %268, -3220346800426996263
  %286 = sub i64 %285, 1
  %287 = add i64 %286, -3220346800426996263
  %288 = sub i64 %268, 1
  %289 = mul i64 %287, 1
  %290 = add i64 %268, 1157617114588863735
  %291 = sub i64 %290, 1
  %292 = sub i64 %291, 1157617114588863735
  %293 = sub nsw i64 %268, 1
  %294 = getelementptr inbounds %struct.ball, %struct.ball* %267, i64 %292
  %295 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %8, %struct.ball* %266, %struct.ball* %294)
  store i32 -66517777, i32* %23
  br label %310

; <label>:296:                                    ; preds = %24
  %297 = load %struct.ball*, %struct.ball** %9, align 8
  %298 = load i64, i64* %10, align 8
  %299 = load i64, i64* %12, align 8
  %300 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %7) #3
  %301 = bitcast %struct.ball* %14 to i8*
  %302 = bitcast %struct.ball* %300 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %301, i8* %302, i64 16, i32 8, i1 false)
  %303 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %16 to i8*
  %304 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %303, i8* %304, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__iter_comp_valIZ4mainE3$_2EENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS4_EE"()
  %305 = bitcast %struct.ball* %14 to { i64, i64 }*
  %306 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %305, i32 0, i32 0
  %307 = load i64, i64* %306, align 8
  %308 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %305, i32 0, i32 1
  %309 = load i64, i64* %308, align 8
  call void @"_ZSt11__push_heapIP4balllS0_N9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_2EEEvT_T0_S8_T1_T2_"(%struct.ball* %297, i64 %298, i64 %299, i64 %307, i64 %309)
  store i32 -2045619084, i32* %23
  br label %310

; <label>:310:                                    ; preds = %296, %214, %184, %157, %135, %126, %118, %107, %101, %98, %53, %37, %27, %26
  br label %24
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt11__push_heapIP4balllS0_N9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_2EEEvT_T0_S8_T1_T2_"(%struct.ball*, i64, i64, i64, i64) #0 {
  %6 = alloca %struct.ball, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.12", align 1
  %8 = alloca %struct.ball*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = bitcast %struct.ball* %6 to { i64, i64 }*
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0
  store i64 %3, i64* %13, align 8
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1
  store i64 %4, i64* %14, align 8
  store %struct.ball* %0, %struct.ball** %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  %15 = load i64, i64* %9, align 8
  %16 = add i64 %15, -6587168089599994924
  %17 = sub i64 %16, 1
  %18 = sub i64 %17, -6587168089599994924
  %19 = sub nsw i64 %15, 1
  %20 = sdiv i64 %18, 2
  store i64 %20, i64* %11, align 8
  %21 = alloca i32
  store i32 -1460392832, i32* %21
  %22 = alloca i1
  br label %23

; <label>:23:                                     ; preds = %5, %63
  %24 = load i32, i32* %21
  switch i32 %24, label %25 [
    i32 -1460392832, label %26
    i32 -1204219890, label %31
    i32 -247431348, label %36
    i32 -508208411, label %39
    i32 -1555908000, label %56
  ]

; <label>:25:                                     ; preds = %23
  br label %63

; <label>:26:                                     ; preds = %23
  %27 = load i64, i64* %9, align 8
  %28 = load i64, i64* %10, align 8
  %29 = icmp sgt i64 %27, %28
  %30 = select i1 %29, i32 -1204219890, i32 -247431348
  store i32 %30, i32* %21
  store i1 false, i1* %22
  br label %63

; <label>:31:                                     ; preds = %23
  %32 = load %struct.ball*, %struct.ball** %8, align 8
  %33 = load i64, i64* %11, align 8
  %34 = getelementptr inbounds %struct.ball, %struct.ball* %32, i64 %33
  %35 = call zeroext i1 @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_2EclIP4ballS5_EEbT_RT0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %7, %struct.ball* %34, %struct.ball* dereferenceable(16) %6)
  store i32 -247431348, i32* %21
  store i1 %35, i1* %22
  br label %63

; <label>:36:                                     ; preds = %23
  %37 = load i1, i1* %22
  %38 = select i1 %37, i32 -508208411, i32 -1555908000
  store i32 %38, i32* %21
  br label %63

; <label>:39:                                     ; preds = %23
  %40 = load %struct.ball*, %struct.ball** %8, align 8
  %41 = load i64, i64* %11, align 8
  %42 = getelementptr inbounds %struct.ball, %struct.ball* %40, i64 %41
  %43 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %42) #3
  %44 = load %struct.ball*, %struct.ball** %8, align 8
  %45 = load i64, i64* %9, align 8
  %46 = getelementptr inbounds %struct.ball, %struct.ball* %44, i64 %45
  %47 = bitcast %struct.ball* %46 to i8*
  %48 = bitcast %struct.ball* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 16, i32 8, i1 false)
  %49 = load i64, i64* %11, align 8
  store i64 %49, i64* %9, align 8
  %50 = load i64, i64* %9, align 8
  %51 = sub i64 %50, 747867615835059498
  %52 = sub i64 %51, 1
  %53 = add i64 %52, 747867615835059498
  %54 = sub nsw i64 %50, 1
  %55 = sdiv i64 %53, 2
  store i64 %55, i64* %11, align 8
  store i32 -1460392832, i32* %21
  br label %63

; <label>:56:                                     ; preds = %23
  %57 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %6) #3
  %58 = load %struct.ball*, %struct.ball** %8, align 8
  %59 = load i64, i64* %9, align 8
  %60 = getelementptr inbounds %struct.ball, %struct.ball* %58, i64 %59
  %61 = bitcast %struct.ball* %60 to i8*
  %62 = bitcast %struct.ball* %57 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 16, i32 8, i1 false)
  ret void

; <label>:63:                                     ; preds = %39, %36, %31, %26, %25
  br label %23
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops15__iter_comp_valIZ4mainE3$_2EENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS4_EE"() #0 {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.395
  %4 = load i32, i32* @y.396
  %5 = add i32 %3, -491839527
  %6 = sub i32 %5, 1
  %7 = sub i32 %6, -491839527
  %8 = sub i32 %3, 1
  %9 = mul i32 %3, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %2
  %12 = icmp slt i32 %4, 10
  store i1 %12, i1* %1
  %13 = alloca i32
  store i32 -308283926, i32* %13
  br label %14

; <label>:14:                                     ; preds = %0, %75
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -308283926, label %17
    i32 966476491, label %37
    i32 1672001637, label %69
    i32 1032219494, label %70
  ]

; <label>:16:                                     ; preds = %14
  br label %75

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %2
  %19 = load volatile i1, i1* %1
  %20 = xor i1 %18, true
  %21 = xor i1 %19, true
  %22 = xor i1 true, true
  %23 = and i1 %20, true
  %24 = and i1 %18, %22
  %25 = and i1 %21, true
  %26 = and i1 %19, %22
  %27 = or i1 %23, %24
  %28 = or i1 %25, %26
  %29 = xor i1 %27, %28
  %30 = or i1 %20, %21
  %31 = xor i1 %30, true
  %32 = or i1 true, %22
  %33 = and i1 %31, %32
  %34 = or i1 %29, %33
  %35 = or i1 %18, %19
  %36 = select i1 %34, i32 966476491, i32 1032219494
  store i32 %36, i32* %13
  br label %75

; <label>:37:                                     ; preds = %14
  %38 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.12", align 1
  %39 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %40 = alloca %class.anon.2, align 1
  %41 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %39, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_2EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %38)
  %42 = load i32, i32* @x.395
  %43 = load i32, i32* @y.396
  %44 = add i32 %42, -1503474181
  %45 = sub i32 %44, 1
  %46 = sub i32 %45, -1503474181
  %47 = sub i32 %42, 1
  %48 = mul i32 %42, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %43, 10
  %52 = xor i1 %50, true
  %53 = xor i1 %51, true
  %54 = xor i1 true, true
  %55 = and i1 %52, true
  %56 = and i1 %50, %54
  %57 = and i1 %53, true
  %58 = and i1 %51, %54
  %59 = or i1 %55, %56
  %60 = or i1 %57, %58
  %61 = xor i1 %59, %60
  %62 = or i1 %52, %53
  %63 = xor i1 %62, true
  %64 = or i1 true, %54
  %65 = and i1 %63, %64
  %66 = or i1 %61, %65
  %67 = or i1 %50, %51
  %68 = select i1 %66, i32 1672001637, i32 1032219494
  store i32 %68, i32* %13
  br label %75

; <label>:69:                                     ; preds = %14
  ret void

; <label>:70:                                     ; preds = %14
  %71 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.12", align 1
  %72 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %73 = alloca %class.anon.2, align 1
  %74 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %72, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_2EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %71)
  store i32 966476491, i32* %13
  br label %75

; <label>:75:                                     ; preds = %70, %37, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_2EclIP4ballS5_EEbT_RT0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.12"*, %struct.ball*, %struct.ball* dereferenceable(16)) #0 align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.397
  %8 = load i32, i32* @y.398
  %9 = add i32 %7, -807385192
  %10 = sub i32 %9, 1
  %11 = sub i32 %10, -807385192
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 -45375638, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %88
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -45375638, label %21
    i32 705611326, label %41
    i32 1012139261, label %77
    i32 249162713, label %79
  ]

; <label>:20:                                     ; preds = %18
  br label %88

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = xor i1 %22, true
  %25 = xor i1 %23, true
  %26 = xor i1 true, true
  %27 = and i1 %24, true
  %28 = and i1 %22, %26
  %29 = and i1 %25, true
  %30 = and i1 %23, %26
  %31 = or i1 %27, %28
  %32 = or i1 %29, %30
  %33 = xor i1 %31, %32
  %34 = or i1 %24, %25
  %35 = xor i1 %34, true
  %36 = or i1 true, %26
  %37 = and i1 %35, %36
  %38 = or i1 %33, %37
  %39 = or i1 %22, %23
  %40 = select i1 %38, i32 705611326, i32 249162713
  store i32 %40, i32* %17
  br label %88

; <label>:41:                                     ; preds = %18
  %42 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"*, align 8
  %43 = alloca %struct.ball*, align 8
  %44 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"** %42, align 8
  store %struct.ball* %1, %struct.ball** %43, align 8
  store %struct.ball* %2, %struct.ball** %44, align 8
  %45 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"** %42, align 8
  %46 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val.12", %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %45, i32 0, i32 0
  %47 = load %struct.ball*, %struct.ball** %43, align 8
  %48 = load %struct.ball*, %struct.ball** %44, align 8
  %49 = call zeroext i1 @"_ZZ4mainENK3$_2clERK4ballS2_"(%class.anon.2* %46, %struct.ball* dereferenceable(16) %47, %struct.ball* dereferenceable(16) %48)
  store i1 %49, i1* %4
  %50 = load i32, i32* @x.397
  %51 = load i32, i32* @y.398
  %52 = add i32 %50, -1804883978
  %53 = sub i32 %52, 1
  %54 = sub i32 %53, -1804883978
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = xor i1 %58, true
  %61 = xor i1 %59, true
  %62 = xor i1 true, true
  %63 = and i1 %60, true
  %64 = and i1 %58, %62
  %65 = and i1 %61, true
  %66 = and i1 %59, %62
  %67 = or i1 %63, %64
  %68 = or i1 %65, %66
  %69 = xor i1 %67, %68
  %70 = or i1 %60, %61
  %71 = xor i1 %70, true
  %72 = or i1 true, %62
  %73 = and i1 %71, %72
  %74 = or i1 %69, %73
  %75 = or i1 %58, %59
  %76 = select i1 %74, i32 1012139261, i32 249162713
  store i32 %76, i32* %17
  br label %88

; <label>:77:                                     ; preds = %18
  %78 = load volatile i1, i1* %4
  ret i1 %78

; <label>:79:                                     ; preds = %18
  %80 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"*, align 8
  %81 = alloca %struct.ball*, align 8
  %82 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"** %80, align 8
  store %struct.ball* %1, %struct.ball** %81, align 8
  store %struct.ball* %2, %struct.ball** %82, align 8
  %83 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"** %80, align 8
  %84 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val.12", %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %83, i32 0, i32 0
  %85 = load %struct.ball*, %struct.ball** %81, align 8
  %86 = load %struct.ball*, %struct.ball** %82, align 8
  %87 = call zeroext i1 @"_ZZ4mainENK3$_2clERK4ballS2_"(%class.anon.2* %84, %struct.ball* dereferenceable(16) %85, %struct.ball* dereferenceable(16) %86)
  store i32 705611326, i32* %17
  br label %88

; <label>:88:                                     ; preds = %79, %41, %21, %20
  br label %18
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZZ4mainENK3$_2clERK4ballS2_"(%class.anon.2*, %struct.ball* dereferenceable(16), %struct.ball* dereferenceable(16)) #4 align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = alloca i1
  %8 = alloca i1
  %9 = alloca %struct.ball**
  %10 = alloca %struct.ball**
  %11 = alloca i1
  %12 = alloca i1
  %13 = load i32, i32* @x.399
  %14 = load i32, i32* @y.400
  %15 = sub i32 %13, 73653012
  %16 = sub i32 %15, 1
  %17 = add i32 %16, 73653012
  %18 = sub i32 %13, 1
  %19 = mul i32 %13, %17
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  store i1 %21, i1* %12
  %22 = icmp slt i32 %14, 10
  store i1 %22, i1* %11
  %23 = alloca i32
  store i32 -551267403, i32* %23
  %24 = alloca i1
  %25 = alloca i1
  br label %26

; <label>:26:                                     ; preds = %3, %307
  %27 = load i32, i32* %23
  switch i32 %27, label %28 [
    i32 -551267403, label %29
    i32 -339586902, label %49
    i32 169470353, label %80
    i32 -974825464, label %83
    i32 -1817769295, label %111
    i32 -1856780292, label %148
    i32 -830384358, label %151
    i32 -1622945663, label %166
    i32 841669701, label %191
    i32 -818012097, label %193
    i32 -1417540517, label %222
    i32 -684346090, label %237
    i32 1504652490, label %239
    i32 -1498685716, label %256
    i32 -1221145445, label %271
    i32 1953942297, label %273
    i32 -67794409, label %285
    i32 -1031707655, label %295
    i32 -1988519753, label %305
    i32 418238342, label %306
  ]

; <label>:28:                                     ; preds = %26
  br label %307

; <label>:29:                                     ; preds = %26
  %30 = load volatile i1, i1* %12
  %31 = load volatile i1, i1* %11
  %32 = xor i1 %30, true
  %33 = xor i1 %31, true
  %34 = xor i1 true, true
  %35 = and i1 %32, true
  %36 = and i1 %30, %34
  %37 = and i1 %33, true
  %38 = and i1 %31, %34
  %39 = or i1 %35, %36
  %40 = or i1 %37, %38
  %41 = xor i1 %39, %40
  %42 = or i1 %32, %33
  %43 = xor i1 %42, true
  %44 = or i1 true, %34
  %45 = and i1 %43, %44
  %46 = or i1 %41, %45
  %47 = or i1 %30, %31
  %48 = select i1 %46, i32 -339586902, i32 1953942297
  store i32 %48, i32* %23
  br label %307

; <label>:49:                                     ; preds = %26
  %50 = alloca %class.anon.2*, align 8
  %51 = alloca %struct.ball*, align 8
  store %struct.ball** %51, %struct.ball*** %10
  %52 = alloca %struct.ball*, align 8
  store %struct.ball** %52, %struct.ball*** %9
  store %class.anon.2* %0, %class.anon.2** %50, align 8
  %53 = load volatile %struct.ball**, %struct.ball*** %10
  store %struct.ball* %1, %struct.ball** %53, align 8
  %54 = load volatile %struct.ball**, %struct.ball*** %9
  store %struct.ball* %2, %struct.ball** %54, align 8
  %55 = load %class.anon.2*, %class.anon.2** %50, align 8
  %56 = load volatile %struct.ball**, %struct.ball*** %10
  %57 = load %struct.ball*, %struct.ball** %56, align 8
  %58 = getelementptr inbounds %struct.ball, %struct.ball* %57, i32 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = load volatile %struct.ball**, %struct.ball*** %9
  %61 = load %struct.ball*, %struct.ball** %60, align 8
  %62 = getelementptr inbounds %struct.ball, %struct.ball* %61, i32 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = icmp slt i64 %59, %63
  store i1 %64, i1* %8
  %65 = load i32, i32* @x.399
  %66 = load i32, i32* @y.400
  %67 = add i32 %65, -785982695
  %68 = sub i32 %67, 1
  %69 = sub i32 %68, -785982695
  %70 = sub i32 %65, 1
  %71 = mul i32 %65, %69
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %66, 10
  %75 = and i1 %73, %74
  %76 = xor i1 %73, %74
  %77 = or i1 %75, %76
  %78 = or i1 %73, %74
  %79 = select i1 %77, i32 169470353, i32 1953942297
  store i32 %79, i32* %23
  br label %307

; <label>:80:                                     ; preds = %26
  %81 = load volatile i1, i1* %8
  %82 = select i1 %81, i32 1504652490, i32 -974825464
  store i32 %82, i32* %23
  store i1 true, i1* %25
  br label %307

; <label>:83:                                     ; preds = %26
  %84 = load i32, i32* @x.399
  %85 = load i32, i32* @y.400
  %86 = add i32 %84, -279095039
  %87 = sub i32 %86, 1
  %88 = sub i32 %87, -279095039
  %89 = sub i32 %84, 1
  %90 = mul i32 %84, %88
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %85, 10
  %94 = xor i1 %92, true
  %95 = xor i1 %93, true
  %96 = xor i1 true, true
  %97 = and i1 %94, true
  %98 = and i1 %92, %96
  %99 = and i1 %95, true
  %100 = and i1 %93, %96
  %101 = or i1 %97, %98
  %102 = or i1 %99, %100
  %103 = xor i1 %101, %102
  %104 = or i1 %94, %95
  %105 = xor i1 %104, true
  %106 = or i1 true, %96
  %107 = and i1 %105, %106
  %108 = or i1 %103, %107
  %109 = or i1 %92, %93
  %110 = select i1 %108, i32 -1817769295, i32 -67794409
  store i32 %110, i32* %23
  br label %307

; <label>:111:                                    ; preds = %26
  %112 = load volatile %struct.ball**, %struct.ball*** %10
  %113 = load %struct.ball*, %struct.ball** %112, align 8
  %114 = getelementptr inbounds %struct.ball, %struct.ball* %113, i32 0, i32 0
  %115 = load i64, i64* %114, align 8
  %116 = load volatile %struct.ball**, %struct.ball*** %9
  %117 = load %struct.ball*, %struct.ball** %116, align 8
  %118 = getelementptr inbounds %struct.ball, %struct.ball* %117, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  %120 = icmp eq i64 %115, %119
  store i1 %120, i1* %7
  %121 = load i32, i32* @x.399
  %122 = load i32, i32* @y.400
  %123 = add i32 %121, -533763004
  %124 = sub i32 %123, 1
  %125 = sub i32 %124, -533763004
  %126 = sub i32 %121, 1
  %127 = mul i32 %121, %125
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %122, 10
  %131 = xor i1 %129, true
  %132 = xor i1 %130, true
  %133 = xor i1 true, true
  %134 = and i1 %131, true
  %135 = and i1 %129, %133
  %136 = and i1 %132, true
  %137 = and i1 %130, %133
  %138 = or i1 %134, %135
  %139 = or i1 %136, %137
  %140 = xor i1 %138, %139
  %141 = or i1 %131, %132
  %142 = xor i1 %141, true
  %143 = or i1 true, %133
  %144 = and i1 %142, %143
  %145 = or i1 %140, %144
  %146 = or i1 %129, %130
  %147 = select i1 %145, i32 -1856780292, i32 -67794409
  store i32 %147, i32* %23
  br label %307

; <label>:148:                                    ; preds = %26
  %149 = load volatile i1, i1* %7
  %150 = select i1 %149, i32 -830384358, i32 -818012097
  store i32 %150, i32* %23
  store i1 false, i1* %24
  br label %307

; <label>:151:                                    ; preds = %26
  %152 = load i32, i32* @x.399
  %153 = load i32, i32* @y.400
  %154 = sub i32 0, 1
  %155 = add i32 %152, %154
  %156 = sub i32 %152, 1
  %157 = mul i32 %152, %155
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %153, 10
  %161 = and i1 %159, %160
  %162 = xor i1 %159, %160
  %163 = or i1 %161, %162
  %164 = or i1 %159, %160
  %165 = select i1 %163, i32 -1622945663, i32 -1031707655
  store i32 %165, i32* %23
  br label %307

; <label>:166:                                    ; preds = %26
  %167 = load volatile %struct.ball**, %struct.ball*** %10
  %168 = load %struct.ball*, %struct.ball** %167, align 8
  %169 = getelementptr inbounds %struct.ball, %struct.ball* %168, i32 0, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = load volatile %struct.ball**, %struct.ball*** %9
  %172 = load %struct.ball*, %struct.ball** %171, align 8
  %173 = getelementptr inbounds %struct.ball, %struct.ball* %172, i32 0, i32 1
  %174 = load i64, i64* %173, align 8
  %175 = icmp slt i64 %170, %174
  store i1 %175, i1* %6
  %176 = load i32, i32* @x.399
  %177 = load i32, i32* @y.400
  %178 = sub i32 %176, 70895621
  %179 = sub i32 %178, 1
  %180 = add i32 %179, 70895621
  %181 = sub i32 %176, 1
  %182 = mul i32 %176, %180
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %177, 10
  %186 = and i1 %184, %185
  %187 = xor i1 %184, %185
  %188 = or i1 %186, %187
  %189 = or i1 %184, %185
  %190 = select i1 %188, i32 841669701, i32 -1031707655
  store i32 %190, i32* %23
  br label %307

; <label>:191:                                    ; preds = %26
  store i32 -818012097, i32* %23
  %192 = load volatile i1, i1* %6
  store i1 %192, i1* %24
  br label %307

; <label>:193:                                    ; preds = %26
  %194 = load i1, i1* %24
  store i1 %194, i1* %5
  %195 = load i32, i32* @x.399
  %196 = load i32, i32* @y.400
  %197 = sub i32 %195, -1371862537
  %198 = sub i32 %197, 1
  %199 = add i32 %198, -1371862537
  %200 = sub i32 %195, 1
  %201 = mul i32 %195, %199
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %196, 10
  %205 = xor i1 %203, true
  %206 = xor i1 %204, true
  %207 = xor i1 true, true
  %208 = and i1 %205, true
  %209 = and i1 %203, %207
  %210 = and i1 %206, true
  %211 = and i1 %204, %207
  %212 = or i1 %208, %209
  %213 = or i1 %210, %211
  %214 = xor i1 %212, %213
  %215 = or i1 %205, %206
  %216 = xor i1 %215, true
  %217 = or i1 true, %207
  %218 = and i1 %216, %217
  %219 = or i1 %214, %218
  %220 = or i1 %203, %204
  %221 = select i1 %219, i32 -1417540517, i32 -1988519753
  store i32 %221, i32* %23
  br label %307

; <label>:222:                                    ; preds = %26
  %223 = load i32, i32* @x.399
  %224 = load i32, i32* @y.400
  %225 = sub i32 0, 1
  %226 = add i32 %223, %225
  %227 = sub i32 %223, 1
  %228 = mul i32 %223, %226
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %224, 10
  %232 = and i1 %230, %231
  %233 = xor i1 %230, %231
  %234 = or i1 %232, %233
  %235 = or i1 %230, %231
  %236 = select i1 %234, i32 -684346090, i32 -1988519753
  store i32 %236, i32* %23
  br label %307

; <label>:237:                                    ; preds = %26
  store i32 1504652490, i32* %23
  %238 = load volatile i1, i1* %5
  store i1 %238, i1* %25
  br label %307

; <label>:239:                                    ; preds = %26
  %240 = load i1, i1* %25
  store i1 %240, i1* %4
  %241 = load i32, i32* @x.399
  %242 = load i32, i32* @y.400
  %243 = add i32 %241, -1998893862
  %244 = sub i32 %243, 1
  %245 = sub i32 %244, -1998893862
  %246 = sub i32 %241, 1
  %247 = mul i32 %241, %245
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %242, 10
  %251 = and i1 %249, %250
  %252 = xor i1 %249, %250
  %253 = or i1 %251, %252
  %254 = or i1 %249, %250
  %255 = select i1 %253, i32 -1498685716, i32 418238342
  store i32 %255, i32* %23
  br label %307

; <label>:256:                                    ; preds = %26
  %257 = load i32, i32* @x.399
  %258 = load i32, i32* @y.400
  %259 = sub i32 0, 1
  %260 = add i32 %257, %259
  %261 = sub i32 %257, 1
  %262 = mul i32 %257, %260
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %258, 10
  %266 = and i1 %264, %265
  %267 = xor i1 %264, %265
  %268 = or i1 %266, %267
  %269 = or i1 %264, %265
  %270 = select i1 %268, i32 -1221145445, i32 418238342
  store i32 %270, i32* %23
  br label %307

; <label>:271:                                    ; preds = %26
  %272 = load volatile i1, i1* %4
  ret i1 %272

; <label>:273:                                    ; preds = %26
  %274 = alloca %class.anon.2*, align 8
  %275 = alloca %struct.ball*, align 8
  %276 = alloca %struct.ball*, align 8
  store %class.anon.2* %0, %class.anon.2** %274, align 8
  store %struct.ball* %1, %struct.ball** %275, align 8
  store %struct.ball* %2, %struct.ball** %276, align 8
  %277 = load %class.anon.2*, %class.anon.2** %274, align 8
  %278 = load %struct.ball*, %struct.ball** %275, align 8
  %279 = getelementptr inbounds %struct.ball, %struct.ball* %278, i32 0, i32 0
  %280 = load i64, i64* %279, align 8
  %281 = load %struct.ball*, %struct.ball** %276, align 8
  %282 = getelementptr inbounds %struct.ball, %struct.ball* %281, i32 0, i32 0
  %283 = load i64, i64* %282, align 8
  %284 = icmp slt i64 %280, %283
  store i32 -339586902, i32* %23
  br label %307

; <label>:285:                                    ; preds = %26
  %286 = load volatile %struct.ball**, %struct.ball*** %10
  %287 = load %struct.ball*, %struct.ball** %286, align 8
  %288 = getelementptr inbounds %struct.ball, %struct.ball* %287, i32 0, i32 0
  %289 = load i64, i64* %288, align 8
  %290 = load volatile %struct.ball**, %struct.ball*** %9
  %291 = load %struct.ball*, %struct.ball** %290, align 8
  %292 = getelementptr inbounds %struct.ball, %struct.ball* %291, i32 0, i32 0
  %293 = load i64, i64* %292, align 8
  %294 = icmp eq i64 %289, %293
  store i32 -1817769295, i32* %23
  br label %307

; <label>:295:                                    ; preds = %26
  %296 = load volatile %struct.ball**, %struct.ball*** %10
  %297 = load %struct.ball*, %struct.ball** %296, align 8
  %298 = getelementptr inbounds %struct.ball, %struct.ball* %297, i32 0, i32 1
  %299 = load i64, i64* %298, align 8
  %300 = load volatile %struct.ball**, %struct.ball*** %9
  %301 = load %struct.ball*, %struct.ball** %300, align 8
  %302 = getelementptr inbounds %struct.ball, %struct.ball* %301, i32 0, i32 1
  %303 = load i64, i64* %302, align 8
  %304 = icmp slt i64 %299, %303
  store i32 -1622945663, i32* %23
  br label %307

; <label>:305:                                    ; preds = %26
  store i32 -1417540517, i32* %23
  br label %307

; <label>:306:                                    ; preds = %26
  store i32 -1498685716, i32* %23
  br label %307

; <label>:307:                                    ; preds = %306, %305, %295, %285, %273, %256, %239, %237, %222, %193, %191, %166, %151, %148, %111, %83, %80, %49, %29, %28
  br label %26
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops14_Iter_comp_valIZ4mainE3$_2EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_val.12"*) unnamed_addr #4 align 2 {
  %2 = alloca %class.anon.2, align 1
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"** %3, align 8
  %4 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"** %3, align 8
  %5 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val.12", %"struct.__gnu_cxx::__ops::_Iter_comp_val.12"* %4, i32 0, i32 0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZSt22__move_median_to_firstIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*, %struct.ball*) #4 {
  %5 = alloca i1
  %6 = alloca i1
  %7 = alloca %struct.ball*
  %8 = alloca %struct.ball*
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %10 = alloca %struct.ball*, align 8
  %11 = alloca %struct.ball*, align 8
  %12 = alloca %struct.ball*, align 8
  %13 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %10, align 8
  store %struct.ball* %1, %struct.ball** %11, align 8
  store %struct.ball* %2, %struct.ball** %12, align 8
  store %struct.ball* %3, %struct.ball** %13, align 8
  %14 = load %struct.ball*, %struct.ball** %11, align 8
  store %struct.ball* %14, %struct.ball** %8
  %15 = load %struct.ball*, %struct.ball** %12, align 8
  store %struct.ball* %15, %struct.ball** %7
  %16 = alloca i32
  store i32 -1202178985, i32* %16
  br label %17

; <label>:17:                                     ; preds = %4, %314
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -1202178985, label %20
    i32 616660522, label %25
    i32 701814554, label %30
    i32 525220918, label %58
    i32 799193810, label %76
    i32 -1268122124, label %77
    i32 636039303, label %105
    i32 945304250, label %135
    i32 -272983769, label %138
    i32 -894385020, label %141
    i32 1745295424, label %144
    i32 1531257639, label %159
    i32 -225433826, label %187
    i32 648178304, label %188
    i32 -1621878287, label %189
    i32 -1480095878, label %194
    i32 599451707, label %197
    i32 -450299357, label %225
    i32 1970798243, label %244
    i32 -1983486782, label %247
    i32 1678427458, label %250
    i32 228673100, label %277
    i32 -542314292, label %295
    i32 446546357, label %296
    i32 650809739, label %297
    i32 1979918125, label %298
    i32 1870824114, label %299
    i32 297647100, label %302
    i32 1141294976, label %306
    i32 1895646651, label %307
    i32 2037324468, label %311
  ]

; <label>:19:                                     ; preds = %17
  br label %314

; <label>:20:                                     ; preds = %17
  %21 = load volatile %struct.ball*, %struct.ball** %8
  %22 = load volatile %struct.ball*, %struct.ball** %7
  %23 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9, %struct.ball* %21, %struct.ball* %22)
  %24 = select i1 %23, i32 616660522, i32 -1621878287
  store i32 %24, i32* %16
  br label %314

; <label>:25:                                     ; preds = %17
  %26 = load %struct.ball*, %struct.ball** %12, align 8
  %27 = load %struct.ball*, %struct.ball** %13, align 8
  %28 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9, %struct.ball* %26, %struct.ball* %27)
  %29 = select i1 %28, i32 701814554, i32 -1268122124
  store i32 %29, i32* %16
  br label %314

; <label>:30:                                     ; preds = %17
  %31 = load i32, i32* @x.403
  %32 = load i32, i32* @y.404
  %33 = add i32 %31, -1819633037
  %34 = sub i32 %33, 1
  %35 = sub i32 %34, -1819633037
  %36 = sub i32 %31, 1
  %37 = mul i32 %31, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %32, 10
  %41 = xor i1 %39, true
  %42 = xor i1 %40, true
  %43 = xor i1 false, true
  %44 = and i1 %41, false
  %45 = and i1 %39, %43
  %46 = and i1 %42, false
  %47 = and i1 %40, %43
  %48 = or i1 %44, %45
  %49 = or i1 %46, %47
  %50 = xor i1 %48, %49
  %51 = or i1 %41, %42
  %52 = xor i1 %51, true
  %53 = or i1 false, %43
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = or i1 %39, %40
  %57 = select i1 %55, i32 525220918, i32 1870824114
  store i32 %57, i32* %16
  br label %314

; <label>:58:                                     ; preds = %17
  %59 = load %struct.ball*, %struct.ball** %10, align 8
  %60 = load %struct.ball*, %struct.ball** %12, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %59, %struct.ball* %60)
  %61 = load i32, i32* @x.403
  %62 = load i32, i32* @y.404
  %63 = add i32 %61, -279365743
  %64 = sub i32 %63, 1
  %65 = sub i32 %64, -279365743
  %66 = sub i32 %61, 1
  %67 = mul i32 %61, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %62, 10
  %71 = and i1 %69, %70
  %72 = xor i1 %69, %70
  %73 = or i1 %71, %72
  %74 = or i1 %69, %70
  %75 = select i1 %73, i32 799193810, i32 1870824114
  store i32 %75, i32* %16
  br label %314

; <label>:76:                                     ; preds = %17
  store i32 648178304, i32* %16
  br label %314

; <label>:77:                                     ; preds = %17
  %78 = load i32, i32* @x.403
  %79 = load i32, i32* @y.404
  %80 = add i32 %78, 127842367
  %81 = sub i32 %80, 1
  %82 = sub i32 %81, 127842367
  %83 = sub i32 %78, 1
  %84 = mul i32 %78, %82
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %79, 10
  %88 = xor i1 %86, true
  %89 = xor i1 %87, true
  %90 = xor i1 false, true
  %91 = and i1 %88, false
  %92 = and i1 %86, %90
  %93 = and i1 %89, false
  %94 = and i1 %87, %90
  %95 = or i1 %91, %92
  %96 = or i1 %93, %94
  %97 = xor i1 %95, %96
  %98 = or i1 %88, %89
  %99 = xor i1 %98, true
  %100 = or i1 false, %90
  %101 = and i1 %99, %100
  %102 = or i1 %97, %101
  %103 = or i1 %86, %87
  %104 = select i1 %102, i32 636039303, i32 297647100
  store i32 %104, i32* %16
  br label %314

; <label>:105:                                    ; preds = %17
  %106 = load %struct.ball*, %struct.ball** %11, align 8
  %107 = load %struct.ball*, %struct.ball** %13, align 8
  %108 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9, %struct.ball* %106, %struct.ball* %107)
  store i1 %108, i1* %6
  %109 = load i32, i32* @x.403
  %110 = load i32, i32* @y.404
  %111 = sub i32 0, 1
  %112 = add i32 %109, %111
  %113 = sub i32 %109, 1
  %114 = mul i32 %109, %112
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %110, 10
  %118 = xor i1 %116, true
  %119 = xor i1 %117, true
  %120 = xor i1 false, true
  %121 = and i1 %118, false
  %122 = and i1 %116, %120
  %123 = and i1 %119, false
  %124 = and i1 %117, %120
  %125 = or i1 %121, %122
  %126 = or i1 %123, %124
  %127 = xor i1 %125, %126
  %128 = or i1 %118, %119
  %129 = xor i1 %128, true
  %130 = or i1 false, %120
  %131 = and i1 %129, %130
  %132 = or i1 %127, %131
  %133 = or i1 %116, %117
  %134 = select i1 %132, i32 945304250, i32 297647100
  store i32 %134, i32* %16
  br label %314

; <label>:135:                                    ; preds = %17
  %136 = load volatile i1, i1* %6
  %137 = select i1 %136, i32 -272983769, i32 -894385020
  store i32 %137, i32* %16
  br label %314

; <label>:138:                                    ; preds = %17
  %139 = load %struct.ball*, %struct.ball** %10, align 8
  %140 = load %struct.ball*, %struct.ball** %13, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %139, %struct.ball* %140)
  store i32 1745295424, i32* %16
  br label %314

; <label>:141:                                    ; preds = %17
  %142 = load %struct.ball*, %struct.ball** %10, align 8
  %143 = load %struct.ball*, %struct.ball** %11, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %142, %struct.ball* %143)
  store i32 1745295424, i32* %16
  br label %314

; <label>:144:                                    ; preds = %17
  %145 = load i32, i32* @x.403
  %146 = load i32, i32* @y.404
  %147 = sub i32 0, 1
  %148 = add i32 %145, %147
  %149 = sub i32 %145, 1
  %150 = mul i32 %145, %148
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %146, 10
  %154 = and i1 %152, %153
  %155 = xor i1 %152, %153
  %156 = or i1 %154, %155
  %157 = or i1 %152, %153
  %158 = select i1 %156, i32 1531257639, i32 1141294976
  store i32 %158, i32* %16
  br label %314

; <label>:159:                                    ; preds = %17
  %160 = load i32, i32* @x.403
  %161 = load i32, i32* @y.404
  %162 = sub i32 %160, -1361852779
  %163 = sub i32 %162, 1
  %164 = add i32 %163, -1361852779
  %165 = sub i32 %160, 1
  %166 = mul i32 %160, %164
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %161, 10
  %170 = xor i1 %168, true
  %171 = xor i1 %169, true
  %172 = xor i1 false, true
  %173 = and i1 %170, false
  %174 = and i1 %168, %172
  %175 = and i1 %171, false
  %176 = and i1 %169, %172
  %177 = or i1 %173, %174
  %178 = or i1 %175, %176
  %179 = xor i1 %177, %178
  %180 = or i1 %170, %171
  %181 = xor i1 %180, true
  %182 = or i1 false, %172
  %183 = and i1 %181, %182
  %184 = or i1 %179, %183
  %185 = or i1 %168, %169
  %186 = select i1 %184, i32 -225433826, i32 1141294976
  store i32 %186, i32* %16
  br label %314

; <label>:187:                                    ; preds = %17
  store i32 648178304, i32* %16
  br label %314

; <label>:188:                                    ; preds = %17
  store i32 1979918125, i32* %16
  br label %314

; <label>:189:                                    ; preds = %17
  %190 = load %struct.ball*, %struct.ball** %11, align 8
  %191 = load %struct.ball*, %struct.ball** %13, align 8
  %192 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9, %struct.ball* %190, %struct.ball* %191)
  %193 = select i1 %192, i32 -1480095878, i32 599451707
  store i32 %193, i32* %16
  br label %314

; <label>:194:                                    ; preds = %17
  %195 = load %struct.ball*, %struct.ball** %10, align 8
  %196 = load %struct.ball*, %struct.ball** %11, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %195, %struct.ball* %196)
  store i32 650809739, i32* %16
  br label %314

; <label>:197:                                    ; preds = %17
  %198 = load i32, i32* @x.403
  %199 = load i32, i32* @y.404
  %200 = sub i32 %198, -166279944
  %201 = sub i32 %200, 1
  %202 = add i32 %201, -166279944
  %203 = sub i32 %198, 1
  %204 = mul i32 %198, %202
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %199, 10
  %208 = xor i1 %206, true
  %209 = xor i1 %207, true
  %210 = xor i1 true, true
  %211 = and i1 %208, true
  %212 = and i1 %206, %210
  %213 = and i1 %209, true
  %214 = and i1 %207, %210
  %215 = or i1 %211, %212
  %216 = or i1 %213, %214
  %217 = xor i1 %215, %216
  %218 = or i1 %208, %209
  %219 = xor i1 %218, true
  %220 = or i1 true, %210
  %221 = and i1 %219, %220
  %222 = or i1 %217, %221
  %223 = or i1 %206, %207
  %224 = select i1 %222, i32 -450299357, i32 1895646651
  store i32 %224, i32* %16
  br label %314

; <label>:225:                                    ; preds = %17
  %226 = load %struct.ball*, %struct.ball** %12, align 8
  %227 = load %struct.ball*, %struct.ball** %13, align 8
  %228 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9, %struct.ball* %226, %struct.ball* %227)
  store i1 %228, i1* %5
  %229 = load i32, i32* @x.403
  %230 = load i32, i32* @y.404
  %231 = sub i32 %229, 1256614239
  %232 = sub i32 %231, 1
  %233 = add i32 %232, 1256614239
  %234 = sub i32 %229, 1
  %235 = mul i32 %229, %233
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %230, 10
  %239 = and i1 %237, %238
  %240 = xor i1 %237, %238
  %241 = or i1 %239, %240
  %242 = or i1 %237, %238
  %243 = select i1 %241, i32 1970798243, i32 1895646651
  store i32 %243, i32* %16
  br label %314

; <label>:244:                                    ; preds = %17
  %245 = load volatile i1, i1* %5
  %246 = select i1 %245, i32 -1983486782, i32 1678427458
  store i32 %246, i32* %16
  br label %314

; <label>:247:                                    ; preds = %17
  %248 = load %struct.ball*, %struct.ball** %10, align 8
  %249 = load %struct.ball*, %struct.ball** %13, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %248, %struct.ball* %249)
  store i32 446546357, i32* %16
  br label %314

; <label>:250:                                    ; preds = %17
  %251 = load i32, i32* @x.403
  %252 = load i32, i32* @y.404
  %253 = sub i32 0, 1
  %254 = add i32 %251, %253
  %255 = sub i32 %251, 1
  %256 = mul i32 %251, %254
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %252, 10
  %260 = xor i1 %258, true
  %261 = xor i1 %259, true
  %262 = xor i1 false, true
  %263 = and i1 %260, false
  %264 = and i1 %258, %262
  %265 = and i1 %261, false
  %266 = and i1 %259, %262
  %267 = or i1 %263, %264
  %268 = or i1 %265, %266
  %269 = xor i1 %267, %268
  %270 = or i1 %260, %261
  %271 = xor i1 %270, true
  %272 = or i1 false, %262
  %273 = and i1 %271, %272
  %274 = or i1 %269, %273
  %275 = or i1 %258, %259
  %276 = select i1 %274, i32 228673100, i32 2037324468
  store i32 %276, i32* %16
  br label %314

; <label>:277:                                    ; preds = %17
  %278 = load %struct.ball*, %struct.ball** %10, align 8
  %279 = load %struct.ball*, %struct.ball** %12, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %278, %struct.ball* %279)
  %280 = load i32, i32* @x.403
  %281 = load i32, i32* @y.404
  %282 = sub i32 %280, 957503135
  %283 = sub i32 %282, 1
  %284 = add i32 %283, 957503135
  %285 = sub i32 %280, 1
  %286 = mul i32 %280, %284
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %281, 10
  %290 = and i1 %288, %289
  %291 = xor i1 %288, %289
  %292 = or i1 %290, %291
  %293 = or i1 %288, %289
  %294 = select i1 %292, i32 -542314292, i32 2037324468
  store i32 %294, i32* %16
  br label %314

; <label>:295:                                    ; preds = %17
  store i32 446546357, i32* %16
  br label %314

; <label>:296:                                    ; preds = %17
  store i32 650809739, i32* %16
  br label %314

; <label>:297:                                    ; preds = %17
  store i32 1979918125, i32* %16
  br label %314

; <label>:298:                                    ; preds = %17
  ret void

; <label>:299:                                    ; preds = %17
  %300 = load %struct.ball*, %struct.ball** %10, align 8
  %301 = load %struct.ball*, %struct.ball** %12, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %300, %struct.ball* %301)
  store i32 525220918, i32* %16
  br label %314

; <label>:302:                                    ; preds = %17
  %303 = load %struct.ball*, %struct.ball** %11, align 8
  %304 = load %struct.ball*, %struct.ball** %13, align 8
  %305 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9, %struct.ball* %303, %struct.ball* %304)
  store i32 636039303, i32* %16
  br label %314

; <label>:306:                                    ; preds = %17
  store i32 1531257639, i32* %16
  br label %314

; <label>:307:                                    ; preds = %17
  %308 = load %struct.ball*, %struct.ball** %12, align 8
  %309 = load %struct.ball*, %struct.ball** %13, align 8
  %310 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9, %struct.ball* %308, %struct.ball* %309)
  store i32 -450299357, i32* %16
  br label %314

; <label>:311:                                    ; preds = %17
  %312 = load %struct.ball*, %struct.ball** %10, align 8
  %313 = load %struct.ball*, %struct.ball** %12, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %312, %struct.ball* %313)
  store i32 228673100, i32* %16
  br label %314

; <label>:314:                                    ; preds = %311, %307, %306, %302, %299, %297, %296, %295, %277, %250, %247, %244, %225, %197, %194, %189, %188, %187, %159, %144, %141, %138, %135, %105, %77, %76, %58, %30, %25, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ball* @"_ZSt21__unguarded_partitionIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEET_S7_S7_S7_T0_"(%struct.ball*, %struct.ball*, %struct.ball*) #4 {
  %4 = alloca %struct.ball**
  %5 = alloca %struct.ball**
  %6 = alloca %struct.ball**
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*
  %8 = alloca i1
  %9 = alloca i1
  %10 = load i32, i32* @x.405
  %11 = load i32, i32* @y.406
  %12 = add i32 %10, -1320650480
  %13 = sub i32 %12, 1
  %14 = sub i32 %13, -1320650480
  %15 = sub i32 %10, 1
  %16 = mul i32 %10, %14
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  store i1 %18, i1* %9
  %19 = icmp slt i32 %11, 10
  store i1 %19, i1* %8
  %20 = alloca i32
  store i32 714072142, i32* %20
  br label %21

; <label>:21:                                     ; preds = %3, %172
  %22 = load i32, i32* %20
  switch i32 %22, label %23 [
    i32 714072142, label %24
    i32 1237836382, label %32
    i32 -1299182422, label %67
    i32 1567130519, label %68
    i32 1405175983, label %69
    i32 474053339, label %77
    i32 894733224, label %104
    i32 -2119764213, label %124
    i32 -1947656582, label %125
    i32 742538927, label %130
    i32 1552933437, label %138
    i32 -1399641967, label %143
    i32 288300207, label %150
    i32 495855768, label %153
    i32 1503462763, label %162
    i32 452076362, label %167
  ]

; <label>:23:                                     ; preds = %21
  br label %172

; <label>:24:                                     ; preds = %21
  %25 = load volatile i1, i1* %9
  %26 = load volatile i1, i1* %8
  %27 = and i1 %25, %26
  %28 = xor i1 %25, %26
  %29 = or i1 %27, %28
  %30 = or i1 %25, %26
  %31 = select i1 %29, i32 1237836382, i32 1503462763
  store i32 %31, i32* %20
  br label %172

; <label>:32:                                     ; preds = %21
  %33 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %33, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %7
  %34 = alloca %struct.ball*, align 8
  store %struct.ball** %34, %struct.ball*** %6
  %35 = alloca %struct.ball*, align 8
  store %struct.ball** %35, %struct.ball*** %5
  %36 = alloca %struct.ball*, align 8
  store %struct.ball** %36, %struct.ball*** %4
  %37 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %0, %struct.ball** %37, align 8
  %38 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %1, %struct.ball** %38, align 8
  %39 = load volatile %struct.ball**, %struct.ball*** %4
  store %struct.ball* %2, %struct.ball** %39, align 8
  %40 = load i32, i32* @x.405
  %41 = load i32, i32* @y.406
  %42 = add i32 %40, -1244938244
  %43 = sub i32 %42, 1
  %44 = sub i32 %43, -1244938244
  %45 = sub i32 %40, 1
  %46 = mul i32 %40, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %41, 10
  %50 = xor i1 %48, true
  %51 = xor i1 %49, true
  %52 = xor i1 false, true
  %53 = and i1 %50, false
  %54 = and i1 %48, %52
  %55 = and i1 %51, false
  %56 = and i1 %49, %52
  %57 = or i1 %53, %54
  %58 = or i1 %55, %56
  %59 = xor i1 %57, %58
  %60 = or i1 %50, %51
  %61 = xor i1 %60, true
  %62 = or i1 false, %52
  %63 = and i1 %61, %62
  %64 = or i1 %59, %63
  %65 = or i1 %48, %49
  %66 = select i1 %64, i32 -1299182422, i32 1503462763
  store i32 %66, i32* %20
  br label %172

; <label>:67:                                     ; preds = %21
  store i32 1567130519, i32* %20
  br label %172

; <label>:68:                                     ; preds = %21
  store i32 1405175983, i32* %20
  br label %172

; <label>:69:                                     ; preds = %21
  %70 = load volatile %struct.ball**, %struct.ball*** %6
  %71 = load %struct.ball*, %struct.ball** %70, align 8
  %72 = load volatile %struct.ball**, %struct.ball*** %4
  %73 = load %struct.ball*, %struct.ball** %72, align 8
  %74 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %7
  %75 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %74, %struct.ball* %71, %struct.ball* %73)
  %76 = select i1 %75, i32 474053339, i32 -1947656582
  store i32 %76, i32* %20
  br label %172

; <label>:77:                                     ; preds = %21
  %78 = load i32, i32* @x.405
  %79 = load i32, i32* @y.406
  %80 = sub i32 0, 1
  %81 = add i32 %78, %80
  %82 = sub i32 %78, 1
  %83 = mul i32 %78, %81
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %79, 10
  %87 = xor i1 %85, true
  %88 = xor i1 %86, true
  %89 = xor i1 true, true
  %90 = and i1 %87, true
  %91 = and i1 %85, %89
  %92 = and i1 %88, true
  %93 = and i1 %86, %89
  %94 = or i1 %90, %91
  %95 = or i1 %92, %93
  %96 = xor i1 %94, %95
  %97 = or i1 %87, %88
  %98 = xor i1 %97, true
  %99 = or i1 true, %89
  %100 = and i1 %98, %99
  %101 = or i1 %96, %100
  %102 = or i1 %85, %86
  %103 = select i1 %101, i32 894733224, i32 452076362
  store i32 %103, i32* %20
  br label %172

; <label>:104:                                    ; preds = %21
  %105 = load volatile %struct.ball**, %struct.ball*** %6
  %106 = load %struct.ball*, %struct.ball** %105, align 8
  %107 = getelementptr inbounds %struct.ball, %struct.ball* %106, i32 1
  %108 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %107, %struct.ball** %108, align 8
  %109 = load i32, i32* @x.405
  %110 = load i32, i32* @y.406
  %111 = add i32 %109, -115037841
  %112 = sub i32 %111, 1
  %113 = sub i32 %112, -115037841
  %114 = sub i32 %109, 1
  %115 = mul i32 %109, %113
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %110, 10
  %119 = and i1 %117, %118
  %120 = xor i1 %117, %118
  %121 = or i1 %119, %120
  %122 = or i1 %117, %118
  %123 = select i1 %121, i32 -2119764213, i32 452076362
  store i32 %123, i32* %20
  br label %172

; <label>:124:                                    ; preds = %21
  store i32 1405175983, i32* %20
  br label %172

; <label>:125:                                    ; preds = %21
  %126 = load volatile %struct.ball**, %struct.ball*** %5
  %127 = load %struct.ball*, %struct.ball** %126, align 8
  %128 = getelementptr inbounds %struct.ball, %struct.ball* %127, i32 -1
  %129 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %128, %struct.ball** %129, align 8
  store i32 742538927, i32* %20
  br label %172

; <label>:130:                                    ; preds = %21
  %131 = load volatile %struct.ball**, %struct.ball*** %4
  %132 = load %struct.ball*, %struct.ball** %131, align 8
  %133 = load volatile %struct.ball**, %struct.ball*** %5
  %134 = load %struct.ball*, %struct.ball** %133, align 8
  %135 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %7
  %136 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %135, %struct.ball* %132, %struct.ball* %134)
  %137 = select i1 %136, i32 1552933437, i32 -1399641967
  store i32 %137, i32* %20
  br label %172

; <label>:138:                                    ; preds = %21
  %139 = load volatile %struct.ball**, %struct.ball*** %5
  %140 = load %struct.ball*, %struct.ball** %139, align 8
  %141 = getelementptr inbounds %struct.ball, %struct.ball* %140, i32 -1
  %142 = load volatile %struct.ball**, %struct.ball*** %5
  store %struct.ball* %141, %struct.ball** %142, align 8
  store i32 742538927, i32* %20
  br label %172

; <label>:143:                                    ; preds = %21
  %144 = load volatile %struct.ball**, %struct.ball*** %6
  %145 = load %struct.ball*, %struct.ball** %144, align 8
  %146 = load volatile %struct.ball**, %struct.ball*** %5
  %147 = load %struct.ball*, %struct.ball** %146, align 8
  %148 = icmp ult %struct.ball* %145, %147
  %149 = select i1 %148, i32 495855768, i32 288300207
  store i32 %149, i32* %20
  br label %172

; <label>:150:                                    ; preds = %21
  %151 = load volatile %struct.ball**, %struct.ball*** %6
  %152 = load %struct.ball*, %struct.ball** %151, align 8
  ret %struct.ball* %152

; <label>:153:                                    ; preds = %21
  %154 = load volatile %struct.ball**, %struct.ball*** %6
  %155 = load %struct.ball*, %struct.ball** %154, align 8
  %156 = load volatile %struct.ball**, %struct.ball*** %5
  %157 = load %struct.ball*, %struct.ball** %156, align 8
  call void @_ZSt9iter_swapIP4ballS1_EvT_T0_(%struct.ball* %155, %struct.ball* %157)
  %158 = load volatile %struct.ball**, %struct.ball*** %6
  %159 = load %struct.ball*, %struct.ball** %158, align 8
  %160 = getelementptr inbounds %struct.ball, %struct.ball* %159, i32 1
  %161 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %160, %struct.ball** %161, align 8
  store i32 1567130519, i32* %20
  br label %172

; <label>:162:                                    ; preds = %21
  %163 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %164 = alloca %struct.ball*, align 8
  %165 = alloca %struct.ball*, align 8
  %166 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %164, align 8
  store %struct.ball* %1, %struct.ball** %165, align 8
  store %struct.ball* %2, %struct.ball** %166, align 8
  store i32 1237836382, i32* %20
  br label %172

; <label>:167:                                    ; preds = %21
  %168 = load volatile %struct.ball**, %struct.ball*** %6
  %169 = load %struct.ball*, %struct.ball** %168, align 8
  %170 = getelementptr inbounds %struct.ball, %struct.ball* %169, i32 1
  %171 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %170, %struct.ball** %171, align 8
  store i32 894733224, i32* %20
  br label %172

; <label>:172:                                    ; preds = %167, %162, %153, %143, %138, %130, %125, %124, %104, %77, %69, %68, %67, %32, %24, %23
  br label %21
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt16__insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*
  %5 = alloca %struct.ball*
  %6 = alloca %struct.ball**
  %7 = alloca %struct.ball**
  %8 = alloca %struct.ball**
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*
  %10 = alloca i1
  %11 = alloca i1
  %12 = load i32, i32* @x.407
  %13 = load i32, i32* @y.408
  %14 = sub i32 %12, 1038560310
  %15 = sub i32 %14, 1
  %16 = add i32 %15, 1038560310
  %17 = sub i32 %12, 1
  %18 = mul i32 %12, %16
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  store i1 %20, i1* %11
  %21 = icmp slt i32 %13, 10
  store i1 %21, i1* %10
  %22 = alloca i32
  store i32 667473781, i32* %22
  br label %23

; <label>:23:                                     ; preds = %2, %237
  %24 = load i32, i32* %22
  switch i32 %24, label %25 [
    i32 667473781, label %26
    i32 -1743068272, label %34
    i32 2142844198, label %64
    i32 907958805, label %67
    i32 1619596603, label %68
    i32 2077966727, label %84
    i32 1831428613, label %104
    i32 2068701142, label %105
    i32 953481723, label %112
    i32 -1917367059, label %120
    i32 1628036878, label %136
    i32 -1858144079, label %184
    i32 1515281915, label %185
    i32 402734853, label %192
    i32 -2090582034, label %193
    i32 2046832523, label %198
    i32 149433406, label %199
    i32 -161423028, label %211
    i32 -549772754, label %216
  ]

; <label>:25:                                     ; preds = %23
  br label %237

; <label>:26:                                     ; preds = %23
  %27 = load volatile i1, i1* %11
  %28 = load volatile i1, i1* %10
  %29 = and i1 %27, %28
  %30 = xor i1 %27, %28
  %31 = or i1 %29, %30
  %32 = or i1 %27, %28
  %33 = select i1 %31, i32 -1743068272, i32 149433406
  store i32 %33, i32* %22
  br label %237

; <label>:34:                                     ; preds = %23
  %35 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %35, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %9
  %36 = alloca %struct.ball*, align 8
  store %struct.ball** %36, %struct.ball*** %8
  %37 = alloca %struct.ball*, align 8
  store %struct.ball** %37, %struct.ball*** %7
  %38 = alloca %struct.ball*, align 8
  store %struct.ball** %38, %struct.ball*** %6
  %39 = alloca %struct.ball, align 8
  store %struct.ball* %39, %struct.ball** %5
  %40 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", align 1
  %41 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %41, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %4
  %42 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", align 1
  %43 = load volatile %struct.ball**, %struct.ball*** %8
  store %struct.ball* %0, %struct.ball** %43, align 8
  %44 = load volatile %struct.ball**, %struct.ball*** %7
  store %struct.ball* %1, %struct.ball** %44, align 8
  %45 = load volatile %struct.ball**, %struct.ball*** %8
  %46 = load %struct.ball*, %struct.ball** %45, align 8
  %47 = load volatile %struct.ball**, %struct.ball*** %7
  %48 = load %struct.ball*, %struct.ball** %47, align 8
  %49 = icmp eq %struct.ball* %46, %48
  store i1 %49, i1* %3
  %50 = load i32, i32* @x.407
  %51 = load i32, i32* @y.408
  %52 = sub i32 0, 1
  %53 = add i32 %50, %52
  %54 = sub i32 %50, 1
  %55 = mul i32 %50, %53
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %51, 10
  %59 = and i1 %57, %58
  %60 = xor i1 %57, %58
  %61 = or i1 %59, %60
  %62 = or i1 %57, %58
  %63 = select i1 %61, i32 2142844198, i32 149433406
  store i32 %63, i32* %22
  br label %237

; <label>:64:                                     ; preds = %23
  %65 = load volatile i1, i1* %3
  %66 = select i1 %65, i32 907958805, i32 1619596603
  store i32 %66, i32* %22
  br label %237

; <label>:67:                                     ; preds = %23
  store i32 2046832523, i32* %22
  br label %237

; <label>:68:                                     ; preds = %23
  %69 = load i32, i32* @x.407
  %70 = load i32, i32* @y.408
  %71 = add i32 %69, -1149640503
  %72 = sub i32 %71, 1
  %73 = sub i32 %72, -1149640503
  %74 = sub i32 %69, 1
  %75 = mul i32 %69, %73
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %70, 10
  %79 = and i1 %77, %78
  %80 = xor i1 %77, %78
  %81 = or i1 %79, %80
  %82 = or i1 %77, %78
  %83 = select i1 %81, i32 2077966727, i32 -161423028
  store i32 %83, i32* %22
  br label %237

; <label>:84:                                     ; preds = %23
  %85 = load volatile %struct.ball**, %struct.ball*** %8
  %86 = load %struct.ball*, %struct.ball** %85, align 8
  %87 = getelementptr inbounds %struct.ball, %struct.ball* %86, i64 1
  %88 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %87, %struct.ball** %88, align 8
  %89 = load i32, i32* @x.407
  %90 = load i32, i32* @y.408
  %91 = add i32 %89, 1338483127
  %92 = sub i32 %91, 1
  %93 = sub i32 %92, 1338483127
  %94 = sub i32 %89, 1
  %95 = mul i32 %89, %93
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %90, 10
  %99 = and i1 %97, %98
  %100 = xor i1 %97, %98
  %101 = or i1 %99, %100
  %102 = or i1 %97, %98
  %103 = select i1 %101, i32 1831428613, i32 -161423028
  store i32 %103, i32* %22
  br label %237

; <label>:104:                                    ; preds = %23
  store i32 2068701142, i32* %22
  br label %237

; <label>:105:                                    ; preds = %23
  %106 = load volatile %struct.ball**, %struct.ball*** %6
  %107 = load %struct.ball*, %struct.ball** %106, align 8
  %108 = load volatile %struct.ball**, %struct.ball*** %7
  %109 = load %struct.ball*, %struct.ball** %108, align 8
  %110 = icmp ne %struct.ball* %107, %109
  %111 = select i1 %110, i32 953481723, i32 2046832523
  store i32 %111, i32* %22
  br label %237

; <label>:112:                                    ; preds = %23
  %113 = load volatile %struct.ball**, %struct.ball*** %6
  %114 = load %struct.ball*, %struct.ball** %113, align 8
  %115 = load volatile %struct.ball**, %struct.ball*** %8
  %116 = load %struct.ball*, %struct.ball** %115, align 8
  %117 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %9
  %118 = call zeroext i1 @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EclIP4ballS6_EEbT_T0_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %117, %struct.ball* %114, %struct.ball* %116)
  %119 = select i1 %118, i32 -1917367059, i32 1515281915
  store i32 %119, i32* %22
  br label %237

; <label>:120:                                    ; preds = %23
  %121 = load i32, i32* @x.407
  %122 = load i32, i32* @y.408
  %123 = add i32 %121, 1832200912
  %124 = sub i32 %123, 1
  %125 = sub i32 %124, 1832200912
  %126 = sub i32 %121, 1
  %127 = mul i32 %121, %125
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %122, 10
  %131 = and i1 %129, %130
  %132 = xor i1 %129, %130
  %133 = or i1 %131, %132
  %134 = or i1 %129, %130
  %135 = select i1 %133, i32 1628036878, i32 -549772754
  store i32 %135, i32* %22
  br label %237

; <label>:136:                                    ; preds = %23
  %137 = load volatile %struct.ball**, %struct.ball*** %6
  %138 = load %struct.ball*, %struct.ball** %137, align 8
  %139 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %138) #3
  %140 = load volatile %struct.ball*, %struct.ball** %5
  %141 = bitcast %struct.ball* %140 to i8*
  %142 = bitcast %struct.ball* %139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %141, i8* %142, i64 16, i32 8, i1 false)
  %143 = load volatile %struct.ball**, %struct.ball*** %8
  %144 = load %struct.ball*, %struct.ball** %143, align 8
  %145 = load volatile %struct.ball**, %struct.ball*** %6
  %146 = load %struct.ball*, %struct.ball** %145, align 8
  %147 = load volatile %struct.ball**, %struct.ball*** %6
  %148 = load %struct.ball*, %struct.ball** %147, align 8
  %149 = getelementptr inbounds %struct.ball, %struct.ball* %148, i64 1
  %150 = call %struct.ball* @_ZSt13move_backwardIP4ballS1_ET0_T_S3_S2_(%struct.ball* %144, %struct.ball* %146, %struct.ball* %149)
  %151 = load volatile %struct.ball*, %struct.ball** %5
  %152 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %151) #3
  %153 = load volatile %struct.ball**, %struct.ball*** %8
  %154 = load %struct.ball*, %struct.ball** %153, align 8
  %155 = bitcast %struct.ball* %154 to i8*
  %156 = bitcast %struct.ball* %152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %156, i64 16, i32 8, i1 false)
  %157 = load i32, i32* @x.407
  %158 = load i32, i32* @y.408
  %159 = sub i32 %157, 1608508095
  %160 = sub i32 %159, 1
  %161 = add i32 %160, 1608508095
  %162 = sub i32 %157, 1
  %163 = mul i32 %157, %161
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %158, 10
  %167 = xor i1 %165, true
  %168 = xor i1 %166, true
  %169 = xor i1 false, true
  %170 = and i1 %167, false
  %171 = and i1 %165, %169
  %172 = and i1 %168, false
  %173 = and i1 %166, %169
  %174 = or i1 %170, %171
  %175 = or i1 %172, %173
  %176 = xor i1 %174, %175
  %177 = or i1 %167, %168
  %178 = xor i1 %177, true
  %179 = or i1 false, %169
  %180 = and i1 %178, %179
  %181 = or i1 %176, %180
  %182 = or i1 %165, %166
  %183 = select i1 %181, i32 -1858144079, i32 -549772754
  store i32 %183, i32* %22
  br label %237

; <label>:184:                                    ; preds = %23
  store i32 402734853, i32* %22
  br label %237

; <label>:185:                                    ; preds = %23
  %186 = load volatile %struct.ball**, %struct.ball*** %6
  %187 = load %struct.ball*, %struct.ball** %186, align 8
  %188 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %4
  %189 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %188 to i8*
  %190 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %9
  %191 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %190 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %189, i8* %191, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_2EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"()
  call void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_2EEEvT_T0_"(%struct.ball* %187)
  store i32 402734853, i32* %22
  br label %237

; <label>:192:                                    ; preds = %23
  store i32 -2090582034, i32* %22
  br label %237

; <label>:193:                                    ; preds = %23
  %194 = load volatile %struct.ball**, %struct.ball*** %6
  %195 = load %struct.ball*, %struct.ball** %194, align 8
  %196 = getelementptr inbounds %struct.ball, %struct.ball* %195, i32 1
  %197 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %196, %struct.ball** %197, align 8
  store i32 2068701142, i32* %22
  br label %237

; <label>:198:                                    ; preds = %23
  ret void

; <label>:199:                                    ; preds = %23
  %200 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %201 = alloca %struct.ball*, align 8
  %202 = alloca %struct.ball*, align 8
  %203 = alloca %struct.ball*, align 8
  %204 = alloca %struct.ball, align 8
  %205 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", align 1
  %206 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %207 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", align 1
  store %struct.ball* %0, %struct.ball** %201, align 8
  store %struct.ball* %1, %struct.ball** %202, align 8
  %208 = load %struct.ball*, %struct.ball** %201, align 8
  %209 = load %struct.ball*, %struct.ball** %202, align 8
  %210 = icmp eq %struct.ball* %208, %209
  store i32 -1743068272, i32* %22
  br label %237

; <label>:211:                                    ; preds = %23
  %212 = load volatile %struct.ball**, %struct.ball*** %8
  %213 = load %struct.ball*, %struct.ball** %212, align 8
  %214 = getelementptr inbounds %struct.ball, %struct.ball* %213, i64 1
  %215 = load volatile %struct.ball**, %struct.ball*** %6
  store %struct.ball* %214, %struct.ball** %215, align 8
  store i32 2077966727, i32* %22
  br label %237

; <label>:216:                                    ; preds = %23
  %217 = load volatile %struct.ball**, %struct.ball*** %6
  %218 = load %struct.ball*, %struct.ball** %217, align 8
  %219 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %218) #3
  %220 = load volatile %struct.ball*, %struct.ball** %5
  %221 = bitcast %struct.ball* %220 to i8*
  %222 = bitcast %struct.ball* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %221, i8* %222, i64 16, i32 8, i1 false)
  %223 = load volatile %struct.ball**, %struct.ball*** %8
  %224 = load %struct.ball*, %struct.ball** %223, align 8
  %225 = load volatile %struct.ball**, %struct.ball*** %6
  %226 = load %struct.ball*, %struct.ball** %225, align 8
  %227 = load volatile %struct.ball**, %struct.ball*** %6
  %228 = load %struct.ball*, %struct.ball** %227, align 8
  %229 = getelementptr inbounds %struct.ball, %struct.ball* %228, i64 1
  %230 = call %struct.ball* @_ZSt13move_backwardIP4ballS1_ET0_T_S3_S2_(%struct.ball* %224, %struct.ball* %226, %struct.ball* %229)
  %231 = load volatile %struct.ball*, %struct.ball** %5
  %232 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %231) #3
  %233 = load volatile %struct.ball**, %struct.ball*** %8
  %234 = load %struct.ball*, %struct.ball** %233, align 8
  %235 = bitcast %struct.ball* %234 to i8*
  %236 = bitcast %struct.ball* %232 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %235, i8* %236, i64 16, i32 8, i1 false)
  store i32 1628036878, i32* %22
  br label %237

; <label>:237:                                    ; preds = %216, %211, %199, %193, %192, %185, %184, %136, %120, %112, %105, %104, %84, %68, %67, %64, %34, %26, %25
  br label %23
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt26__unguarded_insertion_sortIP4ballN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EEEvT_S7_T0_"(%struct.ball*, %struct.ball*) #0 {
  %3 = alloca i1
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %5 = alloca %struct.ball*, align 8
  %6 = alloca %struct.ball*, align 8
  %7 = alloca %struct.ball*, align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", align 1
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %10 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", align 1
  store %struct.ball* %0, %struct.ball** %5, align 8
  store %struct.ball* %1, %struct.ball** %6, align 8
  %11 = load %struct.ball*, %struct.ball** %5, align 8
  store %struct.ball* %11, %struct.ball** %7, align 8
  %12 = alloca i32
  store i32 -921512027, i32* %12
  br label %13

; <label>:13:                                     ; preds = %2, %166
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 -921512027, label %16
    i32 104273348, label %32
    i32 -919324886, label %50
    i32 1018914491, label %53
    i32 -1291980878, label %57
    i32 1126634525, label %84
    i32 -416424038, label %114
    i32 -772219065, label %115
    i32 -992626891, label %130
    i32 1297264784, label %157
    i32 -369107875, label %158
    i32 -47459650, label %162
    i32 1568473635, label %165
  ]

; <label>:15:                                     ; preds = %13
  br label %166

; <label>:16:                                     ; preds = %13
  %17 = load i32, i32* @x.409
  %18 = load i32, i32* @y.410
  %19 = add i32 %17, -823674311
  %20 = sub i32 %19, 1
  %21 = sub i32 %20, -823674311
  %22 = sub i32 %17, 1
  %23 = mul i32 %17, %21
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %18, 10
  %27 = and i1 %25, %26
  %28 = xor i1 %25, %26
  %29 = or i1 %27, %28
  %30 = or i1 %25, %26
  %31 = select i1 %29, i32 104273348, i32 -369107875
  store i32 %31, i32* %12
  br label %166

; <label>:32:                                     ; preds = %13
  %33 = load %struct.ball*, %struct.ball** %7, align 8
  %34 = load %struct.ball*, %struct.ball** %6, align 8
  %35 = icmp ne %struct.ball* %33, %34
  store i1 %35, i1* %3
  %36 = load i32, i32* @x.409
  %37 = load i32, i32* @y.410
  %38 = sub i32 0, 1
  %39 = add i32 %36, %38
  %40 = sub i32 %36, 1
  %41 = mul i32 %36, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %37, 10
  %45 = and i1 %43, %44
  %46 = xor i1 %43, %44
  %47 = or i1 %45, %46
  %48 = or i1 %43, %44
  %49 = select i1 %47, i32 -919324886, i32 -369107875
  store i32 %49, i32* %12
  br label %166

; <label>:50:                                     ; preds = %13
  %51 = load volatile i1, i1* %3
  %52 = select i1 %51, i32 1018914491, i32 -772219065
  store i32 %52, i32* %12
  br label %166

; <label>:53:                                     ; preds = %13
  %54 = load %struct.ball*, %struct.ball** %7, align 8
  %55 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %9 to i8*
  %56 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* %56, i64 1, i32 1, i1 false)
  call void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_2EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"()
  call void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_2EEEvT_T0_"(%struct.ball* %54)
  store i32 -1291980878, i32* %12
  br label %166

; <label>:57:                                     ; preds = %13
  %58 = load i32, i32* @x.409
  %59 = load i32, i32* @y.410
  %60 = sub i32 0, 1
  %61 = add i32 %58, %60
  %62 = sub i32 %58, 1
  %63 = mul i32 %58, %61
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %59, 10
  %67 = xor i1 %65, true
  %68 = xor i1 %66, true
  %69 = xor i1 true, true
  %70 = and i1 %67, true
  %71 = and i1 %65, %69
  %72 = and i1 %68, true
  %73 = and i1 %66, %69
  %74 = or i1 %70, %71
  %75 = or i1 %72, %73
  %76 = xor i1 %74, %75
  %77 = or i1 %67, %68
  %78 = xor i1 %77, true
  %79 = or i1 true, %69
  %80 = and i1 %78, %79
  %81 = or i1 %76, %80
  %82 = or i1 %65, %66
  %83 = select i1 %81, i32 1126634525, i32 -47459650
  store i32 %83, i32* %12
  br label %166

; <label>:84:                                     ; preds = %13
  %85 = load %struct.ball*, %struct.ball** %7, align 8
  %86 = getelementptr inbounds %struct.ball, %struct.ball* %85, i32 1
  store %struct.ball* %86, %struct.ball** %7, align 8
  %87 = load i32, i32* @x.409
  %88 = load i32, i32* @y.410
  %89 = sub i32 %87, -662659322
  %90 = sub i32 %89, 1
  %91 = add i32 %90, -662659322
  %92 = sub i32 %87, 1
  %93 = mul i32 %87, %91
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %88, 10
  %97 = xor i1 %95, true
  %98 = xor i1 %96, true
  %99 = xor i1 false, true
  %100 = and i1 %97, false
  %101 = and i1 %95, %99
  %102 = and i1 %98, false
  %103 = and i1 %96, %99
  %104 = or i1 %100, %101
  %105 = or i1 %102, %103
  %106 = xor i1 %104, %105
  %107 = or i1 %97, %98
  %108 = xor i1 %107, true
  %109 = or i1 false, %99
  %110 = and i1 %108, %109
  %111 = or i1 %106, %110
  %112 = or i1 %95, %96
  %113 = select i1 %111, i32 -416424038, i32 -47459650
  store i32 %113, i32* %12
  br label %166

; <label>:114:                                    ; preds = %13
  store i32 -921512027, i32* %12
  br label %166

; <label>:115:                                    ; preds = %13
  %116 = load i32, i32* @x.409
  %117 = load i32, i32* @y.410
  %118 = sub i32 0, 1
  %119 = add i32 %116, %118
  %120 = sub i32 %116, 1
  %121 = mul i32 %116, %119
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %117, 10
  %125 = and i1 %123, %124
  %126 = xor i1 %123, %124
  %127 = or i1 %125, %126
  %128 = or i1 %123, %124
  %129 = select i1 %127, i32 -992626891, i32 1568473635
  store i32 %129, i32* %12
  br label %166

; <label>:130:                                    ; preds = %13
  %131 = load i32, i32* @x.409
  %132 = load i32, i32* @y.410
  %133 = sub i32 0, 1
  %134 = add i32 %131, %133
  %135 = sub i32 %131, 1
  %136 = mul i32 %131, %134
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %132, 10
  %140 = xor i1 %138, true
  %141 = xor i1 %139, true
  %142 = xor i1 false, true
  %143 = and i1 %140, false
  %144 = and i1 %138, %142
  %145 = and i1 %141, false
  %146 = and i1 %139, %142
  %147 = or i1 %143, %144
  %148 = or i1 %145, %146
  %149 = xor i1 %147, %148
  %150 = or i1 %140, %141
  %151 = xor i1 %150, true
  %152 = or i1 false, %142
  %153 = and i1 %151, %152
  %154 = or i1 %149, %153
  %155 = or i1 %138, %139
  %156 = select i1 %154, i32 1297264784, i32 1568473635
  store i32 %156, i32* %12
  br label %166

; <label>:157:                                    ; preds = %13
  ret void

; <label>:158:                                    ; preds = %13
  %159 = load %struct.ball*, %struct.ball** %7, align 8
  %160 = load %struct.ball*, %struct.ball** %6, align 8
  %161 = icmp ne %struct.ball* %159, %160
  store i32 104273348, i32* %12
  br label %166

; <label>:162:                                    ; preds = %13
  %163 = load %struct.ball*, %struct.ball** %7, align 8
  %164 = getelementptr inbounds %struct.ball, %struct.ball* %163, i32 1
  store %struct.ball* %164, %struct.ball** %7, align 8
  store i32 1126634525, i32* %12
  br label %166

; <label>:165:                                    ; preds = %13
  store i32 -992626891, i32* %12
  br label %166

; <label>:166:                                    ; preds = %165, %162, %158, %130, %115, %114, %84, %57, %53, %50, %32, %16, %15
  br label %13
}

; Function Attrs: noinline uwtable
define internal void @"_ZSt25__unguarded_linear_insertIP4ballN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_2EEEvT_T0_"(%struct.ball*) #0 {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", align 1
  %3 = alloca %struct.ball*, align 8
  %4 = alloca %struct.ball, align 8
  %5 = alloca %struct.ball*, align 8
  store %struct.ball* %0, %struct.ball** %3, align 8
  %6 = load %struct.ball*, %struct.ball** %3, align 8
  %7 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %6) #3
  %8 = bitcast %struct.ball* %4 to i8*
  %9 = bitcast %struct.ball* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 16, i32 8, i1 false)
  %10 = load %struct.ball*, %struct.ball** %3, align 8
  store %struct.ball* %10, %struct.ball** %5, align 8
  %11 = load %struct.ball*, %struct.ball** %5, align 8
  %12 = getelementptr inbounds %struct.ball, %struct.ball* %11, i32 -1
  store %struct.ball* %12, %struct.ball** %5, align 8
  %13 = alloca i32
  store i32 -222451780, i32* %13
  br label %14

; <label>:14:                                     ; preds = %1, %94
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -222451780, label %17
    i32 1775505416, label %21
    i32 1262644409, label %30
    i32 -1839005623, label %57
    i32 1043273020, label %88
    i32 630757607, label %89
  ]

; <label>:16:                                     ; preds = %14
  br label %94

; <label>:17:                                     ; preds = %14
  %18 = load %struct.ball*, %struct.ball** %5, align 8
  %19 = call zeroext i1 @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_2EclI4ballPS5_EEbRT_T0_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.13"* %2, %struct.ball* dereferenceable(16) %4, %struct.ball* %18)
  %20 = select i1 %19, i32 1775505416, i32 1262644409
  store i32 %20, i32* %13
  br label %94

; <label>:21:                                     ; preds = %14
  %22 = load %struct.ball*, %struct.ball** %5, align 8
  %23 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %22) #3
  %24 = load %struct.ball*, %struct.ball** %3, align 8
  %25 = bitcast %struct.ball* %24 to i8*
  %26 = bitcast %struct.ball* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  %27 = load %struct.ball*, %struct.ball** %5, align 8
  store %struct.ball* %27, %struct.ball** %3, align 8
  %28 = load %struct.ball*, %struct.ball** %5, align 8
  %29 = getelementptr inbounds %struct.ball, %struct.ball* %28, i32 -1
  store %struct.ball* %29, %struct.ball** %5, align 8
  store i32 -222451780, i32* %13
  br label %94

; <label>:30:                                     ; preds = %14
  %31 = load i32, i32* @x.411
  %32 = load i32, i32* @y.412
  %33 = sub i32 0, 1
  %34 = add i32 %31, %33
  %35 = sub i32 %31, 1
  %36 = mul i32 %31, %34
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %32, 10
  %40 = xor i1 %38, true
  %41 = xor i1 %39, true
  %42 = xor i1 true, true
  %43 = and i1 %40, true
  %44 = and i1 %38, %42
  %45 = and i1 %41, true
  %46 = and i1 %39, %42
  %47 = or i1 %43, %44
  %48 = or i1 %45, %46
  %49 = xor i1 %47, %48
  %50 = or i1 %40, %41
  %51 = xor i1 %50, true
  %52 = or i1 true, %42
  %53 = and i1 %51, %52
  %54 = or i1 %49, %53
  %55 = or i1 %38, %39
  %56 = select i1 %54, i32 -1839005623, i32 630757607
  store i32 %56, i32* %13
  br label %94

; <label>:57:                                     ; preds = %14
  %58 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %4) #3
  %59 = load %struct.ball*, %struct.ball** %3, align 8
  %60 = bitcast %struct.ball* %59 to i8*
  %61 = bitcast %struct.ball* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %61, i64 16, i32 8, i1 false)
  %62 = load i32, i32* @x.411
  %63 = load i32, i32* @y.412
  %64 = sub i32 0, 1
  %65 = add i32 %62, %64
  %66 = sub i32 %62, 1
  %67 = mul i32 %62, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %63, 10
  %71 = xor i1 %69, true
  %72 = xor i1 %70, true
  %73 = xor i1 true, true
  %74 = and i1 %71, true
  %75 = and i1 %69, %73
  %76 = and i1 %72, true
  %77 = and i1 %70, %73
  %78 = or i1 %74, %75
  %79 = or i1 %76, %77
  %80 = xor i1 %78, %79
  %81 = or i1 %71, %72
  %82 = xor i1 %81, true
  %83 = or i1 true, %73
  %84 = and i1 %82, %83
  %85 = or i1 %80, %84
  %86 = or i1 %69, %70
  %87 = select i1 %85, i32 1043273020, i32 630757607
  store i32 %87, i32* %13
  br label %94

; <label>:88:                                     ; preds = %14
  ret void

; <label>:89:                                     ; preds = %14
  %90 = call dereferenceable(16) %struct.ball* @_ZSt4moveIR4ballEONSt16remove_referenceIT_E4typeEOS3_(%struct.ball* dereferenceable(16) %4) #3
  %91 = load %struct.ball*, %struct.ball** %3, align 8
  %92 = bitcast %struct.ball* %91 to i8*
  %93 = bitcast %struct.ball* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %92, i8* %93, i64 16, i32 8, i1 false)
  store i32 -1839005623, i32* %13
  br label %94

; <label>:94:                                     ; preds = %89, %57, %30, %21, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define internal void @"_ZN9__gnu_cxx5__ops15__val_comp_iterIZ4mainE3$_2EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS4_EE"() #0 {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", align 1
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", align 1
  %3 = alloca %class.anon.2, align 1
  %4 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %2, i32 0, i32 0
  call void @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_2EC2ES2_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.13"* %1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_2EclI4ballPS5_EEbRT_T0_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.13"*, %struct.ball* dereferenceable(16), %struct.ball*) #4 align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.415
  %8 = load i32, i32* @y.416
  %9 = sub i32 %7, -600907701
  %10 = sub i32 %9, 1
  %11 = add i32 %10, -600907701
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 243884026, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %76
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 243884026, label %21
    i32 -24541689, label %29
    i32 2134348456, label %65
    i32 1388647730, label %67
  ]

; <label>:20:                                     ; preds = %18
  br label %76

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  %28 = select i1 %26, i32 -24541689, i32 1388647730
  store i32 %28, i32* %17
  br label %76

; <label>:29:                                     ; preds = %18
  %30 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"*, align 8
  %31 = alloca %struct.ball*, align 8
  %32 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"** %30, align 8
  store %struct.ball* %1, %struct.ball** %31, align 8
  store %struct.ball* %2, %struct.ball** %32, align 8
  %33 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"** %30, align 8
  %34 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"* %33, i32 0, i32 0
  %35 = load %struct.ball*, %struct.ball** %31, align 8
  %36 = load %struct.ball*, %struct.ball** %32, align 8
  %37 = call zeroext i1 @"_ZZ4mainENK3$_2clERK4ballS2_"(%class.anon.2* %34, %struct.ball* dereferenceable(16) %35, %struct.ball* dereferenceable(16) %36)
  store i1 %37, i1* %4
  %38 = load i32, i32* @x.415
  %39 = load i32, i32* @y.416
  %40 = sub i32 %38, 682347965
  %41 = sub i32 %40, 1
  %42 = add i32 %41, 682347965
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 true, true
  %51 = and i1 %48, true
  %52 = and i1 %46, %50
  %53 = and i1 %49, true
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 true, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  %64 = select i1 %62, i32 2134348456, i32 1388647730
  store i32 %64, i32* %17
  br label %76

; <label>:65:                                     ; preds = %18
  %66 = load volatile i1, i1* %4
  ret i1 %66

; <label>:67:                                     ; preds = %18
  %68 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"*, align 8
  %69 = alloca %struct.ball*, align 8
  %70 = alloca %struct.ball*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"** %68, align 8
  store %struct.ball* %1, %struct.ball** %69, align 8
  store %struct.ball* %2, %struct.ball** %70, align 8
  %71 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"** %68, align 8
  %72 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"* %71, i32 0, i32 0
  %73 = load %struct.ball*, %struct.ball** %69, align 8
  %74 = load %struct.ball*, %struct.ball** %70, align 8
  %75 = call zeroext i1 @"_ZZ4mainENK3$_2clERK4ballS2_"(%class.anon.2* %72, %struct.ball* dereferenceable(16) %73, %struct.ball* dereferenceable(16) %74)
  store i32 -24541689, i32* %17
  br label %76

; <label>:76:                                     ; preds = %67, %29, %21, %20
  br label %18
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops14_Val_comp_iterIZ4mainE3$_2EC2ES2_"(%"struct.__gnu_cxx::__ops::_Val_comp_iter.13"*) unnamed_addr #4 align 2 {
  %2 = alloca %class.anon.2, align 1
  %3 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"** %3, align 8
  %4 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"** %3, align 8
  %5 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter.13", %"struct.__gnu_cxx::__ops::_Val_comp_iter.13"* %4, i32 0, i32 0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @"_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZ4mainE3$_2EC2ES2_"(%"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*) unnamed_addr #4 align 2 {
  %2 = alloca %class.anon.2, align 1
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %3, align 8
  %4 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"** %3, align 8
  %5 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11", %"struct.__gnu_cxx::__ops::_Iter_comp_iter.11"* %4, i32 0, i32 0
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEEC2Ev(%"class.std::_Rb_tree"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %2, align 8
  %3 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %2, align 8
  %4 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %3, i32 0, i32 0
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EEC2Ev(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %4)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EEC2Ev(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*) unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = load i32, i32* @x.423
  %3 = load i32, i32* @y.424
  %4 = sub i32 %2, -1474699906
  %5 = sub i32 %4, 1
  %6 = add i32 %5, -1474699906
  %7 = sub i32 %2, 1
  %8 = mul i32 %2, %6
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %3, 10
  %12 = xor i1 %10, true
  %13 = xor i1 %11, true
  %14 = xor i1 false, true
  %15 = and i1 %12, false
  %16 = and i1 %10, %14
  %17 = and i1 %13, false
  %18 = and i1 %11, %14
  %19 = or i1 %15, %16
  %20 = or i1 %17, %18
  %21 = xor i1 %19, %20
  %22 = or i1 %12, %13
  %23 = xor i1 %22, true
  %24 = or i1 false, %14
  %25 = and i1 %23, %24
  %26 = or i1 %21, %25
  %27 = or i1 %10, %11
  br i1 %26, label %28, label %115

; <label>:28:                                     ; preds = %1, %115
  %29 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*, align 8
  %30 = alloca i8*
  %31 = alloca i32
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %0, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"** %29, align 8
  %32 = load %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"** %29, align 8
  %33 = bitcast %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %32 to %"class.std::allocator.4"*
  call void @_ZNSaISt13_Rb_tree_nodeIxEEC2Ev(%"class.std::allocator.4"* %33) #3
  %34 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %32, i32 0, i32 0
  %35 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %32, i32 0, i32 1
  %36 = bitcast %"struct.std::_Rb_tree_node_base"* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 32, i32 8, i1 false)
  %37 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %32, i32 0, i32 2
  store i64 0, i64* %37, align 8
  %38 = load i32, i32* @x.423
  %39 = load i32, i32* @y.424
  %40 = sub i32 0, 1
  %41 = add i32 %38, %40
  %42 = sub i32 %38, 1
  %43 = mul i32 %38, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %39, 10
  %47 = and i1 %45, %46
  %48 = xor i1 %45, %46
  %49 = or i1 %47, %48
  %50 = or i1 %45, %46
  br i1 %49, label %51, label %115

; <label>:51:                                     ; preds = %28
  invoke void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EE13_M_initializeEv(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %32)
          to label %52 unwind label %53

; <label>:52:                                     ; preds = %51
  ret void

; <label>:53:                                     ; preds = %51
  %54 = load i32, i32* @x.423
  %55 = load i32, i32* @y.424
  %56 = sub i32 0, 1
  %57 = add i32 %54, %56
  %58 = sub i32 %54, 1
  %59 = mul i32 %54, %57
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %55, 10
  %63 = xor i1 %61, true
  %64 = xor i1 %62, true
  %65 = xor i1 false, true
  %66 = and i1 %63, false
  %67 = and i1 %61, %65
  %68 = and i1 %64, false
  %69 = and i1 %62, %65
  %70 = or i1 %66, %67
  %71 = or i1 %68, %69
  %72 = xor i1 %70, %71
  %73 = or i1 %63, %64
  %74 = xor i1 %73, true
  %75 = or i1 false, %65
  %76 = and i1 %74, %75
  %77 = or i1 %72, %76
  %78 = or i1 %61, %62
  br i1 %77, label %79, label %125

; <label>:79:                                     ; preds = %53, %125
  %80 = landingpad { i8*, i32 }
          cleanup
  %81 = extractvalue { i8*, i32 } %80, 0
  store i8* %81, i8** %30, align 8
  %82 = extractvalue { i8*, i32 } %80, 1
  store i32 %82, i32* %31, align 4
  %83 = bitcast %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %32 to %"class.std::allocator.4"*
  call void @_ZNSaISt13_Rb_tree_nodeIxEED2Ev(%"class.std::allocator.4"* %83) #3
  %84 = load i32, i32* @x.423
  %85 = load i32, i32* @y.424
  %86 = sub i32 0, 1
  %87 = add i32 %84, %86
  %88 = sub i32 %84, 1
  %89 = mul i32 %84, %87
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %85, 10
  %93 = xor i1 %91, true
  %94 = xor i1 %92, true
  %95 = xor i1 true, true
  %96 = and i1 %93, true
  %97 = and i1 %91, %95
  %98 = and i1 %94, true
  %99 = and i1 %92, %95
  %100 = or i1 %96, %97
  %101 = or i1 %98, %99
  %102 = xor i1 %100, %101
  %103 = or i1 %93, %94
  %104 = xor i1 %103, true
  %105 = or i1 true, %95
  %106 = and i1 %104, %105
  %107 = or i1 %102, %106
  %108 = or i1 %91, %92
  br i1 %107, label %109, label %125

; <label>:109:                                    ; preds = %79
  br label %110

; <label>:110:                                    ; preds = %109
  %111 = load i8*, i8** %30, align 8
  %112 = load i32, i32* %31, align 4
  %113 = insertvalue { i8*, i32 } undef, i8* %111, 0
  %114 = insertvalue { i8*, i32 } %113, i32 %112, 1
  resume { i8*, i32 } %114

; <label>:115:                                    ; preds = %28, %1
  %116 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*, align 8
  %117 = alloca i8*
  %118 = alloca i32
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %0, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"** %116, align 8
  %119 = load %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"** %116, align 8
  %120 = bitcast %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %119 to %"class.std::allocator.4"*
  call void @_ZNSaISt13_Rb_tree_nodeIxEEC2Ev(%"class.std::allocator.4"* %120) #3
  %121 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %119, i32 0, i32 0
  %122 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %119, i32 0, i32 1
  %123 = bitcast %"struct.std::_Rb_tree_node_base"* %122 to i8*
  call void @llvm.memset.p0i8.i64(i8* %123, i8 0, i64 32, i32 8, i1 false)
  %124 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %119, i32 0, i32 2
  store i64 0, i64* %124, align 8
  br label %28

; <label>:125:                                    ; preds = %79, %53
  %126 = landingpad { i8*, i32 }
          cleanup
  %127 = extractvalue { i8*, i32 } %126, 0
  store i8* %127, i8** %30, align 8
  %128 = extractvalue { i8*, i32 } %126, 1
  store i32 %128, i32* %31, align 4
  %129 = bitcast %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %32 to %"class.std::allocator.4"*
  call void @_ZNSaISt13_Rb_tree_nodeIxEED2Ev(%"class.std::allocator.4"* %129) #3
  br label %79
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaISt13_Rb_tree_nodeIxEEC2Ev(%"class.std::allocator.4"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.425
  %5 = load i32, i32* @y.426
  %6 = add i32 %4, 21439338
  %7 = sub i32 %6, 1
  %8 = sub i32 %7, 21439338
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 1593345829, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %74
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 1593345829, label %18
    i32 1608897590, label %38
    i32 662513947, label %69
    i32 1536414451, label %70
  ]

; <label>:17:                                     ; preds = %15
  br label %74

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 true, true
  %24 = and i1 %21, true
  %25 = and i1 %19, %23
  %26 = and i1 %22, true
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 true, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 1608897590, i32 1536414451
  store i32 %37, i32* %14
  br label %74

; <label>:38:                                     ; preds = %15
  %39 = alloca %"class.std::allocator.4"*, align 8
  store %"class.std::allocator.4"* %0, %"class.std::allocator.4"** %39, align 8
  %40 = load %"class.std::allocator.4"*, %"class.std::allocator.4"** %39, align 8
  %41 = bitcast %"class.std::allocator.4"* %40 to %"class.__gnu_cxx::new_allocator.5"*
  call void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEEC2Ev(%"class.__gnu_cxx::new_allocator.5"* %41) #3
  %42 = load i32, i32* @x.425
  %43 = load i32, i32* @y.426
  %44 = add i32 %42, -1447859008
  %45 = sub i32 %44, 1
  %46 = sub i32 %45, -1447859008
  %47 = sub i32 %42, 1
  %48 = mul i32 %42, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %43, 10
  %52 = xor i1 %50, true
  %53 = xor i1 %51, true
  %54 = xor i1 false, true
  %55 = and i1 %52, false
  %56 = and i1 %50, %54
  %57 = and i1 %53, false
  %58 = and i1 %51, %54
  %59 = or i1 %55, %56
  %60 = or i1 %57, %58
  %61 = xor i1 %59, %60
  %62 = or i1 %52, %53
  %63 = xor i1 %62, true
  %64 = or i1 false, %54
  %65 = and i1 %63, %64
  %66 = or i1 %61, %65
  %67 = or i1 %50, %51
  %68 = select i1 %66, i32 662513947, i32 1536414451
  store i32 %68, i32* %14
  br label %74

; <label>:69:                                     ; preds = %15
  ret void

; <label>:70:                                     ; preds = %15
  %71 = alloca %"class.std::allocator.4"*, align 8
  store %"class.std::allocator.4"* %0, %"class.std::allocator.4"** %71, align 8
  %72 = load %"class.std::allocator.4"*, %"class.std::allocator.4"** %71, align 8
  %73 = bitcast %"class.std::allocator.4"* %72 to %"class.__gnu_cxx::new_allocator.5"*
  call void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEEC2Ev(%"class.__gnu_cxx::new_allocator.5"* %73) #3
  store i32 1608897590, i32* %14
  br label %74

; <label>:74:                                     ; preds = %70, %38, %18, %17
  br label %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE13_Rb_tree_implIS3_Lb1EE13_M_initializeEv(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*, align 8
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %0, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"** %2, align 8
  %3 = load %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"*, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %3, i32 0, i32 1
  %5 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %4, i32 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %3, i32 0, i32 1
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %6, i32 0, i32 1
  store %"struct.std::_Rb_tree_node_base"* null, %"struct.std::_Rb_tree_node_base"** %7, align 8
  %8 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %3, i32 0, i32 1
  %9 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %3, i32 0, i32 1
  %10 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %9, i32 0, i32 2
  store %"struct.std::_Rb_tree_node_base"* %8, %"struct.std::_Rb_tree_node_base"** %10, align 8
  %11 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %3, i32 0, i32 1
  %12 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %3, i32 0, i32 1
  %13 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %12, i32 0, i32 3
  store %"struct.std::_Rb_tree_node_base"* %11, %"struct.std::_Rb_tree_node_base"** %13, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEEC2Ev(%"class.__gnu_cxx::new_allocator.5"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.5"*, align 8
  store %"class.__gnu_cxx::new_allocator.5"* %0, %"class.__gnu_cxx::new_allocator.5"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator.5"*, %"class.__gnu_cxx::new_allocator.5"** %2, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE15_M_insert_equalIRKxEESt17_Rb_tree_iteratorIxEOT_(%"class.std::_Rb_tree"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %4 = alloca %"class.std::_Rb_tree"*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca %"struct.std::pair", align 8
  %7 = alloca %"struct.std::_Identity", align 1
  %8 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node", align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %4, align 8
  store i64* %1, i64** %5, align 8
  %9 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4, align 8
  %10 = load i64*, i64** %5, align 8
  %11 = call dereferenceable(8) i64* @_ZNKSt9_IdentityIxEclERKx(%"struct.std::_Identity"* %7, i64* dereferenceable(8) %10)
  %12 = call { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE23_M_get_insert_equal_posERKx(%"class.std::_Rb_tree"* %9, i64* dereferenceable(8) %11)
  %13 = bitcast %"struct.std::pair"* %6 to { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }*
  %14 = getelementptr inbounds { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }, { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }* %13, i32 0, i32 0
  %15 = extractvalue { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } %12, 0
  store %"struct.std::_Rb_tree_node_base"* %15, %"struct.std::_Rb_tree_node_base"** %14, align 8
  %16 = getelementptr inbounds { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }, { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }* %13, i32 0, i32 1
  %17 = extractvalue { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } %12, 1
  store %"struct.std::_Rb_tree_node_base"* %17, %"struct.std::_Rb_tree_node_base"** %16, align 8
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_Alloc_nodeC2ERS5_(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %8, %"class.std::_Rb_tree"* dereferenceable(48) %9)
  %18 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %6, i32 0, i32 0
  %19 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %18, align 8
  %20 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %6, i32 0, i32 1
  %21 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %20, align 8
  %22 = load i64*, i64** %5, align 8
  %23 = call dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8) %22) #3
  %24 = call %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE10_M_insert_IRKxNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIxEPSt18_Rb_tree_node_baseSD_OT_RT0_(%"class.std::_Rb_tree"* %9, %"struct.std::_Rb_tree_node_base"* %19, %"struct.std::_Rb_tree_node_base"* %21, i64* dereferenceable(8) %23, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* dereferenceable(8) %8)
  %25 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %3, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %24, %"struct.std::_Rb_tree_node_base"** %25, align 8
  %26 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %3, i32 0, i32 0
  %27 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %26, align 8
  ret %"struct.std::_Rb_tree_node_base"* %27
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt23_Rb_tree_const_iteratorIxEC2ERKSt17_Rb_tree_iteratorIxE(%"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_iterator"* dereferenceable(8)) unnamed_addr #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.433
  %6 = load i32, i32* @y.434
  %7 = sub i32 %5, 389375369
  %8 = sub i32 %7, 1
  %9 = add i32 %8, 389375369
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -704282143, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %71
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -704282143, label %19
    i32 -199374890, label %27
    i32 -1813796184, label %62
    i32 535905157, label %63
  ]

; <label>:18:                                     ; preds = %16
  br label %71

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -199374890, i32 535905157
  store i32 %26, i32* %15
  br label %71

; <label>:27:                                     ; preds = %16
  %28 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  %29 = alloca %"struct.std::_Rb_tree_iterator"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %28, align 8
  store %"struct.std::_Rb_tree_iterator"* %1, %"struct.std::_Rb_tree_iterator"** %29, align 8
  %30 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %28, align 8
  %31 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %30, i32 0, i32 0
  %32 = load %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %29, align 8
  %33 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %32, i32 0, i32 0
  %34 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %33, align 8
  store %"struct.std::_Rb_tree_node_base"* %34, %"struct.std::_Rb_tree_node_base"** %31, align 8
  %35 = load i32, i32* @x.433
  %36 = load i32, i32* @y.434
  %37 = add i32 %35, 1573290848
  %38 = sub i32 %37, 1
  %39 = sub i32 %38, 1573290848
  %40 = sub i32 %35, 1
  %41 = mul i32 %35, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %36, 10
  %45 = xor i1 %43, true
  %46 = xor i1 %44, true
  %47 = xor i1 true, true
  %48 = and i1 %45, true
  %49 = and i1 %43, %47
  %50 = and i1 %46, true
  %51 = and i1 %44, %47
  %52 = or i1 %48, %49
  %53 = or i1 %50, %51
  %54 = xor i1 %52, %53
  %55 = or i1 %45, %46
  %56 = xor i1 %55, true
  %57 = or i1 true, %47
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  %60 = or i1 %43, %44
  %61 = select i1 %59, i32 -1813796184, i32 535905157
  store i32 %61, i32* %15
  br label %71

; <label>:62:                                     ; preds = %16
  ret void

; <label>:63:                                     ; preds = %16
  %64 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  %65 = alloca %"struct.std::_Rb_tree_iterator"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %64, align 8
  store %"struct.std::_Rb_tree_iterator"* %1, %"struct.std::_Rb_tree_iterator"** %65, align 8
  %66 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %64, align 8
  %67 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %66, i32 0, i32 0
  %68 = load %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %65, align 8
  %69 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %68, i32 0, i32 0
  %70 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %69, align 8
  store %"struct.std::_Rb_tree_node_base"* %70, %"struct.std::_Rb_tree_node_base"** %67, align 8
  store i32 -199374890, i32* %15
  br label %71

; <label>:71:                                     ; preds = %63, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE23_M_get_insert_equal_posERKx(%"class.std::_Rb_tree"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca i1
  %4 = alloca %"class.std::_Rb_tree"*
  %5 = alloca %"struct.std::pair", align 8
  %6 = alloca %"class.std::_Rb_tree"*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %9 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %6, align 8
  store i64* %1, i64** %7, align 8
  %10 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %6, align 8
  store %"class.std::_Rb_tree"* %10, %"class.std::_Rb_tree"** %4
  %11 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %12 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_beginEv(%"class.std::_Rb_tree"* %11) #3
  store %"struct.std::_Rb_tree_node"* %12, %"struct.std::_Rb_tree_node"** %8, align 8
  %13 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %14 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_M_endEv(%"class.std::_Rb_tree"* %13) #3
  store %"struct.std::_Rb_tree_node"* %14, %"struct.std::_Rb_tree_node"** %9, align 8
  %15 = alloca i32
  store i32 -1050243102, i32* %15
  %16 = alloca %"struct.std::_Rb_tree_node"*
  br label %17

; <label>:17:                                     ; preds = %2, %94
  %18 = load i32, i32* %15
  switch i32 %18, label %19 [
    i32 -1050243102, label %20
    i32 -378927715, label %35
    i32 272867780, label %65
    i32 -970730229, label %68
    i32 1315130225, label %78
    i32 953152331, label %82
    i32 974007855, label %86
    i32 -2090630724, label %88
    i32 967948049, label %91
  ]

; <label>:19:                                     ; preds = %17
  br label %94

; <label>:20:                                     ; preds = %17
  %21 = load i32, i32* @x.435
  %22 = load i32, i32* @y.436
  %23 = sub i32 0, 1
  %24 = add i32 %21, %23
  %25 = sub i32 %21, 1
  %26 = mul i32 %21, %24
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %22, 10
  %30 = and i1 %28, %29
  %31 = xor i1 %28, %29
  %32 = or i1 %30, %31
  %33 = or i1 %28, %29
  %34 = select i1 %32, i32 -378927715, i32 967948049
  store i32 %34, i32* %15
  br label %94

; <label>:35:                                     ; preds = %17
  %36 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %8, align 8
  %37 = icmp ne %"struct.std::_Rb_tree_node"* %36, null
  store i1 %37, i1* %3
  %38 = load i32, i32* @x.435
  %39 = load i32, i32* @y.436
  %40 = sub i32 %38, -1737445261
  %41 = sub i32 %40, 1
  %42 = add i32 %41, -1737445261
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 true, true
  %51 = and i1 %48, true
  %52 = and i1 %46, %50
  %53 = and i1 %49, true
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 true, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  %64 = select i1 %62, i32 272867780, i32 967948049
  store i32 %64, i32* %15
  br label %94

; <label>:65:                                     ; preds = %17
  %66 = load volatile i1, i1* %3
  %67 = select i1 %66, i32 -970730229, i32 -2090630724
  store i32 %67, i32* %15
  br label %94

; <label>:68:                                     ; preds = %17
  %69 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %8, align 8
  store %"struct.std::_Rb_tree_node"* %69, %"struct.std::_Rb_tree_node"** %9, align 8
  %70 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %71 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %70, i32 0, i32 0
  %72 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %71, i32 0, i32 0
  %73 = load i64*, i64** %7, align 8
  %74 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %8, align 8
  %75 = call dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt13_Rb_tree_nodeIxE(%"struct.std::_Rb_tree_node"* %74)
  %76 = call zeroext i1 @_ZNKSt4lessIxEclERKxS2_(%"struct.std::less"* %72, i64* dereferenceable(8) %73, i64* dereferenceable(8) %75)
  %77 = select i1 %76, i32 1315130225, i32 953152331
  store i32 %77, i32* %15
  br label %94

; <label>:78:                                     ; preds = %17
  %79 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %8, align 8
  %80 = bitcast %"struct.std::_Rb_tree_node"* %79 to %"struct.std::_Rb_tree_node_base"*
  %81 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE7_S_leftEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %80) #3
  store i32 974007855, i32* %15
  store %"struct.std::_Rb_tree_node"* %81, %"struct.std::_Rb_tree_node"** %16
  br label %94

; <label>:82:                                     ; preds = %17
  %83 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %8, align 8
  %84 = bitcast %"struct.std::_Rb_tree_node"* %83 to %"struct.std::_Rb_tree_node_base"*
  %85 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_rightEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %84) #3
  store i32 974007855, i32* %15
  store %"struct.std::_Rb_tree_node"* %85, %"struct.std::_Rb_tree_node"** %16
  br label %94

; <label>:86:                                     ; preds = %17
  %87 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %16
  store %"struct.std::_Rb_tree_node"* %87, %"struct.std::_Rb_tree_node"** %8, align 8
  store i32 -1050243102, i32* %15
  br label %94

; <label>:88:                                     ; preds = %17
  call void @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIxES7_vEEOT_OT0_(%"struct.std::pair"* %5, %"struct.std::_Rb_tree_node"** dereferenceable(8) %8, %"struct.std::_Rb_tree_node"** dereferenceable(8) %9)
  %89 = bitcast %"struct.std::pair"* %5 to { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }*
  %90 = load { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }, { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* }* %89, align 8
  ret { %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* } %90

; <label>:91:                                     ; preds = %17
  %92 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %8, align 8
  %93 = icmp ne %"struct.std::_Rb_tree_node"* %92, null
  store i32 -378927715, i32* %15
  br label %94

; <label>:94:                                     ; preds = %91, %86, %82, %78, %68, %65, %35, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNKSt9_IdentityIxEclERKx(%"struct.std::_Identity"*, i64* dereferenceable(8)) #4 comdat align 2 {
  %3 = alloca %"struct.std::_Identity"*, align 8
  %4 = alloca i64*, align 8
  store %"struct.std::_Identity"* %0, %"struct.std::_Identity"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"struct.std::_Identity"*, %"struct.std::_Identity"** %3, align 8
  %6 = load i64*, i64** %4, align 8
  ret i64* %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_Alloc_nodeC2ERS5_(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, %"class.std::_Rb_tree"* dereferenceable(48)) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, align 8
  %4 = alloca %"class.std::_Rb_tree"*, align 8
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %0, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %3, align 8
  store %"class.std::_Rb_tree"* %1, %"class.std::_Rb_tree"** %4, align 8
  %5 = load %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %3, align 8
  %6 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %5, i32 0, i32 0
  %7 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4, align 8
  store %"class.std::_Rb_tree"* %7, %"class.std::_Rb_tree"** %6, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE10_M_insert_IRKxNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIxEPSt18_Rb_tree_node_baseSD_OT_RT0_(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, i64* dereferenceable(8), %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* dereferenceable(8)) #0 comdat align 2 {
  %6 = alloca i1
  %7 = alloca %"struct.std::_Rb_tree_node_base"*
  %8 = alloca i1
  %9 = alloca i1
  %10 = alloca %"class.std::_Rb_tree"*
  %11 = alloca %"struct.std::_Rb_tree_node"**
  %12 = alloca %"struct.std::_Identity"*
  %13 = alloca i8*
  %14 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"**
  %15 = alloca i64**
  %16 = alloca %"struct.std::_Rb_tree_node_base"**
  %17 = alloca %"struct.std::_Rb_tree_iterator"*
  %18 = alloca i1
  %19 = alloca i1
  %20 = load i32, i32* @x.441
  %21 = load i32, i32* @y.442
  %22 = sub i32 %20, -122574401
  %23 = sub i32 %22, 1
  %24 = add i32 %23, -122574401
  %25 = sub i32 %20, 1
  %26 = mul i32 %20, %24
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  store i1 %28, i1* %19
  %29 = icmp slt i32 %21, 10
  store i1 %29, i1* %18
  %30 = alloca i32
  store i32 -2064807594, i32* %30
  %31 = alloca i1
  br label %32

; <label>:32:                                     ; preds = %5, %339
  %33 = load i32, i32* %30
  switch i32 %33, label %34 [
    i32 -2064807594, label %35
    i32 -771425863, label %55
    i32 -1478677189, label %85
    i32 -1269527475, label %88
    i32 1240389772, label %115
    i32 -1379742399, label %148
    i32 1999748680, label %151
    i32 337433298, label %163
    i32 -1406220670, label %192
    i32 206975522, label %245
    i32 803544239, label %247
    i32 1104201603, label %260
    i32 2105210049, label %267
  ]

; <label>:34:                                     ; preds = %32
  br label %339

; <label>:35:                                     ; preds = %32
  %36 = load volatile i1, i1* %19
  %37 = load volatile i1, i1* %18
  %38 = xor i1 %36, true
  %39 = xor i1 %37, true
  %40 = xor i1 true, true
  %41 = and i1 %38, true
  %42 = and i1 %36, %40
  %43 = and i1 %39, true
  %44 = and i1 %37, %40
  %45 = or i1 %41, %42
  %46 = or i1 %43, %44
  %47 = xor i1 %45, %46
  %48 = or i1 %38, %39
  %49 = xor i1 %48, true
  %50 = or i1 true, %40
  %51 = and i1 %49, %50
  %52 = or i1 %47, %51
  %53 = or i1 %36, %37
  %54 = select i1 %52, i32 -771425863, i32 803544239
  store i32 %54, i32* %30
  br label %339

; <label>:55:                                     ; preds = %32
  %56 = alloca %"struct.std::_Rb_tree_iterator", align 8
  store %"struct.std::_Rb_tree_iterator"* %56, %"struct.std::_Rb_tree_iterator"** %17
  %57 = alloca %"class.std::_Rb_tree"*, align 8
  %58 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  %59 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  store %"struct.std::_Rb_tree_node_base"** %59, %"struct.std::_Rb_tree_node_base"*** %16
  %60 = alloca i64*, align 8
  store i64** %60, i64*** %15
  %61 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, align 8
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %61, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*** %14
  %62 = alloca i8, align 1
  store i8* %62, i8** %13
  %63 = alloca %"struct.std::_Identity", align 1
  store %"struct.std::_Identity"* %63, %"struct.std::_Identity"** %12
  %64 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"struct.std::_Rb_tree_node"** %64, %"struct.std::_Rb_tree_node"*** %11
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %57, align 8
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %58, align 8
  %65 = load volatile %"struct.std::_Rb_tree_node_base"**, %"struct.std::_Rb_tree_node_base"*** %16
  store %"struct.std::_Rb_tree_node_base"* %2, %"struct.std::_Rb_tree_node_base"** %65, align 8
  %66 = load volatile i64**, i64*** %15
  store i64* %3, i64** %66, align 8
  %67 = load volatile %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"**, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*** %14
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %4, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %67, align 8
  %68 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %57, align 8
  store %"class.std::_Rb_tree"* %68, %"class.std::_Rb_tree"** %10
  %69 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %58, align 8
  %70 = icmp ne %"struct.std::_Rb_tree_node_base"* %69, null
  store i1 %70, i1* %9
  %71 = load i32, i32* @x.441
  %72 = load i32, i32* @y.442
  %73 = sub i32 0, 1
  %74 = add i32 %71, %73
  %75 = sub i32 %71, 1
  %76 = mul i32 %71, %74
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %72, 10
  %80 = and i1 %78, %79
  %81 = xor i1 %78, %79
  %82 = or i1 %80, %81
  %83 = or i1 %78, %79
  %84 = select i1 %82, i32 -1478677189, i32 803544239
  store i32 %84, i32* %30
  br label %339

; <label>:85:                                     ; preds = %32
  %86 = load volatile i1, i1* %9
  %87 = select i1 %86, i32 337433298, i32 -1269527475
  store i32 %87, i32* %30
  store i1 true, i1* %31
  br label %339

; <label>:88:                                     ; preds = %32
  %89 = load i32, i32* @x.441
  %90 = load i32, i32* @y.442
  %91 = sub i32 0, 1
  %92 = add i32 %89, %91
  %93 = sub i32 %89, 1
  %94 = mul i32 %89, %92
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %90, 10
  %98 = xor i1 %96, true
  %99 = xor i1 %97, true
  %100 = xor i1 true, true
  %101 = and i1 %98, true
  %102 = and i1 %96, %100
  %103 = and i1 %99, true
  %104 = and i1 %97, %100
  %105 = or i1 %101, %102
  %106 = or i1 %103, %104
  %107 = xor i1 %105, %106
  %108 = or i1 %98, %99
  %109 = xor i1 %108, true
  %110 = or i1 true, %100
  %111 = and i1 %109, %110
  %112 = or i1 %107, %111
  %113 = or i1 %96, %97
  %114 = select i1 %112, i32 1240389772, i32 1104201603
  store i32 %114, i32* %30
  br label %339

; <label>:115:                                    ; preds = %32
  %116 = load volatile %"struct.std::_Rb_tree_node_base"**, %"struct.std::_Rb_tree_node_base"*** %16
  %117 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %116, align 8
  %118 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %10
  %119 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_M_endEv(%"class.std::_Rb_tree"* %118) #3
  %120 = bitcast %"struct.std::_Rb_tree_node"* %119 to %"struct.std::_Rb_tree_node_base"*
  %121 = icmp eq %"struct.std::_Rb_tree_node_base"* %117, %120
  store i1 %121, i1* %8
  %122 = load i32, i32* @x.441
  %123 = load i32, i32* @y.442
  %124 = sub i32 0, 1
  %125 = add i32 %122, %124
  %126 = sub i32 %122, 1
  %127 = mul i32 %122, %125
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %123, 10
  %131 = xor i1 %129, true
  %132 = xor i1 %130, true
  %133 = xor i1 false, true
  %134 = and i1 %131, false
  %135 = and i1 %129, %133
  %136 = and i1 %132, false
  %137 = and i1 %130, %133
  %138 = or i1 %134, %135
  %139 = or i1 %136, %137
  %140 = xor i1 %138, %139
  %141 = or i1 %131, %132
  %142 = xor i1 %141, true
  %143 = or i1 false, %133
  %144 = and i1 %142, %143
  %145 = or i1 %140, %144
  %146 = or i1 %129, %130
  %147 = select i1 %145, i32 -1379742399, i32 1104201603
  store i32 %147, i32* %30
  br label %339

; <label>:148:                                    ; preds = %32
  %149 = load volatile i1, i1* %8
  %150 = select i1 %149, i32 337433298, i32 1999748680
  store i32 %150, i32* %30
  store i1 true, i1* %31
  br label %339

; <label>:151:                                    ; preds = %32
  %152 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %10
  %153 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %152, i32 0, i32 0
  %154 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %153, i32 0, i32 0
  %155 = load volatile i64**, i64*** %15
  %156 = load i64*, i64** %155, align 8
  %157 = load volatile %"struct.std::_Identity"*, %"struct.std::_Identity"** %12
  %158 = call dereferenceable(8) i64* @_ZNKSt9_IdentityIxEclERKx(%"struct.std::_Identity"* %157, i64* dereferenceable(8) %156)
  %159 = load volatile %"struct.std::_Rb_tree_node_base"**, %"struct.std::_Rb_tree_node_base"*** %16
  %160 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %159, align 8
  %161 = call dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %160)
  %162 = call zeroext i1 @_ZNKSt4lessIxEclERKxS2_(%"struct.std::less"* %154, i64* dereferenceable(8) %158, i64* dereferenceable(8) %161)
  store i32 337433298, i32* %30
  store i1 %162, i1* %31
  br label %339

; <label>:163:                                    ; preds = %32
  %164 = load i1, i1* %31
  store i1 %164, i1* %6
  %165 = load i32, i32* @x.441
  %166 = load i32, i32* @y.442
  %167 = add i32 %165, 646916270
  %168 = sub i32 %167, 1
  %169 = sub i32 %168, 646916270
  %170 = sub i32 %165, 1
  %171 = mul i32 %165, %169
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %166, 10
  %175 = xor i1 %173, true
  %176 = xor i1 %174, true
  %177 = xor i1 true, true
  %178 = and i1 %175, true
  %179 = and i1 %173, %177
  %180 = and i1 %176, true
  %181 = and i1 %174, %177
  %182 = or i1 %178, %179
  %183 = or i1 %180, %181
  %184 = xor i1 %182, %183
  %185 = or i1 %175, %176
  %186 = xor i1 %185, true
  %187 = or i1 true, %177
  %188 = and i1 %186, %187
  %189 = or i1 %184, %188
  %190 = or i1 %173, %174
  %191 = select i1 %189, i32 -1406220670, i32 2105210049
  store i32 %191, i32* %30
  br label %339

; <label>:192:                                    ; preds = %32
  %193 = load volatile i1, i1* %6
  %194 = zext i1 %193 to i8
  %195 = load volatile i8*, i8** %13
  store i8 %194, i8* %195, align 1
  %196 = load volatile %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"**, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*** %14
  %197 = load %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %196, align 8
  %198 = load volatile i64**, i64*** %15
  %199 = load i64*, i64** %198, align 8
  %200 = call dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8) %199) #3
  %201 = call %"struct.std::_Rb_tree_node"* @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_Alloc_nodeclIRKxEEPSt13_Rb_tree_nodeIxEOT_(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %197, i64* dereferenceable(8) %200)
  %202 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %11
  store %"struct.std::_Rb_tree_node"* %201, %"struct.std::_Rb_tree_node"** %202, align 8
  %203 = load volatile i8*, i8** %13
  %204 = load i8, i8* %203, align 1
  %205 = trunc i8 %204 to i1
  %206 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %11
  %207 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %206, align 8
  %208 = bitcast %"struct.std::_Rb_tree_node"* %207 to %"struct.std::_Rb_tree_node_base"*
  %209 = load volatile %"struct.std::_Rb_tree_node_base"**, %"struct.std::_Rb_tree_node_base"*** %16
  %210 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %209, align 8
  %211 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %10
  %212 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %211, i32 0, i32 0
  %213 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %212, i32 0, i32 1
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %205, %"struct.std::_Rb_tree_node_base"* %208, %"struct.std::_Rb_tree_node_base"* %210, %"struct.std::_Rb_tree_node_base"* dereferenceable(32) %213) #3
  %214 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %10
  %215 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %214, i32 0, i32 0
  %216 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %215, i32 0, i32 2
  %217 = load i64, i64* %216, align 8
  %218 = sub i64 0, %217
  %219 = sub i64 0, 1
  %220 = add i64 %218, %219
  %221 = sub i64 0, %220
  %222 = add i64 %217, 1
  store i64 %221, i64* %216, align 8
  %223 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %11
  %224 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %223, align 8
  %225 = bitcast %"struct.std::_Rb_tree_node"* %224 to %"struct.std::_Rb_tree_node_base"*
  %226 = load volatile %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %17
  call void @_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_iterator"* %226, %"struct.std::_Rb_tree_node_base"* %225) #3
  %227 = load volatile %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %17
  %228 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %227, i32 0, i32 0
  %229 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %228, align 8
  store %"struct.std::_Rb_tree_node_base"* %229, %"struct.std::_Rb_tree_node_base"** %7
  %230 = load i32, i32* @x.441
  %231 = load i32, i32* @y.442
  %232 = add i32 %230, -1702943363
  %233 = sub i32 %232, 1
  %234 = sub i32 %233, -1702943363
  %235 = sub i32 %230, 1
  %236 = mul i32 %230, %234
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %231, 10
  %240 = and i1 %238, %239
  %241 = xor i1 %238, %239
  %242 = or i1 %240, %241
  %243 = or i1 %238, %239
  %244 = select i1 %242, i32 206975522, i32 2105210049
  store i32 %244, i32* %30
  br label %339

; <label>:245:                                    ; preds = %32
  %246 = load volatile %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %7
  ret %"struct.std::_Rb_tree_node_base"* %246

; <label>:247:                                    ; preds = %32
  %248 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %249 = alloca %"class.std::_Rb_tree"*, align 8
  %250 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  %251 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  %252 = alloca i64*, align 8
  %253 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, align 8
  %254 = alloca i8, align 1
  %255 = alloca %"struct.std::_Identity", align 1
  %256 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %249, align 8
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %250, align 8
  store %"struct.std::_Rb_tree_node_base"* %2, %"struct.std::_Rb_tree_node_base"** %251, align 8
  store i64* %3, i64** %252, align 8
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %4, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %253, align 8
  %257 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %249, align 8
  %258 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %250, align 8
  %259 = icmp ne %"struct.std::_Rb_tree_node_base"* %258, null
  store i32 -771425863, i32* %30
  br label %339

; <label>:260:                                    ; preds = %32
  %261 = load volatile %"struct.std::_Rb_tree_node_base"**, %"struct.std::_Rb_tree_node_base"*** %16
  %262 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %261, align 8
  %263 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %10
  %264 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_M_endEv(%"class.std::_Rb_tree"* %263) #3
  %265 = bitcast %"struct.std::_Rb_tree_node"* %264 to %"struct.std::_Rb_tree_node_base"*
  %266 = icmp eq %"struct.std::_Rb_tree_node_base"* %262, %265
  store i32 1240389772, i32* %30
  br label %339

; <label>:267:                                    ; preds = %32
  %268 = load volatile i1, i1* %6
  %269 = zext i1 %268 to i8
  %270 = load volatile i8*, i8** %13
  store i8 %269, i8* %270, align 1
  %271 = load volatile %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"**, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*** %14
  %272 = load %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %271, align 8
  %273 = load volatile i64**, i64*** %15
  %274 = load i64*, i64** %273, align 8
  %275 = call dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8) %274) #3
  %276 = call %"struct.std::_Rb_tree_node"* @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_Alloc_nodeclIRKxEEPSt13_Rb_tree_nodeIxEOT_(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %272, i64* dereferenceable(8) %275)
  %277 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %11
  store %"struct.std::_Rb_tree_node"* %276, %"struct.std::_Rb_tree_node"** %277, align 8
  %278 = load volatile i8*, i8** %13
  %279 = load i8, i8* %278, align 1
  %280 = trunc i8 %279 to i1
  %281 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %11
  %282 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %281, align 8
  %283 = bitcast %"struct.std::_Rb_tree_node"* %282 to %"struct.std::_Rb_tree_node_base"*
  %284 = load volatile %"struct.std::_Rb_tree_node_base"**, %"struct.std::_Rb_tree_node_base"*** %16
  %285 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %284, align 8
  %286 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %10
  %287 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %286, i32 0, i32 0
  %288 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %287, i32 0, i32 1
  call void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext %280, %"struct.std::_Rb_tree_node_base"* %283, %"struct.std::_Rb_tree_node_base"* %285, %"struct.std::_Rb_tree_node_base"* dereferenceable(32) %288) #3
  %289 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %10
  %290 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %289, i32 0, i32 0
  %291 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %290, i32 0, i32 2
  %292 = load i64, i64* %291, align 8
  %293 = sub i64 0, %292
  %294 = add i64 0, %293
  %295 = sub i64 0, %292
  %296 = add i64 %294, -7886829794933149957
  %297 = add i64 %296, 1
  %298 = sub i64 %297, -7886829794933149957
  %299 = add i64 %294, 1
  %300 = sub i64 0, %292
  %301 = add i64 0, %300
  %302 = sub i64 0, %292
  %303 = sub i64 0, 1
  %304 = sub i64 %301, %303
  %305 = add i64 %301, 1
  %306 = shl i64 %292, 1
  %307 = sub i64 0, %292
  %308 = add i64 0, %307
  %309 = sub i64 0, %292
  %310 = sub i64 0, %308
  %311 = sub i64 0, 1
  %312 = add i64 %310, %311
  %313 = sub i64 0, %312
  %314 = add i64 %308, 1
  %315 = add i64 0, 1346518859418958042
  %316 = sub i64 %315, %292
  %317 = sub i64 %316, 1346518859418958042
  %318 = sub i64 0, %292
  %319 = sub i64 %317, -7584360108863959012
  %320 = add i64 %319, 1
  %321 = add i64 %320, -7584360108863959012
  %322 = add i64 %317, 1
  %323 = add i64 %292, -3670771747995587256
  %324 = sub i64 %323, 1
  %325 = sub i64 %324, -3670771747995587256
  %326 = sub i64 %292, 1
  %327 = mul i64 %325, 1
  %328 = shl i64 %292, 1
  %329 = sub i64 0, 1
  %330 = sub i64 %292, %329
  %331 = add i64 %292, 1
  store i64 %330, i64* %291, align 8
  %332 = load volatile %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %11
  %333 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %332, align 8
  %334 = bitcast %"struct.std::_Rb_tree_node"* %333 to %"struct.std::_Rb_tree_node_base"*
  %335 = load volatile %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %17
  call void @_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_iterator"* %335, %"struct.std::_Rb_tree_node_base"* %334) #3
  %336 = load volatile %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %17
  %337 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %336, i32 0, i32 0
  %338 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %337, align 8
  store i32 -1406220670, i32* %30
  br label %339

; <label>:339:                                    ; preds = %267, %260, %247, %192, %163, %151, %148, %115, %88, %85, %55, %35, %34
  br label %32
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8)) #4 comdat {
  %2 = alloca i64*, align 8
  store i64* %0, i64** %2, align 8
  %3 = load i64*, i64** %2, align 8
  ret i64* %3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_M_endEv(%"class.std::_Rb_tree"*) #4 comdat align 2 {
  %2 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %2, align 8
  %3 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %2, align 8
  %4 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %3, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %4, i32 0, i32 1
  %6 = bitcast %"struct.std::_Rb_tree_node_base"* %5 to %"struct.std::_Rb_tree_node"*
  ret %"struct.std::_Rb_tree_node"* %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNKSt4lessIxEclERKxS2_(%"struct.std::less"*, i64* dereferenceable(8), i64* dereferenceable(8)) #4 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.447
  %8 = load i32, i32* @y.448
  %9 = sub i32 %7, -2125318659
  %10 = sub i32 %9, 1
  %11 = add i32 %10, -2125318659
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 81225386, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %78
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 81225386, label %21
    i32 1629023431, label %41
    i32 786001183, label %66
    i32 -2064435608, label %68
  ]

; <label>:20:                                     ; preds = %18
  br label %78

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = xor i1 %22, true
  %25 = xor i1 %23, true
  %26 = xor i1 false, true
  %27 = and i1 %24, false
  %28 = and i1 %22, %26
  %29 = and i1 %25, false
  %30 = and i1 %23, %26
  %31 = or i1 %27, %28
  %32 = or i1 %29, %30
  %33 = xor i1 %31, %32
  %34 = or i1 %24, %25
  %35 = xor i1 %34, true
  %36 = or i1 false, %26
  %37 = and i1 %35, %36
  %38 = or i1 %33, %37
  %39 = or i1 %22, %23
  %40 = select i1 %38, i32 1629023431, i32 -2064435608
  store i32 %40, i32* %17
  br label %78

; <label>:41:                                     ; preds = %18
  %42 = alloca %"struct.std::less"*, align 8
  %43 = alloca i64*, align 8
  %44 = alloca i64*, align 8
  store %"struct.std::less"* %0, %"struct.std::less"** %42, align 8
  store i64* %1, i64** %43, align 8
  store i64* %2, i64** %44, align 8
  %45 = load %"struct.std::less"*, %"struct.std::less"** %42, align 8
  %46 = load i64*, i64** %43, align 8
  %47 = load i64, i64* %46, align 8
  %48 = load i64*, i64** %44, align 8
  %49 = load i64, i64* %48, align 8
  %50 = icmp slt i64 %47, %49
  store i1 %50, i1* %4
  %51 = load i32, i32* @x.447
  %52 = load i32, i32* @y.448
  %53 = add i32 %51, 990973268
  %54 = sub i32 %53, 1
  %55 = sub i32 %54, 990973268
  %56 = sub i32 %51, 1
  %57 = mul i32 %51, %55
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %52, 10
  %61 = and i1 %59, %60
  %62 = xor i1 %59, %60
  %63 = or i1 %61, %62
  %64 = or i1 %59, %60
  %65 = select i1 %63, i32 786001183, i32 -2064435608
  store i32 %65, i32* %17
  br label %78

; <label>:66:                                     ; preds = %18
  %67 = load volatile i1, i1* %4
  ret i1 %67

; <label>:68:                                     ; preds = %18
  %69 = alloca %"struct.std::less"*, align 8
  %70 = alloca i64*, align 8
  %71 = alloca i64*, align 8
  store %"struct.std::less"* %0, %"struct.std::less"** %69, align 8
  store i64* %1, i64** %70, align 8
  store i64* %2, i64** %71, align 8
  %72 = load %"struct.std::less"*, %"struct.std::less"** %69, align 8
  %73 = load i64*, i64** %70, align 8
  %74 = load i64, i64* %73, align 8
  %75 = load i64*, i64** %71, align 8
  %76 = load i64, i64* %75, align 8
  %77 = icmp slt i64 %74, %76
  store i32 1629023431, i32* %17
  br label %78

; <label>:78:                                     ; preds = %68, %41, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt13_Rb_tree_nodeIxE(%"struct.std::_Rb_tree_node"*) #0 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %3 = alloca %"struct.std::_Identity", align 1
  store %"struct.std::_Rb_tree_node"* %0, %"struct.std::_Rb_tree_node"** %2, align 8
  %4 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %2, align 8
  %5 = call dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_valueEPKSt13_Rb_tree_nodeIxE(%"struct.std::_Rb_tree_node"* %4)
  %6 = call dereferenceable(8) i64* @_ZNKSt9_IdentityIxEclERKx(%"struct.std::_Identity"* %3, i64* dereferenceable(8) %5)
  ret i64* %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIxES7_vEEOT_OT0_(%"struct.std::pair"*, %"struct.std::_Rb_tree_node"** dereferenceable(8), %"struct.std::_Rb_tree_node"** dereferenceable(8)) unnamed_addr #4 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.451
  %7 = load i32, i32* @y.452
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 725121966, i32* %15
  br label %16

; <label>:16:                                     ; preds = %3, %85
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 725121966, label %19
    i32 872884273, label %27
    i32 -699411726, label %69
    i32 1062160894, label %70
  ]

; <label>:18:                                     ; preds = %16
  br label %85

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 872884273, i32 1062160894
  store i32 %26, i32* %15
  br label %85

; <label>:27:                                     ; preds = %16
  %28 = alloca %"struct.std::pair"*, align 8
  %29 = alloca %"struct.std::_Rb_tree_node"**, align 8
  %30 = alloca %"struct.std::_Rb_tree_node"**, align 8
  store %"struct.std::pair"* %0, %"struct.std::pair"** %28, align 8
  store %"struct.std::_Rb_tree_node"** %1, %"struct.std::_Rb_tree_node"*** %29, align 8
  store %"struct.std::_Rb_tree_node"** %2, %"struct.std::_Rb_tree_node"*** %30, align 8
  %31 = load %"struct.std::pair"*, %"struct.std::pair"** %28, align 8
  %32 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %31, i32 0, i32 0
  %33 = load %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %29, align 8
  %34 = call dereferenceable(8) %"struct.std::_Rb_tree_node"** @_ZSt7forwardIRPSt13_Rb_tree_nodeIxEEOT_RNSt16remove_referenceIS4_E4typeE(%"struct.std::_Rb_tree_node"** dereferenceable(8) %33) #3
  %35 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %34, align 8
  %36 = bitcast %"struct.std::_Rb_tree_node"* %35 to %"struct.std::_Rb_tree_node_base"*
  store %"struct.std::_Rb_tree_node_base"* %36, %"struct.std::_Rb_tree_node_base"** %32, align 8
  %37 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %31, i32 0, i32 1
  %38 = load %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %30, align 8
  %39 = call dereferenceable(8) %"struct.std::_Rb_tree_node"** @_ZSt7forwardIRPSt13_Rb_tree_nodeIxEEOT_RNSt16remove_referenceIS4_E4typeE(%"struct.std::_Rb_tree_node"** dereferenceable(8) %38) #3
  %40 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %39, align 8
  %41 = bitcast %"struct.std::_Rb_tree_node"* %40 to %"struct.std::_Rb_tree_node_base"*
  store %"struct.std::_Rb_tree_node_base"* %41, %"struct.std::_Rb_tree_node_base"** %37, align 8
  %42 = load i32, i32* @x.451
  %43 = load i32, i32* @y.452
  %44 = sub i32 %42, -2066536986
  %45 = sub i32 %44, 1
  %46 = add i32 %45, -2066536986
  %47 = sub i32 %42, 1
  %48 = mul i32 %42, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %43, 10
  %52 = xor i1 %50, true
  %53 = xor i1 %51, true
  %54 = xor i1 true, true
  %55 = and i1 %52, true
  %56 = and i1 %50, %54
  %57 = and i1 %53, true
  %58 = and i1 %51, %54
  %59 = or i1 %55, %56
  %60 = or i1 %57, %58
  %61 = xor i1 %59, %60
  %62 = or i1 %52, %53
  %63 = xor i1 %62, true
  %64 = or i1 true, %54
  %65 = and i1 %63, %64
  %66 = or i1 %61, %65
  %67 = or i1 %50, %51
  %68 = select i1 %66, i32 -699411726, i32 1062160894
  store i32 %68, i32* %15
  br label %85

; <label>:69:                                     ; preds = %16
  ret void

; <label>:70:                                     ; preds = %16
  %71 = alloca %"struct.std::pair"*, align 8
  %72 = alloca %"struct.std::_Rb_tree_node"**, align 8
  %73 = alloca %"struct.std::_Rb_tree_node"**, align 8
  store %"struct.std::pair"* %0, %"struct.std::pair"** %71, align 8
  store %"struct.std::_Rb_tree_node"** %1, %"struct.std::_Rb_tree_node"*** %72, align 8
  store %"struct.std::_Rb_tree_node"** %2, %"struct.std::_Rb_tree_node"*** %73, align 8
  %74 = load %"struct.std::pair"*, %"struct.std::pair"** %71, align 8
  %75 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %74, i32 0, i32 0
  %76 = load %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %72, align 8
  %77 = call dereferenceable(8) %"struct.std::_Rb_tree_node"** @_ZSt7forwardIRPSt13_Rb_tree_nodeIxEEOT_RNSt16remove_referenceIS4_E4typeE(%"struct.std::_Rb_tree_node"** dereferenceable(8) %76) #3
  %78 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %77, align 8
  %79 = bitcast %"struct.std::_Rb_tree_node"* %78 to %"struct.std::_Rb_tree_node_base"*
  store %"struct.std::_Rb_tree_node_base"* %79, %"struct.std::_Rb_tree_node_base"** %75, align 8
  %80 = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %74, i32 0, i32 1
  %81 = load %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %73, align 8
  %82 = call dereferenceable(8) %"struct.std::_Rb_tree_node"** @_ZSt7forwardIRPSt13_Rb_tree_nodeIxEEOT_RNSt16remove_referenceIS4_E4typeE(%"struct.std::_Rb_tree_node"** dereferenceable(8) %81) #3
  %83 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %82, align 8
  %84 = bitcast %"struct.std::_Rb_tree_node"* %83 to %"struct.std::_Rb_tree_node_base"*
  store %"struct.std::_Rb_tree_node_base"* %84, %"struct.std::_Rb_tree_node_base"** %80, align 8
  store i32 872884273, i32* %15
  br label %85

; <label>:85:                                     ; preds = %70, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_valueEPKSt13_Rb_tree_nodeIxE(%"struct.std::_Rb_tree_node"*) #0 comdat align 2 {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.453
  %6 = load i32, i32* @y.454
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -564631020, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %62
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -564631020, label %18
    i32 -698213022, label %26
    i32 -1315771681, label %56
    i32 -456098532, label %58
  ]

; <label>:17:                                     ; preds = %15
  br label %62

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 -698213022, i32 -456098532
  store i32 %25, i32* %14
  br label %62

; <label>:26:                                     ; preds = %15
  %27 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"struct.std::_Rb_tree_node"* %0, %"struct.std::_Rb_tree_node"** %27, align 8
  %28 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %27, align 8
  %29 = call i64* @_ZNKSt13_Rb_tree_nodeIxE9_M_valptrEv(%"struct.std::_Rb_tree_node"* %28)
  store i64* %29, i64** %2
  %30 = load i32, i32* @x.453
  %31 = load i32, i32* @y.454
  %32 = sub i32 0, 1
  %33 = add i32 %30, %32
  %34 = sub i32 %30, 1
  %35 = mul i32 %30, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %31, 10
  %39 = xor i1 %37, true
  %40 = xor i1 %38, true
  %41 = xor i1 true, true
  %42 = and i1 %39, true
  %43 = and i1 %37, %41
  %44 = and i1 %40, true
  %45 = and i1 %38, %41
  %46 = or i1 %42, %43
  %47 = or i1 %44, %45
  %48 = xor i1 %46, %47
  %49 = or i1 %39, %40
  %50 = xor i1 %49, true
  %51 = or i1 true, %41
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  %54 = or i1 %37, %38
  %55 = select i1 %53, i32 -1315771681, i32 -456098532
  store i32 %55, i32* %14
  br label %62

; <label>:56:                                     ; preds = %15
  %57 = load volatile i64*, i64** %2
  ret i64* %57

; <label>:58:                                     ; preds = %15
  %59 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"struct.std::_Rb_tree_node"* %0, %"struct.std::_Rb_tree_node"** %59, align 8
  %60 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %59, align 8
  %61 = call i64* @_ZNKSt13_Rb_tree_nodeIxE9_M_valptrEv(%"struct.std::_Rb_tree_node"* %60)
  store i32 -698213022, i32* %14
  br label %62

; <label>:62:                                     ; preds = %58, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNKSt13_Rb_tree_nodeIxE9_M_valptrEv(%"struct.std::_Rb_tree_node"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"struct.std::_Rb_tree_node"* %0, %"struct.std::_Rb_tree_node"** %2, align 8
  %3 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Rb_tree_node", %"struct.std::_Rb_tree_node"* %3, i32 0, i32 1
  %5 = call i64* @_ZNK9__gnu_cxx16__aligned_membufIxE6_M_ptrEv(%"struct.__gnu_cxx::__aligned_membuf"* %4) #3
  ret i64* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNK9__gnu_cxx16__aligned_membufIxE6_M_ptrEv(%"struct.__gnu_cxx::__aligned_membuf"*) #4 comdat align 2 {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.457
  %6 = load i32, i32* @y.458
  %7 = sub i32 %5, 953917894
  %8 = sub i32 %7, 1
  %9 = add i32 %8, 953917894
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1062306529, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %65
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1062306529, label %19
    i32 1437027676, label %39
    i32 -1705410883, label %58
    i32 -1232874483, label %60
  ]

; <label>:18:                                     ; preds = %16
  br label %65

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 1437027676, i32 -1232874483
  store i32 %38, i32* %15
  br label %65

; <label>:39:                                     ; preds = %16
  %40 = alloca %"struct.__gnu_cxx::__aligned_membuf"*, align 8
  store %"struct.__gnu_cxx::__aligned_membuf"* %0, %"struct.__gnu_cxx::__aligned_membuf"** %40, align 8
  %41 = load %"struct.__gnu_cxx::__aligned_membuf"*, %"struct.__gnu_cxx::__aligned_membuf"** %40, align 8
  %42 = call i8* @_ZNK9__gnu_cxx16__aligned_membufIxE7_M_addrEv(%"struct.__gnu_cxx::__aligned_membuf"* %41) #3
  %43 = bitcast i8* %42 to i64*
  store i64* %43, i64** %2
  %44 = load i32, i32* @x.457
  %45 = load i32, i32* @y.458
  %46 = sub i32 0, 1
  %47 = add i32 %44, %46
  %48 = sub i32 %44, 1
  %49 = mul i32 %44, %47
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %45, 10
  %53 = and i1 %51, %52
  %54 = xor i1 %51, %52
  %55 = or i1 %53, %54
  %56 = or i1 %51, %52
  %57 = select i1 %55, i32 -1705410883, i32 -1232874483
  store i32 %57, i32* %15
  br label %65

; <label>:58:                                     ; preds = %16
  %59 = load volatile i64*, i64** %2
  ret i64* %59

; <label>:60:                                     ; preds = %16
  %61 = alloca %"struct.__gnu_cxx::__aligned_membuf"*, align 8
  store %"struct.__gnu_cxx::__aligned_membuf"* %0, %"struct.__gnu_cxx::__aligned_membuf"** %61, align 8
  %62 = load %"struct.__gnu_cxx::__aligned_membuf"*, %"struct.__gnu_cxx::__aligned_membuf"** %61, align 8
  %63 = call i8* @_ZNK9__gnu_cxx16__aligned_membufIxE7_M_addrEv(%"struct.__gnu_cxx::__aligned_membuf"* %62) #3
  %64 = bitcast i8* %63 to i64*
  store i32 1437027676, i32* %15
  br label %65

; <label>:65:                                     ; preds = %60, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i8* @_ZNK9__gnu_cxx16__aligned_membufIxE7_M_addrEv(%"struct.__gnu_cxx::__aligned_membuf"*) #4 comdat align 2 {
  %2 = alloca %"struct.__gnu_cxx::__aligned_membuf"*, align 8
  store %"struct.__gnu_cxx::__aligned_membuf"* %0, %"struct.__gnu_cxx::__aligned_membuf"** %2, align 8
  %3 = load %"struct.__gnu_cxx::__aligned_membuf"*, %"struct.__gnu_cxx::__aligned_membuf"** %2, align 8
  %4 = getelementptr inbounds %"struct.__gnu_cxx::__aligned_membuf", %"struct.__gnu_cxx::__aligned_membuf"* %3, i32 0, i32 0
  %5 = bitcast [8 x i8]* %4 to i8*
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %"struct.std::_Rb_tree_node"** @_ZSt7forwardIRPSt13_Rb_tree_nodeIxEEOT_RNSt16remove_referenceIS4_E4typeE(%"struct.std::_Rb_tree_node"** dereferenceable(8)) #4 comdat {
  %2 = alloca %"struct.std::_Rb_tree_node"**, align 8
  store %"struct.std::_Rb_tree_node"** %0, %"struct.std::_Rb_tree_node"*** %2, align 8
  %3 = load %"struct.std::_Rb_tree_node"**, %"struct.std::_Rb_tree_node"*** %2, align 8
  ret %"struct.std::_Rb_tree_node"** %3
}

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) #0 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  %3 = alloca %"struct.std::_Identity", align 1
  store %"struct.std::_Rb_tree_node_base"* %0, %"struct.std::_Rb_tree_node_base"** %2, align 8
  %4 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %2, align 8
  %5 = call dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_valueEPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %4)
  %6 = call dereferenceable(8) i64* @_ZNKSt9_IdentityIxEclERKx(%"struct.std::_Identity"* %3, i64* dereferenceable(8) %5)
  ret i64* %6
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_Alloc_nodeclIRKxEEPSt13_Rb_tree_nodeIxEOT_(%"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, align 8
  %4 = alloca i64*, align 8
  store %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %0, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"*, %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"** %3, align 8
  %6 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Alloc_node"* %5, i32 0, i32 0
  %7 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %6, align 8
  %8 = load i64*, i64** %4, align 8
  %9 = call dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8) %8) #3
  %10 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE14_M_create_nodeIJRKxEEEPSt13_Rb_tree_nodeIxEDpOT_(%"class.std::_Rb_tree"* %7, i64* dereferenceable(8) %9)
  ret %"struct.std::_Rb_tree_node"* %10
}

; Function Attrs: nounwind
declare void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i1 zeroext, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* dereferenceable(32)) #2

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_node_base"*) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_iterator"*, align 8
  %4 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  store %"struct.std::_Rb_tree_iterator"* %0, %"struct.std::_Rb_tree_iterator"** %3, align 8
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %4, align 8
  %5 = load %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %3, align 8
  %6 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %5, i32 0, i32 0
  %7 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %4, align 8
  store %"struct.std::_Rb_tree_node_base"* %7, %"struct.std::_Rb_tree_node_base"** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_valueEPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  store %"struct.std::_Rb_tree_node_base"* %0, %"struct.std::_Rb_tree_node_base"** %2, align 8
  %3 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %2, align 8
  %4 = bitcast %"struct.std::_Rb_tree_node_base"* %3 to %"struct.std::_Rb_tree_node"*
  %5 = call i64* @_ZNKSt13_Rb_tree_nodeIxE9_M_valptrEv(%"struct.std::_Rb_tree_node"* %4)
  ret i64* %5
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE14_M_create_nodeIJRKxEEEPSt13_Rb_tree_nodeIxEDpOT_(%"class.std::_Rb_tree"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"class.std::_Rb_tree"*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca %"struct.std::_Rb_tree_node"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3, align 8
  %7 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_M_get_nodeEv(%"class.std::_Rb_tree"* %6)
  store %"struct.std::_Rb_tree_node"* %7, %"struct.std::_Rb_tree_node"** %5, align 8
  %8 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  %9 = load i64*, i64** %4, align 8
  %10 = call dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8) %9) #3
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE17_M_construct_nodeIJRKxEEEvPSt13_Rb_tree_nodeIxEDpOT_(%"class.std::_Rb_tree"* %6, %"struct.std::_Rb_tree_node"* %8, i64* dereferenceable(8) %10)
  %11 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  ret %"struct.std::_Rb_tree_node"* %11
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_M_get_nodeEv(%"class.std::_Rb_tree"*) #0 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node"*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.473
  %6 = load i32, i32* @y.474
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 174496465, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %65
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 174496465, label %18
    i32 1521582017, label %26
    i32 1281799088, label %58
    i32 242484657, label %60
  ]

; <label>:17:                                     ; preds = %15
  br label %65

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 1521582017, i32 242484657
  store i32 %25, i32* %14
  br label %65

; <label>:26:                                     ; preds = %15
  %27 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %27, align 8
  %28 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %27, align 8
  %29 = call dereferenceable(1) %"class.std::allocator.4"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE21_M_get_Node_allocatorEv(%"class.std::_Rb_tree"* %28) #3
  %30 = call %"struct.std::_Rb_tree_node"* @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE8allocateERS2_m(%"class.std::allocator.4"* dereferenceable(1) %29, i64 1)
  store %"struct.std::_Rb_tree_node"* %30, %"struct.std::_Rb_tree_node"** %2
  %31 = load i32, i32* @x.473
  %32 = load i32, i32* @y.474
  %33 = add i32 %31, 1729325247
  %34 = sub i32 %33, 1
  %35 = sub i32 %34, 1729325247
  %36 = sub i32 %31, 1
  %37 = mul i32 %31, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %32, 10
  %41 = xor i1 %39, true
  %42 = xor i1 %40, true
  %43 = xor i1 true, true
  %44 = and i1 %41, true
  %45 = and i1 %39, %43
  %46 = and i1 %42, true
  %47 = and i1 %40, %43
  %48 = or i1 %44, %45
  %49 = or i1 %46, %47
  %50 = xor i1 %48, %49
  %51 = or i1 %41, %42
  %52 = xor i1 %51, true
  %53 = or i1 true, %43
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = or i1 %39, %40
  %57 = select i1 %55, i32 1281799088, i32 242484657
  store i32 %57, i32* %14
  br label %65

; <label>:58:                                     ; preds = %15
  %59 = load volatile %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %2
  ret %"struct.std::_Rb_tree_node"* %59

; <label>:60:                                     ; preds = %15
  %61 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %61, align 8
  %62 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %61, align 8
  %63 = call dereferenceable(1) %"class.std::allocator.4"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE21_M_get_Node_allocatorEv(%"class.std::_Rb_tree"* %62) #3
  %64 = call %"struct.std::_Rb_tree_node"* @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE8allocateERS2_m(%"class.std::allocator.4"* dereferenceable(1) %63, i64 1)
  store i32 1521582017, i32* %14
  br label %65

; <label>:65:                                     ; preds = %60, %26, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE17_M_construct_nodeIJRKxEEEvPSt13_Rb_tree_nodeIxEDpOT_(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node"*, i64* dereferenceable(8)) #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca %"class.std::_Rb_tree"*, align 8
  %5 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i8*
  %8 = alloca i32
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %4, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %5, align 8
  store i64* %2, i64** %6, align 8
  %9 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4, align 8
  %10 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  %11 = bitcast %"struct.std::_Rb_tree_node"* %10 to i8*
  %12 = bitcast i8* %11 to %"struct.std::_Rb_tree_node"*
  %13 = call dereferenceable(1) %"class.std::allocator.4"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE21_M_get_Node_allocatorEv(%"class.std::_Rb_tree"* %9) #3
  %14 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  %15 = invoke i64* @_ZNSt13_Rb_tree_nodeIxE9_M_valptrEv(%"struct.std::_Rb_tree_node"* %14)
          to label %16 unwind label %20

; <label>:16:                                     ; preds = %3
  %17 = load i64*, i64** %6, align 8
  %18 = call dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8) %17) #3
  invoke void @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE9constructIxJRKxEEEvRS2_PT_DpOT0_(%"class.std::allocator.4"* dereferenceable(1) %13, i64* %15, i64* dereferenceable(8) %18)
          to label %19 unwind label %20

; <label>:19:                                     ; preds = %16
  br label %140

; <label>:20:                                     ; preds = %16, %3
  %21 = load i32, i32* @x.475
  %22 = load i32, i32* @y.476
  %23 = sub i32 %21, -780294089
  %24 = sub i32 %23, 1
  %25 = add i32 %24, -780294089
  %26 = sub i32 %21, 1
  %27 = mul i32 %21, %25
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %22, 10
  %31 = xor i1 %29, true
  %32 = xor i1 %30, true
  %33 = xor i1 true, true
  %34 = and i1 %31, true
  %35 = and i1 %29, %33
  %36 = and i1 %32, true
  %37 = and i1 %30, %33
  %38 = or i1 %34, %35
  %39 = or i1 %36, %37
  %40 = xor i1 %38, %39
  %41 = or i1 %31, %32
  %42 = xor i1 %41, true
  %43 = or i1 true, %33
  %44 = and i1 %42, %43
  %45 = or i1 %40, %44
  %46 = or i1 %29, %30
  br i1 %45, label %47, label %204

; <label>:47:                                     ; preds = %20, %204
  %48 = landingpad { i8*, i32 }
          catch i8* null
  %49 = extractvalue { i8*, i32 } %48, 0
  store i8* %49, i8** %7, align 8
  %50 = extractvalue { i8*, i32 } %48, 1
  store i32 %50, i32* %8, align 4
  %51 = load i32, i32* @x.475
  %52 = load i32, i32* @y.476
  %53 = sub i32 0, 1
  %54 = add i32 %51, %53
  %55 = sub i32 %51, 1
  %56 = mul i32 %51, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %52, 10
  %60 = xor i1 %58, true
  %61 = xor i1 %59, true
  %62 = xor i1 true, true
  %63 = and i1 %60, true
  %64 = and i1 %58, %62
  %65 = and i1 %61, true
  %66 = and i1 %59, %62
  %67 = or i1 %63, %64
  %68 = or i1 %65, %66
  %69 = xor i1 %67, %68
  %70 = or i1 %60, %61
  %71 = xor i1 %70, true
  %72 = or i1 true, %62
  %73 = and i1 %71, %72
  %74 = or i1 %69, %73
  %75 = or i1 %58, %59
  br i1 %74, label %76, label %204

; <label>:76:                                     ; preds = %47
  br label %77

; <label>:77:                                     ; preds = %76
  %78 = load i8*, i8** %7, align 8
  %79 = call i8* @__cxa_begin_catch(i8* %78) #3
  %80 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  %81 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE11_M_put_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %9, %"struct.std::_Rb_tree_node"* %81) #3
  invoke void @__cxa_rethrow() #14
          to label %149 unwind label %82

; <label>:82:                                     ; preds = %77
  %83 = load i32, i32* @x.475
  %84 = load i32, i32* @y.476
  %85 = add i32 %83, -1557150473
  %86 = sub i32 %85, 1
  %87 = sub i32 %86, -1557150473
  %88 = sub i32 %83, 1
  %89 = mul i32 %83, %87
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %84, 10
  %93 = xor i1 %91, true
  %94 = xor i1 %92, true
  %95 = xor i1 true, true
  %96 = and i1 %93, true
  %97 = and i1 %91, %95
  %98 = and i1 %94, true
  %99 = and i1 %92, %95
  %100 = or i1 %96, %97
  %101 = or i1 %98, %99
  %102 = xor i1 %100, %101
  %103 = or i1 %93, %94
  %104 = xor i1 %103, true
  %105 = or i1 true, %95
  %106 = and i1 %104, %105
  %107 = or i1 %102, %106
  %108 = or i1 %91, %92
  br i1 %107, label %109, label %208

; <label>:109:                                    ; preds = %82, %208
  %110 = landingpad { i8*, i32 }
          cleanup
  %111 = extractvalue { i8*, i32 } %110, 0
  store i8* %111, i8** %7, align 8
  %112 = extractvalue { i8*, i32 } %110, 1
  store i32 %112, i32* %8, align 4
  %113 = load i32, i32* @x.475
  %114 = load i32, i32* @y.476
  %115 = sub i32 0, 1
  %116 = add i32 %113, %115
  %117 = sub i32 %113, 1
  %118 = mul i32 %113, %116
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %114, 10
  %122 = xor i1 %120, true
  %123 = xor i1 %121, true
  %124 = xor i1 true, true
  %125 = and i1 %122, true
  %126 = and i1 %120, %124
  %127 = and i1 %123, true
  %128 = and i1 %121, %124
  %129 = or i1 %125, %126
  %130 = or i1 %127, %128
  %131 = xor i1 %129, %130
  %132 = or i1 %122, %123
  %133 = xor i1 %132, true
  %134 = or i1 true, %124
  %135 = and i1 %133, %134
  %136 = or i1 %131, %135
  %137 = or i1 %120, %121
  br i1 %136, label %138, label %208

; <label>:138:                                    ; preds = %109
  invoke void @__cxa_end_catch()
          to label %139 unwind label %146

; <label>:139:                                    ; preds = %138
  br label %141

; <label>:140:                                    ; preds = %19
  ret void

; <label>:141:                                    ; preds = %139
  %142 = load i8*, i8** %7, align 8
  %143 = load i32, i32* %8, align 4
  %144 = insertvalue { i8*, i32 } undef, i8* %142, 0
  %145 = insertvalue { i8*, i32 } %144, i32 %143, 1
  resume { i8*, i32 } %145

; <label>:146:                                    ; preds = %138
  %147 = landingpad { i8*, i32 }
          catch i8* null
  %148 = extractvalue { i8*, i32 } %147, 0
  call void @__clang_call_terminate(i8* %148) #13
  unreachable

; <label>:149:                                    ; preds = %77
  %150 = load i32, i32* @x.475
  %151 = load i32, i32* @y.476
  %152 = add i32 %150, -1314702464
  %153 = sub i32 %152, 1
  %154 = sub i32 %153, -1314702464
  %155 = sub i32 %150, 1
  %156 = mul i32 %150, %154
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %151, 10
  %160 = xor i1 %158, true
  %161 = xor i1 %159, true
  %162 = xor i1 false, true
  %163 = and i1 %160, false
  %164 = and i1 %158, %162
  %165 = and i1 %161, false
  %166 = and i1 %159, %162
  %167 = or i1 %163, %164
  %168 = or i1 %165, %166
  %169 = xor i1 %167, %168
  %170 = or i1 %160, %161
  %171 = xor i1 %170, true
  %172 = or i1 false, %162
  %173 = and i1 %171, %172
  %174 = or i1 %169, %173
  %175 = or i1 %158, %159
  br i1 %174, label %176, label %212

; <label>:176:                                    ; preds = %149, %212
  %177 = load i32, i32* @x.475
  %178 = load i32, i32* @y.476
  %179 = sub i32 %177, 1715171732
  %180 = sub i32 %179, 1
  %181 = add i32 %180, 1715171732
  %182 = sub i32 %177, 1
  %183 = mul i32 %177, %181
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %178, 10
  %187 = xor i1 %185, true
  %188 = xor i1 %186, true
  %189 = xor i1 true, true
  %190 = and i1 %187, true
  %191 = and i1 %185, %189
  %192 = and i1 %188, true
  %193 = and i1 %186, %189
  %194 = or i1 %190, %191
  %195 = or i1 %192, %193
  %196 = xor i1 %194, %195
  %197 = or i1 %187, %188
  %198 = xor i1 %197, true
  %199 = or i1 true, %189
  %200 = and i1 %198, %199
  %201 = or i1 %196, %200
  %202 = or i1 %185, %186
  br i1 %201, label %203, label %212

; <label>:203:                                    ; preds = %176
  unreachable

; <label>:204:                                    ; preds = %47, %20
  %205 = landingpad { i8*, i32 }
          catch i8* null
  %206 = extractvalue { i8*, i32 } %205, 0
  store i8* %206, i8** %7, align 8
  %207 = extractvalue { i8*, i32 } %205, 1
  store i32 %207, i32* %8, align 4
  br label %47

; <label>:208:                                    ; preds = %109, %82
  %209 = landingpad { i8*, i32 }
          cleanup
  %210 = extractvalue { i8*, i32 } %209, 0
  store i8* %210, i8** %7, align 8
  %211 = extractvalue { i8*, i32 } %209, 1
  store i32 %211, i32* %8, align 4
  br label %109

; <label>:212:                                    ; preds = %176, %149
  br label %176
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE8allocateERS2_m(%"class.std::allocator.4"* dereferenceable(1), i64) #0 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_node"*
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.477
  %7 = load i32, i32* @y.478
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 1818046751, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %70
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1818046751, label %19
    i32 -1275464503, label %27
    i32 -245971766, label %61
    i32 -16249081, label %63
  ]

; <label>:18:                                     ; preds = %16
  br label %70

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -1275464503, i32 -16249081
  store i32 %26, i32* %15
  br label %70

; <label>:27:                                     ; preds = %16
  %28 = alloca %"class.std::allocator.4"*, align 8
  %29 = alloca i64, align 8
  store %"class.std::allocator.4"* %0, %"class.std::allocator.4"** %28, align 8
  store i64 %1, i64* %29, align 8
  %30 = load %"class.std::allocator.4"*, %"class.std::allocator.4"** %28, align 8
  %31 = bitcast %"class.std::allocator.4"* %30 to %"class.__gnu_cxx::new_allocator.5"*
  %32 = load i64, i64* %29, align 8
  %33 = call %"struct.std::_Rb_tree_node"* @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.5"* %31, i64 %32, i8* null)
  store %"struct.std::_Rb_tree_node"* %33, %"struct.std::_Rb_tree_node"** %3
  %34 = load i32, i32* @x.477
  %35 = load i32, i32* @y.478
  %36 = sub i32 %34, 1127343653
  %37 = sub i32 %36, 1
  %38 = add i32 %37, 1127343653
  %39 = sub i32 %34, 1
  %40 = mul i32 %34, %38
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %35, 10
  %44 = xor i1 %42, true
  %45 = xor i1 %43, true
  %46 = xor i1 true, true
  %47 = and i1 %44, true
  %48 = and i1 %42, %46
  %49 = and i1 %45, true
  %50 = and i1 %43, %46
  %51 = or i1 %47, %48
  %52 = or i1 %49, %50
  %53 = xor i1 %51, %52
  %54 = or i1 %44, %45
  %55 = xor i1 %54, true
  %56 = or i1 true, %46
  %57 = and i1 %55, %56
  %58 = or i1 %53, %57
  %59 = or i1 %42, %43
  %60 = select i1 %58, i32 -245971766, i32 -16249081
  store i32 %60, i32* %15
  br label %70

; <label>:61:                                     ; preds = %16
  %62 = load volatile %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %3
  ret %"struct.std::_Rb_tree_node"* %62

; <label>:63:                                     ; preds = %16
  %64 = alloca %"class.std::allocator.4"*, align 8
  %65 = alloca i64, align 8
  store %"class.std::allocator.4"* %0, %"class.std::allocator.4"** %64, align 8
  store i64 %1, i64* %65, align 8
  %66 = load %"class.std::allocator.4"*, %"class.std::allocator.4"** %64, align 8
  %67 = bitcast %"class.std::allocator.4"* %66 to %"class.__gnu_cxx::new_allocator.5"*
  %68 = load i64, i64* %65, align 8
  %69 = call %"struct.std::_Rb_tree_node"* @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.5"* %67, i64 %68, i8* null)
  store i32 -1275464503, i32* %15
  br label %70

; <label>:70:                                     ; preds = %63, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node"* @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.5"*, i64, i8*) #0 comdat align 2 {
  %4 = alloca %"struct.std::_Rb_tree_node"*
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca %"class.__gnu_cxx::new_allocator.5"*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator.5"* %0, %"class.__gnu_cxx::new_allocator.5"** %7, align 8
  store i64 %1, i64* %8, align 8
  store i8* %2, i8** %9, align 8
  %10 = load %"class.__gnu_cxx::new_allocator.5"*, %"class.__gnu_cxx::new_allocator.5"** %7, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %6
  %12 = call i64 @_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE8max_sizeEv(%"class.__gnu_cxx::new_allocator.5"* %10) #3
  store i64 %12, i64* %5
  %13 = alloca i32
  store i32 -704931056, i32* %13
  br label %14

; <label>:14:                                     ; preds = %3, %126
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -704931056, label %17
    i32 -979449090, label %22
    i32 1987499616, label %23
    i32 -1455515512, label %51
    i32 -697081309, label %82
    i32 -25443211, label %84
  ]

; <label>:16:                                     ; preds = %14
  br label %126

; <label>:17:                                     ; preds = %14
  %18 = load volatile i64, i64* %6
  %19 = load volatile i64, i64* %5
  %20 = icmp ugt i64 %18, %19
  %21 = select i1 %20, i32 -979449090, i32 1987499616
  store i32 %21, i32* %13
  br label %126

; <label>:22:                                     ; preds = %14
  call void @_ZSt17__throw_bad_allocv() #14
  unreachable

; <label>:23:                                     ; preds = %14
  %24 = load i32, i32* @x.479
  %25 = load i32, i32* @y.480
  %26 = add i32 %24, 1163371655
  %27 = sub i32 %26, 1
  %28 = sub i32 %27, 1163371655
  %29 = sub i32 %24, 1
  %30 = mul i32 %24, %28
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %25, 10
  %34 = xor i1 %32, true
  %35 = xor i1 %33, true
  %36 = xor i1 false, true
  %37 = and i1 %34, false
  %38 = and i1 %32, %36
  %39 = and i1 %35, false
  %40 = and i1 %33, %36
  %41 = or i1 %37, %38
  %42 = or i1 %39, %40
  %43 = xor i1 %41, %42
  %44 = or i1 %34, %35
  %45 = xor i1 %44, true
  %46 = or i1 false, %36
  %47 = and i1 %45, %46
  %48 = or i1 %43, %47
  %49 = or i1 %32, %33
  %50 = select i1 %48, i32 -1455515512, i32 -25443211
  store i32 %50, i32* %13
  br label %126

; <label>:51:                                     ; preds = %14
  %52 = load i64, i64* %8, align 8
  %53 = mul i64 %52, 40
  %54 = call i8* @_Znwm(i64 %53)
  %55 = bitcast i8* %54 to %"struct.std::_Rb_tree_node"*
  store %"struct.std::_Rb_tree_node"* %55, %"struct.std::_Rb_tree_node"** %4
  %56 = load i32, i32* @x.479
  %57 = load i32, i32* @y.480
  %58 = sub i32 0, 1
  %59 = add i32 %56, %58
  %60 = sub i32 %56, 1
  %61 = mul i32 %56, %59
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %57, 10
  %65 = xor i1 %63, true
  %66 = xor i1 %64, true
  %67 = xor i1 false, true
  %68 = and i1 %65, false
  %69 = and i1 %63, %67
  %70 = and i1 %66, false
  %71 = and i1 %64, %67
  %72 = or i1 %68, %69
  %73 = or i1 %70, %71
  %74 = xor i1 %72, %73
  %75 = or i1 %65, %66
  %76 = xor i1 %75, true
  %77 = or i1 false, %67
  %78 = and i1 %76, %77
  %79 = or i1 %74, %78
  %80 = or i1 %63, %64
  %81 = select i1 %79, i32 -697081309, i32 -25443211
  store i32 %81, i32* %13
  br label %126

; <label>:82:                                     ; preds = %14
  %83 = load volatile %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %4
  ret %"struct.std::_Rb_tree_node"* %83

; <label>:84:                                     ; preds = %14
  %85 = load i64, i64* %8, align 8
  %86 = shl i64 %85, 40
  %87 = shl i64 %85, 40
  %88 = sub i64 0, %85
  %89 = add i64 0, %88
  %90 = sub i64 0, %85
  %91 = sub i64 0, 40
  %92 = sub i64 %89, %91
  %93 = add i64 %89, 40
  %94 = sub i64 %85, -2018004487645781648
  %95 = sub i64 %94, 40
  %96 = add i64 %95, -2018004487645781648
  %97 = sub i64 %85, 40
  %98 = mul i64 %96, 40
  %99 = sub i64 0, -4544999956494845977
  %100 = sub i64 %99, %85
  %101 = add i64 %100, -4544999956494845977
  %102 = sub i64 0, %85
  %103 = sub i64 %101, -8732490156204795618
  %104 = add i64 %103, 40
  %105 = add i64 %104, -8732490156204795618
  %106 = add i64 %101, 40
  %107 = add i64 %85, 4984134566483344022
  %108 = sub i64 %107, 40
  %109 = sub i64 %108, 4984134566483344022
  %110 = sub i64 %85, 40
  %111 = mul i64 %109, 40
  %112 = sub i64 0, 40
  %113 = add i64 %85, %112
  %114 = sub i64 %85, 40
  %115 = mul i64 %113, 40
  %116 = sub i64 0, %85
  %117 = add i64 0, %116
  %118 = sub i64 0, %85
  %119 = add i64 %117, -8745666730752178827
  %120 = add i64 %119, 40
  %121 = sub i64 %120, -8745666730752178827
  %122 = add i64 %117, 40
  %123 = mul i64 %85, 40
  %124 = call i8* @_Znwm(i64 %123)
  %125 = bitcast i8* %124 to %"struct.std::_Rb_tree_node"*
  store i32 -1455515512, i32* %13
  br label %126

; <label>:126:                                    ; preds = %84, %51, %23, %17, %16
  br label %14
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE8max_sizeEv(%"class.__gnu_cxx::new_allocator.5"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.5"*, align 8
  store %"class.__gnu_cxx::new_allocator.5"* %0, %"class.__gnu_cxx::new_allocator.5"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator.5"*, %"class.__gnu_cxx::new_allocator.5"** %2, align 8
  ret i64 461168601842738790
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIxEEE9constructIxJRKxEEEvRS2_PT_DpOT0_(%"class.std::allocator.4"* dereferenceable(1), i64*, i64* dereferenceable(8)) #0 comdat align 2 {
  %4 = alloca %"class.std::allocator.4"*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store %"class.std::allocator.4"* %0, %"class.std::allocator.4"** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load %"class.std::allocator.4"*, %"class.std::allocator.4"** %4, align 8
  %8 = bitcast %"class.std::allocator.4"* %7 to %"class.__gnu_cxx::new_allocator.5"*
  %9 = load i64*, i64** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8) %10) #3
  call void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE9constructIxJRKxEEEvPT_DpOT0_(%"class.__gnu_cxx::new_allocator.5"* %8, i64* %9, i64* dereferenceable(8) %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIxEE9constructIxJRKxEEEvPT_DpOT0_(%"class.__gnu_cxx::new_allocator.5"*, i64*, i64* dereferenceable(8)) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::new_allocator.5"*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store %"class.__gnu_cxx::new_allocator.5"* %0, %"class.__gnu_cxx::new_allocator.5"** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load %"class.__gnu_cxx::new_allocator.5"*, %"class.__gnu_cxx::new_allocator.5"** %4, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = bitcast i64* %8 to i8*
  %10 = bitcast i8* %9 to i64*
  %11 = load i64*, i64** %6, align 8
  %12 = call dereferenceable(8) i64* @_ZSt7forwardIRKxEOT_RNSt16remove_referenceIS2_E4typeE(i64* dereferenceable(8) %11) #3
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %10, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6rbeginEv(%"class.std::reverse_iterator"* noalias sret, %"class.std::_Rb_tree"*) #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::_Rb_tree"*, align 8
  %4 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  store %"class.std::_Rb_tree"* %1, %"class.std::_Rb_tree"** %3, align 8
  %5 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3, align 8
  %6 = call %"struct.std::_Rb_tree_node_base"* @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE3endEv(%"class.std::_Rb_tree"* %5) #3
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %4, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %6, %"struct.std::_Rb_tree_node_base"** %7, align 8
  %8 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %4, i32 0, i32 0
  %9 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %8, align 8
  invoke void @_ZNSt16reverse_iteratorISt23_Rb_tree_const_iteratorIxEEC2ES1_(%"class.std::reverse_iterator"* %0, %"struct.std::_Rb_tree_node_base"* %9)
          to label %10 unwind label %11

; <label>:10:                                     ; preds = %2
  ret void

; <label>:11:                                     ; preds = %2
  %12 = landingpad { i8*, i32 }
          catch i8* null
  %13 = extractvalue { i8*, i32 } %12, 0
  call void @__clang_call_terminate(i8* %13) #13
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE3endEv(%"class.std::_Rb_tree"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %3 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %3, align 8
  %4 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3, align 8
  %5 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %5, i32 0, i32 1
  call void @_ZNSt23_Rb_tree_const_iteratorIxEC2EPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_const_iterator"* %2, %"struct.std::_Rb_tree_node_base"* %6) #3
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %2, i32 0, i32 0
  %8 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %7, align 8
  ret %"struct.std::_Rb_tree_node_base"* %8
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt16reverse_iteratorISt23_Rb_tree_const_iteratorIxEEC2ES1_(%"class.std::reverse_iterator"*, %"struct.std::_Rb_tree_node_base"*) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %4 = alloca %"class.std::reverse_iterator"*, align 8
  %5 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %5, align 8
  store %"class.std::reverse_iterator"* %0, %"class.std::reverse_iterator"** %4, align 8
  %6 = load %"class.std::reverse_iterator"*, %"class.std::reverse_iterator"** %4, align 8
  %7 = bitcast %"class.std::reverse_iterator"* %6 to %"struct.std::iterator"*
  %8 = getelementptr inbounds %"class.std::reverse_iterator", %"class.std::reverse_iterator"* %6, i32 0, i32 0
  %9 = bitcast %"struct.std::_Rb_tree_const_iterator"* %8 to i8*
  %10 = bitcast %"struct.std::_Rb_tree_const_iterator"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 8, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt23_Rb_tree_const_iteratorIxEC2EPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_node_base"*) unnamed_addr #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.493
  %6 = load i32, i32* @y.494
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -59224006, i32* %14
  br label %15

; <label>:15:                                     ; preds = %2, %54
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -59224006, label %18
    i32 466090621, label %26
    i32 -1508194896, label %47
    i32 364007260, label %48
  ]

; <label>:17:                                     ; preds = %15
  br label %54

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 466090621, i32 364007260
  store i32 %25, i32* %14
  br label %54

; <label>:26:                                     ; preds = %15
  %27 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  %28 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %27, align 8
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %28, align 8
  %29 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %27, align 8
  %30 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %29, i32 0, i32 0
  %31 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %28, align 8
  store %"struct.std::_Rb_tree_node_base"* %31, %"struct.std::_Rb_tree_node_base"** %30, align 8
  %32 = load i32, i32* @x.493
  %33 = load i32, i32* @y.494
  %34 = sub i32 %32, -220685626
  %35 = sub i32 %34, 1
  %36 = add i32 %35, -220685626
  %37 = sub i32 %32, 1
  %38 = mul i32 %32, %36
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %33, 10
  %42 = and i1 %40, %41
  %43 = xor i1 %40, %41
  %44 = or i1 %42, %43
  %45 = or i1 %40, %41
  %46 = select i1 %44, i32 -1508194896, i32 364007260
  store i32 %46, i32* %14
  br label %54

; <label>:47:                                     ; preds = %15
  ret void

; <label>:48:                                     ; preds = %15
  %49 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  %50 = alloca %"struct.std::_Rb_tree_node_base"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %49, align 8
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %50, align 8
  %51 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %49, align 8
  %52 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %51, i32 0, i32 0
  %53 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %50, align 8
  store %"struct.std::_Rb_tree_node_base"* %53, %"struct.std::_Rb_tree_node_base"** %52, align 8
  store i32 466090621, i32* %14
  br label %54

; <label>:54:                                     ; preds = %48, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %"struct.std::_Rb_tree_const_iterator"* @_ZNSt23_Rb_tree_const_iteratorIxEmmEv(%"struct.std::_Rb_tree_const_iterator"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %2, align 8
  %3 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  %5 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %4, align 8
  %6 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %5) #15
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %6, %"struct.std::_Rb_tree_node_base"** %7, align 8
  ret %"struct.std::_Rb_tree_const_iterator"* %3
}

; Function Attrs: nounwind readonly
declare %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) #12

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNKSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE5beginEv(%"class.std::_Rb_tree"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %3 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %3, align 8
  %4 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3, align 8
  %5 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %5, i32 0, i32 1
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_node_base", %"struct.std::_Rb_tree_node_base"* %6, i32 0, i32 2
  %8 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %7, align 8
  call void @_ZNSt23_Rb_tree_const_iteratorIxEC2EPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_const_iterator"* %2, %"struct.std::_Rb_tree_node_base"* %8) #3
  %9 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %2, i32 0, i32 0
  %10 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %9, align 8
  ret %"struct.std::_Rb_tree_node_base"* %10
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE4findERKx(%"class.std::_Rb_tree"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca i1
  %4 = alloca %"class.std::_Rb_tree"*
  %5 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %6 = alloca %"class.std::_Rb_tree"*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %9 = alloca %"struct.std::_Rb_tree_iterator", align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %6, align 8
  store i64* %1, i64** %7, align 8
  %10 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %6, align 8
  store %"class.std::_Rb_tree"* %10, %"class.std::_Rb_tree"** %4
  %11 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %12 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_M_beginEv(%"class.std::_Rb_tree"* %11) #3
  %13 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %14 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_M_endEv(%"class.std::_Rb_tree"* %13) #3
  %15 = load i64*, i64** %7, align 8
  %16 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %17 = call %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE14_M_lower_boundEPSt13_Rb_tree_nodeIxES8_RKx(%"class.std::_Rb_tree"* %16, %"struct.std::_Rb_tree_node"* %12, %"struct.std::_Rb_tree_node"* %14, i64* dereferenceable(8) %15)
  %18 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %8, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %17, %"struct.std::_Rb_tree_node_base"** %18, align 8
  %19 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %20 = call %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE3endEv(%"class.std::_Rb_tree"* %19) #3
  %21 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %9, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %20, %"struct.std::_Rb_tree_node_base"** %21, align 8
  %22 = alloca i32
  store i32 -1577667843, i32* %22
  br label %23

; <label>:23:                                     ; preds = %2, %134
  %24 = load i32, i32* %22
  switch i32 %24, label %25 [
    i32 -1577667843, label %26
    i32 -910235934, label %29
    i32 1199903492, label %44
    i32 403651290, label %67
    i32 -1597272046, label %70
    i32 -922387695, label %74
    i32 -1827997746, label %101
    i32 -438773455, label %118
    i32 -1348770542, label %119
    i32 -2030020095, label %122
    i32 1974296879, label %131
  ]

; <label>:25:                                     ; preds = %23
  br label %134

; <label>:26:                                     ; preds = %23
  %27 = call zeroext i1 @_ZNKSt17_Rb_tree_iteratorIxEeqERKS0_(%"struct.std::_Rb_tree_iterator"* %8, %"struct.std::_Rb_tree_iterator"* dereferenceable(8) %9) #3
  %28 = select i1 %27, i32 -1597272046, i32 -910235934
  store i32 %28, i32* %22
  br label %134

; <label>:29:                                     ; preds = %23
  %30 = load i32, i32* @x.499
  %31 = load i32, i32* @y.500
  %32 = sub i32 0, 1
  %33 = add i32 %30, %32
  %34 = sub i32 %30, 1
  %35 = mul i32 %30, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %31, 10
  %39 = and i1 %37, %38
  %40 = xor i1 %37, %38
  %41 = or i1 %39, %40
  %42 = or i1 %37, %38
  %43 = select i1 %41, i32 1199903492, i32 -2030020095
  store i32 %43, i32* %22
  br label %134

; <label>:44:                                     ; preds = %23
  %45 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %46 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %45, i32 0, i32 0
  %47 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %46, i32 0, i32 0
  %48 = load i64*, i64** %7, align 8
  %49 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %8, i32 0, i32 0
  %50 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %49, align 8
  %51 = call dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %50)
  %52 = call zeroext i1 @_ZNKSt4lessIxEclERKxS2_(%"struct.std::less"* %47, i64* dereferenceable(8) %48, i64* dereferenceable(8) %51)
  store i1 %52, i1* %3
  %53 = load i32, i32* @x.499
  %54 = load i32, i32* @y.500
  %55 = sub i32 0, 1
  %56 = add i32 %53, %55
  %57 = sub i32 %53, 1
  %58 = mul i32 %53, %56
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %54, 10
  %62 = and i1 %60, %61
  %63 = xor i1 %60, %61
  %64 = or i1 %62, %63
  %65 = or i1 %60, %61
  %66 = select i1 %64, i32 403651290, i32 -2030020095
  store i32 %66, i32* %22
  br label %134

; <label>:67:                                     ; preds = %23
  %68 = load volatile i1, i1* %3
  %69 = select i1 %68, i32 -1597272046, i32 -922387695
  store i32 %69, i32* %22
  br label %134

; <label>:70:                                     ; preds = %23
  %71 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %72 = call %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE3endEv(%"class.std::_Rb_tree"* %71) #3
  %73 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %5, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %72, %"struct.std::_Rb_tree_node_base"** %73, align 8
  store i32 -1348770542, i32* %22
  br label %134

; <label>:74:                                     ; preds = %23
  %75 = load i32, i32* @x.499
  %76 = load i32, i32* @y.500
  %77 = sub i32 0, 1
  %78 = add i32 %75, %77
  %79 = sub i32 %75, 1
  %80 = mul i32 %75, %78
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %76, 10
  %84 = xor i1 %82, true
  %85 = xor i1 %83, true
  %86 = xor i1 true, true
  %87 = and i1 %84, true
  %88 = and i1 %82, %86
  %89 = and i1 %85, true
  %90 = and i1 %83, %86
  %91 = or i1 %87, %88
  %92 = or i1 %89, %90
  %93 = xor i1 %91, %92
  %94 = or i1 %84, %85
  %95 = xor i1 %94, true
  %96 = or i1 true, %86
  %97 = and i1 %95, %96
  %98 = or i1 %93, %97
  %99 = or i1 %82, %83
  %100 = select i1 %98, i32 -1827997746, i32 1974296879
  store i32 %100, i32* %22
  br label %134

; <label>:101:                                    ; preds = %23
  %102 = bitcast %"struct.std::_Rb_tree_iterator"* %5 to i8*
  %103 = bitcast %"struct.std::_Rb_tree_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %102, i8* %103, i64 8, i32 8, i1 false)
  %104 = load i32, i32* @x.499
  %105 = load i32, i32* @y.500
  %106 = sub i32 0, 1
  %107 = add i32 %104, %106
  %108 = sub i32 %104, 1
  %109 = mul i32 %104, %107
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %105, 10
  %113 = and i1 %111, %112
  %114 = xor i1 %111, %112
  %115 = or i1 %113, %114
  %116 = or i1 %111, %112
  %117 = select i1 %115, i32 -438773455, i32 1974296879
  store i32 %117, i32* %22
  br label %134

; <label>:118:                                    ; preds = %23
  store i32 -1348770542, i32* %22
  br label %134

; <label>:119:                                    ; preds = %23
  %120 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %5, i32 0, i32 0
  %121 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %120, align 8
  ret %"struct.std::_Rb_tree_node_base"* %121

; <label>:122:                                    ; preds = %23
  %123 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4
  %124 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %123, i32 0, i32 0
  %125 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %124, i32 0, i32 0
  %126 = load i64*, i64** %7, align 8
  %127 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %8, i32 0, i32 0
  %128 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %127, align 8
  %129 = call dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %128)
  %130 = call zeroext i1 @_ZNKSt4lessIxEclERKxS2_(%"struct.std::less"* %125, i64* dereferenceable(8) %126, i64* dereferenceable(8) %129)
  store i32 1199903492, i32* %22
  br label %134

; <label>:131:                                    ; preds = %23
  %132 = bitcast %"struct.std::_Rb_tree_iterator"* %5 to i8*
  %133 = bitcast %"struct.std::_Rb_tree_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %132, i8* %133, i64 8, i32 8, i1 false)
  store i32 -1827997746, i32* %22
  br label %134

; <label>:134:                                    ; preds = %131, %122, %118, %101, %74, %70, %67, %44, %29, %26, %25
  br label %23
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE14_M_lower_boundEPSt13_Rb_tree_nodeIxES8_RKx(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %5 = alloca %"struct.std::_Rb_tree_node_base"*
  %6 = alloca %"class.std::_Rb_tree"*
  %7 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %8 = alloca %"class.std::_Rb_tree"*, align 8
  %9 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %10 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %11 = alloca i64*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %8, align 8
  store %"struct.std::_Rb_tree_node"* %1, %"struct.std::_Rb_tree_node"** %9, align 8
  store %"struct.std::_Rb_tree_node"* %2, %"struct.std::_Rb_tree_node"** %10, align 8
  store i64* %3, i64** %11, align 8
  %12 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %8, align 8
  store %"class.std::_Rb_tree"* %12, %"class.std::_Rb_tree"** %6
  %13 = alloca i32
  store i32 -451905602, i32* %13
  br label %14

; <label>:14:                                     ; preds = %4, %94
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -451905602, label %17
    i32 -877573279, label %21
    i32 274522991, label %30
    i32 1110401205, label %35
    i32 196149728, label %39
    i32 -2018273054, label %40
    i32 193578241, label %67
    i32 -1898923834, label %87
    i32 -82031894, label %89
  ]

; <label>:16:                                     ; preds = %14
  br label %94

; <label>:17:                                     ; preds = %14
  %18 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %9, align 8
  %19 = icmp ne %"struct.std::_Rb_tree_node"* %18, null
  %20 = select i1 %19, i32 -877573279, i32 -2018273054
  store i32 %20, i32* %13
  br label %94

; <label>:21:                                     ; preds = %14
  %22 = load volatile %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %6
  %23 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %22, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %23, i32 0, i32 0
  %25 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %9, align 8
  %26 = call dereferenceable(8) i64* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE6_S_keyEPKSt13_Rb_tree_nodeIxE(%"struct.std::_Rb_tree_node"* %25)
  %27 = load i64*, i64** %11, align 8
  %28 = call zeroext i1 @_ZNKSt4lessIxEclERKxS2_(%"struct.std::less"* %24, i64* dereferenceable(8) %26, i64* dereferenceable(8) %27)
  %29 = select i1 %28, i32 1110401205, i32 274522991
  store i32 %29, i32* %13
  br label %94

; <label>:30:                                     ; preds = %14
  %31 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %9, align 8
  store %"struct.std::_Rb_tree_node"* %31, %"struct.std::_Rb_tree_node"** %10, align 8
  %32 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %9, align 8
  %33 = bitcast %"struct.std::_Rb_tree_node"* %32 to %"struct.std::_Rb_tree_node_base"*
  %34 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE7_S_leftEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %33) #3
  store %"struct.std::_Rb_tree_node"* %34, %"struct.std::_Rb_tree_node"** %9, align 8
  store i32 196149728, i32* %13
  br label %94

; <label>:35:                                     ; preds = %14
  %36 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %9, align 8
  %37 = bitcast %"struct.std::_Rb_tree_node"* %36 to %"struct.std::_Rb_tree_node_base"*
  %38 = call %"struct.std::_Rb_tree_node"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE8_S_rightEPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %37) #3
  store %"struct.std::_Rb_tree_node"* %38, %"struct.std::_Rb_tree_node"** %9, align 8
  store i32 196149728, i32* %13
  br label %94

; <label>:39:                                     ; preds = %14
  store i32 -451905602, i32* %13
  br label %94

; <label>:40:                                     ; preds = %14
  %41 = load i32, i32* @x.501
  %42 = load i32, i32* @y.502
  %43 = sub i32 0, 1
  %44 = add i32 %41, %43
  %45 = sub i32 %41, 1
  %46 = mul i32 %41, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %42, 10
  %50 = xor i1 %48, true
  %51 = xor i1 %49, true
  %52 = xor i1 true, true
  %53 = and i1 %50, true
  %54 = and i1 %48, %52
  %55 = and i1 %51, true
  %56 = and i1 %49, %52
  %57 = or i1 %53, %54
  %58 = or i1 %55, %56
  %59 = xor i1 %57, %58
  %60 = or i1 %50, %51
  %61 = xor i1 %60, true
  %62 = or i1 true, %52
  %63 = and i1 %61, %62
  %64 = or i1 %59, %63
  %65 = or i1 %48, %49
  %66 = select i1 %64, i32 193578241, i32 -82031894
  store i32 %66, i32* %13
  br label %94

; <label>:67:                                     ; preds = %14
  %68 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %10, align 8
  %69 = bitcast %"struct.std::_Rb_tree_node"* %68 to %"struct.std::_Rb_tree_node_base"*
  call void @_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_iterator"* %7, %"struct.std::_Rb_tree_node_base"* %69) #3
  %70 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %7, i32 0, i32 0
  %71 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %70, align 8
  store %"struct.std::_Rb_tree_node_base"* %71, %"struct.std::_Rb_tree_node_base"** %5
  %72 = load i32, i32* @x.501
  %73 = load i32, i32* @y.502
  %74 = add i32 %72, 456613522
  %75 = sub i32 %74, 1
  %76 = sub i32 %75, 456613522
  %77 = sub i32 %72, 1
  %78 = mul i32 %72, %76
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %73, 10
  %82 = and i1 %80, %81
  %83 = xor i1 %80, %81
  %84 = or i1 %82, %83
  %85 = or i1 %80, %81
  %86 = select i1 %84, i32 -1898923834, i32 -82031894
  store i32 %86, i32* %13
  br label %94

; <label>:87:                                     ; preds = %14
  %88 = load volatile %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %5
  ret %"struct.std::_Rb_tree_node_base"* %88

; <label>:89:                                     ; preds = %14
  %90 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %10, align 8
  %91 = bitcast %"struct.std::_Rb_tree_node"* %90 to %"struct.std::_Rb_tree_node_base"*
  call void @_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_iterator"* %7, %"struct.std::_Rb_tree_node_base"* %91) #3
  %92 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %7, i32 0, i32 0
  %93 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %92, align 8
  store i32 193578241, i32* %13
  br label %94

; <label>:94:                                     ; preds = %89, %67, %40, %39, %35, %30, %21, %17, %16
  br label %14
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNKSt17_Rb_tree_iteratorIxEeqERKS0_(%"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"* dereferenceable(8)) #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.503
  %7 = load i32, i32* @y.504
  %8 = sub i32 %6, -1467166106
  %9 = sub i32 %8, 1
  %10 = add i32 %9, -1467166106
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 383193637, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %64
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 383193637, label %20
    i32 606346255, label %28
    i32 -2071517550, label %52
    i32 -1873861622, label %54
  ]

; <label>:19:                                     ; preds = %17
  br label %64

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 606346255, i32 -1873861622
  store i32 %27, i32* %16
  br label %64

; <label>:28:                                     ; preds = %17
  %29 = alloca %"struct.std::_Rb_tree_iterator"*, align 8
  %30 = alloca %"struct.std::_Rb_tree_iterator"*, align 8
  store %"struct.std::_Rb_tree_iterator"* %0, %"struct.std::_Rb_tree_iterator"** %29, align 8
  store %"struct.std::_Rb_tree_iterator"* %1, %"struct.std::_Rb_tree_iterator"** %30, align 8
  %31 = load %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %29, align 8
  %32 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %31, i32 0, i32 0
  %33 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %32, align 8
  %34 = load %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %30, align 8
  %35 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %34, i32 0, i32 0
  %36 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %35, align 8
  %37 = icmp eq %"struct.std::_Rb_tree_node_base"* %33, %36
  store i1 %37, i1* %3
  %38 = load i32, i32* @x.503
  %39 = load i32, i32* @y.504
  %40 = sub i32 0, 1
  %41 = add i32 %38, %40
  %42 = sub i32 %38, 1
  %43 = mul i32 %38, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %39, 10
  %47 = and i1 %45, %46
  %48 = xor i1 %45, %46
  %49 = or i1 %47, %48
  %50 = or i1 %45, %46
  %51 = select i1 %49, i32 -2071517550, i32 -1873861622
  store i32 %51, i32* %16
  br label %64

; <label>:52:                                     ; preds = %17
  %53 = load volatile i1, i1* %3
  ret i1 %53

; <label>:54:                                     ; preds = %17
  %55 = alloca %"struct.std::_Rb_tree_iterator"*, align 8
  %56 = alloca %"struct.std::_Rb_tree_iterator"*, align 8
  store %"struct.std::_Rb_tree_iterator"* %0, %"struct.std::_Rb_tree_iterator"** %55, align 8
  store %"struct.std::_Rb_tree_iterator"* %1, %"struct.std::_Rb_tree_iterator"** %56, align 8
  %57 = load %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %55, align 8
  %58 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %57, i32 0, i32 0
  %59 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %58, align 8
  %60 = load %"struct.std::_Rb_tree_iterator"*, %"struct.std::_Rb_tree_iterator"** %56, align 8
  %61 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %60, i32 0, i32 0
  %62 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %61, align 8
  %63 = icmp eq %"struct.std::_Rb_tree_node_base"* %59, %62
  store i32 606346255, i32* %16
  br label %64

; <label>:64:                                     ; preds = %54, %28, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE3endEv(%"class.std::_Rb_tree"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %3 = alloca %"class.std::_Rb_tree"*, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %3, align 8
  %4 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %3, align 8
  %5 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %4, i32 0, i32 0
  %6 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %5, i32 0, i32 1
  call void @_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_iterator"* %2, %"struct.std::_Rb_tree_node_base"* %6) #3
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %2, i32 0, i32 0
  %8 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %7, align 8
  ret %"struct.std::_Rb_tree_node_base"* %8
}

; Function Attrs: noinline uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIxE(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node_base"*) #0 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %4 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %5 = alloca %"class.std::_Rb_tree"*, align 8
  %6 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %7 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %8 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %4, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %8, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %5, align 8
  %9 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %5, align 8
  %10 = bitcast %"struct.std::_Rb_tree_const_iterator"* %6 to i8*
  %11 = bitcast %"struct.std::_Rb_tree_const_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 8, i32 8, i1 false)
  %12 = call dereferenceable(8) %"struct.std::_Rb_tree_const_iterator"* @_ZNSt23_Rb_tree_const_iteratorIxEppEv(%"struct.std::_Rb_tree_const_iterator"* %6) #3
  %13 = bitcast %"struct.std::_Rb_tree_const_iterator"* %7 to i8*
  %14 = bitcast %"struct.std::_Rb_tree_const_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 8, i32 8, i1 false)
  %15 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %7, i32 0, i32 0
  %16 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %15, align 8
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE12_M_erase_auxESt23_Rb_tree_const_iteratorIxE(%"class.std::_Rb_tree"* %9, %"struct.std::_Rb_tree_node_base"* %16)
  %17 = call %"struct.std::_Rb_tree_node_base"* @_ZNKSt23_Rb_tree_const_iteratorIxE13_M_const_castEv(%"struct.std::_Rb_tree_const_iterator"* %6) #3
  %18 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %3, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %17, %"struct.std::_Rb_tree_node_base"** %18, align 8
  %19 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %3, i32 0, i32 0
  %20 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %19, align 8
  ret %"struct.std::_Rb_tree_node_base"* %20
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %"struct.std::_Rb_tree_const_iterator"* @_ZNSt23_Rb_tree_const_iteratorIxEppEv(%"struct.std::_Rb_tree_const_iterator"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %2, align 8
  %3 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  %5 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %4, align 8
  %6 = call %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"* %5) #15
  %7 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %6, %"struct.std::_Rb_tree_node_base"** %7, align 8
  ret %"struct.std::_Rb_tree_const_iterator"* %3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE12_M_erase_auxESt23_Rb_tree_const_iteratorIxE(%"class.std::_Rb_tree"*, %"struct.std::_Rb_tree_node_base"*) #4 comdat align 2 {
  %3 = alloca %"struct.std::_Rb_tree_const_iterator", align 8
  %4 = alloca %"class.std::_Rb_tree"*, align 8
  %5 = alloca %"struct.std::_Rb_tree_node"*, align 8
  %6 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  store %"struct.std::_Rb_tree_node_base"* %1, %"struct.std::_Rb_tree_node_base"** %6, align 8
  store %"class.std::_Rb_tree"* %0, %"class.std::_Rb_tree"** %4, align 8
  %7 = load %"class.std::_Rb_tree"*, %"class.std::_Rb_tree"** %4, align 8
  %8 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %3, i32 0, i32 0
  %9 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %8, align 8
  %10 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %7, i32 0, i32 0
  %11 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %10, i32 0, i32 1
  %12 = call %"struct.std::_Rb_tree_node_base"* @_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_(%"struct.std::_Rb_tree_node_base"* %9, %"struct.std::_Rb_tree_node_base"* dereferenceable(32) %11) #3
  %13 = bitcast %"struct.std::_Rb_tree_node_base"* %12 to %"struct.std::_Rb_tree_node"*
  store %"struct.std::_Rb_tree_node"* %13, %"struct.std::_Rb_tree_node"** %5, align 8
  %14 = load %"struct.std::_Rb_tree_node"*, %"struct.std::_Rb_tree_node"** %5, align 8
  call void @_ZNSt8_Rb_treeIxxSt9_IdentityIxESt4lessIxESaIxEE12_M_drop_nodeEPSt13_Rb_tree_nodeIxE(%"class.std::_Rb_tree"* %7, %"struct.std::_Rb_tree_node"* %14) #3
  %15 = getelementptr inbounds %"class.std::_Rb_tree", %"class.std::_Rb_tree"* %7, i32 0, i32 0
  %16 = getelementptr inbounds %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl", %"struct.std::_Rb_tree<long long, long long, std::_Identity<long long>, std::less<long long>, std::allocator<long long> >::_Rb_tree_impl"* %15, i32 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 0, -1
  %19 = sub i64 %17, %18
  %20 = add i64 %17, -1
  store i64 %19, i64* %16, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %"struct.std::_Rb_tree_node_base"* @_ZNKSt23_Rb_tree_const_iteratorIxE13_M_const_castEv(%"struct.std::_Rb_tree_const_iterator"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Rb_tree_node_base"*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.513
  %6 = load i32, i32* @y.514
  %7 = add i32 %5, -1279464244
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -1279464244
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1004517068, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %84
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1004517068, label %19
    i32 217006725, label %39
    i32 980946320, label %74
    i32 678714008, label %76
  ]

; <label>:18:                                     ; preds = %16
  br label %84

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 217006725, i32 678714008
  store i32 %38, i32* %15
  br label %84

; <label>:39:                                     ; preds = %16
  %40 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %41 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %41, align 8
  %42 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %41, align 8
  %43 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %42, i32 0, i32 0
  %44 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %43, align 8
  call void @_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_iterator"* %40, %"struct.std::_Rb_tree_node_base"* %44) #3
  %45 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %40, i32 0, i32 0
  %46 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %45, align 8
  store %"struct.std::_Rb_tree_node_base"* %46, %"struct.std::_Rb_tree_node_base"** %2
  %47 = load i32, i32* @x.513
  %48 = load i32, i32* @y.514
  %49 = add i32 %47, -1165246598
  %50 = sub i32 %49, 1
  %51 = sub i32 %50, -1165246598
  %52 = sub i32 %47, 1
  %53 = mul i32 %47, %51
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %48, 10
  %57 = xor i1 %55, true
  %58 = xor i1 %56, true
  %59 = xor i1 false, true
  %60 = and i1 %57, false
  %61 = and i1 %55, %59
  %62 = and i1 %58, false
  %63 = and i1 %56, %59
  %64 = or i1 %60, %61
  %65 = or i1 %62, %63
  %66 = xor i1 %64, %65
  %67 = or i1 %57, %58
  %68 = xor i1 %67, true
  %69 = or i1 false, %59
  %70 = and i1 %68, %69
  %71 = or i1 %66, %70
  %72 = or i1 %55, %56
  %73 = select i1 %71, i32 980946320, i32 678714008
  store i32 %73, i32* %15
  br label %84

; <label>:74:                                     ; preds = %16
  %75 = load volatile %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %2
  ret %"struct.std::_Rb_tree_node_base"* %75

; <label>:76:                                     ; preds = %16
  %77 = alloca %"struct.std::_Rb_tree_iterator", align 8
  %78 = alloca %"struct.std::_Rb_tree_const_iterator"*, align 8
  store %"struct.std::_Rb_tree_const_iterator"* %0, %"struct.std::_Rb_tree_const_iterator"** %78, align 8
  %79 = load %"struct.std::_Rb_tree_const_iterator"*, %"struct.std::_Rb_tree_const_iterator"** %78, align 8
  %80 = getelementptr inbounds %"struct.std::_Rb_tree_const_iterator", %"struct.std::_Rb_tree_const_iterator"* %79, i32 0, i32 0
  %81 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %80, align 8
  call void @_ZNSt17_Rb_tree_iteratorIxEC2EPSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_iterator"* %77, %"struct.std::_Rb_tree_node_base"* %81) #3
  %82 = getelementptr inbounds %"struct.std::_Rb_tree_iterator", %"struct.std::_Rb_tree_iterator"* %77, i32 0, i32 0
  %83 = load %"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"** %82, align 8
  store i32 217006725, i32* %15
  br label %84

; <label>:84:                                     ; preds = %76, %39, %19, %18
  br label %16
}

; Function Attrs: nounwind readonly
declare %"struct.std::_Rb_tree_node_base"* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(%"struct.std::_Rb_tree_node_base"*) #12

; Function Attrs: nounwind
declare %"struct.std::_Rb_tree_node_base"* @_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_(%"struct.std::_Rb_tree_node_base"*, %"struct.std::_Rb_tree_node_base"* dereferenceable(32)) #2

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s229975691.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  call void @__cxx_global_var_init.1()
  call void @__cxx_global_var_init.2()
  call void @__cxx_global_var_init.3()
  call void @__cxx_global_var_init.4()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noinline noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone }
attributes #12 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { noreturn }
attributes #15 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
