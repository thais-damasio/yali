; ModuleID = 'Project_CodeNet_C++1400/p03466/s653909663.cpp'
source_filename = "Project_CodeNet_C++1400/p03466/s653909663.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

$_ZSt3maxIiERKT_S2_S2_ = comdat any

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"%d %d %d %d\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@x = common global i32 0
@y = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0

; Function Attrs: noinline uwtable
define signext i8 @_Z3getiii(i32, i32, i32) #0 {
  %4 = alloca i8
  %5 = alloca i1
  %6 = alloca i1
  %7 = alloca i1
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  store i32 %0, i32* %9, align 4
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i64 0, i64* %15, align 8
  %24 = call dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4) %9, i32* dereferenceable(4) %10)
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  store i64 %26, i64* %16, align 8
  %27 = load i64, i64* %15, align 8
  %28 = load i64, i64* %16, align 8
  %29 = sub i64 0, %27
  %30 = sub i64 0, %28
  %31 = add i64 %29, %30
  %32 = sub i64 0, %31
  %33 = add nsw i64 %27, %28
  %34 = sdiv i64 %32, 2
  store i64 %34, i64* %17, align 8
  %35 = alloca i32
  store i32 -2080423053, i32* %35
  br label %36

; <label>:36:                                     ; preds = %3, %1007
  %37 = load i32, i32* %35
  switch i32 %37, label %38 [
    i32 -2080423053, label %39
    i32 2070749795, label %55
    i32 2110595393, label %90
    i32 582047441, label %93
    i32 1209507168, label %130
    i32 -1236289698, label %138
    i32 -1328164781, label %146
    i32 1518805950, label %155
    i32 -1127554096, label %156
    i32 -2086731679, label %173
    i32 -1949212712, label %182
    i32 -1780169654, label %202
    i32 1242170558, label %206
    i32 790409390, label %213
    i32 1442562901, label %223
    i32 210213498, label %232
    i32 -186277980, label %233
    i32 -776917741, label %246
    i32 595226413, label %257
    i32 1630327503, label %258
    i32 -1857549084, label %259
    i32 -423030054, label %286
    i32 -6097946, label %363
    i32 -1725810184, label %366
    i32 1762377359, label %367
    i32 1519679298, label %392
    i32 -59900464, label %393
    i32 1519541447, label %409
    i32 -1883952884, label %472
    i32 1651999872, label %475
    i32 -328715063, label %503
    i32 1710781838, label %531
    i32 1140432435, label %532
    i32 -1583032512, label %560
    i32 -2020694388, label %576
    i32 525391019, label %577
    i32 1635857015, label %593
    i32 -1812174463, label %622
    i32 -1321899352, label %624
    i32 1632117910, label %652
    i32 733863496, label %814
    i32 1461987997, label %1003
    i32 610368790, label %1004
    i32 620731729, label %1005
  ]

; <label>:38:                                     ; preds = %36
  br label %1007

; <label>:39:                                     ; preds = %36
  %40 = load i32, i32* @x
  %41 = load i32, i32* @y
  %42 = sub i32 %40, -1016517920
  %43 = sub i32 %42, 1
  %44 = add i32 %43, -1016517920
  %45 = sub i32 %40, 1
  %46 = mul i32 %40, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %41, 10
  %50 = and i1 %48, %49
  %51 = xor i1 %48, %49
  %52 = or i1 %50, %51
  %53 = or i1 %48, %49
  %54 = select i1 %52, i32 2070749795, i32 -1321899352
  store i32 %54, i32* %35
  br label %1007

; <label>:55:                                     ; preds = %36
  %56 = load i64, i64* %16, align 8
  %57 = load i64, i64* %15, align 8
  %58 = sub i64 %56, 8975825022085369223
  %59 = sub i64 %58, %57
  %60 = add i64 %59, 8975825022085369223
  %61 = sub nsw i64 %56, %57
  %62 = icmp sgt i64 %60, 1
  store i1 %62, i1* %7
  %63 = load i32, i32* @x
  %64 = load i32, i32* @y
  %65 = sub i32 %63, -857435041
  %66 = sub i32 %65, 1
  %67 = add i32 %66, -857435041
  %68 = sub i32 %63, 1
  %69 = mul i32 %63, %67
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %64, 10
  %73 = xor i1 %71, true
  %74 = xor i1 %72, true
  %75 = xor i1 false, true
  %76 = and i1 %73, false
  %77 = and i1 %71, %75
  %78 = and i1 %74, false
  %79 = and i1 %72, %75
  %80 = or i1 %76, %77
  %81 = or i1 %78, %79
  %82 = xor i1 %80, %81
  %83 = or i1 %73, %74
  %84 = xor i1 %83, true
  %85 = or i1 false, %75
  %86 = and i1 %84, %85
  %87 = or i1 %82, %86
  %88 = or i1 %71, %72
  %89 = select i1 %87, i32 2110595393, i32 -1321899352
  store i32 %89, i32* %35
  br label %1007

; <label>:90:                                     ; preds = %36
  %91 = load volatile i1, i1* %7
  %92 = select i1 %91, i32 582047441, i32 -1127554096
  store i32 %92, i32* %35
  br label %1007

; <label>:93:                                     ; preds = %36
  %94 = load i32, i32* %9, align 4
  %95 = sext i32 %94 to i64
  %96 = load i64, i64* %17, align 8
  %97 = sub i64 0, %96
  %98 = sub i64 %95, %97
  %99 = add nsw i64 %95, %96
  %100 = add i64 %98, -920662774037080321
  %101 = sub i64 %100, 1
  %102 = sub i64 %101, -920662774037080321
  %103 = sub nsw i64 %98, 1
  %104 = load i64, i64* %17, align 8
  %105 = sdiv i64 %102, %104
  store i64 %105, i64* %18, align 8
  %106 = load i32, i32* %9, align 4
  %107 = sext i32 %106 to i64
  store i64 %107, i64* %19, align 8
  %108 = load i32, i32* %10, align 4
  %109 = sext i32 %108 to i64
  %110 = load i64, i64* %17, align 8
  %111 = sub i64 0, %110
  %112 = sub i64 %109, %111
  %113 = add nsw i64 %109, %110
  %114 = sub i64 %112, -6386108091176851140
  %115 = sub i64 %114, 1
  %116 = add i64 %115, -6386108091176851140
  %117 = sub nsw i64 %112, 1
  %118 = load i64, i64* %17, align 8
  %119 = sdiv i64 %116, %118
  store i64 %119, i64* %20, align 8
  %120 = load i32, i32* %10, align 4
  %121 = sext i32 %120 to i64
  store i64 %121, i64* %21, align 8
  %122 = load i64, i64* %18, align 8
  %123 = load i64, i64* %21, align 8
  %124 = sub i64 %123, 4643925282484598679
  %125 = add i64 %124, 1
  %126 = add i64 %125, 4643925282484598679
  %127 = add nsw i64 %123, 1
  %128 = icmp sgt i64 %122, %126
  %129 = select i1 %128, i32 -1236289698, i32 1209507168
  store i32 %129, i32* %35
  br label %1007

; <label>:130:                                    ; preds = %36
  %131 = load i64, i64* %20, align 8
  %132 = load i64, i64* %19, align 8
  %133 = sub i64 0, 1
  %134 = sub i64 %132, %133
  %135 = add nsw i64 %132, 1
  %136 = icmp sgt i64 %131, %134
  %137 = select i1 %136, i32 -1236289698, i32 -1328164781
  store i32 %137, i32* %35
  br label %1007

; <label>:138:                                    ; preds = %36
  %139 = load i64, i64* %17, align 8
  store i64 %139, i64* %15, align 8
  %140 = load i64, i64* %15, align 8
  %141 = load i64, i64* %16, align 8
  %142 = sub i64 0, %141
  %143 = sub i64 %140, %142
  %144 = add nsw i64 %140, %141
  %145 = sdiv i64 %143, 2
  store i64 %145, i64* %17, align 8
  store i32 1518805950, i32* %35
  br label %1007

; <label>:146:                                    ; preds = %36
  %147 = load i64, i64* %17, align 8
  store i64 %147, i64* %16, align 8
  %148 = load i64, i64* %15, align 8
  %149 = load i64, i64* %16, align 8
  %150 = sub i64 %148, 8592660608272564649
  %151 = add i64 %150, %149
  %152 = add i64 %151, 8592660608272564649
  %153 = add nsw i64 %148, %149
  %154 = sdiv i64 %152, 2
  store i64 %154, i64* %17, align 8
  store i32 1518805950, i32* %35
  br label %1007

; <label>:155:                                    ; preds = %36
  store i32 -2080423053, i32* %35
  br label %1007

; <label>:156:                                    ; preds = %36
  %157 = load i64, i64* %16, align 8
  store i64 %157, i64* %12, align 8
  store i64 0, i64* %15, align 8
  %158 = load i32, i32* %9, align 4
  %159 = sext i32 %158 to i64
  %160 = load i64, i64* %12, align 8
  %161 = sdiv i64 %159, %160
  %162 = add i64 %161, 4658888484496193925
  %163 = add i64 %162, 1
  %164 = sub i64 %163, 4658888484496193925
  %165 = add nsw i64 %161, 1
  store i64 %164, i64* %16, align 8
  %166 = load i64, i64* %15, align 8
  %167 = load i64, i64* %16, align 8
  %168 = sub i64 %166, 8923167041822945253
  %169 = add i64 %168, %167
  %170 = add i64 %169, 8923167041822945253
  %171 = add nsw i64 %166, %167
  %172 = sdiv i64 %170, 2
  store i64 %172, i64* %17, align 8
  store i32 -2086731679, i32* %35
  br label %1007

; <label>:173:                                    ; preds = %36
  %174 = load i64, i64* %16, align 8
  %175 = load i64, i64* %15, align 8
  %176 = add i64 %174, 5193873945272213125
  %177 = sub i64 %176, %175
  %178 = sub i64 %177, 5193873945272213125
  %179 = sub nsw i64 %174, %175
  %180 = icmp sgt i64 %178, 1
  %181 = select i1 %180, i32 -1949212712, i32 -186277980
  store i32 %181, i32* %35
  br label %1007

; <label>:182:                                    ; preds = %36
  %183 = load i32, i32* %9, align 4
  %184 = sext i32 %183 to i64
  %185 = load i64, i64* %17, align 8
  %186 = load i64, i64* %12, align 8
  %187 = mul nsw i64 %185, %186
  %188 = sub i64 %184, -343302516816862592
  %189 = sub i64 %188, %187
  %190 = add i64 %189, -343302516816862592
  %191 = sub nsw i64 %184, %187
  store i64 %190, i64* %22, align 8
  %192 = load i32, i32* %10, align 4
  %193 = sext i32 %192 to i64
  %194 = load i64, i64* %17, align 8
  %195 = add i64 %193, 4357384117709938597
  %196 = sub i64 %195, %194
  %197 = sub i64 %196, 4357384117709938597
  %198 = sub nsw i64 %193, %194
  store i64 %197, i64* %23, align 8
  %199 = load i64, i64* %22, align 8
  %200 = icmp slt i64 %199, 0
  %201 = select i1 %200, i32 790409390, i32 -1780169654
  store i32 %201, i32* %35
  br label %1007

; <label>:202:                                    ; preds = %36
  %203 = load i64, i64* %23, align 8
  %204 = icmp slt i64 %203, 0
  %205 = select i1 %204, i32 790409390, i32 1242170558
  store i32 %205, i32* %35
  br label %1007

; <label>:206:                                    ; preds = %36
  %207 = load i64, i64* %23, align 8
  %208 = load i64, i64* %22, align 8
  %209 = load i64, i64* %12, align 8
  %210 = mul nsw i64 %208, %209
  %211 = icmp sgt i64 %207, %210
  %212 = select i1 %211, i32 790409390, i32 1442562901
  store i32 %212, i32* %35
  br label %1007

; <label>:213:                                    ; preds = %36
  %214 = load i64, i64* %17, align 8
  store i64 %214, i64* %16, align 8
  %215 = load i64, i64* %15, align 8
  %216 = load i64, i64* %16, align 8
  %217 = sub i64 0, %215
  %218 = sub i64 0, %216
  %219 = add i64 %217, %218
  %220 = sub i64 0, %219
  %221 = add nsw i64 %215, %216
  %222 = sdiv i64 %220, 2
  store i64 %222, i64* %17, align 8
  store i32 210213498, i32* %35
  br label %1007

; <label>:223:                                    ; preds = %36
  %224 = load i64, i64* %17, align 8
  store i64 %224, i64* %15, align 8
  %225 = load i64, i64* %15, align 8
  %226 = load i64, i64* %16, align 8
  %227 = add i64 %225, -1290055572416082488
  %228 = add i64 %227, %226
  %229 = sub i64 %228, -1290055572416082488
  %230 = add nsw i64 %225, %226
  %231 = sdiv i64 %229, 2
  store i64 %231, i64* %17, align 8
  store i32 210213498, i32* %35
  br label %1007

; <label>:232:                                    ; preds = %36
  store i32 -2086731679, i32* %35
  br label %1007

; <label>:233:                                    ; preds = %36
  %234 = load i64, i64* %15, align 8
  store i64 %234, i64* %13, align 8
  %235 = load i32, i32* %11, align 4
  %236 = sext i32 %235 to i64
  %237 = load i64, i64* %13, align 8
  %238 = load i64, i64* %12, align 8
  %239 = add i64 %238, -7972027042581878194
  %240 = add i64 %239, 1
  %241 = sub i64 %240, -7972027042581878194
  %242 = add nsw i64 %238, 1
  %243 = mul nsw i64 %237, %241
  %244 = icmp slt i64 %236, %243
  %245 = select i1 %244, i32 -776917741, i32 -1857549084
  store i32 %245, i32* %35
  br label %1007

; <label>:246:                                    ; preds = %36
  %247 = load i32, i32* %11, align 4
  %248 = sext i32 %247 to i64
  %249 = load i64, i64* %12, align 8
  %250 = sub i64 0, 1
  %251 = sub i64 %249, %250
  %252 = add nsw i64 %249, 1
  %253 = srem i64 %248, %251
  %254 = load i64, i64* %12, align 8
  %255 = icmp eq i64 %253, %254
  %256 = select i1 %255, i32 595226413, i32 1630327503
  store i32 %256, i32* %35
  br label %1007

; <label>:257:                                    ; preds = %36
  store i8 66, i8* %8, align 1
  store i32 525391019, i32* %35
  br label %1007

; <label>:258:                                    ; preds = %36
  store i8 65, i8* %8, align 1
  store i32 525391019, i32* %35
  br label %1007

; <label>:259:                                    ; preds = %36
  %260 = load i32, i32* @x
  %261 = load i32, i32* @y
  %262 = sub i32 0, 1
  %263 = add i32 %260, %262
  %264 = sub i32 %260, 1
  %265 = mul i32 %260, %263
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %261, 10
  %269 = xor i1 %267, true
  %270 = xor i1 %268, true
  %271 = xor i1 false, true
  %272 = and i1 %269, false
  %273 = and i1 %267, %271
  %274 = and i1 %270, false
  %275 = and i1 %268, %271
  %276 = or i1 %272, %273
  %277 = or i1 %274, %275
  %278 = xor i1 %276, %277
  %279 = or i1 %269, %270
  %280 = xor i1 %279, true
  %281 = or i1 false, %271
  %282 = and i1 %280, %281
  %283 = or i1 %278, %282
  %284 = or i1 %267, %268
  %285 = select i1 %283, i32 -423030054, i32 1632117910
  store i32 %285, i32* %35
  br label %1007

; <label>:286:                                    ; preds = %36
  %287 = load i64, i64* %13, align 8
  %288 = load i64, i64* %12, align 8
  %289 = mul nsw i64 %287, %288
  %290 = load i32, i32* %9, align 4
  %291 = sext i32 %290 to i64
  %292 = add i64 %291, 7272590357732509048
  %293 = sub i64 %292, %289
  %294 = sub i64 %293, 7272590357732509048
  %295 = sub nsw i64 %291, %289
  %296 = trunc i64 %294 to i32
  store i32 %296, i32* %9, align 4
  %297 = load i64, i64* %13, align 8
  %298 = load i32, i32* %10, align 4
  %299 = sext i32 %298 to i64
  %300 = sub i64 0, %297
  %301 = add i64 %299, %300
  %302 = sub nsw i64 %299, %297
  %303 = trunc i64 %301 to i32
  store i32 %303, i32* %10, align 4
  %304 = load i64, i64* %13, align 8
  %305 = load i64, i64* %12, align 8
  %306 = add i64 %305, 1647639017325110419
  %307 = add i64 %306, 1
  %308 = sub i64 %307, 1647639017325110419
  %309 = add nsw i64 %305, 1
  %310 = mul nsw i64 %304, %308
  %311 = load i32, i32* %11, align 4
  %312 = sext i32 %311 to i64
  %313 = sub i64 %312, 2678237372883821382
  %314 = sub i64 %313, %310
  %315 = add i64 %314, 2678237372883821382
  %316 = sub nsw i64 %312, %310
  %317 = trunc i64 %315 to i32
  store i32 %317, i32* %11, align 4
  %318 = load i32, i32* %10, align 4
  %319 = sub i32 %318, 1814713722
  %320 = sub i32 %319, 1
  %321 = add i32 %320, 1814713722
  %322 = sub nsw i32 %318, 1
  %323 = sext i32 %321 to i64
  %324 = load i64, i64* %12, align 8
  %325 = sdiv i64 %323, %324
  store i64 %325, i64* %14, align 8
  %326 = load i32, i32* %11, align 4
  %327 = sext i32 %326 to i64
  %328 = load i32, i32* %9, align 4
  %329 = sext i32 %328 to i64
  %330 = load i64, i64* %14, align 8
  %331 = add i64 %329, -4658656146170452293
  %332 = sub i64 %331, %330
  %333 = sub i64 %332, -4658656146170452293
  %334 = sub nsw i64 %329, %330
  %335 = icmp slt i64 %327, %333
  store i1 %335, i1* %6
  %336 = load i32, i32* @x
  %337 = load i32, i32* @y
  %338 = sub i32 %336, 1300733928
  %339 = sub i32 %338, 1
  %340 = add i32 %339, 1300733928
  %341 = sub i32 %336, 1
  %342 = mul i32 %336, %340
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %337, 10
  %346 = xor i1 %344, true
  %347 = xor i1 %345, true
  %348 = xor i1 false, true
  %349 = and i1 %346, false
  %350 = and i1 %344, %348
  %351 = and i1 %347, false
  %352 = and i1 %345, %348
  %353 = or i1 %349, %350
  %354 = or i1 %351, %352
  %355 = xor i1 %353, %354
  %356 = or i1 %346, %347
  %357 = xor i1 %356, true
  %358 = or i1 false, %348
  %359 = and i1 %357, %358
  %360 = or i1 %355, %359
  %361 = or i1 %344, %345
  %362 = select i1 %360, i32 -6097946, i32 1632117910
  store i32 %362, i32* %35
  br label %1007

; <label>:363:                                    ; preds = %36
  %364 = load volatile i1, i1* %6
  %365 = select i1 %364, i32 -1725810184, i32 1762377359
  store i32 %365, i32* %35
  br label %1007

; <label>:366:                                    ; preds = %36
  store i8 65, i8* %8, align 1
  store i32 525391019, i32* %35
  br label %1007

; <label>:367:                                    ; preds = %36
  %368 = load i32, i32* %11, align 4
  %369 = sext i32 %368 to i64
  %370 = load i32, i32* %9, align 4
  %371 = sext i32 %370 to i64
  %372 = load i64, i64* %14, align 8
  %373 = add i64 %371, -6544909784678502293
  %374 = sub i64 %373, %372
  %375 = sub i64 %374, -6544909784678502293
  %376 = sub nsw i64 %371, %372
  %377 = load i32, i32* %10, align 4
  %378 = sext i32 %377 to i64
  %379 = sub i64 %375, 2357506226940754460
  %380 = add i64 %379, %378
  %381 = add i64 %380, 2357506226940754460
  %382 = add nsw i64 %375, %378
  %383 = load i64, i64* %14, align 8
  %384 = load i64, i64* %12, align 8
  %385 = mul nsw i64 %383, %384
  %386 = add i64 %381, 6816131201269839108
  %387 = sub i64 %386, %385
  %388 = sub i64 %387, 6816131201269839108
  %389 = sub nsw i64 %381, %385
  %390 = icmp slt i64 %369, %388
  %391 = select i1 %390, i32 1519679298, i32 -59900464
  store i32 %391, i32* %35
  br label %1007

; <label>:392:                                    ; preds = %36
  store i8 66, i8* %8, align 1
  store i32 525391019, i32* %35
  br label %1007

; <label>:393:                                    ; preds = %36
  %394 = load i32, i32* @x
  %395 = load i32, i32* @y
  %396 = sub i32 %394, -41573885
  %397 = sub i32 %396, 1
  %398 = add i32 %397, -41573885
  %399 = sub i32 %394, 1
  %400 = mul i32 %394, %398
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %395, 10
  %404 = and i1 %402, %403
  %405 = xor i1 %402, %403
  %406 = or i1 %404, %405
  %407 = or i1 %402, %403
  %408 = select i1 %406, i32 1519541447, i32 733863496
  store i32 %408, i32* %35
  br label %1007

; <label>:409:                                    ; preds = %36
  %410 = load i32, i32* %9, align 4
  %411 = sext i32 %410 to i64
  %412 = load i64, i64* %14, align 8
  %413 = sub i64 %411, 3839407070077129528
  %414 = sub i64 %413, %412
  %415 = add i64 %414, 3839407070077129528
  %416 = sub nsw i64 %411, %412
  %417 = load i32, i32* %10, align 4
  %418 = sext i32 %417 to i64
  %419 = sub i64 0, %415
  %420 = sub i64 0, %418
  %421 = add i64 %419, %420
  %422 = sub i64 0, %421
  %423 = add nsw i64 %415, %418
  %424 = load i64, i64* %14, align 8
  %425 = load i64, i64* %12, align 8
  %426 = mul nsw i64 %424, %425
  %427 = sub i64 0, %426
  %428 = add i64 %422, %427
  %429 = sub nsw i64 %422, %426
  %430 = load i32, i32* %11, align 4
  %431 = sext i32 %430 to i64
  %432 = sub i64 0, %428
  %433 = add i64 %431, %432
  %434 = sub nsw i64 %431, %428
  %435 = trunc i64 %433 to i32
  store i32 %435, i32* %11, align 4
  %436 = load i32, i32* %11, align 4
  %437 = sext i32 %436 to i64
  %438 = load i64, i64* %12, align 8
  %439 = sub i64 %438, 4145511821018658610
  %440 = add i64 %439, 1
  %441 = add i64 %440, 4145511821018658610
  %442 = add nsw i64 %438, 1
  %443 = srem i64 %437, %441
  %444 = icmp eq i64 %443, 0
  store i1 %444, i1* %5
  %445 = load i32, i32* @x
  %446 = load i32, i32* @y
  %447 = sub i32 %445, -301557218
  %448 = sub i32 %447, 1
  %449 = add i32 %448, -301557218
  %450 = sub i32 %445, 1
  %451 = mul i32 %445, %449
  %452 = urem i32 %451, 2
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %446, 10
  %455 = xor i1 %453, true
  %456 = xor i1 %454, true
  %457 = xor i1 true, true
  %458 = and i1 %455, true
  %459 = and i1 %453, %457
  %460 = and i1 %456, true
  %461 = and i1 %454, %457
  %462 = or i1 %458, %459
  %463 = or i1 %460, %461
  %464 = xor i1 %462, %463
  %465 = or i1 %455, %456
  %466 = xor i1 %465, true
  %467 = or i1 true, %457
  %468 = and i1 %466, %467
  %469 = or i1 %464, %468
  %470 = or i1 %453, %454
  %471 = select i1 %469, i32 -1883952884, i32 733863496
  store i32 %471, i32* %35
  br label %1007

; <label>:472:                                    ; preds = %36
  %473 = load volatile i1, i1* %5
  %474 = select i1 %473, i32 1651999872, i32 1140432435
  store i32 %474, i32* %35
  br label %1007

; <label>:475:                                    ; preds = %36
  %476 = load i32, i32* @x
  %477 = load i32, i32* @y
  %478 = add i32 %476, -1194379930
  %479 = sub i32 %478, 1
  %480 = sub i32 %479, -1194379930
  %481 = sub i32 %476, 1
  %482 = mul i32 %476, %480
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %477, 10
  %486 = xor i1 %484, true
  %487 = xor i1 %485, true
  %488 = xor i1 true, true
  %489 = and i1 %486, true
  %490 = and i1 %484, %488
  %491 = and i1 %487, true
  %492 = and i1 %485, %488
  %493 = or i1 %489, %490
  %494 = or i1 %491, %492
  %495 = xor i1 %493, %494
  %496 = or i1 %486, %487
  %497 = xor i1 %496, true
  %498 = or i1 true, %488
  %499 = and i1 %497, %498
  %500 = or i1 %495, %499
  %501 = or i1 %484, %485
  %502 = select i1 %500, i32 -328715063, i32 1461987997
  store i32 %502, i32* %35
  br label %1007

; <label>:503:                                    ; preds = %36
  store i8 65, i8* %8, align 1
  %504 = load i32, i32* @x
  %505 = load i32, i32* @y
  %506 = add i32 %504, -99599562
  %507 = sub i32 %506, 1
  %508 = sub i32 %507, -99599562
  %509 = sub i32 %504, 1
  %510 = mul i32 %504, %508
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %505, 10
  %514 = xor i1 %512, true
  %515 = xor i1 %513, true
  %516 = xor i1 true, true
  %517 = and i1 %514, true
  %518 = and i1 %512, %516
  %519 = and i1 %515, true
  %520 = and i1 %513, %516
  %521 = or i1 %517, %518
  %522 = or i1 %519, %520
  %523 = xor i1 %521, %522
  %524 = or i1 %514, %515
  %525 = xor i1 %524, true
  %526 = or i1 true, %516
  %527 = and i1 %525, %526
  %528 = or i1 %523, %527
  %529 = or i1 %512, %513
  %530 = select i1 %528, i32 1710781838, i32 1461987997
  store i32 %530, i32* %35
  br label %1007

; <label>:531:                                    ; preds = %36
  store i32 525391019, i32* %35
  br label %1007

; <label>:532:                                    ; preds = %36
  %533 = load i32, i32* @x
  %534 = load i32, i32* @y
  %535 = add i32 %533, -1820838749
  %536 = sub i32 %535, 1
  %537 = sub i32 %536, -1820838749
  %538 = sub i32 %533, 1
  %539 = mul i32 %533, %537
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %534, 10
  %543 = xor i1 %541, true
  %544 = xor i1 %542, true
  %545 = xor i1 false, true
  %546 = and i1 %543, false
  %547 = and i1 %541, %545
  %548 = and i1 %544, false
  %549 = and i1 %542, %545
  %550 = or i1 %546, %547
  %551 = or i1 %548, %549
  %552 = xor i1 %550, %551
  %553 = or i1 %543, %544
  %554 = xor i1 %553, true
  %555 = or i1 false, %545
  %556 = and i1 %554, %555
  %557 = or i1 %552, %556
  %558 = or i1 %541, %542
  %559 = select i1 %557, i32 -1583032512, i32 610368790
  store i32 %559, i32* %35
  br label %1007

; <label>:560:                                    ; preds = %36
  store i8 66, i8* %8, align 1
  %561 = load i32, i32* @x
  %562 = load i32, i32* @y
  %563 = add i32 %561, 1339649103
  %564 = sub i32 %563, 1
  %565 = sub i32 %564, 1339649103
  %566 = sub i32 %561, 1
  %567 = mul i32 %561, %565
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %562, 10
  %571 = and i1 %569, %570
  %572 = xor i1 %569, %570
  %573 = or i1 %571, %572
  %574 = or i1 %569, %570
  %575 = select i1 %573, i32 -2020694388, i32 610368790
  store i32 %575, i32* %35
  br label %1007

; <label>:576:                                    ; preds = %36
  store i32 525391019, i32* %35
  br label %1007

; <label>:577:                                    ; preds = %36
  %578 = load i32, i32* @x
  %579 = load i32, i32* @y
  %580 = sub i32 %578, 1472973605
  %581 = sub i32 %580, 1
  %582 = add i32 %581, 1472973605
  %583 = sub i32 %578, 1
  %584 = mul i32 %578, %582
  %585 = urem i32 %584, 2
  %586 = icmp eq i32 %585, 0
  %587 = icmp slt i32 %579, 10
  %588 = and i1 %586, %587
  %589 = xor i1 %586, %587
  %590 = or i1 %588, %589
  %591 = or i1 %586, %587
  %592 = select i1 %590, i32 1635857015, i32 620731729
  store i32 %592, i32* %35
  br label %1007

; <label>:593:                                    ; preds = %36
  %594 = load i8, i8* %8, align 1
  store i8 %594, i8* %4
  %595 = load i32, i32* @x
  %596 = load i32, i32* @y
  %597 = add i32 %595, 954278618
  %598 = sub i32 %597, 1
  %599 = sub i32 %598, 954278618
  %600 = sub i32 %595, 1
  %601 = mul i32 %595, %599
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %596, 10
  %605 = xor i1 %603, true
  %606 = xor i1 %604, true
  %607 = xor i1 true, true
  %608 = and i1 %605, true
  %609 = and i1 %603, %607
  %610 = and i1 %606, true
  %611 = and i1 %604, %607
  %612 = or i1 %608, %609
  %613 = or i1 %610, %611
  %614 = xor i1 %612, %613
  %615 = or i1 %605, %606
  %616 = xor i1 %615, true
  %617 = or i1 true, %607
  %618 = and i1 %616, %617
  %619 = or i1 %614, %618
  %620 = or i1 %603, %604
  %621 = select i1 %619, i32 -1812174463, i32 620731729
  store i32 %621, i32* %35
  br label %1007

; <label>:622:                                    ; preds = %36
  %623 = load volatile i8, i8* %4
  ret i8 %623

; <label>:624:                                    ; preds = %36
  %625 = load i64, i64* %16, align 8
  %626 = load i64, i64* %15, align 8
  %627 = add i64 0, -4988557163836078641
  %628 = sub i64 %627, %625
  %629 = sub i64 %628, -4988557163836078641
  %630 = sub i64 0, %625
  %631 = add i64 %629, 8456762536975188622
  %632 = add i64 %631, %626
  %633 = sub i64 %632, 8456762536975188622
  %634 = add i64 %629, %626
  %635 = sub i64 0, %625
  %636 = add i64 0, %635
  %637 = sub i64 0, %625
  %638 = sub i64 %636, -8955976631104402550
  %639 = add i64 %638, %626
  %640 = add i64 %639, -8955976631104402550
  %641 = add i64 %636, %626
  %642 = sub i64 %625, -5390613527299195541
  %643 = sub i64 %642, %626
  %644 = add i64 %643, -5390613527299195541
  %645 = sub i64 %625, %626
  %646 = mul i64 %644, %626
  %647 = add i64 %625, 7570982693332480398
  %648 = sub i64 %647, %626
  %649 = sub i64 %648, 7570982693332480398
  %650 = sub nsw i64 %625, %626
  %651 = icmp sgt i64 %649, 1
  store i32 2070749795, i32* %35
  br label %1007

; <label>:652:                                    ; preds = %36
  %653 = load i64, i64* %13, align 8
  %654 = load i64, i64* %12, align 8
  %655 = sub i64 %653, -4775278318349422674
  %656 = sub i64 %655, %654
  %657 = add i64 %656, -4775278318349422674
  %658 = sub i64 %653, %654
  %659 = mul i64 %657, %654
  %660 = shl i64 %653, %654
  %661 = shl i64 %653, %654
  %662 = add i64 0, 6956689144826600806
  %663 = sub i64 %662, %653
  %664 = sub i64 %663, 6956689144826600806
  %665 = sub i64 0, %653
  %666 = sub i64 0, %654
  %667 = sub i64 %664, %666
  %668 = add i64 %664, %654
  %669 = shl i64 %653, %654
  %670 = sub i64 0, %653
  %671 = add i64 0, %670
  %672 = sub i64 0, %653
  %673 = sub i64 0, %654
  %674 = sub i64 %671, %673
  %675 = add i64 %671, %654
  %676 = shl i64 %653, %654
  %677 = sub i64 %653, -3482385211169092841
  %678 = sub i64 %677, %654
  %679 = add i64 %678, -3482385211169092841
  %680 = sub i64 %653, %654
  %681 = mul i64 %679, %654
  %682 = mul nsw i64 %653, %654
  %683 = load i32, i32* %9, align 4
  %684 = sext i32 %683 to i64
  %685 = shl i64 %684, %682
  %686 = add i64 0, -6983563556007223700
  %687 = sub i64 %686, %684
  %688 = sub i64 %687, -6983563556007223700
  %689 = sub i64 0, %684
  %690 = sub i64 0, %682
  %691 = sub i64 %688, %690
  %692 = add i64 %688, %682
  %693 = shl i64 %684, %682
  %694 = add i64 0, 2875197794839225861
  %695 = sub i64 %694, %684
  %696 = sub i64 %695, 2875197794839225861
  %697 = sub i64 0, %684
  %698 = sub i64 %696, 3451240433308333072
  %699 = add i64 %698, %682
  %700 = add i64 %699, 3451240433308333072
  %701 = add i64 %696, %682
  %702 = sub i64 0, %682
  %703 = add i64 %684, %702
  %704 = sub i64 %684, %682
  %705 = mul i64 %703, %682
  %706 = add i64 %684, 6938219111392919833
  %707 = sub i64 %706, %682
  %708 = sub i64 %707, 6938219111392919833
  %709 = sub i64 %684, %682
  %710 = mul i64 %708, %682
  %711 = sub i64 0, %682
  %712 = add i64 %684, %711
  %713 = sub nsw i64 %684, %682
  %714 = trunc i64 %712 to i32
  store i32 %714, i32* %9, align 4
  %715 = load i64, i64* %13, align 8
  %716 = load i32, i32* %10, align 4
  %717 = sext i32 %716 to i64
  %718 = shl i64 %717, %715
  %719 = sub i64 %717, -8707425482030801203
  %720 = sub i64 %719, %715
  %721 = add i64 %720, -8707425482030801203
  %722 = sub i64 %717, %715
  %723 = mul i64 %721, %715
  %724 = sub i64 0, %717
  %725 = add i64 0, %724
  %726 = sub i64 0, %717
  %727 = sub i64 %725, 149130127059903046
  %728 = add i64 %727, %715
  %729 = add i64 %728, 149130127059903046
  %730 = add i64 %725, %715
  %731 = add i64 0, -4173076788856787596
  %732 = sub i64 %731, %717
  %733 = sub i64 %732, -4173076788856787596
  %734 = sub i64 0, %717
  %735 = add i64 %733, -6297661903913779548
  %736 = add i64 %735, %715
  %737 = sub i64 %736, -6297661903913779548
  %738 = add i64 %733, %715
  %739 = sub i64 %717, -5155066155343733534
  %740 = sub i64 %739, %715
  %741 = add i64 %740, -5155066155343733534
  %742 = sub nsw i64 %717, %715
  %743 = trunc i64 %741 to i32
  store i32 %743, i32* %10, align 4
  %744 = load i64, i64* %13, align 8
  %745 = load i64, i64* %12, align 8
  %746 = shl i64 %745, 1
  %747 = add i64 %745, -4210723950657629184
  %748 = sub i64 %747, 1
  %749 = sub i64 %748, -4210723950657629184
  %750 = sub i64 %745, 1
  %751 = mul i64 %749, 1
  %752 = shl i64 %745, 1
  %753 = sub i64 0, %745
  %754 = sub i64 0, 1
  %755 = add i64 %753, %754
  %756 = sub i64 0, %755
  %757 = add nsw i64 %745, 1
  %758 = sub i64 0, %756
  %759 = add i64 %744, %758
  %760 = sub i64 %744, %756
  %761 = mul i64 %759, %756
  %762 = add i64 0, -6791291632409425363
  %763 = sub i64 %762, %744
  %764 = sub i64 %763, -6791291632409425363
  %765 = sub i64 0, %744
  %766 = sub i64 0, %756
  %767 = sub i64 %764, %766
  %768 = add i64 %764, %756
  %769 = mul nsw i64 %744, %756
  %770 = load i32, i32* %11, align 4
  %771 = sext i32 %770 to i64
  %772 = sub i64 %771, -903660772287533384
  %773 = sub i64 %772, %769
  %774 = add i64 %773, -903660772287533384
  %775 = sub nsw i64 %771, %769
  %776 = trunc i64 %774 to i32
  store i32 %776, i32* %11, align 4
  %777 = load i32, i32* %10, align 4
  %778 = shl i32 %777, 1
  %779 = add i32 %777, 1745932336
  %780 = sub i32 %779, 1
  %781 = sub i32 %780, 1745932336
  %782 = sub nsw i32 %777, 1
  %783 = sext i32 %781 to i64
  %784 = load i64, i64* %12, align 8
  %785 = add i64 0, -1450060936558973392
  %786 = sub i64 %785, %783
  %787 = sub i64 %786, -1450060936558973392
  %788 = sub i64 0, %783
  %789 = sub i64 0, %787
  %790 = sub i64 0, %784
  %791 = add i64 %789, %790
  %792 = sub i64 0, %791
  %793 = add i64 %787, %784
  %794 = shl i64 %783, %784
  %795 = sdiv i64 %783, %784
  store i64 %795, i64* %14, align 8
  %796 = load i32, i32* %11, align 4
  %797 = sext i32 %796 to i64
  %798 = load i32, i32* %9, align 4
  %799 = sext i32 %798 to i64
  %800 = load i64, i64* %14, align 8
  %801 = shl i64 %799, %800
  %802 = add i64 0, -5812624328323434244
  %803 = sub i64 %802, %799
  %804 = sub i64 %803, -5812624328323434244
  %805 = sub i64 0, %799
  %806 = sub i64 %804, 1761720279762381734
  %807 = add i64 %806, %800
  %808 = add i64 %807, 1761720279762381734
  %809 = add i64 %804, %800
  %810 = sub i64 0, %800
  %811 = add i64 %799, %810
  %812 = sub nsw i64 %799, %800
  %813 = icmp slt i64 %797, %811
  store i32 -423030054, i32* %35
  br label %1007

; <label>:814:                                    ; preds = %36
  %815 = load i32, i32* %9, align 4
  %816 = sext i32 %815 to i64
  %817 = load i64, i64* %14, align 8
  %818 = sub i64 0, %816
  %819 = add i64 0, %818
  %820 = sub i64 0, %816
  %821 = sub i64 0, %819
  %822 = sub i64 0, %817
  %823 = add i64 %821, %822
  %824 = sub i64 0, %823
  %825 = add i64 %819, %817
  %826 = shl i64 %816, %817
  %827 = add i64 %816, 5727370128309793121
  %828 = sub i64 %827, %817
  %829 = sub i64 %828, 5727370128309793121
  %830 = sub nsw i64 %816, %817
  %831 = load i32, i32* %10, align 4
  %832 = sext i32 %831 to i64
  %833 = shl i64 %829, %832
  %834 = sub i64 0, %829
  %835 = add i64 0, %834
  %836 = sub i64 0, %829
  %837 = sub i64 0, %835
  %838 = sub i64 0, %832
  %839 = add i64 %837, %838
  %840 = sub i64 0, %839
  %841 = add i64 %835, %832
  %842 = add i64 %829, 2222854676039777450
  %843 = sub i64 %842, %832
  %844 = sub i64 %843, 2222854676039777450
  %845 = sub i64 %829, %832
  %846 = mul i64 %844, %832
  %847 = sub i64 %829, 5753705538056481833
  %848 = sub i64 %847, %832
  %849 = add i64 %848, 5753705538056481833
  %850 = sub i64 %829, %832
  %851 = mul i64 %849, %832
  %852 = shl i64 %829, %832
  %853 = add i64 0, 3042829070013098707
  %854 = sub i64 %853, %829
  %855 = sub i64 %854, 3042829070013098707
  %856 = sub i64 0, %829
  %857 = sub i64 0, %832
  %858 = sub i64 %855, %857
  %859 = add i64 %855, %832
  %860 = sub i64 0, %832
  %861 = add i64 %829, %860
  %862 = sub i64 %829, %832
  %863 = mul i64 %861, %832
  %864 = add i64 %829, 1727131397135994677
  %865 = add i64 %864, %832
  %866 = sub i64 %865, 1727131397135994677
  %867 = add nsw i64 %829, %832
  %868 = load i64, i64* %14, align 8
  %869 = load i64, i64* %12, align 8
  %870 = sub i64 0, %869
  %871 = add i64 %868, %870
  %872 = sub i64 %868, %869
  %873 = mul i64 %871, %869
  %874 = add i64 0, 3624501000022260116
  %875 = sub i64 %874, %868
  %876 = sub i64 %875, 3624501000022260116
  %877 = sub i64 0, %868
  %878 = sub i64 0, %876
  %879 = sub i64 0, %869
  %880 = add i64 %878, %879
  %881 = sub i64 0, %880
  %882 = add i64 %876, %869
  %883 = sub i64 0, %868
  %884 = add i64 0, %883
  %885 = sub i64 0, %868
  %886 = sub i64 0, %869
  %887 = sub i64 %884, %886
  %888 = add i64 %884, %869
  %889 = sub i64 0, 5193457853252288966
  %890 = sub i64 %889, %868
  %891 = add i64 %890, 5193457853252288966
  %892 = sub i64 0, %868
  %893 = add i64 %891, 1216604003054880173
  %894 = add i64 %893, %869
  %895 = sub i64 %894, 1216604003054880173
  %896 = add i64 %891, %869
  %897 = mul nsw i64 %868, %869
  %898 = sub i64 %866, 8722098028279212948
  %899 = sub i64 %898, %897
  %900 = add i64 %899, 8722098028279212948
  %901 = sub i64 %866, %897
  %902 = mul i64 %900, %897
  %903 = sub i64 0, %897
  %904 = add i64 %866, %903
  %905 = sub i64 %866, %897
  %906 = mul i64 %904, %897
  %907 = sub i64 0, %866
  %908 = add i64 0, %907
  %909 = sub i64 0, %866
  %910 = add i64 %908, 3635534854644094614
  %911 = add i64 %910, %897
  %912 = sub i64 %911, 3635534854644094614
  %913 = add i64 %908, %897
  %914 = sub i64 0, %897
  %915 = add i64 %866, %914
  %916 = sub i64 %866, %897
  %917 = mul i64 %915, %897
  %918 = sub i64 0, %897
  %919 = add i64 %866, %918
  %920 = sub nsw i64 %866, %897
  %921 = load i32, i32* %11, align 4
  %922 = sext i32 %921 to i64
  %923 = sub i64 0, %922
  %924 = add i64 0, %923
  %925 = sub i64 0, %922
  %926 = sub i64 0, %924
  %927 = sub i64 0, %919
  %928 = add i64 %926, %927
  %929 = sub i64 0, %928
  %930 = add i64 %924, %919
  %931 = add i64 %922, 3943402178650668705
  %932 = sub i64 %931, %919
  %933 = sub i64 %932, 3943402178650668705
  %934 = sub i64 %922, %919
  %935 = mul i64 %933, %919
  %936 = add i64 %922, 1272985276533207045
  %937 = sub i64 %936, %919
  %938 = sub i64 %937, 1272985276533207045
  %939 = sub i64 %922, %919
  %940 = mul i64 %938, %919
  %941 = add i64 %922, -7649984974157842671
  %942 = sub i64 %941, %919
  %943 = sub i64 %942, -7649984974157842671
  %944 = sub i64 %922, %919
  %945 = mul i64 %943, %919
  %946 = add i64 %922, -6713147568378201677
  %947 = sub i64 %946, %919
  %948 = sub i64 %947, -6713147568378201677
  %949 = sub i64 %922, %919
  %950 = mul i64 %948, %919
  %951 = shl i64 %922, %919
  %952 = sub i64 0, 8632409466958398454
  %953 = sub i64 %952, %922
  %954 = add i64 %953, 8632409466958398454
  %955 = sub i64 0, %922
  %956 = sub i64 %954, -4641256283507184486
  %957 = add i64 %956, %919
  %958 = add i64 %957, -4641256283507184486
  %959 = add i64 %954, %919
  %960 = shl i64 %922, %919
  %961 = add i64 %922, 3204176643262048704
  %962 = sub i64 %961, %919
  %963 = sub i64 %962, 3204176643262048704
  %964 = sub nsw i64 %922, %919
  %965 = trunc i64 %963 to i32
  store i32 %965, i32* %11, align 4
  %966 = load i32, i32* %11, align 4
  %967 = sext i32 %966 to i64
  %968 = load i64, i64* %12, align 8
  %969 = sub i64 0, -5210962526420830193
  %970 = sub i64 %969, %968
  %971 = add i64 %970, -5210962526420830193
  %972 = sub i64 0, %968
  %973 = sub i64 0, %971
  %974 = sub i64 0, 1
  %975 = add i64 %973, %974
  %976 = sub i64 0, %975
  %977 = add i64 %971, 1
  %978 = shl i64 %968, 1
  %979 = add i64 0, 1499789701632063038
  %980 = sub i64 %979, %968
  %981 = sub i64 %980, 1499789701632063038
  %982 = sub i64 0, %968
  %983 = add i64 %981, -4384014297848525594
  %984 = add i64 %983, 1
  %985 = sub i64 %984, -4384014297848525594
  %986 = add i64 %981, 1
  %987 = shl i64 %968, 1
  %988 = sub i64 0, %968
  %989 = sub i64 0, 1
  %990 = add i64 %988, %989
  %991 = sub i64 0, %990
  %992 = add nsw i64 %968, 1
  %993 = shl i64 %967, %991
  %994 = shl i64 %967, %991
  %995 = shl i64 %967, %991
  %996 = sub i64 %967, 168612859887360087
  %997 = sub i64 %996, %991
  %998 = add i64 %997, 168612859887360087
  %999 = sub i64 %967, %991
  %1000 = mul i64 %998, %991
  %1001 = srem i64 %967, %991
  %1002 = icmp eq i64 %1001, 0
  store i32 1519541447, i32* %35
  br label %1007

; <label>:1003:                                   ; preds = %36
  store i8 65, i8* %8, align 1
  store i32 -328715063, i32* %35
  br label %1007

; <label>:1004:                                   ; preds = %36
  store i8 66, i8* %8, align 1
  store i32 -1583032512, i32* %35
  br label %1007

; <label>:1005:                                   ; preds = %36
  %1006 = load i8, i8* %8, align 1
  store i32 1635857015, i32* %35
  br label %1007

; <label>:1007:                                   ; preds = %1005, %1004, %1003, %814, %652, %624, %593, %577, %576, %560, %532, %531, %503, %475, %472, %409, %393, %392, %367, %366, %363, %286, %259, %258, %257, %246, %233, %232, %223, %213, %206, %202, %182, %173, %156, %155, %146, %138, %130, %93, %90, %55, %39, %38
  br label %36
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4), i32* dereferenceable(4)) #1 comdat {
  %3 = alloca i32*
  %4 = alloca i32
  %5 = alloca i32
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %7, align 8
  store i32* %1, i32** %8, align 8
  %9 = load i32*, i32** %7, align 8
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %5
  %11 = load i32*, i32** %8, align 8
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %4
  %13 = alloca i32
  store i32 -94467853, i32* %13
  br label %14

; <label>:14:                                     ; preds = %2, %131
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -94467853, label %17
    i32 -194811818, label %22
    i32 1911225042, label %50
    i32 1269867710, label %78
    i32 -1520111399, label %79
    i32 933418918, label %81
    i32 -677333899, label %109
    i32 445224936, label %125
    i32 -834753200, label %127
    i32 1585657025, label %129
  ]

; <label>:16:                                     ; preds = %14
  br label %131

; <label>:17:                                     ; preds = %14
  %18 = load volatile i32, i32* %5
  %19 = load volatile i32, i32* %4
  %20 = icmp slt i32 %18, %19
  %21 = select i1 %20, i32 -194811818, i32 -1520111399
  store i32 %21, i32* %13
  br label %131

; <label>:22:                                     ; preds = %14
  %23 = load i32, i32* @x.3
  %24 = load i32, i32* @y.4
  %25 = add i32 %23, 144895254
  %26 = sub i32 %25, 1
  %27 = sub i32 %26, 144895254
  %28 = sub i32 %23, 1
  %29 = mul i32 %23, %27
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %24, 10
  %33 = xor i1 %31, true
  %34 = xor i1 %32, true
  %35 = xor i1 true, true
  %36 = and i1 %33, true
  %37 = and i1 %31, %35
  %38 = and i1 %34, true
  %39 = and i1 %32, %35
  %40 = or i1 %36, %37
  %41 = or i1 %38, %39
  %42 = xor i1 %40, %41
  %43 = or i1 %33, %34
  %44 = xor i1 %43, true
  %45 = or i1 true, %35
  %46 = and i1 %44, %45
  %47 = or i1 %42, %46
  %48 = or i1 %31, %32
  %49 = select i1 %47, i32 1911225042, i32 -834753200
  store i32 %49, i32* %13
  br label %131

; <label>:50:                                     ; preds = %14
  %51 = load i32*, i32** %8, align 8
  store i32* %51, i32** %6, align 8
  %52 = load i32, i32* @x.3
  %53 = load i32, i32* @y.4
  %54 = sub i32 0, 1
  %55 = add i32 %52, %54
  %56 = sub i32 %52, 1
  %57 = mul i32 %52, %55
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %53, 10
  %61 = xor i1 %59, true
  %62 = xor i1 %60, true
  %63 = xor i1 false, true
  %64 = and i1 %61, false
  %65 = and i1 %59, %63
  %66 = and i1 %62, false
  %67 = and i1 %60, %63
  %68 = or i1 %64, %65
  %69 = or i1 %66, %67
  %70 = xor i1 %68, %69
  %71 = or i1 %61, %62
  %72 = xor i1 %71, true
  %73 = or i1 false, %63
  %74 = and i1 %72, %73
  %75 = or i1 %70, %74
  %76 = or i1 %59, %60
  %77 = select i1 %75, i32 1269867710, i32 -834753200
  store i32 %77, i32* %13
  br label %131

; <label>:78:                                     ; preds = %14
  store i32 933418918, i32* %13
  br label %131

; <label>:79:                                     ; preds = %14
  %80 = load i32*, i32** %7, align 8
  store i32* %80, i32** %6, align 8
  store i32 933418918, i32* %13
  br label %131

; <label>:81:                                     ; preds = %14
  %82 = load i32, i32* @x.3
  %83 = load i32, i32* @y.4
  %84 = add i32 %82, 1410270838
  %85 = sub i32 %84, 1
  %86 = sub i32 %85, 1410270838
  %87 = sub i32 %82, 1
  %88 = mul i32 %82, %86
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %83, 10
  %92 = xor i1 %90, true
  %93 = xor i1 %91, true
  %94 = xor i1 true, true
  %95 = and i1 %92, true
  %96 = and i1 %90, %94
  %97 = and i1 %93, true
  %98 = and i1 %91, %94
  %99 = or i1 %95, %96
  %100 = or i1 %97, %98
  %101 = xor i1 %99, %100
  %102 = or i1 %92, %93
  %103 = xor i1 %102, true
  %104 = or i1 true, %94
  %105 = and i1 %103, %104
  %106 = or i1 %101, %105
  %107 = or i1 %90, %91
  %108 = select i1 %106, i32 -677333899, i32 1585657025
  store i32 %108, i32* %13
  br label %131

; <label>:109:                                    ; preds = %14
  %110 = load i32*, i32** %6, align 8
  store i32* %110, i32** %3
  %111 = load i32, i32* @x.3
  %112 = load i32, i32* @y.4
  %113 = sub i32 0, 1
  %114 = add i32 %111, %113
  %115 = sub i32 %111, 1
  %116 = mul i32 %111, %114
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %112, 10
  %120 = and i1 %118, %119
  %121 = xor i1 %118, %119
  %122 = or i1 %120, %121
  %123 = or i1 %118, %119
  %124 = select i1 %122, i32 445224936, i32 1585657025
  store i32 %124, i32* %13
  br label %131

; <label>:125:                                    ; preds = %14
  %126 = load volatile i32*, i32** %3
  ret i32* %126

; <label>:127:                                    ; preds = %14
  %128 = load i32*, i32** %8, align 8
  store i32* %128, i32** %6, align 8
  store i32 1911225042, i32* %13
  br label %131

; <label>:129:                                    ; preds = %14
  %130 = load i32*, i32** %6, align 8
  store i32 -677333899, i32* %13
  br label %131

; <label>:131:                                    ; preds = %129, %127, %109, %81, %79, %78, %50, %22, %17, %16
  br label %14
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() #2 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %9 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %2)
  store i32 0, i32* %3, align 4
  %10 = alloca i32
  store i32 -236323238, i32* %10
  br label %11

; <label>:11:                                     ; preds = %0, %83
  %12 = load i32, i32* %10
  switch i32 %12, label %13 [
    i32 -236323238, label %14
    i32 1397258645, label %19
    i32 2007973936, label %22
    i32 543767718, label %27
    i32 -1561039962, label %38
    i32 51602848, label %44
    i32 -1445485536, label %46
    i32 1497375698, label %51
    i32 1235001381, label %66
    i32 319224917, label %81
    i32 -949436149, label %82
  ]

; <label>:13:                                     ; preds = %11
  br label %83

; <label>:14:                                     ; preds = %11
  %15 = load i32, i32* %3, align 4
  %16 = load i32, i32* %2, align 4
  %17 = icmp slt i32 %15, %16
  %18 = select i1 %17, i32 1397258645, i32 1497375698
  store i32 %18, i32* %10
  br label %83

; <label>:19:                                     ; preds = %11
  %20 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32* %5, i32* %6, i32* %7, i32* %8)
  %21 = load i32, i32* %7, align 4
  store i32 %21, i32* %4, align 4
  store i32 2007973936, i32* %10
  br label %83

; <label>:22:                                     ; preds = %11
  %23 = load i32, i32* %4, align 4
  %24 = load i32, i32* %8, align 4
  %25 = icmp sle i32 %23, %24
  %26 = select i1 %25, i32 543767718, i32 51602848
  store i32 %26, i32* %10
  br label %83

; <label>:27:                                     ; preds = %11
  %28 = load i32, i32* %5, align 4
  %29 = load i32, i32* %6, align 4
  %30 = load i32, i32* %4, align 4
  %31 = sub i32 %30, 1822669940
  %32 = sub i32 %31, 1
  %33 = add i32 %32, 1822669940
  %34 = sub nsw i32 %30, 1
  %35 = call signext i8 @_Z3getiii(i32 %28, i32 %29, i32 %33)
  %36 = sext i8 %35 to i32
  %37 = call i32 @putchar(i32 %36)
  store i32 -1561039962, i32* %10
  br label %83

; <label>:38:                                     ; preds = %11
  %39 = load i32, i32* %4, align 4
  %40 = sub i32 %39, -2004586547
  %41 = add i32 %40, 1
  %42 = add i32 %41, -2004586547
  %43 = add nsw i32 %39, 1
  store i32 %42, i32* %4, align 4
  store i32 2007973936, i32* %10
  br label %83

; <label>:44:                                     ; preds = %11
  %45 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store i32 -1445485536, i32* %10
  br label %83

; <label>:46:                                     ; preds = %11
  %47 = load i32, i32* %3, align 4
  %48 = sub i32 0, 1
  %49 = sub i32 %47, %48
  %50 = add nsw i32 %47, 1
  store i32 %49, i32* %3, align 4
  store i32 -236323238, i32* %10
  br label %83

; <label>:51:                                     ; preds = %11
  %52 = load i32, i32* @x.5
  %53 = load i32, i32* @y.6
  %54 = sub i32 0, 1
  %55 = add i32 %52, %54
  %56 = sub i32 %52, 1
  %57 = mul i32 %52, %55
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %53, 10
  %61 = and i1 %59, %60
  %62 = xor i1 %59, %60
  %63 = or i1 %61, %62
  %64 = or i1 %59, %60
  %65 = select i1 %63, i32 1235001381, i32 -949436149
  store i32 %65, i32* %10
  br label %83

; <label>:66:                                     ; preds = %11
  %67 = load i32, i32* @x.5
  %68 = load i32, i32* @y.6
  %69 = sub i32 0, 1
  %70 = add i32 %67, %69
  %71 = sub i32 %67, 1
  %72 = mul i32 %67, %70
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %68, 10
  %76 = and i1 %74, %75
  %77 = xor i1 %74, %75
  %78 = or i1 %76, %77
  %79 = or i1 %74, %75
  %80 = select i1 %78, i32 319224917, i32 -949436149
  store i32 %80, i32* %10
  br label %83

; <label>:81:                                     ; preds = %11
  ret i32 0

; <label>:82:                                     ; preds = %11
  store i32 1235001381, i32* %10
  br label %83

; <label>:83:                                     ; preds = %82, %66, %51, %46, %44, %38, %27, %22, %19, %14, %13
  br label %11
}

declare i32 @scanf(i8*, ...) #3

declare i32 @putchar(i32) #3

declare i32 @puts(i8*) #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
