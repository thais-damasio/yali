; ModuleID = 'Project_CodeNet_C++1400/p02984/s596354359.cpp'
source_filename = "Project_CodeNet_C++1400/p02984/s596354359.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@a = global [100005 x i64] zeroinitializer, align 16
@sumj = global [100005 x i64] zeroinitializer, align 16
@sumo = global [100005 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%lld \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s596354359.cpp, i8* null }]
@x = common global i32 0
@y = common global i32 0
@x.2 = common global i32 0
@y.3 = common global i32 0
@x.4 = common global i32 0
@y.5 = common global i32 0

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() #4 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  store i64 1, i64* %3, align 8
  store i64 1, i64* %4, align 8
  %10 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i64* %2)
  store i32 1, i32* %5, align 4
  %11 = alloca i32
  store i32 -1824392145, i32* %11
  br label %12

; <label>:12:                                     ; preds = %0, %1081
  %13 = load i32, i32* %11
  switch i32 %13, label %14 [
    i32 -1824392145, label %15
    i32 -511212778, label %21
    i32 1041286016, label %30
    i32 451281191, label %52
    i32 1460399884, label %80
    i32 -822252336, label %129
    i32 2076562365, label %130
    i32 -1886669407, label %131
    i32 700765985, label %159
    i32 -851117320, label %192
    i32 -1360807316, label %193
    i32 -1254128667, label %220
    i32 -395149872, label %265
    i32 -1218447302, label %266
    i32 1316645577, label %272
    i32 1485354479, label %277
    i32 260235619, label %293
    i32 -985876956, label %387
    i32 1369545759, label %388
    i32 1739441954, label %451
    i32 555886987, label %452
    i32 601137747, label %479
    i32 -247101313, label %499
    i32 112090502, label %500
    i32 577414480, label %501
    i32 1524311417, label %586
    i32 1413122804, label %621
    i32 181550744, label %700
    i32 -1342349070, label %1073
  ]

; <label>:14:                                     ; preds = %12
  br label %1081

; <label>:15:                                     ; preds = %12
  %16 = load i32, i32* %5, align 4
  %17 = sext i32 %16 to i64
  %18 = load i64, i64* %2, align 8
  %19 = icmp sle i64 %17, %18
  %20 = select i1 %19, i32 -511212778, i32 -1360807316
  store i32 %20, i32* %11
  br label %1081

; <label>:21:                                     ; preds = %12
  %22 = load i32, i32* %5, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [100005 x i64], [100005 x i64]* @a, i64 0, i64 %23
  %25 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i64* %24)
  %26 = load i32, i32* %5, align 4
  %27 = srem i32 %26, 2
  %28 = icmp ne i32 %27, 0
  %29 = select i1 %28, i32 1041286016, i32 451281191
  store i32 %29, i32* %11
  br label %1081

; <label>:30:                                     ; preds = %12
  %31 = load i64, i64* %3, align 8
  %32 = sub i64 %31, 3822382705460549270
  %33 = sub i64 %32, 1
  %34 = add i64 %33, 3822382705460549270
  %35 = sub nsw i64 %31, 1
  %36 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %34
  %37 = load i64, i64* %36, align 8
  %38 = load i32, i32* %5, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [100005 x i64], [100005 x i64]* @a, i64 0, i64 %39
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %37, -1494059947055825220
  %43 = add i64 %42, %41
  %44 = sub i64 %43, -1494059947055825220
  %45 = add nsw i64 %37, %41
  %46 = load i64, i64* %3, align 8
  %47 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %46
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %3, align 8
  %49 = sub i64 0, 1
  %50 = sub i64 %48, %49
  %51 = add nsw i64 %48, 1
  store i64 %50, i64* %3, align 8
  store i32 2076562365, i32* %11
  br label %1081

; <label>:52:                                     ; preds = %12
  %53 = load i32, i32* @x.2
  %54 = load i32, i32* @y.3
  %55 = add i32 %53, 1937169196
  %56 = sub i32 %55, 1
  %57 = sub i32 %56, 1937169196
  %58 = sub i32 %53, 1
  %59 = mul i32 %53, %57
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %54, 10
  %63 = xor i1 %61, true
  %64 = xor i1 %62, true
  %65 = xor i1 false, true
  %66 = and i1 %63, false
  %67 = and i1 %61, %65
  %68 = and i1 %64, false
  %69 = and i1 %62, %65
  %70 = or i1 %66, %67
  %71 = or i1 %68, %69
  %72 = xor i1 %70, %71
  %73 = or i1 %63, %64
  %74 = xor i1 %73, true
  %75 = or i1 false, %65
  %76 = and i1 %74, %75
  %77 = or i1 %72, %76
  %78 = or i1 %61, %62
  %79 = select i1 %77, i32 1460399884, i32 577414480
  store i32 %79, i32* %11
  br label %1081

; <label>:80:                                     ; preds = %12
  %81 = load i64, i64* %4, align 8
  %82 = add i64 %81, -5740047486305921468
  %83 = sub i64 %82, 1
  %84 = sub i64 %83, -5740047486305921468
  %85 = sub nsw i64 %81, 1
  %86 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %84
  %87 = load i64, i64* %86, align 8
  %88 = load i32, i32* %5, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [100005 x i64], [100005 x i64]* @a, i64 0, i64 %89
  %91 = load i64, i64* %90, align 8
  %92 = add i64 %87, -8949876831258379932
  %93 = add i64 %92, %91
  %94 = sub i64 %93, -8949876831258379932
  %95 = add nsw i64 %87, %91
  %96 = load i64, i64* %4, align 8
  %97 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %96
  store i64 %94, i64* %97, align 8
  %98 = load i64, i64* %4, align 8
  %99 = sub i64 0, 1
  %100 = sub i64 %98, %99
  %101 = add nsw i64 %98, 1
  store i64 %100, i64* %4, align 8
  %102 = load i32, i32* @x.2
  %103 = load i32, i32* @y.3
  %104 = add i32 %102, 158863100
  %105 = sub i32 %104, 1
  %106 = sub i32 %105, 158863100
  %107 = sub i32 %102, 1
  %108 = mul i32 %102, %106
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %103, 10
  %112 = xor i1 %110, true
  %113 = xor i1 %111, true
  %114 = xor i1 false, true
  %115 = and i1 %112, false
  %116 = and i1 %110, %114
  %117 = and i1 %113, false
  %118 = and i1 %111, %114
  %119 = or i1 %115, %116
  %120 = or i1 %117, %118
  %121 = xor i1 %119, %120
  %122 = or i1 %112, %113
  %123 = xor i1 %122, true
  %124 = or i1 false, %114
  %125 = and i1 %123, %124
  %126 = or i1 %121, %125
  %127 = or i1 %110, %111
  %128 = select i1 %126, i32 -822252336, i32 577414480
  store i32 %128, i32* %11
  br label %1081

; <label>:129:                                    ; preds = %12
  store i32 2076562365, i32* %11
  br label %1081

; <label>:130:                                    ; preds = %12
  store i32 -1886669407, i32* %11
  br label %1081

; <label>:131:                                    ; preds = %12
  %132 = load i32, i32* @x.2
  %133 = load i32, i32* @y.3
  %134 = add i32 %132, -2016940086
  %135 = sub i32 %134, 1
  %136 = sub i32 %135, -2016940086
  %137 = sub i32 %132, 1
  %138 = mul i32 %132, %136
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %133, 10
  %142 = xor i1 %140, true
  %143 = xor i1 %141, true
  %144 = xor i1 true, true
  %145 = and i1 %142, true
  %146 = and i1 %140, %144
  %147 = and i1 %143, true
  %148 = and i1 %141, %144
  %149 = or i1 %145, %146
  %150 = or i1 %147, %148
  %151 = xor i1 %149, %150
  %152 = or i1 %142, %143
  %153 = xor i1 %152, true
  %154 = or i1 true, %144
  %155 = and i1 %153, %154
  %156 = or i1 %151, %155
  %157 = or i1 %140, %141
  %158 = select i1 %156, i32 700765985, i32 1524311417
  store i32 %158, i32* %11
  br label %1081

; <label>:159:                                    ; preds = %12
  %160 = load i32, i32* %5, align 4
  %161 = sub i32 %160, -67328383
  %162 = add i32 %161, 1
  %163 = add i32 %162, -67328383
  %164 = add nsw i32 %160, 1
  store i32 %163, i32* %5, align 4
  %165 = load i32, i32* @x.2
  %166 = load i32, i32* @y.3
  %167 = sub i32 %165, -145553262
  %168 = sub i32 %167, 1
  %169 = add i32 %168, -145553262
  %170 = sub i32 %165, 1
  %171 = mul i32 %165, %169
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %166, 10
  %175 = xor i1 %173, true
  %176 = xor i1 %174, true
  %177 = xor i1 true, true
  %178 = and i1 %175, true
  %179 = and i1 %173, %177
  %180 = and i1 %176, true
  %181 = and i1 %174, %177
  %182 = or i1 %178, %179
  %183 = or i1 %180, %181
  %184 = xor i1 %182, %183
  %185 = or i1 %175, %176
  %186 = xor i1 %185, true
  %187 = or i1 true, %177
  %188 = and i1 %186, %187
  %189 = or i1 %184, %188
  %190 = or i1 %173, %174
  %191 = select i1 %189, i32 -851117320, i32 1524311417
  store i32 %191, i32* %11
  br label %1081

; <label>:192:                                    ; preds = %12
  store i32 -1824392145, i32* %11
  br label %1081

; <label>:193:                                    ; preds = %12
  %194 = load i32, i32* @x.2
  %195 = load i32, i32* @y.3
  %196 = sub i32 0, 1
  %197 = add i32 %194, %196
  %198 = sub i32 %194, 1
  %199 = mul i32 %194, %197
  %200 = urem i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %195, 10
  %203 = xor i1 %201, true
  %204 = xor i1 %202, true
  %205 = xor i1 false, true
  %206 = and i1 %203, false
  %207 = and i1 %201, %205
  %208 = and i1 %204, false
  %209 = and i1 %202, %205
  %210 = or i1 %206, %207
  %211 = or i1 %208, %209
  %212 = xor i1 %210, %211
  %213 = or i1 %203, %204
  %214 = xor i1 %213, true
  %215 = or i1 false, %205
  %216 = and i1 %214, %215
  %217 = or i1 %212, %216
  %218 = or i1 %201, %202
  %219 = select i1 %217, i32 -1254128667, i32 1413122804
  store i32 %219, i32* %11
  br label %1081

; <label>:220:                                    ; preds = %12
  %221 = load i64, i64* %3, align 8
  %222 = sub i64 %221, 2988425840738908294
  %223 = sub i64 %222, 1
  %224 = add i64 %223, 2988425840738908294
  %225 = sub nsw i64 %221, 1
  %226 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %224
  %227 = load i64, i64* %226, align 8
  %228 = load i64, i64* %4, align 8
  %229 = add i64 %228, 2487456035334119577
  %230 = sub i64 %229, 1
  %231 = sub i64 %230, 2487456035334119577
  %232 = sub nsw i64 %228, 1
  %233 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %231
  %234 = load i64, i64* %233, align 8
  %235 = add i64 %227, 3788137624509313108
  %236 = add i64 %235, %234
  %237 = sub i64 %236, 3788137624509313108
  %238 = add nsw i64 %227, %234
  store i64 %237, i64* %6, align 8
  store i32 1, i32* %7, align 4
  %239 = load i32, i32* @x.2
  %240 = load i32, i32* @y.3
  %241 = sub i32 0, 1
  %242 = add i32 %239, %241
  %243 = sub i32 %239, 1
  %244 = mul i32 %239, %242
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %240, 10
  %248 = xor i1 %246, true
  %249 = xor i1 %247, true
  %250 = xor i1 true, true
  %251 = and i1 %248, true
  %252 = and i1 %246, %250
  %253 = and i1 %249, true
  %254 = and i1 %247, %250
  %255 = or i1 %251, %252
  %256 = or i1 %253, %254
  %257 = xor i1 %255, %256
  %258 = or i1 %248, %249
  %259 = xor i1 %258, true
  %260 = or i1 true, %250
  %261 = and i1 %259, %260
  %262 = or i1 %257, %261
  %263 = or i1 %246, %247
  %264 = select i1 %262, i32 -395149872, i32 1413122804
  store i32 %264, i32* %11
  br label %1081

; <label>:265:                                    ; preds = %12
  store i32 -1218447302, i32* %11
  br label %1081

; <label>:266:                                    ; preds = %12
  %267 = load i32, i32* %7, align 4
  %268 = sext i32 %267 to i64
  %269 = load i64, i64* %2, align 8
  %270 = icmp sle i64 %268, %269
  %271 = select i1 %270, i32 1316645577, i32 112090502
  store i32 %271, i32* %11
  br label %1081

; <label>:272:                                    ; preds = %12
  %273 = load i32, i32* %7, align 4
  %274 = srem i32 %273, 2
  %275 = icmp ne i32 %274, 0
  %276 = select i1 %275, i32 1485354479, i32 1369545759
  store i32 %276, i32* %11
  br label %1081

; <label>:277:                                    ; preds = %12
  %278 = load i32, i32* @x.2
  %279 = load i32, i32* @y.3
  %280 = sub i32 %278, 136315473
  %281 = sub i32 %280, 1
  %282 = add i32 %281, 136315473
  %283 = sub i32 %278, 1
  %284 = mul i32 %278, %282
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %279, 10
  %288 = and i1 %286, %287
  %289 = xor i1 %286, %287
  %290 = or i1 %288, %289
  %291 = or i1 %286, %287
  %292 = select i1 %290, i32 260235619, i32 181550744
  store i32 %292, i32* %11
  br label %1081

; <label>:293:                                    ; preds = %12
  %294 = load i32, i32* %7, align 4
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds [100005 x i64], [100005 x i64]* @a, i64 0, i64 %295
  %297 = load i64, i64* %296, align 8
  %298 = load i32, i32* %7, align 4
  %299 = add i32 %298, 83656166
  %300 = sub i32 %299, 1
  %301 = sub i32 %300, 83656166
  %302 = sub nsw i32 %298, 1
  %303 = sdiv i32 %301, 2
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %304
  %306 = load i64, i64* %305, align 8
  %307 = sub i64 0, %306
  %308 = add i64 %297, %307
  %309 = sub nsw i64 %297, %306
  %310 = load i32, i32* %7, align 4
  %311 = sub i32 0, 1
  %312 = add i32 %310, %311
  %313 = sub nsw i32 %310, 1
  %314 = sdiv i32 %312, 2
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %315
  %317 = load i64, i64* %316, align 8
  %318 = sub i64 0, %317
  %319 = sub i64 %308, %318
  %320 = add nsw i64 %308, %317
  %321 = load i64, i64* %3, align 8
  %322 = sub i64 0, 1
  %323 = add i64 %321, %322
  %324 = sub nsw i64 %321, 1
  %325 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %323
  %326 = load i64, i64* %325, align 8
  %327 = load i32, i32* %7, align 4
  %328 = sub i32 0, %327
  %329 = sub i32 0, 1
  %330 = add i32 %328, %329
  %331 = sub i32 0, %330
  %332 = add nsw i32 %327, 1
  %333 = sdiv i32 %331, 2
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %334
  %336 = load i64, i64* %335, align 8
  %337 = add i64 %326, 5541288068433660305
  %338 = sub i64 %337, %336
  %339 = sub i64 %338, 5541288068433660305
  %340 = sub nsw i64 %326, %336
  %341 = sub i64 0, %319
  %342 = sub i64 0, %339
  %343 = add i64 %341, %342
  %344 = sub i64 0, %343
  %345 = add nsw i64 %319, %339
  %346 = load i64, i64* %4, align 8
  %347 = sub i64 %346, -1559816408541163402
  %348 = sub i64 %347, 1
  %349 = add i64 %348, -1559816408541163402
  %350 = sub nsw i64 %346, 1
  %351 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %349
  %352 = load i64, i64* %351, align 8
  %353 = load i32, i32* %7, align 4
  %354 = sub i32 %353, -2053821527
  %355 = sub i32 %354, 1
  %356 = add i32 %355, -2053821527
  %357 = sub nsw i32 %353, 1
  %358 = sdiv i32 %356, 2
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %359
  %361 = load i64, i64* %360, align 8
  %362 = add i64 %352, 2861320072526470952
  %363 = sub i64 %362, %361
  %364 = sub i64 %363, 2861320072526470952
  %365 = sub nsw i64 %352, %361
  %366 = sub i64 %344, 61219047402473698
  %367 = sub i64 %366, %364
  %368 = add i64 %367, 61219047402473698
  %369 = sub nsw i64 %344, %364
  store i64 %368, i64* %8, align 8
  %370 = load i64, i64* %8, align 8
  %371 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %370)
  %372 = load i32, i32* @x.2
  %373 = load i32, i32* @y.3
  %374 = add i32 %372, 2007350762
  %375 = sub i32 %374, 1
  %376 = sub i32 %375, 2007350762
  %377 = sub i32 %372, 1
  %378 = mul i32 %372, %376
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %373, 10
  %382 = and i1 %380, %381
  %383 = xor i1 %380, %381
  %384 = or i1 %382, %383
  %385 = or i1 %380, %381
  %386 = select i1 %384, i32 -985876956, i32 181550744
  store i32 %386, i32* %11
  br label %1081

; <label>:387:                                    ; preds = %12
  store i32 1739441954, i32* %11
  br label %1081

; <label>:388:                                    ; preds = %12
  %389 = load i32, i32* %7, align 4
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds [100005 x i64], [100005 x i64]* @a, i64 0, i64 %390
  %392 = load i64, i64* %391, align 8
  %393 = load i32, i32* %7, align 4
  %394 = sdiv i32 %393, 2
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %395
  %397 = load i64, i64* %396, align 8
  %398 = sub i64 0, %397
  %399 = sub i64 %392, %398
  %400 = add nsw i64 %392, %397
  %401 = load i32, i32* %7, align 4
  %402 = sdiv i32 %401, 2
  %403 = sub i32 %402, 19143584
  %404 = sub i32 %403, 1
  %405 = add i32 %404, 19143584
  %406 = sub nsw i32 %402, 1
  %407 = sext i32 %405 to i64
  %408 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %407
  %409 = load i64, i64* %408, align 8
  %410 = sub i64 0, %409
  %411 = add i64 %399, %410
  %412 = sub nsw i64 %399, %409
  %413 = load i64, i64* %4, align 8
  %414 = sub i64 0, 1
  %415 = add i64 %413, %414
  %416 = sub nsw i64 %413, 1
  %417 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %415
  %418 = load i64, i64* %417, align 8
  %419 = load i32, i32* %7, align 4
  %420 = sdiv i32 %419, 2
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %421
  %423 = load i64, i64* %422, align 8
  %424 = sub i64 0, %423
  %425 = add i64 %418, %424
  %426 = sub nsw i64 %418, %423
  %427 = add i64 %411, 2067420017921228837
  %428 = add i64 %427, %425
  %429 = sub i64 %428, 2067420017921228837
  %430 = add nsw i64 %411, %425
  %431 = load i64, i64* %3, align 8
  %432 = sub i64 0, 1
  %433 = add i64 %431, %432
  %434 = sub nsw i64 %431, 1
  %435 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %433
  %436 = load i64, i64* %435, align 8
  %437 = load i32, i32* %7, align 4
  %438 = sdiv i32 %437, 2
  %439 = sext i32 %438 to i64
  %440 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %439
  %441 = load i64, i64* %440, align 8
  %442 = sub i64 0, %441
  %443 = add i64 %436, %442
  %444 = sub nsw i64 %436, %441
  %445 = add i64 %429, 8602574379207984634
  %446 = sub i64 %445, %443
  %447 = sub i64 %446, 8602574379207984634
  %448 = sub nsw i64 %429, %443
  store i64 %447, i64* %9, align 8
  %449 = load i64, i64* %9, align 8
  %450 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %449)
  store i32 1739441954, i32* %11
  br label %1081

; <label>:451:                                    ; preds = %12
  store i32 555886987, i32* %11
  br label %1081

; <label>:452:                                    ; preds = %12
  %453 = load i32, i32* @x.2
  %454 = load i32, i32* @y.3
  %455 = sub i32 0, 1
  %456 = add i32 %453, %455
  %457 = sub i32 %453, 1
  %458 = mul i32 %453, %456
  %459 = urem i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = icmp slt i32 %454, 10
  %462 = xor i1 %460, true
  %463 = xor i1 %461, true
  %464 = xor i1 true, true
  %465 = and i1 %462, true
  %466 = and i1 %460, %464
  %467 = and i1 %463, true
  %468 = and i1 %461, %464
  %469 = or i1 %465, %466
  %470 = or i1 %467, %468
  %471 = xor i1 %469, %470
  %472 = or i1 %462, %463
  %473 = xor i1 %472, true
  %474 = or i1 true, %464
  %475 = and i1 %473, %474
  %476 = or i1 %471, %475
  %477 = or i1 %460, %461
  %478 = select i1 %476, i32 601137747, i32 -1342349070
  store i32 %478, i32* %11
  br label %1081

; <label>:479:                                    ; preds = %12
  %480 = load i32, i32* %7, align 4
  %481 = sub i32 %480, 1641423165
  %482 = add i32 %481, 1
  %483 = add i32 %482, 1641423165
  %484 = add nsw i32 %480, 1
  store i32 %483, i32* %7, align 4
  %485 = load i32, i32* @x.2
  %486 = load i32, i32* @y.3
  %487 = sub i32 0, 1
  %488 = add i32 %485, %487
  %489 = sub i32 %485, 1
  %490 = mul i32 %485, %488
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %486, 10
  %494 = and i1 %492, %493
  %495 = xor i1 %492, %493
  %496 = or i1 %494, %495
  %497 = or i1 %492, %493
  %498 = select i1 %496, i32 -247101313, i32 -1342349070
  store i32 %498, i32* %11
  br label %1081

; <label>:499:                                    ; preds = %12
  store i32 -1218447302, i32* %11
  br label %1081

; <label>:500:                                    ; preds = %12
  ret i32 0

; <label>:501:                                    ; preds = %12
  %502 = load i64, i64* %4, align 8
  %503 = shl i64 %502, 1
  %504 = shl i64 %502, 1
  %505 = sub i64 0, %502
  %506 = add i64 0, %505
  %507 = sub i64 0, %502
  %508 = add i64 %506, 4743656762994406853
  %509 = add i64 %508, 1
  %510 = sub i64 %509, 4743656762994406853
  %511 = add i64 %506, 1
  %512 = shl i64 %502, 1
  %513 = add i64 %502, 2008026994548250016
  %514 = sub i64 %513, 1
  %515 = sub i64 %514, 2008026994548250016
  %516 = sub nsw i64 %502, 1
  %517 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %515
  %518 = load i64, i64* %517, align 8
  %519 = load i32, i32* %5, align 4
  %520 = sext i32 %519 to i64
  %521 = getelementptr inbounds [100005 x i64], [100005 x i64]* @a, i64 0, i64 %520
  %522 = load i64, i64* %521, align 8
  %523 = sub i64 0, 8143062856284652392
  %524 = sub i64 %523, %518
  %525 = add i64 %524, 8143062856284652392
  %526 = sub i64 0, %518
  %527 = sub i64 0, %525
  %528 = sub i64 0, %522
  %529 = add i64 %527, %528
  %530 = sub i64 0, %529
  %531 = add i64 %525, %522
  %532 = sub i64 0, 6127168131691967250
  %533 = sub i64 %532, %518
  %534 = add i64 %533, 6127168131691967250
  %535 = sub i64 0, %518
  %536 = sub i64 %534, -3412911925780231974
  %537 = add i64 %536, %522
  %538 = add i64 %537, -3412911925780231974
  %539 = add i64 %534, %522
  %540 = shl i64 %518, %522
  %541 = sub i64 0, -3849512983844043721
  %542 = sub i64 %541, %518
  %543 = add i64 %542, -3849512983844043721
  %544 = sub i64 0, %518
  %545 = sub i64 0, %543
  %546 = sub i64 0, %522
  %547 = add i64 %545, %546
  %548 = sub i64 0, %547
  %549 = add i64 %543, %522
  %550 = shl i64 %518, %522
  %551 = add i64 %518, 1106816664762039496
  %552 = add i64 %551, %522
  %553 = sub i64 %552, 1106816664762039496
  %554 = add nsw i64 %518, %522
  %555 = load i64, i64* %4, align 8
  %556 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %555
  store i64 %553, i64* %556, align 8
  %557 = load i64, i64* %4, align 8
  %558 = sub i64 0, 3787298297142694885
  %559 = sub i64 %558, %557
  %560 = add i64 %559, 3787298297142694885
  %561 = sub i64 0, %557
  %562 = add i64 %560, 4025367822729759188
  %563 = add i64 %562, 1
  %564 = sub i64 %563, 4025367822729759188
  %565 = add i64 %560, 1
  %566 = sub i64 %557, 474478356160660865
  %567 = sub i64 %566, 1
  %568 = add i64 %567, 474478356160660865
  %569 = sub i64 %557, 1
  %570 = mul i64 %568, 1
  %571 = shl i64 %557, 1
  %572 = add i64 0, -4366672971343148008
  %573 = sub i64 %572, %557
  %574 = sub i64 %573, -4366672971343148008
  %575 = sub i64 0, %557
  %576 = sub i64 %574, 3707556674984572426
  %577 = add i64 %576, 1
  %578 = add i64 %577, 3707556674984572426
  %579 = add i64 %574, 1
  %580 = shl i64 %557, 1
  %581 = shl i64 %557, 1
  %582 = sub i64 %557, 919970827809064612
  %583 = add i64 %582, 1
  %584 = add i64 %583, 919970827809064612
  %585 = add nsw i64 %557, 1
  store i64 %584, i64* %4, align 8
  store i32 1460399884, i32* %11
  br label %1081

; <label>:586:                                    ; preds = %12
  %587 = load i32, i32* %5, align 4
  %588 = add i32 %587, -1925866295
  %589 = sub i32 %588, 1
  %590 = sub i32 %589, -1925866295
  %591 = sub i32 %587, 1
  %592 = mul i32 %590, 1
  %593 = add i32 %587, 866373737
  %594 = sub i32 %593, 1
  %595 = sub i32 %594, 866373737
  %596 = sub i32 %587, 1
  %597 = mul i32 %595, 1
  %598 = add i32 0, -496211141
  %599 = sub i32 %598, %587
  %600 = sub i32 %599, -496211141
  %601 = sub i32 0, %587
  %602 = sub i32 0, 1
  %603 = sub i32 %600, %602
  %604 = add i32 %600, 1
  %605 = shl i32 %587, 1
  %606 = sub i32 0, 1417353401
  %607 = sub i32 %606, %587
  %608 = add i32 %607, 1417353401
  %609 = sub i32 0, %587
  %610 = sub i32 %608, -654869804
  %611 = add i32 %610, 1
  %612 = add i32 %611, -654869804
  %613 = add i32 %608, 1
  %614 = shl i32 %587, 1
  %615 = shl i32 %587, 1
  %616 = sub i32 0, %587
  %617 = sub i32 0, 1
  %618 = add i32 %616, %617
  %619 = sub i32 0, %618
  %620 = add nsw i32 %587, 1
  store i32 %619, i32* %5, align 4
  store i32 700765985, i32* %11
  br label %1081

; <label>:621:                                    ; preds = %12
  %622 = load i64, i64* %3, align 8
  %623 = sub i64 0, %622
  %624 = add i64 0, %623
  %625 = sub i64 0, %622
  %626 = sub i64 0, 1
  %627 = sub i64 %624, %626
  %628 = add i64 %624, 1
  %629 = add i64 0, 3050535818443912859
  %630 = sub i64 %629, %622
  %631 = sub i64 %630, 3050535818443912859
  %632 = sub i64 0, %622
  %633 = sub i64 0, 1
  %634 = sub i64 %631, %633
  %635 = add i64 %631, 1
  %636 = shl i64 %622, 1
  %637 = sub i64 %622, -7412462764028538885
  %638 = sub i64 %637, 1
  %639 = add i64 %638, -7412462764028538885
  %640 = sub nsw i64 %622, 1
  %641 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %639
  %642 = load i64, i64* %641, align 8
  %643 = load i64, i64* %4, align 8
  %644 = sub i64 0, 3098347099048723950
  %645 = sub i64 %644, %643
  %646 = add i64 %645, 3098347099048723950
  %647 = sub i64 0, %643
  %648 = sub i64 0, 1
  %649 = sub i64 %646, %648
  %650 = add i64 %646, 1
  %651 = add i64 %643, -1457266118183927254
  %652 = sub i64 %651, 1
  %653 = sub i64 %652, -1457266118183927254
  %654 = sub i64 %643, 1
  %655 = mul i64 %653, 1
  %656 = sub i64 0, 8100439397782825306
  %657 = sub i64 %656, %643
  %658 = add i64 %657, 8100439397782825306
  %659 = sub i64 0, %643
  %660 = sub i64 %658, -3592088466680470032
  %661 = add i64 %660, 1
  %662 = add i64 %661, -3592088466680470032
  %663 = add i64 %658, 1
  %664 = shl i64 %643, 1
  %665 = add i64 %643, -5952724910791881468
  %666 = sub i64 %665, 1
  %667 = sub i64 %666, -5952724910791881468
  %668 = sub i64 %643, 1
  %669 = mul i64 %667, 1
  %670 = add i64 %643, 5714130643042071979
  %671 = sub i64 %670, 1
  %672 = sub i64 %671, 5714130643042071979
  %673 = sub i64 %643, 1
  %674 = mul i64 %672, 1
  %675 = sub i64 %643, -7781183321651586756
  %676 = sub i64 %675, 1
  %677 = add i64 %676, -7781183321651586756
  %678 = sub i64 %643, 1
  %679 = mul i64 %677, 1
  %680 = add i64 0, 1777094591076969711
  %681 = sub i64 %680, %643
  %682 = sub i64 %681, 1777094591076969711
  %683 = sub i64 0, %643
  %684 = sub i64 0, %682
  %685 = sub i64 0, 1
  %686 = add i64 %684, %685
  %687 = sub i64 0, %686
  %688 = add i64 %682, 1
  %689 = add i64 %643, 1441396597081033140
  %690 = sub i64 %689, 1
  %691 = sub i64 %690, 1441396597081033140
  %692 = sub nsw i64 %643, 1
  %693 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %691
  %694 = load i64, i64* %693, align 8
  %695 = shl i64 %642, %694
  %696 = add i64 %642, 1075796499521866912
  %697 = add i64 %696, %694
  %698 = sub i64 %697, 1075796499521866912
  %699 = add nsw i64 %642, %694
  store i64 %698, i64* %6, align 8
  store i32 1, i32* %7, align 4
  store i32 -1254128667, i32* %11
  br label %1081

; <label>:700:                                    ; preds = %12
  %701 = load i32, i32* %7, align 4
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds [100005 x i64], [100005 x i64]* @a, i64 0, i64 %702
  %704 = load i64, i64* %703, align 8
  %705 = load i32, i32* %7, align 4
  %706 = shl i32 %705, 1
  %707 = sub i32 0, -2111912035
  %708 = sub i32 %707, %705
  %709 = add i32 %708, -2111912035
  %710 = sub i32 0, %705
  %711 = sub i32 0, 1
  %712 = sub i32 %709, %711
  %713 = add i32 %709, 1
  %714 = sub i32 0, -411685457
  %715 = sub i32 %714, %705
  %716 = add i32 %715, -411685457
  %717 = sub i32 0, %705
  %718 = sub i32 %716, 1355135505
  %719 = add i32 %718, 1
  %720 = add i32 %719, 1355135505
  %721 = add i32 %716, 1
  %722 = add i32 0, 352002368
  %723 = sub i32 %722, %705
  %724 = sub i32 %723, 352002368
  %725 = sub i32 0, %705
  %726 = sub i32 0, 1
  %727 = sub i32 %724, %726
  %728 = add i32 %724, 1
  %729 = sub i32 0, -1897829567
  %730 = sub i32 %729, %705
  %731 = add i32 %730, -1897829567
  %732 = sub i32 0, %705
  %733 = sub i32 0, 1
  %734 = sub i32 %731, %733
  %735 = add i32 %731, 1
  %736 = sub i32 0, 1
  %737 = add i32 %705, %736
  %738 = sub i32 %705, 1
  %739 = mul i32 %737, 1
  %740 = shl i32 %705, 1
  %741 = sub i32 0, 1
  %742 = add i32 %705, %741
  %743 = sub i32 %705, 1
  %744 = mul i32 %742, 1
  %745 = add i32 %705, 1970848932
  %746 = sub i32 %745, 1
  %747 = sub i32 %746, 1970848932
  %748 = sub nsw i32 %705, 1
  %749 = shl i32 %747, 2
  %750 = sub i32 %747, -1658865941
  %751 = sub i32 %750, 2
  %752 = add i32 %751, -1658865941
  %753 = sub i32 %747, 2
  %754 = mul i32 %752, 2
  %755 = add i32 0, -2101305061
  %756 = sub i32 %755, %747
  %757 = sub i32 %756, -2101305061
  %758 = sub i32 0, %747
  %759 = sub i32 %757, 1974044537
  %760 = add i32 %759, 2
  %761 = add i32 %760, 1974044537
  %762 = add i32 %757, 2
  %763 = shl i32 %747, 2
  %764 = add i32 %747, 506013811
  %765 = sub i32 %764, 2
  %766 = sub i32 %765, 506013811
  %767 = sub i32 %747, 2
  %768 = mul i32 %766, 2
  %769 = shl i32 %747, 2
  %770 = sub i32 0, 2
  %771 = add i32 %747, %770
  %772 = sub i32 %747, 2
  %773 = mul i32 %771, 2
  %774 = sdiv i32 %747, 2
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %775
  %777 = load i64, i64* %776, align 8
  %778 = add i64 %704, -3557626849735976214
  %779 = sub i64 %778, %777
  %780 = sub i64 %779, -3557626849735976214
  %781 = sub i64 %704, %777
  %782 = mul i64 %780, %777
  %783 = add i64 %704, 307617177153837562
  %784 = sub i64 %783, %777
  %785 = sub i64 %784, 307617177153837562
  %786 = sub i64 %704, %777
  %787 = mul i64 %785, %777
  %788 = sub i64 0, 3111083076981239791
  %789 = sub i64 %788, %704
  %790 = add i64 %789, 3111083076981239791
  %791 = sub i64 0, %704
  %792 = sub i64 0, %777
  %793 = sub i64 %790, %792
  %794 = add i64 %790, %777
  %795 = add i64 0, 8490074997561018825
  %796 = sub i64 %795, %704
  %797 = sub i64 %796, 8490074997561018825
  %798 = sub i64 0, %704
  %799 = sub i64 0, %777
  %800 = sub i64 %797, %799
  %801 = add i64 %797, %777
  %802 = sub i64 0, %777
  %803 = add i64 %704, %802
  %804 = sub nsw i64 %704, %777
  %805 = load i32, i32* %7, align 4
  %806 = shl i32 %805, 1
  %807 = add i32 %805, 117649100
  %808 = sub i32 %807, 1
  %809 = sub i32 %808, 117649100
  %810 = sub nsw i32 %805, 1
  %811 = shl i32 %809, 2
  %812 = add i32 %809, 542739319
  %813 = sub i32 %812, 2
  %814 = sub i32 %813, 542739319
  %815 = sub i32 %809, 2
  %816 = mul i32 %814, 2
  %817 = sub i32 0, %809
  %818 = add i32 0, %817
  %819 = sub i32 0, %809
  %820 = sub i32 0, 2
  %821 = sub i32 %818, %820
  %822 = add i32 %818, 2
  %823 = sub i32 0, 2
  %824 = add i32 %809, %823
  %825 = sub i32 %809, 2
  %826 = mul i32 %824, 2
  %827 = shl i32 %809, 2
  %828 = sub i32 %809, 390909763
  %829 = sub i32 %828, 2
  %830 = add i32 %829, 390909763
  %831 = sub i32 %809, 2
  %832 = mul i32 %830, 2
  %833 = add i32 0, 1311291283
  %834 = sub i32 %833, %809
  %835 = sub i32 %834, 1311291283
  %836 = sub i32 0, %809
  %837 = sub i32 0, 2
  %838 = sub i32 %835, %837
  %839 = add i32 %835, 2
  %840 = sub i32 0, 2
  %841 = add i32 %809, %840
  %842 = sub i32 %809, 2
  %843 = mul i32 %841, 2
  %844 = sdiv i32 %809, 2
  %845 = sext i32 %844 to i64
  %846 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %845
  %847 = load i64, i64* %846, align 8
  %848 = shl i64 %803, %847
  %849 = sub i64 0, %803
  %850 = add i64 0, %849
  %851 = sub i64 0, %803
  %852 = add i64 %850, 195459121550137541
  %853 = add i64 %852, %847
  %854 = sub i64 %853, 195459121550137541
  %855 = add i64 %850, %847
  %856 = sub i64 0, %847
  %857 = add i64 %803, %856
  %858 = sub i64 %803, %847
  %859 = mul i64 %857, %847
  %860 = shl i64 %803, %847
  %861 = sub i64 0, -4398464116199119965
  %862 = sub i64 %861, %803
  %863 = add i64 %862, -4398464116199119965
  %864 = sub i64 0, %803
  %865 = sub i64 0, %863
  %866 = sub i64 0, %847
  %867 = add i64 %865, %866
  %868 = sub i64 0, %867
  %869 = add i64 %863, %847
  %870 = add i64 %803, -8942173676278185013
  %871 = sub i64 %870, %847
  %872 = sub i64 %871, -8942173676278185013
  %873 = sub i64 %803, %847
  %874 = mul i64 %872, %847
  %875 = sub i64 %803, -4666087336821738396
  %876 = add i64 %875, %847
  %877 = add i64 %876, -4666087336821738396
  %878 = add nsw i64 %803, %847
  %879 = load i64, i64* %3, align 8
  %880 = sub i64 0, %879
  %881 = add i64 0, %880
  %882 = sub i64 0, %879
  %883 = sub i64 0, 1
  %884 = sub i64 %881, %883
  %885 = add i64 %881, 1
  %886 = shl i64 %879, 1
  %887 = shl i64 %879, 1
  %888 = sub i64 0, -7731549514196645940
  %889 = sub i64 %888, %879
  %890 = add i64 %889, -7731549514196645940
  %891 = sub i64 0, %879
  %892 = add i64 %890, -439816447652591929
  %893 = add i64 %892, 1
  %894 = sub i64 %893, -439816447652591929
  %895 = add i64 %890, 1
  %896 = sub i64 %879, -7857648107262355546
  %897 = sub i64 %896, 1
  %898 = add i64 %897, -7857648107262355546
  %899 = sub nsw i64 %879, 1
  %900 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %898
  %901 = load i64, i64* %900, align 8
  %902 = load i32, i32* %7, align 4
  %903 = shl i32 %902, 1
  %904 = shl i32 %902, 1
  %905 = shl i32 %902, 1
  %906 = sub i32 0, %902
  %907 = sub i32 0, 1
  %908 = add i32 %906, %907
  %909 = sub i32 0, %908
  %910 = add nsw i32 %902, 1
  %911 = shl i32 %909, 2
  %912 = sdiv i32 %909, 2
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumj, i64 0, i64 %913
  %915 = load i64, i64* %914, align 8
  %916 = shl i64 %901, %915
  %917 = sub i64 %901, 3865537578033309143
  %918 = sub i64 %917, %915
  %919 = add i64 %918, 3865537578033309143
  %920 = sub nsw i64 %901, %915
  %921 = shl i64 %877, %919
  %922 = sub i64 %877, -4919387518114874541
  %923 = sub i64 %922, %919
  %924 = add i64 %923, -4919387518114874541
  %925 = sub i64 %877, %919
  %926 = mul i64 %924, %919
  %927 = sub i64 0, %877
  %928 = add i64 0, %927
  %929 = sub i64 0, %877
  %930 = add i64 %928, -3212358896741415655
  %931 = add i64 %930, %919
  %932 = sub i64 %931, -3212358896741415655
  %933 = add i64 %928, %919
  %934 = sub i64 %877, -4294661104046768155
  %935 = add i64 %934, %919
  %936 = add i64 %935, -4294661104046768155
  %937 = add nsw i64 %877, %919
  %938 = load i64, i64* %4, align 8
  %939 = sub i64 0, 3655038769984849257
  %940 = sub i64 %939, %938
  %941 = add i64 %940, 3655038769984849257
  %942 = sub i64 0, %938
  %943 = sub i64 %941, 8341231839104314471
  %944 = add i64 %943, 1
  %945 = add i64 %944, 8341231839104314471
  %946 = add i64 %941, 1
  %947 = add i64 0, 3235152039630887211
  %948 = sub i64 %947, %938
  %949 = sub i64 %948, 3235152039630887211
  %950 = sub i64 0, %938
  %951 = sub i64 0, %949
  %952 = sub i64 0, 1
  %953 = add i64 %951, %952
  %954 = sub i64 0, %953
  %955 = add i64 %949, 1
  %956 = add i64 0, 7136826882261554992
  %957 = sub i64 %956, %938
  %958 = sub i64 %957, 7136826882261554992
  %959 = sub i64 0, %938
  %960 = sub i64 0, %958
  %961 = sub i64 0, 1
  %962 = add i64 %960, %961
  %963 = sub i64 0, %962
  %964 = add i64 %958, 1
  %965 = add i64 %938, 7883757708946548714
  %966 = sub i64 %965, 1
  %967 = sub i64 %966, 7883757708946548714
  %968 = sub i64 %938, 1
  %969 = mul i64 %967, 1
  %970 = sub i64 %938, -4514470609407498190
  %971 = sub i64 %970, 1
  %972 = add i64 %971, -4514470609407498190
  %973 = sub nsw i64 %938, 1
  %974 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %972
  %975 = load i64, i64* %974, align 8
  %976 = load i32, i32* %7, align 4
  %977 = add i32 0, -919267915
  %978 = sub i32 %977, %976
  %979 = sub i32 %978, -919267915
  %980 = sub i32 0, %976
  %981 = sub i32 0, 1
  %982 = sub i32 %979, %981
  %983 = add i32 %979, 1
  %984 = add i32 %976, -1085269699
  %985 = sub i32 %984, 1
  %986 = sub i32 %985, -1085269699
  %987 = sub i32 %976, 1
  %988 = mul i32 %986, 1
  %989 = sub i32 0, 1
  %990 = add i32 %976, %989
  %991 = sub i32 %976, 1
  %992 = mul i32 %990, 1
  %993 = add i32 0, 1713510774
  %994 = sub i32 %993, %976
  %995 = sub i32 %994, 1713510774
  %996 = sub i32 0, %976
  %997 = sub i32 0, 1
  %998 = sub i32 %995, %997
  %999 = add i32 %995, 1
  %1000 = shl i32 %976, 1
  %1001 = sub i32 0, 1
  %1002 = add i32 %976, %1001
  %1003 = sub i32 %976, 1
  %1004 = mul i32 %1002, 1
  %1005 = add i32 %976, 2099348354
  %1006 = sub i32 %1005, 1
  %1007 = sub i32 %1006, 2099348354
  %1008 = sub i32 %976, 1
  %1009 = mul i32 %1007, 1
  %1010 = add i32 %976, -1096894882
  %1011 = sub i32 %1010, 1
  %1012 = sub i32 %1011, -1096894882
  %1013 = sub nsw i32 %976, 1
  %1014 = shl i32 %1012, 2
  %1015 = sub i32 %1012, -29194880
  %1016 = sub i32 %1015, 2
  %1017 = add i32 %1016, -29194880
  %1018 = sub i32 %1012, 2
  %1019 = mul i32 %1017, 2
  %1020 = sub i32 %1012, 1953833382
  %1021 = sub i32 %1020, 2
  %1022 = add i32 %1021, 1953833382
  %1023 = sub i32 %1012, 2
  %1024 = mul i32 %1022, 2
  %1025 = sdiv i32 %1012, 2
  %1026 = sext i32 %1025 to i64
  %1027 = getelementptr inbounds [100005 x i64], [100005 x i64]* @sumo, i64 0, i64 %1026
  %1028 = load i64, i64* %1027, align 8
  %1029 = shl i64 %975, %1028
  %1030 = sub i64 0, %975
  %1031 = add i64 0, %1030
  %1032 = sub i64 0, %975
  %1033 = sub i64 %1031, 3923375735170103042
  %1034 = add i64 %1033, %1028
  %1035 = add i64 %1034, 3923375735170103042
  %1036 = add i64 %1031, %1028
  %1037 = add i64 %975, -3018385037193089420
  %1038 = sub i64 %1037, %1028
  %1039 = sub i64 %1038, -3018385037193089420
  %1040 = sub nsw i64 %975, %1028
  %1041 = sub i64 0, %1039
  %1042 = add i64 %936, %1041
  %1043 = sub i64 %936, %1039
  %1044 = mul i64 %1042, %1039
  %1045 = sub i64 0, 8098576345521492245
  %1046 = sub i64 %1045, %936
  %1047 = add i64 %1046, 8098576345521492245
  %1048 = sub i64 0, %936
  %1049 = add i64 %1047, 6953558430525740762
  %1050 = add i64 %1049, %1039
  %1051 = sub i64 %1050, 6953558430525740762
  %1052 = add i64 %1047, %1039
  %1053 = shl i64 %936, %1039
  %1054 = shl i64 %936, %1039
  %1055 = sub i64 0, -5083283080653255969
  %1056 = sub i64 %1055, %936
  %1057 = add i64 %1056, -5083283080653255969
  %1058 = sub i64 0, %936
  %1059 = sub i64 0, %1057
  %1060 = sub i64 0, %1039
  %1061 = add i64 %1059, %1060
  %1062 = sub i64 0, %1061
  %1063 = add i64 %1057, %1039
  %1064 = sub i64 0, %1039
  %1065 = add i64 %936, %1064
  %1066 = sub i64 %936, %1039
  %1067 = mul i64 %1065, %1039
  %1068 = sub i64 0, %1039
  %1069 = add i64 %936, %1068
  %1070 = sub nsw i64 %936, %1039
  store i64 %1069, i64* %8, align 8
  %1071 = load i64, i64* %8, align 8
  %1072 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %1071)
  store i32 260235619, i32* %11
  br label %1081

; <label>:1073:                                   ; preds = %12
  %1074 = load i32, i32* %7, align 4
  %1075 = shl i32 %1074, 1
  %1076 = sub i32 0, %1074
  %1077 = sub i32 0, 1
  %1078 = add i32 %1076, %1077
  %1079 = sub i32 0, %1078
  %1080 = add nsw i32 %1074, 1
  store i32 %1079, i32* %7, align 4
  store i32 601137747, i32* %11
  br label %1081

; <label>:1081:                                   ; preds = %1073, %700, %621, %586, %501, %499, %479, %452, %451, %388, %387, %293, %277, %272, %266, %265, %220, %193, %192, %159, %131, %130, %129, %80, %52, %30, %21, %15, %14
  br label %12
}

declare i32 @scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s596354359.cpp() #0 section ".text.startup" {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.4
  %4 = load i32, i32* @y.5
  %5 = sub i32 %3, 809072672
  %6 = sub i32 %5, 1
  %7 = add i32 %6, 809072672
  %8 = sub i32 %3, 1
  %9 = mul i32 %3, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %2
  %12 = icmp slt i32 %4, 10
  store i1 %12, i1* %1
  %13 = alloca i32
  store i32 2014325104, i32* %13
  br label %14

; <label>:14:                                     ; preds = %0, %55
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 2014325104, label %17
    i32 -203155884, label %25
    i32 2034400505, label %53
    i32 -1681776498, label %54
  ]

; <label>:16:                                     ; preds = %14
  br label %55

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %2
  %19 = load volatile i1, i1* %1
  %20 = and i1 %18, %19
  %21 = xor i1 %18, %19
  %22 = or i1 %20, %21
  %23 = or i1 %18, %19
  %24 = select i1 %22, i32 -203155884, i32 -1681776498
  store i32 %24, i32* %13
  br label %55

; <label>:25:                                     ; preds = %14
  call void @__cxx_global_var_init()
  %26 = load i32, i32* @x.4
  %27 = load i32, i32* @y.5
  %28 = add i32 %26, 1613282868
  %29 = sub i32 %28, 1
  %30 = sub i32 %29, 1613282868
  %31 = sub i32 %26, 1
  %32 = mul i32 %26, %30
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %27, 10
  %36 = xor i1 %34, true
  %37 = xor i1 %35, true
  %38 = xor i1 false, true
  %39 = and i1 %36, false
  %40 = and i1 %34, %38
  %41 = and i1 %37, false
  %42 = and i1 %35, %38
  %43 = or i1 %39, %40
  %44 = or i1 %41, %42
  %45 = xor i1 %43, %44
  %46 = or i1 %36, %37
  %47 = xor i1 %46, true
  %48 = or i1 false, %38
  %49 = and i1 %47, %48
  %50 = or i1 %45, %49
  %51 = or i1 %34, %35
  %52 = select i1 %50, i32 2034400505, i32 -1681776498
  store i32 %52, i32* %13
  br label %55

; <label>:53:                                     ; preds = %14
  ret void

; <label>:54:                                     ; preds = %14
  call void @__cxx_global_var_init()
  store i32 -203155884, i32* %13
  br label %55

; <label>:55:                                     ; preds = %54, %25, %17, %16
  br label %14
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
