; ModuleID = 'Project_CodeNet_C++1400/p02750/s103996764.cpp'
source_filename = "Project_CodeNet_C++1400/p02750/s103996764.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl" }
%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl" = type { i64*, i64*, i64* }
%"class.std::vector.4" = type { %"struct.std::_Vector_base.5" }
%"struct.std::_Vector_base.5" = type { %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl" }
%"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl" = type { %struct.shop*, %struct.shop*, %struct.shop* }
%struct.shop = type { i64, i64 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::random_device" = type { %union.anon }
%union.anon = type { %"class.std::mersenne_twister_engine" }
%"class.std::mersenne_twister_engine" = type { [624 x i64], i64 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon.0 }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon.0 = type { i64, [8 x i8] }
%"class.std::allocator" = type { i8 }
%"class.std::uniform_int_distribution" = type { %"struct.std::uniform_int_distribution<long long>::param_type" }
%"struct.std::uniform_int_distribution<long long>::param_type" = type { i64, i64 }
%"class.std::allocator.1" = type { i8 }
%"class.std::allocator.6" = type { i8 }
%"class.std::initializer_list" = type { i64*, i64 }
%"class.__gnu_cxx::new_allocator.2" = type { i8 }
%"struct.std::forward_iterator_tag" = type { i8 }
%"struct.std::random_access_iterator_tag" = type { i8 }
%"class.__gnu_cxx::__normal_iterator" = type { %struct.shop* }
%"class.__gnu_cxx::__normal_iterator.9" = type { i64* }
%"struct.__gnu_cxx::__ops::_Iter_comp_iter" = type { i1 (%struct.shop*, %struct.shop*)* }
%"struct.__gnu_cxx::__ops::_Iter_less_iter" = type { i8 }
%"struct.__gnu_cxx::__ops::_Val_less_iter" = type { i8 }
%"class.std::move_iterator" = type { i64* }
%"class.__gnu_cxx::new_allocator.7" = type { i8 }
%"class.std::move_iterator.10" = type { %struct.shop* }
%"struct.__gnu_cxx::__ops::_Iter_comp_val" = type { i1 (%struct.shop*, %struct.shop*)* }
%"struct.__gnu_cxx::__ops::_Val_comp_iter" = type { i1 (%struct.shop*, %struct.shop*)* }
%"struct.__gnu_cxx::__ops::_Iter_less_val" = type { i8 }

$_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_ = comdat any

$_ZNSt13random_deviceC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE = comdat any

$_ZNSt13random_deviceclEv = comdat any

$_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEC2Em = comdat any

$_ZNSt24uniform_int_distributionIxEC2Exx = comdat any

$_ZNSt24uniform_int_distributionIxEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEExRT_ = comdat any

$_ZNSt13random_deviceD2Ev = comdat any

$_ZNSt6vectorIxSaIxEEC2Ev = comdat any

$_ZNSt6vectorIxSaIxEED2Ev = comdat any

$_ZNSt6vectorIxSaIxEE6resizeEm = comdat any

$_ZNSt6vectorIxSaIxEEixEm = comdat any

$_ZNSt6vectorI4shopSaIS0_EEC2Ev = comdat any

$_ZNSt6vectorI4shopSaIS0_EED2Ev = comdat any

$_ZNSaIxEC2Ev = comdat any

$_ZNSt6vectorIxSaIxEEC2ESt16initializer_listIxERKS0_ = comdat any

$_ZNSaIxED2Ev = comdat any

$_ZNSt6vectorI4shopSaIS0_EE9push_backEOS0_ = comdat any

$_ZNSt6vectorIxSaIxEE9push_backEOx = comdat any

$_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_ = comdat any

$_ZNSt6vectorI4shopSaIS0_EE5beginEv = comdat any

$_ZNSt6vectorI4shopSaIS0_EE3endEv = comdat any

$_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEEvT_S7_ = comdat any

$_ZNSt6vectorIxSaIxEE5beginEv = comdat any

$_ZNSt6vectorIxSaIxEE3endEv = comdat any

$_ZNKSt6vectorIxSaIxEE4sizeEv = comdat any

$_ZNKSt6vectorI4shopSaIS0_EE4sizeEv = comdat any

$_Z5chminIxEvRT_S0_ = comdat any

$_ZNSt6vectorI4shopSaIS0_EEixEm = comdat any

$_Z5chmaxIxEvRT_S0_ = comdat any

$_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_ = comdat any

$_ZSt11upper_boundIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEExET_S7_S7_RKT0_ = comdat any

$__clang_call_terminate = comdat any

$_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE4seedEm = comdat any

$_ZNSt8__detail5__modImLm4294967296ELm1ELm0EEET_S1_ = comdat any

$_ZNSt8__detail5__modImLm624ELm1ELm0EEET_S1_ = comdat any

$_ZNSt8__detail4_ModImLm4294967296ELm1ELm0ELb1ELb1EE6__calcEm = comdat any

$_ZNSt8__detail4_ModImLm624ELm1ELm0ELb1ELb1EE6__calcEm = comdat any

$_ZNSt24uniform_int_distributionIxE10param_typeC2Exx = comdat any

$_ZNSt24uniform_int_distributionIxEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEExRT_RKNS0_10param_typeE = comdat any

$_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE3minEv = comdat any

$_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE3maxEv = comdat any

$_ZNKSt24uniform_int_distributionIxE10param_type1bEv = comdat any

$_ZNKSt24uniform_int_distributionIxE10param_type1aEv = comdat any

$_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv = comdat any

$_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv = comdat any

$_ZNSt12_Vector_baseIxSaIxEEC2Ev = comdat any

$_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorIxEC2Ev = comdat any

$_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E = comdat any

$_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv = comdat any

$_ZNSt12_Vector_baseIxSaIxEED2Ev = comdat any

$_ZSt8_DestroyIPxEvT_S1_ = comdat any

$_ZNSt12_Destroy_auxILb1EE9__destroyIPxEEvT_S3_ = comdat any

$_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm = comdat any

$_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev = comdat any

$_ZNSt16allocator_traitsISaIxEE10deallocateERS0_Pxm = comdat any

$_ZN9__gnu_cxx13new_allocatorIxE10deallocateEPxm = comdat any

$_ZN9__gnu_cxx13new_allocatorIxED2Ev = comdat any

$_ZNSt6vectorIxSaIxEE17_M_default_appendEm = comdat any

$_ZNSt6vectorIxSaIxEE15_M_erase_at_endEPx = comdat any

$_ZSt27__uninitialized_default_n_aIPxmxET_S1_T0_RSaIT1_E = comdat any

$_ZNKSt6vectorIxSaIxEE12_M_check_lenEmPKc = comdat any

$_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm = comdat any

$_ZSt34__uninitialized_move_if_noexcept_aIPxS0_SaIxEET0_T_S3_S2_RT1_ = comdat any

$_ZSt25__uninitialized_default_nIPxmET_S1_T0_ = comdat any

$_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPxmEET_S3_T0_ = comdat any

$_ZSt6fill_nIPxmxET_S1_T0_RKT1_ = comdat any

$_ZSt10__fill_n_aIPxmxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_ = comdat any

$_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_ = comdat any

$_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_ = comdat any

$_ZNKSt6vectorIxSaIxEE8max_sizeEv = comdat any

$_ZSt3maxImERKT_S2_S2_ = comdat any

$_ZNSt16allocator_traitsISaIxEE8max_sizeERKS0_ = comdat any

$_ZNKSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv = comdat any

$_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv = comdat any

$_ZNSt16allocator_traitsISaIxEE8allocateERS0_m = comdat any

$_ZN9__gnu_cxx13new_allocatorIxE8allocateEmPKv = comdat any

$_ZSt22__uninitialized_copy_aISt13move_iteratorIPxES1_xET0_T_S4_S3_RSaIT1_E = comdat any

$_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_ = comdat any

$_ZSt18uninitialized_copyISt13move_iteratorIPxES1_ET0_T_S4_S3_ = comdat any

$_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPxES3_EET0_T_S6_S5_ = comdat any

$_ZSt4copyISt13move_iteratorIPxES1_ET0_T_S4_S3_ = comdat any

$_ZSt14__copy_move_a2ILb1EPxS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_ = comdat any

$_ZSt13__copy_move_aILb1EPxS0_ET1_T0_S2_S1_ = comdat any

$_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_ = comdat any

$_ZNSt10_Iter_baseISt13move_iteratorIPxELb1EE7_S_baseES2_ = comdat any

$_ZNKSt13move_iteratorIPxE4baseEv = comdat any

$_ZNSt13move_iteratorIPxEC2ES0_ = comdat any

$_ZNSt12_Vector_baseI4shopSaIS0_EEC2Ev = comdat any

$_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implC2Ev = comdat any

$_ZNSaI4shopEC2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorI4shopEC2Ev = comdat any

$_ZSt8_DestroyIP4shopS0_EvT_S2_RSaIT0_E = comdat any

$_ZNSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv = comdat any

$_ZNSt12_Vector_baseI4shopSaIS0_EED2Ev = comdat any

$_ZSt8_DestroyIP4shopEvT_S2_ = comdat any

$_ZNSt12_Destroy_auxILb1EE9__destroyIP4shopEEvT_S4_ = comdat any

$_ZNSt12_Vector_baseI4shopSaIS0_EE13_M_deallocateEPS0_m = comdat any

$_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implD2Ev = comdat any

$_ZNSt16allocator_traitsISaI4shopEE10deallocateERS1_PS0_m = comdat any

$_ZN9__gnu_cxx13new_allocatorI4shopE10deallocateEPS1_m = comdat any

$_ZNSaI4shopED2Ev = comdat any

$_ZN9__gnu_cxx13new_allocatorI4shopED2Ev = comdat any

$_ZNSt12_Vector_baseIxSaIxEEC2ERKS0_ = comdat any

$_ZNSt6vectorIxSaIxEE19_M_range_initializeIPKxEEvT_S5_St20forward_iterator_tag = comdat any

$_ZNKSt16initializer_listIxE5beginEv = comdat any

$_ZNKSt16initializer_listIxE3endEv = comdat any

$_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2ERKS0_ = comdat any

$_ZNSaIxEC2ERKS_ = comdat any

$_ZN9__gnu_cxx13new_allocatorIxEC2ERKS1_ = comdat any

$_ZSt8distanceIPKxENSt15iterator_traitsIT_E15difference_typeES3_S3_ = comdat any

$_ZSt22__uninitialized_copy_aIPKxPxxET0_T_S4_S3_RSaIT1_E = comdat any

$_ZSt10__distanceIPKxENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag = comdat any

$_ZSt19__iterator_categoryIPKxENSt15iterator_traitsIT_E17iterator_categoryERKS3_ = comdat any

$_ZSt18uninitialized_copyIPKxPxET0_T_S4_S3_ = comdat any

$_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKxPxEET0_T_S6_S5_ = comdat any

$_ZSt4copyIPKxPxET0_T_S4_S3_ = comdat any

$_ZSt14__copy_move_a2ILb0EPKxPxET1_T0_S4_S3_ = comdat any

$_ZSt12__miter_baseIPKxENSt11_Miter_baseIT_E13iterator_typeES3_ = comdat any

$_ZSt13__copy_move_aILb0EPKxPxET1_T0_S4_S3_ = comdat any

$_ZSt12__niter_baseIPKxENSt11_Niter_baseIT_E13iterator_typeES3_ = comdat any

$_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_ = comdat any

$_ZNSt10_Iter_baseIPKxLb0EE7_S_baseES1_ = comdat any

$_ZNKSt16initializer_listIxE4sizeEv = comdat any

$_ZNSt6vectorI4shopSaIS0_EE12emplace_backIJS0_EEEvDpOT_ = comdat any

$_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_ = comdat any

$_ZNSt16allocator_traitsISaI4shopEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_ = comdat any

$_ZSt7forwardI4shopEOT_RNSt16remove_referenceIS1_E4typeE = comdat any

$_ZNSt6vectorI4shopSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ = comdat any

$_ZN9__gnu_cxx13new_allocatorI4shopE9constructIS1_JS1_EEEvPT_DpOT0_ = comdat any

$_ZNKSt6vectorI4shopSaIS0_EE12_M_check_lenEmPKc = comdat any

$_ZNSt12_Vector_baseI4shopSaIS0_EE11_M_allocateEm = comdat any

$_ZSt34__uninitialized_move_if_noexcept_aIP4shopS1_SaIS0_EET0_T_S4_S3_RT1_ = comdat any

$_ZNSt16allocator_traitsISaI4shopEE7destroyIS0_EEvRS1_PT_ = comdat any

$_ZNKSt6vectorI4shopSaIS0_EE8max_sizeEv = comdat any

$_ZNSt16allocator_traitsISaI4shopEE8max_sizeERKS1_ = comdat any

$_ZNKSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv = comdat any

$_ZNK9__gnu_cxx13new_allocatorI4shopE8max_sizeEv = comdat any

$_ZNSt16allocator_traitsISaI4shopEE8allocateERS1_m = comdat any

$_ZN9__gnu_cxx13new_allocatorI4shopE8allocateEmPKv = comdat any

$_ZSt22__uninitialized_copy_aISt13move_iteratorIP4shopES2_S1_ET0_T_S5_S4_RSaIT1_E = comdat any

$_ZSt32__make_move_if_noexcept_iteratorIP4shopSt13move_iteratorIS1_EET0_T_ = comdat any

$_ZSt18uninitialized_copyISt13move_iteratorIP4shopES2_ET0_T_S5_S4_ = comdat any

$_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP4shopES4_EET0_T_S7_S6_ = comdat any

$_ZSt4copyISt13move_iteratorIP4shopES2_ET0_T_S5_S4_ = comdat any

$_ZSt14__copy_move_a2ILb1EP4shopS1_ET1_T0_S3_S2_ = comdat any

$_ZSt12__miter_baseISt13move_iteratorIP4shopEENSt11_Miter_baseIT_E13iterator_typeES5_ = comdat any

$_ZSt13__copy_move_aILb1EP4shopS1_ET1_T0_S3_S2_ = comdat any

$_ZSt12__niter_baseIP4shopENSt11_Niter_baseIT_E13iterator_typeES3_ = comdat any

$_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI4shopEEPT_PKS4_S7_S5_ = comdat any

$_ZNSt10_Iter_baseIP4shopLb0EE7_S_baseES1_ = comdat any

$_ZNSt10_Iter_baseISt13move_iteratorIP4shopELb1EE7_S_baseES3_ = comdat any

$_ZNKSt13move_iteratorIP4shopE4baseEv = comdat any

$_ZNSt13move_iteratorIP4shopEC2ES1_ = comdat any

$_ZN9__gnu_cxx13new_allocatorI4shopE7destroyIS1_EEvPT_ = comdat any

$_ZNSt6vectorIxSaIxEE12emplace_backIJxEEEvDpOT_ = comdat any

$_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_ = comdat any

$_ZNSt16allocator_traitsISaIxEE9constructIxJxEEEvRS0_PT_DpOT0_ = comdat any

$_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE = comdat any

$_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIJxEEEvDpOT_ = comdat any

$_ZN9__gnu_cxx13new_allocatorIxE9constructIxJxEEEvPT_DpOT0_ = comdat any

$_ZNSt16allocator_traitsISaIxEE7destroyIxEEvRS0_PT_ = comdat any

$_ZN9__gnu_cxx13new_allocatorIxE7destroyIxEEvPT_ = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEC2ERKS2_ = comdat any

$_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_ = comdat any

$_ZN9__gnu_cxx5__ops16__iter_comp_iterIPFbRK4shopS4_EEENS0_15_Iter_comp_iterIT_EES8_ = comdat any

$_ZN9__gnu_cxxneIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_ = comdat any

$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_T1_ = comdat any

$_ZSt4__lgl = comdat any

$_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_ = comdat any

$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_ = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv = comdat any

$_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_ = comdat any

$_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEET_SF_SF_T0_ = comdat any

$_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_ = comdat any

$_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_ = comdat any

$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_ = comdat any

$_ZN9__gnu_cxxltIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_ = comdat any

$_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_ = comdat any

$_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_ = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv = comdat any

$_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_T0_SG_T1_T2_ = comdat any

$_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIPFbRKS2_SB_EEEEvT_T0_SG_T1_T2_ = comdat any

$_ZN9__gnu_cxx5__ops15__iter_comp_valIPFbRK4shopS4_EEENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS8_EE = comdat any

$_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEES2_EEbT_RT0_ = comdat any

$_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRK4shopS4_EEC2ES6_ = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv = comdat any

$_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_SF_T0_ = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmiEl = comdat any

$_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEET_SF_SF_SF_T0_ = comdat any

$_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_ = comdat any

$_ZSt4swapI4shopEvRT_S2_ = comdat any

$_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_ = comdat any

$_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_ = comdat any

$_ZN9__gnu_cxxeqIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_ = comdat any

$_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_ = comdat any

$_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIPFbRKS2_SB_EEEEvT_T0_ = comdat any

$_ZN9__gnu_cxx5__ops15__val_comp_iterIPFbRK4shopS4_EEENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS8_EE = comdat any

$_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_ = comdat any

$_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Miter_baseIT_E13iterator_typeES9_ = comdat any

$_ZSt22__copy_move_backward_aILb1EP4shopS1_ET1_T0_S3_S2_ = comdat any

$_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeES9_ = comdat any

$_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI4shopEEPT_PKS4_S7_S5_ = comdat any

$_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES7_ = comdat any

$_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEELb0EE7_S_baseES7_ = comdat any

$_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRK4shopS4_EEclIS2_NS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEEEEbRT_T0_ = comdat any

$_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRK4shopS4_EEC2ES6_ = comdat any

$_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEC2ES6_ = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_ = comdat any

$_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

$_ZN9__gnu_cxx5__ops16__iter_less_iterEv = comdat any

$_ZN9__gnu_cxxneIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_ = comdat any

$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any

$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv = comdat any

$_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_ = comdat any

$_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_ = comdat any

$_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_ = comdat any

$_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

$_ZN9__gnu_cxxltIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_ = comdat any

$_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_ = comdat any

$_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_ = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv = comdat any

$_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElxNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_ = comdat any

$_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElxNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_T2_ = comdat any

$_ZN9__gnu_cxx5__ops15__iter_comp_valENS0_15_Iter_less_iterE = comdat any

$_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEExEEbT_RT0_ = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmmEv = comdat any

$_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_ = comdat any

$_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmiEl = comdat any

$_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_ = comdat any

$_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_ = comdat any

$_ZSt4swapIxEvRT_S1_ = comdat any

$_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

$_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

$_ZN9__gnu_cxxeqIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_ = comdat any

$_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_ET0_T_S8_S7_ = comdat any

$_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops14_Val_less_iterEEvT_T0_ = comdat any

$_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE = comdat any

$_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_ET1_T0_S8_S7_ = comdat any

$_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Miter_baseIT_E13iterator_typeES8_ = comdat any

$_ZSt22__copy_move_backward_aILb1EPxS0_ET1_T0_S2_S1_ = comdat any

$_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Niter_baseIT_E13iterator_typeES8_ = comdat any

$_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIxEEPT_PKS3_S6_S4_ = comdat any

$_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEELb1EE7_S_baseES6_ = comdat any

$_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEELb0EE7_S_baseES6_ = comdat any

$_ZNK9__gnu_cxx5__ops14_Val_less_iterclIxNS_17__normal_iteratorIPxSt6vectorIxSaIxEEEEEEbRT_T0_ = comdat any

$_ZSt13__upper_boundIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEExNS0_5__ops14_Val_less_iterEET_S9_S9_RKT0_T1_ = comdat any

$_ZN9__gnu_cxx5__ops15__val_less_iterEv = comdat any

$_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_ = comdat any

$_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElEvRT_T0_ = comdat any

$_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKxNS_17__normal_iteratorIPxSt6vectorIxSaIxEEEEEEbRT_T0_ = comdat any

$_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag = comdat any

$_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_ = comdat any

$_ZSt9__advanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElEvRT_T0_St26random_access_iterator_tag = comdat any

$_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEpLEl = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZL2pi = internal global double 0.000000e+00, align 8
@dx = global [4 x i64] [i64 0, i64 1, i64 0, i64 -1], align 16
@dy = global [4 x i64] [i64 1, i64 0, i64 -1, i64 0], align 16
@.str = private unnamed_addr constant [8 x i8] c"default\00", align 1
@kaijo = global %"class.std::vector" zeroinitializer, align 8
@invkaijo = global %"class.std::vector" zeroinitializer, align 8
@n = global i64 0, align 8
@t = global i64 0, align 8
@s = global %"class.std::vector.4" zeroinitializer, align 8
@v = global %"class.std::vector" zeroinitializer, align 8
@.ref.tmp = private constant [1 x i64] zeroinitializer, align 8
@dp = global [200010 x [40 x i64]] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str.6 = private unnamed_addr constant [26 x i8] c"vector::_M_default_append\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"vector::_M_emplace_back_aux\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s103996764.cpp, i8* null }]
@x = common global i32 0
@y = common global i32 0
@x.8 = common global i32 0
@y.9 = common global i32 0
@x.10 = common global i32 0
@y.11 = common global i32 0
@x.12 = common global i32 0
@y.13 = common global i32 0
@x.14 = common global i32 0
@y.15 = common global i32 0
@x.16 = common global i32 0
@y.17 = common global i32 0
@x.18 = common global i32 0
@y.19 = common global i32 0
@x.20 = common global i32 0
@y.21 = common global i32 0
@x.22 = common global i32 0
@y.23 = common global i32 0
@x.24 = common global i32 0
@y.25 = common global i32 0
@x.26 = common global i32 0
@y.27 = common global i32 0
@x.28 = common global i32 0
@y.29 = common global i32 0
@x.30 = common global i32 0
@y.31 = common global i32 0
@x.32 = common global i32 0
@y.33 = common global i32 0
@x.34 = common global i32 0
@y.35 = common global i32 0
@x.36 = common global i32 0
@y.37 = common global i32 0
@x.38 = common global i32 0
@y.39 = common global i32 0
@x.40 = common global i32 0
@y.41 = common global i32 0
@x.42 = common global i32 0
@y.43 = common global i32 0
@x.44 = common global i32 0
@y.45 = common global i32 0
@x.46 = common global i32 0
@y.47 = common global i32 0
@x.48 = common global i32 0
@y.49 = common global i32 0
@x.50 = common global i32 0
@y.51 = common global i32 0
@x.52 = common global i32 0
@y.53 = common global i32 0
@x.54 = common global i32 0
@y.55 = common global i32 0
@x.56 = common global i32 0
@y.57 = common global i32 0
@x.58 = common global i32 0
@y.59 = common global i32 0
@x.60 = common global i32 0
@y.61 = common global i32 0
@x.62 = common global i32 0
@y.63 = common global i32 0
@x.64 = common global i32 0
@y.65 = common global i32 0
@x.66 = common global i32 0
@y.67 = common global i32 0
@x.68 = common global i32 0
@y.69 = common global i32 0
@x.70 = common global i32 0
@y.71 = common global i32 0
@x.72 = common global i32 0
@y.73 = common global i32 0
@x.74 = common global i32 0
@y.75 = common global i32 0
@x.76 = common global i32 0
@y.77 = common global i32 0
@x.78 = common global i32 0
@y.79 = common global i32 0
@x.80 = common global i32 0
@y.81 = common global i32 0
@x.82 = common global i32 0
@y.83 = common global i32 0
@x.84 = common global i32 0
@y.85 = common global i32 0
@x.86 = common global i32 0
@y.87 = common global i32 0
@x.88 = common global i32 0
@y.89 = common global i32 0
@x.90 = common global i32 0
@y.91 = common global i32 0
@x.92 = common global i32 0
@y.93 = common global i32 0
@x.94 = common global i32 0
@y.95 = common global i32 0
@x.96 = common global i32 0
@y.97 = common global i32 0
@x.98 = common global i32 0
@y.99 = common global i32 0
@x.100 = common global i32 0
@y.101 = common global i32 0
@x.102 = common global i32 0
@y.103 = common global i32 0
@x.104 = common global i32 0
@y.105 = common global i32 0
@x.106 = common global i32 0
@y.107 = common global i32 0
@x.108 = common global i32 0
@y.109 = common global i32 0
@x.110 = common global i32 0
@y.111 = common global i32 0
@x.112 = common global i32 0
@y.113 = common global i32 0
@x.114 = common global i32 0
@y.115 = common global i32 0
@x.116 = common global i32 0
@y.117 = common global i32 0
@x.118 = common global i32 0
@y.119 = common global i32 0
@x.120 = common global i32 0
@y.121 = common global i32 0
@x.122 = common global i32 0
@y.123 = common global i32 0
@x.124 = common global i32 0
@y.125 = common global i32 0
@x.126 = common global i32 0
@y.127 = common global i32 0
@x.128 = common global i32 0
@y.129 = common global i32 0
@x.130 = common global i32 0
@y.131 = common global i32 0
@x.132 = common global i32 0
@y.133 = common global i32 0
@x.134 = common global i32 0
@y.135 = common global i32 0
@x.136 = common global i32 0
@y.137 = common global i32 0
@x.138 = common global i32 0
@y.139 = common global i32 0
@x.140 = common global i32 0
@y.141 = common global i32 0
@x.142 = common global i32 0
@y.143 = common global i32 0
@x.144 = common global i32 0
@y.145 = common global i32 0
@x.146 = common global i32 0
@y.147 = common global i32 0
@x.148 = common global i32 0
@y.149 = common global i32 0
@x.150 = common global i32 0
@y.151 = common global i32 0
@x.152 = common global i32 0
@y.153 = common global i32 0
@x.154 = common global i32 0
@y.155 = common global i32 0
@x.156 = common global i32 0
@y.157 = common global i32 0
@x.158 = common global i32 0
@y.159 = common global i32 0
@x.160 = common global i32 0
@y.161 = common global i32 0
@x.162 = common global i32 0
@y.163 = common global i32 0
@x.164 = common global i32 0
@y.165 = common global i32 0
@x.166 = common global i32 0
@y.167 = common global i32 0
@x.168 = common global i32 0
@y.169 = common global i32 0
@x.170 = common global i32 0
@y.171 = common global i32 0
@x.172 = common global i32 0
@y.173 = common global i32 0
@x.174 = common global i32 0
@y.175 = common global i32 0
@x.176 = common global i32 0
@y.177 = common global i32 0
@x.178 = common global i32 0
@y.179 = common global i32 0
@x.180 = common global i32 0
@y.181 = common global i32 0
@x.182 = common global i32 0
@y.183 = common global i32 0
@x.184 = common global i32 0
@y.185 = common global i32 0
@x.186 = common global i32 0
@y.187 = common global i32 0
@x.188 = common global i32 0
@y.189 = common global i32 0
@x.190 = common global i32 0
@y.191 = common global i32 0
@x.192 = common global i32 0
@y.193 = common global i32 0
@x.194 = common global i32 0
@y.195 = common global i32 0
@x.196 = common global i32 0
@y.197 = common global i32 0
@x.198 = common global i32 0
@y.199 = common global i32 0
@x.200 = common global i32 0
@y.201 = common global i32 0
@x.202 = common global i32 0
@y.203 = common global i32 0
@x.204 = common global i32 0
@y.205 = common global i32 0
@x.206 = common global i32 0
@y.207 = common global i32 0
@x.208 = common global i32 0
@y.209 = common global i32 0
@x.210 = common global i32 0
@y.211 = common global i32 0
@x.212 = common global i32 0
@y.213 = common global i32 0
@x.214 = common global i32 0
@y.215 = common global i32 0
@x.216 = common global i32 0
@y.217 = common global i32 0
@x.218 = common global i32 0
@y.219 = common global i32 0
@x.220 = common global i32 0
@y.221 = common global i32 0
@x.222 = common global i32 0
@y.223 = common global i32 0
@x.224 = common global i32 0
@y.225 = common global i32 0
@x.226 = common global i32 0
@y.227 = common global i32 0
@x.228 = common global i32 0
@y.229 = common global i32 0
@x.230 = common global i32 0
@y.231 = common global i32 0
@x.232 = common global i32 0
@y.233 = common global i32 0
@x.234 = common global i32 0
@y.235 = common global i32 0
@x.236 = common global i32 0
@y.237 = common global i32 0
@x.238 = common global i32 0
@y.239 = common global i32 0
@x.240 = common global i32 0
@y.241 = common global i32 0
@x.242 = common global i32 0
@y.243 = common global i32 0
@x.244 = common global i32 0
@y.245 = common global i32 0
@x.246 = common global i32 0
@y.247 = common global i32 0
@x.248 = common global i32 0
@y.249 = common global i32 0
@x.250 = common global i32 0
@y.251 = common global i32 0
@x.252 = common global i32 0
@y.253 = common global i32 0
@x.254 = common global i32 0
@y.255 = common global i32 0
@x.256 = common global i32 0
@y.257 = common global i32 0
@x.258 = common global i32 0
@y.259 = common global i32 0
@x.260 = common global i32 0
@y.261 = common global i32 0
@x.262 = common global i32 0
@y.263 = common global i32 0
@x.264 = common global i32 0
@y.265 = common global i32 0
@x.266 = common global i32 0
@y.267 = common global i32 0
@x.268 = common global i32 0
@y.269 = common global i32 0
@x.270 = common global i32 0
@y.271 = common global i32 0
@x.272 = common global i32 0
@y.273 = common global i32 0
@x.274 = common global i32 0
@y.275 = common global i32 0
@x.276 = common global i32 0
@y.277 = common global i32 0
@x.278 = common global i32 0
@y.279 = common global i32 0
@x.280 = common global i32 0
@y.281 = common global i32 0
@x.282 = common global i32 0
@y.283 = common global i32 0
@x.284 = common global i32 0
@y.285 = common global i32 0
@x.286 = common global i32 0
@y.287 = common global i32 0
@x.288 = common global i32 0
@y.289 = common global i32 0
@x.290 = common global i32 0
@y.291 = common global i32 0
@x.292 = common global i32 0
@y.293 = common global i32 0
@x.294 = common global i32 0
@y.295 = common global i32 0
@x.296 = common global i32 0
@y.297 = common global i32 0
@x.298 = common global i32 0
@y.299 = common global i32 0
@x.300 = common global i32 0
@y.301 = common global i32 0
@x.302 = common global i32 0
@y.303 = common global i32 0
@x.304 = common global i32 0
@y.305 = common global i32 0
@x.306 = common global i32 0
@y.307 = common global i32 0
@x.308 = common global i32 0
@y.309 = common global i32 0
@x.310 = common global i32 0
@y.311 = common global i32 0
@x.312 = common global i32 0
@y.313 = common global i32 0
@x.314 = common global i32 0
@y.315 = common global i32 0
@x.316 = common global i32 0
@y.317 = common global i32 0
@x.318 = common global i32 0
@y.319 = common global i32 0
@x.320 = common global i32 0
@y.321 = common global i32 0
@x.322 = common global i32 0
@y.323 = common global i32 0
@x.324 = common global i32 0
@y.325 = common global i32 0
@x.326 = common global i32 0
@y.327 = common global i32 0
@x.328 = common global i32 0
@y.329 = common global i32 0
@x.330 = common global i32 0
@y.331 = common global i32 0
@x.332 = common global i32 0
@y.333 = common global i32 0
@x.334 = common global i32 0
@y.335 = common global i32 0
@x.336 = common global i32 0
@y.337 = common global i32 0
@x.338 = common global i32 0
@y.339 = common global i32 0
@x.340 = common global i32 0
@y.341 = common global i32 0
@x.342 = common global i32 0
@y.343 = common global i32 0
@x.344 = common global i32 0
@y.345 = common global i32 0
@x.346 = common global i32 0
@y.347 = common global i32 0
@x.348 = common global i32 0
@y.349 = common global i32 0
@x.350 = common global i32 0
@y.351 = common global i32 0
@x.352 = common global i32 0
@y.353 = common global i32 0
@x.354 = common global i32 0
@y.355 = common global i32 0
@x.356 = common global i32 0
@y.357 = common global i32 0
@x.358 = common global i32 0
@y.359 = common global i32 0
@x.360 = common global i32 0
@y.361 = common global i32 0
@x.362 = common global i32 0
@y.363 = common global i32 0
@x.364 = common global i32 0
@y.365 = common global i32 0
@x.366 = common global i32 0
@y.367 = common global i32 0
@x.368 = common global i32 0
@y.369 = common global i32 0
@x.370 = common global i32 0
@y.371 = common global i32 0
@x.372 = common global i32 0
@y.373 = common global i32 0
@x.374 = common global i32 0
@y.375 = common global i32 0
@x.376 = common global i32 0
@y.377 = common global i32 0
@x.378 = common global i32 0
@y.379 = common global i32 0
@x.380 = common global i32 0
@y.381 = common global i32 0
@x.382 = common global i32 0
@y.383 = common global i32 0
@x.384 = common global i32 0
@y.385 = common global i32 0
@x.386 = common global i32 0
@y.387 = common global i32 0
@x.388 = common global i32 0
@y.389 = common global i32 0
@x.390 = common global i32 0
@y.391 = common global i32 0
@x.392 = common global i32 0
@y.393 = common global i32 0
@x.394 = common global i32 0
@y.395 = common global i32 0
@x.396 = common global i32 0
@y.397 = common global i32 0
@x.398 = common global i32 0
@y.399 = common global i32 0
@x.400 = common global i32 0
@y.401 = common global i32 0
@x.402 = common global i32 0
@y.403 = common global i32 0
@x.404 = common global i32 0
@y.405 = common global i32 0
@x.406 = common global i32 0
@y.407 = common global i32 0
@x.408 = common global i32 0
@y.409 = common global i32 0
@x.410 = common global i32 0
@y.411 = common global i32 0
@x.412 = common global i32 0
@y.413 = common global i32 0
@x.414 = common global i32 0
@y.415 = common global i32 0
@x.416 = common global i32 0
@y.417 = common global i32 0
@x.418 = common global i32 0
@y.419 = common global i32 0
@x.420 = common global i32 0
@y.421 = common global i32 0
@x.422 = common global i32 0
@y.423 = common global i32 0
@x.424 = common global i32 0
@y.425 = common global i32 0
@x.426 = common global i32 0
@y.427 = common global i32 0
@x.428 = common global i32 0
@y.429 = common global i32 0
@x.430 = common global i32 0
@y.431 = common global i32 0
@x.432 = common global i32 0
@y.433 = common global i32 0
@x.434 = common global i32 0
@y.435 = common global i32 0
@x.436 = common global i32 0
@y.437 = common global i32 0
@x.438 = common global i32 0
@y.439 = common global i32 0
@x.440 = common global i32 0
@y.441 = common global i32 0
@x.442 = common global i32 0
@y.443 = common global i32 0
@x.444 = common global i32 0
@y.445 = common global i32 0
@x.446 = common global i32 0
@y.447 = common global i32 0
@x.448 = common global i32 0
@y.449 = common global i32 0
@x.450 = common global i32 0
@y.451 = common global i32 0
@x.452 = common global i32 0
@y.453 = common global i32 0
@x.454 = common global i32 0
@y.455 = common global i32 0
@x.456 = common global i32 0
@y.457 = common global i32 0
@x.458 = common global i32 0
@y.459 = common global i32 0
@x.460 = common global i32 0
@y.461 = common global i32 0
@x.462 = common global i32 0
@y.463 = common global i32 0
@x.464 = common global i32 0
@y.465 = common global i32 0
@x.466 = common global i32 0
@y.467 = common global i32 0
@x.468 = common global i32 0
@y.469 = common global i32 0
@x.470 = common global i32 0
@y.471 = common global i32 0
@x.472 = common global i32 0
@y.473 = common global i32 0
@x.474 = common global i32 0
@y.475 = common global i32 0
@x.476 = common global i32 0
@y.477 = common global i32 0
@x.478 = common global i32 0
@y.479 = common global i32 0
@x.480 = common global i32 0
@y.481 = common global i32 0
@x.482 = common global i32 0
@y.483 = common global i32 0
@x.484 = common global i32 0
@y.485 = common global i32 0
@x.486 = common global i32 0
@y.487 = common global i32 0
@x.488 = common global i32 0
@y.489 = common global i32 0
@x.490 = common global i32 0
@y.491 = common global i32 0
@x.492 = common global i32 0
@y.493 = common global i32 0
@x.494 = common global i32 0
@y.495 = common global i32 0
@x.496 = common global i32 0
@y.497 = common global i32 0
@x.498 = common global i32 0
@y.499 = common global i32 0
@x.500 = common global i32 0
@y.501 = common global i32 0
@x.502 = common global i32 0
@y.503 = common global i32 0
@x.504 = common global i32 0
@y.505 = common global i32 0
@x.506 = common global i32 0
@y.507 = common global i32 0
@x.508 = common global i32 0
@y.509 = common global i32 0
@x.510 = common global i32 0
@y.511 = common global i32 0
@x.512 = common global i32 0
@y.513 = common global i32 0
@x.514 = common global i32 0
@y.515 = common global i32 0
@x.516 = common global i32 0
@y.517 = common global i32 0
@x.518 = common global i32 0
@y.519 = common global i32 0
@x.520 = common global i32 0
@y.521 = common global i32 0
@x.522 = common global i32 0
@y.523 = common global i32 0
@x.524 = common global i32 0
@y.525 = common global i32 0
@x.526 = common global i32 0
@y.527 = common global i32 0
@x.528 = common global i32 0
@y.529 = common global i32 0
@x.530 = common global i32 0
@y.531 = common global i32 0
@x.532 = common global i32 0
@y.533 = common global i32 0
@x.534 = common global i32 0
@y.535 = common global i32 0
@x.536 = common global i32 0
@y.537 = common global i32 0
@x.538 = common global i32 0
@y.539 = common global i32 0
@x.540 = common global i32 0
@y.541 = common global i32 0
@x.542 = common global i32 0
@y.543 = common global i32 0
@x.544 = common global i32 0
@y.545 = common global i32 0
@x.546 = common global i32 0
@y.547 = common global i32 0
@x.548 = common global i32 0
@y.549 = common global i32 0
@x.550 = common global i32 0
@y.551 = common global i32 0
@x.552 = common global i32 0
@y.553 = common global i32 0
@x.554 = common global i32 0
@y.555 = common global i32 0
@x.556 = common global i32 0
@y.557 = common global i32 0
@x.558 = common global i32 0
@y.559 = common global i32 0
@x.560 = common global i32 0
@y.561 = common global i32 0
@x.562 = common global i32 0
@y.563 = common global i32 0

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x
  %4 = load i32, i32* @y
  %5 = sub i32 %3, 1484664941
  %6 = sub i32 %5, 1
  %7 = add i32 %6, 1484664941
  %8 = sub i32 %3, 1
  %9 = mul i32 %3, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %2
  %12 = icmp slt i32 %4, 10
  store i1 %12, i1* %1
  %13 = alloca i32
  store i32 1327829965, i32* %13
  br label %14

; <label>:14:                                     ; preds = %0, %45
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 1327829965, label %17
    i32 238859269, label %25
    i32 514715089, label %42
    i32 1855598438, label %43
  ]

; <label>:16:                                     ; preds = %14
  br label %45

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %2
  %19 = load volatile i1, i1* %1
  %20 = and i1 %18, %19
  %21 = xor i1 %18, %19
  %22 = or i1 %20, %21
  %23 = or i1 %18, %19
  %24 = select i1 %22, i32 238859269, i32 1855598438
  store i32 %24, i32* %13
  br label %45

; <label>:25:                                     ; preds = %14
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %26 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  %27 = load i32, i32* @x
  %28 = load i32, i32* @y
  %29 = sub i32 %27, 2092313362
  %30 = sub i32 %29, 1
  %31 = add i32 %30, 2092313362
  %32 = sub i32 %27, 1
  %33 = mul i32 %27, %31
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %28, 10
  %37 = and i1 %35, %36
  %38 = xor i1 %35, %36
  %39 = or i1 %37, %38
  %40 = or i1 %35, %36
  %41 = select i1 %39, i32 514715089, i32 1855598438
  store i32 %41, i32* %13
  br label %45

; <label>:42:                                     ; preds = %14
  ret void

; <label>:43:                                     ; preds = %14
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit)
  %44 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3
  store i32 238859269, i32* %13
  br label %45

; <label>:45:                                     ; preds = %43, %25, %17, %16
  br label %14
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.1() #0 section ".text.startup" {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.8
  %4 = load i32, i32* @y.9
  %5 = sub i32 %3, 2109619455
  %6 = sub i32 %5, 1
  %7 = add i32 %6, 2109619455
  %8 = sub i32 %3, 1
  %9 = mul i32 %3, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %2
  %12 = icmp slt i32 %4, 10
  store i1 %12, i1* %1
  %13 = alloca i32
  store i32 -1898555970, i32* %13
  br label %14

; <label>:14:                                     ; preds = %0, %57
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -1898555970, label %17
    i32 1138347919, label %25
    i32 -1702801716, label %54
    i32 70027867, label %55
  ]

; <label>:16:                                     ; preds = %14
  br label %57

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %2
  %19 = load volatile i1, i1* %1
  %20 = and i1 %18, %19
  %21 = xor i1 %18, %19
  %22 = or i1 %20, %21
  %23 = or i1 %18, %19
  %24 = select i1 %22, i32 1138347919, i32 70027867
  store i32 %24, i32* %13
  br label %57

; <label>:25:                                     ; preds = %14
  %26 = call double @_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 -1)
  store double %26, double* @_ZL2pi, align 8
  %27 = load i32, i32* @x.8
  %28 = load i32, i32* @y.9
  %29 = add i32 %27, -1899662589
  %30 = sub i32 %29, 1
  %31 = sub i32 %30, -1899662589
  %32 = sub i32 %27, 1
  %33 = mul i32 %27, %31
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %28, 10
  %37 = xor i1 %35, true
  %38 = xor i1 %36, true
  %39 = xor i1 true, true
  %40 = and i1 %37, true
  %41 = and i1 %35, %39
  %42 = and i1 %38, true
  %43 = and i1 %36, %39
  %44 = or i1 %40, %41
  %45 = or i1 %42, %43
  %46 = xor i1 %44, %45
  %47 = or i1 %37, %38
  %48 = xor i1 %47, true
  %49 = or i1 true, %39
  %50 = and i1 %48, %49
  %51 = or i1 %46, %50
  %52 = or i1 %35, %36
  %53 = select i1 %51, i32 -1702801716, i32 70027867
  store i32 %53, i32* %13
  br label %57

; <label>:54:                                     ; preds = %14
  ret void

; <label>:55:                                     ; preds = %14
  %56 = call double @_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 -1)
  store double %56, double* @_ZL2pi, align 8
  store i32 1138347919, i32* %13
  br label %57

; <label>:57:                                     ; preds = %55, %25, %17, %16
  br label %14
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32) #4 comdat {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sitofp i32 %3 to double
  %5 = call double @acos(double %4) #12
  ret double %5
}

; Function Attrs: noinline uwtable
define i64 @_Z6Randomxx(i64, i64) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %"class.std::random_device", align 8
  %6 = alloca %"class.std::__cxx11::basic_string", align 8
  %7 = alloca %"class.std::allocator", align 1
  %8 = alloca i8*
  %9 = alloca i32
  %10 = alloca %"class.std::mersenne_twister_engine", align 8
  %11 = alloca %"class.std::uniform_int_distribution", align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  call void @_ZNSaIcEC1Ev(%"class.std::allocator"* %7) #3
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_(%"class.std::__cxx11::basic_string"* %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %"class.std::allocator"* dereferenceable(1) %7)
          to label %12 unwind label %52

; <label>:12:                                     ; preds = %2
  invoke void @_ZNSt13random_deviceC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::random_device"* %5, %"class.std::__cxx11::basic_string"* dereferenceable(32) %6)
          to label %13 unwind label %56

; <label>:13:                                     ; preds = %12
  call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(%"class.std::__cxx11::basic_string"* %6) #3
  call void @_ZNSaIcED1Ev(%"class.std::allocator"* %7) #3
  %14 = invoke i32 @_ZNSt13random_deviceclEv(%"class.std::random_device"* %5)
          to label %15 unwind label %61

; <label>:15:                                     ; preds = %13
  %16 = zext i32 %14 to i64
  invoke void @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEC2Em(%"class.std::mersenne_twister_engine"* %10, i64 %16)
          to label %17 unwind label %61

; <label>:17:                                     ; preds = %15
  %18 = load i32, i32* @x.12
  %19 = load i32, i32* @y.13
  %20 = sub i32 0, 1
  %21 = add i32 %18, %20
  %22 = sub i32 %18, 1
  %23 = mul i32 %18, %21
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %19, 10
  %27 = and i1 %25, %26
  %28 = xor i1 %25, %26
  %29 = or i1 %27, %28
  %30 = or i1 %25, %26
  br i1 %29, label %31, label %111

; <label>:31:                                     ; preds = %17, %111
  %32 = load i64, i64* %3, align 8
  %33 = load i64, i64* %4, align 8
  %34 = load i32, i32* @x.12
  %35 = load i32, i32* @y.13
  %36 = sub i32 %34, -694641214
  %37 = sub i32 %36, 1
  %38 = add i32 %37, -694641214
  %39 = sub i32 %34, 1
  %40 = mul i32 %34, %38
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %35, 10
  %44 = and i1 %42, %43
  %45 = xor i1 %42, %43
  %46 = or i1 %44, %45
  %47 = or i1 %42, %43
  br i1 %46, label %48, label %111

; <label>:48:                                     ; preds = %31
  invoke void @_ZNSt24uniform_int_distributionIxEC2Exx(%"class.std::uniform_int_distribution"* %11, i64 %32, i64 %33)
          to label %49 unwind label %61

; <label>:49:                                     ; preds = %48
  %50 = invoke i64 @_ZNSt24uniform_int_distributionIxEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEExRT_(%"class.std::uniform_int_distribution"* %11, %"class.std::mersenne_twister_engine"* dereferenceable(5000) %10)
          to label %51 unwind label %61

; <label>:51:                                     ; preds = %49
  call void @_ZNSt13random_deviceD2Ev(%"class.std::random_device"* %5) #3
  ret i64 %50

; <label>:52:                                     ; preds = %2
  %53 = landingpad { i8*, i32 }
          cleanup
  %54 = extractvalue { i8*, i32 } %53, 0
  store i8* %54, i8** %8, align 8
  %55 = extractvalue { i8*, i32 } %53, 1
  store i32 %55, i32* %9, align 4
  br label %60

; <label>:56:                                     ; preds = %12
  %57 = landingpad { i8*, i32 }
          cleanup
  %58 = extractvalue { i8*, i32 } %57, 0
  store i8* %58, i8** %8, align 8
  %59 = extractvalue { i8*, i32 } %57, 1
  store i32 %59, i32* %9, align 4
  call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(%"class.std::__cxx11::basic_string"* %6) #3
  br label %60

; <label>:60:                                     ; preds = %56, %52
  call void @_ZNSaIcED1Ev(%"class.std::allocator"* %7) #3
  br label %106

; <label>:61:                                     ; preds = %49, %48, %15, %13
  %62 = load i32, i32* @x.12
  %63 = load i32, i32* @y.13
  %64 = sub i32 0, 1
  %65 = add i32 %62, %64
  %66 = sub i32 %62, 1
  %67 = mul i32 %62, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %63, 10
  %71 = xor i1 %69, true
  %72 = xor i1 %70, true
  %73 = xor i1 true, true
  %74 = and i1 %71, true
  %75 = and i1 %69, %73
  %76 = and i1 %72, true
  %77 = and i1 %70, %73
  %78 = or i1 %74, %75
  %79 = or i1 %76, %77
  %80 = xor i1 %78, %79
  %81 = or i1 %71, %72
  %82 = xor i1 %81, true
  %83 = or i1 true, %73
  %84 = and i1 %82, %83
  %85 = or i1 %80, %84
  %86 = or i1 %69, %70
  br i1 %85, label %87, label %114

; <label>:87:                                     ; preds = %61, %114
  %88 = landingpad { i8*, i32 }
          cleanup
  %89 = extractvalue { i8*, i32 } %88, 0
  store i8* %89, i8** %8, align 8
  %90 = extractvalue { i8*, i32 } %88, 1
  store i32 %90, i32* %9, align 4
  call void @_ZNSt13random_deviceD2Ev(%"class.std::random_device"* %5) #3
  %91 = load i32, i32* @x.12
  %92 = load i32, i32* @y.13
  %93 = sub i32 %91, -682268752
  %94 = sub i32 %93, 1
  %95 = add i32 %94, -682268752
  %96 = sub i32 %91, 1
  %97 = mul i32 %91, %95
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %92, 10
  %101 = and i1 %99, %100
  %102 = xor i1 %99, %100
  %103 = or i1 %101, %102
  %104 = or i1 %99, %100
  br i1 %103, label %105, label %114

; <label>:105:                                    ; preds = %87
  br label %106

; <label>:106:                                    ; preds = %105, %60
  %107 = load i8*, i8** %8, align 8
  %108 = load i32, i32* %9, align 4
  %109 = insertvalue { i8*, i32 } undef, i8* %107, 0
  %110 = insertvalue { i8*, i32 } %109, i32 %108, 1
  resume { i8*, i32 } %110

; <label>:111:                                    ; preds = %31, %17
  %112 = load i64, i64* %3, align 8
  %113 = load i64, i64* %4, align 8
  br label %31

; <label>:114:                                    ; preds = %87, %61
  %115 = landingpad { i8*, i32 }
          cleanup
  %116 = extractvalue { i8*, i32 } %115, 0
  store i8* %116, i8** %8, align 8
  %117 = extractvalue { i8*, i32 } %115, 1
  store i32 %117, i32* %9, align 4
  call void @_ZNSt13random_deviceD2Ev(%"class.std::random_device"* %5) #3
  br label %87
}

; Function Attrs: nounwind
declare void @_ZNSaIcEC1Ev(%"class.std::allocator"*) unnamed_addr #2

declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_(%"class.std::__cxx11::basic_string"*, i8*, %"class.std::allocator"* dereferenceable(1)) unnamed_addr #1

declare i32 @__gxx_personality_v0(...)

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt13random_deviceC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::random_device"*, %"class.std::__cxx11::basic_string"* dereferenceable(32)) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::random_device"*, align 8
  %4 = alloca %"class.std::__cxx11::basic_string"*, align 8
  store %"class.std::random_device"* %0, %"class.std::random_device"** %3, align 8
  store %"class.std::__cxx11::basic_string"* %1, %"class.std::__cxx11::basic_string"** %4, align 8
  %5 = load %"class.std::random_device"*, %"class.std::random_device"** %3, align 8
  %6 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %4, align 8
  call void @_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::random_device"* %5, %"class.std::__cxx11::basic_string"* dereferenceable(32) %6)
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSaIcED1Ev(%"class.std::allocator"*) unnamed_addr #2

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_ZNSt13random_deviceclEv(%"class.std::random_device"*) #0 comdat align 2 {
  %2 = alloca i32
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.16
  %6 = load i32, i32* @y.17
  %7 = sub i32 %5, -1561806768
  %8 = sub i32 %7, 1
  %9 = add i32 %8, -1561806768
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1215959063, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %76
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1215959063, label %19
    i32 2100065159, label %39
    i32 -1341625034, label %70
    i32 1448822701, label %72
  ]

; <label>:18:                                     ; preds = %16
  br label %76

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 2100065159, i32 1448822701
  store i32 %38, i32* %15
  br label %76

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::random_device"*, align 8
  store %"class.std::random_device"* %0, %"class.std::random_device"** %40, align 8
  %41 = load %"class.std::random_device"*, %"class.std::random_device"** %40, align 8
  %42 = call i32 @_ZNSt13random_device9_M_getvalEv(%"class.std::random_device"* %41)
  store i32 %42, i32* %2
  %43 = load i32, i32* @x.16
  %44 = load i32, i32* @y.17
  %45 = sub i32 %43, 947185874
  %46 = sub i32 %45, 1
  %47 = add i32 %46, 947185874
  %48 = sub i32 %43, 1
  %49 = mul i32 %43, %47
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %44, 10
  %53 = xor i1 %51, true
  %54 = xor i1 %52, true
  %55 = xor i1 true, true
  %56 = and i1 %53, true
  %57 = and i1 %51, %55
  %58 = and i1 %54, true
  %59 = and i1 %52, %55
  %60 = or i1 %56, %57
  %61 = or i1 %58, %59
  %62 = xor i1 %60, %61
  %63 = or i1 %53, %54
  %64 = xor i1 %63, true
  %65 = or i1 true, %55
  %66 = and i1 %64, %65
  %67 = or i1 %62, %66
  %68 = or i1 %51, %52
  %69 = select i1 %67, i32 -1341625034, i32 1448822701
  store i32 %69, i32* %15
  br label %76

; <label>:70:                                     ; preds = %16
  %71 = load volatile i32, i32* %2
  ret i32 %71

; <label>:72:                                     ; preds = %16
  %73 = alloca %"class.std::random_device"*, align 8
  store %"class.std::random_device"* %0, %"class.std::random_device"** %73, align 8
  %74 = load %"class.std::random_device"*, %"class.std::random_device"** %73, align 8
  %75 = call i32 @_ZNSt13random_device9_M_getvalEv(%"class.std::random_device"* %74)
  store i32 2100065159, i32* %15
  br label %76

; <label>:76:                                     ; preds = %72, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEC2Em(%"class.std::mersenne_twister_engine"*, i64) unnamed_addr #0 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.18
  %6 = load i32, i32* @y.19
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 1790719404, i32* %14
  br label %15

; <label>:15:                                     ; preds = %2, %76
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 1790719404, label %18
    i32 -1456323275, label %38
    i32 1974850702, label %70
    i32 1538492471, label %71
  ]

; <label>:17:                                     ; preds = %15
  br label %76

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 true, true
  %24 = and i1 %21, true
  %25 = and i1 %19, %23
  %26 = and i1 %22, true
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 true, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 -1456323275, i32 1538492471
  store i32 %37, i32* %14
  br label %76

; <label>:38:                                     ; preds = %15
  %39 = alloca %"class.std::mersenne_twister_engine"*, align 8
  %40 = alloca i64, align 8
  store %"class.std::mersenne_twister_engine"* %0, %"class.std::mersenne_twister_engine"** %39, align 8
  store i64 %1, i64* %40, align 8
  %41 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %39, align 8
  %42 = load i64, i64* %40, align 8
  call void @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE4seedEm(%"class.std::mersenne_twister_engine"* %41, i64 %42)
  %43 = load i32, i32* @x.18
  %44 = load i32, i32* @y.19
  %45 = add i32 %43, -1196737375
  %46 = sub i32 %45, 1
  %47 = sub i32 %46, -1196737375
  %48 = sub i32 %43, 1
  %49 = mul i32 %43, %47
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %44, 10
  %53 = xor i1 %51, true
  %54 = xor i1 %52, true
  %55 = xor i1 true, true
  %56 = and i1 %53, true
  %57 = and i1 %51, %55
  %58 = and i1 %54, true
  %59 = and i1 %52, %55
  %60 = or i1 %56, %57
  %61 = or i1 %58, %59
  %62 = xor i1 %60, %61
  %63 = or i1 %53, %54
  %64 = xor i1 %63, true
  %65 = or i1 true, %55
  %66 = and i1 %64, %65
  %67 = or i1 %62, %66
  %68 = or i1 %51, %52
  %69 = select i1 %67, i32 1974850702, i32 1538492471
  store i32 %69, i32* %14
  br label %76

; <label>:70:                                     ; preds = %15
  ret void

; <label>:71:                                     ; preds = %15
  %72 = alloca %"class.std::mersenne_twister_engine"*, align 8
  %73 = alloca i64, align 8
  store %"class.std::mersenne_twister_engine"* %0, %"class.std::mersenne_twister_engine"** %72, align 8
  store i64 %1, i64* %73, align 8
  %74 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %72, align 8
  %75 = load i64, i64* %73, align 8
  call void @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE4seedEm(%"class.std::mersenne_twister_engine"* %74, i64 %75)
  store i32 -1456323275, i32* %14
  br label %76

; <label>:76:                                     ; preds = %71, %38, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt24uniform_int_distributionIxEC2Exx(%"class.std::uniform_int_distribution"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.20
  %7 = load i32, i32* @y.21
  %8 = add i32 %6, 1392516671
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, 1392516671
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 -988172106, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %60
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -988172106, label %20
    i32 -801259355, label %28
    i32 1646006461, label %51
    i32 -2101194027, label %52
  ]

; <label>:19:                                     ; preds = %17
  br label %60

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 -801259355, i32 -2101194027
  store i32 %27, i32* %16
  br label %60

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.std::uniform_int_distribution"*, align 8
  %30 = alloca i64, align 8
  %31 = alloca i64, align 8
  store %"class.std::uniform_int_distribution"* %0, %"class.std::uniform_int_distribution"** %29, align 8
  store i64 %1, i64* %30, align 8
  store i64 %2, i64* %31, align 8
  %32 = load %"class.std::uniform_int_distribution"*, %"class.std::uniform_int_distribution"** %29, align 8
  %33 = getelementptr inbounds %"class.std::uniform_int_distribution", %"class.std::uniform_int_distribution"* %32, i32 0, i32 0
  %34 = load i64, i64* %30, align 8
  %35 = load i64, i64* %31, align 8
  call void @_ZNSt24uniform_int_distributionIxE10param_typeC2Exx(%"struct.std::uniform_int_distribution<long long>::param_type"* %33, i64 %34, i64 %35)
  %36 = load i32, i32* @x.20
  %37 = load i32, i32* @y.21
  %38 = add i32 %36, 1226234137
  %39 = sub i32 %38, 1
  %40 = sub i32 %39, 1226234137
  %41 = sub i32 %36, 1
  %42 = mul i32 %36, %40
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %37, 10
  %46 = and i1 %44, %45
  %47 = xor i1 %44, %45
  %48 = or i1 %46, %47
  %49 = or i1 %44, %45
  %50 = select i1 %48, i32 1646006461, i32 -2101194027
  store i32 %50, i32* %16
  br label %60

; <label>:51:                                     ; preds = %17
  ret void

; <label>:52:                                     ; preds = %17
  %53 = alloca %"class.std::uniform_int_distribution"*, align 8
  %54 = alloca i64, align 8
  %55 = alloca i64, align 8
  store %"class.std::uniform_int_distribution"* %0, %"class.std::uniform_int_distribution"** %53, align 8
  store i64 %1, i64* %54, align 8
  store i64 %2, i64* %55, align 8
  %56 = load %"class.std::uniform_int_distribution"*, %"class.std::uniform_int_distribution"** %53, align 8
  %57 = getelementptr inbounds %"class.std::uniform_int_distribution", %"class.std::uniform_int_distribution"* %56, i32 0, i32 0
  %58 = load i64, i64* %54, align 8
  %59 = load i64, i64* %55, align 8
  call void @_ZNSt24uniform_int_distributionIxE10param_typeC2Exx(%"struct.std::uniform_int_distribution<long long>::param_type"* %57, i64 %58, i64 %59)
  store i32 -801259355, i32* %16
  br label %60

; <label>:60:                                     ; preds = %52, %28, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNSt24uniform_int_distributionIxEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEExRT_(%"class.std::uniform_int_distribution"*, %"class.std::mersenne_twister_engine"* dereferenceable(5000)) #0 comdat align 2 {
  %3 = alloca %"class.std::uniform_int_distribution"*, align 8
  %4 = alloca %"class.std::mersenne_twister_engine"*, align 8
  store %"class.std::uniform_int_distribution"* %0, %"class.std::uniform_int_distribution"** %3, align 8
  store %"class.std::mersenne_twister_engine"* %1, %"class.std::mersenne_twister_engine"** %4, align 8
  %5 = load %"class.std::uniform_int_distribution"*, %"class.std::uniform_int_distribution"** %3, align 8
  %6 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4, align 8
  %7 = getelementptr inbounds %"class.std::uniform_int_distribution", %"class.std::uniform_int_distribution"* %5, i32 0, i32 0
  %8 = call i64 @_ZNSt24uniform_int_distributionIxEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEExRT_RKNS0_10param_typeE(%"class.std::uniform_int_distribution"* %5, %"class.std::mersenne_twister_engine"* dereferenceable(5000) %6, %"struct.std::uniform_int_distribution<long long>::param_type"* dereferenceable(16) %7)
  ret i64 %8
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt13random_deviceD2Ev(%"class.std::random_device"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::random_device"*, align 8
  store %"class.std::random_device"* %0, %"class.std::random_device"** %2, align 8
  %3 = load %"class.std::random_device"*, %"class.std::random_device"** %2, align 8
  invoke void @_ZNSt13random_device7_M_finiEv(%"class.std::random_device"* %3)
          to label %4 unwind label %5

; <label>:4:                                      ; preds = %1
  ret void

; <label>:5:                                      ; preds = %1
  %6 = load i32, i32* @x.24
  %7 = load i32, i32* @y.25
  %8 = add i32 %6, 1270561823
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, 1270561823
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %7, 10
  %16 = and i1 %14, %15
  %17 = xor i1 %14, %15
  %18 = or i1 %16, %17
  %19 = or i1 %14, %15
  br i1 %18, label %20, label %50

; <label>:20:                                     ; preds = %5, %50
  %21 = landingpad { i8*, i32 }
          catch i8* null
  %22 = extractvalue { i8*, i32 } %21, 0
  call void @__clang_call_terminate(i8* %22) #13
  %23 = load i32, i32* @x.24
  %24 = load i32, i32* @y.25
  %25 = add i32 %23, -1613445880
  %26 = sub i32 %25, 1
  %27 = sub i32 %26, -1613445880
  %28 = sub i32 %23, 1
  %29 = mul i32 %23, %27
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %24, 10
  %33 = xor i1 %31, true
  %34 = xor i1 %32, true
  %35 = xor i1 true, true
  %36 = and i1 %33, true
  %37 = and i1 %31, %35
  %38 = and i1 %34, true
  %39 = and i1 %32, %35
  %40 = or i1 %36, %37
  %41 = or i1 %38, %39
  %42 = xor i1 %40, %41
  %43 = or i1 %33, %34
  %44 = xor i1 %43, true
  %45 = or i1 true, %35
  %46 = and i1 %44, %45
  %47 = or i1 %42, %46
  %48 = or i1 %31, %32
  br i1 %47, label %49, label %50

; <label>:49:                                     ; preds = %20
  unreachable

; <label>:50:                                     ; preds = %20, %5
  %51 = landingpad { i8*, i32 }
          catch i8* null
  %52 = extractvalue { i8*, i32 } %51, 0
  call void @__clang_call_terminate(i8* %52) #13
  br label %20
}

; Function Attrs: noinline uwtable
define i64 @_Z3gcdxx(i64, i64) #0 {
  %3 = alloca i1
  %4 = alloca i64*
  %5 = alloca i64*
  %6 = alloca i64*
  %7 = alloca i1
  %8 = alloca i1
  %9 = load i32, i32* @x.26
  %10 = load i32, i32* @y.27
  %11 = sub i32 0, 1
  %12 = add i32 %9, %11
  %13 = sub i32 %9, 1
  %14 = mul i32 %9, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %8
  %17 = icmp slt i32 %10, 10
  store i1 %17, i1* %7
  %18 = alloca i32
  store i32 -1163153622, i32* %18
  br label %19

; <label>:19:                                     ; preds = %2, %155
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 -1163153622, label %22
    i32 684646648, label %30
    i32 -917566362, label %54
    i32 688701034, label %57
    i32 -1159200785, label %61
    i32 -771324594, label %88
    i32 643550885, label %113
    i32 -1066658261, label %114
    i32 1939323568, label %117
    i32 969359273, label %123
  ]

; <label>:21:                                     ; preds = %19
  br label %155

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %8
  %24 = load volatile i1, i1* %7
  %25 = and i1 %23, %24
  %26 = xor i1 %23, %24
  %27 = or i1 %25, %26
  %28 = or i1 %23, %24
  %29 = select i1 %27, i32 684646648, i32 1939323568
  store i32 %29, i32* %18
  br label %155

; <label>:30:                                     ; preds = %19
  %31 = alloca i64, align 8
  store i64* %31, i64** %6
  %32 = alloca i64, align 8
  store i64* %32, i64** %5
  %33 = alloca i64, align 8
  store i64* %33, i64** %4
  %34 = load volatile i64*, i64** %5
  store i64 %0, i64* %34, align 8
  %35 = load volatile i64*, i64** %4
  store i64 %1, i64* %35, align 8
  %36 = load volatile i64*, i64** %4
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 0
  store i1 %38, i1* %3
  %39 = load i32, i32* @x.26
  %40 = load i32, i32* @y.27
  %41 = add i32 %39, 1128631620
  %42 = sub i32 %41, 1
  %43 = sub i32 %42, 1128631620
  %44 = sub i32 %39, 1
  %45 = mul i32 %39, %43
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %40, 10
  %49 = and i1 %47, %48
  %50 = xor i1 %47, %48
  %51 = or i1 %49, %50
  %52 = or i1 %47, %48
  %53 = select i1 %51, i32 -917566362, i32 1939323568
  store i32 %53, i32* %18
  br label %155

; <label>:54:                                     ; preds = %19
  %55 = load volatile i1, i1* %3
  %56 = select i1 %55, i32 688701034, i32 -1159200785
  store i32 %56, i32* %18
  br label %155

; <label>:57:                                     ; preds = %19
  %58 = load volatile i64*, i64** %5
  %59 = load i64, i64* %58, align 8
  %60 = load volatile i64*, i64** %6
  store i64 %59, i64* %60, align 8
  store i32 -1066658261, i32* %18
  br label %155

; <label>:61:                                     ; preds = %19
  %62 = load i32, i32* @x.26
  %63 = load i32, i32* @y.27
  %64 = sub i32 0, 1
  %65 = add i32 %62, %64
  %66 = sub i32 %62, 1
  %67 = mul i32 %62, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %63, 10
  %71 = xor i1 %69, true
  %72 = xor i1 %70, true
  %73 = xor i1 false, true
  %74 = and i1 %71, false
  %75 = and i1 %69, %73
  %76 = and i1 %72, false
  %77 = and i1 %70, %73
  %78 = or i1 %74, %75
  %79 = or i1 %76, %77
  %80 = xor i1 %78, %79
  %81 = or i1 %71, %72
  %82 = xor i1 %81, true
  %83 = or i1 false, %73
  %84 = and i1 %82, %83
  %85 = or i1 %80, %84
  %86 = or i1 %69, %70
  %87 = select i1 %85, i32 -771324594, i32 969359273
  store i32 %87, i32* %18
  br label %155

; <label>:88:                                     ; preds = %19
  %89 = load volatile i64*, i64** %4
  %90 = load i64, i64* %89, align 8
  %91 = load volatile i64*, i64** %5
  %92 = load i64, i64* %91, align 8
  %93 = load volatile i64*, i64** %4
  %94 = load i64, i64* %93, align 8
  %95 = srem i64 %92, %94
  %96 = call i64 @_Z3gcdxx(i64 %90, i64 %95)
  %97 = load volatile i64*, i64** %6
  store i64 %96, i64* %97, align 8
  %98 = load i32, i32* @x.26
  %99 = load i32, i32* @y.27
  %100 = add i32 %98, 1415087144
  %101 = sub i32 %100, 1
  %102 = sub i32 %101, 1415087144
  %103 = sub i32 %98, 1
  %104 = mul i32 %98, %102
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %99, 10
  %108 = and i1 %106, %107
  %109 = xor i1 %106, %107
  %110 = or i1 %108, %109
  %111 = or i1 %106, %107
  %112 = select i1 %110, i32 643550885, i32 969359273
  store i32 %112, i32* %18
  br label %155

; <label>:113:                                    ; preds = %19
  store i32 -1066658261, i32* %18
  br label %155

; <label>:114:                                    ; preds = %19
  %115 = load volatile i64*, i64** %6
  %116 = load i64, i64* %115, align 8
  ret i64 %116

; <label>:117:                                    ; preds = %19
  %118 = alloca i64, align 8
  %119 = alloca i64, align 8
  %120 = alloca i64, align 8
  store i64 %0, i64* %119, align 8
  store i64 %1, i64* %120, align 8
  %121 = load i64, i64* %120, align 8
  %122 = icmp eq i64 %121, 0
  store i32 684646648, i32* %18
  br label %155

; <label>:123:                                    ; preds = %19
  %124 = load volatile i64*, i64** %4
  %125 = load i64, i64* %124, align 8
  %126 = load volatile i64*, i64** %5
  %127 = load i64, i64* %126, align 8
  %128 = load volatile i64*, i64** %4
  %129 = load i64, i64* %128, align 8
  %130 = shl i64 %127, %129
  %131 = sub i64 %127, 4356085081146976694
  %132 = sub i64 %131, %129
  %133 = add i64 %132, 4356085081146976694
  %134 = sub i64 %127, %129
  %135 = mul i64 %133, %129
  %136 = shl i64 %127, %129
  %137 = sub i64 0, %127
  %138 = add i64 0, %137
  %139 = sub i64 0, %127
  %140 = sub i64 0, %138
  %141 = sub i64 0, %129
  %142 = add i64 %140, %141
  %143 = sub i64 0, %142
  %144 = add i64 %138, %129
  %145 = sub i64 0, -7598915075658475196
  %146 = sub i64 %145, %127
  %147 = add i64 %146, -7598915075658475196
  %148 = sub i64 0, %127
  %149 = sub i64 0, %129
  %150 = sub i64 %147, %149
  %151 = add i64 %147, %129
  %152 = srem i64 %127, %129
  %153 = call i64 @_Z3gcdxx(i64 %125, i64 %152)
  %154 = load volatile i64*, i64** %6
  store i64 %153, i64* %154, align 8
  store i32 -771324594, i32* %18
  br label %155

; <label>:155:                                    ; preds = %123, %117, %113, %88, %61, %57, %54, %30, %22, %21
  br label %19
}

; Function Attrs: noinline uwtable
define i64 @_Z3lcmxx(i64, i64) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = load i64, i64* %4, align 8
  %8 = call i64 @_Z3gcdxx(i64 %6, i64 %7)
  %9 = sdiv i64 %5, %8
  %10 = load i64, i64* %4, align 8
  %11 = mul nsw i64 %9, %10
  ret i64 %11
}

; Function Attrs: noinline nounwind uwtable
define zeroext i1 @_Z5primex(i64) #4 {
  %2 = alloca i1
  %3 = alloca i64*
  %4 = alloca i64*
  %5 = alloca i1*
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.30
  %9 = load i32, i32* @y.31
  %10 = add i32 %8, 2104698682
  %11 = sub i32 %10, 1
  %12 = sub i32 %11, 2104698682
  %13 = sub i32 %8, 1
  %14 = mul i32 %8, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %7
  %17 = icmp slt i32 %9, 10
  store i1 %17, i1* %6
  %18 = alloca i32
  store i32 -1947532315, i32* %18
  br label %19

; <label>:19:                                     ; preds = %1, %112
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 -1947532315, label %22
    i32 -593132669, label %42
    i32 1742118445, label %65
    i32 1678032389, label %68
    i32 -787630089, label %70
    i32 1903671930, label %72
    i32 -1350682988, label %82
    i32 -757496730, label %90
    i32 -1392439367, label %92
    i32 -1593526822, label %93
    i32 -70022778, label %101
    i32 -351504016, label %103
    i32 -390958995, label %106
  ]

; <label>:21:                                     ; preds = %19
  br label %112

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %7
  %24 = load volatile i1, i1* %6
  %25 = xor i1 %23, true
  %26 = xor i1 %24, true
  %27 = xor i1 true, true
  %28 = and i1 %25, true
  %29 = and i1 %23, %27
  %30 = and i1 %26, true
  %31 = and i1 %24, %27
  %32 = or i1 %28, %29
  %33 = or i1 %30, %31
  %34 = xor i1 %32, %33
  %35 = or i1 %25, %26
  %36 = xor i1 %35, true
  %37 = or i1 true, %27
  %38 = and i1 %36, %37
  %39 = or i1 %34, %38
  %40 = or i1 %23, %24
  %41 = select i1 %39, i32 -593132669, i32 -390958995
  store i32 %41, i32* %18
  br label %112

; <label>:42:                                     ; preds = %19
  %43 = alloca i1, align 1
  store i1* %43, i1** %5
  %44 = alloca i64, align 8
  store i64* %44, i64** %4
  %45 = alloca i64, align 8
  store i64* %45, i64** %3
  %46 = load volatile i64*, i64** %4
  store i64 %0, i64* %46, align 8
  %47 = load volatile i64*, i64** %4
  %48 = load i64, i64* %47, align 8
  %49 = icmp eq i64 %48, 1
  store i1 %49, i1* %2
  %50 = load i32, i32* @x.30
  %51 = load i32, i32* @y.31
  %52 = add i32 %50, 662554550
  %53 = sub i32 %52, 1
  %54 = sub i32 %53, 662554550
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = and i1 %58, %59
  %61 = xor i1 %58, %59
  %62 = or i1 %60, %61
  %63 = or i1 %58, %59
  %64 = select i1 %62, i32 1742118445, i32 -390958995
  store i32 %64, i32* %18
  br label %112

; <label>:65:                                     ; preds = %19
  %66 = load volatile i1, i1* %2
  %67 = select i1 %66, i32 1678032389, i32 -787630089
  store i32 %67, i32* %18
  br label %112

; <label>:68:                                     ; preds = %19
  %69 = load volatile i1*, i1** %5
  store i1 false, i1* %69, align 1
  store i32 -351504016, i32* %18
  br label %112

; <label>:70:                                     ; preds = %19
  %71 = load volatile i64*, i64** %3
  store i64 2, i64* %71, align 8
  store i32 1903671930, i32* %18
  br label %112

; <label>:72:                                     ; preds = %19
  %73 = load volatile i64*, i64** %3
  %74 = load i64, i64* %73, align 8
  %75 = load volatile i64*, i64** %3
  %76 = load i64, i64* %75, align 8
  %77 = mul nsw i64 %74, %76
  %78 = load volatile i64*, i64** %4
  %79 = load i64, i64* %78, align 8
  %80 = icmp sle i64 %77, %79
  %81 = select i1 %80, i32 -1350682988, i32 -70022778
  store i32 %81, i32* %18
  br label %112

; <label>:82:                                     ; preds = %19
  %83 = load volatile i64*, i64** %4
  %84 = load i64, i64* %83, align 8
  %85 = load volatile i64*, i64** %3
  %86 = load i64, i64* %85, align 8
  %87 = srem i64 %84, %86
  %88 = icmp eq i64 %87, 0
  %89 = select i1 %88, i32 -757496730, i32 -1392439367
  store i32 %89, i32* %18
  br label %112

; <label>:90:                                     ; preds = %19
  %91 = load volatile i1*, i1** %5
  store i1 false, i1* %91, align 1
  store i32 -351504016, i32* %18
  br label %112

; <label>:92:                                     ; preds = %19
  store i32 -1593526822, i32* %18
  br label %112

; <label>:93:                                     ; preds = %19
  %94 = load volatile i64*, i64** %3
  %95 = load i64, i64* %94, align 8
  %96 = sub i64 %95, 4910305269348941753
  %97 = add i64 %96, 1
  %98 = add i64 %97, 4910305269348941753
  %99 = add nsw i64 %95, 1
  %100 = load volatile i64*, i64** %3
  store i64 %98, i64* %100, align 8
  store i32 1903671930, i32* %18
  br label %112

; <label>:101:                                    ; preds = %19
  %102 = load volatile i1*, i1** %5
  store i1 true, i1* %102, align 1
  store i32 -351504016, i32* %18
  br label %112

; <label>:103:                                    ; preds = %19
  %104 = load volatile i1*, i1** %5
  %105 = load i1, i1* %104, align 1
  ret i1 %105

; <label>:106:                                    ; preds = %19
  %107 = alloca i1, align 1
  %108 = alloca i64, align 8
  %109 = alloca i64, align 8
  store i64 %0, i64* %108, align 8
  %110 = load i64, i64* %108, align 8
  %111 = icmp eq i64 %110, 1
  store i32 -593132669, i32* %18
  br label %112

; <label>:112:                                    ; preds = %106, %101, %93, %92, %90, %82, %72, %70, %68, %65, %42, %22, %21
  br label %19
}

; Function Attrs: noinline uwtable
define i64 @_Z6modpowxx(i64, i64) #0 {
  %3 = alloca i64
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  store i64 %1, i64* %6, align 8
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %3
  %9 = alloca i32
  store i32 -1617810316, i32* %9
  br label %10

; <label>:10:                                     ; preds = %2, %149
  %11 = load i32, i32* %9
  switch i32 %11, label %12 [
    i32 -1617810316, label %13
    i32 78028041, label %17
    i32 -472133692, label %18
    i32 1262250981, label %23
    i32 -1130696392, label %38
    i32 -169652161, label %64
    i32 -978209487, label %65
    i32 -1086632651, label %74
    i32 1416292526, label %76
  ]

; <label>:12:                                     ; preds = %10
  br label %149

; <label>:13:                                     ; preds = %10
  %14 = load volatile i64, i64* %3
  %15 = icmp eq i64 %14, 0
  %16 = select i1 %15, i32 78028041, i32 -472133692
  store i32 %16, i32* %9
  br label %149

; <label>:17:                                     ; preds = %10
  store i64 1, i64* %4, align 8
  store i32 -1086632651, i32* %9
  br label %149

; <label>:18:                                     ; preds = %10
  %19 = load i64, i64* %6, align 8
  %20 = srem i64 %19, 2
  %21 = icmp ne i64 %20, 0
  %22 = select i1 %21, i32 1262250981, i32 -978209487
  store i32 %22, i32* %9
  br label %149

; <label>:23:                                     ; preds = %10
  %24 = load i32, i32* @x.32
  %25 = load i32, i32* @y.33
  %26 = sub i32 0, 1
  %27 = add i32 %24, %26
  %28 = sub i32 %24, 1
  %29 = mul i32 %24, %27
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %25, 10
  %33 = and i1 %31, %32
  %34 = xor i1 %31, %32
  %35 = or i1 %33, %34
  %36 = or i1 %31, %32
  %37 = select i1 %35, i32 -1130696392, i32 1416292526
  store i32 %37, i32* %9
  br label %149

; <label>:38:                                     ; preds = %10
  %39 = load i64, i64* %5, align 8
  %40 = load i64, i64* %6, align 8
  %41 = sub i64 %40, 6652338887859266299
  %42 = sub i64 %41, 1
  %43 = add i64 %42, 6652338887859266299
  %44 = sub nsw i64 %40, 1
  %45 = call i64 @_Z6modpowxx(i64 %39, i64 %43)
  %46 = load i64, i64* %5, align 8
  %47 = mul nsw i64 %45, %46
  %48 = srem i64 %47, 1000000007
  store i64 %48, i64* %4, align 8
  %49 = load i32, i32* @x.32
  %50 = load i32, i32* @y.33
  %51 = sub i32 %49, -353672258
  %52 = sub i32 %51, 1
  %53 = add i32 %52, -353672258
  %54 = sub i32 %49, 1
  %55 = mul i32 %49, %53
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %50, 10
  %59 = and i1 %57, %58
  %60 = xor i1 %57, %58
  %61 = or i1 %59, %60
  %62 = or i1 %57, %58
  %63 = select i1 %61, i32 -169652161, i32 1416292526
  store i32 %63, i32* %9
  br label %149

; <label>:64:                                     ; preds = %10
  store i32 -1086632651, i32* %9
  br label %149

; <label>:65:                                     ; preds = %10
  %66 = load i64, i64* %5, align 8
  %67 = load i64, i64* %6, align 8
  %68 = sdiv i64 %67, 2
  %69 = call i64 @_Z6modpowxx(i64 %66, i64 %68)
  store i64 %69, i64* %7, align 8
  %70 = load i64, i64* %7, align 8
  %71 = load i64, i64* %7, align 8
  %72 = mul nsw i64 %70, %71
  %73 = srem i64 %72, 1000000007
  store i64 %73, i64* %4, align 8
  store i32 -1086632651, i32* %9
  br label %149

; <label>:74:                                     ; preds = %10
  %75 = load i64, i64* %4, align 8
  ret i64 %75

; <label>:76:                                     ; preds = %10
  %77 = load i64, i64* %5, align 8
  %78 = load i64, i64* %6, align 8
  %79 = add i64 %78, 7395814199019239087
  %80 = sub i64 %79, 1
  %81 = sub i64 %80, 7395814199019239087
  %82 = sub i64 %78, 1
  %83 = mul i64 %81, 1
  %84 = shl i64 %78, 1
  %85 = sub i64 0, 1
  %86 = add i64 %78, %85
  %87 = sub i64 %78, 1
  %88 = mul i64 %86, 1
  %89 = sub i64 0, %78
  %90 = add i64 0, %89
  %91 = sub i64 0, %78
  %92 = sub i64 0, %90
  %93 = sub i64 0, 1
  %94 = add i64 %92, %93
  %95 = sub i64 0, %94
  %96 = add i64 %90, 1
  %97 = sub i64 0, 6483065706263047588
  %98 = sub i64 %97, %78
  %99 = add i64 %98, 6483065706263047588
  %100 = sub i64 0, %78
  %101 = add i64 %99, 2425154243130882238
  %102 = add i64 %101, 1
  %103 = sub i64 %102, 2425154243130882238
  %104 = add i64 %99, 1
  %105 = sub i64 0, 1
  %106 = add i64 %78, %105
  %107 = sub nsw i64 %78, 1
  %108 = call i64 @_Z6modpowxx(i64 %77, i64 %106)
  %109 = load i64, i64* %5, align 8
  %110 = sub i64 0, %109
  %111 = add i64 %108, %110
  %112 = sub i64 %108, %109
  %113 = mul i64 %111, %109
  %114 = add i64 0, 8803392717168574779
  %115 = sub i64 %114, %108
  %116 = sub i64 %115, 8803392717168574779
  %117 = sub i64 0, %108
  %118 = sub i64 0, %116
  %119 = sub i64 0, %109
  %120 = add i64 %118, %119
  %121 = sub i64 0, %120
  %122 = add i64 %116, %109
  %123 = sub i64 0, %108
  %124 = add i64 0, %123
  %125 = sub i64 0, %108
  %126 = add i64 %124, -8475072697130380394
  %127 = add i64 %126, %109
  %128 = sub i64 %127, -8475072697130380394
  %129 = add i64 %124, %109
  %130 = shl i64 %108, %109
  %131 = sub i64 %108, 7597158240301341033
  %132 = sub i64 %131, %109
  %133 = add i64 %132, 7597158240301341033
  %134 = sub i64 %108, %109
  %135 = mul i64 %133, %109
  %136 = mul nsw i64 %108, %109
  %137 = shl i64 %136, 1000000007
  %138 = sub i64 0, 1000000007
  %139 = add i64 %136, %138
  %140 = sub i64 %136, 1000000007
  %141 = mul i64 %139, 1000000007
  %142 = sub i64 %136, -6232978303320329867
  %143 = sub i64 %142, 1000000007
  %144 = add i64 %143, -6232978303320329867
  %145 = sub i64 %136, 1000000007
  %146 = mul i64 %144, 1000000007
  %147 = shl i64 %136, 1000000007
  %148 = srem i64 %136, 1000000007
  store i64 %148, i64* %4, align 8
  store i32 -1130696392, i32* %9
  br label %149

; <label>:149:                                    ; preds = %76, %65, %64, %38, %23, %18, %17, %13, %12
  br label %10
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.2() #0 section ".text.startup" {
  call void @_ZNSt6vectorIxSaIxEEC2Ev(%"class.std::vector"* @kaijo) #3
  %1 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector"*)* @_ZNSt6vectorIxSaIxEED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector"* @kaijo to i8*), i8* @__dso_handle) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEEC2Ev(%"class.std::vector"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = load i32, i32* @x.36
  %3 = load i32, i32* @y.37
  %4 = sub i32 0, 1
  %5 = add i32 %2, %4
  %6 = sub i32 %2, 1
  %7 = mul i32 %2, %5
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %3, 10
  %11 = and i1 %9, %10
  %12 = xor i1 %9, %10
  %13 = or i1 %11, %12
  %14 = or i1 %9, %10
  br i1 %13, label %15, label %50

; <label>:15:                                     ; preds = %1, %50
  %16 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %16, align 8
  %17 = load %"class.std::vector"*, %"class.std::vector"** %16, align 8
  %18 = bitcast %"class.std::vector"* %17 to %"struct.std::_Vector_base"*
  %19 = load i32, i32* @x.36
  %20 = load i32, i32* @y.37
  %21 = sub i32 %19, -1170772667
  %22 = sub i32 %21, 1
  %23 = add i32 %22, -1170772667
  %24 = sub i32 %19, 1
  %25 = mul i32 %19, %23
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %20, 10
  %29 = xor i1 %27, true
  %30 = xor i1 %28, true
  %31 = xor i1 true, true
  %32 = and i1 %29, true
  %33 = and i1 %27, %31
  %34 = and i1 %30, true
  %35 = and i1 %28, %31
  %36 = or i1 %32, %33
  %37 = or i1 %34, %35
  %38 = xor i1 %36, %37
  %39 = or i1 %29, %30
  %40 = xor i1 %39, true
  %41 = or i1 true, %31
  %42 = and i1 %40, %41
  %43 = or i1 %38, %42
  %44 = or i1 %27, %28
  br i1 %43, label %45, label %50

; <label>:45:                                     ; preds = %15
  invoke void @_ZNSt12_Vector_baseIxSaIxEEC2Ev(%"struct.std::_Vector_base"* %18)
          to label %46 unwind label %47

; <label>:46:                                     ; preds = %45
  ret void

; <label>:47:                                     ; preds = %45
  %48 = landingpad { i8*, i32 }
          catch i8* null
  %49 = extractvalue { i8*, i32 } %48, 0
  call void @__clang_call_terminate(i8* %49) #13
  unreachable

; <label>:50:                                     ; preds = %15, %1
  %51 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %51, align 8
  %52 = load %"class.std::vector"*, %"class.std::vector"** %51, align 8
  %53 = bitcast %"class.std::vector"* %52 to %"struct.std::_Vector_base"*
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEED2Ev(%"class.std::vector"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::vector"*, align 8
  %3 = alloca i8*
  %4 = alloca i32
  store %"class.std::vector"* %0, %"class.std::vector"** %2, align 8
  %5 = load %"class.std::vector"*, %"class.std::vector"** %2, align 8
  %6 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %7 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %6, i32 0, i32 0
  %8 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %7, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %11 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %10, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %11, i32 0, i32 1
  %13 = load i64*, i64** %12, align 8
  %14 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %15 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %14) #3
  invoke void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %9, i64* %13, %"class.std::allocator.1"* dereferenceable(1) %15)
          to label %16 unwind label %18

; <label>:16:                                     ; preds = %1
  %17 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  call void @_ZNSt12_Vector_baseIxSaIxEED2Ev(%"struct.std::_Vector_base"* %17) #3
  ret void

; <label>:18:                                     ; preds = %1
  %19 = landingpad { i8*, i32 }
          catch i8* null
  %20 = extractvalue { i8*, i32 } %19, 0
  store i8* %20, i8** %3, align 8
  %21 = extractvalue { i8*, i32 } %19, 1
  store i32 %21, i32* %4, align 4
  %22 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  call void @_ZNSt12_Vector_baseIxSaIxEED2Ev(%"struct.std::_Vector_base"* %22) #3
  br label %23

; <label>:23:                                     ; preds = %18
  %24 = load i32, i32* @x.38
  %25 = load i32, i32* @y.39
  %26 = sub i32 0, 1
  %27 = add i32 %24, %26
  %28 = sub i32 %24, 1
  %29 = mul i32 %24, %27
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %25, 10
  %33 = and i1 %31, %32
  %34 = xor i1 %31, %32
  %35 = or i1 %33, %34
  %36 = or i1 %31, %32
  br i1 %35, label %37, label %66

; <label>:37:                                     ; preds = %23, %66
  %38 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %38) #13
  %39 = load i32, i32* @x.38
  %40 = load i32, i32* @y.39
  %41 = sub i32 %39, -1629075162
  %42 = sub i32 %41, 1
  %43 = add i32 %42, -1629075162
  %44 = sub i32 %39, 1
  %45 = mul i32 %39, %43
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %40, 10
  %49 = xor i1 %47, true
  %50 = xor i1 %48, true
  %51 = xor i1 true, true
  %52 = and i1 %49, true
  %53 = and i1 %47, %51
  %54 = and i1 %50, true
  %55 = and i1 %48, %51
  %56 = or i1 %52, %53
  %57 = or i1 %54, %55
  %58 = xor i1 %56, %57
  %59 = or i1 %49, %50
  %60 = xor i1 %59, true
  %61 = or i1 true, %51
  %62 = and i1 %60, %61
  %63 = or i1 %58, %62
  %64 = or i1 %47, %48
  br i1 %63, label %65, label %66

; <label>:65:                                     ; preds = %37
  unreachable

; <label>:66:                                     ; preds = %37, %23
  %67 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %67) #13
  br label %37
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.3() #0 section ".text.startup" {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.40
  %4 = load i32, i32* @y.41
  %5 = sub i32 0, 1
  %6 = add i32 %3, %5
  %7 = sub i32 %3, 1
  %8 = mul i32 %3, %6
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %2
  %11 = icmp slt i32 %4, 10
  store i1 %11, i1* %1
  %12 = alloca i32
  store i32 -1268676047, i32* %12
  br label %13

; <label>:13:                                     ; preds = %0, %56
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 -1268676047, label %16
    i32 1458053665, label %24
    i32 -1910728475, label %53
    i32 2068862796, label %54
  ]

; <label>:15:                                     ; preds = %13
  br label %56

; <label>:16:                                     ; preds = %13
  %17 = load volatile i1, i1* %2
  %18 = load volatile i1, i1* %1
  %19 = and i1 %17, %18
  %20 = xor i1 %17, %18
  %21 = or i1 %19, %20
  %22 = or i1 %17, %18
  %23 = select i1 %21, i32 1458053665, i32 2068862796
  store i32 %23, i32* %12
  br label %56

; <label>:24:                                     ; preds = %13
  call void @_ZNSt6vectorIxSaIxEEC2Ev(%"class.std::vector"* @invkaijo) #3
  %25 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector"*)* @_ZNSt6vectorIxSaIxEED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector"* @invkaijo to i8*), i8* @__dso_handle) #3
  %26 = load i32, i32* @x.40
  %27 = load i32, i32* @y.41
  %28 = sub i32 %26, -1248807884
  %29 = sub i32 %28, 1
  %30 = add i32 %29, -1248807884
  %31 = sub i32 %26, 1
  %32 = mul i32 %26, %30
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %27, 10
  %36 = xor i1 %34, true
  %37 = xor i1 %35, true
  %38 = xor i1 false, true
  %39 = and i1 %36, false
  %40 = and i1 %34, %38
  %41 = and i1 %37, false
  %42 = and i1 %35, %38
  %43 = or i1 %39, %40
  %44 = or i1 %41, %42
  %45 = xor i1 %43, %44
  %46 = or i1 %36, %37
  %47 = xor i1 %46, true
  %48 = or i1 false, %38
  %49 = and i1 %47, %48
  %50 = or i1 %45, %49
  %51 = or i1 %34, %35
  %52 = select i1 %50, i32 -1910728475, i32 2068862796
  store i32 %52, i32* %12
  br label %56

; <label>:53:                                     ; preds = %13
  ret void

; <label>:54:                                     ; preds = %13
  call void @_ZNSt6vectorIxSaIxEEC2Ev(%"class.std::vector"* @invkaijo) #3
  %55 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector"*)* @_ZNSt6vectorIxSaIxEED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector"* @invkaijo to i8*), i8* @__dso_handle) #3
  store i32 1458053665, i32* %12
  br label %56

; <label>:56:                                     ; preds = %54, %24, %16, %15
  br label %13
}

; Function Attrs: noinline uwtable
define void @_Z9init_factx(i64) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = sub i64 %5, -5831740752819984628
  %7 = add i64 %6, 1
  %8 = add i64 %7, -5831740752819984628
  %9 = add nsw i64 %5, 1
  call void @_ZNSt6vectorIxSaIxEE6resizeEm(%"class.std::vector"* @kaijo, i64 %8)
  %10 = load i64, i64* %2, align 8
  %11 = sub i64 0, %10
  %12 = sub i64 0, 1
  %13 = add i64 %11, %12
  %14 = sub i64 0, %13
  %15 = add nsw i64 %10, 1
  call void @_ZNSt6vectorIxSaIxEE6resizeEm(%"class.std::vector"* @invkaijo, i64 %14)
  %16 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @kaijo, i64 0) #3
  store i64 1, i64* %16, align 8
  store i64 1, i64* %3, align 8
  %17 = alloca i32
  store i32 1519722516, i32* %17
  br label %18

; <label>:18:                                     ; preds = %1, %102
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 1519722516, label %21
    i32 -1396421026, label %26
    i32 601363127, label %42
    i32 549390558, label %47
    i32 -1136371063, label %48
    i32 -704905556, label %57
    i32 1866211356, label %64
    i32 -938637762, label %70
    i32 -711524841, label %85
    i32 1739564885, label %100
    i32 688991292, label %101
  ]

; <label>:20:                                     ; preds = %18
  br label %102

; <label>:21:                                     ; preds = %18
  %22 = load i64, i64* %3, align 8
  %23 = load i64, i64* %2, align 8
  %24 = icmp sle i64 %22, %23
  %25 = select i1 %24, i32 -1396421026, i32 549390558
  store i32 %25, i32* %17
  br label %102

; <label>:26:                                     ; preds = %18
  %27 = load i64, i64* %3, align 8
  %28 = add i64 %27, 2981261539390512147
  %29 = sub i64 %28, 1
  %30 = sub i64 %29, 2981261539390512147
  %31 = sub nsw i64 %27, 1
  %32 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @kaijo, i64 %30) #3
  %33 = load i64, i64* %32, align 8
  %34 = load i64, i64* %3, align 8
  %35 = mul nsw i64 %33, %34
  %36 = load i64, i64* %3, align 8
  %37 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @kaijo, i64 %36) #3
  store i64 %35, i64* %37, align 8
  %38 = load i64, i64* %3, align 8
  %39 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @kaijo, i64 %38) #3
  %40 = load i64, i64* %39, align 8
  %41 = srem i64 %40, 1000000007
  store i64 %41, i64* %39, align 8
  store i32 601363127, i32* %17
  br label %102

; <label>:42:                                     ; preds = %18
  %43 = load i64, i64* %3, align 8
  %44 = sub i64 0, 1
  %45 = sub i64 %43, %44
  %46 = add nsw i64 %43, 1
  store i64 %45, i64* %3, align 8
  store i32 1519722516, i32* %17
  br label %102

; <label>:47:                                     ; preds = %18
  store i64 0, i64* %4, align 8
  store i32 -1136371063, i32* %17
  br label %102

; <label>:48:                                     ; preds = %18
  %49 = load i64, i64* %4, align 8
  %50 = load i64, i64* %2, align 8
  %51 = sub i64 %50, -5009075114515919475
  %52 = add i64 %51, 1
  %53 = add i64 %52, -5009075114515919475
  %54 = add nsw i64 %50, 1
  %55 = icmp slt i64 %49, %53
  %56 = select i1 %55, i32 -704905556, i32 -938637762
  store i32 %56, i32* %17
  br label %102

; <label>:57:                                     ; preds = %18
  %58 = load i64, i64* %4, align 8
  %59 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @kaijo, i64 %58) #3
  %60 = load i64, i64* %59, align 8
  %61 = call i64 @_Z6modpowxx(i64 %60, i64 1000000005)
  %62 = load i64, i64* %4, align 8
  %63 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @invkaijo, i64 %62) #3
  store i64 %61, i64* %63, align 8
  store i32 1866211356, i32* %17
  br label %102

; <label>:64:                                     ; preds = %18
  %65 = load i64, i64* %4, align 8
  %66 = sub i64 %65, 1427341504289444474
  %67 = add i64 %66, 1
  %68 = add i64 %67, 1427341504289444474
  %69 = add nsw i64 %65, 1
  store i64 %68, i64* %4, align 8
  store i32 -1136371063, i32* %17
  br label %102

; <label>:70:                                     ; preds = %18
  %71 = load i32, i32* @x.42
  %72 = load i32, i32* @y.43
  %73 = sub i32 0, 1
  %74 = add i32 %71, %73
  %75 = sub i32 %71, 1
  %76 = mul i32 %71, %74
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %72, 10
  %80 = and i1 %78, %79
  %81 = xor i1 %78, %79
  %82 = or i1 %80, %81
  %83 = or i1 %78, %79
  %84 = select i1 %82, i32 -711524841, i32 688991292
  store i32 %84, i32* %17
  br label %102

; <label>:85:                                     ; preds = %18
  %86 = load i32, i32* @x.42
  %87 = load i32, i32* @y.43
  %88 = sub i32 0, 1
  %89 = add i32 %86, %88
  %90 = sub i32 %86, 1
  %91 = mul i32 %86, %89
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %87, 10
  %95 = and i1 %93, %94
  %96 = xor i1 %93, %94
  %97 = or i1 %95, %96
  %98 = or i1 %93, %94
  %99 = select i1 %97, i32 1739564885, i32 688991292
  store i32 %99, i32* %17
  br label %102

; <label>:100:                                    ; preds = %18
  ret void

; <label>:101:                                    ; preds = %18
  store i32 -711524841, i32* %17
  br label %102

; <label>:102:                                    ; preds = %101, %85, %70, %64, %57, %48, %47, %42, %26, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE6resizeEm(%"class.std::vector"*, i64) #0 comdat align 2 {
  %3 = alloca i1
  %4 = alloca %"class.std::vector"*
  %5 = alloca i64*
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.44
  %9 = load i32, i32* @y.45
  %10 = sub i32 0, 1
  %11 = add i32 %8, %10
  %12 = sub i32 %8, 1
  %13 = mul i32 %8, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %7
  %16 = icmp slt i32 %9, 10
  store i1 %16, i1* %6
  %17 = alloca i32
  store i32 -1208468623, i32* %17
  br label %18

; <label>:18:                                     ; preds = %2, %198
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -1208468623, label %21
    i32 845622346, label %29
    i32 -495142917, label %66
    i32 889744240, label %69
    i32 1808657598, label %85
    i32 -1298337677, label %122
    i32 -347625919, label %123
    i32 -702143269, label %130
    i32 -1670261206, label %140
    i32 1916564375, label %141
    i32 -1161974411, label %142
    i32 -2072776288, label %149
  ]

; <label>:20:                                     ; preds = %18
  br label %198

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %7
  %23 = load volatile i1, i1* %6
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  %28 = select i1 %26, i32 845622346, i32 -1161974411
  store i32 %28, i32* %17
  br label %198

; <label>:29:                                     ; preds = %18
  %30 = alloca %"class.std::vector"*, align 8
  %31 = alloca i64, align 8
  store i64* %31, i64** %5
  store %"class.std::vector"* %0, %"class.std::vector"** %30, align 8
  %32 = load volatile i64*, i64** %5
  store i64 %1, i64* %32, align 8
  %33 = load %"class.std::vector"*, %"class.std::vector"** %30, align 8
  store %"class.std::vector"* %33, %"class.std::vector"** %4
  %34 = load volatile i64*, i64** %5
  %35 = load i64, i64* %34, align 8
  %36 = load volatile %"class.std::vector"*, %"class.std::vector"** %4
  %37 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %36) #3
  %38 = icmp ugt i64 %35, %37
  store i1 %38, i1* %3
  %39 = load i32, i32* @x.44
  %40 = load i32, i32* @y.45
  %41 = add i32 %39, 566465277
  %42 = sub i32 %41, 1
  %43 = sub i32 %42, 566465277
  %44 = sub i32 %39, 1
  %45 = mul i32 %39, %43
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %40, 10
  %49 = xor i1 %47, true
  %50 = xor i1 %48, true
  %51 = xor i1 true, true
  %52 = and i1 %49, true
  %53 = and i1 %47, %51
  %54 = and i1 %50, true
  %55 = and i1 %48, %51
  %56 = or i1 %52, %53
  %57 = or i1 %54, %55
  %58 = xor i1 %56, %57
  %59 = or i1 %49, %50
  %60 = xor i1 %59, true
  %61 = or i1 true, %51
  %62 = and i1 %60, %61
  %63 = or i1 %58, %62
  %64 = or i1 %47, %48
  %65 = select i1 %63, i32 -495142917, i32 -1161974411
  store i32 %65, i32* %17
  br label %198

; <label>:66:                                     ; preds = %18
  %67 = load volatile i1, i1* %3
  %68 = select i1 %67, i32 889744240, i32 -347625919
  store i32 %68, i32* %17
  br label %198

; <label>:69:                                     ; preds = %18
  %70 = load i32, i32* @x.44
  %71 = load i32, i32* @y.45
  %72 = sub i32 %70, -2037083505
  %73 = sub i32 %72, 1
  %74 = add i32 %73, -2037083505
  %75 = sub i32 %70, 1
  %76 = mul i32 %70, %74
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %71, 10
  %80 = and i1 %78, %79
  %81 = xor i1 %78, %79
  %82 = or i1 %80, %81
  %83 = or i1 %78, %79
  %84 = select i1 %82, i32 1808657598, i32 -2072776288
  store i32 %84, i32* %17
  br label %198

; <label>:85:                                     ; preds = %18
  %86 = load volatile i64*, i64** %5
  %87 = load i64, i64* %86, align 8
  %88 = load volatile %"class.std::vector"*, %"class.std::vector"** %4
  %89 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %88) #3
  %90 = add i64 %87, 3271707680991617097
  %91 = sub i64 %90, %89
  %92 = sub i64 %91, 3271707680991617097
  %93 = sub i64 %87, %89
  %94 = load volatile %"class.std::vector"*, %"class.std::vector"** %4
  call void @_ZNSt6vectorIxSaIxEE17_M_default_appendEm(%"class.std::vector"* %94, i64 %92)
  %95 = load i32, i32* @x.44
  %96 = load i32, i32* @y.45
  %97 = add i32 %95, -1913541961
  %98 = sub i32 %97, 1
  %99 = sub i32 %98, -1913541961
  %100 = sub i32 %95, 1
  %101 = mul i32 %95, %99
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %96, 10
  %105 = xor i1 %103, true
  %106 = xor i1 %104, true
  %107 = xor i1 true, true
  %108 = and i1 %105, true
  %109 = and i1 %103, %107
  %110 = and i1 %106, true
  %111 = and i1 %104, %107
  %112 = or i1 %108, %109
  %113 = or i1 %110, %111
  %114 = xor i1 %112, %113
  %115 = or i1 %105, %106
  %116 = xor i1 %115, true
  %117 = or i1 true, %107
  %118 = and i1 %116, %117
  %119 = or i1 %114, %118
  %120 = or i1 %103, %104
  %121 = select i1 %119, i32 -1298337677, i32 -2072776288
  store i32 %121, i32* %17
  br label %198

; <label>:122:                                    ; preds = %18
  store i32 1916564375, i32* %17
  br label %198

; <label>:123:                                    ; preds = %18
  %124 = load volatile i64*, i64** %5
  %125 = load i64, i64* %124, align 8
  %126 = load volatile %"class.std::vector"*, %"class.std::vector"** %4
  %127 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %126) #3
  %128 = icmp ult i64 %125, %127
  %129 = select i1 %128, i32 -702143269, i32 -1670261206
  store i32 %129, i32* %17
  br label %198

; <label>:130:                                    ; preds = %18
  %131 = load volatile %"class.std::vector"*, %"class.std::vector"** %4
  %132 = bitcast %"class.std::vector"* %131 to %"struct.std::_Vector_base"*
  %133 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %132, i32 0, i32 0
  %134 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %133, i32 0, i32 0
  %135 = load i64*, i64** %134, align 8
  %136 = load volatile i64*, i64** %5
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds i64, i64* %135, i64 %137
  %139 = load volatile %"class.std::vector"*, %"class.std::vector"** %4
  call void @_ZNSt6vectorIxSaIxEE15_M_erase_at_endEPx(%"class.std::vector"* %139, i64* %138) #3
  store i32 -1670261206, i32* %17
  br label %198

; <label>:140:                                    ; preds = %18
  store i32 1916564375, i32* %17
  br label %198

; <label>:141:                                    ; preds = %18
  ret void

; <label>:142:                                    ; preds = %18
  %143 = alloca %"class.std::vector"*, align 8
  %144 = alloca i64, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %143, align 8
  store i64 %1, i64* %144, align 8
  %145 = load %"class.std::vector"*, %"class.std::vector"** %143, align 8
  %146 = load i64, i64* %144, align 8
  %147 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %145) #3
  %148 = icmp ugt i64 %146, %147
  store i32 845622346, i32* %17
  br label %198

; <label>:149:                                    ; preds = %18
  %150 = load volatile i64*, i64** %5
  %151 = load i64, i64* %150, align 8
  %152 = load volatile %"class.std::vector"*, %"class.std::vector"** %4
  %153 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %152) #3
  %154 = add i64 0, 3506464932206068180
  %155 = sub i64 %154, %151
  %156 = sub i64 %155, 3506464932206068180
  %157 = sub i64 0, %151
  %158 = sub i64 0, %153
  %159 = sub i64 %156, %158
  %160 = add i64 %156, %153
  %161 = sub i64 0, 2792669175637952464
  %162 = sub i64 %161, %151
  %163 = add i64 %162, 2792669175637952464
  %164 = sub i64 0, %151
  %165 = sub i64 0, %153
  %166 = sub i64 %163, %165
  %167 = add i64 %163, %153
  %168 = add i64 %151, -1170997068116160804
  %169 = sub i64 %168, %153
  %170 = sub i64 %169, -1170997068116160804
  %171 = sub i64 %151, %153
  %172 = mul i64 %170, %153
  %173 = sub i64 0, %151
  %174 = add i64 0, %173
  %175 = sub i64 0, %151
  %176 = sub i64 %174, 4227553344083841365
  %177 = add i64 %176, %153
  %178 = add i64 %177, 4227553344083841365
  %179 = add i64 %174, %153
  %180 = add i64 %151, -482335216183409135
  %181 = sub i64 %180, %153
  %182 = sub i64 %181, -482335216183409135
  %183 = sub i64 %151, %153
  %184 = mul i64 %182, %153
  %185 = sub i64 0, -6763419665893139412
  %186 = sub i64 %185, %151
  %187 = add i64 %186, -6763419665893139412
  %188 = sub i64 0, %151
  %189 = add i64 %187, -2765572637609461841
  %190 = add i64 %189, %153
  %191 = sub i64 %190, -2765572637609461841
  %192 = add i64 %187, %153
  %193 = add i64 %151, 5685883406641714122
  %194 = sub i64 %193, %153
  %195 = sub i64 %194, 5685883406641714122
  %196 = sub i64 %151, %153
  %197 = load volatile %"class.std::vector"*, %"class.std::vector"** %4
  call void @_ZNSt6vectorIxSaIxEE17_M_default_appendEm(%"class.std::vector"* %197, i64 %195)
  store i32 1808657598, i32* %17
  br label %198

; <label>:198:                                    ; preds = %149, %142, %140, %130, %123, %122, %85, %69, %66, %29, %21, %20
  br label %18
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"*, i64) #4 comdat align 2 {
  %3 = alloca %"class.std::vector"*, align 8
  %4 = alloca i64, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %6 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %7 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %6, i32 0, i32 0
  %8 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %7, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %4, align 8
  %11 = getelementptr inbounds i64, i64* %9, i64 %10
  ret i64* %11
}

; Function Attrs: noinline nounwind uwtable
define i64 @_Z4combxx(i64, i64) #4 {
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %4
  %9 = load i64, i64* %7, align 8
  store i64 %9, i64* %3
  %10 = alloca i32
  store i32 825146522, i32* %10
  br label %11

; <label>:11:                                     ; preds = %2, %105
  %12 = load i32, i32* %10
  switch i32 %12, label %13 [
    i32 825146522, label %14
    i32 1963664694, label %19
    i32 -692863475, label %20
    i32 -495441335, label %24
    i32 -1041690232, label %28
    i32 12982828, label %55
    i32 161070460, label %82
    i32 -1586150122, label %83
    i32 -1124341352, label %102
    i32 -1070825196, label %104
  ]

; <label>:13:                                     ; preds = %11
  br label %105

; <label>:14:                                     ; preds = %11
  %15 = load volatile i64, i64* %4
  %16 = load volatile i64, i64* %3
  %17 = icmp slt i64 %15, %16
  %18 = select i1 %17, i32 1963664694, i32 -692863475
  store i32 %18, i32* %10
  br label %105

; <label>:19:                                     ; preds = %11
  store i64 0, i64* %5, align 8
  store i32 -1124341352, i32* %10
  br label %105

; <label>:20:                                     ; preds = %11
  %21 = load i64, i64* %6, align 8
  %22 = icmp slt i64 %21, 0
  %23 = select i1 %22, i32 -1041690232, i32 -495441335
  store i32 %23, i32* %10
  br label %105

; <label>:24:                                     ; preds = %11
  %25 = load i64, i64* %7, align 8
  %26 = icmp slt i64 %25, 0
  %27 = select i1 %26, i32 -1041690232, i32 -1586150122
  store i32 %27, i32* %10
  br label %105

; <label>:28:                                     ; preds = %11
  %29 = load i32, i32* @x.48
  %30 = load i32, i32* @y.49
  %31 = sub i32 0, 1
  %32 = add i32 %29, %31
  %33 = sub i32 %29, 1
  %34 = mul i32 %29, %32
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %30, 10
  %38 = xor i1 %36, true
  %39 = xor i1 %37, true
  %40 = xor i1 true, true
  %41 = and i1 %38, true
  %42 = and i1 %36, %40
  %43 = and i1 %39, true
  %44 = and i1 %37, %40
  %45 = or i1 %41, %42
  %46 = or i1 %43, %44
  %47 = xor i1 %45, %46
  %48 = or i1 %38, %39
  %49 = xor i1 %48, true
  %50 = or i1 true, %40
  %51 = and i1 %49, %50
  %52 = or i1 %47, %51
  %53 = or i1 %36, %37
  %54 = select i1 %52, i32 12982828, i32 -1070825196
  store i32 %54, i32* %10
  br label %105

; <label>:55:                                     ; preds = %11
  store i64 0, i64* %5, align 8
  %56 = load i32, i32* @x.48
  %57 = load i32, i32* @y.49
  %58 = sub i32 0, 1
  %59 = add i32 %56, %58
  %60 = sub i32 %56, 1
  %61 = mul i32 %56, %59
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %57, 10
  %65 = xor i1 %63, true
  %66 = xor i1 %64, true
  %67 = xor i1 false, true
  %68 = and i1 %65, false
  %69 = and i1 %63, %67
  %70 = and i1 %66, false
  %71 = and i1 %64, %67
  %72 = or i1 %68, %69
  %73 = or i1 %70, %71
  %74 = xor i1 %72, %73
  %75 = or i1 %65, %66
  %76 = xor i1 %75, true
  %77 = or i1 false, %67
  %78 = and i1 %76, %77
  %79 = or i1 %74, %78
  %80 = or i1 %63, %64
  %81 = select i1 %79, i32 161070460, i32 -1070825196
  store i32 %81, i32* %10
  br label %105

; <label>:82:                                     ; preds = %11
  store i32 -1124341352, i32* %10
  br label %105

; <label>:83:                                     ; preds = %11
  %84 = load i64, i64* %6, align 8
  %85 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @kaijo, i64 %84) #3
  %86 = load i64, i64* %85, align 8
  %87 = load i64, i64* %6, align 8
  %88 = load i64, i64* %7, align 8
  %89 = add i64 %87, 702608236126518225
  %90 = sub i64 %89, %88
  %91 = sub i64 %90, 702608236126518225
  %92 = sub nsw i64 %87, %88
  %93 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @invkaijo, i64 %91) #3
  %94 = load i64, i64* %93, align 8
  %95 = mul nsw i64 %86, %94
  %96 = srem i64 %95, 1000000007
  %97 = load i64, i64* %7, align 8
  %98 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @invkaijo, i64 %97) #3
  %99 = load i64, i64* %98, align 8
  %100 = mul nsw i64 %96, %99
  %101 = srem i64 %100, 1000000007
  store i64 %101, i64* %5, align 8
  store i32 -1124341352, i32* %10
  br label %105

; <label>:102:                                    ; preds = %11
  %103 = load i64, i64* %5, align 8
  ret i64 %103

; <label>:104:                                    ; preds = %11
  store i64 0, i64* %5, align 8
  store i32 12982828, i32* %10
  br label %105

; <label>:105:                                    ; preds = %104, %83, %82, %55, %28, %24, %20, %19, %14, %13
  br label %11
}

; Function Attrs: noinline uwtable
define i64 @_Z3invx(i64) #0 {
  %2 = alloca i64
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.50
  %6 = load i32, i32* @y.51
  %7 = sub i32 %5, 1830104225
  %8 = sub i32 %7, 1
  %9 = add i32 %8, 1830104225
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 838423692, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %54
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 838423692, label %19
    i32 1148463462, label %27
    i32 142272342, label %47
    i32 597569613, label %49
  ]

; <label>:18:                                     ; preds = %16
  br label %54

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 1148463462, i32 597569613
  store i32 %26, i32* %15
  br label %54

; <label>:27:                                     ; preds = %16
  %28 = alloca i64, align 8
  store i64 %0, i64* %28, align 8
  %29 = load i64, i64* %28, align 8
  %30 = call i64 @_Z6modpowxx(i64 %29, i64 1000000005)
  store i64 %30, i64* %28, align 8
  %31 = load i64, i64* %28, align 8
  store i64 %31, i64* %2
  %32 = load i32, i32* @x.50
  %33 = load i32, i32* @y.51
  %34 = add i32 %32, -1638213297
  %35 = sub i32 %34, 1
  %36 = sub i32 %35, -1638213297
  %37 = sub i32 %32, 1
  %38 = mul i32 %32, %36
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %33, 10
  %42 = and i1 %40, %41
  %43 = xor i1 %40, %41
  %44 = or i1 %42, %43
  %45 = or i1 %40, %41
  %46 = select i1 %44, i32 142272342, i32 597569613
  store i32 %46, i32* %15
  br label %54

; <label>:47:                                     ; preds = %16
  %48 = load volatile i64, i64* %2
  ret i64 %48

; <label>:49:                                     ; preds = %16
  %50 = alloca i64, align 8
  store i64 %0, i64* %50, align 8
  %51 = load i64, i64* %50, align 8
  %52 = call i64 @_Z6modpowxx(i64 %51, i64 1000000005)
  store i64 %52, i64* %50, align 8
  %53 = load i64, i64* %50, align 8
  store i32 1148463462, i32* %15
  br label %54

; <label>:54:                                     ; preds = %49, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define zeroext i1 @_Z4compRK4shopS1_(%struct.shop* dereferenceable(16), %struct.shop* dereferenceable(16)) #4 {
  %3 = alloca %struct.shop*, align 8
  %4 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %3, align 8
  store %struct.shop* %1, %struct.shop** %4, align 8
  %5 = load %struct.shop*, %struct.shop** %3, align 8
  %6 = getelementptr inbounds %struct.shop, %struct.shop* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = load %struct.shop*, %struct.shop** %4, align 8
  %9 = getelementptr inbounds %struct.shop, %struct.shop* %8, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 0, 1
  %12 = sub i64 %10, %11
  %13 = add nsw i64 %10, 1
  %14 = mul nsw i64 %7, %12
  %15 = load %struct.shop*, %struct.shop** %4, align 8
  %16 = getelementptr inbounds %struct.shop, %struct.shop* %15, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = load %struct.shop*, %struct.shop** %3, align 8
  %19 = getelementptr inbounds %struct.shop, %struct.shop* %18, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 0, %20
  %22 = sub i64 0, 1
  %23 = add i64 %21, %22
  %24 = sub i64 0, %23
  %25 = add nsw i64 %20, 1
  %26 = mul nsw i64 %17, %24
  %27 = icmp sgt i64 %14, %26
  ret i1 %27
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.4() #0 section ".text.startup" {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.54
  %4 = load i32, i32* @y.55
  %5 = add i32 %3, -2008699397
  %6 = sub i32 %5, 1
  %7 = sub i32 %6, -2008699397
  %8 = sub i32 %3, 1
  %9 = mul i32 %3, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %2
  %12 = icmp slt i32 %4, 10
  store i1 %12, i1* %1
  %13 = alloca i32
  store i32 1530380489, i32* %13
  br label %14

; <label>:14:                                     ; preds = %0, %56
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 1530380489, label %17
    i32 602123830, label %37
    i32 1361944382, label %53
    i32 1754582465, label %54
  ]

; <label>:16:                                     ; preds = %14
  br label %56

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %2
  %19 = load volatile i1, i1* %1
  %20 = xor i1 %18, true
  %21 = xor i1 %19, true
  %22 = xor i1 true, true
  %23 = and i1 %20, true
  %24 = and i1 %18, %22
  %25 = and i1 %21, true
  %26 = and i1 %19, %22
  %27 = or i1 %23, %24
  %28 = or i1 %25, %26
  %29 = xor i1 %27, %28
  %30 = or i1 %20, %21
  %31 = xor i1 %30, true
  %32 = or i1 true, %22
  %33 = and i1 %31, %32
  %34 = or i1 %29, %33
  %35 = or i1 %18, %19
  %36 = select i1 %34, i32 602123830, i32 1754582465
  store i32 %36, i32* %13
  br label %56

; <label>:37:                                     ; preds = %14
  call void @_ZNSt6vectorI4shopSaIS0_EEC2Ev(%"class.std::vector.4"* @s) #3
  %38 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector.4"*)* @_ZNSt6vectorI4shopSaIS0_EED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector.4"* @s to i8*), i8* @__dso_handle) #3
  %39 = load i32, i32* @x.54
  %40 = load i32, i32* @y.55
  %41 = sub i32 0, 1
  %42 = add i32 %39, %41
  %43 = sub i32 %39, 1
  %44 = mul i32 %39, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %40, 10
  %48 = and i1 %46, %47
  %49 = xor i1 %46, %47
  %50 = or i1 %48, %49
  %51 = or i1 %46, %47
  %52 = select i1 %50, i32 1361944382, i32 1754582465
  store i32 %52, i32* %13
  br label %56

; <label>:53:                                     ; preds = %14
  ret void

; <label>:54:                                     ; preds = %14
  call void @_ZNSt6vectorI4shopSaIS0_EEC2Ev(%"class.std::vector.4"* @s) #3
  %55 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector.4"*)* @_ZNSt6vectorI4shopSaIS0_EED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector.4"* @s to i8*), i8* @__dso_handle) #3
  store i32 602123830, i32* %13
  br label %56

; <label>:56:                                     ; preds = %54, %37, %17, %16
  br label %14
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt6vectorI4shopSaIS0_EEC2Ev(%"class.std::vector.4"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = load i32, i32* @x.56
  %3 = load i32, i32* @y.57
  %4 = sub i32 %2, 1702545470
  %5 = sub i32 %4, 1
  %6 = add i32 %5, 1702545470
  %7 = sub i32 %2, 1
  %8 = mul i32 %2, %6
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %3, 10
  %12 = xor i1 %10, true
  %13 = xor i1 %11, true
  %14 = xor i1 false, true
  %15 = and i1 %12, false
  %16 = and i1 %10, %14
  %17 = and i1 %13, false
  %18 = and i1 %11, %14
  %19 = or i1 %15, %16
  %20 = or i1 %17, %18
  %21 = xor i1 %19, %20
  %22 = or i1 %12, %13
  %23 = xor i1 %22, true
  %24 = or i1 false, %14
  %25 = and i1 %23, %24
  %26 = or i1 %21, %25
  %27 = or i1 %10, %11
  br i1 %26, label %28, label %62

; <label>:28:                                     ; preds = %1, %62
  %29 = alloca %"class.std::vector.4"*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %29, align 8
  %30 = load %"class.std::vector.4"*, %"class.std::vector.4"** %29, align 8
  %31 = bitcast %"class.std::vector.4"* %30 to %"struct.std::_Vector_base.5"*
  %32 = load i32, i32* @x.56
  %33 = load i32, i32* @y.57
  %34 = sub i32 0, 1
  %35 = add i32 %32, %34
  %36 = sub i32 %32, 1
  %37 = mul i32 %32, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %33, 10
  %41 = xor i1 %39, true
  %42 = xor i1 %40, true
  %43 = xor i1 false, true
  %44 = and i1 %41, false
  %45 = and i1 %39, %43
  %46 = and i1 %42, false
  %47 = and i1 %40, %43
  %48 = or i1 %44, %45
  %49 = or i1 %46, %47
  %50 = xor i1 %48, %49
  %51 = or i1 %41, %42
  %52 = xor i1 %51, true
  %53 = or i1 false, %43
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = or i1 %39, %40
  br i1 %55, label %57, label %62

; <label>:57:                                     ; preds = %28
  invoke void @_ZNSt12_Vector_baseI4shopSaIS0_EEC2Ev(%"struct.std::_Vector_base.5"* %31)
          to label %58 unwind label %59

; <label>:58:                                     ; preds = %57
  ret void

; <label>:59:                                     ; preds = %57
  %60 = landingpad { i8*, i32 }
          catch i8* null
  %61 = extractvalue { i8*, i32 } %60, 0
  call void @__clang_call_terminate(i8* %61) #13
  unreachable

; <label>:62:                                     ; preds = %28, %1
  %63 = alloca %"class.std::vector.4"*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %63, align 8
  %64 = load %"class.std::vector.4"*, %"class.std::vector.4"** %63, align 8
  %65 = bitcast %"class.std::vector.4"* %64 to %"struct.std::_Vector_base.5"*
  br label %28
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt6vectorI4shopSaIS0_EED2Ev(%"class.std::vector.4"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::vector.4"*, align 8
  %3 = alloca i8*
  %4 = alloca i32
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %2, align 8
  %5 = load %"class.std::vector.4"*, %"class.std::vector.4"** %2, align 8
  %6 = bitcast %"class.std::vector.4"* %5 to %"struct.std::_Vector_base.5"*
  %7 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %6, i32 0, i32 0
  %8 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %7, i32 0, i32 0
  %9 = load %struct.shop*, %struct.shop** %8, align 8
  %10 = bitcast %"class.std::vector.4"* %5 to %"struct.std::_Vector_base.5"*
  %11 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %10, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %11, i32 0, i32 1
  %13 = load %struct.shop*, %struct.shop** %12, align 8
  %14 = bitcast %"class.std::vector.4"* %5 to %"struct.std::_Vector_base.5"*
  %15 = call dereferenceable(1) %"class.std::allocator.6"* @_ZNSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"* %14) #3
  invoke void @_ZSt8_DestroyIP4shopS0_EvT_S2_RSaIT0_E(%struct.shop* %9, %struct.shop* %13, %"class.std::allocator.6"* dereferenceable(1) %15)
          to label %16 unwind label %18

; <label>:16:                                     ; preds = %1
  %17 = bitcast %"class.std::vector.4"* %5 to %"struct.std::_Vector_base.5"*
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EED2Ev(%"struct.std::_Vector_base.5"* %17) #3
  ret void

; <label>:18:                                     ; preds = %1
  %19 = landingpad { i8*, i32 }
          catch i8* null
  %20 = extractvalue { i8*, i32 } %19, 0
  store i8* %20, i8** %3, align 8
  %21 = extractvalue { i8*, i32 } %19, 1
  store i32 %21, i32* %4, align 4
  %22 = bitcast %"class.std::vector.4"* %5 to %"struct.std::_Vector_base.5"*
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EED2Ev(%"struct.std::_Vector_base.5"* %22) #3
  br label %23

; <label>:23:                                     ; preds = %18
  %24 = load i32, i32* @x.58
  %25 = load i32, i32* @y.59
  %26 = sub i32 0, 1
  %27 = add i32 %24, %26
  %28 = sub i32 %24, 1
  %29 = mul i32 %24, %27
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %25, 10
  %33 = and i1 %31, %32
  %34 = xor i1 %31, %32
  %35 = or i1 %33, %34
  %36 = or i1 %31, %32
  br i1 %35, label %37, label %54

; <label>:37:                                     ; preds = %23, %54
  %38 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %38) #13
  %39 = load i32, i32* @x.58
  %40 = load i32, i32* @y.59
  %41 = sub i32 %39, -1431007720
  %42 = sub i32 %41, 1
  %43 = add i32 %42, -1431007720
  %44 = sub i32 %39, 1
  %45 = mul i32 %39, %43
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %40, 10
  %49 = and i1 %47, %48
  %50 = xor i1 %47, %48
  %51 = or i1 %49, %50
  %52 = or i1 %47, %48
  br i1 %51, label %53, label %54

; <label>:53:                                     ; preds = %37
  unreachable

; <label>:54:                                     ; preds = %37, %23
  %55 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %55) #13
  br label %37
}

; Function Attrs: noinline uwtable
define internal void @__cxx_global_var_init.5() #0 section ".text.startup" personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca %"class.std::initializer_list", align 8
  %2 = alloca %"class.std::allocator.1", align 1
  %3 = alloca i8*
  %4 = alloca i32
  %5 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %1, i32 0, i32 0
  store i64* getelementptr inbounds ([1 x i64], [1 x i64]* @.ref.tmp, i64 0, i64 0), i64** %5, align 8
  %6 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %1, i32 0, i32 1
  store i64 1, i64* %6, align 8
  call void @_ZNSaIxEC2Ev(%"class.std::allocator.1"* %2) #3
  %7 = bitcast %"class.std::initializer_list"* %1 to { i64*, i64 }*
  %8 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %7, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %7, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  invoke void @_ZNSt6vectorIxSaIxEEC2ESt16initializer_listIxERKS0_(%"class.std::vector"* @v, i64* %9, i64 %11, %"class.std::allocator.1"* dereferenceable(1) %2)
          to label %12 unwind label %14

; <label>:12:                                     ; preds = %0
  call void @_ZNSaIxED2Ev(%"class.std::allocator.1"* %2) #3
  %13 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::vector"*)* @_ZNSt6vectorIxSaIxEED2Ev to void (i8*)*), i8* bitcast (%"class.std::vector"* @v to i8*), i8* @__dso_handle) #3
  ret void

; <label>:14:                                     ; preds = %0
  %15 = landingpad { i8*, i32 }
          cleanup
  %16 = extractvalue { i8*, i32 } %15, 0
  store i8* %16, i8** %3, align 8
  %17 = extractvalue { i8*, i32 } %15, 1
  store i32 %17, i32* %4, align 4
  call void @_ZNSaIxED2Ev(%"class.std::allocator.1"* %2) #3
  br label %18

; <label>:18:                                     ; preds = %14
  %19 = load i32, i32* @x.60
  %20 = load i32, i32* @y.61
  %21 = sub i32 0, 1
  %22 = add i32 %19, %21
  %23 = sub i32 %19, 1
  %24 = mul i32 %19, %22
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %20, 10
  %28 = xor i1 %26, true
  %29 = xor i1 %27, true
  %30 = xor i1 false, true
  %31 = and i1 %28, false
  %32 = and i1 %26, %30
  %33 = and i1 %29, false
  %34 = and i1 %27, %30
  %35 = or i1 %31, %32
  %36 = or i1 %33, %34
  %37 = xor i1 %35, %36
  %38 = or i1 %28, %29
  %39 = xor i1 %38, true
  %40 = or i1 false, %30
  %41 = and i1 %39, %40
  %42 = or i1 %37, %41
  %43 = or i1 %26, %27
  br i1 %42, label %44, label %75

; <label>:44:                                     ; preds = %18, %75
  %45 = load i8*, i8** %3, align 8
  %46 = load i32, i32* %4, align 4
  %47 = insertvalue { i8*, i32 } undef, i8* %45, 0
  %48 = insertvalue { i8*, i32 } %47, i32 %46, 1
  %49 = load i32, i32* @x.60
  %50 = load i32, i32* @y.61
  %51 = sub i32 0, 1
  %52 = add i32 %49, %51
  %53 = sub i32 %49, 1
  %54 = mul i32 %49, %52
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %50, 10
  %58 = xor i1 %56, true
  %59 = xor i1 %57, true
  %60 = xor i1 false, true
  %61 = and i1 %58, false
  %62 = and i1 %56, %60
  %63 = and i1 %59, false
  %64 = and i1 %57, %60
  %65 = or i1 %61, %62
  %66 = or i1 %63, %64
  %67 = xor i1 %65, %66
  %68 = or i1 %58, %59
  %69 = xor i1 %68, true
  %70 = or i1 false, %60
  %71 = and i1 %69, %70
  %72 = or i1 %67, %71
  %73 = or i1 %56, %57
  br i1 %72, label %74, label %75

; <label>:74:                                     ; preds = %44
  resume { i8*, i32 } %48

; <label>:75:                                     ; preds = %44, %18
  %76 = load i8*, i8** %3, align 8
  %77 = load i32, i32* %4, align 4
  %78 = insertvalue { i8*, i32 } undef, i8* %76, 0
  %79 = insertvalue { i8*, i32 } %78, i32 %77, 1
  br label %44
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaIxEC2Ev(%"class.std::allocator.1"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.62
  %5 = load i32, i32* @y.63
  %6 = add i32 %4, 908680983
  %7 = sub i32 %6, 1
  %8 = sub i32 %7, 908680983
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 1712516256, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %61
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 1712516256, label %18
    i32 1957425358, label %26
    i32 -411195709, label %56
    i32 1151321433, label %57
  ]

; <label>:17:                                     ; preds = %15
  br label %61

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 1957425358, i32 1151321433
  store i32 %25, i32* %14
  br label %61

; <label>:26:                                     ; preds = %15
  %27 = alloca %"class.std::allocator.1"*, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %27, align 8
  %28 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %27, align 8
  %29 = bitcast %"class.std::allocator.1"* %28 to %"class.__gnu_cxx::new_allocator.2"*
  call void @_ZN9__gnu_cxx13new_allocatorIxEC2Ev(%"class.__gnu_cxx::new_allocator.2"* %29) #3
  %30 = load i32, i32* @x.62
  %31 = load i32, i32* @y.63
  %32 = sub i32 0, 1
  %33 = add i32 %30, %32
  %34 = sub i32 %30, 1
  %35 = mul i32 %30, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %31, 10
  %39 = xor i1 %37, true
  %40 = xor i1 %38, true
  %41 = xor i1 true, true
  %42 = and i1 %39, true
  %43 = and i1 %37, %41
  %44 = and i1 %40, true
  %45 = and i1 %38, %41
  %46 = or i1 %42, %43
  %47 = or i1 %44, %45
  %48 = xor i1 %46, %47
  %49 = or i1 %39, %40
  %50 = xor i1 %49, true
  %51 = or i1 true, %41
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  %54 = or i1 %37, %38
  %55 = select i1 %53, i32 -411195709, i32 1151321433
  store i32 %55, i32* %14
  br label %61

; <label>:56:                                     ; preds = %15
  ret void

; <label>:57:                                     ; preds = %15
  %58 = alloca %"class.std::allocator.1"*, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %58, align 8
  %59 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %58, align 8
  %60 = bitcast %"class.std::allocator.1"* %59 to %"class.__gnu_cxx::new_allocator.2"*
  call void @_ZN9__gnu_cxx13new_allocatorIxEC2Ev(%"class.__gnu_cxx::new_allocator.2"* %60) #3
  store i32 1957425358, i32* %14
  br label %61

; <label>:61:                                     ; preds = %57, %26, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEEC2ESt16initializer_listIxERKS0_(%"class.std::vector"*, i64*, i64, %"class.std::allocator.1"* dereferenceable(1)) unnamed_addr #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = alloca %"class.std::initializer_list", align 8
  %6 = alloca %"class.std::vector"*, align 8
  %7 = alloca %"class.std::allocator.1"*, align 8
  %8 = alloca %"struct.std::forward_iterator_tag", align 1
  %9 = alloca %"struct.std::random_access_iterator_tag", align 1
  %10 = alloca i8*
  %11 = alloca i32
  %12 = bitcast %"class.std::initializer_list"* %5 to { i64*, i64 }*
  %13 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %12, i32 0, i32 0
  store i64* %1, i64** %13, align 8
  %14 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %12, i32 0, i32 1
  store i64 %2, i64* %14, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %6, align 8
  store %"class.std::allocator.1"* %3, %"class.std::allocator.1"** %7, align 8
  %15 = load %"class.std::vector"*, %"class.std::vector"** %6, align 8
  %16 = bitcast %"class.std::vector"* %15 to %"struct.std::_Vector_base"*
  %17 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %7, align 8
  call void @_ZNSt12_Vector_baseIxSaIxEEC2ERKS0_(%"struct.std::_Vector_base"* %16, %"class.std::allocator.1"* dereferenceable(1) %17) #3
  %18 = call i64* @_ZNKSt16initializer_listIxE5beginEv(%"class.std::initializer_list"* %5) #3
  %19 = call i64* @_ZNKSt16initializer_listIxE3endEv(%"class.std::initializer_list"* %5) #3
  %20 = bitcast %"struct.std::random_access_iterator_tag"* %9 to %"struct.std::forward_iterator_tag"*
  invoke void @_ZNSt6vectorIxSaIxEE19_M_range_initializeIPKxEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* %15, i64* %18, i64* %19)
          to label %21 unwind label %63

; <label>:21:                                     ; preds = %4
  %22 = load i32, i32* @x.64
  %23 = load i32, i32* @y.65
  %24 = sub i32 0, 1
  %25 = add i32 %22, %24
  %26 = sub i32 %22, 1
  %27 = mul i32 %22, %25
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %23, 10
  %31 = and i1 %29, %30
  %32 = xor i1 %29, %30
  %33 = or i1 %31, %32
  %34 = or i1 %29, %30
  br i1 %33, label %35, label %114

; <label>:35:                                     ; preds = %21, %114
  %36 = load i32, i32* @x.64
  %37 = load i32, i32* @y.65
  %38 = sub i32 %36, 435733935
  %39 = sub i32 %38, 1
  %40 = add i32 %39, 435733935
  %41 = sub i32 %36, 1
  %42 = mul i32 %36, %40
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %37, 10
  %46 = xor i1 %44, true
  %47 = xor i1 %45, true
  %48 = xor i1 false, true
  %49 = and i1 %46, false
  %50 = and i1 %44, %48
  %51 = and i1 %47, false
  %52 = and i1 %45, %48
  %53 = or i1 %49, %50
  %54 = or i1 %51, %52
  %55 = xor i1 %53, %54
  %56 = or i1 %46, %47
  %57 = xor i1 %56, true
  %58 = or i1 false, %48
  %59 = and i1 %57, %58
  %60 = or i1 %55, %59
  %61 = or i1 %44, %45
  br i1 %60, label %62, label %114

; <label>:62:                                     ; preds = %35
  ret void

; <label>:63:                                     ; preds = %4
  %64 = load i32, i32* @x.64
  %65 = load i32, i32* @y.65
  %66 = sub i32 0, 1
  %67 = add i32 %64, %66
  %68 = sub i32 %64, 1
  %69 = mul i32 %64, %67
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %65, 10
  %73 = and i1 %71, %72
  %74 = xor i1 %71, %72
  %75 = or i1 %73, %74
  %76 = or i1 %71, %72
  br i1 %75, label %77, label %115

; <label>:77:                                     ; preds = %63, %115
  %78 = landingpad { i8*, i32 }
          cleanup
  %79 = extractvalue { i8*, i32 } %78, 0
  store i8* %79, i8** %10, align 8
  %80 = extractvalue { i8*, i32 } %78, 1
  store i32 %80, i32* %11, align 4
  %81 = bitcast %"class.std::vector"* %15 to %"struct.std::_Vector_base"*
  call void @_ZNSt12_Vector_baseIxSaIxEED2Ev(%"struct.std::_Vector_base"* %81) #3
  %82 = load i32, i32* @x.64
  %83 = load i32, i32* @y.65
  %84 = add i32 %82, 1632285453
  %85 = sub i32 %84, 1
  %86 = sub i32 %85, 1632285453
  %87 = sub i32 %82, 1
  %88 = mul i32 %82, %86
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %83, 10
  %92 = xor i1 %90, true
  %93 = xor i1 %91, true
  %94 = xor i1 true, true
  %95 = and i1 %92, true
  %96 = and i1 %90, %94
  %97 = and i1 %93, true
  %98 = and i1 %91, %94
  %99 = or i1 %95, %96
  %100 = or i1 %97, %98
  %101 = xor i1 %99, %100
  %102 = or i1 %92, %93
  %103 = xor i1 %102, true
  %104 = or i1 true, %94
  %105 = and i1 %103, %104
  %106 = or i1 %101, %105
  %107 = or i1 %90, %91
  br i1 %106, label %108, label %115

; <label>:108:                                    ; preds = %77
  br label %109

; <label>:109:                                    ; preds = %108
  %110 = load i8*, i8** %10, align 8
  %111 = load i32, i32* %11, align 4
  %112 = insertvalue { i8*, i32 } undef, i8* %110, 0
  %113 = insertvalue { i8*, i32 } %112, i32 %111, 1
  resume { i8*, i32 } %113

; <label>:114:                                    ; preds = %35, %21
  br label %35

; <label>:115:                                    ; preds = %77, %63
  %116 = landingpad { i8*, i32 }
          cleanup
  %117 = extractvalue { i8*, i32 } %116, 0
  store i8* %117, i8** %10, align 8
  %118 = extractvalue { i8*, i32 } %116, 1
  store i32 %118, i32* %11, align 4
  %119 = bitcast %"class.std::vector"* %15 to %"struct.std::_Vector_base"*
  call void @_ZNSt12_Vector_baseIxSaIxEED2Ev(%"struct.std::_Vector_base"* %119) #3
  br label %77
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaIxED2Ev(%"class.std::allocator.1"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.std::allocator.1"*, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %2, align 8
  %3 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %2, align 8
  %4 = bitcast %"class.std::allocator.1"* %3 to %"class.__gnu_cxx::new_allocator.2"*
  call void @_ZN9__gnu_cxx13new_allocatorIxED2Ev(%"class.__gnu_cxx::new_allocator.2"* %4) #3
  ret void
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() #5 {
  %1 = alloca i1
  %2 = alloca i1
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.shop, align 8
  %8 = alloca i64, align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %21 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %22 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %23 = alloca i64, align 8
  %24 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store i32 0, i32* %3, align 4
  %25 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %26 = getelementptr i8, i8* %25, i64 -24
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %28
  %30 = bitcast i8* %29 to %"class.std::basic_ios"*
  %31 = call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %30, %"class.std::basic_ostream"* null)
  %32 = call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %33 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* dereferenceable(8) @n)
  %34 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %33, i64* dereferenceable(8) @t)
  store i64 0, i64* %4, align 8
  %35 = alloca i32
  store i32 -777083633, i32* %35
  br label %36

; <label>:36:                                     ; preds = %0, %860
  %37 = load i32, i32* %35
  switch i32 %37, label %38 [
    i32 -777083633, label %39
    i32 1614946179, label %44
    i32 -501617576, label %50
    i32 -1632749631, label %55
    i32 906300863, label %83
    i32 -454719836, label %102
    i32 -1069630455, label %103
    i32 423774258, label %104
    i32 655065962, label %131
    i32 157061327, label %152
    i32 1538982098, label %153
    i32 -1618235847, label %170
    i32 1016156878, label %175
    i32 2067143611, label %191
    i32 -2099688240, label %233
    i32 -2097093964, label %234
    i32 562055303, label %241
    i32 -1650838110, label %242
    i32 -100214765, label %270
    i32 41578519, label %292
    i32 1056382224, label %295
    i32 331535717, label %310
    i32 -2087167673, label %326
    i32 804898278, label %327
    i32 626445496, label %331
    i32 -1860191448, label %347
    i32 -2012142167, label %383
    i32 1044810378, label %384
    i32 1787838105, label %390
    i32 -841048476, label %406
    i32 -1523340166, label %434
    i32 -1710349590, label %435
    i32 1235803390, label %463
    i32 -405268366, label %497
    i32 251028052, label %498
    i32 649731721, label %499
    i32 1707286231, label %504
    i32 -1395984988, label %505
    i32 1122616416, label %533
    i32 -1747563315, label %563
    i32 1801775358, label %566
    i32 1030900248, label %617
    i32 -1469115492, label %623
    i32 -500969635, label %624
    i32 90974570, label %629
    i32 889046171, label %630
    i32 1121287648, label %634
    i32 -1991395552, label %643
    i32 65378071, label %644
    i32 797781950, label %675
    i32 1033299926, label %680
    i32 1933966095, label %684
    i32 -950535203, label %700
    i32 1262261782, label %743
    i32 343743304, label %786
    i32 -2068859750, label %814
    i32 -396228283, label %815
    i32 -1814680626, label %831
    i32 199988804, label %832
    i32 -1716830081, label %857
  ]

; <label>:38:                                     ; preds = %36
  br label %860

; <label>:39:                                     ; preds = %36
  %40 = load i64, i64* %4, align 8
  %41 = load i64, i64* @n, align 8
  %42 = icmp slt i64 %40, %41
  %43 = select i1 %42, i32 1614946179, i32 1538982098
  store i32 %43, i32* %35
  br label %860

; <label>:44:                                     ; preds = %36
  %45 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* @_ZSt3cin, i64* dereferenceable(8) %5)
  %46 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* %45, i64* dereferenceable(8) %6)
  %47 = load i64, i64* %5, align 8
  %48 = icmp sgt i64 %47, 0
  %49 = select i1 %48, i32 -501617576, i32 -1632749631
  store i32 %49, i32* %35
  br label %860

; <label>:50:                                     ; preds = %36
  %51 = getelementptr inbounds %struct.shop, %struct.shop* %7, i32 0, i32 0
  %52 = load i64, i64* %5, align 8
  store i64 %52, i64* %51, align 8
  %53 = getelementptr inbounds %struct.shop, %struct.shop* %7, i32 0, i32 1
  %54 = load i64, i64* %6, align 8
  store i64 %54, i64* %53, align 8
  call void @_ZNSt6vectorI4shopSaIS0_EE9push_backEOS0_(%"class.std::vector.4"* @s, %struct.shop* dereferenceable(16) %7)
  store i32 -1069630455, i32* %35
  br label %860

; <label>:55:                                     ; preds = %36
  %56 = load i32, i32* @x.68
  %57 = load i32, i32* @y.69
  %58 = sub i32 %56, 761266512
  %59 = sub i32 %58, 1
  %60 = add i32 %59, 761266512
  %61 = sub i32 %56, 1
  %62 = mul i32 %56, %60
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %57, 10
  %66 = xor i1 %64, true
  %67 = xor i1 %65, true
  %68 = xor i1 true, true
  %69 = and i1 %66, true
  %70 = and i1 %64, %68
  %71 = and i1 %67, true
  %72 = and i1 %65, %68
  %73 = or i1 %69, %70
  %74 = or i1 %71, %72
  %75 = xor i1 %73, %74
  %76 = or i1 %66, %67
  %77 = xor i1 %76, true
  %78 = or i1 true, %68
  %79 = and i1 %77, %78
  %80 = or i1 %75, %79
  %81 = or i1 %64, %65
  %82 = select i1 %80, i32 906300863, i32 1933966095
  store i32 %82, i32* %35
  br label %860

; <label>:83:                                     ; preds = %36
  %84 = load i64, i64* %6, align 8
  %85 = sub i64 0, 1
  %86 = sub i64 %84, %85
  %87 = add nsw i64 %84, 1
  store i64 %86, i64* %8, align 8
  call void @_ZNSt6vectorIxSaIxEE9push_backEOx(%"class.std::vector"* @v, i64* dereferenceable(8) %8)
  %88 = load i32, i32* @x.68
  %89 = load i32, i32* @y.69
  %90 = sub i32 0, 1
  %91 = add i32 %88, %90
  %92 = sub i32 %88, 1
  %93 = mul i32 %88, %91
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %89, 10
  %97 = and i1 %95, %96
  %98 = xor i1 %95, %96
  %99 = or i1 %97, %98
  %100 = or i1 %95, %96
  %101 = select i1 %99, i32 -454719836, i32 1933966095
  store i32 %101, i32* %35
  br label %860

; <label>:102:                                    ; preds = %36
  store i32 -1069630455, i32* %35
  br label %860

; <label>:103:                                    ; preds = %36
  store i32 423774258, i32* %35
  br label %860

; <label>:104:                                    ; preds = %36
  %105 = load i32, i32* @x.68
  %106 = load i32, i32* @y.69
  %107 = sub i32 0, 1
  %108 = add i32 %105, %107
  %109 = sub i32 %105, 1
  %110 = mul i32 %105, %108
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %106, 10
  %114 = xor i1 %112, true
  %115 = xor i1 %113, true
  %116 = xor i1 false, true
  %117 = and i1 %114, false
  %118 = and i1 %112, %116
  %119 = and i1 %115, false
  %120 = and i1 %113, %116
  %121 = or i1 %117, %118
  %122 = or i1 %119, %120
  %123 = xor i1 %121, %122
  %124 = or i1 %114, %115
  %125 = xor i1 %124, true
  %126 = or i1 false, %116
  %127 = and i1 %125, %126
  %128 = or i1 %123, %127
  %129 = or i1 %112, %113
  %130 = select i1 %128, i32 655065962, i32 -950535203
  store i32 %130, i32* %35
  br label %860

; <label>:131:                                    ; preds = %36
  %132 = load i64, i64* %4, align 8
  %133 = sub i64 0, %132
  %134 = sub i64 0, 1
  %135 = add i64 %133, %134
  %136 = sub i64 0, %135
  %137 = add nsw i64 %132, 1
  store i64 %136, i64* %4, align 8
  %138 = load i32, i32* @x.68
  %139 = load i32, i32* @y.69
  %140 = sub i32 0, 1
  %141 = add i32 %138, %140
  %142 = sub i32 %138, 1
  %143 = mul i32 %138, %141
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %139, 10
  %147 = and i1 %145, %146
  %148 = xor i1 %145, %146
  %149 = or i1 %147, %148
  %150 = or i1 %145, %146
  %151 = select i1 %149, i32 157061327, i32 -950535203
  store i32 %151, i32* %35
  br label %860

; <label>:152:                                    ; preds = %36
  store i32 -777083633, i32* %35
  br label %860

; <label>:153:                                    ; preds = %36
  %154 = call %struct.shop* @_ZNSt6vectorI4shopSaIS0_EE5beginEv(%"class.std::vector.4"* @s) #3
  %155 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  store %struct.shop* %154, %struct.shop** %155, align 8
  %156 = call %struct.shop* @_ZNSt6vectorI4shopSaIS0_EE3endEv(%"class.std::vector.4"* @s) #3
  %157 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  store %struct.shop* %156, %struct.shop** %157, align 8
  %158 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %159 = load %struct.shop*, %struct.shop** %158, align 8
  %160 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %161 = load %struct.shop*, %struct.shop** %160, align 8
  call void @_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_(%struct.shop* %159, %struct.shop* %161, i1 (%struct.shop*, %struct.shop*)* @_Z4compRK4shopS1_)
  %162 = call i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"* @v) #3
  %163 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  store i64* %162, i64** %163, align 8
  %164 = call i64* @_ZNSt6vectorIxSaIxEE3endEv(%"class.std::vector"* @v) #3
  %165 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %12, i32 0, i32 0
  store i64* %164, i64** %165, align 8
  %166 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  %167 = load i64*, i64** %166, align 8
  %168 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %12, i32 0, i32 0
  %169 = load i64*, i64** %168, align 8
  call void @_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEEvT_S7_(i64* %167, i64* %169)
  store i64 1, i64* %13, align 8
  store i32 -1618235847, i32* %35
  br label %860

; <label>:170:                                    ; preds = %36
  %171 = load i64, i64* %13, align 8
  %172 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* @v) #3
  %173 = icmp ult i64 %171, %172
  %174 = select i1 %173, i32 1016156878, i32 562055303
  store i32 %174, i32* %35
  br label %860

; <label>:175:                                    ; preds = %36
  %176 = load i32, i32* @x.68
  %177 = load i32, i32* @y.69
  %178 = add i32 %176, 2085668095
  %179 = sub i32 %178, 1
  %180 = sub i32 %179, 2085668095
  %181 = sub i32 %176, 1
  %182 = mul i32 %176, %180
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %177, 10
  %186 = and i1 %184, %185
  %187 = xor i1 %184, %185
  %188 = or i1 %186, %187
  %189 = or i1 %184, %185
  %190 = select i1 %188, i32 2067143611, i32 1262261782
  store i32 %190, i32* %35
  br label %860

; <label>:191:                                    ; preds = %36
  %192 = load i64, i64* %13, align 8
  %193 = sub i64 %192, 1369936027404008108
  %194 = sub i64 %193, 1
  %195 = add i64 %194, 1369936027404008108
  %196 = sub nsw i64 %192, 1
  %197 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @v, i64 %195) #3
  %198 = load i64, i64* %197, align 8
  %199 = load i64, i64* %13, align 8
  %200 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @v, i64 %199) #3
  %201 = load i64, i64* %200, align 8
  %202 = sub i64 %201, -4888648604642886717
  %203 = add i64 %202, %198
  %204 = add i64 %203, -4888648604642886717
  %205 = add nsw i64 %201, %198
  store i64 %204, i64* %200, align 8
  %206 = load i32, i32* @x.68
  %207 = load i32, i32* @y.69
  %208 = add i32 %206, -1475595290
  %209 = sub i32 %208, 1
  %210 = sub i32 %209, -1475595290
  %211 = sub i32 %206, 1
  %212 = mul i32 %206, %210
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %207, 10
  %216 = xor i1 %214, true
  %217 = xor i1 %215, true
  %218 = xor i1 false, true
  %219 = and i1 %216, false
  %220 = and i1 %214, %218
  %221 = and i1 %217, false
  %222 = and i1 %215, %218
  %223 = or i1 %219, %220
  %224 = or i1 %221, %222
  %225 = xor i1 %223, %224
  %226 = or i1 %216, %217
  %227 = xor i1 %226, true
  %228 = or i1 false, %218
  %229 = and i1 %227, %228
  %230 = or i1 %225, %229
  %231 = or i1 %214, %215
  %232 = select i1 %230, i32 -2099688240, i32 1262261782
  store i32 %232, i32* %35
  br label %860

; <label>:233:                                    ; preds = %36
  store i32 -2097093964, i32* %35
  br label %860

; <label>:234:                                    ; preds = %36
  %235 = load i64, i64* %13, align 8
  %236 = sub i64 0, %235
  %237 = sub i64 0, 1
  %238 = add i64 %236, %237
  %239 = sub i64 0, %238
  %240 = add nsw i64 %235, 1
  store i64 %239, i64* %13, align 8
  store i32 -1618235847, i32* %35
  br label %860

; <label>:241:                                    ; preds = %36
  store i64 0, i64* %14, align 8
  store i32 -1650838110, i32* %35
  br label %860

; <label>:242:                                    ; preds = %36
  %243 = load i32, i32* @x.68
  %244 = load i32, i32* @y.69
  %245 = sub i32 %243, 1096048835
  %246 = sub i32 %245, 1
  %247 = add i32 %246, 1096048835
  %248 = sub i32 %243, 1
  %249 = mul i32 %243, %247
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %244, 10
  %253 = xor i1 %251, true
  %254 = xor i1 %252, true
  %255 = xor i1 true, true
  %256 = and i1 %253, true
  %257 = and i1 %251, %255
  %258 = and i1 %254, true
  %259 = and i1 %252, %255
  %260 = or i1 %256, %257
  %261 = or i1 %258, %259
  %262 = xor i1 %260, %261
  %263 = or i1 %253, %254
  %264 = xor i1 %263, true
  %265 = or i1 true, %255
  %266 = and i1 %264, %265
  %267 = or i1 %262, %266
  %268 = or i1 %251, %252
  %269 = select i1 %267, i32 -100214765, i32 343743304
  store i32 %269, i32* %35
  br label %860

; <label>:270:                                    ; preds = %36
  %271 = load i64, i64* %14, align 8
  %272 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* @s) #3
  %273 = add i64 %272, 2383939234343485654
  %274 = add i64 %273, 1
  %275 = sub i64 %274, 2383939234343485654
  %276 = add i64 %272, 1
  %277 = icmp ult i64 %271, %275
  store i1 %277, i1* %2
  %278 = load i32, i32* @x.68
  %279 = load i32, i32* @y.69
  %280 = sub i32 0, 1
  %281 = add i32 %278, %280
  %282 = sub i32 %278, 1
  %283 = mul i32 %278, %281
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %279, 10
  %287 = and i1 %285, %286
  %288 = xor i1 %285, %286
  %289 = or i1 %287, %288
  %290 = or i1 %285, %286
  %291 = select i1 %289, i32 41578519, i32 343743304
  store i32 %291, i32* %35
  br label %860

; <label>:292:                                    ; preds = %36
  %293 = load volatile i1, i1* %2
  %294 = select i1 %293, i32 1056382224, i32 251028052
  store i32 %294, i32* %35
  br label %860

; <label>:295:                                    ; preds = %36
  %296 = load i32, i32* @x.68
  %297 = load i32, i32* @y.69
  %298 = sub i32 0, 1
  %299 = add i32 %296, %298
  %300 = sub i32 %296, 1
  %301 = mul i32 %296, %299
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %297, 10
  %305 = and i1 %303, %304
  %306 = xor i1 %303, %304
  %307 = or i1 %305, %306
  %308 = or i1 %303, %304
  %309 = select i1 %307, i32 331535717, i32 -2068859750
  store i32 %309, i32* %35
  br label %860

; <label>:310:                                    ; preds = %36
  store i64 0, i64* %15, align 8
  %311 = load i32, i32* @x.68
  %312 = load i32, i32* @y.69
  %313 = sub i32 %311, 1575955704
  %314 = sub i32 %313, 1
  %315 = add i32 %314, 1575955704
  %316 = sub i32 %311, 1
  %317 = mul i32 %311, %315
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %312, 10
  %321 = and i1 %319, %320
  %322 = xor i1 %319, %320
  %323 = or i1 %321, %322
  %324 = or i1 %319, %320
  %325 = select i1 %323, i32 -2087167673, i32 -2068859750
  store i32 %325, i32* %35
  br label %860

; <label>:326:                                    ; preds = %36
  store i32 804898278, i32* %35
  br label %860

; <label>:327:                                    ; preds = %36
  %328 = load i64, i64* %15, align 8
  %329 = icmp slt i64 %328, 40
  %330 = select i1 %329, i32 626445496, i32 1787838105
  store i32 %330, i32* %35
  br label %860

; <label>:331:                                    ; preds = %36
  %332 = load i32, i32* @x.68
  %333 = load i32, i32* @y.69
  %334 = add i32 %332, 1279851156
  %335 = sub i32 %334, 1
  %336 = sub i32 %335, 1279851156
  %337 = sub i32 %332, 1
  %338 = mul i32 %332, %336
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %333, 10
  %342 = and i1 %340, %341
  %343 = xor i1 %340, %341
  %344 = or i1 %342, %343
  %345 = or i1 %340, %341
  %346 = select i1 %344, i32 -1860191448, i32 -396228283
  store i32 %346, i32* %35
  br label %860

; <label>:347:                                    ; preds = %36
  %348 = load i64, i64* @t, align 8
  %349 = sub i64 %348, 6259255385363565681
  %350 = add i64 %349, 1
  %351 = add i64 %350, 6259255385363565681
  %352 = add nsw i64 %348, 1
  %353 = load i64, i64* %14, align 8
  %354 = getelementptr inbounds [200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 %353
  %355 = load i64, i64* %15, align 8
  %356 = getelementptr inbounds [40 x i64], [40 x i64]* %354, i64 0, i64 %355
  store i64 %351, i64* %356, align 8
  %357 = load i32, i32* @x.68
  %358 = load i32, i32* @y.69
  %359 = sub i32 0, 1
  %360 = add i32 %357, %359
  %361 = sub i32 %357, 1
  %362 = mul i32 %357, %360
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %358, 10
  %366 = xor i1 %364, true
  %367 = xor i1 %365, true
  %368 = xor i1 true, true
  %369 = and i1 %366, true
  %370 = and i1 %364, %368
  %371 = and i1 %367, true
  %372 = and i1 %365, %368
  %373 = or i1 %369, %370
  %374 = or i1 %371, %372
  %375 = xor i1 %373, %374
  %376 = or i1 %366, %367
  %377 = xor i1 %376, true
  %378 = or i1 true, %368
  %379 = and i1 %377, %378
  %380 = or i1 %375, %379
  %381 = or i1 %364, %365
  %382 = select i1 %380, i32 -2012142167, i32 -396228283
  store i32 %382, i32* %35
  br label %860

; <label>:383:                                    ; preds = %36
  store i32 1044810378, i32* %35
  br label %860

; <label>:384:                                    ; preds = %36
  %385 = load i64, i64* %15, align 8
  %386 = add i64 %385, 4065985464149142929
  %387 = add i64 %386, 1
  %388 = sub i64 %387, 4065985464149142929
  %389 = add nsw i64 %385, 1
  store i64 %388, i64* %15, align 8
  store i32 804898278, i32* %35
  br label %860

; <label>:390:                                    ; preds = %36
  %391 = load i32, i32* @x.68
  %392 = load i32, i32* @y.69
  %393 = sub i32 %391, -130615450
  %394 = sub i32 %393, 1
  %395 = add i32 %394, -130615450
  %396 = sub i32 %391, 1
  %397 = mul i32 %391, %395
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %392, 10
  %401 = and i1 %399, %400
  %402 = xor i1 %399, %400
  %403 = or i1 %401, %402
  %404 = or i1 %399, %400
  %405 = select i1 %403, i32 -841048476, i32 -1814680626
  store i32 %405, i32* %35
  br label %860

; <label>:406:                                    ; preds = %36
  %407 = load i32, i32* @x.68
  %408 = load i32, i32* @y.69
  %409 = sub i32 %407, 260918716
  %410 = sub i32 %409, 1
  %411 = add i32 %410, 260918716
  %412 = sub i32 %407, 1
  %413 = mul i32 %407, %411
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %408, 10
  %417 = xor i1 %415, true
  %418 = xor i1 %416, true
  %419 = xor i1 false, true
  %420 = and i1 %417, false
  %421 = and i1 %415, %419
  %422 = and i1 %418, false
  %423 = and i1 %416, %419
  %424 = or i1 %420, %421
  %425 = or i1 %422, %423
  %426 = xor i1 %424, %425
  %427 = or i1 %417, %418
  %428 = xor i1 %427, true
  %429 = or i1 false, %419
  %430 = and i1 %428, %429
  %431 = or i1 %426, %430
  %432 = or i1 %415, %416
  %433 = select i1 %431, i32 -1523340166, i32 -1814680626
  store i32 %433, i32* %35
  br label %860

; <label>:434:                                    ; preds = %36
  store i32 -1710349590, i32* %35
  br label %860

; <label>:435:                                    ; preds = %36
  %436 = load i32, i32* @x.68
  %437 = load i32, i32* @y.69
  %438 = sub i32 %436, -1334879613
  %439 = sub i32 %438, 1
  %440 = add i32 %439, -1334879613
  %441 = sub i32 %436, 1
  %442 = mul i32 %436, %440
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %437, 10
  %446 = xor i1 %444, true
  %447 = xor i1 %445, true
  %448 = xor i1 false, true
  %449 = and i1 %446, false
  %450 = and i1 %444, %448
  %451 = and i1 %447, false
  %452 = and i1 %445, %448
  %453 = or i1 %449, %450
  %454 = or i1 %451, %452
  %455 = xor i1 %453, %454
  %456 = or i1 %446, %447
  %457 = xor i1 %456, true
  %458 = or i1 false, %448
  %459 = and i1 %457, %458
  %460 = or i1 %455, %459
  %461 = or i1 %444, %445
  %462 = select i1 %460, i32 1235803390, i32 199988804
  store i32 %462, i32* %35
  br label %860

; <label>:463:                                    ; preds = %36
  %464 = load i64, i64* %14, align 8
  %465 = sub i64 0, %464
  %466 = sub i64 0, 1
  %467 = add i64 %465, %466
  %468 = sub i64 0, %467
  %469 = add nsw i64 %464, 1
  store i64 %468, i64* %14, align 8
  %470 = load i32, i32* @x.68
  %471 = load i32, i32* @y.69
  %472 = sub i32 %470, 611954589
  %473 = sub i32 %472, 1
  %474 = add i32 %473, 611954589
  %475 = sub i32 %470, 1
  %476 = mul i32 %470, %474
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %471, 10
  %480 = xor i1 %478, true
  %481 = xor i1 %479, true
  %482 = xor i1 false, true
  %483 = and i1 %480, false
  %484 = and i1 %478, %482
  %485 = and i1 %481, false
  %486 = and i1 %479, %482
  %487 = or i1 %483, %484
  %488 = or i1 %485, %486
  %489 = xor i1 %487, %488
  %490 = or i1 %480, %481
  %491 = xor i1 %490, true
  %492 = or i1 false, %482
  %493 = and i1 %491, %492
  %494 = or i1 %489, %493
  %495 = or i1 %478, %479
  %496 = select i1 %494, i32 -405268366, i32 199988804
  store i32 %496, i32* %35
  br label %860

; <label>:497:                                    ; preds = %36
  store i32 -1650838110, i32* %35
  br label %860

; <label>:498:                                    ; preds = %36
  store i64 0, i64* getelementptr inbounds ([200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 0, i64 0), align 16
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  store i32 649731721, i32* %35
  br label %860

; <label>:499:                                    ; preds = %36
  %500 = load i64, i64* %17, align 8
  %501 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* @s) #3
  %502 = icmp ult i64 %500, %501
  %503 = select i1 %502, i32 1707286231, i32 90974570
  store i32 %503, i32* %35
  br label %860

; <label>:504:                                    ; preds = %36
  store i64 0, i64* %18, align 8
  store i32 -1395984988, i32* %35
  br label %860

; <label>:505:                                    ; preds = %36
  %506 = load i32, i32* @x.68
  %507 = load i32, i32* @y.69
  %508 = add i32 %506, -1374100398
  %509 = sub i32 %508, 1
  %510 = sub i32 %509, -1374100398
  %511 = sub i32 %506, 1
  %512 = mul i32 %506, %510
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %507, 10
  %516 = xor i1 %514, true
  %517 = xor i1 %515, true
  %518 = xor i1 false, true
  %519 = and i1 %516, false
  %520 = and i1 %514, %518
  %521 = and i1 %517, false
  %522 = and i1 %515, %518
  %523 = or i1 %519, %520
  %524 = or i1 %521, %522
  %525 = xor i1 %523, %524
  %526 = or i1 %516, %517
  %527 = xor i1 %526, true
  %528 = or i1 false, %518
  %529 = and i1 %527, %528
  %530 = or i1 %525, %529
  %531 = or i1 %514, %515
  %532 = select i1 %530, i32 1122616416, i32 -1716830081
  store i32 %532, i32* %35
  br label %860

; <label>:533:                                    ; preds = %36
  %534 = load i64, i64* %18, align 8
  %535 = icmp slt i64 %534, 39
  store i1 %535, i1* %1
  %536 = load i32, i32* @x.68
  %537 = load i32, i32* @y.69
  %538 = add i32 %536, 75916728
  %539 = sub i32 %538, 1
  %540 = sub i32 %539, 75916728
  %541 = sub i32 %536, 1
  %542 = mul i32 %536, %540
  %543 = urem i32 %542, 2
  %544 = icmp eq i32 %543, 0
  %545 = icmp slt i32 %537, 10
  %546 = xor i1 %544, true
  %547 = xor i1 %545, true
  %548 = xor i1 true, true
  %549 = and i1 %546, true
  %550 = and i1 %544, %548
  %551 = and i1 %547, true
  %552 = and i1 %545, %548
  %553 = or i1 %549, %550
  %554 = or i1 %551, %552
  %555 = xor i1 %553, %554
  %556 = or i1 %546, %547
  %557 = xor i1 %556, true
  %558 = or i1 true, %548
  %559 = and i1 %557, %558
  %560 = or i1 %555, %559
  %561 = or i1 %544, %545
  %562 = select i1 %560, i32 -1747563315, i32 -1716830081
  store i32 %562, i32* %35
  br label %860

; <label>:563:                                    ; preds = %36
  %564 = load volatile i1, i1* %1
  %565 = select i1 %564, i32 1801775358, i32 -1469115492
  store i32 %565, i32* %35
  br label %860

; <label>:566:                                    ; preds = %36
  %567 = load i64, i64* %17, align 8
  %568 = add i64 %567, 1551334052577430169
  %569 = add i64 %568, 1
  %570 = sub i64 %569, 1551334052577430169
  %571 = add nsw i64 %567, 1
  %572 = getelementptr inbounds [200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 %570
  %573 = load i64, i64* %18, align 8
  %574 = getelementptr inbounds [40 x i64], [40 x i64]* %572, i64 0, i64 %573
  %575 = load i64, i64* %17, align 8
  %576 = getelementptr inbounds [200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 %575
  %577 = load i64, i64* %18, align 8
  %578 = getelementptr inbounds [40 x i64], [40 x i64]* %576, i64 0, i64 %577
  %579 = load i64, i64* %578, align 8
  call void @_Z5chminIxEvRT_S0_(i64* dereferenceable(8) %574, i64 %579)
  %580 = load i64, i64* %17, align 8
  %581 = sub i64 %580, 365713613611762017
  %582 = add i64 %581, 1
  %583 = add i64 %582, 365713613611762017
  %584 = add nsw i64 %580, 1
  %585 = getelementptr inbounds [200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 %583
  %586 = load i64, i64* %18, align 8
  %587 = sub i64 0, 1
  %588 = sub i64 %586, %587
  %589 = add nsw i64 %586, 1
  %590 = getelementptr inbounds [40 x i64], [40 x i64]* %585, i64 0, i64 %588
  %591 = load i64, i64* %17, align 8
  %592 = call dereferenceable(16) %struct.shop* @_ZNSt6vectorI4shopSaIS0_EEixEm(%"class.std::vector.4"* @s, i64 %591) #3
  %593 = getelementptr inbounds %struct.shop, %struct.shop* %592, i32 0, i32 0
  %594 = load i64, i64* %593, align 8
  %595 = sub i64 0, %594
  %596 = sub i64 0, 1
  %597 = add i64 %595, %596
  %598 = sub i64 0, %597
  %599 = add nsw i64 %594, 1
  %600 = load i64, i64* %17, align 8
  %601 = getelementptr inbounds [200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 %600
  %602 = load i64, i64* %18, align 8
  %603 = getelementptr inbounds [40 x i64], [40 x i64]* %601, i64 0, i64 %602
  %604 = load i64, i64* %603, align 8
  %605 = sub i64 0, 1
  %606 = sub i64 %604, %605
  %607 = add nsw i64 %604, 1
  %608 = mul nsw i64 %598, %606
  %609 = load i64, i64* %17, align 8
  %610 = call dereferenceable(16) %struct.shop* @_ZNSt6vectorI4shopSaIS0_EEixEm(%"class.std::vector.4"* @s, i64 %609) #3
  %611 = getelementptr inbounds %struct.shop, %struct.shop* %610, i32 0, i32 1
  %612 = load i64, i64* %611, align 8
  %613 = add i64 %608, -7342831779706062582
  %614 = add i64 %613, %612
  %615 = sub i64 %614, -7342831779706062582
  %616 = add nsw i64 %608, %612
  call void @_Z5chminIxEvRT_S0_(i64* dereferenceable(8) %590, i64 %615)
  store i32 1030900248, i32* %35
  br label %860

; <label>:617:                                    ; preds = %36
  %618 = load i64, i64* %18, align 8
  %619 = add i64 %618, -2068182687277187315
  %620 = add i64 %619, 1
  %621 = sub i64 %620, -2068182687277187315
  %622 = add nsw i64 %618, 1
  store i64 %621, i64* %18, align 8
  store i32 -1395984988, i32* %35
  br label %860

; <label>:623:                                    ; preds = %36
  store i32 -500969635, i32* %35
  br label %860

; <label>:624:                                    ; preds = %36
  %625 = load i64, i64* %17, align 8
  %626 = sub i64 0, 1
  %627 = sub i64 %625, %626
  %628 = add nsw i64 %625, 1
  store i64 %627, i64* %17, align 8
  store i32 649731721, i32* %35
  br label %860

; <label>:629:                                    ; preds = %36
  store i64 0, i64* %19, align 8
  store i32 889046171, i32* %35
  br label %860

; <label>:630:                                    ; preds = %36
  %631 = load i64, i64* %19, align 8
  %632 = icmp slt i64 %631, 40
  %633 = select i1 %632, i32 1121287648, i32 1033299926
  store i32 %633, i32* %35
  br label %860

; <label>:634:                                    ; preds = %36
  %635 = load i64, i64* @t, align 8
  %636 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* @s) #3
  %637 = getelementptr inbounds [200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 %636
  %638 = load i64, i64* %19, align 8
  %639 = getelementptr inbounds [40 x i64], [40 x i64]* %637, i64 0, i64 %638
  %640 = load i64, i64* %639, align 8
  %641 = icmp slt i64 %635, %640
  %642 = select i1 %641, i32 -1991395552, i32 65378071
  store i32 %642, i32* %35
  br label %860

; <label>:643:                                    ; preds = %36
  store i32 797781950, i32* %35
  br label %860

; <label>:644:                                    ; preds = %36
  %645 = load i64, i64* %19, align 8
  %646 = call i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"* @v) #3
  %647 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %21, i32 0, i32 0
  store i64* %646, i64** %647, align 8
  %648 = call i64* @_ZNSt6vectorIxSaIxEE3endEv(%"class.std::vector"* @v) #3
  %649 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %22, i32 0, i32 0
  store i64* %648, i64** %649, align 8
  %650 = load i64, i64* @t, align 8
  %651 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* @s) #3
  %652 = getelementptr inbounds [200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 %651
  %653 = load i64, i64* %19, align 8
  %654 = getelementptr inbounds [40 x i64], [40 x i64]* %652, i64 0, i64 %653
  %655 = load i64, i64* %654, align 8
  %656 = sub i64 %650, -4901783168511907337
  %657 = sub i64 %656, %655
  %658 = add i64 %657, -4901783168511907337
  %659 = sub nsw i64 %650, %655
  store i64 %658, i64* %23, align 8
  %660 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %21, i32 0, i32 0
  %661 = load i64*, i64** %660, align 8
  %662 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %22, i32 0, i32 0
  %663 = load i64*, i64** %662, align 8
  %664 = call i64* @_ZSt11upper_boundIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEExET_S7_S7_RKT0_(i64* %661, i64* %663, i64* dereferenceable(8) %23)
  %665 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %20, i32 0, i32 0
  store i64* %664, i64** %665, align 8
  %666 = call i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"* @v) #3
  %667 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %24, i32 0, i32 0
  store i64* %666, i64** %667, align 8
  %668 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %20, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %24) #3
  %669 = sub i64 0, 1
  %670 = add i64 %668, %669
  %671 = sub nsw i64 %668, 1
  %672 = sub i64 0, %670
  %673 = sub i64 %645, %672
  %674 = add nsw i64 %645, %670
  call void @_Z5chmaxIxEvRT_S0_(i64* dereferenceable(8) %16, i64 %673)
  store i32 797781950, i32* %35
  br label %860

; <label>:675:                                    ; preds = %36
  %676 = load i64, i64* %19, align 8
  %677 = sub i64 0, 1
  %678 = sub i64 %676, %677
  %679 = add nsw i64 %676, 1
  store i64 %678, i64* %19, align 8
  store i32 889046171, i32* %35
  br label %860

; <label>:680:                                    ; preds = %36
  %681 = load i64, i64* %16, align 8
  %682 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* @_ZSt4cout, i64 %681)
  %683 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* %682, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0

; <label>:684:                                    ; preds = %36
  %685 = load i64, i64* %6, align 8
  %686 = sub i64 0, 1
  %687 = add i64 %685, %686
  %688 = sub i64 %685, 1
  %689 = mul i64 %687, 1
  %690 = shl i64 %685, 1
  %691 = sub i64 0, 1
  %692 = add i64 %685, %691
  %693 = sub i64 %685, 1
  %694 = mul i64 %692, 1
  %695 = sub i64 0, %685
  %696 = sub i64 0, 1
  %697 = add i64 %695, %696
  %698 = sub i64 0, %697
  %699 = add nsw i64 %685, 1
  store i64 %698, i64* %8, align 8
  call void @_ZNSt6vectorIxSaIxEE9push_backEOx(%"class.std::vector"* @v, i64* dereferenceable(8) %8)
  store i32 906300863, i32* %35
  br label %860

; <label>:700:                                    ; preds = %36
  %701 = load i64, i64* %4, align 8
  %702 = sub i64 0, 1
  %703 = add i64 %701, %702
  %704 = sub i64 %701, 1
  %705 = mul i64 %703, 1
  %706 = add i64 %701, 7764348324808884353
  %707 = sub i64 %706, 1
  %708 = sub i64 %707, 7764348324808884353
  %709 = sub i64 %701, 1
  %710 = mul i64 %708, 1
  %711 = shl i64 %701, 1
  %712 = sub i64 0, %701
  %713 = add i64 0, %712
  %714 = sub i64 0, %701
  %715 = sub i64 0, 1
  %716 = sub i64 %713, %715
  %717 = add i64 %713, 1
  %718 = add i64 0, 7446842513730206609
  %719 = sub i64 %718, %701
  %720 = sub i64 %719, 7446842513730206609
  %721 = sub i64 0, %701
  %722 = sub i64 0, 1
  %723 = sub i64 %720, %722
  %724 = add i64 %720, 1
  %725 = sub i64 %701, -8731062153353044972
  %726 = sub i64 %725, 1
  %727 = add i64 %726, -8731062153353044972
  %728 = sub i64 %701, 1
  %729 = mul i64 %727, 1
  %730 = add i64 0, 6514953847290496553
  %731 = sub i64 %730, %701
  %732 = sub i64 %731, 6514953847290496553
  %733 = sub i64 0, %701
  %734 = sub i64 %732, 383000852709491915
  %735 = add i64 %734, 1
  %736 = add i64 %735, 383000852709491915
  %737 = add i64 %732, 1
  %738 = shl i64 %701, 1
  %739 = add i64 %701, 8723571422003550589
  %740 = add i64 %739, 1
  %741 = sub i64 %740, 8723571422003550589
  %742 = add nsw i64 %701, 1
  store i64 %741, i64* %4, align 8
  store i32 655065962, i32* %35
  br label %860

; <label>:743:                                    ; preds = %36
  %744 = load i64, i64* %13, align 8
  %745 = sub i64 0, 5808611622492493975
  %746 = sub i64 %745, %744
  %747 = add i64 %746, 5808611622492493975
  %748 = sub i64 0, %744
  %749 = sub i64 0, %747
  %750 = sub i64 0, 1
  %751 = add i64 %749, %750
  %752 = sub i64 0, %751
  %753 = add i64 %747, 1
  %754 = sub i64 0, %744
  %755 = add i64 0, %754
  %756 = sub i64 0, %744
  %757 = sub i64 %755, -5222163288462456723
  %758 = add i64 %757, 1
  %759 = add i64 %758, -5222163288462456723
  %760 = add i64 %755, 1
  %761 = sub i64 0, 1
  %762 = add i64 %744, %761
  %763 = sub nsw i64 %744, 1
  %764 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @v, i64 %762) #3
  %765 = load i64, i64* %764, align 8
  %766 = load i64, i64* %13, align 8
  %767 = call dereferenceable(8) i64* @_ZNSt6vectorIxSaIxEEixEm(%"class.std::vector"* @v, i64 %766) #3
  %768 = load i64, i64* %767, align 8
  %769 = add i64 %768, 4907386506031193477
  %770 = sub i64 %769, %765
  %771 = sub i64 %770, 4907386506031193477
  %772 = sub i64 %768, %765
  %773 = mul i64 %771, %765
  %774 = sub i64 0, %765
  %775 = add i64 %768, %774
  %776 = sub i64 %768, %765
  %777 = mul i64 %775, %765
  %778 = sub i64 %768, -3009886686169715541
  %779 = sub i64 %778, %765
  %780 = add i64 %779, -3009886686169715541
  %781 = sub i64 %768, %765
  %782 = mul i64 %780, %765
  %783 = sub i64 0, %765
  %784 = sub i64 %768, %783
  %785 = add nsw i64 %768, %765
  store i64 %784, i64* %767, align 8
  store i32 2067143611, i32* %35
  br label %860

; <label>:786:                                    ; preds = %36
  %787 = load i64, i64* %14, align 8
  %788 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* @s) #3
  %789 = shl i64 %788, 1
  %790 = shl i64 %788, 1
  %791 = shl i64 %788, 1
  %792 = sub i64 0, %788
  %793 = add i64 0, %792
  %794 = sub i64 0, %788
  %795 = sub i64 0, %793
  %796 = sub i64 0, 1
  %797 = add i64 %795, %796
  %798 = sub i64 0, %797
  %799 = add i64 %793, 1
  %800 = shl i64 %788, 1
  %801 = sub i64 0, -3563729489952226673
  %802 = sub i64 %801, %788
  %803 = add i64 %802, -3563729489952226673
  %804 = sub i64 0, %788
  %805 = sub i64 0, 1
  %806 = sub i64 %803, %805
  %807 = add i64 %803, 1
  %808 = sub i64 0, %788
  %809 = sub i64 0, 1
  %810 = add i64 %808, %809
  %811 = sub i64 0, %810
  %812 = add i64 %788, 1
  %813 = icmp ult i64 %787, %811
  store i32 -100214765, i32* %35
  br label %860

; <label>:814:                                    ; preds = %36
  store i64 0, i64* %15, align 8
  store i32 331535717, i32* %35
  br label %860

; <label>:815:                                    ; preds = %36
  %816 = load i64, i64* @t, align 8
  %817 = shl i64 %816, 1
  %818 = sub i64 0, 1
  %819 = add i64 %816, %818
  %820 = sub i64 %816, 1
  %821 = mul i64 %819, 1
  %822 = sub i64 0, %816
  %823 = sub i64 0, 1
  %824 = add i64 %822, %823
  %825 = sub i64 0, %824
  %826 = add nsw i64 %816, 1
  %827 = load i64, i64* %14, align 8
  %828 = getelementptr inbounds [200010 x [40 x i64]], [200010 x [40 x i64]]* @dp, i64 0, i64 %827
  %829 = load i64, i64* %15, align 8
  %830 = getelementptr inbounds [40 x i64], [40 x i64]* %828, i64 0, i64 %829
  store i64 %825, i64* %830, align 8
  store i32 -1860191448, i32* %35
  br label %860

; <label>:831:                                    ; preds = %36
  store i32 -841048476, i32* %35
  br label %860

; <label>:832:                                    ; preds = %36
  %833 = load i64, i64* %14, align 8
  %834 = shl i64 %833, 1
  %835 = sub i64 %833, 9116496294915731298
  %836 = sub i64 %835, 1
  %837 = add i64 %836, 9116496294915731298
  %838 = sub i64 %833, 1
  %839 = mul i64 %837, 1
  %840 = shl i64 %833, 1
  %841 = shl i64 %833, 1
  %842 = sub i64 0, %833
  %843 = add i64 0, %842
  %844 = sub i64 0, %833
  %845 = sub i64 0, 1
  %846 = sub i64 %843, %845
  %847 = add i64 %843, 1
  %848 = sub i64 0, 1
  %849 = add i64 %833, %848
  %850 = sub i64 %833, 1
  %851 = mul i64 %849, 1
  %852 = shl i64 %833, 1
  %853 = sub i64 %833, 6323098849493531260
  %854 = add i64 %853, 1
  %855 = add i64 %854, 6323098849493531260
  %856 = add nsw i64 %833, 1
  store i64 %855, i64* %14, align 8
  store i32 1235803390, i32* %35
  br label %860

; <label>:857:                                    ; preds = %36
  %858 = load i64, i64* %18, align 8
  %859 = icmp slt i64 %858, 39
  store i32 1122616416, i32* %35
  br label %860

; <label>:860:                                    ; preds = %857, %832, %831, %815, %814, %786, %743, %700, %684, %675, %644, %643, %634, %630, %629, %624, %623, %617, %566, %563, %533, %505, %504, %499, %498, %497, %463, %435, %434, %406, %390, %384, %383, %347, %331, %327, %326, %310, %295, %292, %270, %242, %241, %234, %233, %191, %175, %170, %153, %152, %131, %104, %103, %102, %83, %55, %50, %44, %39, %38
  br label %36
}

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) #1

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) #1

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorI4shopSaIS0_EE9push_backEOS0_(%"class.std::vector.4"*, %struct.shop* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %"class.std::vector.4"*, align 8
  %4 = alloca %struct.shop*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %3, align 8
  store %struct.shop* %1, %struct.shop** %4, align 8
  %5 = load %"class.std::vector.4"*, %"class.std::vector.4"** %3, align 8
  %6 = load %struct.shop*, %struct.shop** %4, align 8
  %7 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %6) #3
  call void @_ZNSt6vectorI4shopSaIS0_EE12emplace_backIJS0_EEEvDpOT_(%"class.std::vector.4"* %5, %struct.shop* dereferenceable(16) %7)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE9push_backEOx(%"class.std::vector"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca %"class.std::vector"*, align 8
  %4 = alloca i64*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %6 = load i64*, i64** %4, align 8
  %7 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %6) #3
  call void @_ZNSt6vectorIxSaIxEE12emplace_backIJxEEEvDpOT_(%"class.std::vector"* %5, i64* dereferenceable(8) %7)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt4sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEPFbRKS2_S9_EEvT_SC_T0_(%struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.74
  %7 = load i32, i32* @y.75
  %8 = add i32 %6, -2000842291
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, -2000842291
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 981543122, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %88
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 981543122, label %20
    i32 927422340, label %28
    i32 -2103266924, label %65
    i32 -2144917812, label %66
  ]

; <label>:19:                                     ; preds = %17
  br label %88

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 927422340, i32 -2144917812
  store i32 %27, i32* %16
  br label %88

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %31 = alloca i1 (%struct.shop*, %struct.shop*)*, align 8
  %32 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %33 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %34 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %29, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %35, align 8
  %36 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %30, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %36, align 8
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %31, align 8
  %37 = bitcast %"class.__gnu_cxx::__normal_iterator"* %32 to i8*
  %38 = bitcast %"class.__gnu_cxx::__normal_iterator"* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 8, i32 8, i1 false)
  %39 = bitcast %"class.__gnu_cxx::__normal_iterator"* %33 to i8*
  %40 = bitcast %"class.__gnu_cxx::__normal_iterator"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 8, i32 8, i1 false)
  %41 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %31, align 8
  %42 = call i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops16__iter_comp_iterIPFbRK4shopS4_EEENS0_15_Iter_comp_iterIT_EES8_(i1 (%struct.shop*, %struct.shop*)* %41)
  %43 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %34, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %42, i1 (%struct.shop*, %struct.shop*)** %43, align 8
  %44 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %32, i32 0, i32 0
  %45 = load %struct.shop*, %struct.shop** %44, align 8
  %46 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %33, i32 0, i32 0
  %47 = load %struct.shop*, %struct.shop** %46, align 8
  %48 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %34, i32 0, i32 0
  %49 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %48, align 8
  call void @_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %45, %struct.shop* %47, i1 (%struct.shop*, %struct.shop*)* %49)
  %50 = load i32, i32* @x.74
  %51 = load i32, i32* @y.75
  %52 = sub i32 %50, -1219267142
  %53 = sub i32 %52, 1
  %54 = add i32 %53, -1219267142
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = and i1 %58, %59
  %61 = xor i1 %58, %59
  %62 = or i1 %60, %61
  %63 = or i1 %58, %59
  %64 = select i1 %62, i32 -2103266924, i32 -2144917812
  store i32 %64, i32* %16
  br label %88

; <label>:65:                                     ; preds = %17
  ret void

; <label>:66:                                     ; preds = %17
  %67 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %68 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %69 = alloca i1 (%struct.shop*, %struct.shop*)*, align 8
  %70 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %71 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %72 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %73 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %67, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %73, align 8
  %74 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %68, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %74, align 8
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %69, align 8
  %75 = bitcast %"class.__gnu_cxx::__normal_iterator"* %70 to i8*
  %76 = bitcast %"class.__gnu_cxx::__normal_iterator"* %67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %75, i8* %76, i64 8, i32 8, i1 false)
  %77 = bitcast %"class.__gnu_cxx::__normal_iterator"* %71 to i8*
  %78 = bitcast %"class.__gnu_cxx::__normal_iterator"* %68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* %78, i64 8, i32 8, i1 false)
  %79 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %69, align 8
  %80 = call i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops16__iter_comp_iterIPFbRK4shopS4_EEENS0_15_Iter_comp_iterIT_EES8_(i1 (%struct.shop*, %struct.shop*)* %79)
  %81 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %72, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %80, i1 (%struct.shop*, %struct.shop*)** %81, align 8
  %82 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %70, i32 0, i32 0
  %83 = load %struct.shop*, %struct.shop** %82, align 8
  %84 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %71, i32 0, i32 0
  %85 = load %struct.shop*, %struct.shop** %84, align 8
  %86 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %72, i32 0, i32 0
  %87 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %86, align 8
  call void @_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %83, %struct.shop* %85, i1 (%struct.shop*, %struct.shop*)* %87)
  store i32 927422340, i32* %16
  br label %88

; <label>:88:                                     ; preds = %66, %28, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNSt6vectorI4shopSaIS0_EE5beginEv(%"class.std::vector.4"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %3 = alloca %"class.std::vector.4"*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %3, align 8
  %4 = load %"class.std::vector.4"*, %"class.std::vector.4"** %3, align 8
  %5 = bitcast %"class.std::vector.4"* %4 to %"struct.std::_Vector_base.5"*
  %6 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %6, i32 0, i32 0
  call void @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEC2ERKS2_(%"class.__gnu_cxx::__normal_iterator"* %2, %struct.shop** dereferenceable(8) %7) #3
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %2, i32 0, i32 0
  %9 = load %struct.shop*, %struct.shop** %8, align 8
  ret %struct.shop* %9
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNSt6vectorI4shopSaIS0_EE3endEv(%"class.std::vector.4"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %3 = alloca %"class.std::vector.4"*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %3, align 8
  %4 = load %"class.std::vector.4"*, %"class.std::vector.4"** %3, align 8
  %5 = bitcast %"class.std::vector.4"* %4 to %"struct.std::_Vector_base.5"*
  %6 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %6, i32 0, i32 1
  call void @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEC2ERKS2_(%"class.__gnu_cxx::__normal_iterator"* %2, %struct.shop** dereferenceable(8) %7) #3
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %2, i32 0, i32 0
  %9 = load %struct.shop*, %struct.shop** %8, align 8
  ret %struct.shop* %9
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEEvT_S7_(i64*, i64*) #0 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %9 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  store i64* %0, i64** %9, align 8
  %10 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %1, i64** %10, align 8
  %11 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  %12 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 8, i32 8, i1 false)
  %13 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  %14 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 8, i32 8, i1 false)
  call void @_ZN9__gnu_cxx5__ops16__iter_less_iterEv()
  %15 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  %16 = load i64*, i64** %15, align 8
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  %18 = load i64*, i64** %17, align 8
  call void @_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %16, i64* %18)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt6vectorIxSaIxEE5beginEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %3 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  %4 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %5 = bitcast %"class.std::vector"* %4 to %"struct.std::_Vector_base"*
  %6 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %6, i32 0, i32 0
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.9"* %2, i64** dereferenceable(8) %7) #3
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %2, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  ret i64* %9
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt6vectorIxSaIxEE3endEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.84
  %6 = load i32, i32* @y.85
  %7 = add i32 %5, -260308973
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -260308973
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1421355125, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %86
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1421355125, label %19
    i32 1951322019, label %39
    i32 1800127387, label %75
    i32 2050498108, label %77
  ]

; <label>:18:                                     ; preds = %16
  br label %86

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 1951322019, i32 2050498108
  store i32 %38, i32* %15
  br label %86

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %41 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %41, align 8
  %42 = load %"class.std::vector"*, %"class.std::vector"** %41, align 8
  %43 = bitcast %"class.std::vector"* %42 to %"struct.std::_Vector_base"*
  %44 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %43, i32 0, i32 0
  %45 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %44, i32 0, i32 1
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.9"* %40, i64** dereferenceable(8) %45) #3
  %46 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %40, i32 0, i32 0
  %47 = load i64*, i64** %46, align 8
  store i64* %47, i64** %2
  %48 = load i32, i32* @x.84
  %49 = load i32, i32* @y.85
  %50 = add i32 %48, -493778579
  %51 = sub i32 %50, 1
  %52 = sub i32 %51, -493778579
  %53 = sub i32 %48, 1
  %54 = mul i32 %48, %52
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %49, 10
  %58 = xor i1 %56, true
  %59 = xor i1 %57, true
  %60 = xor i1 false, true
  %61 = and i1 %58, false
  %62 = and i1 %56, %60
  %63 = and i1 %59, false
  %64 = and i1 %57, %60
  %65 = or i1 %61, %62
  %66 = or i1 %63, %64
  %67 = xor i1 %65, %66
  %68 = or i1 %58, %59
  %69 = xor i1 %68, true
  %70 = or i1 false, %60
  %71 = and i1 %69, %70
  %72 = or i1 %67, %71
  %73 = or i1 %56, %57
  %74 = select i1 %72, i32 1800127387, i32 2050498108
  store i32 %74, i32* %15
  br label %86

; <label>:75:                                     ; preds = %16
  %76 = load volatile i64*, i64** %2
  ret i64* %76

; <label>:77:                                     ; preds = %16
  %78 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %79 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %79, align 8
  %80 = load %"class.std::vector"*, %"class.std::vector"** %79, align 8
  %81 = bitcast %"class.std::vector"* %80 to %"struct.std::_Vector_base"*
  %82 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %81, i32 0, i32 0
  %83 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %82, i32 0, i32 1
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.9"* %78, i64** dereferenceable(8) %83) #3
  %84 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %78, i32 0, i32 0
  %85 = load i64*, i64** %84, align 8
  store i32 1951322019, i32* %15
  br label %86

; <label>:86:                                     ; preds = %77, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca i64
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.86
  %6 = load i32, i32* @y.87
  %7 = add i32 %5, 1963586463
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, 1963586463
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1639351800, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %141
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1639351800, label %19
    i32 -1907422348, label %39
    i32 187383719, label %83
    i32 2098860007, label %85
  ]

; <label>:18:                                     ; preds = %16
  br label %141

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -1907422348, i32 2098860007
  store i32 %38, i32* %15
  br label %141

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %40, align 8
  %41 = load %"class.std::vector"*, %"class.std::vector"** %40, align 8
  %42 = bitcast %"class.std::vector"* %41 to %"struct.std::_Vector_base"*
  %43 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %42, i32 0, i32 0
  %44 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %43, i32 0, i32 1
  %45 = load i64*, i64** %44, align 8
  %46 = bitcast %"class.std::vector"* %41 to %"struct.std::_Vector_base"*
  %47 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %46, i32 0, i32 0
  %48 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %47, i32 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = ptrtoint i64* %45 to i64
  %51 = ptrtoint i64* %49 to i64
  %52 = sub i64 0, %51
  %53 = add i64 %50, %52
  %54 = sub i64 %50, %51
  %55 = sdiv exact i64 %53, 8
  store i64 %55, i64* %2
  %56 = load i32, i32* @x.86
  %57 = load i32, i32* @y.87
  %58 = add i32 %56, 509279578
  %59 = sub i32 %58, 1
  %60 = sub i32 %59, 509279578
  %61 = sub i32 %56, 1
  %62 = mul i32 %56, %60
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %57, 10
  %66 = xor i1 %64, true
  %67 = xor i1 %65, true
  %68 = xor i1 false, true
  %69 = and i1 %66, false
  %70 = and i1 %64, %68
  %71 = and i1 %67, false
  %72 = and i1 %65, %68
  %73 = or i1 %69, %70
  %74 = or i1 %71, %72
  %75 = xor i1 %73, %74
  %76 = or i1 %66, %67
  %77 = xor i1 %76, true
  %78 = or i1 false, %68
  %79 = and i1 %77, %78
  %80 = or i1 %75, %79
  %81 = or i1 %64, %65
  %82 = select i1 %80, i32 187383719, i32 2098860007
  store i32 %82, i32* %15
  br label %141

; <label>:83:                                     ; preds = %16
  %84 = load volatile i64, i64* %2
  ret i64 %84

; <label>:85:                                     ; preds = %16
  %86 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %86, align 8
  %87 = load %"class.std::vector"*, %"class.std::vector"** %86, align 8
  %88 = bitcast %"class.std::vector"* %87 to %"struct.std::_Vector_base"*
  %89 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %88, i32 0, i32 0
  %90 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %89, i32 0, i32 1
  %91 = load i64*, i64** %90, align 8
  %92 = bitcast %"class.std::vector"* %87 to %"struct.std::_Vector_base"*
  %93 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %92, i32 0, i32 0
  %94 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %93, i32 0, i32 0
  %95 = load i64*, i64** %94, align 8
  %96 = ptrtoint i64* %91 to i64
  %97 = ptrtoint i64* %95 to i64
  %98 = shl i64 %96, %97
  %99 = add i64 %96, 6607370224335557146
  %100 = sub i64 %99, %97
  %101 = sub i64 %100, 6607370224335557146
  %102 = sub i64 %96, %97
  %103 = mul i64 %101, %97
  %104 = add i64 %96, -3949854615178152702
  %105 = sub i64 %104, %97
  %106 = sub i64 %105, -3949854615178152702
  %107 = sub i64 %96, %97
  %108 = mul i64 %106, %97
  %109 = shl i64 %96, %97
  %110 = sub i64 0, 3273285574196986380
  %111 = sub i64 %110, %96
  %112 = add i64 %111, 3273285574196986380
  %113 = sub i64 0, %96
  %114 = sub i64 0, %112
  %115 = sub i64 0, %97
  %116 = add i64 %114, %115
  %117 = sub i64 0, %116
  %118 = add i64 %112, %97
  %119 = sub i64 0, %97
  %120 = add i64 %96, %119
  %121 = sub i64 %96, %97
  %122 = sub i64 %120, 6872241622076632537
  %123 = sub i64 %122, 8
  %124 = add i64 %123, 6872241622076632537
  %125 = sub i64 %120, 8
  %126 = mul i64 %124, 8
  %127 = sub i64 %120, 1219101703982056874
  %128 = sub i64 %127, 8
  %129 = add i64 %128, 1219101703982056874
  %130 = sub i64 %120, 8
  %131 = mul i64 %129, 8
  %132 = sub i64 0, %120
  %133 = add i64 0, %132
  %134 = sub i64 0, %120
  %135 = sub i64 %133, -7756394322548305534
  %136 = add i64 %135, 8
  %137 = add i64 %136, -7756394322548305534
  %138 = add i64 %133, 8
  %139 = shl i64 %120, 8
  %140 = sdiv exact i64 %120, 8
  store i32 -1907422348, i32* %15
  br label %141

; <label>:141:                                    ; preds = %85, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"*) #4 comdat align 2 {
  %2 = alloca i64
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.88
  %6 = load i32, i32* @y.89
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 757645534, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %142
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 757645534, label %18
    i32 -1516914340, label %26
    i32 -2014770716, label %69
    i32 2010073474, label %71
  ]

; <label>:17:                                     ; preds = %15
  br label %142

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 -1516914340, i32 2010073474
  store i32 %25, i32* %14
  br label %142

; <label>:26:                                     ; preds = %15
  %27 = alloca %"class.std::vector.4"*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %27, align 8
  %28 = load %"class.std::vector.4"*, %"class.std::vector.4"** %27, align 8
  %29 = bitcast %"class.std::vector.4"* %28 to %"struct.std::_Vector_base.5"*
  %30 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %29, i32 0, i32 0
  %31 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %30, i32 0, i32 1
  %32 = load %struct.shop*, %struct.shop** %31, align 8
  %33 = bitcast %"class.std::vector.4"* %28 to %"struct.std::_Vector_base.5"*
  %34 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %33, i32 0, i32 0
  %35 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %34, i32 0, i32 0
  %36 = load %struct.shop*, %struct.shop** %35, align 8
  %37 = ptrtoint %struct.shop* %32 to i64
  %38 = ptrtoint %struct.shop* %36 to i64
  %39 = sub i64 0, %38
  %40 = add i64 %37, %39
  %41 = sub i64 %37, %38
  %42 = sdiv exact i64 %40, 16
  store i64 %42, i64* %2
  %43 = load i32, i32* @x.88
  %44 = load i32, i32* @y.89
  %45 = sub i32 0, 1
  %46 = add i32 %43, %45
  %47 = sub i32 %43, 1
  %48 = mul i32 %43, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %44, 10
  %52 = xor i1 %50, true
  %53 = xor i1 %51, true
  %54 = xor i1 true, true
  %55 = and i1 %52, true
  %56 = and i1 %50, %54
  %57 = and i1 %53, true
  %58 = and i1 %51, %54
  %59 = or i1 %55, %56
  %60 = or i1 %57, %58
  %61 = xor i1 %59, %60
  %62 = or i1 %52, %53
  %63 = xor i1 %62, true
  %64 = or i1 true, %54
  %65 = and i1 %63, %64
  %66 = or i1 %61, %65
  %67 = or i1 %50, %51
  %68 = select i1 %66, i32 -2014770716, i32 2010073474
  store i32 %68, i32* %14
  br label %142

; <label>:69:                                     ; preds = %15
  %70 = load volatile i64, i64* %2
  ret i64 %70

; <label>:71:                                     ; preds = %15
  %72 = alloca %"class.std::vector.4"*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %72, align 8
  %73 = load %"class.std::vector.4"*, %"class.std::vector.4"** %72, align 8
  %74 = bitcast %"class.std::vector.4"* %73 to %"struct.std::_Vector_base.5"*
  %75 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %74, i32 0, i32 0
  %76 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %75, i32 0, i32 1
  %77 = load %struct.shop*, %struct.shop** %76, align 8
  %78 = bitcast %"class.std::vector.4"* %73 to %"struct.std::_Vector_base.5"*
  %79 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %78, i32 0, i32 0
  %80 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %79, i32 0, i32 0
  %81 = load %struct.shop*, %struct.shop** %80, align 8
  %82 = ptrtoint %struct.shop* %77 to i64
  %83 = ptrtoint %struct.shop* %81 to i64
  %84 = sub i64 0, 3326400714435779799
  %85 = sub i64 %84, %82
  %86 = add i64 %85, 3326400714435779799
  %87 = sub i64 0, %82
  %88 = sub i64 %86, 7475524549009906450
  %89 = add i64 %88, %83
  %90 = add i64 %89, 7475524549009906450
  %91 = add i64 %86, %83
  %92 = shl i64 %82, %83
  %93 = shl i64 %82, %83
  %94 = sub i64 %82, 1381904148309780619
  %95 = sub i64 %94, %83
  %96 = add i64 %95, 1381904148309780619
  %97 = sub i64 %82, %83
  %98 = mul i64 %96, %83
  %99 = sub i64 0, 8277576159725799459
  %100 = sub i64 %99, %82
  %101 = add i64 %100, 8277576159725799459
  %102 = sub i64 0, %82
  %103 = sub i64 %101, 8147608860039823720
  %104 = add i64 %103, %83
  %105 = add i64 %104, 8147608860039823720
  %106 = add i64 %101, %83
  %107 = sub i64 %82, -2790939581760597659
  %108 = sub i64 %107, %83
  %109 = add i64 %108, -2790939581760597659
  %110 = sub i64 %82, %83
  %111 = sub i64 0, %109
  %112 = add i64 0, %111
  %113 = sub i64 0, %109
  %114 = sub i64 0, 16
  %115 = sub i64 %112, %114
  %116 = add i64 %112, 16
  %117 = shl i64 %109, 16
  %118 = add i64 0, -4874019414509630791
  %119 = sub i64 %118, %109
  %120 = sub i64 %119, -4874019414509630791
  %121 = sub i64 0, %109
  %122 = add i64 %120, 3046895954226012806
  %123 = add i64 %122, 16
  %124 = sub i64 %123, 3046895954226012806
  %125 = add i64 %120, 16
  %126 = sub i64 %109, -9201723708578730349
  %127 = sub i64 %126, 16
  %128 = add i64 %127, -9201723708578730349
  %129 = sub i64 %109, 16
  %130 = mul i64 %128, 16
  %131 = sub i64 0, %109
  %132 = add i64 0, %131
  %133 = sub i64 0, %109
  %134 = sub i64 0, 16
  %135 = sub i64 %132, %134
  %136 = add i64 %132, 16
  %137 = sub i64 0, 16
  %138 = add i64 %109, %137
  %139 = sub i64 %109, 16
  %140 = mul i64 %138, 16
  %141 = sdiv exact i64 %109, 16
  store i32 -1516914340, i32* %14
  br label %142

; <label>:142:                                    ; preds = %71, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z5chminIxEvRT_S0_(i64* dereferenceable(8), i64) #4 comdat {
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i64 %1, i64* %6, align 8
  %7 = load i64*, i64** %5, align 8
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %4
  %9 = load i64, i64* %6, align 8
  store i64 %9, i64* %3
  %10 = alloca i32
  store i32 -1111149595, i32* %10
  br label %11

; <label>:11:                                     ; preds = %2, %23
  %12 = load i32, i32* %10
  switch i32 %12, label %13 [
    i32 -1111149595, label %14
    i32 -2035700843, label %19
    i32 1378527502, label %22
  ]

; <label>:13:                                     ; preds = %11
  br label %23

; <label>:14:                                     ; preds = %11
  %15 = load volatile i64, i64* %4
  %16 = load volatile i64, i64* %3
  %17 = icmp sgt i64 %15, %16
  %18 = select i1 %17, i32 -2035700843, i32 1378527502
  store i32 %18, i32* %10
  br label %23

; <label>:19:                                     ; preds = %11
  %20 = load i64, i64* %6, align 8
  %21 = load i64*, i64** %5, align 8
  store i64 %20, i64* %21, align 8
  store i32 1378527502, i32* %10
  br label %23

; <label>:22:                                     ; preds = %11
  ret void

; <label>:23:                                     ; preds = %19, %14, %13
  br label %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(16) %struct.shop* @_ZNSt6vectorI4shopSaIS0_EEixEm(%"class.std::vector.4"*, i64) #4 comdat align 2 {
  %3 = alloca %struct.shop*
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.92
  %7 = load i32, i32* @y.93
  %8 = sub i32 %6, 1126992699
  %9 = sub i32 %8, 1
  %10 = add i32 %9, 1126992699
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 600478194, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %76
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 600478194, label %20
    i32 -452812937, label %40
    i32 688917579, label %64
    i32 -1465690763, label %66
  ]

; <label>:19:                                     ; preds = %17
  br label %76

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 true, true
  %26 = and i1 %23, true
  %27 = and i1 %21, %25
  %28 = and i1 %24, true
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 true, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 -452812937, i32 -1465690763
  store i32 %39, i32* %16
  br label %76

; <label>:40:                                     ; preds = %17
  %41 = alloca %"class.std::vector.4"*, align 8
  %42 = alloca i64, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %41, align 8
  store i64 %1, i64* %42, align 8
  %43 = load %"class.std::vector.4"*, %"class.std::vector.4"** %41, align 8
  %44 = bitcast %"class.std::vector.4"* %43 to %"struct.std::_Vector_base.5"*
  %45 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %44, i32 0, i32 0
  %46 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %45, i32 0, i32 0
  %47 = load %struct.shop*, %struct.shop** %46, align 8
  %48 = load i64, i64* %42, align 8
  %49 = getelementptr inbounds %struct.shop, %struct.shop* %47, i64 %48
  store %struct.shop* %49, %struct.shop** %3
  %50 = load i32, i32* @x.92
  %51 = load i32, i32* @y.93
  %52 = sub i32 0, 1
  %53 = add i32 %50, %52
  %54 = sub i32 %50, 1
  %55 = mul i32 %50, %53
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %51, 10
  %59 = and i1 %57, %58
  %60 = xor i1 %57, %58
  %61 = or i1 %59, %60
  %62 = or i1 %57, %58
  %63 = select i1 %61, i32 688917579, i32 -1465690763
  store i32 %63, i32* %16
  br label %76

; <label>:64:                                     ; preds = %17
  %65 = load volatile %struct.shop*, %struct.shop** %3
  ret %struct.shop* %65

; <label>:66:                                     ; preds = %17
  %67 = alloca %"class.std::vector.4"*, align 8
  %68 = alloca i64, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %67, align 8
  store i64 %1, i64* %68, align 8
  %69 = load %"class.std::vector.4"*, %"class.std::vector.4"** %67, align 8
  %70 = bitcast %"class.std::vector.4"* %69 to %"struct.std::_Vector_base.5"*
  %71 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %70, i32 0, i32 0
  %72 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %71, i32 0, i32 0
  %73 = load %struct.shop*, %struct.shop** %72, align 8
  %74 = load i64, i64* %68, align 8
  %75 = getelementptr inbounds %struct.shop, %struct.shop* %73, i64 %74
  store i32 -452812937, i32* %16
  br label %76

; <label>:76:                                     ; preds = %66, %40, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z5chmaxIxEvRT_S0_(i64* dereferenceable(8), i64) #4 comdat {
  %3 = alloca i1
  %4 = alloca i64*
  %5 = alloca i64**
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.94
  %9 = load i32, i32* @y.95
  %10 = add i32 %8, 2131233268
  %11 = sub i32 %10, 1
  %12 = sub i32 %11, 2131233268
  %13 = sub i32 %8, 1
  %14 = mul i32 %8, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %7
  %17 = icmp slt i32 %9, 10
  store i1 %17, i1* %6
  %18 = alloca i32
  store i32 1884455090, i32* %18
  br label %19

; <label>:19:                                     ; preds = %2, %116
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 1884455090, label %22
    i32 337754949, label %30
    i32 -793021500, label %56
    i32 -198657692, label %59
    i32 -1226203887, label %64
    i32 -300618697, label %80
    i32 -1222364564, label %107
    i32 1006525960, label %108
    i32 -503738028, label %115
  ]

; <label>:21:                                     ; preds = %19
  br label %116

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %7
  %24 = load volatile i1, i1* %6
  %25 = and i1 %23, %24
  %26 = xor i1 %23, %24
  %27 = or i1 %25, %26
  %28 = or i1 %23, %24
  %29 = select i1 %27, i32 337754949, i32 1006525960
  store i32 %29, i32* %18
  br label %116

; <label>:30:                                     ; preds = %19
  %31 = alloca i64*, align 8
  store i64** %31, i64*** %5
  %32 = alloca i64, align 8
  store i64* %32, i64** %4
  %33 = load volatile i64**, i64*** %5
  store i64* %0, i64** %33, align 8
  %34 = load volatile i64*, i64** %4
  store i64 %1, i64* %34, align 8
  %35 = load volatile i64**, i64*** %5
  %36 = load i64*, i64** %35, align 8
  %37 = load i64, i64* %36, align 8
  %38 = load volatile i64*, i64** %4
  %39 = load i64, i64* %38, align 8
  %40 = icmp slt i64 %37, %39
  store i1 %40, i1* %3
  %41 = load i32, i32* @x.94
  %42 = load i32, i32* @y.95
  %43 = sub i32 %41, 133765550
  %44 = sub i32 %43, 1
  %45 = add i32 %44, 133765550
  %46 = sub i32 %41, 1
  %47 = mul i32 %41, %45
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %42, 10
  %51 = and i1 %49, %50
  %52 = xor i1 %49, %50
  %53 = or i1 %51, %52
  %54 = or i1 %49, %50
  %55 = select i1 %53, i32 -793021500, i32 1006525960
  store i32 %55, i32* %18
  br label %116

; <label>:56:                                     ; preds = %19
  %57 = load volatile i1, i1* %3
  %58 = select i1 %57, i32 -198657692, i32 -1226203887
  store i32 %58, i32* %18
  br label %116

; <label>:59:                                     ; preds = %19
  %60 = load volatile i64*, i64** %4
  %61 = load i64, i64* %60, align 8
  %62 = load volatile i64**, i64*** %5
  %63 = load i64*, i64** %62, align 8
  store i64 %61, i64* %63, align 8
  store i32 -1226203887, i32* %18
  br label %116

; <label>:64:                                     ; preds = %19
  %65 = load i32, i32* @x.94
  %66 = load i32, i32* @y.95
  %67 = sub i32 %65, -1392740241
  %68 = sub i32 %67, 1
  %69 = add i32 %68, -1392740241
  %70 = sub i32 %65, 1
  %71 = mul i32 %65, %69
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %66, 10
  %75 = and i1 %73, %74
  %76 = xor i1 %73, %74
  %77 = or i1 %75, %76
  %78 = or i1 %73, %74
  %79 = select i1 %77, i32 -300618697, i32 -503738028
  store i32 %79, i32* %18
  br label %116

; <label>:80:                                     ; preds = %19
  %81 = load i32, i32* @x.94
  %82 = load i32, i32* @y.95
  %83 = sub i32 0, 1
  %84 = add i32 %81, %83
  %85 = sub i32 %81, 1
  %86 = mul i32 %81, %84
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %82, 10
  %90 = xor i1 %88, true
  %91 = xor i1 %89, true
  %92 = xor i1 true, true
  %93 = and i1 %90, true
  %94 = and i1 %88, %92
  %95 = and i1 %91, true
  %96 = and i1 %89, %92
  %97 = or i1 %93, %94
  %98 = or i1 %95, %96
  %99 = xor i1 %97, %98
  %100 = or i1 %90, %91
  %101 = xor i1 %100, true
  %102 = or i1 true, %92
  %103 = and i1 %101, %102
  %104 = or i1 %99, %103
  %105 = or i1 %88, %89
  %106 = select i1 %104, i32 -1222364564, i32 -503738028
  store i32 %106, i32* %18
  br label %116

; <label>:107:                                    ; preds = %19
  ret void

; <label>:108:                                    ; preds = %19
  %109 = alloca i64*, align 8
  %110 = alloca i64, align 8
  store i64* %0, i64** %109, align 8
  store i64 %1, i64* %110, align 8
  %111 = load i64*, i64** %109, align 8
  %112 = load i64, i64* %111, align 8
  %113 = load i64, i64* %110, align 8
  %114 = icmp slt i64 %112, %113
  store i32 337754949, i32* %18
  br label %116

; <label>:115:                                    ; preds = %19
  store i32 -300618697, i32* %18
  br label %116

; <label>:116:                                    ; preds = %115, %108, %80, %64, %59, %56, %30, %22, %21
  br label %19
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8)) #4 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %1, %"class.__gnu_cxx::__normal_iterator.9"** %4, align 8
  %5 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  %6 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %5) #3
  %7 = load i64*, i64** %6, align 8
  %8 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4, align 8
  %9 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %8) #3
  %10 = load i64*, i64** %9, align 8
  %11 = ptrtoint i64* %7 to i64
  %12 = ptrtoint i64* %10 to i64
  %13 = add i64 %11, -449483054165281003
  %14 = sub i64 %13, %12
  %15 = sub i64 %14, -449483054165281003
  %16 = sub i64 %11, %12
  %17 = sdiv exact i64 %15, 8
  ret i64 %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt11upper_boundIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEExET_S7_S7_RKT0_(i64*, i64*, i64* dereferenceable(8)) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca i64*, align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %11 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %0, i64** %12, align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  store i64* %1, i64** %13, align 8
  store i64* %2, i64** %7, align 8
  %14 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  %15 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  %16 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  %17 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 8, i32 8, i1 false)
  %18 = load i64*, i64** %7, align 8
  call void @_ZN9__gnu_cxx5__ops15__val_less_iterEv()
  %19 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  %22 = load i64*, i64** %21, align 8
  %23 = call i64* @_ZSt13__upper_boundIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEExNS0_5__ops14_Val_less_iterEET_S9_S9_RKT0_T1_(i64* %20, i64* %22, i64* dereferenceable(8) %18)
  %24 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %23, i64** %24, align 8
  %25 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  %26 = load i64*, i64** %25, align 8
  ret i64* %26
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: nounwind readnone
declare double @acos(double) #6

declare void @_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::random_device"*, %"class.std::__cxx11::basic_string"* dereferenceable(32)) #1

declare i32 @_ZNSt13random_device9_M_getvalEv(%"class.std::random_device"*) #1

declare void @_ZNSt13random_device7_M_finiEv(%"class.std::random_device"*) #1

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8*) #7 comdat {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.100
  %5 = load i32, i32* @y.101
  %6 = sub i32 %4, -2052886399
  %7 = sub i32 %6, 1
  %8 = add i32 %7, -2052886399
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 -1380410395, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %57
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -1380410395, label %18
    i32 159471154, label %26
    i32 -799896585, label %54
    i32 -406442479, label %55
  ]

; <label>:17:                                     ; preds = %15
  br label %57

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 159471154, i32 -406442479
  store i32 %25, i32* %14
  br label %57

; <label>:26:                                     ; preds = %15
  %27 = call i8* @__cxa_begin_catch(i8* %0) #3
  call void @_ZSt9terminatev() #13
  %28 = load i32, i32* @x.100
  %29 = load i32, i32* @y.101
  %30 = sub i32 0, 1
  %31 = add i32 %28, %30
  %32 = sub i32 %28, 1
  %33 = mul i32 %28, %31
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %29, 10
  %37 = xor i1 %35, true
  %38 = xor i1 %36, true
  %39 = xor i1 false, true
  %40 = and i1 %37, false
  %41 = and i1 %35, %39
  %42 = and i1 %38, false
  %43 = and i1 %36, %39
  %44 = or i1 %40, %41
  %45 = or i1 %42, %43
  %46 = xor i1 %44, %45
  %47 = or i1 %37, %38
  %48 = xor i1 %47, true
  %49 = or i1 false, %39
  %50 = and i1 %48, %49
  %51 = or i1 %46, %50
  %52 = or i1 %35, %36
  %53 = select i1 %51, i32 -799896585, i32 -406442479
  store i32 %53, i32* %14
  br label %57

; <label>:54:                                     ; preds = %15
  unreachable

; <label>:55:                                     ; preds = %15
  %56 = call i8* @__cxa_begin_catch(i8* %0) #3
  call void @_ZSt9terminatev() #13
  store i32 159471154, i32* %14
  br label %57

; <label>:57:                                     ; preds = %55, %26, %18, %17
  br label %15
}

declare i8* @__cxa_begin_catch(i8*)

declare void @_ZSt9terminatev()

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE4seedEm(%"class.std::mersenne_twister_engine"*, i64) #0 comdat align 2 {
  %3 = alloca i1
  %4 = alloca %"class.std::mersenne_twister_engine"*
  %5 = alloca %"class.std::mersenne_twister_engine"*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store %"class.std::mersenne_twister_engine"* %0, %"class.std::mersenne_twister_engine"** %5, align 8
  store i64 %1, i64* %6, align 8
  %9 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %5, align 8
  store %"class.std::mersenne_twister_engine"* %9, %"class.std::mersenne_twister_engine"** %4
  %10 = load i64, i64* %6, align 8
  %11 = call i64 @_ZNSt8__detail5__modImLm4294967296ELm1ELm0EEET_S1_(i64 %10)
  %12 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4
  %13 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %12, i32 0, i32 0
  %14 = getelementptr inbounds [624 x i64], [624 x i64]* %13, i64 0, i64 0
  store i64 %11, i64* %14, align 8
  store i64 1, i64* %7, align 8
  %15 = alloca i32
  store i32 -221185374, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %353
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -221185374, label %19
    i32 -510115041, label %34
    i32 1278213851, label %64
    i32 1582268288, label %67
    i32 999683796, label %83
    i32 -130066937, label %150
    i32 2050828914, label %151
    i32 1487658869, label %166
    i32 118475350, label %200
    i32 824856335, label %201
    i32 888495483, label %216
    i32 1730336195, label %233
    i32 -1697646424, label %234
    i32 798193170, label %237
    i32 -13640371, label %323
    i32 -1560885525, label %350
  ]

; <label>:18:                                     ; preds = %16
  br label %353

; <label>:19:                                     ; preds = %16
  %20 = load i32, i32* @x.102
  %21 = load i32, i32* @y.103
  %22 = sub i32 0, 1
  %23 = add i32 %20, %22
  %24 = sub i32 %20, 1
  %25 = mul i32 %20, %23
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %21, 10
  %29 = and i1 %27, %28
  %30 = xor i1 %27, %28
  %31 = or i1 %29, %30
  %32 = or i1 %27, %28
  %33 = select i1 %31, i32 -510115041, i32 -1697646424
  store i32 %33, i32* %15
  br label %353

; <label>:34:                                     ; preds = %16
  %35 = load i64, i64* %7, align 8
  %36 = icmp ult i64 %35, 624
  store i1 %36, i1* %3
  %37 = load i32, i32* @x.102
  %38 = load i32, i32* @y.103
  %39 = sub i32 %37, 864658859
  %40 = sub i32 %39, 1
  %41 = add i32 %40, 864658859
  %42 = sub i32 %37, 1
  %43 = mul i32 %37, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %38, 10
  %47 = xor i1 %45, true
  %48 = xor i1 %46, true
  %49 = xor i1 false, true
  %50 = and i1 %47, false
  %51 = and i1 %45, %49
  %52 = and i1 %48, false
  %53 = and i1 %46, %49
  %54 = or i1 %50, %51
  %55 = or i1 %52, %53
  %56 = xor i1 %54, %55
  %57 = or i1 %47, %48
  %58 = xor i1 %57, true
  %59 = or i1 false, %49
  %60 = and i1 %58, %59
  %61 = or i1 %56, %60
  %62 = or i1 %45, %46
  %63 = select i1 %61, i32 1278213851, i32 -1697646424
  store i32 %63, i32* %15
  br label %353

; <label>:64:                                     ; preds = %16
  %65 = load volatile i1, i1* %3
  %66 = select i1 %65, i32 1582268288, i32 824856335
  store i32 %66, i32* %15
  br label %353

; <label>:67:                                     ; preds = %16
  %68 = load i32, i32* @x.102
  %69 = load i32, i32* @y.103
  %70 = sub i32 %68, -1852251728
  %71 = sub i32 %70, 1
  %72 = add i32 %71, -1852251728
  %73 = sub i32 %68, 1
  %74 = mul i32 %68, %72
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %69, 10
  %78 = and i1 %76, %77
  %79 = xor i1 %76, %77
  %80 = or i1 %78, %79
  %81 = or i1 %76, %77
  %82 = select i1 %80, i32 999683796, i32 798193170
  store i32 %82, i32* %15
  br label %353

; <label>:83:                                     ; preds = %16
  %84 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4
  %85 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %84, i32 0, i32 0
  %86 = load i64, i64* %7, align 8
  %87 = sub i64 %86, -1113527835010301375
  %88 = sub i64 %87, 1
  %89 = add i64 %88, -1113527835010301375
  %90 = sub i64 %86, 1
  %91 = getelementptr inbounds [624 x i64], [624 x i64]* %85, i64 0, i64 %89
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %8, align 8
  %93 = load i64, i64* %8, align 8
  %94 = lshr i64 %93, 30
  %95 = load i64, i64* %8, align 8
  %96 = xor i64 %95, -1
  %97 = and i64 1518184487881233016, %96
  %98 = xor i64 1518184487881233016, -1
  %99 = and i64 %95, %98
  %100 = xor i64 %94, -1
  %101 = and i64 %100, 1518184487881233016
  %102 = and i64 %94, %98
  %103 = or i64 %97, %99
  %104 = or i64 %101, %102
  %105 = xor i64 %103, %104
  %106 = xor i64 %95, %94
  store i64 %105, i64* %8, align 8
  %107 = load i64, i64* %8, align 8
  %108 = mul i64 %107, 1812433253
  store i64 %108, i64* %8, align 8
  %109 = load i64, i64* %7, align 8
  %110 = call i64 @_ZNSt8__detail5__modImLm624ELm1ELm0EEET_S1_(i64 %109)
  %111 = load i64, i64* %8, align 8
  %112 = sub i64 0, %111
  %113 = sub i64 0, %110
  %114 = add i64 %112, %113
  %115 = sub i64 0, %114
  %116 = add i64 %111, %110
  store i64 %115, i64* %8, align 8
  %117 = load i64, i64* %8, align 8
  %118 = call i64 @_ZNSt8__detail5__modImLm4294967296ELm1ELm0EEET_S1_(i64 %117)
  %119 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4
  %120 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %119, i32 0, i32 0
  %121 = load i64, i64* %7, align 8
  %122 = getelementptr inbounds [624 x i64], [624 x i64]* %120, i64 0, i64 %121
  store i64 %118, i64* %122, align 8
  %123 = load i32, i32* @x.102
  %124 = load i32, i32* @y.103
  %125 = add i32 %123, -787359536
  %126 = sub i32 %125, 1
  %127 = sub i32 %126, -787359536
  %128 = sub i32 %123, 1
  %129 = mul i32 %123, %127
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %124, 10
  %133 = xor i1 %131, true
  %134 = xor i1 %132, true
  %135 = xor i1 false, true
  %136 = and i1 %133, false
  %137 = and i1 %131, %135
  %138 = and i1 %134, false
  %139 = and i1 %132, %135
  %140 = or i1 %136, %137
  %141 = or i1 %138, %139
  %142 = xor i1 %140, %141
  %143 = or i1 %133, %134
  %144 = xor i1 %143, true
  %145 = or i1 false, %135
  %146 = and i1 %144, %145
  %147 = or i1 %142, %146
  %148 = or i1 %131, %132
  %149 = select i1 %147, i32 -130066937, i32 798193170
  store i32 %149, i32* %15
  br label %353

; <label>:150:                                    ; preds = %16
  store i32 2050828914, i32* %15
  br label %353

; <label>:151:                                    ; preds = %16
  %152 = load i32, i32* @x.102
  %153 = load i32, i32* @y.103
  %154 = sub i32 0, 1
  %155 = add i32 %152, %154
  %156 = sub i32 %152, 1
  %157 = mul i32 %152, %155
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %153, 10
  %161 = and i1 %159, %160
  %162 = xor i1 %159, %160
  %163 = or i1 %161, %162
  %164 = or i1 %159, %160
  %165 = select i1 %163, i32 1487658869, i32 -13640371
  store i32 %165, i32* %15
  br label %353

; <label>:166:                                    ; preds = %16
  %167 = load i64, i64* %7, align 8
  %168 = sub i64 0, %167
  %169 = sub i64 0, 1
  %170 = add i64 %168, %169
  %171 = sub i64 0, %170
  %172 = add i64 %167, 1
  store i64 %171, i64* %7, align 8
  %173 = load i32, i32* @x.102
  %174 = load i32, i32* @y.103
  %175 = add i32 %173, 1893704116
  %176 = sub i32 %175, 1
  %177 = sub i32 %176, 1893704116
  %178 = sub i32 %173, 1
  %179 = mul i32 %173, %177
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %174, 10
  %183 = xor i1 %181, true
  %184 = xor i1 %182, true
  %185 = xor i1 true, true
  %186 = and i1 %183, true
  %187 = and i1 %181, %185
  %188 = and i1 %184, true
  %189 = and i1 %182, %185
  %190 = or i1 %186, %187
  %191 = or i1 %188, %189
  %192 = xor i1 %190, %191
  %193 = or i1 %183, %184
  %194 = xor i1 %193, true
  %195 = or i1 true, %185
  %196 = and i1 %194, %195
  %197 = or i1 %192, %196
  %198 = or i1 %181, %182
  %199 = select i1 %197, i32 118475350, i32 -13640371
  store i32 %199, i32* %15
  br label %353

; <label>:200:                                    ; preds = %16
  store i32 -221185374, i32* %15
  br label %353

; <label>:201:                                    ; preds = %16
  %202 = load i32, i32* @x.102
  %203 = load i32, i32* @y.103
  %204 = sub i32 0, 1
  %205 = add i32 %202, %204
  %206 = sub i32 %202, 1
  %207 = mul i32 %202, %205
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %203, 10
  %211 = and i1 %209, %210
  %212 = xor i1 %209, %210
  %213 = or i1 %211, %212
  %214 = or i1 %209, %210
  %215 = select i1 %213, i32 888495483, i32 -1560885525
  store i32 %215, i32* %15
  br label %353

; <label>:216:                                    ; preds = %16
  %217 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4
  %218 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %217, i32 0, i32 1
  store i64 624, i64* %218, align 8
  %219 = load i32, i32* @x.102
  %220 = load i32, i32* @y.103
  %221 = sub i32 0, 1
  %222 = add i32 %219, %221
  %223 = sub i32 %219, 1
  %224 = mul i32 %219, %222
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %220, 10
  %228 = and i1 %226, %227
  %229 = xor i1 %226, %227
  %230 = or i1 %228, %229
  %231 = or i1 %226, %227
  %232 = select i1 %230, i32 1730336195, i32 -1560885525
  store i32 %232, i32* %15
  br label %353

; <label>:233:                                    ; preds = %16
  ret void

; <label>:234:                                    ; preds = %16
  %235 = load i64, i64* %7, align 8
  %236 = icmp ult i64 %235, 624
  store i32 -510115041, i32* %15
  br label %353

; <label>:237:                                    ; preds = %16
  %238 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4
  %239 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %238, i32 0, i32 0
  %240 = load i64, i64* %7, align 8
  %241 = sub i64 0, %240
  %242 = add i64 0, %241
  %243 = sub i64 0, %240
  %244 = sub i64 0, %242
  %245 = sub i64 0, 1
  %246 = add i64 %244, %245
  %247 = sub i64 0, %246
  %248 = add i64 %242, 1
  %249 = sub i64 0, %240
  %250 = add i64 0, %249
  %251 = sub i64 0, %240
  %252 = sub i64 %250, -7238293506563813544
  %253 = add i64 %252, 1
  %254 = add i64 %253, -7238293506563813544
  %255 = add i64 %250, 1
  %256 = sub i64 0, 1
  %257 = add i64 %240, %256
  %258 = sub i64 %240, 1
  %259 = getelementptr inbounds [624 x i64], [624 x i64]* %239, i64 0, i64 %257
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %8, align 8
  %261 = load i64, i64* %8, align 8
  %262 = sub i64 %261, -6044725507639763255
  %263 = sub i64 %262, 30
  %264 = add i64 %263, -6044725507639763255
  %265 = sub i64 %261, 30
  %266 = mul i64 %264, 30
  %267 = sub i64 0, %261
  %268 = add i64 0, %267
  %269 = sub i64 0, %261
  %270 = sub i64 %268, 7088625479913474870
  %271 = add i64 %270, 30
  %272 = add i64 %271, 7088625479913474870
  %273 = add i64 %268, 30
  %274 = sub i64 0, 30
  %275 = add i64 %261, %274
  %276 = sub i64 %261, 30
  %277 = mul i64 %275, 30
  %278 = sub i64 0, 30
  %279 = add i64 %261, %278
  %280 = sub i64 %261, 30
  %281 = mul i64 %279, 30
  %282 = shl i64 %261, 30
  %283 = lshr i64 %261, 30
  %284 = load i64, i64* %8, align 8
  %285 = sub i64 0, %283
  %286 = add i64 %284, %285
  %287 = sub i64 %284, %283
  %288 = mul i64 %286, %283
  %289 = add i64 0, -9129443218441166844
  %290 = sub i64 %289, %284
  %291 = sub i64 %290, -9129443218441166844
  %292 = sub i64 0, %284
  %293 = sub i64 0, %283
  %294 = sub i64 %291, %293
  %295 = add i64 %291, %283
  %296 = xor i64 %284, -1
  %297 = and i64 5747455486774803850, %296
  %298 = xor i64 5747455486774803850, -1
  %299 = and i64 %284, %298
  %300 = xor i64 %283, -1
  %301 = and i64 %300, 5747455486774803850
  %302 = and i64 %283, %298
  %303 = or i64 %297, %299
  %304 = or i64 %301, %302
  %305 = xor i64 %303, %304
  %306 = xor i64 %284, %283
  store i64 %305, i64* %8, align 8
  %307 = load i64, i64* %8, align 8
  %308 = mul i64 %307, 1812433253
  store i64 %308, i64* %8, align 8
  %309 = load i64, i64* %7, align 8
  %310 = call i64 @_ZNSt8__detail5__modImLm624ELm1ELm0EEET_S1_(i64 %309)
  %311 = load i64, i64* %8, align 8
  %312 = sub i64 0, %311
  %313 = sub i64 0, %310
  %314 = add i64 %312, %313
  %315 = sub i64 0, %314
  %316 = add i64 %311, %310
  store i64 %315, i64* %8, align 8
  %317 = load i64, i64* %8, align 8
  %318 = call i64 @_ZNSt8__detail5__modImLm4294967296ELm1ELm0EEET_S1_(i64 %317)
  %319 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4
  %320 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %319, i32 0, i32 0
  %321 = load i64, i64* %7, align 8
  %322 = getelementptr inbounds [624 x i64], [624 x i64]* %320, i64 0, i64 %321
  store i64 %318, i64* %322, align 8
  store i32 999683796, i32* %15
  br label %353

; <label>:323:                                    ; preds = %16
  %324 = load i64, i64* %7, align 8
  %325 = sub i64 0, 1
  %326 = add i64 %324, %325
  %327 = sub i64 %324, 1
  %328 = mul i64 %326, 1
  %329 = add i64 0, 1348795823356019956
  %330 = sub i64 %329, %324
  %331 = sub i64 %330, 1348795823356019956
  %332 = sub i64 0, %324
  %333 = add i64 %331, 3406976608286047369
  %334 = add i64 %333, 1
  %335 = sub i64 %334, 3406976608286047369
  %336 = add i64 %331, 1
  %337 = add i64 0, 654143187901084212
  %338 = sub i64 %337, %324
  %339 = sub i64 %338, 654143187901084212
  %340 = sub i64 0, %324
  %341 = add i64 %339, -558993870245322765
  %342 = add i64 %341, 1
  %343 = sub i64 %342, -558993870245322765
  %344 = add i64 %339, 1
  %345 = shl i64 %324, 1
  %346 = add i64 %324, -8317503492806995151
  %347 = add i64 %346, 1
  %348 = sub i64 %347, -8317503492806995151
  %349 = add i64 %324, 1
  store i64 %348, i64* %7, align 8
  store i32 1487658869, i32* %15
  br label %353

; <label>:350:                                    ; preds = %16
  %351 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4
  %352 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %351, i32 0, i32 1
  store i64 624, i64* %352, align 8
  store i32 888495483, i32* %15
  br label %353

; <label>:353:                                    ; preds = %350, %323, %237, %234, %216, %201, %200, %166, %151, %150, %83, %67, %64, %34, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNSt8__detail5__modImLm4294967296ELm1ELm0EEET_S1_(i64) #0 comdat {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i64 @_ZNSt8__detail4_ModImLm4294967296ELm1ELm0ELb1ELb1EE6__calcEm(i64 %3)
  ret i64 %4
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNSt8__detail5__modImLm624ELm1ELm0EEET_S1_(i64) #0 comdat {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i64 @_ZNSt8__detail4_ModImLm624ELm1ELm0ELb1ELb1EE6__calcEm(i64 %3)
  ret i64 %4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNSt8__detail4_ModImLm4294967296ELm1ELm0ELb1ELb1EE6__calcEm(i64) #4 comdat align 2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = mul i64 1, %4
  %6 = sub i64 0, 0
  %7 = sub i64 %5, %6
  %8 = add i64 %5, 0
  store i64 %7, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  %10 = urem i64 %9, 4294967296
  store i64 %10, i64* %3, align 8
  %11 = load i64, i64* %3, align 8
  ret i64 %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNSt8__detail4_ModImLm624ELm1ELm0ELb1ELb1EE6__calcEm(i64) #4 comdat align 2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = mul i64 1, %4
  %6 = add i64 %5, 2521445845881106959
  %7 = add i64 %6, 0
  %8 = sub i64 %7, 2521445845881106959
  %9 = add i64 %5, 0
  store i64 %8, i64* %3, align 8
  %10 = load i64, i64* %3, align 8
  %11 = urem i64 %10, 624
  store i64 %11, i64* %3, align 8
  %12 = load i64, i64* %3, align 8
  ret i64 %12
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt24uniform_int_distributionIxE10param_typeC2Exx(%"struct.std::uniform_int_distribution<long long>::param_type"*, i64, i64) unnamed_addr #4 comdat align 2 {
  %4 = alloca %"struct.std::uniform_int_distribution<long long>::param_type"*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %"struct.std::uniform_int_distribution<long long>::param_type"* %0, %"struct.std::uniform_int_distribution<long long>::param_type"** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %4, align 8
  %8 = getelementptr inbounds %"struct.std::uniform_int_distribution<long long>::param_type", %"struct.std::uniform_int_distribution<long long>::param_type"* %7, i32 0, i32 0
  %9 = load i64, i64* %5, align 8
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds %"struct.std::uniform_int_distribution<long long>::param_type", %"struct.std::uniform_int_distribution<long long>::param_type"* %7, i32 0, i32 1
  %11 = load i64, i64* %6, align 8
  store i64 %11, i64* %10, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNSt24uniform_int_distributionIxEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEExRT_RKNS0_10param_typeE(%"class.std::uniform_int_distribution"*, %"class.std::mersenne_twister_engine"* dereferenceable(5000), %"struct.std::uniform_int_distribution<long long>::param_type"* dereferenceable(16)) #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = alloca %"class.std::uniform_int_distribution"*
  %8 = alloca %"struct.std::uniform_int_distribution<long long>::param_type"*
  %9 = alloca i64*
  %10 = alloca i64*
  %11 = alloca i64*
  %12 = alloca i64*
  %13 = alloca i64*
  %14 = alloca i64*
  %15 = alloca i64*
  %16 = alloca i64*
  %17 = alloca i64*
  %18 = alloca %"struct.std::uniform_int_distribution<long long>::param_type"**
  %19 = alloca %"class.std::mersenne_twister_engine"**
  %20 = alloca i1
  %21 = alloca i1
  %22 = load i32, i32* @x.114
  %23 = load i32, i32* @y.115
  %24 = sub i32 %22, -1706673884
  %25 = sub i32 %24, 1
  %26 = add i32 %25, -1706673884
  %27 = sub i32 %22, 1
  %28 = mul i32 %22, %26
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  store i1 %30, i1* %21
  %31 = icmp slt i32 %23, 10
  store i1 %31, i1* %20
  %32 = alloca i32
  store i32 1199105604, i32* %32
  %33 = alloca i1
  br label %34

; <label>:34:                                     ; preds = %3, %840
  %35 = load i32, i32* %32
  switch i32 %35, label %36 [
    i32 1199105604, label %37
    i32 -209253667, label %45
    i32 1069516150, label %120
    i32 1925468523, label %123
    i32 -95606749, label %144
    i32 974569588, label %155
    i32 1646730749, label %183
    i32 960982666, label %204
    i32 1315132858, label %207
    i32 505873219, label %234
    i32 1906901713, label %267
    i32 -660078076, label %268
    i32 -308144674, label %275
    i32 -1889572809, label %291
    i32 2119586529, label %319
    i32 -1294226725, label %320
    i32 2105259606, label %348
    i32 1792724054, label %413
    i32 -1576885312, label %414
    i32 1033564627, label %421
    i32 816563344, label %427
    i32 1472214918, label %455
    i32 -1803174012, label %482
    i32 1185763430, label %485
    i32 -1304549909, label %501
    i32 -266633493, label %528
    i32 -861928635, label %529
    i32 1008220026, label %540
    i32 1791044040, label %556
    i32 1279256963, label %584
    i32 -147674538, label %585
    i32 -1415287285, label %595
    i32 1881814289, label %665
    i32 1553041490, label %671
    i32 1018881357, label %708
    i32 -1934082423, label %709
    i32 -1645816918, label %837
    i32 2042787230, label %838
    i32 1617193275, label %839
  ]

; <label>:36:                                     ; preds = %34
  br label %840

; <label>:37:                                     ; preds = %34
  %38 = load volatile i1, i1* %21
  %39 = load volatile i1, i1* %20
  %40 = and i1 %38, %39
  %41 = xor i1 %38, %39
  %42 = or i1 %40, %41
  %43 = or i1 %38, %39
  %44 = select i1 %42, i32 -209253667, i32 -1415287285
  store i32 %44, i32* %32
  br label %840

; <label>:45:                                     ; preds = %34
  %46 = alloca %"class.std::uniform_int_distribution"*, align 8
  %47 = alloca %"class.std::mersenne_twister_engine"*, align 8
  store %"class.std::mersenne_twister_engine"** %47, %"class.std::mersenne_twister_engine"*** %19
  %48 = alloca %"struct.std::uniform_int_distribution<long long>::param_type"*, align 8
  store %"struct.std::uniform_int_distribution<long long>::param_type"** %48, %"struct.std::uniform_int_distribution<long long>::param_type"*** %18
  %49 = alloca i64, align 8
  store i64* %49, i64** %17
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  store i64* %51, i64** %16
  %52 = alloca i64, align 8
  store i64* %52, i64** %15
  %53 = alloca i64, align 8
  store i64* %53, i64** %14
  %54 = alloca i64, align 8
  store i64* %54, i64** %13
  %55 = alloca i64, align 8
  store i64* %55, i64** %12
  %56 = alloca i64, align 8
  store i64* %56, i64** %11
  %57 = alloca i64, align 8
  store i64* %57, i64** %10
  %58 = alloca i64, align 8
  store i64* %58, i64** %9
  %59 = alloca %"struct.std::uniform_int_distribution<long long>::param_type", align 8
  store %"struct.std::uniform_int_distribution<long long>::param_type"* %59, %"struct.std::uniform_int_distribution<long long>::param_type"** %8
  store %"class.std::uniform_int_distribution"* %0, %"class.std::uniform_int_distribution"** %46, align 8
  %60 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  store %"class.std::mersenne_twister_engine"* %1, %"class.std::mersenne_twister_engine"** %60, align 8
  %61 = load volatile %"struct.std::uniform_int_distribution<long long>::param_type"**, %"struct.std::uniform_int_distribution<long long>::param_type"*** %18
  store %"struct.std::uniform_int_distribution<long long>::param_type"* %2, %"struct.std::uniform_int_distribution<long long>::param_type"** %61, align 8
  %62 = load %"class.std::uniform_int_distribution"*, %"class.std::uniform_int_distribution"** %46, align 8
  store %"class.std::uniform_int_distribution"* %62, %"class.std::uniform_int_distribution"** %7
  %63 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  %64 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %63, align 8
  %65 = call i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE3minEv()
  %66 = load volatile i64*, i64** %17
  store i64 %65, i64* %66, align 8
  %67 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  %68 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %67, align 8
  %69 = call i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE3maxEv()
  store i64 %69, i64* %50, align 8
  %70 = load i64, i64* %50, align 8
  %71 = load volatile i64*, i64** %17
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %70, 318487098275546883
  %74 = sub i64 %73, %72
  %75 = add i64 %74, 318487098275546883
  %76 = sub i64 %70, %72
  %77 = load volatile i64*, i64** %16
  store i64 %75, i64* %77, align 8
  %78 = load volatile %"struct.std::uniform_int_distribution<long long>::param_type"**, %"struct.std::uniform_int_distribution<long long>::param_type"*** %18
  %79 = load %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %78, align 8
  %80 = call i64 @_ZNKSt24uniform_int_distributionIxE10param_type1bEv(%"struct.std::uniform_int_distribution<long long>::param_type"* %79)
  %81 = load volatile %"struct.std::uniform_int_distribution<long long>::param_type"**, %"struct.std::uniform_int_distribution<long long>::param_type"*** %18
  %82 = load %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %81, align 8
  %83 = call i64 @_ZNKSt24uniform_int_distributionIxE10param_type1aEv(%"struct.std::uniform_int_distribution<long long>::param_type"* %82)
  %84 = add i64 %80, -1305897360051932461
  %85 = sub i64 %84, %83
  %86 = sub i64 %85, -1305897360051932461
  %87 = sub i64 %80, %83
  %88 = load volatile i64*, i64** %15
  store i64 %86, i64* %88, align 8
  %89 = load volatile i64*, i64** %16
  %90 = load i64, i64* %89, align 8
  %91 = load volatile i64*, i64** %15
  %92 = load i64, i64* %91, align 8
  %93 = icmp ugt i64 %90, %92
  store i1 %93, i1* %6
  %94 = load i32, i32* @x.114
  %95 = load i32, i32* @y.115
  %96 = sub i32 0, 1
  %97 = add i32 %94, %96
  %98 = sub i32 %94, 1
  %99 = mul i32 %94, %97
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %95, 10
  %103 = xor i1 %101, true
  %104 = xor i1 %102, true
  %105 = xor i1 true, true
  %106 = and i1 %103, true
  %107 = and i1 %101, %105
  %108 = and i1 %104, true
  %109 = and i1 %102, %105
  %110 = or i1 %106, %107
  %111 = or i1 %108, %109
  %112 = xor i1 %110, %111
  %113 = or i1 %103, %104
  %114 = xor i1 %113, true
  %115 = or i1 true, %105
  %116 = and i1 %114, %115
  %117 = or i1 %112, %116
  %118 = or i1 %101, %102
  %119 = select i1 %117, i32 1069516150, i32 -1415287285
  store i32 %119, i32* %32
  br label %840

; <label>:120:                                    ; preds = %34
  %121 = load volatile i1, i1* %6
  %122 = select i1 %121, i32 1925468523, i32 -660078076
  store i32 %122, i32* %32
  br label %840

; <label>:123:                                    ; preds = %34
  %124 = load volatile i64*, i64** %15
  %125 = load i64, i64* %124, align 8
  %126 = sub i64 0, %125
  %127 = sub i64 0, 1
  %128 = add i64 %126, %127
  %129 = sub i64 0, %128
  %130 = add i64 %125, 1
  %131 = load volatile i64*, i64** %13
  store i64 %129, i64* %131, align 8
  %132 = load volatile i64*, i64** %16
  %133 = load i64, i64* %132, align 8
  %134 = load volatile i64*, i64** %13
  %135 = load i64, i64* %134, align 8
  %136 = udiv i64 %133, %135
  %137 = load volatile i64*, i64** %12
  store i64 %136, i64* %137, align 8
  %138 = load volatile i64*, i64** %13
  %139 = load i64, i64* %138, align 8
  %140 = load volatile i64*, i64** %12
  %141 = load i64, i64* %140, align 8
  %142 = mul i64 %139, %141
  %143 = load volatile i64*, i64** %11
  store i64 %142, i64* %143, align 8
  store i32 -95606749, i32* %32
  br label %840

; <label>:144:                                    ; preds = %34
  %145 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  %146 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %145, align 8
  %147 = call i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv(%"class.std::mersenne_twister_engine"* %146)
  %148 = load volatile i64*, i64** %17
  %149 = load i64, i64* %148, align 8
  %150 = sub i64 %147, -6572205745892121328
  %151 = sub i64 %150, %149
  %152 = add i64 %151, -6572205745892121328
  %153 = sub i64 %147, %149
  %154 = load volatile i64*, i64** %14
  store i64 %152, i64* %154, align 8
  store i32 974569588, i32* %32
  br label %840

; <label>:155:                                    ; preds = %34
  %156 = load i32, i32* @x.114
  %157 = load i32, i32* @y.115
  %158 = add i32 %156, -1147066444
  %159 = sub i32 %158, 1
  %160 = sub i32 %159, -1147066444
  %161 = sub i32 %156, 1
  %162 = mul i32 %156, %160
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %157, 10
  %166 = xor i1 %164, true
  %167 = xor i1 %165, true
  %168 = xor i1 true, true
  %169 = and i1 %166, true
  %170 = and i1 %164, %168
  %171 = and i1 %167, true
  %172 = and i1 %165, %168
  %173 = or i1 %169, %170
  %174 = or i1 %171, %172
  %175 = xor i1 %173, %174
  %176 = or i1 %166, %167
  %177 = xor i1 %176, true
  %178 = or i1 true, %168
  %179 = and i1 %177, %178
  %180 = or i1 %175, %179
  %181 = or i1 %164, %165
  %182 = select i1 %180, i32 1646730749, i32 1881814289
  store i32 %182, i32* %32
  br label %840

; <label>:183:                                    ; preds = %34
  %184 = load volatile i64*, i64** %14
  %185 = load i64, i64* %184, align 8
  %186 = load volatile i64*, i64** %11
  %187 = load i64, i64* %186, align 8
  %188 = icmp uge i64 %185, %187
  store i1 %188, i1* %5
  %189 = load i32, i32* @x.114
  %190 = load i32, i32* @y.115
  %191 = sub i32 %189, 856359241
  %192 = sub i32 %191, 1
  %193 = add i32 %192, 856359241
  %194 = sub i32 %189, 1
  %195 = mul i32 %189, %193
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %190, 10
  %199 = and i1 %197, %198
  %200 = xor i1 %197, %198
  %201 = or i1 %199, %200
  %202 = or i1 %197, %198
  %203 = select i1 %201, i32 960982666, i32 1881814289
  store i32 %203, i32* %32
  br label %840

; <label>:204:                                    ; preds = %34
  %205 = load volatile i1, i1* %5
  %206 = select i1 %205, i32 -95606749, i32 1315132858
  store i32 %206, i32* %32
  br label %840

; <label>:207:                                    ; preds = %34
  %208 = load i32, i32* @x.114
  %209 = load i32, i32* @y.115
  %210 = sub i32 0, 1
  %211 = add i32 %208, %210
  %212 = sub i32 %208, 1
  %213 = mul i32 %208, %211
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %209, 10
  %217 = xor i1 %215, true
  %218 = xor i1 %216, true
  %219 = xor i1 true, true
  %220 = and i1 %217, true
  %221 = and i1 %215, %219
  %222 = and i1 %218, true
  %223 = and i1 %216, %219
  %224 = or i1 %220, %221
  %225 = or i1 %222, %223
  %226 = xor i1 %224, %225
  %227 = or i1 %217, %218
  %228 = xor i1 %227, true
  %229 = or i1 true, %219
  %230 = and i1 %228, %229
  %231 = or i1 %226, %230
  %232 = or i1 %215, %216
  %233 = select i1 %231, i32 505873219, i32 1553041490
  store i32 %233, i32* %32
  br label %840

; <label>:234:                                    ; preds = %34
  %235 = load volatile i64*, i64** %12
  %236 = load i64, i64* %235, align 8
  %237 = load volatile i64*, i64** %14
  %238 = load i64, i64* %237, align 8
  %239 = udiv i64 %238, %236
  %240 = load volatile i64*, i64** %14
  store i64 %239, i64* %240, align 8
  %241 = load i32, i32* @x.114
  %242 = load i32, i32* @y.115
  %243 = sub i32 0, 1
  %244 = add i32 %241, %243
  %245 = sub i32 %241, 1
  %246 = mul i32 %241, %244
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %242, 10
  %250 = xor i1 %248, true
  %251 = xor i1 %249, true
  %252 = xor i1 false, true
  %253 = and i1 %250, false
  %254 = and i1 %248, %252
  %255 = and i1 %251, false
  %256 = and i1 %249, %252
  %257 = or i1 %253, %254
  %258 = or i1 %255, %256
  %259 = xor i1 %257, %258
  %260 = or i1 %250, %251
  %261 = xor i1 %260, true
  %262 = or i1 false, %252
  %263 = and i1 %261, %262
  %264 = or i1 %259, %263
  %265 = or i1 %248, %249
  %266 = select i1 %264, i32 1906901713, i32 1553041490
  store i32 %266, i32* %32
  br label %840

; <label>:267:                                    ; preds = %34
  store i32 -147674538, i32* %32
  br label %840

; <label>:268:                                    ; preds = %34
  %269 = load volatile i64*, i64** %16
  %270 = load i64, i64* %269, align 8
  %271 = load volatile i64*, i64** %15
  %272 = load i64, i64* %271, align 8
  %273 = icmp ult i64 %270, %272
  %274 = select i1 %273, i32 -308144674, i32 -861928635
  store i32 %274, i32* %32
  br label %840

; <label>:275:                                    ; preds = %34
  %276 = load i32, i32* @x.114
  %277 = load i32, i32* @y.115
  %278 = sub i32 %276, 1086421423
  %279 = sub i32 %278, 1
  %280 = add i32 %279, 1086421423
  %281 = sub i32 %276, 1
  %282 = mul i32 %276, %280
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %277, 10
  %286 = and i1 %284, %285
  %287 = xor i1 %284, %285
  %288 = or i1 %286, %287
  %289 = or i1 %284, %285
  %290 = select i1 %288, i32 -1889572809, i32 1018881357
  store i32 %290, i32* %32
  br label %840

; <label>:291:                                    ; preds = %34
  %292 = load i32, i32* @x.114
  %293 = load i32, i32* @y.115
  %294 = add i32 %292, 16376579
  %295 = sub i32 %294, 1
  %296 = sub i32 %295, 16376579
  %297 = sub i32 %292, 1
  %298 = mul i32 %292, %296
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %293, 10
  %302 = xor i1 %300, true
  %303 = xor i1 %301, true
  %304 = xor i1 true, true
  %305 = and i1 %302, true
  %306 = and i1 %300, %304
  %307 = and i1 %303, true
  %308 = and i1 %301, %304
  %309 = or i1 %305, %306
  %310 = or i1 %307, %308
  %311 = xor i1 %309, %310
  %312 = or i1 %302, %303
  %313 = xor i1 %312, true
  %314 = or i1 true, %304
  %315 = and i1 %313, %314
  %316 = or i1 %311, %315
  %317 = or i1 %300, %301
  %318 = select i1 %316, i32 2119586529, i32 1018881357
  store i32 %318, i32* %32
  br label %840

; <label>:319:                                    ; preds = %34
  store i32 -1294226725, i32* %32
  br label %840

; <label>:320:                                    ; preds = %34
  %321 = load i32, i32* @x.114
  %322 = load i32, i32* @y.115
  %323 = sub i32 %321, 953257333
  %324 = sub i32 %323, 1
  %325 = add i32 %324, 953257333
  %326 = sub i32 %321, 1
  %327 = mul i32 %321, %325
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %322, 10
  %331 = xor i1 %329, true
  %332 = xor i1 %330, true
  %333 = xor i1 true, true
  %334 = and i1 %331, true
  %335 = and i1 %329, %333
  %336 = and i1 %332, true
  %337 = and i1 %330, %333
  %338 = or i1 %334, %335
  %339 = or i1 %336, %337
  %340 = xor i1 %338, %339
  %341 = or i1 %331, %332
  %342 = xor i1 %341, true
  %343 = or i1 true, %333
  %344 = and i1 %342, %343
  %345 = or i1 %340, %344
  %346 = or i1 %329, %330
  %347 = select i1 %345, i32 2105259606, i32 -1934082423
  store i32 %347, i32* %32
  br label %840

; <label>:348:                                    ; preds = %34
  %349 = load volatile i64*, i64** %16
  %350 = load i64, i64* %349, align 8
  %351 = sub i64 0, 1
  %352 = sub i64 %350, %351
  %353 = add i64 %350, 1
  %354 = load volatile i64*, i64** %9
  store i64 %352, i64* %354, align 8
  %355 = load volatile i64*, i64** %9
  %356 = load i64, i64* %355, align 8
  %357 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  %358 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %357, align 8
  %359 = load volatile i64*, i64** %15
  %360 = load i64, i64* %359, align 8
  %361 = load volatile i64*, i64** %9
  %362 = load i64, i64* %361, align 8
  %363 = udiv i64 %360, %362
  %364 = load volatile %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %8
  call void @_ZNSt24uniform_int_distributionIxE10param_typeC2Exx(%"struct.std::uniform_int_distribution<long long>::param_type"* %364, i64 0, i64 %363)
  %365 = load volatile %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %8
  %366 = load volatile %"class.std::uniform_int_distribution"*, %"class.std::uniform_int_distribution"** %7
  %367 = call i64 @_ZNSt24uniform_int_distributionIxEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEExRT_RKNS0_10param_typeE(%"class.std::uniform_int_distribution"* %366, %"class.std::mersenne_twister_engine"* dereferenceable(5000) %358, %"struct.std::uniform_int_distribution<long long>::param_type"* dereferenceable(16) %365)
  %368 = mul i64 %356, %367
  %369 = load volatile i64*, i64** %10
  store i64 %368, i64* %369, align 8
  %370 = load volatile i64*, i64** %10
  %371 = load i64, i64* %370, align 8
  %372 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  %373 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %372, align 8
  %374 = call i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv(%"class.std::mersenne_twister_engine"* %373)
  %375 = load volatile i64*, i64** %17
  %376 = load i64, i64* %375, align 8
  %377 = add i64 %374, 207193474173262560
  %378 = sub i64 %377, %376
  %379 = sub i64 %378, 207193474173262560
  %380 = sub i64 %374, %376
  %381 = sub i64 %371, 6897815270036058752
  %382 = add i64 %381, %379
  %383 = add i64 %382, 6897815270036058752
  %384 = add i64 %371, %379
  %385 = load volatile i64*, i64** %14
  store i64 %383, i64* %385, align 8
  %386 = load i32, i32* @x.114
  %387 = load i32, i32* @y.115
  %388 = add i32 %386, 1271911692
  %389 = sub i32 %388, 1
  %390 = sub i32 %389, 1271911692
  %391 = sub i32 %386, 1
  %392 = mul i32 %386, %390
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %387, 10
  %396 = xor i1 %394, true
  %397 = xor i1 %395, true
  %398 = xor i1 true, true
  %399 = and i1 %396, true
  %400 = and i1 %394, %398
  %401 = and i1 %397, true
  %402 = and i1 %395, %398
  %403 = or i1 %399, %400
  %404 = or i1 %401, %402
  %405 = xor i1 %403, %404
  %406 = or i1 %396, %397
  %407 = xor i1 %406, true
  %408 = or i1 true, %398
  %409 = and i1 %407, %408
  %410 = or i1 %405, %409
  %411 = or i1 %394, %395
  %412 = select i1 %410, i32 1792724054, i32 -1934082423
  store i32 %412, i32* %32
  br label %840

; <label>:413:                                    ; preds = %34
  store i32 -1576885312, i32* %32
  br label %840

; <label>:414:                                    ; preds = %34
  %415 = load volatile i64*, i64** %14
  %416 = load i64, i64* %415, align 8
  %417 = load volatile i64*, i64** %15
  %418 = load i64, i64* %417, align 8
  %419 = icmp ugt i64 %416, %418
  %420 = select i1 %419, i32 816563344, i32 1033564627
  store i32 %420, i32* %32
  store i1 true, i1* %33
  br label %840

; <label>:421:                                    ; preds = %34
  %422 = load volatile i64*, i64** %14
  %423 = load i64, i64* %422, align 8
  %424 = load volatile i64*, i64** %10
  %425 = load i64, i64* %424, align 8
  %426 = icmp ult i64 %423, %425
  store i32 816563344, i32* %32
  store i1 %426, i1* %33
  br label %840

; <label>:427:                                    ; preds = %34
  %428 = load i1, i1* %33
  store i1 %428, i1* %4
  %429 = load i32, i32* @x.114
  %430 = load i32, i32* @y.115
  %431 = sub i32 0, 1
  %432 = add i32 %429, %431
  %433 = sub i32 %429, 1
  %434 = mul i32 %429, %432
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %430, 10
  %438 = xor i1 %436, true
  %439 = xor i1 %437, true
  %440 = xor i1 false, true
  %441 = and i1 %438, false
  %442 = and i1 %436, %440
  %443 = and i1 %439, false
  %444 = and i1 %437, %440
  %445 = or i1 %441, %442
  %446 = or i1 %443, %444
  %447 = xor i1 %445, %446
  %448 = or i1 %438, %439
  %449 = xor i1 %448, true
  %450 = or i1 false, %440
  %451 = and i1 %449, %450
  %452 = or i1 %447, %451
  %453 = or i1 %436, %437
  %454 = select i1 %452, i32 1472214918, i32 -1645816918
  store i32 %454, i32* %32
  br label %840

; <label>:455:                                    ; preds = %34
  %456 = load i32, i32* @x.114
  %457 = load i32, i32* @y.115
  %458 = sub i32 0, 1
  %459 = add i32 %456, %458
  %460 = sub i32 %456, 1
  %461 = mul i32 %456, %459
  %462 = urem i32 %461, 2
  %463 = icmp eq i32 %462, 0
  %464 = icmp slt i32 %457, 10
  %465 = xor i1 %463, true
  %466 = xor i1 %464, true
  %467 = xor i1 true, true
  %468 = and i1 %465, true
  %469 = and i1 %463, %467
  %470 = and i1 %466, true
  %471 = and i1 %464, %467
  %472 = or i1 %468, %469
  %473 = or i1 %470, %471
  %474 = xor i1 %472, %473
  %475 = or i1 %465, %466
  %476 = xor i1 %475, true
  %477 = or i1 true, %467
  %478 = and i1 %476, %477
  %479 = or i1 %474, %478
  %480 = or i1 %463, %464
  %481 = select i1 %479, i32 -1803174012, i32 -1645816918
  store i32 %481, i32* %32
  br label %840

; <label>:482:                                    ; preds = %34
  %483 = load volatile i1, i1* %4
  %484 = select i1 %483, i32 -1294226725, i32 1185763430
  store i32 %484, i32* %32
  br label %840

; <label>:485:                                    ; preds = %34
  %486 = load i32, i32* @x.114
  %487 = load i32, i32* @y.115
  %488 = add i32 %486, -481896635
  %489 = sub i32 %488, 1
  %490 = sub i32 %489, -481896635
  %491 = sub i32 %486, 1
  %492 = mul i32 %486, %490
  %493 = urem i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = icmp slt i32 %487, 10
  %496 = and i1 %494, %495
  %497 = xor i1 %494, %495
  %498 = or i1 %496, %497
  %499 = or i1 %494, %495
  %500 = select i1 %498, i32 -1304549909, i32 2042787230
  store i32 %500, i32* %32
  br label %840

; <label>:501:                                    ; preds = %34
  %502 = load i32, i32* @x.114
  %503 = load i32, i32* @y.115
  %504 = sub i32 0, 1
  %505 = add i32 %502, %504
  %506 = sub i32 %502, 1
  %507 = mul i32 %502, %505
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %503, 10
  %511 = xor i1 %509, true
  %512 = xor i1 %510, true
  %513 = xor i1 false, true
  %514 = and i1 %511, false
  %515 = and i1 %509, %513
  %516 = and i1 %512, false
  %517 = and i1 %510, %513
  %518 = or i1 %514, %515
  %519 = or i1 %516, %517
  %520 = xor i1 %518, %519
  %521 = or i1 %511, %512
  %522 = xor i1 %521, true
  %523 = or i1 false, %513
  %524 = and i1 %522, %523
  %525 = or i1 %520, %524
  %526 = or i1 %509, %510
  %527 = select i1 %525, i32 -266633493, i32 2042787230
  store i32 %527, i32* %32
  br label %840

; <label>:528:                                    ; preds = %34
  store i32 1008220026, i32* %32
  br label %840

; <label>:529:                                    ; preds = %34
  %530 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  %531 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %530, align 8
  %532 = call i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv(%"class.std::mersenne_twister_engine"* %531)
  %533 = load volatile i64*, i64** %17
  %534 = load i64, i64* %533, align 8
  %535 = add i64 %532, 1150071086477168891
  %536 = sub i64 %535, %534
  %537 = sub i64 %536, 1150071086477168891
  %538 = sub i64 %532, %534
  %539 = load volatile i64*, i64** %14
  store i64 %537, i64* %539, align 8
  store i32 1008220026, i32* %32
  br label %840

; <label>:540:                                    ; preds = %34
  %541 = load i32, i32* @x.114
  %542 = load i32, i32* @y.115
  %543 = add i32 %541, 1800069362
  %544 = sub i32 %543, 1
  %545 = sub i32 %544, 1800069362
  %546 = sub i32 %541, 1
  %547 = mul i32 %541, %545
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %542, 10
  %551 = and i1 %549, %550
  %552 = xor i1 %549, %550
  %553 = or i1 %551, %552
  %554 = or i1 %549, %550
  %555 = select i1 %553, i32 1791044040, i32 1617193275
  store i32 %555, i32* %32
  br label %840

; <label>:556:                                    ; preds = %34
  %557 = load i32, i32* @x.114
  %558 = load i32, i32* @y.115
  %559 = add i32 %557, 1358855012
  %560 = sub i32 %559, 1
  %561 = sub i32 %560, 1358855012
  %562 = sub i32 %557, 1
  %563 = mul i32 %557, %561
  %564 = urem i32 %563, 2
  %565 = icmp eq i32 %564, 0
  %566 = icmp slt i32 %558, 10
  %567 = xor i1 %565, true
  %568 = xor i1 %566, true
  %569 = xor i1 true, true
  %570 = and i1 %567, true
  %571 = and i1 %565, %569
  %572 = and i1 %568, true
  %573 = and i1 %566, %569
  %574 = or i1 %570, %571
  %575 = or i1 %572, %573
  %576 = xor i1 %574, %575
  %577 = or i1 %567, %568
  %578 = xor i1 %577, true
  %579 = or i1 true, %569
  %580 = and i1 %578, %579
  %581 = or i1 %576, %580
  %582 = or i1 %565, %566
  %583 = select i1 %581, i32 1279256963, i32 1617193275
  store i32 %583, i32* %32
  br label %840

; <label>:584:                                    ; preds = %34
  store i32 -147674538, i32* %32
  br label %840

; <label>:585:                                    ; preds = %34
  %586 = load volatile i64*, i64** %14
  %587 = load i64, i64* %586, align 8
  %588 = load volatile %"struct.std::uniform_int_distribution<long long>::param_type"**, %"struct.std::uniform_int_distribution<long long>::param_type"*** %18
  %589 = load %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %588, align 8
  %590 = call i64 @_ZNKSt24uniform_int_distributionIxE10param_type1aEv(%"struct.std::uniform_int_distribution<long long>::param_type"* %589)
  %591 = add i64 %587, -4583584679203445808
  %592 = add i64 %591, %590
  %593 = sub i64 %592, -4583584679203445808
  %594 = add i64 %587, %590
  ret i64 %593

; <label>:595:                                    ; preds = %34
  %596 = alloca %"class.std::uniform_int_distribution"*, align 8
  %597 = alloca %"class.std::mersenne_twister_engine"*, align 8
  %598 = alloca %"struct.std::uniform_int_distribution<long long>::param_type"*, align 8
  %599 = alloca i64, align 8
  %600 = alloca i64, align 8
  %601 = alloca i64, align 8
  %602 = alloca i64, align 8
  %603 = alloca i64, align 8
  %604 = alloca i64, align 8
  %605 = alloca i64, align 8
  %606 = alloca i64, align 8
  %607 = alloca i64, align 8
  %608 = alloca i64, align 8
  %609 = alloca %"struct.std::uniform_int_distribution<long long>::param_type", align 8
  store %"class.std::uniform_int_distribution"* %0, %"class.std::uniform_int_distribution"** %596, align 8
  store %"class.std::mersenne_twister_engine"* %1, %"class.std::mersenne_twister_engine"** %597, align 8
  store %"struct.std::uniform_int_distribution<long long>::param_type"* %2, %"struct.std::uniform_int_distribution<long long>::param_type"** %598, align 8
  %610 = load %"class.std::uniform_int_distribution"*, %"class.std::uniform_int_distribution"** %596, align 8
  %611 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %597, align 8
  %612 = call i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE3minEv()
  store i64 %612, i64* %599, align 8
  %613 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %597, align 8
  %614 = call i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE3maxEv()
  store i64 %614, i64* %600, align 8
  %615 = load i64, i64* %600, align 8
  %616 = load i64, i64* %599, align 8
  %617 = sub i64 0, 6439213655444599071
  %618 = sub i64 %617, %615
  %619 = add i64 %618, 6439213655444599071
  %620 = sub i64 0, %615
  %621 = sub i64 %619, 4609704572408196636
  %622 = add i64 %621, %616
  %623 = add i64 %622, 4609704572408196636
  %624 = add i64 %619, %616
  %625 = shl i64 %615, %616
  %626 = shl i64 %615, %616
  %627 = add i64 %615, 811159538978782373
  %628 = sub i64 %627, %616
  %629 = sub i64 %628, 811159538978782373
  %630 = sub i64 %615, %616
  store i64 %629, i64* %601, align 8
  %631 = load %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %598, align 8
  %632 = call i64 @_ZNKSt24uniform_int_distributionIxE10param_type1bEv(%"struct.std::uniform_int_distribution<long long>::param_type"* %631)
  %633 = load %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %598, align 8
  %634 = call i64 @_ZNKSt24uniform_int_distributionIxE10param_type1aEv(%"struct.std::uniform_int_distribution<long long>::param_type"* %633)
  %635 = shl i64 %632, %634
  %636 = shl i64 %632, %634
  %637 = add i64 0, 4603195500629962589
  %638 = sub i64 %637, %632
  %639 = sub i64 %638, 4603195500629962589
  %640 = sub i64 0, %632
  %641 = sub i64 0, %634
  %642 = sub i64 %639, %641
  %643 = add i64 %639, %634
  %644 = add i64 %632, -4057882858272331452
  %645 = sub i64 %644, %634
  %646 = sub i64 %645, -4057882858272331452
  %647 = sub i64 %632, %634
  %648 = mul i64 %646, %634
  %649 = shl i64 %632, %634
  %650 = sub i64 0, 93590791504152926
  %651 = sub i64 %650, %632
  %652 = add i64 %651, 93590791504152926
  %653 = sub i64 0, %632
  %654 = add i64 %652, -5014791615014914080
  %655 = add i64 %654, %634
  %656 = sub i64 %655, -5014791615014914080
  %657 = add i64 %652, %634
  %658 = sub i64 %632, 7836472769952416447
  %659 = sub i64 %658, %634
  %660 = add i64 %659, 7836472769952416447
  %661 = sub i64 %632, %634
  store i64 %660, i64* %602, align 8
  %662 = load i64, i64* %601, align 8
  %663 = load i64, i64* %602, align 8
  %664 = icmp ugt i64 %662, %663
  store i32 -209253667, i32* %32
  br label %840

; <label>:665:                                    ; preds = %34
  %666 = load volatile i64*, i64** %14
  %667 = load i64, i64* %666, align 8
  %668 = load volatile i64*, i64** %11
  %669 = load i64, i64* %668, align 8
  %670 = icmp uge i64 %667, %669
  store i32 1646730749, i32* %32
  br label %840

; <label>:671:                                    ; preds = %34
  %672 = load volatile i64*, i64** %12
  %673 = load i64, i64* %672, align 8
  %674 = load volatile i64*, i64** %14
  %675 = load i64, i64* %674, align 8
  %676 = add i64 0, 3193525955246447873
  %677 = sub i64 %676, %675
  %678 = sub i64 %677, 3193525955246447873
  %679 = sub i64 0, %675
  %680 = sub i64 0, %673
  %681 = sub i64 %678, %680
  %682 = add i64 %678, %673
  %683 = add i64 %675, 2064069700868006958
  %684 = sub i64 %683, %673
  %685 = sub i64 %684, 2064069700868006958
  %686 = sub i64 %675, %673
  %687 = mul i64 %685, %673
  %688 = shl i64 %675, %673
  %689 = sub i64 0, -170799320916885242
  %690 = sub i64 %689, %675
  %691 = add i64 %690, -170799320916885242
  %692 = sub i64 0, %675
  %693 = sub i64 0, %673
  %694 = sub i64 %691, %693
  %695 = add i64 %691, %673
  %696 = shl i64 %675, %673
  %697 = add i64 0, 5380290905302556217
  %698 = sub i64 %697, %675
  %699 = sub i64 %698, 5380290905302556217
  %700 = sub i64 0, %675
  %701 = add i64 %699, 1929750291742846303
  %702 = add i64 %701, %673
  %703 = sub i64 %702, 1929750291742846303
  %704 = add i64 %699, %673
  %705 = shl i64 %675, %673
  %706 = udiv i64 %675, %673
  %707 = load volatile i64*, i64** %14
  store i64 %706, i64* %707, align 8
  store i32 505873219, i32* %32
  br label %840

; <label>:708:                                    ; preds = %34
  store i32 -1889572809, i32* %32
  br label %840

; <label>:709:                                    ; preds = %34
  %710 = load volatile i64*, i64** %16
  %711 = load i64, i64* %710, align 8
  %712 = add i64 %711, -4588504111241062595
  %713 = sub i64 %712, 1
  %714 = sub i64 %713, -4588504111241062595
  %715 = sub i64 %711, 1
  %716 = mul i64 %714, 1
  %717 = sub i64 0, 1
  %718 = add i64 %711, %717
  %719 = sub i64 %711, 1
  %720 = mul i64 %718, 1
  %721 = add i64 %711, 4905057377098888032
  %722 = sub i64 %721, 1
  %723 = sub i64 %722, 4905057377098888032
  %724 = sub i64 %711, 1
  %725 = mul i64 %723, 1
  %726 = sub i64 0, %711
  %727 = sub i64 0, 1
  %728 = add i64 %726, %727
  %729 = sub i64 0, %728
  %730 = add i64 %711, 1
  %731 = load volatile i64*, i64** %9
  store i64 %729, i64* %731, align 8
  %732 = load volatile i64*, i64** %9
  %733 = load i64, i64* %732, align 8
  %734 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  %735 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %734, align 8
  %736 = load volatile i64*, i64** %15
  %737 = load i64, i64* %736, align 8
  %738 = load volatile i64*, i64** %9
  %739 = load i64, i64* %738, align 8
  %740 = add i64 0, 7102069509982577104
  %741 = sub i64 %740, %737
  %742 = sub i64 %741, 7102069509982577104
  %743 = sub i64 0, %737
  %744 = sub i64 %742, -5557817975016842830
  %745 = add i64 %744, %739
  %746 = add i64 %745, -5557817975016842830
  %747 = add i64 %742, %739
  %748 = sub i64 0, -7691544220489204234
  %749 = sub i64 %748, %737
  %750 = add i64 %749, -7691544220489204234
  %751 = sub i64 0, %737
  %752 = sub i64 0, %739
  %753 = sub i64 %750, %752
  %754 = add i64 %750, %739
  %755 = sub i64 0, %739
  %756 = add i64 %737, %755
  %757 = sub i64 %737, %739
  %758 = mul i64 %756, %739
  %759 = sub i64 0, %739
  %760 = add i64 %737, %759
  %761 = sub i64 %737, %739
  %762 = mul i64 %760, %739
  %763 = udiv i64 %737, %739
  %764 = load volatile %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %8
  call void @_ZNSt24uniform_int_distributionIxE10param_typeC2Exx(%"struct.std::uniform_int_distribution<long long>::param_type"* %764, i64 0, i64 %763)
  %765 = load volatile %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %8
  %766 = load volatile %"class.std::uniform_int_distribution"*, %"class.std::uniform_int_distribution"** %7
  %767 = call i64 @_ZNSt24uniform_int_distributionIxEclISt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEEExRT_RKNS0_10param_typeE(%"class.std::uniform_int_distribution"* %766, %"class.std::mersenne_twister_engine"* dereferenceable(5000) %735, %"struct.std::uniform_int_distribution<long long>::param_type"* dereferenceable(16) %765)
  %768 = sub i64 0, -8436309394204908232
  %769 = sub i64 %768, %733
  %770 = add i64 %769, -8436309394204908232
  %771 = sub i64 0, %733
  %772 = sub i64 %770, 7396318853039136324
  %773 = add i64 %772, %767
  %774 = add i64 %773, 7396318853039136324
  %775 = add i64 %770, %767
  %776 = add i64 %733, -375854359303980721
  %777 = sub i64 %776, %767
  %778 = sub i64 %777, -375854359303980721
  %779 = sub i64 %733, %767
  %780 = mul i64 %778, %767
  %781 = mul i64 %733, %767
  %782 = load volatile i64*, i64** %10
  store i64 %781, i64* %782, align 8
  %783 = load volatile i64*, i64** %10
  %784 = load i64, i64* %783, align 8
  %785 = load volatile %"class.std::mersenne_twister_engine"**, %"class.std::mersenne_twister_engine"*** %19
  %786 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %785, align 8
  %787 = call i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv(%"class.std::mersenne_twister_engine"* %786)
  %788 = load volatile i64*, i64** %17
  %789 = load i64, i64* %788, align 8
  %790 = add i64 0, 6125365112105323010
  %791 = sub i64 %790, %787
  %792 = sub i64 %791, 6125365112105323010
  %793 = sub i64 0, %787
  %794 = add i64 %792, -5124865360591723648
  %795 = add i64 %794, %789
  %796 = sub i64 %795, -5124865360591723648
  %797 = add i64 %792, %789
  %798 = sub i64 %787, 7993213235279685361
  %799 = sub i64 %798, %789
  %800 = add i64 %799, 7993213235279685361
  %801 = sub i64 %787, %789
  %802 = mul i64 %800, %789
  %803 = add i64 0, 2833636266033543708
  %804 = sub i64 %803, %787
  %805 = sub i64 %804, 2833636266033543708
  %806 = sub i64 0, %787
  %807 = sub i64 0, %789
  %808 = sub i64 %805, %807
  %809 = add i64 %805, %789
  %810 = sub i64 %787, -6325191264093112519
  %811 = sub i64 %810, %789
  %812 = add i64 %811, -6325191264093112519
  %813 = sub i64 %787, %789
  %814 = mul i64 %812, %789
  %815 = shl i64 %787, %789
  %816 = sub i64 %787, 3411913313921951070
  %817 = sub i64 %816, %789
  %818 = add i64 %817, 3411913313921951070
  %819 = sub i64 %787, %789
  %820 = shl i64 %784, %818
  %821 = add i64 %784, -8425452169588243711
  %822 = sub i64 %821, %818
  %823 = sub i64 %822, -8425452169588243711
  %824 = sub i64 %784, %818
  %825 = mul i64 %823, %818
  %826 = shl i64 %784, %818
  %827 = shl i64 %784, %818
  %828 = shl i64 %784, %818
  %829 = sub i64 0, %818
  %830 = add i64 %784, %829
  %831 = sub i64 %784, %818
  %832 = mul i64 %830, %818
  %833 = sub i64 0, %818
  %834 = sub i64 %784, %833
  %835 = add i64 %784, %818
  %836 = load volatile i64*, i64** %14
  store i64 %834, i64* %836, align 8
  store i32 2105259606, i32* %32
  br label %840

; <label>:837:                                    ; preds = %34
  store i32 1472214918, i32* %32
  br label %840

; <label>:838:                                    ; preds = %34
  store i32 -1304549909, i32* %32
  br label %840

; <label>:839:                                    ; preds = %34
  store i32 1791044040, i32* %32
  br label %840

; <label>:840:                                    ; preds = %839, %838, %837, %709, %708, %671, %665, %595, %584, %556, %540, %529, %528, %501, %485, %482, %455, %427, %421, %414, %413, %348, %320, %319, %291, %275, %268, %267, %234, %207, %204, %183, %155, %144, %123, %120, %45, %37, %36
  br label %34
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE3minEv() #4 comdat align 2 {
  ret i64 0
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE3maxEv() #4 comdat align 2 {
  %1 = alloca i1
  %2 = alloca i1
  %3 = load i32, i32* @x.118
  %4 = load i32, i32* @y.119
  %5 = sub i32 0, 1
  %6 = add i32 %3, %5
  %7 = sub i32 %3, 1
  %8 = mul i32 %3, %6
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %2
  %11 = icmp slt i32 %4, 10
  store i1 %11, i1* %1
  %12 = alloca i32
  store i32 886549149, i32* %12
  br label %13

; <label>:13:                                     ; preds = %0, %54
  %14 = load i32, i32* %12
  switch i32 %14, label %15 [
    i32 886549149, label %16
    i32 628887886, label %24
    i32 -932489346, label %52
    i32 476353627, label %53
  ]

; <label>:15:                                     ; preds = %13
  br label %54

; <label>:16:                                     ; preds = %13
  %17 = load volatile i1, i1* %2
  %18 = load volatile i1, i1* %1
  %19 = and i1 %17, %18
  %20 = xor i1 %17, %18
  %21 = or i1 %19, %20
  %22 = or i1 %17, %18
  %23 = select i1 %21, i32 628887886, i32 476353627
  store i32 %23, i32* %12
  br label %54

; <label>:24:                                     ; preds = %13
  %25 = load i32, i32* @x.118
  %26 = load i32, i32* @y.119
  %27 = add i32 %25, 1323087626
  %28 = sub i32 %27, 1
  %29 = sub i32 %28, 1323087626
  %30 = sub i32 %25, 1
  %31 = mul i32 %25, %29
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %26, 10
  %35 = xor i1 %33, true
  %36 = xor i1 %34, true
  %37 = xor i1 false, true
  %38 = and i1 %35, false
  %39 = and i1 %33, %37
  %40 = and i1 %36, false
  %41 = and i1 %34, %37
  %42 = or i1 %38, %39
  %43 = or i1 %40, %41
  %44 = xor i1 %42, %43
  %45 = or i1 %35, %36
  %46 = xor i1 %45, true
  %47 = or i1 false, %37
  %48 = and i1 %46, %47
  %49 = or i1 %44, %48
  %50 = or i1 %33, %34
  %51 = select i1 %49, i32 -932489346, i32 476353627
  store i32 %51, i32* %12
  br label %54

; <label>:52:                                     ; preds = %13
  ret i64 4294967295

; <label>:53:                                     ; preds = %13
  store i32 628887886, i32* %12
  br label %54

; <label>:54:                                     ; preds = %53, %24, %16, %15
  br label %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt24uniform_int_distributionIxE10param_type1bEv(%"struct.std::uniform_int_distribution<long long>::param_type"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::uniform_int_distribution<long long>::param_type"*, align 8
  store %"struct.std::uniform_int_distribution<long long>::param_type"* %0, %"struct.std::uniform_int_distribution<long long>::param_type"** %2, align 8
  %3 = load %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::uniform_int_distribution<long long>::param_type", %"struct.std::uniform_int_distribution<long long>::param_type"* %3, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt24uniform_int_distributionIxE10param_type1aEv(%"struct.std::uniform_int_distribution<long long>::param_type"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::uniform_int_distribution<long long>::param_type"*, align 8
  store %"struct.std::uniform_int_distribution<long long>::param_type"* %0, %"struct.std::uniform_int_distribution<long long>::param_type"** %2, align 8
  %3 = load %"struct.std::uniform_int_distribution<long long>::param_type"*, %"struct.std::uniform_int_distribution<long long>::param_type"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::uniform_int_distribution<long long>::param_type", %"struct.std::uniform_int_distribution<long long>::param_type"* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEclEv(%"class.std::mersenne_twister_engine"*) #0 comdat align 2 {
  %2 = alloca i1
  %3 = alloca %"class.std::mersenne_twister_engine"*
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.124
  %8 = load i32, i32* @y.125
  %9 = sub i32 %7, 856944993
  %10 = sub i32 %9, 1
  %11 = add i32 %10, 856944993
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 7684378, i32* %17
  br label %18

; <label>:18:                                     ; preds = %1, %200
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 7684378, label %21
    i32 -371593693, label %29
    i32 982578847, label %52
    i32 946250584, label %55
    i32 1095754050, label %71
    i32 1388111847, label %88
    i32 99786432, label %89
    i32 -1774855091, label %191
    i32 2026910464, label %198
  ]

; <label>:20:                                     ; preds = %18
  br label %200

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  %28 = select i1 %26, i32 -371593693, i32 -1774855091
  store i32 %28, i32* %17
  br label %200

; <label>:29:                                     ; preds = %18
  %30 = alloca %"class.std::mersenne_twister_engine"*, align 8
  %31 = alloca i64, align 8
  store i64* %31, i64** %4
  store %"class.std::mersenne_twister_engine"* %0, %"class.std::mersenne_twister_engine"** %30, align 8
  %32 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %30, align 8
  store %"class.std::mersenne_twister_engine"* %32, %"class.std::mersenne_twister_engine"** %3
  %33 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %34 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %33, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = icmp uge i64 %35, 624
  store i1 %36, i1* %2
  %37 = load i32, i32* @x.124
  %38 = load i32, i32* @y.125
  %39 = sub i32 %37, 1617125403
  %40 = sub i32 %39, 1
  %41 = add i32 %40, 1617125403
  %42 = sub i32 %37, 1
  %43 = mul i32 %37, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %38, 10
  %47 = and i1 %45, %46
  %48 = xor i1 %45, %46
  %49 = or i1 %47, %48
  %50 = or i1 %45, %46
  %51 = select i1 %49, i32 982578847, i32 -1774855091
  store i32 %51, i32* %17
  br label %200

; <label>:52:                                     ; preds = %18
  %53 = load volatile i1, i1* %2
  %54 = select i1 %53, i32 946250584, i32 99786432
  store i32 %54, i32* %17
  br label %200

; <label>:55:                                     ; preds = %18
  %56 = load i32, i32* @x.124
  %57 = load i32, i32* @y.125
  %58 = sub i32 %56, -967095314
  %59 = sub i32 %58, 1
  %60 = add i32 %59, -967095314
  %61 = sub i32 %56, 1
  %62 = mul i32 %56, %60
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %57, 10
  %66 = and i1 %64, %65
  %67 = xor i1 %64, %65
  %68 = or i1 %66, %67
  %69 = or i1 %64, %65
  %70 = select i1 %68, i32 1095754050, i32 2026910464
  store i32 %70, i32* %17
  br label %200

; <label>:71:                                     ; preds = %18
  %72 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  call void @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv(%"class.std::mersenne_twister_engine"* %72)
  %73 = load i32, i32* @x.124
  %74 = load i32, i32* @y.125
  %75 = sub i32 %73, 1825800463
  %76 = sub i32 %75, 1
  %77 = add i32 %76, 1825800463
  %78 = sub i32 %73, 1
  %79 = mul i32 %73, %77
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %74, 10
  %83 = and i1 %81, %82
  %84 = xor i1 %81, %82
  %85 = or i1 %83, %84
  %86 = or i1 %81, %82
  %87 = select i1 %85, i32 1388111847, i32 2026910464
  store i32 %87, i32* %17
  br label %200

; <label>:88:                                     ; preds = %18
  store i32 99786432, i32* %17
  br label %200

; <label>:89:                                     ; preds = %18
  %90 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %91 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %90, i32 0, i32 0
  %92 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %93 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %92, i32 0, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %94, 3330996947419885713
  %96 = add i64 %95, 1
  %97 = add i64 %96, 3330996947419885713
  %98 = add i64 %94, 1
  store i64 %97, i64* %93, align 8
  %99 = getelementptr inbounds [624 x i64], [624 x i64]* %91, i64 0, i64 %94
  %100 = load i64, i64* %99, align 8
  %101 = load volatile i64*, i64** %4
  store i64 %100, i64* %101, align 8
  %102 = load volatile i64*, i64** %4
  %103 = load i64, i64* %102, align 8
  %104 = lshr i64 %103, 11
  %105 = xor i64 %104, -1
  %106 = xor i64 4294967295, -1
  %107 = xor i64 -6243940707513206444, -1
  %108 = or i64 %105, %106
  %109 = or i64 -6243940707513206444, %107
  %110 = xor i64 %108, -1
  %111 = and i64 %110, %109
  %112 = and i64 %104, 4294967295
  %113 = load volatile i64*, i64** %4
  %114 = load i64, i64* %113, align 8
  %115 = xor i64 %114, -1
  %116 = and i64 -212918111442012743, %115
  %117 = xor i64 -212918111442012743, -1
  %118 = and i64 %114, %117
  %119 = xor i64 %111, -1
  %120 = and i64 %119, -212918111442012743
  %121 = and i64 %111, %117
  %122 = or i64 %116, %118
  %123 = or i64 %120, %121
  %124 = xor i64 %122, %123
  %125 = xor i64 %114, %111
  %126 = load volatile i64*, i64** %4
  store i64 %124, i64* %126, align 8
  %127 = load volatile i64*, i64** %4
  %128 = load i64, i64* %127, align 8
  %129 = shl i64 %128, 7
  %130 = xor i64 %129, -1
  %131 = xor i64 2636928640, -1
  %132 = xor i64 2149173166271095939, -1
  %133 = or i64 %130, %131
  %134 = or i64 2149173166271095939, %132
  %135 = xor i64 %133, -1
  %136 = and i64 %135, %134
  %137 = and i64 %129, 2636928640
  %138 = load volatile i64*, i64** %4
  %139 = load i64, i64* %138, align 8
  %140 = xor i64 %139, -1
  %141 = and i64 %136, %140
  %142 = xor i64 %136, -1
  %143 = and i64 %139, %142
  %144 = or i64 %141, %143
  %145 = xor i64 %139, %136
  %146 = load volatile i64*, i64** %4
  store i64 %144, i64* %146, align 8
  %147 = load volatile i64*, i64** %4
  %148 = load i64, i64* %147, align 8
  %149 = shl i64 %148, 15
  %150 = xor i64 %149, -1
  %151 = xor i64 4022730752, -1
  %152 = xor i64 849677712011736789, -1
  %153 = or i64 %150, %151
  %154 = or i64 849677712011736789, %152
  %155 = xor i64 %153, -1
  %156 = and i64 %155, %154
  %157 = and i64 %149, 4022730752
  %158 = load volatile i64*, i64** %4
  %159 = load i64, i64* %158, align 8
  %160 = xor i64 %159, -1
  %161 = and i64 -4456970135872042256, %160
  %162 = xor i64 -4456970135872042256, -1
  %163 = and i64 %159, %162
  %164 = xor i64 %156, -1
  %165 = and i64 %164, -4456970135872042256
  %166 = and i64 %156, %162
  %167 = or i64 %161, %163
  %168 = or i64 %165, %166
  %169 = xor i64 %167, %168
  %170 = xor i64 %159, %156
  %171 = load volatile i64*, i64** %4
  store i64 %169, i64* %171, align 8
  %172 = load volatile i64*, i64** %4
  %173 = load i64, i64* %172, align 8
  %174 = lshr i64 %173, 18
  %175 = load volatile i64*, i64** %4
  %176 = load i64, i64* %175, align 8
  %177 = xor i64 %176, -1
  %178 = and i64 -8257953740106695532, %177
  %179 = xor i64 -8257953740106695532, -1
  %180 = and i64 %176, %179
  %181 = xor i64 %174, -1
  %182 = and i64 %181, -8257953740106695532
  %183 = and i64 %174, %179
  %184 = or i64 %178, %180
  %185 = or i64 %182, %183
  %186 = xor i64 %184, %185
  %187 = xor i64 %176, %174
  %188 = load volatile i64*, i64** %4
  store i64 %186, i64* %188, align 8
  %189 = load volatile i64*, i64** %4
  %190 = load i64, i64* %189, align 8
  ret i64 %190

; <label>:191:                                    ; preds = %18
  %192 = alloca %"class.std::mersenne_twister_engine"*, align 8
  %193 = alloca i64, align 8
  store %"class.std::mersenne_twister_engine"* %0, %"class.std::mersenne_twister_engine"** %192, align 8
  %194 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %192, align 8
  %195 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %194, i32 0, i32 1
  %196 = load i64, i64* %195, align 8
  %197 = icmp uge i64 %196, 624
  store i32 -371593693, i32* %17
  br label %200

; <label>:198:                                    ; preds = %18
  %199 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  call void @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv(%"class.std::mersenne_twister_engine"* %199)
  store i32 1095754050, i32* %17
  br label %200

; <label>:200:                                    ; preds = %198, %191, %88, %71, %55, %52, %29, %21, %20
  br label %18
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv(%"class.std::mersenne_twister_engine"*) #4 comdat align 2 {
  %2 = alloca i1
  %3 = alloca %"class.std::mersenne_twister_engine"*
  %4 = alloca %"class.std::mersenne_twister_engine"*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store %"class.std::mersenne_twister_engine"* %0, %"class.std::mersenne_twister_engine"** %4, align 8
  %12 = load %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %4, align 8
  store %"class.std::mersenne_twister_engine"* %12, %"class.std::mersenne_twister_engine"** %3
  store i64 -2147483648, i64* %5, align 8
  store i64 2147483647, i64* %6, align 8
  store i64 0, i64* %7, align 8
  %13 = alloca i32
  store i32 -363575036, i32* %13
  br label %14

; <label>:14:                                     ; preds = %1, %297
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -363575036, label %17
    i32 -1377227515, label %21
    i32 -1758806705, label %88
    i32 -652072502, label %93
    i32 1979171129, label %94
    i32 2124353921, label %122
    i32 1121472099, label %151
    i32 -1842930219, label %154
    i32 756625083, label %228
    i32 -142423233, label %234
    i32 -510325593, label %294
  ]

; <label>:16:                                     ; preds = %14
  br label %297

; <label>:17:                                     ; preds = %14
  %18 = load i64, i64* %7, align 8
  %19 = icmp ult i64 %18, 227
  %20 = select i1 %19, i32 -1377227515, i32 -652072502
  store i32 %20, i32* %13
  br label %297

; <label>:21:                                     ; preds = %14
  %22 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %23 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %22, i32 0, i32 0
  %24 = load i64, i64* %7, align 8
  %25 = getelementptr inbounds [624 x i64], [624 x i64]* %23, i64 0, i64 %24
  %26 = load i64, i64* %25, align 8
  %27 = xor i64 -2147483648, -1
  %28 = xor i64 %26, %27
  %29 = and i64 %28, %26
  %30 = and i64 %26, -2147483648
  %31 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %32 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %31, i32 0, i32 0
  %33 = load i64, i64* %7, align 8
  %34 = sub i64 %33, 5672183937834587401
  %35 = add i64 %34, 1
  %36 = add i64 %35, 5672183937834587401
  %37 = add i64 %33, 1
  %38 = getelementptr inbounds [624 x i64], [624 x i64]* %32, i64 0, i64 %36
  %39 = load i64, i64* %38, align 8
  %40 = xor i64 2147483647, -1
  %41 = xor i64 %39, %40
  %42 = and i64 %41, %39
  %43 = and i64 %39, 2147483647
  %44 = and i64 %29, %42
  %45 = xor i64 %29, %42
  %46 = or i64 %44, %45
  %47 = or i64 %29, %42
  store i64 %46, i64* %8, align 8
  %48 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %49 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %48, i32 0, i32 0
  %50 = load i64, i64* %7, align 8
  %51 = sub i64 0, %50
  %52 = sub i64 0, 397
  %53 = add i64 %51, %52
  %54 = sub i64 0, %53
  %55 = add i64 %50, 397
  %56 = getelementptr inbounds [624 x i64], [624 x i64]* %49, i64 0, i64 %54
  %57 = load i64, i64* %56, align 8
  %58 = load i64, i64* %8, align 8
  %59 = lshr i64 %58, 1
  %60 = xor i64 %57, -1
  %61 = and i64 -6282059706576078212, %60
  %62 = xor i64 -6282059706576078212, -1
  %63 = and i64 %57, %62
  %64 = xor i64 %59, -1
  %65 = and i64 %64, -6282059706576078212
  %66 = and i64 %59, %62
  %67 = or i64 %61, %63
  %68 = or i64 %65, %66
  %69 = xor i64 %67, %68
  %70 = xor i64 %57, %59
  %71 = load i64, i64* %8, align 8
  %72 = xor i64 1, -1
  %73 = xor i64 %71, %72
  %74 = and i64 %73, %71
  %75 = and i64 %71, 1
  %76 = icmp ne i64 %74, 0
  %77 = select i1 %76, i64 2567483615, i64 0
  %78 = xor i64 %69, -1
  %79 = and i64 %77, %78
  %80 = xor i64 %77, -1
  %81 = and i64 %69, %80
  %82 = or i64 %79, %81
  %83 = xor i64 %69, %77
  %84 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %85 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %84, i32 0, i32 0
  %86 = load i64, i64* %7, align 8
  %87 = getelementptr inbounds [624 x i64], [624 x i64]* %85, i64 0, i64 %86
  store i64 %82, i64* %87, align 8
  store i32 -1758806705, i32* %13
  br label %297

; <label>:88:                                     ; preds = %14
  %89 = load i64, i64* %7, align 8
  %90 = sub i64 0, 1
  %91 = sub i64 %89, %90
  %92 = add i64 %89, 1
  store i64 %91, i64* %7, align 8
  store i32 -363575036, i32* %13
  br label %297

; <label>:93:                                     ; preds = %14
  store i64 227, i64* %9, align 8
  store i32 1979171129, i32* %13
  br label %297

; <label>:94:                                     ; preds = %14
  %95 = load i32, i32* @x.126
  %96 = load i32, i32* @y.127
  %97 = sub i32 %95, -161688312
  %98 = sub i32 %97, 1
  %99 = add i32 %98, -161688312
  %100 = sub i32 %95, 1
  %101 = mul i32 %95, %99
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %96, 10
  %105 = xor i1 %103, true
  %106 = xor i1 %104, true
  %107 = xor i1 false, true
  %108 = and i1 %105, false
  %109 = and i1 %103, %107
  %110 = and i1 %106, false
  %111 = and i1 %104, %107
  %112 = or i1 %108, %109
  %113 = or i1 %110, %111
  %114 = xor i1 %112, %113
  %115 = or i1 %105, %106
  %116 = xor i1 %115, true
  %117 = or i1 false, %107
  %118 = and i1 %116, %117
  %119 = or i1 %114, %118
  %120 = or i1 %103, %104
  %121 = select i1 %119, i32 2124353921, i32 -510325593
  store i32 %121, i32* %13
  br label %297

; <label>:122:                                    ; preds = %14
  %123 = load i64, i64* %9, align 8
  %124 = icmp ult i64 %123, 623
  store i1 %124, i1* %2
  %125 = load i32, i32* @x.126
  %126 = load i32, i32* @y.127
  %127 = sub i32 0, 1
  %128 = add i32 %125, %127
  %129 = sub i32 %125, 1
  %130 = mul i32 %125, %128
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %126, 10
  %134 = xor i1 %132, true
  %135 = xor i1 %133, true
  %136 = xor i1 true, true
  %137 = and i1 %134, true
  %138 = and i1 %132, %136
  %139 = and i1 %135, true
  %140 = and i1 %133, %136
  %141 = or i1 %137, %138
  %142 = or i1 %139, %140
  %143 = xor i1 %141, %142
  %144 = or i1 %134, %135
  %145 = xor i1 %144, true
  %146 = or i1 true, %136
  %147 = and i1 %145, %146
  %148 = or i1 %143, %147
  %149 = or i1 %132, %133
  %150 = select i1 %148, i32 1121472099, i32 -510325593
  store i32 %150, i32* %13
  br label %297

; <label>:151:                                    ; preds = %14
  %152 = load volatile i1, i1* %2
  %153 = select i1 %152, i32 -1842930219, i32 -142423233
  store i32 %153, i32* %13
  br label %297

; <label>:154:                                    ; preds = %14
  %155 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %156 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %155, i32 0, i32 0
  %157 = load i64, i64* %9, align 8
  %158 = getelementptr inbounds [624 x i64], [624 x i64]* %156, i64 0, i64 %157
  %159 = load i64, i64* %158, align 8
  %160 = xor i64 -2147483648, -1
  %161 = xor i64 %159, %160
  %162 = and i64 %161, %159
  %163 = and i64 %159, -2147483648
  %164 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %165 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %164, i32 0, i32 0
  %166 = load i64, i64* %9, align 8
  %167 = sub i64 %166, 8206072716630733960
  %168 = add i64 %167, 1
  %169 = add i64 %168, 8206072716630733960
  %170 = add i64 %166, 1
  %171 = getelementptr inbounds [624 x i64], [624 x i64]* %165, i64 0, i64 %169
  %172 = load i64, i64* %171, align 8
  %173 = xor i64 %172, -1
  %174 = xor i64 2147483647, -1
  %175 = xor i64 7207290108550868859, -1
  %176 = or i64 %173, %174
  %177 = or i64 7207290108550868859, %175
  %178 = xor i64 %176, -1
  %179 = and i64 %178, %177
  %180 = and i64 %172, 2147483647
  %181 = and i64 %162, %179
  %182 = xor i64 %162, %179
  %183 = or i64 %181, %182
  %184 = or i64 %162, %179
  store i64 %183, i64* %10, align 8
  %185 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %186 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %185, i32 0, i32 0
  %187 = load i64, i64* %9, align 8
  %188 = sub i64 %187, 418702869679397767
  %189 = add i64 %188, -227
  %190 = add i64 %189, 418702869679397767
  %191 = add i64 %187, -227
  %192 = getelementptr inbounds [624 x i64], [624 x i64]* %186, i64 0, i64 %190
  %193 = load i64, i64* %192, align 8
  %194 = load i64, i64* %10, align 8
  %195 = lshr i64 %194, 1
  %196 = xor i64 %193, -1
  %197 = and i64 %195, %196
  %198 = xor i64 %195, -1
  %199 = and i64 %193, %198
  %200 = or i64 %197, %199
  %201 = xor i64 %193, %195
  %202 = load i64, i64* %10, align 8
  %203 = xor i64 %202, -1
  %204 = xor i64 1, -1
  %205 = xor i64 4786969641368759810, -1
  %206 = or i64 %203, %204
  %207 = or i64 4786969641368759810, %205
  %208 = xor i64 %206, -1
  %209 = and i64 %208, %207
  %210 = and i64 %202, 1
  %211 = icmp ne i64 %209, 0
  %212 = select i1 %211, i64 2567483615, i64 0
  %213 = xor i64 %200, -1
  %214 = and i64 6872742855483446995, %213
  %215 = xor i64 6872742855483446995, -1
  %216 = and i64 %200, %215
  %217 = xor i64 %212, -1
  %218 = and i64 %217, 6872742855483446995
  %219 = and i64 %212, %215
  %220 = or i64 %214, %216
  %221 = or i64 %218, %219
  %222 = xor i64 %220, %221
  %223 = xor i64 %200, %212
  %224 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %225 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %224, i32 0, i32 0
  %226 = load i64, i64* %9, align 8
  %227 = getelementptr inbounds [624 x i64], [624 x i64]* %225, i64 0, i64 %226
  store i64 %222, i64* %227, align 8
  store i32 756625083, i32* %13
  br label %297

; <label>:228:                                    ; preds = %14
  %229 = load i64, i64* %9, align 8
  %230 = add i64 %229, -452590019784164125
  %231 = add i64 %230, 1
  %232 = sub i64 %231, -452590019784164125
  %233 = add i64 %229, 1
  store i64 %232, i64* %9, align 8
  store i32 1979171129, i32* %13
  br label %297

; <label>:234:                                    ; preds = %14
  %235 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %236 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %235, i32 0, i32 0
  %237 = getelementptr inbounds [624 x i64], [624 x i64]* %236, i64 0, i64 623
  %238 = load i64, i64* %237, align 8
  %239 = xor i64 -2147483648, -1
  %240 = xor i64 %238, %239
  %241 = and i64 %240, %238
  %242 = and i64 %238, -2147483648
  %243 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %244 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %243, i32 0, i32 0
  %245 = getelementptr inbounds [624 x i64], [624 x i64]* %244, i64 0, i64 0
  %246 = load i64, i64* %245, align 8
  %247 = xor i64 2147483647, -1
  %248 = xor i64 %246, %247
  %249 = and i64 %248, %246
  %250 = and i64 %246, 2147483647
  %251 = and i64 %241, %249
  %252 = xor i64 %241, %249
  %253 = or i64 %251, %252
  %254 = or i64 %241, %249
  store i64 %253, i64* %11, align 8
  %255 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %256 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %255, i32 0, i32 0
  %257 = getelementptr inbounds [624 x i64], [624 x i64]* %256, i64 0, i64 396
  %258 = load i64, i64* %257, align 8
  %259 = load i64, i64* %11, align 8
  %260 = lshr i64 %259, 1
  %261 = xor i64 %258, -1
  %262 = and i64 %260, %261
  %263 = xor i64 %260, -1
  %264 = and i64 %258, %263
  %265 = or i64 %262, %264
  %266 = xor i64 %258, %260
  %267 = load i64, i64* %11, align 8
  %268 = xor i64 %267, -1
  %269 = xor i64 1, -1
  %270 = xor i64 8392293459510408938, -1
  %271 = or i64 %268, %269
  %272 = or i64 8392293459510408938, %270
  %273 = xor i64 %271, -1
  %274 = and i64 %273, %272
  %275 = and i64 %267, 1
  %276 = icmp ne i64 %274, 0
  %277 = select i1 %276, i64 2567483615, i64 0
  %278 = xor i64 %265, -1
  %279 = and i64 -1656864874851043956, %278
  %280 = xor i64 -1656864874851043956, -1
  %281 = and i64 %265, %280
  %282 = xor i64 %277, -1
  %283 = and i64 %282, -1656864874851043956
  %284 = and i64 %277, %280
  %285 = or i64 %279, %281
  %286 = or i64 %283, %284
  %287 = xor i64 %285, %286
  %288 = xor i64 %265, %277
  %289 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %290 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %289, i32 0, i32 0
  %291 = getelementptr inbounds [624 x i64], [624 x i64]* %290, i64 0, i64 623
  store i64 %287, i64* %291, align 8
  %292 = load volatile %"class.std::mersenne_twister_engine"*, %"class.std::mersenne_twister_engine"** %3
  %293 = getelementptr inbounds %"class.std::mersenne_twister_engine", %"class.std::mersenne_twister_engine"* %292, i32 0, i32 1
  store i64 0, i64* %293, align 8
  ret void

; <label>:294:                                    ; preds = %14
  %295 = load i64, i64* %9, align 8
  %296 = icmp ult i64 %295, 623
  store i32 2124353921, i32* %13
  br label %297

; <label>:297:                                    ; preds = %294, %228, %154, %151, %122, %94, %93, %88, %21, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEEC2Ev(%"struct.std::_Vector_base"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %2, align 8
  %3 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %3, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %4)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %0, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %2, align 8
  %3 = load %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %2, align 8
  %4 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %3 to %"class.std::allocator.1"*
  call void @_ZNSaIxEC2Ev(%"class.std::allocator.1"* %4) #3
  %5 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %3, i32 0, i32 0
  store i64* null, i64** %5, align 8
  %6 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %3, i32 0, i32 1
  store i64* null, i64** %6, align 8
  %7 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %3, i32 0, i32 2
  store i64* null, i64** %7, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxEC2Ev(%"class.__gnu_cxx::new_allocator.2"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %2, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64*, i64*, %"class.std::allocator.1"* dereferenceable(1)) #0 comdat {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.134
  %7 = load i32, i32* @y.135
  %8 = add i32 %6, 369953860
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, 369953860
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 -1742232547, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %79
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -1742232547, label %20
    i32 -1344558956, label %40
    i32 799097328, label %72
    i32 -2115589416, label %73
  ]

; <label>:19:                                     ; preds = %17
  br label %79

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 -1344558956, i32 -2115589416
  store i32 %39, i32* %16
  br label %79

; <label>:40:                                     ; preds = %17
  %41 = alloca i64*, align 8
  %42 = alloca i64*, align 8
  %43 = alloca %"class.std::allocator.1"*, align 8
  store i64* %0, i64** %41, align 8
  store i64* %1, i64** %42, align 8
  store %"class.std::allocator.1"* %2, %"class.std::allocator.1"** %43, align 8
  %44 = load i64*, i64** %41, align 8
  %45 = load i64*, i64** %42, align 8
  call void @_ZSt8_DestroyIPxEvT_S1_(i64* %44, i64* %45)
  %46 = load i32, i32* @x.134
  %47 = load i32, i32* @y.135
  %48 = sub i32 0, 1
  %49 = add i32 %46, %48
  %50 = sub i32 %46, 1
  %51 = mul i32 %46, %49
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %47, 10
  %55 = xor i1 %53, true
  %56 = xor i1 %54, true
  %57 = xor i1 false, true
  %58 = and i1 %55, false
  %59 = and i1 %53, %57
  %60 = and i1 %56, false
  %61 = and i1 %54, %57
  %62 = or i1 %58, %59
  %63 = or i1 %60, %61
  %64 = xor i1 %62, %63
  %65 = or i1 %55, %56
  %66 = xor i1 %65, true
  %67 = or i1 false, %57
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  %70 = or i1 %53, %54
  %71 = select i1 %69, i32 799097328, i32 -2115589416
  store i32 %71, i32* %16
  br label %79

; <label>:72:                                     ; preds = %17
  ret void

; <label>:73:                                     ; preds = %17
  %74 = alloca i64*, align 8
  %75 = alloca i64*, align 8
  %76 = alloca %"class.std::allocator.1"*, align 8
  store i64* %0, i64** %74, align 8
  store i64* %1, i64** %75, align 8
  store %"class.std::allocator.1"* %2, %"class.std::allocator.1"** %76, align 8
  %77 = load i64*, i64** %74, align 8
  %78 = load i64*, i64** %75, align 8
  call void @_ZSt8_DestroyIPxEvT_S1_(i64* %77, i64* %78)
  store i32 -1344558956, i32* %16
  br label %79

; <label>:79:                                     ; preds = %73, %40, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %2, align 8
  %3 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %3, i32 0, i32 0
  %5 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %4 to %"class.std::allocator.1"*
  ret %"class.std::allocator.1"* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEED2Ev(%"struct.std::_Vector_base"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"struct.std::_Vector_base"*, align 8
  %3 = alloca i8*
  %4 = alloca i32
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %2, align 8
  %5 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %2, align 8
  %6 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %7 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %6, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %9, i32 0, i32 2
  %11 = load i64*, i64** %10, align 8
  %12 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %13 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %12, i32 0, i32 0
  %14 = load i64*, i64** %13, align 8
  %15 = ptrtoint i64* %11 to i64
  %16 = ptrtoint i64* %14 to i64
  %17 = add i64 %15, 9133606683449546239
  %18 = sub i64 %17, %16
  %19 = sub i64 %18, 9133606683449546239
  %20 = sub i64 %15, %16
  %21 = sdiv exact i64 %19, 8
  invoke void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %5, i64* %8, i64 %21)
          to label %22 unwind label %65

; <label>:22:                                     ; preds = %1
  %23 = load i32, i32* @x.138
  %24 = load i32, i32* @y.139
  %25 = sub i32 0, 1
  %26 = add i32 %23, %25
  %27 = sub i32 %23, 1
  %28 = mul i32 %23, %26
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %24, 10
  %32 = and i1 %30, %31
  %33 = xor i1 %30, %31
  %34 = or i1 %32, %33
  %35 = or i1 %30, %31
  br i1 %34, label %36, label %72

; <label>:36:                                     ; preds = %22, %72
  %37 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %37) #3
  %38 = load i32, i32* @x.138
  %39 = load i32, i32* @y.139
  %40 = add i32 %38, 755230081
  %41 = sub i32 %40, 1
  %42 = sub i32 %41, 755230081
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 false, true
  %51 = and i1 %48, false
  %52 = and i1 %46, %50
  %53 = and i1 %49, false
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 false, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  br i1 %62, label %64, label %72

; <label>:64:                                     ; preds = %36
  ret void

; <label>:65:                                     ; preds = %1
  %66 = landingpad { i8*, i32 }
          catch i8* null
  %67 = extractvalue { i8*, i32 } %66, 0
  store i8* %67, i8** %3, align 8
  %68 = extractvalue { i8*, i32 } %66, 1
  store i32 %68, i32* %4, align 4
  %69 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %69) #3
  br label %70

; <label>:70:                                     ; preds = %65
  %71 = load i8*, i8** %3, align 8
  call void @__clang_call_terminate(i8* %71) #13
  unreachable

; <label>:72:                                     ; preds = %36, %22
  %73 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  call void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %73) #3
  br label %36
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt8_DestroyIPxEvT_S1_(i64*, i64*) #0 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load i64*, i64** %3, align 8
  %6 = load i64*, i64** %4, align 8
  call void @_ZNSt12_Destroy_auxILb1EE9__destroyIPxEEvT_S3_(i64* %5, i64* %6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Destroy_auxILb1EE9__destroyIPxEEvT_S3_(i64*, i64*) #4 comdat align 2 {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"*, i64*, i64) #0 comdat align 2 {
  %4 = alloca i64*
  %5 = alloca %"struct.std::_Vector_base"*
  %6 = alloca %"struct.std::_Vector_base"*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %6, align 8
  store i64* %1, i64** %7, align 8
  store i64 %2, i64* %8, align 8
  %9 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %6, align 8
  store %"struct.std::_Vector_base"* %9, %"struct.std::_Vector_base"** %5
  %10 = load i64*, i64** %7, align 8
  store i64* %10, i64** %4
  %11 = alloca i32
  store i32 101662146, i32* %11
  br label %12

; <label>:12:                                     ; preds = %3, %26
  %13 = load i32, i32* %11
  switch i32 %13, label %14 [
    i32 101662146, label %15
    i32 -2091664228, label %19
    i32 1538853542, label %25
  ]

; <label>:14:                                     ; preds = %12
  br label %26

; <label>:15:                                     ; preds = %12
  %16 = load volatile i64*, i64** %4
  %17 = icmp ne i64* %16, null
  %18 = select i1 %17, i32 -2091664228, i32 1538853542
  store i32 %18, i32* %11
  br label %26

; <label>:19:                                     ; preds = %12
  %20 = load volatile %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %5
  %21 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %20, i32 0, i32 0
  %22 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %21 to %"class.std::allocator.1"*
  %23 = load i64*, i64** %7, align 8
  %24 = load i64, i64* %8, align 8
  call void @_ZNSt16allocator_traitsISaIxEE10deallocateERS0_Pxm(%"class.std::allocator.1"* dereferenceable(1) %22, i64* %23, i64 %24)
  store i32 1538853542, i32* %11
  br label %26

; <label>:25:                                     ; preds = %12
  ret void

; <label>:26:                                     ; preds = %19, %15, %14
  br label %12
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implD2Ev(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %0, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %2, align 8
  %3 = load %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %2, align 8
  %4 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %3 to %"class.std::allocator.1"*
  call void @_ZNSaIxED2Ev(%"class.std::allocator.1"* %4) #3
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaIxEE10deallocateERS0_Pxm(%"class.std::allocator.1"* dereferenceable(1), i64*, i64) #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.148
  %7 = load i32, i32* @y.149
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 2101577935, i32* %15
  br label %16

; <label>:16:                                     ; preds = %3, %71
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 2101577935, label %19
    i32 375088652, label %39
    i32 -215133012, label %62
    i32 -9039873, label %63
  ]

; <label>:18:                                     ; preds = %16
  br label %71

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 375088652, i32 -9039873
  store i32 %38, i32* %15
  br label %71

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::allocator.1"*, align 8
  %41 = alloca i64*, align 8
  %42 = alloca i64, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %40, align 8
  store i64* %1, i64** %41, align 8
  store i64 %2, i64* %42, align 8
  %43 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %40, align 8
  %44 = bitcast %"class.std::allocator.1"* %43 to %"class.__gnu_cxx::new_allocator.2"*
  %45 = load i64*, i64** %41, align 8
  %46 = load i64, i64* %42, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIxE10deallocateEPxm(%"class.__gnu_cxx::new_allocator.2"* %44, i64* %45, i64 %46)
  %47 = load i32, i32* @x.148
  %48 = load i32, i32* @y.149
  %49 = sub i32 %47, -1886154307
  %50 = sub i32 %49, 1
  %51 = add i32 %50, -1886154307
  %52 = sub i32 %47, 1
  %53 = mul i32 %47, %51
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %48, 10
  %57 = and i1 %55, %56
  %58 = xor i1 %55, %56
  %59 = or i1 %57, %58
  %60 = or i1 %55, %56
  %61 = select i1 %59, i32 -215133012, i32 -9039873
  store i32 %61, i32* %15
  br label %71

; <label>:62:                                     ; preds = %16
  ret void

; <label>:63:                                     ; preds = %16
  %64 = alloca %"class.std::allocator.1"*, align 8
  %65 = alloca i64*, align 8
  %66 = alloca i64, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %64, align 8
  store i64* %1, i64** %65, align 8
  store i64 %2, i64* %66, align 8
  %67 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %64, align 8
  %68 = bitcast %"class.std::allocator.1"* %67 to %"class.__gnu_cxx::new_allocator.2"*
  %69 = load i64*, i64** %65, align 8
  %70 = load i64, i64* %66, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIxE10deallocateEPxm(%"class.__gnu_cxx::new_allocator.2"* %68, i64* %69, i64 %70)
  store i32 375088652, i32* %15
  br label %71

; <label>:71:                                     ; preds = %63, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxE10deallocateEPxm(%"class.__gnu_cxx::new_allocator.2"*, i64*, i64) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %4, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = bitcast i64* %8 to i8*
  call void @_ZdlPv(i8* %9) #3
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #8

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxED2Ev(%"class.__gnu_cxx::new_allocator.2"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %2, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE17_M_default_appendEm(%"class.std::vector"*, i64) #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::vector"*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i8*
  %10 = alloca i32
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  store i64 %1, i64* %4, align 8
  %11 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %12 = load i64, i64* %4, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %14, label %179

; <label>:14:                                     ; preds = %2
  %15 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %16 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %15, i32 0, i32 0
  %17 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %16, i32 0, i32 2
  %18 = load i64*, i64** %17, align 8
  %19 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %20 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %19, i32 0, i32 0
  %21 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %20, i32 0, i32 1
  %22 = load i64*, i64** %21, align 8
  %23 = ptrtoint i64* %18 to i64
  %24 = ptrtoint i64* %22 to i64
  %25 = add i64 %23, -1147447119443343998
  %26 = sub i64 %25, %24
  %27 = sub i64 %26, -1147447119443343998
  %28 = sub i64 %23, %24
  %29 = sdiv exact i64 %27, 8
  %30 = load i64, i64* %4, align 8
  %31 = icmp uge i64 %29, %30
  br i1 %31, label %32, label %44

; <label>:32:                                     ; preds = %14
  %33 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %34 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %33, i32 0, i32 0
  %35 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %34, i32 0, i32 1
  %36 = load i64*, i64** %35, align 8
  %37 = load i64, i64* %4, align 8
  %38 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %39 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %38) #3
  %40 = call i64* @_ZSt27__uninitialized_default_n_aIPxmxET_S1_T0_RSaIT1_E(i64* %36, i64 %37, %"class.std::allocator.1"* dereferenceable(1) %39)
  %41 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %42 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %41, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %42, i32 0, i32 1
  store i64* %40, i64** %43, align 8
  br label %178

; <label>:44:                                     ; preds = %14
  %45 = load i64, i64* %4, align 8
  %46 = call i64 @_ZNKSt6vectorIxSaIxEE12_M_check_lenEmPKc(%"class.std::vector"* %11, i64 %45, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i32 0, i32 0))
  store i64 %46, i64* %5, align 8
  %47 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %11) #3
  store i64 %47, i64* %6, align 8
  %48 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %49 = load i64, i64* %5, align 8
  %50 = call i64* @_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm(%"struct.std::_Vector_base"* %48, i64 %49)
  store i64* %50, i64** %7, align 8
  %51 = load i64*, i64** %7, align 8
  store i64* %51, i64** %8, align 8
  %52 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %53 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %52, i32 0, i32 0
  %54 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %53, i32 0, i32 0
  %55 = load i64*, i64** %54, align 8
  %56 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %57 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %56, i32 0, i32 0
  %58 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %57, i32 0, i32 1
  %59 = load i64*, i64** %58, align 8
  %60 = load i64*, i64** %7, align 8
  %61 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %62 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %61) #3
  %63 = invoke i64* @_ZSt34__uninitialized_move_if_noexcept_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64* %55, i64* %59, i64* %60, %"class.std::allocator.1"* dereferenceable(1) %62)
          to label %64 unwind label %71

; <label>:64:                                     ; preds = %44
  store i64* %63, i64** %8, align 8
  %65 = load i64*, i64** %8, align 8
  %66 = load i64, i64* %4, align 8
  %67 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %68 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %67) #3
  %69 = invoke i64* @_ZSt27__uninitialized_default_n_aIPxmxET_S1_T0_RSaIT1_E(i64* %65, i64 %66, %"class.std::allocator.1"* dereferenceable(1) %68)
          to label %70 unwind label %71

; <label>:70:                                     ; preds = %64
  store i64* %69, i64** %8, align 8
  br label %133

; <label>:71:                                     ; preds = %64, %44
  %72 = landingpad { i8*, i32 }
          catch i8* null
  %73 = extractvalue { i8*, i32 } %72, 0
  store i8* %73, i8** %9, align 8
  %74 = extractvalue { i8*, i32 } %72, 1
  store i32 %74, i32* %10, align 4
  br label %75

; <label>:75:                                     ; preds = %71
  %76 = load i8*, i8** %9, align 8
  %77 = call i8* @__cxa_begin_catch(i8* %76) #3
  %78 = load i64*, i64** %7, align 8
  %79 = load i64*, i64** %8, align 8
  %80 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %81 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %80) #3
  invoke void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %78, i64* %79, %"class.std::allocator.1"* dereferenceable(1) %81)
          to label %82 unwind label %128

; <label>:82:                                     ; preds = %75
  %83 = load i32, i32* @x.154
  %84 = load i32, i32* @y.155
  %85 = add i32 %83, 881094590
  %86 = sub i32 %85, 1
  %87 = sub i32 %86, 881094590
  %88 = sub i32 %83, 1
  %89 = mul i32 %83, %87
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %84, 10
  %93 = and i1 %91, %92
  %94 = xor i1 %91, %92
  %95 = or i1 %93, %94
  %96 = or i1 %91, %92
  br i1 %95, label %97, label %189

; <label>:97:                                     ; preds = %82, %189
  %98 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %99 = load i64*, i64** %7, align 8
  %100 = load i64, i64* %5, align 8
  %101 = load i32, i32* @x.154
  %102 = load i32, i32* @y.155
  %103 = sub i32 0, 1
  %104 = add i32 %101, %103
  %105 = sub i32 %101, 1
  %106 = mul i32 %101, %104
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %102, 10
  %110 = xor i1 %108, true
  %111 = xor i1 %109, true
  %112 = xor i1 true, true
  %113 = and i1 %110, true
  %114 = and i1 %108, %112
  %115 = and i1 %111, true
  %116 = and i1 %109, %112
  %117 = or i1 %113, %114
  %118 = or i1 %115, %116
  %119 = xor i1 %117, %118
  %120 = or i1 %110, %111
  %121 = xor i1 %120, true
  %122 = or i1 true, %112
  %123 = and i1 %121, %122
  %124 = or i1 %119, %123
  %125 = or i1 %108, %109
  br i1 %124, label %126, label %189

; <label>:126:                                    ; preds = %97
  invoke void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %98, i64* %99, i64 %100)
          to label %127 unwind label %128

; <label>:127:                                    ; preds = %126
  invoke void @__cxa_rethrow() #14
          to label %188 unwind label %128

; <label>:128:                                    ; preds = %127, %126, %75
  %129 = landingpad { i8*, i32 }
          cleanup
  %130 = extractvalue { i8*, i32 } %129, 0
  store i8* %130, i8** %9, align 8
  %131 = extractvalue { i8*, i32 } %129, 1
  store i32 %131, i32* %10, align 4
  invoke void @__cxa_end_catch()
          to label %132 unwind label %185

; <label>:132:                                    ; preds = %128
  br label %180

; <label>:133:                                    ; preds = %70
  %134 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %135 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %134, i32 0, i32 0
  %136 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %135, i32 0, i32 0
  %137 = load i64*, i64** %136, align 8
  %138 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %139 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %138, i32 0, i32 0
  %140 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %139, i32 0, i32 1
  %141 = load i64*, i64** %140, align 8
  %142 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %143 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %142) #3
  call void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %137, i64* %141, %"class.std::allocator.1"* dereferenceable(1) %143)
  %144 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %145 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %146 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %145, i32 0, i32 0
  %147 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %146, i32 0, i32 0
  %148 = load i64*, i64** %147, align 8
  %149 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %150 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %149, i32 0, i32 0
  %151 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %150, i32 0, i32 2
  %152 = load i64*, i64** %151, align 8
  %153 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %154 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %153, i32 0, i32 0
  %155 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %154, i32 0, i32 0
  %156 = load i64*, i64** %155, align 8
  %157 = ptrtoint i64* %152 to i64
  %158 = ptrtoint i64* %156 to i64
  %159 = sub i64 %157, 6910836580066263884
  %160 = sub i64 %159, %158
  %161 = add i64 %160, 6910836580066263884
  %162 = sub i64 %157, %158
  %163 = sdiv exact i64 %161, 8
  call void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %144, i64* %148, i64 %163)
  %164 = load i64*, i64** %7, align 8
  %165 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %166 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %165, i32 0, i32 0
  %167 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %166, i32 0, i32 0
  store i64* %164, i64** %167, align 8
  %168 = load i64*, i64** %8, align 8
  %169 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %170 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %169, i32 0, i32 0
  %171 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %170, i32 0, i32 1
  store i64* %168, i64** %171, align 8
  %172 = load i64*, i64** %7, align 8
  %173 = load i64, i64* %5, align 8
  %174 = getelementptr inbounds i64, i64* %172, i64 %173
  %175 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %176 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %175, i32 0, i32 0
  %177 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %176, i32 0, i32 2
  store i64* %174, i64** %177, align 8
  br label %178

; <label>:178:                                    ; preds = %133, %32
  br label %179

; <label>:179:                                    ; preds = %178, %2
  ret void

; <label>:180:                                    ; preds = %132
  %181 = load i8*, i8** %9, align 8
  %182 = load i32, i32* %10, align 4
  %183 = insertvalue { i8*, i32 } undef, i8* %181, 0
  %184 = insertvalue { i8*, i32 } %183, i32 %182, 1
  resume { i8*, i32 } %184

; <label>:185:                                    ; preds = %128
  %186 = landingpad { i8*, i32 }
          catch i8* null
  %187 = extractvalue { i8*, i32 } %186, 0
  call void @__clang_call_terminate(i8* %187) #13
  unreachable

; <label>:188:                                    ; preds = %127
  unreachable

; <label>:189:                                    ; preds = %97, %82
  %190 = bitcast %"class.std::vector"* %11 to %"struct.std::_Vector_base"*
  %191 = load i64*, i64** %7, align 8
  %192 = load i64, i64* %5, align 8
  br label %97
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE15_M_erase_at_endEPx(%"class.std::vector"*, i64*) #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::vector"*, align 8
  %4 = alloca i64*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %6 = load i64*, i64** %4, align 8
  %7 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %8 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %7, i32 0, i32 0
  %9 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %8, i32 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %12 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %11) #3
  invoke void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %6, i64* %10, %"class.std::allocator.1"* dereferenceable(1) %12)
          to label %13 unwind label %60

; <label>:13:                                     ; preds = %2
  %14 = load i32, i32* @x.156
  %15 = load i32, i32* @y.157
  %16 = sub i32 %14, -167752435
  %17 = sub i32 %16, 1
  %18 = add i32 %17, -167752435
  %19 = sub i32 %14, 1
  %20 = mul i32 %14, %18
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %15, 10
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  br i1 %26, label %28, label %63

; <label>:28:                                     ; preds = %13, %63
  %29 = load i64*, i64** %4, align 8
  %30 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %31 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %30, i32 0, i32 0
  %32 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %31, i32 0, i32 1
  store i64* %29, i64** %32, align 8
  %33 = load i32, i32* @x.156
  %34 = load i32, i32* @y.157
  %35 = add i32 %33, 1545548126
  %36 = sub i32 %35, 1
  %37 = sub i32 %36, 1545548126
  %38 = sub i32 %33, 1
  %39 = mul i32 %33, %37
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %34, 10
  %43 = xor i1 %41, true
  %44 = xor i1 %42, true
  %45 = xor i1 false, true
  %46 = and i1 %43, false
  %47 = and i1 %41, %45
  %48 = and i1 %44, false
  %49 = and i1 %42, %45
  %50 = or i1 %46, %47
  %51 = or i1 %48, %49
  %52 = xor i1 %50, %51
  %53 = or i1 %43, %44
  %54 = xor i1 %53, true
  %55 = or i1 false, %45
  %56 = and i1 %54, %55
  %57 = or i1 %52, %56
  %58 = or i1 %41, %42
  br i1 %57, label %59, label %63

; <label>:59:                                     ; preds = %28
  ret void

; <label>:60:                                     ; preds = %2
  %61 = landingpad { i8*, i32 }
          catch i8* null
  %62 = extractvalue { i8*, i32 } %61, 0
  call void @__clang_call_terminate(i8* %62) #13
  unreachable

; <label>:63:                                     ; preds = %28, %13
  %64 = load i64*, i64** %4, align 8
  %65 = bitcast %"class.std::vector"* %5 to %"struct.std::_Vector_base"*
  %66 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %65, i32 0, i32 0
  %67 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %66, i32 0, i32 1
  store i64* %64, i64** %67, align 8
  br label %28
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt27__uninitialized_default_n_aIPxmxET_S1_T0_RSaIT1_E(i64*, i64, %"class.std::allocator.1"* dereferenceable(1)) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %"class.std::allocator.1"*, align 8
  store i64* %0, i64** %4, align 8
  store i64 %1, i64* %5, align 8
  store %"class.std::allocator.1"* %2, %"class.std::allocator.1"** %6, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = call i64* @_ZSt25__uninitialized_default_nIPxmET_S1_T0_(i64* %7, i64 %8)
  ret i64* %9
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNKSt6vectorIxSaIxEE12_M_check_lenEmPKc(%"class.std::vector"*, i64, i8*) #0 comdat align 2 {
  %4 = alloca i64
  %5 = alloca i1
  %6 = alloca %"class.std::vector"*
  %7 = alloca i64*
  %8 = alloca i64*
  %9 = alloca i8**
  %10 = alloca i64*
  %11 = alloca i1
  %12 = alloca i1
  %13 = load i32, i32* @x.160
  %14 = load i32, i32* @y.161
  %15 = add i32 %13, 757620178
  %16 = sub i32 %15, 1
  %17 = sub i32 %16, 757620178
  %18 = sub i32 %13, 1
  %19 = mul i32 %13, %17
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  store i1 %21, i1* %12
  %22 = icmp slt i32 %14, 10
  store i1 %22, i1* %11
  %23 = alloca i32
  store i32 938086437, i32* %23
  %24 = alloca i64
  br label %25

; <label>:25:                                     ; preds = %3, %226
  %26 = load i32, i32* %23
  switch i32 %26, label %27 [
    i32 938086437, label %28
    i32 1130719314, label %48
    i32 1879419026, label %95
    i32 -1671567093, label %98
    i32 -1508052678, label %101
    i32 -1703424263, label %123
    i32 983642090, label %130
    i32 1291312959, label %133
    i32 -1613105853, label %136
    i32 56828895, label %153
    i32 -989307667, label %169
    i32 -2002121617, label %171
    i32 -2031266835, label %225
  ]

; <label>:27:                                     ; preds = %25
  br label %226

; <label>:28:                                     ; preds = %25
  %29 = load volatile i1, i1* %12
  %30 = load volatile i1, i1* %11
  %31 = xor i1 %29, true
  %32 = xor i1 %30, true
  %33 = xor i1 true, true
  %34 = and i1 %31, true
  %35 = and i1 %29, %33
  %36 = and i1 %32, true
  %37 = and i1 %30, %33
  %38 = or i1 %34, %35
  %39 = or i1 %36, %37
  %40 = xor i1 %38, %39
  %41 = or i1 %31, %32
  %42 = xor i1 %41, true
  %43 = or i1 true, %33
  %44 = and i1 %42, %43
  %45 = or i1 %40, %44
  %46 = or i1 %29, %30
  %47 = select i1 %45, i32 1130719314, i32 -2002121617
  store i32 %47, i32* %23
  br label %226

; <label>:48:                                     ; preds = %25
  %49 = alloca %"class.std::vector"*, align 8
  %50 = alloca i64, align 8
  store i64* %50, i64** %10
  %51 = alloca i8*, align 8
  store i8** %51, i8*** %9
  %52 = alloca i64, align 8
  store i64* %52, i64** %8
  %53 = alloca i64, align 8
  store i64* %53, i64** %7
  store %"class.std::vector"* %0, %"class.std::vector"** %49, align 8
  %54 = load volatile i64*, i64** %10
  store i64 %1, i64* %54, align 8
  %55 = load volatile i8**, i8*** %9
  store i8* %2, i8** %55, align 8
  %56 = load %"class.std::vector"*, %"class.std::vector"** %49, align 8
  store %"class.std::vector"* %56, %"class.std::vector"** %6
  %57 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %58 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %57) #3
  %59 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %60 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %59) #3
  %61 = sub i64 %58, 5308380632822103199
  %62 = sub i64 %61, %60
  %63 = add i64 %62, 5308380632822103199
  %64 = sub i64 %58, %60
  %65 = load volatile i64*, i64** %10
  %66 = load i64, i64* %65, align 8
  %67 = icmp ult i64 %63, %66
  store i1 %67, i1* %5
  %68 = load i32, i32* @x.160
  %69 = load i32, i32* @y.161
  %70 = sub i32 %68, -522386320
  %71 = sub i32 %70, 1
  %72 = add i32 %71, -522386320
  %73 = sub i32 %68, 1
  %74 = mul i32 %68, %72
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %69, 10
  %78 = xor i1 %76, true
  %79 = xor i1 %77, true
  %80 = xor i1 true, true
  %81 = and i1 %78, true
  %82 = and i1 %76, %80
  %83 = and i1 %79, true
  %84 = and i1 %77, %80
  %85 = or i1 %81, %82
  %86 = or i1 %83, %84
  %87 = xor i1 %85, %86
  %88 = or i1 %78, %79
  %89 = xor i1 %88, true
  %90 = or i1 true, %80
  %91 = and i1 %89, %90
  %92 = or i1 %87, %91
  %93 = or i1 %76, %77
  %94 = select i1 %92, i32 1879419026, i32 -2002121617
  store i32 %94, i32* %23
  br label %226

; <label>:95:                                     ; preds = %25
  %96 = load volatile i1, i1* %5
  %97 = select i1 %96, i32 -1671567093, i32 -1508052678
  store i32 %97, i32* %23
  br label %226

; <label>:98:                                     ; preds = %25
  %99 = load volatile i8**, i8*** %9
  %100 = load i8*, i8** %99, align 8
  call void @_ZSt20__throw_length_errorPKc(i8* %100) #14
  unreachable

; <label>:101:                                    ; preds = %25
  %102 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %103 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %102) #3
  %104 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %105 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %104) #3
  %106 = load volatile i64*, i64** %7
  store i64 %105, i64* %106, align 8
  %107 = load volatile i64*, i64** %10
  %108 = load volatile i64*, i64** %7
  %109 = call dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8) %108, i64* dereferenceable(8) %107)
  %110 = load i64, i64* %109, align 8
  %111 = sub i64 0, %103
  %112 = sub i64 0, %110
  %113 = add i64 %111, %112
  %114 = sub i64 0, %113
  %115 = add i64 %103, %110
  %116 = load volatile i64*, i64** %8
  store i64 %114, i64* %116, align 8
  %117 = load volatile i64*, i64** %8
  %118 = load i64, i64* %117, align 8
  %119 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %120 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %119) #3
  %121 = icmp ult i64 %118, %120
  %122 = select i1 %121, i32 983642090, i32 -1703424263
  store i32 %122, i32* %23
  br label %226

; <label>:123:                                    ; preds = %25
  %124 = load volatile i64*, i64** %8
  %125 = load i64, i64* %124, align 8
  %126 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %127 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %126) #3
  %128 = icmp ugt i64 %125, %127
  %129 = select i1 %128, i32 983642090, i32 1291312959
  store i32 %129, i32* %23
  br label %226

; <label>:130:                                    ; preds = %25
  %131 = load volatile %"class.std::vector"*, %"class.std::vector"** %6
  %132 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %131) #3
  store i32 -1613105853, i32* %23
  store i64 %132, i64* %24
  br label %226

; <label>:133:                                    ; preds = %25
  %134 = load volatile i64*, i64** %8
  %135 = load i64, i64* %134, align 8
  store i32 -1613105853, i32* %23
  store i64 %135, i64* %24
  br label %226

; <label>:136:                                    ; preds = %25
  %137 = load i64, i64* %24
  store i64 %137, i64* %4
  %138 = load i32, i32* @x.160
  %139 = load i32, i32* @y.161
  %140 = sub i32 %138, -1212624273
  %141 = sub i32 %140, 1
  %142 = add i32 %141, -1212624273
  %143 = sub i32 %138, 1
  %144 = mul i32 %138, %142
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %139, 10
  %148 = and i1 %146, %147
  %149 = xor i1 %146, %147
  %150 = or i1 %148, %149
  %151 = or i1 %146, %147
  %152 = select i1 %150, i32 56828895, i32 -2031266835
  store i32 %152, i32* %23
  br label %226

; <label>:153:                                    ; preds = %25
  %154 = load i32, i32* @x.160
  %155 = load i32, i32* @y.161
  %156 = add i32 %154, -2115099917
  %157 = sub i32 %156, 1
  %158 = sub i32 %157, -2115099917
  %159 = sub i32 %154, 1
  %160 = mul i32 %154, %158
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %155, 10
  %164 = and i1 %162, %163
  %165 = xor i1 %162, %163
  %166 = or i1 %164, %165
  %167 = or i1 %162, %163
  %168 = select i1 %166, i32 -989307667, i32 -2031266835
  store i32 %168, i32* %23
  br label %226

; <label>:169:                                    ; preds = %25
  %170 = load volatile i64, i64* %4
  ret i64 %170

; <label>:171:                                    ; preds = %25
  %172 = alloca %"class.std::vector"*, align 8
  %173 = alloca i64, align 8
  %174 = alloca i8*, align 8
  %175 = alloca i64, align 8
  %176 = alloca i64, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %172, align 8
  store i64 %1, i64* %173, align 8
  store i8* %2, i8** %174, align 8
  %177 = load %"class.std::vector"*, %"class.std::vector"** %172, align 8
  %178 = call i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"* %177) #3
  %179 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %177) #3
  %180 = add i64 0, 2154806272610957252
  %181 = sub i64 %180, %178
  %182 = sub i64 %181, 2154806272610957252
  %183 = sub i64 0, %178
  %184 = sub i64 0, %182
  %185 = sub i64 0, %179
  %186 = add i64 %184, %185
  %187 = sub i64 0, %186
  %188 = add i64 %182, %179
  %189 = shl i64 %178, %179
  %190 = add i64 0, -8529846406118230864
  %191 = sub i64 %190, %178
  %192 = sub i64 %191, -8529846406118230864
  %193 = sub i64 0, %178
  %194 = sub i64 %192, -8642433850932765774
  %195 = add i64 %194, %179
  %196 = add i64 %195, -8642433850932765774
  %197 = add i64 %192, %179
  %198 = shl i64 %178, %179
  %199 = sub i64 0, -9208743629287591951
  %200 = sub i64 %199, %178
  %201 = add i64 %200, -9208743629287591951
  %202 = sub i64 0, %178
  %203 = sub i64 0, %179
  %204 = sub i64 %201, %203
  %205 = add i64 %201, %179
  %206 = add i64 %178, 6878934178069950366
  %207 = sub i64 %206, %179
  %208 = sub i64 %207, 6878934178069950366
  %209 = sub i64 %178, %179
  %210 = mul i64 %208, %179
  %211 = add i64 0, 2793823346394087279
  %212 = sub i64 %211, %178
  %213 = sub i64 %212, 2793823346394087279
  %214 = sub i64 0, %178
  %215 = add i64 %213, -7761514808190159792
  %216 = add i64 %215, %179
  %217 = sub i64 %216, -7761514808190159792
  %218 = add i64 %213, %179
  %219 = shl i64 %178, %179
  %220 = sub i64 0, %179
  %221 = add i64 %178, %220
  %222 = sub i64 %178, %179
  %223 = load i64, i64* %173, align 8
  %224 = icmp ult i64 %221, %223
  store i32 1130719314, i32* %23
  br label %226

; <label>:225:                                    ; preds = %25
  store i32 56828895, i32* %23
  br label %226

; <label>:226:                                    ; preds = %225, %171, %153, %136, %133, %130, %123, %101, %95, %48, %28, %27
  br label %25
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm(%"struct.std::_Vector_base"*, i64) #0 comdat align 2 {
  %3 = alloca i64
  %4 = alloca %"struct.std::_Vector_base"*
  %5 = alloca %"struct.std::_Vector_base"*, align 8
  %6 = alloca i64, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %5, align 8
  store i64 %1, i64* %6, align 8
  %7 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %5, align 8
  store %"struct.std::_Vector_base"* %7, %"struct.std::_Vector_base"** %4
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %3
  %9 = alloca i32
  store i32 -2038644640, i32* %9
  %10 = alloca i64*
  br label %11

; <label>:11:                                     ; preds = %2, %27
  %12 = load i32, i32* %9
  switch i32 %12, label %13 [
    i32 -2038644640, label %14
    i32 -1319358304, label %18
    i32 -1411498241, label %24
    i32 -713489678, label %25
  ]

; <label>:13:                                     ; preds = %11
  br label %27

; <label>:14:                                     ; preds = %11
  %15 = load volatile i64, i64* %3
  %16 = icmp ne i64 %15, 0
  %17 = select i1 %16, i32 -1319358304, i32 -1411498241
  store i32 %17, i32* %9
  br label %27

; <label>:18:                                     ; preds = %11
  %19 = load volatile %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %4
  %20 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %19, i32 0, i32 0
  %21 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %20 to %"class.std::allocator.1"*
  %22 = load i64, i64* %6, align 8
  %23 = call i64* @_ZNSt16allocator_traitsISaIxEE8allocateERS0_m(%"class.std::allocator.1"* dereferenceable(1) %21, i64 %22)
  store i32 -713489678, i32* %9
  store i64* %23, i64** %10
  br label %27

; <label>:24:                                     ; preds = %11
  store i32 -713489678, i32* %9
  store i64* null, i64** %10
  br label %27

; <label>:25:                                     ; preds = %11
  %26 = load i64*, i64** %10
  ret i64* %26

; <label>:27:                                     ; preds = %24, %18, %14, %13
  br label %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt34__uninitialized_move_if_noexcept_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64*, i64*, i64*, %"class.std::allocator.1"* dereferenceable(1)) #0 comdat {
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %"class.std::allocator.1"*, align 8
  %9 = alloca %"class.std::move_iterator", align 8
  %10 = alloca %"class.std::move_iterator", align 8
  store i64* %0, i64** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store %"class.std::allocator.1"* %3, %"class.std::allocator.1"** %8, align 8
  %11 = load i64*, i64** %5, align 8
  %12 = call i64* @_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_(i64* %11)
  %13 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %9, i32 0, i32 0
  store i64* %12, i64** %13, align 8
  %14 = load i64*, i64** %6, align 8
  %15 = call i64* @_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_(i64* %14)
  %16 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %10, i32 0, i32 0
  store i64* %15, i64** %16, align 8
  %17 = load i64*, i64** %7, align 8
  %18 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %8, align 8
  %19 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %9, i32 0, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %10, i32 0, i32 0
  %22 = load i64*, i64** %21, align 8
  %23 = call i64* @_ZSt22__uninitialized_copy_aISt13move_iteratorIPxES1_xET0_T_S4_S3_RSaIT1_E(i64* %20, i64* %22, i64* %17, %"class.std::allocator.1"* dereferenceable(1) %18)
  ret i64* %23
}

declare void @__cxa_rethrow()

declare void @__cxa_end_catch()

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt25__uninitialized_default_nIPxmET_S1_T0_(i64*, i64) #0 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8, align 1
  store i64* %0, i64** %3, align 8
  store i64 %1, i64* %4, align 8
  store i8 1, i8* %5, align 1
  %6 = load i64*, i64** %3, align 8
  %7 = load i64, i64* %4, align 8
  %8 = call i64* @_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPxmEET_S3_T0_(i64* %6, i64 %7)
  ret i64* %8
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPxmEET_S3_T0_(i64*, i64) #0 comdat align 2 {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64* %0, i64** %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load i64*, i64** %3, align 8
  %7 = load i64, i64* %4, align 8
  store i64 0, i64* %5, align 8
  %8 = call i64* @_ZSt6fill_nIPxmxET_S1_T0_RKT1_(i64* %6, i64 %7, i64* dereferenceable(8) %5)
  ret i64* %8
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt6fill_nIPxmxET_S1_T0_RKT1_(i64*, i64, i64* dereferenceable(8)) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  store i64* %0, i64** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %7)
  %9 = load i64, i64* %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call i64* @_ZSt10__fill_n_aIPxmxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(i64* %8, i64 %9, i64* dereferenceable(8) %10)
  ret i64* %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZSt10__fill_n_aIPxmxEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT1_EE7__valueET_E6__typeES4_T0_RKS3_(i64*, i64, i64* dereferenceable(8)) #4 comdat {
  %4 = alloca i64*
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64* %2, i64** %7, align 8
  %10 = load i64*, i64** %7, align 8
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %8, align 8
  %12 = load i64, i64* %6, align 8
  store i64 %12, i64* %9, align 8
  %13 = alloca i32
  store i32 752480138, i32* %13
  br label %14

; <label>:14:                                     ; preds = %3, %80
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 752480138, label %17
    i32 -747988925, label %21
    i32 2007431858, label %24
    i32 1885996820, label %32
    i32 -1846230559, label %48
    i32 -1661942287, label %76
    i32 -93248667, label %78
  ]

; <label>:16:                                     ; preds = %14
  br label %80

; <label>:17:                                     ; preds = %14
  %18 = load i64, i64* %9, align 8
  %19 = icmp ugt i64 %18, 0
  %20 = select i1 %19, i32 -747988925, i32 1885996820
  store i32 %20, i32* %13
  br label %80

; <label>:21:                                     ; preds = %14
  %22 = load i64, i64* %8, align 8
  %23 = load i64*, i64** %5, align 8
  store i64 %22, i64* %23, align 8
  store i32 2007431858, i32* %13
  br label %80

; <label>:24:                                     ; preds = %14
  %25 = load i64, i64* %9, align 8
  %26 = sub i64 %25, 6250345276247111993
  %27 = add i64 %26, -1
  %28 = add i64 %27, 6250345276247111993
  %29 = add i64 %25, -1
  store i64 %28, i64* %9, align 8
  %30 = load i64*, i64** %5, align 8
  %31 = getelementptr inbounds i64, i64* %30, i32 1
  store i64* %31, i64** %5, align 8
  store i32 752480138, i32* %13
  br label %80

; <label>:32:                                     ; preds = %14
  %33 = load i32, i32* @x.172
  %34 = load i32, i32* @y.173
  %35 = add i32 %33, -1670720633
  %36 = sub i32 %35, 1
  %37 = sub i32 %36, -1670720633
  %38 = sub i32 %33, 1
  %39 = mul i32 %33, %37
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %34, 10
  %43 = and i1 %41, %42
  %44 = xor i1 %41, %42
  %45 = or i1 %43, %44
  %46 = or i1 %41, %42
  %47 = select i1 %45, i32 -1846230559, i32 -93248667
  store i32 %47, i32* %13
  br label %80

; <label>:48:                                     ; preds = %14
  %49 = load i64*, i64** %5, align 8
  store i64* %49, i64** %4
  %50 = load i32, i32* @x.172
  %51 = load i32, i32* @y.173
  %52 = sub i32 0, 1
  %53 = add i32 %50, %52
  %54 = sub i32 %50, 1
  %55 = mul i32 %50, %53
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %51, 10
  %59 = xor i1 %57, true
  %60 = xor i1 %58, true
  %61 = xor i1 false, true
  %62 = and i1 %59, false
  %63 = and i1 %57, %61
  %64 = and i1 %60, false
  %65 = and i1 %58, %61
  %66 = or i1 %62, %63
  %67 = or i1 %64, %65
  %68 = xor i1 %66, %67
  %69 = or i1 %59, %60
  %70 = xor i1 %69, true
  %71 = or i1 false, %61
  %72 = and i1 %70, %71
  %73 = or i1 %68, %72
  %74 = or i1 %57, %58
  %75 = select i1 %73, i32 -1661942287, i32 -93248667
  store i32 %75, i32* %13
  br label %80

; <label>:76:                                     ; preds = %14
  %77 = load volatile i64*, i64** %4
  ret i64* %77

; <label>:78:                                     ; preds = %14
  %79 = load i64*, i64** %5, align 8
  store i32 -1846230559, i32* %13
  br label %80

; <label>:80:                                     ; preds = %78, %48, %32, %24, %21, %17, %16
  br label %14
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64*) #0 comdat {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.174
  %6 = load i32, i32* @y.175
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -1098683742, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %63
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -1098683742, label %18
    i32 1887138972, label %26
    i32 863089371, label %57
    i32 1580034043, label %59
  ]

; <label>:17:                                     ; preds = %15
  br label %63

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 1887138972, i32 1580034043
  store i32 %25, i32* %14
  br label %63

; <label>:26:                                     ; preds = %15
  %27 = alloca i64*, align 8
  store i64* %0, i64** %27, align 8
  %28 = load i64*, i64** %27, align 8
  %29 = call i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %28)
  store i64* %29, i64** %2
  %30 = load i32, i32* @x.174
  %31 = load i32, i32* @y.175
  %32 = sub i32 %30, -2003955017
  %33 = sub i32 %32, 1
  %34 = add i32 %33, -2003955017
  %35 = sub i32 %30, 1
  %36 = mul i32 %30, %34
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %31, 10
  %40 = xor i1 %38, true
  %41 = xor i1 %39, true
  %42 = xor i1 true, true
  %43 = and i1 %40, true
  %44 = and i1 %38, %42
  %45 = and i1 %41, true
  %46 = and i1 %39, %42
  %47 = or i1 %43, %44
  %48 = or i1 %45, %46
  %49 = xor i1 %47, %48
  %50 = or i1 %40, %41
  %51 = xor i1 %50, true
  %52 = or i1 true, %42
  %53 = and i1 %51, %52
  %54 = or i1 %49, %53
  %55 = or i1 %38, %39
  %56 = select i1 %54, i32 863089371, i32 1580034043
  store i32 %56, i32* %14
  br label %63

; <label>:57:                                     ; preds = %15
  %58 = load volatile i64*, i64** %2
  ret i64* %58

; <label>:59:                                     ; preds = %15
  %60 = alloca i64*, align 8
  store i64* %0, i64** %60, align 8
  %61 = load i64*, i64** %60, align 8
  %62 = call i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %61)
  store i32 1887138972, i32* %14
  br label %63

; <label>:63:                                     ; preds = %59, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64*) #4 comdat align 2 {
  %2 = alloca i64*, align 8
  store i64* %0, i64** %2, align 8
  %3 = load i64*, i64** %2, align 8
  ret i64* %3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt6vectorIxSaIxEE8max_sizeEv(%"class.std::vector"*) #4 comdat align 2 {
  %2 = alloca %"class.std::vector"*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %2, align 8
  %3 = load %"class.std::vector"*, %"class.std::vector"** %2, align 8
  %4 = bitcast %"class.std::vector"* %3 to %"struct.std::_Vector_base"*
  %5 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNKSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %4) #3
  %6 = call i64 @_ZNSt16allocator_traitsISaIxEE8max_sizeERKS0_(%"class.std::allocator.1"* dereferenceable(1) %5) #3
  ret i64 %6
}

; Function Attrs: noreturn
declare void @_ZSt20__throw_length_errorPKc(i8*) #9

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8), i64* dereferenceable(8)) #4 comdat {
  %3 = alloca i1
  %4 = alloca i64**
  %5 = alloca i64**
  %6 = alloca i64**
  %7 = alloca i1
  %8 = alloca i1
  %9 = load i32, i32* @x.180
  %10 = load i32, i32* @y.181
  %11 = sub i32 0, 1
  %12 = add i32 %9, %11
  %13 = sub i32 %9, 1
  %14 = mul i32 %9, %12
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %8
  %17 = icmp slt i32 %10, 10
  store i1 %17, i1* %7
  %18 = alloca i32
  store i32 803282511, i32* %18
  br label %19

; <label>:19:                                     ; preds = %2, %129
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 803282511, label %22
    i32 -1384600887, label %42
    i32 1235478539, label %70
    i32 1283523584, label %73
    i32 -902365714, label %77
    i32 -572760965, label %93
    i32 227915090, label %112
    i32 -940152633, label %113
    i32 -247622176, label %116
    i32 -1903920941, label %125
  ]

; <label>:21:                                     ; preds = %19
  br label %129

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %8
  %24 = load volatile i1, i1* %7
  %25 = xor i1 %23, true
  %26 = xor i1 %24, true
  %27 = xor i1 true, true
  %28 = and i1 %25, true
  %29 = and i1 %23, %27
  %30 = and i1 %26, true
  %31 = and i1 %24, %27
  %32 = or i1 %28, %29
  %33 = or i1 %30, %31
  %34 = xor i1 %32, %33
  %35 = or i1 %25, %26
  %36 = xor i1 %35, true
  %37 = or i1 true, %27
  %38 = and i1 %36, %37
  %39 = or i1 %34, %38
  %40 = or i1 %23, %24
  %41 = select i1 %39, i32 -1384600887, i32 -247622176
  store i32 %41, i32* %18
  br label %129

; <label>:42:                                     ; preds = %19
  %43 = alloca i64*, align 8
  store i64** %43, i64*** %6
  %44 = alloca i64*, align 8
  store i64** %44, i64*** %5
  %45 = alloca i64*, align 8
  store i64** %45, i64*** %4
  %46 = load volatile i64**, i64*** %5
  store i64* %0, i64** %46, align 8
  %47 = load volatile i64**, i64*** %4
  store i64* %1, i64** %47, align 8
  %48 = load volatile i64**, i64*** %5
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = load volatile i64**, i64*** %4
  %52 = load i64*, i64** %51, align 8
  %53 = load i64, i64* %52, align 8
  %54 = icmp ult i64 %50, %53
  store i1 %54, i1* %3
  %55 = load i32, i32* @x.180
  %56 = load i32, i32* @y.181
  %57 = add i32 %55, 2093384024
  %58 = sub i32 %57, 1
  %59 = sub i32 %58, 2093384024
  %60 = sub i32 %55, 1
  %61 = mul i32 %55, %59
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %56, 10
  %65 = and i1 %63, %64
  %66 = xor i1 %63, %64
  %67 = or i1 %65, %66
  %68 = or i1 %63, %64
  %69 = select i1 %67, i32 1235478539, i32 -247622176
  store i32 %69, i32* %18
  br label %129

; <label>:70:                                     ; preds = %19
  %71 = load volatile i1, i1* %3
  %72 = select i1 %71, i32 1283523584, i32 -902365714
  store i32 %72, i32* %18
  br label %129

; <label>:73:                                     ; preds = %19
  %74 = load volatile i64**, i64*** %4
  %75 = load i64*, i64** %74, align 8
  %76 = load volatile i64**, i64*** %6
  store i64* %75, i64** %76, align 8
  store i32 -940152633, i32* %18
  br label %129

; <label>:77:                                     ; preds = %19
  %78 = load i32, i32* @x.180
  %79 = load i32, i32* @y.181
  %80 = add i32 %78, -389606034
  %81 = sub i32 %80, 1
  %82 = sub i32 %81, -389606034
  %83 = sub i32 %78, 1
  %84 = mul i32 %78, %82
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %79, 10
  %88 = and i1 %86, %87
  %89 = xor i1 %86, %87
  %90 = or i1 %88, %89
  %91 = or i1 %86, %87
  %92 = select i1 %90, i32 -572760965, i32 -1903920941
  store i32 %92, i32* %18
  br label %129

; <label>:93:                                     ; preds = %19
  %94 = load volatile i64**, i64*** %5
  %95 = load i64*, i64** %94, align 8
  %96 = load volatile i64**, i64*** %6
  store i64* %95, i64** %96, align 8
  %97 = load i32, i32* @x.180
  %98 = load i32, i32* @y.181
  %99 = add i32 %97, 963417320
  %100 = sub i32 %99, 1
  %101 = sub i32 %100, 963417320
  %102 = sub i32 %97, 1
  %103 = mul i32 %97, %101
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %98, 10
  %107 = and i1 %105, %106
  %108 = xor i1 %105, %106
  %109 = or i1 %107, %108
  %110 = or i1 %105, %106
  %111 = select i1 %109, i32 227915090, i32 -1903920941
  store i32 %111, i32* %18
  br label %129

; <label>:112:                                    ; preds = %19
  store i32 -940152633, i32* %18
  br label %129

; <label>:113:                                    ; preds = %19
  %114 = load volatile i64**, i64*** %6
  %115 = load i64*, i64** %114, align 8
  ret i64* %115

; <label>:116:                                    ; preds = %19
  %117 = alloca i64*, align 8
  %118 = alloca i64*, align 8
  %119 = alloca i64*, align 8
  store i64* %0, i64** %118, align 8
  store i64* %1, i64** %119, align 8
  %120 = load i64*, i64** %118, align 8
  %121 = load i64, i64* %120, align 8
  %122 = load i64*, i64** %119, align 8
  %123 = load i64, i64* %122, align 8
  %124 = icmp ult i64 %121, %123
  store i32 -1384600887, i32* %18
  br label %129

; <label>:125:                                    ; preds = %19
  %126 = load volatile i64**, i64*** %5
  %127 = load i64*, i64** %126, align 8
  %128 = load volatile i64**, i64*** %6
  store i64* %127, i64** %128, align 8
  store i32 -572760965, i32* %18
  br label %129

; <label>:129:                                    ; preds = %125, %116, %112, %93, %77, %73, %70, %42, %22, %21
  br label %19
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNSt16allocator_traitsISaIxEE8max_sizeERKS0_(%"class.std::allocator.1"* dereferenceable(1)) #4 comdat align 2 {
  %2 = alloca %"class.std::allocator.1"*, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %2, align 8
  %3 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %2, align 8
  %4 = bitcast %"class.std::allocator.1"* %3 to %"class.__gnu_cxx::new_allocator.2"*
  %5 = call i64 @_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv(%"class.__gnu_cxx::new_allocator.2"* %4) #3
  ret i64 %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator.1"* @_ZNKSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"*) #4 comdat align 2 {
  %2 = alloca %"class.std::allocator.1"*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.184
  %6 = load i32, i32* @y.185
  %7 = sub i32 %5, -493760098
  %8 = sub i32 %7, 1
  %9 = add i32 %8, -493760098
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1547217121, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %66
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1547217121, label %19
    i32 -436579451, label %27
    i32 289666048, label %59
    i32 1072575212, label %61
  ]

; <label>:18:                                     ; preds = %16
  br label %66

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -436579451, i32 1072575212
  store i32 %26, i32* %15
  br label %66

; <label>:27:                                     ; preds = %16
  %28 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %28, align 8
  %29 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %28, align 8
  %30 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %29, i32 0, i32 0
  %31 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %30 to %"class.std::allocator.1"*
  store %"class.std::allocator.1"* %31, %"class.std::allocator.1"** %2
  %32 = load i32, i32* @x.184
  %33 = load i32, i32* @y.185
  %34 = sub i32 %32, -243987792
  %35 = sub i32 %34, 1
  %36 = add i32 %35, -243987792
  %37 = sub i32 %32, 1
  %38 = mul i32 %32, %36
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %33, 10
  %42 = xor i1 %40, true
  %43 = xor i1 %41, true
  %44 = xor i1 true, true
  %45 = and i1 %42, true
  %46 = and i1 %40, %44
  %47 = and i1 %43, true
  %48 = and i1 %41, %44
  %49 = or i1 %45, %46
  %50 = or i1 %47, %48
  %51 = xor i1 %49, %50
  %52 = or i1 %42, %43
  %53 = xor i1 %52, true
  %54 = or i1 true, %44
  %55 = and i1 %53, %54
  %56 = or i1 %51, %55
  %57 = or i1 %40, %41
  %58 = select i1 %56, i32 289666048, i32 1072575212
  store i32 %58, i32* %15
  br label %66

; <label>:59:                                     ; preds = %16
  %60 = load volatile %"class.std::allocator.1"*, %"class.std::allocator.1"** %2
  ret %"class.std::allocator.1"* %60

; <label>:61:                                     ; preds = %16
  %62 = alloca %"struct.std::_Vector_base"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %62, align 8
  %63 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %62, align 8
  %64 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %63, i32 0, i32 0
  %65 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %64 to %"class.std::allocator.1"*
  store i32 -436579451, i32* %15
  br label %66

; <label>:66:                                     ; preds = %61, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv(%"class.__gnu_cxx::new_allocator.2"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %2, align 8
  ret i64 2305843009213693951
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt16allocator_traitsISaIxEE8allocateERS0_m(%"class.std::allocator.1"* dereferenceable(1), i64) #0 comdat align 2 {
  %3 = alloca i64*
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.188
  %7 = load i32, i32* @y.189
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 -1352521608, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %58
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1352521608, label %19
    i32 -330127171, label %27
    i32 1424348168, label %49
    i32 1142296378, label %51
  ]

; <label>:18:                                     ; preds = %16
  br label %58

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -330127171, i32 1142296378
  store i32 %26, i32* %15
  br label %58

; <label>:27:                                     ; preds = %16
  %28 = alloca %"class.std::allocator.1"*, align 8
  %29 = alloca i64, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %28, align 8
  store i64 %1, i64* %29, align 8
  %30 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %28, align 8
  %31 = bitcast %"class.std::allocator.1"* %30 to %"class.__gnu_cxx::new_allocator.2"*
  %32 = load i64, i64* %29, align 8
  %33 = call i64* @_ZN9__gnu_cxx13new_allocatorIxE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.2"* %31, i64 %32, i8* null)
  store i64* %33, i64** %3
  %34 = load i32, i32* @x.188
  %35 = load i32, i32* @y.189
  %36 = sub i32 %34, 1971659982
  %37 = sub i32 %36, 1
  %38 = add i32 %37, 1971659982
  %39 = sub i32 %34, 1
  %40 = mul i32 %34, %38
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %35, 10
  %44 = and i1 %42, %43
  %45 = xor i1 %42, %43
  %46 = or i1 %44, %45
  %47 = or i1 %42, %43
  %48 = select i1 %46, i32 1424348168, i32 1142296378
  store i32 %48, i32* %15
  br label %58

; <label>:49:                                     ; preds = %16
  %50 = load volatile i64*, i64** %3
  ret i64* %50

; <label>:51:                                     ; preds = %16
  %52 = alloca %"class.std::allocator.1"*, align 8
  %53 = alloca i64, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %52, align 8
  store i64 %1, i64* %53, align 8
  %54 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %52, align 8
  %55 = bitcast %"class.std::allocator.1"* %54 to %"class.__gnu_cxx::new_allocator.2"*
  %56 = load i64, i64* %53, align 8
  %57 = call i64* @_ZN9__gnu_cxx13new_allocatorIxE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.2"* %55, i64 %56, i8* null)
  store i32 -330127171, i32* %15
  br label %58

; <label>:58:                                     ; preds = %51, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZN9__gnu_cxx13new_allocatorIxE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.2"*, i64, i8*) #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i64*
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.190
  %9 = load i32, i32* @y.191
  %10 = sub i32 0, 1
  %11 = add i32 %8, %10
  %12 = sub i32 %8, 1
  %13 = mul i32 %8, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %7
  %16 = icmp slt i32 %9, 10
  store i1 %16, i1* %6
  %17 = alloca i32
  store i32 -1558770122, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %83
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -1558770122, label %21
    i32 -692090326, label %29
    i32 559554195, label %65
    i32 1706821793, label %68
    i32 -318790518, label %69
    i32 686621570, label %75
  ]

; <label>:20:                                     ; preds = %18
  br label %83

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %7
  %23 = load volatile i1, i1* %6
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  %28 = select i1 %26, i32 -692090326, i32 686621570
  store i32 %28, i32* %17
  br label %83

; <label>:29:                                     ; preds = %18
  %30 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  %31 = alloca i64, align 8
  store i64* %31, i64** %5
  %32 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %30, align 8
  %33 = load volatile i64*, i64** %5
  store i64 %1, i64* %33, align 8
  store i8* %2, i8** %32, align 8
  %34 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %30, align 8
  %35 = load volatile i64*, i64** %5
  %36 = load i64, i64* %35, align 8
  %37 = call i64 @_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv(%"class.__gnu_cxx::new_allocator.2"* %34) #3
  %38 = icmp ugt i64 %36, %37
  store i1 %38, i1* %4
  %39 = load i32, i32* @x.190
  %40 = load i32, i32* @y.191
  %41 = sub i32 0, 1
  %42 = add i32 %39, %41
  %43 = sub i32 %39, 1
  %44 = mul i32 %39, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %40, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 true, true
  %51 = and i1 %48, true
  %52 = and i1 %46, %50
  %53 = and i1 %49, true
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 true, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  %64 = select i1 %62, i32 559554195, i32 686621570
  store i32 %64, i32* %17
  br label %83

; <label>:65:                                     ; preds = %18
  %66 = load volatile i1, i1* %4
  %67 = select i1 %66, i32 1706821793, i32 -318790518
  store i32 %67, i32* %17
  br label %83

; <label>:68:                                     ; preds = %18
  call void @_ZSt17__throw_bad_allocv() #14
  unreachable

; <label>:69:                                     ; preds = %18
  %70 = load volatile i64*, i64** %5
  %71 = load i64, i64* %70, align 8
  %72 = mul i64 %71, 8
  %73 = call i8* @_Znwm(i64 %72)
  %74 = bitcast i8* %73 to i64*
  ret i64* %74

; <label>:75:                                     ; preds = %18
  %76 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  %77 = alloca i64, align 8
  %78 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %76, align 8
  store i64 %1, i64* %77, align 8
  store i8* %2, i8** %78, align 8
  %79 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %76, align 8
  %80 = load i64, i64* %77, align 8
  %81 = call i64 @_ZNK9__gnu_cxx13new_allocatorIxE8max_sizeEv(%"class.__gnu_cxx::new_allocator.2"* %79) #3
  %82 = icmp ugt i64 %80, %81
  store i32 -692090326, i32* %17
  br label %83

; <label>:83:                                     ; preds = %75, %65, %29, %21, %20
  br label %18
}

; Function Attrs: noreturn
declare void @_ZSt17__throw_bad_allocv() #9

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #10

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt22__uninitialized_copy_aISt13move_iteratorIPxES1_xET0_T_S4_S3_RSaIT1_E(i64*, i64*, i64*, %"class.std::allocator.1"* dereferenceable(1)) #0 comdat {
  %5 = alloca %"class.std::move_iterator", align 8
  %6 = alloca %"class.std::move_iterator", align 8
  %7 = alloca i64*, align 8
  %8 = alloca %"class.std::allocator.1"*, align 8
  %9 = alloca %"class.std::move_iterator", align 8
  %10 = alloca %"class.std::move_iterator", align 8
  %11 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %5, i32 0, i32 0
  store i64* %0, i64** %11, align 8
  %12 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %6, i32 0, i32 0
  store i64* %1, i64** %12, align 8
  store i64* %2, i64** %7, align 8
  store %"class.std::allocator.1"* %3, %"class.std::allocator.1"** %8, align 8
  %13 = bitcast %"class.std::move_iterator"* %9 to i8*
  %14 = bitcast %"class.std::move_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 8, i32 8, i1 false)
  %15 = bitcast %"class.std::move_iterator"* %10 to i8*
  %16 = bitcast %"class.std::move_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 8, i32 8, i1 false)
  %17 = load i64*, i64** %7, align 8
  %18 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %9, i32 0, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %10, i32 0, i32 0
  %21 = load i64*, i64** %20, align 8
  %22 = call i64* @_ZSt18uninitialized_copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64* %19, i64* %21, i64* %17)
  ret i64* %22
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt32__make_move_if_noexcept_iteratorIPxSt13move_iteratorIS0_EET0_T_(i64*) #0 comdat {
  %2 = alloca %"class.std::move_iterator", align 8
  %3 = alloca i64*, align 8
  store i64* %0, i64** %3, align 8
  %4 = load i64*, i64** %3, align 8
  call void @_ZNSt13move_iteratorIPxEC2ES0_(%"class.std::move_iterator"* %2, i64* %4)
  %5 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %2, i32 0, i32 0
  %6 = load i64*, i64** %5, align 8
  ret i64* %6
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt18uninitialized_copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca %"class.std::move_iterator", align 8
  %5 = alloca %"class.std::move_iterator", align 8
  %6 = alloca i64*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %"class.std::move_iterator", align 8
  %9 = alloca %"class.std::move_iterator", align 8
  %10 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %4, i32 0, i32 0
  store i64* %0, i64** %10, align 8
  %11 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %5, i32 0, i32 0
  store i64* %1, i64** %11, align 8
  store i64* %2, i64** %6, align 8
  store i8 1, i8* %7, align 1
  %12 = bitcast %"class.std::move_iterator"* %8 to i8*
  %13 = bitcast %"class.std::move_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 8, i32 8, i1 false)
  %14 = bitcast %"class.std::move_iterator"* %9 to i8*
  %15 = bitcast %"class.std::move_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  %16 = load i64*, i64** %6, align 8
  %17 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %8, i32 0, i32 0
  %18 = load i64*, i64** %17, align 8
  %19 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %9, i32 0, i32 0
  %20 = load i64*, i64** %19, align 8
  %21 = call i64* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPxES3_EET0_T_S6_S5_(i64* %18, i64* %20, i64* %16)
  ret i64* %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #11

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPxES3_EET0_T_S6_S5_(i64*, i64*, i64*) #0 comdat align 2 {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.198
  %8 = load i32, i32* @y.199
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 353495570, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %81
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 353495570, label %20
    i32 596061076, label %28
    i32 1215839617, label %61
    i32 -710740828, label %63
  ]

; <label>:19:                                     ; preds = %17
  br label %81

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 596061076, i32 -710740828
  store i32 %27, i32* %16
  br label %81

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.std::move_iterator", align 8
  %30 = alloca %"class.std::move_iterator", align 8
  %31 = alloca i64*, align 8
  %32 = alloca %"class.std::move_iterator", align 8
  %33 = alloca %"class.std::move_iterator", align 8
  %34 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %29, i32 0, i32 0
  store i64* %0, i64** %34, align 8
  %35 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %30, i32 0, i32 0
  store i64* %1, i64** %35, align 8
  store i64* %2, i64** %31, align 8
  %36 = bitcast %"class.std::move_iterator"* %32 to i8*
  %37 = bitcast %"class.std::move_iterator"* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 8, i32 8, i1 false)
  %38 = bitcast %"class.std::move_iterator"* %33 to i8*
  %39 = bitcast %"class.std::move_iterator"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 8, i32 8, i1 false)
  %40 = load i64*, i64** %31, align 8
  %41 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %32, i32 0, i32 0
  %42 = load i64*, i64** %41, align 8
  %43 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %33, i32 0, i32 0
  %44 = load i64*, i64** %43, align 8
  %45 = call i64* @_ZSt4copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64* %42, i64* %44, i64* %40)
  store i64* %45, i64** %4
  %46 = load i32, i32* @x.198
  %47 = load i32, i32* @y.199
  %48 = add i32 %46, 210343211
  %49 = sub i32 %48, 1
  %50 = sub i32 %49, 210343211
  %51 = sub i32 %46, 1
  %52 = mul i32 %46, %50
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %47, 10
  %56 = and i1 %54, %55
  %57 = xor i1 %54, %55
  %58 = or i1 %56, %57
  %59 = or i1 %54, %55
  %60 = select i1 %58, i32 1215839617, i32 -710740828
  store i32 %60, i32* %16
  br label %81

; <label>:61:                                     ; preds = %17
  %62 = load volatile i64*, i64** %4
  ret i64* %62

; <label>:63:                                     ; preds = %17
  %64 = alloca %"class.std::move_iterator", align 8
  %65 = alloca %"class.std::move_iterator", align 8
  %66 = alloca i64*, align 8
  %67 = alloca %"class.std::move_iterator", align 8
  %68 = alloca %"class.std::move_iterator", align 8
  %69 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %64, i32 0, i32 0
  store i64* %0, i64** %69, align 8
  %70 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %65, i32 0, i32 0
  store i64* %1, i64** %70, align 8
  store i64* %2, i64** %66, align 8
  %71 = bitcast %"class.std::move_iterator"* %67 to i8*
  %72 = bitcast %"class.std::move_iterator"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %71, i8* %72, i64 8, i32 8, i1 false)
  %73 = bitcast %"class.std::move_iterator"* %68 to i8*
  %74 = bitcast %"class.std::move_iterator"* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %73, i8* %74, i64 8, i32 8, i1 false)
  %75 = load i64*, i64** %66, align 8
  %76 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %67, i32 0, i32 0
  %77 = load i64*, i64** %76, align 8
  %78 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %68, i32 0, i32 0
  %79 = load i64*, i64** %78, align 8
  %80 = call i64* @_ZSt4copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64* %77, i64* %79, i64* %75)
  store i32 596061076, i32* %16
  br label %81

; <label>:81:                                     ; preds = %63, %28, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt4copyISt13move_iteratorIPxES1_ET0_T_S4_S3_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.200
  %8 = load i32, i32* @y.201
  %9 = add i32 %7, -924218852
  %10 = sub i32 %9, 1
  %11 = sub i32 %10, -924218852
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 -1031986775, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %98
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -1031986775, label %21
    i32 1137723132, label %29
    i32 -506039347, label %76
    i32 -718698530, label %78
  ]

; <label>:20:                                     ; preds = %18
  br label %98

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  %28 = select i1 %26, i32 1137723132, i32 -718698530
  store i32 %28, i32* %17
  br label %98

; <label>:29:                                     ; preds = %18
  %30 = alloca %"class.std::move_iterator", align 8
  %31 = alloca %"class.std::move_iterator", align 8
  %32 = alloca i64*, align 8
  %33 = alloca %"class.std::move_iterator", align 8
  %34 = alloca %"class.std::move_iterator", align 8
  %35 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %30, i32 0, i32 0
  store i64* %0, i64** %35, align 8
  %36 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %31, i32 0, i32 0
  store i64* %1, i64** %36, align 8
  store i64* %2, i64** %32, align 8
  %37 = bitcast %"class.std::move_iterator"* %33 to i8*
  %38 = bitcast %"class.std::move_iterator"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 8, i32 8, i1 false)
  %39 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %33, i32 0, i32 0
  %40 = load i64*, i64** %39, align 8
  %41 = call i64* @_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_(i64* %40)
  %42 = bitcast %"class.std::move_iterator"* %34 to i8*
  %43 = bitcast %"class.std::move_iterator"* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %43, i64 8, i32 8, i1 false)
  %44 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %34, i32 0, i32 0
  %45 = load i64*, i64** %44, align 8
  %46 = call i64* @_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_(i64* %45)
  %47 = load i64*, i64** %32, align 8
  %48 = call i64* @_ZSt14__copy_move_a2ILb1EPxS0_ET1_T0_S2_S1_(i64* %41, i64* %46, i64* %47)
  store i64* %48, i64** %4
  %49 = load i32, i32* @x.200
  %50 = load i32, i32* @y.201
  %51 = add i32 %49, -703637129
  %52 = sub i32 %51, 1
  %53 = sub i32 %52, -703637129
  %54 = sub i32 %49, 1
  %55 = mul i32 %49, %53
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %50, 10
  %59 = xor i1 %57, true
  %60 = xor i1 %58, true
  %61 = xor i1 true, true
  %62 = and i1 %59, true
  %63 = and i1 %57, %61
  %64 = and i1 %60, true
  %65 = and i1 %58, %61
  %66 = or i1 %62, %63
  %67 = or i1 %64, %65
  %68 = xor i1 %66, %67
  %69 = or i1 %59, %60
  %70 = xor i1 %69, true
  %71 = or i1 true, %61
  %72 = and i1 %70, %71
  %73 = or i1 %68, %72
  %74 = or i1 %57, %58
  %75 = select i1 %73, i32 -506039347, i32 -718698530
  store i32 %75, i32* %17
  br label %98

; <label>:76:                                     ; preds = %18
  %77 = load volatile i64*, i64** %4
  ret i64* %77

; <label>:78:                                     ; preds = %18
  %79 = alloca %"class.std::move_iterator", align 8
  %80 = alloca %"class.std::move_iterator", align 8
  %81 = alloca i64*, align 8
  %82 = alloca %"class.std::move_iterator", align 8
  %83 = alloca %"class.std::move_iterator", align 8
  %84 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %79, i32 0, i32 0
  store i64* %0, i64** %84, align 8
  %85 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %80, i32 0, i32 0
  store i64* %1, i64** %85, align 8
  store i64* %2, i64** %81, align 8
  %86 = bitcast %"class.std::move_iterator"* %82 to i8*
  %87 = bitcast %"class.std::move_iterator"* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 8, i32 8, i1 false)
  %88 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %82, i32 0, i32 0
  %89 = load i64*, i64** %88, align 8
  %90 = call i64* @_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_(i64* %89)
  %91 = bitcast %"class.std::move_iterator"* %83 to i8*
  %92 = bitcast %"class.std::move_iterator"* %80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 8, i32 8, i1 false)
  %93 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %83, i32 0, i32 0
  %94 = load i64*, i64** %93, align 8
  %95 = call i64* @_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_(i64* %94)
  %96 = load i64*, i64** %81, align 8
  %97 = call i64* @_ZSt14__copy_move_a2ILb1EPxS0_ET1_T0_S2_S1_(i64* %90, i64* %95, i64* %96)
  store i32 1137723132, i32* %17
  br label %98

; <label>:98:                                     ; preds = %78, %29, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt14__copy_move_a2ILb1EPxS0_ET1_T0_S2_S1_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %7)
  %9 = load i64*, i64** %5, align 8
  %10 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %9)
  %11 = load i64*, i64** %6, align 8
  %12 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %11)
  %13 = call i64* @_ZSt13__copy_move_aILb1EPxS0_ET1_T0_S2_S1_(i64* %8, i64* %10, i64* %12)
  ret i64* %13
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__miter_baseISt13move_iteratorIPxEENSt11_Miter_baseIT_E13iterator_typeES4_(i64*) #0 comdat {
  %2 = alloca %"class.std::move_iterator", align 8
  %3 = alloca %"class.std::move_iterator", align 8
  %4 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %2, i32 0, i32 0
  store i64* %0, i64** %4, align 8
  %5 = bitcast %"class.std::move_iterator"* %3 to i8*
  %6 = bitcast %"class.std::move_iterator"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 8, i32 8, i1 false)
  %7 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %3, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = call i64* @_ZNSt10_Iter_baseISt13move_iteratorIPxELb1EE7_S_baseES2_(i64* %8)
  ret i64* %9
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt13__copy_move_aILb1EPxS0_ET1_T0_S2_S1_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i8, align 1
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  store i8 1, i8* %7, align 1
  %8 = load i64*, i64** %4, align 8
  %9 = load i64*, i64** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call i64* @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_(i64* %8, i64* %9, i64* %10)
  ret i64* %11
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_(i64*, i64*, i64*) #4 comdat align 2 {
  %4 = alloca i64
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64*, i64** %5, align 8
  %11 = ptrtoint i64* %9 to i64
  %12 = ptrtoint i64* %10 to i64
  %13 = add i64 %11, 5787870379035196318
  %14 = sub i64 %13, %12
  %15 = sub i64 %14, 5787870379035196318
  %16 = sub i64 %11, %12
  %17 = sdiv exact i64 %15, 8
  store i64 %17, i64* %8, align 8
  %18 = load i64, i64* %8, align 8
  store i64 %18, i64* %4
  %19 = alloca i32
  store i32 1209364792, i32* %19
  br label %20

; <label>:20:                                     ; preds = %3, %87
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 1209364792, label %23
    i32 -1491130910, label %27
    i32 1617975589, label %43
    i32 544827717, label %64
    i32 -1171958988, label %65
    i32 2057923378, label %69
  ]

; <label>:22:                                     ; preds = %20
  br label %87

; <label>:23:                                     ; preds = %20
  %24 = load volatile i64, i64* %4
  %25 = icmp ne i64 %24, 0
  %26 = select i1 %25, i32 -1491130910, i32 -1171958988
  store i32 %26, i32* %19
  br label %87

; <label>:27:                                     ; preds = %20
  %28 = load i32, i32* @x.208
  %29 = load i32, i32* @y.209
  %30 = add i32 %28, -500752618
  %31 = sub i32 %30, 1
  %32 = sub i32 %31, -500752618
  %33 = sub i32 %28, 1
  %34 = mul i32 %28, %32
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %29, 10
  %38 = and i1 %36, %37
  %39 = xor i1 %36, %37
  %40 = or i1 %38, %39
  %41 = or i1 %36, %37
  %42 = select i1 %40, i32 1617975589, i32 2057923378
  store i32 %42, i32* %19
  br label %87

; <label>:43:                                     ; preds = %20
  %44 = load i64*, i64** %7, align 8
  %45 = bitcast i64* %44 to i8*
  %46 = load i64*, i64** %5, align 8
  %47 = bitcast i64* %46 to i8*
  %48 = load i64, i64* %8, align 8
  %49 = mul i64 8, %48
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %45, i8* %47, i64 %49, i32 8, i1 false)
  %50 = load i32, i32* @x.208
  %51 = load i32, i32* @y.209
  %52 = sub i32 0, 1
  %53 = add i32 %50, %52
  %54 = sub i32 %50, 1
  %55 = mul i32 %50, %53
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %51, 10
  %59 = and i1 %57, %58
  %60 = xor i1 %57, %58
  %61 = or i1 %59, %60
  %62 = or i1 %57, %58
  %63 = select i1 %61, i32 544827717, i32 2057923378
  store i32 %63, i32* %19
  br label %87

; <label>:64:                                     ; preds = %20
  store i32 -1171958988, i32* %19
  br label %87

; <label>:65:                                     ; preds = %20
  %66 = load i64*, i64** %7, align 8
  %67 = load i64, i64* %8, align 8
  %68 = getelementptr inbounds i64, i64* %66, i64 %67
  ret i64* %68

; <label>:69:                                     ; preds = %20
  %70 = load i64*, i64** %7, align 8
  %71 = bitcast i64* %70 to i8*
  %72 = load i64*, i64** %5, align 8
  %73 = bitcast i64* %72 to i8*
  %74 = load i64, i64* %8, align 8
  %75 = shl i64 8, %74
  %76 = shl i64 8, %74
  %77 = add i64 0, -2434723513261509066
  %78 = sub i64 %77, 8
  %79 = sub i64 %78, -2434723513261509066
  %80 = sub i64 0, 8
  %81 = sub i64 %79, 178014105333862409
  %82 = add i64 %81, %74
  %83 = add i64 %82, 178014105333862409
  %84 = add i64 %79, %74
  %85 = shl i64 8, %74
  %86 = mul i64 8, %74
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %71, i8* %73, i64 %86, i32 8, i1 false)
  store i32 1617975589, i32* %19
  br label %87

; <label>:87:                                     ; preds = %69, %64, %43, %27, %23, %22
  br label %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #11

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseISt13move_iteratorIPxELb1EE7_S_baseES2_(i64*) #0 comdat align 2 {
  %2 = alloca %"class.std::move_iterator", align 8
  %3 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %2, i32 0, i32 0
  store i64* %0, i64** %3, align 8
  %4 = call i64* @_ZNKSt13move_iteratorIPxE4baseEv(%"class.std::move_iterator"* %2)
  ret i64* %4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNKSt13move_iteratorIPxE4baseEv(%"class.std::move_iterator"*) #4 comdat align 2 {
  %2 = alloca %"class.std::move_iterator"*, align 8
  store %"class.std::move_iterator"* %0, %"class.std::move_iterator"** %2, align 8
  %3 = load %"class.std::move_iterator"*, %"class.std::move_iterator"** %2, align 8
  %4 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %3, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  ret i64* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt13move_iteratorIPxEC2ES0_(%"class.std::move_iterator"*, i64*) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.std::move_iterator"*, align 8
  %4 = alloca i64*, align 8
  store %"class.std::move_iterator"* %0, %"class.std::move_iterator"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"class.std::move_iterator"*, %"class.std::move_iterator"** %3, align 8
  %6 = getelementptr inbounds %"class.std::move_iterator", %"class.std::move_iterator"* %5, i32 0, i32 0
  %7 = load i64*, i64** %4, align 8
  store i64* %7, i64** %6, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt12_Vector_baseI4shopSaIS0_EEC2Ev(%"struct.std::_Vector_base.5"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.216
  %5 = load i32, i32* @y.217
  %6 = sub i32 0, 1
  %7 = add i32 %4, %6
  %8 = sub i32 %4, 1
  %9 = mul i32 %4, %7
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %3
  %12 = icmp slt i32 %5, 10
  store i1 %12, i1* %2
  %13 = alloca i32
  store i32 -1715416331, i32* %13
  br label %14

; <label>:14:                                     ; preds = %1, %72
  %15 = load i32, i32* %13
  switch i32 %15, label %16 [
    i32 -1715416331, label %17
    i32 1038079024, label %37
    i32 243492770, label %67
    i32 -1859995100, label %68
  ]

; <label>:16:                                     ; preds = %14
  br label %72

; <label>:17:                                     ; preds = %14
  %18 = load volatile i1, i1* %3
  %19 = load volatile i1, i1* %2
  %20 = xor i1 %18, true
  %21 = xor i1 %19, true
  %22 = xor i1 true, true
  %23 = and i1 %20, true
  %24 = and i1 %18, %22
  %25 = and i1 %21, true
  %26 = and i1 %19, %22
  %27 = or i1 %23, %24
  %28 = or i1 %25, %26
  %29 = xor i1 %27, %28
  %30 = or i1 %20, %21
  %31 = xor i1 %30, true
  %32 = or i1 true, %22
  %33 = and i1 %31, %32
  %34 = or i1 %29, %33
  %35 = or i1 %18, %19
  %36 = select i1 %34, i32 1038079024, i32 -1859995100
  store i32 %36, i32* %13
  br label %72

; <label>:37:                                     ; preds = %14
  %38 = alloca %"struct.std::_Vector_base.5"*, align 8
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %38, align 8
  %39 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %38, align 8
  %40 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %39, i32 0, i32 0
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implC2Ev(%"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %40)
  %41 = load i32, i32* @x.216
  %42 = load i32, i32* @y.217
  %43 = sub i32 0, 1
  %44 = add i32 %41, %43
  %45 = sub i32 %41, 1
  %46 = mul i32 %41, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %42, 10
  %50 = xor i1 %48, true
  %51 = xor i1 %49, true
  %52 = xor i1 false, true
  %53 = and i1 %50, false
  %54 = and i1 %48, %52
  %55 = and i1 %51, false
  %56 = and i1 %49, %52
  %57 = or i1 %53, %54
  %58 = or i1 %55, %56
  %59 = xor i1 %57, %58
  %60 = or i1 %50, %51
  %61 = xor i1 %60, true
  %62 = or i1 false, %52
  %63 = and i1 %61, %62
  %64 = or i1 %59, %63
  %65 = or i1 %48, %49
  %66 = select i1 %64, i32 243492770, i32 -1859995100
  store i32 %66, i32* %13
  br label %72

; <label>:67:                                     ; preds = %14
  ret void

; <label>:68:                                     ; preds = %14
  %69 = alloca %"struct.std::_Vector_base.5"*, align 8
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %69, align 8
  %70 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %69, align 8
  %71 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %70, i32 0, i32 0
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implC2Ev(%"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %71)
  store i32 1038079024, i32* %13
  br label %72

; <label>:72:                                     ; preds = %68, %37, %17, %16
  br label %14
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implC2Ev(%"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %0, %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"** %2, align 8
  %3 = load %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"*, %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"** %2, align 8
  %4 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %3 to %"class.std::allocator.6"*
  call void @_ZNSaI4shopEC2Ev(%"class.std::allocator.6"* %4) #3
  %5 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %3, i32 0, i32 0
  store %struct.shop* null, %struct.shop** %5, align 8
  %6 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %3, i32 0, i32 1
  store %struct.shop* null, %struct.shop** %6, align 8
  %7 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %3, i32 0, i32 2
  store %struct.shop* null, %struct.shop** %7, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaI4shopEC2Ev(%"class.std::allocator.6"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.std::allocator.6"*, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %2, align 8
  %3 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %2, align 8
  %4 = bitcast %"class.std::allocator.6"* %3 to %"class.__gnu_cxx::new_allocator.7"*
  call void @_ZN9__gnu_cxx13new_allocatorI4shopEC2Ev(%"class.__gnu_cxx::new_allocator.7"* %4) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorI4shopEC2Ev(%"class.__gnu_cxx::new_allocator.7"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %2, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt8_DestroyIP4shopS0_EvT_S2_RSaIT0_E(%struct.shop*, %struct.shop*, %"class.std::allocator.6"* dereferenceable(1)) #0 comdat {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.224
  %7 = load i32, i32* @y.225
  %8 = sub i32 0, 1
  %9 = add i32 %6, %8
  %10 = sub i32 %6, 1
  %11 = mul i32 %6, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %5
  %14 = icmp slt i32 %7, 10
  store i1 %14, i1* %4
  %15 = alloca i32
  store i32 1873682151, i32* %15
  br label %16

; <label>:16:                                     ; preds = %3, %79
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1873682151, label %19
    i32 -1720568472, label %39
    i32 1331280253, label %72
    i32 -489343974, label %73
  ]

; <label>:18:                                     ; preds = %16
  br label %79

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %5
  %21 = load volatile i1, i1* %4
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -1720568472, i32 -489343974
  store i32 %38, i32* %15
  br label %79

; <label>:39:                                     ; preds = %16
  %40 = alloca %struct.shop*, align 8
  %41 = alloca %struct.shop*, align 8
  %42 = alloca %"class.std::allocator.6"*, align 8
  store %struct.shop* %0, %struct.shop** %40, align 8
  store %struct.shop* %1, %struct.shop** %41, align 8
  store %"class.std::allocator.6"* %2, %"class.std::allocator.6"** %42, align 8
  %43 = load %struct.shop*, %struct.shop** %40, align 8
  %44 = load %struct.shop*, %struct.shop** %41, align 8
  call void @_ZSt8_DestroyIP4shopEvT_S2_(%struct.shop* %43, %struct.shop* %44)
  %45 = load i32, i32* @x.224
  %46 = load i32, i32* @y.225
  %47 = add i32 %45, 181260825
  %48 = sub i32 %47, 1
  %49 = sub i32 %48, 181260825
  %50 = sub i32 %45, 1
  %51 = mul i32 %45, %49
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %46, 10
  %55 = xor i1 %53, true
  %56 = xor i1 %54, true
  %57 = xor i1 false, true
  %58 = and i1 %55, false
  %59 = and i1 %53, %57
  %60 = and i1 %56, false
  %61 = and i1 %54, %57
  %62 = or i1 %58, %59
  %63 = or i1 %60, %61
  %64 = xor i1 %62, %63
  %65 = or i1 %55, %56
  %66 = xor i1 %65, true
  %67 = or i1 false, %57
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  %70 = or i1 %53, %54
  %71 = select i1 %69, i32 1331280253, i32 -489343974
  store i32 %71, i32* %15
  br label %79

; <label>:72:                                     ; preds = %16
  ret void

; <label>:73:                                     ; preds = %16
  %74 = alloca %struct.shop*, align 8
  %75 = alloca %struct.shop*, align 8
  %76 = alloca %"class.std::allocator.6"*, align 8
  store %struct.shop* %0, %struct.shop** %74, align 8
  store %struct.shop* %1, %struct.shop** %75, align 8
  store %"class.std::allocator.6"* %2, %"class.std::allocator.6"** %76, align 8
  %77 = load %struct.shop*, %struct.shop** %74, align 8
  %78 = load %struct.shop*, %struct.shop** %75, align 8
  call void @_ZSt8_DestroyIP4shopEvT_S2_(%struct.shop* %77, %struct.shop* %78)
  store i32 -1720568472, i32* %15
  br label %79

; <label>:79:                                     ; preds = %73, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator.6"* @_ZNSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"*) #4 comdat align 2 {
  %2 = alloca %"class.std::allocator.6"*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.226
  %6 = load i32, i32* @y.227
  %7 = sub i32 %5, -1123951968
  %8 = sub i32 %7, 1
  %9 = add i32 %8, -1123951968
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -22876423, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %54
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -22876423, label %19
    i32 1632655882, label %27
    i32 661072286, label %47
    i32 -251589327, label %49
  ]

; <label>:18:                                     ; preds = %16
  br label %54

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 1632655882, i32 -251589327
  store i32 %26, i32* %15
  br label %54

; <label>:27:                                     ; preds = %16
  %28 = alloca %"struct.std::_Vector_base.5"*, align 8
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %28, align 8
  %29 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %28, align 8
  %30 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %29, i32 0, i32 0
  %31 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %30 to %"class.std::allocator.6"*
  store %"class.std::allocator.6"* %31, %"class.std::allocator.6"** %2
  %32 = load i32, i32* @x.226
  %33 = load i32, i32* @y.227
  %34 = add i32 %32, 1213806335
  %35 = sub i32 %34, 1
  %36 = sub i32 %35, 1213806335
  %37 = sub i32 %32, 1
  %38 = mul i32 %32, %36
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %33, 10
  %42 = and i1 %40, %41
  %43 = xor i1 %40, %41
  %44 = or i1 %42, %43
  %45 = or i1 %40, %41
  %46 = select i1 %44, i32 661072286, i32 -251589327
  store i32 %46, i32* %15
  br label %54

; <label>:47:                                     ; preds = %16
  %48 = load volatile %"class.std::allocator.6"*, %"class.std::allocator.6"** %2
  ret %"class.std::allocator.6"* %48

; <label>:49:                                     ; preds = %16
  %50 = alloca %"struct.std::_Vector_base.5"*, align 8
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %50, align 8
  %51 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %50, align 8
  %52 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %51, i32 0, i32 0
  %53 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %52 to %"class.std::allocator.6"*
  store i32 1632655882, i32* %15
  br label %54

; <label>:54:                                     ; preds = %49, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseI4shopSaIS0_EED2Ev(%"struct.std::_Vector_base.5"*) unnamed_addr #4 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = load i32, i32* @x.228
  %3 = load i32, i32* @y.229
  %4 = sub i32 %2, -297756730
  %5 = sub i32 %4, 1
  %6 = add i32 %5, -297756730
  %7 = sub i32 %2, 1
  %8 = mul i32 %2, %6
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %3, 10
  %12 = xor i1 %10, true
  %13 = xor i1 %11, true
  %14 = xor i1 false, true
  %15 = and i1 %12, false
  %16 = and i1 %10, %14
  %17 = and i1 %13, false
  %18 = and i1 %11, %14
  %19 = or i1 %15, %16
  %20 = or i1 %17, %18
  %21 = xor i1 %19, %20
  %22 = or i1 %12, %13
  %23 = xor i1 %22, true
  %24 = or i1 false, %14
  %25 = and i1 %23, %24
  %26 = or i1 %21, %25
  %27 = or i1 %10, %11
  br i1 %26, label %28, label %113

; <label>:28:                                     ; preds = %1, %113
  %29 = alloca %"struct.std::_Vector_base.5"*, align 8
  %30 = alloca i8*
  %31 = alloca i32
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %29, align 8
  %32 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %29, align 8
  %33 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %32, i32 0, i32 0
  %34 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %33, i32 0, i32 0
  %35 = load %struct.shop*, %struct.shop** %34, align 8
  %36 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %32, i32 0, i32 0
  %37 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %36, i32 0, i32 2
  %38 = load %struct.shop*, %struct.shop** %37, align 8
  %39 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %32, i32 0, i32 0
  %40 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %39, i32 0, i32 0
  %41 = load %struct.shop*, %struct.shop** %40, align 8
  %42 = ptrtoint %struct.shop* %38 to i64
  %43 = ptrtoint %struct.shop* %41 to i64
  %44 = sub i64 %42, -6187980442149632973
  %45 = sub i64 %44, %43
  %46 = add i64 %45, -6187980442149632973
  %47 = sub i64 %42, %43
  %48 = sdiv exact i64 %46, 16
  %49 = load i32, i32* @x.228
  %50 = load i32, i32* @y.229
  %51 = sub i32 0, 1
  %52 = add i32 %49, %51
  %53 = sub i32 %49, 1
  %54 = mul i32 %49, %52
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %50, 10
  %58 = and i1 %56, %57
  %59 = xor i1 %56, %57
  %60 = or i1 %58, %59
  %61 = or i1 %56, %57
  br i1 %60, label %62, label %113

; <label>:62:                                     ; preds = %28
  invoke void @_ZNSt12_Vector_baseI4shopSaIS0_EE13_M_deallocateEPS0_m(%"struct.std::_Vector_base.5"* %32, %struct.shop* %35, i64 %48)
          to label %63 unwind label %65

; <label>:63:                                     ; preds = %62
  %64 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %32, i32 0, i32 0
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implD2Ev(%"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %64) #3
  ret void

; <label>:65:                                     ; preds = %62
  %66 = load i32, i32* @x.228
  %67 = load i32, i32* @y.229
  %68 = sub i32 0, 1
  %69 = add i32 %66, %68
  %70 = sub i32 %66, 1
  %71 = mul i32 %66, %69
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %67, 10
  %75 = and i1 %73, %74
  %76 = xor i1 %73, %74
  %77 = or i1 %75, %76
  %78 = or i1 %73, %74
  br i1 %77, label %79, label %185

; <label>:79:                                     ; preds = %65, %185
  %80 = landingpad { i8*, i32 }
          catch i8* null
  %81 = extractvalue { i8*, i32 } %80, 0
  store i8* %81, i8** %30, align 8
  %82 = extractvalue { i8*, i32 } %80, 1
  store i32 %82, i32* %31, align 4
  %83 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %32, i32 0, i32 0
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implD2Ev(%"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %83) #3
  %84 = load i32, i32* @x.228
  %85 = load i32, i32* @y.229
  %86 = add i32 %84, 1592708978
  %87 = sub i32 %86, 1
  %88 = sub i32 %87, 1592708978
  %89 = sub i32 %84, 1
  %90 = mul i32 %84, %88
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %85, 10
  %94 = xor i1 %92, true
  %95 = xor i1 %93, true
  %96 = xor i1 true, true
  %97 = and i1 %94, true
  %98 = and i1 %92, %96
  %99 = and i1 %95, true
  %100 = and i1 %93, %96
  %101 = or i1 %97, %98
  %102 = or i1 %99, %100
  %103 = xor i1 %101, %102
  %104 = or i1 %94, %95
  %105 = xor i1 %104, true
  %106 = or i1 true, %96
  %107 = and i1 %105, %106
  %108 = or i1 %103, %107
  %109 = or i1 %92, %93
  br i1 %108, label %110, label %185

; <label>:110:                                    ; preds = %79
  br label %111

; <label>:111:                                    ; preds = %110
  %112 = load i8*, i8** %30, align 8
  call void @__clang_call_terminate(i8* %112) #13
  unreachable

; <label>:113:                                    ; preds = %28, %1
  %114 = alloca %"struct.std::_Vector_base.5"*, align 8
  %115 = alloca i8*
  %116 = alloca i32
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %114, align 8
  %117 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %114, align 8
  %118 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %117, i32 0, i32 0
  %119 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %118, i32 0, i32 0
  %120 = load %struct.shop*, %struct.shop** %119, align 8
  %121 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %117, i32 0, i32 0
  %122 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %121, i32 0, i32 2
  %123 = load %struct.shop*, %struct.shop** %122, align 8
  %124 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %117, i32 0, i32 0
  %125 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %124, i32 0, i32 0
  %126 = load %struct.shop*, %struct.shop** %125, align 8
  %127 = ptrtoint %struct.shop* %123 to i64
  %128 = ptrtoint %struct.shop* %126 to i64
  %129 = shl i64 %127, %128
  %130 = sub i64 0, -4636501902122980217
  %131 = sub i64 %130, %127
  %132 = add i64 %131, -4636501902122980217
  %133 = sub i64 0, %127
  %134 = add i64 %132, -8912308123499196254
  %135 = add i64 %134, %128
  %136 = sub i64 %135, -8912308123499196254
  %137 = add i64 %132, %128
  %138 = sub i64 0, 2496124845419736809
  %139 = sub i64 %138, %127
  %140 = add i64 %139, 2496124845419736809
  %141 = sub i64 0, %127
  %142 = add i64 %140, -7598722591554580635
  %143 = add i64 %142, %128
  %144 = sub i64 %143, -7598722591554580635
  %145 = add i64 %140, %128
  %146 = sub i64 0, %128
  %147 = add i64 %127, %146
  %148 = sub i64 %127, %128
  %149 = mul i64 %147, %128
  %150 = sub i64 0, %128
  %151 = add i64 %127, %150
  %152 = sub i64 %127, %128
  %153 = mul i64 %151, %128
  %154 = add i64 0, -687250883970282362
  %155 = sub i64 %154, %127
  %156 = sub i64 %155, -687250883970282362
  %157 = sub i64 0, %127
  %158 = add i64 %156, 8308868833991651051
  %159 = add i64 %158, %128
  %160 = sub i64 %159, 8308868833991651051
  %161 = add i64 %156, %128
  %162 = shl i64 %127, %128
  %163 = sub i64 0, %127
  %164 = add i64 0, %163
  %165 = sub i64 0, %127
  %166 = sub i64 0, %164
  %167 = sub i64 0, %128
  %168 = add i64 %166, %167
  %169 = sub i64 0, %168
  %170 = add i64 %164, %128
  %171 = shl i64 %127, %128
  %172 = add i64 %127, -6711436818957935885
  %173 = sub i64 %172, %128
  %174 = sub i64 %173, -6711436818957935885
  %175 = sub i64 %127, %128
  %176 = add i64 0, 5339506754825179772
  %177 = sub i64 %176, %174
  %178 = sub i64 %177, 5339506754825179772
  %179 = sub i64 0, %174
  %180 = add i64 %178, 5694662148041171409
  %181 = add i64 %180, 16
  %182 = sub i64 %181, 5694662148041171409
  %183 = add i64 %178, 16
  %184 = sdiv exact i64 %174, 16
  br label %28

; <label>:185:                                    ; preds = %79, %65
  %186 = landingpad { i8*, i32 }
          catch i8* null
  %187 = extractvalue { i8*, i32 } %186, 0
  store i8* %187, i8** %30, align 8
  %188 = extractvalue { i8*, i32 } %186, 1
  store i32 %188, i32* %31, align 4
  %189 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %32, i32 0, i32 0
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implD2Ev(%"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %189) #3
  br label %79
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt8_DestroyIP4shopEvT_S2_(%struct.shop*, %struct.shop*) #0 comdat {
  %3 = alloca %struct.shop*, align 8
  %4 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %3, align 8
  store %struct.shop* %1, %struct.shop** %4, align 8
  %5 = load %struct.shop*, %struct.shop** %3, align 8
  %6 = load %struct.shop*, %struct.shop** %4, align 8
  call void @_ZNSt12_Destroy_auxILb1EE9__destroyIP4shopEEvT_S4_(%struct.shop* %5, %struct.shop* %6)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Destroy_auxILb1EE9__destroyIP4shopEEvT_S4_(%struct.shop*, %struct.shop*) #4 comdat align 2 {
  %3 = alloca %struct.shop*, align 8
  %4 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %3, align 8
  store %struct.shop* %1, %struct.shop** %4, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt12_Vector_baseI4shopSaIS0_EE13_M_deallocateEPS0_m(%"struct.std::_Vector_base.5"*, %struct.shop*, i64) #0 comdat align 2 {
  %4 = alloca %struct.shop*
  %5 = alloca %"struct.std::_Vector_base.5"*
  %6 = alloca %"struct.std::_Vector_base.5"*, align 8
  %7 = alloca %struct.shop*, align 8
  %8 = alloca i64, align 8
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %6, align 8
  store %struct.shop* %1, %struct.shop** %7, align 8
  store i64 %2, i64* %8, align 8
  %9 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %6, align 8
  store %"struct.std::_Vector_base.5"* %9, %"struct.std::_Vector_base.5"** %5
  %10 = load %struct.shop*, %struct.shop** %7, align 8
  store %struct.shop* %10, %struct.shop** %4
  %11 = alloca i32
  store i32 -1358321199, i32* %11
  br label %12

; <label>:12:                                     ; preds = %3, %26
  %13 = load i32, i32* %11
  switch i32 %13, label %14 [
    i32 -1358321199, label %15
    i32 -1711383723, label %19
    i32 -692242817, label %25
  ]

; <label>:14:                                     ; preds = %12
  br label %26

; <label>:15:                                     ; preds = %12
  %16 = load volatile %struct.shop*, %struct.shop** %4
  %17 = icmp ne %struct.shop* %16, null
  %18 = select i1 %17, i32 -1711383723, i32 -692242817
  store i32 %18, i32* %11
  br label %26

; <label>:19:                                     ; preds = %12
  %20 = load volatile %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %5
  %21 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %20, i32 0, i32 0
  %22 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %21 to %"class.std::allocator.6"*
  %23 = load %struct.shop*, %struct.shop** %7, align 8
  %24 = load i64, i64* %8, align 8
  call void @_ZNSt16allocator_traitsISaI4shopEE10deallocateERS1_PS0_m(%"class.std::allocator.6"* dereferenceable(1) %22, %struct.shop* %23, i64 %24)
  store i32 -692242817, i32* %11
  br label %26

; <label>:25:                                     ; preds = %12
  ret void

; <label>:26:                                     ; preds = %19, %15, %14
  br label %12
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseI4shopSaIS0_EE12_Vector_implD2Ev(%"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"*, align 8
  store %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %0, %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"** %2, align 8
  %3 = load %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"*, %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"** %2, align 8
  %4 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %3 to %"class.std::allocator.6"*
  call void @_ZNSaI4shopED2Ev(%"class.std::allocator.6"* %4) #3
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaI4shopEE10deallocateERS1_PS0_m(%"class.std::allocator.6"* dereferenceable(1), %struct.shop*, i64) #0 comdat align 2 {
  %4 = alloca %"class.std::allocator.6"*, align 8
  %5 = alloca %struct.shop*, align 8
  %6 = alloca i64, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %4, align 8
  store %struct.shop* %1, %struct.shop** %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %4, align 8
  %8 = bitcast %"class.std::allocator.6"* %7 to %"class.__gnu_cxx::new_allocator.7"*
  %9 = load %struct.shop*, %struct.shop** %5, align 8
  %10 = load i64, i64* %6, align 8
  call void @_ZN9__gnu_cxx13new_allocatorI4shopE10deallocateEPS1_m(%"class.__gnu_cxx::new_allocator.7"* %8, %struct.shop* %9, i64 %10)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorI4shopE10deallocateEPS1_m(%"class.__gnu_cxx::new_allocator.7"*, %struct.shop*, i64) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  %5 = alloca %struct.shop*, align 8
  %6 = alloca i64, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %4, align 8
  store %struct.shop* %1, %struct.shop** %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %4, align 8
  %8 = load %struct.shop*, %struct.shop** %5, align 8
  %9 = bitcast %struct.shop* %8 to i8*
  call void @_ZdlPv(i8* %9) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaI4shopED2Ev(%"class.std::allocator.6"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.242
  %5 = load i32, i32* @y.243
  %6 = sub i32 %4, 1142745475
  %7 = sub i32 %6, 1
  %8 = add i32 %7, 1142745475
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 259199886, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %74
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 259199886, label %18
    i32 248512903, label %38
    i32 -519077530, label %69
    i32 -1362860676, label %70
  ]

; <label>:17:                                     ; preds = %15
  br label %74

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 false, true
  %24 = and i1 %21, false
  %25 = and i1 %19, %23
  %26 = and i1 %22, false
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 false, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 248512903, i32 -1362860676
  store i32 %37, i32* %14
  br label %74

; <label>:38:                                     ; preds = %15
  %39 = alloca %"class.std::allocator.6"*, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %39, align 8
  %40 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %39, align 8
  %41 = bitcast %"class.std::allocator.6"* %40 to %"class.__gnu_cxx::new_allocator.7"*
  call void @_ZN9__gnu_cxx13new_allocatorI4shopED2Ev(%"class.__gnu_cxx::new_allocator.7"* %41) #3
  %42 = load i32, i32* @x.242
  %43 = load i32, i32* @y.243
  %44 = add i32 %42, -1615887846
  %45 = sub i32 %44, 1
  %46 = sub i32 %45, -1615887846
  %47 = sub i32 %42, 1
  %48 = mul i32 %42, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %43, 10
  %52 = xor i1 %50, true
  %53 = xor i1 %51, true
  %54 = xor i1 false, true
  %55 = and i1 %52, false
  %56 = and i1 %50, %54
  %57 = and i1 %53, false
  %58 = and i1 %51, %54
  %59 = or i1 %55, %56
  %60 = or i1 %57, %58
  %61 = xor i1 %59, %60
  %62 = or i1 %52, %53
  %63 = xor i1 %62, true
  %64 = or i1 false, %54
  %65 = and i1 %63, %64
  %66 = or i1 %61, %65
  %67 = or i1 %50, %51
  %68 = select i1 %66, i32 -519077530, i32 -1362860676
  store i32 %68, i32* %14
  br label %74

; <label>:69:                                     ; preds = %15
  ret void

; <label>:70:                                     ; preds = %15
  %71 = alloca %"class.std::allocator.6"*, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %71, align 8
  %72 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %71, align 8
  %73 = bitcast %"class.std::allocator.6"* %72 to %"class.__gnu_cxx::new_allocator.7"*
  call void @_ZN9__gnu_cxx13new_allocatorI4shopED2Ev(%"class.__gnu_cxx::new_allocator.7"* %73) #3
  store i32 248512903, i32* %14
  br label %74

; <label>:74:                                     ; preds = %70, %38, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorI4shopED2Ev(%"class.__gnu_cxx::new_allocator.7"*) unnamed_addr #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %2, align 8
  %3 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEEC2ERKS0_(%"struct.std::_Vector_base"*, %"class.std::allocator.1"* dereferenceable(1)) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"struct.std::_Vector_base"*, align 8
  %4 = alloca %"class.std::allocator.1"*, align 8
  store %"struct.std::_Vector_base"* %0, %"struct.std::_Vector_base"** %3, align 8
  store %"class.std::allocator.1"* %1, %"class.std::allocator.1"** %4, align 8
  %5 = load %"struct.std::_Vector_base"*, %"struct.std::_Vector_base"** %3, align 8
  %6 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %5, i32 0, i32 0
  %7 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %4, align 8
  call void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2ERKS0_(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %6, %"class.std::allocator.1"* dereferenceable(1) %7) #3
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE19_M_range_initializeIPKxEEvT_S5_St20forward_iterator_tag(%"class.std::vector"*, i64*, i64*) #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.248
  %7 = load i32, i32* @y.249
  %8 = sub i32 %6, -1223640043
  %9 = sub i32 %8, 1
  %10 = add i32 %9, -1223640043
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 1581009016, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %141
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 1581009016, label %20
    i32 -1403827725, label %40
    i32 716259047, label %103
    i32 1797812845, label %104
  ]

; <label>:19:                                     ; preds = %17
  br label %141

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 true, true
  %26 = and i1 %23, true
  %27 = and i1 %21, %25
  %28 = and i1 %24, true
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 true, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 -1403827725, i32 1797812845
  store i32 %39, i32* %16
  br label %141

; <label>:40:                                     ; preds = %17
  %41 = alloca %"struct.std::forward_iterator_tag", align 1
  %42 = alloca %"class.std::vector"*, align 8
  %43 = alloca i64*, align 8
  %44 = alloca i64*, align 8
  %45 = alloca i64, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %42, align 8
  store i64* %1, i64** %43, align 8
  store i64* %2, i64** %44, align 8
  %46 = load %"class.std::vector"*, %"class.std::vector"** %42, align 8
  %47 = load i64*, i64** %43, align 8
  %48 = load i64*, i64** %44, align 8
  %49 = call i64 @_ZSt8distanceIPKxENSt15iterator_traitsIT_E15difference_typeES3_S3_(i64* %47, i64* %48)
  store i64 %49, i64* %45, align 8
  %50 = bitcast %"class.std::vector"* %46 to %"struct.std::_Vector_base"*
  %51 = load i64, i64* %45, align 8
  %52 = call i64* @_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm(%"struct.std::_Vector_base"* %50, i64 %51)
  %53 = bitcast %"class.std::vector"* %46 to %"struct.std::_Vector_base"*
  %54 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %53, i32 0, i32 0
  %55 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %54, i32 0, i32 0
  store i64* %52, i64** %55, align 8
  %56 = bitcast %"class.std::vector"* %46 to %"struct.std::_Vector_base"*
  %57 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %56, i32 0, i32 0
  %58 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %57, i32 0, i32 0
  %59 = load i64*, i64** %58, align 8
  %60 = load i64, i64* %45, align 8
  %61 = getelementptr inbounds i64, i64* %59, i64 %60
  %62 = bitcast %"class.std::vector"* %46 to %"struct.std::_Vector_base"*
  %63 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %62, i32 0, i32 0
  %64 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %63, i32 0, i32 2
  store i64* %61, i64** %64, align 8
  %65 = load i64*, i64** %43, align 8
  %66 = load i64*, i64** %44, align 8
  %67 = bitcast %"class.std::vector"* %46 to %"struct.std::_Vector_base"*
  %68 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %67, i32 0, i32 0
  %69 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %68, i32 0, i32 0
  %70 = load i64*, i64** %69, align 8
  %71 = bitcast %"class.std::vector"* %46 to %"struct.std::_Vector_base"*
  %72 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %71) #3
  %73 = call i64* @_ZSt22__uninitialized_copy_aIPKxPxxET0_T_S4_S3_RSaIT1_E(i64* %65, i64* %66, i64* %70, %"class.std::allocator.1"* dereferenceable(1) %72)
  %74 = bitcast %"class.std::vector"* %46 to %"struct.std::_Vector_base"*
  %75 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %74, i32 0, i32 0
  %76 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %75, i32 0, i32 1
  store i64* %73, i64** %76, align 8
  %77 = load i32, i32* @x.248
  %78 = load i32, i32* @y.249
  %79 = sub i32 0, 1
  %80 = add i32 %77, %79
  %81 = sub i32 %77, 1
  %82 = mul i32 %77, %80
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %78, 10
  %86 = xor i1 %84, true
  %87 = xor i1 %85, true
  %88 = xor i1 false, true
  %89 = and i1 %86, false
  %90 = and i1 %84, %88
  %91 = and i1 %87, false
  %92 = and i1 %85, %88
  %93 = or i1 %89, %90
  %94 = or i1 %91, %92
  %95 = xor i1 %93, %94
  %96 = or i1 %86, %87
  %97 = xor i1 %96, true
  %98 = or i1 false, %88
  %99 = and i1 %97, %98
  %100 = or i1 %95, %99
  %101 = or i1 %84, %85
  %102 = select i1 %100, i32 716259047, i32 1797812845
  store i32 %102, i32* %16
  br label %141

; <label>:103:                                    ; preds = %17
  ret void

; <label>:104:                                    ; preds = %17
  %105 = alloca %"struct.std::forward_iterator_tag", align 1
  %106 = alloca %"class.std::vector"*, align 8
  %107 = alloca i64*, align 8
  %108 = alloca i64*, align 8
  %109 = alloca i64, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %106, align 8
  store i64* %1, i64** %107, align 8
  store i64* %2, i64** %108, align 8
  %110 = load %"class.std::vector"*, %"class.std::vector"** %106, align 8
  %111 = load i64*, i64** %107, align 8
  %112 = load i64*, i64** %108, align 8
  %113 = call i64 @_ZSt8distanceIPKxENSt15iterator_traitsIT_E15difference_typeES3_S3_(i64* %111, i64* %112)
  store i64 %113, i64* %109, align 8
  %114 = bitcast %"class.std::vector"* %110 to %"struct.std::_Vector_base"*
  %115 = load i64, i64* %109, align 8
  %116 = call i64* @_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm(%"struct.std::_Vector_base"* %114, i64 %115)
  %117 = bitcast %"class.std::vector"* %110 to %"struct.std::_Vector_base"*
  %118 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %117, i32 0, i32 0
  %119 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %118, i32 0, i32 0
  store i64* %116, i64** %119, align 8
  %120 = bitcast %"class.std::vector"* %110 to %"struct.std::_Vector_base"*
  %121 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %120, i32 0, i32 0
  %122 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %121, i32 0, i32 0
  %123 = load i64*, i64** %122, align 8
  %124 = load i64, i64* %109, align 8
  %125 = getelementptr inbounds i64, i64* %123, i64 %124
  %126 = bitcast %"class.std::vector"* %110 to %"struct.std::_Vector_base"*
  %127 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %126, i32 0, i32 0
  %128 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %127, i32 0, i32 2
  store i64* %125, i64** %128, align 8
  %129 = load i64*, i64** %107, align 8
  %130 = load i64*, i64** %108, align 8
  %131 = bitcast %"class.std::vector"* %110 to %"struct.std::_Vector_base"*
  %132 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %131, i32 0, i32 0
  %133 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %132, i32 0, i32 0
  %134 = load i64*, i64** %133, align 8
  %135 = bitcast %"class.std::vector"* %110 to %"struct.std::_Vector_base"*
  %136 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %135) #3
  %137 = call i64* @_ZSt22__uninitialized_copy_aIPKxPxxET0_T_S4_S3_RSaIT1_E(i64* %129, i64* %130, i64* %134, %"class.std::allocator.1"* dereferenceable(1) %136)
  %138 = bitcast %"class.std::vector"* %110 to %"struct.std::_Vector_base"*
  %139 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %138, i32 0, i32 0
  %140 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %139, i32 0, i32 1
  store i64* %137, i64** %140, align 8
  store i32 -1403827725, i32* %16
  br label %141

; <label>:141:                                    ; preds = %104, %40, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNKSt16initializer_listIxE5beginEv(%"class.std::initializer_list"*) #4 comdat align 2 {
  %2 = alloca %"class.std::initializer_list"*, align 8
  store %"class.std::initializer_list"* %0, %"class.std::initializer_list"** %2, align 8
  %3 = load %"class.std::initializer_list"*, %"class.std::initializer_list"** %2, align 8
  %4 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %3, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  ret i64* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNKSt16initializer_listIxE3endEv(%"class.std::initializer_list"*) #4 comdat align 2 {
  %2 = alloca %"class.std::initializer_list"*, align 8
  store %"class.std::initializer_list"* %0, %"class.std::initializer_list"** %2, align 8
  %3 = load %"class.std::initializer_list"*, %"class.std::initializer_list"** %2, align 8
  %4 = call i64* @_ZNKSt16initializer_listIxE5beginEv(%"class.std::initializer_list"* %3) #3
  %5 = call i64 @_ZNKSt16initializer_listIxE4sizeEv(%"class.std::initializer_list"* %3) #3
  %6 = getelementptr inbounds i64, i64* %4, i64 %5
  ret i64* %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt12_Vector_baseIxSaIxEE12_Vector_implC2ERKS0_(%"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, %"class.std::allocator.1"* dereferenceable(1)) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, align 8
  %4 = alloca %"class.std::allocator.1"*, align 8
  store %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %0, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %3, align 8
  store %"class.std::allocator.1"* %1, %"class.std::allocator.1"** %4, align 8
  %5 = load %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"*, %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"** %3, align 8
  %6 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %5 to %"class.std::allocator.1"*
  %7 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %4, align 8
  call void @_ZNSaIxEC2ERKS_(%"class.std::allocator.1"* %6, %"class.std::allocator.1"* dereferenceable(1) %7) #3
  %8 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %5, i32 0, i32 0
  store i64* null, i64** %8, align 8
  %9 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %5, i32 0, i32 1
  store i64* null, i64** %9, align 8
  %10 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %5, i32 0, i32 2
  store i64* null, i64** %10, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSaIxEC2ERKS_(%"class.std::allocator.1"*, %"class.std::allocator.1"* dereferenceable(1)) unnamed_addr #4 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.256
  %6 = load i32, i32* @y.257
  %7 = add i32 %5, 159995592
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, 159995592
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -133954313, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %81
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -133954313, label %19
    i32 519107289, label %39
    i32 1193342170, label %73
    i32 -711887616, label %74
  ]

; <label>:18:                                     ; preds = %16
  br label %81

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 519107289, i32 -711887616
  store i32 %38, i32* %15
  br label %81

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::allocator.1"*, align 8
  %41 = alloca %"class.std::allocator.1"*, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %40, align 8
  store %"class.std::allocator.1"* %1, %"class.std::allocator.1"** %41, align 8
  %42 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %40, align 8
  %43 = bitcast %"class.std::allocator.1"* %42 to %"class.__gnu_cxx::new_allocator.2"*
  %44 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %41, align 8
  %45 = bitcast %"class.std::allocator.1"* %44 to %"class.__gnu_cxx::new_allocator.2"*
  call void @_ZN9__gnu_cxx13new_allocatorIxEC2ERKS1_(%"class.__gnu_cxx::new_allocator.2"* %43, %"class.__gnu_cxx::new_allocator.2"* dereferenceable(1) %45) #3
  %46 = load i32, i32* @x.256
  %47 = load i32, i32* @y.257
  %48 = add i32 %46, 265278443
  %49 = sub i32 %48, 1
  %50 = sub i32 %49, 265278443
  %51 = sub i32 %46, 1
  %52 = mul i32 %46, %50
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %47, 10
  %56 = xor i1 %54, true
  %57 = xor i1 %55, true
  %58 = xor i1 true, true
  %59 = and i1 %56, true
  %60 = and i1 %54, %58
  %61 = and i1 %57, true
  %62 = and i1 %55, %58
  %63 = or i1 %59, %60
  %64 = or i1 %61, %62
  %65 = xor i1 %63, %64
  %66 = or i1 %56, %57
  %67 = xor i1 %66, true
  %68 = or i1 true, %58
  %69 = and i1 %67, %68
  %70 = or i1 %65, %69
  %71 = or i1 %54, %55
  %72 = select i1 %70, i32 1193342170, i32 -711887616
  store i32 %72, i32* %15
  br label %81

; <label>:73:                                     ; preds = %16
  ret void

; <label>:74:                                     ; preds = %16
  %75 = alloca %"class.std::allocator.1"*, align 8
  %76 = alloca %"class.std::allocator.1"*, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %75, align 8
  store %"class.std::allocator.1"* %1, %"class.std::allocator.1"** %76, align 8
  %77 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %75, align 8
  %78 = bitcast %"class.std::allocator.1"* %77 to %"class.__gnu_cxx::new_allocator.2"*
  %79 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %76, align 8
  %80 = bitcast %"class.std::allocator.1"* %79 to %"class.__gnu_cxx::new_allocator.2"*
  call void @_ZN9__gnu_cxx13new_allocatorIxEC2ERKS1_(%"class.__gnu_cxx::new_allocator.2"* %78, %"class.__gnu_cxx::new_allocator.2"* dereferenceable(1) %80) #3
  store i32 519107289, i32* %15
  br label %81

; <label>:81:                                     ; preds = %74, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxEC2ERKS1_(%"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"* dereferenceable(1)) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  %4 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %3, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %1, %"class.__gnu_cxx::new_allocator.2"** %4, align 8
  %5 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %3, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZSt8distanceIPKxENSt15iterator_traitsIT_E15difference_typeES3_S3_(i64*, i64*) #0 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca %"struct.std::random_access_iterator_tag", align 1
  %6 = alloca %"struct.std::random_access_iterator_tag", align 1
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  %7 = load i64*, i64** %3, align 8
  %8 = load i64*, i64** %4, align 8
  call void @_ZSt19__iterator_categoryIPKxENSt15iterator_traitsIT_E17iterator_categoryERKS3_(i64** dereferenceable(8) %3)
  %9 = call i64 @_ZSt10__distanceIPKxENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag(i64* %7, i64* %8)
  ret i64 %9
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt22__uninitialized_copy_aIPKxPxxET0_T_S4_S3_RSaIT1_E(i64*, i64*, i64*, %"class.std::allocator.1"* dereferenceable(1)) #0 comdat {
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca %"class.std::allocator.1"*, align 8
  store i64* %0, i64** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  store %"class.std::allocator.1"* %3, %"class.std::allocator.1"** %8, align 8
  %9 = load i64*, i64** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = load i64*, i64** %7, align 8
  %12 = call i64* @_ZSt18uninitialized_copyIPKxPxET0_T_S4_S3_(i64* %9, i64* %10, i64* %11)
  ret i64* %12
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt10__distanceIPKxENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag(i64*, i64*) #4 comdat {
  %3 = alloca %"struct.std::random_access_iterator_tag", align 1
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  %6 = load i64*, i64** %5, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = ptrtoint i64* %6 to i64
  %9 = ptrtoint i64* %7 to i64
  %10 = sub i64 %8, 3879384735663664343
  %11 = sub i64 %10, %9
  %12 = add i64 %11, 3879384735663664343
  %13 = sub i64 %8, %9
  %14 = sdiv exact i64 %12, 8
  ret i64 %14
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt19__iterator_categoryIPKxENSt15iterator_traitsIT_E17iterator_categoryERKS3_(i64** dereferenceable(8)) #4 comdat {
  %2 = alloca %"struct.std::random_access_iterator_tag", align 1
  %3 = alloca i64**, align 8
  store i64** %0, i64*** %3, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt18uninitialized_copyIPKxPxET0_T_S4_S3_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i8, align 1
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  store i8 1, i8* %7, align 1
  %8 = load i64*, i64** %4, align 8
  %9 = load i64*, i64** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call i64* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKxPxEET0_T_S6_S5_(i64* %8, i64* %9, i64* %10)
  ret i64* %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKxPxEET0_T_S6_S5_(i64*, i64*, i64*) #0 comdat align 2 {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load i64*, i64** %4, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = call i64* @_ZSt4copyIPKxPxET0_T_S4_S3_(i64* %7, i64* %8, i64* %9)
  ret i64* %10
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt4copyIPKxPxET0_T_S4_S3_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.272
  %8 = load i32, i32* @y.273
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 1464860683, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %65
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 1464860683, label %20
    i32 -2033768808, label %28
    i32 400970483, label %53
    i32 -1412852728, label %55
  ]

; <label>:19:                                     ; preds = %17
  br label %65

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 -2033768808, i32 -1412852728
  store i32 %27, i32* %16
  br label %65

; <label>:28:                                     ; preds = %17
  %29 = alloca i64*, align 8
  %30 = alloca i64*, align 8
  %31 = alloca i64*, align 8
  store i64* %0, i64** %29, align 8
  store i64* %1, i64** %30, align 8
  store i64* %2, i64** %31, align 8
  %32 = load i64*, i64** %29, align 8
  %33 = call i64* @_ZSt12__miter_baseIPKxENSt11_Miter_baseIT_E13iterator_typeES3_(i64* %32)
  %34 = load i64*, i64** %30, align 8
  %35 = call i64* @_ZSt12__miter_baseIPKxENSt11_Miter_baseIT_E13iterator_typeES3_(i64* %34)
  %36 = load i64*, i64** %31, align 8
  %37 = call i64* @_ZSt14__copy_move_a2ILb0EPKxPxET1_T0_S4_S3_(i64* %33, i64* %35, i64* %36)
  store i64* %37, i64** %4
  %38 = load i32, i32* @x.272
  %39 = load i32, i32* @y.273
  %40 = sub i32 %38, -1679249429
  %41 = sub i32 %40, 1
  %42 = add i32 %41, -1679249429
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = and i1 %46, %47
  %49 = xor i1 %46, %47
  %50 = or i1 %48, %49
  %51 = or i1 %46, %47
  %52 = select i1 %50, i32 400970483, i32 -1412852728
  store i32 %52, i32* %16
  br label %65

; <label>:53:                                     ; preds = %17
  %54 = load volatile i64*, i64** %4
  ret i64* %54

; <label>:55:                                     ; preds = %17
  %56 = alloca i64*, align 8
  %57 = alloca i64*, align 8
  %58 = alloca i64*, align 8
  store i64* %0, i64** %56, align 8
  store i64* %1, i64** %57, align 8
  store i64* %2, i64** %58, align 8
  %59 = load i64*, i64** %56, align 8
  %60 = call i64* @_ZSt12__miter_baseIPKxENSt11_Miter_baseIT_E13iterator_typeES3_(i64* %59)
  %61 = load i64*, i64** %57, align 8
  %62 = call i64* @_ZSt12__miter_baseIPKxENSt11_Miter_baseIT_E13iterator_typeES3_(i64* %61)
  %63 = load i64*, i64** %58, align 8
  %64 = call i64* @_ZSt14__copy_move_a2ILb0EPKxPxET1_T0_S4_S3_(i64* %60, i64* %62, i64* %63)
  store i32 -2033768808, i32* %16
  br label %65

; <label>:65:                                     ; preds = %55, %28, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt14__copy_move_a2ILb0EPKxPxET1_T0_S4_S3_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.274
  %8 = load i32, i32* @y.275
  %9 = sub i32 %7, 1325731364
  %10 = sub i32 %9, 1
  %11 = add i32 %10, 1325731364
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 -65273393, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %79
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -65273393, label %21
    i32 281886644, label %41
    i32 1273385249, label %66
    i32 1821870303, label %68
  ]

; <label>:20:                                     ; preds = %18
  br label %79

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = xor i1 %22, true
  %25 = xor i1 %23, true
  %26 = xor i1 false, true
  %27 = and i1 %24, false
  %28 = and i1 %22, %26
  %29 = and i1 %25, false
  %30 = and i1 %23, %26
  %31 = or i1 %27, %28
  %32 = or i1 %29, %30
  %33 = xor i1 %31, %32
  %34 = or i1 %24, %25
  %35 = xor i1 %34, true
  %36 = or i1 false, %26
  %37 = and i1 %35, %36
  %38 = or i1 %33, %37
  %39 = or i1 %22, %23
  %40 = select i1 %38, i32 281886644, i32 1821870303
  store i32 %40, i32* %17
  br label %79

; <label>:41:                                     ; preds = %18
  %42 = alloca i64*, align 8
  %43 = alloca i64*, align 8
  %44 = alloca i64*, align 8
  store i64* %0, i64** %42, align 8
  store i64* %1, i64** %43, align 8
  store i64* %2, i64** %44, align 8
  %45 = load i64*, i64** %42, align 8
  %46 = call i64* @_ZSt12__niter_baseIPKxENSt11_Niter_baseIT_E13iterator_typeES3_(i64* %45)
  %47 = load i64*, i64** %43, align 8
  %48 = call i64* @_ZSt12__niter_baseIPKxENSt11_Niter_baseIT_E13iterator_typeES3_(i64* %47)
  %49 = load i64*, i64** %44, align 8
  %50 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %49)
  %51 = call i64* @_ZSt13__copy_move_aILb0EPKxPxET1_T0_S4_S3_(i64* %46, i64* %48, i64* %50)
  store i64* %51, i64** %4
  %52 = load i32, i32* @x.274
  %53 = load i32, i32* @y.275
  %54 = sub i32 0, 1
  %55 = add i32 %52, %54
  %56 = sub i32 %52, 1
  %57 = mul i32 %52, %55
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %53, 10
  %61 = and i1 %59, %60
  %62 = xor i1 %59, %60
  %63 = or i1 %61, %62
  %64 = or i1 %59, %60
  %65 = select i1 %63, i32 1273385249, i32 1821870303
  store i32 %65, i32* %17
  br label %79

; <label>:66:                                     ; preds = %18
  %67 = load volatile i64*, i64** %4
  ret i64* %67

; <label>:68:                                     ; preds = %18
  %69 = alloca i64*, align 8
  %70 = alloca i64*, align 8
  %71 = alloca i64*, align 8
  store i64* %0, i64** %69, align 8
  store i64* %1, i64** %70, align 8
  store i64* %2, i64** %71, align 8
  %72 = load i64*, i64** %69, align 8
  %73 = call i64* @_ZSt12__niter_baseIPKxENSt11_Niter_baseIT_E13iterator_typeES3_(i64* %72)
  %74 = load i64*, i64** %70, align 8
  %75 = call i64* @_ZSt12__niter_baseIPKxENSt11_Niter_baseIT_E13iterator_typeES3_(i64* %74)
  %76 = load i64*, i64** %71, align 8
  %77 = call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %76)
  %78 = call i64* @_ZSt13__copy_move_aILb0EPKxPxET1_T0_S4_S3_(i64* %73, i64* %75, i64* %77)
  store i32 281886644, i32* %17
  br label %79

; <label>:79:                                     ; preds = %68, %41, %21, %20
  br label %18
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZSt12__miter_baseIPKxENSt11_Miter_baseIT_E13iterator_typeES3_(i64*) #4 comdat {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.276
  %6 = load i32, i32* @y.277
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -948446154, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %63
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -948446154, label %18
    i32 1999773374, label %38
    i32 2104131490, label %57
    i32 -2038531197, label %59
  ]

; <label>:17:                                     ; preds = %15
  br label %63

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 true, true
  %24 = and i1 %21, true
  %25 = and i1 %19, %23
  %26 = and i1 %22, true
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 true, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 1999773374, i32 -2038531197
  store i32 %37, i32* %14
  br label %63

; <label>:38:                                     ; preds = %15
  %39 = alloca i64*, align 8
  store i64* %0, i64** %39, align 8
  %40 = load i64*, i64** %39, align 8
  %41 = call i64* @_ZNSt10_Iter_baseIPKxLb0EE7_S_baseES1_(i64* %40)
  store i64* %41, i64** %2
  %42 = load i32, i32* @x.276
  %43 = load i32, i32* @y.277
  %44 = sub i32 %42, -1936456531
  %45 = sub i32 %44, 1
  %46 = add i32 %45, -1936456531
  %47 = sub i32 %42, 1
  %48 = mul i32 %42, %46
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %43, 10
  %52 = and i1 %50, %51
  %53 = xor i1 %50, %51
  %54 = or i1 %52, %53
  %55 = or i1 %50, %51
  %56 = select i1 %54, i32 2104131490, i32 -2038531197
  store i32 %56, i32* %14
  br label %63

; <label>:57:                                     ; preds = %15
  %58 = load volatile i64*, i64** %2
  ret i64* %58

; <label>:59:                                     ; preds = %15
  %60 = alloca i64*, align 8
  store i64* %0, i64** %60, align 8
  %61 = load i64*, i64** %60, align 8
  %62 = call i64* @_ZNSt10_Iter_baseIPKxLb0EE7_S_baseES1_(i64* %61)
  store i32 1999773374, i32* %14
  br label %63

; <label>:63:                                     ; preds = %59, %38, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt13__copy_move_aILb0EPKxPxET1_T0_S4_S3_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i8, align 1
  store i64* %0, i64** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  store i8 1, i8* %7, align 1
  %8 = load i64*, i64** %4, align 8
  %9 = load i64*, i64** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call i64* @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_(i64* %8, i64* %9, i64* %10)
  ret i64* %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__niter_baseIPKxENSt11_Niter_baseIT_E13iterator_typeES3_(i64*) #0 comdat {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.280
  %6 = load i32, i32* @y.281
  %7 = add i32 %5, 944680461
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, 944680461
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1233899487, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %64
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1233899487, label %19
    i32 -802735876, label %27
    i32 895306617, label %58
    i32 -1964810346, label %60
  ]

; <label>:18:                                     ; preds = %16
  br label %64

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -802735876, i32 -1964810346
  store i32 %26, i32* %15
  br label %64

; <label>:27:                                     ; preds = %16
  %28 = alloca i64*, align 8
  store i64* %0, i64** %28, align 8
  %29 = load i64*, i64** %28, align 8
  %30 = call i64* @_ZNSt10_Iter_baseIPKxLb0EE7_S_baseES1_(i64* %29)
  store i64* %30, i64** %2
  %31 = load i32, i32* @x.280
  %32 = load i32, i32* @y.281
  %33 = add i32 %31, -1955328254
  %34 = sub i32 %33, 1
  %35 = sub i32 %34, -1955328254
  %36 = sub i32 %31, 1
  %37 = mul i32 %31, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %32, 10
  %41 = xor i1 %39, true
  %42 = xor i1 %40, true
  %43 = xor i1 false, true
  %44 = and i1 %41, false
  %45 = and i1 %39, %43
  %46 = and i1 %42, false
  %47 = and i1 %40, %43
  %48 = or i1 %44, %45
  %49 = or i1 %46, %47
  %50 = xor i1 %48, %49
  %51 = or i1 %41, %42
  %52 = xor i1 %51, true
  %53 = or i1 false, %43
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = or i1 %39, %40
  %57 = select i1 %55, i32 895306617, i32 -1964810346
  store i32 %57, i32* %15
  br label %64

; <label>:58:                                     ; preds = %16
  %59 = load volatile i64*, i64** %2
  ret i64* %59

; <label>:60:                                     ; preds = %16
  %61 = alloca i64*, align 8
  store i64* %0, i64** %61, align 8
  %62 = load i64*, i64** %61, align 8
  %63 = call i64* @_ZNSt10_Iter_baseIPKxLb0EE7_S_baseES1_(i64* %62)
  store i32 -802735876, i32* %15
  br label %64

; <label>:64:                                     ; preds = %60, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIxEEPT_PKS3_S6_S4_(i64*, i64*, i64*) #4 comdat align 2 {
  %4 = alloca i64
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  store i64* %0, i64** %5, align 8
  store i64* %1, i64** %6, align 8
  store i64* %2, i64** %7, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64*, i64** %5, align 8
  %11 = ptrtoint i64* %9 to i64
  %12 = ptrtoint i64* %10 to i64
  %13 = add i64 %11, 6238489442240379127
  %14 = sub i64 %13, %12
  %15 = sub i64 %14, 6238489442240379127
  %16 = sub i64 %11, %12
  %17 = sdiv exact i64 %15, 8
  store i64 %17, i64* %8, align 8
  %18 = load i64, i64* %8, align 8
  store i64 %18, i64* %4
  %19 = alloca i32
  store i32 1949242703, i32* %19
  br label %20

; <label>:20:                                     ; preds = %3, %38
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 1949242703, label %23
    i32 621096831, label %27
    i32 -637096257, label %34
  ]

; <label>:22:                                     ; preds = %20
  br label %38

; <label>:23:                                     ; preds = %20
  %24 = load volatile i64, i64* %4
  %25 = icmp ne i64 %24, 0
  %26 = select i1 %25, i32 621096831, i32 -637096257
  store i32 %26, i32* %19
  br label %38

; <label>:27:                                     ; preds = %20
  %28 = load i64*, i64** %7, align 8
  %29 = bitcast i64* %28 to i8*
  %30 = load i64*, i64** %5, align 8
  %31 = bitcast i64* %30 to i8*
  %32 = load i64, i64* %8, align 8
  %33 = mul i64 8, %32
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %29, i8* %31, i64 %33, i32 8, i1 false)
  store i32 -637096257, i32* %19
  br label %38

; <label>:34:                                     ; preds = %20
  %35 = load i64*, i64** %7, align 8
  %36 = load i64, i64* %8, align 8
  %37 = getelementptr inbounds i64, i64* %35, i64 %36
  ret i64* %37

; <label>:38:                                     ; preds = %27, %23, %22
  br label %20
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseIPKxLb0EE7_S_baseES1_(i64*) #4 comdat align 2 {
  %2 = alloca i64*, align 8
  store i64* %0, i64** %2, align 8
  %3 = load i64*, i64** %2, align 8
  ret i64* %3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt16initializer_listIxE4sizeEv(%"class.std::initializer_list"*) #4 comdat align 2 {
  %2 = alloca i64
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.286
  %6 = load i32, i32* @y.287
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 1953503957, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %65
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 1953503957, label %18
    i32 -1919334430, label %38
    i32 409311987, label %58
    i32 181768405, label %60
  ]

; <label>:17:                                     ; preds = %15
  br label %65

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 true, true
  %24 = and i1 %21, true
  %25 = and i1 %19, %23
  %26 = and i1 %22, true
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 true, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 -1919334430, i32 181768405
  store i32 %37, i32* %14
  br label %65

; <label>:38:                                     ; preds = %15
  %39 = alloca %"class.std::initializer_list"*, align 8
  store %"class.std::initializer_list"* %0, %"class.std::initializer_list"** %39, align 8
  %40 = load %"class.std::initializer_list"*, %"class.std::initializer_list"** %39, align 8
  %41 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %40, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %2
  %43 = load i32, i32* @x.286
  %44 = load i32, i32* @y.287
  %45 = sub i32 %43, 830243701
  %46 = sub i32 %45, 1
  %47 = add i32 %46, 830243701
  %48 = sub i32 %43, 1
  %49 = mul i32 %43, %47
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %44, 10
  %53 = and i1 %51, %52
  %54 = xor i1 %51, %52
  %55 = or i1 %53, %54
  %56 = or i1 %51, %52
  %57 = select i1 %55, i32 409311987, i32 181768405
  store i32 %57, i32* %14
  br label %65

; <label>:58:                                     ; preds = %15
  %59 = load volatile i64, i64* %2
  ret i64 %59

; <label>:60:                                     ; preds = %15
  %61 = alloca %"class.std::initializer_list"*, align 8
  store %"class.std::initializer_list"* %0, %"class.std::initializer_list"** %61, align 8
  %62 = load %"class.std::initializer_list"*, %"class.std::initializer_list"** %61, align 8
  %63 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %62, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  store i32 -1919334430, i32* %14
  br label %65

; <label>:65:                                     ; preds = %60, %38, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorI4shopSaIS0_EE12emplace_backIJS0_EEEvDpOT_(%"class.std::vector.4"*, %struct.shop* dereferenceable(16)) #0 comdat align 2 {
  %3 = alloca %struct.shop*
  %4 = alloca %struct.shop*
  %5 = alloca %"class.std::vector.4"*
  %6 = alloca %"class.std::vector.4"*, align 8
  %7 = alloca %struct.shop*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %6, align 8
  store %struct.shop* %1, %struct.shop** %7, align 8
  %8 = load %"class.std::vector.4"*, %"class.std::vector.4"** %6, align 8
  store %"class.std::vector.4"* %8, %"class.std::vector.4"** %5
  %9 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %5
  %10 = bitcast %"class.std::vector.4"* %9 to %"struct.std::_Vector_base.5"*
  %11 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %10, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %11, i32 0, i32 1
  %13 = load %struct.shop*, %struct.shop** %12, align 8
  store %struct.shop* %13, %struct.shop** %4
  %14 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %5
  %15 = bitcast %"class.std::vector.4"* %14 to %"struct.std::_Vector_base.5"*
  %16 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %15, i32 0, i32 0
  %17 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %16, i32 0, i32 2
  %18 = load %struct.shop*, %struct.shop** %17, align 8
  store %struct.shop* %18, %struct.shop** %3
  %19 = alloca i32
  store i32 461529641, i32* %19
  br label %20

; <label>:20:                                     ; preds = %2, %98
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 461529641, label %23
    i32 -1767697108, label %28
    i32 1191960359, label %46
    i32 1592127550, label %73
    i32 2030611439, label %92
    i32 -290263808, label %93
    i32 -1610949106, label %94
  ]

; <label>:22:                                     ; preds = %20
  br label %98

; <label>:23:                                     ; preds = %20
  %24 = load volatile %struct.shop*, %struct.shop** %4
  %25 = load volatile %struct.shop*, %struct.shop** %3
  %26 = icmp ne %struct.shop* %24, %25
  %27 = select i1 %26, i32 -1767697108, i32 1191960359
  store i32 %27, i32* %19
  br label %98

; <label>:28:                                     ; preds = %20
  %29 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %5
  %30 = bitcast %"class.std::vector.4"* %29 to %"struct.std::_Vector_base.5"*
  %31 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %30, i32 0, i32 0
  %32 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %31 to %"class.std::allocator.6"*
  %33 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %5
  %34 = bitcast %"class.std::vector.4"* %33 to %"struct.std::_Vector_base.5"*
  %35 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %34, i32 0, i32 0
  %36 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %35, i32 0, i32 1
  %37 = load %struct.shop*, %struct.shop** %36, align 8
  %38 = load %struct.shop*, %struct.shop** %7, align 8
  %39 = call dereferenceable(16) %struct.shop* @_ZSt7forwardI4shopEOT_RNSt16remove_referenceIS1_E4typeE(%struct.shop* dereferenceable(16) %38) #3
  call void @_ZNSt16allocator_traitsISaI4shopEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_(%"class.std::allocator.6"* dereferenceable(1) %32, %struct.shop* %37, %struct.shop* dereferenceable(16) %39)
  %40 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %5
  %41 = bitcast %"class.std::vector.4"* %40 to %"struct.std::_Vector_base.5"*
  %42 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %41, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %42, i32 0, i32 1
  %44 = load %struct.shop*, %struct.shop** %43, align 8
  %45 = getelementptr inbounds %struct.shop, %struct.shop* %44, i32 1
  store %struct.shop* %45, %struct.shop** %43, align 8
  store i32 -290263808, i32* %19
  br label %98

; <label>:46:                                     ; preds = %20
  %47 = load i32, i32* @x.288
  %48 = load i32, i32* @y.289
  %49 = sub i32 0, 1
  %50 = add i32 %47, %49
  %51 = sub i32 %47, 1
  %52 = mul i32 %47, %50
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %48, 10
  %56 = xor i1 %54, true
  %57 = xor i1 %55, true
  %58 = xor i1 false, true
  %59 = and i1 %56, false
  %60 = and i1 %54, %58
  %61 = and i1 %57, false
  %62 = and i1 %55, %58
  %63 = or i1 %59, %60
  %64 = or i1 %61, %62
  %65 = xor i1 %63, %64
  %66 = or i1 %56, %57
  %67 = xor i1 %66, true
  %68 = or i1 false, %58
  %69 = and i1 %67, %68
  %70 = or i1 %65, %69
  %71 = or i1 %54, %55
  %72 = select i1 %70, i32 1592127550, i32 -1610949106
  store i32 %72, i32* %19
  br label %98

; <label>:73:                                     ; preds = %20
  %74 = load %struct.shop*, %struct.shop** %7, align 8
  %75 = call dereferenceable(16) %struct.shop* @_ZSt7forwardI4shopEOT_RNSt16remove_referenceIS1_E4typeE(%struct.shop* dereferenceable(16) %74) #3
  %76 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %5
  call void @_ZNSt6vectorI4shopSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_(%"class.std::vector.4"* %76, %struct.shop* dereferenceable(16) %75)
  %77 = load i32, i32* @x.288
  %78 = load i32, i32* @y.289
  %79 = add i32 %77, 1722016899
  %80 = sub i32 %79, 1
  %81 = sub i32 %80, 1722016899
  %82 = sub i32 %77, 1
  %83 = mul i32 %77, %81
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %78, 10
  %87 = and i1 %85, %86
  %88 = xor i1 %85, %86
  %89 = or i1 %87, %88
  %90 = or i1 %85, %86
  %91 = select i1 %89, i32 2030611439, i32 -1610949106
  store i32 %91, i32* %19
  br label %98

; <label>:92:                                     ; preds = %20
  store i32 -290263808, i32* %19
  br label %98

; <label>:93:                                     ; preds = %20
  ret void

; <label>:94:                                     ; preds = %20
  %95 = load %struct.shop*, %struct.shop** %7, align 8
  %96 = call dereferenceable(16) %struct.shop* @_ZSt7forwardI4shopEOT_RNSt16remove_referenceIS1_E4typeE(%struct.shop* dereferenceable(16) %95) #3
  %97 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %5
  call void @_ZNSt6vectorI4shopSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_(%"class.std::vector.4"* %97, %struct.shop* dereferenceable(16) %96)
  store i32 1592127550, i32* %19
  br label %98

; <label>:98:                                     ; preds = %94, %92, %73, %46, %28, %23, %22
  br label %20
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16)) #4 comdat {
  %2 = alloca %struct.shop*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.290
  %6 = load i32, i32* @y.291
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 -178327305, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %61
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -178327305, label %18
    i32 -2070610304, label %38
    i32 -1073121438, label %56
    i32 -1859632630, label %58
  ]

; <label>:17:                                     ; preds = %15
  br label %61

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 true, true
  %24 = and i1 %21, true
  %25 = and i1 %19, %23
  %26 = and i1 %22, true
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 true, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 -2070610304, i32 -1859632630
  store i32 %37, i32* %14
  br label %61

; <label>:38:                                     ; preds = %15
  %39 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %39, align 8
  %40 = load %struct.shop*, %struct.shop** %39, align 8
  store %struct.shop* %40, %struct.shop** %2
  %41 = load i32, i32* @x.290
  %42 = load i32, i32* @y.291
  %43 = sub i32 %41, -722008867
  %44 = sub i32 %43, 1
  %45 = add i32 %44, -722008867
  %46 = sub i32 %41, 1
  %47 = mul i32 %41, %45
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %42, 10
  %51 = and i1 %49, %50
  %52 = xor i1 %49, %50
  %53 = or i1 %51, %52
  %54 = or i1 %49, %50
  %55 = select i1 %53, i32 -1073121438, i32 -1859632630
  store i32 %55, i32* %14
  br label %61

; <label>:56:                                     ; preds = %15
  %57 = load volatile %struct.shop*, %struct.shop** %2
  ret %struct.shop* %57

; <label>:58:                                     ; preds = %15
  %59 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %59, align 8
  %60 = load %struct.shop*, %struct.shop** %59, align 8
  store i32 -2070610304, i32* %14
  br label %61

; <label>:61:                                     ; preds = %58, %38, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaI4shopEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_(%"class.std::allocator.6"* dereferenceable(1), %struct.shop*, %struct.shop* dereferenceable(16)) #0 comdat align 2 {
  %4 = alloca %"class.std::allocator.6"*, align 8
  %5 = alloca %struct.shop*, align 8
  %6 = alloca %struct.shop*, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %4, align 8
  store %struct.shop* %1, %struct.shop** %5, align 8
  store %struct.shop* %2, %struct.shop** %6, align 8
  %7 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %4, align 8
  %8 = bitcast %"class.std::allocator.6"* %7 to %"class.__gnu_cxx::new_allocator.7"*
  %9 = load %struct.shop*, %struct.shop** %5, align 8
  %10 = load %struct.shop*, %struct.shop** %6, align 8
  %11 = call dereferenceable(16) %struct.shop* @_ZSt7forwardI4shopEOT_RNSt16remove_referenceIS1_E4typeE(%struct.shop* dereferenceable(16) %10) #3
  call void @_ZN9__gnu_cxx13new_allocatorI4shopE9constructIS1_JS1_EEEvPT_DpOT0_(%"class.__gnu_cxx::new_allocator.7"* %8, %struct.shop* %9, %struct.shop* dereferenceable(16) %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(16) %struct.shop* @_ZSt7forwardI4shopEOT_RNSt16remove_referenceIS1_E4typeE(%struct.shop* dereferenceable(16)) #4 comdat {
  %2 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %2, align 8
  %3 = load %struct.shop*, %struct.shop** %2, align 8
  ret %struct.shop* %3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorI4shopSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_(%"class.std::vector.4"*, %struct.shop* dereferenceable(16)) #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::vector.4"*, align 8
  %4 = alloca %struct.shop*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.shop*, align 8
  %7 = alloca %struct.shop*, align 8
  %8 = alloca i8*
  %9 = alloca i32
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %3, align 8
  store %struct.shop* %1, %struct.shop** %4, align 8
  %10 = load %"class.std::vector.4"*, %"class.std::vector.4"** %3, align 8
  %11 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE12_M_check_lenEmPKc(%"class.std::vector.4"* %10, i64 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i32 0, i32 0))
  store i64 %11, i64* %5, align 8
  %12 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %13 = load i64, i64* %5, align 8
  %14 = call %struct.shop* @_ZNSt12_Vector_baseI4shopSaIS0_EE11_M_allocateEm(%"struct.std::_Vector_base.5"* %12, i64 %13)
  store %struct.shop* %14, %struct.shop** %6, align 8
  %15 = load %struct.shop*, %struct.shop** %6, align 8
  store %struct.shop* %15, %struct.shop** %7, align 8
  %16 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %17 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %16, i32 0, i32 0
  %18 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %17 to %"class.std::allocator.6"*
  %19 = load %struct.shop*, %struct.shop** %6, align 8
  %20 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %10) #3
  %21 = getelementptr inbounds %struct.shop, %struct.shop* %19, i64 %20
  %22 = load %struct.shop*, %struct.shop** %4, align 8
  %23 = call dereferenceable(16) %struct.shop* @_ZSt7forwardI4shopEOT_RNSt16remove_referenceIS1_E4typeE(%struct.shop* dereferenceable(16) %22) #3
  invoke void @_ZNSt16allocator_traitsISaI4shopEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_(%"class.std::allocator.6"* dereferenceable(1) %18, %struct.shop* %21, %struct.shop* dereferenceable(16) %23)
          to label %24 unwind label %82

; <label>:24:                                     ; preds = %2
  store %struct.shop* null, %struct.shop** %7, align 8
  %25 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %26 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %25, i32 0, i32 0
  %27 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %26, i32 0, i32 0
  %28 = load %struct.shop*, %struct.shop** %27, align 8
  %29 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %30 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %29, i32 0, i32 0
  %31 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %30, i32 0, i32 1
  %32 = load %struct.shop*, %struct.shop** %31, align 8
  %33 = load %struct.shop*, %struct.shop** %6, align 8
  %34 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %35 = call dereferenceable(1) %"class.std::allocator.6"* @_ZNSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"* %34) #3
  %36 = invoke %struct.shop* @_ZSt34__uninitialized_move_if_noexcept_aIP4shopS1_SaIS0_EET0_T_S4_S3_RT1_(%struct.shop* %28, %struct.shop* %32, %struct.shop* %33, %"class.std::allocator.6"* dereferenceable(1) %35)
          to label %37 unwind label %82

; <label>:37:                                     ; preds = %24
  %38 = load i32, i32* @x.296
  %39 = load i32, i32* @y.297
  %40 = sub i32 %38, 1228345546
  %41 = sub i32 %40, 1
  %42 = add i32 %41, 1228345546
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 false, true
  %51 = and i1 %48, false
  %52 = and i1 %46, %50
  %53 = and i1 %49, false
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 false, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  br i1 %62, label %64, label %365

; <label>:64:                                     ; preds = %37, %365
  store %struct.shop* %36, %struct.shop** %7, align 8
  %65 = load %struct.shop*, %struct.shop** %7, align 8
  %66 = getelementptr inbounds %struct.shop, %struct.shop* %65, i32 1
  store %struct.shop* %66, %struct.shop** %7, align 8
  %67 = load i32, i32* @x.296
  %68 = load i32, i32* @y.297
  %69 = add i32 %67, 1107373724
  %70 = sub i32 %69, 1
  %71 = sub i32 %70, 1107373724
  %72 = sub i32 %67, 1
  %73 = mul i32 %67, %71
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %68, 10
  %77 = and i1 %75, %76
  %78 = xor i1 %75, %76
  %79 = or i1 %77, %78
  %80 = or i1 %75, %76
  br i1 %79, label %81, label %365

; <label>:81:                                     ; preds = %64
  br label %239

; <label>:82:                                     ; preds = %24, %2
  %83 = landingpad { i8*, i32 }
          catch i8* null
  %84 = extractvalue { i8*, i32 } %83, 0
  store i8* %84, i8** %8, align 8
  %85 = extractvalue { i8*, i32 } %83, 1
  store i32 %85, i32* %9, align 4
  br label %86

; <label>:86:                                     ; preds = %82
  %87 = load i8*, i8** %8, align 8
  %88 = call i8* @__cxa_begin_catch(i8* %87) #3
  %89 = load %struct.shop*, %struct.shop** %7, align 8
  %90 = icmp ne %struct.shop* %89, null
  br i1 %90, label %133, label %91

; <label>:91:                                     ; preds = %86
  %92 = load i32, i32* @x.296
  %93 = load i32, i32* @y.297
  %94 = add i32 %92, -480755562
  %95 = sub i32 %94, 1
  %96 = sub i32 %95, -480755562
  %97 = sub i32 %92, 1
  %98 = mul i32 %92, %96
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %93, 10
  %102 = and i1 %100, %101
  %103 = xor i1 %100, %101
  %104 = or i1 %102, %103
  %105 = or i1 %100, %101
  br i1 %104, label %106, label %368

; <label>:106:                                    ; preds = %91, %368
  %107 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %108 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %107, i32 0, i32 0
  %109 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %108 to %"class.std::allocator.6"*
  %110 = load %struct.shop*, %struct.shop** %6, align 8
  %111 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %10) #3
  %112 = getelementptr inbounds %struct.shop, %struct.shop* %110, i64 %111
  %113 = load i32, i32* @x.296
  %114 = load i32, i32* @y.297
  %115 = add i32 %113, 715996094
  %116 = sub i32 %115, 1
  %117 = sub i32 %116, 715996094
  %118 = sub i32 %113, 1
  %119 = mul i32 %113, %117
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %114, 10
  %123 = and i1 %121, %122
  %124 = xor i1 %121, %122
  %125 = or i1 %123, %124
  %126 = or i1 %121, %122
  br i1 %125, label %127, label %368

; <label>:127:                                    ; preds = %106
  invoke void @_ZNSt16allocator_traitsISaI4shopEE7destroyIS0_EEvRS1_PT_(%"class.std::allocator.6"* dereferenceable(1) %109, %struct.shop* %112)
          to label %128 unwind label %129

; <label>:128:                                    ; preds = %127
  br label %139

; <label>:129:                                    ; preds = %184, %139, %133, %127
  %130 = landingpad { i8*, i32 }
          cleanup
  %131 = extractvalue { i8*, i32 } %130, 0
  store i8* %131, i8** %8, align 8
  %132 = extractvalue { i8*, i32 } %130, 1
  store i32 %132, i32* %9, align 4
  invoke void @__cxa_end_catch()
          to label %185 unwind label %331

; <label>:133:                                    ; preds = %86
  %134 = load %struct.shop*, %struct.shop** %6, align 8
  %135 = load %struct.shop*, %struct.shop** %7, align 8
  %136 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %137 = call dereferenceable(1) %"class.std::allocator.6"* @_ZNSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"* %136) #3
  invoke void @_ZSt8_DestroyIP4shopS0_EvT_S2_RSaIT0_E(%struct.shop* %134, %struct.shop* %135, %"class.std::allocator.6"* dereferenceable(1) %137)
          to label %138 unwind label %129

; <label>:138:                                    ; preds = %133
  br label %139

; <label>:139:                                    ; preds = %138, %128
  %140 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %141 = load %struct.shop*, %struct.shop** %6, align 8
  %142 = load i64, i64* %5, align 8
  invoke void @_ZNSt12_Vector_baseI4shopSaIS0_EE13_M_deallocateEPS0_m(%"struct.std::_Vector_base.5"* %140, %struct.shop* %141, i64 %142)
          to label %143 unwind label %129

; <label>:143:                                    ; preds = %139
  %144 = load i32, i32* @x.296
  %145 = load i32, i32* @y.297
  %146 = sub i32 0, 1
  %147 = add i32 %144, %146
  %148 = sub i32 %144, 1
  %149 = mul i32 %144, %147
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %145, 10
  %153 = and i1 %151, %152
  %154 = xor i1 %151, %152
  %155 = or i1 %153, %154
  %156 = or i1 %151, %152
  br i1 %155, label %157, label %375

; <label>:157:                                    ; preds = %143, %375
  %158 = load i32, i32* @x.296
  %159 = load i32, i32* @y.297
  %160 = add i32 %158, -1321404863
  %161 = sub i32 %160, 1
  %162 = sub i32 %161, -1321404863
  %163 = sub i32 %158, 1
  %164 = mul i32 %158, %162
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %159, 10
  %168 = xor i1 %166, true
  %169 = xor i1 %167, true
  %170 = xor i1 true, true
  %171 = and i1 %168, true
  %172 = and i1 %166, %170
  %173 = and i1 %169, true
  %174 = and i1 %167, %170
  %175 = or i1 %171, %172
  %176 = or i1 %173, %174
  %177 = xor i1 %175, %176
  %178 = or i1 %168, %169
  %179 = xor i1 %178, true
  %180 = or i1 true, %170
  %181 = and i1 %179, %180
  %182 = or i1 %177, %181
  %183 = or i1 %166, %167
  br i1 %182, label %184, label %375

; <label>:184:                                    ; preds = %157
  invoke void @__cxa_rethrow() #14
          to label %334 unwind label %129

; <label>:185:                                    ; preds = %129
  %186 = load i32, i32* @x.296
  %187 = load i32, i32* @y.297
  %188 = sub i32 0, 1
  %189 = add i32 %186, %188
  %190 = sub i32 %186, 1
  %191 = mul i32 %186, %189
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %187, 10
  %195 = xor i1 %193, true
  %196 = xor i1 %194, true
  %197 = xor i1 false, true
  %198 = and i1 %195, false
  %199 = and i1 %193, %197
  %200 = and i1 %196, false
  %201 = and i1 %194, %197
  %202 = or i1 %198, %199
  %203 = or i1 %200, %201
  %204 = xor i1 %202, %203
  %205 = or i1 %195, %196
  %206 = xor i1 %205, true
  %207 = or i1 false, %197
  %208 = and i1 %206, %207
  %209 = or i1 %204, %208
  %210 = or i1 %193, %194
  br i1 %209, label %211, label %376

; <label>:211:                                    ; preds = %185, %376
  %212 = load i32, i32* @x.296
  %213 = load i32, i32* @y.297
  %214 = sub i32 %212, 529855052
  %215 = sub i32 %214, 1
  %216 = add i32 %215, 529855052
  %217 = sub i32 %212, 1
  %218 = mul i32 %212, %216
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %213, 10
  %222 = xor i1 %220, true
  %223 = xor i1 %221, true
  %224 = xor i1 false, true
  %225 = and i1 %222, false
  %226 = and i1 %220, %224
  %227 = and i1 %223, false
  %228 = and i1 %221, %224
  %229 = or i1 %225, %226
  %230 = or i1 %227, %228
  %231 = xor i1 %229, %230
  %232 = or i1 %222, %223
  %233 = xor i1 %232, true
  %234 = or i1 false, %224
  %235 = and i1 %233, %234
  %236 = or i1 %231, %235
  %237 = or i1 %220, %221
  br i1 %236, label %238, label %376

; <label>:238:                                    ; preds = %211
  br label %326

; <label>:239:                                    ; preds = %81
  %240 = load i32, i32* @x.296
  %241 = load i32, i32* @y.297
  %242 = add i32 %240, 1751278058
  %243 = sub i32 %242, 1
  %244 = sub i32 %243, 1751278058
  %245 = sub i32 %240, 1
  %246 = mul i32 %240, %244
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %241, 10
  %250 = xor i1 %248, true
  %251 = xor i1 %249, true
  %252 = xor i1 false, true
  %253 = and i1 %250, false
  %254 = and i1 %248, %252
  %255 = and i1 %251, false
  %256 = and i1 %249, %252
  %257 = or i1 %253, %254
  %258 = or i1 %255, %256
  %259 = xor i1 %257, %258
  %260 = or i1 %250, %251
  %261 = xor i1 %260, true
  %262 = or i1 false, %252
  %263 = and i1 %261, %262
  %264 = or i1 %259, %263
  %265 = or i1 %248, %249
  br i1 %264, label %266, label %377

; <label>:266:                                    ; preds = %239, %377
  %267 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %268 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %267, i32 0, i32 0
  %269 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %268, i32 0, i32 0
  %270 = load %struct.shop*, %struct.shop** %269, align 8
  %271 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %272 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %271, i32 0, i32 0
  %273 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %272, i32 0, i32 1
  %274 = load %struct.shop*, %struct.shop** %273, align 8
  %275 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %276 = call dereferenceable(1) %"class.std::allocator.6"* @_ZNSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"* %275) #3
  call void @_ZSt8_DestroyIP4shopS0_EvT_S2_RSaIT0_E(%struct.shop* %270, %struct.shop* %274, %"class.std::allocator.6"* dereferenceable(1) %276)
  %277 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %278 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %279 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %278, i32 0, i32 0
  %280 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %279, i32 0, i32 0
  %281 = load %struct.shop*, %struct.shop** %280, align 8
  %282 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %283 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %282, i32 0, i32 0
  %284 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %283, i32 0, i32 2
  %285 = load %struct.shop*, %struct.shop** %284, align 8
  %286 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %287 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %286, i32 0, i32 0
  %288 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %287, i32 0, i32 0
  %289 = load %struct.shop*, %struct.shop** %288, align 8
  %290 = ptrtoint %struct.shop* %285 to i64
  %291 = ptrtoint %struct.shop* %289 to i64
  %292 = sub i64 %290, -8964202948857367815
  %293 = sub i64 %292, %291
  %294 = add i64 %293, -8964202948857367815
  %295 = sub i64 %290, %291
  %296 = sdiv exact i64 %294, 16
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EE13_M_deallocateEPS0_m(%"struct.std::_Vector_base.5"* %277, %struct.shop* %281, i64 %296)
  %297 = load %struct.shop*, %struct.shop** %6, align 8
  %298 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %299 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %298, i32 0, i32 0
  %300 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %299, i32 0, i32 0
  store %struct.shop* %297, %struct.shop** %300, align 8
  %301 = load %struct.shop*, %struct.shop** %7, align 8
  %302 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %303 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %302, i32 0, i32 0
  %304 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %303, i32 0, i32 1
  store %struct.shop* %301, %struct.shop** %304, align 8
  %305 = load %struct.shop*, %struct.shop** %6, align 8
  %306 = load i64, i64* %5, align 8
  %307 = getelementptr inbounds %struct.shop, %struct.shop* %305, i64 %306
  %308 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %309 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %308, i32 0, i32 0
  %310 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %309, i32 0, i32 2
  store %struct.shop* %307, %struct.shop** %310, align 8
  %311 = load i32, i32* @x.296
  %312 = load i32, i32* @y.297
  %313 = sub i32 %311, -1726633188
  %314 = sub i32 %313, 1
  %315 = add i32 %314, -1726633188
  %316 = sub i32 %311, 1
  %317 = mul i32 %311, %315
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %312, 10
  %321 = and i1 %319, %320
  %322 = xor i1 %319, %320
  %323 = or i1 %321, %322
  %324 = or i1 %319, %320
  br i1 %323, label %325, label %377

; <label>:325:                                    ; preds = %266
  ret void

; <label>:326:                                    ; preds = %238
  %327 = load i8*, i8** %8, align 8
  %328 = load i32, i32* %9, align 4
  %329 = insertvalue { i8*, i32 } undef, i8* %327, 0
  %330 = insertvalue { i8*, i32 } %329, i32 %328, 1
  resume { i8*, i32 } %330

; <label>:331:                                    ; preds = %129
  %332 = landingpad { i8*, i32 }
          catch i8* null
  %333 = extractvalue { i8*, i32 } %332, 0
  call void @__clang_call_terminate(i8* %333) #13
  unreachable

; <label>:334:                                    ; preds = %184
  %335 = load i32, i32* @x.296
  %336 = load i32, i32* @y.297
  %337 = add i32 %335, 1333295546
  %338 = sub i32 %337, 1
  %339 = sub i32 %338, 1333295546
  %340 = sub i32 %335, 1
  %341 = mul i32 %335, %339
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %336, 10
  %345 = and i1 %343, %344
  %346 = xor i1 %343, %344
  %347 = or i1 %345, %346
  %348 = or i1 %343, %344
  br i1 %347, label %349, label %500

; <label>:349:                                    ; preds = %334, %500
  %350 = load i32, i32* @x.296
  %351 = load i32, i32* @y.297
  %352 = sub i32 %350, -560203218
  %353 = sub i32 %352, 1
  %354 = add i32 %353, -560203218
  %355 = sub i32 %350, 1
  %356 = mul i32 %350, %354
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %351, 10
  %360 = and i1 %358, %359
  %361 = xor i1 %358, %359
  %362 = or i1 %360, %361
  %363 = or i1 %358, %359
  br i1 %362, label %364, label %500

; <label>:364:                                    ; preds = %349
  unreachable

; <label>:365:                                    ; preds = %64, %37
  store %struct.shop* %36, %struct.shop** %7, align 8
  %366 = load %struct.shop*, %struct.shop** %7, align 8
  %367 = getelementptr inbounds %struct.shop, %struct.shop* %366, i32 1
  store %struct.shop* %367, %struct.shop** %7, align 8
  br label %64

; <label>:368:                                    ; preds = %106, %91
  %369 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %370 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %369, i32 0, i32 0
  %371 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %370 to %"class.std::allocator.6"*
  %372 = load %struct.shop*, %struct.shop** %6, align 8
  %373 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %10) #3
  %374 = getelementptr inbounds %struct.shop, %struct.shop* %372, i64 %373
  br label %106

; <label>:375:                                    ; preds = %157, %143
  br label %157

; <label>:376:                                    ; preds = %211, %185
  br label %211

; <label>:377:                                    ; preds = %266, %239
  %378 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %379 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %378, i32 0, i32 0
  %380 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %379, i32 0, i32 0
  %381 = load %struct.shop*, %struct.shop** %380, align 8
  %382 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %383 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %382, i32 0, i32 0
  %384 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %383, i32 0, i32 1
  %385 = load %struct.shop*, %struct.shop** %384, align 8
  %386 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %387 = call dereferenceable(1) %"class.std::allocator.6"* @_ZNSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"* %386) #3
  call void @_ZSt8_DestroyIP4shopS0_EvT_S2_RSaIT0_E(%struct.shop* %381, %struct.shop* %385, %"class.std::allocator.6"* dereferenceable(1) %387)
  %388 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %389 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %390 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %389, i32 0, i32 0
  %391 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %390, i32 0, i32 0
  %392 = load %struct.shop*, %struct.shop** %391, align 8
  %393 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %394 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %393, i32 0, i32 0
  %395 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %394, i32 0, i32 2
  %396 = load %struct.shop*, %struct.shop** %395, align 8
  %397 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %398 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %397, i32 0, i32 0
  %399 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %398, i32 0, i32 0
  %400 = load %struct.shop*, %struct.shop** %399, align 8
  %401 = ptrtoint %struct.shop* %396 to i64
  %402 = ptrtoint %struct.shop* %400 to i64
  %403 = shl i64 %401, %402
  %404 = add i64 %401, 822180564700729624
  %405 = sub i64 %404, %402
  %406 = sub i64 %405, 822180564700729624
  %407 = sub i64 %401, %402
  %408 = mul i64 %406, %402
  %409 = sub i64 0, %401
  %410 = add i64 0, %409
  %411 = sub i64 0, %401
  %412 = sub i64 0, %402
  %413 = sub i64 %410, %412
  %414 = add i64 %410, %402
  %415 = sub i64 0, %401
  %416 = add i64 0, %415
  %417 = sub i64 0, %401
  %418 = sub i64 0, %416
  %419 = sub i64 0, %402
  %420 = add i64 %418, %419
  %421 = sub i64 0, %420
  %422 = add i64 %416, %402
  %423 = sub i64 0, %401
  %424 = add i64 0, %423
  %425 = sub i64 0, %401
  %426 = sub i64 0, %424
  %427 = sub i64 0, %402
  %428 = add i64 %426, %427
  %429 = sub i64 0, %428
  %430 = add i64 %424, %402
  %431 = shl i64 %401, %402
  %432 = sub i64 0, %402
  %433 = add i64 %401, %432
  %434 = sub i64 %401, %402
  %435 = shl i64 %433, 16
  %436 = sub i64 %433, -4746615822991136052
  %437 = sub i64 %436, 16
  %438 = add i64 %437, -4746615822991136052
  %439 = sub i64 %433, 16
  %440 = mul i64 %438, 16
  %441 = add i64 0, -8860190261348701984
  %442 = sub i64 %441, %433
  %443 = sub i64 %442, -8860190261348701984
  %444 = sub i64 0, %433
  %445 = sub i64 0, 16
  %446 = sub i64 %443, %445
  %447 = add i64 %443, 16
  %448 = sub i64 0, 5941348806468518929
  %449 = sub i64 %448, %433
  %450 = add i64 %449, 5941348806468518929
  %451 = sub i64 0, %433
  %452 = sub i64 0, %450
  %453 = sub i64 0, 16
  %454 = add i64 %452, %453
  %455 = sub i64 0, %454
  %456 = add i64 %450, 16
  %457 = add i64 %433, -2278313600865797005
  %458 = sub i64 %457, 16
  %459 = sub i64 %458, -2278313600865797005
  %460 = sub i64 %433, 16
  %461 = mul i64 %459, 16
  %462 = sub i64 0, -3784965142706897806
  %463 = sub i64 %462, %433
  %464 = add i64 %463, -3784965142706897806
  %465 = sub i64 0, %433
  %466 = sub i64 0, 16
  %467 = sub i64 %464, %466
  %468 = add i64 %464, 16
  %469 = sub i64 0, -1427511436076153092
  %470 = sub i64 %469, %433
  %471 = add i64 %470, -1427511436076153092
  %472 = sub i64 0, %433
  %473 = sub i64 0, 16
  %474 = sub i64 %471, %473
  %475 = add i64 %471, 16
  %476 = sub i64 0, 1091437154977329344
  %477 = sub i64 %476, %433
  %478 = add i64 %477, 1091437154977329344
  %479 = sub i64 0, %433
  %480 = sub i64 %478, -7586005985631588289
  %481 = add i64 %480, 16
  %482 = add i64 %481, -7586005985631588289
  %483 = add i64 %478, 16
  %484 = shl i64 %433, 16
  %485 = sdiv exact i64 %433, 16
  call void @_ZNSt12_Vector_baseI4shopSaIS0_EE13_M_deallocateEPS0_m(%"struct.std::_Vector_base.5"* %388, %struct.shop* %392, i64 %485)
  %486 = load %struct.shop*, %struct.shop** %6, align 8
  %487 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %488 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %487, i32 0, i32 0
  %489 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %488, i32 0, i32 0
  store %struct.shop* %486, %struct.shop** %489, align 8
  %490 = load %struct.shop*, %struct.shop** %7, align 8
  %491 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %492 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %491, i32 0, i32 0
  %493 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %492, i32 0, i32 1
  store %struct.shop* %490, %struct.shop** %493, align 8
  %494 = load %struct.shop*, %struct.shop** %6, align 8
  %495 = load i64, i64* %5, align 8
  %496 = getelementptr inbounds %struct.shop, %struct.shop* %494, i64 %495
  %497 = bitcast %"class.std::vector.4"* %10 to %"struct.std::_Vector_base.5"*
  %498 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %497, i32 0, i32 0
  %499 = getelementptr inbounds %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl", %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %498, i32 0, i32 2
  store %struct.shop* %496, %struct.shop** %499, align 8
  br label %266

; <label>:500:                                    ; preds = %349, %334
  br label %349
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorI4shopE9constructIS1_JS1_EEEvPT_DpOT0_(%"class.__gnu_cxx::new_allocator.7"*, %struct.shop*, %struct.shop* dereferenceable(16)) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  %5 = alloca %struct.shop*, align 8
  %6 = alloca %struct.shop*, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %4, align 8
  store %struct.shop* %1, %struct.shop** %5, align 8
  store %struct.shop* %2, %struct.shop** %6, align 8
  %7 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %4, align 8
  %8 = load %struct.shop*, %struct.shop** %5, align 8
  %9 = bitcast %struct.shop* %8 to i8*
  %10 = bitcast i8* %9 to %struct.shop*
  %11 = load %struct.shop*, %struct.shop** %6, align 8
  %12 = call dereferenceable(16) %struct.shop* @_ZSt7forwardI4shopEOT_RNSt16remove_referenceIS1_E4typeE(%struct.shop* dereferenceable(16) %11) #3
  %13 = bitcast %struct.shop* %10 to i8*
  %14 = bitcast %struct.shop* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZNKSt6vectorI4shopSaIS0_EE12_M_check_lenEmPKc(%"class.std::vector.4"*, i64, i8*) #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca %"class.std::vector.4"*
  %9 = alloca %"class.std::vector.4"*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %9, align 8
  store i64 %1, i64* %10, align 8
  store i8* %2, i8** %11, align 8
  %14 = load %"class.std::vector.4"*, %"class.std::vector.4"** %9, align 8
  store %"class.std::vector.4"* %14, %"class.std::vector.4"** %8
  %15 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %16 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE8max_sizeEv(%"class.std::vector.4"* %15) #3
  %17 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %18 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %17) #3
  %19 = add i64 %16, 8714807741776923864
  %20 = sub i64 %19, %18
  %21 = sub i64 %20, 8714807741776923864
  %22 = sub i64 %16, %18
  store i64 %21, i64* %7
  %23 = load i64, i64* %10, align 8
  store i64 %23, i64* %6
  %24 = alloca i32
  store i32 -1883706520, i32* %24
  %25 = alloca i64
  br label %26

; <label>:26:                                     ; preds = %3, %186
  %27 = load i32, i32* %24
  switch i32 %27, label %28 [
    i32 -1883706520, label %29
    i32 1543548580, label %34
    i32 441046582, label %36
    i32 1062713434, label %52
    i32 -1926723534, label %83
    i32 -1781067851, label %86
    i32 1828061323, label %113
    i32 942426079, label %145
    i32 776520497, label %148
    i32 -735657517, label %151
    i32 1034475489, label %153
    i32 -763994063, label %155
    i32 230346111, label %181
  ]

; <label>:28:                                     ; preds = %26
  br label %186

; <label>:29:                                     ; preds = %26
  %30 = load volatile i64, i64* %7
  %31 = load volatile i64, i64* %6
  %32 = icmp ult i64 %30, %31
  %33 = select i1 %32, i32 1543548580, i32 441046582
  store i32 %33, i32* %24
  br label %186

; <label>:34:                                     ; preds = %26
  %35 = load i8*, i8** %11, align 8
  call void @_ZSt20__throw_length_errorPKc(i8* %35) #14
  unreachable

; <label>:36:                                     ; preds = %26
  %37 = load i32, i32* @x.300
  %38 = load i32, i32* @y.301
  %39 = sub i32 %37, 2126437935
  %40 = sub i32 %39, 1
  %41 = add i32 %40, 2126437935
  %42 = sub i32 %37, 1
  %43 = mul i32 %37, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %38, 10
  %47 = and i1 %45, %46
  %48 = xor i1 %45, %46
  %49 = or i1 %47, %48
  %50 = or i1 %45, %46
  %51 = select i1 %49, i32 1062713434, i32 -763994063
  store i32 %51, i32* %24
  br label %186

; <label>:52:                                     ; preds = %26
  %53 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %54 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %53) #3
  %55 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %56 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %55) #3
  store i64 %56, i64* %13, align 8
  %57 = call dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8) %13, i64* dereferenceable(8) %10)
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 0, %54
  %60 = sub i64 0, %58
  %61 = add i64 %59, %60
  %62 = sub i64 0, %61
  %63 = add i64 %54, %58
  store i64 %62, i64* %12, align 8
  %64 = load i64, i64* %12, align 8
  %65 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %66 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %65) #3
  %67 = icmp ult i64 %64, %66
  store i1 %67, i1* %5
  %68 = load i32, i32* @x.300
  %69 = load i32, i32* @y.301
  %70 = add i32 %68, -1087174903
  %71 = sub i32 %70, 1
  %72 = sub i32 %71, -1087174903
  %73 = sub i32 %68, 1
  %74 = mul i32 %68, %72
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %69, 10
  %78 = and i1 %76, %77
  %79 = xor i1 %76, %77
  %80 = or i1 %78, %79
  %81 = or i1 %76, %77
  %82 = select i1 %80, i32 -1926723534, i32 -763994063
  store i32 %82, i32* %24
  br label %186

; <label>:83:                                     ; preds = %26
  %84 = load volatile i1, i1* %5
  %85 = select i1 %84, i32 776520497, i32 -1781067851
  store i32 %85, i32* %24
  br label %186

; <label>:86:                                     ; preds = %26
  %87 = load i32, i32* @x.300
  %88 = load i32, i32* @y.301
  %89 = sub i32 0, 1
  %90 = add i32 %87, %89
  %91 = sub i32 %87, 1
  %92 = mul i32 %87, %90
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %88, 10
  %96 = xor i1 %94, true
  %97 = xor i1 %95, true
  %98 = xor i1 true, true
  %99 = and i1 %96, true
  %100 = and i1 %94, %98
  %101 = and i1 %97, true
  %102 = and i1 %95, %98
  %103 = or i1 %99, %100
  %104 = or i1 %101, %102
  %105 = xor i1 %103, %104
  %106 = or i1 %96, %97
  %107 = xor i1 %106, true
  %108 = or i1 true, %98
  %109 = and i1 %107, %108
  %110 = or i1 %105, %109
  %111 = or i1 %94, %95
  %112 = select i1 %110, i32 1828061323, i32 230346111
  store i32 %112, i32* %24
  br label %186

; <label>:113:                                    ; preds = %26
  %114 = load i64, i64* %12, align 8
  %115 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %116 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE8max_sizeEv(%"class.std::vector.4"* %115) #3
  %117 = icmp ugt i64 %114, %116
  store i1 %117, i1* %4
  %118 = load i32, i32* @x.300
  %119 = load i32, i32* @y.301
  %120 = add i32 %118, 730919236
  %121 = sub i32 %120, 1
  %122 = sub i32 %121, 730919236
  %123 = sub i32 %118, 1
  %124 = mul i32 %118, %122
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %119, 10
  %128 = xor i1 %126, true
  %129 = xor i1 %127, true
  %130 = xor i1 false, true
  %131 = and i1 %128, false
  %132 = and i1 %126, %130
  %133 = and i1 %129, false
  %134 = and i1 %127, %130
  %135 = or i1 %131, %132
  %136 = or i1 %133, %134
  %137 = xor i1 %135, %136
  %138 = or i1 %128, %129
  %139 = xor i1 %138, true
  %140 = or i1 false, %130
  %141 = and i1 %139, %140
  %142 = or i1 %137, %141
  %143 = or i1 %126, %127
  %144 = select i1 %142, i32 942426079, i32 230346111
  store i32 %144, i32* %24
  br label %186

; <label>:145:                                    ; preds = %26
  %146 = load volatile i1, i1* %4
  %147 = select i1 %146, i32 776520497, i32 -735657517
  store i32 %147, i32* %24
  br label %186

; <label>:148:                                    ; preds = %26
  %149 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %150 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE8max_sizeEv(%"class.std::vector.4"* %149) #3
  store i32 1034475489, i32* %24
  store i64 %150, i64* %25
  br label %186

; <label>:151:                                    ; preds = %26
  %152 = load i64, i64* %12, align 8
  store i32 1034475489, i32* %24
  store i64 %152, i64* %25
  br label %186

; <label>:153:                                    ; preds = %26
  %154 = load i64, i64* %25
  ret i64 %154

; <label>:155:                                    ; preds = %26
  %156 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %157 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %156) #3
  %158 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %159 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %158) #3
  store i64 %159, i64* %13, align 8
  %160 = call dereferenceable(8) i64* @_ZSt3maxImERKT_S2_S2_(i64* dereferenceable(8) %13, i64* dereferenceable(8) %10)
  %161 = load i64, i64* %160, align 8
  %162 = sub i64 0, %161
  %163 = add i64 %157, %162
  %164 = sub i64 %157, %161
  %165 = mul i64 %163, %161
  %166 = sub i64 0, -5423965205287913527
  %167 = sub i64 %166, %157
  %168 = add i64 %167, -5423965205287913527
  %169 = sub i64 0, %157
  %170 = sub i64 0, %161
  %171 = sub i64 %168, %170
  %172 = add i64 %168, %161
  %173 = add i64 %157, 7952967708408366632
  %174 = add i64 %173, %161
  %175 = sub i64 %174, 7952967708408366632
  %176 = add i64 %157, %161
  store i64 %175, i64* %12, align 8
  %177 = load i64, i64* %12, align 8
  %178 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %179 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE4sizeEv(%"class.std::vector.4"* %178) #3
  %180 = icmp ult i64 %177, %179
  store i32 1062713434, i32* %24
  br label %186

; <label>:181:                                    ; preds = %26
  %182 = load i64, i64* %12, align 8
  %183 = load volatile %"class.std::vector.4"*, %"class.std::vector.4"** %8
  %184 = call i64 @_ZNKSt6vectorI4shopSaIS0_EE8max_sizeEv(%"class.std::vector.4"* %183) #3
  %185 = icmp ugt i64 %182, %184
  store i32 1828061323, i32* %24
  br label %186

; <label>:186:                                    ; preds = %181, %155, %151, %148, %145, %113, %86, %83, %52, %36, %29, %28
  br label %26
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZNSt12_Vector_baseI4shopSaIS0_EE11_M_allocateEm(%"struct.std::_Vector_base.5"*, i64) #0 comdat align 2 {
  %3 = alloca i1
  %4 = alloca %"struct.std::_Vector_base.5"*
  %5 = alloca i64*
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.302
  %9 = load i32, i32* @y.303
  %10 = sub i32 0, 1
  %11 = add i32 %8, %10
  %12 = sub i32 %8, 1
  %13 = mul i32 %8, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %7
  %16 = icmp slt i32 %9, 10
  store i1 %16, i1* %6
  %17 = alloca i32
  store i32 156363380, i32* %17
  %18 = alloca %struct.shop*
  br label %19

; <label>:19:                                     ; preds = %2, %129
  %20 = load i32, i32* %17
  switch i32 %20, label %21 [
    i32 156363380, label %22
    i32 -1986756965, label %30
    i32 -28041770, label %65
    i32 -1323423040, label %68
    i32 -1705882315, label %75
    i32 1955311241, label %91
    i32 -1960759722, label %119
    i32 1103647814, label %120
    i32 2023343144, label %122
    i32 1201675851, label %128
  ]

; <label>:21:                                     ; preds = %19
  br label %129

; <label>:22:                                     ; preds = %19
  %23 = load volatile i1, i1* %7
  %24 = load volatile i1, i1* %6
  %25 = and i1 %23, %24
  %26 = xor i1 %23, %24
  %27 = or i1 %25, %26
  %28 = or i1 %23, %24
  %29 = select i1 %27, i32 -1986756965, i32 2023343144
  store i32 %29, i32* %17
  br label %129

; <label>:30:                                     ; preds = %19
  %31 = alloca %"struct.std::_Vector_base.5"*, align 8
  %32 = alloca i64, align 8
  store i64* %32, i64** %5
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %31, align 8
  %33 = load volatile i64*, i64** %5
  store i64 %1, i64* %33, align 8
  %34 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %31, align 8
  store %"struct.std::_Vector_base.5"* %34, %"struct.std::_Vector_base.5"** %4
  %35 = load volatile i64*, i64** %5
  %36 = load i64, i64* %35, align 8
  %37 = icmp ne i64 %36, 0
  store i1 %37, i1* %3
  %38 = load i32, i32* @x.302
  %39 = load i32, i32* @y.303
  %40 = sub i32 %38, 1496039082
  %41 = sub i32 %40, 1
  %42 = add i32 %41, 1496039082
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 false, true
  %51 = and i1 %48, false
  %52 = and i1 %46, %50
  %53 = and i1 %49, false
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 false, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  %64 = select i1 %62, i32 -28041770, i32 2023343144
  store i32 %64, i32* %17
  br label %129

; <label>:65:                                     ; preds = %19
  %66 = load volatile i1, i1* %3
  %67 = select i1 %66, i32 -1323423040, i32 -1705882315
  store i32 %67, i32* %17
  br label %129

; <label>:68:                                     ; preds = %19
  %69 = load volatile %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %4
  %70 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %69, i32 0, i32 0
  %71 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %70 to %"class.std::allocator.6"*
  %72 = load volatile i64*, i64** %5
  %73 = load i64, i64* %72, align 8
  %74 = call %struct.shop* @_ZNSt16allocator_traitsISaI4shopEE8allocateERS1_m(%"class.std::allocator.6"* dereferenceable(1) %71, i64 %73)
  store i32 1103647814, i32* %17
  store %struct.shop* %74, %struct.shop** %18
  br label %129

; <label>:75:                                     ; preds = %19
  %76 = load i32, i32* @x.302
  %77 = load i32, i32* @y.303
  %78 = add i32 %76, 533324729
  %79 = sub i32 %78, 1
  %80 = sub i32 %79, 533324729
  %81 = sub i32 %76, 1
  %82 = mul i32 %76, %80
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %77, 10
  %86 = and i1 %84, %85
  %87 = xor i1 %84, %85
  %88 = or i1 %86, %87
  %89 = or i1 %84, %85
  %90 = select i1 %88, i32 1955311241, i32 1201675851
  store i32 %90, i32* %17
  br label %129

; <label>:91:                                     ; preds = %19
  %92 = load i32, i32* @x.302
  %93 = load i32, i32* @y.303
  %94 = add i32 %92, 1980487029
  %95 = sub i32 %94, 1
  %96 = sub i32 %95, 1980487029
  %97 = sub i32 %92, 1
  %98 = mul i32 %92, %96
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %93, 10
  %102 = xor i1 %100, true
  %103 = xor i1 %101, true
  %104 = xor i1 false, true
  %105 = and i1 %102, false
  %106 = and i1 %100, %104
  %107 = and i1 %103, false
  %108 = and i1 %101, %104
  %109 = or i1 %105, %106
  %110 = or i1 %107, %108
  %111 = xor i1 %109, %110
  %112 = or i1 %102, %103
  %113 = xor i1 %112, true
  %114 = or i1 false, %104
  %115 = and i1 %113, %114
  %116 = or i1 %111, %115
  %117 = or i1 %100, %101
  %118 = select i1 %116, i32 -1960759722, i32 1201675851
  store i32 %118, i32* %17
  br label %129

; <label>:119:                                    ; preds = %19
  store i32 1103647814, i32* %17
  store %struct.shop* null, %struct.shop** %18
  br label %129

; <label>:120:                                    ; preds = %19
  %121 = load %struct.shop*, %struct.shop** %18
  ret %struct.shop* %121

; <label>:122:                                    ; preds = %19
  %123 = alloca %"struct.std::_Vector_base.5"*, align 8
  %124 = alloca i64, align 8
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %123, align 8
  store i64 %1, i64* %124, align 8
  %125 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %123, align 8
  %126 = load i64, i64* %124, align 8
  %127 = icmp ne i64 %126, 0
  store i32 -1986756965, i32* %17
  br label %129

; <label>:128:                                    ; preds = %19
  store i32 1955311241, i32* %17
  br label %129

; <label>:129:                                    ; preds = %128, %122, %119, %91, %75, %68, %65, %30, %22, %21
  br label %19
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt34__uninitialized_move_if_noexcept_aIP4shopS1_SaIS0_EET0_T_S4_S3_RT1_(%struct.shop*, %struct.shop*, %struct.shop*, %"class.std::allocator.6"* dereferenceable(1)) #0 comdat {
  %5 = alloca %struct.shop*, align 8
  %6 = alloca %struct.shop*, align 8
  %7 = alloca %struct.shop*, align 8
  %8 = alloca %"class.std::allocator.6"*, align 8
  %9 = alloca %"class.std::move_iterator.10", align 8
  %10 = alloca %"class.std::move_iterator.10", align 8
  store %struct.shop* %0, %struct.shop** %5, align 8
  store %struct.shop* %1, %struct.shop** %6, align 8
  store %struct.shop* %2, %struct.shop** %7, align 8
  store %"class.std::allocator.6"* %3, %"class.std::allocator.6"** %8, align 8
  %11 = load %struct.shop*, %struct.shop** %5, align 8
  %12 = call %struct.shop* @_ZSt32__make_move_if_noexcept_iteratorIP4shopSt13move_iteratorIS1_EET0_T_(%struct.shop* %11)
  %13 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %9, i32 0, i32 0
  store %struct.shop* %12, %struct.shop** %13, align 8
  %14 = load %struct.shop*, %struct.shop** %6, align 8
  %15 = call %struct.shop* @_ZSt32__make_move_if_noexcept_iteratorIP4shopSt13move_iteratorIS1_EET0_T_(%struct.shop* %14)
  %16 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %10, i32 0, i32 0
  store %struct.shop* %15, %struct.shop** %16, align 8
  %17 = load %struct.shop*, %struct.shop** %7, align 8
  %18 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %8, align 8
  %19 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %9, i32 0, i32 0
  %20 = load %struct.shop*, %struct.shop** %19, align 8
  %21 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %10, i32 0, i32 0
  %22 = load %struct.shop*, %struct.shop** %21, align 8
  %23 = call %struct.shop* @_ZSt22__uninitialized_copy_aISt13move_iteratorIP4shopES2_S1_ET0_T_S5_S4_RSaIT1_E(%struct.shop* %20, %struct.shop* %22, %struct.shop* %17, %"class.std::allocator.6"* dereferenceable(1) %18)
  ret %struct.shop* %23
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaI4shopEE7destroyIS0_EEvRS1_PT_(%"class.std::allocator.6"* dereferenceable(1), %struct.shop*) #0 comdat align 2 {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.306
  %6 = load i32, i32* @y.307
  %7 = add i32 %5, -1109765258
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -1109765258
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1970140073, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %78
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1970140073, label %19
    i32 1594489836, label %39
    i32 -164107750, label %71
    i32 1491576435, label %72
  ]

; <label>:18:                                     ; preds = %16
  br label %78

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 1594489836, i32 1491576435
  store i32 %38, i32* %15
  br label %78

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::allocator.6"*, align 8
  %41 = alloca %struct.shop*, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %40, align 8
  store %struct.shop* %1, %struct.shop** %41, align 8
  %42 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %40, align 8
  %43 = bitcast %"class.std::allocator.6"* %42 to %"class.__gnu_cxx::new_allocator.7"*
  %44 = load %struct.shop*, %struct.shop** %41, align 8
  call void @_ZN9__gnu_cxx13new_allocatorI4shopE7destroyIS1_EEvPT_(%"class.__gnu_cxx::new_allocator.7"* %43, %struct.shop* %44)
  %45 = load i32, i32* @x.306
  %46 = load i32, i32* @y.307
  %47 = sub i32 0, 1
  %48 = add i32 %45, %47
  %49 = sub i32 %45, 1
  %50 = mul i32 %45, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %46, 10
  %54 = xor i1 %52, true
  %55 = xor i1 %53, true
  %56 = xor i1 false, true
  %57 = and i1 %54, false
  %58 = and i1 %52, %56
  %59 = and i1 %55, false
  %60 = and i1 %53, %56
  %61 = or i1 %57, %58
  %62 = or i1 %59, %60
  %63 = xor i1 %61, %62
  %64 = or i1 %54, %55
  %65 = xor i1 %64, true
  %66 = or i1 false, %56
  %67 = and i1 %65, %66
  %68 = or i1 %63, %67
  %69 = or i1 %52, %53
  %70 = select i1 %68, i32 -164107750, i32 1491576435
  store i32 %70, i32* %15
  br label %78

; <label>:71:                                     ; preds = %16
  ret void

; <label>:72:                                     ; preds = %16
  %73 = alloca %"class.std::allocator.6"*, align 8
  %74 = alloca %struct.shop*, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %73, align 8
  store %struct.shop* %1, %struct.shop** %74, align 8
  %75 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %73, align 8
  %76 = bitcast %"class.std::allocator.6"* %75 to %"class.__gnu_cxx::new_allocator.7"*
  %77 = load %struct.shop*, %struct.shop** %74, align 8
  call void @_ZN9__gnu_cxx13new_allocatorI4shopE7destroyIS1_EEvPT_(%"class.__gnu_cxx::new_allocator.7"* %76, %struct.shop* %77)
  store i32 1594489836, i32* %15
  br label %78

; <label>:78:                                     ; preds = %72, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt6vectorI4shopSaIS0_EE8max_sizeEv(%"class.std::vector.4"*) #4 comdat align 2 {
  %2 = alloca i64
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.308
  %6 = load i32, i32* @y.309
  %7 = add i32 %5, -1720984777
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -1720984777
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1503569634, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %56
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1503569634, label %19
    i32 954168975, label %27
    i32 -980501209, label %48
    i32 -357785570, label %50
  ]

; <label>:18:                                     ; preds = %16
  br label %56

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 954168975, i32 -357785570
  store i32 %26, i32* %15
  br label %56

; <label>:27:                                     ; preds = %16
  %28 = alloca %"class.std::vector.4"*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %28, align 8
  %29 = load %"class.std::vector.4"*, %"class.std::vector.4"** %28, align 8
  %30 = bitcast %"class.std::vector.4"* %29 to %"struct.std::_Vector_base.5"*
  %31 = call dereferenceable(1) %"class.std::allocator.6"* @_ZNKSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"* %30) #3
  %32 = call i64 @_ZNSt16allocator_traitsISaI4shopEE8max_sizeERKS1_(%"class.std::allocator.6"* dereferenceable(1) %31) #3
  store i64 %32, i64* %2
  %33 = load i32, i32* @x.308
  %34 = load i32, i32* @y.309
  %35 = add i32 %33, -336046729
  %36 = sub i32 %35, 1
  %37 = sub i32 %36, -336046729
  %38 = sub i32 %33, 1
  %39 = mul i32 %33, %37
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %34, 10
  %43 = and i1 %41, %42
  %44 = xor i1 %41, %42
  %45 = or i1 %43, %44
  %46 = or i1 %41, %42
  %47 = select i1 %45, i32 -980501209, i32 -357785570
  store i32 %47, i32* %15
  br label %56

; <label>:48:                                     ; preds = %16
  %49 = load volatile i64, i64* %2
  ret i64 %49

; <label>:50:                                     ; preds = %16
  %51 = alloca %"class.std::vector.4"*, align 8
  store %"class.std::vector.4"* %0, %"class.std::vector.4"** %51, align 8
  %52 = load %"class.std::vector.4"*, %"class.std::vector.4"** %51, align 8
  %53 = bitcast %"class.std::vector.4"* %52 to %"struct.std::_Vector_base.5"*
  %54 = call dereferenceable(1) %"class.std::allocator.6"* @_ZNKSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"* %53) #3
  %55 = call i64 @_ZNSt16allocator_traitsISaI4shopEE8max_sizeERKS1_(%"class.std::allocator.6"* dereferenceable(1) %54) #3
  store i32 954168975, i32* %15
  br label %56

; <label>:56:                                     ; preds = %50, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNSt16allocator_traitsISaI4shopEE8max_sizeERKS1_(%"class.std::allocator.6"* dereferenceable(1)) #4 comdat align 2 {
  %2 = alloca %"class.std::allocator.6"*, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %2, align 8
  %3 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %2, align 8
  %4 = bitcast %"class.std::allocator.6"* %3 to %"class.__gnu_cxx::new_allocator.7"*
  %5 = call i64 @_ZNK9__gnu_cxx13new_allocatorI4shopE8max_sizeEv(%"class.__gnu_cxx::new_allocator.7"* %4) #3
  ret i64 %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(1) %"class.std::allocator.6"* @_ZNKSt12_Vector_baseI4shopSaIS0_EE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base.5"*) #4 comdat align 2 {
  %2 = alloca %"struct.std::_Vector_base.5"*, align 8
  store %"struct.std::_Vector_base.5"* %0, %"struct.std::_Vector_base.5"** %2, align 8
  %3 = load %"struct.std::_Vector_base.5"*, %"struct.std::_Vector_base.5"** %2, align 8
  %4 = getelementptr inbounds %"struct.std::_Vector_base.5", %"struct.std::_Vector_base.5"* %3, i32 0, i32 0
  %5 = bitcast %"struct.std::_Vector_base<shop, std::allocator<shop> >::_Vector_impl"* %4 to %"class.std::allocator.6"*
  ret %"class.std::allocator.6"* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNK9__gnu_cxx13new_allocatorI4shopE8max_sizeEv(%"class.__gnu_cxx::new_allocator.7"*) #4 comdat align 2 {
  %2 = alloca i1
  %3 = alloca i1
  %4 = load i32, i32* @x.314
  %5 = load i32, i32* @y.315
  %6 = sub i32 %4, -845976722
  %7 = sub i32 %6, 1
  %8 = add i32 %7, -845976722
  %9 = sub i32 %4, 1
  %10 = mul i32 %4, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %3
  %13 = icmp slt i32 %5, 10
  store i1 %13, i1* %2
  %14 = alloca i32
  store i32 -890309558, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %60
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 -890309558, label %18
    i32 1472884303, label %26
    i32 467815447, label %56
    i32 2092627402, label %57
  ]

; <label>:17:                                     ; preds = %15
  br label %60

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %3
  %20 = load volatile i1, i1* %2
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 1472884303, i32 2092627402
  store i32 %25, i32* %14
  br label %60

; <label>:26:                                     ; preds = %15
  %27 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %27, align 8
  %28 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %27, align 8
  %29 = load i32, i32* @x.314
  %30 = load i32, i32* @y.315
  %31 = add i32 %29, 1802343355
  %32 = sub i32 %31, 1
  %33 = sub i32 %32, 1802343355
  %34 = sub i32 %29, 1
  %35 = mul i32 %29, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %30, 10
  %39 = xor i1 %37, true
  %40 = xor i1 %38, true
  %41 = xor i1 true, true
  %42 = and i1 %39, true
  %43 = and i1 %37, %41
  %44 = and i1 %40, true
  %45 = and i1 %38, %41
  %46 = or i1 %42, %43
  %47 = or i1 %44, %45
  %48 = xor i1 %46, %47
  %49 = or i1 %39, %40
  %50 = xor i1 %49, true
  %51 = or i1 true, %41
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  %54 = or i1 %37, %38
  %55 = select i1 %53, i32 467815447, i32 2092627402
  store i32 %55, i32* %14
  br label %60

; <label>:56:                                     ; preds = %15
  ret i64 1152921504606846975

; <label>:57:                                     ; preds = %15
  %58 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %58, align 8
  %59 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %58, align 8
  store i32 1472884303, i32* %14
  br label %60

; <label>:60:                                     ; preds = %57, %26, %18, %17
  br label %15
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZNSt16allocator_traitsISaI4shopEE8allocateERS1_m(%"class.std::allocator.6"* dereferenceable(1), i64) #0 comdat align 2 {
  %3 = alloca %"class.std::allocator.6"*, align 8
  %4 = alloca i64, align 8
  store %"class.std::allocator.6"* %0, %"class.std::allocator.6"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.std::allocator.6"*, %"class.std::allocator.6"** %3, align 8
  %6 = bitcast %"class.std::allocator.6"* %5 to %"class.__gnu_cxx::new_allocator.7"*
  %7 = load i64, i64* %4, align 8
  %8 = call %struct.shop* @_ZN9__gnu_cxx13new_allocatorI4shopE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.7"* %6, i64 %7, i8* null)
  ret %struct.shop* %8
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZN9__gnu_cxx13new_allocatorI4shopE8allocateEmPKv(%"class.__gnu_cxx::new_allocator.7"*, i64, i8*) #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i64*
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.318
  %9 = load i32, i32* @y.319
  %10 = sub i32 0, 1
  %11 = add i32 %8, %10
  %12 = sub i32 %8, 1
  %13 = mul i32 %8, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %7
  %16 = icmp slt i32 %9, 10
  store i1 %16, i1* %6
  %17 = alloca i32
  store i32 49755011, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %116
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 49755011, label %21
    i32 2103176004, label %29
    i32 -126188573, label %54
    i32 -2054736248, label %57
    i32 245599225, label %84
    i32 38084761, label %100
    i32 -215392221, label %101
    i32 -1005233228, label %107
    i32 1471357960, label %115
  ]

; <label>:20:                                     ; preds = %18
  br label %116

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %7
  %23 = load volatile i1, i1* %6
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  %28 = select i1 %26, i32 2103176004, i32 -1005233228
  store i32 %28, i32* %17
  br label %116

; <label>:29:                                     ; preds = %18
  %30 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  %31 = alloca i64, align 8
  store i64* %31, i64** %5
  %32 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %30, align 8
  %33 = load volatile i64*, i64** %5
  store i64 %1, i64* %33, align 8
  store i8* %2, i8** %32, align 8
  %34 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %30, align 8
  %35 = load volatile i64*, i64** %5
  %36 = load i64, i64* %35, align 8
  %37 = call i64 @_ZNK9__gnu_cxx13new_allocatorI4shopE8max_sizeEv(%"class.__gnu_cxx::new_allocator.7"* %34) #3
  %38 = icmp ugt i64 %36, %37
  store i1 %38, i1* %4
  %39 = load i32, i32* @x.318
  %40 = load i32, i32* @y.319
  %41 = add i32 %39, -1283049218
  %42 = sub i32 %41, 1
  %43 = sub i32 %42, -1283049218
  %44 = sub i32 %39, 1
  %45 = mul i32 %39, %43
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %40, 10
  %49 = and i1 %47, %48
  %50 = xor i1 %47, %48
  %51 = or i1 %49, %50
  %52 = or i1 %47, %48
  %53 = select i1 %51, i32 -126188573, i32 -1005233228
  store i32 %53, i32* %17
  br label %116

; <label>:54:                                     ; preds = %18
  %55 = load volatile i1, i1* %4
  %56 = select i1 %55, i32 -2054736248, i32 -215392221
  store i32 %56, i32* %17
  br label %116

; <label>:57:                                     ; preds = %18
  %58 = load i32, i32* @x.318
  %59 = load i32, i32* @y.319
  %60 = sub i32 0, 1
  %61 = add i32 %58, %60
  %62 = sub i32 %58, 1
  %63 = mul i32 %58, %61
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %59, 10
  %67 = xor i1 %65, true
  %68 = xor i1 %66, true
  %69 = xor i1 false, true
  %70 = and i1 %67, false
  %71 = and i1 %65, %69
  %72 = and i1 %68, false
  %73 = and i1 %66, %69
  %74 = or i1 %70, %71
  %75 = or i1 %72, %73
  %76 = xor i1 %74, %75
  %77 = or i1 %67, %68
  %78 = xor i1 %77, true
  %79 = or i1 false, %69
  %80 = and i1 %78, %79
  %81 = or i1 %76, %80
  %82 = or i1 %65, %66
  %83 = select i1 %81, i32 245599225, i32 1471357960
  store i32 %83, i32* %17
  br label %116

; <label>:84:                                     ; preds = %18
  call void @_ZSt17__throw_bad_allocv() #14
  %85 = load i32, i32* @x.318
  %86 = load i32, i32* @y.319
  %87 = sub i32 %85, 974340772
  %88 = sub i32 %87, 1
  %89 = add i32 %88, 974340772
  %90 = sub i32 %85, 1
  %91 = mul i32 %85, %89
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %86, 10
  %95 = and i1 %93, %94
  %96 = xor i1 %93, %94
  %97 = or i1 %95, %96
  %98 = or i1 %93, %94
  %99 = select i1 %97, i32 38084761, i32 1471357960
  store i32 %99, i32* %17
  br label %116

; <label>:100:                                    ; preds = %18
  unreachable

; <label>:101:                                    ; preds = %18
  %102 = load volatile i64*, i64** %5
  %103 = load i64, i64* %102, align 8
  %104 = mul i64 %103, 16
  %105 = call i8* @_Znwm(i64 %104)
  %106 = bitcast i8* %105 to %struct.shop*
  ret %struct.shop* %106

; <label>:107:                                    ; preds = %18
  %108 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  %109 = alloca i64, align 8
  %110 = alloca i8*, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %108, align 8
  store i64 %1, i64* %109, align 8
  store i8* %2, i8** %110, align 8
  %111 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %108, align 8
  %112 = load i64, i64* %109, align 8
  %113 = call i64 @_ZNK9__gnu_cxx13new_allocatorI4shopE8max_sizeEv(%"class.__gnu_cxx::new_allocator.7"* %111) #3
  %114 = icmp ugt i64 %112, %113
  store i32 2103176004, i32* %17
  br label %116

; <label>:115:                                    ; preds = %18
  call void @_ZSt17__throw_bad_allocv() #14
  store i32 245599225, i32* %17
  br label %116

; <label>:116:                                    ; preds = %115, %107, %84, %57, %54, %29, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt22__uninitialized_copy_aISt13move_iteratorIP4shopES2_S1_ET0_T_S5_S4_RSaIT1_E(%struct.shop*, %struct.shop*, %struct.shop*, %"class.std::allocator.6"* dereferenceable(1)) #0 comdat {
  %5 = alloca %struct.shop*
  %6 = alloca i1
  %7 = alloca i1
  %8 = load i32, i32* @x.320
  %9 = load i32, i32* @y.321
  %10 = sub i32 0, 1
  %11 = add i32 %8, %10
  %12 = sub i32 %8, 1
  %13 = mul i32 %8, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %7
  %16 = icmp slt i32 %9, 10
  store i1 %16, i1* %6
  %17 = alloca i32
  store i32 1947755785, i32* %17
  br label %18

; <label>:18:                                     ; preds = %4, %96
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 1947755785, label %21
    i32 100945707, label %41
    i32 -2012191470, label %75
    i32 -571061960, label %77
  ]

; <label>:20:                                     ; preds = %18
  br label %96

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %7
  %23 = load volatile i1, i1* %6
  %24 = xor i1 %22, true
  %25 = xor i1 %23, true
  %26 = xor i1 false, true
  %27 = and i1 %24, false
  %28 = and i1 %22, %26
  %29 = and i1 %25, false
  %30 = and i1 %23, %26
  %31 = or i1 %27, %28
  %32 = or i1 %29, %30
  %33 = xor i1 %31, %32
  %34 = or i1 %24, %25
  %35 = xor i1 %34, true
  %36 = or i1 false, %26
  %37 = and i1 %35, %36
  %38 = or i1 %33, %37
  %39 = or i1 %22, %23
  %40 = select i1 %38, i32 100945707, i32 -571061960
  store i32 %40, i32* %17
  br label %96

; <label>:41:                                     ; preds = %18
  %42 = alloca %"class.std::move_iterator.10", align 8
  %43 = alloca %"class.std::move_iterator.10", align 8
  %44 = alloca %struct.shop*, align 8
  %45 = alloca %"class.std::allocator.6"*, align 8
  %46 = alloca %"class.std::move_iterator.10", align 8
  %47 = alloca %"class.std::move_iterator.10", align 8
  %48 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %42, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %48, align 8
  %49 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %43, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %49, align 8
  store %struct.shop* %2, %struct.shop** %44, align 8
  store %"class.std::allocator.6"* %3, %"class.std::allocator.6"** %45, align 8
  %50 = bitcast %"class.std::move_iterator.10"* %46 to i8*
  %51 = bitcast %"class.std::move_iterator.10"* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 8, i32 8, i1 false)
  %52 = bitcast %"class.std::move_iterator.10"* %47 to i8*
  %53 = bitcast %"class.std::move_iterator.10"* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* %53, i64 8, i32 8, i1 false)
  %54 = load %struct.shop*, %struct.shop** %44, align 8
  %55 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %46, i32 0, i32 0
  %56 = load %struct.shop*, %struct.shop** %55, align 8
  %57 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %47, i32 0, i32 0
  %58 = load %struct.shop*, %struct.shop** %57, align 8
  %59 = call %struct.shop* @_ZSt18uninitialized_copyISt13move_iteratorIP4shopES2_ET0_T_S5_S4_(%struct.shop* %56, %struct.shop* %58, %struct.shop* %54)
  store %struct.shop* %59, %struct.shop** %5
  %60 = load i32, i32* @x.320
  %61 = load i32, i32* @y.321
  %62 = sub i32 %60, 1862227926
  %63 = sub i32 %62, 1
  %64 = add i32 %63, 1862227926
  %65 = sub i32 %60, 1
  %66 = mul i32 %60, %64
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %61, 10
  %70 = and i1 %68, %69
  %71 = xor i1 %68, %69
  %72 = or i1 %70, %71
  %73 = or i1 %68, %69
  %74 = select i1 %72, i32 -2012191470, i32 -571061960
  store i32 %74, i32* %17
  br label %96

; <label>:75:                                     ; preds = %18
  %76 = load volatile %struct.shop*, %struct.shop** %5
  ret %struct.shop* %76

; <label>:77:                                     ; preds = %18
  %78 = alloca %"class.std::move_iterator.10", align 8
  %79 = alloca %"class.std::move_iterator.10", align 8
  %80 = alloca %struct.shop*, align 8
  %81 = alloca %"class.std::allocator.6"*, align 8
  %82 = alloca %"class.std::move_iterator.10", align 8
  %83 = alloca %"class.std::move_iterator.10", align 8
  %84 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %78, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %84, align 8
  %85 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %79, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %85, align 8
  store %struct.shop* %2, %struct.shop** %80, align 8
  store %"class.std::allocator.6"* %3, %"class.std::allocator.6"** %81, align 8
  %86 = bitcast %"class.std::move_iterator.10"* %82 to i8*
  %87 = bitcast %"class.std::move_iterator.10"* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 8, i32 8, i1 false)
  %88 = bitcast %"class.std::move_iterator.10"* %83 to i8*
  %89 = bitcast %"class.std::move_iterator.10"* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %88, i8* %89, i64 8, i32 8, i1 false)
  %90 = load %struct.shop*, %struct.shop** %80, align 8
  %91 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %82, i32 0, i32 0
  %92 = load %struct.shop*, %struct.shop** %91, align 8
  %93 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %83, i32 0, i32 0
  %94 = load %struct.shop*, %struct.shop** %93, align 8
  %95 = call %struct.shop* @_ZSt18uninitialized_copyISt13move_iteratorIP4shopES2_ET0_T_S5_S4_(%struct.shop* %92, %struct.shop* %94, %struct.shop* %90)
  store i32 100945707, i32* %17
  br label %96

; <label>:96:                                     ; preds = %77, %41, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt32__make_move_if_noexcept_iteratorIP4shopSt13move_iteratorIS1_EET0_T_(%struct.shop*) #0 comdat {
  %2 = alloca %"class.std::move_iterator.10", align 8
  %3 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %3, align 8
  %4 = load %struct.shop*, %struct.shop** %3, align 8
  call void @_ZNSt13move_iteratorIP4shopEC2ES1_(%"class.std::move_iterator.10"* %2, %struct.shop* %4)
  %5 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %2, i32 0, i32 0
  %6 = load %struct.shop*, %struct.shop** %5, align 8
  ret %struct.shop* %6
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt18uninitialized_copyISt13move_iteratorIP4shopES2_ET0_T_S5_S4_(%struct.shop*, %struct.shop*, %struct.shop*) #0 comdat {
  %4 = alloca %"class.std::move_iterator.10", align 8
  %5 = alloca %"class.std::move_iterator.10", align 8
  %6 = alloca %struct.shop*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %"class.std::move_iterator.10", align 8
  %9 = alloca %"class.std::move_iterator.10", align 8
  %10 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %4, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %10, align 8
  %11 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %5, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %11, align 8
  store %struct.shop* %2, %struct.shop** %6, align 8
  store i8 1, i8* %7, align 1
  %12 = bitcast %"class.std::move_iterator.10"* %8 to i8*
  %13 = bitcast %"class.std::move_iterator.10"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 8, i32 8, i1 false)
  %14 = bitcast %"class.std::move_iterator.10"* %9 to i8*
  %15 = bitcast %"class.std::move_iterator.10"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  %16 = load %struct.shop*, %struct.shop** %6, align 8
  %17 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %8, i32 0, i32 0
  %18 = load %struct.shop*, %struct.shop** %17, align 8
  %19 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %9, i32 0, i32 0
  %20 = load %struct.shop*, %struct.shop** %19, align 8
  %21 = call %struct.shop* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP4shopES4_EET0_T_S7_S6_(%struct.shop* %18, %struct.shop* %20, %struct.shop* %16)
  ret %struct.shop* %21
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP4shopES4_EET0_T_S7_S6_(%struct.shop*, %struct.shop*, %struct.shop*) #0 comdat align 2 {
  %4 = alloca %"class.std::move_iterator.10", align 8
  %5 = alloca %"class.std::move_iterator.10", align 8
  %6 = alloca %struct.shop*, align 8
  %7 = alloca %"class.std::move_iterator.10", align 8
  %8 = alloca %"class.std::move_iterator.10", align 8
  %9 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %4, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %9, align 8
  %10 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %5, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %10, align 8
  store %struct.shop* %2, %struct.shop** %6, align 8
  %11 = bitcast %"class.std::move_iterator.10"* %7 to i8*
  %12 = bitcast %"class.std::move_iterator.10"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 8, i32 8, i1 false)
  %13 = bitcast %"class.std::move_iterator.10"* %8 to i8*
  %14 = bitcast %"class.std::move_iterator.10"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 8, i32 8, i1 false)
  %15 = load %struct.shop*, %struct.shop** %6, align 8
  %16 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %7, i32 0, i32 0
  %17 = load %struct.shop*, %struct.shop** %16, align 8
  %18 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %8, i32 0, i32 0
  %19 = load %struct.shop*, %struct.shop** %18, align 8
  %20 = call %struct.shop* @_ZSt4copyISt13move_iteratorIP4shopES2_ET0_T_S5_S4_(%struct.shop* %17, %struct.shop* %19, %struct.shop* %15)
  ret %struct.shop* %20
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt4copyISt13move_iteratorIP4shopES2_ET0_T_S5_S4_(%struct.shop*, %struct.shop*, %struct.shop*) #0 comdat {
  %4 = alloca %struct.shop*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.328
  %8 = load i32, i32* @y.329
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 -258939525, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %109
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -258939525, label %20
    i32 118647056, label %40
    i32 1775449466, label %87
    i32 1921206800, label %89
  ]

; <label>:19:                                     ; preds = %17
  br label %109

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 118647056, i32 1921206800
  store i32 %39, i32* %16
  br label %109

; <label>:40:                                     ; preds = %17
  %41 = alloca %"class.std::move_iterator.10", align 8
  %42 = alloca %"class.std::move_iterator.10", align 8
  %43 = alloca %struct.shop*, align 8
  %44 = alloca %"class.std::move_iterator.10", align 8
  %45 = alloca %"class.std::move_iterator.10", align 8
  %46 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %41, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %46, align 8
  %47 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %42, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %47, align 8
  store %struct.shop* %2, %struct.shop** %43, align 8
  %48 = bitcast %"class.std::move_iterator.10"* %44 to i8*
  %49 = bitcast %"class.std::move_iterator.10"* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 8, i32 8, i1 false)
  %50 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %44, i32 0, i32 0
  %51 = load %struct.shop*, %struct.shop** %50, align 8
  %52 = call %struct.shop* @_ZSt12__miter_baseISt13move_iteratorIP4shopEENSt11_Miter_baseIT_E13iterator_typeES5_(%struct.shop* %51)
  %53 = bitcast %"class.std::move_iterator.10"* %45 to i8*
  %54 = bitcast %"class.std::move_iterator.10"* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 8, i32 8, i1 false)
  %55 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %45, i32 0, i32 0
  %56 = load %struct.shop*, %struct.shop** %55, align 8
  %57 = call %struct.shop* @_ZSt12__miter_baseISt13move_iteratorIP4shopEENSt11_Miter_baseIT_E13iterator_typeES5_(%struct.shop* %56)
  %58 = load %struct.shop*, %struct.shop** %43, align 8
  %59 = call %struct.shop* @_ZSt14__copy_move_a2ILb1EP4shopS1_ET1_T0_S3_S2_(%struct.shop* %52, %struct.shop* %57, %struct.shop* %58)
  store %struct.shop* %59, %struct.shop** %4
  %60 = load i32, i32* @x.328
  %61 = load i32, i32* @y.329
  %62 = sub i32 %60, 68141898
  %63 = sub i32 %62, 1
  %64 = add i32 %63, 68141898
  %65 = sub i32 %60, 1
  %66 = mul i32 %60, %64
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %61, 10
  %70 = xor i1 %68, true
  %71 = xor i1 %69, true
  %72 = xor i1 false, true
  %73 = and i1 %70, false
  %74 = and i1 %68, %72
  %75 = and i1 %71, false
  %76 = and i1 %69, %72
  %77 = or i1 %73, %74
  %78 = or i1 %75, %76
  %79 = xor i1 %77, %78
  %80 = or i1 %70, %71
  %81 = xor i1 %80, true
  %82 = or i1 false, %72
  %83 = and i1 %81, %82
  %84 = or i1 %79, %83
  %85 = or i1 %68, %69
  %86 = select i1 %84, i32 1775449466, i32 1921206800
  store i32 %86, i32* %16
  br label %109

; <label>:87:                                     ; preds = %17
  %88 = load volatile %struct.shop*, %struct.shop** %4
  ret %struct.shop* %88

; <label>:89:                                     ; preds = %17
  %90 = alloca %"class.std::move_iterator.10", align 8
  %91 = alloca %"class.std::move_iterator.10", align 8
  %92 = alloca %struct.shop*, align 8
  %93 = alloca %"class.std::move_iterator.10", align 8
  %94 = alloca %"class.std::move_iterator.10", align 8
  %95 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %90, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %95, align 8
  %96 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %91, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %96, align 8
  store %struct.shop* %2, %struct.shop** %92, align 8
  %97 = bitcast %"class.std::move_iterator.10"* %93 to i8*
  %98 = bitcast %"class.std::move_iterator.10"* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 8, i32 8, i1 false)
  %99 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %93, i32 0, i32 0
  %100 = load %struct.shop*, %struct.shop** %99, align 8
  %101 = call %struct.shop* @_ZSt12__miter_baseISt13move_iteratorIP4shopEENSt11_Miter_baseIT_E13iterator_typeES5_(%struct.shop* %100)
  %102 = bitcast %"class.std::move_iterator.10"* %94 to i8*
  %103 = bitcast %"class.std::move_iterator.10"* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %102, i8* %103, i64 8, i32 8, i1 false)
  %104 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %94, i32 0, i32 0
  %105 = load %struct.shop*, %struct.shop** %104, align 8
  %106 = call %struct.shop* @_ZSt12__miter_baseISt13move_iteratorIP4shopEENSt11_Miter_baseIT_E13iterator_typeES5_(%struct.shop* %105)
  %107 = load %struct.shop*, %struct.shop** %92, align 8
  %108 = call %struct.shop* @_ZSt14__copy_move_a2ILb1EP4shopS1_ET1_T0_S3_S2_(%struct.shop* %101, %struct.shop* %106, %struct.shop* %107)
  store i32 118647056, i32* %16
  br label %109

; <label>:109:                                    ; preds = %89, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt14__copy_move_a2ILb1EP4shopS1_ET1_T0_S3_S2_(%struct.shop*, %struct.shop*, %struct.shop*) #0 comdat {
  %4 = alloca %struct.shop*, align 8
  %5 = alloca %struct.shop*, align 8
  %6 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %4, align 8
  store %struct.shop* %1, %struct.shop** %5, align 8
  store %struct.shop* %2, %struct.shop** %6, align 8
  %7 = load %struct.shop*, %struct.shop** %4, align 8
  %8 = call %struct.shop* @_ZSt12__niter_baseIP4shopENSt11_Niter_baseIT_E13iterator_typeES3_(%struct.shop* %7)
  %9 = load %struct.shop*, %struct.shop** %5, align 8
  %10 = call %struct.shop* @_ZSt12__niter_baseIP4shopENSt11_Niter_baseIT_E13iterator_typeES3_(%struct.shop* %9)
  %11 = load %struct.shop*, %struct.shop** %6, align 8
  %12 = call %struct.shop* @_ZSt12__niter_baseIP4shopENSt11_Niter_baseIT_E13iterator_typeES3_(%struct.shop* %11)
  %13 = call %struct.shop* @_ZSt13__copy_move_aILb1EP4shopS1_ET1_T0_S3_S2_(%struct.shop* %8, %struct.shop* %10, %struct.shop* %12)
  ret %struct.shop* %13
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt12__miter_baseISt13move_iteratorIP4shopEENSt11_Miter_baseIT_E13iterator_typeES5_(%struct.shop*) #0 comdat {
  %2 = alloca %struct.shop*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.332
  %6 = load i32, i32* @y.333
  %7 = add i32 %5, 1558244793
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, 1558244793
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 1641118717, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %86
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 1641118717, label %19
    i32 -2087422754, label %39
    i32 -1493495892, label %75
    i32 -1758645636, label %77
  ]

; <label>:18:                                     ; preds = %16
  br label %86

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -2087422754, i32 -1758645636
  store i32 %38, i32* %15
  br label %86

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::move_iterator.10", align 8
  %41 = alloca %"class.std::move_iterator.10", align 8
  %42 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %40, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %42, align 8
  %43 = bitcast %"class.std::move_iterator.10"* %41 to i8*
  %44 = bitcast %"class.std::move_iterator.10"* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 8, i32 8, i1 false)
  %45 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %41, i32 0, i32 0
  %46 = load %struct.shop*, %struct.shop** %45, align 8
  %47 = call %struct.shop* @_ZNSt10_Iter_baseISt13move_iteratorIP4shopELb1EE7_S_baseES3_(%struct.shop* %46)
  store %struct.shop* %47, %struct.shop** %2
  %48 = load i32, i32* @x.332
  %49 = load i32, i32* @y.333
  %50 = sub i32 %48, -51381837
  %51 = sub i32 %50, 1
  %52 = add i32 %51, -51381837
  %53 = sub i32 %48, 1
  %54 = mul i32 %48, %52
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %49, 10
  %58 = xor i1 %56, true
  %59 = xor i1 %57, true
  %60 = xor i1 true, true
  %61 = and i1 %58, true
  %62 = and i1 %56, %60
  %63 = and i1 %59, true
  %64 = and i1 %57, %60
  %65 = or i1 %61, %62
  %66 = or i1 %63, %64
  %67 = xor i1 %65, %66
  %68 = or i1 %58, %59
  %69 = xor i1 %68, true
  %70 = or i1 true, %60
  %71 = and i1 %69, %70
  %72 = or i1 %67, %71
  %73 = or i1 %56, %57
  %74 = select i1 %72, i32 -1493495892, i32 -1758645636
  store i32 %74, i32* %15
  br label %86

; <label>:75:                                     ; preds = %16
  %76 = load volatile %struct.shop*, %struct.shop** %2
  ret %struct.shop* %76

; <label>:77:                                     ; preds = %16
  %78 = alloca %"class.std::move_iterator.10", align 8
  %79 = alloca %"class.std::move_iterator.10", align 8
  %80 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %78, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %80, align 8
  %81 = bitcast %"class.std::move_iterator.10"* %79 to i8*
  %82 = bitcast %"class.std::move_iterator.10"* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 8, i32 8, i1 false)
  %83 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %79, i32 0, i32 0
  %84 = load %struct.shop*, %struct.shop** %83, align 8
  %85 = call %struct.shop* @_ZNSt10_Iter_baseISt13move_iteratorIP4shopELb1EE7_S_baseES3_(%struct.shop* %84)
  store i32 -2087422754, i32* %15
  br label %86

; <label>:86:                                     ; preds = %77, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt13__copy_move_aILb1EP4shopS1_ET1_T0_S3_S2_(%struct.shop*, %struct.shop*, %struct.shop*) #0 comdat {
  %4 = alloca %struct.shop*, align 8
  %5 = alloca %struct.shop*, align 8
  %6 = alloca %struct.shop*, align 8
  %7 = alloca i8, align 1
  store %struct.shop* %0, %struct.shop** %4, align 8
  store %struct.shop* %1, %struct.shop** %5, align 8
  store %struct.shop* %2, %struct.shop** %6, align 8
  store i8 1, i8* %7, align 1
  %8 = load %struct.shop*, %struct.shop** %4, align 8
  %9 = load %struct.shop*, %struct.shop** %5, align 8
  %10 = load %struct.shop*, %struct.shop** %6, align 8
  %11 = call %struct.shop* @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI4shopEEPT_PKS4_S7_S5_(%struct.shop* %8, %struct.shop* %9, %struct.shop* %10)
  ret %struct.shop* %11
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt12__niter_baseIP4shopENSt11_Niter_baseIT_E13iterator_typeES3_(%struct.shop*) #0 comdat {
  %2 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %2, align 8
  %3 = load %struct.shop*, %struct.shop** %2, align 8
  %4 = call %struct.shop* @_ZNSt10_Iter_baseIP4shopLb0EE7_S_baseES1_(%struct.shop* %3)
  ret %struct.shop* %4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI4shopEEPT_PKS4_S7_S5_(%struct.shop*, %struct.shop*, %struct.shop*) #4 comdat align 2 {
  %4 = alloca i64
  %5 = alloca %struct.shop*, align 8
  %6 = alloca %struct.shop*, align 8
  %7 = alloca %struct.shop*, align 8
  %8 = alloca i64, align 8
  store %struct.shop* %0, %struct.shop** %5, align 8
  store %struct.shop* %1, %struct.shop** %6, align 8
  store %struct.shop* %2, %struct.shop** %7, align 8
  %9 = load %struct.shop*, %struct.shop** %6, align 8
  %10 = load %struct.shop*, %struct.shop** %5, align 8
  %11 = ptrtoint %struct.shop* %9 to i64
  %12 = ptrtoint %struct.shop* %10 to i64
  %13 = sub i64 0, %12
  %14 = add i64 %11, %13
  %15 = sub i64 %11, %12
  %16 = sdiv exact i64 %14, 16
  store i64 %16, i64* %8, align 8
  %17 = load i64, i64* %8, align 8
  store i64 %17, i64* %4
  %18 = alloca i32
  store i32 141042199, i32* %18
  br label %19

; <label>:19:                                     ; preds = %3, %37
  %20 = load i32, i32* %18
  switch i32 %20, label %21 [
    i32 141042199, label %22
    i32 1529322056, label %26
    i32 -458166799, label %33
  ]

; <label>:21:                                     ; preds = %19
  br label %37

; <label>:22:                                     ; preds = %19
  %23 = load volatile i64, i64* %4
  %24 = icmp ne i64 %23, 0
  %25 = select i1 %24, i32 1529322056, i32 -458166799
  store i32 %25, i32* %18
  br label %37

; <label>:26:                                     ; preds = %19
  %27 = load %struct.shop*, %struct.shop** %7, align 8
  %28 = bitcast %struct.shop* %27 to i8*
  %29 = load %struct.shop*, %struct.shop** %5, align 8
  %30 = bitcast %struct.shop* %29 to i8*
  %31 = load i64, i64* %8, align 8
  %32 = mul i64 16, %31
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %28, i8* %30, i64 %32, i32 8, i1 false)
  store i32 -458166799, i32* %18
  br label %37

; <label>:33:                                     ; preds = %19
  %34 = load %struct.shop*, %struct.shop** %7, align 8
  %35 = load i64, i64* %8, align 8
  %36 = getelementptr inbounds %struct.shop, %struct.shop* %34, i64 %35
  ret %struct.shop* %36

; <label>:37:                                     ; preds = %26, %22, %21
  br label %19
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNSt10_Iter_baseIP4shopLb0EE7_S_baseES1_(%struct.shop*) #4 comdat align 2 {
  %2 = alloca %struct.shop*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.340
  %6 = load i32, i32* @y.341
  %7 = sub i32 %5, -972445843
  %8 = sub i32 %7, 1
  %9 = add i32 %8, -972445843
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1750268505, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %61
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1750268505, label %19
    i32 1840497512, label %27
    i32 1084279804, label %56
    i32 -128558178, label %58
  ]

; <label>:18:                                     ; preds = %16
  br label %61

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 1840497512, i32 -128558178
  store i32 %26, i32* %15
  br label %61

; <label>:27:                                     ; preds = %16
  %28 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %28, align 8
  %29 = load %struct.shop*, %struct.shop** %28, align 8
  store %struct.shop* %29, %struct.shop** %2
  %30 = load i32, i32* @x.340
  %31 = load i32, i32* @y.341
  %32 = sub i32 0, 1
  %33 = add i32 %30, %32
  %34 = sub i32 %30, 1
  %35 = mul i32 %30, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %31, 10
  %39 = xor i1 %37, true
  %40 = xor i1 %38, true
  %41 = xor i1 true, true
  %42 = and i1 %39, true
  %43 = and i1 %37, %41
  %44 = and i1 %40, true
  %45 = and i1 %38, %41
  %46 = or i1 %42, %43
  %47 = or i1 %44, %45
  %48 = xor i1 %46, %47
  %49 = or i1 %39, %40
  %50 = xor i1 %49, true
  %51 = or i1 true, %41
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  %54 = or i1 %37, %38
  %55 = select i1 %53, i32 1084279804, i32 -128558178
  store i32 %55, i32* %15
  br label %61

; <label>:56:                                     ; preds = %16
  %57 = load volatile %struct.shop*, %struct.shop** %2
  ret %struct.shop* %57

; <label>:58:                                     ; preds = %16
  %59 = alloca %struct.shop*, align 8
  store %struct.shop* %0, %struct.shop** %59, align 8
  %60 = load %struct.shop*, %struct.shop** %59, align 8
  store i32 1840497512, i32* %15
  br label %61

; <label>:61:                                     ; preds = %58, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZNSt10_Iter_baseISt13move_iteratorIP4shopELb1EE7_S_baseES3_(%struct.shop*) #0 comdat align 2 {
  %2 = alloca %"class.std::move_iterator.10", align 8
  %3 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %2, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %3, align 8
  %4 = call %struct.shop* @_ZNKSt13move_iteratorIP4shopE4baseEv(%"class.std::move_iterator.10"* %2)
  ret %struct.shop* %4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNKSt13move_iteratorIP4shopE4baseEv(%"class.std::move_iterator.10"*) #4 comdat align 2 {
  %2 = alloca %struct.shop*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.344
  %6 = load i32, i32* @y.345
  %7 = add i32 %5, -1802285545
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -1802285545
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -13997824, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %66
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -13997824, label %19
    i32 -332295628, label %39
    i32 -1745501535, label %59
    i32 2025519479, label %61
  ]

; <label>:18:                                     ; preds = %16
  br label %66

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -332295628, i32 2025519479
  store i32 %38, i32* %15
  br label %66

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.std::move_iterator.10"*, align 8
  store %"class.std::move_iterator.10"* %0, %"class.std::move_iterator.10"** %40, align 8
  %41 = load %"class.std::move_iterator.10"*, %"class.std::move_iterator.10"** %40, align 8
  %42 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %41, i32 0, i32 0
  %43 = load %struct.shop*, %struct.shop** %42, align 8
  store %struct.shop* %43, %struct.shop** %2
  %44 = load i32, i32* @x.344
  %45 = load i32, i32* @y.345
  %46 = add i32 %44, 885818971
  %47 = sub i32 %46, 1
  %48 = sub i32 %47, 885818971
  %49 = sub i32 %44, 1
  %50 = mul i32 %44, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %45, 10
  %54 = and i1 %52, %53
  %55 = xor i1 %52, %53
  %56 = or i1 %54, %55
  %57 = or i1 %52, %53
  %58 = select i1 %56, i32 -1745501535, i32 2025519479
  store i32 %58, i32* %15
  br label %66

; <label>:59:                                     ; preds = %16
  %60 = load volatile %struct.shop*, %struct.shop** %2
  ret %struct.shop* %60

; <label>:61:                                     ; preds = %16
  %62 = alloca %"class.std::move_iterator.10"*, align 8
  store %"class.std::move_iterator.10"* %0, %"class.std::move_iterator.10"** %62, align 8
  %63 = load %"class.std::move_iterator.10"*, %"class.std::move_iterator.10"** %62, align 8
  %64 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %63, i32 0, i32 0
  %65 = load %struct.shop*, %struct.shop** %64, align 8
  store i32 -332295628, i32* %15
  br label %66

; <label>:66:                                     ; preds = %61, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZNSt13move_iteratorIP4shopEC2ES1_(%"class.std::move_iterator.10"*, %struct.shop*) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.std::move_iterator.10"*, align 8
  %4 = alloca %struct.shop*, align 8
  store %"class.std::move_iterator.10"* %0, %"class.std::move_iterator.10"** %3, align 8
  store %struct.shop* %1, %struct.shop** %4, align 8
  %5 = load %"class.std::move_iterator.10"*, %"class.std::move_iterator.10"** %3, align 8
  %6 = getelementptr inbounds %"class.std::move_iterator.10", %"class.std::move_iterator.10"* %5, i32 0, i32 0
  %7 = load %struct.shop*, %struct.shop** %4, align 8
  store %struct.shop* %7, %struct.shop** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorI4shopE7destroyIS1_EEvPT_(%"class.__gnu_cxx::new_allocator.7"*, %struct.shop*) #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::new_allocator.7"*, align 8
  %4 = alloca %struct.shop*, align 8
  store %"class.__gnu_cxx::new_allocator.7"* %0, %"class.__gnu_cxx::new_allocator.7"** %3, align 8
  store %struct.shop* %1, %struct.shop** %4, align 8
  %5 = load %"class.__gnu_cxx::new_allocator.7"*, %"class.__gnu_cxx::new_allocator.7"** %3, align 8
  %6 = load %struct.shop*, %struct.shop** %4, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE12emplace_backIJxEEEvDpOT_(%"class.std::vector"*, i64* dereferenceable(8)) #0 comdat align 2 {
  %3 = alloca i64*
  %4 = alloca i64*
  %5 = alloca %"class.std::vector"*
  %6 = alloca %"class.std::vector"*, align 8
  %7 = alloca i64*, align 8
  store %"class.std::vector"* %0, %"class.std::vector"** %6, align 8
  store i64* %1, i64** %7, align 8
  %8 = load %"class.std::vector"*, %"class.std::vector"** %6, align 8
  store %"class.std::vector"* %8, %"class.std::vector"** %5
  %9 = load volatile %"class.std::vector"*, %"class.std::vector"** %5
  %10 = bitcast %"class.std::vector"* %9 to %"struct.std::_Vector_base"*
  %11 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %10, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %11, i32 0, i32 1
  %13 = load i64*, i64** %12, align 8
  store i64* %13, i64** %4
  %14 = load volatile %"class.std::vector"*, %"class.std::vector"** %5
  %15 = bitcast %"class.std::vector"* %14 to %"struct.std::_Vector_base"*
  %16 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %15, i32 0, i32 0
  %17 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %16, i32 0, i32 2
  %18 = load i64*, i64** %17, align 8
  store i64* %18, i64** %3
  %19 = alloca i32
  store i32 1587659990, i32* %19
  br label %20

; <label>:20:                                     ; preds = %2, %51
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 1587659990, label %23
    i32 953673857, label %28
    i32 -2101313210, label %46
    i32 -804179899, label %50
  ]

; <label>:22:                                     ; preds = %20
  br label %51

; <label>:23:                                     ; preds = %20
  %24 = load volatile i64*, i64** %4
  %25 = load volatile i64*, i64** %3
  %26 = icmp ne i64* %24, %25
  %27 = select i1 %26, i32 953673857, i32 -2101313210
  store i32 %27, i32* %19
  br label %51

; <label>:28:                                     ; preds = %20
  %29 = load volatile %"class.std::vector"*, %"class.std::vector"** %5
  %30 = bitcast %"class.std::vector"* %29 to %"struct.std::_Vector_base"*
  %31 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %30, i32 0, i32 0
  %32 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %31 to %"class.std::allocator.1"*
  %33 = load volatile %"class.std::vector"*, %"class.std::vector"** %5
  %34 = bitcast %"class.std::vector"* %33 to %"struct.std::_Vector_base"*
  %35 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %34, i32 0, i32 0
  %36 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %35, i32 0, i32 1
  %37 = load i64*, i64** %36, align 8
  %38 = load i64*, i64** %7, align 8
  %39 = call dereferenceable(8) i64* @_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE(i64* dereferenceable(8) %38) #3
  call void @_ZNSt16allocator_traitsISaIxEE9constructIxJxEEEvRS0_PT_DpOT0_(%"class.std::allocator.1"* dereferenceable(1) %32, i64* %37, i64* dereferenceable(8) %39)
  %40 = load volatile %"class.std::vector"*, %"class.std::vector"** %5
  %41 = bitcast %"class.std::vector"* %40 to %"struct.std::_Vector_base"*
  %42 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %41, i32 0, i32 0
  %43 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %42, i32 0, i32 1
  %44 = load i64*, i64** %43, align 8
  %45 = getelementptr inbounds i64, i64* %44, i32 1
  store i64* %45, i64** %43, align 8
  store i32 -804179899, i32* %19
  br label %51

; <label>:46:                                     ; preds = %20
  %47 = load i64*, i64** %7, align 8
  %48 = call dereferenceable(8) i64* @_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE(i64* dereferenceable(8) %47) #3
  %49 = load volatile %"class.std::vector"*, %"class.std::vector"** %5
  call void @_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIJxEEEvDpOT_(%"class.std::vector"* %49, i64* dereferenceable(8) %48)
  store i32 -804179899, i32* %19
  br label %51

; <label>:50:                                     ; preds = %20
  ret void

; <label>:51:                                     ; preds = %46, %28, %23, %22
  br label %20
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8)) #4 comdat {
  %2 = alloca i64*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.352
  %6 = load i32, i32* @y.353
  %7 = add i32 %5, 481879556
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, 481879556
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 452461867, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %61
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 452461867, label %19
    i32 860587465, label %39
    i32 -1123584840, label %56
    i32 1646459796, label %58
  ]

; <label>:18:                                     ; preds = %16
  br label %61

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 false, true
  %25 = and i1 %22, false
  %26 = and i1 %20, %24
  %27 = and i1 %23, false
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 false, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 860587465, i32 1646459796
  store i32 %38, i32* %15
  br label %61

; <label>:39:                                     ; preds = %16
  %40 = alloca i64*, align 8
  store i64* %0, i64** %40, align 8
  %41 = load i64*, i64** %40, align 8
  store i64* %41, i64** %2
  %42 = load i32, i32* @x.352
  %43 = load i32, i32* @y.353
  %44 = sub i32 0, 1
  %45 = add i32 %42, %44
  %46 = sub i32 %42, 1
  %47 = mul i32 %42, %45
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %43, 10
  %51 = and i1 %49, %50
  %52 = xor i1 %49, %50
  %53 = or i1 %51, %52
  %54 = or i1 %49, %50
  %55 = select i1 %53, i32 -1123584840, i32 1646459796
  store i32 %55, i32* %15
  br label %61

; <label>:56:                                     ; preds = %16
  %57 = load volatile i64*, i64** %2
  ret i64* %57

; <label>:58:                                     ; preds = %16
  %59 = alloca i64*, align 8
  store i64* %0, i64** %59, align 8
  %60 = load i64*, i64** %59, align 8
  store i32 860587465, i32* %15
  br label %61

; <label>:61:                                     ; preds = %58, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaIxEE9constructIxJxEEEvRS0_PT_DpOT0_(%"class.std::allocator.1"* dereferenceable(1), i64*, i64* dereferenceable(8)) #0 comdat align 2 {
  %4 = alloca %"class.std::allocator.1"*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64* %2, i64** %6, align 8
  %7 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %4, align 8
  %8 = bitcast %"class.std::allocator.1"* %7 to %"class.__gnu_cxx::new_allocator.2"*
  %9 = load i64*, i64** %5, align 8
  %10 = load i64*, i64** %6, align 8
  %11 = call dereferenceable(8) i64* @_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE(i64* dereferenceable(8) %10) #3
  call void @_ZN9__gnu_cxx13new_allocatorIxE9constructIxJxEEEvPT_DpOT0_(%"class.__gnu_cxx::new_allocator.2"* %8, i64* %9, i64* dereferenceable(8) %11)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE(i64* dereferenceable(8)) #4 comdat {
  %2 = alloca i64*, align 8
  store i64* %0, i64** %2, align 8
  %3 = load i64*, i64** %2, align 8
  ret i64* %3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt6vectorIxSaIxEE19_M_emplace_back_auxIJxEEEvDpOT_(%"class.std::vector"*, i64* dereferenceable(8)) #0 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::vector"*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i8*
  %9 = alloca i32
  store %"class.std::vector"* %0, %"class.std::vector"** %3, align 8
  store i64* %1, i64** %4, align 8
  %10 = load %"class.std::vector"*, %"class.std::vector"** %3, align 8
  %11 = call i64 @_ZNKSt6vectorIxSaIxEE12_M_check_lenEmPKc(%"class.std::vector"* %10, i64 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i32 0, i32 0))
  store i64 %11, i64* %5, align 8
  %12 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %13 = load i64, i64* %5, align 8
  %14 = call i64* @_ZNSt12_Vector_baseIxSaIxEE11_M_allocateEm(%"struct.std::_Vector_base"* %12, i64 %13)
  store i64* %14, i64** %6, align 8
  %15 = load i64*, i64** %6, align 8
  store i64* %15, i64** %7, align 8
  %16 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %17 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %16, i32 0, i32 0
  %18 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %17 to %"class.std::allocator.1"*
  %19 = load i64*, i64** %6, align 8
  %20 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %10) #3
  %21 = getelementptr inbounds i64, i64* %19, i64 %20
  %22 = load i64*, i64** %4, align 8
  %23 = call dereferenceable(8) i64* @_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE(i64* dereferenceable(8) %22) #3
  invoke void @_ZNSt16allocator_traitsISaIxEE9constructIxJxEEEvRS0_PT_DpOT0_(%"class.std::allocator.1"* dereferenceable(1) %18, i64* %21, i64* dereferenceable(8) %23)
          to label %24 unwind label %40

; <label>:24:                                     ; preds = %2
  store i64* null, i64** %7, align 8
  %25 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %26 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %25, i32 0, i32 0
  %27 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %26, i32 0, i32 0
  %28 = load i64*, i64** %27, align 8
  %29 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %30 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %29, i32 0, i32 0
  %31 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %30, i32 0, i32 1
  %32 = load i64*, i64** %31, align 8
  %33 = load i64*, i64** %6, align 8
  %34 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %35 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %34) #3
  %36 = invoke i64* @_ZSt34__uninitialized_move_if_noexcept_aIPxS0_SaIxEET0_T_S3_S2_RT1_(i64* %28, i64* %32, i64* %33, %"class.std::allocator.1"* dereferenceable(1) %35)
          to label %37 unwind label %40

; <label>:37:                                     ; preds = %24
  store i64* %36, i64** %7, align 8
  %38 = load i64*, i64** %7, align 8
  %39 = getelementptr inbounds i64, i64* %38, i32 1
  store i64* %39, i64** %7, align 8
  br label %168

; <label>:40:                                     ; preds = %24, %2
  %41 = load i32, i32* @x.358
  %42 = load i32, i32* @y.359
  %43 = sub i32 %41, -892594227
  %44 = sub i32 %43, 1
  %45 = add i32 %44, -892594227
  %46 = sub i32 %41, 1
  %47 = mul i32 %41, %45
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %42, 10
  %51 = xor i1 %49, true
  %52 = xor i1 %50, true
  %53 = xor i1 false, true
  %54 = and i1 %51, false
  %55 = and i1 %49, %53
  %56 = and i1 %52, false
  %57 = and i1 %50, %53
  %58 = or i1 %54, %55
  %59 = or i1 %56, %57
  %60 = xor i1 %58, %59
  %61 = or i1 %51, %52
  %62 = xor i1 %61, true
  %63 = or i1 false, %53
  %64 = and i1 %62, %63
  %65 = or i1 %60, %64
  %66 = or i1 %49, %50
  br i1 %65, label %67, label %345

; <label>:67:                                     ; preds = %40, %345
  %68 = landingpad { i8*, i32 }
          catch i8* null
  %69 = extractvalue { i8*, i32 } %68, 0
  store i8* %69, i8** %8, align 8
  %70 = extractvalue { i8*, i32 } %68, 1
  store i32 %70, i32* %9, align 4
  %71 = load i32, i32* @x.358
  %72 = load i32, i32* @y.359
  %73 = add i32 %71, -1556460030
  %74 = sub i32 %73, 1
  %75 = sub i32 %74, -1556460030
  %76 = sub i32 %71, 1
  %77 = mul i32 %71, %75
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %72, 10
  %81 = xor i1 %79, true
  %82 = xor i1 %80, true
  %83 = xor i1 true, true
  %84 = and i1 %81, true
  %85 = and i1 %79, %83
  %86 = and i1 %82, true
  %87 = and i1 %80, %83
  %88 = or i1 %84, %85
  %89 = or i1 %86, %87
  %90 = xor i1 %88, %89
  %91 = or i1 %81, %82
  %92 = xor i1 %91, true
  %93 = or i1 true, %83
  %94 = and i1 %92, %93
  %95 = or i1 %90, %94
  %96 = or i1 %79, %80
  br i1 %95, label %97, label %345

; <label>:97:                                     ; preds = %67
  br label %98

; <label>:98:                                     ; preds = %97
  %99 = load i8*, i8** %8, align 8
  %100 = call i8* @__cxa_begin_catch(i8* %99) #3
  %101 = load i64*, i64** %7, align 8
  %102 = icmp ne i64* %101, null
  br i1 %102, label %156, label %103

; <label>:103:                                    ; preds = %98
  %104 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %105 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %104, i32 0, i32 0
  %106 = bitcast %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %105 to %"class.std::allocator.1"*
  %107 = load i64*, i64** %6, align 8
  %108 = call i64 @_ZNKSt6vectorIxSaIxEE4sizeEv(%"class.std::vector"* %10) #3
  %109 = getelementptr inbounds i64, i64* %107, i64 %108
  invoke void @_ZNSt16allocator_traitsISaIxEE7destroyIxEEvRS0_PT_(%"class.std::allocator.1"* dereferenceable(1) %106, i64* %109)
          to label %110 unwind label %152

; <label>:110:                                    ; preds = %103
  %111 = load i32, i32* @x.358
  %112 = load i32, i32* @y.359
  %113 = sub i32 %111, 1533520768
  %114 = sub i32 %113, 1
  %115 = add i32 %114, 1533520768
  %116 = sub i32 %111, 1
  %117 = mul i32 %111, %115
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %112, 10
  %121 = xor i1 %119, true
  %122 = xor i1 %120, true
  %123 = xor i1 true, true
  %124 = and i1 %121, true
  %125 = and i1 %119, %123
  %126 = and i1 %122, true
  %127 = and i1 %120, %123
  %128 = or i1 %124, %125
  %129 = or i1 %126, %127
  %130 = xor i1 %128, %129
  %131 = or i1 %121, %122
  %132 = xor i1 %131, true
  %133 = or i1 true, %123
  %134 = and i1 %132, %133
  %135 = or i1 %130, %134
  %136 = or i1 %119, %120
  br i1 %135, label %137, label %349

; <label>:137:                                    ; preds = %110, %349
  %138 = load i32, i32* @x.358
  %139 = load i32, i32* @y.359
  %140 = sub i32 0, 1
  %141 = add i32 %138, %140
  %142 = sub i32 %138, 1
  %143 = mul i32 %138, %141
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %139, 10
  %147 = and i1 %145, %146
  %148 = xor i1 %145, %146
  %149 = or i1 %147, %148
  %150 = or i1 %145, %146
  br i1 %149, label %151, label %349

; <label>:151:                                    ; preds = %137
  br label %162

; <label>:152:                                    ; preds = %166, %162, %156, %103
  %153 = landingpad { i8*, i32 }
          cleanup
  %154 = extractvalue { i8*, i32 } %153, 0
  store i8* %154, i8** %8, align 8
  %155 = extractvalue { i8*, i32 } %153, 1
  store i32 %155, i32* %9, align 4
  invoke void @__cxa_end_catch()
          to label %167 unwind label %300

; <label>:156:                                    ; preds = %98
  %157 = load i64*, i64** %6, align 8
  %158 = load i64*, i64** %7, align 8
  %159 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %160 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %159) #3
  invoke void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %157, i64* %158, %"class.std::allocator.1"* dereferenceable(1) %160)
          to label %161 unwind label %152

; <label>:161:                                    ; preds = %156
  br label %162

; <label>:162:                                    ; preds = %161, %151
  %163 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %164 = load i64*, i64** %6, align 8
  %165 = load i64, i64* %5, align 8
  invoke void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %163, i64* %164, i64 %165)
          to label %166 unwind label %152

; <label>:166:                                    ; preds = %162
  invoke void @__cxa_rethrow() #14
          to label %344 unwind label %152

; <label>:167:                                    ; preds = %152
  br label %266

; <label>:168:                                    ; preds = %37
  %169 = load i32, i32* @x.358
  %170 = load i32, i32* @y.359
  %171 = sub i32 0, 1
  %172 = add i32 %169, %171
  %173 = sub i32 %169, 1
  %174 = mul i32 %169, %172
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %170, 10
  %178 = xor i1 %176, true
  %179 = xor i1 %177, true
  %180 = xor i1 false, true
  %181 = and i1 %178, false
  %182 = and i1 %176, %180
  %183 = and i1 %179, false
  %184 = and i1 %177, %180
  %185 = or i1 %181, %182
  %186 = or i1 %183, %184
  %187 = xor i1 %185, %186
  %188 = or i1 %178, %179
  %189 = xor i1 %188, true
  %190 = or i1 false, %180
  %191 = and i1 %189, %190
  %192 = or i1 %187, %191
  %193 = or i1 %176, %177
  br i1 %192, label %194, label %350

; <label>:194:                                    ; preds = %168, %350
  %195 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %196 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %195, i32 0, i32 0
  %197 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %196, i32 0, i32 0
  %198 = load i64*, i64** %197, align 8
  %199 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %200 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %199, i32 0, i32 0
  %201 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %200, i32 0, i32 1
  %202 = load i64*, i64** %201, align 8
  %203 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %204 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %203) #3
  call void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %198, i64* %202, %"class.std::allocator.1"* dereferenceable(1) %204)
  %205 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %206 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %207 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %206, i32 0, i32 0
  %208 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %207, i32 0, i32 0
  %209 = load i64*, i64** %208, align 8
  %210 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %211 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %210, i32 0, i32 0
  %212 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %211, i32 0, i32 2
  %213 = load i64*, i64** %212, align 8
  %214 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %215 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %214, i32 0, i32 0
  %216 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %215, i32 0, i32 0
  %217 = load i64*, i64** %216, align 8
  %218 = ptrtoint i64* %213 to i64
  %219 = ptrtoint i64* %217 to i64
  %220 = add i64 %218, -8627161214626173977
  %221 = sub i64 %220, %219
  %222 = sub i64 %221, -8627161214626173977
  %223 = sub i64 %218, %219
  %224 = sdiv exact i64 %222, 8
  call void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %205, i64* %209, i64 %224)
  %225 = load i64*, i64** %6, align 8
  %226 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %227 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %226, i32 0, i32 0
  %228 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %227, i32 0, i32 0
  store i64* %225, i64** %228, align 8
  %229 = load i64*, i64** %7, align 8
  %230 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %231 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %230, i32 0, i32 0
  %232 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %231, i32 0, i32 1
  store i64* %229, i64** %232, align 8
  %233 = load i64*, i64** %6, align 8
  %234 = load i64, i64* %5, align 8
  %235 = getelementptr inbounds i64, i64* %233, i64 %234
  %236 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %237 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %236, i32 0, i32 0
  %238 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %237, i32 0, i32 2
  store i64* %235, i64** %238, align 8
  %239 = load i32, i32* @x.358
  %240 = load i32, i32* @y.359
  %241 = add i32 %239, 630111837
  %242 = sub i32 %241, 1
  %243 = sub i32 %242, 630111837
  %244 = sub i32 %239, 1
  %245 = mul i32 %239, %243
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %240, 10
  %249 = xor i1 %247, true
  %250 = xor i1 %248, true
  %251 = xor i1 false, true
  %252 = and i1 %249, false
  %253 = and i1 %247, %251
  %254 = and i1 %250, false
  %255 = and i1 %248, %251
  %256 = or i1 %252, %253
  %257 = or i1 %254, %255
  %258 = xor i1 %256, %257
  %259 = or i1 %249, %250
  %260 = xor i1 %259, true
  %261 = or i1 false, %251
  %262 = and i1 %260, %261
  %263 = or i1 %258, %262
  %264 = or i1 %247, %248
  br i1 %263, label %265, label %350

; <label>:265:                                    ; preds = %194
  ret void

; <label>:266:                                    ; preds = %167
  %267 = load i32, i32* @x.358
  %268 = load i32, i32* @y.359
  %269 = sub i32 %267, -1787475444
  %270 = sub i32 %269, 1
  %271 = add i32 %270, -1787475444
  %272 = sub i32 %267, 1
  %273 = mul i32 %267, %271
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %268, 10
  %277 = and i1 %275, %276
  %278 = xor i1 %275, %276
  %279 = or i1 %277, %278
  %280 = or i1 %275, %276
  br i1 %279, label %281, label %443

; <label>:281:                                    ; preds = %266, %443
  %282 = load i8*, i8** %8, align 8
  %283 = load i32, i32* %9, align 4
  %284 = insertvalue { i8*, i32 } undef, i8* %282, 0
  %285 = insertvalue { i8*, i32 } %284, i32 %283, 1
  %286 = load i32, i32* @x.358
  %287 = load i32, i32* @y.359
  %288 = sub i32 0, 1
  %289 = add i32 %286, %288
  %290 = sub i32 %286, 1
  %291 = mul i32 %286, %289
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %287, 10
  %295 = and i1 %293, %294
  %296 = xor i1 %293, %294
  %297 = or i1 %295, %296
  %298 = or i1 %293, %294
  br i1 %297, label %299, label %443

; <label>:299:                                    ; preds = %281
  resume { i8*, i32 } %285

; <label>:300:                                    ; preds = %152
  %301 = load i32, i32* @x.358
  %302 = load i32, i32* @y.359
  %303 = add i32 %301, -754364634
  %304 = sub i32 %303, 1
  %305 = sub i32 %304, -754364634
  %306 = sub i32 %301, 1
  %307 = mul i32 %301, %305
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %302, 10
  %311 = and i1 %309, %310
  %312 = xor i1 %309, %310
  %313 = or i1 %311, %312
  %314 = or i1 %309, %310
  br i1 %313, label %315, label %448

; <label>:315:                                    ; preds = %300, %448
  %316 = landingpad { i8*, i32 }
          catch i8* null
  %317 = extractvalue { i8*, i32 } %316, 0
  call void @__clang_call_terminate(i8* %317) #13
  %318 = load i32, i32* @x.358
  %319 = load i32, i32* @y.359
  %320 = sub i32 0, 1
  %321 = add i32 %318, %320
  %322 = sub i32 %318, 1
  %323 = mul i32 %318, %321
  %324 = urem i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %319, 10
  %327 = xor i1 %325, true
  %328 = xor i1 %326, true
  %329 = xor i1 true, true
  %330 = and i1 %327, true
  %331 = and i1 %325, %329
  %332 = and i1 %328, true
  %333 = and i1 %326, %329
  %334 = or i1 %330, %331
  %335 = or i1 %332, %333
  %336 = xor i1 %334, %335
  %337 = or i1 %327, %328
  %338 = xor i1 %337, true
  %339 = or i1 true, %329
  %340 = and i1 %338, %339
  %341 = or i1 %336, %340
  %342 = or i1 %325, %326
  br i1 %341, label %343, label %448

; <label>:343:                                    ; preds = %315
  unreachable

; <label>:344:                                    ; preds = %166
  unreachable

; <label>:345:                                    ; preds = %67, %40
  %346 = landingpad { i8*, i32 }
          catch i8* null
  %347 = extractvalue { i8*, i32 } %346, 0
  store i8* %347, i8** %8, align 8
  %348 = extractvalue { i8*, i32 } %346, 1
  store i32 %348, i32* %9, align 4
  br label %67

; <label>:349:                                    ; preds = %137, %110
  br label %137

; <label>:350:                                    ; preds = %194, %168
  %351 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %352 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %351, i32 0, i32 0
  %353 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %352, i32 0, i32 0
  %354 = load i64*, i64** %353, align 8
  %355 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %356 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %355, i32 0, i32 0
  %357 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %356, i32 0, i32 1
  %358 = load i64*, i64** %357, align 8
  %359 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %360 = call dereferenceable(1) %"class.std::allocator.1"* @_ZNSt12_Vector_baseIxSaIxEE19_M_get_Tp_allocatorEv(%"struct.std::_Vector_base"* %359) #3
  call void @_ZSt8_DestroyIPxxEvT_S1_RSaIT0_E(i64* %354, i64* %358, %"class.std::allocator.1"* dereferenceable(1) %360)
  %361 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %362 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %363 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %362, i32 0, i32 0
  %364 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %363, i32 0, i32 0
  %365 = load i64*, i64** %364, align 8
  %366 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %367 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %366, i32 0, i32 0
  %368 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %367, i32 0, i32 2
  %369 = load i64*, i64** %368, align 8
  %370 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %371 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %370, i32 0, i32 0
  %372 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %371, i32 0, i32 0
  %373 = load i64*, i64** %372, align 8
  %374 = ptrtoint i64* %369 to i64
  %375 = ptrtoint i64* %373 to i64
  %376 = add i64 0, 884993740200786711
  %377 = sub i64 %376, %374
  %378 = sub i64 %377, 884993740200786711
  %379 = sub i64 0, %374
  %380 = sub i64 0, %375
  %381 = sub i64 %378, %380
  %382 = add i64 %378, %375
  %383 = sub i64 0, -7664024195267389104
  %384 = sub i64 %383, %374
  %385 = add i64 %384, -7664024195267389104
  %386 = sub i64 0, %374
  %387 = add i64 %385, 9033865860537757771
  %388 = add i64 %387, %375
  %389 = sub i64 %388, 9033865860537757771
  %390 = add i64 %385, %375
  %391 = sub i64 0, %374
  %392 = add i64 0, %391
  %393 = sub i64 0, %374
  %394 = add i64 %392, -2002904996393712394
  %395 = add i64 %394, %375
  %396 = sub i64 %395, -2002904996393712394
  %397 = add i64 %392, %375
  %398 = shl i64 %374, %375
  %399 = sub i64 %374, 1034324946851492406
  %400 = sub i64 %399, %375
  %401 = add i64 %400, 1034324946851492406
  %402 = sub i64 %374, %375
  %403 = mul i64 %401, %375
  %404 = sub i64 %374, 3894097205093267767
  %405 = sub i64 %404, %375
  %406 = add i64 %405, 3894097205093267767
  %407 = sub i64 %374, %375
  %408 = mul i64 %406, %375
  %409 = sub i64 0, %375
  %410 = add i64 %374, %409
  %411 = sub i64 %374, %375
  %412 = mul i64 %410, %375
  %413 = sub i64 0, %374
  %414 = add i64 0, %413
  %415 = sub i64 0, %374
  %416 = sub i64 0, %375
  %417 = sub i64 %414, %416
  %418 = add i64 %414, %375
  %419 = add i64 %374, 911277312811522678
  %420 = sub i64 %419, %375
  %421 = sub i64 %420, 911277312811522678
  %422 = sub i64 %374, %375
  %423 = mul i64 %421, %375
  %424 = sub i64 0, %375
  %425 = add i64 %374, %424
  %426 = sub i64 %374, %375
  %427 = shl i64 %425, 8
  %428 = sdiv exact i64 %425, 8
  call void @_ZNSt12_Vector_baseIxSaIxEE13_M_deallocateEPxm(%"struct.std::_Vector_base"* %361, i64* %365, i64 %428)
  %429 = load i64*, i64** %6, align 8
  %430 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %431 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %430, i32 0, i32 0
  %432 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %431, i32 0, i32 0
  store i64* %429, i64** %432, align 8
  %433 = load i64*, i64** %7, align 8
  %434 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %435 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %434, i32 0, i32 0
  %436 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %435, i32 0, i32 1
  store i64* %433, i64** %436, align 8
  %437 = load i64*, i64** %6, align 8
  %438 = load i64, i64* %5, align 8
  %439 = getelementptr inbounds i64, i64* %437, i64 %438
  %440 = bitcast %"class.std::vector"* %10 to %"struct.std::_Vector_base"*
  %441 = getelementptr inbounds %"struct.std::_Vector_base", %"struct.std::_Vector_base"* %440, i32 0, i32 0
  %442 = getelementptr inbounds %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl", %"struct.std::_Vector_base<long long, std::allocator<long long> >::_Vector_impl"* %441, i32 0, i32 2
  store i64* %439, i64** %442, align 8
  br label %194

; <label>:443:                                    ; preds = %281, %266
  %444 = load i8*, i8** %8, align 8
  %445 = load i32, i32* %9, align 4
  %446 = insertvalue { i8*, i32 } undef, i8* %444, 0
  %447 = insertvalue { i8*, i32 } %446, i32 %445, 1
  br label %281

; <label>:448:                                    ; preds = %315, %300
  %449 = landingpad { i8*, i32 }
          catch i8* null
  %450 = extractvalue { i8*, i32 } %449, 0
  call void @__clang_call_terminate(i8* %450) #13
  br label %315
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxE9constructIxJxEEEvPT_DpOT0_(%"class.__gnu_cxx::new_allocator.2"*, i64*, i64* dereferenceable(8)) #4 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.360
  %7 = load i32, i32* @y.361
  %8 = sub i32 %6, -1179819156
  %9 = sub i32 %8, 1
  %10 = add i32 %9, -1179819156
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 1561984521, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %78
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 1561984521, label %20
    i32 -1345924565, label %40
    i32 1409879548, label %66
    i32 637808910, label %67
  ]

; <label>:19:                                     ; preds = %17
  br label %78

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 -1345924565, i32 637808910
  store i32 %39, i32* %16
  br label %78

; <label>:40:                                     ; preds = %17
  %41 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  %42 = alloca i64*, align 8
  %43 = alloca i64*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %41, align 8
  store i64* %1, i64** %42, align 8
  store i64* %2, i64** %43, align 8
  %44 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %41, align 8
  %45 = load i64*, i64** %42, align 8
  %46 = bitcast i64* %45 to i8*
  %47 = bitcast i8* %46 to i64*
  %48 = load i64*, i64** %43, align 8
  %49 = call dereferenceable(8) i64* @_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE(i64* dereferenceable(8) %48) #3
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %47, align 8
  %51 = load i32, i32* @x.360
  %52 = load i32, i32* @y.361
  %53 = add i32 %51, -1220128689
  %54 = sub i32 %53, 1
  %55 = sub i32 %54, -1220128689
  %56 = sub i32 %51, 1
  %57 = mul i32 %51, %55
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %52, 10
  %61 = and i1 %59, %60
  %62 = xor i1 %59, %60
  %63 = or i1 %61, %62
  %64 = or i1 %59, %60
  %65 = select i1 %63, i32 1409879548, i32 637808910
  store i32 %65, i32* %16
  br label %78

; <label>:66:                                     ; preds = %17
  ret void

; <label>:67:                                     ; preds = %17
  %68 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  %69 = alloca i64*, align 8
  %70 = alloca i64*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %68, align 8
  store i64* %1, i64** %69, align 8
  store i64* %2, i64** %70, align 8
  %71 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %68, align 8
  %72 = load i64*, i64** %69, align 8
  %73 = bitcast i64* %72 to i8*
  %74 = bitcast i8* %73 to i64*
  %75 = load i64*, i64** %70, align 8
  %76 = call dereferenceable(8) i64* @_ZSt7forwardIxEOT_RNSt16remove_referenceIS0_E4typeE(i64* dereferenceable(8) %75) #3
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %74, align 8
  store i32 -1345924565, i32* %16
  br label %78

; <label>:78:                                     ; preds = %67, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZNSt16allocator_traitsISaIxEE7destroyIxEEvRS0_PT_(%"class.std::allocator.1"* dereferenceable(1), i64*) #0 comdat align 2 {
  %3 = alloca %"class.std::allocator.1"*, align 8
  %4 = alloca i64*, align 8
  store %"class.std::allocator.1"* %0, %"class.std::allocator.1"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"class.std::allocator.1"*, %"class.std::allocator.1"** %3, align 8
  %6 = bitcast %"class.std::allocator.1"* %5 to %"class.__gnu_cxx::new_allocator.2"*
  %7 = load i64*, i64** %4, align 8
  call void @_ZN9__gnu_cxx13new_allocatorIxE7destroyIxEEvPT_(%"class.__gnu_cxx::new_allocator.2"* %6, i64* %7)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx13new_allocatorIxE7destroyIxEEvPT_(%"class.__gnu_cxx::new_allocator.2"*, i64*) #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::new_allocator.2"*, align 8
  %4 = alloca i64*, align 8
  store %"class.__gnu_cxx::new_allocator.2"* %0, %"class.__gnu_cxx::new_allocator.2"** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %"class.__gnu_cxx::new_allocator.2"*, %"class.__gnu_cxx::new_allocator.2"** %3, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEC2ERKS2_(%"class.__gnu_cxx::__normal_iterator"*, %struct.shop** dereferenceable(8)) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %4 = alloca %struct.shop**, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %3, align 8
  store %struct.shop** %1, %struct.shop*** %4, align 8
  %5 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %3, align 8
  %6 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  %7 = load %struct.shop**, %struct.shop*** %4, align 8
  %8 = load %struct.shop*, %struct.shop** %7, align 8
  store %struct.shop* %8, %struct.shop** %6, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %13, align 8
  %14 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %14, align 8
  %15 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %15, align 8
  %16 = alloca i32
  store i32 -520537768, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %52
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -520537768, label %20
    i32 -1151195944, label %23
    i32 -223488381, label %51
  ]

; <label>:19:                                     ; preds = %17
  br label %52

; <label>:20:                                     ; preds = %17
  %21 = call zeroext i1 @_ZN9__gnu_cxxneIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %4, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  %22 = select i1 %21, i32 -1151195944, i32 -223488381
  store i32 %22, i32* %16
  br label %52

; <label>:23:                                     ; preds = %17
  %24 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  %25 = bitcast %"class.__gnu_cxx::__normal_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 8, i32 8, i1 false)
  %26 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  %27 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 8, i32 8, i1 false)
  %28 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %4) #3
  %29 = call i64 @_ZSt4__lgl(i64 %28)
  %30 = mul nsw i64 %29, 2
  %31 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9 to i8*
  %32 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 8, i32 8, i1 false)
  %33 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  %34 = load %struct.shop*, %struct.shop** %33, align 8
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  %36 = load %struct.shop*, %struct.shop** %35, align 8
  %37 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %9, i32 0, i32 0
  %38 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %37, align 8
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_T1_(%struct.shop* %34, %struct.shop* %36, i64 %30, i1 (%struct.shop*, %struct.shop*)* %38)
  %39 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  %40 = bitcast %"class.__gnu_cxx::__normal_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 8, i32 8, i1 false)
  %41 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %42 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 8, i32 8, i1 false)
  %43 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12 to i8*
  %44 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 8, i32 8, i1 false)
  %45 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %46 = load %struct.shop*, %struct.shop** %45, align 8
  %47 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %48 = load %struct.shop*, %struct.shop** %47, align 8
  %49 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, i32 0, i32 0
  %50 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %49, align 8
  call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %46, %struct.shop* %48, i1 (%struct.shop*, %struct.shop*)* %50)
  store i32 -223488381, i32* %16
  br label %52

; <label>:51:                                     ; preds = %17
  ret void

; <label>:52:                                     ; preds = %23, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops16__iter_comp_iterIPFbRK4shopS4_EEENS0_15_Iter_comp_iterIT_EES8_(i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %3 = alloca i1 (%struct.shop*, %struct.shop*)*, align 8
  store i1 (%struct.shop*, %struct.shop*)* %0, i1 (%struct.shop*, %struct.shop*)** %3, align 8
  %4 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %3, align 8
  call void @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEC2ES6_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, i1 (%struct.shop*, %struct.shop*)* %4)
  %5 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %2, i32 0, i32 0
  %6 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %5, align 8
  ret i1 (%struct.shop*, %struct.shop*)* %6
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxxneIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8)) #4 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.372
  %7 = load i32, i32* @y.373
  %8 = add i32 %6, -1546676628
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, -1546676628
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 634369508, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %76
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 634369508, label %20
    i32 190268911, label %28
    i32 1225201536, label %64
    i32 -1423258185, label %66
  ]

; <label>:19:                                     ; preds = %17
  br label %76

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 190268911, i32 -1423258185
  store i32 %27, i32* %16
  br label %76

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %29, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %30, align 8
  %31 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %29, align 8
  %32 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %31) #3
  %33 = load %struct.shop*, %struct.shop** %32, align 8
  %34 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %30, align 8
  %35 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %34) #3
  %36 = load %struct.shop*, %struct.shop** %35, align 8
  %37 = icmp ne %struct.shop* %33, %36
  store i1 %37, i1* %3
  %38 = load i32, i32* @x.372
  %39 = load i32, i32* @y.373
  %40 = sub i32 0, 1
  %41 = add i32 %38, %40
  %42 = sub i32 %38, 1
  %43 = mul i32 %38, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %39, 10
  %47 = xor i1 %45, true
  %48 = xor i1 %46, true
  %49 = xor i1 true, true
  %50 = and i1 %47, true
  %51 = and i1 %45, %49
  %52 = and i1 %48, true
  %53 = and i1 %46, %49
  %54 = or i1 %50, %51
  %55 = or i1 %52, %53
  %56 = xor i1 %54, %55
  %57 = or i1 %47, %48
  %58 = xor i1 %57, true
  %59 = or i1 true, %49
  %60 = and i1 %58, %59
  %61 = or i1 %56, %60
  %62 = or i1 %45, %46
  %63 = select i1 %61, i32 1225201536, i32 -1423258185
  store i32 %63, i32* %16
  br label %76

; <label>:64:                                     ; preds = %17
  %65 = load volatile i1, i1* %3
  ret i1 %65

; <label>:66:                                     ; preds = %17
  %67 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %68 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %67, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %68, align 8
  %69 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %67, align 8
  %70 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %69) #3
  %71 = load %struct.shop*, %struct.shop** %70, align 8
  %72 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %68, align 8
  %73 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %72) #3
  %74 = load %struct.shop*, %struct.shop** %73, align 8
  %75 = icmp ne %struct.shop* %71, %74
  store i32 190268911, i32* %16
  br label %76

; <label>:76:                                     ; preds = %66, %28, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_T1_(%struct.shop*, %struct.shop*, i64, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %5 = alloca i1
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %9 = alloca i64, align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %13 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %17 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %18 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %19 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %20 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %21 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %21, align 8
  %22 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %22, align 8
  %23 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %3, i1 (%struct.shop*, %struct.shop*)** %23, align 8
  store i64 %2, i64* %9, align 8
  %24 = alloca i32
  store i32 1345769980, i32* %24
  br label %25

; <label>:25:                                     ; preds = %4, %183
  %26 = load i32, i32* %24
  switch i32 %26, label %27 [
    i32 1345769980, label %28
    i32 836764174, label %55
    i32 1070528973, label %72
    i32 -2037416622, label %75
    i32 284264871, label %79
    i32 1205158825, label %95
    i32 -684306706, label %126
    i32 -2002442742, label %127
    i32 -1530126525, label %162
    i32 1100015785, label %163
    i32 911794557, label %166
  ]

; <label>:27:                                     ; preds = %25
  br label %183

; <label>:28:                                     ; preds = %25
  %29 = load i32, i32* @x.374
  %30 = load i32, i32* @y.375
  %31 = sub i32 0, 1
  %32 = add i32 %29, %31
  %33 = sub i32 %29, 1
  %34 = mul i32 %29, %32
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %30, 10
  %38 = xor i1 %36, true
  %39 = xor i1 %37, true
  %40 = xor i1 true, true
  %41 = and i1 %38, true
  %42 = and i1 %36, %40
  %43 = and i1 %39, true
  %44 = and i1 %37, %40
  %45 = or i1 %41, %42
  %46 = or i1 %43, %44
  %47 = xor i1 %45, %46
  %48 = or i1 %38, %39
  %49 = xor i1 %48, true
  %50 = or i1 true, %40
  %51 = and i1 %49, %50
  %52 = or i1 %47, %51
  %53 = or i1 %36, %37
  %54 = select i1 %52, i32 836764174, i32 1100015785
  store i32 %54, i32* %24
  br label %183

; <label>:55:                                     ; preds = %25
  %56 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %7, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6) #3
  %57 = icmp sgt i64 %56, 16
  store i1 %57, i1* %5
  %58 = load i32, i32* @x.374
  %59 = load i32, i32* @y.375
  %60 = sub i32 0, 1
  %61 = add i32 %58, %60
  %62 = sub i32 %58, 1
  %63 = mul i32 %58, %61
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %59, 10
  %67 = and i1 %65, %66
  %68 = xor i1 %65, %66
  %69 = or i1 %67, %68
  %70 = or i1 %65, %66
  %71 = select i1 %69, i32 1070528973, i32 1100015785
  store i32 %71, i32* %24
  br label %183

; <label>:72:                                     ; preds = %25
  %73 = load volatile i1, i1* %5
  %74 = select i1 %73, i32 -2037416622, i32 -1530126525
  store i32 %74, i32* %24
  br label %183

; <label>:75:                                     ; preds = %25
  %76 = load i64, i64* %9, align 8
  %77 = icmp eq i64 %76, 0
  %78 = select i1 %77, i32 284264871, i32 -2002442742
  store i32 %78, i32* %24
  br label %183

; <label>:79:                                     ; preds = %25
  %80 = load i32, i32* @x.374
  %81 = load i32, i32* @y.375
  %82 = sub i32 %80, -1256448726
  %83 = sub i32 %82, 1
  %84 = add i32 %83, -1256448726
  %85 = sub i32 %80, 1
  %86 = mul i32 %80, %84
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %81, 10
  %90 = and i1 %88, %89
  %91 = xor i1 %88, %89
  %92 = or i1 %90, %91
  %93 = or i1 %88, %89
  %94 = select i1 %92, i32 1205158825, i32 911794557
  store i32 %94, i32* %24
  br label %183

; <label>:95:                                     ; preds = %25
  %96 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  %97 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %96, i8* %97, i64 8, i32 8, i1 false)
  %98 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %99 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %98, i8* %99, i64 8, i32 8, i1 false)
  %100 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  %101 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 8, i32 8, i1 false)
  %102 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %13 to i8*
  %103 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %102, i8* %103, i64 8, i32 8, i1 false)
  %104 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %105 = load %struct.shop*, %struct.shop** %104, align 8
  %106 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %107 = load %struct.shop*, %struct.shop** %106, align 8
  %108 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  %109 = load %struct.shop*, %struct.shop** %108, align 8
  %110 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %13, i32 0, i32 0
  %111 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %110, align 8
  call void @_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_(%struct.shop* %105, %struct.shop* %107, %struct.shop* %109, i1 (%struct.shop*, %struct.shop*)* %111)
  %112 = load i32, i32* @x.374
  %113 = load i32, i32* @y.375
  %114 = sub i32 0, 1
  %115 = add i32 %112, %114
  %116 = sub i32 %112, 1
  %117 = mul i32 %112, %115
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %113, 10
  %121 = and i1 %119, %120
  %122 = xor i1 %119, %120
  %123 = or i1 %121, %122
  %124 = or i1 %119, %120
  %125 = select i1 %123, i32 -684306706, i32 911794557
  store i32 %125, i32* %24
  br label %183

; <label>:126:                                    ; preds = %25
  store i32 -1530126525, i32* %24
  br label %183

; <label>:127:                                    ; preds = %25
  %128 = load i64, i64* %9, align 8
  %129 = sub i64 %128, 5573187463836720178
  %130 = add i64 %129, -1
  %131 = add i64 %130, 5573187463836720178
  %132 = add nsw i64 %128, -1
  store i64 %131, i64* %9, align 8
  %133 = bitcast %"class.__gnu_cxx::__normal_iterator"* %15 to i8*
  %134 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %133, i8* %134, i64 8, i32 8, i1 false)
  %135 = bitcast %"class.__gnu_cxx::__normal_iterator"* %16 to i8*
  %136 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %135, i8* %136, i64 8, i32 8, i1 false)
  %137 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %17 to i8*
  %138 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %137, i8* %138, i64 8, i32 8, i1 false)
  %139 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  %140 = load %struct.shop*, %struct.shop** %139, align 8
  %141 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  %142 = load %struct.shop*, %struct.shop** %141, align 8
  %143 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %17, i32 0, i32 0
  %144 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %143, align 8
  %145 = call %struct.shop* @_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEET_SF_SF_T0_(%struct.shop* %140, %struct.shop* %142, i1 (%struct.shop*, %struct.shop*)* %144)
  %146 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  store %struct.shop* %145, %struct.shop** %146, align 8
  %147 = bitcast %"class.__gnu_cxx::__normal_iterator"* %18 to i8*
  %148 = bitcast %"class.__gnu_cxx::__normal_iterator"* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %147, i8* %148, i64 8, i32 8, i1 false)
  %149 = bitcast %"class.__gnu_cxx::__normal_iterator"* %19 to i8*
  %150 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %149, i8* %150, i64 8, i32 8, i1 false)
  %151 = load i64, i64* %9, align 8
  %152 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %20 to i8*
  %153 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %152, i8* %153, i64 8, i32 8, i1 false)
  %154 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %18, i32 0, i32 0
  %155 = load %struct.shop*, %struct.shop** %154, align 8
  %156 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %19, i32 0, i32 0
  %157 = load %struct.shop*, %struct.shop** %156, align 8
  %158 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %20, i32 0, i32 0
  %159 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %158, align 8
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElNS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_T1_(%struct.shop* %155, %struct.shop* %157, i64 %151, i1 (%struct.shop*, %struct.shop*)* %159)
  %160 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  %161 = bitcast %"class.__gnu_cxx::__normal_iterator"* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %161, i64 8, i32 8, i1 false)
  store i32 1345769980, i32* %24
  br label %183

; <label>:162:                                    ; preds = %25
  ret void

; <label>:163:                                    ; preds = %25
  %164 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %7, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6) #3
  %165 = icmp sgt i64 %164, 16
  store i32 836764174, i32* %24
  br label %183

; <label>:166:                                    ; preds = %25
  %167 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  %168 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %167, i8* %168, i64 8, i32 8, i1 false)
  %169 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %170 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %169, i8* %170, i64 8, i32 8, i1 false)
  %171 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  %172 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %172, i64 8, i32 8, i1 false)
  %173 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %13 to i8*
  %174 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %173, i8* %174, i64 8, i32 8, i1 false)
  %175 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %176 = load %struct.shop*, %struct.shop** %175, align 8
  %177 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %178 = load %struct.shop*, %struct.shop** %177, align 8
  %179 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  %180 = load %struct.shop*, %struct.shop** %179, align 8
  %181 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %13, i32 0, i32 0
  %182 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %181, align 8
  call void @_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_(%struct.shop* %176, %struct.shop* %178, %struct.shop* %180, i1 (%struct.shop*, %struct.shop*)* %182)
  store i32 1205158825, i32* %24
  br label %183

; <label>:183:                                    ; preds = %166, %163, %127, %126, %95, %79, %75, %72, %55, %28, %27
  br label %25
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt4__lgl(i64) #4 comdat {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call i64 @llvm.ctlz.i64(i64 %3, i1 true)
  %5 = trunc i64 %4 to i32
  %6 = sext i32 %5 to i64
  %7 = sub i64 0, %6
  %8 = add i64 63, %7
  %9 = sub i64 63, %6
  ret i64 %8
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8)) #4 comdat {
  %3 = alloca i64
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.378
  %7 = load i32, i32* @y.379
  %8 = add i32 %6, -458997169
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, -458997169
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 1040691174, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %136
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 1040691174, label %20
    i32 391719864, label %40
    i32 -1246847167, label %83
    i32 1345385853, label %85
  ]

; <label>:19:                                     ; preds = %17
  br label %136

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 391719864, i32 1345385853
  store i32 %39, i32* %16
  br label %136

; <label>:40:                                     ; preds = %17
  %41 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %42 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %41, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %42, align 8
  %43 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %41, align 8
  %44 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %43) #3
  %45 = load %struct.shop*, %struct.shop** %44, align 8
  %46 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %42, align 8
  %47 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %46) #3
  %48 = load %struct.shop*, %struct.shop** %47, align 8
  %49 = ptrtoint %struct.shop* %45 to i64
  %50 = ptrtoint %struct.shop* %48 to i64
  %51 = sub i64 %49, -490850392231331321
  %52 = sub i64 %51, %50
  %53 = add i64 %52, -490850392231331321
  %54 = sub i64 %49, %50
  %55 = sdiv exact i64 %53, 16
  store i64 %55, i64* %3
  %56 = load i32, i32* @x.378
  %57 = load i32, i32* @y.379
  %58 = sub i32 %56, 3126824
  %59 = sub i32 %58, 1
  %60 = add i32 %59, 3126824
  %61 = sub i32 %56, 1
  %62 = mul i32 %56, %60
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %57, 10
  %66 = xor i1 %64, true
  %67 = xor i1 %65, true
  %68 = xor i1 true, true
  %69 = and i1 %66, true
  %70 = and i1 %64, %68
  %71 = and i1 %67, true
  %72 = and i1 %65, %68
  %73 = or i1 %69, %70
  %74 = or i1 %71, %72
  %75 = xor i1 %73, %74
  %76 = or i1 %66, %67
  %77 = xor i1 %76, true
  %78 = or i1 true, %68
  %79 = and i1 %77, %78
  %80 = or i1 %75, %79
  %81 = or i1 %64, %65
  %82 = select i1 %80, i32 -1246847167, i32 1345385853
  store i32 %82, i32* %16
  br label %136

; <label>:83:                                     ; preds = %17
  %84 = load volatile i64, i64* %3
  ret i64 %84

; <label>:85:                                     ; preds = %17
  %86 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %87 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %86, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %87, align 8
  %88 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %86, align 8
  %89 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %88) #3
  %90 = load %struct.shop*, %struct.shop** %89, align 8
  %91 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %87, align 8
  %92 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %91) #3
  %93 = load %struct.shop*, %struct.shop** %92, align 8
  %94 = ptrtoint %struct.shop* %90 to i64
  %95 = ptrtoint %struct.shop* %93 to i64
  %96 = sub i64 0, -3490240785958904663
  %97 = sub i64 %96, %94
  %98 = add i64 %97, -3490240785958904663
  %99 = sub i64 0, %94
  %100 = sub i64 0, %95
  %101 = sub i64 %98, %100
  %102 = add i64 %98, %95
  %103 = shl i64 %94, %95
  %104 = shl i64 %94, %95
  %105 = add i64 %94, -5663792022265263762
  %106 = sub i64 %105, %95
  %107 = sub i64 %106, -5663792022265263762
  %108 = sub i64 %94, %95
  %109 = sub i64 0, 94122171845107336
  %110 = sub i64 %109, %107
  %111 = add i64 %110, 94122171845107336
  %112 = sub i64 0, %107
  %113 = sub i64 %111, 4852291239421746497
  %114 = add i64 %113, 16
  %115 = add i64 %114, 4852291239421746497
  %116 = add i64 %111, 16
  %117 = add i64 0, 2500112681650052618
  %118 = sub i64 %117, %107
  %119 = sub i64 %118, 2500112681650052618
  %120 = sub i64 0, %107
  %121 = sub i64 0, %119
  %122 = sub i64 0, 16
  %123 = add i64 %121, %122
  %124 = sub i64 0, %123
  %125 = add i64 %119, 16
  %126 = add i64 0, -8825508126162641173
  %127 = sub i64 %126, %107
  %128 = sub i64 %127, -8825508126162641173
  %129 = sub i64 0, %107
  %130 = sub i64 0, %128
  %131 = sub i64 0, 16
  %132 = add i64 %130, %131
  %133 = sub i64 0, %132
  %134 = add i64 %128, 16
  %135 = sdiv exact i64 %107, 16
  store i32 391719864, i32* %16
  br label %136

; <label>:136:                                    ; preds = %85, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %4 = alloca i1
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %6 = alloca %"class.__gnu_cxx::__normal_iterator"*
  %7 = alloca %"class.__gnu_cxx::__normal_iterator"*
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %9 = alloca %"class.__gnu_cxx::__normal_iterator"*
  %10 = alloca %"class.__gnu_cxx::__normal_iterator"*
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %12 = alloca %"class.__gnu_cxx::__normal_iterator"*
  %13 = alloca %"class.__gnu_cxx::__normal_iterator"*
  %14 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*
  %15 = alloca %"class.__gnu_cxx::__normal_iterator"*
  %16 = alloca %"class.__gnu_cxx::__normal_iterator"*
  %17 = alloca i1
  %18 = alloca i1
  %19 = load i32, i32* @x.380
  %20 = load i32, i32* @y.381
  %21 = add i32 %19, 17624476
  %22 = sub i32 %21, 1
  %23 = sub i32 %22, 17624476
  %24 = sub i32 %19, 1
  %25 = mul i32 %19, %23
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  store i1 %27, i1* %18
  %28 = icmp slt i32 %20, 10
  store i1 %28, i1* %17
  %29 = alloca i32
  store i32 1199940150, i32* %29
  br label %30

; <label>:30:                                     ; preds = %3, %231
  %31 = load i32, i32* %29
  switch i32 %31, label %32 [
    i32 1199940150, label %33
    i32 -1119882672, label %53
    i32 54457463, label %91
    i32 795055274, label %94
    i32 -1013774300, label %137
    i32 -19423801, label %152
    i32 1577555800, label %189
    i32 750825, label %190
    i32 -2055557753, label %191
    i32 2095457227, label %209
  ]

; <label>:32:                                     ; preds = %30
  br label %231

; <label>:33:                                     ; preds = %30
  %34 = load volatile i1, i1* %18
  %35 = load volatile i1, i1* %17
  %36 = xor i1 %34, true
  %37 = xor i1 %35, true
  %38 = xor i1 false, true
  %39 = and i1 %36, false
  %40 = and i1 %34, %38
  %41 = and i1 %37, false
  %42 = and i1 %35, %38
  %43 = or i1 %39, %40
  %44 = or i1 %41, %42
  %45 = xor i1 %43, %44
  %46 = or i1 %36, %37
  %47 = xor i1 %46, true
  %48 = or i1 false, %38
  %49 = and i1 %47, %48
  %50 = or i1 %45, %49
  %51 = or i1 %34, %35
  %52 = select i1 %50, i32 -1119882672, i32 -2055557753
  store i32 %52, i32* %29
  br label %231

; <label>:53:                                     ; preds = %30
  %54 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.__gnu_cxx::__normal_iterator"* %54, %"class.__gnu_cxx::__normal_iterator"** %16
  %55 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.__gnu_cxx::__normal_iterator"* %55, %"class.__gnu_cxx::__normal_iterator"** %15
  %56 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %56, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %14
  %57 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.__gnu_cxx::__normal_iterator"* %57, %"class.__gnu_cxx::__normal_iterator"** %13
  %58 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.__gnu_cxx::__normal_iterator"* %58, %"class.__gnu_cxx::__normal_iterator"** %12
  %59 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %59, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11
  %60 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.__gnu_cxx::__normal_iterator"* %60, %"class.__gnu_cxx::__normal_iterator"** %10
  %61 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.__gnu_cxx::__normal_iterator"* %61, %"class.__gnu_cxx::__normal_iterator"** %9
  %62 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %62, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8
  %63 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.__gnu_cxx::__normal_iterator"* %63, %"class.__gnu_cxx::__normal_iterator"** %7
  %64 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  store %"class.__gnu_cxx::__normal_iterator"* %64, %"class.__gnu_cxx::__normal_iterator"** %6
  %65 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %65, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %5
  %66 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %16
  %67 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %66, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %67, align 8
  %68 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %15
  %69 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %68, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %69, align 8
  %70 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %14
  %71 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %70, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %71, align 8
  %72 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %16
  %73 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %15
  %74 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %73, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %72) #3
  %75 = icmp sgt i64 %74, 16
  store i1 %75, i1* %4
  %76 = load i32, i32* @x.380
  %77 = load i32, i32* @y.381
  %78 = add i32 %76, 31019831
  %79 = sub i32 %78, 1
  %80 = sub i32 %79, 31019831
  %81 = sub i32 %76, 1
  %82 = mul i32 %76, %80
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %77, 10
  %86 = and i1 %84, %85
  %87 = xor i1 %84, %85
  %88 = or i1 %86, %87
  %89 = or i1 %84, %85
  %90 = select i1 %88, i32 54457463, i32 -2055557753
  store i32 %90, i32* %29
  br label %231

; <label>:91:                                     ; preds = %30
  %92 = load volatile i1, i1* %4
  %93 = select i1 %92, i32 795055274, i32 -1013774300
  store i32 %93, i32* %29
  br label %231

; <label>:94:                                     ; preds = %30
  %95 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %13
  %96 = bitcast %"class.__gnu_cxx::__normal_iterator"* %95 to i8*
  %97 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %16
  %98 = bitcast %"class.__gnu_cxx::__normal_iterator"* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %96, i8* %98, i64 8, i32 8, i1 false)
  %99 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %16
  %100 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %99, i64 16) #3
  %101 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %12
  %102 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %101, i32 0, i32 0
  store %struct.shop* %100, %struct.shop** %102, align 8
  %103 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11
  %104 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %103 to i8*
  %105 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %14
  %106 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %104, i8* %106, i64 8, i32 8, i1 false)
  %107 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %13
  %108 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %107, i32 0, i32 0
  %109 = load %struct.shop*, %struct.shop** %108, align 8
  %110 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %12
  %111 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %110, i32 0, i32 0
  %112 = load %struct.shop*, %struct.shop** %111, align 8
  %113 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %11
  %114 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %113, i32 0, i32 0
  %115 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %114, align 8
  call void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %109, %struct.shop* %112, i1 (%struct.shop*, %struct.shop*)* %115)
  %116 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %16
  %117 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %116, i64 16) #3
  %118 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %10
  %119 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %118, i32 0, i32 0
  store %struct.shop* %117, %struct.shop** %119, align 8
  %120 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %9
  %121 = bitcast %"class.__gnu_cxx::__normal_iterator"* %120 to i8*
  %122 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %15
  %123 = bitcast %"class.__gnu_cxx::__normal_iterator"* %122 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %123, i64 8, i32 8, i1 false)
  %124 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8
  %125 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %124 to i8*
  %126 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %14
  %127 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %126 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %125, i8* %127, i64 8, i32 8, i1 false)
  %128 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %10
  %129 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %128, i32 0, i32 0
  %130 = load %struct.shop*, %struct.shop** %129, align 8
  %131 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %9
  %132 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %131, i32 0, i32 0
  %133 = load %struct.shop*, %struct.shop** %132, align 8
  %134 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %8
  %135 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %134, i32 0, i32 0
  %136 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %135, align 8
  call void @_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %130, %struct.shop* %133, i1 (%struct.shop*, %struct.shop*)* %136)
  store i32 750825, i32* %29
  br label %231

; <label>:137:                                    ; preds = %30
  %138 = load i32, i32* @x.380
  %139 = load i32, i32* @y.381
  %140 = sub i32 0, 1
  %141 = add i32 %138, %140
  %142 = sub i32 %138, 1
  %143 = mul i32 %138, %141
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %139, 10
  %147 = and i1 %145, %146
  %148 = xor i1 %145, %146
  %149 = or i1 %147, %148
  %150 = or i1 %145, %146
  %151 = select i1 %149, i32 -19423801, i32 2095457227
  store i32 %151, i32* %29
  br label %231

; <label>:152:                                    ; preds = %30
  %153 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %7
  %154 = bitcast %"class.__gnu_cxx::__normal_iterator"* %153 to i8*
  %155 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %16
  %156 = bitcast %"class.__gnu_cxx::__normal_iterator"* %155 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %154, i8* %156, i64 8, i32 8, i1 false)
  %157 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %6
  %158 = bitcast %"class.__gnu_cxx::__normal_iterator"* %157 to i8*
  %159 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %15
  %160 = bitcast %"class.__gnu_cxx::__normal_iterator"* %159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %158, i8* %160, i64 8, i32 8, i1 false)
  %161 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %5
  %162 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %161 to i8*
  %163 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %14
  %164 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %163 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %162, i8* %164, i64 8, i32 8, i1 false)
  %165 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %7
  %166 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %165, i32 0, i32 0
  %167 = load %struct.shop*, %struct.shop** %166, align 8
  %168 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %6
  %169 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %168, i32 0, i32 0
  %170 = load %struct.shop*, %struct.shop** %169, align 8
  %171 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %5
  %172 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %171, i32 0, i32 0
  %173 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %172, align 8
  call void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %167, %struct.shop* %170, i1 (%struct.shop*, %struct.shop*)* %173)
  %174 = load i32, i32* @x.380
  %175 = load i32, i32* @y.381
  %176 = sub i32 %174, 1192734648
  %177 = sub i32 %176, 1
  %178 = add i32 %177, 1192734648
  %179 = sub i32 %174, 1
  %180 = mul i32 %174, %178
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %175, 10
  %184 = and i1 %182, %183
  %185 = xor i1 %182, %183
  %186 = or i1 %184, %185
  %187 = or i1 %182, %183
  %188 = select i1 %186, i32 1577555800, i32 2095457227
  store i32 %188, i32* %29
  br label %231

; <label>:189:                                    ; preds = %30
  store i32 750825, i32* %29
  br label %231

; <label>:190:                                    ; preds = %30
  ret void

; <label>:191:                                    ; preds = %30
  %192 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %193 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %194 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %195 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %196 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %197 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %198 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %199 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %200 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %201 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %202 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %203 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %204 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %192, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %204, align 8
  %205 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %193, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %205, align 8
  %206 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %194, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %206, align 8
  %207 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %193, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %192) #3
  %208 = icmp sgt i64 %207, 16
  store i32 -1119882672, i32* %29
  br label %231

; <label>:209:                                    ; preds = %30
  %210 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %7
  %211 = bitcast %"class.__gnu_cxx::__normal_iterator"* %210 to i8*
  %212 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %16
  %213 = bitcast %"class.__gnu_cxx::__normal_iterator"* %212 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %211, i8* %213, i64 8, i32 8, i1 false)
  %214 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %6
  %215 = bitcast %"class.__gnu_cxx::__normal_iterator"* %214 to i8*
  %216 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %15
  %217 = bitcast %"class.__gnu_cxx::__normal_iterator"* %216 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %215, i8* %217, i64 8, i32 8, i1 false)
  %218 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %5
  %219 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %218 to i8*
  %220 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %14
  %221 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %220 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %219, i8* %221, i64 8, i32 8, i1 false)
  %222 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %7
  %223 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %222, i32 0, i32 0
  %224 = load %struct.shop*, %struct.shop** %223, align 8
  %225 = load volatile %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %6
  %226 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %225, i32 0, i32 0
  %227 = load %struct.shop*, %struct.shop** %226, align 8
  %228 = load volatile %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %5
  %229 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %228, i32 0, i32 0
  %230 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %229, align 8
  call void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %224, %struct.shop* %227, i1 (%struct.shop*, %struct.shop*)* %230)
  store i32 -19423801, i32* %29
  br label %231

; <label>:231:                                    ; preds = %209, %191, %189, %152, %137, %94, %91, %53, %33, %32
  br label %30
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %3 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  ret %struct.shop** %4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_(%struct.shop*, %struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %16 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %16, align 8
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %17, align 8
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %18, align 8
  %19 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %3, i1 (%struct.shop*, %struct.shop*)** %19, align 8
  %20 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  %21 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 8, i32 8, i1 false)
  %22 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  %23 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 8, i32 8, i1 false)
  %24 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %25 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 8, i32 8, i1 false)
  %26 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12 to i8*
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 8, i32 8, i1 false)
  %28 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %29 = load %struct.shop*, %struct.shop** %28, align 8
  %30 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %31 = load %struct.shop*, %struct.shop** %30, align 8
  %32 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %33 = load %struct.shop*, %struct.shop** %32, align 8
  %34 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, i32 0, i32 0
  %35 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %34, align 8
  call void @_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_(%struct.shop* %29, %struct.shop* %31, %struct.shop* %33, i1 (%struct.shop*, %struct.shop*)* %35)
  %36 = bitcast %"class.__gnu_cxx::__normal_iterator"* %13 to i8*
  %37 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 8, i32 8, i1 false)
  %38 = bitcast %"class.__gnu_cxx::__normal_iterator"* %14 to i8*
  %39 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 8, i32 8, i1 false)
  %40 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %15 to i8*
  %41 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 8, i32 8, i1 false)
  %42 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %13, i32 0, i32 0
  %43 = load %struct.shop*, %struct.shop** %42, align 8
  %44 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  %45 = load %struct.shop*, %struct.shop** %44, align 8
  %46 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %15, i32 0, i32 0
  %47 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %46, align 8
  call void @_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %43, %struct.shop* %45, i1 (%struct.shop*, %struct.shop*)* %47)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEET_SF_SF_T0_(%struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %13 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %17 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %18, align 8
  %19 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %19, align 8
  %20 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %20, align 8
  %21 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  %22 = sdiv i64 %21, 2
  %23 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %5, i64 %22) #3
  %24 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  store %struct.shop* %23, %struct.shop** %24, align 8
  %25 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  %26 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 8, i32 8, i1 false)
  %27 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %5, i64 1) #3
  %28 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  store %struct.shop* %27, %struct.shop** %28, align 8
  %29 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %30 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 8, i32 8, i1 false)
  %31 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmiEl(%"class.__gnu_cxx::__normal_iterator"* %6, i64 1) #3
  %32 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  store %struct.shop* %31, %struct.shop** %32, align 8
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %13 to i8*
  %34 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 8, i32 8, i1 false)
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %36 = load %struct.shop*, %struct.shop** %35, align 8
  %37 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %38 = load %struct.shop*, %struct.shop** %37, align 8
  %39 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %40 = load %struct.shop*, %struct.shop** %39, align 8
  %41 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  %42 = load %struct.shop*, %struct.shop** %41, align 8
  %43 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %13, i32 0, i32 0
  %44 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %43, align 8
  call void @_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_SF_T0_(%struct.shop* %36, %struct.shop* %38, %struct.shop* %40, %struct.shop* %42, i1 (%struct.shop*, %struct.shop*)* %44)
  %45 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %5, i64 1) #3
  %46 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  store %struct.shop* %45, %struct.shop** %46, align 8
  %47 = bitcast %"class.__gnu_cxx::__normal_iterator"* %15 to i8*
  %48 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 8, i32 8, i1 false)
  %49 = bitcast %"class.__gnu_cxx::__normal_iterator"* %16 to i8*
  %50 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* %50, i64 8, i32 8, i1 false)
  %51 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %17 to i8*
  %52 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 8, i32 8, i1 false)
  %53 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  %54 = load %struct.shop*, %struct.shop** %53, align 8
  %55 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  %56 = load %struct.shop*, %struct.shop** %55, align 8
  %57 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  %58 = load %struct.shop*, %struct.shop** %57, align 8
  %59 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %17, i32 0, i32 0
  %60 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %59, align 8
  %61 = call %struct.shop* @_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEET_SF_SF_SF_T0_(%struct.shop* %54, %struct.shop* %56, %struct.shop* %58, i1 (%struct.shop*, %struct.shop*)* %60)
  %62 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  store %struct.shop* %61, %struct.shop** %62, align 8
  %63 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  %64 = load %struct.shop*, %struct.shop** %63, align 8
  ret %struct.shop* %64
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_(%struct.shop*, %struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %17 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %18 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %19 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %19, align 8
  %20 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %20, align 8
  %21 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %21, align 8
  %22 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %3, i1 (%struct.shop*, %struct.shop*)** %22, align 8
  %23 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  %24 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 8, i32 8, i1 false)
  %25 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  %26 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 8, i32 8, i1 false)
  %27 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %28 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 8, i32 8, i1 false)
  %29 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %30 = load %struct.shop*, %struct.shop** %29, align 8
  %31 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %32 = load %struct.shop*, %struct.shop** %31, align 8
  %33 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11, i32 0, i32 0
  %34 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %33, align 8
  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop* %30, %struct.shop* %32, i1 (%struct.shop*, %struct.shop*)* %34)
  %35 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  %36 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 8, i32 8, i1 false)
  %37 = alloca i32
  store i32 -1105268019, i32* %37
  br label %38

; <label>:38:                                     ; preds = %4, %122
  %39 = load i32, i32* %37
  switch i32 %39, label %40 [
    i32 -1105268019, label %41
    i32 1852462850, label %44
    i32 300507280, label %55
    i32 743160212, label %72
    i32 -1691429728, label %73
    i32 1556638120, label %89
    i32 -402044051, label %118
    i32 -1705629947, label %119
    i32 -226626831, label %120
  ]

; <label>:40:                                     ; preds = %38
  br label %122

; <label>:41:                                     ; preds = %38
  %42 = call zeroext i1 @_ZN9__gnu_cxxltIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %12, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %7) #3
  %43 = select i1 %42, i32 1852462850, i32 -1705629947
  store i32 %43, i32* %37
  br label %122

; <label>:44:                                     ; preds = %38
  %45 = bitcast %"class.__gnu_cxx::__normal_iterator"* %13 to i8*
  %46 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 8, i32 8, i1 false)
  %47 = bitcast %"class.__gnu_cxx::__normal_iterator"* %14 to i8*
  %48 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 8, i32 8, i1 false)
  %49 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %13, i32 0, i32 0
  %50 = load %struct.shop*, %struct.shop** %49, align 8
  %51 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  %52 = load %struct.shop*, %struct.shop** %51, align 8
  %53 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8, %struct.shop* %50, %struct.shop* %52)
  %54 = select i1 %53, i32 300507280, i32 743160212
  store i32 %54, i32* %37
  br label %122

; <label>:55:                                     ; preds = %38
  %56 = bitcast %"class.__gnu_cxx::__normal_iterator"* %15 to i8*
  %57 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %57, i64 8, i32 8, i1 false)
  %58 = bitcast %"class.__gnu_cxx::__normal_iterator"* %16 to i8*
  %59 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* %59, i64 8, i32 8, i1 false)
  %60 = bitcast %"class.__gnu_cxx::__normal_iterator"* %17 to i8*
  %61 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %61, i64 8, i32 8, i1 false)
  %62 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %18 to i8*
  %63 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 8, i32 8, i1 false)
  %64 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  %65 = load %struct.shop*, %struct.shop** %64, align 8
  %66 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  %67 = load %struct.shop*, %struct.shop** %66, align 8
  %68 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %17, i32 0, i32 0
  %69 = load %struct.shop*, %struct.shop** %68, align 8
  %70 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %18, i32 0, i32 0
  %71 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %70, align 8
  call void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_(%struct.shop* %65, %struct.shop* %67, %struct.shop* %69, i1 (%struct.shop*, %struct.shop*)* %71)
  store i32 743160212, i32* %37
  br label %122

; <label>:72:                                     ; preds = %38
  store i32 -1691429728, i32* %37
  br label %122

; <label>:73:                                     ; preds = %38
  %74 = load i32, i32* @x.388
  %75 = load i32, i32* @y.389
  %76 = add i32 %74, -795189176
  %77 = sub i32 %76, 1
  %78 = sub i32 %77, -795189176
  %79 = sub i32 %74, 1
  %80 = mul i32 %74, %78
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %75, 10
  %84 = and i1 %82, %83
  %85 = xor i1 %82, %83
  %86 = or i1 %84, %85
  %87 = or i1 %82, %83
  %88 = select i1 %86, i32 1556638120, i32 -226626831
  store i32 %88, i32* %37
  br label %122

; <label>:89:                                     ; preds = %38
  %90 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv(%"class.__gnu_cxx::__normal_iterator"* %12) #3
  %91 = load i32, i32* @x.388
  %92 = load i32, i32* @y.389
  %93 = sub i32 %91, -624945044
  %94 = sub i32 %93, 1
  %95 = add i32 %94, -624945044
  %96 = sub i32 %91, 1
  %97 = mul i32 %91, %95
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %92, 10
  %101 = xor i1 %99, true
  %102 = xor i1 %100, true
  %103 = xor i1 true, true
  %104 = and i1 %101, true
  %105 = and i1 %99, %103
  %106 = and i1 %102, true
  %107 = and i1 %100, %103
  %108 = or i1 %104, %105
  %109 = or i1 %106, %107
  %110 = xor i1 %108, %109
  %111 = or i1 %101, %102
  %112 = xor i1 %111, true
  %113 = or i1 true, %103
  %114 = and i1 %112, %113
  %115 = or i1 %110, %114
  %116 = or i1 %99, %100
  %117 = select i1 %115, i32 -402044051, i32 -226626831
  store i32 %117, i32* %37
  br label %122

; <label>:118:                                    ; preds = %38
  store i32 -1105268019, i32* %37
  br label %122

; <label>:119:                                    ; preds = %38
  ret void

; <label>:120:                                    ; preds = %38
  %121 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv(%"class.__gnu_cxx::__normal_iterator"* %12) #3
  store i32 1556638120, i32* %37
  br label %122

; <label>:122:                                    ; preds = %120, %118, %89, %73, %72, %55, %44, %41, %40
  br label %38
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %4 = alloca i1
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %12, align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %13, align 8
  %14 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %14, align 8
  %15 = alloca i32
  store i32 -419171542, i32* %15
  br label %16

; <label>:16:                                     ; preds = %3, %123
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -419171542, label %19
    i32 1979822670, label %35
    i32 -1813571414, label %53
    i32 -1489726849, label %56
    i32 2087657511, label %74
    i32 -1882629726, label %102
    i32 -112212253, label %118
    i32 -1125851164, label %119
    i32 -1896972431, label %122
  ]

; <label>:18:                                     ; preds = %16
  br label %123

; <label>:19:                                     ; preds = %16
  %20 = load i32, i32* @x.390
  %21 = load i32, i32* @y.391
  %22 = add i32 %20, 1253114057
  %23 = sub i32 %22, 1
  %24 = sub i32 %23, 1253114057
  %25 = sub i32 %20, 1
  %26 = mul i32 %20, %24
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %21, 10
  %30 = and i1 %28, %29
  %31 = xor i1 %28, %29
  %32 = or i1 %30, %31
  %33 = or i1 %28, %29
  %34 = select i1 %32, i32 1979822670, i32 -1125851164
  store i32 %34, i32* %15
  br label %123

; <label>:35:                                     ; preds = %16
  %36 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  %37 = icmp sgt i64 %36, 1
  store i1 %37, i1* %4
  %38 = load i32, i32* @x.390
  %39 = load i32, i32* @y.391
  %40 = sub i32 %38, 1582389633
  %41 = sub i32 %40, 1
  %42 = add i32 %41, 1582389633
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = and i1 %46, %47
  %49 = xor i1 %46, %47
  %50 = or i1 %48, %49
  %51 = or i1 %46, %47
  %52 = select i1 %50, i32 -1813571414, i32 -1125851164
  store i32 %52, i32* %15
  br label %123

; <label>:53:                                     ; preds = %16
  %54 = load volatile i1, i1* %4
  %55 = select i1 %54, i32 -1489726849, i32 2087657511
  store i32 %55, i32* %15
  br label %123

; <label>:56:                                     ; preds = %16
  %57 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv(%"class.__gnu_cxx::__normal_iterator"* %6) #3
  %58 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  %59 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* %59, i64 8, i32 8, i1 false)
  %60 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  %61 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %61, i64 8, i32 8, i1 false)
  %62 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  %63 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 8, i32 8, i1 false)
  %64 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %65 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* %65, i64 8, i32 8, i1 false)
  %66 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  %67 = load %struct.shop*, %struct.shop** %66, align 8
  %68 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %69 = load %struct.shop*, %struct.shop** %68, align 8
  %70 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %71 = load %struct.shop*, %struct.shop** %70, align 8
  %72 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11, i32 0, i32 0
  %73 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %72, align 8
  call void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_(%struct.shop* %67, %struct.shop* %69, %struct.shop* %71, i1 (%struct.shop*, %struct.shop*)* %73)
  store i32 -419171542, i32* %15
  br label %123

; <label>:74:                                     ; preds = %16
  %75 = load i32, i32* @x.390
  %76 = load i32, i32* @y.391
  %77 = add i32 %75, 1606483496
  %78 = sub i32 %77, 1
  %79 = sub i32 %78, 1606483496
  %80 = sub i32 %75, 1
  %81 = mul i32 %75, %79
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %76, 10
  %85 = xor i1 %83, true
  %86 = xor i1 %84, true
  %87 = xor i1 true, true
  %88 = and i1 %85, true
  %89 = and i1 %83, %87
  %90 = and i1 %86, true
  %91 = and i1 %84, %87
  %92 = or i1 %88, %89
  %93 = or i1 %90, %91
  %94 = xor i1 %92, %93
  %95 = or i1 %85, %86
  %96 = xor i1 %95, true
  %97 = or i1 true, %87
  %98 = and i1 %96, %97
  %99 = or i1 %94, %98
  %100 = or i1 %83, %84
  %101 = select i1 %99, i32 -1882629726, i32 -1896972431
  store i32 %101, i32* %15
  br label %123

; <label>:102:                                    ; preds = %16
  %103 = load i32, i32* @x.390
  %104 = load i32, i32* @y.391
  %105 = add i32 %103, -1758910142
  %106 = sub i32 %105, 1
  %107 = sub i32 %106, -1758910142
  %108 = sub i32 %103, 1
  %109 = mul i32 %103, %107
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %104, 10
  %113 = and i1 %111, %112
  %114 = xor i1 %111, %112
  %115 = or i1 %113, %114
  %116 = or i1 %111, %112
  %117 = select i1 %115, i32 -112212253, i32 -1896972431
  store i32 %117, i32* %15
  br label %123

; <label>:118:                                    ; preds = %16
  ret void

; <label>:119:                                    ; preds = %16
  %120 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  %121 = icmp sgt i64 %120, 1
  store i32 1979822670, i32* %15
  br label %123

; <label>:122:                                    ; preds = %16
  store i32 -1882629726, i32* %15
  br label %123

; <label>:123:                                    ; preds = %122, %119, %102, %74, %56, %53, %35, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %4 = alloca i64
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.shop, align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %13 = alloca %struct.shop, align 8
  %14 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %15 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %15, align 8
  %16 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %16, align 8
  %17 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %17, align 8
  %18 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  store i64 %18, i64* %4
  %19 = alloca i32
  store i32 -900599525, i32* %19
  br label %20

; <label>:20:                                     ; preds = %3, %139
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 -900599525, label %23
    i32 1251129716, label %27
    i32 -686665097, label %28
    i32 1595581954, label %43
    i32 -1027758886, label %76
    i32 -1198874735, label %77
    i32 163510605, label %106
    i32 -1746914458, label %107
    i32 1392296929, label %112
    i32 -1303968152, label %113
  ]

; <label>:22:                                     ; preds = %20
  br label %139

; <label>:23:                                     ; preds = %20
  %24 = load volatile i64, i64* %4
  %25 = icmp slt i64 %24, 2
  %26 = select i1 %25, i32 1251129716, i32 -686665097
  store i32 %26, i32* %19
  br label %139

; <label>:27:                                     ; preds = %20
  store i32 1392296929, i32* %19
  br label %139

; <label>:28:                                     ; preds = %20
  %29 = load i32, i32* @x.392
  %30 = load i32, i32* @y.393
  %31 = sub i32 0, 1
  %32 = add i32 %29, %31
  %33 = sub i32 %29, 1
  %34 = mul i32 %29, %32
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %30, 10
  %38 = and i1 %36, %37
  %39 = xor i1 %36, %37
  %40 = or i1 %38, %39
  %41 = or i1 %36, %37
  %42 = select i1 %40, i32 1595581954, i32 -1303968152
  store i32 %42, i32* %19
  br label %139

; <label>:43:                                     ; preds = %20
  %44 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  store i64 %44, i64* %8, align 8
  %45 = load i64, i64* %8, align 8
  %46 = sub i64 0, 2
  %47 = add i64 %45, %46
  %48 = sub nsw i64 %45, 2
  %49 = sdiv i64 %47, 2
  store i64 %49, i64* %9, align 8
  %50 = load i32, i32* @x.392
  %51 = load i32, i32* @y.393
  %52 = sub i32 0, 1
  %53 = add i32 %50, %52
  %54 = sub i32 %50, 1
  %55 = mul i32 %50, %53
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %51, 10
  %59 = xor i1 %57, true
  %60 = xor i1 %58, true
  %61 = xor i1 false, true
  %62 = and i1 %59, false
  %63 = and i1 %57, %61
  %64 = and i1 %60, false
  %65 = and i1 %58, %61
  %66 = or i1 %62, %63
  %67 = or i1 %64, %65
  %68 = xor i1 %66, %67
  %69 = or i1 %59, %60
  %70 = xor i1 %69, true
  %71 = or i1 false, %61
  %72 = and i1 %70, %71
  %73 = or i1 %68, %72
  %74 = or i1 %57, %58
  %75 = select i1 %73, i32 -1027758886, i32 -1303968152
  store i32 %75, i32* %19
  br label %139

; <label>:76:                                     ; preds = %20
  store i32 -1198874735, i32* %19
  br label %139

; <label>:77:                                     ; preds = %20
  %78 = load i64, i64* %9, align 8
  %79 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %5, i64 %78) #3
  %80 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  store %struct.shop* %79, %struct.shop** %80, align 8
  %81 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %11) #3
  %82 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %81) #3
  %83 = bitcast %struct.shop* %10 to i8*
  %84 = bitcast %struct.shop* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %83, i8* %84, i64 16, i32 8, i1 false)
  %85 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  %86 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 8, i32 8, i1 false)
  %87 = load i64, i64* %9, align 8
  %88 = load i64, i64* %8, align 8
  %89 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %10) #3
  %90 = bitcast %struct.shop* %13 to i8*
  %91 = bitcast %struct.shop* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %90, i8* %91, i64 16, i32 8, i1 false)
  %92 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %14 to i8*
  %93 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %92, i8* %93, i64 8, i32 8, i1 false)
  %94 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  %95 = load %struct.shop*, %struct.shop** %94, align 8
  %96 = bitcast %struct.shop* %13 to { i64, i64 }*
  %97 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %96, i32 0, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %96, i32 0, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %14, i32 0, i32 0
  %102 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %101, align 8
  call void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_T0_SG_T1_T2_(%struct.shop* %95, i64 %87, i64 %88, i64 %98, i64 %100, i1 (%struct.shop*, %struct.shop*)* %102)
  %103 = load i64, i64* %9, align 8
  %104 = icmp eq i64 %103, 0
  %105 = select i1 %104, i32 163510605, i32 -1746914458
  store i32 %105, i32* %19
  br label %139

; <label>:106:                                    ; preds = %20
  store i32 1392296929, i32* %19
  br label %139

; <label>:107:                                    ; preds = %20
  %108 = load i64, i64* %9, align 8
  %109 = sub i64 0, -1
  %110 = sub i64 %108, %109
  %111 = add nsw i64 %108, -1
  store i64 %110, i64* %9, align 8
  store i32 -1198874735, i32* %19
  br label %139

; <label>:112:                                    ; preds = %20
  ret void

; <label>:113:                                    ; preds = %20
  %114 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  store i64 %114, i64* %8, align 8
  %115 = load i64, i64* %8, align 8
  %116 = shl i64 %115, 2
  %117 = sub i64 0, 2
  %118 = add i64 %115, %117
  %119 = sub nsw i64 %115, 2
  %120 = shl i64 %118, 2
  %121 = sub i64 %118, 5063280499889282190
  %122 = sub i64 %121, 2
  %123 = add i64 %122, 5063280499889282190
  %124 = sub i64 %118, 2
  %125 = mul i64 %123, 2
  %126 = add i64 0, -7833084196034375334
  %127 = sub i64 %126, %118
  %128 = sub i64 %127, -7833084196034375334
  %129 = sub i64 0, %118
  %130 = sub i64 %128, 3509123769144011069
  %131 = add i64 %130, 2
  %132 = add i64 %131, 3509123769144011069
  %133 = add i64 %128, 2
  %134 = sub i64 0, 2
  %135 = add i64 %118, %134
  %136 = sub i64 %118, 2
  %137 = mul i64 %135, 2
  %138 = sdiv i64 %118, 2
  store i64 %138, i64* %9, align 8
  store i32 1595581954, i32* %19
  br label %139

; <label>:139:                                    ; preds = %113, %107, %106, %77, %76, %43, %28, %27, %23, %22
  br label %20
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxxltIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8)) #4 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.394
  %7 = load i32, i32* @y.395
  %8 = sub i32 %6, -1436144065
  %9 = sub i32 %8, 1
  %10 = add i32 %9, -1436144065
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 -111982052, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %77
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -111982052, label %20
    i32 -1545550051, label %40
    i32 1069042274, label %65
    i32 861630288, label %67
  ]

; <label>:19:                                     ; preds = %17
  br label %77

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 -1545550051, i32 861630288
  store i32 %39, i32* %16
  br label %77

; <label>:40:                                     ; preds = %17
  %41 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %42 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %41, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %42, align 8
  %43 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %41, align 8
  %44 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %43) #3
  %45 = load %struct.shop*, %struct.shop** %44, align 8
  %46 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %42, align 8
  %47 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %46) #3
  %48 = load %struct.shop*, %struct.shop** %47, align 8
  %49 = icmp ult %struct.shop* %45, %48
  store i1 %49, i1* %3
  %50 = load i32, i32* @x.394
  %51 = load i32, i32* @y.395
  %52 = sub i32 %50, 1478674412
  %53 = sub i32 %52, 1
  %54 = add i32 %53, 1478674412
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = and i1 %58, %59
  %61 = xor i1 %58, %59
  %62 = or i1 %60, %61
  %63 = or i1 %58, %59
  %64 = select i1 %62, i32 1069042274, i32 861630288
  store i32 %64, i32* %16
  br label %77

; <label>:65:                                     ; preds = %17
  %66 = load volatile i1, i1* %3
  ret i1 %66

; <label>:67:                                     ; preds = %17
  %68 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %69 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %68, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %69, align 8
  %70 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %68, align 8
  %71 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %70) #3
  %72 = load %struct.shop*, %struct.shop** %71, align 8
  %73 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %69, align 8
  %74 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %73) #3
  %75 = load %struct.shop*, %struct.shop** %74, align 8
  %76 = icmp ult %struct.shop* %72, %75
  store i32 -1545550051, i32* %16
  br label %77

; <label>:77:                                     ; preds = %67, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %struct.shop*, %struct.shop*) #0 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.396
  %8 = load i32, i32* @y.397
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 -2109710680, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %81
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -2109710680, label %20
    i32 1335154185, label %28
    i32 -964648124, label %67
    i32 -1177670860, label %69
  ]

; <label>:19:                                     ; preds = %17
  br label %81

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 1335154185, i32 -1177670860
  store i32 %27, i32* %16
  br label %81

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %31 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %32 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %29, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %32, align 8
  %33 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %30, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %33, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %31, align 8
  %34 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %31, align 8
  %35 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %34, i32 0, i32 0
  %36 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %35, align 8
  %37 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %29) #3
  %38 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %30) #3
  %39 = call zeroext i1 %36(%struct.shop* dereferenceable(16) %37, %struct.shop* dereferenceable(16) %38)
  store i1 %39, i1* %4
  %40 = load i32, i32* @x.396
  %41 = load i32, i32* @y.397
  %42 = sub i32 %40, -1936393120
  %43 = sub i32 %42, 1
  %44 = add i32 %43, -1936393120
  %45 = sub i32 %40, 1
  %46 = mul i32 %40, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %41, 10
  %50 = xor i1 %48, true
  %51 = xor i1 %49, true
  %52 = xor i1 false, true
  %53 = and i1 %50, false
  %54 = and i1 %48, %52
  %55 = and i1 %51, false
  %56 = and i1 %49, %52
  %57 = or i1 %53, %54
  %58 = or i1 %55, %56
  %59 = xor i1 %57, %58
  %60 = or i1 %50, %51
  %61 = xor i1 %60, true
  %62 = or i1 false, %52
  %63 = and i1 %61, %62
  %64 = or i1 %59, %63
  %65 = or i1 %48, %49
  %66 = select i1 %64, i32 -964648124, i32 -1177670860
  store i32 %66, i32* %16
  br label %81

; <label>:67:                                     ; preds = %17
  %68 = load volatile i1, i1* %4
  ret i1 %68

; <label>:69:                                     ; preds = %17
  %70 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %71 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %72 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %73 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %70, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %73, align 8
  %74 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %71, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %74, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %72, align 8
  %75 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %72, align 8
  %76 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %75, i32 0, i32 0
  %77 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %76, align 8
  %78 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %70) #3
  %79 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %71) #3
  %80 = call zeroext i1 %77(%struct.shop* dereferenceable(16) %78, %struct.shop* dereferenceable(16) %79)
  store i32 1335154185, i32* %16
  br label %81

; <label>:81:                                     ; preds = %69, %28, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_T0_(%struct.shop*, %struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %9 = alloca %struct.shop, align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %struct.shop, align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %13, align 8
  %14 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %14, align 8
  %15 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %15, align 8
  %16 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %3, i1 (%struct.shop*, %struct.shop*)** %16, align 8
  %17 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %7) #3
  %18 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %17) #3
  %19 = bitcast %struct.shop* %9 to i8*
  %20 = bitcast %struct.shop* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 16, i32 8, i1 false)
  %21 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %5) #3
  %22 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %21) #3
  %23 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %7) #3
  %24 = bitcast %struct.shop* %23 to i8*
  %25 = bitcast %struct.shop* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false)
  %26 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  %27 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 8, i32 8, i1 false)
  %28 = call i64 @_ZN9__gnu_cxxmiIP4shopSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  %29 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %9) #3
  %30 = bitcast %struct.shop* %11 to i8*
  %31 = bitcast %struct.shop* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false)
  %32 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12 to i8*
  %33 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 8, i32 8, i1 false)
  %34 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %35 = load %struct.shop*, %struct.shop** %34, align 8
  %36 = bitcast %struct.shop* %11 to { i64, i64 }*
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, i32 0, i32 0
  %42 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %41, align 8
  call void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_T0_SG_T1_T2_(%struct.shop* %35, i64 0, i64 %28, i64 %38, i64 %40, i1 (%struct.shop*, %struct.shop*)* %42)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv(%"class.__gnu_cxx::__normal_iterator"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %3 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  %5 = load %struct.shop*, %struct.shop** %4, align 8
  %6 = getelementptr inbounds %struct.shop, %struct.shop* %5, i32 1
  store %struct.shop* %6, %struct.shop** %4, align 8
  ret %"class.__gnu_cxx::__normal_iterator"* %3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"*, i64) #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.shop*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %4, align 8
  store i64 %1, i64* %5, align 8
  %7 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %4, align 8
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  %9 = load %struct.shop*, %struct.shop** %8, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds %struct.shop, %struct.shop* %9, i64 %10
  store %struct.shop* %11, %struct.shop** %6, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEC2ERKS2_(%"class.__gnu_cxx::__normal_iterator"* %3, %struct.shop** dereferenceable(8) %6) #3
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  %13 = load %struct.shop*, %struct.shop** %12, align 8
  ret %struct.shop* %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %3 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  %5 = load %struct.shop*, %struct.shop** %4, align 8
  ret %struct.shop* %5
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_T0_SG_T1_T2_(%struct.shop*, i64, i64, i64, i64, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %7 = alloca i1
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %struct.shop, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %17 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %18 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %19 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %20 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %21 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %22 = alloca %struct.shop, align 8
  %23 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 8
  %24 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %25 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %25, align 8
  %26 = bitcast %struct.shop* %9 to { i64, i64 }*
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0
  store i64 %3, i64* %27, align 8
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1
  store i64 %4, i64* %28, align 8
  %29 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %5, i1 (%struct.shop*, %struct.shop*)** %29, align 8
  store i64 %1, i64* %11, align 8
  store i64 %2, i64* %12, align 8
  %30 = load i64, i64* %11, align 8
  store i64 %30, i64* %13, align 8
  %31 = load i64, i64* %11, align 8
  store i64 %31, i64* %14, align 8
  %32 = alloca i32
  store i32 1083479921, i32* %32
  br label %33

; <label>:33:                                     ; preds = %6, %505
  %34 = load i32, i32* %32
  switch i32 %34, label %35 [
    i32 1083479921, label %36
    i32 12059312, label %64
    i32 111135180, label %99
    i32 632603927, label %102
    i32 44054058, label %125
    i32 1211020395, label %131
    i32 -1960907803, label %144
    i32 554783735, label %152
    i32 672574301, label %162
    i32 -491758445, label %189
    i32 1393623483, label %230
    i32 1694342340, label %231
    i32 1711462698, label %247
    i32 779249811, label %284
    i32 1137150958, label %285
    i32 1674232378, label %308
    i32 1505451147, label %482
  ]

; <label>:35:                                     ; preds = %33
  br label %505

; <label>:36:                                     ; preds = %33
  %37 = load i32, i32* @x.406
  %38 = load i32, i32* @y.407
  %39 = add i32 %37, 722748733
  %40 = sub i32 %39, 1
  %41 = sub i32 %40, 722748733
  %42 = sub i32 %37, 1
  %43 = mul i32 %37, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %38, 10
  %47 = xor i1 %45, true
  %48 = xor i1 %46, true
  %49 = xor i1 false, true
  %50 = and i1 %47, false
  %51 = and i1 %45, %49
  %52 = and i1 %48, false
  %53 = and i1 %46, %49
  %54 = or i1 %50, %51
  %55 = or i1 %52, %53
  %56 = xor i1 %54, %55
  %57 = or i1 %47, %48
  %58 = xor i1 %57, true
  %59 = or i1 false, %49
  %60 = and i1 %58, %59
  %61 = or i1 %56, %60
  %62 = or i1 %45, %46
  %63 = select i1 %61, i32 12059312, i32 1137150958
  store i32 %63, i32* %32
  br label %505

; <label>:64:                                     ; preds = %33
  %65 = load i64, i64* %14, align 8
  %66 = load i64, i64* %12, align 8
  %67 = add i64 %66, 752392845901771832
  %68 = sub i64 %67, 1
  %69 = sub i64 %68, 752392845901771832
  %70 = sub nsw i64 %66, 1
  %71 = sdiv i64 %69, 2
  %72 = icmp slt i64 %65, %71
  store i1 %72, i1* %7
  %73 = load i32, i32* @x.406
  %74 = load i32, i32* @y.407
  %75 = sub i32 0, 1
  %76 = add i32 %73, %75
  %77 = sub i32 %73, 1
  %78 = mul i32 %73, %76
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %74, 10
  %82 = xor i1 %80, true
  %83 = xor i1 %81, true
  %84 = xor i1 false, true
  %85 = and i1 %82, false
  %86 = and i1 %80, %84
  %87 = and i1 %83, false
  %88 = and i1 %81, %84
  %89 = or i1 %85, %86
  %90 = or i1 %87, %88
  %91 = xor i1 %89, %90
  %92 = or i1 %82, %83
  %93 = xor i1 %92, true
  %94 = or i1 false, %84
  %95 = and i1 %93, %94
  %96 = or i1 %91, %95
  %97 = or i1 %80, %81
  %98 = select i1 %96, i32 111135180, i32 1137150958
  store i32 %98, i32* %32
  br label %505

; <label>:99:                                     ; preds = %33
  %100 = load volatile i1, i1* %7
  %101 = select i1 %100, i32 632603927, i32 -1960907803
  store i32 %101, i32* %32
  br label %505

; <label>:102:                                    ; preds = %33
  %103 = load i64, i64* %14, align 8
  %104 = sub i64 %103, 3761749280393187320
  %105 = add i64 %104, 1
  %106 = add i64 %105, 3761749280393187320
  %107 = add nsw i64 %103, 1
  %108 = mul nsw i64 2, %106
  store i64 %108, i64* %14, align 8
  %109 = load i64, i64* %14, align 8
  %110 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %109) #3
  %111 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  store %struct.shop* %110, %struct.shop** %111, align 8
  %112 = load i64, i64* %14, align 8
  %113 = add i64 %112, 456216008405154060
  %114 = sub i64 %113, 1
  %115 = sub i64 %114, 456216008405154060
  %116 = sub nsw i64 %112, 1
  %117 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %115) #3
  %118 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  store %struct.shop* %117, %struct.shop** %118, align 8
  %119 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  %120 = load %struct.shop*, %struct.shop** %119, align 8
  %121 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  %122 = load %struct.shop*, %struct.shop** %121, align 8
  %123 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10, %struct.shop* %120, %struct.shop* %122)
  %124 = select i1 %123, i32 44054058, i32 1211020395
  store i32 %124, i32* %32
  br label %505

; <label>:125:                                    ; preds = %33
  %126 = load i64, i64* %14, align 8
  %127 = sub i64 %126, -1361904875933688960
  %128 = add i64 %127, -1
  %129 = add i64 %128, -1361904875933688960
  %130 = add nsw i64 %126, -1
  store i64 %129, i64* %14, align 8
  store i32 1211020395, i32* %32
  br label %505

; <label>:131:                                    ; preds = %33
  %132 = load i64, i64* %14, align 8
  %133 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %132) #3
  %134 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %17, i32 0, i32 0
  store %struct.shop* %133, %struct.shop** %134, align 8
  %135 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %17) #3
  %136 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %135) #3
  %137 = load i64, i64* %11, align 8
  %138 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %137) #3
  %139 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %18, i32 0, i32 0
  store %struct.shop* %138, %struct.shop** %139, align 8
  %140 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %18) #3
  %141 = bitcast %struct.shop* %140 to i8*
  %142 = bitcast %struct.shop* %136 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %141, i8* %142, i64 16, i32 8, i1 false)
  %143 = load i64, i64* %14, align 8
  store i64 %143, i64* %11, align 8
  store i32 1083479921, i32* %32
  br label %505

; <label>:144:                                    ; preds = %33
  %145 = load i64, i64* %12, align 8
  %146 = xor i64 1, -1
  %147 = xor i64 %145, %146
  %148 = and i64 %147, %145
  %149 = and i64 %145, 1
  %150 = icmp eq i64 %148, 0
  %151 = select i1 %150, i32 554783735, i32 1694342340
  store i32 %151, i32* %32
  br label %505

; <label>:152:                                    ; preds = %33
  %153 = load i64, i64* %14, align 8
  %154 = load i64, i64* %12, align 8
  %155 = add i64 %154, 3779100966457061685
  %156 = sub i64 %155, 2
  %157 = sub i64 %156, 3779100966457061685
  %158 = sub nsw i64 %154, 2
  %159 = sdiv i64 %157, 2
  %160 = icmp eq i64 %153, %159
  %161 = select i1 %160, i32 672574301, i32 1694342340
  store i32 %161, i32* %32
  br label %505

; <label>:162:                                    ; preds = %33
  %163 = load i32, i32* @x.406
  %164 = load i32, i32* @y.407
  %165 = sub i32 0, 1
  %166 = add i32 %163, %165
  %167 = sub i32 %163, 1
  %168 = mul i32 %163, %166
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %164, 10
  %172 = xor i1 %170, true
  %173 = xor i1 %171, true
  %174 = xor i1 false, true
  %175 = and i1 %172, false
  %176 = and i1 %170, %174
  %177 = and i1 %173, false
  %178 = and i1 %171, %174
  %179 = or i1 %175, %176
  %180 = or i1 %177, %178
  %181 = xor i1 %179, %180
  %182 = or i1 %172, %173
  %183 = xor i1 %182, true
  %184 = or i1 false, %174
  %185 = and i1 %183, %184
  %186 = or i1 %181, %185
  %187 = or i1 %170, %171
  %188 = select i1 %186, i32 -491758445, i32 1674232378
  store i32 %188, i32* %32
  br label %505

; <label>:189:                                    ; preds = %33
  %190 = load i64, i64* %14, align 8
  %191 = sub i64 %190, 3342320160881189199
  %192 = add i64 %191, 1
  %193 = add i64 %192, 3342320160881189199
  %194 = add nsw i64 %190, 1
  %195 = mul nsw i64 2, %193
  store i64 %195, i64* %14, align 8
  %196 = load i64, i64* %14, align 8
  %197 = add i64 %196, -5217132965384722591
  %198 = sub i64 %197, 1
  %199 = sub i64 %198, -5217132965384722591
  %200 = sub nsw i64 %196, 1
  %201 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %199) #3
  %202 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %19, i32 0, i32 0
  store %struct.shop* %201, %struct.shop** %202, align 8
  %203 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %19) #3
  %204 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %203) #3
  %205 = load i64, i64* %11, align 8
  %206 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %205) #3
  %207 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %20, i32 0, i32 0
  store %struct.shop* %206, %struct.shop** %207, align 8
  %208 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %209 = bitcast %struct.shop* %208 to i8*
  %210 = bitcast %struct.shop* %204 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %209, i8* %210, i64 16, i32 8, i1 false)
  %211 = load i64, i64* %14, align 8
  %212 = sub i64 %211, 5267313442946861248
  %213 = sub i64 %212, 1
  %214 = add i64 %213, 5267313442946861248
  %215 = sub nsw i64 %211, 1
  store i64 %214, i64* %11, align 8
  %216 = load i32, i32* @x.406
  %217 = load i32, i32* @y.407
  %218 = sub i32 0, 1
  %219 = add i32 %216, %218
  %220 = sub i32 %216, 1
  %221 = mul i32 %216, %219
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %217, 10
  %225 = and i1 %223, %224
  %226 = xor i1 %223, %224
  %227 = or i1 %225, %226
  %228 = or i1 %223, %224
  %229 = select i1 %227, i32 1393623483, i32 1674232378
  store i32 %229, i32* %32
  br label %505

; <label>:230:                                    ; preds = %33
  store i32 1694342340, i32* %32
  br label %505

; <label>:231:                                    ; preds = %33
  %232 = load i32, i32* @x.406
  %233 = load i32, i32* @y.407
  %234 = sub i32 %232, -1946191665
  %235 = sub i32 %234, 1
  %236 = add i32 %235, -1946191665
  %237 = sub i32 %232, 1
  %238 = mul i32 %232, %236
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %233, 10
  %242 = and i1 %240, %241
  %243 = xor i1 %240, %241
  %244 = or i1 %242, %243
  %245 = or i1 %240, %241
  %246 = select i1 %244, i32 1711462698, i32 1505451147
  store i32 %246, i32* %32
  br label %505

; <label>:247:                                    ; preds = %33
  %248 = bitcast %"class.__gnu_cxx::__normal_iterator"* %21 to i8*
  %249 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %248, i8* %249, i64 8, i32 8, i1 false)
  %250 = load i64, i64* %11, align 8
  %251 = load i64, i64* %13, align 8
  %252 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %9) #3
  %253 = bitcast %struct.shop* %22 to i8*
  %254 = bitcast %struct.shop* %252 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %253, i8* %254, i64 16, i32 8, i1 false)
  %255 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %24 to i8*
  %256 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %255, i8* %256, i64 8, i32 8, i1 false)
  %257 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %24, i32 0, i32 0
  %258 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %257, align 8
  %259 = call i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops15__iter_comp_valIPFbRK4shopS4_EEENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS8_EE(i1 (%struct.shop*, %struct.shop*)* %258)
  %260 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %23, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %259, i1 (%struct.shop*, %struct.shop*)** %260, align 8
  %261 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %21, i32 0, i32 0
  %262 = load %struct.shop*, %struct.shop** %261, align 8
  %263 = bitcast %struct.shop* %22 to { i64, i64 }*
  %264 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %263, i32 0, i32 0
  %265 = load i64, i64* %264, align 8
  %266 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %263, i32 0, i32 1
  %267 = load i64, i64* %266, align 8
  %268 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %23, i32 0, i32 0
  %269 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %268, align 8
  call void @_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIPFbRKS2_SB_EEEEvT_T0_SG_T1_T2_(%struct.shop* %262, i64 %250, i64 %251, i64 %265, i64 %267, i1 (%struct.shop*, %struct.shop*)* %269)
  %270 = load i32, i32* @x.406
  %271 = load i32, i32* @y.407
  %272 = sub i32 0, 1
  %273 = add i32 %270, %272
  %274 = sub i32 %270, 1
  %275 = mul i32 %270, %273
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %271, 10
  %279 = and i1 %277, %278
  %280 = xor i1 %277, %278
  %281 = or i1 %279, %280
  %282 = or i1 %277, %278
  %283 = select i1 %281, i32 779249811, i32 1505451147
  store i32 %283, i32* %32
  br label %505

; <label>:284:                                    ; preds = %33
  ret void

; <label>:285:                                    ; preds = %33
  %286 = load i64, i64* %14, align 8
  %287 = load i64, i64* %12, align 8
  %288 = shl i64 %287, 1
  %289 = sub i64 0, 1
  %290 = add i64 %287, %289
  %291 = sub i64 %287, 1
  %292 = mul i64 %290, 1
  %293 = shl i64 %287, 1
  %294 = sub i64 %287, 8940989578664558699
  %295 = sub i64 %294, 1
  %296 = add i64 %295, 8940989578664558699
  %297 = sub nsw i64 %287, 1
  %298 = add i64 0, -7380567180778355256
  %299 = sub i64 %298, %296
  %300 = sub i64 %299, -7380567180778355256
  %301 = sub i64 0, %296
  %302 = add i64 %300, 645365521603680219
  %303 = add i64 %302, 2
  %304 = sub i64 %303, 645365521603680219
  %305 = add i64 %300, 2
  %306 = sdiv i64 %296, 2
  %307 = icmp slt i64 %286, %306
  store i32 12059312, i32* %32
  br label %505

; <label>:308:                                    ; preds = %33
  %309 = load i64, i64* %14, align 8
  %310 = sub i64 0, 8580915927723331768
  %311 = sub i64 %310, %309
  %312 = add i64 %311, 8580915927723331768
  %313 = sub i64 0, %309
  %314 = sub i64 0, 1
  %315 = sub i64 %312, %314
  %316 = add i64 %312, 1
  %317 = sub i64 0, %309
  %318 = add i64 0, %317
  %319 = sub i64 0, %309
  %320 = sub i64 %318, -1577315436920016385
  %321 = add i64 %320, 1
  %322 = add i64 %321, -1577315436920016385
  %323 = add i64 %318, 1
  %324 = shl i64 %309, 1
  %325 = shl i64 %309, 1
  %326 = add i64 %309, 8794560112018221899
  %327 = sub i64 %326, 1
  %328 = sub i64 %327, 8794560112018221899
  %329 = sub i64 %309, 1
  %330 = mul i64 %328, 1
  %331 = add i64 0, 9013958671559723725
  %332 = sub i64 %331, %309
  %333 = sub i64 %332, 9013958671559723725
  %334 = sub i64 0, %309
  %335 = add i64 %333, 1645276573842827272
  %336 = add i64 %335, 1
  %337 = sub i64 %336, 1645276573842827272
  %338 = add i64 %333, 1
  %339 = add i64 0, -1304972057560198657
  %340 = sub i64 %339, %309
  %341 = sub i64 %340, -1304972057560198657
  %342 = sub i64 0, %309
  %343 = add i64 %341, -2480446325558460894
  %344 = add i64 %343, 1
  %345 = sub i64 %344, -2480446325558460894
  %346 = add i64 %341, 1
  %347 = add i64 0, 3471512881125833287
  %348 = sub i64 %347, %309
  %349 = sub i64 %348, 3471512881125833287
  %350 = sub i64 0, %309
  %351 = sub i64 %349, 3133697204527957728
  %352 = add i64 %351, 1
  %353 = add i64 %352, 3133697204527957728
  %354 = add i64 %349, 1
  %355 = add i64 %309, -6529570344802809344
  %356 = add i64 %355, 1
  %357 = sub i64 %356, -6529570344802809344
  %358 = add nsw i64 %309, 1
  %359 = sub i64 0, -5858389952957165015
  %360 = sub i64 %359, 2
  %361 = add i64 %360, -5858389952957165015
  %362 = sub i64 0, 2
  %363 = add i64 %361, -7155646401288764872
  %364 = add i64 %363, %357
  %365 = sub i64 %364, -7155646401288764872
  %366 = add i64 %361, %357
  %367 = add i64 2, -4037892674035312077
  %368 = sub i64 %367, %357
  %369 = sub i64 %368, -4037892674035312077
  %370 = sub i64 2, %357
  %371 = mul i64 %369, %357
  %372 = sub i64 0, 2
  %373 = add i64 0, %372
  %374 = sub i64 0, 2
  %375 = sub i64 0, %373
  %376 = sub i64 0, %357
  %377 = add i64 %375, %376
  %378 = sub i64 0, %377
  %379 = add i64 %373, %357
  %380 = sub i64 0, 2
  %381 = add i64 0, %380
  %382 = sub i64 0, 2
  %383 = add i64 %381, 1429573421434577143
  %384 = add i64 %383, %357
  %385 = sub i64 %384, 1429573421434577143
  %386 = add i64 %381, %357
  %387 = add i64 2, 8158456953125861601
  %388 = sub i64 %387, %357
  %389 = sub i64 %388, 8158456953125861601
  %390 = sub i64 2, %357
  %391 = mul i64 %389, %357
  %392 = add i64 2, -1143114867778406465
  %393 = sub i64 %392, %357
  %394 = sub i64 %393, -1143114867778406465
  %395 = sub i64 2, %357
  %396 = mul i64 %394, %357
  %397 = shl i64 2, %357
  %398 = mul nsw i64 2, %357
  store i64 %398, i64* %14, align 8
  %399 = load i64, i64* %14, align 8
  %400 = shl i64 %399, 1
  %401 = shl i64 %399, 1
  %402 = add i64 0, -3850715372966389041
  %403 = sub i64 %402, %399
  %404 = sub i64 %403, -3850715372966389041
  %405 = sub i64 0, %399
  %406 = sub i64 0, 1
  %407 = sub i64 %404, %406
  %408 = add i64 %404, 1
  %409 = sub i64 0, -2694926738782551511
  %410 = sub i64 %409, %399
  %411 = add i64 %410, -2694926738782551511
  %412 = sub i64 0, %399
  %413 = sub i64 0, 1
  %414 = sub i64 %411, %413
  %415 = add i64 %411, 1
  %416 = sub i64 0, %399
  %417 = add i64 0, %416
  %418 = sub i64 0, %399
  %419 = add i64 %417, -5672824876209904000
  %420 = add i64 %419, 1
  %421 = sub i64 %420, -5672824876209904000
  %422 = add i64 %417, 1
  %423 = shl i64 %399, 1
  %424 = sub i64 0, %399
  %425 = add i64 0, %424
  %426 = sub i64 0, %399
  %427 = sub i64 0, 1
  %428 = sub i64 %425, %427
  %429 = add i64 %425, 1
  %430 = add i64 %399, -7650188921640710299
  %431 = sub i64 %430, 1
  %432 = sub i64 %431, -7650188921640710299
  %433 = sub i64 %399, 1
  %434 = mul i64 %432, 1
  %435 = sub i64 %399, 5782870017362422705
  %436 = sub i64 %435, 1
  %437 = add i64 %436, 5782870017362422705
  %438 = sub i64 %399, 1
  %439 = mul i64 %437, 1
  %440 = sub i64 0, 1
  %441 = add i64 %399, %440
  %442 = sub nsw i64 %399, 1
  %443 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %441) #3
  %444 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %19, i32 0, i32 0
  store %struct.shop* %443, %struct.shop** %444, align 8
  %445 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %19) #3
  %446 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %445) #3
  %447 = load i64, i64* %11, align 8
  %448 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %447) #3
  %449 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %20, i32 0, i32 0
  store %struct.shop* %448, %struct.shop** %449, align 8
  %450 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %20) #3
  %451 = bitcast %struct.shop* %450 to i8*
  %452 = bitcast %struct.shop* %446 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %451, i8* %452, i64 16, i32 8, i1 false)
  %453 = load i64, i64* %14, align 8
  %454 = sub i64 0, 1
  %455 = add i64 %453, %454
  %456 = sub i64 %453, 1
  %457 = mul i64 %455, 1
  %458 = shl i64 %453, 1
  %459 = shl i64 %453, 1
  %460 = sub i64 %453, -6162054710168157791
  %461 = sub i64 %460, 1
  %462 = add i64 %461, -6162054710168157791
  %463 = sub i64 %453, 1
  %464 = mul i64 %462, 1
  %465 = sub i64 0, %453
  %466 = add i64 0, %465
  %467 = sub i64 0, %453
  %468 = sub i64 0, 1
  %469 = sub i64 %466, %468
  %470 = add i64 %466, 1
  %471 = add i64 0, 6917364538958547544
  %472 = sub i64 %471, %453
  %473 = sub i64 %472, 6917364538958547544
  %474 = sub i64 0, %453
  %475 = sub i64 0, 1
  %476 = sub i64 %473, %475
  %477 = add i64 %473, 1
  %478 = add i64 %453, -508119321187789694
  %479 = sub i64 %478, 1
  %480 = sub i64 %479, -508119321187789694
  %481 = sub nsw i64 %453, 1
  store i64 %480, i64* %11, align 8
  store i32 -491758445, i32* %32
  br label %505

; <label>:482:                                    ; preds = %33
  %483 = bitcast %"class.__gnu_cxx::__normal_iterator"* %21 to i8*
  %484 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %483, i8* %484, i64 8, i32 8, i1 false)
  %485 = load i64, i64* %11, align 8
  %486 = load i64, i64* %13, align 8
  %487 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %9) #3
  %488 = bitcast %struct.shop* %22 to i8*
  %489 = bitcast %struct.shop* %487 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %488, i8* %489, i64 16, i32 8, i1 false)
  %490 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %24 to i8*
  %491 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %490, i8* %491, i64 8, i32 8, i1 false)
  %492 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %24, i32 0, i32 0
  %493 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %492, align 8
  %494 = call i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops15__iter_comp_valIPFbRK4shopS4_EEENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS8_EE(i1 (%struct.shop*, %struct.shop*)* %493)
  %495 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %23, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %494, i1 (%struct.shop*, %struct.shop*)** %495, align 8
  %496 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %21, i32 0, i32 0
  %497 = load %struct.shop*, %struct.shop** %496, align 8
  %498 = bitcast %struct.shop* %22 to { i64, i64 }*
  %499 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %498, i32 0, i32 0
  %500 = load i64, i64* %499, align 8
  %501 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %498, i32 0, i32 1
  %502 = load i64, i64* %501, align 8
  %503 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %23, i32 0, i32 0
  %504 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %503, align 8
  call void @_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIPFbRKS2_SB_EEEEvT_T0_SG_T1_T2_(%struct.shop* %497, i64 %485, i64 %486, i64 %500, i64 %502, i1 (%struct.shop*, %struct.shop*)* %504)
  store i32 1711462698, i32* %32
  br label %505

; <label>:505:                                    ; preds = %482, %308, %285, %247, %231, %230, %189, %162, %152, %144, %131, %125, %102, %99, %64, %36, %35
  br label %33
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEElS2_NS0_5__ops14_Iter_comp_valIPFbRKS2_SB_EEEEvT_T0_SG_T1_T2_(%struct.shop*, i64, i64, i64, i64, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %7 = alloca i1
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %struct.shop, align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %17 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %18, align 8
  %19 = bitcast %struct.shop* %9 to { i64, i64 }*
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0
  store i64 %3, i64* %20, align 8
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 1
  store i64 %4, i64* %21, align 8
  %22 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %10, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %5, i1 (%struct.shop*, %struct.shop*)** %22, align 8
  store i64 %1, i64* %11, align 8
  store i64 %2, i64* %12, align 8
  %23 = load i64, i64* %11, align 8
  %24 = sub i64 %23, -2133637570164389975
  %25 = sub i64 %24, 1
  %26 = add i64 %25, -2133637570164389975
  %27 = sub nsw i64 %23, 1
  %28 = sdiv i64 %26, 2
  store i64 %28, i64* %13, align 8
  %29 = alloca i32
  store i32 -1659861703, i32* %29
  %30 = alloca i1
  br label %31

; <label>:31:                                     ; preds = %6, %124
  %32 = load i32, i32* %29
  switch i32 %32, label %33 [
    i32 -1659861703, label %34
    i32 -1545924882, label %50
    i32 -446973851, label %81
    i32 -251906730, label %84
    i32 -1380210493, label %91
    i32 -851808589, label %94
    i32 -1593510509, label %112
    i32 1072974801, label %120
  ]

; <label>:33:                                     ; preds = %31
  br label %124

; <label>:34:                                     ; preds = %31
  %35 = load i32, i32* @x.408
  %36 = load i32, i32* @y.409
  %37 = add i32 %35, 1690179166
  %38 = sub i32 %37, 1
  %39 = sub i32 %38, 1690179166
  %40 = sub i32 %35, 1
  %41 = mul i32 %35, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %36, 10
  %45 = and i1 %43, %44
  %46 = xor i1 %43, %44
  %47 = or i1 %45, %46
  %48 = or i1 %43, %44
  %49 = select i1 %47, i32 -1545924882, i32 1072974801
  store i32 %49, i32* %29
  br label %124

; <label>:50:                                     ; preds = %31
  %51 = load i64, i64* %11, align 8
  %52 = load i64, i64* %12, align 8
  %53 = icmp sgt i64 %51, %52
  store i1 %53, i1* %7
  %54 = load i32, i32* @x.408
  %55 = load i32, i32* @y.409
  %56 = add i32 %54, -111534552
  %57 = sub i32 %56, 1
  %58 = sub i32 %57, -111534552
  %59 = sub i32 %54, 1
  %60 = mul i32 %54, %58
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %55, 10
  %64 = xor i1 %62, true
  %65 = xor i1 %63, true
  %66 = xor i1 false, true
  %67 = and i1 %64, false
  %68 = and i1 %62, %66
  %69 = and i1 %65, false
  %70 = and i1 %63, %66
  %71 = or i1 %67, %68
  %72 = or i1 %69, %70
  %73 = xor i1 %71, %72
  %74 = or i1 %64, %65
  %75 = xor i1 %74, true
  %76 = or i1 false, %66
  %77 = and i1 %75, %76
  %78 = or i1 %73, %77
  %79 = or i1 %62, %63
  %80 = select i1 %78, i32 -446973851, i32 1072974801
  store i32 %80, i32* %29
  br label %124

; <label>:81:                                     ; preds = %31
  %82 = load volatile i1, i1* %7
  %83 = select i1 %82, i32 -251906730, i32 -1380210493
  store i32 %83, i32* %29
  store i1 false, i1* %30
  br label %124

; <label>:84:                                     ; preds = %31
  %85 = load i64, i64* %13, align 8
  %86 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %85) #3
  %87 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  store %struct.shop* %86, %struct.shop** %87, align 8
  %88 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  %89 = load %struct.shop*, %struct.shop** %88, align 8
  %90 = call zeroext i1 @_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEES2_EEbT_RT0_(%"struct.__gnu_cxx::__ops::_Iter_comp_val"* %10, %struct.shop* %89, %struct.shop* dereferenceable(16) %9)
  store i32 -1380210493, i32* %29
  store i1 %90, i1* %30
  br label %124

; <label>:91:                                     ; preds = %31
  %92 = load i1, i1* %30
  %93 = select i1 %92, i32 -851808589, i32 -1593510509
  store i32 %93, i32* %29
  br label %124

; <label>:94:                                     ; preds = %31
  %95 = load i64, i64* %13, align 8
  %96 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %95) #3
  %97 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  store %struct.shop* %96, %struct.shop** %97, align 8
  %98 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %15) #3
  %99 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %98) #3
  %100 = load i64, i64* %11, align 8
  %101 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %100) #3
  %102 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  store %struct.shop* %101, %struct.shop** %102, align 8
  %103 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %16) #3
  %104 = bitcast %struct.shop* %103 to i8*
  %105 = bitcast %struct.shop* %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %104, i8* %105, i64 16, i32 8, i1 false)
  %106 = load i64, i64* %13, align 8
  store i64 %106, i64* %11, align 8
  %107 = load i64, i64* %11, align 8
  %108 = sub i64 0, 1
  %109 = add i64 %107, %108
  %110 = sub nsw i64 %107, 1
  %111 = sdiv i64 %109, 2
  store i64 %111, i64* %13, align 8
  store i32 -1659861703, i32* %29
  br label %124

; <label>:112:                                    ; preds = %31
  %113 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %9) #3
  %114 = load i64, i64* %11, align 8
  %115 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %8, i64 %114) #3
  %116 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %17, i32 0, i32 0
  store %struct.shop* %115, %struct.shop** %116, align 8
  %117 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %17) #3
  %118 = bitcast %struct.shop* %117 to i8*
  %119 = bitcast %struct.shop* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %118, i8* %119, i64 16, i32 8, i1 false)
  ret void

; <label>:120:                                    ; preds = %31
  %121 = load i64, i64* %11, align 8
  %122 = load i64, i64* %12, align 8
  %123 = icmp sgt i64 %121, %122
  store i32 -1545924882, i32* %29
  br label %124

; <label>:124:                                    ; preds = %120, %94, %91, %84, %81, %50, %34, %33
  br label %31
}

; Function Attrs: noinline uwtable
define linkonce_odr i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops15__iter_comp_valIPFbRK4shopS4_EEENS0_14_Iter_comp_valIT_EENS0_15_Iter_comp_iterIS8_EE(i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val", align 8
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %4 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %0, i1 (%struct.shop*, %struct.shop*)** %4, align 8
  %5 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %3, i32 0, i32 0
  %6 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %5, align 8
  call void @_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRK4shopS4_EEC2ES6_(%"struct.__gnu_cxx::__ops::_Iter_comp_val"* %2, i1 (%struct.shop*, %struct.shop*)* %6)
  %7 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %2, i32 0, i32 0
  %8 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %7, align 8
  ret i1 (%struct.shop*, %struct.shop*)* %8
}

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEES2_EEbT_RT0_(%"struct.__gnu_cxx::__ops::_Iter_comp_val"*, %struct.shop*, %struct.shop* dereferenceable(16)) #0 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, align 8
  %6 = alloca %struct.shop*, align 8
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %7, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %5, align 8
  store %struct.shop* %2, %struct.shop** %6, align 8
  %8 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %5, align 8
  %9 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %8, i32 0, i32 0
  %10 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %9, align 8
  %11 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %4) #3
  %12 = load %struct.shop*, %struct.shop** %6, align 8
  %13 = call zeroext i1 %10(%struct.shop* dereferenceable(16) %11, %struct.shop* dereferenceable(16) %12)
  ret i1 %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx5__ops14_Iter_comp_valIPFbRK4shopS4_EEC2ES6_(%"struct.__gnu_cxx::__ops::_Iter_comp_val"*, i1 (%struct.shop*, %struct.shop*)*) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, align 8
  %4 = alloca i1 (%struct.shop*, %struct.shop*)*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %3, align 8
  store i1 (%struct.shop*, %struct.shop*)* %1, i1 (%struct.shop*, %struct.shop*)** %4, align 8
  %5 = load %"struct.__gnu_cxx::__ops::_Iter_comp_val"*, %"struct.__gnu_cxx::__ops::_Iter_comp_val"** %3, align 8
  %6 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_val", %"struct.__gnu_cxx::__ops::_Iter_comp_val"* %5, i32 0, i32 0
  %7 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %4, align 8
  store i1 (%struct.shop*, %struct.shop*)* %7, i1 (%struct.shop*, %struct.shop*)** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv(%"class.__gnu_cxx::__normal_iterator"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %3 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %2, align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  %5 = load %struct.shop*, %struct.shop** %4, align 8
  %6 = getelementptr inbounds %struct.shop, %struct.shop* %5, i32 -1
  store %struct.shop* %6, %struct.shop** %4, align 8
  ret %"class.__gnu_cxx::__normal_iterator"* %3
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_SF_SF_T0_(%struct.shop*, %struct.shop*, %struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %6 = alloca %struct.shop*
  %7 = alloca %struct.shop*
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %17 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %18 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %19 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %20 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %21 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %22 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %23 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %24 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %25 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %26 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %27 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %28 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %29 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %31 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %32 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %33 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %34 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %35, align 8
  %36 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %36, align 8
  %37 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %37, align 8
  %38 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  store %struct.shop* %3, %struct.shop** %38, align 8
  %39 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %4, i1 (%struct.shop*, %struct.shop*)** %39, align 8
  %40 = bitcast %"class.__gnu_cxx::__normal_iterator"* %13 to i8*
  %41 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 8, i32 8, i1 false)
  %42 = bitcast %"class.__gnu_cxx::__normal_iterator"* %14 to i8*
  %43 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %43, i64 8, i32 8, i1 false)
  %44 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %13, i32 0, i32 0
  %45 = load %struct.shop*, %struct.shop** %44, align 8
  store %struct.shop* %45, %struct.shop** %7
  %46 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  %47 = load %struct.shop*, %struct.shop** %46, align 8
  store %struct.shop* %47, %struct.shop** %6
  %48 = alloca i32
  store i32 -1856268756, i32* %48
  br label %49

; <label>:49:                                     ; preds = %5, %264
  %50 = load i32, i32* %48
  switch i32 %50, label %51 [
    i32 -1856268756, label %52
    i32 -1550919361, label %57
    i32 1594229258, label %68
    i32 -1444496106, label %83
    i32 1578957646, label %107
    i32 -1511830744, label %108
    i32 -1638048025, label %119
    i32 2142435848, label %128
    i32 671024724, label %137
    i32 -1878935710, label %138
    i32 1178446028, label %139
    i32 270091693, label %150
    i32 -1863764328, label %159
    i32 -1981781754, label %170
    i32 -1743875772, label %197
    i32 -292477178, label %233
    i32 -40475256, label %234
    i32 502907029, label %243
    i32 1881182798, label %244
    i32 1326227274, label %245
    i32 -719093379, label %246
    i32 1173529598, label %255
  ]

; <label>:51:                                     ; preds = %49
  br label %264

; <label>:52:                                     ; preds = %49
  %53 = load volatile %struct.shop*, %struct.shop** %7
  %54 = load volatile %struct.shop*, %struct.shop** %6
  %55 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, %struct.shop* %53, %struct.shop* %54)
  %56 = select i1 %55, i32 -1550919361, i32 1178446028
  store i32 %56, i32* %48
  br label %264

; <label>:57:                                     ; preds = %49
  %58 = bitcast %"class.__gnu_cxx::__normal_iterator"* %15 to i8*
  %59 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* %59, i64 8, i32 8, i1 false)
  %60 = bitcast %"class.__gnu_cxx::__normal_iterator"* %16 to i8*
  %61 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %61, i64 8, i32 8, i1 false)
  %62 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  %63 = load %struct.shop*, %struct.shop** %62, align 8
  %64 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  %65 = load %struct.shop*, %struct.shop** %64, align 8
  %66 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, %struct.shop* %63, %struct.shop* %65)
  %67 = select i1 %66, i32 1594229258, i32 -1511830744
  store i32 %67, i32* %48
  br label %264

; <label>:68:                                     ; preds = %49
  %69 = load i32, i32* @x.418
  %70 = load i32, i32* @y.419
  %71 = sub i32 0, 1
  %72 = add i32 %69, %71
  %73 = sub i32 %69, 1
  %74 = mul i32 %69, %72
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %70, 10
  %78 = and i1 %76, %77
  %79 = xor i1 %76, %77
  %80 = or i1 %78, %79
  %81 = or i1 %76, %77
  %82 = select i1 %80, i32 -1444496106, i32 -719093379
  store i32 %82, i32* %48
  br label %264

; <label>:83:                                     ; preds = %49
  %84 = bitcast %"class.__gnu_cxx::__normal_iterator"* %17 to i8*
  %85 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %85, i64 8, i32 8, i1 false)
  %86 = bitcast %"class.__gnu_cxx::__normal_iterator"* %18 to i8*
  %87 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 8, i32 8, i1 false)
  %88 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %17, i32 0, i32 0
  %89 = load %struct.shop*, %struct.shop** %88, align 8
  %90 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %18, i32 0, i32 0
  %91 = load %struct.shop*, %struct.shop** %90, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %89, %struct.shop* %91)
  %92 = load i32, i32* @x.418
  %93 = load i32, i32* @y.419
  %94 = sub i32 %92, -1051048085
  %95 = sub i32 %94, 1
  %96 = add i32 %95, -1051048085
  %97 = sub i32 %92, 1
  %98 = mul i32 %92, %96
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %93, 10
  %102 = and i1 %100, %101
  %103 = xor i1 %100, %101
  %104 = or i1 %102, %103
  %105 = or i1 %100, %101
  %106 = select i1 %104, i32 1578957646, i32 -719093379
  store i32 %106, i32* %48
  br label %264

; <label>:107:                                    ; preds = %49
  store i32 -1878935710, i32* %48
  br label %264

; <label>:108:                                    ; preds = %49
  %109 = bitcast %"class.__gnu_cxx::__normal_iterator"* %19 to i8*
  %110 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* %110, i64 8, i32 8, i1 false)
  %111 = bitcast %"class.__gnu_cxx::__normal_iterator"* %20 to i8*
  %112 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* %112, i64 8, i32 8, i1 false)
  %113 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %19, i32 0, i32 0
  %114 = load %struct.shop*, %struct.shop** %113, align 8
  %115 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %20, i32 0, i32 0
  %116 = load %struct.shop*, %struct.shop** %115, align 8
  %117 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, %struct.shop* %114, %struct.shop* %116)
  %118 = select i1 %117, i32 -1638048025, i32 2142435848
  store i32 %118, i32* %48
  br label %264

; <label>:119:                                    ; preds = %49
  %120 = bitcast %"class.__gnu_cxx::__normal_iterator"* %21 to i8*
  %121 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %120, i8* %121, i64 8, i32 8, i1 false)
  %122 = bitcast %"class.__gnu_cxx::__normal_iterator"* %22 to i8*
  %123 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %122, i8* %123, i64 8, i32 8, i1 false)
  %124 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %21, i32 0, i32 0
  %125 = load %struct.shop*, %struct.shop** %124, align 8
  %126 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %22, i32 0, i32 0
  %127 = load %struct.shop*, %struct.shop** %126, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %125, %struct.shop* %127)
  store i32 671024724, i32* %48
  br label %264

; <label>:128:                                    ; preds = %49
  %129 = bitcast %"class.__gnu_cxx::__normal_iterator"* %23 to i8*
  %130 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %129, i8* %130, i64 8, i32 8, i1 false)
  %131 = bitcast %"class.__gnu_cxx::__normal_iterator"* %24 to i8*
  %132 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %131, i8* %132, i64 8, i32 8, i1 false)
  %133 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %23, i32 0, i32 0
  %134 = load %struct.shop*, %struct.shop** %133, align 8
  %135 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %24, i32 0, i32 0
  %136 = load %struct.shop*, %struct.shop** %135, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %134, %struct.shop* %136)
  store i32 671024724, i32* %48
  br label %264

; <label>:137:                                    ; preds = %49
  store i32 -1878935710, i32* %48
  br label %264

; <label>:138:                                    ; preds = %49
  store i32 1326227274, i32* %48
  br label %264

; <label>:139:                                    ; preds = %49
  %140 = bitcast %"class.__gnu_cxx::__normal_iterator"* %25 to i8*
  %141 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %140, i8* %141, i64 8, i32 8, i1 false)
  %142 = bitcast %"class.__gnu_cxx::__normal_iterator"* %26 to i8*
  %143 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %142, i8* %143, i64 8, i32 8, i1 false)
  %144 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %25, i32 0, i32 0
  %145 = load %struct.shop*, %struct.shop** %144, align 8
  %146 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %26, i32 0, i32 0
  %147 = load %struct.shop*, %struct.shop** %146, align 8
  %148 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, %struct.shop* %145, %struct.shop* %147)
  %149 = select i1 %148, i32 270091693, i32 -1863764328
  store i32 %149, i32* %48
  br label %264

; <label>:150:                                    ; preds = %49
  %151 = bitcast %"class.__gnu_cxx::__normal_iterator"* %27 to i8*
  %152 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %151, i8* %152, i64 8, i32 8, i1 false)
  %153 = bitcast %"class.__gnu_cxx::__normal_iterator"* %28 to i8*
  %154 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %153, i8* %154, i64 8, i32 8, i1 false)
  %155 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %27, i32 0, i32 0
  %156 = load %struct.shop*, %struct.shop** %155, align 8
  %157 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %28, i32 0, i32 0
  %158 = load %struct.shop*, %struct.shop** %157, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %156, %struct.shop* %158)
  store i32 1881182798, i32* %48
  br label %264

; <label>:159:                                    ; preds = %49
  %160 = bitcast %"class.__gnu_cxx::__normal_iterator"* %29 to i8*
  %161 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* %161, i64 8, i32 8, i1 false)
  %162 = bitcast %"class.__gnu_cxx::__normal_iterator"* %30 to i8*
  %163 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %162, i8* %163, i64 8, i32 8, i1 false)
  %164 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %29, i32 0, i32 0
  %165 = load %struct.shop*, %struct.shop** %164, align 8
  %166 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %30, i32 0, i32 0
  %167 = load %struct.shop*, %struct.shop** %166, align 8
  %168 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %12, %struct.shop* %165, %struct.shop* %167)
  %169 = select i1 %168, i32 -1981781754, i32 -40475256
  store i32 %169, i32* %48
  br label %264

; <label>:170:                                    ; preds = %49
  %171 = load i32, i32* @x.418
  %172 = load i32, i32* @y.419
  %173 = sub i32 0, 1
  %174 = add i32 %171, %173
  %175 = sub i32 %171, 1
  %176 = mul i32 %171, %174
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %172, 10
  %180 = xor i1 %178, true
  %181 = xor i1 %179, true
  %182 = xor i1 true, true
  %183 = and i1 %180, true
  %184 = and i1 %178, %182
  %185 = and i1 %181, true
  %186 = and i1 %179, %182
  %187 = or i1 %183, %184
  %188 = or i1 %185, %186
  %189 = xor i1 %187, %188
  %190 = or i1 %180, %181
  %191 = xor i1 %190, true
  %192 = or i1 true, %182
  %193 = and i1 %191, %192
  %194 = or i1 %189, %193
  %195 = or i1 %178, %179
  %196 = select i1 %194, i32 -1743875772, i32 1173529598
  store i32 %196, i32* %48
  br label %264

; <label>:197:                                    ; preds = %49
  %198 = bitcast %"class.__gnu_cxx::__normal_iterator"* %31 to i8*
  %199 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %198, i8* %199, i64 8, i32 8, i1 false)
  %200 = bitcast %"class.__gnu_cxx::__normal_iterator"* %32 to i8*
  %201 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %200, i8* %201, i64 8, i32 8, i1 false)
  %202 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %31, i32 0, i32 0
  %203 = load %struct.shop*, %struct.shop** %202, align 8
  %204 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %32, i32 0, i32 0
  %205 = load %struct.shop*, %struct.shop** %204, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %203, %struct.shop* %205)
  %206 = load i32, i32* @x.418
  %207 = load i32, i32* @y.419
  %208 = sub i32 %206, -635188752
  %209 = sub i32 %208, 1
  %210 = add i32 %209, -635188752
  %211 = sub i32 %206, 1
  %212 = mul i32 %206, %210
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %207, 10
  %216 = xor i1 %214, true
  %217 = xor i1 %215, true
  %218 = xor i1 true, true
  %219 = and i1 %216, true
  %220 = and i1 %214, %218
  %221 = and i1 %217, true
  %222 = and i1 %215, %218
  %223 = or i1 %219, %220
  %224 = or i1 %221, %222
  %225 = xor i1 %223, %224
  %226 = or i1 %216, %217
  %227 = xor i1 %226, true
  %228 = or i1 true, %218
  %229 = and i1 %227, %228
  %230 = or i1 %225, %229
  %231 = or i1 %214, %215
  %232 = select i1 %230, i32 -292477178, i32 1173529598
  store i32 %232, i32* %48
  br label %264

; <label>:233:                                    ; preds = %49
  store i32 502907029, i32* %48
  br label %264

; <label>:234:                                    ; preds = %49
  %235 = bitcast %"class.__gnu_cxx::__normal_iterator"* %33 to i8*
  %236 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %235, i8* %236, i64 8, i32 8, i1 false)
  %237 = bitcast %"class.__gnu_cxx::__normal_iterator"* %34 to i8*
  %238 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %237, i8* %238, i64 8, i32 8, i1 false)
  %239 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %33, i32 0, i32 0
  %240 = load %struct.shop*, %struct.shop** %239, align 8
  %241 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %34, i32 0, i32 0
  %242 = load %struct.shop*, %struct.shop** %241, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %240, %struct.shop* %242)
  store i32 502907029, i32* %48
  br label %264

; <label>:243:                                    ; preds = %49
  store i32 1881182798, i32* %48
  br label %264

; <label>:244:                                    ; preds = %49
  store i32 1326227274, i32* %48
  br label %264

; <label>:245:                                    ; preds = %49
  ret void

; <label>:246:                                    ; preds = %49
  %247 = bitcast %"class.__gnu_cxx::__normal_iterator"* %17 to i8*
  %248 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %247, i8* %248, i64 8, i32 8, i1 false)
  %249 = bitcast %"class.__gnu_cxx::__normal_iterator"* %18 to i8*
  %250 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %249, i8* %250, i64 8, i32 8, i1 false)
  %251 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %17, i32 0, i32 0
  %252 = load %struct.shop*, %struct.shop** %251, align 8
  %253 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %18, i32 0, i32 0
  %254 = load %struct.shop*, %struct.shop** %253, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %252, %struct.shop* %254)
  store i32 -1444496106, i32* %48
  br label %264

; <label>:255:                                    ; preds = %49
  %256 = bitcast %"class.__gnu_cxx::__normal_iterator"* %31 to i8*
  %257 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %256, i8* %257, i64 8, i32 8, i1 false)
  %258 = bitcast %"class.__gnu_cxx::__normal_iterator"* %32 to i8*
  %259 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %258, i8* %259, i64 8, i32 8, i1 false)
  %260 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %31, i32 0, i32 0
  %261 = load %struct.shop*, %struct.shop** %260, align 8
  %262 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %32, i32 0, i32 0
  %263 = load %struct.shop*, %struct.shop** %262, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %261, %struct.shop* %263)
  store i32 -1743875772, i32* %48
  br label %264

; <label>:264:                                    ; preds = %255, %246, %244, %243, %234, %233, %197, %170, %159, %150, %139, %138, %137, %128, %119, %108, %107, %83, %68, %57, %52, %51
  br label %49
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmiEl(%"class.__gnu_cxx::__normal_iterator"*, i64) #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.shop*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %4, align 8
  store i64 %1, i64* %5, align 8
  %7 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %4, align 8
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  %9 = load %struct.shop*, %struct.shop** %8, align 8
  %10 = load i64, i64* %5, align 8
  %11 = add i64 0, 4430877007367641098
  %12 = sub i64 %11, %10
  %13 = sub i64 %12, 4430877007367641098
  %14 = sub i64 0, %10
  %15 = getelementptr inbounds %struct.shop, %struct.shop* %9, i64 %13
  store %struct.shop* %15, %struct.shop** %6, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEC2ERKS2_(%"class.__gnu_cxx::__normal_iterator"* %3, %struct.shop** dereferenceable(8) %6) #3
  %16 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  %17 = load %struct.shop*, %struct.shop** %16, align 8
  ret %struct.shop* %17
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEET_SF_SF_SF_T0_(%struct.shop*, %struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %5 = alloca %struct.shop*
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %17, align 8
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %18, align 8
  %19 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %19, align 8
  %20 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %3, i1 (%struct.shop*, %struct.shop*)** %20, align 8
  %21 = alloca i32
  store i32 71417406, i32* %21
  br label %22

; <label>:22:                                     ; preds = %4, %231
  %23 = load i32, i32* %21
  switch i32 %23, label %24 [
    i32 71417406, label %25
    i32 -1977143033, label %26
    i32 -409330054, label %37
    i32 1845766334, label %39
    i32 -2106876801, label %55
    i32 -261894705, label %84
    i32 -106548812, label %85
    i32 -1159179294, label %96
    i32 -136746850, label %98
    i32 443089622, label %101
    i32 -994059606, label %129
    i32 -1502741637, label %160
    i32 -562339460, label %162
    i32 1689861226, label %189
    i32 -1361658385, label %213
    i32 -1453286207, label %214
    i32 645170809, label %216
    i32 1334975429, label %221
  ]

; <label>:24:                                     ; preds = %22
  br label %231

; <label>:25:                                     ; preds = %22
  store i32 -1977143033, i32* %21
  br label %231

; <label>:26:                                     ; preds = %22
  %27 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %28 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 8, i32 8, i1 false)
  %29 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  %30 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 8, i32 8, i1 false)
  %31 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %32 = load %struct.shop*, %struct.shop** %31, align 8
  %33 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  %34 = load %struct.shop*, %struct.shop** %33, align 8
  %35 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10, %struct.shop* %32, %struct.shop* %34)
  %36 = select i1 %35, i32 -409330054, i32 1845766334
  store i32 %36, i32* %21
  br label %231

; <label>:37:                                     ; preds = %22
  %38 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv(%"class.__gnu_cxx::__normal_iterator"* %7) #3
  store i32 -1977143033, i32* %21
  br label %231

; <label>:39:                                     ; preds = %22
  %40 = load i32, i32* @x.422
  %41 = load i32, i32* @y.423
  %42 = sub i32 %40, -788030417
  %43 = sub i32 %42, 1
  %44 = add i32 %43, -788030417
  %45 = sub i32 %40, 1
  %46 = mul i32 %40, %44
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %41, 10
  %50 = and i1 %48, %49
  %51 = xor i1 %48, %49
  %52 = or i1 %50, %51
  %53 = or i1 %48, %49
  %54 = select i1 %52, i32 -2106876801, i32 -1453286207
  store i32 %54, i32* %21
  br label %231

; <label>:55:                                     ; preds = %22
  %56 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv(%"class.__gnu_cxx::__normal_iterator"* %8) #3
  %57 = load i32, i32* @x.422
  %58 = load i32, i32* @y.423
  %59 = add i32 %57, -293839447
  %60 = sub i32 %59, 1
  %61 = sub i32 %60, -293839447
  %62 = sub i32 %57, 1
  %63 = mul i32 %57, %61
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %58, 10
  %67 = xor i1 %65, true
  %68 = xor i1 %66, true
  %69 = xor i1 false, true
  %70 = and i1 %67, false
  %71 = and i1 %65, %69
  %72 = and i1 %68, false
  %73 = and i1 %66, %69
  %74 = or i1 %70, %71
  %75 = or i1 %72, %73
  %76 = xor i1 %74, %75
  %77 = or i1 %67, %68
  %78 = xor i1 %77, true
  %79 = or i1 false, %69
  %80 = and i1 %78, %79
  %81 = or i1 %76, %80
  %82 = or i1 %65, %66
  %83 = select i1 %81, i32 -261894705, i32 -1453286207
  store i32 %83, i32* %21
  br label %231

; <label>:84:                                     ; preds = %22
  store i32 -106548812, i32* %21
  br label %231

; <label>:85:                                     ; preds = %22
  %86 = bitcast %"class.__gnu_cxx::__normal_iterator"* %13 to i8*
  %87 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 8, i32 8, i1 false)
  %88 = bitcast %"class.__gnu_cxx::__normal_iterator"* %14 to i8*
  %89 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %88, i8* %89, i64 8, i32 8, i1 false)
  %90 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %13, i32 0, i32 0
  %91 = load %struct.shop*, %struct.shop** %90, align 8
  %92 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  %93 = load %struct.shop*, %struct.shop** %92, align 8
  %94 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %10, %struct.shop* %91, %struct.shop* %93)
  %95 = select i1 %94, i32 -1159179294, i32 -136746850
  store i32 %95, i32* %21
  br label %231

; <label>:96:                                     ; preds = %22
  %97 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv(%"class.__gnu_cxx::__normal_iterator"* %8) #3
  store i32 -106548812, i32* %21
  br label %231

; <label>:98:                                     ; preds = %22
  %99 = call zeroext i1 @_ZN9__gnu_cxxltIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %7, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %8) #3
  %100 = select i1 %99, i32 -562339460, i32 443089622
  store i32 %100, i32* %21
  br label %231

; <label>:101:                                    ; preds = %22
  %102 = load i32, i32* @x.422
  %103 = load i32, i32* @y.423
  %104 = sub i32 %102, -1224655932
  %105 = sub i32 %104, 1
  %106 = add i32 %105, -1224655932
  %107 = sub i32 %102, 1
  %108 = mul i32 %102, %106
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %103, 10
  %112 = xor i1 %110, true
  %113 = xor i1 %111, true
  %114 = xor i1 true, true
  %115 = and i1 %112, true
  %116 = and i1 %110, %114
  %117 = and i1 %113, true
  %118 = and i1 %111, %114
  %119 = or i1 %115, %116
  %120 = or i1 %117, %118
  %121 = xor i1 %119, %120
  %122 = or i1 %112, %113
  %123 = xor i1 %122, true
  %124 = or i1 true, %114
  %125 = and i1 %123, %124
  %126 = or i1 %121, %125
  %127 = or i1 %110, %111
  %128 = select i1 %126, i32 -994059606, i32 645170809
  store i32 %128, i32* %21
  br label %231

; <label>:129:                                    ; preds = %22
  %130 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  %131 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %130, i8* %131, i64 8, i32 8, i1 false)
  %132 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  %133 = load %struct.shop*, %struct.shop** %132, align 8
  store %struct.shop* %133, %struct.shop** %5
  %134 = load i32, i32* @x.422
  %135 = load i32, i32* @y.423
  %136 = sub i32 0, 1
  %137 = add i32 %134, %136
  %138 = sub i32 %134, 1
  %139 = mul i32 %134, %137
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %135, 10
  %143 = xor i1 %141, true
  %144 = xor i1 %142, true
  %145 = xor i1 true, true
  %146 = and i1 %143, true
  %147 = and i1 %141, %145
  %148 = and i1 %144, true
  %149 = and i1 %142, %145
  %150 = or i1 %146, %147
  %151 = or i1 %148, %149
  %152 = xor i1 %150, %151
  %153 = or i1 %143, %144
  %154 = xor i1 %153, true
  %155 = or i1 true, %145
  %156 = and i1 %154, %155
  %157 = or i1 %152, %156
  %158 = or i1 %141, %142
  %159 = select i1 %157, i32 -1502741637, i32 645170809
  store i32 %159, i32* %21
  br label %231

; <label>:160:                                    ; preds = %22
  %161 = load volatile %struct.shop*, %struct.shop** %5
  ret %struct.shop* %161

; <label>:162:                                    ; preds = %22
  %163 = load i32, i32* @x.422
  %164 = load i32, i32* @y.423
  %165 = sub i32 0, 1
  %166 = add i32 %163, %165
  %167 = sub i32 %163, 1
  %168 = mul i32 %163, %166
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %164, 10
  %172 = xor i1 %170, true
  %173 = xor i1 %171, true
  %174 = xor i1 false, true
  %175 = and i1 %172, false
  %176 = and i1 %170, %174
  %177 = and i1 %173, false
  %178 = and i1 %171, %174
  %179 = or i1 %175, %176
  %180 = or i1 %177, %178
  %181 = xor i1 %179, %180
  %182 = or i1 %172, %173
  %183 = xor i1 %182, true
  %184 = or i1 false, %174
  %185 = and i1 %183, %184
  %186 = or i1 %181, %185
  %187 = or i1 %170, %171
  %188 = select i1 %186, i32 1689861226, i32 1334975429
  store i32 %188, i32* %21
  br label %231

; <label>:189:                                    ; preds = %22
  %190 = bitcast %"class.__gnu_cxx::__normal_iterator"* %15 to i8*
  %191 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %190, i8* %191, i64 8, i32 8, i1 false)
  %192 = bitcast %"class.__gnu_cxx::__normal_iterator"* %16 to i8*
  %193 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %192, i8* %193, i64 8, i32 8, i1 false)
  %194 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  %195 = load %struct.shop*, %struct.shop** %194, align 8
  %196 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  %197 = load %struct.shop*, %struct.shop** %196, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %195, %struct.shop* %197)
  %198 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv(%"class.__gnu_cxx::__normal_iterator"* %7) #3
  %199 = load i32, i32* @x.422
  %200 = load i32, i32* @y.423
  %201 = sub i32 0, 1
  %202 = add i32 %199, %201
  %203 = sub i32 %199, 1
  %204 = mul i32 %199, %202
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %200, 10
  %208 = and i1 %206, %207
  %209 = xor i1 %206, %207
  %210 = or i1 %208, %209
  %211 = or i1 %206, %207
  %212 = select i1 %210, i32 -1361658385, i32 1334975429
  store i32 %212, i32* %21
  br label %231

; <label>:213:                                    ; preds = %22
  store i32 71417406, i32* %21
  br label %231

; <label>:214:                                    ; preds = %22
  %215 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv(%"class.__gnu_cxx::__normal_iterator"* %8) #3
  store i32 -2106876801, i32* %21
  br label %231

; <label>:216:                                    ; preds = %22
  %217 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  %218 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %217, i8* %218, i64 8, i32 8, i1 false)
  %219 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  %220 = load %struct.shop*, %struct.shop** %219, align 8
  store i32 -994059606, i32* %21
  br label %231

; <label>:221:                                    ; preds = %22
  %222 = bitcast %"class.__gnu_cxx::__normal_iterator"* %15 to i8*
  %223 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %222, i8* %223, i64 8, i32 8, i1 false)
  %224 = bitcast %"class.__gnu_cxx::__normal_iterator"* %16 to i8*
  %225 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %224, i8* %225, i64 8, i32 8, i1 false)
  %226 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  %227 = load %struct.shop*, %struct.shop** %226, align 8
  %228 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %16, i32 0, i32 0
  %229 = load %struct.shop*, %struct.shop** %228, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop* %227, %struct.shop* %229)
  %230 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv(%"class.__gnu_cxx::__normal_iterator"* %7) #3
  store i32 1689861226, i32* %21
  br label %231

; <label>:231:                                    ; preds = %221, %216, %214, %213, %189, %162, %129, %101, %98, %96, %85, %84, %55, %39, %37, %26, %25, %24
  br label %22
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_EvT_T0_(%struct.shop*, %struct.shop*) #4 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.424
  %6 = load i32, i32* @y.425
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 212490201, i32* %14
  br label %15

; <label>:15:                                     ; preds = %2, %80
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 212490201, label %18
    i32 -398320440, label %38
    i32 -974929082, label %72
    i32 1012149992, label %73
  ]

; <label>:17:                                     ; preds = %15
  br label %80

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = xor i1 %19, true
  %22 = xor i1 %20, true
  %23 = xor i1 false, true
  %24 = and i1 %21, false
  %25 = and i1 %19, %23
  %26 = and i1 %22, false
  %27 = and i1 %20, %23
  %28 = or i1 %24, %25
  %29 = or i1 %26, %27
  %30 = xor i1 %28, %29
  %31 = or i1 %21, %22
  %32 = xor i1 %31, true
  %33 = or i1 false, %23
  %34 = and i1 %32, %33
  %35 = or i1 %30, %34
  %36 = or i1 %19, %20
  %37 = select i1 %35, i32 -398320440, i32 1012149992
  store i32 %37, i32* %14
  br label %80

; <label>:38:                                     ; preds = %15
  %39 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %40 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %41 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %39, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %41, align 8
  %42 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %40, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %42, align 8
  %43 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %39) #3
  %44 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %40) #3
  call void @_ZSt4swapI4shopEvRT_S2_(%struct.shop* dereferenceable(16) %43, %struct.shop* dereferenceable(16) %44) #3
  %45 = load i32, i32* @x.424
  %46 = load i32, i32* @y.425
  %47 = sub i32 %45, -440159807
  %48 = sub i32 %47, 1
  %49 = add i32 %48, -440159807
  %50 = sub i32 %45, 1
  %51 = mul i32 %45, %49
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %46, 10
  %55 = xor i1 %53, true
  %56 = xor i1 %54, true
  %57 = xor i1 true, true
  %58 = and i1 %55, true
  %59 = and i1 %53, %57
  %60 = and i1 %56, true
  %61 = and i1 %54, %57
  %62 = or i1 %58, %59
  %63 = or i1 %60, %61
  %64 = xor i1 %62, %63
  %65 = or i1 %55, %56
  %66 = xor i1 %65, true
  %67 = or i1 true, %57
  %68 = and i1 %66, %67
  %69 = or i1 %64, %68
  %70 = or i1 %53, %54
  %71 = select i1 %69, i32 -974929082, i32 1012149992
  store i32 %71, i32* %14
  br label %80

; <label>:72:                                     ; preds = %15
  ret void

; <label>:73:                                     ; preds = %15
  %74 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %75 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %76 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %74, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %76, align 8
  %77 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %75, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %77, align 8
  %78 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %74) #3
  %79 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %75) #3
  call void @_ZSt4swapI4shopEvRT_S2_(%struct.shop* dereferenceable(16) %78, %struct.shop* dereferenceable(16) %79) #3
  store i32 -398320440, i32* %14
  br label %80

; <label>:80:                                     ; preds = %73, %38, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt4swapI4shopEvRT_S2_(%struct.shop* dereferenceable(16), %struct.shop* dereferenceable(16)) #4 comdat {
  %3 = alloca %struct.shop*, align 8
  %4 = alloca %struct.shop*, align 8
  %5 = alloca %struct.shop, align 8
  store %struct.shop* %0, %struct.shop** %3, align 8
  store %struct.shop* %1, %struct.shop** %4, align 8
  %6 = load %struct.shop*, %struct.shop** %3, align 8
  %7 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %6) #3
  %8 = bitcast %struct.shop* %5 to i8*
  %9 = bitcast %struct.shop* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 16, i32 8, i1 false)
  %10 = load %struct.shop*, %struct.shop** %4, align 8
  %11 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %10) #3
  %12 = load %struct.shop*, %struct.shop** %3, align 8
  %13 = bitcast %struct.shop* %12 to i8*
  %14 = bitcast %struct.shop* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  %15 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %5) #3
  %16 = load %struct.shop*, %struct.shop** %4, align 8
  %17 = bitcast %struct.shop* %16 to i8*
  %18 = bitcast %struct.shop* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 16, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #12

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %struct.shop, align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %16 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 8
  %17 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %18, align 8
  %19 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %19, align 8
  %20 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %20, align 8
  %21 = alloca i32
  store i32 -486584728, i32* %21
  br label %22

; <label>:22:                                     ; preds = %3, %86
  %23 = load i32, i32* %21
  switch i32 %23, label %24 [
    i32 -486584728, label %25
    i32 1753698941, label %28
    i32 485966678, label %29
    i32 -1172168376, label %32
    i32 -1028444020, label %35
    i32 628378576, label %46
    i32 1128780456, label %69
    i32 278390454, label %82
    i32 -642337185, label %83
    i32 345427572, label %85
  ]

; <label>:24:                                     ; preds = %22
  br label %86

; <label>:25:                                     ; preds = %22
  %26 = call zeroext i1 @_ZN9__gnu_cxxeqIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %4, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  %27 = select i1 %26, i32 1753698941, i32 485966678
  store i32 %27, i32* %21
  br label %86

; <label>:28:                                     ; preds = %22
  store i32 345427572, i32* %21
  br label %86

; <label>:29:                                     ; preds = %22
  %30 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %4, i64 1) #3
  %31 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  store %struct.shop* %30, %struct.shop** %31, align 8
  store i32 -1172168376, i32* %21
  br label %86

; <label>:32:                                     ; preds = %22
  %33 = call zeroext i1 @_ZN9__gnu_cxxneIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %7, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %5) #3
  %34 = select i1 %33, i32 -1028444020, i32 345427572
  store i32 %34, i32* %21
  br label %86

; <label>:35:                                     ; preds = %22
  %36 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  %37 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 8, i32 8, i1 false)
  %38 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  %39 = bitcast %"class.__gnu_cxx::__normal_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 8, i32 8, i1 false)
  %40 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  %41 = load %struct.shop*, %struct.shop** %40, align 8
  %42 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %43 = load %struct.shop*, %struct.shop** %42, align 8
  %44 = call zeroext i1 @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEclINS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEESE_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6, %struct.shop* %41, %struct.shop* %43)
  %45 = select i1 %44, i32 628378576, i32 1128780456
  store i32 %45, i32* %21
  br label %86

; <label>:46:                                     ; preds = %22
  %47 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %7) #3
  %48 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %47) #3
  %49 = bitcast %struct.shop* %10 to i8*
  %50 = bitcast %struct.shop* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* %50, i64 16, i32 8, i1 false)
  %51 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %52 = bitcast %"class.__gnu_cxx::__normal_iterator"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 8, i32 8, i1 false)
  %53 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  %54 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 8, i32 8, i1 false)
  %55 = call %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEplEl(%"class.__gnu_cxx::__normal_iterator"* %7, i64 1) #3
  %56 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %13, i32 0, i32 0
  store %struct.shop* %55, %struct.shop** %56, align 8
  %57 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %58 = load %struct.shop*, %struct.shop** %57, align 8
  %59 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  %60 = load %struct.shop*, %struct.shop** %59, align 8
  %61 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %13, i32 0, i32 0
  %62 = load %struct.shop*, %struct.shop** %61, align 8
  %63 = call %struct.shop* @_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_(%struct.shop* %58, %struct.shop* %60, %struct.shop* %62)
  %64 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %14, i32 0, i32 0
  store %struct.shop* %63, %struct.shop** %64, align 8
  %65 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %10) #3
  %66 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %4) #3
  %67 = bitcast %struct.shop* %66 to i8*
  %68 = bitcast %struct.shop* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %67, i8* %68, i64 16, i32 8, i1 false)
  store i32 278390454, i32* %21
  br label %86

; <label>:69:                                     ; preds = %22
  %70 = bitcast %"class.__gnu_cxx::__normal_iterator"* %15 to i8*
  %71 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 8, i32 8, i1 false)
  %72 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %17 to i8*
  %73 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %73, i64 8, i32 8, i1 false)
  %74 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %17, i32 0, i32 0
  %75 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %74, align 8
  %76 = call i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops15__val_comp_iterIPFbRK4shopS4_EEENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS8_EE(i1 (%struct.shop*, %struct.shop*)* %75)
  %77 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %16, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %76, i1 (%struct.shop*, %struct.shop*)** %77, align 8
  %78 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %15, i32 0, i32 0
  %79 = load %struct.shop*, %struct.shop** %78, align 8
  %80 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %16, i32 0, i32 0
  %81 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %80, align 8
  call void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIPFbRKS2_SB_EEEEvT_T0_(%struct.shop* %79, i1 (%struct.shop*, %struct.shop*)* %81)
  store i32 278390454, i32* %21
  br label %86

; <label>:82:                                     ; preds = %22
  store i32 -642337185, i32* %21
  br label %86

; <label>:83:                                     ; preds = %22
  %84 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv(%"class.__gnu_cxx::__normal_iterator"* %7) #3
  store i32 -1172168376, i32* %21
  br label %86

; <label>:85:                                     ; preds = %22
  ret void

; <label>:86:                                     ; preds = %83, %82, %69, %46, %35, %32, %29, %28, %25, %24
  br label %22
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_comp_iterIPFbRKS2_SB_EEEEvT_SF_T0_(%struct.shop*, %struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %4 = alloca i1
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %12, align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %13, align 8
  %14 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %2, i1 (%struct.shop*, %struct.shop*)** %14, align 8
  %15 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  %16 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 8, i32 8, i1 false)
  %17 = alloca i32
  store i32 -1095277943, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %74
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -1095277943, label %21
    i32 757144282, label %37
    i32 -948431732, label %53
    i32 868814775, label %56
    i32 1820952415, label %69
    i32 -1106365628, label %71
    i32 -1009808742, label %72
  ]

; <label>:20:                                     ; preds = %18
  br label %74

; <label>:21:                                     ; preds = %18
  %22 = load i32, i32* @x.430
  %23 = load i32, i32* @y.431
  %24 = add i32 %22, 321047845
  %25 = sub i32 %24, 1
  %26 = sub i32 %25, 321047845
  %27 = sub i32 %22, 1
  %28 = mul i32 %22, %26
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %23, 10
  %32 = and i1 %30, %31
  %33 = xor i1 %30, %31
  %34 = or i1 %32, %33
  %35 = or i1 %30, %31
  %36 = select i1 %34, i32 757144282, i32 -1009808742
  store i32 %36, i32* %17
  br label %74

; <label>:37:                                     ; preds = %18
  %38 = call zeroext i1 @_ZN9__gnu_cxxneIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %8, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6) #3
  store i1 %38, i1* %4
  %39 = load i32, i32* @x.430
  %40 = load i32, i32* @y.431
  %41 = sub i32 0, 1
  %42 = add i32 %39, %41
  %43 = sub i32 %39, 1
  %44 = mul i32 %39, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %40, 10
  %48 = and i1 %46, %47
  %49 = xor i1 %46, %47
  %50 = or i1 %48, %49
  %51 = or i1 %46, %47
  %52 = select i1 %50, i32 -948431732, i32 -1009808742
  store i32 %52, i32* %17
  br label %74

; <label>:53:                                     ; preds = %18
  %54 = load volatile i1, i1* %4
  %55 = select i1 %54, i32 868814775, i32 -1106365628
  store i32 %55, i32* %17
  br label %74

; <label>:56:                                     ; preds = %18
  %57 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  %58 = bitcast %"class.__gnu_cxx::__normal_iterator"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 8, i32 8, i1 false)
  %59 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11 to i8*
  %60 = bitcast %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %59, i8* %60, i64 8, i32 8, i1 false)
  %61 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %11, i32 0, i32 0
  %62 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %61, align 8
  %63 = call i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops15__val_comp_iterIPFbRK4shopS4_EEENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS8_EE(i1 (%struct.shop*, %struct.shop*)* %62)
  %64 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %10, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %63, i1 (%struct.shop*, %struct.shop*)** %64, align 8
  %65 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %66 = load %struct.shop*, %struct.shop** %65, align 8
  %67 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %10, i32 0, i32 0
  %68 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %67, align 8
  call void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIPFbRKS2_SB_EEEEvT_T0_(%struct.shop* %66, i1 (%struct.shop*, %struct.shop*)* %68)
  store i32 1820952415, i32* %17
  br label %74

; <label>:69:                                     ; preds = %18
  %70 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEppEv(%"class.__gnu_cxx::__normal_iterator"* %8) #3
  store i32 -1095277943, i32* %17
  br label %74

; <label>:71:                                     ; preds = %18
  ret void

; <label>:72:                                     ; preds = %18
  %73 = call zeroext i1 @_ZN9__gnu_cxxneIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %8, %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8) %6) #3
  store i32 757144282, i32* %17
  br label %74

; <label>:74:                                     ; preds = %72, %69, %56, %53, %37, %21, %20
  br label %18
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxxeqIP4shopSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_(%"class.__gnu_cxx::__normal_iterator"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator"* dereferenceable(8)) #4 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.432
  %7 = load i32, i32* @y.433
  %8 = sub i32 %6, 1077466924
  %9 = sub i32 %8, 1
  %10 = add i32 %9, 1077466924
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 -175878856, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %77
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -175878856, label %20
    i32 2135102444, label %40
    i32 244578733, label %65
    i32 -1441390527, label %67
  ]

; <label>:19:                                     ; preds = %17
  br label %77

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 false, true
  %26 = and i1 %23, false
  %27 = and i1 %21, %25
  %28 = and i1 %24, false
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 false, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 2135102444, i32 -1441390527
  store i32 %39, i32* %16
  br label %77

; <label>:40:                                     ; preds = %17
  %41 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %42 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %41, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %42, align 8
  %43 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %41, align 8
  %44 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %43) #3
  %45 = load %struct.shop*, %struct.shop** %44, align 8
  %46 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %42, align 8
  %47 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %46) #3
  %48 = load %struct.shop*, %struct.shop** %47, align 8
  %49 = icmp eq %struct.shop* %45, %48
  store i1 %49, i1* %3
  %50 = load i32, i32* @x.432
  %51 = load i32, i32* @y.433
  %52 = add i32 %50, 339610178
  %53 = sub i32 %52, 1
  %54 = sub i32 %53, 339610178
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = and i1 %58, %59
  %61 = xor i1 %58, %59
  %62 = or i1 %60, %61
  %63 = or i1 %58, %59
  %64 = select i1 %62, i32 244578733, i32 -1441390527
  store i32 %64, i32* %16
  br label %77

; <label>:65:                                     ; preds = %17
  %66 = load volatile i1, i1* %3
  ret i1 %66

; <label>:67:                                     ; preds = %17
  %68 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  %69 = alloca %"class.__gnu_cxx::__normal_iterator"*, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %0, %"class.__gnu_cxx::__normal_iterator"** %68, align 8
  store %"class.__gnu_cxx::__normal_iterator"* %1, %"class.__gnu_cxx::__normal_iterator"** %69, align 8
  %70 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %68, align 8
  %71 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %70) #3
  %72 = load %struct.shop*, %struct.shop** %71, align 8
  %73 = load %"class.__gnu_cxx::__normal_iterator"*, %"class.__gnu_cxx::__normal_iterator"** %69, align 8
  %74 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %73) #3
  %75 = load %struct.shop*, %struct.shop** %74, align 8
  %76 = icmp eq %struct.shop* %72, %75
  store i32 2135102444, i32* %16
  br label %77

; <label>:77:                                     ; preds = %67, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_(%struct.shop*, %struct.shop*, %struct.shop*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %13, align 8
  %14 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %14, align 8
  %15 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %15, align 8
  %16 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  %17 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 8, i32 8, i1 false)
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %19 = load %struct.shop*, %struct.shop** %18, align 8
  %20 = call %struct.shop* @_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Miter_baseIT_E13iterator_typeES9_(%struct.shop* %19)
  %21 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  store %struct.shop* %20, %struct.shop** %21, align 8
  %22 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %23 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 8, i32 8, i1 false)
  %24 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %25 = load %struct.shop*, %struct.shop** %24, align 8
  %26 = call %struct.shop* @_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Miter_baseIT_E13iterator_typeES9_(%struct.shop* %25)
  %27 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  store %struct.shop* %26, %struct.shop** %27, align 8
  %28 = bitcast %"class.__gnu_cxx::__normal_iterator"* %12 to i8*
  %29 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 8, i32 8, i1 false)
  %30 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %8, i32 0, i32 0
  %31 = load %struct.shop*, %struct.shop** %30, align 8
  %32 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %33 = load %struct.shop*, %struct.shop** %32, align 8
  %34 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %12, i32 0, i32 0
  %35 = load %struct.shop*, %struct.shop** %34, align 8
  %36 = call %struct.shop* @_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_(%struct.shop* %31, %struct.shop* %33, %struct.shop* %35)
  %37 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  store %struct.shop* %36, %struct.shop** %37, align 8
  %38 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  %39 = load %struct.shop*, %struct.shop** %38, align 8
  ret %struct.shop* %39
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_comp_iterIPFbRKS2_SB_EEEEvT_T0_(%struct.shop*, i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %4 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 8
  %5 = alloca %struct.shop, align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %8, align 8
  %9 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %4, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %1, i1 (%struct.shop*, %struct.shop*)** %9, align 8
  %10 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %3) #3
  %11 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %10) #3
  %12 = bitcast %struct.shop* %5 to i8*
  %13 = bitcast %struct.shop* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  %14 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  %15 = bitcast %"class.__gnu_cxx::__normal_iterator"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  %16 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv(%"class.__gnu_cxx::__normal_iterator"* %6) #3
  %17 = alloca i32
  store i32 2023747220, i32* %17
  br label %18

; <label>:18:                                     ; preds = %2, %81
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 2023747220, label %21
    i32 1764936256, label %28
    i32 -1821830093, label %43
    i32 -1887171256, label %66
    i32 1855988705, label %67
    i32 -1941903006, label %72
  ]

; <label>:20:                                     ; preds = %18
  br label %81

; <label>:21:                                     ; preds = %18
  %22 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  %23 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 8, i32 8, i1 false)
  %24 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  %25 = load %struct.shop*, %struct.shop** %24, align 8
  %26 = call zeroext i1 @_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRK4shopS4_EEclIS2_NS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEEEEbRT_T0_(%"struct.__gnu_cxx::__ops::_Val_comp_iter"* %4, %struct.shop* dereferenceable(16) %5, %struct.shop* %25)
  %27 = select i1 %26, i32 1764936256, i32 1855988705
  store i32 %27, i32* %17
  br label %81

; <label>:28:                                     ; preds = %18
  %29 = load i32, i32* @x.436
  %30 = load i32, i32* @y.437
  %31 = sub i32 0, 1
  %32 = add i32 %29, %31
  %33 = sub i32 %29, 1
  %34 = mul i32 %29, %32
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %30, 10
  %38 = and i1 %36, %37
  %39 = xor i1 %36, %37
  %40 = or i1 %38, %39
  %41 = or i1 %36, %37
  %42 = select i1 %40, i32 -1821830093, i32 -1941903006
  store i32 %42, i32* %17
  br label %81

; <label>:43:                                     ; preds = %18
  %44 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %6) #3
  %45 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %44) #3
  %46 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %3) #3
  %47 = bitcast %struct.shop* %46 to i8*
  %48 = bitcast %struct.shop* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 16, i32 8, i1 false)
  %49 = bitcast %"class.__gnu_cxx::__normal_iterator"* %3 to i8*
  %50 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* %50, i64 8, i32 8, i1 false)
  %51 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv(%"class.__gnu_cxx::__normal_iterator"* %6) #3
  %52 = load i32, i32* @x.436
  %53 = load i32, i32* @y.437
  %54 = sub i32 0, 1
  %55 = add i32 %52, %54
  %56 = sub i32 %52, 1
  %57 = mul i32 %52, %55
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %53, 10
  %61 = and i1 %59, %60
  %62 = xor i1 %59, %60
  %63 = or i1 %61, %62
  %64 = or i1 %59, %60
  %65 = select i1 %63, i32 -1887171256, i32 -1941903006
  store i32 %65, i32* %17
  br label %81

; <label>:66:                                     ; preds = %18
  store i32 2023747220, i32* %17
  br label %81

; <label>:67:                                     ; preds = %18
  %68 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %5) #3
  %69 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %3) #3
  %70 = bitcast %struct.shop* %69 to i8*
  %71 = bitcast %struct.shop* %68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 16, i32 8, i1 false)
  ret void

; <label>:72:                                     ; preds = %18
  %73 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %6) #3
  %74 = call dereferenceable(16) %struct.shop* @_ZSt4moveIR4shopEONSt16remove_referenceIT_E4typeEOS3_(%struct.shop* dereferenceable(16) %73) #3
  %75 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %3) #3
  %76 = bitcast %struct.shop* %75 to i8*
  %77 = bitcast %struct.shop* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %77, i64 16, i32 8, i1 false)
  %78 = bitcast %"class.__gnu_cxx::__normal_iterator"* %3 to i8*
  %79 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* %79, i64 8, i32 8, i1 false)
  %80 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator"* @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEmmEv(%"class.__gnu_cxx::__normal_iterator"* %6) #3
  store i32 -1821830093, i32* %17
  br label %81

; <label>:81:                                     ; preds = %72, %66, %43, %28, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr i1 (%struct.shop*, %struct.shop*)* @_ZN9__gnu_cxx5__ops15__val_comp_iterIPFbRK4shopS4_EEENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterIS8_EE(i1 (%struct.shop*, %struct.shop*)*) #0 comdat {
  %2 = alloca i1 (%struct.shop*, %struct.shop*)*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.438
  %6 = load i32, i32* @y.439
  %7 = add i32 %5, -1272906518
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -1272906518
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -453957310, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %72
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -453957310, label %19
    i32 -170664268, label %27
    i32 1336861822, label %62
    i32 2100025729, label %64
  ]

; <label>:18:                                     ; preds = %16
  br label %72

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -170664268, i32 2100025729
  store i32 %26, i32* %15
  br label %72

; <label>:27:                                     ; preds = %16
  %28 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 8
  %29 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %30 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %29, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %0, i1 (%struct.shop*, %struct.shop*)** %30, align 8
  %31 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %29, i32 0, i32 0
  %32 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %31, align 8
  call void @_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRK4shopS4_EEC2ES6_(%"struct.__gnu_cxx::__ops::_Val_comp_iter"* %28, i1 (%struct.shop*, %struct.shop*)* %32)
  %33 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %28, i32 0, i32 0
  %34 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %33, align 8
  store i1 (%struct.shop*, %struct.shop*)* %34, i1 (%struct.shop*, %struct.shop*)** %2
  %35 = load i32, i32* @x.438
  %36 = load i32, i32* @y.439
  %37 = sub i32 %35, 515416909
  %38 = sub i32 %37, 1
  %39 = add i32 %38, 515416909
  %40 = sub i32 %35, 1
  %41 = mul i32 %35, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %36, 10
  %45 = xor i1 %43, true
  %46 = xor i1 %44, true
  %47 = xor i1 false, true
  %48 = and i1 %45, false
  %49 = and i1 %43, %47
  %50 = and i1 %46, false
  %51 = and i1 %44, %47
  %52 = or i1 %48, %49
  %53 = or i1 %50, %51
  %54 = xor i1 %52, %53
  %55 = or i1 %45, %46
  %56 = xor i1 %55, true
  %57 = or i1 false, %47
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  %60 = or i1 %43, %44
  %61 = select i1 %59, i32 1336861822, i32 2100025729
  store i32 %61, i32* %15
  br label %72

; <label>:62:                                     ; preds = %16
  %63 = load volatile i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %2
  ret i1 (%struct.shop*, %struct.shop*)* %63

; <label>:64:                                     ; preds = %16
  %65 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter", align 8
  %66 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter", align 8
  %67 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %66, i32 0, i32 0
  store i1 (%struct.shop*, %struct.shop*)* %0, i1 (%struct.shop*, %struct.shop*)** %67, align 8
  %68 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %66, i32 0, i32 0
  %69 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %68, align 8
  call void @_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRK4shopS4_EEC2ES6_(%"struct.__gnu_cxx::__ops::_Val_comp_iter"* %65, i1 (%struct.shop*, %struct.shop*)* %69)
  %70 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %65, i32 0, i32 0
  %71 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %70, align 8
  store i32 -170664268, i32* %15
  br label %72

; <label>:72:                                     ; preds = %64, %27, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_(%struct.shop*, %struct.shop*, %struct.shop*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %8 = alloca %struct.shop*, align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %5, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %12, align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %6, i32 0, i32 0
  store %struct.shop* %1, %struct.shop** %13, align 8
  %14 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %7, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %14, align 8
  %15 = bitcast %"class.__gnu_cxx::__normal_iterator"* %9 to i8*
  %16 = bitcast %"class.__gnu_cxx::__normal_iterator"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 8, i32 8, i1 false)
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %9, i32 0, i32 0
  %18 = load %struct.shop*, %struct.shop** %17, align 8
  %19 = call %struct.shop* @_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeES9_(%struct.shop* %18)
  %20 = bitcast %"class.__gnu_cxx::__normal_iterator"* %10 to i8*
  %21 = bitcast %"class.__gnu_cxx::__normal_iterator"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 8, i32 8, i1 false)
  %22 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %10, i32 0, i32 0
  %23 = load %struct.shop*, %struct.shop** %22, align 8
  %24 = call %struct.shop* @_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeES9_(%struct.shop* %23)
  %25 = bitcast %"class.__gnu_cxx::__normal_iterator"* %11 to i8*
  %26 = bitcast %"class.__gnu_cxx::__normal_iterator"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 8, i32 8, i1 false)
  %27 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %11, i32 0, i32 0
  %28 = load %struct.shop*, %struct.shop** %27, align 8
  %29 = call %struct.shop* @_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeES9_(%struct.shop* %28)
  %30 = call %struct.shop* @_ZSt22__copy_move_backward_aILb1EP4shopS1_ET1_T0_S3_S2_(%struct.shop* %19, %struct.shop* %24, %struct.shop* %29)
  store %struct.shop* %30, %struct.shop** %8, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEC2ERKS2_(%"class.__gnu_cxx::__normal_iterator"* %4, %struct.shop** dereferenceable(8) %8) #3
  %31 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  %32 = load %struct.shop*, %struct.shop** %31, align 8
  ret %struct.shop* %32
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Miter_baseIT_E13iterator_typeES9_(%struct.shop*) #0 comdat {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %3 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %5, align 8
  %6 = bitcast %"class.__gnu_cxx::__normal_iterator"* %4 to i8*
  %7 = bitcast %"class.__gnu_cxx::__normal_iterator"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 8, i32 8, i1 false)
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  %9 = load %struct.shop*, %struct.shop** %8, align 8
  %10 = call %struct.shop* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEELb0EE7_S_baseES7_(%struct.shop* %9)
  %11 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %2, i32 0, i32 0
  store %struct.shop* %10, %struct.shop** %11, align 8
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %2, i32 0, i32 0
  %13 = load %struct.shop*, %struct.shop** %12, align 8
  ret %struct.shop* %13
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt22__copy_move_backward_aILb1EP4shopS1_ET1_T0_S3_S2_(%struct.shop*, %struct.shop*, %struct.shop*) #0 comdat {
  %4 = alloca %struct.shop*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.444
  %8 = load i32, i32* @y.445
  %9 = add i32 %7, 761882567
  %10 = sub i32 %9, 1
  %11 = sub i32 %10, 761882567
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 -1688112145, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %76
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -1688112145, label %21
    i32 -1265960107, label %29
    i32 696770367, label %65
    i32 278700772, label %67
  ]

; <label>:20:                                     ; preds = %18
  br label %76

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = and i1 %22, %23
  %25 = xor i1 %22, %23
  %26 = or i1 %24, %25
  %27 = or i1 %22, %23
  %28 = select i1 %26, i32 -1265960107, i32 278700772
  store i32 %28, i32* %17
  br label %76

; <label>:29:                                     ; preds = %18
  %30 = alloca %struct.shop*, align 8
  %31 = alloca %struct.shop*, align 8
  %32 = alloca %struct.shop*, align 8
  %33 = alloca i8, align 1
  store %struct.shop* %0, %struct.shop** %30, align 8
  store %struct.shop* %1, %struct.shop** %31, align 8
  store %struct.shop* %2, %struct.shop** %32, align 8
  store i8 1, i8* %33, align 1
  %34 = load %struct.shop*, %struct.shop** %30, align 8
  %35 = load %struct.shop*, %struct.shop** %31, align 8
  %36 = load %struct.shop*, %struct.shop** %32, align 8
  %37 = call %struct.shop* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI4shopEEPT_PKS4_S7_S5_(%struct.shop* %34, %struct.shop* %35, %struct.shop* %36)
  store %struct.shop* %37, %struct.shop** %4
  %38 = load i32, i32* @x.444
  %39 = load i32, i32* @y.445
  %40 = sub i32 %38, -515560030
  %41 = sub i32 %40, 1
  %42 = add i32 %41, -515560030
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 false, true
  %51 = and i1 %48, false
  %52 = and i1 %46, %50
  %53 = and i1 %49, false
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 false, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  %64 = select i1 %62, i32 696770367, i32 278700772
  store i32 %64, i32* %17
  br label %76

; <label>:65:                                     ; preds = %18
  %66 = load volatile %struct.shop*, %struct.shop** %4
  ret %struct.shop* %66

; <label>:67:                                     ; preds = %18
  %68 = alloca %struct.shop*, align 8
  %69 = alloca %struct.shop*, align 8
  %70 = alloca %struct.shop*, align 8
  %71 = alloca i8, align 1
  store %struct.shop* %0, %struct.shop** %68, align 8
  store %struct.shop* %1, %struct.shop** %69, align 8
  store %struct.shop* %2, %struct.shop** %70, align 8
  store i8 1, i8* %71, align 1
  %72 = load %struct.shop*, %struct.shop** %68, align 8
  %73 = load %struct.shop*, %struct.shop** %69, align 8
  %74 = load %struct.shop*, %struct.shop** %70, align 8
  %75 = call %struct.shop* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI4shopEEPT_PKS4_S7_S5_(%struct.shop* %72, %struct.shop* %73, %struct.shop* %74)
  store i32 -1265960107, i32* %17
  br label %76

; <label>:76:                                     ; preds = %67, %29, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr %struct.shop* @_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEEENSt11_Niter_baseIT_E13iterator_typeES9_(%struct.shop*) #0 comdat {
  %2 = alloca %struct.shop*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.446
  %6 = load i32, i32* @y.447
  %7 = sub i32 0, 1
  %8 = add i32 %5, %7
  %9 = sub i32 %5, 1
  %10 = mul i32 %5, %8
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %4
  %13 = icmp slt i32 %6, 10
  store i1 %13, i1* %3
  %14 = alloca i32
  store i32 1194969768, i32* %14
  br label %15

; <label>:15:                                     ; preds = %1, %73
  %16 = load i32, i32* %14
  switch i32 %16, label %17 [
    i32 1194969768, label %18
    i32 1895344181, label %26
    i32 -720008120, label %62
    i32 -237181587, label %64
  ]

; <label>:17:                                     ; preds = %15
  br label %73

; <label>:18:                                     ; preds = %15
  %19 = load volatile i1, i1* %4
  %20 = load volatile i1, i1* %3
  %21 = and i1 %19, %20
  %22 = xor i1 %19, %20
  %23 = or i1 %21, %22
  %24 = or i1 %19, %20
  %25 = select i1 %23, i32 1895344181, i32 -237181587
  store i32 %25, i32* %14
  br label %73

; <label>:26:                                     ; preds = %15
  %27 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %28 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %29 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %27, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %29, align 8
  %30 = bitcast %"class.__gnu_cxx::__normal_iterator"* %28 to i8*
  %31 = bitcast %"class.__gnu_cxx::__normal_iterator"* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 8, i32 8, i1 false)
  %32 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %28, i32 0, i32 0
  %33 = load %struct.shop*, %struct.shop** %32, align 8
  %34 = call %struct.shop* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES7_(%struct.shop* %33)
  store %struct.shop* %34, %struct.shop** %2
  %35 = load i32, i32* @x.446
  %36 = load i32, i32* @y.447
  %37 = add i32 %35, 200826668
  %38 = sub i32 %37, 1
  %39 = sub i32 %38, 200826668
  %40 = sub i32 %35, 1
  %41 = mul i32 %35, %39
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %36, 10
  %45 = xor i1 %43, true
  %46 = xor i1 %44, true
  %47 = xor i1 true, true
  %48 = and i1 %45, true
  %49 = and i1 %43, %47
  %50 = and i1 %46, true
  %51 = and i1 %44, %47
  %52 = or i1 %48, %49
  %53 = or i1 %50, %51
  %54 = xor i1 %52, %53
  %55 = or i1 %45, %46
  %56 = xor i1 %55, true
  %57 = or i1 true, %47
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  %60 = or i1 %43, %44
  %61 = select i1 %59, i32 -720008120, i32 -237181587
  store i32 %61, i32* %14
  br label %73

; <label>:62:                                     ; preds = %15
  %63 = load volatile %struct.shop*, %struct.shop** %2
  ret %struct.shop* %63

; <label>:64:                                     ; preds = %15
  %65 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %66 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %67 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %65, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %67, align 8
  %68 = bitcast %"class.__gnu_cxx::__normal_iterator"* %66 to i8*
  %69 = bitcast %"class.__gnu_cxx::__normal_iterator"* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %68, i8* %69, i64 8, i32 8, i1 false)
  %70 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %66, i32 0, i32 0
  %71 = load %struct.shop*, %struct.shop** %70, align 8
  %72 = call %struct.shop* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES7_(%struct.shop* %71)
  store i32 1895344181, i32* %14
  br label %73

; <label>:73:                                     ; preds = %64, %26, %18, %17
  br label %15
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI4shopEEPT_PKS4_S7_S5_(%struct.shop*, %struct.shop*, %struct.shop*) #4 comdat align 2 {
  %4 = alloca %struct.shop*
  %5 = alloca i64
  %6 = alloca %struct.shop*, align 8
  %7 = alloca %struct.shop*, align 8
  %8 = alloca %struct.shop*, align 8
  %9 = alloca i64, align 8
  store %struct.shop* %0, %struct.shop** %6, align 8
  store %struct.shop* %1, %struct.shop** %7, align 8
  store %struct.shop* %2, %struct.shop** %8, align 8
  %10 = load %struct.shop*, %struct.shop** %7, align 8
  %11 = load %struct.shop*, %struct.shop** %6, align 8
  %12 = ptrtoint %struct.shop* %10 to i64
  %13 = ptrtoint %struct.shop* %11 to i64
  %14 = sub i64 %12, -7037635044649282118
  %15 = sub i64 %14, %13
  %16 = add i64 %15, -7037635044649282118
  %17 = sub i64 %12, %13
  %18 = sdiv exact i64 %16, 16
  store i64 %18, i64* %9, align 8
  %19 = load i64, i64* %9, align 8
  store i64 %19, i64* %5
  %20 = alloca i32
  store i32 -1200705934, i32* %20
  br label %21

; <label>:21:                                     ; preds = %3, %238
  %22 = load i32, i32* %20
  switch i32 %22, label %23 [
    i32 -1200705934, label %24
    i32 -1702283085, label %28
    i32 -1468339825, label %56
    i32 2139125909, label %95
    i32 48172925, label %96
    i32 1348523989, label %124
    i32 -270325678, label %158
    i32 482114166, label %160
    i32 1420338172, label %198
  ]

; <label>:23:                                     ; preds = %21
  br label %238

; <label>:24:                                     ; preds = %21
  %25 = load volatile i64, i64* %5
  %26 = icmp ne i64 %25, 0
  %27 = select i1 %26, i32 -1702283085, i32 48172925
  store i32 %27, i32* %20
  br label %238

; <label>:28:                                     ; preds = %21
  %29 = load i32, i32* @x.448
  %30 = load i32, i32* @y.449
  %31 = add i32 %29, 1667247471
  %32 = sub i32 %31, 1
  %33 = sub i32 %32, 1667247471
  %34 = sub i32 %29, 1
  %35 = mul i32 %29, %33
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %30, 10
  %39 = xor i1 %37, true
  %40 = xor i1 %38, true
  %41 = xor i1 false, true
  %42 = and i1 %39, false
  %43 = and i1 %37, %41
  %44 = and i1 %40, false
  %45 = and i1 %38, %41
  %46 = or i1 %42, %43
  %47 = or i1 %44, %45
  %48 = xor i1 %46, %47
  %49 = or i1 %39, %40
  %50 = xor i1 %49, true
  %51 = or i1 false, %41
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  %54 = or i1 %37, %38
  %55 = select i1 %53, i32 -1468339825, i32 482114166
  store i32 %55, i32* %20
  br label %238

; <label>:56:                                     ; preds = %21
  %57 = load %struct.shop*, %struct.shop** %8, align 8
  %58 = load i64, i64* %9, align 8
  %59 = sub i64 0, 5366299456888310342
  %60 = sub i64 %59, %58
  %61 = add i64 %60, 5366299456888310342
  %62 = sub i64 0, %58
  %63 = getelementptr inbounds %struct.shop, %struct.shop* %57, i64 %61
  %64 = bitcast %struct.shop* %63 to i8*
  %65 = load %struct.shop*, %struct.shop** %6, align 8
  %66 = bitcast %struct.shop* %65 to i8*
  %67 = load i64, i64* %9, align 8
  %68 = mul i64 16, %67
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %64, i8* %66, i64 %68, i32 8, i1 false)
  %69 = load i32, i32* @x.448
  %70 = load i32, i32* @y.449
  %71 = sub i32 0, 1
  %72 = add i32 %69, %71
  %73 = sub i32 %69, 1
  %74 = mul i32 %69, %72
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %70, 10
  %78 = xor i1 %76, true
  %79 = xor i1 %77, true
  %80 = xor i1 false, true
  %81 = and i1 %78, false
  %82 = and i1 %76, %80
  %83 = and i1 %79, false
  %84 = and i1 %77, %80
  %85 = or i1 %81, %82
  %86 = or i1 %83, %84
  %87 = xor i1 %85, %86
  %88 = or i1 %78, %79
  %89 = xor i1 %88, true
  %90 = or i1 false, %80
  %91 = and i1 %89, %90
  %92 = or i1 %87, %91
  %93 = or i1 %76, %77
  %94 = select i1 %92, i32 2139125909, i32 482114166
  store i32 %94, i32* %20
  br label %238

; <label>:95:                                     ; preds = %21
  store i32 48172925, i32* %20
  br label %238

; <label>:96:                                     ; preds = %21
  %97 = load i32, i32* @x.448
  %98 = load i32, i32* @y.449
  %99 = add i32 %97, 337392013
  %100 = sub i32 %99, 1
  %101 = sub i32 %100, 337392013
  %102 = sub i32 %97, 1
  %103 = mul i32 %97, %101
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %98, 10
  %107 = xor i1 %105, true
  %108 = xor i1 %106, true
  %109 = xor i1 true, true
  %110 = and i1 %107, true
  %111 = and i1 %105, %109
  %112 = and i1 %108, true
  %113 = and i1 %106, %109
  %114 = or i1 %110, %111
  %115 = or i1 %112, %113
  %116 = xor i1 %114, %115
  %117 = or i1 %107, %108
  %118 = xor i1 %117, true
  %119 = or i1 true, %109
  %120 = and i1 %118, %119
  %121 = or i1 %116, %120
  %122 = or i1 %105, %106
  %123 = select i1 %121, i32 1348523989, i32 1420338172
  store i32 %123, i32* %20
  br label %238

; <label>:124:                                    ; preds = %21
  %125 = load %struct.shop*, %struct.shop** %8, align 8
  %126 = load i64, i64* %9, align 8
  %127 = sub i64 0, %126
  %128 = add i64 0, %127
  %129 = sub i64 0, %126
  %130 = getelementptr inbounds %struct.shop, %struct.shop* %125, i64 %128
  store %struct.shop* %130, %struct.shop** %4
  %131 = load i32, i32* @x.448
  %132 = load i32, i32* @y.449
  %133 = sub i32 %131, 1238987590
  %134 = sub i32 %133, 1
  %135 = add i32 %134, 1238987590
  %136 = sub i32 %131, 1
  %137 = mul i32 %131, %135
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %132, 10
  %141 = xor i1 %139, true
  %142 = xor i1 %140, true
  %143 = xor i1 true, true
  %144 = and i1 %141, true
  %145 = and i1 %139, %143
  %146 = and i1 %142, true
  %147 = and i1 %140, %143
  %148 = or i1 %144, %145
  %149 = or i1 %146, %147
  %150 = xor i1 %148, %149
  %151 = or i1 %141, %142
  %152 = xor i1 %151, true
  %153 = or i1 true, %143
  %154 = and i1 %152, %153
  %155 = or i1 %150, %154
  %156 = or i1 %139, %140
  %157 = select i1 %155, i32 -270325678, i32 1420338172
  store i32 %157, i32* %20
  br label %238

; <label>:158:                                    ; preds = %21
  %159 = load volatile %struct.shop*, %struct.shop** %4
  ret %struct.shop* %159

; <label>:160:                                    ; preds = %21
  %161 = load %struct.shop*, %struct.shop** %8, align 8
  %162 = load i64, i64* %9, align 8
  %163 = shl i64 0, %162
  %164 = add i64 0, -729260501148522268
  %165 = sub i64 %164, 0
  %166 = sub i64 %165, -729260501148522268
  %167 = sub i64 0, 0
  %168 = sub i64 %166, -5508727362965575892
  %169 = add i64 %168, %162
  %170 = add i64 %169, -5508727362965575892
  %171 = add i64 %166, %162
  %172 = add i64 0, -48240056083494270
  %173 = sub i64 %172, %162
  %174 = sub i64 %173, -48240056083494270
  %175 = sub i64 0, %162
  %176 = mul i64 %174, %162
  %177 = shl i64 0, %162
  %178 = sub i64 0, 49906229455318229
  %179 = sub i64 %178, %162
  %180 = add i64 %179, 49906229455318229
  %181 = sub i64 0, %162
  %182 = getelementptr inbounds %struct.shop, %struct.shop* %161, i64 %180
  %183 = bitcast %struct.shop* %182 to i8*
  %184 = load %struct.shop*, %struct.shop** %6, align 8
  %185 = bitcast %struct.shop* %184 to i8*
  %186 = load i64, i64* %9, align 8
  %187 = sub i64 0, 16
  %188 = add i64 0, %187
  %189 = sub i64 0, 16
  %190 = sub i64 0, %188
  %191 = sub i64 0, %186
  %192 = add i64 %190, %191
  %193 = sub i64 0, %192
  %194 = add i64 %188, %186
  %195 = shl i64 16, %186
  %196 = shl i64 16, %186
  %197 = mul i64 16, %186
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %183, i8* %185, i64 %197, i32 8, i1 false)
  store i32 -1468339825, i32* %20
  br label %238

; <label>:198:                                    ; preds = %21
  %199 = load %struct.shop*, %struct.shop** %8, align 8
  %200 = load i64, i64* %9, align 8
  %201 = sub i64 0, 0
  %202 = add i64 0, %201
  %203 = sub i64 0, 0
  %204 = sub i64 %202, -7296789701658147289
  %205 = add i64 %204, %200
  %206 = add i64 %205, -7296789701658147289
  %207 = add i64 %202, %200
  %208 = shl i64 0, %200
  %209 = add i64 0, 4010977521590954509
  %210 = sub i64 %209, 0
  %211 = sub i64 %210, 4010977521590954509
  %212 = sub i64 0, 0
  %213 = sub i64 0, %211
  %214 = sub i64 0, %200
  %215 = add i64 %213, %214
  %216 = sub i64 0, %215
  %217 = add i64 %211, %200
  %218 = sub i64 0, 0
  %219 = add i64 0, %218
  %220 = sub i64 0, 0
  %221 = sub i64 0, %200
  %222 = sub i64 %219, %221
  %223 = add i64 %219, %200
  %224 = add i64 0, -51142717437240871
  %225 = sub i64 %224, %200
  %226 = sub i64 %225, -51142717437240871
  %227 = sub i64 0, %200
  %228 = mul i64 %226, %200
  %229 = sub i64 0, %200
  %230 = add i64 0, %229
  %231 = sub i64 0, %200
  %232 = mul i64 %230, %200
  %233 = sub i64 0, 5210877970515142896
  %234 = sub i64 %233, %200
  %235 = add i64 %234, 5210877970515142896
  %236 = sub i64 0, %200
  %237 = getelementptr inbounds %struct.shop, %struct.shop* %199, i64 %235
  store i32 1348523989, i32* %20
  br label %238

; <label>:238:                                    ; preds = %198, %160, %124, %96, %95, %56, %28, %24, %23
  br label %21
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEELb1EE7_S_baseES7_(%struct.shop*) #4 comdat align 2 {
  %2 = alloca %struct.shop*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.450
  %6 = load i32, i32* @y.451
  %7 = add i32 %5, -997270621
  %8 = sub i32 %7, 1
  %9 = sub i32 %8, -997270621
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -1000004261, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %78
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -1000004261, label %19
    i32 1120053287, label %39
    i32 -1057497186, label %71
    i32 1645304519, label %73
  ]

; <label>:18:                                     ; preds = %16
  br label %78

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 1120053287, i32 1645304519
  store i32 %38, i32* %15
  br label %78

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %41 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %40, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %41, align 8
  %42 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %40) #3
  %43 = load %struct.shop*, %struct.shop** %42, align 8
  store %struct.shop* %43, %struct.shop** %2
  %44 = load i32, i32* @x.450
  %45 = load i32, i32* @y.451
  %46 = add i32 %44, 224884424
  %47 = sub i32 %46, 1
  %48 = sub i32 %47, 224884424
  %49 = sub i32 %44, 1
  %50 = mul i32 %44, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %45, 10
  %54 = xor i1 %52, true
  %55 = xor i1 %53, true
  %56 = xor i1 false, true
  %57 = and i1 %54, false
  %58 = and i1 %52, %56
  %59 = and i1 %55, false
  %60 = and i1 %53, %56
  %61 = or i1 %57, %58
  %62 = or i1 %59, %60
  %63 = xor i1 %61, %62
  %64 = or i1 %54, %55
  %65 = xor i1 %64, true
  %66 = or i1 false, %56
  %67 = and i1 %65, %66
  %68 = or i1 %63, %67
  %69 = or i1 %52, %53
  %70 = select i1 %68, i32 -1057497186, i32 1645304519
  store i32 %70, i32* %15
  br label %78

; <label>:71:                                     ; preds = %16
  %72 = load volatile %struct.shop*, %struct.shop** %2
  ret %struct.shop* %72

; <label>:73:                                     ; preds = %16
  %74 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %75 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %74, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %75, align 8
  %76 = call dereferenceable(8) %struct.shop** @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEE4baseEv(%"class.__gnu_cxx::__normal_iterator"* %74) #3
  %77 = load %struct.shop*, %struct.shop** %76, align 8
  store i32 1120053287, i32* %15
  br label %78

; <label>:78:                                     ; preds = %73, %39, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr %struct.shop* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS2_SaIS2_EEEELb0EE7_S_baseES7_(%struct.shop*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %3 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %3, i32 0, i32 0
  store %struct.shop* %0, %struct.shop** %4, align 8
  %5 = bitcast %"class.__gnu_cxx::__normal_iterator"* %2 to i8*
  %6 = bitcast %"class.__gnu_cxx::__normal_iterator"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 8, i32 8, i1 false)
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %2, i32 0, i32 0
  %8 = load %struct.shop*, %struct.shop** %7, align 8
  ret %struct.shop* %8
}

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRK4shopS4_EEclIS2_NS_17__normal_iteratorIPS2_St6vectorIS2_SaIS2_EEEEEEbRT_T0_(%"struct.__gnu_cxx::__ops::_Val_comp_iter"*, %struct.shop* dereferenceable(16), %struct.shop*) #0 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator", align 8
  %5 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, align 8
  %6 = alloca %struct.shop*, align 8
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator", %"class.__gnu_cxx::__normal_iterator"* %4, i32 0, i32 0
  store %struct.shop* %2, %struct.shop** %7, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %5, align 8
  store %struct.shop* %1, %struct.shop** %6, align 8
  %8 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %5, align 8
  %9 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %8, i32 0, i32 0
  %10 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %9, align 8
  %11 = load %struct.shop*, %struct.shop** %6, align 8
  %12 = call dereferenceable(16) %struct.shop* @_ZNK9__gnu_cxx17__normal_iteratorIP4shopSt6vectorIS1_SaIS1_EEEdeEv(%"class.__gnu_cxx::__normal_iterator"* %4) #3
  %13 = call zeroext i1 %10(%struct.shop* dereferenceable(16) %11, %struct.shop* dereferenceable(16) %12)
  ret i1 %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx5__ops14_Val_comp_iterIPFbRK4shopS4_EEC2ES6_(%"struct.__gnu_cxx::__ops::_Val_comp_iter"*, i1 (%struct.shop*, %struct.shop*)*) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, align 8
  %4 = alloca i1 (%struct.shop*, %struct.shop*)*, align 8
  store %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %3, align 8
  store i1 (%struct.shop*, %struct.shop*)* %1, i1 (%struct.shop*, %struct.shop*)** %4, align 8
  %5 = load %"struct.__gnu_cxx::__ops::_Val_comp_iter"*, %"struct.__gnu_cxx::__ops::_Val_comp_iter"** %3, align 8
  %6 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Val_comp_iter", %"struct.__gnu_cxx::__ops::_Val_comp_iter"* %5, i32 0, i32 0
  %7 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %4, align 8
  store i1 (%struct.shop*, %struct.shop*)* %7, i1 (%struct.shop*, %struct.shop*)** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRK4shopS4_EEC2ES6_(%"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, i1 (%struct.shop*, %struct.shop*)*) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, align 8
  %4 = alloca i1 (%struct.shop*, %struct.shop*)*, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  store i1 (%struct.shop*, %struct.shop*)* %1, i1 (%struct.shop*, %struct.shop*)** %4, align 8
  %5 = load %"struct.__gnu_cxx::__ops::_Iter_comp_iter"*, %"struct.__gnu_cxx::__ops::_Iter_comp_iter"** %3, align 8
  %6 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_comp_iter", %"struct.__gnu_cxx::__ops::_Iter_comp_iter"* %5, i32 0, i32 0
  %7 = load i1 (%struct.shop*, %struct.shop*)*, i1 (%struct.shop*, %struct.shop*)** %4, align 8
  store i1 (%struct.shop*, %struct.shop*)* %7, i1 (%struct.shop*, %struct.shop*)** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.9"*, i64** dereferenceable(8)) unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %4 = alloca i64**, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  store i64** %1, i64*** %4, align 8
  %5 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  %6 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  %7 = load i64**, i64*** %4, align 8
  %8 = load i64*, i64** %7, align 8
  store i64* %8, i64** %6, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64*, i64*) #0 comdat {
  %3 = alloca i1
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %10 = alloca i1
  %11 = alloca i1
  %12 = load i32, i32* @x.462
  %13 = load i32, i32* @y.463
  %14 = sub i32 0, 1
  %15 = add i32 %12, %14
  %16 = sub i32 %12, 1
  %17 = mul i32 %12, %15
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  store i1 %19, i1* %11
  %20 = icmp slt i32 %13, 10
  store i1 %20, i1* %10
  %21 = alloca i32
  store i32 -1979019251, i32* %21
  br label %22

; <label>:22:                                     ; preds = %2, %277
  %23 = load i32, i32* %21
  switch i32 %23, label %24 [
    i32 -1979019251, label %25
    i32 -141415469, label %45
    i32 -725128039, label %88
    i32 458823974, label %91
    i32 334752229, label %118
    i32 -813656927, label %167
    i32 -2017577981, label %168
    i32 -1881213913, label %195
    i32 -1691150370, label %223
    i32 -1093659812, label %224
    i32 -1516943544, label %237
    i32 -1585925753, label %276
  ]

; <label>:24:                                     ; preds = %22
  br label %277

; <label>:25:                                     ; preds = %22
  %26 = load volatile i1, i1* %11
  %27 = load volatile i1, i1* %10
  %28 = xor i1 %26, true
  %29 = xor i1 %27, true
  %30 = xor i1 false, true
  %31 = and i1 %28, false
  %32 = and i1 %26, %30
  %33 = and i1 %29, false
  %34 = and i1 %27, %30
  %35 = or i1 %31, %32
  %36 = or i1 %33, %34
  %37 = xor i1 %35, %36
  %38 = or i1 %28, %29
  %39 = xor i1 %38, true
  %40 = or i1 false, %30
  %41 = and i1 %39, %40
  %42 = or i1 %37, %41
  %43 = or i1 %26, %27
  %44 = select i1 %42, i32 -141415469, i32 -1093659812
  store i32 %44, i32* %21
  br label %277

; <label>:45:                                     ; preds = %22
  %46 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %46, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %47 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %47, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %48 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %49 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %49, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %50 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %50, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %51 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %52 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %52, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %53 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %53, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %54 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %55 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %56 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %55, i32 0, i32 0
  store i64* %0, i64** %56, align 8
  %57 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %58 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %57, i32 0, i32 0
  store i64* %1, i64** %58, align 8
  %59 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %60 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %61 = call zeroext i1 @_ZN9__gnu_cxxneIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %59, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %60) #3
  store i1 %61, i1* %3
  %62 = load i32, i32* @x.462
  %63 = load i32, i32* @y.463
  %64 = sub i32 0, 1
  %65 = add i32 %62, %64
  %66 = sub i32 %62, 1
  %67 = mul i32 %62, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %63, 10
  %71 = xor i1 %69, true
  %72 = xor i1 %70, true
  %73 = xor i1 false, true
  %74 = and i1 %71, false
  %75 = and i1 %69, %73
  %76 = and i1 %72, false
  %77 = and i1 %70, %73
  %78 = or i1 %74, %75
  %79 = or i1 %76, %77
  %80 = xor i1 %78, %79
  %81 = or i1 %71, %72
  %82 = xor i1 %81, true
  %83 = or i1 false, %73
  %84 = and i1 %82, %83
  %85 = or i1 %80, %84
  %86 = or i1 %69, %70
  %87 = select i1 %85, i32 -725128039, i32 -1093659812
  store i32 %87, i32* %21
  br label %277

; <label>:88:                                     ; preds = %22
  %89 = load volatile i1, i1* %3
  %90 = select i1 %89, i32 458823974, i32 -2017577981
  store i32 %90, i32* %21
  br label %277

; <label>:91:                                     ; preds = %22
  %92 = load i32, i32* @x.462
  %93 = load i32, i32* @y.463
  %94 = sub i32 0, 1
  %95 = add i32 %92, %94
  %96 = sub i32 %92, 1
  %97 = mul i32 %92, %95
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %93, 10
  %101 = xor i1 %99, true
  %102 = xor i1 %100, true
  %103 = xor i1 true, true
  %104 = and i1 %101, true
  %105 = and i1 %99, %103
  %106 = and i1 %102, true
  %107 = and i1 %100, %103
  %108 = or i1 %104, %105
  %109 = or i1 %106, %107
  %110 = xor i1 %108, %109
  %111 = or i1 %101, %102
  %112 = xor i1 %111, true
  %113 = or i1 true, %103
  %114 = and i1 %112, %113
  %115 = or i1 %110, %114
  %116 = or i1 %99, %100
  %117 = select i1 %115, i32 334752229, i32 -1516943544
  store i32 %117, i32* %21
  br label %277

; <label>:118:                                    ; preds = %22
  %119 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %120 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %119 to i8*
  %121 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %122 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %120, i8* %122, i64 8, i32 8, i1 false)
  %123 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %124 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %123 to i8*
  %125 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %126 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %124, i8* %126, i64 8, i32 8, i1 false)
  %127 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %128 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %129 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %128, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %127) #3
  %130 = call i64 @_ZSt4__lgl(i64 %129)
  %131 = mul nsw i64 %130, 2
  %132 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %133 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %132, i32 0, i32 0
  %134 = load i64*, i64** %133, align 8
  %135 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %136 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %135, i32 0, i32 0
  %137 = load i64*, i64** %136, align 8
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i64* %134, i64* %137, i64 %131)
  %138 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %139 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %138 to i8*
  %140 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %141 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %140 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %139, i8* %141, i64 8, i32 8, i1 false)
  %142 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %143 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %142 to i8*
  %144 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %145 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %144 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %143, i8* %145, i64 8, i32 8, i1 false)
  %146 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %147 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %146, i32 0, i32 0
  %148 = load i64*, i64** %147, align 8
  %149 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %150 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %149, i32 0, i32 0
  %151 = load i64*, i64** %150, align 8
  call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %148, i64* %151)
  %152 = load i32, i32* @x.462
  %153 = load i32, i32* @y.463
  %154 = sub i32 %152, -1195013809
  %155 = sub i32 %154, 1
  %156 = add i32 %155, -1195013809
  %157 = sub i32 %152, 1
  %158 = mul i32 %152, %156
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %153, 10
  %162 = and i1 %160, %161
  %163 = xor i1 %160, %161
  %164 = or i1 %162, %163
  %165 = or i1 %160, %161
  %166 = select i1 %164, i32 -813656927, i32 -1516943544
  store i32 %166, i32* %21
  br label %277

; <label>:167:                                    ; preds = %22
  store i32 -2017577981, i32* %21
  br label %277

; <label>:168:                                    ; preds = %22
  %169 = load i32, i32* @x.462
  %170 = load i32, i32* @y.463
  %171 = sub i32 0, 1
  %172 = add i32 %169, %171
  %173 = sub i32 %169, 1
  %174 = mul i32 %169, %172
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %170, 10
  %178 = xor i1 %176, true
  %179 = xor i1 %177, true
  %180 = xor i1 true, true
  %181 = and i1 %178, true
  %182 = and i1 %176, %180
  %183 = and i1 %179, true
  %184 = and i1 %177, %180
  %185 = or i1 %181, %182
  %186 = or i1 %183, %184
  %187 = xor i1 %185, %186
  %188 = or i1 %178, %179
  %189 = xor i1 %188, true
  %190 = or i1 true, %180
  %191 = and i1 %189, %190
  %192 = or i1 %187, %191
  %193 = or i1 %176, %177
  %194 = select i1 %192, i32 -1881213913, i32 -1585925753
  store i32 %194, i32* %21
  br label %277

; <label>:195:                                    ; preds = %22
  %196 = load i32, i32* @x.462
  %197 = load i32, i32* @y.463
  %198 = add i32 %196, 1835397890
  %199 = sub i32 %198, 1
  %200 = sub i32 %199, 1835397890
  %201 = sub i32 %196, 1
  %202 = mul i32 %196, %200
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %197, 10
  %206 = xor i1 %204, true
  %207 = xor i1 %205, true
  %208 = xor i1 true, true
  %209 = and i1 %206, true
  %210 = and i1 %204, %208
  %211 = and i1 %207, true
  %212 = and i1 %205, %208
  %213 = or i1 %209, %210
  %214 = or i1 %211, %212
  %215 = xor i1 %213, %214
  %216 = or i1 %206, %207
  %217 = xor i1 %216, true
  %218 = or i1 true, %208
  %219 = and i1 %217, %218
  %220 = or i1 %215, %219
  %221 = or i1 %204, %205
  %222 = select i1 %220, i32 -1691150370, i32 -1585925753
  store i32 %222, i32* %21
  br label %277

; <label>:223:                                    ; preds = %22
  ret void

; <label>:224:                                    ; preds = %22
  %225 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %226 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %227 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %228 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %229 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %230 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %231 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %232 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %233 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %234 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %225, i32 0, i32 0
  store i64* %0, i64** %234, align 8
  %235 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %226, i32 0, i32 0
  store i64* %1, i64** %235, align 8
  %236 = call zeroext i1 @_ZN9__gnu_cxxneIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %225, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %226) #3
  store i32 -141415469, i32* %21
  br label %277

; <label>:237:                                    ; preds = %22
  %238 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %239 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %238 to i8*
  %240 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %241 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %240 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %239, i8* %241, i64 8, i32 8, i1 false)
  %242 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %243 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %242 to i8*
  %244 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %245 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %244 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %243, i8* %245, i64 8, i32 8, i1 false)
  %246 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %247 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %248 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %247, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %246) #3
  %249 = call i64 @_ZSt4__lgl(i64 %248)
  %250 = sub i64 %249, 5805467575929284158
  %251 = sub i64 %250, 2
  %252 = add i64 %251, 5805467575929284158
  %253 = sub i64 %249, 2
  %254 = mul i64 %252, 2
  %255 = mul nsw i64 %249, 2
  %256 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %257 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %256, i32 0, i32 0
  %258 = load i64*, i64** %257, align 8
  %259 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %260 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %259, i32 0, i32 0
  %261 = load i64*, i64** %260, align 8
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i64* %258, i64* %261, i64 %255)
  %262 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %263 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %262 to i8*
  %264 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %265 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %264 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %263, i8* %265, i64 8, i32 8, i1 false)
  %266 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %267 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %266 to i8*
  %268 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %269 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %268 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %267, i8* %269, i64 8, i32 8, i1 false)
  %270 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %271 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %270, i32 0, i32 0
  %272 = load i64*, i64** %271, align 8
  %273 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %274 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %273, i32 0, i32 0
  %275 = load i64*, i64** %274, align 8
  call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %272, i64* %275)
  store i32 334752229, i32* %21
  br label %277

; <label>:276:                                    ; preds = %22
  store i32 -1881213913, i32* %21
  br label %277

; <label>:277:                                    ; preds = %276, %237, %224, %195, %168, %167, %118, %91, %88, %45, %25, %24
  br label %22
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx5__ops16__iter_less_iterEv() #4 comdat {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxxneIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8)) #4 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %1, %"class.__gnu_cxx::__normal_iterator.9"** %4, align 8
  %5 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  %6 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %5) #3
  %7 = load i64*, i64** %6, align 8
  %8 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4, align 8
  %9 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %8) #3
  %10 = load i64*, i64** %9, align 8
  %11 = icmp ne i64* %7, %10
  ret i1 %11
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i64*, i64*, i64) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %7 = alloca i64, align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %12 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %15 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %16 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %17 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %18 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %19 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %0, i64** %19, align 8
  %20 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %1, i64** %20, align 8
  store i64 %2, i64* %7, align 8
  %21 = alloca i32
  store i32 -718288552, i32* %21
  br label %22

; <label>:22:                                     ; preds = %3, %132
  %23 = load i32, i32* %21
  switch i32 %23, label %24 [
    i32 -718288552, label %25
    i32 76806164, label %29
    i32 -867738745, label %33
    i32 -402039725, label %61
    i32 987731866, label %89
    i32 -1855878779, label %90
    i32 1560224680, label %118
    i32 11593686, label %119
  ]

; <label>:24:                                     ; preds = %22
  br label %132

; <label>:25:                                     ; preds = %22
  %26 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %5, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %4) #3
  %27 = icmp sgt i64 %26, 16
  %28 = select i1 %27, i32 76806164, i32 1560224680
  store i32 %28, i32* %21
  br label %132

; <label>:29:                                     ; preds = %22
  %30 = load i64, i64* %7, align 8
  %31 = icmp eq i64 %30, 0
  %32 = select i1 %31, i32 -867738745, i32 -1855878779
  store i32 %32, i32* %21
  br label %132

; <label>:33:                                     ; preds = %22
  %34 = load i32, i32* @x.468
  %35 = load i32, i32* @y.469
  %36 = sub i32 %34, 2038869577
  %37 = sub i32 %36, 1
  %38 = add i32 %37, 2038869577
  %39 = sub i32 %34, 1
  %40 = mul i32 %34, %38
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %35, 10
  %44 = xor i1 %42, true
  %45 = xor i1 %43, true
  %46 = xor i1 false, true
  %47 = and i1 %44, false
  %48 = and i1 %42, %46
  %49 = and i1 %45, false
  %50 = and i1 %43, %46
  %51 = or i1 %47, %48
  %52 = or i1 %49, %50
  %53 = xor i1 %51, %52
  %54 = or i1 %44, %45
  %55 = xor i1 %54, true
  %56 = or i1 false, %46
  %57 = and i1 %55, %56
  %58 = or i1 %53, %57
  %59 = or i1 %42, %43
  %60 = select i1 %58, i32 -402039725, i32 11593686
  store i32 %60, i32* %21
  br label %132

; <label>:61:                                     ; preds = %22
  %62 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  %63 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 8, i32 8, i1 false)
  %64 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  %65 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* %65, i64 8, i32 8, i1 false)
  %66 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  %67 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %66, i8* %67, i64 8, i32 8, i1 false)
  %68 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  %73 = load i64*, i64** %72, align 8
  call void @_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64* %69, i64* %71, i64* %73)
  %74 = load i32, i32* @x.468
  %75 = load i32, i32* @y.469
  %76 = sub i32 %74, 503326056
  %77 = sub i32 %76, 1
  %78 = add i32 %77, 503326056
  %79 = sub i32 %74, 1
  %80 = mul i32 %74, %78
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %75, 10
  %84 = and i1 %82, %83
  %85 = xor i1 %82, %83
  %86 = or i1 %84, %85
  %87 = or i1 %82, %83
  %88 = select i1 %86, i32 987731866, i32 11593686
  store i32 %88, i32* %21
  br label %132

; <label>:89:                                     ; preds = %22
  store i32 1560224680, i32* %21
  br label %132

; <label>:90:                                     ; preds = %22
  %91 = load i64, i64* %7, align 8
  %92 = sub i64 0, %91
  %93 = sub i64 0, -1
  %94 = add i64 %92, %93
  %95 = sub i64 0, %94
  %96 = add nsw i64 %91, -1
  store i64 %95, i64* %7, align 8
  %97 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  %98 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 8, i32 8, i1 false)
  %99 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %14 to i8*
  %100 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %99, i8* %100, i64 8, i32 8, i1 false)
  %101 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  %102 = load i64*, i64** %101, align 8
  %103 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  %104 = load i64*, i64** %103, align 8
  %105 = call i64* @_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_(i64* %102, i64* %104)
  %106 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %12, i32 0, i32 0
  store i64* %105, i64** %106, align 8
  %107 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %16 to i8*
  %108 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %107, i8* %108, i64 8, i32 8, i1 false)
  %109 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %17 to i8*
  %110 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* %110, i64 8, i32 8, i1 false)
  %111 = load i64, i64* %7, align 8
  %112 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %16, i32 0, i32 0
  %113 = load i64*, i64** %112, align 8
  %114 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %17, i32 0, i32 0
  %115 = load i64*, i64** %114, align 8
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i64* %113, i64* %115, i64 %111)
  %116 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  %117 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %116, i8* %117, i64 8, i32 8, i1 false)
  store i32 -718288552, i32* %21
  br label %132

; <label>:118:                                    ; preds = %22
  ret void

; <label>:119:                                    ; preds = %22
  %120 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  %121 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %120, i8* %121, i64 8, i32 8, i1 false)
  %122 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  %123 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %122, i8* %123, i64 8, i32 8, i1 false)
  %124 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  %125 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %124, i8* %125, i64 8, i32 8, i1 false)
  %126 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %127 = load i64*, i64** %126, align 8
  %128 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  %129 = load i64*, i64** %128, align 8
  %130 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  %131 = load i64*, i64** %130, align 8
  call void @_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64* %127, i64* %129, i64* %131)
  store i32 -402039725, i32* %21
  br label %132

; <label>:132:                                    ; preds = %119, %90, %89, %61, %33, %29, %25, %24
  br label %22
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64*, i64*) #0 comdat {
  %3 = alloca i64
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %15 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %16 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %0, i64** %16, align 8
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %1, i64** %17, align 8
  %18 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %5, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %4) #3
  store i64 %18, i64* %3
  %19 = alloca i32
  store i32 -2082760211, i32* %19
  br label %20

; <label>:20:                                     ; preds = %2, %117
  %21 = load i32, i32* %19
  switch i32 %21, label %22 [
    i32 -2082760211, label %23
    i32 -805505931, label %27
    i32 -1497695509, label %44
    i32 1637549115, label %71
    i32 2129091306, label %106
    i32 319098493, label %107
    i32 -166951725, label %108
  ]

; <label>:22:                                     ; preds = %20
  br label %117

; <label>:23:                                     ; preds = %20
  %24 = load volatile i64, i64* %3
  %25 = icmp sgt i64 %24, 16
  %26 = select i1 %25, i32 -805505931, i32 -1497695509
  store i32 %26, i32* %19
  br label %117

; <label>:27:                                     ; preds = %20
  %28 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  %29 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 8, i32 8, i1 false)
  %30 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %4, i64 16) #3
  %31 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  store i64* %30, i64** %31, align 8
  %32 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  call void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %33, i64* %35)
  %36 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %4, i64 16) #3
  %37 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  store i64* %36, i64** %37, align 8
  %38 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  %39 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 8, i32 8, i1 false)
  %40 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  %43 = load i64*, i64** %42, align 8
  call void @_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %41, i64* %43)
  store i32 319098493, i32* %19
  br label %117

; <label>:44:                                     ; preds = %20
  %45 = load i32, i32* @x.470
  %46 = load i32, i32* @y.471
  %47 = sub i32 0, 1
  %48 = add i32 %45, %47
  %49 = sub i32 %45, 1
  %50 = mul i32 %45, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %46, 10
  %54 = xor i1 %52, true
  %55 = xor i1 %53, true
  %56 = xor i1 true, true
  %57 = and i1 %54, true
  %58 = and i1 %52, %56
  %59 = and i1 %55, true
  %60 = and i1 %53, %56
  %61 = or i1 %57, %58
  %62 = or i1 %59, %60
  %63 = xor i1 %61, %62
  %64 = or i1 %54, %55
  %65 = xor i1 %64, true
  %66 = or i1 true, %56
  %67 = and i1 %65, %66
  %68 = or i1 %63, %67
  %69 = or i1 %52, %53
  %70 = select i1 %68, i32 1637549115, i32 -166951725
  store i32 %70, i32* %19
  br label %117

; <label>:71:                                     ; preds = %20
  %72 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  %73 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %73, i64 8, i32 8, i1 false)
  %74 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %14 to i8*
  %75 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %74, i8* %75, i64 8, i32 8, i1 false)
  %76 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  %77 = load i64*, i64** %76, align 8
  %78 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  %79 = load i64*, i64** %78, align 8
  call void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %77, i64* %79)
  %80 = load i32, i32* @x.470
  %81 = load i32, i32* @y.471
  %82 = sub i32 0, 1
  %83 = add i32 %80, %82
  %84 = sub i32 %80, 1
  %85 = mul i32 %80, %83
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %81, 10
  %89 = xor i1 %87, true
  %90 = xor i1 %88, true
  %91 = xor i1 true, true
  %92 = and i1 %89, true
  %93 = and i1 %87, %91
  %94 = and i1 %90, true
  %95 = and i1 %88, %91
  %96 = or i1 %92, %93
  %97 = or i1 %94, %95
  %98 = xor i1 %96, %97
  %99 = or i1 %89, %90
  %100 = xor i1 %99, true
  %101 = or i1 true, %91
  %102 = and i1 %100, %101
  %103 = or i1 %98, %102
  %104 = or i1 %87, %88
  %105 = select i1 %103, i32 2129091306, i32 -166951725
  store i32 %105, i32* %19
  br label %117

; <label>:106:                                    ; preds = %20
  store i32 319098493, i32* %19
  br label %117

; <label>:107:                                    ; preds = %20
  ret void

; <label>:108:                                    ; preds = %20
  %109 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  %110 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* %110, i64 8, i32 8, i1 false)
  %111 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %14 to i8*
  %112 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* %112, i64 8, i32 8, i1 false)
  %113 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  %114 = load i64*, i64** %113, align 8
  %115 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  %116 = load i64*, i64** %115, align 8
  call void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %114, i64* %116)
  store i32 1637549115, i32* %19
  br label %117

; <label>:117:                                    ; preds = %108, %106, %71, %44, %27, %23, %22
  br label %20
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %2, align 8
  %3 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %2, align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  ret i64** %4
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %12 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %15 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %0, i64** %15, align 8
  %16 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %1, i64** %16, align 8
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  store i64* %2, i64** %17, align 8
  %18 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  %19 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 8, i32 8, i1 false)
  %20 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  %21 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 8, i32 8, i1 false)
  %22 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  %23 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 8, i32 8, i1 false)
  %24 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  %29 = load i64*, i64** %28, align 8
  call void @_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64* %25, i64* %27, i64* %29)
  %30 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %12 to i8*
  %31 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 8, i32 8, i1 false)
  %32 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  %33 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 8, i32 8, i1 false)
  %34 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %12, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  %37 = load i64*, i64** %36, align 8
  call void @_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %35, i64* %37)
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_(i64*, i64*) #0 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %16 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %0, i64** %17, align 8
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %1, i64** %18, align 8
  %19 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %5, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %4) #3
  %20 = sdiv i64 %19, 2
  %21 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %4, i64 %20) #3
  %22 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  store i64* %21, i64** %22, align 8
  %23 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  %24 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 8, i32 8, i1 false)
  %25 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %4, i64 1) #3
  %26 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  store i64* %25, i64** %26, align 8
  %27 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  %28 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 8, i32 8, i1 false)
  %29 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmiEl(%"class.__gnu_cxx::__normal_iterator.9"* %5, i64 1) #3
  %30 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  store i64* %29, i64** %30, align 8
  %31 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %32 = load i64*, i64** %31, align 8
  %33 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  %36 = load i64*, i64** %35, align 8
  %37 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  %38 = load i64*, i64** %37, align 8
  call void @_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_(i64* %32, i64* %34, i64* %36, i64* %38)
  %39 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %4, i64 1) #3
  %40 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  store i64* %39, i64** %40, align 8
  %41 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %14 to i8*
  %42 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 8, i32 8, i1 false)
  %43 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %15 to i8*
  %44 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 8, i32 8, i1 false)
  %45 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  %46 = load i64*, i64** %45, align 8
  %47 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  %48 = load i64*, i64** %47, align 8
  %49 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %15, i32 0, i32 0
  %50 = load i64*, i64** %49, align 8
  %51 = call i64* @_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_(i64* %46, i64* %48, i64* %50)
  %52 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  store i64* %51, i64** %52, align 8
  %53 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  %54 = load i64*, i64** %53, align 8
  ret i64* %54
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %17 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %18 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %19 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %20 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  store i64* %0, i64** %20, align 8
  %21 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  store i64* %1, i64** %21, align 8
  %22 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  store i64* %2, i64** %22, align 8
  %23 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  %24 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 8, i32 8, i1 false)
  %25 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  %26 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 8, i32 8, i1 false)
  %27 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  %28 = load i64*, i64** %27, align 8
  %29 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  %30 = load i64*, i64** %29, align 8
  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64* %28, i64* %30)
  %31 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  %32 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 8, i32 8, i1 false)
  %33 = alloca i32
  store i32 1669181169, i32* %33
  br label %34

; <label>:34:                                     ; preds = %3, %295
  %35 = load i32, i32* %33
  switch i32 %35, label %36 [
    i32 1669181169, label %37
    i32 -2098578648, label %65
    i32 1612403397, label %94
    i32 -1338020654, label %97
    i32 -1022530941, label %113
    i32 731670244, label %150
    i32 143595880, label %153
    i32 482257899, label %181
    i32 -1979799575, label %209
    i32 -1306498191, label %210
    i32 870915937, label %237
    i32 347458457, label %265
    i32 358909284, label %266
    i32 868859677, label %268
    i32 1615373652, label %269
    i32 1281191303, label %271
    i32 2128890476, label %281
    i32 -461781312, label %294
  ]

; <label>:36:                                     ; preds = %34
  br label %295

; <label>:37:                                     ; preds = %34
  %38 = load i32, i32* @x.478
  %39 = load i32, i32* @y.479
  %40 = sub i32 %38, 339928906
  %41 = sub i32 %40, 1
  %42 = add i32 %41, 339928906
  %43 = sub i32 %38, 1
  %44 = mul i32 %38, %42
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %39, 10
  %48 = xor i1 %46, true
  %49 = xor i1 %47, true
  %50 = xor i1 false, true
  %51 = and i1 %48, false
  %52 = and i1 %46, %50
  %53 = and i1 %49, false
  %54 = and i1 %47, %50
  %55 = or i1 %51, %52
  %56 = or i1 %53, %54
  %57 = xor i1 %55, %56
  %58 = or i1 %48, %49
  %59 = xor i1 %58, true
  %60 = or i1 false, %50
  %61 = and i1 %59, %60
  %62 = or i1 %57, %61
  %63 = or i1 %46, %47
  %64 = select i1 %62, i32 -2098578648, i32 1615373652
  store i32 %64, i32* %33
  br label %295

; <label>:65:                                     ; preds = %34
  %66 = call zeroext i1 @_ZN9__gnu_cxxltIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %13, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %8) #3
  store i1 %66, i1* %5
  %67 = load i32, i32* @x.478
  %68 = load i32, i32* @y.479
  %69 = sub i32 %67, -1416315303
  %70 = sub i32 %69, 1
  %71 = add i32 %70, -1416315303
  %72 = sub i32 %67, 1
  %73 = mul i32 %67, %71
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %68, 10
  %77 = xor i1 %75, true
  %78 = xor i1 %76, true
  %79 = xor i1 false, true
  %80 = and i1 %77, false
  %81 = and i1 %75, %79
  %82 = and i1 %78, false
  %83 = and i1 %76, %79
  %84 = or i1 %80, %81
  %85 = or i1 %82, %83
  %86 = xor i1 %84, %85
  %87 = or i1 %77, %78
  %88 = xor i1 %87, true
  %89 = or i1 false, %79
  %90 = and i1 %88, %89
  %91 = or i1 %86, %90
  %92 = or i1 %75, %76
  %93 = select i1 %91, i32 1612403397, i32 1615373652
  store i32 %93, i32* %33
  br label %295

; <label>:94:                                     ; preds = %34
  %95 = load volatile i1, i1* %5
  %96 = select i1 %95, i32 -1338020654, i32 868859677
  store i32 %96, i32* %33
  br label %295

; <label>:97:                                     ; preds = %34
  %98 = load i32, i32* @x.478
  %99 = load i32, i32* @y.479
  %100 = sub i32 %98, -1760906881
  %101 = sub i32 %100, 1
  %102 = add i32 %101, -1760906881
  %103 = sub i32 %98, 1
  %104 = mul i32 %98, %102
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %99, 10
  %108 = and i1 %106, %107
  %109 = xor i1 %106, %107
  %110 = or i1 %108, %109
  %111 = or i1 %106, %107
  %112 = select i1 %110, i32 -1022530941, i32 1281191303
  store i32 %112, i32* %33
  br label %295

; <label>:113:                                    ; preds = %34
  %114 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %14 to i8*
  %115 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %114, i8* %115, i64 8, i32 8, i1 false)
  %116 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %15 to i8*
  %117 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %116, i8* %117, i64 8, i32 8, i1 false)
  %118 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  %119 = load i64*, i64** %118, align 8
  %120 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %15, i32 0, i32 0
  %121 = load i64*, i64** %120, align 8
  %122 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %9, i64* %119, i64* %121)
  store i1 %122, i1* %4
  %123 = load i32, i32* @x.478
  %124 = load i32, i32* @y.479
  %125 = sub i32 %123, -1595360404
  %126 = sub i32 %125, 1
  %127 = add i32 %126, -1595360404
  %128 = sub i32 %123, 1
  %129 = mul i32 %123, %127
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %124, 10
  %133 = xor i1 %131, true
  %134 = xor i1 %132, true
  %135 = xor i1 true, true
  %136 = and i1 %133, true
  %137 = and i1 %131, %135
  %138 = and i1 %134, true
  %139 = and i1 %132, %135
  %140 = or i1 %136, %137
  %141 = or i1 %138, %139
  %142 = xor i1 %140, %141
  %143 = or i1 %133, %134
  %144 = xor i1 %143, true
  %145 = or i1 true, %135
  %146 = and i1 %144, %145
  %147 = or i1 %142, %146
  %148 = or i1 %131, %132
  %149 = select i1 %147, i32 731670244, i32 1281191303
  store i32 %149, i32* %33
  br label %295

; <label>:150:                                    ; preds = %34
  %151 = load volatile i1, i1* %4
  %152 = select i1 %151, i32 143595880, i32 -1306498191
  store i32 %152, i32* %33
  br label %295

; <label>:153:                                    ; preds = %34
  %154 = load i32, i32* @x.478
  %155 = load i32, i32* @y.479
  %156 = sub i32 %154, 521996957
  %157 = sub i32 %156, 1
  %158 = add i32 %157, 521996957
  %159 = sub i32 %154, 1
  %160 = mul i32 %154, %158
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %155, 10
  %164 = xor i1 %162, true
  %165 = xor i1 %163, true
  %166 = xor i1 true, true
  %167 = and i1 %164, true
  %168 = and i1 %162, %166
  %169 = and i1 %165, true
  %170 = and i1 %163, %166
  %171 = or i1 %167, %168
  %172 = or i1 %169, %170
  %173 = xor i1 %171, %172
  %174 = or i1 %164, %165
  %175 = xor i1 %174, true
  %176 = or i1 true, %166
  %177 = and i1 %175, %176
  %178 = or i1 %173, %177
  %179 = or i1 %162, %163
  %180 = select i1 %178, i32 482257899, i32 2128890476
  store i32 %180, i32* %33
  br label %295

; <label>:181:                                    ; preds = %34
  %182 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %16 to i8*
  %183 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %182, i8* %183, i64 8, i32 8, i1 false)
  %184 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %17 to i8*
  %185 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %184, i8* %185, i64 8, i32 8, i1 false)
  %186 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %18 to i8*
  %187 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %186, i8* %187, i64 8, i32 8, i1 false)
  %188 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %16, i32 0, i32 0
  %189 = load i64*, i64** %188, align 8
  %190 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %17, i32 0, i32 0
  %191 = load i64*, i64** %190, align 8
  %192 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %18, i32 0, i32 0
  %193 = load i64*, i64** %192, align 8
  call void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64* %189, i64* %191, i64* %193)
  %194 = load i32, i32* @x.478
  %195 = load i32, i32* @y.479
  %196 = add i32 %194, -405278584
  %197 = sub i32 %196, 1
  %198 = sub i32 %197, -405278584
  %199 = sub i32 %194, 1
  %200 = mul i32 %194, %198
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %195, 10
  %204 = and i1 %202, %203
  %205 = xor i1 %202, %203
  %206 = or i1 %204, %205
  %207 = or i1 %202, %203
  %208 = select i1 %206, i32 -1979799575, i32 2128890476
  store i32 %208, i32* %33
  br label %295

; <label>:209:                                    ; preds = %34
  store i32 -1306498191, i32* %33
  br label %295

; <label>:210:                                    ; preds = %34
  %211 = load i32, i32* @x.478
  %212 = load i32, i32* @y.479
  %213 = sub i32 0, 1
  %214 = add i32 %211, %213
  %215 = sub i32 %211, 1
  %216 = mul i32 %211, %214
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %212, 10
  %220 = xor i1 %218, true
  %221 = xor i1 %219, true
  %222 = xor i1 true, true
  %223 = and i1 %220, true
  %224 = and i1 %218, %222
  %225 = and i1 %221, true
  %226 = and i1 %219, %222
  %227 = or i1 %223, %224
  %228 = or i1 %225, %226
  %229 = xor i1 %227, %228
  %230 = or i1 %220, %221
  %231 = xor i1 %230, true
  %232 = or i1 true, %222
  %233 = and i1 %231, %232
  %234 = or i1 %229, %233
  %235 = or i1 %218, %219
  %236 = select i1 %234, i32 870915937, i32 -461781312
  store i32 %236, i32* %33
  br label %295

; <label>:237:                                    ; preds = %34
  %238 = load i32, i32* @x.478
  %239 = load i32, i32* @y.479
  %240 = sub i32 %238, -1222586080
  %241 = sub i32 %240, 1
  %242 = add i32 %241, -1222586080
  %243 = sub i32 %238, 1
  %244 = mul i32 %238, %242
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %239, 10
  %248 = xor i1 %246, true
  %249 = xor i1 %247, true
  %250 = xor i1 true, true
  %251 = and i1 %248, true
  %252 = and i1 %246, %250
  %253 = and i1 %249, true
  %254 = and i1 %247, %250
  %255 = or i1 %251, %252
  %256 = or i1 %253, %254
  %257 = xor i1 %255, %256
  %258 = or i1 %248, %249
  %259 = xor i1 %258, true
  %260 = or i1 true, %250
  %261 = and i1 %259, %260
  %262 = or i1 %257, %261
  %263 = or i1 %246, %247
  %264 = select i1 %262, i32 347458457, i32 -461781312
  store i32 %264, i32* %33
  br label %295

; <label>:265:                                    ; preds = %34
  store i32 358909284, i32* %33
  br label %295

; <label>:266:                                    ; preds = %34
  %267 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv(%"class.__gnu_cxx::__normal_iterator.9"* %13) #3
  store i32 1669181169, i32* %33
  br label %295

; <label>:268:                                    ; preds = %34
  ret void

; <label>:269:                                    ; preds = %34
  %270 = call zeroext i1 @_ZN9__gnu_cxxltIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %13, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %8) #3
  store i32 -2098578648, i32* %33
  br label %295

; <label>:271:                                    ; preds = %34
  %272 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %14 to i8*
  %273 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %272, i8* %273, i64 8, i32 8, i1 false)
  %274 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %15 to i8*
  %275 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %274, i8* %275, i64 8, i32 8, i1 false)
  %276 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  %277 = load i64*, i64** %276, align 8
  %278 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %15, i32 0, i32 0
  %279 = load i64*, i64** %278, align 8
  %280 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %9, i64* %277, i64* %279)
  store i32 -1022530941, i32* %33
  br label %295

; <label>:281:                                    ; preds = %34
  %282 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %16 to i8*
  %283 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %282, i8* %283, i64 8, i32 8, i1 false)
  %284 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %17 to i8*
  %285 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %284, i8* %285, i64 8, i32 8, i1 false)
  %286 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %18 to i8*
  %287 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %286, i8* %287, i64 8, i32 8, i1 false)
  %288 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %16, i32 0, i32 0
  %289 = load i64*, i64** %288, align 8
  %290 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %17, i32 0, i32 0
  %291 = load i64*, i64** %290, align 8
  %292 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %18, i32 0, i32 0
  %293 = load i64*, i64** %292, align 8
  call void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64* %289, i64* %291, i64* %293)
  store i32 482257899, i32* %33
  br label %295

; <label>:294:                                    ; preds = %34
  store i32 870915937, i32* %33
  br label %295

; <label>:295:                                    ; preds = %294, %281, %271, %269, %266, %265, %237, %210, %209, %181, %153, %150, %113, %97, %94, %65, %37, %36
  br label %34
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64*, i64*) #0 comdat {
  %3 = alloca i1
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %9 = alloca i1
  %10 = alloca i1
  %11 = load i32, i32* @x.480
  %12 = load i32, i32* @y.481
  %13 = sub i32 0, 1
  %14 = add i32 %11, %13
  %15 = sub i32 %11, 1
  %16 = mul i32 %11, %14
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  store i1 %18, i1* %10
  %19 = icmp slt i32 %12, 10
  store i1 %19, i1* %9
  %20 = alloca i32
  store i32 351769574, i32* %20
  br label %21

; <label>:21:                                     ; preds = %2, %162
  %22 = load i32, i32* %20
  switch i32 %22, label %23 [
    i32 351769574, label %24
    i32 1080016142, label %32
    i32 -160986975, label %59
    i32 -1935412328, label %60
    i32 237338689, label %88
    i32 -484743629, label %119
    i32 691583148, label %122
    i32 1378781634, label %146
    i32 -1054031251, label %147
    i32 -1823833499, label %157
  ]

; <label>:23:                                     ; preds = %21
  br label %162

; <label>:24:                                     ; preds = %21
  %25 = load volatile i1, i1* %10
  %26 = load volatile i1, i1* %9
  %27 = and i1 %25, %26
  %28 = xor i1 %25, %26
  %29 = or i1 %27, %28
  %30 = or i1 %25, %26
  %31 = select i1 %29, i32 1080016142, i32 -1054031251
  store i32 %31, i32* %20
  br label %162

; <label>:32:                                     ; preds = %21
  %33 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %33, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %34 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %34, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %35 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %36 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %36, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %37 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %37, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %38 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %38, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %39 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %40 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %41 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %40, i32 0, i32 0
  store i64* %0, i64** %41, align 8
  %42 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %43 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %42, i32 0, i32 0
  store i64* %1, i64** %43, align 8
  %44 = load i32, i32* @x.480
  %45 = load i32, i32* @y.481
  %46 = sub i32 %44, -764221085
  %47 = sub i32 %46, 1
  %48 = add i32 %47, -764221085
  %49 = sub i32 %44, 1
  %50 = mul i32 %44, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %45, 10
  %54 = and i1 %52, %53
  %55 = xor i1 %52, %53
  %56 = or i1 %54, %55
  %57 = or i1 %52, %53
  %58 = select i1 %56, i32 -160986975, i32 -1054031251
  store i32 %58, i32* %20
  br label %162

; <label>:59:                                     ; preds = %21
  store i32 -1935412328, i32* %20
  br label %162

; <label>:60:                                     ; preds = %21
  %61 = load i32, i32* @x.480
  %62 = load i32, i32* @y.481
  %63 = sub i32 %61, -1153186045
  %64 = sub i32 %63, 1
  %65 = add i32 %64, -1153186045
  %66 = sub i32 %61, 1
  %67 = mul i32 %61, %65
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %62, 10
  %71 = xor i1 %69, true
  %72 = xor i1 %70, true
  %73 = xor i1 true, true
  %74 = and i1 %71, true
  %75 = and i1 %69, %73
  %76 = and i1 %72, true
  %77 = and i1 %70, %73
  %78 = or i1 %74, %75
  %79 = or i1 %76, %77
  %80 = xor i1 %78, %79
  %81 = or i1 %71, %72
  %82 = xor i1 %81, true
  %83 = or i1 true, %73
  %84 = and i1 %82, %83
  %85 = or i1 %80, %84
  %86 = or i1 %69, %70
  %87 = select i1 %85, i32 237338689, i32 -1823833499
  store i32 %87, i32* %20
  br label %162

; <label>:88:                                     ; preds = %21
  %89 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %90 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %91 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %90, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %89) #3
  %92 = icmp sgt i64 %91, 1
  store i1 %92, i1* %3
  %93 = load i32, i32* @x.480
  %94 = load i32, i32* @y.481
  %95 = sub i32 0, 1
  %96 = add i32 %93, %95
  %97 = sub i32 %93, 1
  %98 = mul i32 %93, %96
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %94, 10
  %102 = xor i1 %100, true
  %103 = xor i1 %101, true
  %104 = xor i1 false, true
  %105 = and i1 %102, false
  %106 = and i1 %100, %104
  %107 = and i1 %103, false
  %108 = and i1 %101, %104
  %109 = or i1 %105, %106
  %110 = or i1 %107, %108
  %111 = xor i1 %109, %110
  %112 = or i1 %102, %103
  %113 = xor i1 %112, true
  %114 = or i1 false, %104
  %115 = and i1 %113, %114
  %116 = or i1 %111, %115
  %117 = or i1 %100, %101
  %118 = select i1 %116, i32 -484743629, i32 -1823833499
  store i32 %118, i32* %20
  br label %162

; <label>:119:                                    ; preds = %21
  %120 = load volatile i1, i1* %3
  %121 = select i1 %120, i32 691583148, i32 1378781634
  store i32 %121, i32* %20
  br label %162

; <label>:122:                                    ; preds = %21
  %123 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %124 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmmEv(%"class.__gnu_cxx::__normal_iterator.9"* %123) #3
  %125 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %126 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %125 to i8*
  %127 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %128 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %127 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %126, i8* %128, i64 8, i32 8, i1 false)
  %129 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %130 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %129 to i8*
  %131 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %132 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %131 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %130, i8* %132, i64 8, i32 8, i1 false)
  %133 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %134 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %133 to i8*
  %135 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %136 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %135 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %134, i8* %136, i64 8, i32 8, i1 false)
  %137 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %138 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %137, i32 0, i32 0
  %139 = load i64*, i64** %138, align 8
  %140 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %141 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %140, i32 0, i32 0
  %142 = load i64*, i64** %141, align 8
  %143 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %144 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %143, i32 0, i32 0
  %145 = load i64*, i64** %144, align 8
  call void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64* %139, i64* %142, i64* %145)
  store i32 -1935412328, i32* %20
  br label %162

; <label>:146:                                    ; preds = %21
  ret void

; <label>:147:                                    ; preds = %21
  %148 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %149 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %150 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %151 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %152 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %153 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %154 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %155 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %148, i32 0, i32 0
  store i64* %0, i64** %155, align 8
  %156 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %149, i32 0, i32 0
  store i64* %1, i64** %156, align 8
  store i32 1080016142, i32* %20
  br label %162

; <label>:157:                                    ; preds = %21
  %158 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %159 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %160 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %159, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %158) #3
  %161 = icmp sgt i64 %160, 1
  store i32 237338689, i32* %20
  br label %162

; <label>:162:                                    ; preds = %157, %147, %122, %119, %88, %60, %59, %32, %24, %23
  br label %21
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64*, i64*) #0 comdat {
  %3 = alloca i1
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %6 = alloca i64*
  %7 = alloca i64*
  %8 = alloca i64*
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %11 = alloca i1
  %12 = alloca i1
  %13 = load i32, i32* @x.482
  %14 = load i32, i32* @y.483
  %15 = sub i32 %13, -1745912148
  %16 = sub i32 %15, 1
  %17 = add i32 %16, -1745912148
  %18 = sub i32 %13, 1
  %19 = mul i32 %13, %17
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  store i1 %21, i1* %12
  %22 = icmp slt i32 %14, 10
  store i1 %22, i1* %11
  %23 = alloca i32
  store i32 -1414372659, i32* %23
  br label %24

; <label>:24:                                     ; preds = %2, %207
  %25 = load i32, i32* %23
  switch i32 %25, label %26 [
    i32 -1414372659, label %27
    i32 1821202335, label %47
    i32 -41240090, label %92
    i32 1644354777, label %95
    i32 1090813546, label %111
    i32 -1307859848, label %138
    i32 -1269174580, label %139
    i32 -519320515, label %152
    i32 -707135667, label %182
    i32 -144676732, label %183
    i32 1867980449, label %191
    i32 -1758563579, label %192
    i32 1948949266, label %206
  ]

; <label>:26:                                     ; preds = %24
  br label %207

; <label>:27:                                     ; preds = %24
  %28 = load volatile i1, i1* %12
  %29 = load volatile i1, i1* %11
  %30 = xor i1 %28, true
  %31 = xor i1 %29, true
  %32 = xor i1 true, true
  %33 = and i1 %30, true
  %34 = and i1 %28, %32
  %35 = and i1 %31, true
  %36 = and i1 %29, %32
  %37 = or i1 %33, %34
  %38 = or i1 %35, %36
  %39 = xor i1 %37, %38
  %40 = or i1 %30, %31
  %41 = xor i1 %40, true
  %42 = or i1 true, %32
  %43 = and i1 %41, %42
  %44 = or i1 %39, %43
  %45 = or i1 %28, %29
  %46 = select i1 %44, i32 1821202335, i32 -1758563579
  store i32 %46, i32* %23
  br label %207

; <label>:47:                                     ; preds = %24
  %48 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %48, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %49 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %49, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %50 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %51 = alloca i64, align 8
  store i64* %51, i64** %8
  %52 = alloca i64, align 8
  store i64* %52, i64** %7
  %53 = alloca i64, align 8
  store i64* %53, i64** %6
  %54 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %54, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %55 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %55, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %56 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %57 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %58 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %57, i32 0, i32 0
  store i64* %0, i64** %58, align 8
  %59 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %60 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %59, i32 0, i32 0
  store i64* %1, i64** %60, align 8
  %61 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %62 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %63 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %62, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %61) #3
  %64 = icmp slt i64 %63, 2
  store i1 %64, i1* %3
  %65 = load i32, i32* @x.482
  %66 = load i32, i32* @y.483
  %67 = add i32 %65, 2009655170
  %68 = sub i32 %67, 1
  %69 = sub i32 %68, 2009655170
  %70 = sub i32 %65, 1
  %71 = mul i32 %65, %69
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %66, 10
  %75 = xor i1 %73, true
  %76 = xor i1 %74, true
  %77 = xor i1 true, true
  %78 = and i1 %75, true
  %79 = and i1 %73, %77
  %80 = and i1 %76, true
  %81 = and i1 %74, %77
  %82 = or i1 %78, %79
  %83 = or i1 %80, %81
  %84 = xor i1 %82, %83
  %85 = or i1 %75, %76
  %86 = xor i1 %85, true
  %87 = or i1 true, %77
  %88 = and i1 %86, %87
  %89 = or i1 %84, %88
  %90 = or i1 %73, %74
  %91 = select i1 %89, i32 -41240090, i32 -1758563579
  store i32 %91, i32* %23
  br label %207

; <label>:92:                                     ; preds = %24
  %93 = load volatile i1, i1* %3
  %94 = select i1 %93, i32 1644354777, i32 -1269174580
  store i32 %94, i32* %23
  br label %207

; <label>:95:                                     ; preds = %24
  %96 = load i32, i32* @x.482
  %97 = load i32, i32* @y.483
  %98 = add i32 %96, 2124704823
  %99 = sub i32 %98, 1
  %100 = sub i32 %99, 2124704823
  %101 = sub i32 %96, 1
  %102 = mul i32 %96, %100
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %97, 10
  %106 = and i1 %104, %105
  %107 = xor i1 %104, %105
  %108 = or i1 %106, %107
  %109 = or i1 %104, %105
  %110 = select i1 %108, i32 1090813546, i32 1948949266
  store i32 %110, i32* %23
  br label %207

; <label>:111:                                    ; preds = %24
  %112 = load i32, i32* @x.482
  %113 = load i32, i32* @y.483
  %114 = sub i32 0, 1
  %115 = add i32 %112, %114
  %116 = sub i32 %112, 1
  %117 = mul i32 %112, %115
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %113, 10
  %121 = xor i1 %119, true
  %122 = xor i1 %120, true
  %123 = xor i1 false, true
  %124 = and i1 %121, false
  %125 = and i1 %119, %123
  %126 = and i1 %122, false
  %127 = and i1 %120, %123
  %128 = or i1 %124, %125
  %129 = or i1 %126, %127
  %130 = xor i1 %128, %129
  %131 = or i1 %121, %122
  %132 = xor i1 %131, true
  %133 = or i1 false, %123
  %134 = and i1 %132, %133
  %135 = or i1 %130, %134
  %136 = or i1 %119, %120
  %137 = select i1 %135, i32 -1307859848, i32 1948949266
  store i32 %137, i32* %23
  br label %207

; <label>:138:                                    ; preds = %24
  store i32 1867980449, i32* %23
  br label %207

; <label>:139:                                    ; preds = %24
  %140 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %141 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %142 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %141, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %140) #3
  %143 = load volatile i64*, i64** %8
  store i64 %142, i64* %143, align 8
  %144 = load volatile i64*, i64** %8
  %145 = load i64, i64* %144, align 8
  %146 = add i64 %145, -5487648855009660246
  %147 = sub i64 %146, 2
  %148 = sub i64 %147, -5487648855009660246
  %149 = sub nsw i64 %145, 2
  %150 = sdiv i64 %148, 2
  %151 = load volatile i64*, i64** %7
  store i64 %150, i64* %151, align 8
  store i32 -519320515, i32* %23
  br label %207

; <label>:152:                                    ; preds = %24
  %153 = load volatile i64*, i64** %7
  %154 = load i64, i64* %153, align 8
  %155 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %156 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %155, i64 %154) #3
  %157 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %158 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %157, i32 0, i32 0
  store i64* %156, i64** %158, align 8
  %159 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %160 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %159) #3
  %161 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %160) #3
  %162 = load i64, i64* %161, align 8
  %163 = load volatile i64*, i64** %6
  store i64 %162, i64* %163, align 8
  %164 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %165 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %164 to i8*
  %166 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %167 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %166 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %165, i8* %167, i64 8, i32 8, i1 false)
  %168 = load volatile i64*, i64** %7
  %169 = load i64, i64* %168, align 8
  %170 = load volatile i64*, i64** %8
  %171 = load i64, i64* %170, align 8
  %172 = load volatile i64*, i64** %6
  %173 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %172) #3
  %174 = load i64, i64* %173, align 8
  %175 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4
  %176 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %175, i32 0, i32 0
  %177 = load i64*, i64** %176, align 8
  call void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElxNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_(i64* %177, i64 %169, i64 %171, i64 %174)
  %178 = load volatile i64*, i64** %7
  %179 = load i64, i64* %178, align 8
  %180 = icmp eq i64 %179, 0
  %181 = select i1 %180, i32 -707135667, i32 -144676732
  store i32 %181, i32* %23
  br label %207

; <label>:182:                                    ; preds = %24
  store i32 1867980449, i32* %23
  br label %207

; <label>:183:                                    ; preds = %24
  %184 = load volatile i64*, i64** %7
  %185 = load i64, i64* %184, align 8
  %186 = add i64 %185, 8979035561790733665
  %187 = add i64 %186, -1
  %188 = sub i64 %187, 8979035561790733665
  %189 = add nsw i64 %185, -1
  %190 = load volatile i64*, i64** %7
  store i64 %188, i64* %190, align 8
  store i32 -519320515, i32* %23
  br label %207

; <label>:191:                                    ; preds = %24
  ret void

; <label>:192:                                    ; preds = %24
  %193 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %194 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %195 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %196 = alloca i64, align 8
  %197 = alloca i64, align 8
  %198 = alloca i64, align 8
  %199 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %200 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %201 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %202 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %193, i32 0, i32 0
  store i64* %0, i64** %202, align 8
  %203 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %194, i32 0, i32 0
  store i64* %1, i64** %203, align 8
  %204 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %194, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %193) #3
  %205 = icmp slt i64 %204, 2
  store i32 1821202335, i32* %23
  br label %207

; <label>:206:                                    ; preds = %24
  store i32 1090813546, i32* %23
  br label %207

; <label>:207:                                    ; preds = %206, %192, %183, %182, %152, %139, %138, %111, %95, %92, %47, %27, %26
  br label %24
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxxltIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8)) #4 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.484
  %7 = load i32, i32* @y.485
  %8 = add i32 %6, 1348550366
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, 1348550366
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 118904923, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %76
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 118904923, label %20
    i32 2021556246, label %28
    i32 1952001608, label %64
    i32 -1163602003, label %66
  ]

; <label>:19:                                     ; preds = %17
  br label %76

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 2021556246, i32 -1163602003
  store i32 %27, i32* %16
  br label %76

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %29, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %1, %"class.__gnu_cxx::__normal_iterator.9"** %30, align 8
  %31 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %29, align 8
  %32 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %31) #3
  %33 = load i64*, i64** %32, align 8
  %34 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %30, align 8
  %35 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %34) #3
  %36 = load i64*, i64** %35, align 8
  %37 = icmp ult i64* %33, %36
  store i1 %37, i1* %3
  %38 = load i32, i32* @x.484
  %39 = load i32, i32* @y.485
  %40 = sub i32 0, 1
  %41 = add i32 %38, %40
  %42 = sub i32 %38, 1
  %43 = mul i32 %38, %41
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %39, 10
  %47 = xor i1 %45, true
  %48 = xor i1 %46, true
  %49 = xor i1 false, true
  %50 = and i1 %47, false
  %51 = and i1 %45, %49
  %52 = and i1 %48, false
  %53 = and i1 %46, %49
  %54 = or i1 %50, %51
  %55 = or i1 %52, %53
  %56 = xor i1 %54, %55
  %57 = or i1 %47, %48
  %58 = xor i1 %57, true
  %59 = or i1 false, %49
  %60 = and i1 %58, %59
  %61 = or i1 %56, %60
  %62 = or i1 %45, %46
  %63 = select i1 %61, i32 1952001608, i32 -1163602003
  store i32 %63, i32* %16
  br label %76

; <label>:64:                                     ; preds = %17
  %65 = load volatile i1, i1* %3
  ret i1 %65

; <label>:66:                                     ; preds = %17
  %67 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %68 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %67, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %1, %"class.__gnu_cxx::__normal_iterator.9"** %68, align 8
  %69 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %67, align 8
  %70 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %69) #3
  %71 = load i64*, i64** %70, align 8
  %72 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %68, align 8
  %73 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %72) #3
  %74 = load i64*, i64** %73, align 8
  %75 = icmp ult i64* %71, %74
  store i32 2021556246, i32* %16
  br label %76

; <label>:76:                                     ; preds = %66, %28, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"*, i64*, i64*) #4 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.486
  %8 = load i32, i32* @y.487
  %9 = sub i32 0, 1
  %10 = add i32 %7, %9
  %11 = sub i32 %7, 1
  %12 = mul i32 %7, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %6
  %15 = icmp slt i32 %8, 10
  store i1 %15, i1* %5
  %16 = alloca i32
  store i32 -1169969156, i32* %16
  br label %17

; <label>:17:                                     ; preds = %3, %93
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -1169969156, label %20
    i32 518553934, label %40
    i32 1405651759, label %79
    i32 -127168359, label %81
  ]

; <label>:19:                                     ; preds = %17
  br label %93

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %6
  %22 = load volatile i1, i1* %5
  %23 = xor i1 %21, true
  %24 = xor i1 %22, true
  %25 = xor i1 true, true
  %26 = and i1 %23, true
  %27 = and i1 %21, %25
  %28 = and i1 %24, true
  %29 = and i1 %22, %25
  %30 = or i1 %26, %27
  %31 = or i1 %28, %29
  %32 = xor i1 %30, %31
  %33 = or i1 %23, %24
  %34 = xor i1 %33, true
  %35 = or i1 true, %25
  %36 = and i1 %34, %35
  %37 = or i1 %32, %36
  %38 = or i1 %21, %22
  %39 = select i1 %37, i32 518553934, i32 -127168359
  store i32 %39, i32* %16
  br label %93

; <label>:40:                                     ; preds = %17
  %41 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %42 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %43 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter"*, align 8
  %44 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %41, i32 0, i32 0
  store i64* %1, i64** %44, align 8
  %45 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %42, i32 0, i32 0
  store i64* %2, i64** %45, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_less_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %43, align 8
  %46 = load %"struct.__gnu_cxx::__ops::_Iter_less_iter"*, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %43, align 8
  %47 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %41) #3
  %48 = load i64, i64* %47, align 8
  %49 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %42) #3
  %50 = load i64, i64* %49, align 8
  %51 = icmp slt i64 %48, %50
  store i1 %51, i1* %4
  %52 = load i32, i32* @x.486
  %53 = load i32, i32* @y.487
  %54 = sub i32 %52, 1587527163
  %55 = sub i32 %54, 1
  %56 = add i32 %55, 1587527163
  %57 = sub i32 %52, 1
  %58 = mul i32 %52, %56
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %53, 10
  %62 = xor i1 %60, true
  %63 = xor i1 %61, true
  %64 = xor i1 false, true
  %65 = and i1 %62, false
  %66 = and i1 %60, %64
  %67 = and i1 %63, false
  %68 = and i1 %61, %64
  %69 = or i1 %65, %66
  %70 = or i1 %67, %68
  %71 = xor i1 %69, %70
  %72 = or i1 %62, %63
  %73 = xor i1 %72, true
  %74 = or i1 false, %64
  %75 = and i1 %73, %74
  %76 = or i1 %71, %75
  %77 = or i1 %60, %61
  %78 = select i1 %76, i32 1405651759, i32 -127168359
  store i32 %78, i32* %16
  br label %93

; <label>:79:                                     ; preds = %17
  %80 = load volatile i1, i1* %4
  ret i1 %80

; <label>:81:                                     ; preds = %17
  %82 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %83 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %84 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter"*, align 8
  %85 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %82, i32 0, i32 0
  store i64* %1, i64** %85, align 8
  %86 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %83, i32 0, i32 0
  store i64* %2, i64** %86, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_less_iter"* %0, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %84, align 8
  %87 = load %"struct.__gnu_cxx::__ops::_Iter_less_iter"*, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %84, align 8
  %88 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %82) #3
  %89 = load i64, i64* %88, align 8
  %90 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %83) #3
  %91 = load i64, i64* %90, align 8
  %92 = icmp slt i64 %89, %91
  store i32 518553934, i32* %16
  br label %93

; <label>:93:                                     ; preds = %81, %40, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %8 = alloca i64, align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %11 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %0, i64** %11, align 8
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %1, i64** %12, align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  store i64* %2, i64** %13, align 8
  %14 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %6) #3
  %15 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %14) #3
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %8, align 8
  %17 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %4) #3
  %18 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %17) #3
  %19 = load i64, i64* %18, align 8
  %20 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %6) #3
  store i64 %19, i64* %20, align 8
  %21 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  %22 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 8, i32 8, i1 false)
  %23 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %5, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %4) #3
  %24 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %8) #3
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  %27 = load i64*, i64** %26, align 8
  call void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElxNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_(i64* %27, i64 0, i64 %23, i64 %25)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv(%"class.__gnu_cxx::__normal_iterator.9"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %2, align 8
  %3 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %2, align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = getelementptr inbounds i64, i64* %5, i32 1
  store i64* %6, i64** %4, align 8
  ret %"class.__gnu_cxx::__normal_iterator.9"* %3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"*, i64) #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %4, align 8
  store i64 %1, i64* %5, align 8
  %7 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4, align 8
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i64, i64* %9, i64 %10
  store i64* %11, i64** %6, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.9"* %3, i64** dereferenceable(8) %6) #3
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  %13 = load i64*, i64** %12, align 8
  ret i64* %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %2, align 8
  %3 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %2, align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  ret i64* %5
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElxNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_(i64*, i64, i64, i64) #0 comdat {
  %5 = alloca i1
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %17 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %18 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %19 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %20 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_val", align 1
  %21 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %22 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_val", align 1
  %23 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  store i64* %0, i64** %23, align 8
  store i64 %1, i64* %8, align 8
  store i64 %2, i64* %9, align 8
  store i64 %3, i64* %10, align 8
  %24 = load i64, i64* %8, align 8
  store i64 %24, i64* %11, align 8
  %25 = load i64, i64* %8, align 8
  store i64 %25, i64* %12, align 8
  %26 = alloca i32
  store i32 -540013831, i32* %26
  br label %27

; <label>:27:                                     ; preds = %4, %212
  %28 = load i32, i32* %26
  switch i32 %28, label %29 [
    i32 -540013831, label %30
    i32 1707276017, label %58
    i32 -1031940698, label %82
    i32 -1795269618, label %85
    i32 -1071901914, label %108
    i32 1355422566, label %113
    i32 -1542960056, label %125
    i32 469681312, label %137
    i32 -2035109603, label %147
    i32 -1403901717, label %172
    i32 1681127729, label %181
  ]

; <label>:29:                                     ; preds = %27
  br label %212

; <label>:30:                                     ; preds = %27
  %31 = load i32, i32* @x.496
  %32 = load i32, i32* @y.497
  %33 = sub i32 %31, 613132150
  %34 = sub i32 %33, 1
  %35 = add i32 %34, 613132150
  %36 = sub i32 %31, 1
  %37 = mul i32 %31, %35
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %32, 10
  %41 = xor i1 %39, true
  %42 = xor i1 %40, true
  %43 = xor i1 true, true
  %44 = and i1 %41, true
  %45 = and i1 %39, %43
  %46 = and i1 %42, true
  %47 = and i1 %40, %43
  %48 = or i1 %44, %45
  %49 = or i1 %46, %47
  %50 = xor i1 %48, %49
  %51 = or i1 %41, %42
  %52 = xor i1 %51, true
  %53 = or i1 true, %43
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = or i1 %39, %40
  %57 = select i1 %55, i32 1707276017, i32 1681127729
  store i32 %57, i32* %26
  br label %212

; <label>:58:                                     ; preds = %27
  %59 = load i64, i64* %12, align 8
  %60 = load i64, i64* %9, align 8
  %61 = add i64 %60, -3602224502197450454
  %62 = sub i64 %61, 1
  %63 = sub i64 %62, -3602224502197450454
  %64 = sub nsw i64 %60, 1
  %65 = sdiv i64 %63, 2
  %66 = icmp slt i64 %59, %65
  store i1 %66, i1* %5
  %67 = load i32, i32* @x.496
  %68 = load i32, i32* @y.497
  %69 = sub i32 %67, -1066478861
  %70 = sub i32 %69, 1
  %71 = add i32 %70, -1066478861
  %72 = sub i32 %67, 1
  %73 = mul i32 %67, %71
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %68, 10
  %77 = and i1 %75, %76
  %78 = xor i1 %75, %76
  %79 = or i1 %77, %78
  %80 = or i1 %75, %76
  %81 = select i1 %79, i32 -1031940698, i32 1681127729
  store i32 %81, i32* %26
  br label %212

; <label>:82:                                     ; preds = %27
  %83 = load volatile i1, i1* %5
  %84 = select i1 %83, i32 -1795269618, i32 -1542960056
  store i32 %84, i32* %26
  br label %212

; <label>:85:                                     ; preds = %27
  %86 = load i64, i64* %12, align 8
  %87 = sub i64 %86, -32052022875943805
  %88 = add i64 %87, 1
  %89 = add i64 %88, -32052022875943805
  %90 = add nsw i64 %86, 1
  %91 = mul nsw i64 2, %89
  store i64 %91, i64* %12, align 8
  %92 = load i64, i64* %12, align 8
  %93 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %6, i64 %92) #3
  %94 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  store i64* %93, i64** %94, align 8
  %95 = load i64, i64* %12, align 8
  %96 = add i64 %95, -8609608347620357237
  %97 = sub i64 %96, 1
  %98 = sub i64 %97, -8609608347620357237
  %99 = sub nsw i64 %95, 1
  %100 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %6, i64 %98) #3
  %101 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  store i64* %100, i64** %101, align 8
  %102 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  %103 = load i64*, i64** %102, align 8
  %104 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  %105 = load i64*, i64** %104, align 8
  %106 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %7, i64* %103, i64* %105)
  %107 = select i1 %106, i32 -1071901914, i32 1355422566
  store i32 %107, i32* %26
  br label %212

; <label>:108:                                    ; preds = %27
  %109 = load i64, i64* %12, align 8
  %110 = sub i64 0, -1
  %111 = sub i64 %109, %110
  %112 = add nsw i64 %109, -1
  store i64 %111, i64* %12, align 8
  store i32 1355422566, i32* %26
  br label %212

; <label>:113:                                    ; preds = %27
  %114 = load i64, i64* %12, align 8
  %115 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %6, i64 %114) #3
  %116 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %15, i32 0, i32 0
  store i64* %115, i64** %116, align 8
  %117 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %15) #3
  %118 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %117) #3
  %119 = load i64, i64* %118, align 8
  %120 = load i64, i64* %8, align 8
  %121 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %6, i64 %120) #3
  %122 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %16, i32 0, i32 0
  store i64* %121, i64** %122, align 8
  %123 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %16) #3
  store i64 %119, i64* %123, align 8
  %124 = load i64, i64* %12, align 8
  store i64 %124, i64* %8, align 8
  store i32 -540013831, i32* %26
  br label %212

; <label>:125:                                    ; preds = %27
  %126 = load i64, i64* %9, align 8
  %127 = xor i64 %126, -1
  %128 = xor i64 1, -1
  %129 = xor i64 1334047245282326482, -1
  %130 = or i64 %127, %128
  %131 = or i64 1334047245282326482, %129
  %132 = xor i64 %130, -1
  %133 = and i64 %132, %131
  %134 = and i64 %126, 1
  %135 = icmp eq i64 %133, 0
  %136 = select i1 %135, i32 469681312, i32 -1403901717
  store i32 %136, i32* %26
  br label %212

; <label>:137:                                    ; preds = %27
  %138 = load i64, i64* %12, align 8
  %139 = load i64, i64* %9, align 8
  %140 = sub i64 %139, -268855392732610820
  %141 = sub i64 %140, 2
  %142 = add i64 %141, -268855392732610820
  %143 = sub nsw i64 %139, 2
  %144 = sdiv i64 %142, 2
  %145 = icmp eq i64 %138, %144
  %146 = select i1 %145, i32 -2035109603, i32 -1403901717
  store i32 %146, i32* %26
  br label %212

; <label>:147:                                    ; preds = %27
  %148 = load i64, i64* %12, align 8
  %149 = sub i64 0, 1
  %150 = sub i64 %148, %149
  %151 = add nsw i64 %148, 1
  %152 = mul nsw i64 2, %150
  store i64 %152, i64* %12, align 8
  %153 = load i64, i64* %12, align 8
  %154 = sub i64 %153, 2030679787810996297
  %155 = sub i64 %154, 1
  %156 = add i64 %155, 2030679787810996297
  %157 = sub nsw i64 %153, 1
  %158 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %6, i64 %156) #3
  %159 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %17, i32 0, i32 0
  store i64* %158, i64** %159, align 8
  %160 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %17) #3
  %161 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %160) #3
  %162 = load i64, i64* %161, align 8
  %163 = load i64, i64* %8, align 8
  %164 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %6, i64 %163) #3
  %165 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %18, i32 0, i32 0
  store i64* %164, i64** %165, align 8
  %166 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %18) #3
  store i64 %162, i64* %166, align 8
  %167 = load i64, i64* %12, align 8
  %168 = sub i64 %167, 4847571880487193055
  %169 = sub i64 %168, 1
  %170 = add i64 %169, 4847571880487193055
  %171 = sub nsw i64 %167, 1
  store i64 %170, i64* %8, align 8
  store i32 -1403901717, i32* %26
  br label %212

; <label>:172:                                    ; preds = %27
  %173 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %19 to i8*
  %174 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %173, i8* %174, i64 8, i32 8, i1 false)
  %175 = load i64, i64* %8, align 8
  %176 = load i64, i64* %11, align 8
  %177 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %10) #3
  %178 = load i64, i64* %177, align 8
  call void @_ZN9__gnu_cxx5__ops15__iter_comp_valENS0_15_Iter_less_iterE()
  %179 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %19, i32 0, i32 0
  %180 = load i64*, i64** %179, align 8
  call void @_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElxNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_T2_(i64* %180, i64 %175, i64 %176, i64 %178)
  ret void

; <label>:181:                                    ; preds = %27
  %182 = load i64, i64* %12, align 8
  %183 = load i64, i64* %9, align 8
  %184 = add i64 %183, -7637522394161977841
  %185 = sub i64 %184, 1
  %186 = sub i64 %185, -7637522394161977841
  %187 = sub nsw i64 %183, 1
  %188 = sub i64 0, %186
  %189 = add i64 0, %188
  %190 = sub i64 0, %186
  %191 = sub i64 0, %189
  %192 = sub i64 0, 2
  %193 = add i64 %191, %192
  %194 = sub i64 0, %193
  %195 = add i64 %189, 2
  %196 = sub i64 0, 5559517109554022187
  %197 = sub i64 %196, %186
  %198 = add i64 %197, 5559517109554022187
  %199 = sub i64 0, %186
  %200 = sub i64 0, %198
  %201 = sub i64 0, 2
  %202 = add i64 %200, %201
  %203 = sub i64 0, %202
  %204 = add i64 %198, 2
  %205 = shl i64 %186, 2
  %206 = sub i64 0, 2
  %207 = add i64 %186, %206
  %208 = sub i64 %186, 2
  %209 = mul i64 %207, 2
  %210 = sdiv i64 %186, 2
  %211 = icmp slt i64 %182, %210
  store i32 1707276017, i32* %26
  br label %212

; <label>:212:                                    ; preds = %181, %147, %137, %125, %113, %108, %85, %82, %58, %30, %29
  br label %27
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElxNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_T2_(i64*, i64, i64, i64) #0 comdat {
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_val", align 1
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %15 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %0, i64** %15, align 8
  store i64 %1, i64* %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  %16 = load i64, i64* %7, align 8
  %17 = sub i64 0, 1
  %18 = add i64 %16, %17
  %19 = sub nsw i64 %16, 1
  %20 = sdiv i64 %18, 2
  store i64 %20, i64* %10, align 8
  %21 = alloca i32
  store i32 -26086936, i32* %21
  %22 = alloca i1
  br label %23

; <label>:23:                                     ; preds = %4, %66
  %24 = load i32, i32* %21
  switch i32 %24, label %25 [
    i32 -26086936, label %26
    i32 603182130, label %31
    i32 -2109746550, label %38
    i32 -934739641, label %41
    i32 -182261859, label %59
  ]

; <label>:25:                                     ; preds = %23
  br label %66

; <label>:26:                                     ; preds = %23
  %27 = load i64, i64* %7, align 8
  %28 = load i64, i64* %8, align 8
  %29 = icmp sgt i64 %27, %28
  %30 = select i1 %29, i32 603182130, i32 -2109746550
  store i32 %30, i32* %21
  store i1 false, i1* %22
  br label %66

; <label>:31:                                     ; preds = %23
  %32 = load i64, i64* %10, align 8
  %33 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %5, i64 %32) #3
  %34 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  store i64* %33, i64** %34, align 8
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  %36 = load i64*, i64** %35, align 8
  %37 = call zeroext i1 @_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEExEEbT_RT0_(%"struct.__gnu_cxx::__ops::_Iter_less_val"* %6, i64* %36, i64* dereferenceable(8) %9)
  store i32 -2109746550, i32* %21
  store i1 %37, i1* %22
  br label %66

; <label>:38:                                     ; preds = %23
  %39 = load i1, i1* %22
  %40 = select i1 %39, i32 -934739641, i32 -182261859
  store i32 %40, i32* %21
  br label %66

; <label>:41:                                     ; preds = %23
  %42 = load i64, i64* %10, align 8
  %43 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %5, i64 %42) #3
  %44 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %12, i32 0, i32 0
  store i64* %43, i64** %44, align 8
  %45 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %12) #3
  %46 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %45) #3
  %47 = load i64, i64* %46, align 8
  %48 = load i64, i64* %7, align 8
  %49 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %5, i64 %48) #3
  %50 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  store i64* %49, i64** %50, align 8
  %51 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %13) #3
  store i64 %47, i64* %51, align 8
  %52 = load i64, i64* %10, align 8
  store i64 %52, i64* %7, align 8
  %53 = load i64, i64* %7, align 8
  %54 = add i64 %53, -7396064409899507993
  %55 = sub i64 %54, 1
  %56 = sub i64 %55, -7396064409899507993
  %57 = sub nsw i64 %53, 1
  %58 = sdiv i64 %56, 2
  store i64 %58, i64* %10, align 8
  store i32 -26086936, i32* %21
  br label %66

; <label>:59:                                     ; preds = %23
  %60 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %9) #3
  %61 = load i64, i64* %60, align 8
  %62 = load i64, i64* %7, align 8
  %63 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %5, i64 %62) #3
  %64 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  store i64* %63, i64** %64, align 8
  %65 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %14) #3
  store i64 %61, i64* %65, align 8
  ret void

; <label>:66:                                     ; preds = %41, %38, %31, %26, %25
  br label %23
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx5__ops15__iter_comp_valENS0_15_Iter_less_iterE() #4 comdat {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_val", align 1
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEExEEbT_RT0_(%"struct.__gnu_cxx::__ops::_Iter_less_val"*, i64*, i64* dereferenceable(8)) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_val"*, align 8
  %6 = alloca i64*, align 8
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %1, i64** %7, align 8
  store %"struct.__gnu_cxx::__ops::_Iter_less_val"* %0, %"struct.__gnu_cxx::__ops::_Iter_less_val"** %5, align 8
  store i64* %2, i64** %6, align 8
  %8 = load %"struct.__gnu_cxx::__ops::_Iter_less_val"*, %"struct.__gnu_cxx::__ops::_Iter_less_val"** %5, align 8
  %9 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %4) #3
  %10 = load i64, i64* %9, align 8
  %11 = load i64*, i64** %6, align 8
  %12 = load i64, i64* %11, align 8
  %13 = icmp slt i64 %10, %12
  ret i1 %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmmEv(%"class.__gnu_cxx::__normal_iterator.9"*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.504
  %6 = load i32, i32* @y.505
  %7 = sub i32 %5, 765896741
  %8 = sub i32 %7, 1
  %9 = add i32 %8, 765896741
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -435219481, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %81
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -435219481, label %19
    i32 -1669818821, label %39
    i32 1094447826, label %73
    i32 1267613662, label %75
  ]

; <label>:18:                                     ; preds = %16
  br label %81

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = xor i1 %20, true
  %23 = xor i1 %21, true
  %24 = xor i1 true, true
  %25 = and i1 %22, true
  %26 = and i1 %20, %24
  %27 = and i1 %23, true
  %28 = and i1 %21, %24
  %29 = or i1 %25, %26
  %30 = or i1 %27, %28
  %31 = xor i1 %29, %30
  %32 = or i1 %22, %23
  %33 = xor i1 %32, true
  %34 = or i1 true, %24
  %35 = and i1 %33, %34
  %36 = or i1 %31, %35
  %37 = or i1 %20, %21
  %38 = select i1 %36, i32 -1669818821, i32 1267613662
  store i32 %38, i32* %15
  br label %81

; <label>:39:                                     ; preds = %16
  %40 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %40, align 8
  %41 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %40, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %41, %"class.__gnu_cxx::__normal_iterator.9"** %2
  %42 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %2
  %43 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %42, i32 0, i32 0
  %44 = load i64*, i64** %43, align 8
  %45 = getelementptr inbounds i64, i64* %44, i32 -1
  store i64* %45, i64** %43, align 8
  %46 = load i32, i32* @x.504
  %47 = load i32, i32* @y.505
  %48 = sub i32 %46, 272987063
  %49 = sub i32 %48, 1
  %50 = add i32 %49, 272987063
  %51 = sub i32 %46, 1
  %52 = mul i32 %46, %50
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %47, 10
  %56 = xor i1 %54, true
  %57 = xor i1 %55, true
  %58 = xor i1 false, true
  %59 = and i1 %56, false
  %60 = and i1 %54, %58
  %61 = and i1 %57, false
  %62 = and i1 %55, %58
  %63 = or i1 %59, %60
  %64 = or i1 %61, %62
  %65 = xor i1 %63, %64
  %66 = or i1 %56, %57
  %67 = xor i1 %66, true
  %68 = or i1 false, %58
  %69 = and i1 %67, %68
  %70 = or i1 %65, %69
  %71 = or i1 %54, %55
  %72 = select i1 %70, i32 1094447826, i32 1267613662
  store i32 %72, i32* %15
  br label %81

; <label>:73:                                     ; preds = %16
  %74 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %2
  ret %"class.__gnu_cxx::__normal_iterator.9"* %74

; <label>:75:                                     ; preds = %16
  %76 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %76, align 8
  %77 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %76, align 8
  %78 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %77, i32 0, i32 0
  %79 = load i64*, i64** %78, align 8
  %80 = getelementptr inbounds i64, i64* %79, i32 -1
  store i64* %80, i64** %78, align 8
  store i32 -1669818821, i32* %15
  br label %81

; <label>:81:                                     ; preds = %75, %39, %19, %18
  br label %16
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_(i64*, i64*, i64*, i64*) #0 comdat {
  %5 = alloca i1
  %6 = alloca i64*
  %7 = alloca i64*
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %12 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %17 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %18 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %19 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %20 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %21 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %22 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %23 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %24 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %25 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %26 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %27 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %28 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %29 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %31 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %32 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %33 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %34 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  store i64* %0, i64** %35, align 8
  %36 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  store i64* %1, i64** %36, align 8
  %37 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  store i64* %2, i64** %37, align 8
  %38 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  store i64* %3, i64** %38, align 8
  %39 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  %40 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 8, i32 8, i1 false)
  %41 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %14 to i8*
  %42 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 8, i32 8, i1 false)
  %43 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  %44 = load i64*, i64** %43, align 8
  store i64* %44, i64** %7
  %45 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %14, i32 0, i32 0
  %46 = load i64*, i64** %45, align 8
  store i64* %46, i64** %6
  %47 = alloca i32
  store i32 -19231693, i32* %47
  br label %48

; <label>:48:                                     ; preds = %4, %528
  %49 = load i32, i32* %47
  switch i32 %49, label %50 [
    i32 -19231693, label %51
    i32 197809246, label %56
    i32 -1409962826, label %67
    i32 -307891541, label %76
    i32 937418235, label %87
    i32 -1953429698, label %114
    i32 -1443470468, label %137
    i32 1927191116, label %138
    i32 2029682938, label %147
    i32 -151317496, label %163
    i32 654984995, label %178
    i32 1061430217, label %179
    i32 1434838388, label %207
    i32 820503077, label %235
    i32 1787551742, label %236
    i32 981419104, label %252
    i32 -405484993, label %288
    i32 -150446210, label %291
    i32 -871372661, label %319
    i32 -1430213705, label %355
    i32 -436439057, label %356
    i32 -1366107865, label %367
    i32 -1335732934, label %376
    i32 781517066, label %385
    i32 -579873709, label %401
    i32 76367058, label %417
    i32 -1663800190, label %418
    i32 -305694852, label %433
    i32 -1759669610, label %461
    i32 -1760683652, label %462
    i32 -1433758005, label %478
    i32 -388164396, label %494
    i32 -69402328, label %495
    i32 -971263393, label %504
    i32 -1548585690, label %505
    i32 -1725887802, label %506
    i32 372628339, label %516
    i32 849492066, label %525
    i32 533512408, label %526
    i32 -1904653377, label %527
  ]

; <label>:50:                                     ; preds = %48
  br label %528

; <label>:51:                                     ; preds = %48
  %52 = load volatile i64*, i64** %7
  %53 = load volatile i64*, i64** %6
  %54 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %12, i64* %52, i64* %53)
  %55 = select i1 %54, i32 197809246, i32 1787551742
  store i32 %55, i32* %47
  br label %528

; <label>:56:                                     ; preds = %48
  %57 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %15 to i8*
  %58 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 8, i32 8, i1 false)
  %59 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %16 to i8*
  %60 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %59, i8* %60, i64 8, i32 8, i1 false)
  %61 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %15, i32 0, i32 0
  %62 = load i64*, i64** %61, align 8
  %63 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %16, i32 0, i32 0
  %64 = load i64*, i64** %63, align 8
  %65 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %12, i64* %62, i64* %64)
  %66 = select i1 %65, i32 -1409962826, i32 -307891541
  store i32 %66, i32* %47
  br label %528

; <label>:67:                                     ; preds = %48
  %68 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %17 to i8*
  %69 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %68, i8* %69, i64 8, i32 8, i1 false)
  %70 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %18 to i8*
  %71 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 8, i32 8, i1 false)
  %72 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %17, i32 0, i32 0
  %73 = load i64*, i64** %72, align 8
  %74 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %18, i32 0, i32 0
  %75 = load i64*, i64** %74, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %73, i64* %75)
  store i32 1061430217, i32* %47
  br label %528

; <label>:76:                                     ; preds = %48
  %77 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %19 to i8*
  %78 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* %78, i64 8, i32 8, i1 false)
  %79 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %20 to i8*
  %80 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 8, i32 8, i1 false)
  %81 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %19, i32 0, i32 0
  %82 = load i64*, i64** %81, align 8
  %83 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %20, i32 0, i32 0
  %84 = load i64*, i64** %83, align 8
  %85 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %12, i64* %82, i64* %84)
  %86 = select i1 %85, i32 937418235, i32 1927191116
  store i32 %86, i32* %47
  br label %528

; <label>:87:                                     ; preds = %48
  %88 = load i32, i32* @x.506
  %89 = load i32, i32* @y.507
  %90 = sub i32 0, 1
  %91 = add i32 %88, %90
  %92 = sub i32 %88, 1
  %93 = mul i32 %88, %91
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %89, 10
  %97 = xor i1 %95, true
  %98 = xor i1 %96, true
  %99 = xor i1 true, true
  %100 = and i1 %97, true
  %101 = and i1 %95, %99
  %102 = and i1 %98, true
  %103 = and i1 %96, %99
  %104 = or i1 %100, %101
  %105 = or i1 %102, %103
  %106 = xor i1 %104, %105
  %107 = or i1 %97, %98
  %108 = xor i1 %107, true
  %109 = or i1 true, %99
  %110 = and i1 %108, %109
  %111 = or i1 %106, %110
  %112 = or i1 %95, %96
  %113 = select i1 %111, i32 -1953429698, i32 -69402328
  store i32 %113, i32* %47
  br label %528

; <label>:114:                                    ; preds = %48
  %115 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %21 to i8*
  %116 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %115, i8* %116, i64 8, i32 8, i1 false)
  %117 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %22 to i8*
  %118 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %117, i8* %118, i64 8, i32 8, i1 false)
  %119 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %21, i32 0, i32 0
  %120 = load i64*, i64** %119, align 8
  %121 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %22, i32 0, i32 0
  %122 = load i64*, i64** %121, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %120, i64* %122)
  %123 = load i32, i32* @x.506
  %124 = load i32, i32* @y.507
  %125 = sub i32 0, 1
  %126 = add i32 %123, %125
  %127 = sub i32 %123, 1
  %128 = mul i32 %123, %126
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %124, 10
  %132 = and i1 %130, %131
  %133 = xor i1 %130, %131
  %134 = or i1 %132, %133
  %135 = or i1 %130, %131
  %136 = select i1 %134, i32 -1443470468, i32 -69402328
  store i32 %136, i32* %47
  br label %528

; <label>:137:                                    ; preds = %48
  store i32 2029682938, i32* %47
  br label %528

; <label>:138:                                    ; preds = %48
  %139 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %23 to i8*
  %140 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %139, i8* %140, i64 8, i32 8, i1 false)
  %141 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %24 to i8*
  %142 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %141, i8* %142, i64 8, i32 8, i1 false)
  %143 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %23, i32 0, i32 0
  %144 = load i64*, i64** %143, align 8
  %145 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %24, i32 0, i32 0
  %146 = load i64*, i64** %145, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %144, i64* %146)
  store i32 2029682938, i32* %47
  br label %528

; <label>:147:                                    ; preds = %48
  %148 = load i32, i32* @x.506
  %149 = load i32, i32* @y.507
  %150 = sub i32 %148, -448851057
  %151 = sub i32 %150, 1
  %152 = add i32 %151, -448851057
  %153 = sub i32 %148, 1
  %154 = mul i32 %148, %152
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %149, 10
  %158 = and i1 %156, %157
  %159 = xor i1 %156, %157
  %160 = or i1 %158, %159
  %161 = or i1 %156, %157
  %162 = select i1 %160, i32 -151317496, i32 -971263393
  store i32 %162, i32* %47
  br label %528

; <label>:163:                                    ; preds = %48
  %164 = load i32, i32* @x.506
  %165 = load i32, i32* @y.507
  %166 = sub i32 0, 1
  %167 = add i32 %164, %166
  %168 = sub i32 %164, 1
  %169 = mul i32 %164, %167
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %165, 10
  %173 = and i1 %171, %172
  %174 = xor i1 %171, %172
  %175 = or i1 %173, %174
  %176 = or i1 %171, %172
  %177 = select i1 %175, i32 654984995, i32 -971263393
  store i32 %177, i32* %47
  br label %528

; <label>:178:                                    ; preds = %48
  store i32 1061430217, i32* %47
  br label %528

; <label>:179:                                    ; preds = %48
  %180 = load i32, i32* @x.506
  %181 = load i32, i32* @y.507
  %182 = sub i32 %180, 739677900
  %183 = sub i32 %182, 1
  %184 = add i32 %183, 739677900
  %185 = sub i32 %180, 1
  %186 = mul i32 %180, %184
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %181, 10
  %190 = xor i1 %188, true
  %191 = xor i1 %189, true
  %192 = xor i1 false, true
  %193 = and i1 %190, false
  %194 = and i1 %188, %192
  %195 = and i1 %191, false
  %196 = and i1 %189, %192
  %197 = or i1 %193, %194
  %198 = or i1 %195, %196
  %199 = xor i1 %197, %198
  %200 = or i1 %190, %191
  %201 = xor i1 %200, true
  %202 = or i1 false, %192
  %203 = and i1 %201, %202
  %204 = or i1 %199, %203
  %205 = or i1 %188, %189
  %206 = select i1 %204, i32 1434838388, i32 -1548585690
  store i32 %206, i32* %47
  br label %528

; <label>:207:                                    ; preds = %48
  %208 = load i32, i32* @x.506
  %209 = load i32, i32* @y.507
  %210 = add i32 %208, -86193327
  %211 = sub i32 %210, 1
  %212 = sub i32 %211, -86193327
  %213 = sub i32 %208, 1
  %214 = mul i32 %208, %212
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %209, 10
  %218 = xor i1 %216, true
  %219 = xor i1 %217, true
  %220 = xor i1 false, true
  %221 = and i1 %218, false
  %222 = and i1 %216, %220
  %223 = and i1 %219, false
  %224 = and i1 %217, %220
  %225 = or i1 %221, %222
  %226 = or i1 %223, %224
  %227 = xor i1 %225, %226
  %228 = or i1 %218, %219
  %229 = xor i1 %228, true
  %230 = or i1 false, %220
  %231 = and i1 %229, %230
  %232 = or i1 %227, %231
  %233 = or i1 %216, %217
  %234 = select i1 %232, i32 820503077, i32 -1548585690
  store i32 %234, i32* %47
  br label %528

; <label>:235:                                    ; preds = %48
  store i32 -1760683652, i32* %47
  br label %528

; <label>:236:                                    ; preds = %48
  %237 = load i32, i32* @x.506
  %238 = load i32, i32* @y.507
  %239 = sub i32 %237, -585899907
  %240 = sub i32 %239, 1
  %241 = add i32 %240, -585899907
  %242 = sub i32 %237, 1
  %243 = mul i32 %237, %241
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %238, 10
  %247 = and i1 %245, %246
  %248 = xor i1 %245, %246
  %249 = or i1 %247, %248
  %250 = or i1 %245, %246
  %251 = select i1 %249, i32 981419104, i32 -1725887802
  store i32 %251, i32* %47
  br label %528

; <label>:252:                                    ; preds = %48
  %253 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %25 to i8*
  %254 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %253, i8* %254, i64 8, i32 8, i1 false)
  %255 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %26 to i8*
  %256 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %255, i8* %256, i64 8, i32 8, i1 false)
  %257 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %25, i32 0, i32 0
  %258 = load i64*, i64** %257, align 8
  %259 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %26, i32 0, i32 0
  %260 = load i64*, i64** %259, align 8
  %261 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %12, i64* %258, i64* %260)
  store i1 %261, i1* %5
  %262 = load i32, i32* @x.506
  %263 = load i32, i32* @y.507
  %264 = sub i32 0, 1
  %265 = add i32 %262, %264
  %266 = sub i32 %262, 1
  %267 = mul i32 %262, %265
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %263, 10
  %271 = xor i1 %269, true
  %272 = xor i1 %270, true
  %273 = xor i1 true, true
  %274 = and i1 %271, true
  %275 = and i1 %269, %273
  %276 = and i1 %272, true
  %277 = and i1 %270, %273
  %278 = or i1 %274, %275
  %279 = or i1 %276, %277
  %280 = xor i1 %278, %279
  %281 = or i1 %271, %272
  %282 = xor i1 %281, true
  %283 = or i1 true, %273
  %284 = and i1 %282, %283
  %285 = or i1 %280, %284
  %286 = or i1 %269, %270
  %287 = select i1 %285, i32 -405484993, i32 -1725887802
  store i32 %287, i32* %47
  br label %528

; <label>:288:                                    ; preds = %48
  %289 = load volatile i1, i1* %5
  %290 = select i1 %289, i32 -150446210, i32 -436439057
  store i32 %290, i32* %47
  br label %528

; <label>:291:                                    ; preds = %48
  %292 = load i32, i32* @x.506
  %293 = load i32, i32* @y.507
  %294 = add i32 %292, -2121868459
  %295 = sub i32 %294, 1
  %296 = sub i32 %295, -2121868459
  %297 = sub i32 %292, 1
  %298 = mul i32 %292, %296
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %293, 10
  %302 = xor i1 %300, true
  %303 = xor i1 %301, true
  %304 = xor i1 false, true
  %305 = and i1 %302, false
  %306 = and i1 %300, %304
  %307 = and i1 %303, false
  %308 = and i1 %301, %304
  %309 = or i1 %305, %306
  %310 = or i1 %307, %308
  %311 = xor i1 %309, %310
  %312 = or i1 %302, %303
  %313 = xor i1 %312, true
  %314 = or i1 false, %304
  %315 = and i1 %313, %314
  %316 = or i1 %311, %315
  %317 = or i1 %300, %301
  %318 = select i1 %316, i32 -871372661, i32 372628339
  store i32 %318, i32* %47
  br label %528

; <label>:319:                                    ; preds = %48
  %320 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %27 to i8*
  %321 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %320, i8* %321, i64 8, i32 8, i1 false)
  %322 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %28 to i8*
  %323 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %322, i8* %323, i64 8, i32 8, i1 false)
  %324 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %27, i32 0, i32 0
  %325 = load i64*, i64** %324, align 8
  %326 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %28, i32 0, i32 0
  %327 = load i64*, i64** %326, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %325, i64* %327)
  %328 = load i32, i32* @x.506
  %329 = load i32, i32* @y.507
  %330 = add i32 %328, 57032043
  %331 = sub i32 %330, 1
  %332 = sub i32 %331, 57032043
  %333 = sub i32 %328, 1
  %334 = mul i32 %328, %332
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %329, 10
  %338 = xor i1 %336, true
  %339 = xor i1 %337, true
  %340 = xor i1 true, true
  %341 = and i1 %338, true
  %342 = and i1 %336, %340
  %343 = and i1 %339, true
  %344 = and i1 %337, %340
  %345 = or i1 %341, %342
  %346 = or i1 %343, %344
  %347 = xor i1 %345, %346
  %348 = or i1 %338, %339
  %349 = xor i1 %348, true
  %350 = or i1 true, %340
  %351 = and i1 %349, %350
  %352 = or i1 %347, %351
  %353 = or i1 %336, %337
  %354 = select i1 %352, i32 -1430213705, i32 372628339
  store i32 %354, i32* %47
  br label %528

; <label>:355:                                    ; preds = %48
  store i32 -1663800190, i32* %47
  br label %528

; <label>:356:                                    ; preds = %48
  %357 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %29 to i8*
  %358 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %357, i8* %358, i64 8, i32 8, i1 false)
  %359 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %30 to i8*
  %360 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %359, i8* %360, i64 8, i32 8, i1 false)
  %361 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %29, i32 0, i32 0
  %362 = load i64*, i64** %361, align 8
  %363 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %30, i32 0, i32 0
  %364 = load i64*, i64** %363, align 8
  %365 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %12, i64* %362, i64* %364)
  %366 = select i1 %365, i32 -1366107865, i32 -1335732934
  store i32 %366, i32* %47
  br label %528

; <label>:367:                                    ; preds = %48
  %368 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %31 to i8*
  %369 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %368, i8* %369, i64 8, i32 8, i1 false)
  %370 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %32 to i8*
  %371 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %370, i8* %371, i64 8, i32 8, i1 false)
  %372 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %31, i32 0, i32 0
  %373 = load i64*, i64** %372, align 8
  %374 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %32, i32 0, i32 0
  %375 = load i64*, i64** %374, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %373, i64* %375)
  store i32 781517066, i32* %47
  br label %528

; <label>:376:                                    ; preds = %48
  %377 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %33 to i8*
  %378 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %377, i8* %378, i64 8, i32 8, i1 false)
  %379 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %34 to i8*
  %380 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %379, i8* %380, i64 8, i32 8, i1 false)
  %381 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %33, i32 0, i32 0
  %382 = load i64*, i64** %381, align 8
  %383 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %34, i32 0, i32 0
  %384 = load i64*, i64** %383, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %382, i64* %384)
  store i32 781517066, i32* %47
  br label %528

; <label>:385:                                    ; preds = %48
  %386 = load i32, i32* @x.506
  %387 = load i32, i32* @y.507
  %388 = add i32 %386, 965398167
  %389 = sub i32 %388, 1
  %390 = sub i32 %389, 965398167
  %391 = sub i32 %386, 1
  %392 = mul i32 %386, %390
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %387, 10
  %396 = and i1 %394, %395
  %397 = xor i1 %394, %395
  %398 = or i1 %396, %397
  %399 = or i1 %394, %395
  %400 = select i1 %398, i32 -579873709, i32 849492066
  store i32 %400, i32* %47
  br label %528

; <label>:401:                                    ; preds = %48
  %402 = load i32, i32* @x.506
  %403 = load i32, i32* @y.507
  %404 = sub i32 %402, 1527345720
  %405 = sub i32 %404, 1
  %406 = add i32 %405, 1527345720
  %407 = sub i32 %402, 1
  %408 = mul i32 %402, %406
  %409 = urem i32 %408, 2
  %410 = icmp eq i32 %409, 0
  %411 = icmp slt i32 %403, 10
  %412 = and i1 %410, %411
  %413 = xor i1 %410, %411
  %414 = or i1 %412, %413
  %415 = or i1 %410, %411
  %416 = select i1 %414, i32 76367058, i32 849492066
  store i32 %416, i32* %47
  br label %528

; <label>:417:                                    ; preds = %48
  store i32 -1663800190, i32* %47
  br label %528

; <label>:418:                                    ; preds = %48
  %419 = load i32, i32* @x.506
  %420 = load i32, i32* @y.507
  %421 = sub i32 0, 1
  %422 = add i32 %419, %421
  %423 = sub i32 %419, 1
  %424 = mul i32 %419, %422
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %420, 10
  %428 = and i1 %426, %427
  %429 = xor i1 %426, %427
  %430 = or i1 %428, %429
  %431 = or i1 %426, %427
  %432 = select i1 %430, i32 -305694852, i32 533512408
  store i32 %432, i32* %47
  br label %528

; <label>:433:                                    ; preds = %48
  %434 = load i32, i32* @x.506
  %435 = load i32, i32* @y.507
  %436 = sub i32 %434, -1506207751
  %437 = sub i32 %436, 1
  %438 = add i32 %437, -1506207751
  %439 = sub i32 %434, 1
  %440 = mul i32 %434, %438
  %441 = urem i32 %440, 2
  %442 = icmp eq i32 %441, 0
  %443 = icmp slt i32 %435, 10
  %444 = xor i1 %442, true
  %445 = xor i1 %443, true
  %446 = xor i1 true, true
  %447 = and i1 %444, true
  %448 = and i1 %442, %446
  %449 = and i1 %445, true
  %450 = and i1 %443, %446
  %451 = or i1 %447, %448
  %452 = or i1 %449, %450
  %453 = xor i1 %451, %452
  %454 = or i1 %444, %445
  %455 = xor i1 %454, true
  %456 = or i1 true, %446
  %457 = and i1 %455, %456
  %458 = or i1 %453, %457
  %459 = or i1 %442, %443
  %460 = select i1 %458, i32 -1759669610, i32 533512408
  store i32 %460, i32* %47
  br label %528

; <label>:461:                                    ; preds = %48
  store i32 -1760683652, i32* %47
  br label %528

; <label>:462:                                    ; preds = %48
  %463 = load i32, i32* @x.506
  %464 = load i32, i32* @y.507
  %465 = sub i32 %463, -534329925
  %466 = sub i32 %465, 1
  %467 = add i32 %466, -534329925
  %468 = sub i32 %463, 1
  %469 = mul i32 %463, %467
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %464, 10
  %473 = and i1 %471, %472
  %474 = xor i1 %471, %472
  %475 = or i1 %473, %474
  %476 = or i1 %471, %472
  %477 = select i1 %475, i32 -1433758005, i32 -1904653377
  store i32 %477, i32* %47
  br label %528

; <label>:478:                                    ; preds = %48
  %479 = load i32, i32* @x.506
  %480 = load i32, i32* @y.507
  %481 = sub i32 %479, -1379238528
  %482 = sub i32 %481, 1
  %483 = add i32 %482, -1379238528
  %484 = sub i32 %479, 1
  %485 = mul i32 %479, %483
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %480, 10
  %489 = and i1 %487, %488
  %490 = xor i1 %487, %488
  %491 = or i1 %489, %490
  %492 = or i1 %487, %488
  %493 = select i1 %491, i32 -388164396, i32 -1904653377
  store i32 %493, i32* %47
  br label %528

; <label>:494:                                    ; preds = %48
  ret void

; <label>:495:                                    ; preds = %48
  %496 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %21 to i8*
  %497 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %496, i8* %497, i64 8, i32 8, i1 false)
  %498 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %22 to i8*
  %499 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %498, i8* %499, i64 8, i32 8, i1 false)
  %500 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %21, i32 0, i32 0
  %501 = load i64*, i64** %500, align 8
  %502 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %22, i32 0, i32 0
  %503 = load i64*, i64** %502, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %501, i64* %503)
  store i32 -1953429698, i32* %47
  br label %528

; <label>:504:                                    ; preds = %48
  store i32 -151317496, i32* %47
  br label %528

; <label>:505:                                    ; preds = %48
  store i32 1434838388, i32* %47
  br label %528

; <label>:506:                                    ; preds = %48
  %507 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %25 to i8*
  %508 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %507, i8* %508, i64 8, i32 8, i1 false)
  %509 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %26 to i8*
  %510 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %509, i8* %510, i64 8, i32 8, i1 false)
  %511 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %25, i32 0, i32 0
  %512 = load i64*, i64** %511, align 8
  %513 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %26, i32 0, i32 0
  %514 = load i64*, i64** %513, align 8
  %515 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %12, i64* %512, i64* %514)
  store i32 981419104, i32* %47
  br label %528

; <label>:516:                                    ; preds = %48
  %517 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %27 to i8*
  %518 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %517, i8* %518, i64 8, i32 8, i1 false)
  %519 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %28 to i8*
  %520 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %519, i8* %520, i64 8, i32 8, i1 false)
  %521 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %27, i32 0, i32 0
  %522 = load i64*, i64** %521, align 8
  %523 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %28, i32 0, i32 0
  %524 = load i64*, i64** %523, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %522, i64* %524)
  store i32 -871372661, i32* %47
  br label %528

; <label>:525:                                    ; preds = %48
  store i32 -579873709, i32* %47
  br label %528

; <label>:526:                                    ; preds = %48
  store i32 -305694852, i32* %47
  br label %528

; <label>:527:                                    ; preds = %48
  store i32 -1433758005, i32* %47
  br label %528

; <label>:528:                                    ; preds = %527, %526, %525, %516, %506, %505, %504, %495, %478, %462, %461, %433, %418, %417, %401, %385, %376, %367, %356, %355, %319, %291, %288, %252, %236, %235, %207, %179, %178, %163, %147, %138, %137, %114, %87, %76, %67, %56, %51, %50
  br label %48
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmiEl(%"class.__gnu_cxx::__normal_iterator.9"*, i64) #4 comdat align 2 {
  %3 = alloca i64*
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.508
  %7 = load i32, i32* @y.509
  %8 = add i32 %6, 1658085064
  %9 = sub i32 %8, 1
  %10 = sub i32 %9, 1658085064
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 -800902284, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %88
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 -800902284, label %20
    i32 2144703159, label %28
    i32 -1541069109, label %59
    i32 1825968481, label %61
  ]

; <label>:19:                                     ; preds = %17
  br label %88

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 2144703159, i32 1825968481
  store i32 %27, i32* %16
  br label %88

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %30, align 8
  store i64 %1, i64* %31, align 8
  %33 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %30, align 8
  %34 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %33, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = load i64, i64* %31, align 8
  %37 = add i64 0, -5526312161549479283
  %38 = sub i64 %37, %36
  %39 = sub i64 %38, -5526312161549479283
  %40 = sub i64 0, %36
  %41 = getelementptr inbounds i64, i64* %35, i64 %39
  store i64* %41, i64** %32, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.9"* %29, i64** dereferenceable(8) %32) #3
  %42 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %29, i32 0, i32 0
  %43 = load i64*, i64** %42, align 8
  store i64* %43, i64** %3
  %44 = load i32, i32* @x.508
  %45 = load i32, i32* @y.509
  %46 = sub i32 %44, -617818949
  %47 = sub i32 %46, 1
  %48 = add i32 %47, -617818949
  %49 = sub i32 %44, 1
  %50 = mul i32 %44, %48
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %45, 10
  %54 = and i1 %52, %53
  %55 = xor i1 %52, %53
  %56 = or i1 %54, %55
  %57 = or i1 %52, %53
  %58 = select i1 %56, i32 -1541069109, i32 1825968481
  store i32 %58, i32* %16
  br label %88

; <label>:59:                                     ; preds = %17
  %60 = load volatile i64*, i64** %3
  ret i64* %60

; <label>:61:                                     ; preds = %17
  %62 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %63 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %64 = alloca i64, align 8
  %65 = alloca i64*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %63, align 8
  store i64 %1, i64* %64, align 8
  %66 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %63, align 8
  %67 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %66, i32 0, i32 0
  %68 = load i64*, i64** %67, align 8
  %69 = load i64, i64* %64, align 8
  %70 = sub i64 0, 0
  %71 = add i64 0, %70
  %72 = sub i64 0, 0
  %73 = add i64 %71, 1081175545891793624
  %74 = add i64 %73, %69
  %75 = sub i64 %74, 1081175545891793624
  %76 = add i64 %71, %69
  %77 = sub i64 0, %69
  %78 = add i64 0, %77
  %79 = sub i64 0, %69
  %80 = mul i64 %78, %69
  %81 = add i64 0, 4938466766043529012
  %82 = sub i64 %81, %69
  %83 = sub i64 %82, 4938466766043529012
  %84 = sub i64 0, %69
  %85 = getelementptr inbounds i64, i64* %68, i64 %83
  store i64* %85, i64** %65, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.9"* %62, i64** dereferenceable(8) %65) #3
  %86 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %62, i32 0, i32 0
  %87 = load i64*, i64** %86, align 8
  store i32 2144703159, i32* %16
  br label %88

; <label>:88:                                     ; preds = %61, %28, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_(i64*, i64*, i64*) #4 comdat {
  %4 = alloca i1
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %11 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter"*
  %12 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %14 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %15 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %16 = alloca i1
  %17 = alloca i1
  %18 = load i32, i32* @x.510
  %19 = load i32, i32* @y.511
  %20 = sub i32 0, 1
  %21 = add i32 %18, %20
  %22 = sub i32 %18, 1
  %23 = mul i32 %18, %21
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  store i1 %25, i1* %17
  %26 = icmp slt i32 %19, 10
  store i1 %26, i1* %16
  %27 = alloca i32
  store i32 -223077138, i32* %27
  br label %28

; <label>:28:                                     ; preds = %3, %319
  %29 = load i32, i32* %27
  switch i32 %29, label %30 [
    i32 -223077138, label %31
    i32 450778032, label %51
    i32 1840957162, label %84
    i32 1209049480, label %85
    i32 -1370936856, label %86
    i32 -1962189431, label %101
    i32 1566835784, label %144
    i32 -1536901182, label %147
    i32 2096709569, label %150
    i32 514382406, label %153
    i32 894139714, label %171
    i32 345873850, label %187
    i32 1959884341, label %205
    i32 2034757807, label %206
    i32 -819668845, label %211
    i32 -1241349558, label %219
    i32 -1441391407, label %234
    i32 -290018584, label %266
    i32 -1211487413, label %267
    i32 -1942194665, label %282
    i32 405066812, label %299
    i32 -1153246681, label %302
  ]

; <label>:30:                                     ; preds = %28
  br label %319

; <label>:31:                                     ; preds = %28
  %32 = load volatile i1, i1* %17
  %33 = load volatile i1, i1* %16
  %34 = xor i1 %32, true
  %35 = xor i1 %33, true
  %36 = xor i1 true, true
  %37 = and i1 %34, true
  %38 = and i1 %32, %36
  %39 = and i1 %35, true
  %40 = and i1 %33, %36
  %41 = or i1 %37, %38
  %42 = or i1 %39, %40
  %43 = xor i1 %41, %42
  %44 = or i1 %34, %35
  %45 = xor i1 %44, true
  %46 = or i1 true, %36
  %47 = and i1 %45, %46
  %48 = or i1 %43, %47
  %49 = or i1 %32, %33
  %50 = select i1 %48, i32 450778032, i32 -1211487413
  store i32 %50, i32* %27
  br label %319

; <label>:51:                                     ; preds = %28
  %52 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %52, %"class.__gnu_cxx::__normal_iterator.9"** %15
  %53 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %53, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %54 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %54, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %55 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %55, %"class.__gnu_cxx::__normal_iterator.9"** %12
  %56 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_less_iter"* %56, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %11
  %57 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %57, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %58 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %58, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %59 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %59, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %60 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %60, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %61 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %61, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %62 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %62, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %63 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %64 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %63, i32 0, i32 0
  store i64* %0, i64** %64, align 8
  %65 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %66 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %65, i32 0, i32 0
  store i64* %1, i64** %66, align 8
  %67 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %12
  %68 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %67, i32 0, i32 0
  store i64* %2, i64** %68, align 8
  %69 = load i32, i32* @x.510
  %70 = load i32, i32* @y.511
  %71 = sub i32 %69, -1513564340
  %72 = sub i32 %71, 1
  %73 = add i32 %72, -1513564340
  %74 = sub i32 %69, 1
  %75 = mul i32 %69, %73
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %70, 10
  %79 = and i1 %77, %78
  %80 = xor i1 %77, %78
  %81 = or i1 %79, %80
  %82 = or i1 %77, %78
  %83 = select i1 %81, i32 1840957162, i32 -1211487413
  store i32 %83, i32* %27
  br label %319

; <label>:84:                                     ; preds = %28
  store i32 1209049480, i32* %27
  br label %319

; <label>:85:                                     ; preds = %28
  store i32 -1370936856, i32* %27
  br label %319

; <label>:86:                                     ; preds = %28
  %87 = load i32, i32* @x.510
  %88 = load i32, i32* @y.511
  %89 = sub i32 0, 1
  %90 = add i32 %87, %89
  %91 = sub i32 %87, 1
  %92 = mul i32 %87, %90
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %88, 10
  %96 = and i1 %94, %95
  %97 = xor i1 %94, %95
  %98 = or i1 %96, %97
  %99 = or i1 %94, %95
  %100 = select i1 %98, i32 -1962189431, i32 -1942194665
  store i32 %100, i32* %27
  br label %319

; <label>:101:                                    ; preds = %28
  %102 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %103 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %102 to i8*
  %104 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %105 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %103, i8* %105, i64 8, i32 8, i1 false)
  %106 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %107 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %106 to i8*
  %108 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %12
  %109 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %108 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %107, i8* %109, i64 8, i32 8, i1 false)
  %110 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %111 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %110, i32 0, i32 0
  %112 = load i64*, i64** %111, align 8
  %113 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %114 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %113, i32 0, i32 0
  %115 = load i64*, i64** %114, align 8
  %116 = load volatile %"struct.__gnu_cxx::__ops::_Iter_less_iter"*, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %11
  %117 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %116, i64* %112, i64* %115)
  store i1 %117, i1* %4
  %118 = load i32, i32* @x.510
  %119 = load i32, i32* @y.511
  %120 = sub i32 0, 1
  %121 = add i32 %118, %120
  %122 = sub i32 %118, 1
  %123 = mul i32 %118, %121
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %119, 10
  %127 = xor i1 %125, true
  %128 = xor i1 %126, true
  %129 = xor i1 false, true
  %130 = and i1 %127, false
  %131 = and i1 %125, %129
  %132 = and i1 %128, false
  %133 = and i1 %126, %129
  %134 = or i1 %130, %131
  %135 = or i1 %132, %133
  %136 = xor i1 %134, %135
  %137 = or i1 %127, %128
  %138 = xor i1 %137, true
  %139 = or i1 false, %129
  %140 = and i1 %138, %139
  %141 = or i1 %136, %140
  %142 = or i1 %125, %126
  %143 = select i1 %141, i32 1566835784, i32 -1942194665
  store i32 %143, i32* %27
  br label %319

; <label>:144:                                    ; preds = %28
  %145 = load volatile i1, i1* %4
  %146 = select i1 %145, i32 -1536901182, i32 2096709569
  store i32 %146, i32* %27
  br label %319

; <label>:147:                                    ; preds = %28
  %148 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %149 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv(%"class.__gnu_cxx::__normal_iterator.9"* %148) #3
  store i32 -1370936856, i32* %27
  br label %319

; <label>:150:                                    ; preds = %28
  %151 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %152 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmmEv(%"class.__gnu_cxx::__normal_iterator.9"* %151) #3
  store i32 514382406, i32* %27
  br label %319

; <label>:153:                                    ; preds = %28
  %154 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %155 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %154 to i8*
  %156 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %12
  %157 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %156 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %157, i64 8, i32 8, i1 false)
  %158 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %159 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %158 to i8*
  %160 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %161 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %159, i8* %161, i64 8, i32 8, i1 false)
  %162 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %163 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %162, i32 0, i32 0
  %164 = load i64*, i64** %163, align 8
  %165 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %166 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %165, i32 0, i32 0
  %167 = load i64*, i64** %166, align 8
  %168 = load volatile %"struct.__gnu_cxx::__ops::_Iter_less_iter"*, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %11
  %169 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %168, i64* %164, i64* %167)
  %170 = select i1 %169, i32 894139714, i32 2034757807
  store i32 %170, i32* %27
  br label %319

; <label>:171:                                    ; preds = %28
  %172 = load i32, i32* @x.510
  %173 = load i32, i32* @y.511
  %174 = sub i32 %172, -1539321084
  %175 = sub i32 %174, 1
  %176 = add i32 %175, -1539321084
  %177 = sub i32 %172, 1
  %178 = mul i32 %172, %176
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %173, 10
  %182 = and i1 %180, %181
  %183 = xor i1 %180, %181
  %184 = or i1 %182, %183
  %185 = or i1 %180, %181
  %186 = select i1 %184, i32 345873850, i32 405066812
  store i32 %186, i32* %27
  br label %319

; <label>:187:                                    ; preds = %28
  %188 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %189 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmmEv(%"class.__gnu_cxx::__normal_iterator.9"* %188) #3
  %190 = load i32, i32* @x.510
  %191 = load i32, i32* @y.511
  %192 = sub i32 %190, -1799639831
  %193 = sub i32 %192, 1
  %194 = add i32 %193, -1799639831
  %195 = sub i32 %190, 1
  %196 = mul i32 %190, %194
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %191, 10
  %200 = and i1 %198, %199
  %201 = xor i1 %198, %199
  %202 = or i1 %200, %201
  %203 = or i1 %198, %199
  %204 = select i1 %202, i32 1959884341, i32 405066812
  store i32 %204, i32* %27
  br label %319

; <label>:205:                                    ; preds = %28
  store i32 514382406, i32* %27
  br label %319

; <label>:206:                                    ; preds = %28
  %207 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %208 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %209 = call zeroext i1 @_ZN9__gnu_cxxltIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %207, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %208) #3
  %210 = select i1 %209, i32 -1241349558, i32 -819668845
  store i32 %210, i32* %27
  br label %319

; <label>:211:                                    ; preds = %28
  %212 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %15
  %213 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %212 to i8*
  %214 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %215 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %213, i8* %215, i64 8, i32 8, i1 false)
  %216 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %15
  %217 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %216, i32 0, i32 0
  %218 = load i64*, i64** %217, align 8
  ret i64* %218

; <label>:219:                                    ; preds = %28
  %220 = load i32, i32* @x.510
  %221 = load i32, i32* @y.511
  %222 = sub i32 0, 1
  %223 = add i32 %220, %222
  %224 = sub i32 %220, 1
  %225 = mul i32 %220, %223
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %221, 10
  %229 = and i1 %227, %228
  %230 = xor i1 %227, %228
  %231 = or i1 %229, %230
  %232 = or i1 %227, %228
  %233 = select i1 %231, i32 -1441391407, i32 -1153246681
  store i32 %233, i32* %27
  br label %319

; <label>:234:                                    ; preds = %28
  %235 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %236 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %235 to i8*
  %237 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %238 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %237 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %236, i8* %238, i64 8, i32 8, i1 false)
  %239 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %240 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %239 to i8*
  %241 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %242 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %241 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %240, i8* %242, i64 8, i32 8, i1 false)
  %243 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %244 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %243, i32 0, i32 0
  %245 = load i64*, i64** %244, align 8
  %246 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %247 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %246, i32 0, i32 0
  %248 = load i64*, i64** %247, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %245, i64* %248)
  %249 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %250 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv(%"class.__gnu_cxx::__normal_iterator.9"* %249) #3
  %251 = load i32, i32* @x.510
  %252 = load i32, i32* @y.511
  %253 = add i32 %251, 1568562831
  %254 = sub i32 %253, 1
  %255 = sub i32 %254, 1568562831
  %256 = sub i32 %251, 1
  %257 = mul i32 %251, %255
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %252, 10
  %261 = and i1 %259, %260
  %262 = xor i1 %259, %260
  %263 = or i1 %261, %262
  %264 = or i1 %259, %260
  %265 = select i1 %263, i32 -290018584, i32 -1153246681
  store i32 %265, i32* %27
  br label %319

; <label>:266:                                    ; preds = %28
  store i32 1209049480, i32* %27
  br label %319

; <label>:267:                                    ; preds = %28
  %268 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %269 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %270 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %271 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %272 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %273 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %274 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %275 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %276 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %277 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %278 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %279 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %269, i32 0, i32 0
  store i64* %0, i64** %279, align 8
  %280 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %270, i32 0, i32 0
  store i64* %1, i64** %280, align 8
  %281 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %271, i32 0, i32 0
  store i64* %2, i64** %281, align 8
  store i32 450778032, i32* %27
  br label %319

; <label>:282:                                    ; preds = %28
  %283 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %284 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %283 to i8*
  %285 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %286 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %285 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %284, i8* %286, i64 8, i32 8, i1 false)
  %287 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %288 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %287 to i8*
  %289 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %12
  %290 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %289 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %288, i8* %290, i64 8, i32 8, i1 false)
  %291 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %10
  %292 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %291, i32 0, i32 0
  %293 = load i64*, i64** %292, align 8
  %294 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %295 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %294, i32 0, i32 0
  %296 = load i64*, i64** %295, align 8
  %297 = load volatile %"struct.__gnu_cxx::__ops::_Iter_less_iter"*, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %11
  %298 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %297, i64* %293, i64* %296)
  store i32 -1962189431, i32* %27
  br label %319

; <label>:299:                                    ; preds = %28
  %300 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %301 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmmEv(%"class.__gnu_cxx::__normal_iterator.9"* %300) #3
  store i32 345873850, i32* %27
  br label %319

; <label>:302:                                    ; preds = %28
  %303 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %304 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %303 to i8*
  %305 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %306 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %305 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %304, i8* %306, i64 8, i32 8, i1 false)
  %307 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %308 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %307 to i8*
  %309 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %310 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %309 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %308, i8* %310, i64 8, i32 8, i1 false)
  %311 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %312 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %311, i32 0, i32 0
  %313 = load i64*, i64** %312, align 8
  %314 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %315 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %314, i32 0, i32 0
  %316 = load i64*, i64** %315, align 8
  call void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64* %313, i64* %316)
  %317 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %14
  %318 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv(%"class.__gnu_cxx::__normal_iterator.9"* %317) #3
  store i32 -1441391407, i32* %27
  br label %319

; <label>:319:                                    ; preds = %302, %299, %282, %267, %266, %234, %219, %206, %205, %187, %171, %153, %150, %147, %144, %101, %86, %85, %84, %51, %31, %30
  br label %28
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_EvT_T0_(i64*, i64*) #4 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  store i64* %0, i64** %5, align 8
  %6 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %1, i64** %6, align 8
  %7 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %3) #3
  %8 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %4) #3
  call void @_ZSt4swapIxEvRT_S1_(i64* dereferenceable(8) %7, i64* dereferenceable(8) %8) #3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt4swapIxEvRT_S1_(i64* dereferenceable(8), i64* dereferenceable(8)) #4 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  %6 = load i64*, i64** %3, align 8
  %7 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %6) #3
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %5, align 8
  %9 = load i64*, i64** %4, align 8
  %10 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %9) #3
  %11 = load i64, i64* %10, align 8
  %12 = load i64*, i64** %3, align 8
  store i64 %11, i64* %12, align 8
  %13 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %5) #3
  %14 = load i64, i64* %13, align 8
  %15 = load i64*, i64** %4, align 8
  store i64 %14, i64* %15, align 8
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64*, i64*) #0 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %10 = alloca i64*
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %12 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %14 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter"*
  %15 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %16 = alloca %"class.__gnu_cxx::__normal_iterator.9"*
  %17 = alloca i1
  %18 = alloca i1
  %19 = load i32, i32* @x.516
  %20 = load i32, i32* @y.517
  %21 = add i32 %19, 865001816
  %22 = sub i32 %21, 1
  %23 = sub i32 %22, 865001816
  %24 = sub i32 %19, 1
  %25 = mul i32 %19, %23
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  store i1 %27, i1* %18
  %28 = icmp slt i32 %20, 10
  store i1 %28, i1* %17
  %29 = alloca i32
  store i32 -1192342621, i32* %29
  br label %30

; <label>:30:                                     ; preds = %2, %283
  %31 = load i32, i32* %29
  switch i32 %31, label %32 [
    i32 -1192342621, label %33
    i32 -315357879, label %53
    i32 -1150469400, label %91
    i32 2098709604, label %94
    i32 279127508, label %95
    i32 -888902141, label %100
    i32 -114242700, label %128
    i32 1373079124, label %147
    i32 -1667110741, label %150
    i32 1407871657, label %168
    i32 1640484888, label %203
    i32 1845165246, label %211
    i32 1136221906, label %212
    i32 -587408982, label %215
    i32 1709201368, label %242
    i32 -1960824838, label %258
    i32 -1530337078, label %259
    i32 922411681, label %278
    i32 943730397, label %282
  ]

; <label>:32:                                     ; preds = %30
  br label %283

; <label>:33:                                     ; preds = %30
  %34 = load volatile i1, i1* %18
  %35 = load volatile i1, i1* %17
  %36 = xor i1 %34, true
  %37 = xor i1 %35, true
  %38 = xor i1 false, true
  %39 = and i1 %36, false
  %40 = and i1 %34, %38
  %41 = and i1 %37, false
  %42 = and i1 %35, %38
  %43 = or i1 %39, %40
  %44 = or i1 %41, %42
  %45 = xor i1 %43, %44
  %46 = or i1 %36, %37
  %47 = xor i1 %46, true
  %48 = or i1 false, %38
  %49 = and i1 %47, %48
  %50 = or i1 %45, %49
  %51 = or i1 %34, %35
  %52 = select i1 %50, i32 -315357879, i32 -1530337078
  store i32 %52, i32* %29
  br label %283

; <label>:53:                                     ; preds = %30
  %54 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %54, %"class.__gnu_cxx::__normal_iterator.9"** %16
  %55 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %55, %"class.__gnu_cxx::__normal_iterator.9"** %15
  %56 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  store %"struct.__gnu_cxx::__ops::_Iter_less_iter"* %56, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %14
  %57 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %57, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %58 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %58, %"class.__gnu_cxx::__normal_iterator.9"** %12
  %59 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %59, %"class.__gnu_cxx::__normal_iterator.9"** %11
  %60 = alloca i64, align 8
  store i64* %60, i64** %10
  %61 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %61, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %62 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %62, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %63 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %63, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %64 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %64, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %65 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %65, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %66 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %67 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %68 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %69 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %16
  %70 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %69, i32 0, i32 0
  store i64* %0, i64** %70, align 8
  %71 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %15
  %72 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %71, i32 0, i32 0
  store i64* %1, i64** %72, align 8
  %73 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %16
  %74 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %15
  %75 = call zeroext i1 @_ZN9__gnu_cxxeqIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %73, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %74) #3
  store i1 %75, i1* %4
  %76 = load i32, i32* @x.516
  %77 = load i32, i32* @y.517
  %78 = sub i32 %76, 923162208
  %79 = sub i32 %78, 1
  %80 = add i32 %79, 923162208
  %81 = sub i32 %76, 1
  %82 = mul i32 %76, %80
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %77, 10
  %86 = and i1 %84, %85
  %87 = xor i1 %84, %85
  %88 = or i1 %86, %87
  %89 = or i1 %84, %85
  %90 = select i1 %88, i32 -1150469400, i32 -1530337078
  store i32 %90, i32* %29
  br label %283

; <label>:91:                                     ; preds = %30
  %92 = load volatile i1, i1* %4
  %93 = select i1 %92, i32 2098709604, i32 279127508
  store i32 %93, i32* %29
  br label %283

; <label>:94:                                     ; preds = %30
  store i32 -587408982, i32* %29
  br label %283

; <label>:95:                                     ; preds = %30
  %96 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %16
  %97 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %96, i64 1) #3
  %98 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %99 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %98, i32 0, i32 0
  store i64* %97, i64** %99, align 8
  store i32 -888902141, i32* %29
  br label %283

; <label>:100:                                    ; preds = %30
  %101 = load i32, i32* @x.516
  %102 = load i32, i32* @y.517
  %103 = sub i32 %101, -1802922023
  %104 = sub i32 %103, 1
  %105 = add i32 %104, -1802922023
  %106 = sub i32 %101, 1
  %107 = mul i32 %101, %105
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %102, 10
  %111 = xor i1 %109, true
  %112 = xor i1 %110, true
  %113 = xor i1 false, true
  %114 = and i1 %111, false
  %115 = and i1 %109, %113
  %116 = and i1 %112, false
  %117 = and i1 %110, %113
  %118 = or i1 %114, %115
  %119 = or i1 %116, %117
  %120 = xor i1 %118, %119
  %121 = or i1 %111, %112
  %122 = xor i1 %121, true
  %123 = or i1 false, %113
  %124 = and i1 %122, %123
  %125 = or i1 %120, %124
  %126 = or i1 %109, %110
  %127 = select i1 %125, i32 -114242700, i32 922411681
  store i32 %127, i32* %29
  br label %283

; <label>:128:                                    ; preds = %30
  %129 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %15
  %130 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %131 = call zeroext i1 @_ZN9__gnu_cxxneIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %130, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %129) #3
  store i1 %131, i1* %3
  %132 = load i32, i32* @x.516
  %133 = load i32, i32* @y.517
  %134 = sub i32 %132, -386223747
  %135 = sub i32 %134, 1
  %136 = add i32 %135, -386223747
  %137 = sub i32 %132, 1
  %138 = mul i32 %132, %136
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %133, 10
  %142 = and i1 %140, %141
  %143 = xor i1 %140, %141
  %144 = or i1 %142, %143
  %145 = or i1 %140, %141
  %146 = select i1 %144, i32 1373079124, i32 922411681
  store i32 %146, i32* %29
  br label %283

; <label>:147:                                    ; preds = %30
  %148 = load volatile i1, i1* %3
  %149 = select i1 %148, i32 -1667110741, i32 -587408982
  store i32 %149, i32* %29
  br label %283

; <label>:150:                                    ; preds = %30
  %151 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %12
  %152 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %151 to i8*
  %153 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %154 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %153 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %152, i8* %154, i64 8, i32 8, i1 false)
  %155 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %11
  %156 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %155 to i8*
  %157 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %16
  %158 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %157 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %156, i8* %158, i64 8, i32 8, i1 false)
  %159 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %12
  %160 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %159, i32 0, i32 0
  %161 = load i64*, i64** %160, align 8
  %162 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %11
  %163 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %162, i32 0, i32 0
  %164 = load i64*, i64** %163, align 8
  %165 = load volatile %"struct.__gnu_cxx::__ops::_Iter_less_iter"*, %"struct.__gnu_cxx::__ops::_Iter_less_iter"** %14
  %166 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPxSt6vectorIxSaIxEEEES8_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %165, i64* %161, i64* %164)
  %167 = select i1 %166, i32 1407871657, i32 1640484888
  store i32 %167, i32* %29
  br label %283

; <label>:168:                                    ; preds = %30
  %169 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %170 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %169) #3
  %171 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %170) #3
  %172 = load i64, i64* %171, align 8
  %173 = load volatile i64*, i64** %10
  store i64 %172, i64* %173, align 8
  %174 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %175 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %174 to i8*
  %176 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %16
  %177 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %176 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %175, i8* %177, i64 8, i32 8, i1 false)
  %178 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %179 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %178 to i8*
  %180 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %181 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %180 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %179, i8* %181, i64 8, i32 8, i1 false)
  %182 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %183 = call i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEplEl(%"class.__gnu_cxx::__normal_iterator.9"* %182, i64 1) #3
  %184 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %185 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %184, i32 0, i32 0
  store i64* %183, i64** %185, align 8
  %186 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %9
  %187 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %186, i32 0, i32 0
  %188 = load i64*, i64** %187, align 8
  %189 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %8
  %190 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %189, i32 0, i32 0
  %191 = load i64*, i64** %190, align 8
  %192 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %7
  %193 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %192, i32 0, i32 0
  %194 = load i64*, i64** %193, align 8
  %195 = call i64* @_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_ET0_T_S8_S7_(i64* %188, i64* %191, i64* %194)
  %196 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %6
  %197 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %196, i32 0, i32 0
  store i64* %195, i64** %197, align 8
  %198 = load volatile i64*, i64** %10
  %199 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %198) #3
  %200 = load i64, i64* %199, align 8
  %201 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %16
  %202 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %201) #3
  store i64 %200, i64* %202, align 8
  store i32 1845165246, i32* %29
  br label %283

; <label>:203:                                    ; preds = %30
  %204 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %205 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %204 to i8*
  %206 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %207 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %206 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %205, i8* %207, i64 8, i32 8, i1 false)
  call void @_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE()
  %208 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %5
  %209 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %208, i32 0, i32 0
  %210 = load i64*, i64** %209, align 8
  call void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops14_Val_less_iterEEvT_T0_(i64* %210)
  store i32 1845165246, i32* %29
  br label %283

; <label>:211:                                    ; preds = %30
  store i32 1136221906, i32* %29
  br label %283

; <label>:212:                                    ; preds = %30
  %213 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %214 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv(%"class.__gnu_cxx::__normal_iterator.9"* %213) #3
  store i32 -888902141, i32* %29
  br label %283

; <label>:215:                                    ; preds = %30
  %216 = load i32, i32* @x.516
  %217 = load i32, i32* @y.517
  %218 = sub i32 0, 1
  %219 = add i32 %216, %218
  %220 = sub i32 %216, 1
  %221 = mul i32 %216, %219
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %217, 10
  %225 = xor i1 %223, true
  %226 = xor i1 %224, true
  %227 = xor i1 false, true
  %228 = and i1 %225, false
  %229 = and i1 %223, %227
  %230 = and i1 %226, false
  %231 = and i1 %224, %227
  %232 = or i1 %228, %229
  %233 = or i1 %230, %231
  %234 = xor i1 %232, %233
  %235 = or i1 %225, %226
  %236 = xor i1 %235, true
  %237 = or i1 false, %227
  %238 = and i1 %236, %237
  %239 = or i1 %234, %238
  %240 = or i1 %223, %224
  %241 = select i1 %239, i32 1709201368, i32 943730397
  store i32 %241, i32* %29
  br label %283

; <label>:242:                                    ; preds = %30
  %243 = load i32, i32* @x.516
  %244 = load i32, i32* @y.517
  %245 = sub i32 %243, 1684821488
  %246 = sub i32 %245, 1
  %247 = add i32 %246, 1684821488
  %248 = sub i32 %243, 1
  %249 = mul i32 %243, %247
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %244, 10
  %253 = and i1 %251, %252
  %254 = xor i1 %251, %252
  %255 = or i1 %253, %254
  %256 = or i1 %251, %252
  %257 = select i1 %255, i32 -1960824838, i32 943730397
  store i32 %257, i32* %29
  br label %283

; <label>:258:                                    ; preds = %30
  ret void

; <label>:259:                                    ; preds = %30
  %260 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %261 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %262 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %263 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %264 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %265 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %266 = alloca i64, align 8
  %267 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %268 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %269 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %270 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %271 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %272 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %273 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %274 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %275 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %260, i32 0, i32 0
  store i64* %0, i64** %275, align 8
  %276 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %261, i32 0, i32 0
  store i64* %1, i64** %276, align 8
  %277 = call zeroext i1 @_ZN9__gnu_cxxeqIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %260, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %261) #3
  store i32 -315357879, i32* %29
  br label %283

; <label>:278:                                    ; preds = %30
  %279 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %15
  %280 = load volatile %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %13
  %281 = call zeroext i1 @_ZN9__gnu_cxxneIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %280, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %279) #3
  store i32 -114242700, i32* %29
  br label %283

; <label>:282:                                    ; preds = %30
  store i32 1709201368, i32* %29
  br label %283

; <label>:283:                                    ; preds = %282, %278, %259, %242, %215, %212, %211, %203, %168, %150, %147, %128, %100, %95, %94, %91, %53, %33, %32
  br label %30
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i64*, i64*) #0 comdat {
  %3 = alloca i1
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %10 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %11 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %0, i64** %12, align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %1, i64** %13, align 8
  %14 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  %15 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 8, i32 8, i1 false)
  %16 = alloca i32
  store i32 2139132707, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %114
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 2139132707, label %20
    i32 -700714680, label %48
    i32 15697782, label %65
    i32 1799629318, label %68
    i32 1210079900, label %83
    i32 -1057911295, label %103
    i32 -478618487, label %104
    i32 1526233849, label %106
    i32 -1963296346, label %107
    i32 -380364597, label %109
  ]

; <label>:19:                                     ; preds = %17
  br label %114

; <label>:20:                                     ; preds = %17
  %21 = load i32, i32* @x.518
  %22 = load i32, i32* @y.519
  %23 = sub i32 %21, -1902858030
  %24 = sub i32 %23, 1
  %25 = add i32 %24, -1902858030
  %26 = sub i32 %21, 1
  %27 = mul i32 %21, %25
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %22, 10
  %31 = xor i1 %29, true
  %32 = xor i1 %30, true
  %33 = xor i1 true, true
  %34 = and i1 %31, true
  %35 = and i1 %29, %33
  %36 = and i1 %32, true
  %37 = and i1 %30, %33
  %38 = or i1 %34, %35
  %39 = or i1 %36, %37
  %40 = xor i1 %38, %39
  %41 = or i1 %31, %32
  %42 = xor i1 %41, true
  %43 = or i1 true, %33
  %44 = and i1 %42, %43
  %45 = or i1 %40, %44
  %46 = or i1 %29, %30
  %47 = select i1 %45, i32 -700714680, i32 -1963296346
  store i32 %47, i32* %16
  br label %114

; <label>:48:                                     ; preds = %17
  %49 = call zeroext i1 @_ZN9__gnu_cxxneIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %7, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %5) #3
  store i1 %49, i1* %3
  %50 = load i32, i32* @x.518
  %51 = load i32, i32* @y.519
  %52 = add i32 %50, -607570813
  %53 = sub i32 %52, 1
  %54 = sub i32 %53, -607570813
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = and i1 %58, %59
  %61 = xor i1 %58, %59
  %62 = or i1 %60, %61
  %63 = or i1 %58, %59
  %64 = select i1 %62, i32 15697782, i32 -1963296346
  store i32 %64, i32* %16
  br label %114

; <label>:65:                                     ; preds = %17
  %66 = load volatile i1, i1* %3
  %67 = select i1 %66, i32 1799629318, i32 1526233849
  store i32 %67, i32* %16
  br label %114

; <label>:68:                                     ; preds = %17
  %69 = load i32, i32* @x.518
  %70 = load i32, i32* @y.519
  %71 = sub i32 0, 1
  %72 = add i32 %69, %71
  %73 = sub i32 %69, 1
  %74 = mul i32 %69, %72
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %70, 10
  %78 = and i1 %76, %77
  %79 = xor i1 %76, %77
  %80 = or i1 %78, %79
  %81 = or i1 %76, %77
  %82 = select i1 %80, i32 1210079900, i32 -380364597
  store i32 %82, i32* %16
  br label %114

; <label>:83:                                     ; preds = %17
  %84 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  %85 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %85, i64 8, i32 8, i1 false)
  call void @_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE()
  %86 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %87 = load i64*, i64** %86, align 8
  call void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops14_Val_less_iterEEvT_T0_(i64* %87)
  %88 = load i32, i32* @x.518
  %89 = load i32, i32* @y.519
  %90 = sub i32 %88, -398810783
  %91 = sub i32 %90, 1
  %92 = add i32 %91, -398810783
  %93 = sub i32 %88, 1
  %94 = mul i32 %88, %92
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %89, 10
  %98 = and i1 %96, %97
  %99 = xor i1 %96, %97
  %100 = or i1 %98, %99
  %101 = or i1 %96, %97
  %102 = select i1 %100, i32 -1057911295, i32 -380364597
  store i32 %102, i32* %16
  br label %114

; <label>:103:                                    ; preds = %17
  store i32 -478618487, i32* %16
  br label %114

; <label>:104:                                    ; preds = %17
  %105 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv(%"class.__gnu_cxx::__normal_iterator.9"* %7) #3
  store i32 2139132707, i32* %16
  br label %114

; <label>:106:                                    ; preds = %17
  ret void

; <label>:107:                                    ; preds = %17
  %108 = call zeroext i1 @_ZN9__gnu_cxxneIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %7, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %5) #3
  store i32 -700714680, i32* %16
  br label %114

; <label>:109:                                    ; preds = %17
  %110 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  %111 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %110, i8* %111, i64 8, i32 8, i1 false)
  call void @_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE()
  %112 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %113 = load i64*, i64** %112, align 8
  call void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops14_Val_less_iterEEvT_T0_(i64* %113)
  store i32 1210079900, i32* %16
  br label %114

; <label>:114:                                    ; preds = %109, %107, %104, %103, %83, %68, %65, %48, %20, %19
  br label %17
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZN9__gnu_cxxeqIPxSt6vectorIxSaIxEEEEbRKNS_17__normal_iteratorIT_T0_EESA_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8), %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8)) #4 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %1, %"class.__gnu_cxx::__normal_iterator.9"** %4, align 8
  %5 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  %6 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %5) #3
  %7 = load i64*, i64** %6, align 8
  %8 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %4, align 8
  %9 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %8) #3
  %10 = load i64*, i64** %9, align 8
  %11 = icmp eq i64* %7, %10
  ret i1 %11
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_ET0_T_S8_S7_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %0, i64** %13, align 8
  %14 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  store i64* %1, i64** %14, align 8
  %15 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  store i64* %2, i64** %15, align 8
  %16 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  %17 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 8, i32 8, i1 false)
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  %19 = load i64*, i64** %18, align 8
  %20 = call i64* @_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Miter_baseIT_E13iterator_typeES8_(i64* %19)
  %21 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  store i64* %20, i64** %21, align 8
  %22 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  %23 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 8, i32 8, i1 false)
  %24 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  %25 = load i64*, i64** %24, align 8
  %26 = call i64* @_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Miter_baseIT_E13iterator_typeES8_(i64* %25)
  %27 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  store i64* %26, i64** %27, align 8
  %28 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %12 to i8*
  %29 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 8, i32 8, i1 false)
  %30 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %12, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = call i64* @_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_ET1_T0_S8_S7_(i64* %31, i64* %33, i64* %35)
  %37 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %36, i64** %37, align 8
  %38 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  %39 = load i64*, i64** %38, align 8
  ret i64* %39
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEENS0_5__ops14_Val_less_iterEEvT_T0_(i64*) #0 comdat {
  %2 = alloca i1
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %5 = alloca i64, align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  store i64* %0, i64** %8, align 8
  %9 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %3) #3
  %10 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %9) #3
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %5, align 8
  %12 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  %13 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 8, i32 8, i1 false)
  %14 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmmEv(%"class.__gnu_cxx::__normal_iterator.9"* %6) #3
  %15 = alloca i32
  store i32 303032422, i32* %15
  br label %16

; <label>:16:                                     ; preds = %1, %88
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 303032422, label %19
    i32 360737838, label %46
    i32 -1812630109, label %67
    i32 -1771642940, label %70
    i32 643996029, label %78
    i32 2109210448, label %82
  ]

; <label>:18:                                     ; preds = %16
  br label %88

; <label>:19:                                     ; preds = %16
  %20 = load i32, i32* @x.524
  %21 = load i32, i32* @y.525
  %22 = sub i32 0, 1
  %23 = add i32 %20, %22
  %24 = sub i32 %20, 1
  %25 = mul i32 %20, %23
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %21, 10
  %29 = xor i1 %27, true
  %30 = xor i1 %28, true
  %31 = xor i1 true, true
  %32 = and i1 %29, true
  %33 = and i1 %27, %31
  %34 = and i1 %30, true
  %35 = and i1 %28, %31
  %36 = or i1 %32, %33
  %37 = or i1 %34, %35
  %38 = xor i1 %36, %37
  %39 = or i1 %29, %30
  %40 = xor i1 %39, true
  %41 = or i1 true, %31
  %42 = and i1 %40, %41
  %43 = or i1 %38, %42
  %44 = or i1 %27, %28
  %45 = select i1 %43, i32 360737838, i32 2109210448
  store i32 %45, i32* %15
  br label %88

; <label>:46:                                     ; preds = %16
  %47 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  %48 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 8, i32 8, i1 false)
  %49 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  %50 = load i64*, i64** %49, align 8
  %51 = call zeroext i1 @_ZNK9__gnu_cxx5__ops14_Val_less_iterclIxNS_17__normal_iteratorIPxSt6vectorIxSaIxEEEEEEbRT_T0_(%"struct.__gnu_cxx::__ops::_Val_less_iter"* %4, i64* dereferenceable(8) %5, i64* %50)
  store i1 %51, i1* %2
  %52 = load i32, i32* @x.524
  %53 = load i32, i32* @y.525
  %54 = sub i32 %52, -1691902176
  %55 = sub i32 %54, 1
  %56 = add i32 %55, -1691902176
  %57 = sub i32 %52, 1
  %58 = mul i32 %52, %56
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %53, 10
  %62 = and i1 %60, %61
  %63 = xor i1 %60, %61
  %64 = or i1 %62, %63
  %65 = or i1 %60, %61
  %66 = select i1 %64, i32 -1812630109, i32 2109210448
  store i32 %66, i32* %15
  br label %88

; <label>:67:                                     ; preds = %16
  %68 = load volatile i1, i1* %2
  %69 = select i1 %68, i32 -1771642940, i32 643996029
  store i32 %69, i32* %15
  br label %88

; <label>:70:                                     ; preds = %16
  %71 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %6) #3
  %72 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %71) #3
  %73 = load i64, i64* %72, align 8
  %74 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %3) #3
  store i64 %73, i64* %74, align 8
  %75 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %3 to i8*
  %76 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %75, i8* %76, i64 8, i32 8, i1 false)
  %77 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEmmEv(%"class.__gnu_cxx::__normal_iterator.9"* %6) #3
  store i32 303032422, i32* %15
  br label %88

; <label>:78:                                     ; preds = %16
  %79 = call dereferenceable(8) i64* @_ZSt4moveIRxEONSt16remove_referenceIT_E4typeEOS2_(i64* dereferenceable(8) %5) #3
  %80 = load i64, i64* %79, align 8
  %81 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %3) #3
  store i64 %80, i64* %81, align 8
  ret void

; <label>:82:                                     ; preds = %16
  %83 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  %84 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %83, i8* %84, i64 8, i32 8, i1 false)
  %85 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  %86 = load i64*, i64** %85, align 8
  %87 = call zeroext i1 @_ZNK9__gnu_cxx5__ops14_Val_less_iterclIxNS_17__normal_iteratorIPxSt6vectorIxSaIxEEEEEEbRT_T0_(%"struct.__gnu_cxx::__ops::_Val_less_iter"* %4, i64* dereferenceable(8) %5, i64* %86)
  store i32 360737838, i32* %15
  br label %88

; <label>:88:                                     ; preds = %82, %70, %67, %46, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE() #4 comdat {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %2 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEES6_ET1_T0_S8_S7_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %8 = alloca i64*, align 8
  %9 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %10 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %11 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  store i64* %0, i64** %12, align 8
  %13 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  store i64* %1, i64** %13, align 8
  %14 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  store i64* %2, i64** %14, align 8
  %15 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %9 to i8*
  %16 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 8, i32 8, i1 false)
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %9, i32 0, i32 0
  %18 = load i64*, i64** %17, align 8
  %19 = call i64* @_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Niter_baseIT_E13iterator_typeES8_(i64* %18)
  %20 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %10 to i8*
  %21 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 8, i32 8, i1 false)
  %22 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %10, i32 0, i32 0
  %23 = load i64*, i64** %22, align 8
  %24 = call i64* @_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Niter_baseIT_E13iterator_typeES8_(i64* %23)
  %25 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %11 to i8*
  %26 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 8, i32 8, i1 false)
  %27 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %11, i32 0, i32 0
  %28 = load i64*, i64** %27, align 8
  %29 = call i64* @_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Niter_baseIT_E13iterator_typeES8_(i64* %28)
  %30 = call i64* @_ZSt22__copy_move_backward_aILb1EPxS0_ET1_T0_S2_S1_(i64* %19, i64* %24, i64* %29)
  store i64* %30, i64** %8, align 8
  call void @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEC2ERKS1_(%"class.__gnu_cxx::__normal_iterator.9"* %4, i64** dereferenceable(8) %8) #3
  %31 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  %32 = load i64*, i64** %31, align 8
  ret i64* %32
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Miter_baseIT_E13iterator_typeES8_(i64*) #0 comdat {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  store i64* %0, i64** %5, align 8
  %6 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %4 to i8*
  %7 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 8, i32 8, i1 false)
  %8 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = call i64* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEELb0EE7_S_baseES6_(i64* %9)
  %11 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %2, i32 0, i32 0
  store i64* %10, i64** %11, align 8
  %12 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %2, i32 0, i32 0
  %13 = load i64*, i64** %12, align 8
  ret i64* %13
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt22__copy_move_backward_aILb1EPxS0_ET1_T0_S2_S1_(i64*, i64*, i64*) #0 comdat {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca i1
  %7 = load i32, i32* @x.532
  %8 = load i32, i32* @y.533
  %9 = sub i32 %7, -642027482
  %10 = sub i32 %9, 1
  %11 = add i32 %10, -642027482
  %12 = sub i32 %7, 1
  %13 = mul i32 %7, %11
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %6
  %16 = icmp slt i32 %8, 10
  store i1 %16, i1* %5
  %17 = alloca i32
  store i32 -529425531, i32* %17
  br label %18

; <label>:18:                                     ; preds = %3, %76
  %19 = load i32, i32* %17
  switch i32 %19, label %20 [
    i32 -529425531, label %21
    i32 -1603488407, label %41
    i32 798562227, label %65
    i32 1603997822, label %67
  ]

; <label>:20:                                     ; preds = %18
  br label %76

; <label>:21:                                     ; preds = %18
  %22 = load volatile i1, i1* %6
  %23 = load volatile i1, i1* %5
  %24 = xor i1 %22, true
  %25 = xor i1 %23, true
  %26 = xor i1 true, true
  %27 = and i1 %24, true
  %28 = and i1 %22, %26
  %29 = and i1 %25, true
  %30 = and i1 %23, %26
  %31 = or i1 %27, %28
  %32 = or i1 %29, %30
  %33 = xor i1 %31, %32
  %34 = or i1 %24, %25
  %35 = xor i1 %34, true
  %36 = or i1 true, %26
  %37 = and i1 %35, %36
  %38 = or i1 %33, %37
  %39 = or i1 %22, %23
  %40 = select i1 %38, i32 -1603488407, i32 1603997822
  store i32 %40, i32* %17
  br label %76

; <label>:41:                                     ; preds = %18
  %42 = alloca i64*, align 8
  %43 = alloca i64*, align 8
  %44 = alloca i64*, align 8
  %45 = alloca i8, align 1
  store i64* %0, i64** %42, align 8
  store i64* %1, i64** %43, align 8
  store i64* %2, i64** %44, align 8
  store i8 1, i8* %45, align 1
  %46 = load i64*, i64** %42, align 8
  %47 = load i64*, i64** %43, align 8
  %48 = load i64*, i64** %44, align 8
  %49 = call i64* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIxEEPT_PKS3_S6_S4_(i64* %46, i64* %47, i64* %48)
  store i64* %49, i64** %4
  %50 = load i32, i32* @x.532
  %51 = load i32, i32* @y.533
  %52 = sub i32 %50, -1392831285
  %53 = sub i32 %52, 1
  %54 = add i32 %53, -1392831285
  %55 = sub i32 %50, 1
  %56 = mul i32 %50, %54
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %51, 10
  %60 = and i1 %58, %59
  %61 = xor i1 %58, %59
  %62 = or i1 %60, %61
  %63 = or i1 %58, %59
  %64 = select i1 %62, i32 798562227, i32 1603997822
  store i32 %64, i32* %17
  br label %76

; <label>:65:                                     ; preds = %18
  %66 = load volatile i64*, i64** %4
  ret i64* %66

; <label>:67:                                     ; preds = %18
  %68 = alloca i64*, align 8
  %69 = alloca i64*, align 8
  %70 = alloca i64*, align 8
  %71 = alloca i8, align 1
  store i64* %0, i64** %68, align 8
  store i64* %1, i64** %69, align 8
  store i64* %2, i64** %70, align 8
  store i8 1, i8* %71, align 1
  %72 = load i64*, i64** %68, align 8
  %73 = load i64*, i64** %69, align 8
  %74 = load i64*, i64** %70, align 8
  %75 = call i64* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIxEEPT_PKS3_S6_S4_(i64* %72, i64* %73, i64* %74)
  store i32 -1603488407, i32* %17
  br label %76

; <label>:76:                                     ; preds = %67, %41, %21, %20
  br label %18
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt11_Niter_baseIT_E13iterator_typeES8_(i64*) #0 comdat {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %2, i32 0, i32 0
  store i64* %0, i64** %4, align 8
  %5 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %3 to i8*
  %6 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 8, i32 8, i1 false)
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = call i64* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEELb1EE7_S_baseES6_(i64* %8)
  ret i64* %9
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIxEEPT_PKS3_S6_S4_(i64*, i64*, i64*) #4 comdat align 2 {
  %4 = alloca i1
  %5 = alloca i64*
  %6 = alloca i64**
  %7 = alloca i64**
  %8 = alloca i1
  %9 = alloca i1
  %10 = load i32, i32* @x.536
  %11 = load i32, i32* @y.537
  %12 = add i32 %10, 1579723432
  %13 = sub i32 %12, 1
  %14 = sub i32 %13, 1579723432
  %15 = sub i32 %10, 1
  %16 = mul i32 %10, %14
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  store i1 %18, i1* %9
  %19 = icmp slt i32 %11, 10
  store i1 %19, i1* %8
  %20 = alloca i32
  store i32 -835030292, i32* %20
  br label %21

; <label>:21:                                     ; preds = %3, %181
  %22 = load i32, i32* %20
  switch i32 %22, label %23 [
    i32 -835030292, label %24
    i32 1794215490, label %44
    i32 -63849406, label %91
    i32 1372159251, label %94
    i32 1815909708, label %110
    i32 -1013340712, label %120
  ]

; <label>:23:                                     ; preds = %21
  br label %181

; <label>:24:                                     ; preds = %21
  %25 = load volatile i1, i1* %9
  %26 = load volatile i1, i1* %8
  %27 = xor i1 %25, true
  %28 = xor i1 %26, true
  %29 = xor i1 false, true
  %30 = and i1 %27, false
  %31 = and i1 %25, %29
  %32 = and i1 %28, false
  %33 = and i1 %26, %29
  %34 = or i1 %30, %31
  %35 = or i1 %32, %33
  %36 = xor i1 %34, %35
  %37 = or i1 %27, %28
  %38 = xor i1 %37, true
  %39 = or i1 false, %29
  %40 = and i1 %38, %39
  %41 = or i1 %36, %40
  %42 = or i1 %25, %26
  %43 = select i1 %41, i32 1794215490, i32 -1013340712
  store i32 %43, i32* %20
  br label %181

; <label>:44:                                     ; preds = %21
  %45 = alloca i64*, align 8
  store i64** %45, i64*** %7
  %46 = alloca i64*, align 8
  %47 = alloca i64*, align 8
  store i64** %47, i64*** %6
  %48 = alloca i64, align 8
  store i64* %48, i64** %5
  %49 = load volatile i64**, i64*** %7
  store i64* %0, i64** %49, align 8
  store i64* %1, i64** %46, align 8
  %50 = load volatile i64**, i64*** %6
  store i64* %2, i64** %50, align 8
  %51 = load i64*, i64** %46, align 8
  %52 = load volatile i64**, i64*** %7
  %53 = load i64*, i64** %52, align 8
  %54 = ptrtoint i64* %51 to i64
  %55 = ptrtoint i64* %53 to i64
  %56 = sub i64 %54, 1580195344917463840
  %57 = sub i64 %56, %55
  %58 = add i64 %57, 1580195344917463840
  %59 = sub i64 %54, %55
  %60 = sdiv exact i64 %58, 8
  %61 = load volatile i64*, i64** %5
  store i64 %60, i64* %61, align 8
  %62 = load volatile i64*, i64** %5
  %63 = load i64, i64* %62, align 8
  %64 = icmp ne i64 %63, 0
  store i1 %64, i1* %4
  %65 = load i32, i32* @x.536
  %66 = load i32, i32* @y.537
  %67 = sub i32 0, 1
  %68 = add i32 %65, %67
  %69 = sub i32 %65, 1
  %70 = mul i32 %65, %68
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %66, 10
  %74 = xor i1 %72, true
  %75 = xor i1 %73, true
  %76 = xor i1 true, true
  %77 = and i1 %74, true
  %78 = and i1 %72, %76
  %79 = and i1 %75, true
  %80 = and i1 %73, %76
  %81 = or i1 %77, %78
  %82 = or i1 %79, %80
  %83 = xor i1 %81, %82
  %84 = or i1 %74, %75
  %85 = xor i1 %84, true
  %86 = or i1 true, %76
  %87 = and i1 %85, %86
  %88 = or i1 %83, %87
  %89 = or i1 %72, %73
  %90 = select i1 %88, i32 -63849406, i32 -1013340712
  store i32 %90, i32* %20
  br label %181

; <label>:91:                                     ; preds = %21
  %92 = load volatile i1, i1* %4
  %93 = select i1 %92, i32 1372159251, i32 1815909708
  store i32 %93, i32* %20
  br label %181

; <label>:94:                                     ; preds = %21
  %95 = load volatile i64**, i64*** %6
  %96 = load i64*, i64** %95, align 8
  %97 = load volatile i64*, i64** %5
  %98 = load i64, i64* %97, align 8
  %99 = sub i64 0, %98
  %100 = add i64 0, %99
  %101 = sub i64 0, %98
  %102 = getelementptr inbounds i64, i64* %96, i64 %100
  %103 = bitcast i64* %102 to i8*
  %104 = load volatile i64**, i64*** %7
  %105 = load i64*, i64** %104, align 8
  %106 = bitcast i64* %105 to i8*
  %107 = load volatile i64*, i64** %5
  %108 = load i64, i64* %107, align 8
  %109 = mul i64 8, %108
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %103, i8* %106, i64 %109, i32 8, i1 false)
  store i32 1815909708, i32* %20
  br label %181

; <label>:110:                                    ; preds = %21
  %111 = load volatile i64**, i64*** %6
  %112 = load i64*, i64** %111, align 8
  %113 = load volatile i64*, i64** %5
  %114 = load i64, i64* %113, align 8
  %115 = add i64 0, 972115105540582542
  %116 = sub i64 %115, %114
  %117 = sub i64 %116, 972115105540582542
  %118 = sub i64 0, %114
  %119 = getelementptr inbounds i64, i64* %112, i64 %117
  ret i64* %119

; <label>:120:                                    ; preds = %21
  %121 = alloca i64*, align 8
  %122 = alloca i64*, align 8
  %123 = alloca i64*, align 8
  %124 = alloca i64, align 8
  store i64* %0, i64** %121, align 8
  store i64* %1, i64** %122, align 8
  store i64* %2, i64** %123, align 8
  %125 = load i64*, i64** %122, align 8
  %126 = load i64*, i64** %121, align 8
  %127 = ptrtoint i64* %125 to i64
  %128 = ptrtoint i64* %126 to i64
  %129 = shl i64 %127, %128
  %130 = sub i64 0, 6105176663694152475
  %131 = sub i64 %130, %127
  %132 = add i64 %131, 6105176663694152475
  %133 = sub i64 0, %127
  %134 = sub i64 %132, 5443584820857261945
  %135 = add i64 %134, %128
  %136 = add i64 %135, 5443584820857261945
  %137 = add i64 %132, %128
  %138 = shl i64 %127, %128
  %139 = shl i64 %127, %128
  %140 = sub i64 %127, 2776082155696366905
  %141 = sub i64 %140, %128
  %142 = add i64 %141, 2776082155696366905
  %143 = sub i64 %127, %128
  %144 = mul i64 %142, %128
  %145 = sub i64 0, %128
  %146 = add i64 %127, %145
  %147 = sub i64 %127, %128
  %148 = mul i64 %146, %128
  %149 = sub i64 %127, 509628774416907706
  %150 = sub i64 %149, %128
  %151 = add i64 %150, 509628774416907706
  %152 = sub i64 %127, %128
  %153 = sub i64 0, %151
  %154 = add i64 0, %153
  %155 = sub i64 0, %151
  %156 = sub i64 0, 8
  %157 = sub i64 %154, %156
  %158 = add i64 %154, 8
  %159 = sub i64 0, 237225319581843615
  %160 = sub i64 %159, %151
  %161 = add i64 %160, 237225319581843615
  %162 = sub i64 0, %151
  %163 = sub i64 %161, 5330262506764759459
  %164 = add i64 %163, 8
  %165 = add i64 %164, 5330262506764759459
  %166 = add i64 %161, 8
  %167 = sub i64 0, 8
  %168 = add i64 %151, %167
  %169 = sub i64 %151, 8
  %170 = mul i64 %168, 8
  %171 = shl i64 %151, 8
  %172 = sub i64 %151, 2301166086205325557
  %173 = sub i64 %172, 8
  %174 = add i64 %173, 2301166086205325557
  %175 = sub i64 %151, 8
  %176 = mul i64 %174, 8
  %177 = shl i64 %151, 8
  %178 = sdiv exact i64 %151, 8
  store i64 %178, i64* %124, align 8
  %179 = load i64, i64* %124, align 8
  %180 = icmp ne i64 %179, 0
  store i32 1794215490, i32* %20
  br label %181

; <label>:181:                                    ; preds = %120, %94, %91, %44, %24, %23
  br label %21
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEELb1EE7_S_baseES6_(i64*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %3 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %2, i32 0, i32 0
  store i64* %0, i64** %3, align 8
  %4 = call dereferenceable(8) i64** @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEE4baseEv(%"class.__gnu_cxx::__normal_iterator.9"* %2) #3
  %5 = load i64*, i64** %4, align 8
  ret i64* %5
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEELb0EE7_S_baseES6_(i64*) #4 comdat align 2 {
  %2 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  store i64* %0, i64** %4, align 8
  %5 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %2 to i8*
  %6 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 8, i32 8, i1 false)
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %2, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  ret i64* %8
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK9__gnu_cxx5__ops14_Val_less_iterclIxNS_17__normal_iteratorIPxSt6vectorIxSaIxEEEEEEbRT_T0_(%"struct.__gnu_cxx::__ops::_Val_less_iter"*, i64* dereferenceable(8), i64*) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter"*, align 8
  %6 = alloca i64*, align 8
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %2, i64** %7, align 8
  store %"struct.__gnu_cxx::__ops::_Val_less_iter"* %0, %"struct.__gnu_cxx::__ops::_Val_less_iter"** %5, align 8
  store i64* %1, i64** %6, align 8
  %8 = load %"struct.__gnu_cxx::__ops::_Val_less_iter"*, %"struct.__gnu_cxx::__ops::_Val_less_iter"** %5, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64, i64* %9, align 8
  %11 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %4) #3
  %12 = load i64, i64* %11, align 8
  %13 = icmp slt i64 %10, %12
  ret i1 %13
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt13__upper_boundIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEExNS0_5__ops14_Val_less_iterEET_S9_S9_RKT0_T1_(i64*, i64*, i64* dereferenceable(8)) #0 comdat {
  %4 = alloca i64*
  %5 = alloca i1
  %6 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %7 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %8 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %9 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %13 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %14 = alloca i64, align 8
  %15 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %16 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %17 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %7, i32 0, i32 0
  store i64* %0, i64** %17, align 8
  %18 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %8, i32 0, i32 0
  store i64* %1, i64** %18, align 8
  store i64* %2, i64** %10, align 8
  %19 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %12 to i8*
  %20 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 8, i32 8, i1 false)
  %21 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %13 to i8*
  %22 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 8, i32 8, i1 false)
  %23 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %12, i32 0, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %13, i32 0, i32 0
  %26 = load i64*, i64** %25, align 8
  %27 = call i64 @_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_(i64* %24, i64* %26)
  store i64 %27, i64* %11, align 8
  %28 = alloca i32
  store i32 892634620, i32* %28
  br label %29

; <label>:29:                                     ; preds = %3, %212
  %30 = load i32, i32* %28
  switch i32 %30, label %31 [
    i32 892634620, label %32
    i32 -1613665054, label %60
    i32 1301179848, label %90
    i32 -1994834610, label %93
    i32 841763761, label %106
    i32 -314705260, label %121
    i32 1959762052, label %137
    i32 -254367391, label %138
    i32 -437678036, label %152
    i32 -151198189, label %153
    i32 1401560738, label %168
    i32 -719279327, label %200
    i32 -1439843888, label %202
    i32 -1629592933, label %205
    i32 -1602790154, label %207
  ]

; <label>:31:                                     ; preds = %29
  br label %212

; <label>:32:                                     ; preds = %29
  %33 = load i32, i32* @x.544
  %34 = load i32, i32* @y.545
  %35 = add i32 %33, -532687165
  %36 = sub i32 %35, 1
  %37 = sub i32 %36, -532687165
  %38 = sub i32 %33, 1
  %39 = mul i32 %33, %37
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %34, 10
  %43 = xor i1 %41, true
  %44 = xor i1 %42, true
  %45 = xor i1 false, true
  %46 = and i1 %43, false
  %47 = and i1 %41, %45
  %48 = and i1 %44, false
  %49 = and i1 %42, %45
  %50 = or i1 %46, %47
  %51 = or i1 %48, %49
  %52 = xor i1 %50, %51
  %53 = or i1 %43, %44
  %54 = xor i1 %53, true
  %55 = or i1 false, %45
  %56 = and i1 %54, %55
  %57 = or i1 %52, %56
  %58 = or i1 %41, %42
  %59 = select i1 %57, i32 -1613665054, i32 -1439843888
  store i32 %59, i32* %28
  br label %212

; <label>:60:                                     ; preds = %29
  %61 = load i64, i64* %11, align 8
  %62 = icmp sgt i64 %61, 0
  store i1 %62, i1* %5
  %63 = load i32, i32* @x.544
  %64 = load i32, i32* @y.545
  %65 = sub i32 %63, 1091421461
  %66 = sub i32 %65, 1
  %67 = add i32 %66, 1091421461
  %68 = sub i32 %63, 1
  %69 = mul i32 %63, %67
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %64, 10
  %73 = xor i1 %71, true
  %74 = xor i1 %72, true
  %75 = xor i1 true, true
  %76 = and i1 %73, true
  %77 = and i1 %71, %75
  %78 = and i1 %74, true
  %79 = and i1 %72, %75
  %80 = or i1 %76, %77
  %81 = or i1 %78, %79
  %82 = xor i1 %80, %81
  %83 = or i1 %73, %74
  %84 = xor i1 %83, true
  %85 = or i1 true, %75
  %86 = and i1 %84, %85
  %87 = or i1 %82, %86
  %88 = or i1 %71, %72
  %89 = select i1 %87, i32 1301179848, i32 -1439843888
  store i32 %89, i32* %28
  br label %212

; <label>:90:                                     ; preds = %29
  %91 = load volatile i1, i1* %5
  %92 = select i1 %91, i32 -1994834610, i32 -151198189
  store i32 %92, i32* %28
  br label %212

; <label>:93:                                     ; preds = %29
  %94 = load i64, i64* %11, align 8
  %95 = ashr i64 %94, 1
  store i64 %95, i64* %14, align 8
  %96 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %15 to i8*
  %97 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %96, i8* %97, i64 8, i32 8, i1 false)
  %98 = load i64, i64* %14, align 8
  call void @_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElEvRT_T0_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %15, i64 %98)
  %99 = load i64*, i64** %10, align 8
  %100 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %16 to i8*
  %101 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 8, i32 8, i1 false)
  %102 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %16, i32 0, i32 0
  %103 = load i64*, i64** %102, align 8
  %104 = call zeroext i1 @_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKxNS_17__normal_iteratorIPxSt6vectorIxSaIxEEEEEEbRT_T0_(%"struct.__gnu_cxx::__ops::_Val_less_iter"* %9, i64* dereferenceable(8) %99, i64* %103)
  %105 = select i1 %104, i32 841763761, i32 -254367391
  store i32 %105, i32* %28
  br label %212

; <label>:106:                                    ; preds = %29
  %107 = load i32, i32* @x.544
  %108 = load i32, i32* @y.545
  %109 = sub i32 0, 1
  %110 = add i32 %107, %109
  %111 = sub i32 %107, 1
  %112 = mul i32 %107, %110
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %108, 10
  %116 = and i1 %114, %115
  %117 = xor i1 %114, %115
  %118 = or i1 %116, %117
  %119 = or i1 %114, %115
  %120 = select i1 %118, i32 -314705260, i32 -1629592933
  store i32 %120, i32* %28
  br label %212

; <label>:121:                                    ; preds = %29
  %122 = load i64, i64* %14, align 8
  store i64 %122, i64* %11, align 8
  %123 = load i32, i32* @x.544
  %124 = load i32, i32* @y.545
  %125 = sub i32 0, 1
  %126 = add i32 %123, %125
  %127 = sub i32 %123, 1
  %128 = mul i32 %123, %126
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %124, 10
  %132 = and i1 %130, %131
  %133 = xor i1 %130, %131
  %134 = or i1 %132, %133
  %135 = or i1 %130, %131
  %136 = select i1 %134, i32 1959762052, i32 -1629592933
  store i32 %136, i32* %28
  br label %212

; <label>:137:                                    ; preds = %29
  store i32 -437678036, i32* %28
  br label %212

; <label>:138:                                    ; preds = %29
  %139 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  %140 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %139, i8* %140, i64 8, i32 8, i1 false)
  %141 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEppEv(%"class.__gnu_cxx::__normal_iterator.9"* %7) #3
  %142 = load i64, i64* %11, align 8
  %143 = load i64, i64* %14, align 8
  %144 = sub i64 %142, -5916394575352815469
  %145 = sub i64 %144, %143
  %146 = add i64 %145, -5916394575352815469
  %147 = sub nsw i64 %142, %143
  %148 = add i64 %146, 2068540554829375886
  %149 = sub i64 %148, 1
  %150 = sub i64 %149, 2068540554829375886
  %151 = sub nsw i64 %146, 1
  store i64 %150, i64* %11, align 8
  store i32 -437678036, i32* %28
  br label %212

; <label>:152:                                    ; preds = %29
  store i32 892634620, i32* %28
  br label %212

; <label>:153:                                    ; preds = %29
  %154 = load i32, i32* @x.544
  %155 = load i32, i32* @y.545
  %156 = sub i32 0, 1
  %157 = add i32 %154, %156
  %158 = sub i32 %154, 1
  %159 = mul i32 %154, %157
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %155, 10
  %163 = and i1 %161, %162
  %164 = xor i1 %161, %162
  %165 = or i1 %163, %164
  %166 = or i1 %161, %162
  %167 = select i1 %165, i32 1401560738, i32 -1602790154
  store i32 %167, i32* %28
  br label %212

; <label>:168:                                    ; preds = %29
  %169 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  %170 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %169, i8* %170, i64 8, i32 8, i1 false)
  %171 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  %172 = load i64*, i64** %171, align 8
  store i64* %172, i64** %4
  %173 = load i32, i32* @x.544
  %174 = load i32, i32* @y.545
  %175 = sub i32 %173, -2000337322
  %176 = sub i32 %175, 1
  %177 = add i32 %176, -2000337322
  %178 = sub i32 %173, 1
  %179 = mul i32 %173, %177
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %174, 10
  %183 = xor i1 %181, true
  %184 = xor i1 %182, true
  %185 = xor i1 true, true
  %186 = and i1 %183, true
  %187 = and i1 %181, %185
  %188 = and i1 %184, true
  %189 = and i1 %182, %185
  %190 = or i1 %186, %187
  %191 = or i1 %188, %189
  %192 = xor i1 %190, %191
  %193 = or i1 %183, %184
  %194 = xor i1 %193, true
  %195 = or i1 true, %185
  %196 = and i1 %194, %195
  %197 = or i1 %192, %196
  %198 = or i1 %181, %182
  %199 = select i1 %197, i32 -719279327, i32 -1602790154
  store i32 %199, i32* %28
  br label %212

; <label>:200:                                    ; preds = %29
  %201 = load volatile i64*, i64** %4
  ret i64* %201

; <label>:202:                                    ; preds = %29
  %203 = load i64, i64* %11, align 8
  %204 = icmp sgt i64 %203, 0
  store i32 -1613665054, i32* %28
  br label %212

; <label>:205:                                    ; preds = %29
  %206 = load i64, i64* %14, align 8
  store i64 %206, i64* %11, align 8
  store i32 -314705260, i32* %28
  br label %212

; <label>:207:                                    ; preds = %29
  %208 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %6 to i8*
  %209 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %208, i8* %209, i64 8, i32 8, i1 false)
  %210 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %6, i32 0, i32 0
  %211 = load i64*, i64** %210, align 8
  store i32 1401560738, i32* %28
  br label %212

; <label>:212:                                    ; preds = %207, %205, %202, %168, %153, %152, %138, %137, %121, %106, %93, %90, %60, %32, %31
  br label %29
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx5__ops15__val_less_iterEv() #4 comdat {
  %1 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter", align 1
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_(i64*, i64*) #0 comdat {
  %3 = alloca i64
  %4 = alloca i1
  %5 = alloca i1
  %6 = load i32, i32* @x.548
  %7 = load i32, i32* @y.549
  %8 = sub i32 %6, -1063087590
  %9 = sub i32 %8, 1
  %10 = add i32 %9, -1063087590
  %11 = sub i32 %6, 1
  %12 = mul i32 %6, %10
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %5
  %15 = icmp slt i32 %7, 10
  store i1 %15, i1* %4
  %16 = alloca i32
  store i32 106270297, i32* %16
  br label %17

; <label>:17:                                     ; preds = %2, %81
  %18 = load i32, i32* %16
  switch i32 %18, label %19 [
    i32 106270297, label %20
    i32 390437830, label %28
    i32 -1244926036, label %61
    i32 1642825792, label %63
  ]

; <label>:19:                                     ; preds = %17
  br label %81

; <label>:20:                                     ; preds = %17
  %21 = load volatile i1, i1* %5
  %22 = load volatile i1, i1* %4
  %23 = and i1 %21, %22
  %24 = xor i1 %21, %22
  %25 = or i1 %23, %24
  %26 = or i1 %21, %22
  %27 = select i1 %25, i32 390437830, i32 1642825792
  store i32 %27, i32* %16
  br label %81

; <label>:28:                                     ; preds = %17
  %29 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %30 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %31 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %32 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %33 = alloca %"struct.std::random_access_iterator_tag", align 1
  %34 = alloca %"struct.std::random_access_iterator_tag", align 1
  %35 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %29, i32 0, i32 0
  store i64* %0, i64** %35, align 8
  %36 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %30, i32 0, i32 0
  store i64* %1, i64** %36, align 8
  %37 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %31 to i8*
  %38 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 8, i32 8, i1 false)
  %39 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %32 to i8*
  %40 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 8, i32 8, i1 false)
  call void @_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %29)
  %41 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %31, i32 0, i32 0
  %42 = load i64*, i64** %41, align 8
  %43 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %32, i32 0, i32 0
  %44 = load i64*, i64** %43, align 8
  %45 = call i64 @_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag(i64* %42, i64* %44)
  store i64 %45, i64* %3
  %46 = load i32, i32* @x.548
  %47 = load i32, i32* @y.549
  %48 = sub i32 %46, 851172532
  %49 = sub i32 %48, 1
  %50 = add i32 %49, 851172532
  %51 = sub i32 %46, 1
  %52 = mul i32 %46, %50
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %47, 10
  %56 = and i1 %54, %55
  %57 = xor i1 %54, %55
  %58 = or i1 %56, %57
  %59 = or i1 %54, %55
  %60 = select i1 %58, i32 -1244926036, i32 1642825792
  store i32 %60, i32* %16
  br label %81

; <label>:61:                                     ; preds = %17
  %62 = load volatile i64, i64* %3
  ret i64 %62

; <label>:63:                                     ; preds = %17
  %64 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %65 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %66 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %67 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %68 = alloca %"struct.std::random_access_iterator_tag", align 1
  %69 = alloca %"struct.std::random_access_iterator_tag", align 1
  %70 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %64, i32 0, i32 0
  store i64* %0, i64** %70, align 8
  %71 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %65, i32 0, i32 0
  store i64* %1, i64** %71, align 8
  %72 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %66 to i8*
  %73 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* %73, i64 8, i32 8, i1 false)
  %74 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %67 to i8*
  %75 = bitcast %"class.__gnu_cxx::__normal_iterator.9"* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %74, i8* %75, i64 8, i32 8, i1 false)
  call void @_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %64)
  %76 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %66, i32 0, i32 0
  %77 = load i64*, i64** %76, align 8
  %78 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %67, i32 0, i32 0
  %79 = load i64*, i64** %78, align 8
  %80 = call i64 @_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag(i64* %77, i64* %79)
  store i32 390437830, i32* %16
  br label %81

; <label>:81:                                     ; preds = %63, %28, %20, %19
  br label %17
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt7advanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElEvRT_T0_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8), i64) #0 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %"struct.std::random_access_iterator_tag", align 1
  %7 = alloca %"struct.std::random_access_iterator_tag", align 1
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = load i64, i64* %4, align 8
  store i64 %8, i64* %5, align 8
  %9 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  %10 = load i64, i64* %5, align 8
  %11 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  call void @_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %11)
  call void @_ZSt9__advanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElEvRT_T0_St26random_access_iterator_tag(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %9, i64 %10)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK9__gnu_cxx5__ops14_Val_less_iterclIKxNS_17__normal_iteratorIPxSt6vectorIxSaIxEEEEEEbRT_T0_(%"struct.__gnu_cxx::__ops::_Val_less_iter"*, i64* dereferenceable(8), i64*) #4 comdat align 2 {
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"struct.__gnu_cxx::__ops::_Val_less_iter"*, align 8
  %6 = alloca i64*, align 8
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %2, i64** %7, align 8
  store %"struct.__gnu_cxx::__ops::_Val_less_iter"* %0, %"struct.__gnu_cxx::__ops::_Val_less_iter"** %5, align 8
  store i64* %1, i64** %6, align 8
  %8 = load %"struct.__gnu_cxx::__ops::_Val_less_iter"*, %"struct.__gnu_cxx::__ops::_Val_less_iter"** %5, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i64, i64* %9, align 8
  %11 = call dereferenceable(8) i64* @_ZNK9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEdeEv(%"class.__gnu_cxx::__normal_iterator.9"* %4) #3
  %12 = load i64, i64* %11, align 8
  %13 = icmp slt i64 %10, %12
  ret i1 %13
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E15difference_typeES8_S8_St26random_access_iterator_tag(i64*, i64*) #4 comdat {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %4 = alloca %"class.__gnu_cxx::__normal_iterator.9", align 8
  %5 = alloca %"struct.std::random_access_iterator_tag", align 1
  %6 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %3, i32 0, i32 0
  store i64* %0, i64** %6, align 8
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %4, i32 0, i32 0
  store i64* %1, i64** %7, align 8
  %8 = call i64 @_ZN9__gnu_cxxmiIPxSt6vectorIxSaIxEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %4, %"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8) %3) #3
  ret i64 %8
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8)) #4 comdat {
  %2 = alloca %"struct.std::random_access_iterator_tag", align 1
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt9__advanceIN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEElEvRT_T0_St26random_access_iterator_tag(%"class.__gnu_cxx::__normal_iterator.9"* dereferenceable(8), i64) #4 comdat {
  %3 = alloca i1
  %4 = alloca i1
  %5 = load i32, i32* @x.558
  %6 = load i32, i32* @y.559
  %7 = sub i32 %5, -1901749884
  %8 = sub i32 %7, 1
  %9 = add i32 %8, -1901749884
  %10 = sub i32 %5, 1
  %11 = mul i32 %5, %9
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %4
  %14 = icmp slt i32 %6, 10
  store i1 %14, i1* %3
  %15 = alloca i32
  store i32 -336470820, i32* %15
  br label %16

; <label>:16:                                     ; preds = %2, %69
  %17 = load i32, i32* %15
  switch i32 %17, label %18 [
    i32 -336470820, label %19
    i32 -2124025039, label %27
    i32 -1081813530, label %61
    i32 -709445363, label %62
  ]

; <label>:18:                                     ; preds = %16
  br label %69

; <label>:19:                                     ; preds = %16
  %20 = load volatile i1, i1* %4
  %21 = load volatile i1, i1* %3
  %22 = and i1 %20, %21
  %23 = xor i1 %20, %21
  %24 = or i1 %22, %23
  %25 = or i1 %20, %21
  %26 = select i1 %24, i32 -2124025039, i32 -709445363
  store i32 %26, i32* %15
  br label %69

; <label>:27:                                     ; preds = %16
  %28 = alloca %"struct.std::random_access_iterator_tag", align 1
  %29 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %30 = alloca i64, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %29, align 8
  store i64 %1, i64* %30, align 8
  %31 = load i64, i64* %30, align 8
  %32 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %29, align 8
  %33 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEpLEl(%"class.__gnu_cxx::__normal_iterator.9"* %32, i64 %31) #3
  %34 = load i32, i32* @x.558
  %35 = load i32, i32* @y.559
  %36 = add i32 %34, -1494023078
  %37 = sub i32 %36, 1
  %38 = sub i32 %37, -1494023078
  %39 = sub i32 %34, 1
  %40 = mul i32 %34, %38
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %35, 10
  %44 = xor i1 %42, true
  %45 = xor i1 %43, true
  %46 = xor i1 false, true
  %47 = and i1 %44, false
  %48 = and i1 %42, %46
  %49 = and i1 %45, false
  %50 = and i1 %43, %46
  %51 = or i1 %47, %48
  %52 = or i1 %49, %50
  %53 = xor i1 %51, %52
  %54 = or i1 %44, %45
  %55 = xor i1 %54, true
  %56 = or i1 false, %46
  %57 = and i1 %55, %56
  %58 = or i1 %53, %57
  %59 = or i1 %42, %43
  %60 = select i1 %58, i32 -1081813530, i32 -709445363
  store i32 %60, i32* %15
  br label %69

; <label>:61:                                     ; preds = %16
  ret void

; <label>:62:                                     ; preds = %16
  %63 = alloca %"struct.std::random_access_iterator_tag", align 1
  %64 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %65 = alloca i64, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %64, align 8
  store i64 %1, i64* %65, align 8
  %66 = load i64, i64* %65, align 8
  %67 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %64, align 8
  %68 = call dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEpLEl(%"class.__gnu_cxx::__normal_iterator.9"* %67, i64 %66) #3
  store i32 -2124025039, i32* %15
  br label %69

; <label>:69:                                     ; preds = %62, %27, %19, %18
  br label %16
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) %"class.__gnu_cxx::__normal_iterator.9"* @_ZN9__gnu_cxx17__normal_iteratorIPxSt6vectorIxSaIxEEEpLEl(%"class.__gnu_cxx::__normal_iterator.9"*, i64) #4 comdat align 2 {
  %3 = alloca %"class.__gnu_cxx::__normal_iterator.9"*, align 8
  %4 = alloca i64, align 8
  store %"class.__gnu_cxx::__normal_iterator.9"* %0, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %"class.__gnu_cxx::__normal_iterator.9"*, %"class.__gnu_cxx::__normal_iterator.9"** %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = getelementptr inbounds %"class.__gnu_cxx::__normal_iterator.9", %"class.__gnu_cxx::__normal_iterator.9"* %5, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = getelementptr inbounds i64, i64* %8, i64 %6
  store i64* %9, i64** %7, align 8
  ret %"class.__gnu_cxx::__normal_iterator.9"* %5
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s103996764.cpp() #0 section ".text.startup" {
  call void @__cxx_global_var_init()
  call void @__cxx_global_var_init.1()
  call void @__cxx_global_var_init.2()
  call void @__cxx_global_var_init.3()
  call void @__cxx_global_var_init.4()
  call void @__cxx_global_var_init.5()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nounwind }
attributes #12 = { nounwind readnone }
attributes #13 = { noreturn nounwind }
attributes #14 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
