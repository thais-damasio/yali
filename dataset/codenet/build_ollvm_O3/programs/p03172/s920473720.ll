; ModuleID = 'build_ollvm/programs/p03172/s920473720.ll'
source_filename = "Project_CodeNet_C++1400/p03172/s920473720.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s920473720.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #5
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i1, align 1
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %13 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %14 = getelementptr i8, i8* %13, i64 -24
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %16
  %18 = bitcast i8* %17 to %"class.std::basic_ios"*
  %19 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %18, %"class.std::basic_ostream"* null)
  %20 = tail call i64 @clock() #5
  %21 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %10)
  %22 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %21, i64* nonnull dereferenceable(8) %11)
  %23 = load i64, i64* %10, align 8
  %24 = add i64 %23, 1
  %25 = alloca i64, i64 %24, align 16
  br label %26

26:                                               ; preds = %.backedge, %0
  %.0133 = phi i64 [ 1, %0 ], [ %.0133.be, %.backedge ]
  %.0131 = phi i64 [ undef, %0 ], [ %.0131.be, %.backedge ]
  %.0129 = phi i64 [ undef, %0 ], [ %.0129.be, %.backedge ]
  %.0127 = phi i64 [ undef, %0 ], [ %.0127.be, %.backedge ]
  %.0125 = phi i64 [ undef, %0 ], [ %.0125.be, %.backedge ]
  %.0123 = phi i64 [ undef, %0 ], [ %.0123.be, %.backedge ]
  %.0121 = phi i64 [ undef, %0 ], [ %.0121.be, %.backedge ]
  %.0119 = phi i64 [ undef, %0 ], [ %.0119.be, %.backedge ]
  %.0117 = phi i32 [ 1155454728, %0 ], [ %.0117.be, %.backedge ]
  %.0 = phi i64 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0117, label %.backedge [
    i32 1155454728, label %27
    i32 1584734939, label %37
    i32 1195088019, label %49
    i32 1111970201, label %51
    i32 -470194567, label %54
    i32 930705823, label %56
    i32 646399943, label %64
    i32 1980354392, label %67
    i32 1518345583, label %68
    i32 507426737, label %71
    i32 555062005, label %76
    i32 1610631506, label %86
    i32 1872687471, label %96
    i32 1760691050, label %97
    i32 -439821292, label %107
    i32 -1109810486, label %117
    i32 -1961075021, label %118
    i32 -1357243735, label %119
    i32 1338458500, label %120
    i32 -1663974503, label %130
    i32 -755808767, label %144
    i32 -931296894, label %146
    i32 -1376744961, label %156
    i32 56920088, label %169
    i32 270674831, label %170
    i32 1495636191, label %172
    i32 813672613, label %179
    i32 1454367552, label %182
    i32 -1069749857, label %194
    i32 454540510, label %196
    i32 -139468345, label %199
    i32 51547410, label %202
    i32 -1963622493, label %212
    i32 1405412434, label %222
    i32 784590956, label %223
    i32 -1105029419, label %233
    i32 -292451106, label %245
    i32 -718466651, label %247
    i32 574213108, label %258
    i32 1960311677, label %266
    i32 -1973778371, label %276
    i32 1559709514, label %286
    i32 -686546705, label %287
    i32 -873364492, label %297
    i32 -1137048852, label %313
    i32 -587188721, label %314
    i32 -179323177, label %316
    i32 -1188941733, label %322
    i32 236743341, label %325
    i32 625644857, label %337
    i32 2081184720, label %339
    i32 -1538877258, label %349
    i32 -476687508, label %359
    i32 1305748764, label %360
    i32 -800337192, label %370
    i32 1367310862, label %381
    i32 1992163138, label %382
    i32 -619539147, label %388
    i32 -273772366, label %389
    i32 -1932576539, label %390
    i32 262455782, label %391
    i32 233717551, label %392
    i32 1863586672, label %396
    i32 1874825257, label %397
    i32 -160737032, label %398
    i32 579937735, label %399
    i32 -221588081, label %406
    i32 1676554577, label %407
  ]

.backedge:                                        ; preds = %26, %407, %406, %399, %398, %397, %396, %392, %391, %390, %389, %388, %381, %370, %360, %359, %349, %339, %337, %325, %322, %316, %314, %313, %297, %287, %286, %276, %266, %258, %247, %245, %233, %223, %222, %212, %202, %199, %196, %194, %182, %179, %172, %170, %169, %156, %146, %144, %130, %120, %119, %118, %117, %107, %97, %96, %86, %76, %71, %68, %67, %64, %56, %54, %51, %49, %37, %27
  %.0133.be = phi i64 [ %.0133, %26 ], [ %.0133, %407 ], [ %.0133, %406 ], [ %.0133, %399 ], [ %.0133, %398 ], [ %.0133, %397 ], [ %.0133, %396 ], [ %.0133, %392 ], [ %.0133, %391 ], [ %.0133, %390 ], [ %.0133, %389 ], [ %.0133, %388 ], [ %.0133, %381 ], [ %.0133, %370 ], [ %.0133, %360 ], [ %.0133, %359 ], [ %.0133, %349 ], [ %.0133, %339 ], [ %.0133, %337 ], [ %.0133, %325 ], [ %.0133, %322 ], [ %.0133, %316 ], [ %.0133, %314 ], [ %.0133, %313 ], [ %.0133, %297 ], [ %.0133, %287 ], [ %.0133, %286 ], [ %.0133, %276 ], [ %.0133, %266 ], [ %.0133, %258 ], [ %.0133, %247 ], [ %.0133, %245 ], [ %.0133, %233 ], [ %.0133, %223 ], [ %.0133, %222 ], [ %.0133, %212 ], [ %.0133, %202 ], [ %.0133, %199 ], [ %.0133, %196 ], [ %.0133, %194 ], [ %.0133, %182 ], [ %.0133, %179 ], [ %.0133, %172 ], [ %.0133, %170 ], [ %.0133, %169 ], [ %.0133, %156 ], [ %.0133, %146 ], [ %.0133, %144 ], [ %.0133, %130 ], [ %.0133, %120 ], [ %.0133, %119 ], [ %.0133, %118 ], [ %.0133, %117 ], [ %.0133, %107 ], [ %.0133, %97 ], [ %.0133, %96 ], [ %.0133, %86 ], [ %.0133, %76 ], [ %.0133, %71 ], [ %.0133, %68 ], [ %.0133, %67 ], [ %.0133, %64 ], [ %.0133, %56 ], [ %55, %54 ], [ %.0133, %51 ], [ %.0133, %49 ], [ %.0133, %37 ], [ %.0133, %27 ]
  %.0131.be = phi i64 [ %.0131, %26 ], [ %.0131, %407 ], [ %.0131, %406 ], [ %.0131, %399 ], [ %.0131, %398 ], [ %.0131, %397 ], [ %.0131, %396 ], [ %.0131, %392 ], [ %.0131, %391 ], [ %.0131, %390 ], [ %.0131, %389 ], [ %.0131, %388 ], [ %.0131, %381 ], [ %.0131, %370 ], [ %.0131, %360 ], [ %.0131, %359 ], [ %.0131, %349 ], [ %.0131, %339 ], [ %.0131, %337 ], [ %.0131, %325 ], [ %.0131, %322 ], [ %.0131, %316 ], [ %.0131, %314 ], [ %.0131, %313 ], [ %.0131, %297 ], [ %.0131, %287 ], [ %.0131, %286 ], [ %.0131, %276 ], [ %.0131, %266 ], [ %.0131, %258 ], [ %.0131, %247 ], [ %.0131, %245 ], [ %.0131, %233 ], [ %.0131, %223 ], [ %.0131, %222 ], [ %.0131, %212 ], [ %.0131, %202 ], [ %.0131, %199 ], [ %.0131, %196 ], [ %.0131, %194 ], [ %.0131, %182 ], [ %.0131, %179 ], [ %.0131, %172 ], [ %.0131, %170 ], [ %.0131, %169 ], [ %.0131, %156 ], [ %.0131, %146 ], [ %.0131, %144 ], [ %.0131, %130 ], [ %.0131, %120 ], [ %.0131, %119 ], [ %.neg150, %118 ], [ %.0131, %117 ], [ %.0131, %107 ], [ %.0131, %97 ], [ %.0131, %96 ], [ %.0131, %86 ], [ %.0131, %76 ], [ %.0131, %71 ], [ %.0131, %68 ], [ %.0131, %67 ], [ %.0131, %64 ], [ 0, %56 ], [ %.0131, %54 ], [ %.0131, %51 ], [ %.0131, %49 ], [ %.0131, %37 ], [ %.0131, %27 ]
  %.0129.be = phi i64 [ %.0129, %26 ], [ %.0129, %407 ], [ %.0129, %406 ], [ %.0129, %399 ], [ %.0129, %398 ], [ %.0129, %397 ], [ %.0129, %396 ], [ %.0129, %392 ], [ %.0129, %391 ], [ %.0129, %390 ], [ %.neg136, %389 ], [ %.0129, %388 ], [ %.0129, %381 ], [ %.0129, %370 ], [ %.0129, %360 ], [ %.0129, %359 ], [ %.0129, %349 ], [ %.0129, %339 ], [ %.0129, %337 ], [ %.0129, %325 ], [ %.0129, %322 ], [ %.0129, %316 ], [ %.0129, %314 ], [ %.0129, %313 ], [ %.0129, %297 ], [ %.0129, %287 ], [ %.0129, %286 ], [ %.0129, %276 ], [ %.0129, %266 ], [ %.0129, %258 ], [ %.0129, %247 ], [ %.0129, %245 ], [ %.0129, %233 ], [ %.0129, %223 ], [ %.0129, %222 ], [ %.0129, %212 ], [ %.0129, %202 ], [ %.0129, %199 ], [ %.0129, %196 ], [ %.0129, %194 ], [ %.0129, %182 ], [ %.0129, %179 ], [ %.0129, %172 ], [ %.0129, %170 ], [ %.0129, %169 ], [ %.0129, %156 ], [ %.0129, %146 ], [ %.0129, %144 ], [ %.0129, %130 ], [ %.0129, %120 ], [ %.0129, %119 ], [ %.0129, %118 ], [ %.0129, %117 ], [ %.0129, %107 ], [ %.0129, %97 ], [ %.0129, %96 ], [ %.neg151, %86 ], [ %.0129, %76 ], [ %.0129, %71 ], [ %.0129, %68 ], [ 0, %67 ], [ %.0129, %64 ], [ %.0129, %56 ], [ %.0129, %54 ], [ %.0129, %51 ], [ %.0129, %49 ], [ %.0129, %37 ], [ %.0129, %27 ]
  %.0127.be = phi i64 [ %.0127, %26 ], [ %.0127, %407 ], [ %.0127, %406 ], [ %.0127, %399 ], [ %.0127, %398 ], [ %.0127, %397 ], [ %.0127, %396 ], [ %.0127, %392 ], [ %.0127, %391 ], [ %.0127, %390 ], [ %.0127, %389 ], [ %.0127, %388 ], [ %.0127, %381 ], [ %.0127, %370 ], [ %.0127, %360 ], [ %.0127, %359 ], [ %.0127, %349 ], [ %.0127, %339 ], [ %.0127, %337 ], [ %.0127, %325 ], [ %.0127, %322 ], [ %.0127, %316 ], [ %.0127, %314 ], [ %.0127, %313 ], [ %.0127, %297 ], [ %.0127, %287 ], [ %.0127, %286 ], [ %.0127, %276 ], [ %.0127, %266 ], [ %.0127, %258 ], [ %.0127, %247 ], [ %.0127, %245 ], [ %.0127, %233 ], [ %.0127, %223 ], [ %.0127, %222 ], [ %.0127, %212 ], [ %.0127, %202 ], [ %.0127, %199 ], [ %.0127, %196 ], [ %.0127, %194 ], [ %.0127, %182 ], [ %.0127, %179 ], [ %.0127, %172 ], [ %171, %170 ], [ %.0127, %169 ], [ %.0127, %156 ], [ %.0127, %146 ], [ %.0127, %144 ], [ %.0127, %130 ], [ %.0127, %120 ], [ 0, %119 ], [ %.0127, %118 ], [ %.0127, %117 ], [ %.0127, %107 ], [ %.0127, %97 ], [ %.0127, %96 ], [ %.0127, %86 ], [ %.0127, %76 ], [ %.0127, %71 ], [ %.0127, %68 ], [ %.0127, %67 ], [ %.0127, %64 ], [ %.0127, %56 ], [ %.0127, %54 ], [ %.0127, %51 ], [ %.0127, %49 ], [ %.0127, %37 ], [ %.0127, %27 ]
  %.0125.be = phi i64 [ %.0125, %26 ], [ %.0125, %407 ], [ %.0125, %406 ], [ %.0125, %399 ], [ %.0125, %398 ], [ %.0125, %397 ], [ %.0125, %396 ], [ %.0125, %392 ], [ %.0125, %391 ], [ %.0125, %390 ], [ %.0125, %389 ], [ %.0125, %388 ], [ %.0125, %381 ], [ %.0125, %370 ], [ %.0125, %360 ], [ %.0125, %359 ], [ %.0125, %349 ], [ %.0125, %339 ], [ %.0125, %337 ], [ %.0125, %325 ], [ %.0125, %322 ], [ %.0125, %316 ], [ %.0125, %314 ], [ %.0125, %313 ], [ %.0125, %297 ], [ %.0125, %287 ], [ %.0125, %286 ], [ %.0125, %276 ], [ %.0125, %266 ], [ %.0125, %258 ], [ %.0125, %247 ], [ %.0125, %245 ], [ %.0125, %233 ], [ %.0125, %223 ], [ %.0125, %222 ], [ %.0125, %212 ], [ %.0125, %202 ], [ %.0125, %199 ], [ %.0125, %196 ], [ %195, %194 ], [ %.0125, %182 ], [ %.0125, %179 ], [ 1, %172 ], [ %.0125, %170 ], [ %.0125, %169 ], [ %.0125, %156 ], [ %.0125, %146 ], [ %.0125, %144 ], [ %.0125, %130 ], [ %.0125, %120 ], [ %.0125, %119 ], [ %.0125, %118 ], [ %.0125, %117 ], [ %.0125, %107 ], [ %.0125, %97 ], [ %.0125, %96 ], [ %.0125, %86 ], [ %.0125, %76 ], [ %.0125, %71 ], [ %.0125, %68 ], [ %.0125, %67 ], [ %.0125, %64 ], [ %.0125, %56 ], [ %.0125, %54 ], [ %.0125, %51 ], [ %.0125, %49 ], [ %.0125, %37 ], [ %.0125, %27 ]
  %.0123.be = phi i64 [ %.0123, %26 ], [ %408, %407 ], [ %.0123, %406 ], [ %.0123, %399 ], [ %.0123, %398 ], [ %.0123, %397 ], [ %.0123, %396 ], [ %.0123, %392 ], [ %.0123, %391 ], [ %.0123, %390 ], [ %.0123, %389 ], [ %.0123, %388 ], [ %.0123, %381 ], [ %371, %370 ], [ %.0123, %360 ], [ %.0123, %359 ], [ %.0123, %349 ], [ %.0123, %339 ], [ %.0123, %337 ], [ %.0123, %325 ], [ %.0123, %322 ], [ %.0123, %316 ], [ %.0123, %314 ], [ %.0123, %313 ], [ %.0123, %297 ], [ %.0123, %287 ], [ %.0123, %286 ], [ %.0123, %276 ], [ %.0123, %266 ], [ %.0123, %258 ], [ %.0123, %247 ], [ %.0123, %245 ], [ %.0123, %233 ], [ %.0123, %223 ], [ %.0123, %222 ], [ %.0123, %212 ], [ %.0123, %202 ], [ %.0123, %199 ], [ %198, %196 ], [ %.0123, %194 ], [ %.0123, %182 ], [ %.0123, %179 ], [ %.0123, %172 ], [ %.0123, %170 ], [ %.0123, %169 ], [ %.0123, %156 ], [ %.0123, %146 ], [ %.0123, %144 ], [ %.0123, %130 ], [ %.0123, %120 ], [ %.0123, %119 ], [ %.0123, %118 ], [ %.0123, %117 ], [ %.0123, %107 ], [ %.0123, %97 ], [ %.0123, %96 ], [ %.0123, %86 ], [ %.0123, %76 ], [ %.0123, %71 ], [ %.0123, %68 ], [ %.0123, %67 ], [ %.0123, %64 ], [ %.0123, %56 ], [ %.0123, %54 ], [ %.0123, %51 ], [ %.0123, %49 ], [ %.0123, %37 ], [ %.0123, %27 ]
  %.0121.be = phi i64 [ %.0121, %26 ], [ %.0121, %407 ], [ %.0121, %406 ], [ %.0121, %399 ], [ %.0121, %398 ], [ %.0121, %397 ], [ 0, %396 ], [ %.0121, %392 ], [ %.0121, %391 ], [ %.0121, %390 ], [ %.0121, %389 ], [ %.0121, %388 ], [ %.0121, %381 ], [ %.0121, %370 ], [ %.0121, %360 ], [ %.0121, %359 ], [ %.0121, %349 ], [ %.0121, %339 ], [ %.0121, %337 ], [ %.0121, %325 ], [ %.0121, %322 ], [ %.0121, %316 ], [ %315, %314 ], [ %.0121, %313 ], [ %.0121, %297 ], [ %.0121, %287 ], [ %.0121, %286 ], [ %.0121, %276 ], [ %.0121, %266 ], [ %.0121, %258 ], [ %.0121, %247 ], [ %.0121, %245 ], [ %.0121, %233 ], [ %.0121, %223 ], [ %.0121, %222 ], [ 0, %212 ], [ %.0121, %202 ], [ %.0121, %199 ], [ %.0121, %196 ], [ %.0121, %194 ], [ %.0121, %182 ], [ %.0121, %179 ], [ %.0121, %172 ], [ %.0121, %170 ], [ %.0121, %169 ], [ %.0121, %156 ], [ %.0121, %146 ], [ %.0121, %144 ], [ %.0121, %130 ], [ %.0121, %120 ], [ %.0121, %119 ], [ %.0121, %118 ], [ %.0121, %117 ], [ %.0121, %107 ], [ %.0121, %97 ], [ %.0121, %96 ], [ %.0121, %86 ], [ %.0121, %76 ], [ %.0121, %71 ], [ %.0121, %68 ], [ %.0121, %67 ], [ %.0121, %64 ], [ %.0121, %56 ], [ %.0121, %54 ], [ %.0121, %51 ], [ %.0121, %49 ], [ %.0121, %37 ], [ %.0121, %27 ]
  %.0119.be = phi i64 [ %.0119, %26 ], [ %.0119, %407 ], [ %.0119, %406 ], [ %.0119, %399 ], [ %.0119, %398 ], [ %.0119, %397 ], [ %.0119, %396 ], [ %.0119, %392 ], [ %.0119, %391 ], [ %.0119, %390 ], [ %.0119, %389 ], [ %.0119, %388 ], [ %.0119, %381 ], [ %.0119, %370 ], [ %.0119, %360 ], [ %.0119, %359 ], [ %.0119, %349 ], [ %.0119, %339 ], [ %338, %337 ], [ %.0119, %325 ], [ %.0119, %322 ], [ 1, %316 ], [ %.0119, %314 ], [ %.0119, %313 ], [ %.0119, %297 ], [ %.0119, %287 ], [ %.0119, %286 ], [ %.0119, %276 ], [ %.0119, %266 ], [ %.0119, %258 ], [ %.0119, %247 ], [ %.0119, %245 ], [ %.0119, %233 ], [ %.0119, %223 ], [ %.0119, %222 ], [ %.0119, %212 ], [ %.0119, %202 ], [ %.0119, %199 ], [ %.0119, %196 ], [ %.0119, %194 ], [ %.0119, %182 ], [ %.0119, %179 ], [ %.0119, %172 ], [ %.0119, %170 ], [ %.0119, %169 ], [ %.0119, %156 ], [ %.0119, %146 ], [ %.0119, %144 ], [ %.0119, %130 ], [ %.0119, %120 ], [ %.0119, %119 ], [ %.0119, %118 ], [ %.0119, %117 ], [ %.0119, %107 ], [ %.0119, %97 ], [ %.0119, %96 ], [ %.0119, %86 ], [ %.0119, %76 ], [ %.0119, %71 ], [ %.0119, %68 ], [ %.0119, %67 ], [ %.0119, %64 ], [ %.0119, %56 ], [ %.0119, %54 ], [ %.0119, %51 ], [ %.0119, %49 ], [ %.0119, %37 ], [ %.0119, %27 ]
  %.0117.be = phi i32 [ %.0117, %26 ], [ -800337192, %407 ], [ -1538877258, %406 ], [ -873364492, %399 ], [ -1973778371, %398 ], [ -1105029419, %397 ], [ -1963622493, %396 ], [ -1376744961, %392 ], [ -1663974503, %391 ], [ -439821292, %390 ], [ 1610631506, %389 ], [ 1584734939, %388 ], [ -139468345, %381 ], [ %380, %370 ], [ %369, %360 ], [ 1305748764, %359 ], [ %358, %349 ], [ %348, %339 ], [ -1188941733, %337 ], [ 625644857, %325 ], [ %324, %322 ], [ -1188941733, %316 ], [ 784590956, %314 ], [ -587188721, %313 ], [ %312, %297 ], [ %296, %287 ], [ -686546705, %286 ], [ %285, %276 ], [ %275, %266 ], [ -686546705, %258 ], [ %257, %247 ], [ %246, %245 ], [ %244, %233 ], [ %232, %223 ], [ 784590956, %222 ], [ %221, %212 ], [ %211, %202 ], [ %201, %199 ], [ -139468345, %196 ], [ 813672613, %194 ], [ -1069749857, %182 ], [ %181, %179 ], [ 813672613, %172 ], [ 1338458500, %170 ], [ 270674831, %169 ], [ %168, %156 ], [ %155, %146 ], [ %145, %144 ], [ %143, %130 ], [ %129, %120 ], [ 1338458500, %119 ], [ 646399943, %118 ], [ -1961075021, %117 ], [ %116, %107 ], [ %106, %97 ], [ 1518345583, %96 ], [ %95, %86 ], [ %85, %76 ], [ 555062005, %71 ], [ %70, %68 ], [ 1518345583, %67 ], [ %66, %64 ], [ 646399943, %56 ], [ 1155454728, %54 ], [ -470194567, %51 ], [ %50, %49 ], [ %48, %37 ], [ %36, %27 ]
  %.0.be = phi i64 [ %.0, %26 ], [ %.0, %407 ], [ %.0, %406 ], [ %.0, %399 ], [ %.0, %398 ], [ %.0, %397 ], [ %.0, %396 ], [ %.0, %392 ], [ %.0, %391 ], [ %.0, %390 ], [ %.0, %389 ], [ %.0, %388 ], [ %.0, %381 ], [ %.0, %370 ], [ %.0, %360 ], [ %.0, %359 ], [ %.0, %349 ], [ %.0, %339 ], [ %.0, %337 ], [ %.0, %325 ], [ %.0, %322 ], [ %.0, %316 ], [ %.0, %314 ], [ %.0, %313 ], [ %.0, %297 ], [ %.0, %287 ], [ 0, %286 ], [ %.0, %276 ], [ %.0, %266 ], [ %265, %258 ], [ %.0, %247 ], [ %.0, %245 ], [ %.0, %233 ], [ %.0, %223 ], [ %.0, %222 ], [ %.0, %212 ], [ %.0, %202 ], [ %.0, %199 ], [ %.0, %196 ], [ %.0, %194 ], [ %.0, %182 ], [ %.0, %179 ], [ %.0, %172 ], [ %.0, %170 ], [ %.0, %169 ], [ %.0, %156 ], [ %.0, %146 ], [ %.0, %144 ], [ %.0, %130 ], [ %.0, %120 ], [ %.0, %119 ], [ %.0, %118 ], [ %.0, %117 ], [ %.0, %107 ], [ %.0, %97 ], [ %.0, %96 ], [ %.0, %86 ], [ %.0, %76 ], [ %.0, %71 ], [ %.0, %68 ], [ %.0, %67 ], [ %.0, %64 ], [ %.0, %56 ], [ %.0, %54 ], [ %.0, %51 ], [ %.0, %49 ], [ %.0, %37 ], [ %.0, %27 ]
  br label %26

27:                                               ; preds = %26
  %28 = load i32, i32* @x.1, align 4
  %29 = load i32, i32* @y.2, align 4
  %30 = add i32 %28, -1
  %31 = mul i32 %30, %28
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %34, %33
  %36 = select i1 %35, i32 1584734939, i32 -619539147
  br label %.backedge

37:                                               ; preds = %26
  %38 = load i64, i64* %10, align 8
  %39 = icmp sle i64 %.0133, %38
  store i1 %39, i1* %9, align 1
  %40 = load i32, i32* @x.1, align 4
  %41 = load i32, i32* @y.2, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 1195088019, i32 -619539147
  br label %.backedge

49:                                               ; preds = %26
  %.0..0..0.53 = load volatile i1, i1* %9, align 1
  %50 = select i1 %.0..0..0.53, i32 1111970201, i32 930705823
  br label %.backedge

51:                                               ; preds = %26
  %52 = getelementptr inbounds i64, i64* %25, i64 %.0133
  %53 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %52)
  br label %.backedge

54:                                               ; preds = %26
  %55 = add i64 %.0133, 1
  br label %.backedge

56:                                               ; preds = %26
  %57 = load i64, i64* %10, align 8
  %58 = add i64 %57, 1
  %59 = load i64, i64* %11, align 8
  %.neg156 = add i64 %59, 1
  store i64 %.neg156, i64* %8, align 8
  %.0..0..0.54 = load volatile i64, i64* %8, align 8
  %60 = mul nuw i64 %.0..0..0.54, %58
  %61 = alloca i64, i64 %60, align 16
  store i64* %61, i64** %7, align 8
  store i64 %.neg156, i64* %6, align 8
  %.0..0..0.87 = load volatile i64, i64* %6, align 8
  %62 = mul nuw i64 %.0..0..0.87, %58
  %63 = alloca i64, i64 %62, align 16
  store i64* %63, i64** %5, align 8
  br label %.backedge

64:                                               ; preds = %26
  %65 = load i64, i64* %10, align 8
  %.not155 = icmp sgt i64 %.0131, %65
  %66 = select i1 %.not155, i32 -1357243735, i32 1980354392
  br label %.backedge

67:                                               ; preds = %26
  br label %.backedge

68:                                               ; preds = %26
  %69 = load i64, i64* %11, align 8
  %.not154 = icmp sgt i64 %.0129, %69
  %70 = select i1 %.not154, i32 1760691050, i32 507426737
  br label %.backedge

71:                                               ; preds = %26
  %.0..0..0.88 = load volatile i64, i64* %6, align 8
  %72 = mul nsw i64 %.0..0..0.88, %.0131
  %.0..0..0.97 = load volatile i64*, i64** %5, align 8
  %.idx152 = add nsw i64 %72, %.0129
  %73 = getelementptr inbounds i64, i64* %.0..0..0.97, i64 %.idx152
  store i64 0, i64* %73, align 8
  %.0..0..0.55 = load volatile i64, i64* %8, align 8
  %74 = mul nsw i64 %.0..0..0.55, %.0131
  %.0..0..0.77 = load volatile i64*, i64** %7, align 8
  %.idx153 = add nsw i64 %74, %.0129
  %75 = getelementptr inbounds i64, i64* %.0..0..0.77, i64 %.idx153
  store i64 0, i64* %75, align 8
  br label %.backedge

76:                                               ; preds = %26
  %77 = load i32, i32* @x.1, align 4
  %78 = load i32, i32* @y.2, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 1610631506, i32 -273772366
  br label %.backedge

86:                                               ; preds = %26
  %.neg151 = add i64 %.0129, 1
  %87 = load i32, i32* @x.1, align 4
  %88 = load i32, i32* @y.2, align 4
  %89 = add i32 %87, -1
  %90 = mul i32 %89, %87
  %91 = and i32 %90, 1
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %93, %92
  %95 = select i1 %94, i32 1872687471, i32 -273772366
  br label %.backedge

96:                                               ; preds = %26
  br label %.backedge

97:                                               ; preds = %26
  %98 = load i32, i32* @x.1, align 4
  %99 = load i32, i32* @y.2, align 4
  %100 = add i32 %98, -1
  %101 = mul i32 %100, %98
  %102 = and i32 %101, 1
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %104, %103
  %106 = select i1 %105, i32 -439821292, i32 -1932576539
  br label %.backedge

107:                                              ; preds = %26
  %108 = load i32, i32* @x.1, align 4
  %109 = load i32, i32* @y.2, align 4
  %110 = add i32 %108, -1
  %111 = mul i32 %110, %108
  %112 = and i32 %111, 1
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %114, %113
  %116 = select i1 %115, i32 -1109810486, i32 -1932576539
  br label %.backedge

117:                                              ; preds = %26
  br label %.backedge

118:                                              ; preds = %26
  %.neg150 = add i64 %.0131, 1
  br label %.backedge

119:                                              ; preds = %26
  br label %.backedge

120:                                              ; preds = %26
  %121 = load i32, i32* @x.1, align 4
  %122 = load i32, i32* @y.2, align 4
  %123 = add i32 %121, -1
  %124 = mul i32 %123, %121
  %125 = and i32 %124, 1
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %127, %126
  %129 = select i1 %128, i32 -1663974503, i32 262455782
  br label %.backedge

130:                                              ; preds = %26
  %131 = load i64, i64* %10, align 8
  %132 = getelementptr inbounds i64, i64* %25, i64 %131
  %133 = load i64, i64* %132, align 8
  %134 = icmp sle i64 %.0127, %133
  store i1 %134, i1* %4, align 1
  %135 = load i32, i32* @x.1, align 4
  %136 = load i32, i32* @y.2, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 -755808767, i32 262455782
  br label %.backedge

144:                                              ; preds = %26
  %.0..0..0.106 = load volatile i1, i1* %4, align 1
  %145 = select i1 %.0..0..0.106, i32 -931296894, i32 1495636191
  br label %.backedge

146:                                              ; preds = %26
  %147 = load i32, i32* @x.1, align 4
  %148 = load i32, i32* @y.2, align 4
  %149 = add i32 %147, -1
  %150 = mul i32 %149, %147
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 -1376744961, i32 233717551
  br label %.backedge

156:                                              ; preds = %26
  %157 = load i64, i64* %10, align 8
  %.0..0..0.56 = load volatile i64, i64* %8, align 8
  %158 = mul nsw i64 %.0..0..0.56, %157
  %.0..0..0.78 = load volatile i64*, i64** %7, align 8
  %.idx149 = add nsw i64 %158, %.0127
  %159 = getelementptr inbounds i64, i64* %.0..0..0.78, i64 %.idx149
  store i64 1, i64* %159, align 8
  %160 = load i32, i32* @x.1, align 4
  %161 = load i32, i32* @y.2, align 4
  %162 = add i32 %160, -1
  %163 = mul i32 %162, %160
  %164 = and i32 %163, 1
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %166, %165
  %168 = select i1 %167, i32 56920088, i32 233717551
  br label %.backedge

169:                                              ; preds = %26
  br label %.backedge

170:                                              ; preds = %26
  %171 = add i64 %.0127, 1
  br label %.backedge

172:                                              ; preds = %26
  %173 = load i64, i64* %10, align 8
  %.0..0..0.57 = load volatile i64, i64* %8, align 8
  %174 = mul nsw i64 %.0..0..0.57, %173
  %.0..0..0.79 = load volatile i64*, i64** %7, align 8
  %175 = getelementptr inbounds i64, i64* %.0..0..0.79, i64 %174
  %176 = load i64, i64* %175, align 8
  %.0..0..0.89 = load volatile i64, i64* %6, align 8
  %177 = mul nsw i64 %.0..0..0.89, %173
  %.0..0..0.98 = load volatile i64*, i64** %5, align 8
  %178 = getelementptr inbounds i64, i64* %.0..0..0.98, i64 %177
  store i64 %176, i64* %178, align 8
  br label %.backedge

179:                                              ; preds = %26
  %180 = load i64, i64* %11, align 8
  %.not148 = icmp sgt i64 %.0125, %180
  %181 = select i1 %.not148, i32 454540510, i32 1454367552
  br label %.backedge

182:                                              ; preds = %26
  %183 = load i64, i64* %10, align 8
  %.0..0..0.58 = load volatile i64, i64* %8, align 8
  %184 = mul nsw i64 %.0..0..0.58, %183
  %.0..0..0.80 = load volatile i64*, i64** %7, align 8
  %.idx145 = add nsw i64 %184, %.0125
  %185 = getelementptr inbounds i64, i64* %.0..0..0.80, i64 %.idx145
  %186 = load i64, i64* %185, align 8
  %.0..0..0.90 = load volatile i64, i64* %6, align 8
  %187 = mul nsw i64 %.0..0..0.90, %183
  %.0..0..0.99 = load volatile i64*, i64** %5, align 8
  %188 = add i64 %.0125, -1
  %.idx146 = add nsw i64 %188, %187
  %189 = getelementptr inbounds i64, i64* %.0..0..0.99, i64 %.idx146
  %190 = load i64, i64* %189, align 8
  %191 = add i64 %190, %186
  %.0..0..0.91 = load volatile i64, i64* %6, align 8
  %192 = mul nsw i64 %.0..0..0.91, %183
  %.0..0..0.100 = load volatile i64*, i64** %5, align 8
  %.idx147 = add nsw i64 %192, %.0125
  %193 = getelementptr inbounds i64, i64* %.0..0..0.100, i64 %.idx147
  store i64 %191, i64* %193, align 8
  br label %.backedge

194:                                              ; preds = %26
  %195 = add i64 %.0125, 1
  br label %.backedge

196:                                              ; preds = %26
  %197 = load i64, i64* %10, align 8
  %198 = add i64 %197, -1
  br label %.backedge

199:                                              ; preds = %26
  %200 = icmp sgt i64 %.0123, 0
  %201 = select i1 %200, i32 51547410, i32 1992163138
  br label %.backedge

202:                                              ; preds = %26
  %203 = load i32, i32* @x.1, align 4
  %204 = load i32, i32* @y.2, align 4
  %205 = add i32 %203, -1
  %206 = mul i32 %205, %203
  %207 = and i32 %206, 1
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %209, %208
  %211 = select i1 %210, i32 -1963622493, i32 1863586672
  br label %.backedge

212:                                              ; preds = %26
  %213 = load i32, i32* @x.1, align 4
  %214 = load i32, i32* @y.2, align 4
  %215 = add i32 %213, -1
  %216 = mul i32 %215, %213
  %217 = and i32 %216, 1
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %219, %218
  %221 = select i1 %220, i32 1405412434, i32 1863586672
  br label %.backedge

222:                                              ; preds = %26
  br label %.backedge

223:                                              ; preds = %26
  %224 = load i32, i32* @x.1, align 4
  %225 = load i32, i32* @y.2, align 4
  %226 = add i32 %224, -1
  %227 = mul i32 %226, %224
  %228 = and i32 %227, 1
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %230, %229
  %232 = select i1 %231, i32 -1105029419, i32 1874825257
  br label %.backedge

233:                                              ; preds = %26
  %234 = load i64, i64* %11, align 8
  %235 = icmp sle i64 %.0121, %234
  store i1 %235, i1* %3, align 1
  %236 = load i32, i32* @x.1, align 4
  %237 = load i32, i32* @y.2, align 4
  %238 = add i32 %236, -1
  %239 = mul i32 %238, %236
  %240 = and i32 %239, 1
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %242, %241
  %244 = select i1 %243, i32 -292451106, i32 1874825257
  br label %.backedge

245:                                              ; preds = %26
  %.0..0..0.107 = load volatile i1, i1* %3, align 1
  %246 = select i1 %.0..0..0.107, i32 -718466651, i32 -179323177
  br label %.backedge

247:                                              ; preds = %26
  %248 = add i64 %.0123, 1
  %.0..0..0.92 = load volatile i64, i64* %6, align 8
  %249 = mul nsw i64 %.0..0..0.92, %248
  %.0..0..0.101 = load volatile i64*, i64** %5, align 8
  %.idx144 = add nsw i64 %249, %.0121
  %250 = getelementptr inbounds i64, i64* %.0..0..0.101, i64 %.idx144
  %251 = load i64, i64* %250, align 8
  store i64 %251, i64* %2, align 8
  %252 = getelementptr inbounds i64, i64* %25, i64 %.0123
  %253 = load i64, i64* %252, align 8
  %254 = xor i64 %253, -1
  %255 = add i64 %.0121, %254
  %256 = icmp sgt i64 %255, -1
  %257 = select i1 %256, i32 574213108, i32 1960311677
  br label %.backedge

258:                                              ; preds = %26
  %.neg142 = add i64 %.0123, 1
  %.0..0..0.93 = load volatile i64, i64* %6, align 8
  %259 = mul nsw i64 %.0..0..0.93, %.neg142
  %.0..0..0.102 = load volatile i64*, i64** %5, align 8
  %260 = getelementptr inbounds i64, i64* %25, i64 %.0123
  %261 = load i64, i64* %260, align 8
  %262 = add i64 %.0121, -1
  %263 = add i64 %262, %259
  %.idx143 = sub i64 %263, %261
  %264 = getelementptr inbounds i64, i64* %.0..0..0.102, i64 %.idx143
  %265 = load i64, i64* %264, align 8
  br label %.backedge

266:                                              ; preds = %26
  %267 = load i32, i32* @x.1, align 4
  %268 = load i32, i32* @y.2, align 4
  %269 = add i32 %267, -1
  %270 = mul i32 %269, %267
  %271 = and i32 %270, 1
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %273, %272
  %275 = select i1 %274, i32 -1973778371, i32 -160737032
  br label %.backedge

276:                                              ; preds = %26
  %277 = load i32, i32* @x.1, align 4
  %278 = load i32, i32* @y.2, align 4
  %279 = add i32 %277, -1
  %280 = mul i32 %279, %277
  %281 = and i32 %280, 1
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %283, %282
  %285 = select i1 %284, i32 1559709514, i32 -160737032
  br label %.backedge

286:                                              ; preds = %26
  br label %.backedge

287:                                              ; preds = %26
  store i64 %.0, i64* %1, align 8
  %288 = load i32, i32* @x.1, align 4
  %289 = load i32, i32* @y.2, align 4
  %290 = add i32 %288, -1
  %291 = mul i32 %290, %288
  %292 = and i32 %291, 1
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %294, %293
  %296 = select i1 %295, i32 -873364492, i32 579937735
  br label %.backedge

297:                                              ; preds = %26
  %.0..0..0.108 = load volatile i64, i64* %2, align 8
  %.0..0..0.112 = load volatile i64, i64* %1, align 8
  %298 = sub i64 %.0..0..0.108, %.0..0..0.112
  %299 = srem i64 %298, 1000000007
  %300 = trunc i64 %299 to i32
  %.lhs.trunc = add nsw i32 %300, 1000000007
  %301 = urem i32 %.lhs.trunc, 1000000007
  %.zext = zext i32 %301 to i64
  %.0..0..0.59 = load volatile i64, i64* %8, align 8
  %302 = mul nsw i64 %.0..0..0.59, %.0123
  %.0..0..0.81 = load volatile i64*, i64** %7, align 8
  %.idx141 = add nsw i64 %302, %.0121
  %303 = getelementptr inbounds i64, i64* %.0..0..0.81, i64 %.idx141
  store i64 %.zext, i64* %303, align 8
  %304 = load i32, i32* @x.1, align 4
  %305 = load i32, i32* @y.2, align 4
  %306 = add i32 %304, -1
  %307 = mul i32 %306, %304
  %308 = and i32 %307, 1
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %310, %309
  %312 = select i1 %311, i32 -1137048852, i32 579937735
  br label %.backedge

313:                                              ; preds = %26
  br label %.backedge

314:                                              ; preds = %26
  %315 = add i64 %.0121, 1
  br label %.backedge

316:                                              ; preds = %26
  %.0..0..0.60 = load volatile i64, i64* %8, align 8
  %317 = mul nsw i64 %.0..0..0.60, %.0123
  %.0..0..0.82 = load volatile i64*, i64** %7, align 8
  %318 = getelementptr inbounds i64, i64* %.0..0..0.82, i64 %317
  %319 = load i64, i64* %318, align 8
  %.0..0..0.94 = load volatile i64, i64* %6, align 8
  %320 = mul nsw i64 %.0..0..0.94, %.0123
  %.0..0..0.103 = load volatile i64*, i64** %5, align 8
  %321 = getelementptr inbounds i64, i64* %.0..0..0.103, i64 %320
  store i64 %319, i64* %321, align 8
  br label %.backedge

322:                                              ; preds = %26
  %323 = load i64, i64* %11, align 8
  %.not = icmp sgt i64 %.0119, %323
  %324 = select i1 %.not, i32 2081184720, i32 236743341
  br label %.backedge

325:                                              ; preds = %26
  %.0..0..0.61 = load volatile i64, i64* %8, align 8
  %326 = mul nsw i64 %.0..0..0.61, %.0123
  %.0..0..0.83 = load volatile i64*, i64** %7, align 8
  %.idx138 = add nsw i64 %326, %.0119
  %327 = getelementptr inbounds i64, i64* %.0..0..0.83, i64 %.idx138
  %328 = load i64, i64* %327, align 8
  %.0..0..0.95 = load volatile i64, i64* %6, align 8
  %329 = mul nsw i64 %.0..0..0.95, %.0123
  %.0..0..0.104 = load volatile i64*, i64** %5, align 8
  %330 = add i64 %.0119, -1
  %.idx139 = add nsw i64 %330, %329
  %331 = getelementptr inbounds i64, i64* %.0..0..0.104, i64 %.idx139
  %332 = load i64, i64* %331, align 8
  %333 = add i64 %332, %328
  %334 = srem i64 %333, 1000000007
  %.0..0..0.96 = load volatile i64, i64* %6, align 8
  %335 = mul nsw i64 %.0..0..0.96, %.0123
  %.0..0..0.105 = load volatile i64*, i64** %5, align 8
  %.idx140 = add nsw i64 %335, %.0119
  %336 = getelementptr inbounds i64, i64* %.0..0..0.105, i64 %.idx140
  store i64 %334, i64* %336, align 8
  br label %.backedge

337:                                              ; preds = %26
  %338 = add i64 %.0119, 1
  br label %.backedge

339:                                              ; preds = %26
  %340 = load i32, i32* @x.1, align 4
  %341 = load i32, i32* @y.2, align 4
  %342 = add i32 %340, -1
  %343 = mul i32 %342, %340
  %344 = and i32 %343, 1
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %346, %345
  %348 = select i1 %347, i32 -1538877258, i32 -221588081
  br label %.backedge

349:                                              ; preds = %26
  %350 = load i32, i32* @x.1, align 4
  %351 = load i32, i32* @y.2, align 4
  %352 = add i32 %350, -1
  %353 = mul i32 %352, %350
  %354 = and i32 %353, 1
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %356, %355
  %358 = select i1 %357, i32 -476687508, i32 -221588081
  br label %.backedge

359:                                              ; preds = %26
  br label %.backedge

360:                                              ; preds = %26
  %361 = load i32, i32* @x.1, align 4
  %362 = load i32, i32* @y.2, align 4
  %363 = add i32 %361, -1
  %364 = mul i32 %363, %361
  %365 = and i32 %364, 1
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %367, %366
  %369 = select i1 %368, i32 -800337192, i32 1676554577
  br label %.backedge

370:                                              ; preds = %26
  %371 = add i64 %.0123, -1
  %372 = load i32, i32* @x.1, align 4
  %373 = load i32, i32* @y.2, align 4
  %374 = add i32 %372, -1
  %375 = mul i32 %374, %372
  %376 = and i32 %375, 1
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %378, %377
  %380 = select i1 %379, i32 1367310862, i32 1676554577
  br label %.backedge

381:                                              ; preds = %26
  br label %.backedge

382:                                              ; preds = %26
  %.0..0..0.62 = load volatile i64, i64* %8, align 8
  %.0..0..0.84 = load volatile i64*, i64** %7, align 8
  %383 = load i64, i64* %11, align 8
  %.idx137 = add nsw i64 %383, %.0..0..0.62
  %384 = getelementptr inbounds i64, i64* %.0..0..0.84, i64 %.idx137
  %385 = load i64, i64* %384, align 8
  %386 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %385)
  %387 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %386, i8 signext 10)
  ret i32 0

388:                                              ; preds = %26
  br label %.backedge

389:                                              ; preds = %26
  %.neg136 = add i64 %.0129, 1
  br label %.backedge

390:                                              ; preds = %26
  br label %.backedge

391:                                              ; preds = %26
  br label %.backedge

392:                                              ; preds = %26
  %393 = load i64, i64* %10, align 8
  %.0..0..0.63 = load volatile i64, i64* %8, align 8
  %.0..0..0.64 = load volatile i64, i64* %8, align 8
  %.0..0..0.65 = load volatile i64, i64* %8, align 8
  %.0..0..0.66 = load volatile i64, i64* %8, align 8
  %.0..0..0.67 = load volatile i64, i64* %8, align 8
  %.0..0..0.68 = load volatile i64, i64* %8, align 8
  %.0..0..0.69 = load volatile i64, i64* %8, align 8
  %.0..0..0.70 = load volatile i64, i64* %8, align 8
  %.0..0..0.71 = load volatile i64, i64* %8, align 8
  %.0..0..0.72 = load volatile i64, i64* %8, align 8
  %.0..0..0.73 = load volatile i64, i64* %8, align 8
  %.0..0..0.74 = load volatile i64, i64* %8, align 8
  %394 = mul nsw i64 %.0..0..0.74, %393
  %.0..0..0.85 = load volatile i64*, i64** %7, align 8
  %.idx135 = add nsw i64 %394, %.0127
  %395 = getelementptr inbounds i64, i64* %.0..0..0.85, i64 %.idx135
  store i64 1, i64* %395, align 8
  br label %.backedge

396:                                              ; preds = %26
  br label %.backedge

397:                                              ; preds = %26
  br label %.backedge

398:                                              ; preds = %26
  br label %.backedge

399:                                              ; preds = %26
  %.0..0..0.109 = load volatile i64, i64* %2, align 8
  %.0..0..0.113 = load volatile i64, i64* %1, align 8
  %.0..0..0.110 = load volatile i64, i64* %2, align 8
  %.0..0..0.114 = load volatile i64, i64* %1, align 8
  %.0..0..0.115 = load volatile i64, i64* %1, align 8
  %.0..0..0.111 = load volatile i64, i64* %2, align 8
  %.0..0..0.116 = load volatile i64, i64* %1, align 8
  %400 = sub i64 %.0..0..0.111, %.0..0..0.116
  %401 = srem i64 %400, 1000000007
  %402 = trunc i64 %401 to i32
  %.lhs.trunc157 = add nsw i32 %402, 1000000007
  %403 = urem i32 %.lhs.trunc157, 1000000007
  %.zext158 = zext i32 %403 to i64
  %.0..0..0.75 = load volatile i64, i64* %8, align 8
  %.0..0..0.76 = load volatile i64, i64* %8, align 8
  %404 = mul nsw i64 %.0..0..0.76, %.0123
  %.0..0..0.86 = load volatile i64*, i64** %7, align 8
  %.idx = add nsw i64 %404, %.0121
  %405 = getelementptr inbounds i64, i64* %.0..0..0.86, i64 %.idx
  store i64 %.zext158, i64* %405, align 8
  br label %.backedge

406:                                              ; preds = %26
  br label %.backedge

407:                                              ; preds = %26
  %408 = add i64 %.0123, -1
  br label %.backedge
}

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @clock() local_unnamed_addr #2

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* dereferenceable(272), i8 signext) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s920473720.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
