; ModuleID = 'build_ollvm/programs/p02840/s259732828.ll'
source_filename = "Project_CodeNet_C++1400/p02840/s259732828.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt5__gcdIxET_S0_S0_ = comdat any

$_ZSt3absx = comdat any

$_ZSt3minIxERKT_S2_S2_ = comdat any

$_ZSt3maxIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@maeA = local_unnamed_addr global [200001 x i64] zeroinitializer, align 16
@maeB = local_unnamed_addr global [200001 x i64] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s259732828.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i64, align 8
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i64, align 8
  %6 = alloca i1, align 1
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %8)
  %19 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %18, i64* nonnull dereferenceable(8) %9)
  %20 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %19, i64* nonnull dereferenceable(8) %10)
  %21 = load i64, i64* %10, align 8
  store i64 %21, i64* %7, align 8
  br label %22

22:                                               ; preds = %.backedge, %0
  %.089 = phi i64 [ undef, %0 ], [ %.089.be, %.backedge ]
  %.087 = phi i32 [ undef, %0 ], [ %.087.be, %.backedge ]
  %.085 = phi i64 [ undef, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i64 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i64 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i64 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i32 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ -818653693, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i64 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.0 = phi i64 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.073, label %.backedge [
    i32 -818653693, label %23
    i32 -1753900554, label %26
    i32 -1582546008, label %36
    i32 221665428, label %48
    i32 -1676452230, label %50
    i32 -263250478, label %51
    i32 200835697, label %61
    i32 1784384578, label %74
    i32 -764072951, label %75
    i32 -1521120832, label %76
    i32 76338798, label %80
    i32 692060302, label %90
    i32 1683523879, label %104
    i32 693082960, label %105
    i32 -1378374764, label %108
    i32 -342018178, label %115
    i32 1480841029, label %116
    i32 565434803, label %119
    i32 1967542217, label %129
    i32 1574182264, label %144
    i32 1864479171, label %145
    i32 -676094097, label %146
    i32 1876802912, label %156
    i32 -1622105573, label %166
    i32 -1248928120, label %167
    i32 -1952287790, label %177
    i32 40575047, label %193
    i32 -56321118, label %195
    i32 -993085672, label %208
    i32 59925696, label %210
    i32 -595653697, label %217
    i32 303153888, label %221
    i32 981113699, label %228
    i32 -646823972, label %234
    i32 1769540458, label %245
    i32 558936223, label %251
    i32 862915681, label %261
    i32 -1265262035, label %276
    i32 -1840300071, label %278
    i32 1063433239, label %279
    i32 -207234990, label %285
    i32 1823119316, label %295
    i32 -457653819, label %315
    i32 -1475195281, label %316
    i32 1621181668, label %327
    i32 10158380, label %337
    i32 -785664247, label %347
    i32 -440974233, label %348
    i32 -1459999299, label %358
    i32 -608068567, label %368
    i32 -868053232, label %369
    i32 1638673406, label %379
    i32 -2047919800, label %404
    i32 1561448401, label %406
    i32 101975103, label %408
    i32 -1063473522, label %409
    i32 -1500135297, label %419
    i32 -963171840, label %430
    i32 174410388, label %431
    i32 -1184817260, label %433
    i32 851678853, label %434
    i32 -379996295, label %435
    i32 1830436235, label %439
    i32 1733776674, label %444
    i32 -1956215964, label %449
    i32 -472364038, label %450
    i32 -276978007, label %454
    i32 2041065616, label %455
    i32 1998304375, label %464
    i32 411818263, label %465
    i32 787017425, label %466
    i32 2082325622, label %478
  ]

.backedge:                                        ; preds = %22, %478, %466, %465, %464, %455, %454, %450, %449, %444, %439, %435, %434, %431, %430, %419, %409, %408, %406, %404, %379, %369, %368, %358, %348, %347, %337, %327, %316, %315, %295, %285, %279, %278, %276, %261, %251, %245, %234, %228, %221, %217, %210, %208, %195, %193, %177, %167, %166, %156, %146, %145, %144, %129, %119, %116, %115, %108, %105, %104, %90, %80, %76, %75, %74, %61, %51, %50, %48, %36, %26, %23
  %.089.be = phi i64 [ %.089, %22 ], [ %.089, %478 ], [ %.089, %466 ], [ %.089, %465 ], [ %.089, %464 ], [ %.089, %455 ], [ %.089, %454 ], [ %.089, %450 ], [ %.0..0..0.70, %449 ], [ %.089, %444 ], [ %.089, %439 ], [ %.089, %435 ], [ %.089, %434 ], [ %.089, %431 ], [ %.089, %430 ], [ %.089, %419 ], [ %.089, %409 ], [ %.089, %408 ], [ %.089, %406 ], [ %.089, %404 ], [ %.089, %379 ], [ %.089, %369 ], [ %.089, %368 ], [ %.089, %358 ], [ %.089, %348 ], [ %.089, %347 ], [ %.089, %337 ], [ %.089, %327 ], [ %.089, %316 ], [ %.089, %315 ], [ %.089, %295 ], [ %.089, %285 ], [ %.089, %279 ], [ %.089, %278 ], [ %.089, %276 ], [ %.089, %261 ], [ %.089, %251 ], [ %.089, %245 ], [ %.089, %234 ], [ %.089, %228 ], [ %.089, %221 ], [ %.089, %217 ], [ %.089, %210 ], [ %.089, %208 ], [ %.089, %195 ], [ %.089, %193 ], [ %.089, %177 ], [ %.089, %167 ], [ %.089, %166 ], [ %.0..0..0.69, %156 ], [ %.089, %146 ], [ %.089, %145 ], [ %.089, %144 ], [ %.089, %129 ], [ %.089, %119 ], [ %.089, %116 ], [ %.089, %115 ], [ %.089, %108 ], [ %.089, %105 ], [ %.089, %104 ], [ %.089, %90 ], [ %.089, %80 ], [ %.089, %76 ], [ %.089, %75 ], [ %.089, %74 ], [ %.089, %61 ], [ %.089, %51 ], [ %.089, %50 ], [ %.089, %48 ], [ %.089, %36 ], [ %.089, %26 ], [ %.089, %23 ]
  %.087.be = phi i32 [ %.087, %22 ], [ %.087, %478 ], [ %477, %466 ], [ %.087, %465 ], [ %.087, %464 ], [ %.087, %455 ], [ %.087, %454 ], [ %.087, %450 ], [ 0, %449 ], [ %.087, %444 ], [ %.087, %439 ], [ %.087, %435 ], [ %.087, %434 ], [ %.087, %431 ], [ %.087, %430 ], [ %.087, %419 ], [ %.087, %409 ], [ %.087, %408 ], [ 0, %406 ], [ %.087, %404 ], [ %391, %379 ], [ %.087, %369 ], [ %.087, %368 ], [ %.087, %358 ], [ %.087, %348 ], [ %.087, %347 ], [ %.087, %337 ], [ %.087, %327 ], [ %.087, %316 ], [ %.087, %315 ], [ %.087, %295 ], [ %.087, %285 ], [ %.087, %279 ], [ %.087, %278 ], [ %.087, %276 ], [ %.087, %261 ], [ %.087, %251 ], [ %.087, %245 ], [ %.087, %234 ], [ %.087, %228 ], [ %.087, %221 ], [ %.087, %217 ], [ 0, %210 ], [ %.087, %208 ], [ %.neg105, %195 ], [ %.087, %193 ], [ %.087, %177 ], [ %.087, %167 ], [ %.087, %166 ], [ 0, %156 ], [ %.087, %146 ], [ %.087, %145 ], [ %.087, %144 ], [ %.087, %129 ], [ %.087, %119 ], [ %.087, %116 ], [ %.087, %115 ], [ %.087, %108 ], [ %.087, %105 ], [ %.087, %104 ], [ %.087, %90 ], [ %.087, %80 ], [ %.087, %76 ], [ %.087, %75 ], [ %.087, %74 ], [ %.087, %61 ], [ %.087, %51 ], [ %.087, %50 ], [ %.087, %48 ], [ %.087, %36 ], [ %.087, %26 ], [ %.087, %23 ]
  %.085.be = phi i64 [ %.085, %22 ], [ %.085, %478 ], [ %.085, %466 ], [ %.085, %465 ], [ %.085, %464 ], [ %.085, %455 ], [ %.085, %454 ], [ %.085, %450 ], [ 0, %449 ], [ %.085, %444 ], [ %.085, %439 ], [ %.085, %435 ], [ %.085, %434 ], [ %.085, %431 ], [ %.085, %430 ], [ %.085, %419 ], [ %.085, %409 ], [ %.085, %408 ], [ %407, %406 ], [ %.085, %404 ], [ %.085, %379 ], [ %.085, %369 ], [ %.085, %368 ], [ %.085, %358 ], [ %.085, %348 ], [ %.085, %347 ], [ %.085, %337 ], [ %.085, %327 ], [ %.085, %316 ], [ %.085, %315 ], [ %.085, %295 ], [ %.085, %285 ], [ %.085, %279 ], [ %.085, %278 ], [ %.085, %276 ], [ %.085, %261 ], [ %.085, %251 ], [ %.085, %245 ], [ %.085, %234 ], [ %.085, %228 ], [ %.085, %221 ], [ %.085, %217 ], [ %211, %210 ], [ %.085, %208 ], [ %.085, %195 ], [ %.085, %193 ], [ %.085, %177 ], [ %.085, %167 ], [ %.085, %166 ], [ 0, %156 ], [ %.085, %146 ], [ %.085, %145 ], [ %.085, %144 ], [ %.085, %129 ], [ %.085, %119 ], [ %.085, %116 ], [ %.085, %115 ], [ %.085, %108 ], [ %.085, %105 ], [ %.085, %104 ], [ %.085, %90 ], [ %.085, %80 ], [ %.085, %76 ], [ %.085, %75 ], [ %.085, %74 ], [ %.085, %61 ], [ %.085, %51 ], [ %.085, %50 ], [ %.085, %48 ], [ %.085, %36 ], [ %.085, %26 ], [ %.085, %23 ]
  %.083.be = phi i64 [ %.083, %22 ], [ %.083, %478 ], [ %473, %466 ], [ %.083, %465 ], [ %.083, %464 ], [ %.083, %455 ], [ %.083, %454 ], [ %.083, %450 ], [ 0, %449 ], [ %.083, %444 ], [ %.083, %439 ], [ %.083, %435 ], [ %.083, %434 ], [ %.083, %431 ], [ %.083, %430 ], [ %.083, %419 ], [ %.083, %409 ], [ %.083, %408 ], [ %.083, %406 ], [ %.083, %404 ], [ %386, %379 ], [ %.083, %369 ], [ %.083, %368 ], [ %.083, %358 ], [ %.083, %348 ], [ %.083, %347 ], [ %.083, %337 ], [ %.083, %327 ], [ %.083, %316 ], [ %.083, %315 ], [ %.083, %295 ], [ %.083, %285 ], [ %.083, %279 ], [ %.083, %278 ], [ %.083, %276 ], [ %.083, %261 ], [ %.083, %251 ], [ %.083, %245 ], [ %.083, %234 ], [ %.083, %228 ], [ %.083, %221 ], [ %.083, %217 ], [ %.083, %210 ], [ %.083, %208 ], [ %204, %195 ], [ %.083, %193 ], [ %.083, %177 ], [ %.083, %167 ], [ %.083, %166 ], [ 0, %156 ], [ %.083, %146 ], [ %.083, %145 ], [ %.083, %144 ], [ %.083, %129 ], [ %.083, %119 ], [ %.083, %116 ], [ %.083, %115 ], [ %.083, %108 ], [ %.083, %105 ], [ %.083, %104 ], [ %.083, %90 ], [ %.083, %80 ], [ %.083, %76 ], [ %.083, %75 ], [ %.083, %74 ], [ %.083, %61 ], [ %.083, %51 ], [ %.083, %50 ], [ %.083, %48 ], [ %.083, %36 ], [ %.083, %26 ], [ %.083, %23 ]
  %.081.be = phi i64 [ %.081, %22 ], [ %.081, %478 ], [ %476, %466 ], [ %.081, %465 ], [ %.081, %464 ], [ %.081, %455 ], [ %.081, %454 ], [ %.081, %450 ], [ 0, %449 ], [ %.081, %444 ], [ %.081, %439 ], [ %.081, %435 ], [ %.081, %434 ], [ %.081, %431 ], [ %.081, %430 ], [ %.081, %419 ], [ %.081, %409 ], [ %.081, %408 ], [ %.081, %406 ], [ %.081, %404 ], [ %390, %379 ], [ %.081, %369 ], [ %.081, %368 ], [ %.081, %358 ], [ %.081, %348 ], [ %.081, %347 ], [ %.081, %337 ], [ %.081, %327 ], [ %.081, %316 ], [ %.081, %315 ], [ %.081, %295 ], [ %.081, %285 ], [ %.081, %279 ], [ %.081, %278 ], [ %.081, %276 ], [ %.081, %261 ], [ %.081, %251 ], [ %.081, %245 ], [ %.081, %234 ], [ %.081, %228 ], [ %.081, %221 ], [ %.081, %217 ], [ %.081, %210 ], [ %.081, %208 ], [ %207, %195 ], [ %.081, %193 ], [ %.081, %177 ], [ %.081, %167 ], [ %.081, %166 ], [ 0, %156 ], [ %.081, %146 ], [ %.081, %145 ], [ %.081, %144 ], [ %.081, %129 ], [ %.081, %119 ], [ %.081, %116 ], [ %.081, %115 ], [ %.081, %108 ], [ %.081, %105 ], [ %.081, %104 ], [ %.081, %90 ], [ %.081, %80 ], [ %.081, %76 ], [ %.081, %75 ], [ %.081, %74 ], [ %.081, %61 ], [ %.081, %51 ], [ %.081, %50 ], [ %.081, %48 ], [ %.081, %36 ], [ %.081, %26 ], [ %.081, %23 ]
  %.079.be = phi i64 [ %.079, %22 ], [ %.079, %478 ], [ %.079, %466 ], [ %.079, %465 ], [ %.079, %464 ], [ %463, %455 ], [ %.079, %454 ], [ %.079, %450 ], [ 0, %449 ], [ %.079, %444 ], [ %.079, %439 ], [ %.079, %435 ], [ %.079, %434 ], [ %.079, %431 ], [ %.079, %430 ], [ %.079, %419 ], [ %.079, %409 ], [ %.079, %408 ], [ %.079, %406 ], [ %.079, %404 ], [ %.079, %379 ], [ %.079, %369 ], [ %.079, %368 ], [ %.079, %358 ], [ %.079, %348 ], [ %.079, %347 ], [ %.079, %337 ], [ %.079, %327 ], [ %326, %316 ], [ %.079, %315 ], [ %305, %295 ], [ %.079, %285 ], [ %.079, %279 ], [ %.079, %278 ], [ %.079, %276 ], [ %.079, %261 ], [ %.079, %251 ], [ %.079, %245 ], [ %244, %234 ], [ %.079, %228 ], [ %.079, %221 ], [ %.079, %217 ], [ %.079, %210 ], [ %.079, %208 ], [ %203, %195 ], [ %.079, %193 ], [ %.079, %177 ], [ %.079, %167 ], [ %.079, %166 ], [ 0, %156 ], [ %.079, %146 ], [ %.079, %145 ], [ %.079, %144 ], [ %.079, %129 ], [ %.079, %119 ], [ %.079, %116 ], [ %.079, %115 ], [ %.079, %108 ], [ %.079, %105 ], [ %.079, %104 ], [ %.079, %90 ], [ %.079, %80 ], [ %.079, %76 ], [ %.079, %75 ], [ %.079, %74 ], [ %.079, %61 ], [ %.079, %51 ], [ %.079, %50 ], [ %.079, %48 ], [ %.079, %36 ], [ %.079, %26 ], [ %.079, %23 ]
  %.077.be = phi i32 [ %.077, %22 ], [ %.077, %478 ], [ %.077, %466 ], [ %.077, %465 ], [ %.077, %464 ], [ %.077, %455 ], [ %.077, %454 ], [ %.077, %450 ], [ 0, %449 ], [ %.077, %444 ], [ %.077, %439 ], [ %.077, %435 ], [ %.077, %434 ], [ %.077, %431 ], [ %.077, %430 ], [ %.077, %419 ], [ %.077, %409 ], [ %.077, %408 ], [ %.077, %406 ], [ %.077, %404 ], [ %.077, %379 ], [ %.077, %369 ], [ %.077, %368 ], [ %.077, %358 ], [ %.077, %348 ], [ %.077, %347 ], [ %.077, %337 ], [ %.077, %327 ], [ %.077, %316 ], [ %.077, %315 ], [ %.077, %295 ], [ %.077, %285 ], [ %.077, %279 ], [ %.077, %278 ], [ %.077, %276 ], [ %.077, %261 ], [ %.077, %251 ], [ %.077, %245 ], [ %.077, %234 ], [ %.077, %228 ], [ %.077, %221 ], [ %.077, %217 ], [ %.077, %210 ], [ %209, %208 ], [ %.077, %195 ], [ %.077, %193 ], [ %.077, %177 ], [ %.077, %167 ], [ %.077, %166 ], [ 0, %156 ], [ %.077, %146 ], [ %.077, %145 ], [ %.077, %144 ], [ %.077, %129 ], [ %.077, %119 ], [ %.077, %116 ], [ %.077, %115 ], [ %.077, %108 ], [ %.077, %105 ], [ %.077, %104 ], [ %.077, %90 ], [ %.077, %80 ], [ %.077, %76 ], [ %.077, %75 ], [ %.077, %74 ], [ %.077, %61 ], [ %.077, %51 ], [ %.077, %50 ], [ %.077, %48 ], [ %.077, %36 ], [ %.077, %26 ], [ %.077, %23 ]
  %.075.be = phi i32 [ %.075, %22 ], [ %.neg, %478 ], [ %.075, %466 ], [ %.075, %465 ], [ %.075, %464 ], [ %.075, %455 ], [ %.075, %454 ], [ %.075, %450 ], [ %.075, %449 ], [ %.075, %444 ], [ %.075, %439 ], [ %.075, %435 ], [ %.075, %434 ], [ %.075, %431 ], [ %.075, %430 ], [ %420, %419 ], [ %.075, %409 ], [ %.075, %408 ], [ %.075, %406 ], [ %.075, %404 ], [ %.075, %379 ], [ %.075, %369 ], [ %.075, %368 ], [ %.075, %358 ], [ %.075, %348 ], [ %.075, %347 ], [ %.075, %337 ], [ %.075, %327 ], [ %.075, %316 ], [ %.075, %315 ], [ %.075, %295 ], [ %.075, %285 ], [ %.075, %279 ], [ %.075, %278 ], [ %.075, %276 ], [ %.075, %261 ], [ %.075, %251 ], [ %.075, %245 ], [ %.075, %234 ], [ %.075, %228 ], [ %.075, %221 ], [ %.075, %217 ], [ %216, %210 ], [ %.075, %208 ], [ %.075, %195 ], [ %.075, %193 ], [ %.075, %177 ], [ %.075, %167 ], [ %.075, %166 ], [ %.075, %156 ], [ %.075, %146 ], [ %.075, %145 ], [ %.075, %144 ], [ %.075, %129 ], [ %.075, %119 ], [ %.075, %116 ], [ %.075, %115 ], [ %.075, %108 ], [ %.075, %105 ], [ %.075, %104 ], [ %.075, %90 ], [ %.075, %80 ], [ %.075, %76 ], [ %.075, %75 ], [ %.075, %74 ], [ %.075, %61 ], [ %.075, %51 ], [ %.075, %50 ], [ %.075, %48 ], [ %.075, %36 ], [ %.075, %26 ], [ %.075, %23 ]
  %.073.be = phi i32 [ %.073, %22 ], [ -1500135297, %478 ], [ 1638673406, %466 ], [ -1459999299, %465 ], [ 10158380, %464 ], [ 1823119316, %455 ], [ 862915681, %454 ], [ -1952287790, %450 ], [ 1876802912, %449 ], [ 1967542217, %444 ], [ 692060302, %439 ], [ 200835697, %435 ], [ -1582546008, %434 ], [ -1184817260, %431 ], [ -595653697, %430 ], [ %429, %419 ], [ %418, %409 ], [ -1063473522, %408 ], [ 101975103, %406 ], [ %405, %404 ], [ %403, %379 ], [ %378, %369 ], [ -868053232, %368 ], [ %367, %358 ], [ %357, %348 ], [ -440974233, %347 ], [ %346, %337 ], [ %336, %327 ], [ 1621181668, %316 ], [ 1621181668, %315 ], [ %314, %295 ], [ %294, %285 ], [ %284, %279 ], [ 174410388, %278 ], [ %277, %276 ], [ %275, %261 ], [ %260, %251 ], [ %250, %245 ], [ -868053232, %234 ], [ %233, %228 ], [ %227, %221 ], [ %220, %217 ], [ -595653697, %210 ], [ -1248928120, %208 ], [ -993085672, %195 ], [ %194, %193 ], [ %192, %177 ], [ %176, %167 ], [ -1248928120, %166 ], [ %165, %156 ], [ %155, %146 ], [ -676094097, %145 ], [ -676094097, %144 ], [ %143, %129 ], [ %128, %119 ], [ %118, %116 ], [ 1480841029, %115 ], [ 1480841029, %108 ], [ %107, %105 ], [ 693082960, %104 ], [ %103, %90 ], [ %89, %80 ], [ %79, %76 ], [ -1184817260, %75 ], [ -764072951, %74 ], [ %73, %61 ], [ %60, %51 ], [ -764072951, %50 ], [ %49, %48 ], [ %47, %36 ], [ %35, %26 ], [ %25, %23 ]
  %.071.be = phi i64 [ %.071, %22 ], [ %.071, %478 ], [ %.071, %466 ], [ %.071, %465 ], [ %.071, %464 ], [ %.071, %455 ], [ %.071, %454 ], [ %.071, %450 ], [ %.071, %449 ], [ %.071, %444 ], [ %.071, %439 ], [ %.071, %435 ], [ %.071, %434 ], [ %.071, %431 ], [ %.071, %430 ], [ %.071, %419 ], [ %.071, %409 ], [ %.071, %408 ], [ %.071, %406 ], [ %.071, %404 ], [ %.071, %379 ], [ %.071, %369 ], [ %.071, %368 ], [ %.071, %358 ], [ %.071, %348 ], [ %.071, %347 ], [ %.071, %337 ], [ %.071, %327 ], [ %.071, %316 ], [ %.071, %315 ], [ %.071, %295 ], [ %.071, %285 ], [ %.071, %279 ], [ %.071, %278 ], [ %.071, %276 ], [ %.071, %261 ], [ %.071, %251 ], [ %.071, %245 ], [ %.071, %234 ], [ %.071, %228 ], [ %.071, %221 ], [ %.071, %217 ], [ %.071, %210 ], [ %.071, %208 ], [ %.071, %195 ], [ %.071, %193 ], [ %.071, %177 ], [ %.071, %167 ], [ %.071, %166 ], [ %.071, %156 ], [ %.071, %146 ], [ %.071, %145 ], [ %.071, %144 ], [ %.071, %129 ], [ %.071, %119 ], [ %.071, %116 ], [ 1, %115 ], [ %114, %108 ], [ %.071, %105 ], [ %.071, %104 ], [ %.071, %90 ], [ %.071, %80 ], [ %.071, %76 ], [ %.071, %75 ], [ %.071, %74 ], [ %.071, %61 ], [ %.071, %51 ], [ %.071, %50 ], [ %.071, %48 ], [ %.071, %36 ], [ %.071, %26 ], [ %.071, %23 ]
  %.0.be = phi i64 [ %.0, %22 ], [ %.0, %478 ], [ %.0, %466 ], [ %.0, %465 ], [ %.0, %464 ], [ %.0, %455 ], [ %.0, %454 ], [ %.0, %450 ], [ %.0, %449 ], [ %.0, %444 ], [ %.0, %439 ], [ %.0, %435 ], [ %.0, %434 ], [ %.0, %431 ], [ %.0, %430 ], [ %.0, %419 ], [ %.0, %409 ], [ %.0, %408 ], [ %.0, %406 ], [ %.0, %404 ], [ %.0, %379 ], [ %.0, %369 ], [ %.0, %368 ], [ %.0, %358 ], [ %.0, %348 ], [ %.0, %347 ], [ %.0, %337 ], [ %.0, %327 ], [ %.0, %316 ], [ %.0, %315 ], [ %.0, %295 ], [ %.0, %285 ], [ %.0, %279 ], [ %.0, %278 ], [ %.0, %276 ], [ %.0, %261 ], [ %.0, %251 ], [ %.0, %245 ], [ %.0, %234 ], [ %.0, %228 ], [ %.0, %221 ], [ %.0, %217 ], [ %.0, %210 ], [ %.0, %208 ], [ %.0, %195 ], [ %.0, %193 ], [ %.0, %177 ], [ %.0, %167 ], [ %.0, %166 ], [ %.0, %156 ], [ %.0, %146 ], [ 0, %145 ], [ %.0..0..0.65, %144 ], [ %.0, %129 ], [ %.0, %119 ], [ %.0, %116 ], [ %.0, %115 ], [ %.0, %108 ], [ %.0, %105 ], [ %.0, %104 ], [ %.0, %90 ], [ %.0, %80 ], [ %.0, %76 ], [ %.0, %75 ], [ %.0, %74 ], [ %.0, %61 ], [ %.0, %51 ], [ %.0, %50 ], [ %.0, %48 ], [ %.0, %36 ], [ %.0, %26 ], [ %.0, %23 ]
  br label %22

23:                                               ; preds = %22
  %.0..0..0. = load volatile i64, i64* %7, align 8
  %24 = icmp eq i64 %.0..0..0., 0
  %25 = select i1 %24, i32 -1753900554, i32 -1521120832
  br label %.backedge

26:                                               ; preds = %22
  %27 = load i32, i32* @x.2, align 4
  %28 = load i32, i32* @y.3, align 4
  %29 = add i32 %27, -1
  %30 = mul i32 %29, %27
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %33, %32
  %35 = select i1 %34, i32 -1582546008, i32 851678853
  br label %.backedge

36:                                               ; preds = %22
  %37 = load i64, i64* %9, align 8
  %38 = icmp eq i64 %37, 0
  store i1 %38, i1* %6, align 1
  %39 = load i32, i32* @x.2, align 4
  %40 = load i32, i32* @y.3, align 4
  %41 = add i32 %39, -1
  %42 = mul i32 %41, %39
  %43 = and i32 %42, 1
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %45, %44
  %47 = select i1 %46, i32 221665428, i32 851678853
  br label %.backedge

48:                                               ; preds = %22
  %.0..0..0.64 = load volatile i1, i1* %6, align 1
  %49 = select i1 %.0..0..0.64, i32 -1676452230, i32 -263250478
  br label %.backedge

50:                                               ; preds = %22
  %putchar = call i32 @putchar(i32 49)
  br label %.backedge

51:                                               ; preds = %22
  %52 = load i32, i32* @x.2, align 4
  %53 = load i32, i32* @y.3, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 200835697, i32 -379996295
  br label %.backedge

61:                                               ; preds = %22
  %62 = load i64, i64* %8, align 8
  %63 = add i64 %62, 1
  %64 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %63)
  %65 = load i32, i32* @x.2, align 4
  %66 = load i32, i32* @y.3, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 1784384578, i32 -379996295
  br label %.backedge

74:                                               ; preds = %22
  br label %.backedge

75:                                               ; preds = %22
  br label %.backedge

76:                                               ; preds = %22
  %77 = load i64, i64* %10, align 8
  %78 = icmp slt i64 %77, 0
  %79 = select i1 %78, i32 76338798, i32 693082960
  br label %.backedge

80:                                               ; preds = %22
  %81 = load i32, i32* @x.2, align 4
  %82 = load i32, i32* @y.3, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 692060302, i32 1830436235
  br label %.backedge

90:                                               ; preds = %22
  %91 = load i64, i64* %10, align 8
  %92 = sub nsw i64 0, %91
  store i64 %92, i64* %10, align 8
  %93 = load i64, i64* %9, align 8
  %94 = sub nsw i64 0, %93
  store i64 %94, i64* %9, align 8
  %95 = load i32, i32* @x.2, align 4
  %96 = load i32, i32* @y.3, align 4
  %97 = add i32 %95, -1
  %98 = mul i32 %97, %95
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %101, %100
  %103 = select i1 %102, i32 1683523879, i32 1830436235
  br label %.backedge

104:                                              ; preds = %22
  br label %.backedge

105:                                              ; preds = %22
  %106 = load i64, i64* %9, align 8
  %.not107 = icmp eq i64 %106, 0
  %107 = select i1 %.not107, i32 -342018178, i32 -1378374764
  br label %.backedge

108:                                              ; preds = %22
  %109 = load i64, i64* %10, align 8
  %110 = load i64, i64* %9, align 8
  %111 = call i64 @_ZSt3absx(i64 %110)
  %112 = load i64, i64* %10, align 8
  %113 = call i64 @_ZSt5__gcdIxET_S0_S0_(i64 %111, i64 %112)
  %114 = sdiv i64 %109, %113
  br label %.backedge

115:                                              ; preds = %22
  br label %.backedge

116:                                              ; preds = %22
  store i64 %.071, i64* %11, align 8
  %117 = load i64, i64* %9, align 8
  %.not106 = icmp eq i64 %117, 0
  %118 = select i1 %.not106, i32 1864479171, i32 565434803
  br label %.backedge

119:                                              ; preds = %22
  %120 = load i32, i32* @x.2, align 4
  %121 = load i32, i32* @y.3, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 1967542217, i32 1733776674
  br label %.backedge

129:                                              ; preds = %22
  %130 = load i64, i64* %9, align 8
  %131 = call i64 @_ZSt3absx(i64 %130)
  %132 = load i64, i64* %10, align 8
  %133 = call i64 @_ZSt5__gcdIxET_S0_S0_(i64 %131, i64 %132)
  %134 = sdiv i64 %130, %133
  store i64 %134, i64* %5, align 8
  %135 = load i32, i32* @x.2, align 4
  %136 = load i32, i32* @y.3, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 1574182264, i32 1733776674
  br label %.backedge

144:                                              ; preds = %22
  %.0..0..0.65 = load volatile i64, i64* %5, align 8
  br label %.backedge

145:                                              ; preds = %22
  br label %.backedge

146:                                              ; preds = %22
  store i64 %.0, i64* %1, align 8
  %147 = load i32, i32* @x.2, align 4
  %148 = load i32, i32* @y.3, align 4
  %149 = add i32 %147, -1
  %150 = mul i32 %149, %147
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 1876802912, i32 -1956215964
  br label %.backedge

156:                                              ; preds = %22
  %.0..0..0.69 = load volatile i64, i64* %1, align 8
  %157 = load i32, i32* @x.2, align 4
  %158 = load i32, i32* @y.3, align 4
  %159 = add i32 %157, -1
  %160 = mul i32 %159, %157
  %161 = and i32 %160, 1
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %163, %162
  %165 = select i1 %164, i32 -1622105573, i32 -1956215964
  br label %.backedge

166:                                              ; preds = %22
  br label %.backedge

167:                                              ; preds = %22
  %168 = load i32, i32* @x.2, align 4
  %169 = load i32, i32* @y.3, align 4
  %170 = add i32 %168, -1
  %171 = mul i32 %170, %168
  %172 = and i32 %171, 1
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %174, %173
  %176 = select i1 %175, i32 -1952287790, i32 -472364038
  br label %.backedge

177:                                              ; preds = %22
  %178 = sext i32 %.077 to i64
  %179 = load i64, i64* %8, align 8
  %180 = add i64 %179, 1
  store i64 %180, i64* %12, align 8
  %181 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %12, i64* nonnull dereferenceable(8) %11)
  %182 = load i64, i64* %181, align 8
  %183 = icmp sgt i64 %182, %178
  store i1 %183, i1* %4, align 1
  %184 = load i32, i32* @x.2, align 4
  %185 = load i32, i32* @y.3, align 4
  %186 = add i32 %184, -1
  %187 = mul i32 %186, %184
  %188 = and i32 %187, 1
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %190, %189
  %192 = select i1 %191, i32 40575047, i32 -472364038
  br label %.backedge

193:                                              ; preds = %22
  %.0..0..0.66 = load volatile i1, i1* %4, align 1
  %194 = select i1 %.0..0..0.66, i32 -56321118, i32 59925696
  br label %.backedge

195:                                              ; preds = %22
  %196 = add i64 %.083, %.085
  %197 = sext i32 %.077 to i64
  %198 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeA, i64 0, i64 %197
  store i64 %196, i64* %198, align 8
  %199 = add i64 %.081, %.085
  %200 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeB, i64 0, i64 %197
  store i64 %199, i64* %200, align 8
  %201 = sub i64 1, %196
  %202 = add i64 %201, %199
  %203 = add i64 %202, %.079
  %204 = add i64 %.083, %197
  %205 = load i64, i64* %8, align 8
  %206 = xor i64 %197, -1
  %.neg104 = add i64 %.081, %206
  %207 = add i64 %.neg104, %205
  %.neg105 = add i32 %.087, 1
  br label %.backedge

208:                                              ; preds = %22
  %209 = add i32 %.077, 1
  br label %.backedge

210:                                              ; preds = %22
  %211 = add i64 %.085, %.089
  %212 = load i64, i64* %8, align 8
  %213 = add i64 %212, 1
  store i64 %213, i64* %13, align 8
  %214 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %13, i64* nonnull dereferenceable(8) %11)
  %215 = load i64, i64* %214, align 8
  %216 = trunc i64 %215 to i32
  br label %.backedge

217:                                              ; preds = %22
  %218 = sext i32 %.075 to i64
  %219 = load i64, i64* %8, align 8
  %.not102 = icmp slt i64 %219, %218
  %220 = select i1 %.not102, i32 174410388, i32 303153888
  br label %.backedge

221:                                              ; preds = %22
  %222 = add i64 %.083, %.085
  store i64 %222, i64* %14, align 8
  %223 = add i64 %.081, %.085
  store i64 %223, i64* %15, align 8
  %224 = sext i32 %.087 to i64
  %225 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeA, i64 0, i64 %224
  %226 = load i64, i64* %225, align 8
  %.not101 = icmp slt i64 %226, %222
  %227 = select i1 %.not101, i32 1769540458, i32 981113699
  br label %.backedge

228:                                              ; preds = %22
  %229 = sext i32 %.087 to i64
  %230 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeB, i64 0, i64 %229
  %231 = load i64, i64* %230, align 8
  %232 = load i64, i64* %15, align 8
  %.not100 = icmp sgt i64 %231, %232
  %233 = select i1 %.not100, i32 1769540458, i32 -646823972
  br label %.backedge

234:                                              ; preds = %22
  %235 = load i64, i64* %15, align 8
  %236 = sext i32 %.087 to i64
  %237 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeA, i64 0, i64 %236
  %238 = load i64, i64* %237, align 8
  %239 = load i64, i64* %14, align 8
  %240 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeB, i64 0, i64 %236
  %241 = load i64, i64* %240, align 8
  %242 = add i64 %235, %.079
  %.neg98.neg = add i64 %242, %238
  %243 = add i64 %239, %241
  %244 = sub i64 %.neg98.neg, %243
  br label %.backedge

245:                                              ; preds = %22
  %246 = sext i32 %.087 to i64
  %247 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeA, i64 0, i64 %246
  %248 = load i64, i64* %247, align 8
  %249 = load i64, i64* %14, align 8
  %.not97 = icmp sgt i64 %248, %249
  %250 = select i1 %.not97, i32 1063433239, i32 558936223
  br label %.backedge

251:                                              ; preds = %22
  %252 = load i32, i32* @x.2, align 4
  %253 = load i32, i32* @y.3, align 4
  %254 = add i32 %252, -1
  %255 = mul i32 %254, %252
  %256 = and i32 %255, 1
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %258, %257
  %260 = select i1 %259, i32 862915681, i32 -276978007
  br label %.backedge

261:                                              ; preds = %22
  %262 = sext i32 %.087 to i64
  %263 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeB, i64 0, i64 %262
  %264 = load i64, i64* %263, align 8
  %265 = load i64, i64* %15, align 8
  %266 = icmp sge i64 %264, %265
  store i1 %266, i1* %3, align 1
  %267 = load i32, i32* @x.2, align 4
  %268 = load i32, i32* @y.3, align 4
  %269 = add i32 %267, -1
  %270 = mul i32 %269, %267
  %271 = and i32 %270, 1
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %273, %272
  %275 = select i1 %274, i32 -1265262035, i32 -276978007
  br label %.backedge

276:                                              ; preds = %22
  %.0..0..0.67 = load volatile i1, i1* %3, align 1
  %277 = select i1 %.0..0..0.67, i32 -1840300071, i32 1063433239
  br label %.backedge

278:                                              ; preds = %22
  br label %.backedge

279:                                              ; preds = %22
  %280 = sext i32 %.087 to i64
  %281 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeA, i64 0, i64 %280
  %282 = load i64, i64* %281, align 8
  %283 = load i64, i64* %14, align 8
  %.not = icmp sgt i64 %282, %283
  %284 = select i1 %.not, i32 -1475195281, i32 -207234990
  br label %.backedge

285:                                              ; preds = %22
  %286 = load i32, i32* @x.2, align 4
  %287 = load i32, i32* @y.3, align 4
  %288 = add i32 %286, -1
  %289 = mul i32 %288, %286
  %290 = and i32 %289, 1
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %292, %291
  %294 = select i1 %293, i32 1823119316, i32 2041065616
  br label %.backedge

295:                                              ; preds = %22
  %296 = load i64, i64* %15, align 8
  %297 = sext i32 %.087 to i64
  %298 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeB, i64 0, i64 %297
  %299 = load i64, i64* %298, align 8
  %300 = add i64 %299, 1
  store i64 %300, i64* %16, align 8
  %301 = call dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %16, i64* nonnull dereferenceable(8) %14)
  %302 = load i64, i64* %301, align 8
  %303 = add i64 %.079, 1
  %304 = add i64 %303, %296
  %305 = sub i64 %304, %302
  %306 = load i32, i32* @x.2, align 4
  %307 = load i32, i32* @y.3, align 4
  %308 = add i32 %306, -1
  %309 = mul i32 %308, %306
  %310 = and i32 %309, 1
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %312, %311
  %314 = select i1 %313, i32 -457653819, i32 2041065616
  br label %.backedge

315:                                              ; preds = %22
  br label %.backedge

316:                                              ; preds = %22
  %317 = sext i32 %.087 to i64
  %318 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeA, i64 0, i64 %317
  %319 = load i64, i64* %318, align 8
  %320 = add i64 %319, -1
  store i64 %320, i64* %17, align 8
  %321 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %17, i64* nonnull dereferenceable(8) %15)
  %322 = load i64, i64* %321, align 8
  %323 = load i64, i64* %14, align 8
  %324 = add i64 %.079, 1
  %325 = add i64 %324, %322
  %326 = sub i64 %325, %323
  br label %.backedge

327:                                              ; preds = %22
  %328 = load i32, i32* @x.2, align 4
  %329 = load i32, i32* @y.3, align 4
  %330 = add i32 %328, -1
  %331 = mul i32 %330, %328
  %332 = and i32 %331, 1
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %334, %333
  %336 = select i1 %335, i32 10158380, i32 1998304375
  br label %.backedge

337:                                              ; preds = %22
  %338 = load i32, i32* @x.2, align 4
  %339 = load i32, i32* @y.3, align 4
  %340 = add i32 %338, -1
  %341 = mul i32 %340, %338
  %342 = and i32 %341, 1
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %344, %343
  %346 = select i1 %345, i32 -785664247, i32 1998304375
  br label %.backedge

347:                                              ; preds = %22
  br label %.backedge

348:                                              ; preds = %22
  %349 = load i32, i32* @x.2, align 4
  %350 = load i32, i32* @y.3, align 4
  %351 = add i32 %349, -1
  %352 = mul i32 %351, %349
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %355, %354
  %357 = select i1 %356, i32 -1459999299, i32 411818263
  br label %.backedge

358:                                              ; preds = %22
  %359 = load i32, i32* @x.2, align 4
  %360 = load i32, i32* @y.3, align 4
  %361 = add i32 %359, -1
  %362 = mul i32 %361, %359
  %363 = and i32 %362, 1
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %365, %364
  %367 = select i1 %366, i32 -608068567, i32 411818263
  br label %.backedge

368:                                              ; preds = %22
  br label %.backedge

369:                                              ; preds = %22
  %370 = load i32, i32* @x.2, align 4
  %371 = load i32, i32* @y.3, align 4
  %372 = add i32 %370, -1
  %373 = mul i32 %372, %370
  %374 = and i32 %373, 1
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %376, %375
  %378 = select i1 %377, i32 1638673406, i32 787017425
  br label %.backedge

379:                                              ; preds = %22
  %380 = load i64, i64* %14, align 8
  %381 = sext i32 %.087 to i64
  %382 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeA, i64 0, i64 %381
  store i64 %380, i64* %382, align 8
  %383 = load i64, i64* %15, align 8
  %384 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeB, i64 0, i64 %381
  store i64 %383, i64* %384, align 8
  %385 = sext i32 %.075 to i64
  %386 = add i64 %.083, %385
  %387 = load i64, i64* %8, align 8
  %388 = xor i64 %385, -1
  %389 = add i64 %.081, %388
  %390 = add i64 %389, %387
  %391 = add i32 %.087, 1
  %392 = sext i32 %391 to i64
  %393 = load i64, i64* %11, align 8
  %394 = icmp sle i64 %393, %392
  store i1 %394, i1* %2, align 1
  %395 = load i32, i32* @x.2, align 4
  %396 = load i32, i32* @y.3, align 4
  %397 = add i32 %395, -1
  %398 = mul i32 %397, %395
  %399 = and i32 %398, 1
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %401, %400
  %403 = select i1 %402, i32 -2047919800, i32 787017425
  br label %.backedge

404:                                              ; preds = %22
  %.0..0..0.68 = load volatile i1, i1* %2, align 1
  %405 = select i1 %.0..0..0.68, i32 1561448401, i32 101975103
  br label %.backedge

406:                                              ; preds = %22
  %407 = add i64 %.085, %.089
  br label %.backedge

408:                                              ; preds = %22
  br label %.backedge

409:                                              ; preds = %22
  %410 = load i32, i32* @x.2, align 4
  %411 = load i32, i32* @y.3, align 4
  %412 = add i32 %410, -1
  %413 = mul i32 %412, %410
  %414 = and i32 %413, 1
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %416, %415
  %418 = select i1 %417, i32 -1500135297, i32 2082325622
  br label %.backedge

419:                                              ; preds = %22
  %420 = add i32 %.075, 1
  %421 = load i32, i32* @x.2, align 4
  %422 = load i32, i32* @y.3, align 4
  %423 = add i32 %421, -1
  %424 = mul i32 %423, %421
  %425 = and i32 %424, 1
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %427, %426
  %429 = select i1 %428, i32 -963171840, i32 2082325622
  br label %.backedge

430:                                              ; preds = %22
  br label %.backedge

431:                                              ; preds = %22
  %432 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %.079)
  br label %.backedge

433:                                              ; preds = %22
  ret i32 0

434:                                              ; preds = %22
  br label %.backedge

435:                                              ; preds = %22
  %436 = load i64, i64* %8, align 8
  %437 = add i64 %436, 1
  %438 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %437)
  br label %.backedge

439:                                              ; preds = %22
  %440 = load i64, i64* %10, align 8
  %441 = sub nsw i64 0, %440
  store i64 %441, i64* %10, align 8
  %442 = load i64, i64* %9, align 8
  %443 = sub nsw i64 0, %442
  store i64 %443, i64* %9, align 8
  br label %.backedge

444:                                              ; preds = %22
  %445 = load i64, i64* %9, align 8
  %446 = call i64 @_ZSt3absx(i64 %445)
  %447 = load i64, i64* %10, align 8
  %448 = call i64 @_ZSt5__gcdIxET_S0_S0_(i64 %446, i64 %447)
  br label %.backedge

449:                                              ; preds = %22
  %.0..0..0.70 = load volatile i64, i64* %1, align 8
  br label %.backedge

450:                                              ; preds = %22
  %451 = load i64, i64* %8, align 8
  %452 = add i64 %451, 1
  store i64 %452, i64* %12, align 8
  %453 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %12, i64* nonnull dereferenceable(8) %11)
  br label %.backedge

454:                                              ; preds = %22
  br label %.backedge

455:                                              ; preds = %22
  %456 = load i64, i64* %15, align 8
  %457 = sext i32 %.087 to i64
  %458 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeB, i64 0, i64 %457
  %459 = load i64, i64* %458, align 8
  %460 = add i64 %459, 1
  store i64 %460, i64* %16, align 8
  %461 = call dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %16, i64* nonnull dereferenceable(8) %14)
  %462 = load i64, i64* %461, align 8
  %.neg95.neg = add i64 %.079, 1
  %.neg96 = add i64 %.neg95.neg, %456
  %463 = sub i64 %.neg96, %462
  br label %.backedge

464:                                              ; preds = %22
  br label %.backedge

465:                                              ; preds = %22
  br label %.backedge

466:                                              ; preds = %22
  %467 = load i64, i64* %14, align 8
  %468 = sext i32 %.087 to i64
  %469 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeA, i64 0, i64 %468
  store i64 %467, i64* %469, align 8
  %470 = load i64, i64* %15, align 8
  %471 = getelementptr inbounds [200001 x i64], [200001 x i64]* @maeB, i64 0, i64 %468
  store i64 %470, i64* %471, align 8
  %472 = sext i32 %.075 to i64
  %473 = add i64 %.083, %472
  %474 = load i64, i64* %8, align 8
  %475 = xor i64 %472, -1
  %.neg94 = add i64 %.081, %475
  %476 = add i64 %.neg94, %474
  %477 = add i32 %.087, 1
  br label %.backedge

478:                                              ; preds = %22
  %.neg = add i32 %.075, 1
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt5__gcdIxET_S0_S0_(i64 %0, i64 %1) local_unnamed_addr #6 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.4, align 4
  %10 = load i32, i32* @y.5, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ 328046657, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 328046657, label %17
    i32 1624309113, label %20
    i32 681527494, label %33
    i32 -1232143008, label %34
    i32 643804299, label %44
    i32 -1002672559, label %56
    i32 -857488452, label %58
    i32 -1193391091, label %64
    i32 -1316460229, label %66
    i32 -1744516425, label %67
  ]

.backedge:                                        ; preds = %16, %67, %66, %58, %56, %44, %34, %33, %20, %17
  %.0.be = phi i32 [ %.0, %16 ], [ 643804299, %67 ], [ 1624309113, %66 ], [ -1232143008, %58 ], [ %57, %56 ], [ %55, %44 ], [ %43, %34 ], [ -1232143008, %33 ], [ %32, %20 ], [ %19, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 1624309113, i32 -1316460229
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i64, align 8
  store i64* %21, i64** %6, align 8
  %22 = alloca i64, align 8
  store i64* %22, i64** %5, align 8
  %23 = alloca i64, align 8
  store i64* %23, i64** %4, align 8
  %.0..0..0.2 = load volatile i64*, i64** %6, align 8
  store i64 %0, i64* %.0..0..0.2, align 8
  %.0..0..0.6 = load volatile i64*, i64** %5, align 8
  store i64 %1, i64* %.0..0..0.6, align 8
  %24 = load i32, i32* @x.4, align 4
  %25 = load i32, i32* @y.5, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 681527494, i32 -1316460229
  br label %.backedge

33:                                               ; preds = %16
  br label %.backedge

34:                                               ; preds = %16
  %35 = load i32, i32* @x.4, align 4
  %36 = load i32, i32* @y.5, align 4
  %37 = add i32 %35, -1
  %38 = mul i32 %37, %35
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %41, %40
  %43 = select i1 %42, i32 643804299, i32 -1744516425
  br label %.backedge

44:                                               ; preds = %16
  %.0..0..0.7 = load volatile i64*, i64** %5, align 8
  %45 = load i64, i64* %.0..0..0.7, align 8
  %46 = icmp ne i64 %45, 0
  store i1 %46, i1* %3, align 1
  %47 = load i32, i32* @x.4, align 4
  %48 = load i32, i32* @y.5, align 4
  %49 = add i32 %47, -1
  %50 = mul i32 %49, %47
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %53, %52
  %55 = select i1 %54, i32 -1002672559, i32 -1744516425
  br label %.backedge

56:                                               ; preds = %16
  %.0..0..0.14 = load volatile i1, i1* %3, align 1
  %57 = select i1 %.0..0..0.14, i32 -857488452, i32 -1193391091
  br label %.backedge

58:                                               ; preds = %16
  %.0..0..0.3 = load volatile i64*, i64** %6, align 8
  %59 = load i64, i64* %.0..0..0.3, align 8
  %.0..0..0.8 = load volatile i64*, i64** %5, align 8
  %60 = load i64, i64* %.0..0..0.8, align 8
  %61 = srem i64 %59, %60
  %.0..0..0.12 = load volatile i64*, i64** %4, align 8
  store i64 %61, i64* %.0..0..0.12, align 8
  %.0..0..0.9 = load volatile i64*, i64** %5, align 8
  %62 = load i64, i64* %.0..0..0.9, align 8
  %.0..0..0.4 = load volatile i64*, i64** %6, align 8
  store i64 %62, i64* %.0..0..0.4, align 8
  %.0..0..0.13 = load volatile i64*, i64** %4, align 8
  %63 = load i64, i64* %.0..0..0.13, align 8
  %.0..0..0.10 = load volatile i64*, i64** %5, align 8
  store i64 %63, i64* %.0..0..0.10, align 8
  br label %.backedge

64:                                               ; preds = %16
  %.0..0..0.5 = load volatile i64*, i64** %6, align 8
  %65 = load i64, i64* %.0..0..0.5, align 8
  ret i64 %65

66:                                               ; preds = %16
  br label %.backedge

67:                                               ; preds = %16
  %.0..0..0.11 = load volatile i64*, i64** %5, align 8
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt3absx(i64 %0) local_unnamed_addr #6 comdat {
  %2 = tail call i64 @llvm.abs.i64(i64 %0, i1 false)
  ret i64 %2
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64**, align 8
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.8, align 4
  %10 = load i32, i32* @y.9, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ 33066932, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 33066932, label %17
    i32 -857739778, label %20
    i32 -1073522623, label %38
    i32 844267255, label %40
    i32 539243162, label %50
    i32 -337400250, label %61
    i32 -289145723, label %62
    i32 726387808, label %64
    i32 -1152264904, label %66
    i32 1396259324, label %67
  ]

.backedge:                                        ; preds = %16, %67, %66, %62, %61, %50, %40, %38, %20, %17
  %.0.be = phi i32 [ %.0, %16 ], [ 539243162, %67 ], [ -857739778, %66 ], [ 726387808, %62 ], [ 726387808, %61 ], [ %60, %50 ], [ %49, %40 ], [ %39, %38 ], [ %37, %20 ], [ %19, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 -857739778, i32 -1152264904
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i64*, align 8
  store i64** %21, i64*** %6, align 8
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %5, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %4, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %5, align 8
  store i64* %0, i64** %.0..0..0.6, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %4, align 8
  store i64* %1, i64** %.0..0..0.9, align 8
  %.0..0..0.10 = load volatile i64**, i64*** %4, align 8
  %24 = load i64*, i64** %.0..0..0.10, align 8
  %25 = load i64, i64* %24, align 8
  %.0..0..0.7 = load volatile i64**, i64*** %5, align 8
  %26 = load i64*, i64** %.0..0..0.7, align 8
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %25, %27
  store i1 %28, i1* %3, align 1
  %29 = load i32, i32* @x.8, align 4
  %30 = load i32, i32* @y.9, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -1073522623, i32 -1152264904
  br label %.backedge

38:                                               ; preds = %16
  %.0..0..0.13 = load volatile i1, i1* %3, align 1
  %39 = select i1 %.0..0..0.13, i32 844267255, i32 -289145723
  br label %.backedge

40:                                               ; preds = %16
  %41 = load i32, i32* @x.8, align 4
  %42 = load i32, i32* @y.9, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 539243162, i32 1396259324
  br label %.backedge

50:                                               ; preds = %16
  %.0..0..0.11 = load volatile i64**, i64*** %4, align 8
  %51 = load i64*, i64** %.0..0..0.11, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %6, align 8
  store i64* %51, i64** %.0..0..0.2, align 8
  %52 = load i32, i32* @x.8, align 4
  %53 = load i32, i32* @y.9, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 -337400250, i32 1396259324
  br label %.backedge

61:                                               ; preds = %16
  br label %.backedge

62:                                               ; preds = %16
  %.0..0..0.8 = load volatile i64**, i64*** %5, align 8
  %63 = load i64*, i64** %.0..0..0.8, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %6, align 8
  store i64* %63, i64** %.0..0..0.3, align 8
  br label %.backedge

64:                                               ; preds = %16
  %.0..0..0.4 = load volatile i64**, i64*** %6, align 8
  %65 = load i64*, i64** %.0..0..0.4, align 8
  ret i64* %65

66:                                               ; preds = %16
  br label %.backedge

67:                                               ; preds = %16
  %.0..0..0.12 = load volatile i64**, i64*** %4, align 8
  %68 = load i64*, i64** %.0..0..0.12, align 8
  %.0..0..0.5 = load volatile i64**, i64*** %6, align 8
  store i64* %68, i64** %.0..0..0.5, align 8
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %0, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %1, align 8
  store i64 %6, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.07.ph = phi i64* [ undef, %2 ], [ %.07.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ -1023092439, %2 ], [ 1407279837, %.outer.backedge ]
  br label %.outer9

.outer9:                                          ; preds = %.outer, %8
  %.0.ph10 = phi i32 [ %.0.ph, %.outer ], [ %10, %8 ]
  br label %7

7:                                                ; preds = %.outer9, %7
  switch i32 %.0.ph10, label %7 [
    i32 -1023092439, label %8
    i32 1889408750, label %.outer.backedge
    i32 -10250197, label %11
    i32 1407279837, label %12
  ]

8:                                                ; preds = %7
  %.0..0..0.5 = load volatile i64, i64* %4, align 8
  %.0..0..0.6 = load volatile i64, i64* %3, align 8
  %9 = icmp slt i64 %.0..0..0.5, %.0..0..0.6
  %10 = select i1 %9, i32 1889408750, i32 -10250197
  br label %.outer9

11:                                               ; preds = %7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %7, %11
  %.07.ph.be = phi i64* [ %0, %11 ], [ %1, %7 ]
  br label %.outer

12:                                               ; preds = %7
  ret i64* %.07.ph
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s259732828.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.12, align 4
  %4 = load i32, i32* @y.13, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1631986442, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1631986442, label %11
    i32 -1687727883, label %14
    i32 398865652, label %24
    i32 1663490229, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -1687727883, i32 1663490229
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.12, align 4
  %16 = load i32, i32* @y.13, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 398865652, i32 1663490229
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -1687727883, %25 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #7

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
