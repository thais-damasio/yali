; ModuleID = 'build_ollvm/programs/p04051/s288944002.ll'
source_filename = "Project_CodeNet_C++1400/p04051/s288944002.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@a = global [200050 x i32] zeroinitializer, align 16
@b = global [200050 x i32] zeroinitializer, align 16
@dp = local_unnamed_addr global [4100 x [4100 x i32]] zeroinitializer, align 16
@fac = local_unnamed_addr global [10050 x i64] zeroinitializer, align 16
@inv = local_unnamed_addr global [10050 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s288944002.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i64 @_Z3ksmxi(i64 %0, i32 %1) local_unnamed_addr #4 {
  %3 = alloca i1, align 1
  %4 = load i32, i32* @x.3, align 4
  %5 = load i32, i32* @y.4, align 4
  %6 = add i32 %4, -1
  %7 = mul i32 %6, %4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %10, %9
  %12 = select i1 %11, i32 -2047409133, i32 -1775995479
  %13 = select i1 %11, i32 -1200383023, i32 -1775995479
  br label %14

14:                                               ; preds = %.backedge, %2
  %.014 = phi i64 [ %0, %2 ], [ %.014.be, %.backedge ]
  %.012 = phi i32 [ %1, %2 ], [ %.012.be, %.backedge ]
  %.010 = phi i64 [ 1, %2 ], [ %.010.be, %.backedge ]
  %.0 = phi i32 [ 1392544354, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1392544354, label %15
    i32 -1200383023, label %16
    i32 -2047409133, label %18
    i32 -1628844415, label %20
    i32 774788033, label %23
    i32 -1851421317, label %26
    i32 1523963184, label %30
    i32 -1775995479, label %31
  ]

.backedge:                                        ; preds = %14, %31, %26, %23, %20, %18, %16, %15
  %.014.be = phi i64 [ %.014, %14 ], [ %.014, %31 ], [ %29, %26 ], [ %.014, %23 ], [ %.014, %20 ], [ %.014, %18 ], [ %.014, %16 ], [ %.014, %15 ]
  %.012.be = phi i32 [ %.012, %14 ], [ %.012, %31 ], [ %27, %26 ], [ %.012, %23 ], [ %.012, %20 ], [ %.012, %18 ], [ %.012, %16 ], [ %.012, %15 ]
  %.010.be = phi i64 [ %.010, %14 ], [ %.010, %31 ], [ %.010, %26 ], [ %25, %23 ], [ %.010, %20 ], [ %.010, %18 ], [ %.010, %16 ], [ %.010, %15 ]
  %.0.be = phi i32 [ %.0, %14 ], [ -1200383023, %31 ], [ 1392544354, %26 ], [ -1851421317, %23 ], [ %22, %20 ], [ %19, %18 ], [ %12, %16 ], [ %13, %15 ]
  br label %14

15:                                               ; preds = %14
  br label %.backedge

16:                                               ; preds = %14
  %17 = icmp ne i32 %.012, 0
  store i1 %17, i1* %3, align 1
  br label %.backedge

18:                                               ; preds = %14
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %19 = select i1 %.0..0..0., i32 -1628844415, i32 1523963184
  br label %.backedge

20:                                               ; preds = %14
  %21 = and i32 %.012, 1
  %.not = icmp eq i32 %21, 0
  %22 = select i1 %.not, i32 -1851421317, i32 774788033
  br label %.backedge

23:                                               ; preds = %14
  %24 = mul nsw i64 %.010, %.014
  %25 = srem i64 %24, 1000000007
  br label %.backedge

26:                                               ; preds = %14
  %27 = ashr i32 %.012, 1
  %28 = mul nsw i64 %.014, %.014
  %29 = urem i64 %28, 1000000007
  br label %.backedge

30:                                               ; preds = %14
  ret i64 %.010

31:                                               ; preds = %14
  br label %.backedge
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i64 @_Z1Cii(i32 %0, i32 %1) local_unnamed_addr #4 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %3, align 4
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [10050 x i64], [10050 x i64]* @fac, i64 0, i64 %5
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds [10050 x i64], [10050 x i64]* @inv, i64 0, i64 %7
  %9 = sub i32 %0, %1
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [10050 x i64], [10050 x i64]* @inv, i64 0, i64 %10
  %12 = load i32, i32* @x.5, align 4
  %13 = load i32, i32* @y.6, align 4
  %14 = add i32 %12, -1
  %15 = mul i32 %14, %12
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %18, %17
  %20 = select i1 %19, i32 -1565622214, i32 -1275523834
  %21 = select i1 %19, i32 896773188, i32 -1275523834
  %22 = icmp eq i32 %1, 0
  %23 = select i1 %22, i32 -1452303437, i32 -82758173
  %24 = icmp eq i32 %0, %1
  %25 = select i1 %24, i32 -1452303437, i32 312299527
  %26 = icmp slt i32 %1, 0
  %27 = select i1 %26, i32 -1512237539, i32 1289366666
  br label %28

28:                                               ; preds = %.backedge, %2
  %.017 = phi i64 [ undef, %2 ], [ %.017.be, %.backedge ]
  %.0 = phi i32 [ 1755182758, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1755182758, label %29
    i32 -1617322510, label %32
    i32 -1512237539, label %33
    i32 1289366666, label %34
    i32 312299527, label %35
    i32 -1452303437, label %36
    i32 -82758173, label %37
    i32 896773188, label %38
    i32 -1565622214, label %46
    i32 374286610, label %47
    i32 -1275523834, label %48
  ]

.backedge:                                        ; preds = %28, %48, %46, %38, %37, %36, %35, %34, %33, %32, %29
  %.017.be = phi i64 [ %.017, %28 ], [ %55, %48 ], [ %.017, %46 ], [ %45, %38 ], [ %.017, %37 ], [ 1, %36 ], [ %.017, %35 ], [ %.017, %34 ], [ 0, %33 ], [ %.017, %32 ], [ %.017, %29 ]
  %.0.be = phi i32 [ %.0, %28 ], [ 896773188, %48 ], [ 374286610, %46 ], [ %20, %38 ], [ %21, %37 ], [ 374286610, %36 ], [ %23, %35 ], [ %25, %34 ], [ 374286610, %33 ], [ %27, %32 ], [ %31, %29 ]
  br label %28

29:                                               ; preds = %28
  %.0..0..0. = load volatile i32, i32* %4, align 4
  %.0..0..0.16 = load volatile i32, i32* %3, align 4
  %30 = icmp slt i32 %.0..0..0., %.0..0..0.16
  %31 = select i1 %30, i32 -1512237539, i32 -1617322510
  br label %.backedge

32:                                               ; preds = %28
  br label %.backedge

33:                                               ; preds = %28
  br label %.backedge

34:                                               ; preds = %28
  br label %.backedge

35:                                               ; preds = %28
  br label %.backedge

36:                                               ; preds = %28
  br label %.backedge

37:                                               ; preds = %28
  br label %.backedge

38:                                               ; preds = %28
  %39 = load i64, i64* %6, align 8
  %40 = load i64, i64* %8, align 8
  %41 = mul nsw i64 %40, %39
  %42 = srem i64 %41, 1000000007
  %43 = load i64, i64* %11, align 8
  %44 = mul nsw i64 %42, %43
  %45 = srem i64 %44, 1000000007
  br label %.backedge

46:                                               ; preds = %28
  br label %.backedge

47:                                               ; preds = %28
  ret i64 %.017

48:                                               ; preds = %28
  %49 = load i64, i64* %6, align 8
  %50 = load i64, i64* %8, align 8
  %51 = mul nsw i64 %50, %49
  %52 = srem i64 %51, 1000000007
  %53 = load i64, i64* %11, align 8
  %54 = mul nsw i64 %52, %53
  %55 = srem i64 %54, 1000000007
  br label %.backedge
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  store i64 1, i64* getelementptr inbounds ([10050 x i64], [10050 x i64]* @fac, i64 0, i64 0), align 16
  br label %4

4:                                                ; preds = %.backedge, %0
  %.086 = phi i32 [ 1, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i32 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i32 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i64 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.0 = phi i32 [ -367647112, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -367647112, label %5
    i32 130713316, label %15
    i32 1693637030, label %26
    i32 -1715734084, label %28
    i32 377757204, label %37
    i32 1819075426, label %38
    i32 428287039, label %41
    i32 -2051810775, label %44
    i32 1961611927, label %53
    i32 -1955797855, label %55
    i32 -70016101, label %65
    i32 -1616128821, label %76
    i32 -1916785911, label %77
    i32 -194209252, label %80
    i32 -1988564175, label %90
    i32 -828171619, label %104
    i32 1940642094, label %105
    i32 1506449130, label %107
    i32 -2143119652, label %108
    i32 -1370981291, label %111
    i32 -1607859333, label %123
    i32 766450765, label %125
    i32 -1367114084, label %135
    i32 -1234219887, label %145
    i32 -1032517018, label %146
    i32 -1712383330, label %156
    i32 -379029443, label %167
    i32 808974196, label %169
    i32 2030647503, label %170
    i32 -1877162884, label %180
    i32 -1521058196, label %191
    i32 -2071889308, label %193
    i32 -1293939700, label %210
    i32 -938844207, label %212
    i32 -337370158, label %213
    i32 466648726, label %215
    i32 -734024932, label %216
    i32 -1280629103, label %219
    i32 197886521, label %229
    i32 1455610664, label %253
    i32 -1931181091, label %254
    i32 1427507675, label %264
    i32 1639483785, label %275
    i32 527951838, label %276
    i32 1254423063, label %277
    i32 -320661069, label %280
    i32 -23346279, label %290
    i32 -2080375851, label %309
    i32 342527760, label %310
    i32 1542432379, label %320
    i32 -134539253, label %331
    i32 -2043082866, label %332
    i32 2113803464, label %337
    i32 -1617843707, label %338
    i32 725213267, label %340
    i32 -706977174, label %345
    i32 -1471539173, label %346
    i32 1334883794, label %347
    i32 1874537265, label %348
    i32 317581479, label %362
    i32 -91008070, label %364
    i32 1612600519, label %376
  ]

.backedge:                                        ; preds = %4, %376, %364, %362, %348, %347, %346, %345, %340, %338, %337, %331, %320, %310, %309, %290, %280, %277, %276, %275, %264, %254, %253, %229, %219, %216, %215, %213, %212, %210, %193, %191, %180, %170, %169, %167, %156, %146, %145, %135, %125, %123, %111, %108, %107, %105, %104, %90, %80, %77, %76, %65, %55, %53, %44, %41, %38, %37, %28, %26, %15, %5
  %.086.be = phi i32 [ %.086, %4 ], [ %.086, %376 ], [ %.086, %364 ], [ %.086, %362 ], [ %.086, %348 ], [ %.086, %347 ], [ %.086, %346 ], [ %.086, %345 ], [ %.086, %340 ], [ %.086, %338 ], [ %.086, %337 ], [ %.086, %331 ], [ %.086, %320 ], [ %.086, %310 ], [ %.086, %309 ], [ %.086, %290 ], [ %.086, %280 ], [ %.086, %277 ], [ %.086, %276 ], [ %.086, %275 ], [ %.086, %264 ], [ %.086, %254 ], [ %.086, %253 ], [ %.086, %229 ], [ %.086, %219 ], [ %.086, %216 ], [ %.086, %215 ], [ %.086, %213 ], [ %.086, %212 ], [ %.086, %210 ], [ %.086, %193 ], [ %.086, %191 ], [ %.086, %180 ], [ %.086, %170 ], [ %.086, %169 ], [ %.086, %167 ], [ %.086, %156 ], [ %.086, %146 ], [ %.086, %145 ], [ %.086, %135 ], [ %.086, %125 ], [ %.086, %123 ], [ %.086, %111 ], [ %.086, %108 ], [ %.086, %107 ], [ %.086, %105 ], [ %.086, %104 ], [ %.086, %90 ], [ %.086, %80 ], [ %.086, %77 ], [ %.086, %76 ], [ %.086, %65 ], [ %.086, %55 ], [ %.086, %53 ], [ %.086, %44 ], [ %.086, %41 ], [ %.086, %38 ], [ %.neg99, %37 ], [ %.086, %28 ], [ %.086, %26 ], [ %.086, %15 ], [ %.086, %5 ]
  %.084.be = phi i32 [ %.084, %4 ], [ %.084, %376 ], [ %.084, %364 ], [ %.084, %362 ], [ %.084, %348 ], [ %.084, %347 ], [ %.084, %346 ], [ %.084, %345 ], [ %.084, %340 ], [ %.084, %338 ], [ %.084, %337 ], [ %.084, %331 ], [ %.084, %320 ], [ %.084, %310 ], [ %.084, %309 ], [ %.084, %290 ], [ %.084, %280 ], [ %.084, %277 ], [ %.084, %276 ], [ %.084, %275 ], [ %.084, %264 ], [ %.084, %254 ], [ %.084, %253 ], [ %.084, %229 ], [ %.084, %219 ], [ %.084, %216 ], [ %.084, %215 ], [ %.084, %213 ], [ %.084, %212 ], [ %.084, %210 ], [ %.084, %193 ], [ %.084, %191 ], [ %.084, %180 ], [ %.084, %170 ], [ %.084, %169 ], [ %.084, %167 ], [ %.084, %156 ], [ %.084, %146 ], [ %.084, %145 ], [ %.084, %135 ], [ %.084, %125 ], [ %.084, %123 ], [ %.084, %111 ], [ %.084, %108 ], [ %.084, %107 ], [ %.084, %105 ], [ %.084, %104 ], [ %.084, %90 ], [ %.084, %80 ], [ %.084, %77 ], [ %.084, %76 ], [ %.084, %65 ], [ %.084, %55 ], [ %54, %53 ], [ %.084, %44 ], [ %.084, %41 ], [ 9999, %38 ], [ %.084, %37 ], [ %.084, %28 ], [ %.084, %26 ], [ %.084, %15 ], [ %.084, %5 ]
  %.082.be = phi i32 [ %.082, %4 ], [ %.082, %376 ], [ %.082, %364 ], [ %.082, %362 ], [ %.082, %348 ], [ %.082, %347 ], [ %.082, %346 ], [ %.082, %345 ], [ %.082, %340 ], [ 1, %338 ], [ %.082, %337 ], [ %.082, %331 ], [ %.082, %320 ], [ %.082, %310 ], [ %.082, %309 ], [ %.082, %290 ], [ %.082, %280 ], [ %.082, %277 ], [ %.082, %276 ], [ %.082, %275 ], [ %.082, %264 ], [ %.082, %254 ], [ %.082, %253 ], [ %.082, %229 ], [ %.082, %219 ], [ %.082, %216 ], [ %.082, %215 ], [ %.082, %213 ], [ %.082, %212 ], [ %.082, %210 ], [ %.082, %193 ], [ %.082, %191 ], [ %.082, %180 ], [ %.082, %170 ], [ %.082, %169 ], [ %.082, %167 ], [ %.082, %156 ], [ %.082, %146 ], [ %.082, %145 ], [ %.082, %135 ], [ %.082, %125 ], [ %.082, %123 ], [ %.082, %111 ], [ %.082, %108 ], [ %.082, %107 ], [ %106, %105 ], [ %.082, %104 ], [ %.082, %90 ], [ %.082, %80 ], [ %.082, %77 ], [ %.082, %76 ], [ 1, %65 ], [ %.082, %55 ], [ %.082, %53 ], [ %.082, %44 ], [ %.082, %41 ], [ %.082, %38 ], [ %.082, %37 ], [ %.082, %28 ], [ %.082, %26 ], [ %.082, %15 ], [ %.082, %5 ]
  %.080.be = phi i32 [ %.080, %4 ], [ %.080, %376 ], [ %.080, %364 ], [ %.080, %362 ], [ %.080, %348 ], [ %.080, %347 ], [ %.080, %346 ], [ %.080, %345 ], [ %.080, %340 ], [ %.080, %338 ], [ %.080, %337 ], [ %.080, %331 ], [ %.080, %320 ], [ %.080, %310 ], [ %.080, %309 ], [ %.080, %290 ], [ %.080, %280 ], [ %.080, %277 ], [ %.080, %276 ], [ %.080, %275 ], [ %.080, %264 ], [ %.080, %254 ], [ %.080, %253 ], [ %.080, %229 ], [ %.080, %219 ], [ %.080, %216 ], [ %.080, %215 ], [ %.080, %213 ], [ %.080, %212 ], [ %.080, %210 ], [ %.080, %193 ], [ %.080, %191 ], [ %.080, %180 ], [ %.080, %170 ], [ %.080, %169 ], [ %.080, %167 ], [ %.080, %156 ], [ %.080, %146 ], [ %.080, %145 ], [ %.080, %135 ], [ %.080, %125 ], [ %124, %123 ], [ %.080, %111 ], [ %.080, %108 ], [ 1, %107 ], [ %.080, %105 ], [ %.080, %104 ], [ %.080, %90 ], [ %.080, %80 ], [ %.080, %77 ], [ %.080, %76 ], [ %.080, %65 ], [ %.080, %55 ], [ %.080, %53 ], [ %.080, %44 ], [ %.080, %41 ], [ %.080, %38 ], [ %.080, %37 ], [ %.080, %28 ], [ %.080, %26 ], [ %.080, %15 ], [ %.080, %5 ]
  %.078.be = phi i32 [ %.078, %4 ], [ %.078, %376 ], [ %.078, %364 ], [ %.078, %362 ], [ %.078, %348 ], [ %.078, %347 ], [ %.078, %346 ], [ 1, %345 ], [ %.078, %340 ], [ %.078, %338 ], [ %.078, %337 ], [ %.078, %331 ], [ %.078, %320 ], [ %.078, %310 ], [ %.078, %309 ], [ %.078, %290 ], [ %.078, %280 ], [ %.078, %277 ], [ %.078, %276 ], [ %.078, %275 ], [ %.078, %264 ], [ %.078, %254 ], [ %.078, %253 ], [ %.078, %229 ], [ %.078, %219 ], [ %.078, %216 ], [ %.078, %215 ], [ %214, %213 ], [ %.078, %212 ], [ %.078, %210 ], [ %.078, %193 ], [ %.078, %191 ], [ %.078, %180 ], [ %.078, %170 ], [ %.078, %169 ], [ %.078, %167 ], [ %.078, %156 ], [ %.078, %146 ], [ %.078, %145 ], [ 1, %135 ], [ %.078, %125 ], [ %.078, %123 ], [ %.078, %111 ], [ %.078, %108 ], [ %.078, %107 ], [ %.078, %105 ], [ %.078, %104 ], [ %.078, %90 ], [ %.078, %80 ], [ %.078, %77 ], [ %.078, %76 ], [ %.078, %65 ], [ %.078, %55 ], [ %.078, %53 ], [ %.078, %44 ], [ %.078, %41 ], [ %.078, %38 ], [ %.078, %37 ], [ %.078, %28 ], [ %.078, %26 ], [ %.078, %15 ], [ %.078, %5 ]
  %.076.be = phi i32 [ %.076, %4 ], [ %.076, %376 ], [ %.076, %364 ], [ %.076, %362 ], [ %.076, %348 ], [ %.076, %347 ], [ %.076, %346 ], [ %.076, %345 ], [ %.076, %340 ], [ %.076, %338 ], [ %.076, %337 ], [ %.076, %331 ], [ %.076, %320 ], [ %.076, %310 ], [ %.076, %309 ], [ %.076, %290 ], [ %.076, %280 ], [ %.076, %277 ], [ %.076, %276 ], [ %.076, %275 ], [ %.076, %264 ], [ %.076, %254 ], [ %.076, %253 ], [ %.076, %229 ], [ %.076, %219 ], [ %.076, %216 ], [ %.076, %215 ], [ %.076, %213 ], [ %.076, %212 ], [ %211, %210 ], [ %.076, %193 ], [ %.076, %191 ], [ %.076, %180 ], [ %.076, %170 ], [ 1, %169 ], [ %.076, %167 ], [ %.076, %156 ], [ %.076, %146 ], [ %.076, %145 ], [ %.076, %135 ], [ %.076, %125 ], [ %.076, %123 ], [ %.076, %111 ], [ %.076, %108 ], [ %.076, %107 ], [ %.076, %105 ], [ %.076, %104 ], [ %.076, %90 ], [ %.076, %80 ], [ %.076, %77 ], [ %.076, %76 ], [ %.076, %65 ], [ %.076, %55 ], [ %.076, %53 ], [ %.076, %44 ], [ %.076, %41 ], [ %.076, %38 ], [ %.076, %37 ], [ %.076, %28 ], [ %.076, %26 ], [ %.076, %15 ], [ %.076, %5 ]
  %.074.be = phi i64 [ %.074, %4 ], [ %.074, %376 ], [ %375, %364 ], [ %.074, %362 ], [ %361, %348 ], [ %.074, %347 ], [ %.074, %346 ], [ %.074, %345 ], [ %.074, %340 ], [ %.074, %338 ], [ %.074, %337 ], [ %.074, %331 ], [ %.074, %320 ], [ %.074, %310 ], [ %.074, %309 ], [ %299, %290 ], [ %.074, %280 ], [ %.074, %277 ], [ %.074, %276 ], [ %.074, %275 ], [ %.074, %264 ], [ %.074, %254 ], [ %.074, %253 ], [ %243, %229 ], [ %.074, %219 ], [ %.074, %216 ], [ 0, %215 ], [ %.074, %213 ], [ %.074, %212 ], [ %.074, %210 ], [ %.074, %193 ], [ %.074, %191 ], [ %.074, %180 ], [ %.074, %170 ], [ %.074, %169 ], [ %.074, %167 ], [ %.074, %156 ], [ %.074, %146 ], [ %.074, %145 ], [ %.074, %135 ], [ %.074, %125 ], [ %.074, %123 ], [ %.074, %111 ], [ %.074, %108 ], [ %.074, %107 ], [ %.074, %105 ], [ %.074, %104 ], [ %.074, %90 ], [ %.074, %80 ], [ %.074, %77 ], [ %.074, %76 ], [ %.074, %65 ], [ %.074, %55 ], [ %.074, %53 ], [ %.074, %44 ], [ %.074, %41 ], [ %.074, %38 ], [ %.074, %37 ], [ %.074, %28 ], [ %.074, %26 ], [ %.074, %15 ], [ %.074, %5 ]
  %.072.be = phi i32 [ %.072, %4 ], [ %.072, %376 ], [ %.072, %364 ], [ %363, %362 ], [ %.072, %348 ], [ %.072, %347 ], [ %.072, %346 ], [ %.072, %345 ], [ %.072, %340 ], [ %.072, %338 ], [ %.072, %337 ], [ %.072, %331 ], [ %.072, %320 ], [ %.072, %310 ], [ %.072, %309 ], [ %.072, %290 ], [ %.072, %280 ], [ %.072, %277 ], [ %.072, %276 ], [ %.072, %275 ], [ %265, %264 ], [ %.072, %254 ], [ %.072, %253 ], [ %.072, %229 ], [ %.072, %219 ], [ %.072, %216 ], [ 1, %215 ], [ %.072, %213 ], [ %.072, %212 ], [ %.072, %210 ], [ %.072, %193 ], [ %.072, %191 ], [ %.072, %180 ], [ %.072, %170 ], [ %.072, %169 ], [ %.072, %167 ], [ %.072, %156 ], [ %.072, %146 ], [ %.072, %145 ], [ %.072, %135 ], [ %.072, %125 ], [ %.072, %123 ], [ %.072, %111 ], [ %.072, %108 ], [ %.072, %107 ], [ %.072, %105 ], [ %.072, %104 ], [ %.072, %90 ], [ %.072, %80 ], [ %.072, %77 ], [ %.072, %76 ], [ %.072, %65 ], [ %.072, %55 ], [ %.072, %53 ], [ %.072, %44 ], [ %.072, %41 ], [ %.072, %38 ], [ %.072, %37 ], [ %.072, %28 ], [ %.072, %26 ], [ %.072, %15 ], [ %.072, %5 ]
  %.070.be = phi i32 [ %.070, %4 ], [ %377, %376 ], [ %.070, %364 ], [ %.070, %362 ], [ %.070, %348 ], [ %.070, %347 ], [ %.070, %346 ], [ %.070, %345 ], [ %.070, %340 ], [ %.070, %338 ], [ %.070, %337 ], [ %.070, %331 ], [ %321, %320 ], [ %.070, %310 ], [ %.070, %309 ], [ %.070, %290 ], [ %.070, %280 ], [ %.070, %277 ], [ 1, %276 ], [ %.070, %275 ], [ %.070, %264 ], [ %.070, %254 ], [ %.070, %253 ], [ %.070, %229 ], [ %.070, %219 ], [ %.070, %216 ], [ %.070, %215 ], [ %.070, %213 ], [ %.070, %212 ], [ %.070, %210 ], [ %.070, %193 ], [ %.070, %191 ], [ %.070, %180 ], [ %.070, %170 ], [ %.070, %169 ], [ %.070, %167 ], [ %.070, %156 ], [ %.070, %146 ], [ %.070, %145 ], [ %.070, %135 ], [ %.070, %125 ], [ %.070, %123 ], [ %.070, %111 ], [ %.070, %108 ], [ %.070, %107 ], [ %.070, %105 ], [ %.070, %104 ], [ %.070, %90 ], [ %.070, %80 ], [ %.070, %77 ], [ %.070, %76 ], [ %.070, %65 ], [ %.070, %55 ], [ %.070, %53 ], [ %.070, %44 ], [ %.070, %41 ], [ %.070, %38 ], [ %.070, %37 ], [ %.070, %28 ], [ %.070, %26 ], [ %.070, %15 ], [ %.070, %5 ]
  %.0.be = phi i32 [ %.0, %4 ], [ 1542432379, %376 ], [ -23346279, %364 ], [ 1427507675, %362 ], [ 197886521, %348 ], [ -1877162884, %347 ], [ -1712383330, %346 ], [ -1367114084, %345 ], [ -1988564175, %340 ], [ -70016101, %338 ], [ 130713316, %337 ], [ 1254423063, %331 ], [ %330, %320 ], [ %319, %310 ], [ 342527760, %309 ], [ %308, %290 ], [ %289, %280 ], [ %279, %277 ], [ 1254423063, %276 ], [ -734024932, %275 ], [ %274, %264 ], [ %263, %254 ], [ -1931181091, %253 ], [ %252, %229 ], [ %228, %219 ], [ %218, %216 ], [ -734024932, %215 ], [ -1032517018, %213 ], [ -337370158, %212 ], [ 2030647503, %210 ], [ -1293939700, %193 ], [ %192, %191 ], [ %190, %180 ], [ %179, %170 ], [ 2030647503, %169 ], [ %168, %167 ], [ %166, %156 ], [ %155, %146 ], [ -1032517018, %145 ], [ %144, %135 ], [ %134, %125 ], [ -2143119652, %123 ], [ -1607859333, %111 ], [ %110, %108 ], [ -2143119652, %107 ], [ -1916785911, %105 ], [ 1940642094, %104 ], [ %103, %90 ], [ %89, %80 ], [ %79, %77 ], [ -1916785911, %76 ], [ %75, %65 ], [ %64, %55 ], [ 428287039, %53 ], [ 1961611927, %44 ], [ %43, %41 ], [ 428287039, %38 ], [ -367647112, %37 ], [ 377757204, %28 ], [ %27, %26 ], [ %25, %15 ], [ %14, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = load i32, i32* @x.7, align 4
  %7 = load i32, i32* @y.8, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %12, %11
  %14 = select i1 %13, i32 130713316, i32 2113803464
  br label %.backedge

15:                                               ; preds = %4
  %16 = icmp slt i32 %.086, 10001
  store i1 %16, i1* %3, align 1
  %17 = load i32, i32* @x.7, align 4
  %18 = load i32, i32* @y.8, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 1693637030, i32 2113803464
  br label %.backedge

26:                                               ; preds = %4
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %27 = select i1 %.0..0..0., i32 -1715734084, i32 1819075426
  br label %.backedge

28:                                               ; preds = %4
  %29 = add i32 %.086, -1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [10050 x i64], [10050 x i64]* @fac, i64 0, i64 %30
  %32 = load i64, i64* %31, align 8
  %33 = sext i32 %.086 to i64
  %34 = mul nsw i64 %32, %33
  %35 = srem i64 %34, 1000000007
  %36 = getelementptr inbounds [10050 x i64], [10050 x i64]* @fac, i64 0, i64 %33
  store i64 %35, i64* %36, align 8
  br label %.backedge

37:                                               ; preds = %4
  %.neg99 = add i32 %.086, 1
  br label %.backedge

38:                                               ; preds = %4
  %39 = load i64, i64* getelementptr inbounds ([10050 x i64], [10050 x i64]* @fac, i64 0, i64 10000), align 16
  %40 = tail call i64 @_Z3ksmxi(i64 %39, i32 1000000005)
  store i64 %40, i64* getelementptr inbounds ([10050 x i64], [10050 x i64]* @inv, i64 0, i64 10000), align 16
  br label %.backedge

41:                                               ; preds = %4
  %42 = icmp sgt i32 %.084, -1
  %43 = select i1 %42, i32 -2051810775, i32 -1955797855
  br label %.backedge

44:                                               ; preds = %4
  %45 = add i32 %.084, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [10050 x i64], [10050 x i64]* @inv, i64 0, i64 %46
  %48 = load i64, i64* %47, align 8
  %49 = mul nsw i64 %48, %46
  %50 = srem i64 %49, 1000000007
  %51 = sext i32 %.084 to i64
  %52 = getelementptr inbounds [10050 x i64], [10050 x i64]* @inv, i64 0, i64 %51
  store i64 %50, i64* %52, align 8
  br label %.backedge

53:                                               ; preds = %4
  %54 = add i32 %.084, -1
  br label %.backedge

55:                                               ; preds = %4
  %56 = load i32, i32* @x.7, align 4
  %57 = load i32, i32* @y.8, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 -70016101, i32 -1617843707
  br label %.backedge

65:                                               ; preds = %4
  %66 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull @n)
  %67 = load i32, i32* @x.7, align 4
  %68 = load i32, i32* @y.8, align 4
  %69 = add i32 %67, -1
  %70 = mul i32 %69, %67
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %73, %72
  %75 = select i1 %74, i32 -1616128821, i32 -1617843707
  br label %.backedge

76:                                               ; preds = %4
  br label %.backedge

77:                                               ; preds = %4
  %78 = load i32, i32* @n, align 4
  %.not97 = icmp sgt i32 %.082, %78
  %79 = select i1 %.not97, i32 1506449130, i32 -194209252
  br label %.backedge

80:                                               ; preds = %4
  %81 = load i32, i32* @x.7, align 4
  %82 = load i32, i32* @y.8, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 -1988564175, i32 725213267
  br label %.backedge

90:                                               ; preds = %4
  %91 = sext i32 %.082 to i64
  %92 = getelementptr inbounds [200050 x i32], [200050 x i32]* @a, i64 0, i64 %91
  %93 = getelementptr inbounds [200050 x i32], [200050 x i32]* @b, i64 0, i64 %91
  %94 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %92, i32* nonnull %93)
  %95 = load i32, i32* @x.7, align 4
  %96 = load i32, i32* @y.8, align 4
  %97 = add i32 %95, -1
  %98 = mul i32 %97, %95
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %101, %100
  %103 = select i1 %102, i32 -828171619, i32 725213267
  br label %.backedge

104:                                              ; preds = %4
  br label %.backedge

105:                                              ; preds = %4
  %106 = add i32 %.082, 1
  br label %.backedge

107:                                              ; preds = %4
  br label %.backedge

108:                                              ; preds = %4
  %109 = load i32, i32* @n, align 4
  %.not96 = icmp sgt i32 %.080, %109
  %110 = select i1 %.not96, i32 766450765, i32 -1370981291
  br label %.backedge

111:                                              ; preds = %4
  %112 = sext i32 %.080 to i64
  %113 = getelementptr inbounds [200050 x i32], [200050 x i32]* @a, i64 0, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = sub i32 2001, %114
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds [200050 x i32], [200050 x i32]* @b, i64 0, i64 %112
  %118 = load i32, i32* %117, align 4
  %119 = sub i32 2001, %118
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @dp, i64 0, i64 %116, i64 %120
  %122 = load i32, i32* %121, align 4
  %.neg95 = add i32 %122, 1
  store i32 %.neg95, i32* %121, align 4
  br label %.backedge

123:                                              ; preds = %4
  %124 = add i32 %.080, 1
  br label %.backedge

125:                                              ; preds = %4
  %126 = load i32, i32* @x.7, align 4
  %127 = load i32, i32* @y.8, align 4
  %128 = add i32 %126, -1
  %129 = mul i32 %128, %126
  %130 = and i32 %129, 1
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %132, %131
  %134 = select i1 %133, i32 -1367114084, i32 -706977174
  br label %.backedge

135:                                              ; preds = %4
  %136 = load i32, i32* @x.7, align 4
  %137 = load i32, i32* @y.8, align 4
  %138 = add i32 %136, -1
  %139 = mul i32 %138, %136
  %140 = and i32 %139, 1
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %142, %141
  %144 = select i1 %143, i32 -1234219887, i32 -706977174
  br label %.backedge

145:                                              ; preds = %4
  br label %.backedge

146:                                              ; preds = %4
  %147 = load i32, i32* @x.7, align 4
  %148 = load i32, i32* @y.8, align 4
  %149 = add i32 %147, -1
  %150 = mul i32 %149, %147
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 -1712383330, i32 -1471539173
  br label %.backedge

156:                                              ; preds = %4
  %157 = icmp slt i32 %.078, 4006
  store i1 %157, i1* %2, align 1
  %158 = load i32, i32* @x.7, align 4
  %159 = load i32, i32* @y.8, align 4
  %160 = add i32 %158, -1
  %161 = mul i32 %160, %158
  %162 = and i32 %161, 1
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %164, %163
  %166 = select i1 %165, i32 -379029443, i32 -1471539173
  br label %.backedge

167:                                              ; preds = %4
  %.0..0..0.68 = load volatile i1, i1* %2, align 1
  %168 = select i1 %.0..0..0.68, i32 808974196, i32 466648726
  br label %.backedge

169:                                              ; preds = %4
  br label %.backedge

170:                                              ; preds = %4
  %171 = load i32, i32* @x.7, align 4
  %172 = load i32, i32* @y.8, align 4
  %173 = add i32 %171, -1
  %174 = mul i32 %173, %171
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %177, %176
  %179 = select i1 %178, i32 -1877162884, i32 1334883794
  br label %.backedge

180:                                              ; preds = %4
  %181 = icmp slt i32 %.076, 4006
  store i1 %181, i1* %1, align 1
  %182 = load i32, i32* @x.7, align 4
  %183 = load i32, i32* @y.8, align 4
  %184 = add i32 %182, -1
  %185 = mul i32 %184, %182
  %186 = and i32 %185, 1
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %188, %187
  %190 = select i1 %189, i32 -1521058196, i32 1334883794
  br label %.backedge

191:                                              ; preds = %4
  %.0..0..0.69 = load volatile i1, i1* %1, align 1
  %192 = select i1 %.0..0..0.69, i32 -2071889308, i32 -938844207
  br label %.backedge

193:                                              ; preds = %4
  %194 = add i32 %.078, -1
  %195 = sext i32 %194 to i64
  %196 = sext i32 %.076 to i64
  %197 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @dp, i64 0, i64 %195, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = sext i32 %.078 to i64
  %200 = add i32 %.076, -1
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @dp, i64 0, i64 %199, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = add i32 %203, %198
  %205 = srem i32 %204, 1000000007
  %206 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @dp, i64 0, i64 %199, i64 %196
  %207 = load i32, i32* %206, align 4
  %208 = add i32 %205, %207
  %209 = srem i32 %208, 1000000007
  store i32 %209, i32* %206, align 4
  br label %.backedge

210:                                              ; preds = %4
  %211 = add i32 %.076, 1
  br label %.backedge

212:                                              ; preds = %4
  br label %.backedge

213:                                              ; preds = %4
  %214 = add i32 %.078, 1
  br label %.backedge

215:                                              ; preds = %4
  br label %.backedge

216:                                              ; preds = %4
  %217 = load i32, i32* @n, align 4
  %.not94 = icmp sgt i32 %.072, %217
  %218 = select i1 %.not94, i32 527951838, i32 -1280629103
  br label %.backedge

219:                                              ; preds = %4
  %220 = load i32, i32* @x.7, align 4
  %221 = load i32, i32* @y.8, align 4
  %222 = add i32 %220, -1
  %223 = mul i32 %222, %220
  %224 = and i32 %223, 1
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %226, %225
  %228 = select i1 %227, i32 197886521, i32 1874537265
  br label %.backedge

229:                                              ; preds = %4
  %230 = sext i32 %.072 to i64
  %231 = getelementptr inbounds [200050 x i32], [200050 x i32]* @a, i64 0, i64 %230
  %232 = load i32, i32* %231, align 4
  %233 = add i32 %232, 2001
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [200050 x i32], [200050 x i32]* @b, i64 0, i64 %230
  %236 = load i32, i32* %235, align 4
  %237 = add i32 %236, 2001
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @dp, i64 0, i64 %234, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = sext i32 %240 to i64
  %242 = add i64 %.074, %241
  %243 = srem i64 %242, 1000000007
  %244 = load i32, i32* @x.7, align 4
  %245 = load i32, i32* @y.8, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 1455610664, i32 1874537265
  br label %.backedge

253:                                              ; preds = %4
  br label %.backedge

254:                                              ; preds = %4
  %255 = load i32, i32* @x.7, align 4
  %256 = load i32, i32* @y.8, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 1427507675, i32 317581479
  br label %.backedge

264:                                              ; preds = %4
  %265 = add i32 %.072, 1
  %266 = load i32, i32* @x.7, align 4
  %267 = load i32, i32* @y.8, align 4
  %268 = add i32 %266, -1
  %269 = mul i32 %268, %266
  %270 = and i32 %269, 1
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %272, %271
  %274 = select i1 %273, i32 1639483785, i32 317581479
  br label %.backedge

275:                                              ; preds = %4
  br label %.backedge

276:                                              ; preds = %4
  br label %.backedge

277:                                              ; preds = %4
  %278 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.070, %278
  %279 = select i1 %.not, i32 -2043082866, i32 -320661069
  br label %.backedge

280:                                              ; preds = %4
  %281 = load i32, i32* @x.7, align 4
  %282 = load i32, i32* @y.8, align 4
  %283 = add i32 %281, -1
  %284 = mul i32 %283, %281
  %285 = and i32 %284, 1
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %287, %286
  %289 = select i1 %288, i32 -23346279, i32 -91008070
  br label %.backedge

290:                                              ; preds = %4
  %291 = sext i32 %.070 to i64
  %292 = getelementptr inbounds [200050 x i32], [200050 x i32]* @a, i64 0, i64 %291
  %293 = load i32, i32* %292, align 4
  %294 = getelementptr inbounds [200050 x i32], [200050 x i32]* @b, i64 0, i64 %291
  %295 = load i32, i32* %294, align 4
  %.neg9192 = add i32 %295, %293
  %.neg93 = shl i32 %.neg9192, 1
  %reass.add = shl i32 %293, 1
  %296 = tail call i64 @_Z1Cii(i32 %.neg93, i32 %reass.add)
  %297 = add i64 %.074, 1000000007
  %298 = sub i64 %297, %296
  %299 = srem i64 %298, 1000000007
  %300 = load i32, i32* @x.7, align 4
  %301 = load i32, i32* @y.8, align 4
  %302 = add i32 %300, -1
  %303 = mul i32 %302, %300
  %304 = and i32 %303, 1
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %306, %305
  %308 = select i1 %307, i32 -2080375851, i32 -91008070
  br label %.backedge

309:                                              ; preds = %4
  br label %.backedge

310:                                              ; preds = %4
  %311 = load i32, i32* @x.7, align 4
  %312 = load i32, i32* @y.8, align 4
  %313 = add i32 %311, -1
  %314 = mul i32 %313, %311
  %315 = and i32 %314, 1
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %317, %316
  %319 = select i1 %318, i32 1542432379, i32 1612600519
  br label %.backedge

320:                                              ; preds = %4
  %321 = add i32 %.070, 1
  %322 = load i32, i32* @x.7, align 4
  %323 = load i32, i32* @y.8, align 4
  %324 = add i32 %322, -1
  %325 = mul i32 %324, %322
  %326 = and i32 %325, 1
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %328, %327
  %330 = select i1 %329, i32 -134539253, i32 1612600519
  br label %.backedge

331:                                              ; preds = %4
  br label %.backedge

332:                                              ; preds = %4
  %333 = tail call i64 @_Z3ksmxi(i64 2, i32 1000000005)
  %334 = mul nsw i64 %333, %.074
  %335 = srem i64 %334, 1000000007
  %336 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 %335)
  ret i32 0

337:                                              ; preds = %4
  br label %.backedge

338:                                              ; preds = %4
  %339 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull @n)
  br label %.backedge

340:                                              ; preds = %4
  %341 = sext i32 %.082 to i64
  %342 = getelementptr inbounds [200050 x i32], [200050 x i32]* @a, i64 0, i64 %341
  %343 = getelementptr inbounds [200050 x i32], [200050 x i32]* @b, i64 0, i64 %341
  %344 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %342, i32* nonnull %343)
  br label %.backedge

345:                                              ; preds = %4
  br label %.backedge

346:                                              ; preds = %4
  br label %.backedge

347:                                              ; preds = %4
  br label %.backedge

348:                                              ; preds = %4
  %349 = sext i32 %.072 to i64
  %350 = getelementptr inbounds [200050 x i32], [200050 x i32]* @a, i64 0, i64 %349
  %351 = load i32, i32* %350, align 4
  %352 = add i32 %351, 2001
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds [200050 x i32], [200050 x i32]* @b, i64 0, i64 %349
  %355 = load i32, i32* %354, align 4
  %.neg = add i32 %355, 2001
  %356 = sext i32 %.neg to i64
  %357 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @dp, i64 0, i64 %353, i64 %356
  %358 = load i32, i32* %357, align 4
  %359 = sext i32 %358 to i64
  %360 = add i64 %.074, %359
  %361 = srem i64 %360, 1000000007
  br label %.backedge

362:                                              ; preds = %4
  %363 = add i32 %.072, 1
  br label %.backedge

364:                                              ; preds = %4
  %365 = sext i32 %.070 to i64
  %366 = getelementptr inbounds [200050 x i32], [200050 x i32]* @a, i64 0, i64 %365
  %367 = load i32, i32* %366, align 4
  %368 = getelementptr inbounds [200050 x i32], [200050 x i32]* @b, i64 0, i64 %365
  %369 = load i32, i32* %368, align 4
  %reass.add89 = add i32 %369, %367
  %370 = shl i32 %reass.add89, 1
  %371 = shl i32 %367, 1
  %372 = tail call i64 @_Z1Cii(i32 %370, i32 %371)
  %373 = add i64 %.074, 1000000007
  %374 = sub i64 %373, %372
  %375 = srem i64 %374, 1000000007
  br label %.backedge

376:                                              ; preds = %4
  %377 = add i32 %.070, 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s288944002.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
