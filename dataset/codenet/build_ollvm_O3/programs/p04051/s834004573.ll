; ModuleID = 'build_ollvm/programs/p04051/s834004573.ll'
source_filename = "Project_CodeNet_C++1400/p04051/s834004573.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z4readv = comdat any

$_Z1Zi = comdat any

$_Z1Cii = comdat any

$_Z3ksmii = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@P = local_unnamed_addr global i32 2010, align 4
@n = local_unnamed_addr global i32 0, align 4
@f = local_unnamed_addr global [4100 x [4100 x i32]] zeroinitializer, align 16
@A = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@B = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@fac = local_unnamed_addr global [8200 x i32] zeroinitializer, align 16
@inv = local_unnamed_addr global [8200 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s834004573.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  store i32 1, i32* getelementptr inbounds ([8200 x i32], [8200 x i32]* @fac, i64 0, i64 0), align 16
  br label %4

4:                                                ; preds = %.backedge, %0
  %.078 = phi i32 [ 1, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.0 = phi i32 [ 1141296199, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1141296199, label %5
    i32 -246801546, label %15
    i32 -684441549, label %28
    i32 2020574219, label %30
    i32 -1159336116, label %41
    i32 -361831077, label %43
    i32 1030180788, label %44
    i32 -2144966056, label %48
    i32 1808758759, label %58
    i32 988375986, label %81
    i32 212116551, label %82
    i32 550718294, label %83
    i32 1766579067, label %84
    i32 -1137880222, label %88
    i32 547566911, label %98
    i32 -1509813557, label %120
    i32 -1771535832, label %121
    i32 -1061451250, label %123
    i32 -656962522, label %126
    i32 1552708412, label %136
    i32 1276295166, label %148
    i32 -36814555, label %150
    i32 -537661704, label %165
    i32 -1650211975, label %167
    i32 -1765097372, label %177
    i32 1397225021, label %189
    i32 2030970176, label %190
    i32 1005492728, label %193
    i32 1465029916, label %196
    i32 -1835600781, label %199
    i32 -611217694, label %225
    i32 1969577565, label %227
    i32 450842184, label %228
    i32 1574118479, label %230
    i32 951946299, label %231
    i32 -708899207, label %234
    i32 -847707851, label %244
    i32 -1429240399, label %268
    i32 1956690513, label %269
    i32 593069346, label %270
    i32 162131910, label %271
    i32 1511316778, label %281
    i32 1318725149, label %293
    i32 -360690906, label %295
    i32 1326269169, label %308
    i32 -859917780, label %318
    i32 212334761, label %329
    i32 1224580224, label %330
    i32 1127634104, label %340
    i32 998622039, label %356
    i32 1624474958, label %357
    i32 1926852438, label %358
    i32 1732269219, label %372
    i32 -958422601, label %385
    i32 608920471, label %386
    i32 1631384843, label %389
    i32 -333281019, label %404
    i32 -634739976, label %405
    i32 1348051276, label %407
  ]

.backedge:                                        ; preds = %4, %407, %405, %404, %389, %386, %385, %372, %358, %357, %340, %330, %329, %318, %308, %295, %293, %281, %271, %270, %269, %268, %244, %234, %231, %230, %228, %227, %225, %199, %196, %193, %190, %189, %177, %167, %165, %150, %148, %136, %126, %123, %121, %120, %98, %88, %84, %83, %82, %81, %58, %48, %44, %43, %41, %30, %28, %15, %5
  %.078.be = phi i32 [ %.078, %4 ], [ %.078, %407 ], [ %.078, %405 ], [ %.078, %404 ], [ %.078, %389 ], [ %.078, %386 ], [ %.078, %385 ], [ %.078, %372 ], [ %.078, %358 ], [ %.078, %357 ], [ %.078, %340 ], [ %.078, %330 ], [ %.078, %329 ], [ %.078, %318 ], [ %.078, %308 ], [ %.078, %295 ], [ %.078, %293 ], [ %.078, %281 ], [ %.078, %271 ], [ %.078, %270 ], [ %.078, %269 ], [ %.078, %268 ], [ %.078, %244 ], [ %.078, %234 ], [ %.078, %231 ], [ %.078, %230 ], [ %.078, %228 ], [ %.078, %227 ], [ %.078, %225 ], [ %.078, %199 ], [ %.078, %196 ], [ %.078, %193 ], [ %.078, %190 ], [ %.078, %189 ], [ %.078, %177 ], [ %.078, %167 ], [ %.078, %165 ], [ %.078, %150 ], [ %.078, %148 ], [ %.078, %136 ], [ %.078, %126 ], [ %.078, %123 ], [ %.078, %121 ], [ %.078, %120 ], [ %.078, %98 ], [ %.078, %88 ], [ %.078, %84 ], [ %.078, %83 ], [ %.078, %82 ], [ %.078, %81 ], [ %.078, %58 ], [ %.078, %48 ], [ %.078, %44 ], [ %.078, %43 ], [ %42, %41 ], [ %.078, %30 ], [ %.078, %28 ], [ %.078, %15 ], [ %.078, %5 ]
  %.076.be = phi i32 [ %.076, %4 ], [ %.076, %407 ], [ %.076, %405 ], [ %.076, %404 ], [ %.076, %389 ], [ %.076, %386 ], [ %.076, %385 ], [ %.076, %372 ], [ %.076, %358 ], [ %.076, %357 ], [ %.076, %340 ], [ %.076, %330 ], [ %.076, %329 ], [ %.076, %318 ], [ %.076, %308 ], [ %.076, %295 ], [ %.076, %293 ], [ %.076, %281 ], [ %.076, %271 ], [ %.076, %270 ], [ %.076, %269 ], [ %.076, %268 ], [ %.076, %244 ], [ %.076, %234 ], [ %.076, %231 ], [ %.076, %230 ], [ %.076, %228 ], [ %.076, %227 ], [ %.076, %225 ], [ %.076, %199 ], [ %.076, %196 ], [ %.076, %193 ], [ %.076, %190 ], [ %.076, %189 ], [ %.076, %177 ], [ %.076, %167 ], [ %.076, %165 ], [ %.076, %150 ], [ %.076, %148 ], [ %.076, %136 ], [ %.076, %126 ], [ %.076, %123 ], [ %.076, %121 ], [ %.076, %120 ], [ %.076, %98 ], [ %.076, %88 ], [ %.076, %84 ], [ %.076, %83 ], [ %.neg85, %82 ], [ %.076, %81 ], [ %.076, %58 ], [ %.076, %48 ], [ %.076, %44 ], [ 2, %43 ], [ %.076, %41 ], [ %.076, %30 ], [ %.076, %28 ], [ %.076, %15 ], [ %.076, %5 ]
  %.074.be = phi i32 [ %.074, %4 ], [ %.074, %407 ], [ %.074, %405 ], [ %.074, %404 ], [ %.074, %389 ], [ %.074, %386 ], [ %.074, %385 ], [ %.074, %372 ], [ %.074, %358 ], [ %.074, %357 ], [ %.074, %340 ], [ %.074, %330 ], [ %.074, %329 ], [ %.074, %318 ], [ %.074, %308 ], [ %.074, %295 ], [ %.074, %293 ], [ %.074, %281 ], [ %.074, %271 ], [ %.074, %270 ], [ %.074, %269 ], [ %.074, %268 ], [ %.074, %244 ], [ %.074, %234 ], [ %.074, %231 ], [ %.074, %230 ], [ %.074, %228 ], [ %.074, %227 ], [ %.074, %225 ], [ %.074, %199 ], [ %.074, %196 ], [ %.074, %193 ], [ %.074, %190 ], [ %.074, %189 ], [ %.074, %177 ], [ %.074, %167 ], [ %.074, %165 ], [ %.074, %150 ], [ %.074, %148 ], [ %.074, %136 ], [ %.074, %126 ], [ %.074, %123 ], [ %122, %121 ], [ %.074, %120 ], [ %.074, %98 ], [ %.074, %88 ], [ %.074, %84 ], [ 1, %83 ], [ %.074, %82 ], [ %.074, %81 ], [ %.074, %58 ], [ %.074, %48 ], [ %.074, %44 ], [ %.074, %43 ], [ %.074, %41 ], [ %.074, %30 ], [ %.074, %28 ], [ %.074, %15 ], [ %.074, %5 ]
  %.072.be = phi i32 [ %.072, %4 ], [ %.072, %407 ], [ %.072, %405 ], [ %.072, %404 ], [ %.072, %389 ], [ %.072, %386 ], [ %.072, %385 ], [ %.072, %372 ], [ %.072, %358 ], [ %.072, %357 ], [ %.072, %340 ], [ %.072, %330 ], [ %.072, %329 ], [ %.072, %318 ], [ %.072, %308 ], [ %.072, %295 ], [ %.072, %293 ], [ %.072, %281 ], [ %.072, %271 ], [ %.072, %270 ], [ %.072, %269 ], [ %.072, %268 ], [ %.072, %244 ], [ %.072, %234 ], [ %.072, %231 ], [ %.072, %230 ], [ %.072, %228 ], [ %.072, %227 ], [ %.072, %225 ], [ %.072, %199 ], [ %.072, %196 ], [ %.072, %193 ], [ %.072, %190 ], [ %.072, %189 ], [ %.072, %177 ], [ %.072, %167 ], [ %166, %165 ], [ %.072, %150 ], [ %.072, %148 ], [ %.072, %136 ], [ %.072, %126 ], [ 1, %123 ], [ %.072, %121 ], [ %.072, %120 ], [ %.072, %98 ], [ %.072, %88 ], [ %.072, %84 ], [ %.072, %83 ], [ %.072, %82 ], [ %.072, %81 ], [ %.072, %58 ], [ %.072, %48 ], [ %.072, %44 ], [ %.072, %43 ], [ %.072, %41 ], [ %.072, %30 ], [ %.072, %28 ], [ %.072, %15 ], [ %.072, %5 ]
  %.070.be = phi i32 [ %.070, %4 ], [ %.070, %407 ], [ %.070, %405 ], [ %.070, %404 ], [ %.070, %389 ], [ %388, %386 ], [ %.070, %385 ], [ %.070, %372 ], [ %.070, %358 ], [ %.070, %357 ], [ %.070, %340 ], [ %.070, %330 ], [ %.070, %329 ], [ %.070, %318 ], [ %.070, %308 ], [ %.070, %295 ], [ %.070, %293 ], [ %.070, %281 ], [ %.070, %271 ], [ %.070, %270 ], [ %.070, %269 ], [ %.070, %268 ], [ %.070, %244 ], [ %.070, %234 ], [ %.070, %231 ], [ %.070, %230 ], [ %229, %228 ], [ %.070, %227 ], [ %.070, %225 ], [ %.070, %199 ], [ %.070, %196 ], [ %.070, %193 ], [ %.070, %190 ], [ %.070, %189 ], [ %179, %177 ], [ %.070, %167 ], [ %.070, %165 ], [ %.070, %150 ], [ %.070, %148 ], [ %.070, %136 ], [ %.070, %126 ], [ %.070, %123 ], [ %.070, %121 ], [ %.070, %120 ], [ %.070, %98 ], [ %.070, %88 ], [ %.070, %84 ], [ %.070, %83 ], [ %.070, %82 ], [ %.070, %81 ], [ %.070, %58 ], [ %.070, %48 ], [ %.070, %44 ], [ %.070, %43 ], [ %.070, %41 ], [ %.070, %30 ], [ %.070, %28 ], [ %.070, %15 ], [ %.070, %5 ]
  %.068.be = phi i32 [ %.068, %4 ], [ %.068, %407 ], [ %.068, %405 ], [ %.068, %404 ], [ %.068, %389 ], [ %.068, %386 ], [ %.068, %385 ], [ %.068, %372 ], [ %.068, %358 ], [ %.068, %357 ], [ %.068, %340 ], [ %.068, %330 ], [ %.068, %329 ], [ %.068, %318 ], [ %.068, %308 ], [ %.068, %295 ], [ %.068, %293 ], [ %.068, %281 ], [ %.068, %271 ], [ %.068, %270 ], [ %.068, %269 ], [ %.068, %268 ], [ %.068, %244 ], [ %.068, %234 ], [ %.068, %231 ], [ %.068, %230 ], [ %.068, %228 ], [ %.068, %227 ], [ %226, %225 ], [ %.068, %199 ], [ %.068, %196 ], [ %195, %193 ], [ %.068, %190 ], [ %.068, %189 ], [ %.068, %177 ], [ %.068, %167 ], [ %.068, %165 ], [ %.068, %150 ], [ %.068, %148 ], [ %.068, %136 ], [ %.068, %126 ], [ %.068, %123 ], [ %.068, %121 ], [ %.068, %120 ], [ %.068, %98 ], [ %.068, %88 ], [ %.068, %84 ], [ %.068, %83 ], [ %.068, %82 ], [ %.068, %81 ], [ %.068, %58 ], [ %.068, %48 ], [ %.068, %44 ], [ %.068, %43 ], [ %.068, %41 ], [ %.068, %30 ], [ %.068, %28 ], [ %.068, %15 ], [ %.068, %5 ]
  %.066.be = phi i32 [ %.066, %4 ], [ %.066, %407 ], [ %.066, %405 ], [ %.066, %404 ], [ %403, %389 ], [ %.066, %386 ], [ %.066, %385 ], [ %.066, %372 ], [ %.066, %358 ], [ %.066, %357 ], [ %.066, %340 ], [ %.066, %330 ], [ %.066, %329 ], [ %.066, %318 ], [ %.066, %308 ], [ %307, %295 ], [ %.066, %293 ], [ %.066, %281 ], [ %.066, %271 ], [ %.066, %270 ], [ %.066, %269 ], [ %.066, %268 ], [ %258, %244 ], [ %.066, %234 ], [ %.066, %231 ], [ 0, %230 ], [ %.066, %228 ], [ %.066, %227 ], [ %.066, %225 ], [ %.066, %199 ], [ %.066, %196 ], [ %.066, %193 ], [ %.066, %190 ], [ %.066, %189 ], [ %.066, %177 ], [ %.066, %167 ], [ %.066, %165 ], [ %.066, %150 ], [ %.066, %148 ], [ %.066, %136 ], [ %.066, %126 ], [ %.066, %123 ], [ %.066, %121 ], [ %.066, %120 ], [ %.066, %98 ], [ %.066, %88 ], [ %.066, %84 ], [ %.066, %83 ], [ %.066, %82 ], [ %.066, %81 ], [ %.066, %58 ], [ %.066, %48 ], [ %.066, %44 ], [ %.066, %43 ], [ %.066, %41 ], [ %.066, %30 ], [ %.066, %28 ], [ %.066, %15 ], [ %.066, %5 ]
  %.064.be = phi i32 [ %.064, %4 ], [ %.064, %407 ], [ %.064, %405 ], [ %.064, %404 ], [ %.064, %389 ], [ %.064, %386 ], [ %.064, %385 ], [ %.064, %372 ], [ %.064, %358 ], [ %.064, %357 ], [ %.064, %340 ], [ %.064, %330 ], [ %.064, %329 ], [ %.064, %318 ], [ %.064, %308 ], [ %.064, %295 ], [ %.064, %293 ], [ %.064, %281 ], [ %.064, %271 ], [ %.064, %270 ], [ %.neg, %269 ], [ %.064, %268 ], [ %.064, %244 ], [ %.064, %234 ], [ %.064, %231 ], [ 1, %230 ], [ %.064, %228 ], [ %.064, %227 ], [ %.064, %225 ], [ %.064, %199 ], [ %.064, %196 ], [ %.064, %193 ], [ %.064, %190 ], [ %.064, %189 ], [ %.064, %177 ], [ %.064, %167 ], [ %.064, %165 ], [ %.064, %150 ], [ %.064, %148 ], [ %.064, %136 ], [ %.064, %126 ], [ %.064, %123 ], [ %.064, %121 ], [ %.064, %120 ], [ %.064, %98 ], [ %.064, %88 ], [ %.064, %84 ], [ %.064, %83 ], [ %.064, %82 ], [ %.064, %81 ], [ %.064, %58 ], [ %.064, %48 ], [ %.064, %44 ], [ %.064, %43 ], [ %.064, %41 ], [ %.064, %30 ], [ %.064, %28 ], [ %.064, %15 ], [ %.064, %5 ]
  %.062.be = phi i32 [ %.062, %4 ], [ %.062, %407 ], [ %406, %405 ], [ %.062, %404 ], [ %.062, %389 ], [ %.062, %386 ], [ %.062, %385 ], [ %.062, %372 ], [ %.062, %358 ], [ %.062, %357 ], [ %.062, %340 ], [ %.062, %330 ], [ %.062, %329 ], [ %319, %318 ], [ %.062, %308 ], [ %.062, %295 ], [ %.062, %293 ], [ %.062, %281 ], [ %.062, %271 ], [ 1, %270 ], [ %.062, %269 ], [ %.062, %268 ], [ %.062, %244 ], [ %.062, %234 ], [ %.062, %231 ], [ %.062, %230 ], [ %.062, %228 ], [ %.062, %227 ], [ %.062, %225 ], [ %.062, %199 ], [ %.062, %196 ], [ %.062, %193 ], [ %.062, %190 ], [ %.062, %189 ], [ %.062, %177 ], [ %.062, %167 ], [ %.062, %165 ], [ %.062, %150 ], [ %.062, %148 ], [ %.062, %136 ], [ %.062, %126 ], [ %.062, %123 ], [ %.062, %121 ], [ %.062, %120 ], [ %.062, %98 ], [ %.062, %88 ], [ %.062, %84 ], [ %.062, %83 ], [ %.062, %82 ], [ %.062, %81 ], [ %.062, %58 ], [ %.062, %48 ], [ %.062, %44 ], [ %.062, %43 ], [ %.062, %41 ], [ %.062, %30 ], [ %.062, %28 ], [ %.062, %15 ], [ %.062, %5 ]
  %.0.be = phi i32 [ %.0, %4 ], [ 1127634104, %407 ], [ -859917780, %405 ], [ 1511316778, %404 ], [ -847707851, %389 ], [ -1765097372, %386 ], [ 1552708412, %385 ], [ 547566911, %372 ], [ 1808758759, %358 ], [ -246801546, %357 ], [ %355, %340 ], [ %339, %330 ], [ 162131910, %329 ], [ %328, %318 ], [ %317, %308 ], [ 1326269169, %295 ], [ %294, %293 ], [ %292, %281 ], [ %280, %271 ], [ 162131910, %270 ], [ 951946299, %269 ], [ 1956690513, %268 ], [ %267, %244 ], [ %243, %234 ], [ %233, %231 ], [ 951946299, %230 ], [ 2030970176, %228 ], [ 450842184, %227 ], [ 1465029916, %225 ], [ -611217694, %199 ], [ %198, %196 ], [ 1465029916, %193 ], [ %192, %190 ], [ 2030970176, %189 ], [ %188, %177 ], [ %176, %167 ], [ -656962522, %165 ], [ -537661704, %150 ], [ %149, %148 ], [ %147, %136 ], [ %135, %126 ], [ -656962522, %123 ], [ 1766579067, %121 ], [ -1771535832, %120 ], [ %119, %98 ], [ %97, %88 ], [ %87, %84 ], [ 1766579067, %83 ], [ 1030180788, %82 ], [ 212116551, %81 ], [ %80, %58 ], [ %57, %48 ], [ %47, %44 ], [ 1030180788, %43 ], [ 1141296199, %41 ], [ -1159336116, %30 ], [ %29, %28 ], [ %27, %15 ], [ %14, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = load i32, i32* @x.1, align 4
  %7 = load i32, i32* @y.2, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %12, %11
  %14 = select i1 %13, i32 -246801546, i32 1624474958
  br label %.backedge

15:                                               ; preds = %4
  %16 = load i32, i32* @P, align 4
  %17 = shl i32 %16, 2
  %18 = icmp sle i32 %.078, %17
  store i1 %18, i1* %3, align 1
  %19 = load i32, i32* @x.1, align 4
  %20 = load i32, i32* @y.2, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 -684441549, i32 1624474958
  br label %.backedge

28:                                               ; preds = %4
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %29 = select i1 %.0..0..0., i32 2020574219, i32 -361831077
  br label %.backedge

30:                                               ; preds = %4
  %31 = add i32 %.078, -1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [8200 x i32], [8200 x i32]* @fac, i64 0, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  %36 = sext i32 %.078 to i64
  %37 = mul nsw i64 %35, %36
  %38 = srem i64 %37, 1000000007
  %39 = trunc i64 %38 to i32
  %40 = getelementptr inbounds [8200 x i32], [8200 x i32]* @fac, i64 0, i64 %36
  store i32 %39, i32* %40, align 4
  br label %.backedge

41:                                               ; preds = %4
  %42 = add i32 %.078, 1
  br label %.backedge

43:                                               ; preds = %4
  store i32 1, i32* getelementptr inbounds ([8200 x i32], [8200 x i32]* @inv, i64 0, i64 1), align 4
  store i32 1, i32* getelementptr inbounds ([8200 x i32], [8200 x i32]* @inv, i64 0, i64 0), align 16
  br label %.backedge

44:                                               ; preds = %4
  %45 = load i32, i32* @P, align 4
  %46 = shl i32 %45, 2
  %.not86 = icmp sgt i32 %.076, %46
  %47 = select i1 %.not86, i32 550718294, i32 -2144966056
  br label %.backedge

48:                                               ; preds = %4
  %49 = load i32, i32* @x.1, align 4
  %50 = load i32, i32* @y.2, align 4
  %51 = add i32 %49, -1
  %52 = mul i32 %51, %49
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %55, %54
  %57 = select i1 %56, i32 1808758759, i32 1926852438
  br label %.backedge

58:                                               ; preds = %4
  %59 = srem i32 1000000007, %.076
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = sext i32 %62 to i64
  %64 = sdiv i32 1000000007, %.076
  %65 = sub nsw i32 1000000007, %64
  %66 = zext i32 %65 to i64
  %67 = mul nsw i64 %66, %63
  %68 = srem i64 %67, 1000000007
  %69 = trunc i64 %68 to i32
  %70 = sext i32 %.076 to i64
  %71 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %70
  store i32 %69, i32* %71, align 4
  %72 = load i32, i32* @x.1, align 4
  %73 = load i32, i32* @y.2, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 988375986, i32 1926852438
  br label %.backedge

81:                                               ; preds = %4
  br label %.backedge

82:                                               ; preds = %4
  %.neg85 = add i32 %.076, 1
  br label %.backedge

83:                                               ; preds = %4
  br label %.backedge

84:                                               ; preds = %4
  %85 = load i32, i32* @P, align 4
  %86 = shl i32 %85, 2
  %.not84 = icmp sgt i32 %.074, %86
  %87 = select i1 %.not84, i32 -1061451250, i32 -1137880222
  br label %.backedge

88:                                               ; preds = %4
  %89 = load i32, i32* @x.1, align 4
  %90 = load i32, i32* @y.2, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 547566911, i32 1732269219
  br label %.backedge

98:                                               ; preds = %4
  %99 = sext i32 %.074 to i64
  %100 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %101 to i64
  %103 = add i32 %.074, -1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = sext i32 %106 to i64
  %108 = mul nsw i64 %107, %102
  %109 = srem i64 %108, 1000000007
  %110 = trunc i64 %109 to i32
  store i32 %110, i32* %100, align 4
  %111 = load i32, i32* @x.1, align 4
  %112 = load i32, i32* @y.2, align 4
  %113 = add i32 %111, -1
  %114 = mul i32 %113, %111
  %115 = and i32 %114, 1
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %117, %116
  %119 = select i1 %118, i32 -1509813557, i32 1732269219
  br label %.backedge

120:                                              ; preds = %4
  br label %.backedge

121:                                              ; preds = %4
  %122 = add i32 %.074, 1
  br label %.backedge

123:                                              ; preds = %4
  %124 = tail call i64 @_Z4readv()
  %125 = trunc i64 %124 to i32
  store i32 %125, i32* @n, align 4
  br label %.backedge

126:                                              ; preds = %4
  %127 = load i32, i32* @x.1, align 4
  %128 = load i32, i32* @y.2, align 4
  %129 = add i32 %127, -1
  %130 = mul i32 %129, %127
  %131 = and i32 %130, 1
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %133, %132
  %135 = select i1 %134, i32 1552708412, i32 -958422601
  br label %.backedge

136:                                              ; preds = %4
  %137 = load i32, i32* @n, align 4
  %138 = icmp sle i32 %.072, %137
  store i1 %138, i1* %2, align 1
  %139 = load i32, i32* @x.1, align 4
  %140 = load i32, i32* @y.2, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 1276295166, i32 -958422601
  br label %.backedge

148:                                              ; preds = %4
  %.0..0..0.60 = load volatile i1, i1* %2, align 1
  %149 = select i1 %.0..0..0.60, i32 -36814555, i32 -1650211975
  br label %.backedge

150:                                              ; preds = %4
  %151 = tail call i64 @_Z4readv()
  %152 = trunc i64 %151 to i32
  %153 = sext i32 %.072 to i64
  %154 = getelementptr inbounds [200010 x i32], [200010 x i32]* @A, i64 0, i64 %153
  store i32 %152, i32* %154, align 4
  %155 = tail call i64 @_Z4readv()
  %156 = trunc i64 %155 to i32
  %157 = getelementptr inbounds [200010 x i32], [200010 x i32]* @B, i64 0, i64 %153
  store i32 %156, i32* %157, align 4
  %158 = load i32, i32* %154, align 4
  %159 = load i32, i32* @P, align 4
  %.neg82 = sub i32 %159, %158
  %160 = sext i32 %.neg82 to i64
  %.neg83 = sub i32 %159, %156
  %161 = sext i32 %.neg83 to i64
  %162 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @f, i64 0, i64 %160, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  store i32 %164, i32* %162, align 4
  br label %.backedge

165:                                              ; preds = %4
  %166 = add i32 %.072, 1
  br label %.backedge

167:                                              ; preds = %4
  %168 = load i32, i32* @x.1, align 4
  %169 = load i32, i32* @y.2, align 4
  %170 = add i32 %168, -1
  %171 = mul i32 %170, %168
  %172 = and i32 %171, 1
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %174, %173
  %176 = select i1 %175, i32 -1765097372, i32 608920471
  br label %.backedge

177:                                              ; preds = %4
  %178 = load i32, i32* @P, align 4
  %179 = sub i32 1, %178
  %180 = load i32, i32* @x.1, align 4
  %181 = load i32, i32* @y.2, align 4
  %182 = add i32 %180, -1
  %183 = mul i32 %182, %180
  %184 = and i32 %183, 1
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %186, %185
  %188 = select i1 %187, i32 1397225021, i32 608920471
  br label %.backedge

189:                                              ; preds = %4
  br label %.backedge

190:                                              ; preds = %4
  %191 = load i32, i32* @P, align 4
  %.not81 = icmp sgt i32 %.070, %191
  %192 = select i1 %.not81, i32 1574118479, i32 1005492728
  br label %.backedge

193:                                              ; preds = %4
  %194 = load i32, i32* @P, align 4
  %195 = sub i32 1, %194
  br label %.backedge

196:                                              ; preds = %4
  %197 = load i32, i32* @P, align 4
  %.not80 = icmp sgt i32 %.068, %197
  %198 = select i1 %.not80, i32 1969577565, i32 -1835600781
  br label %.backedge

199:                                              ; preds = %4
  %200 = load i32, i32* @P, align 4
  %201 = add i32 %200, %.070
  %202 = sext i32 %201 to i64
  %203 = add i32 %200, %.068
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @f, i64 0, i64 %202, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = add i32 %201, -1
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @f, i64 0, i64 %208, i64 %204
  %210 = load i32, i32* %209, align 4
  %211 = add i32 %203, -1
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @f, i64 0, i64 %202, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = add i32 %214, %210
  %216 = tail call i32 @_Z1Zi(i32 %215)
  %217 = add i32 %216, %206
  %218 = tail call i32 @_Z1Zi(i32 %217)
  %219 = load i32, i32* @P, align 4
  %220 = add i32 %219, %.070
  %221 = sext i32 %220 to i64
  %222 = add i32 %219, %.068
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @f, i64 0, i64 %221, i64 %223
  store i32 %218, i32* %224, align 4
  br label %.backedge

225:                                              ; preds = %4
  %226 = add i32 %.068, 1
  br label %.backedge

227:                                              ; preds = %4
  br label %.backedge

228:                                              ; preds = %4
  %229 = add i32 %.070, 1
  br label %.backedge

230:                                              ; preds = %4
  br label %.backedge

231:                                              ; preds = %4
  %232 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.064, %232
  %233 = select i1 %.not, i32 593069346, i32 -708899207
  br label %.backedge

234:                                              ; preds = %4
  %235 = load i32, i32* @x.1, align 4
  %236 = load i32, i32* @y.2, align 4
  %237 = add i32 %235, -1
  %238 = mul i32 %237, %235
  %239 = and i32 %238, 1
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %241, %240
  %243 = select i1 %242, i32 -847707851, i32 1631384843
  br label %.backedge

244:                                              ; preds = %4
  %245 = sext i32 %.064 to i64
  %246 = getelementptr inbounds [200010 x i32], [200010 x i32]* @A, i64 0, i64 %245
  %247 = load i32, i32* %246, align 4
  %248 = load i32, i32* @P, align 4
  %249 = add i32 %248, %247
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [200010 x i32], [200010 x i32]* @B, i64 0, i64 %245
  %252 = load i32, i32* %251, align 4
  %253 = add i32 %252, %248
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @f, i64 0, i64 %250, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = add i32 %256, %.066
  %258 = tail call i32 @_Z1Zi(i32 %257)
  %259 = load i32, i32* @x.1, align 4
  %260 = load i32, i32* @y.2, align 4
  %261 = add i32 %259, -1
  %262 = mul i32 %261, %259
  %263 = and i32 %262, 1
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %265, %264
  %267 = select i1 %266, i32 -1429240399, i32 1631384843
  br label %.backedge

268:                                              ; preds = %4
  br label %.backedge

269:                                              ; preds = %4
  %.neg = add i32 %.064, 1
  br label %.backedge

270:                                              ; preds = %4
  br label %.backedge

271:                                              ; preds = %4
  %272 = load i32, i32* @x.1, align 4
  %273 = load i32, i32* @y.2, align 4
  %274 = add i32 %272, -1
  %275 = mul i32 %274, %272
  %276 = and i32 %275, 1
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %278, %277
  %280 = select i1 %279, i32 1511316778, i32 -333281019
  br label %.backedge

281:                                              ; preds = %4
  %282 = load i32, i32* @n, align 4
  %283 = icmp sle i32 %.062, %282
  store i1 %283, i1* %1, align 1
  %284 = load i32, i32* @x.1, align 4
  %285 = load i32, i32* @y.2, align 4
  %286 = add i32 %284, -1
  %287 = mul i32 %286, %284
  %288 = and i32 %287, 1
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %290, %289
  %292 = select i1 %291, i32 1318725149, i32 -333281019
  br label %.backedge

293:                                              ; preds = %4
  %.0..0..0.61 = load volatile i1, i1* %1, align 1
  %294 = select i1 %.0..0..0.61, i32 -360690906, i32 1224580224
  br label %.backedge

295:                                              ; preds = %4
  %296 = sext i32 %.062 to i64
  %297 = getelementptr inbounds [200010 x i32], [200010 x i32]* @A, i64 0, i64 %296
  %298 = load i32, i32* %297, align 4
  %299 = shl nsw i32 %298, 1
  %300 = getelementptr inbounds [200010 x i32], [200010 x i32]* @B, i64 0, i64 %296
  %301 = load i32, i32* %300, align 4
  %302 = add i32 %301, %298
  %303 = shl i32 %302, 1
  %304 = tail call i32 @_Z1Cii(i32 %303, i32 %299)
  %305 = add i32 %.066, 1000000007
  %306 = sub i32 %305, %304
  %307 = tail call i32 @_Z1Zi(i32 %306)
  br label %.backedge

308:                                              ; preds = %4
  %309 = load i32, i32* @x.1, align 4
  %310 = load i32, i32* @y.2, align 4
  %311 = add i32 %309, -1
  %312 = mul i32 %311, %309
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %315, %314
  %317 = select i1 %316, i32 -859917780, i32 -634739976
  br label %.backedge

318:                                              ; preds = %4
  %319 = add i32 %.062, 1
  %320 = load i32, i32* @x.1, align 4
  %321 = load i32, i32* @y.2, align 4
  %322 = add i32 %320, -1
  %323 = mul i32 %322, %320
  %324 = and i32 %323, 1
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %326, %325
  %328 = select i1 %327, i32 212334761, i32 -634739976
  br label %.backedge

329:                                              ; preds = %4
  br label %.backedge

330:                                              ; preds = %4
  %331 = load i32, i32* @x.1, align 4
  %332 = load i32, i32* @y.2, align 4
  %333 = add i32 %331, -1
  %334 = mul i32 %333, %331
  %335 = and i32 %334, 1
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %337, %336
  %339 = select i1 %338, i32 1127634104, i32 1348051276
  br label %.backedge

340:                                              ; preds = %4
  %341 = sext i32 %.066 to i64
  %342 = tail call i32 @_Z3ksmii(i32 2, i32 1000000005)
  %343 = sext i32 %342 to i64
  %344 = mul nsw i64 %343, %341
  %345 = srem i64 %344, 1000000007
  %346 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %345)
  %347 = load i32, i32* @x.1, align 4
  %348 = load i32, i32* @y.2, align 4
  %349 = add i32 %347, -1
  %350 = mul i32 %349, %347
  %351 = and i32 %350, 1
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %353, %352
  %355 = select i1 %354, i32 998622039, i32 1348051276
  br label %.backedge

356:                                              ; preds = %4
  ret i32 0

357:                                              ; preds = %4
  br label %.backedge

358:                                              ; preds = %4
  %359 = srem i32 1000000007, %.076
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %360
  %362 = load i32, i32* %361, align 4
  %363 = sext i32 %362 to i64
  %364 = sdiv i32 1000000007, %.076
  %365 = sub nsw i32 1000000007, %364
  %366 = zext i32 %365 to i64
  %367 = mul nsw i64 %366, %363
  %368 = srem i64 %367, 1000000007
  %369 = trunc i64 %368 to i32
  %370 = sext i32 %.076 to i64
  %371 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %370
  store i32 %369, i32* %371, align 4
  br label %.backedge

372:                                              ; preds = %4
  %373 = sext i32 %.074 to i64
  %374 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %373
  %375 = load i32, i32* %374, align 4
  %376 = sext i32 %375 to i64
  %377 = add i32 %.074, -1
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %378
  %380 = load i32, i32* %379, align 4
  %381 = sext i32 %380 to i64
  %382 = mul nsw i64 %381, %376
  %383 = srem i64 %382, 1000000007
  %384 = trunc i64 %383 to i32
  store i32 %384, i32* %374, align 4
  br label %.backedge

385:                                              ; preds = %4
  br label %.backedge

386:                                              ; preds = %4
  %387 = load i32, i32* @P, align 4
  %388 = sub i32 1, %387
  br label %.backedge

389:                                              ; preds = %4
  %390 = sext i32 %.064 to i64
  %391 = getelementptr inbounds [200010 x i32], [200010 x i32]* @A, i64 0, i64 %390
  %392 = load i32, i32* %391, align 4
  %393 = load i32, i32* @P, align 4
  %394 = add i32 %393, %392
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds [200010 x i32], [200010 x i32]* @B, i64 0, i64 %390
  %397 = load i32, i32* %396, align 4
  %398 = add i32 %397, %393
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds [4100 x [4100 x i32]], [4100 x [4100 x i32]]* @f, i64 0, i64 %395, i64 %399
  %401 = load i32, i32* %400, align 4
  %402 = add i32 %401, %.066
  %403 = tail call i32 @_Z1Zi(i32 %402)
  br label %.backedge

404:                                              ; preds = %4
  br label %.backedge

405:                                              ; preds = %4
  %406 = add i32 %.062, 1
  br label %.backedge

407:                                              ; preds = %4
  %408 = sext i32 %.066 to i64
  %409 = tail call i32 @_Z3ksmii(i32 2, i32 1000000005)
  %410 = sext i32 %409 to i64
  %411 = mul nsw i64 %410, %408
  %412 = srem i64 %411, 1000000007
  %413 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %412)
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_Z4readv() local_unnamed_addr #0 comdat {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = tail call i32 @getchar()
  %5 = trunc i32 %4 to i8
  br label %6

6:                                                ; preds = %.backedge, %0
  %.024 = phi i8 [ %5, %0 ], [ %.024.be, %.backedge ]
  %.022 = phi i64 [ 0, %0 ], [ %.022.be, %.backedge ]
  %.020 = phi i64 [ 1, %0 ], [ %.020.be, %.backedge ]
  %.018 = phi i32 [ -1793921859, %0 ], [ %.018.be, %.backedge ]
  %.016 = phi i1 [ undef, %0 ], [ %.016.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.018, label %.backedge [
    i32 -1793921859, label %7
    i32 -1622338761, label %17
    i32 1188119932, label %28
    i32 -679627851, label %30
    i32 -1045487177, label %32
    i32 -682834971, label %42
    i32 -1905626296, label %52
    i32 773080121, label %54
    i32 -1270203950, label %57
    i32 663571338, label %67
    i32 1272749003, label %77
    i32 340373890, label %78
    i32 -818915914, label %81
    i32 -1333589921, label %82
    i32 1032420382, label %92
    i32 -1844232589, label %103
    i32 -1980602638, label %105
    i32 14881332, label %107
    i32 -1894618986, label %109
    i32 1774040344, label %116
    i32 -332978050, label %118
    i32 -996777317, label %119
    i32 561913128, label %120
    i32 -684893055, label %121
  ]

.backedge:                                        ; preds = %6, %121, %120, %119, %118, %109, %107, %105, %103, %92, %82, %81, %78, %77, %67, %57, %54, %52, %42, %32, %30, %28, %17, %7
  %.024.be = phi i8 [ %.024, %6 ], [ %.024, %121 ], [ %.024, %120 ], [ %.024, %119 ], [ %.024, %118 ], [ %115, %109 ], [ %.024, %107 ], [ %.024, %105 ], [ %.024, %103 ], [ %.024, %92 ], [ %.024, %82 ], [ %.024, %81 ], [ %80, %78 ], [ %.024, %77 ], [ %.024, %67 ], [ %.024, %57 ], [ %.024, %54 ], [ %.024, %52 ], [ %.024, %42 ], [ %.024, %32 ], [ %.024, %30 ], [ %.024, %28 ], [ %.024, %17 ], [ %.024, %7 ]
  %.022.be = phi i64 [ %.022, %6 ], [ %.022, %121 ], [ %.022, %120 ], [ %.022, %119 ], [ %.022, %118 ], [ %113, %109 ], [ %.022, %107 ], [ %.022, %105 ], [ %.022, %103 ], [ %.022, %92 ], [ %.022, %82 ], [ %.022, %81 ], [ %.022, %78 ], [ %.022, %77 ], [ %.022, %67 ], [ %.022, %57 ], [ %.022, %54 ], [ %.022, %52 ], [ %.022, %42 ], [ %.022, %32 ], [ %.022, %30 ], [ %.022, %28 ], [ %.022, %17 ], [ %.022, %7 ]
  %.020.be = phi i64 [ %.020, %6 ], [ %.020, %121 ], [ -1, %120 ], [ %.020, %119 ], [ %.020, %118 ], [ %.020, %109 ], [ %.020, %107 ], [ %.020, %105 ], [ %.020, %103 ], [ %.020, %92 ], [ %.020, %82 ], [ %.020, %81 ], [ %.020, %78 ], [ %.020, %77 ], [ -1, %67 ], [ %.020, %57 ], [ %.020, %54 ], [ %.020, %52 ], [ %.020, %42 ], [ %.020, %32 ], [ %.020, %30 ], [ %.020, %28 ], [ %.020, %17 ], [ %.020, %7 ]
  %.018.be = phi i32 [ %.018, %6 ], [ 1032420382, %121 ], [ 663571338, %120 ], [ -682834971, %119 ], [ -1622338761, %118 ], [ -1333589921, %109 ], [ %108, %107 ], [ 14881332, %105 ], [ %104, %103 ], [ %102, %92 ], [ %91, %82 ], [ -1333589921, %81 ], [ -1793921859, %78 ], [ 340373890, %77 ], [ %76, %67 ], [ %66, %57 ], [ %56, %54 ], [ %53, %52 ], [ %51, %42 ], [ %41, %32 ], [ -1045487177, %30 ], [ %29, %28 ], [ %27, %17 ], [ %16, %7 ]
  %.016.be = phi i1 [ %.016, %6 ], [ %.016, %121 ], [ %.016, %120 ], [ %.016, %119 ], [ %.016, %118 ], [ %.016, %109 ], [ %.016, %107 ], [ %.016, %105 ], [ %.016, %103 ], [ %.016, %92 ], [ %.016, %82 ], [ %.016, %81 ], [ %.016, %78 ], [ %.016, %77 ], [ %.016, %67 ], [ %.016, %57 ], [ %.016, %54 ], [ %.016, %52 ], [ %.016, %42 ], [ %.016, %32 ], [ %31, %30 ], [ true, %28 ], [ %.016, %17 ], [ %.016, %7 ]
  %.0.be = phi i1 [ %.0, %6 ], [ %.0, %121 ], [ %.0, %120 ], [ %.0, %119 ], [ %.0, %118 ], [ %.0, %109 ], [ %.0, %107 ], [ %106, %105 ], [ false, %103 ], [ %.0, %92 ], [ %.0, %82 ], [ %.0, %81 ], [ %.0, %78 ], [ %.0, %77 ], [ %.0, %67 ], [ %.0, %57 ], [ %.0, %54 ], [ %.0, %52 ], [ %.0, %42 ], [ %.0, %32 ], [ %.0, %30 ], [ %.0, %28 ], [ %.0, %17 ], [ %.0, %7 ]
  br label %6

7:                                                ; preds = %6
  %8 = load i32, i32* @x.3, align 4
  %9 = load i32, i32* @y.4, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 -1622338761, i32 -332978050
  br label %.backedge

17:                                               ; preds = %6
  %18 = icmp slt i8 %.024, 48
  store i1 %18, i1* %3, align 1
  %19 = load i32, i32* @x.3, align 4
  %20 = load i32, i32* @y.4, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 1188119932, i32 -332978050
  br label %.backedge

28:                                               ; preds = %6
  %.0..0..0.13 = load volatile i1, i1* %3, align 1
  %29 = select i1 %.0..0..0.13, i32 -1045487177, i32 -679627851
  br label %.backedge

30:                                               ; preds = %6
  %31 = icmp sgt i8 %.024, 57
  br label %.backedge

32:                                               ; preds = %6
  store i1 %.016, i1* %1, align 1
  %33 = load i32, i32* @x.3, align 4
  %34 = load i32, i32* @y.4, align 4
  %35 = add i32 %33, -1
  %36 = mul i32 %35, %33
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %39, %38
  %41 = select i1 %40, i32 -682834971, i32 -996777317
  br label %.backedge

42:                                               ; preds = %6
  %43 = load i32, i32* @x.3, align 4
  %44 = load i32, i32* @y.4, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 -1905626296, i32 -996777317
  br label %.backedge

52:                                               ; preds = %6
  %.0..0..0.15 = load volatile i1, i1* %1, align 1
  %53 = select i1 %.0..0..0.15, i32 773080121, i32 -818915914
  br label %.backedge

54:                                               ; preds = %6
  %55 = icmp eq i8 %.024, 45
  %56 = select i1 %55, i32 -1270203950, i32 340373890
  br label %.backedge

57:                                               ; preds = %6
  %58 = load i32, i32* @x.3, align 4
  %59 = load i32, i32* @y.4, align 4
  %60 = add i32 %58, -1
  %61 = mul i32 %60, %58
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %64, %63
  %66 = select i1 %65, i32 663571338, i32 561913128
  br label %.backedge

67:                                               ; preds = %6
  %68 = load i32, i32* @x.3, align 4
  %69 = load i32, i32* @y.4, align 4
  %70 = add i32 %68, -1
  %71 = mul i32 %70, %68
  %72 = and i32 %71, 1
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %74, %73
  %76 = select i1 %75, i32 1272749003, i32 561913128
  br label %.backedge

77:                                               ; preds = %6
  br label %.backedge

78:                                               ; preds = %6
  %79 = tail call i32 @getchar()
  %80 = trunc i32 %79 to i8
  br label %.backedge

81:                                               ; preds = %6
  br label %.backedge

82:                                               ; preds = %6
  %83 = load i32, i32* @x.3, align 4
  %84 = load i32, i32* @y.4, align 4
  %85 = add i32 %83, -1
  %86 = mul i32 %85, %83
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %89, %88
  %91 = select i1 %90, i32 1032420382, i32 -684893055
  br label %.backedge

92:                                               ; preds = %6
  %93 = icmp sgt i8 %.024, 47
  store i1 %93, i1* %2, align 1
  %94 = load i32, i32* @x.3, align 4
  %95 = load i32, i32* @y.4, align 4
  %96 = add i32 %94, -1
  %97 = mul i32 %96, %94
  %98 = and i32 %97, 1
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %100, %99
  %102 = select i1 %101, i32 -1844232589, i32 -684893055
  br label %.backedge

103:                                              ; preds = %6
  %.0..0..0.14 = load volatile i1, i1* %2, align 1
  %104 = select i1 %.0..0..0.14, i32 -1980602638, i32 14881332
  br label %.backedge

105:                                              ; preds = %6
  %106 = icmp slt i8 %.024, 58
  br label %.backedge

107:                                              ; preds = %6
  %108 = select i1 %.0, i32 -1894618986, i32 1774040344
  br label %.backedge

109:                                              ; preds = %6
  %110 = mul nsw i64 %.022, 10
  %111 = sext i8 %.024 to i64
  %112 = add nsw i64 %111, -48
  %113 = add i64 %112, %110
  %114 = tail call i32 @getchar()
  %115 = trunc i32 %114 to i8
  br label %.backedge

116:                                              ; preds = %6
  %117 = mul nsw i64 %.020, %.022
  ret i64 %117

118:                                              ; preds = %6
  br label %.backedge

119:                                              ; preds = %6
  br label %.backedge

120:                                              ; preds = %6
  br label %.backedge

121:                                              ; preds = %6
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_Z1Zi(i32 %0) local_unnamed_addr #5 comdat {
  %2 = alloca i1, align 1
  %3 = alloca i32*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = load i32, i32* @x.5, align 4
  %7 = load i32, i32* @y.6, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %5, align 1
  %12 = icmp slt i32 %7, 10
  store i1 %12, i1* %4, align 1
  br label %.outer.outer

.outer.outer:                                     ; preds = %.outer.outer.backedge, %1
  %.08.ph.ph = phi i32 [ -1327321949, %1 ], [ -1837754934, %.outer.outer.backedge ]
  %.0.ph.ph = phi i32 [ undef, %1 ], [ %.0.ph.ph.be, %.outer.outer.backedge ]
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %.outer.outer
  %.08.ph = phi i32 [ %.08.ph.ph, %.outer.outer ], [ %.08.ph.be, %.outer.backedge ]
  br label %13

13:                                               ; preds = %.outer, %13
  switch i32 %.08.ph, label %13 [
    i32 -1327321949, label %14
    i32 -1080738036, label %17
    i32 1287184266, label %30
    i32 1498286020, label %32
    i32 -1143978078, label %35
    i32 -1837754934, label %37
    i32 -1674106267, label %.outer.backedge
  ]

14:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %.0..0..0.2 = load volatile i1, i1* %4, align 1
  %15 = or i1 %.0..0..0., %.0..0..0.2
  %16 = select i1 %15, i32 -1080738036, i32 -1674106267
  br label %.outer.backedge

17:                                               ; preds = %13
  %18 = alloca i32, align 4
  store i32* %18, i32** %3, align 8
  %.0..0..0.3 = load volatile i32*, i32** %3, align 8
  store i32 %0, i32* %.0..0..0.3, align 4
  %.0..0..0.4 = load volatile i32*, i32** %3, align 8
  %19 = load i32, i32* %.0..0..0.4, align 4
  %20 = icmp sgt i32 %19, 1000000006
  store i1 %20, i1* %2, align 1
  %21 = load i32, i32* @x.5, align 4
  %22 = load i32, i32* @y.6, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 1287184266, i32 -1674106267
  br label %.outer.backedge

30:                                               ; preds = %13
  %.0..0..0.7 = load volatile i1, i1* %2, align 1
  %31 = select i1 %.0..0..0.7, i32 1498286020, i32 -1143978078
  br label %.outer.backedge

32:                                               ; preds = %13
  %.0..0..0.5 = load volatile i32*, i32** %3, align 8
  %33 = load i32, i32* %.0..0..0.5, align 4
  %34 = add i32 %33, -1000000007
  br label %.outer.outer.backedge

.outer.outer.backedge:                            ; preds = %32, %35
  %.0.ph.ph.be = phi i32 [ %36, %35 ], [ %34, %32 ]
  br label %.outer.outer

35:                                               ; preds = %13
  %.0..0..0.6 = load volatile i32*, i32** %3, align 8
  %36 = load i32, i32* %.0..0..0.6, align 4
  br label %.outer.outer.backedge

37:                                               ; preds = %13
  ret i32 %.0.ph.ph

.outer.backedge:                                  ; preds = %13, %30, %17, %14
  %.08.ph.be = phi i32 [ %16, %14 ], [ %29, %17 ], [ %31, %30 ], [ -1080738036, %13 ]
  br label %.outer
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_Z1Cii(i32 %0, i32 %1) local_unnamed_addr #5 comdat {
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [8200 x i32], [8200 x i32]* @fac, i64 0, i64 %3
  %5 = load i32, i32* %4, align 4
  %6 = sext i32 %5 to i64
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, %6
  %12 = srem i64 %11, 1000000007
  %13 = sub i32 %0, %1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [8200 x i32], [8200 x i32]* @inv, i64 0, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = mul nsw i64 %12, %17
  %19 = srem i64 %18, 1000000007
  %20 = trunc i64 %19 to i32
  ret i32 %20
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_Z3ksmii(i32 %0, i32 %1) local_unnamed_addr #5 comdat {
  %3 = alloca i1, align 1
  %4 = load i32, i32* @x.9, align 4
  %5 = load i32, i32* @y.10, align 4
  %6 = add i32 %4, -1
  %7 = mul i32 %6, %4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %10, %9
  %12 = select i1 %11, i32 -899294763, i32 -684667067
  %13 = select i1 %11, i32 29861742, i32 -684667067
  %14 = select i1 %11, i32 2143799951, i32 1477774907
  %15 = select i1 %11, i32 -67455495, i32 1477774907
  br label %16

16:                                               ; preds = %.backedge, %2
  %.017 = phi i32 [ %0, %2 ], [ %.017.be, %.backedge ]
  %.015 = phi i32 [ %1, %2 ], [ %.015.be, %.backedge ]
  %.013 = phi i32 [ 1, %2 ], [ %.013.be, %.backedge ]
  %.0 = phi i32 [ 536515529, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 536515529, label %17
    i32 -413066953, label %19
    i32 -67455495, label %20
    i32 2143799951, label %23
    i32 -945016943, label %25
    i32 1825768, label %31
    i32 29861742, label %32
    i32 -899294763, label %38
    i32 -1326875371, label %39
    i32 1477774907, label %40
    i32 -684667067, label %41
  ]

.backedge:                                        ; preds = %16, %41, %40, %38, %32, %31, %25, %23, %20, %19, %17
  %.017.be = phi i32 [ %.017, %16 ], [ %46, %41 ], [ %.017, %40 ], [ %.017, %38 ], [ %37, %32 ], [ %.017, %31 ], [ %.017, %25 ], [ %.017, %23 ], [ %.017, %20 ], [ %.017, %19 ], [ %.017, %17 ]
  %.015.be = phi i32 [ %.015, %16 ], [ %42, %41 ], [ %.015, %40 ], [ %.015, %38 ], [ %33, %32 ], [ %.015, %31 ], [ %.015, %25 ], [ %.015, %23 ], [ %.015, %20 ], [ %.015, %19 ], [ %.015, %17 ]
  %.013.be = phi i32 [ %.013, %16 ], [ %.013, %41 ], [ %.013, %40 ], [ %.013, %38 ], [ %.013, %32 ], [ %.013, %31 ], [ %30, %25 ], [ %.013, %23 ], [ %.013, %20 ], [ %.013, %19 ], [ %.013, %17 ]
  %.0.be = phi i32 [ %.0, %16 ], [ 29861742, %41 ], [ -67455495, %40 ], [ 536515529, %38 ], [ %12, %32 ], [ %13, %31 ], [ 1825768, %25 ], [ %24, %23 ], [ %14, %20 ], [ %15, %19 ], [ %18, %17 ]
  br label %16

17:                                               ; preds = %16
  %.not = icmp eq i32 %.015, 0
  %18 = select i1 %.not, i32 -1326875371, i32 -413066953
  br label %.backedge

19:                                               ; preds = %16
  br label %.backedge

20:                                               ; preds = %16
  %21 = and i32 %.015, 1
  %22 = icmp ne i32 %21, 0
  store i1 %22, i1* %3, align 1
  br label %.backedge

23:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %24 = select i1 %.0..0..0., i32 -945016943, i32 1825768
  br label %.backedge

25:                                               ; preds = %16
  %26 = sext i32 %.013 to i64
  %27 = sext i32 %.017 to i64
  %28 = mul nsw i64 %26, %27
  %29 = srem i64 %28, 1000000007
  %30 = trunc i64 %29 to i32
  br label %.backedge

31:                                               ; preds = %16
  br label %.backedge

32:                                               ; preds = %16
  %33 = ashr i32 %.015, 1
  %34 = sext i32 %.017 to i64
  %35 = mul nsw i64 %34, %34
  %36 = urem i64 %35, 1000000007
  %37 = trunc i64 %36 to i32
  br label %.backedge

38:                                               ; preds = %16
  br label %.backedge

39:                                               ; preds = %16
  ret i32 %.013

40:                                               ; preds = %16
  br label %.backedge

41:                                               ; preds = %16
  %42 = ashr i32 %.015, 1
  %43 = sext i32 %.017 to i64
  %44 = mul nsw i64 %43, %43
  %45 = urem i64 %44, 1000000007
  %46 = trunc i64 %45 to i32
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s834004573.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
