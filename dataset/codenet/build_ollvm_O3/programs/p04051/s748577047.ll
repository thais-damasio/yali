; ModuleID = 'build_ollvm/programs/p04051/s748577047.ll'
source_filename = "Project_CodeNet_C++1400/p04051/s748577047.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z2giv = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = local_unnamed_addr global i32 0, align 4
@a = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@b = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@f = local_unnamed_addr global [5010 x [5010 x i32]] zeroinitializer, align 16
@fac = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@fai = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@inv = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s748577047.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define i32 @_Z1Cii(i32 %0, i32 %1) local_unnamed_addr #4 {
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [200010 x i32], [200010 x i32]* @fac, i64 0, i64 %3
  %5 = load i32, i32* %4, align 4
  %6 = sext i32 %5 to i64
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds [200010 x i32], [200010 x i32]* @fai, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, %6
  %12 = srem i64 %11, 1000000007
  %13 = sub i32 %0, %1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [200010 x i32], [200010 x i32]* @fai, i64 0, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = mul nsw i64 %12, %17
  %19 = srem i64 %18, 1000000007
  %20 = trunc i64 %19 to i32
  ret i32 %20
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = tail call i32 @_Z2giv()
  store i32 %3, i32* @n, align 4
  br label %4

4:                                                ; preds = %.backedge, %0
  %.080 = phi i32 [ 1, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.0 = phi i32 [ 1063524366, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1063524366, label %5
    i32 459611217, label %8
    i32 1977625453, label %14
    i32 704181617, label %24
    i32 1264142630, label %35
    i32 2037817560, label %36
    i32 -826285604, label %46
    i32 -1595599144, label %56
    i32 -128122999, label %57
    i32 705127300, label %60
    i32 -2134209304, label %71
    i32 1904333248, label %73
    i32 1035105053, label %74
    i32 -1313782582, label %77
    i32 -1826088379, label %91
    i32 1635669361, label %93
    i32 79068440, label %103
    i32 1060741248, label %113
    i32 842183502, label %114
    i32 -1308689085, label %117
    i32 -29233094, label %131
    i32 -1680212072, label %141
    i32 -753227698, label %151
    i32 2125143447, label %152
    i32 408868645, label %153
    i32 -1420497196, label %156
    i32 -725676467, label %168
    i32 -1137465170, label %178
    i32 1447508664, label %189
    i32 1972974212, label %190
    i32 -1876143743, label %191
    i32 785396233, label %194
    i32 -1346232535, label %204
    i32 1160988448, label %214
    i32 -1907052092, label %215
    i32 1171474388, label %218
    i32 -1641107851, label %238
    i32 1526471649, label %240
    i32 1221915395, label %241
    i32 -1600334201, label %251
    i32 1443871548, label %261
    i32 -554563828, label %262
    i32 -1845420828, label %263
    i32 -105249147, label %273
    i32 367927465, label %285
    i32 444802511, label %287
    i32 2001794932, label %297
    i32 -632745644, label %320
    i32 766684409, label %321
    i32 1038070644, label %323
    i32 403569114, label %324
    i32 -860187892, label %334
    i32 -620453691, label %346
    i32 765764434, label %348
    i32 -1029026063, label %359
    i32 -249230409, label %361
    i32 -1396039189, label %371
    i32 734638777, label %387
    i32 1229704169, label %388
    i32 -561669375, label %389
    i32 1917993320, label %390
    i32 -509823929, label %391
    i32 1135690818, label %393
    i32 1357108289, label %395
    i32 -1029264143, label %396
    i32 1259504199, label %397
    i32 -2033407725, label %398
    i32 100151510, label %412
    i32 731223757, label %413
  ]

.backedge:                                        ; preds = %4, %413, %412, %398, %397, %396, %395, %393, %391, %390, %389, %388, %371, %361, %359, %348, %346, %334, %324, %323, %321, %320, %297, %287, %285, %273, %263, %262, %261, %251, %241, %240, %238, %218, %215, %214, %204, %194, %191, %190, %189, %178, %168, %156, %153, %152, %151, %141, %131, %117, %114, %113, %103, %93, %91, %77, %74, %73, %71, %60, %57, %56, %46, %36, %35, %24, %14, %8, %5
  %.080.be = phi i32 [ %.080, %4 ], [ %.080, %413 ], [ %.080, %412 ], [ %.080, %398 ], [ %.080, %397 ], [ %.080, %396 ], [ %.080, %395 ], [ %.080, %393 ], [ %.080, %391 ], [ %.080, %390 ], [ %.080, %389 ], [ %.neg82, %388 ], [ %.080, %371 ], [ %.080, %361 ], [ %.080, %359 ], [ %.080, %348 ], [ %.080, %346 ], [ %.080, %334 ], [ %.080, %324 ], [ %.080, %323 ], [ %.080, %321 ], [ %.080, %320 ], [ %.080, %297 ], [ %.080, %287 ], [ %.080, %285 ], [ %.080, %273 ], [ %.080, %263 ], [ %.080, %262 ], [ %.080, %261 ], [ %.080, %251 ], [ %.080, %241 ], [ %.080, %240 ], [ %.080, %238 ], [ %.080, %218 ], [ %.080, %215 ], [ %.080, %214 ], [ %.080, %204 ], [ %.080, %194 ], [ %.080, %191 ], [ %.080, %190 ], [ %.080, %189 ], [ %.080, %178 ], [ %.080, %168 ], [ %.080, %156 ], [ %.080, %153 ], [ %.080, %152 ], [ %.080, %151 ], [ %.080, %141 ], [ %.080, %131 ], [ %.080, %117 ], [ %.080, %114 ], [ %.080, %113 ], [ %.080, %103 ], [ %.080, %93 ], [ %.080, %91 ], [ %.080, %77 ], [ %.080, %74 ], [ %.080, %73 ], [ %.080, %71 ], [ %.080, %60 ], [ %.080, %57 ], [ %.080, %56 ], [ %.080, %46 ], [ %.080, %36 ], [ %.080, %35 ], [ %25, %24 ], [ %.080, %14 ], [ %.080, %8 ], [ %.080, %5 ]
  %.078.be = phi i32 [ %.078, %4 ], [ %.078, %413 ], [ %.078, %412 ], [ %.078, %398 ], [ %.078, %397 ], [ %.078, %396 ], [ %.078, %395 ], [ %.078, %393 ], [ %.078, %391 ], [ %.078, %390 ], [ 1, %389 ], [ %.078, %388 ], [ %.078, %371 ], [ %.078, %361 ], [ %.078, %359 ], [ %.078, %348 ], [ %.078, %346 ], [ %.078, %334 ], [ %.078, %324 ], [ %.078, %323 ], [ %.078, %321 ], [ %.078, %320 ], [ %.078, %297 ], [ %.078, %287 ], [ %.078, %285 ], [ %.078, %273 ], [ %.078, %263 ], [ %.078, %262 ], [ %.078, %261 ], [ %.078, %251 ], [ %.078, %241 ], [ %.078, %240 ], [ %.078, %238 ], [ %.078, %218 ], [ %.078, %215 ], [ %.078, %214 ], [ %.078, %204 ], [ %.078, %194 ], [ %.078, %191 ], [ %.078, %190 ], [ %.078, %189 ], [ %.078, %178 ], [ %.078, %168 ], [ %.078, %156 ], [ %.078, %153 ], [ %.078, %152 ], [ %.078, %151 ], [ %.078, %141 ], [ %.078, %131 ], [ %.078, %117 ], [ %.078, %114 ], [ %.078, %113 ], [ %.078, %103 ], [ %.078, %93 ], [ %.078, %91 ], [ %.078, %77 ], [ %.078, %74 ], [ %.078, %73 ], [ %72, %71 ], [ %.078, %60 ], [ %.078, %57 ], [ %.078, %56 ], [ 1, %46 ], [ %.078, %36 ], [ %.078, %35 ], [ %.078, %24 ], [ %.078, %14 ], [ %.078, %8 ], [ %.078, %5 ]
  %.076.be = phi i32 [ %.076, %4 ], [ %.076, %413 ], [ %.076, %412 ], [ %.076, %398 ], [ %.076, %397 ], [ %.076, %396 ], [ %.076, %395 ], [ %.076, %393 ], [ %.076, %391 ], [ %.076, %390 ], [ %.076, %389 ], [ %.076, %388 ], [ %.076, %371 ], [ %.076, %361 ], [ %.076, %359 ], [ %.076, %348 ], [ %.076, %346 ], [ %.076, %334 ], [ %.076, %324 ], [ %.076, %323 ], [ %.076, %321 ], [ %.076, %320 ], [ %.076, %297 ], [ %.076, %287 ], [ %.076, %285 ], [ %.076, %273 ], [ %.076, %263 ], [ %.076, %262 ], [ %.076, %261 ], [ %.076, %251 ], [ %.076, %241 ], [ %.076, %240 ], [ %.076, %238 ], [ %.076, %218 ], [ %.076, %215 ], [ %.076, %214 ], [ %.076, %204 ], [ %.076, %194 ], [ %.076, %191 ], [ %.076, %190 ], [ %.076, %189 ], [ %.076, %178 ], [ %.076, %168 ], [ %.076, %156 ], [ %.076, %153 ], [ %.076, %152 ], [ %.076, %151 ], [ %.076, %141 ], [ %.076, %131 ], [ %.076, %117 ], [ %.076, %114 ], [ %.076, %113 ], [ %.076, %103 ], [ %.076, %93 ], [ %92, %91 ], [ %.076, %77 ], [ %.076, %74 ], [ 2, %73 ], [ %.076, %71 ], [ %.076, %60 ], [ %.076, %57 ], [ %.076, %56 ], [ %.076, %46 ], [ %.076, %36 ], [ %.076, %35 ], [ %.076, %24 ], [ %.076, %14 ], [ %.076, %8 ], [ %.076, %5 ]
  %.074.be = phi i32 [ %.074, %4 ], [ %.074, %413 ], [ %.074, %412 ], [ %.074, %398 ], [ %.074, %397 ], [ %.074, %396 ], [ %.074, %395 ], [ %.074, %393 ], [ %392, %391 ], [ 1, %390 ], [ %.074, %389 ], [ %.074, %388 ], [ %.074, %371 ], [ %.074, %361 ], [ %.074, %359 ], [ %.074, %348 ], [ %.074, %346 ], [ %.074, %334 ], [ %.074, %324 ], [ %.074, %323 ], [ %.074, %321 ], [ %.074, %320 ], [ %.074, %297 ], [ %.074, %287 ], [ %.074, %285 ], [ %.074, %273 ], [ %.074, %263 ], [ %.074, %262 ], [ %.074, %261 ], [ %.074, %251 ], [ %.074, %241 ], [ %.074, %240 ], [ %.074, %238 ], [ %.074, %218 ], [ %.074, %215 ], [ %.074, %214 ], [ %.074, %204 ], [ %.074, %194 ], [ %.074, %191 ], [ %.074, %190 ], [ %.074, %189 ], [ %.074, %178 ], [ %.074, %168 ], [ %.074, %156 ], [ %.074, %153 ], [ %.074, %152 ], [ %.074, %151 ], [ %.neg88, %141 ], [ %.074, %131 ], [ %.074, %117 ], [ %.074, %114 ], [ %.074, %113 ], [ 1, %103 ], [ %.074, %93 ], [ %.074, %91 ], [ %.074, %77 ], [ %.074, %74 ], [ %.074, %73 ], [ %.074, %71 ], [ %.074, %60 ], [ %.074, %57 ], [ %.074, %56 ], [ %.074, %46 ], [ %.074, %36 ], [ %.074, %35 ], [ %.074, %24 ], [ %.074, %14 ], [ %.074, %8 ], [ %.074, %5 ]
  %.072.be = phi i32 [ %.072, %4 ], [ %.072, %413 ], [ %.072, %412 ], [ %.072, %398 ], [ %.072, %397 ], [ %.072, %396 ], [ %.072, %395 ], [ %394, %393 ], [ %.072, %391 ], [ %.072, %390 ], [ %.072, %389 ], [ %.072, %388 ], [ %.072, %371 ], [ %.072, %361 ], [ %.072, %359 ], [ %.072, %348 ], [ %.072, %346 ], [ %.072, %334 ], [ %.072, %324 ], [ %.072, %323 ], [ %.072, %321 ], [ %.072, %320 ], [ %.072, %297 ], [ %.072, %287 ], [ %.072, %285 ], [ %.072, %273 ], [ %.072, %263 ], [ %.072, %262 ], [ %.072, %261 ], [ %.072, %251 ], [ %.072, %241 ], [ %.072, %240 ], [ %.072, %238 ], [ %.072, %218 ], [ %.072, %215 ], [ %.072, %214 ], [ %.072, %204 ], [ %.072, %194 ], [ %.072, %191 ], [ %.072, %190 ], [ %.072, %189 ], [ %179, %178 ], [ %.072, %168 ], [ %.072, %156 ], [ %.072, %153 ], [ 1, %152 ], [ %.072, %151 ], [ %.072, %141 ], [ %.072, %131 ], [ %.072, %117 ], [ %.072, %114 ], [ %.072, %113 ], [ %.072, %103 ], [ %.072, %93 ], [ %.072, %91 ], [ %.072, %77 ], [ %.072, %74 ], [ %.072, %73 ], [ %.072, %71 ], [ %.072, %60 ], [ %.072, %57 ], [ %.072, %56 ], [ %.072, %46 ], [ %.072, %36 ], [ %.072, %35 ], [ %.072, %24 ], [ %.072, %14 ], [ %.072, %8 ], [ %.072, %5 ]
  %.070.be = phi i32 [ %.070, %4 ], [ %.070, %413 ], [ %.070, %412 ], [ %.070, %398 ], [ %.070, %397 ], [ %.neg, %396 ], [ %.070, %395 ], [ %.070, %393 ], [ %.070, %391 ], [ %.070, %390 ], [ %.070, %389 ], [ %.070, %388 ], [ %.070, %371 ], [ %.070, %361 ], [ %.070, %359 ], [ %.070, %348 ], [ %.070, %346 ], [ %.070, %334 ], [ %.070, %324 ], [ %.070, %323 ], [ %.070, %321 ], [ %.070, %320 ], [ %.070, %297 ], [ %.070, %287 ], [ %.070, %285 ], [ %.070, %273 ], [ %.070, %263 ], [ %.070, %262 ], [ %.070, %261 ], [ %.neg86, %251 ], [ %.070, %241 ], [ %.070, %240 ], [ %.070, %238 ], [ %.070, %218 ], [ %.070, %215 ], [ %.070, %214 ], [ %.070, %204 ], [ %.070, %194 ], [ %.070, %191 ], [ 1, %190 ], [ %.070, %189 ], [ %.070, %178 ], [ %.070, %168 ], [ %.070, %156 ], [ %.070, %153 ], [ %.070, %152 ], [ %.070, %151 ], [ %.070, %141 ], [ %.070, %131 ], [ %.070, %117 ], [ %.070, %114 ], [ %.070, %113 ], [ %.070, %103 ], [ %.070, %93 ], [ %.070, %91 ], [ %.070, %77 ], [ %.070, %74 ], [ %.070, %73 ], [ %.070, %71 ], [ %.070, %60 ], [ %.070, %57 ], [ %.070, %56 ], [ %.070, %46 ], [ %.070, %36 ], [ %.070, %35 ], [ %.070, %24 ], [ %.070, %14 ], [ %.070, %8 ], [ %.070, %5 ]
  %.068.be = phi i32 [ %.068, %4 ], [ %.068, %413 ], [ %.068, %412 ], [ %.068, %398 ], [ %.068, %397 ], [ %.068, %396 ], [ 1, %395 ], [ %.068, %393 ], [ %.068, %391 ], [ %.068, %390 ], [ %.068, %389 ], [ %.068, %388 ], [ %.068, %371 ], [ %.068, %361 ], [ %.068, %359 ], [ %.068, %348 ], [ %.068, %346 ], [ %.068, %334 ], [ %.068, %324 ], [ %.068, %323 ], [ %.068, %321 ], [ %.068, %320 ], [ %.068, %297 ], [ %.068, %287 ], [ %.068, %285 ], [ %.068, %273 ], [ %.068, %263 ], [ %.068, %262 ], [ %.068, %261 ], [ %.068, %251 ], [ %.068, %241 ], [ %.068, %240 ], [ %239, %238 ], [ %.068, %218 ], [ %.068, %215 ], [ %.068, %214 ], [ 1, %204 ], [ %.068, %194 ], [ %.068, %191 ], [ %.068, %190 ], [ %.068, %189 ], [ %.068, %178 ], [ %.068, %168 ], [ %.068, %156 ], [ %.068, %153 ], [ %.068, %152 ], [ %.068, %151 ], [ %.068, %141 ], [ %.068, %131 ], [ %.068, %117 ], [ %.068, %114 ], [ %.068, %113 ], [ %.068, %103 ], [ %.068, %93 ], [ %.068, %91 ], [ %.068, %77 ], [ %.068, %74 ], [ %.068, %73 ], [ %.068, %71 ], [ %.068, %60 ], [ %.068, %57 ], [ %.068, %56 ], [ %.068, %46 ], [ %.068, %36 ], [ %.068, %35 ], [ %.068, %24 ], [ %.068, %14 ], [ %.068, %8 ], [ %.068, %5 ]
  %.066.be = phi i32 [ %.066, %4 ], [ %.066, %413 ], [ %.066, %412 ], [ %411, %398 ], [ %.066, %397 ], [ %.066, %396 ], [ %.066, %395 ], [ %.066, %393 ], [ %.066, %391 ], [ %.066, %390 ], [ %.066, %389 ], [ %.066, %388 ], [ %.066, %371 ], [ %.066, %361 ], [ %.066, %359 ], [ %358, %348 ], [ %.066, %346 ], [ %.066, %334 ], [ %.066, %324 ], [ %.066, %323 ], [ %.066, %321 ], [ %.066, %320 ], [ %310, %297 ], [ %.066, %287 ], [ %.066, %285 ], [ %.066, %273 ], [ %.066, %263 ], [ 0, %262 ], [ %.066, %261 ], [ %.066, %251 ], [ %.066, %241 ], [ %.066, %240 ], [ %.066, %238 ], [ %.066, %218 ], [ %.066, %215 ], [ %.066, %214 ], [ %.066, %204 ], [ %.066, %194 ], [ %.066, %191 ], [ %.066, %190 ], [ %.066, %189 ], [ %.066, %178 ], [ %.066, %168 ], [ %.066, %156 ], [ %.066, %153 ], [ %.066, %152 ], [ %.066, %151 ], [ %.066, %141 ], [ %.066, %131 ], [ %.066, %117 ], [ %.066, %114 ], [ %.066, %113 ], [ %.066, %103 ], [ %.066, %93 ], [ %.066, %91 ], [ %.066, %77 ], [ %.066, %74 ], [ %.066, %73 ], [ %.066, %71 ], [ %.066, %60 ], [ %.066, %57 ], [ %.066, %56 ], [ %.066, %46 ], [ %.066, %36 ], [ %.066, %35 ], [ %.066, %24 ], [ %.066, %14 ], [ %.066, %8 ], [ %.066, %5 ]
  %.064.be = phi i32 [ %.064, %4 ], [ %.064, %413 ], [ %.064, %412 ], [ %.064, %398 ], [ %.064, %397 ], [ %.064, %396 ], [ %.064, %395 ], [ %.064, %393 ], [ %.064, %391 ], [ %.064, %390 ], [ %.064, %389 ], [ %.064, %388 ], [ %.064, %371 ], [ %.064, %361 ], [ %.064, %359 ], [ %.064, %348 ], [ %.064, %346 ], [ %.064, %334 ], [ %.064, %324 ], [ %.064, %323 ], [ %322, %321 ], [ %.064, %320 ], [ %.064, %297 ], [ %.064, %287 ], [ %.064, %285 ], [ %.064, %273 ], [ %.064, %263 ], [ 1, %262 ], [ %.064, %261 ], [ %.064, %251 ], [ %.064, %241 ], [ %.064, %240 ], [ %.064, %238 ], [ %.064, %218 ], [ %.064, %215 ], [ %.064, %214 ], [ %.064, %204 ], [ %.064, %194 ], [ %.064, %191 ], [ %.064, %190 ], [ %.064, %189 ], [ %.064, %178 ], [ %.064, %168 ], [ %.064, %156 ], [ %.064, %153 ], [ %.064, %152 ], [ %.064, %151 ], [ %.064, %141 ], [ %.064, %131 ], [ %.064, %117 ], [ %.064, %114 ], [ %.064, %113 ], [ %.064, %103 ], [ %.064, %93 ], [ %.064, %91 ], [ %.064, %77 ], [ %.064, %74 ], [ %.064, %73 ], [ %.064, %71 ], [ %.064, %60 ], [ %.064, %57 ], [ %.064, %56 ], [ %.064, %46 ], [ %.064, %36 ], [ %.064, %35 ], [ %.064, %24 ], [ %.064, %14 ], [ %.064, %8 ], [ %.064, %5 ]
  %.062.be = phi i32 [ %.062, %4 ], [ %.062, %413 ], [ %.062, %412 ], [ %.062, %398 ], [ %.062, %397 ], [ %.062, %396 ], [ %.062, %395 ], [ %.062, %393 ], [ %.062, %391 ], [ %.062, %390 ], [ %.062, %389 ], [ %.062, %388 ], [ %.062, %371 ], [ %.062, %361 ], [ %360, %359 ], [ %.062, %348 ], [ %.062, %346 ], [ %.062, %334 ], [ %.062, %324 ], [ 1, %323 ], [ %.062, %321 ], [ %.062, %320 ], [ %.062, %297 ], [ %.062, %287 ], [ %.062, %285 ], [ %.062, %273 ], [ %.062, %263 ], [ %.062, %262 ], [ %.062, %261 ], [ %.062, %251 ], [ %.062, %241 ], [ %.062, %240 ], [ %.062, %238 ], [ %.062, %218 ], [ %.062, %215 ], [ %.062, %214 ], [ %.062, %204 ], [ %.062, %194 ], [ %.062, %191 ], [ %.062, %190 ], [ %.062, %189 ], [ %.062, %178 ], [ %.062, %168 ], [ %.062, %156 ], [ %.062, %153 ], [ %.062, %152 ], [ %.062, %151 ], [ %.062, %141 ], [ %.062, %131 ], [ %.062, %117 ], [ %.062, %114 ], [ %.062, %113 ], [ %.062, %103 ], [ %.062, %93 ], [ %.062, %91 ], [ %.062, %77 ], [ %.062, %74 ], [ %.062, %73 ], [ %.062, %71 ], [ %.062, %60 ], [ %.062, %57 ], [ %.062, %56 ], [ %.062, %46 ], [ %.062, %36 ], [ %.062, %35 ], [ %.062, %24 ], [ %.062, %14 ], [ %.062, %8 ], [ %.062, %5 ]
  %.0.be = phi i32 [ %.0, %4 ], [ -1396039189, %413 ], [ -860187892, %412 ], [ 2001794932, %398 ], [ -105249147, %397 ], [ -1600334201, %396 ], [ -1346232535, %395 ], [ -1137465170, %393 ], [ -1680212072, %391 ], [ 79068440, %390 ], [ -826285604, %389 ], [ 704181617, %388 ], [ %386, %371 ], [ %370, %361 ], [ 403569114, %359 ], [ -1029026063, %348 ], [ %347, %346 ], [ %345, %334 ], [ %333, %324 ], [ 403569114, %323 ], [ -1845420828, %321 ], [ 766684409, %320 ], [ %319, %297 ], [ %296, %287 ], [ %286, %285 ], [ %284, %273 ], [ %272, %263 ], [ -1845420828, %262 ], [ -1876143743, %261 ], [ %260, %251 ], [ %250, %241 ], [ 1221915395, %240 ], [ -1907052092, %238 ], [ -1641107851, %218 ], [ %217, %215 ], [ -1907052092, %214 ], [ %213, %204 ], [ %203, %194 ], [ %193, %191 ], [ -1876143743, %190 ], [ 408868645, %189 ], [ %188, %178 ], [ %177, %168 ], [ -725676467, %156 ], [ %155, %153 ], [ 408868645, %152 ], [ 842183502, %151 ], [ %150, %141 ], [ %140, %131 ], [ -29233094, %117 ], [ %116, %114 ], [ 842183502, %113 ], [ %112, %103 ], [ %102, %93 ], [ 1035105053, %91 ], [ -1826088379, %77 ], [ %76, %74 ], [ 1035105053, %73 ], [ -128122999, %71 ], [ -2134209304, %60 ], [ %59, %57 ], [ -128122999, %56 ], [ %55, %46 ], [ %45, %36 ], [ 1063524366, %35 ], [ %34, %24 ], [ %23, %14 ], [ 1977625453, %8 ], [ %7, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = load i32, i32* @n, align 4
  %.not89 = icmp sgt i32 %.080, %6
  %7 = select i1 %.not89, i32 2037817560, i32 459611217
  br label %.backedge

8:                                                ; preds = %4
  %9 = tail call i32 @_Z2giv()
  %10 = sext i32 %.080 to i64
  %11 = getelementptr inbounds [200010 x i32], [200010 x i32]* @a, i64 0, i64 %10
  store i32 %9, i32* %11, align 4
  %12 = tail call i32 @_Z2giv()
  %13 = getelementptr inbounds [200010 x i32], [200010 x i32]* @b, i64 0, i64 %10
  store i32 %12, i32* %13, align 4
  br label %.backedge

14:                                               ; preds = %4
  %15 = load i32, i32* @x.3, align 4
  %16 = load i32, i32* @y.4, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 704181617, i32 1229704169
  br label %.backedge

24:                                               ; preds = %4
  %25 = add i32 %.080, 1
  %26 = load i32, i32* @x.3, align 4
  %27 = load i32, i32* @y.4, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 1264142630, i32 1229704169
  br label %.backedge

35:                                               ; preds = %4
  br label %.backedge

36:                                               ; preds = %4
  %37 = load i32, i32* @x.3, align 4
  %38 = load i32, i32* @y.4, align 4
  %39 = add i32 %37, -1
  %40 = mul i32 %39, %37
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %43, %42
  %45 = select i1 %44, i32 -826285604, i32 -561669375
  br label %.backedge

46:                                               ; preds = %4
  store i32 1, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @inv, i64 0, i64 1), align 4
  store i32 1, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @inv, i64 0, i64 0), align 16
  store i32 1, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @fai, i64 0, i64 0), align 16
  store i32 1, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @fac, i64 0, i64 0), align 16
  %47 = load i32, i32* @x.3, align 4
  %48 = load i32, i32* @y.4, align 4
  %49 = add i32 %47, -1
  %50 = mul i32 %49, %47
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %53, %52
  %55 = select i1 %54, i32 -1595599144, i32 -561669375
  br label %.backedge

56:                                               ; preds = %4
  br label %.backedge

57:                                               ; preds = %4
  %58 = icmp slt i32 %.078, 8001
  %59 = select i1 %58, i32 705127300, i32 1904333248
  br label %.backedge

60:                                               ; preds = %4
  %61 = add i32 %.078, -1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [200010 x i32], [200010 x i32]* @fac, i64 0, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = sext i32 %.078 to i64
  %67 = mul nsw i64 %65, %66
  %68 = srem i64 %67, 1000000007
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds [200010 x i32], [200010 x i32]* @fac, i64 0, i64 %66
  store i32 %69, i32* %70, align 4
  br label %.backedge

71:                                               ; preds = %4
  %72 = add i32 %.078, 1
  br label %.backedge

73:                                               ; preds = %4
  br label %.backedge

74:                                               ; preds = %4
  %75 = icmp slt i32 %.076, 8001
  %76 = select i1 %75, i32 -1313782582, i32 1635669361
  br label %.backedge

77:                                               ; preds = %4
  %78 = sdiv i32 1000000007, %.076
  %79 = sub nsw i32 1000000007, %78
  %80 = zext i32 %79 to i64
  %81 = srem i32 1000000007, %.076
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds [200010 x i32], [200010 x i32]* @inv, i64 0, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = mul nsw i64 %85, %80
  %87 = srem i64 %86, 1000000007
  %88 = trunc i64 %87 to i32
  %89 = sext i32 %.076 to i64
  %90 = getelementptr inbounds [200010 x i32], [200010 x i32]* @inv, i64 0, i64 %89
  store i32 %88, i32* %90, align 4
  br label %.backedge

91:                                               ; preds = %4
  %92 = add i32 %.076, 1
  br label %.backedge

93:                                               ; preds = %4
  %94 = load i32, i32* @x.3, align 4
  %95 = load i32, i32* @y.4, align 4
  %96 = add i32 %94, -1
  %97 = mul i32 %96, %94
  %98 = and i32 %97, 1
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %100, %99
  %102 = select i1 %101, i32 79068440, i32 1917993320
  br label %.backedge

103:                                              ; preds = %4
  %104 = load i32, i32* @x.3, align 4
  %105 = load i32, i32* @y.4, align 4
  %106 = add i32 %104, -1
  %107 = mul i32 %106, %104
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %110, %109
  %112 = select i1 %111, i32 1060741248, i32 1917993320
  br label %.backedge

113:                                              ; preds = %4
  br label %.backedge

114:                                              ; preds = %4
  %115 = icmp slt i32 %.074, 8001
  %116 = select i1 %115, i32 -1308689085, i32 2125143447
  br label %.backedge

117:                                              ; preds = %4
  %118 = add i32 %.074, -1
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [200010 x i32], [200010 x i32]* @fai, i64 0, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = sext i32 %121 to i64
  %123 = sext i32 %.074 to i64
  %124 = getelementptr inbounds [200010 x i32], [200010 x i32]* @inv, i64 0, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = sext i32 %125 to i64
  %127 = mul nsw i64 %126, %122
  %128 = srem i64 %127, 1000000007
  %129 = trunc i64 %128 to i32
  %130 = getelementptr inbounds [200010 x i32], [200010 x i32]* @fai, i64 0, i64 %123
  store i32 %129, i32* %130, align 4
  br label %.backedge

131:                                              ; preds = %4
  %132 = load i32, i32* @x.3, align 4
  %133 = load i32, i32* @y.4, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 -1680212072, i32 -509823929
  br label %.backedge

141:                                              ; preds = %4
  %.neg88 = add i32 %.074, 1
  %142 = load i32, i32* @x.3, align 4
  %143 = load i32, i32* @y.4, align 4
  %144 = add i32 %142, -1
  %145 = mul i32 %144, %142
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %148, %147
  %150 = select i1 %149, i32 -753227698, i32 -509823929
  br label %.backedge

151:                                              ; preds = %4
  br label %.backedge

152:                                              ; preds = %4
  br label %.backedge

153:                                              ; preds = %4
  %154 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.072, %154
  %155 = select i1 %.not, i32 1972974212, i32 -1420497196
  br label %.backedge

156:                                              ; preds = %4
  %157 = sext i32 %.072 to i64
  %158 = getelementptr inbounds [200010 x i32], [200010 x i32]* @a, i64 0, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = sub i32 2001, %159
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [200010 x i32], [200010 x i32]* @b, i64 0, i64 %157
  %163 = load i32, i32* %162, align 4
  %164 = sub i32 2001, %163
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [5010 x [5010 x i32]], [5010 x [5010 x i32]]* @f, i64 0, i64 %161, i64 %165
  %167 = load i32, i32* %166, align 4
  %.neg87 = add i32 %167, 1
  store i32 %.neg87, i32* %166, align 4
  br label %.backedge

168:                                              ; preds = %4
  %169 = load i32, i32* @x.3, align 4
  %170 = load i32, i32* @y.4, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 -1137465170, i32 1135690818
  br label %.backedge

178:                                              ; preds = %4
  %179 = add i32 %.072, 1
  %180 = load i32, i32* @x.3, align 4
  %181 = load i32, i32* @y.4, align 4
  %182 = add i32 %180, -1
  %183 = mul i32 %182, %180
  %184 = and i32 %183, 1
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %186, %185
  %188 = select i1 %187, i32 1447508664, i32 1135690818
  br label %.backedge

189:                                              ; preds = %4
  br label %.backedge

190:                                              ; preds = %4
  br label %.backedge

191:                                              ; preds = %4
  %192 = icmp slt i32 %.070, 4002
  %193 = select i1 %192, i32 785396233, i32 -554563828
  br label %.backedge

194:                                              ; preds = %4
  %195 = load i32, i32* @x.3, align 4
  %196 = load i32, i32* @y.4, align 4
  %197 = add i32 %195, -1
  %198 = mul i32 %197, %195
  %199 = and i32 %198, 1
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %201, %200
  %203 = select i1 %202, i32 -1346232535, i32 1357108289
  br label %.backedge

204:                                              ; preds = %4
  %205 = load i32, i32* @x.3, align 4
  %206 = load i32, i32* @y.4, align 4
  %207 = add i32 %205, -1
  %208 = mul i32 %207, %205
  %209 = and i32 %208, 1
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %211, %210
  %213 = select i1 %212, i32 1160988448, i32 1357108289
  br label %.backedge

214:                                              ; preds = %4
  br label %.backedge

215:                                              ; preds = %4
  %216 = icmp slt i32 %.068, 4002
  %217 = select i1 %216, i32 1171474388, i32 1526471649
  br label %.backedge

218:                                              ; preds = %4
  %219 = sext i32 %.070 to i64
  %220 = add i32 %.068, -1
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [5010 x [5010 x i32]], [5010 x [5010 x i32]]* @f, i64 0, i64 %219, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = sext i32 %223 to i64
  %225 = add i32 %.070, -1
  %226 = sext i32 %225 to i64
  %227 = sext i32 %.068 to i64
  %228 = getelementptr inbounds [5010 x [5010 x i32]], [5010 x [5010 x i32]]* @f, i64 0, i64 %226, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = sext i32 %229 to i64
  %231 = add nsw i64 %230, %224
  %232 = getelementptr inbounds [5010 x [5010 x i32]], [5010 x [5010 x i32]]* @f, i64 0, i64 %219, i64 %227
  %233 = load i32, i32* %232, align 4
  %234 = sext i32 %233 to i64
  %235 = add nsw i64 %231, %234
  %236 = srem i64 %235, 1000000007
  %237 = trunc i64 %236 to i32
  store i32 %237, i32* %232, align 4
  br label %.backedge

238:                                              ; preds = %4
  %239 = add i32 %.068, 1
  br label %.backedge

240:                                              ; preds = %4
  br label %.backedge

241:                                              ; preds = %4
  %242 = load i32, i32* @x.3, align 4
  %243 = load i32, i32* @y.4, align 4
  %244 = add i32 %242, -1
  %245 = mul i32 %244, %242
  %246 = and i32 %245, 1
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %248, %247
  %250 = select i1 %249, i32 -1600334201, i32 -1029264143
  br label %.backedge

251:                                              ; preds = %4
  %.neg86 = add i32 %.070, 1
  %252 = load i32, i32* @x.3, align 4
  %253 = load i32, i32* @y.4, align 4
  %254 = add i32 %252, -1
  %255 = mul i32 %254, %252
  %256 = and i32 %255, 1
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %258, %257
  %260 = select i1 %259, i32 1443871548, i32 -1029264143
  br label %.backedge

261:                                              ; preds = %4
  br label %.backedge

262:                                              ; preds = %4
  br label %.backedge

263:                                              ; preds = %4
  %264 = load i32, i32* @x.3, align 4
  %265 = load i32, i32* @y.4, align 4
  %266 = add i32 %264, -1
  %267 = mul i32 %266, %264
  %268 = and i32 %267, 1
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %270, %269
  %272 = select i1 %271, i32 -105249147, i32 1259504199
  br label %.backedge

273:                                              ; preds = %4
  %274 = load i32, i32* @n, align 4
  %275 = icmp sle i32 %.064, %274
  store i1 %275, i1* %2, align 1
  %276 = load i32, i32* @x.3, align 4
  %277 = load i32, i32* @y.4, align 4
  %278 = add i32 %276, -1
  %279 = mul i32 %278, %276
  %280 = and i32 %279, 1
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %282, %281
  %284 = select i1 %283, i32 367927465, i32 1259504199
  br label %.backedge

285:                                              ; preds = %4
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %286 = select i1 %.0..0..0., i32 444802511, i32 1038070644
  br label %.backedge

287:                                              ; preds = %4
  %288 = load i32, i32* @x.3, align 4
  %289 = load i32, i32* @y.4, align 4
  %290 = add i32 %288, -1
  %291 = mul i32 %290, %288
  %292 = and i32 %291, 1
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %294, %293
  %296 = select i1 %295, i32 2001794932, i32 -2033407725
  br label %.backedge

297:                                              ; preds = %4
  %298 = sext i32 %.064 to i64
  %299 = getelementptr inbounds [200010 x i32], [200010 x i32]* @a, i64 0, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = add i32 %300, 2001
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [200010 x i32], [200010 x i32]* @b, i64 0, i64 %298
  %304 = load i32, i32* %303, align 4
  %305 = add i32 %304, 2001
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds [5010 x [5010 x i32]], [5010 x [5010 x i32]]* @f, i64 0, i64 %302, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = add i32 %308, %.066
  %310 = srem i32 %309, 1000000007
  %311 = load i32, i32* @x.3, align 4
  %312 = load i32, i32* @y.4, align 4
  %313 = add i32 %311, -1
  %314 = mul i32 %313, %311
  %315 = and i32 %314, 1
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %317, %316
  %319 = select i1 %318, i32 -632745644, i32 -2033407725
  br label %.backedge

320:                                              ; preds = %4
  br label %.backedge

321:                                              ; preds = %4
  %322 = add i32 %.064, 1
  br label %.backedge

323:                                              ; preds = %4
  br label %.backedge

324:                                              ; preds = %4
  %325 = load i32, i32* @x.3, align 4
  %326 = load i32, i32* @y.4, align 4
  %327 = add i32 %325, -1
  %328 = mul i32 %327, %325
  %329 = and i32 %328, 1
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %331, %330
  %333 = select i1 %332, i32 -860187892, i32 100151510
  br label %.backedge

334:                                              ; preds = %4
  %335 = load i32, i32* @n, align 4
  %336 = icmp sle i32 %.062, %335
  store i1 %336, i1* %1, align 1
  %337 = load i32, i32* @x.3, align 4
  %338 = load i32, i32* @y.4, align 4
  %339 = add i32 %337, -1
  %340 = mul i32 %339, %337
  %341 = and i32 %340, 1
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %343, %342
  %345 = select i1 %344, i32 -620453691, i32 100151510
  br label %.backedge

346:                                              ; preds = %4
  %.0..0..0.61 = load volatile i1, i1* %1, align 1
  %347 = select i1 %.0..0..0.61, i32 765764434, i32 -249230409
  br label %.backedge

348:                                              ; preds = %4
  %349 = sext i32 %.062 to i64
  %350 = getelementptr inbounds [200010 x i32], [200010 x i32]* @a, i64 0, i64 %349
  %351 = load i32, i32* %350, align 4
  %352 = getelementptr inbounds [200010 x i32], [200010 x i32]* @b, i64 0, i64 %349
  %353 = load i32, i32* %352, align 4
  %reass.add84 = add i32 %353, %351
  %354 = shl i32 %reass.add84, 1
  %.neg85.neg = shl i32 %351, 1
  %355 = tail call i32 @_Z1Cii(i32 %354, i32 %.neg85.neg)
  %356 = add i32 %.066, 1000000007
  %357 = sub i32 %356, %355
  %358 = srem i32 %357, 1000000007
  br label %.backedge

359:                                              ; preds = %4
  %360 = add i32 %.062, 1
  br label %.backedge

361:                                              ; preds = %4
  %362 = load i32, i32* @x.3, align 4
  %363 = load i32, i32* @y.4, align 4
  %364 = add i32 %362, -1
  %365 = mul i32 %364, %362
  %366 = and i32 %365, 1
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %368, %367
  %370 = select i1 %369, i32 -1396039189, i32 731223757
  br label %.backedge

371:                                              ; preds = %4
  %372 = sext i32 %.066 to i64
  %373 = load i32, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @inv, i64 0, i64 2), align 8
  %374 = sext i32 %373 to i64
  %375 = mul nsw i64 %374, %372
  %376 = srem i64 %375, 1000000007
  %377 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %376)
  %378 = load i32, i32* @x.3, align 4
  %379 = load i32, i32* @y.4, align 4
  %380 = add i32 %378, -1
  %381 = mul i32 %380, %378
  %382 = and i32 %381, 1
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %384, %383
  %386 = select i1 %385, i32 734638777, i32 731223757
  br label %.backedge

387:                                              ; preds = %4
  ret i32 0

388:                                              ; preds = %4
  %.neg82 = add i32 %.080, 1
  br label %.backedge

389:                                              ; preds = %4
  store i32 1, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @inv, i64 0, i64 1), align 4
  store i32 1, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @inv, i64 0, i64 0), align 16
  store i32 1, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @fai, i64 0, i64 0), align 16
  store i32 1, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @fac, i64 0, i64 0), align 16
  br label %.backedge

390:                                              ; preds = %4
  br label %.backedge

391:                                              ; preds = %4
  %392 = add i32 %.074, 1
  br label %.backedge

393:                                              ; preds = %4
  %394 = add i32 %.072, 1
  br label %.backedge

395:                                              ; preds = %4
  br label %.backedge

396:                                              ; preds = %4
  %.neg = add i32 %.070, 1
  br label %.backedge

397:                                              ; preds = %4
  br label %.backedge

398:                                              ; preds = %4
  %399 = sext i32 %.064 to i64
  %400 = getelementptr inbounds [200010 x i32], [200010 x i32]* @a, i64 0, i64 %399
  %401 = load i32, i32* %400, align 4
  %402 = add i32 %401, 2001
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds [200010 x i32], [200010 x i32]* @b, i64 0, i64 %399
  %405 = load i32, i32* %404, align 4
  %406 = add i32 %405, 2001
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds [5010 x [5010 x i32]], [5010 x [5010 x i32]]* @f, i64 0, i64 %403, i64 %407
  %409 = load i32, i32* %408, align 4
  %410 = add i32 %409, %.066
  %411 = srem i32 %410, 1000000007
  br label %.backedge

412:                                              ; preds = %4
  br label %.backedge

413:                                              ; preds = %4
  %414 = sext i32 %.066 to i64
  %415 = load i32, i32* getelementptr inbounds ([200010 x i32], [200010 x i32]* @inv, i64 0, i64 2), align 8
  %416 = sext i32 %415 to i64
  %417 = mul nsw i64 %416, %414
  %418 = srem i64 %417, 1000000007
  %419 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 %418)
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z2giv() local_unnamed_addr #0 comdat {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = tail call i32 @getchar()
  %4 = trunc i32 %3 to i8
  br label %5

5:                                                ; preds = %.backedge, %0
  %6 = phi i32 [ undef, %0 ], [ %.be, %.backedge ]
  %.025 = phi i32 [ 1, %0 ], [ %.025.be, %.backedge ]
  %.023 = phi i32 [ 0, %0 ], [ %.023.be, %.backedge ]
  %.021 = phi i8 [ %4, %0 ], [ %.021.be, %.backedge ]
  %.019 = phi i32 [ 1067575057, %0 ], [ %.019.be, %.backedge ]
  %.017 = phi i1 [ undef, %0 ], [ %.017.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.019, label %.backedge [
    i32 1067575057, label %7
    i32 -242754110, label %17
    i32 -1706570970, label %28
    i32 321105861, label %30
    i32 -2031695549, label %32
    i32 -129422160, label %34
    i32 -1331015125, label %37
    i32 -1032379994, label %38
    i32 441114661, label %41
    i32 232506974, label %51
    i32 -1451779003, label %61
    i32 -1441350634, label %62
    i32 -1360980236, label %65
    i32 1743658913, label %67
    i32 -1947489808, label %69
    i32 165735059, label %75
    i32 -1554725966, label %85
    i32 -425922513, label %96
    i32 -1850057788, label %97
    i32 146426045, label %98
    i32 444135564, label %99
  ]

.backedge:                                        ; preds = %5, %99, %98, %97, %85, %75, %69, %67, %65, %62, %61, %51, %41, %38, %37, %34, %32, %30, %28, %17, %7
  %.be = phi i32 [ %6, %5 ], [ %6, %99 ], [ %6, %98 ], [ %6, %97 ], [ %86, %85 ], [ %6, %75 ], [ %6, %69 ], [ %6, %67 ], [ %6, %65 ], [ %6, %62 ], [ %6, %61 ], [ %6, %51 ], [ %6, %41 ], [ %6, %38 ], [ %6, %37 ], [ %6, %34 ], [ %6, %32 ], [ %6, %30 ], [ %6, %28 ], [ %6, %17 ], [ %6, %7 ]
  %.025.be = phi i32 [ %.025, %5 ], [ %.025, %99 ], [ %.025, %98 ], [ %.025, %97 ], [ %.025, %85 ], [ %.025, %75 ], [ %.025, %69 ], [ %.025, %67 ], [ %.025, %65 ], [ %.025, %62 ], [ %.025, %61 ], [ %.025, %51 ], [ %.025, %41 ], [ %.025, %38 ], [ -1, %37 ], [ %.025, %34 ], [ %.025, %32 ], [ %.025, %30 ], [ %.025, %28 ], [ %.025, %17 ], [ %.025, %7 ]
  %.023.be = phi i32 [ %.023, %5 ], [ %.023, %99 ], [ %.023, %98 ], [ %.023, %97 ], [ %.023, %85 ], [ %.023, %75 ], [ %72, %69 ], [ %.023, %67 ], [ %.023, %65 ], [ %.023, %62 ], [ %.023, %61 ], [ %.023, %51 ], [ %.023, %41 ], [ %.023, %38 ], [ %.023, %37 ], [ %.023, %34 ], [ %.023, %32 ], [ %.023, %30 ], [ %.023, %28 ], [ %.023, %17 ], [ %.023, %7 ]
  %.021.be = phi i8 [ %.021, %5 ], [ %.021, %99 ], [ %.021, %98 ], [ %.021, %97 ], [ %.021, %85 ], [ %.021, %75 ], [ %74, %69 ], [ %.021, %67 ], [ %.021, %65 ], [ %.021, %62 ], [ %.021, %61 ], [ %.021, %51 ], [ %.021, %41 ], [ %40, %38 ], [ %.021, %37 ], [ %.021, %34 ], [ %.021, %32 ], [ %.021, %30 ], [ %.021, %28 ], [ %.021, %17 ], [ %.021, %7 ]
  %.019.be = phi i32 [ %.019, %5 ], [ -1554725966, %99 ], [ 232506974, %98 ], [ -242754110, %97 ], [ %95, %85 ], [ %84, %75 ], [ -1441350634, %69 ], [ %68, %67 ], [ 1743658913, %65 ], [ %64, %62 ], [ -1441350634, %61 ], [ %60, %51 ], [ %50, %41 ], [ 1067575057, %38 ], [ -1032379994, %37 ], [ %36, %34 ], [ %33, %32 ], [ -2031695549, %30 ], [ %29, %28 ], [ %27, %17 ], [ %16, %7 ]
  %.017.be = phi i1 [ %.017, %5 ], [ %.017, %99 ], [ %.017, %98 ], [ %.017, %97 ], [ %.017, %85 ], [ %.017, %75 ], [ %.017, %69 ], [ %.017, %67 ], [ %.017, %65 ], [ %.017, %62 ], [ %.017, %61 ], [ %.017, %51 ], [ %.017, %41 ], [ %.017, %38 ], [ %.017, %37 ], [ %.017, %34 ], [ %.017, %32 ], [ %31, %30 ], [ true, %28 ], [ %.017, %17 ], [ %.017, %7 ]
  %.0.be = phi i1 [ %.0, %5 ], [ %.0, %99 ], [ %.0, %98 ], [ %.0, %97 ], [ %.0, %85 ], [ %.0, %75 ], [ %.0, %69 ], [ %.0, %67 ], [ %66, %65 ], [ false, %62 ], [ %.0, %61 ], [ %.0, %51 ], [ %.0, %41 ], [ %.0, %38 ], [ %.0, %37 ], [ %.0, %34 ], [ %.0, %32 ], [ %.0, %30 ], [ %.0, %28 ], [ %.0, %17 ], [ %.0, %7 ]
  br label %5

7:                                                ; preds = %5
  %8 = load i32, i32* @x.5, align 4
  %9 = load i32, i32* @y.6, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 -242754110, i32 -1850057788
  br label %.backedge

17:                                               ; preds = %5
  %18 = icmp sgt i8 %.021, 57
  store i1 %18, i1* %2, align 1
  %19 = load i32, i32* @x.5, align 4
  %20 = load i32, i32* @y.6, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 -1706570970, i32 -1850057788
  br label %.backedge

28:                                               ; preds = %5
  %.0..0..0.15 = load volatile i1, i1* %2, align 1
  %29 = select i1 %.0..0..0.15, i32 -2031695549, i32 321105861
  br label %.backedge

30:                                               ; preds = %5
  %31 = icmp slt i8 %.021, 48
  br label %.backedge

32:                                               ; preds = %5
  %33 = select i1 %.017, i32 -129422160, i32 441114661
  br label %.backedge

34:                                               ; preds = %5
  %35 = icmp eq i8 %.021, 45
  %36 = select i1 %35, i32 -1331015125, i32 -1032379994
  br label %.backedge

37:                                               ; preds = %5
  br label %.backedge

38:                                               ; preds = %5
  %39 = tail call i32 @getchar()
  %40 = trunc i32 %39 to i8
  br label %.backedge

41:                                               ; preds = %5
  %42 = load i32, i32* @x.5, align 4
  %43 = load i32, i32* @y.6, align 4
  %44 = add i32 %42, -1
  %45 = mul i32 %44, %42
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %48, %47
  %50 = select i1 %49, i32 232506974, i32 146426045
  br label %.backedge

51:                                               ; preds = %5
  %52 = load i32, i32* @x.5, align 4
  %53 = load i32, i32* @y.6, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 -1451779003, i32 146426045
  br label %.backedge

61:                                               ; preds = %5
  br label %.backedge

62:                                               ; preds = %5
  %63 = icmp sgt i8 %.021, 47
  %64 = select i1 %63, i32 -1360980236, i32 1743658913
  br label %.backedge

65:                                               ; preds = %5
  %66 = icmp slt i8 %.021, 58
  br label %.backedge

67:                                               ; preds = %5
  %68 = select i1 %.0, i32 -1947489808, i32 165735059
  br label %.backedge

69:                                               ; preds = %5
  %.neg = mul i32 %.023, 10
  %70 = sext i8 %.021 to i32
  %71 = add i32 %.neg, -48
  %72 = add i32 %71, %70
  %73 = tail call i32 @getchar()
  %74 = trunc i32 %73 to i8
  br label %.backedge

75:                                               ; preds = %5
  %76 = load i32, i32* @x.5, align 4
  %77 = load i32, i32* @y.6, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 -1554725966, i32 444135564
  br label %.backedge

85:                                               ; preds = %5
  %86 = mul nsw i32 %.023, %.025
  %87 = load i32, i32* @x.5, align 4
  %88 = load i32, i32* @y.6, align 4
  %89 = add i32 %87, -1
  %90 = mul i32 %89, %87
  %91 = and i32 %90, 1
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %93, %92
  %95 = select i1 %94, i32 -425922513, i32 444135564
  br label %.backedge

96:                                               ; preds = %5
  store i32 %6, i32* %1, align 4
  %.0..0..0.16 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.16

97:                                               ; preds = %5
  br label %.backedge

98:                                               ; preds = %5
  br label %.backedge

99:                                               ; preds = %5
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s748577047.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.7, align 4
  %4 = load i32, i32* @y.8, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1961870288, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1961870288, label %11
    i32 1350474427, label %14
    i32 1503903238, label %24
    i32 1887912337, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1350474427, i32 1887912337
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.7, align 4
  %16 = load i32, i32* @y.8, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 1503903238, i32 1887912337
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 1350474427, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
