; ModuleID = 'build_ollvm/programs/p04051/s104633036.ll'
source_filename = "Project_CodeNet_C++1400/p04051/s104633036.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

$_Z4readv = comdat any

@n = local_unnamed_addr global i32 0, align 4
@ans = local_unnamed_addr global i32 0, align 4
@a = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@b = local_unnamed_addr global [200010 x i32] zeroinitializer, align 16
@g = local_unnamed_addr global [5000 x [5000 x i32]] zeroinitializer, align 16
@C = local_unnamed_addr global [8010 x [4010 x i32]] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = tail call i32 @_Z4readv()
  store i32 %4, i32* @n, align 4
  br label %5

5:                                                ; preds = %.backedge, %0
  %.068 = phi i32 [ 0, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i32 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i32 [ -125319049, %0 ], [ %.054.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.054, label %.backedge [
    i32 -125319049, label %6
    i32 872700741, label %16
    i32 2144289959, label %27
    i32 -1027915820, label %29
    i32 182175370, label %32
    i32 -1129640785, label %34
    i32 -1941533710, label %35
    i32 1925192003, label %38
    i32 -529227977, label %39
    i32 941477924, label %41
    i32 -1785541582, label %43
    i32 -1472419159, label %45
    i32 -2060523565, label %59
    i32 -964449761, label %61
    i32 1971221141, label %62
    i32 -1389420007, label %64
    i32 271787264, label %65
    i32 -1061052320, label %75
    i32 1022303609, label %87
    i32 2123021946, label %89
    i32 82283490, label %102
    i32 -754472131, label %104
    i32 -1552859750, label %105
    i32 1313671377, label %115
    i32 359491532, label %126
    i32 -1949862795, label %128
    i32 1793063347, label %129
    i32 628561069, label %132
    i32 1450979320, label %150
    i32 -1596670741, label %160
    i32 -1931465819, label %171
    i32 -500309005, label %172
    i32 -1925087219, label %173
    i32 373621605, label %175
    i32 1910549788, label %185
    i32 1573063881, label %195
    i32 630214158, label %196
    i32 -970174926, label %199
    i32 165443507, label %209
    i32 -1666247108, label %242
    i32 -1088643366, label %243
    i32 -408076010, label %253
    i32 -969622604, label %263
    i32 -907746610, label %264
    i32 1892984466, label %274
    i32 -654292001, label %289
    i32 -630091875, label %290
    i32 -45250358, label %291
    i32 881156712, label %292
    i32 1617159538, label %293
    i32 1251337085, label %295
    i32 -54868333, label %296
    i32 2144439400, label %321
    i32 1410618570, label %323
  ]

.backedge:                                        ; preds = %5, %323, %321, %296, %295, %293, %292, %291, %290, %274, %264, %263, %253, %243, %242, %209, %199, %196, %195, %185, %175, %173, %172, %171, %160, %150, %132, %129, %128, %126, %115, %105, %104, %102, %89, %87, %75, %65, %64, %62, %61, %59, %45, %43, %41, %39, %38, %35, %34, %32, %29, %27, %16, %6
  %.068.be = phi i32 [ %.068, %5 ], [ %.068, %323 ], [ %.068, %321 ], [ %.068, %296 ], [ %.068, %295 ], [ %.068, %293 ], [ %.068, %292 ], [ %.068, %291 ], [ %.068, %290 ], [ %.068, %274 ], [ %.068, %264 ], [ %.068, %263 ], [ %.068, %253 ], [ %.068, %243 ], [ %.068, %242 ], [ %.068, %209 ], [ %.068, %199 ], [ %.068, %196 ], [ %.068, %195 ], [ %.068, %185 ], [ %.068, %175 ], [ %.068, %173 ], [ %.068, %172 ], [ %.068, %171 ], [ %.068, %160 ], [ %.068, %150 ], [ %.068, %132 ], [ %.068, %129 ], [ %.068, %128 ], [ %.068, %126 ], [ %.068, %115 ], [ %.068, %105 ], [ %.068, %104 ], [ %.068, %102 ], [ %.068, %89 ], [ %.068, %87 ], [ %.068, %75 ], [ %.068, %65 ], [ %.068, %64 ], [ %.068, %62 ], [ %.068, %61 ], [ %.068, %59 ], [ %.068, %45 ], [ %.068, %43 ], [ %.068, %41 ], [ %.068, %39 ], [ %.068, %38 ], [ %.068, %35 ], [ %.068, %34 ], [ %33, %32 ], [ %.068, %29 ], [ %.068, %27 ], [ %.068, %16 ], [ %.068, %6 ]
  %.066.be = phi i32 [ %.066, %5 ], [ %.066, %323 ], [ %.066, %321 ], [ %.066, %296 ], [ %.066, %295 ], [ %.066, %293 ], [ %.066, %292 ], [ %.066, %291 ], [ %.066, %290 ], [ %.066, %274 ], [ %.066, %264 ], [ %.066, %263 ], [ %.066, %253 ], [ %.066, %243 ], [ %.066, %242 ], [ %.066, %209 ], [ %.066, %199 ], [ %.066, %196 ], [ %.066, %195 ], [ %.066, %185 ], [ %.066, %175 ], [ %.066, %173 ], [ %.066, %172 ], [ %.066, %171 ], [ %.066, %160 ], [ %.066, %150 ], [ %.066, %132 ], [ %.066, %129 ], [ %.066, %128 ], [ %.066, %126 ], [ %.066, %115 ], [ %.066, %105 ], [ %.066, %104 ], [ %.066, %102 ], [ %.066, %89 ], [ %.066, %87 ], [ %.066, %75 ], [ %.066, %65 ], [ %.066, %64 ], [ %63, %62 ], [ %.066, %61 ], [ %.066, %59 ], [ %.066, %45 ], [ %.066, %43 ], [ %.066, %41 ], [ %.066, %39 ], [ %.066, %38 ], [ %.066, %35 ], [ 1, %34 ], [ %.066, %32 ], [ %.066, %29 ], [ %.066, %27 ], [ %.066, %16 ], [ %.066, %6 ]
  %.064.be = phi i32 [ %.064, %5 ], [ %.064, %323 ], [ %.064, %321 ], [ %.064, %296 ], [ %.064, %295 ], [ %.064, %293 ], [ %.064, %292 ], [ %.064, %291 ], [ %.064, %290 ], [ %.064, %274 ], [ %.064, %264 ], [ %.064, %263 ], [ %.064, %253 ], [ %.064, %243 ], [ %.064, %242 ], [ %.064, %209 ], [ %.064, %199 ], [ %.064, %196 ], [ %.064, %195 ], [ %.064, %185 ], [ %.064, %175 ], [ %.064, %173 ], [ %.064, %172 ], [ %.064, %171 ], [ %.064, %160 ], [ %.064, %150 ], [ %.064, %132 ], [ %.064, %129 ], [ %.064, %128 ], [ %.064, %126 ], [ %.064, %115 ], [ %.064, %105 ], [ %.064, %104 ], [ %.064, %102 ], [ %.064, %89 ], [ %.064, %87 ], [ %.064, %75 ], [ %.064, %65 ], [ %.064, %64 ], [ %.064, %62 ], [ %.064, %61 ], [ %60, %59 ], [ %.064, %45 ], [ %.064, %43 ], [ %.064, %41 ], [ %.064, %39 ], [ 1, %38 ], [ %.064, %35 ], [ %.064, %34 ], [ %.064, %32 ], [ %.064, %29 ], [ %.064, %27 ], [ %.064, %16 ], [ %.064, %6 ]
  %.062.be = phi i32 [ %.062, %5 ], [ %.062, %323 ], [ %.062, %321 ], [ %.062, %296 ], [ %.062, %295 ], [ %.062, %293 ], [ %.062, %292 ], [ %.062, %291 ], [ %.062, %290 ], [ %.062, %274 ], [ %.062, %264 ], [ %.062, %263 ], [ %.062, %253 ], [ %.062, %243 ], [ %.062, %242 ], [ %.062, %209 ], [ %.062, %199 ], [ %.062, %196 ], [ %.062, %195 ], [ %.062, %185 ], [ %.062, %175 ], [ %.062, %173 ], [ %.062, %172 ], [ %.062, %171 ], [ %.062, %160 ], [ %.062, %150 ], [ %.062, %132 ], [ %.062, %129 ], [ %.062, %128 ], [ %.062, %126 ], [ %.062, %115 ], [ %.062, %105 ], [ %.062, %104 ], [ %103, %102 ], [ %.062, %89 ], [ %.062, %87 ], [ %.062, %75 ], [ %.062, %65 ], [ 1, %64 ], [ %.062, %62 ], [ %.062, %61 ], [ %.062, %59 ], [ %.062, %45 ], [ %.062, %43 ], [ %.062, %41 ], [ %.062, %39 ], [ %.062, %38 ], [ %.062, %35 ], [ %.062, %34 ], [ %.062, %32 ], [ %.062, %29 ], [ %.062, %27 ], [ %.062, %16 ], [ %.062, %6 ]
  %.060.be = phi i32 [ %.060, %5 ], [ %.060, %323 ], [ %.060, %321 ], [ %.060, %296 ], [ %.060, %295 ], [ %.060, %293 ], [ %.060, %292 ], [ %.060, %291 ], [ %.060, %290 ], [ %.060, %274 ], [ %.060, %264 ], [ %.060, %263 ], [ %.060, %253 ], [ %.060, %243 ], [ %.060, %242 ], [ %.060, %209 ], [ %.060, %199 ], [ %.060, %196 ], [ %.060, %195 ], [ %.060, %185 ], [ %.060, %175 ], [ %174, %173 ], [ %.060, %172 ], [ %.060, %171 ], [ %.060, %160 ], [ %.060, %150 ], [ %.060, %132 ], [ %.060, %129 ], [ %.060, %128 ], [ %.060, %126 ], [ %.060, %115 ], [ %.060, %105 ], [ -2000, %104 ], [ %.060, %102 ], [ %.060, %89 ], [ %.060, %87 ], [ %.060, %75 ], [ %.060, %65 ], [ %.060, %64 ], [ %.060, %62 ], [ %.060, %61 ], [ %.060, %59 ], [ %.060, %45 ], [ %.060, %43 ], [ %.060, %41 ], [ %.060, %39 ], [ %.060, %38 ], [ %.060, %35 ], [ %.060, %34 ], [ %.060, %32 ], [ %.060, %29 ], [ %.060, %27 ], [ %.060, %16 ], [ %.060, %6 ]
  %.058.be = phi i32 [ %.058, %5 ], [ %.058, %323 ], [ %.058, %321 ], [ %.058, %296 ], [ %.058, %295 ], [ %294, %293 ], [ %.058, %292 ], [ %.058, %291 ], [ %.058, %290 ], [ %.058, %274 ], [ %.058, %264 ], [ %.058, %263 ], [ %.058, %253 ], [ %.058, %243 ], [ %.058, %242 ], [ %.058, %209 ], [ %.058, %199 ], [ %.058, %196 ], [ %.058, %195 ], [ %.058, %185 ], [ %.058, %175 ], [ %.058, %173 ], [ %.058, %172 ], [ %.058, %171 ], [ %161, %160 ], [ %.058, %150 ], [ %.058, %132 ], [ %.058, %129 ], [ -2000, %128 ], [ %.058, %126 ], [ %.058, %115 ], [ %.058, %105 ], [ %.058, %104 ], [ %.058, %102 ], [ %.058, %89 ], [ %.058, %87 ], [ %.058, %75 ], [ %.058, %65 ], [ %.058, %64 ], [ %.058, %62 ], [ %.058, %61 ], [ %.058, %59 ], [ %.058, %45 ], [ %.058, %43 ], [ %.058, %41 ], [ %.058, %39 ], [ %.058, %38 ], [ %.058, %35 ], [ %.058, %34 ], [ %.058, %32 ], [ %.058, %29 ], [ %.058, %27 ], [ %.058, %16 ], [ %.058, %6 ]
  %.056.be = phi i32 [ %.056, %5 ], [ %.056, %323 ], [ %322, %321 ], [ %.056, %296 ], [ 1, %295 ], [ %.056, %293 ], [ %.056, %292 ], [ %.056, %291 ], [ %.056, %290 ], [ %.056, %274 ], [ %.056, %264 ], [ %.056, %263 ], [ %.neg, %253 ], [ %.056, %243 ], [ %.056, %242 ], [ %.056, %209 ], [ %.056, %199 ], [ %.056, %196 ], [ %.056, %195 ], [ 1, %185 ], [ %.056, %175 ], [ %.056, %173 ], [ %.056, %172 ], [ %.056, %171 ], [ %.056, %160 ], [ %.056, %150 ], [ %.056, %132 ], [ %.056, %129 ], [ %.056, %128 ], [ %.056, %126 ], [ %.056, %115 ], [ %.056, %105 ], [ %.056, %104 ], [ %.056, %102 ], [ %.056, %89 ], [ %.056, %87 ], [ %.056, %75 ], [ %.056, %65 ], [ %.056, %64 ], [ %.056, %62 ], [ %.056, %61 ], [ %.056, %59 ], [ %.056, %45 ], [ %.056, %43 ], [ %.056, %41 ], [ %.056, %39 ], [ %.056, %38 ], [ %.056, %35 ], [ %.056, %34 ], [ %.056, %32 ], [ %.056, %29 ], [ %.056, %27 ], [ %.056, %16 ], [ %.056, %6 ]
  %.054.be = phi i32 [ %.054, %5 ], [ 1892984466, %323 ], [ -408076010, %321 ], [ 165443507, %296 ], [ 1910549788, %295 ], [ -1596670741, %293 ], [ 1313671377, %292 ], [ -1061052320, %291 ], [ 872700741, %290 ], [ %288, %274 ], [ %273, %264 ], [ 630214158, %263 ], [ %262, %253 ], [ %252, %243 ], [ -1088643366, %242 ], [ %241, %209 ], [ %208, %199 ], [ %198, %196 ], [ 630214158, %195 ], [ %194, %185 ], [ %184, %175 ], [ -1552859750, %173 ], [ -1925087219, %172 ], [ 1793063347, %171 ], [ %170, %160 ], [ %159, %150 ], [ 1450979320, %132 ], [ %131, %129 ], [ 1793063347, %128 ], [ %127, %126 ], [ %125, %115 ], [ %114, %105 ], [ -1552859750, %104 ], [ 271787264, %102 ], [ 82283490, %89 ], [ %88, %87 ], [ %86, %75 ], [ %74, %65 ], [ 271787264, %64 ], [ -1941533710, %62 ], [ 1971221141, %61 ], [ -529227977, %59 ], [ -2060523565, %45 ], [ %44, %43 ], [ -1785541582, %41 ], [ %40, %39 ], [ -529227977, %38 ], [ %37, %35 ], [ -1941533710, %34 ], [ -125319049, %32 ], [ 182175370, %29 ], [ %28, %27 ], [ %26, %16 ], [ %15, %6 ]
  %.0.be = phi i1 [ %.0, %5 ], [ %.0, %323 ], [ %.0, %321 ], [ %.0, %296 ], [ %.0, %295 ], [ %.0, %293 ], [ %.0, %292 ], [ %.0, %291 ], [ %.0, %290 ], [ %.0, %274 ], [ %.0, %264 ], [ %.0, %263 ], [ %.0, %253 ], [ %.0, %243 ], [ %.0, %242 ], [ %.0, %209 ], [ %.0, %199 ], [ %.0, %196 ], [ %.0, %195 ], [ %.0, %185 ], [ %.0, %175 ], [ %.0, %173 ], [ %.0, %172 ], [ %.0, %171 ], [ %.0, %160 ], [ %.0, %150 ], [ %.0, %132 ], [ %.0, %129 ], [ %.0, %128 ], [ %.0, %126 ], [ %.0, %115 ], [ %.0, %105 ], [ %.0, %104 ], [ %.0, %102 ], [ %.0, %89 ], [ %.0, %87 ], [ %.0, %75 ], [ %.0, %65 ], [ %.0, %64 ], [ %.0, %62 ], [ %.0, %61 ], [ %.0, %59 ], [ %.0, %45 ], [ %.0, %43 ], [ %42, %41 ], [ false, %39 ], [ %.0, %38 ], [ %.0, %35 ], [ %.0, %34 ], [ %.0, %32 ], [ %.0, %29 ], [ %.0, %27 ], [ %.0, %16 ], [ %.0, %6 ]
  br label %5

6:                                                ; preds = %5
  %7 = load i32, i32* @x, align 4
  %8 = load i32, i32* @y, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 872700741, i32 -630091875
  br label %.backedge

16:                                               ; preds = %5
  %17 = icmp slt i32 %.068, 8001
  store i1 %17, i1* %3, align 1
  %18 = load i32, i32* @x, align 4
  %19 = load i32, i32* @y, align 4
  %20 = add i32 %18, -1
  %21 = mul i32 %20, %18
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %24, %23
  %26 = select i1 %25, i32 2144289959, i32 -630091875
  br label %.backedge

27:                                               ; preds = %5
  %.0..0..0.51 = load volatile i1, i1* %3, align 1
  %28 = select i1 %.0..0..0.51, i32 -1027915820, i32 -1129640785
  br label %.backedge

29:                                               ; preds = %5
  %30 = sext i32 %.068 to i64
  %31 = getelementptr inbounds [8010 x [4010 x i32]], [8010 x [4010 x i32]]* @C, i64 0, i64 %30, i64 0
  store i32 1, i32* %31, align 8
  br label %.backedge

32:                                               ; preds = %5
  %33 = add i32 %.068, 1
  br label %.backedge

34:                                               ; preds = %5
  br label %.backedge

35:                                               ; preds = %5
  %36 = icmp slt i32 %.066, 8001
  %37 = select i1 %36, i32 1925192003, i32 -1389420007
  br label %.backedge

38:                                               ; preds = %5
  br label %.backedge

39:                                               ; preds = %5
  %.not78 = icmp sgt i32 %.064, %.066
  %40 = select i1 %.not78, i32 -1785541582, i32 941477924
  br label %.backedge

41:                                               ; preds = %5
  %42 = icmp slt i32 %.064, 4001
  br label %.backedge

43:                                               ; preds = %5
  %44 = select i1 %.0, i32 -1472419159, i32 -964449761
  br label %.backedge

45:                                               ; preds = %5
  %46 = add i32 %.066, -1
  %47 = sext i32 %46 to i64
  %48 = sext i32 %.064 to i64
  %49 = getelementptr inbounds [8010 x [4010 x i32]], [8010 x [4010 x i32]]* @C, i64 0, i64 %47, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = add i32 %.064, -1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [8010 x [4010 x i32]], [8010 x [4010 x i32]]* @C, i64 0, i64 %47, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = add i32 %54, %50
  %56 = srem i32 %55, 1000000007
  %57 = sext i32 %.066 to i64
  %58 = getelementptr inbounds [8010 x [4010 x i32]], [8010 x [4010 x i32]]* @C, i64 0, i64 %57, i64 %48
  store i32 %56, i32* %58, align 4
  br label %.backedge

59:                                               ; preds = %5
  %60 = add i32 %.064, 1
  br label %.backedge

61:                                               ; preds = %5
  br label %.backedge

62:                                               ; preds = %5
  %63 = add i32 %.066, 1
  br label %.backedge

64:                                               ; preds = %5
  br label %.backedge

65:                                               ; preds = %5
  %66 = load i32, i32* @x, align 4
  %67 = load i32, i32* @y, align 4
  %68 = add i32 %66, -1
  %69 = mul i32 %68, %66
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %72, %71
  %74 = select i1 %73, i32 -1061052320, i32 -45250358
  br label %.backedge

75:                                               ; preds = %5
  %76 = load i32, i32* @n, align 4
  %77 = icmp sle i32 %.062, %76
  store i1 %77, i1* %2, align 1
  %78 = load i32, i32* @x, align 4
  %79 = load i32, i32* @y, align 4
  %80 = add i32 %78, -1
  %81 = mul i32 %80, %78
  %82 = and i32 %81, 1
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %84, %83
  %86 = select i1 %85, i32 1022303609, i32 -45250358
  br label %.backedge

87:                                               ; preds = %5
  %.0..0..0.52 = load volatile i1, i1* %2, align 1
  %88 = select i1 %.0..0..0.52, i32 2123021946, i32 -754472131
  br label %.backedge

89:                                               ; preds = %5
  %90 = tail call i32 @_Z4readv()
  %91 = sext i32 %.062 to i64
  %92 = getelementptr inbounds [200010 x i32], [200010 x i32]* @a, i64 0, i64 %91
  store i32 %90, i32* %92, align 4
  %93 = tail call i32 @_Z4readv()
  %94 = getelementptr inbounds [200010 x i32], [200010 x i32]* @b, i64 0, i64 %91
  store i32 %93, i32* %94, align 4
  %95 = load i32, i32* %92, align 4
  %96 = sub i32 2010, %95
  %97 = sext i32 %96 to i64
  %98 = sub i32 2010, %93
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [5000 x [5000 x i32]], [5000 x [5000 x i32]]* @g, i64 0, i64 %97, i64 %99
  %101 = load i32, i32* %100, align 4
  %.neg77 = add i32 %101, 1
  store i32 %.neg77, i32* %100, align 4
  br label %.backedge

102:                                              ; preds = %5
  %103 = add i32 %.062, 1
  br label %.backedge

104:                                              ; preds = %5
  br label %.backedge

105:                                              ; preds = %5
  %106 = load i32, i32* @x, align 4
  %107 = load i32, i32* @y, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 1313671377, i32 881156712
  br label %.backedge

115:                                              ; preds = %5
  %116 = icmp slt i32 %.060, 2001
  store i1 %116, i1* %1, align 1
  %117 = load i32, i32* @x, align 4
  %118 = load i32, i32* @y, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 359491532, i32 881156712
  br label %.backedge

126:                                              ; preds = %5
  %.0..0..0.53 = load volatile i1, i1* %1, align 1
  %127 = select i1 %.0..0..0.53, i32 -1949862795, i32 373621605
  br label %.backedge

128:                                              ; preds = %5
  br label %.backedge

129:                                              ; preds = %5
  %130 = icmp slt i32 %.058, 2001
  %131 = select i1 %130, i32 628561069, i32 -500309005
  br label %.backedge

132:                                              ; preds = %5
  %.neg71 = add i32 %.060, 2010
  %133 = sext i32 %.neg71 to i64
  %134 = add i32 %.058, 2010
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [5000 x [5000 x i32]], [5000 x [5000 x i32]]* @g, i64 0, i64 %133, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = add i32 %.060, 2009
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [5000 x [5000 x i32]], [5000 x [5000 x i32]]* @g, i64 0, i64 %139, i64 %135
  %141 = load i32, i32* %140, align 4
  %142 = add i32 %.058, 2009
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [5000 x [5000 x i32]], [5000 x [5000 x i32]]* @g, i64 0, i64 %133, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = add i32 %145, %141
  %147 = srem i32 %146, 1000000007
  %148 = add i32 %147, %137
  %149 = srem i32 %148, 1000000007
  store i32 %149, i32* %136, align 4
  br label %.backedge

150:                                              ; preds = %5
  %151 = load i32, i32* @x, align 4
  %152 = load i32, i32* @y, align 4
  %153 = add i32 %151, -1
  %154 = mul i32 %153, %151
  %155 = and i32 %154, 1
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %157, %156
  %159 = select i1 %158, i32 -1596670741, i32 1617159538
  br label %.backedge

160:                                              ; preds = %5
  %161 = add i32 %.058, 1
  %162 = load i32, i32* @x, align 4
  %163 = load i32, i32* @y, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 -1931465819, i32 1617159538
  br label %.backedge

171:                                              ; preds = %5
  br label %.backedge

172:                                              ; preds = %5
  br label %.backedge

173:                                              ; preds = %5
  %174 = add i32 %.060, 1
  br label %.backedge

175:                                              ; preds = %5
  %176 = load i32, i32* @x, align 4
  %177 = load i32, i32* @y, align 4
  %178 = add i32 %176, -1
  %179 = mul i32 %178, %176
  %180 = and i32 %179, 1
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %182, %181
  %184 = select i1 %183, i32 1910549788, i32 1251337085
  br label %.backedge

185:                                              ; preds = %5
  %186 = load i32, i32* @x, align 4
  %187 = load i32, i32* @y, align 4
  %188 = add i32 %186, -1
  %189 = mul i32 %188, %186
  %190 = and i32 %189, 1
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %192, %191
  %194 = select i1 %193, i32 1573063881, i32 1251337085
  br label %.backedge

195:                                              ; preds = %5
  br label %.backedge

196:                                              ; preds = %5
  %197 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.056, %197
  %198 = select i1 %.not, i32 -907746610, i32 -970174926
  br label %.backedge

199:                                              ; preds = %5
  %200 = load i32, i32* @x, align 4
  %201 = load i32, i32* @y, align 4
  %202 = add i32 %200, -1
  %203 = mul i32 %202, %200
  %204 = and i32 %203, 1
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %206, %205
  %208 = select i1 %207, i32 165443507, i32 -54868333
  br label %.backedge

209:                                              ; preds = %5
  %210 = load i32, i32* @ans, align 4
  %211 = sext i32 %.056 to i64
  %212 = getelementptr inbounds [200010 x i32], [200010 x i32]* @a, i64 0, i64 %211
  %213 = load i32, i32* %212, align 4
  %214 = add i32 %213, 2010
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [200010 x i32], [200010 x i32]* @b, i64 0, i64 %211
  %217 = load i32, i32* %216, align 4
  %.neg70 = add i32 %217, 2010
  %218 = sext i32 %.neg70 to i64
  %219 = getelementptr inbounds [5000 x [5000 x i32]], [5000 x [5000 x i32]]* @g, i64 0, i64 %215, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = add i32 %220, %210
  %222 = srem i32 %221, 1000000007
  %223 = add i32 %217, %213
  %224 = shl nsw i32 %223, 1
  %225 = sext i32 %224 to i64
  %226 = shl nsw i32 %213, 1
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [8010 x [4010 x i32]], [8010 x [4010 x i32]]* @C, i64 0, i64 %225, i64 %227
  %229 = load i32, i32* %228, align 8
  %230 = add nsw i32 %222, 1000000007
  %231 = sub i32 %230, %229
  %232 = srem i32 %231, 1000000007
  store i32 %232, i32* @ans, align 4
  %233 = load i32, i32* @x, align 4
  %234 = load i32, i32* @y, align 4
  %235 = add i32 %233, -1
  %236 = mul i32 %235, %233
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %239, %238
  %241 = select i1 %240, i32 -1666247108, i32 -54868333
  br label %.backedge

242:                                              ; preds = %5
  br label %.backedge

243:                                              ; preds = %5
  %244 = load i32, i32* @x, align 4
  %245 = load i32, i32* @y, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 -408076010, i32 2144439400
  br label %.backedge

253:                                              ; preds = %5
  %.neg = add i32 %.056, 1
  %254 = load i32, i32* @x, align 4
  %255 = load i32, i32* @y, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 -969622604, i32 2144439400
  br label %.backedge

263:                                              ; preds = %5
  br label %.backedge

264:                                              ; preds = %5
  %265 = load i32, i32* @x, align 4
  %266 = load i32, i32* @y, align 4
  %267 = add i32 %265, -1
  %268 = mul i32 %267, %265
  %269 = and i32 %268, 1
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %271, %270
  %273 = select i1 %272, i32 1892984466, i32 1410618570
  br label %.backedge

274:                                              ; preds = %5
  %275 = load i32, i32* @ans, align 4
  %276 = sext i32 %275 to i64
  %277 = mul nsw i64 %276, 500000004
  %278 = srem i64 %277, 1000000007
  %279 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %278)
  %280 = load i32, i32* @x, align 4
  %281 = load i32, i32* @y, align 4
  %282 = add i32 %280, -1
  %283 = mul i32 %282, %280
  %284 = and i32 %283, 1
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %286, %285
  %288 = select i1 %287, i32 -654292001, i32 1410618570
  br label %.backedge

289:                                              ; preds = %5
  ret i32 0

290:                                              ; preds = %5
  br label %.backedge

291:                                              ; preds = %5
  br label %.backedge

292:                                              ; preds = %5
  br label %.backedge

293:                                              ; preds = %5
  %294 = add i32 %.058, 1
  br label %.backedge

295:                                              ; preds = %5
  br label %.backedge

296:                                              ; preds = %5
  %297 = load i32, i32* @ans, align 4
  %298 = sext i32 %.056 to i64
  %299 = getelementptr inbounds [200010 x i32], [200010 x i32]* @a, i64 0, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = add i32 %300, 2010
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [200010 x i32], [200010 x i32]* @b, i64 0, i64 %298
  %304 = load i32, i32* %303, align 4
  %305 = add i32 %304, 2010
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds [5000 x [5000 x i32]], [5000 x [5000 x i32]]* @g, i64 0, i64 %302, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = add i32 %308, %297
  %310 = srem i32 %309, 1000000007
  %311 = add i32 %304, %300
  %312 = shl nsw i32 %311, 1
  %313 = sext i32 %312 to i64
  %314 = shl nsw i32 %300, 1
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds [8010 x [4010 x i32]], [8010 x [4010 x i32]]* @C, i64 0, i64 %313, i64 %315
  %317 = load i32, i32* %316, align 8
  %318 = sub i32 1000000007, %317
  %319 = add i32 %318, %310
  %320 = srem i32 %319, 1000000007
  store i32 %320, i32* @ans, align 4
  br label %.backedge

321:                                              ; preds = %5
  %322 = add i32 %.056, 1
  br label %.backedge

323:                                              ; preds = %5
  %324 = load i32, i32* @ans, align 4
  %325 = sext i32 %324 to i64
  %326 = mul nsw i64 %325, 500000004
  %327 = srem i64 %326, 1000000007
  %328 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %327)
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z4readv() local_unnamed_addr #1 comdat {
  %1 = alloca i1, align 1
  %2 = alloca i32, align 4
  %3 = alloca i1, align 1
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.1, align 4
  %10 = load i32, i32* @y.2, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %0
  %.039 = phi i32 [ 944603715, %0 ], [ %.039.be, %.backedge ]
  %.037 = phi i1 [ undef, %0 ], [ %.037.be, %.backedge ]
  %.035 = phi i1 [ undef, %0 ], [ %.035.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.039, label %.backedge [
    i32 944603715, label %17
    i32 1556711059, label %20
    i32 -2045292774, label %35
    i32 -212514229, label %36
    i32 -50734883, label %39
    i32 1882434994, label %49
    i32 1103308380, label %61
    i32 1882747316, label %63
    i32 1977279890, label %66
    i32 -686439964, label %76
    i32 -958438090, label %86
    i32 1064090567, label %87
    i32 -6329433, label %89
    i32 -1862716288, label %92
    i32 -1091049412, label %96
    i32 -2140263865, label %106
    i32 1021009777, label %118
    i32 -1124218822, label %119
    i32 1398221070, label %120
    i32 100723672, label %124
    i32 2010965001, label %127
    i32 -629238181, label %129
    i32 827785774, label %139
    i32 1174232203, label %157
    i32 -1341195967, label %158
    i32 247871865, label %168
    i32 -1020801450, label %181
    i32 -335978281, label %182
    i32 -2065722795, label %184
    i32 695143141, label %185
    i32 -776911209, label %186
    i32 -571384847, label %189
    i32 -1848282365, label %198
  ]

.backedge:                                        ; preds = %16, %198, %189, %186, %185, %184, %182, %168, %158, %157, %139, %129, %127, %124, %120, %119, %118, %106, %96, %92, %89, %87, %86, %76, %66, %63, %61, %49, %39, %36, %35, %20, %17
  %.039.be = phi i32 [ %.039, %16 ], [ 247871865, %198 ], [ 827785774, %189 ], [ -2140263865, %186 ], [ -686439964, %185 ], [ 1882434994, %184 ], [ 1556711059, %182 ], [ %180, %168 ], [ %167, %158 ], [ 1398221070, %157 ], [ %156, %139 ], [ %138, %129 ], [ %128, %127 ], [ 2010965001, %124 ], [ %123, %120 ], [ 1398221070, %119 ], [ -1124218822, %118 ], [ %117, %106 ], [ %105, %96 ], [ %95, %92 ], [ -212514229, %89 ], [ %88, %87 ], [ 1064090567, %86 ], [ %85, %76 ], [ %75, %66 ], [ 1977279890, %63 ], [ %62, %61 ], [ %60, %49 ], [ %48, %39 ], [ %38, %36 ], [ -212514229, %35 ], [ %34, %20 ], [ %19, %17 ]
  %.037.be = phi i1 [ %.037, %16 ], [ %.037, %198 ], [ %.037, %189 ], [ %.037, %186 ], [ %.037, %185 ], [ %.037, %184 ], [ %.037, %182 ], [ %.037, %168 ], [ %.037, %158 ], [ %.037, %157 ], [ %.037, %139 ], [ %.037, %129 ], [ %.037, %127 ], [ %.037, %124 ], [ %.037, %120 ], [ %.037, %119 ], [ %.037, %118 ], [ %.037, %106 ], [ %.037, %96 ], [ %.037, %92 ], [ %.037, %89 ], [ %.037, %87 ], [ %.037, %86 ], [ %.037, %76 ], [ %.037, %66 ], [ %65, %63 ], [ true, %61 ], [ %.037, %49 ], [ %.037, %39 ], [ %.037, %36 ], [ %.037, %35 ], [ %.037, %20 ], [ %.037, %17 ]
  %.035.be = phi i1 [ %.035, %16 ], [ %.035, %198 ], [ %.035, %189 ], [ %.035, %186 ], [ %.035, %185 ], [ %.035, %184 ], [ %.035, %182 ], [ %.035, %168 ], [ %.035, %158 ], [ %.035, %157 ], [ %.035, %139 ], [ %.035, %129 ], [ %.035, %127 ], [ %.035, %124 ], [ %.035, %120 ], [ %.035, %119 ], [ %.035, %118 ], [ %.035, %106 ], [ %.035, %96 ], [ %.035, %92 ], [ %.035, %89 ], [ %.035, %87 ], [ %.0..0..0.34, %86 ], [ %.035, %76 ], [ %.035, %66 ], [ %.035, %63 ], [ %.035, %61 ], [ %.035, %49 ], [ %.035, %39 ], [ false, %36 ], [ %.035, %35 ], [ %.035, %20 ], [ %.035, %17 ]
  %.0.be = phi i1 [ %.0, %16 ], [ %.0, %198 ], [ %.0, %189 ], [ %.0, %186 ], [ %.0, %185 ], [ %.0, %184 ], [ %.0, %182 ], [ %.0, %168 ], [ %.0, %158 ], [ %.0, %157 ], [ %.0, %139 ], [ %.0, %129 ], [ %.0, %127 ], [ %126, %124 ], [ false, %120 ], [ %.0, %119 ], [ %.0, %118 ], [ %.0, %106 ], [ %.0, %96 ], [ %.0, %92 ], [ %.0, %89 ], [ %.0, %87 ], [ %.0, %86 ], [ %.0, %76 ], [ %.0, %66 ], [ %.0, %63 ], [ %.0, %61 ], [ %.0, %49 ], [ %.0, %39 ], [ %.0, %36 ], [ %.0, %35 ], [ %.0, %20 ], [ %.0, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0.3 = load volatile i1, i1* %8, align 1
  %.0..0..0.4 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0.3, %.0..0..0.4
  %19 = select i1 %18, i32 1556711059, i32 -335978281
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i32, align 4
  store i32* %21, i32** %6, align 8
  %22 = alloca i32, align 4
  store i32* %22, i32** %5, align 8
  %23 = alloca i8, align 1
  store i8* %23, i8** %4, align 8
  %.0..0..0.5 = load volatile i32*, i32** %6, align 8
  store i32 0, i32* %.0..0..0.5, align 4
  %.0..0..0.12 = load volatile i32*, i32** %5, align 8
  store i32 1, i32* %.0..0..0.12, align 4
  %24 = call i32 @getchar()
  %25 = trunc i32 %24 to i8
  %.0..0..0.17 = load volatile i8*, i8** %4, align 8
  store i8 %25, i8* %.0..0..0.17, align 1
  %26 = load i32, i32* @x.1, align 4
  %27 = load i32, i32* @y.2, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 -2045292774, i32 -335978281
  br label %.backedge

35:                                               ; preds = %16
  br label %.backedge

36:                                               ; preds = %16
  %.0..0..0.18 = load volatile i8*, i8** %4, align 8
  %37 = load i8, i8* %.0..0..0.18, align 1
  %.not = icmp eq i8 %37, 45
  %38 = select i1 %.not, i32 1064090567, i32 -50734883
  br label %.backedge

39:                                               ; preds = %16
  %40 = load i32, i32* @x.1, align 4
  %41 = load i32, i32* @y.2, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 1882434994, i32 -2065722795
  br label %.backedge

49:                                               ; preds = %16
  %.0..0..0.19 = load volatile i8*, i8** %4, align 8
  %50 = load i8, i8* %.0..0..0.19, align 1
  %51 = icmp slt i8 %50, 48
  store i1 %51, i1* %3, align 1
  %52 = load i32, i32* @x.1, align 4
  %53 = load i32, i32* @y.2, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 1103308380, i32 -2065722795
  br label %.backedge

61:                                               ; preds = %16
  %.0..0..0.32 = load volatile i1, i1* %3, align 1
  %62 = select i1 %.0..0..0.32, i32 1977279890, i32 1882747316
  br label %.backedge

63:                                               ; preds = %16
  %.0..0..0.20 = load volatile i8*, i8** %4, align 8
  %64 = load i8, i8* %.0..0..0.20, align 1
  %65 = icmp sgt i8 %64, 57
  br label %.backedge

66:                                               ; preds = %16
  store i1 %.037, i1* %1, align 1
  %67 = load i32, i32* @x.1, align 4
  %68 = load i32, i32* @y.2, align 4
  %69 = add i32 %67, -1
  %70 = mul i32 %69, %67
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %73, %72
  %75 = select i1 %74, i32 -686439964, i32 695143141
  br label %.backedge

76:                                               ; preds = %16
  %77 = load i32, i32* @x.1, align 4
  %78 = load i32, i32* @y.2, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 -958438090, i32 695143141
  br label %.backedge

86:                                               ; preds = %16
  %.0..0..0.34 = load volatile i1, i1* %1, align 1
  br label %.backedge

87:                                               ; preds = %16
  %88 = select i1 %.035, i32 -6329433, i32 -1862716288
  br label %.backedge

89:                                               ; preds = %16
  %90 = call i32 @getchar()
  %91 = trunc i32 %90 to i8
  %.0..0..0.21 = load volatile i8*, i8** %4, align 8
  store i8 %91, i8* %.0..0..0.21, align 1
  br label %.backedge

92:                                               ; preds = %16
  %.0..0..0.22 = load volatile i8*, i8** %4, align 8
  %93 = load i8, i8* %.0..0..0.22, align 1
  %94 = icmp eq i8 %93, 45
  %95 = select i1 %94, i32 -1091049412, i32 -1124218822
  br label %.backedge

96:                                               ; preds = %16
  %97 = load i32, i32* @x.1, align 4
  %98 = load i32, i32* @y.2, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 -2140263865, i32 -776911209
  br label %.backedge

106:                                              ; preds = %16
  %.0..0..0.13 = load volatile i32*, i32** %5, align 8
  store i32 -1, i32* %.0..0..0.13, align 4
  %107 = call i32 @getchar()
  %108 = trunc i32 %107 to i8
  %.0..0..0.23 = load volatile i8*, i8** %4, align 8
  store i8 %108, i8* %.0..0..0.23, align 1
  %109 = load i32, i32* @x.1, align 4
  %110 = load i32, i32* @y.2, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 1021009777, i32 -776911209
  br label %.backedge

118:                                              ; preds = %16
  br label %.backedge

119:                                              ; preds = %16
  br label %.backedge

120:                                              ; preds = %16
  %.0..0..0.24 = load volatile i8*, i8** %4, align 8
  %121 = load i8, i8* %.0..0..0.24, align 1
  %122 = icmp sgt i8 %121, 47
  %123 = select i1 %122, i32 100723672, i32 2010965001
  br label %.backedge

124:                                              ; preds = %16
  %.0..0..0.25 = load volatile i8*, i8** %4, align 8
  %125 = load i8, i8* %.0..0..0.25, align 1
  %126 = icmp slt i8 %125, 58
  br label %.backedge

127:                                              ; preds = %16
  %128 = select i1 %.0, i32 -629238181, i32 -1341195967
  br label %.backedge

129:                                              ; preds = %16
  %130 = load i32, i32* @x.1, align 4
  %131 = load i32, i32* @y.2, align 4
  %132 = add i32 %130, -1
  %133 = mul i32 %132, %130
  %134 = and i32 %133, 1
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %136, %135
  %138 = select i1 %137, i32 827785774, i32 -571384847
  br label %.backedge

139:                                              ; preds = %16
  %.0..0..0.6 = load volatile i32*, i32** %6, align 8
  %140 = load i32, i32* %.0..0..0.6, align 4
  %141 = mul nsw i32 %140, 10
  %.0..0..0.26 = load volatile i8*, i8** %4, align 8
  %142 = load i8, i8* %.0..0..0.26, align 1
  %143 = xor i8 %142, 48
  %144 = sext i8 %143 to i32
  %145 = add i32 %141, %144
  %.0..0..0.7 = load volatile i32*, i32** %6, align 8
  store i32 %145, i32* %.0..0..0.7, align 4
  %146 = call i32 @getchar()
  %147 = trunc i32 %146 to i8
  %.0..0..0.27 = load volatile i8*, i8** %4, align 8
  store i8 %147, i8* %.0..0..0.27, align 1
  %148 = load i32, i32* @x.1, align 4
  %149 = load i32, i32* @y.2, align 4
  %150 = add i32 %148, -1
  %151 = mul i32 %150, %148
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 1174232203, i32 -571384847
  br label %.backedge

157:                                              ; preds = %16
  br label %.backedge

158:                                              ; preds = %16
  %159 = load i32, i32* @x.1, align 4
  %160 = load i32, i32* @y.2, align 4
  %161 = add i32 %159, -1
  %162 = mul i32 %161, %159
  %163 = and i32 %162, 1
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %165, %164
  %167 = select i1 %166, i32 247871865, i32 -1848282365
  br label %.backedge

168:                                              ; preds = %16
  %.0..0..0.8 = load volatile i32*, i32** %6, align 8
  %169 = load i32, i32* %.0..0..0.8, align 4
  %.0..0..0.14 = load volatile i32*, i32** %5, align 8
  %170 = load i32, i32* %.0..0..0.14, align 4
  %171 = mul nsw i32 %170, %169
  store i32 %171, i32* %2, align 4
  %172 = load i32, i32* @x.1, align 4
  %173 = load i32, i32* @y.2, align 4
  %174 = add i32 %172, -1
  %175 = mul i32 %174, %172
  %176 = and i32 %175, 1
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %178, %177
  %180 = select i1 %179, i32 -1020801450, i32 -1848282365
  br label %.backedge

181:                                              ; preds = %16
  %.0..0..0.33 = load volatile i32, i32* %2, align 4
  ret i32 %.0..0..0.33

182:                                              ; preds = %16
  %183 = call i32 @getchar()
  br label %.backedge

184:                                              ; preds = %16
  %.0..0..0.28 = load volatile i8*, i8** %4, align 8
  br label %.backedge

185:                                              ; preds = %16
  br label %.backedge

186:                                              ; preds = %16
  %.0..0..0.15 = load volatile i32*, i32** %5, align 8
  store i32 -1, i32* %.0..0..0.15, align 4
  %187 = call i32 @getchar()
  %188 = trunc i32 %187 to i8
  %.0..0..0.29 = load volatile i8*, i8** %4, align 8
  store i8 %188, i8* %.0..0..0.29, align 1
  br label %.backedge

189:                                              ; preds = %16
  %.0..0..0.9 = load volatile i32*, i32** %6, align 8
  %190 = load i32, i32* %.0..0..0.9, align 4
  %191 = mul nsw i32 %190, 10
  %.0..0..0.30 = load volatile i8*, i8** %4, align 8
  %192 = load i8, i8* %.0..0..0.30, align 1
  %193 = xor i8 %192, 48
  %194 = sext i8 %193 to i32
  %195 = add i32 %191, %194
  %.0..0..0.10 = load volatile i32*, i32** %6, align 8
  store i32 %195, i32* %.0..0..0.10, align 4
  %196 = call i32 @getchar()
  %197 = trunc i32 %196 to i8
  %.0..0..0.31 = load volatile i8*, i8** %4, align 8
  store i8 %197, i8* %.0..0..0.31, align 1
  br label %.backedge

198:                                              ; preds = %16
  %.0..0..0.11 = load volatile i32*, i32** %6, align 8
  %.0..0..0.16 = load volatile i32*, i32** %5, align 8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #2

attributes #0 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
