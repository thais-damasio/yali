; ModuleID = 'build_ollvm/programs/p04051/s316122310.ll'
source_filename = "Project_CodeNet_C++1400/p04051/s316122310.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z4readv = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@jc = local_unnamed_addr global [200005 x i64] zeroinitializer, align 16
@a = local_unnamed_addr global [200005 x i64] zeroinitializer, align 16
@n = local_unnamed_addr global i64 0, align 8
@m = local_unnamed_addr global i64 0, align 8
@X = local_unnamed_addr global [200005 x i64] zeroinitializer, align 16
@Y = local_unnamed_addr global [200005 x i64] zeroinitializer, align 16
@mp = local_unnamed_addr global [4050 x [4050 x i64]] zeroinitializer, align 16
@fac = local_unnamed_addr global [200005 x i64] zeroinitializer, align 16
@inv = local_unnamed_addr global [200005 x i64] zeroinitializer, align 16
@ifac = local_unnamed_addr global [200005 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s316122310.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define i64 @_Z1Cxx(i64 %0, i64 %1) local_unnamed_addr #4 {
  %3 = getelementptr inbounds [200005 x i64], [200005 x i64]* @fac, i64 0, i64 %0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds [200005 x i64], [200005 x i64]* @ifac, i64 0, i64 %1
  %6 = load i64, i64* %5, align 8
  %7 = mul nsw i64 %6, %4
  %8 = srem i64 %7, 1000000007
  %9 = sub i64 %0, %1
  %10 = getelementptr inbounds [200005 x i64], [200005 x i64]* @ifac, i64 0, i64 %9
  %11 = load i64, i64* %10, align 8
  %12 = mul nsw i64 %8, %11
  %13 = srem i64 %12, 1000000007
  ret i64 %13
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = tail call i64 @_Z4readv()
  store i64 %3, i64* @n, align 8
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* bitcast ([200005 x i64]* @inv to <2 x i64>*), align 16
  store i64 1, i64* getelementptr inbounds ([200005 x i64], [200005 x i64]* @ifac, i64 0, i64 0), align 16
  store i64 1, i64* getelementptr inbounds ([200005 x i64], [200005 x i64]* @fac, i64 0, i64 0), align 16
  br label %4

4:                                                ; preds = %.backedge, %0
  %.089 = phi i64 [ 2, %0 ], [ %.089.be, %.backedge ]
  %.087 = phi i64 [ undef, %0 ], [ %.087.be, %.backedge ]
  %.085 = phi i64 [ undef, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i64 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i64 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i64 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i64 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i64 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i64 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i64 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.0 = phi i32 [ -516992815, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -516992815, label %5
    i32 1588371853, label %8
    i32 1710155524, label %18
    i32 1059062304, label %36
    i32 1480986714, label %37
    i32 1625394762, label %39
    i32 1237406364, label %40
    i32 -1265646556, label %43
    i32 89342471, label %50
    i32 419047505, label %52
    i32 331949502, label %62
    i32 -1240522444, label %72
    i32 205392287, label %73
    i32 -1801928475, label %83
    i32 -246407134, label %94
    i32 -687887888, label %96
    i32 178426193, label %105
    i32 299555303, label %115
    i32 1539396691, label %126
    i32 -1230059433, label %127
    i32 -1838864718, label %128
    i32 -198995631, label %131
    i32 -996786827, label %136
    i32 -584897327, label %138
    i32 1897524882, label %139
    i32 344946337, label %142
    i32 -1469167482, label %152
    i32 -150992224, label %171
    i32 -316942929, label %172
    i32 1454951039, label %174
    i32 1938708711, label %184
    i32 1602072010, label %194
    i32 1049738627, label %195
    i32 816407048, label %198
    i32 928407076, label %199
    i32 79768269, label %209
    i32 -1869042467, label %220
    i32 965309370, label %222
    i32 38738453, label %232
    i32 704074672, label %253
    i32 490622682, label %254
    i32 1761972969, label %264
    i32 914032513, label %275
    i32 583767756, label %276
    i32 30608077, label %277
    i32 306331815, label %278
    i32 285588441, label %279
    i32 -819812491, label %282
    i32 652514501, label %292
    i32 -988258359, label %312
    i32 1588077845, label %313
    i32 1406857765, label %323
    i32 1551945041, label %334
    i32 -112406626, label %335
    i32 1548918446, label %345
    i32 2112152933, label %355
    i32 -165137055, label %356
    i32 -2075983135, label %359
    i32 -977626680, label %370
    i32 663739790, label %372
    i32 -385094222, label %377
    i32 55900499, label %386
    i32 2138966298, label %387
    i32 -1547129132, label %388
    i32 441965356, label %390
    i32 1105816086, label %400
    i32 748089649, label %401
    i32 -19738824, label %402
    i32 -1612123863, label %414
    i32 -1788922903, label %416
    i32 666634495, label %427
    i32 1491290824, label %429
  ]

.backedge:                                        ; preds = %4, %429, %427, %416, %414, %402, %401, %400, %390, %388, %387, %386, %377, %370, %359, %356, %355, %345, %335, %334, %323, %313, %312, %292, %282, %279, %278, %277, %276, %275, %264, %254, %253, %232, %222, %220, %209, %199, %198, %195, %194, %184, %174, %172, %171, %152, %142, %139, %138, %136, %131, %128, %127, %126, %115, %105, %96, %94, %83, %73, %72, %62, %52, %50, %43, %40, %39, %37, %36, %18, %8, %5
  %.089.be = phi i64 [ %.089, %4 ], [ %.089, %429 ], [ %.089, %427 ], [ %.089, %416 ], [ %.089, %414 ], [ %.089, %402 ], [ %.089, %401 ], [ %.089, %400 ], [ %.089, %390 ], [ %.089, %388 ], [ %.089, %387 ], [ %.089, %386 ], [ %.089, %377 ], [ %.089, %370 ], [ %.089, %359 ], [ %.089, %356 ], [ %.089, %355 ], [ %.089, %345 ], [ %.089, %335 ], [ %.089, %334 ], [ %.089, %323 ], [ %.089, %313 ], [ %.089, %312 ], [ %.089, %292 ], [ %.089, %282 ], [ %.089, %279 ], [ %.089, %278 ], [ %.089, %277 ], [ %.089, %276 ], [ %.089, %275 ], [ %.089, %264 ], [ %.089, %254 ], [ %.089, %253 ], [ %.089, %232 ], [ %.089, %222 ], [ %.089, %220 ], [ %.089, %209 ], [ %.089, %199 ], [ %.089, %198 ], [ %.089, %195 ], [ %.089, %194 ], [ %.089, %184 ], [ %.089, %174 ], [ %.089, %172 ], [ %.089, %171 ], [ %.089, %152 ], [ %.089, %142 ], [ %.089, %139 ], [ %.089, %138 ], [ %.089, %136 ], [ %.089, %131 ], [ %.089, %128 ], [ %.089, %127 ], [ %.089, %126 ], [ %.089, %115 ], [ %.089, %105 ], [ %.089, %96 ], [ %.089, %94 ], [ %.089, %83 ], [ %.089, %73 ], [ %.089, %72 ], [ %.089, %62 ], [ %.089, %52 ], [ %.089, %50 ], [ %.089, %43 ], [ %.089, %40 ], [ %.089, %39 ], [ %38, %37 ], [ %.089, %36 ], [ %.089, %18 ], [ %.089, %8 ], [ %.089, %5 ]
  %.087.be = phi i64 [ %.087, %4 ], [ %.087, %429 ], [ %.087, %427 ], [ %.087, %416 ], [ %.087, %414 ], [ %.087, %402 ], [ %.087, %401 ], [ %.087, %400 ], [ %.087, %390 ], [ %.087, %388 ], [ %.087, %387 ], [ %.087, %386 ], [ %.087, %377 ], [ %.087, %370 ], [ %.087, %359 ], [ %.087, %356 ], [ %.087, %355 ], [ %.087, %345 ], [ %.087, %335 ], [ %.087, %334 ], [ %.087, %323 ], [ %.087, %313 ], [ %.087, %312 ], [ %.087, %292 ], [ %.087, %282 ], [ %.087, %279 ], [ %.087, %278 ], [ %.087, %277 ], [ %.087, %276 ], [ %.087, %275 ], [ %.087, %264 ], [ %.087, %254 ], [ %.087, %253 ], [ %.087, %232 ], [ %.087, %222 ], [ %.087, %220 ], [ %.087, %209 ], [ %.087, %199 ], [ %.087, %198 ], [ %.087, %195 ], [ %.087, %194 ], [ %.087, %184 ], [ %.087, %174 ], [ %.087, %172 ], [ %.087, %171 ], [ %.087, %152 ], [ %.087, %142 ], [ %.087, %139 ], [ %.087, %138 ], [ %.087, %136 ], [ %.087, %131 ], [ %.087, %128 ], [ %.087, %127 ], [ %.087, %126 ], [ %.087, %115 ], [ %.087, %105 ], [ %.087, %96 ], [ %.087, %94 ], [ %.087, %83 ], [ %.087, %73 ], [ %.087, %72 ], [ %.087, %62 ], [ %.087, %52 ], [ %51, %50 ], [ %.087, %43 ], [ %.087, %40 ], [ 1, %39 ], [ %.087, %37 ], [ %.087, %36 ], [ %.087, %18 ], [ %.087, %8 ], [ %.087, %5 ]
  %.085.be = phi i64 [ %.085, %4 ], [ %.085, %429 ], [ %.085, %427 ], [ %.085, %416 ], [ %.085, %414 ], [ %.085, %402 ], [ %.085, %401 ], [ %.085, %400 ], [ %.085, %390 ], [ %389, %388 ], [ %.085, %387 ], [ 1, %386 ], [ %.085, %377 ], [ %.085, %370 ], [ %.085, %359 ], [ %.085, %356 ], [ %.085, %355 ], [ %.085, %345 ], [ %.085, %335 ], [ %.085, %334 ], [ %.085, %323 ], [ %.085, %313 ], [ %.085, %312 ], [ %.085, %292 ], [ %.085, %282 ], [ %.085, %279 ], [ %.085, %278 ], [ %.085, %277 ], [ %.085, %276 ], [ %.085, %275 ], [ %.085, %264 ], [ %.085, %254 ], [ %.085, %253 ], [ %.085, %232 ], [ %.085, %222 ], [ %.085, %220 ], [ %.085, %209 ], [ %.085, %199 ], [ %.085, %198 ], [ %.085, %195 ], [ %.085, %194 ], [ %.085, %184 ], [ %.085, %174 ], [ %.085, %172 ], [ %.085, %171 ], [ %.085, %152 ], [ %.085, %142 ], [ %.085, %139 ], [ %.085, %138 ], [ %.085, %136 ], [ %.085, %131 ], [ %.085, %128 ], [ %.085, %127 ], [ %.085, %126 ], [ %116, %115 ], [ %.085, %105 ], [ %.085, %96 ], [ %.085, %94 ], [ %.085, %83 ], [ %.085, %73 ], [ %.085, %72 ], [ 1, %62 ], [ %.085, %52 ], [ %.085, %50 ], [ %.085, %43 ], [ %.085, %40 ], [ %.085, %39 ], [ %.085, %37 ], [ %.085, %36 ], [ %.085, %18 ], [ %.085, %8 ], [ %.085, %5 ]
  %.083.be = phi i64 [ %.083, %4 ], [ %.083, %429 ], [ %.083, %427 ], [ %.083, %416 ], [ %.083, %414 ], [ %.083, %402 ], [ %.083, %401 ], [ %.083, %400 ], [ %.083, %390 ], [ %.083, %388 ], [ %.083, %387 ], [ %.083, %386 ], [ %.083, %377 ], [ %.083, %370 ], [ %.083, %359 ], [ %.083, %356 ], [ %.083, %355 ], [ %.083, %345 ], [ %.083, %335 ], [ %.083, %334 ], [ %.083, %323 ], [ %.083, %313 ], [ %.083, %312 ], [ %.083, %292 ], [ %.083, %282 ], [ %.083, %279 ], [ %.083, %278 ], [ %.083, %277 ], [ %.083, %276 ], [ %.083, %275 ], [ %.083, %264 ], [ %.083, %254 ], [ %.083, %253 ], [ %.083, %232 ], [ %.083, %222 ], [ %.083, %220 ], [ %.083, %209 ], [ %.083, %199 ], [ %.083, %198 ], [ %.083, %195 ], [ %.083, %194 ], [ %.083, %184 ], [ %.083, %174 ], [ %.083, %172 ], [ %.083, %171 ], [ %.083, %152 ], [ %.083, %142 ], [ %.083, %139 ], [ %.083, %138 ], [ %137, %136 ], [ %.083, %131 ], [ %.083, %128 ], [ 1, %127 ], [ %.083, %126 ], [ %.083, %115 ], [ %.083, %105 ], [ %.083, %96 ], [ %.083, %94 ], [ %.083, %83 ], [ %.083, %73 ], [ %.083, %72 ], [ %.083, %62 ], [ %.083, %52 ], [ %.083, %50 ], [ %.083, %43 ], [ %.083, %40 ], [ %.083, %39 ], [ %.083, %37 ], [ %.083, %36 ], [ %.083, %18 ], [ %.083, %8 ], [ %.083, %5 ]
  %.081.be = phi i64 [ %.081, %4 ], [ %.081, %429 ], [ %.081, %427 ], [ %.081, %416 ], [ %.081, %414 ], [ %.081, %402 ], [ %.081, %401 ], [ %.081, %400 ], [ %.081, %390 ], [ %.081, %388 ], [ %.081, %387 ], [ %.081, %386 ], [ %.081, %377 ], [ %.081, %370 ], [ %.081, %359 ], [ %.081, %356 ], [ %.081, %355 ], [ %.081, %345 ], [ %.081, %335 ], [ %.081, %334 ], [ %.081, %323 ], [ %.081, %313 ], [ %.081, %312 ], [ %.081, %292 ], [ %.081, %282 ], [ %.081, %279 ], [ %.081, %278 ], [ %.081, %277 ], [ %.081, %276 ], [ %.081, %275 ], [ %.081, %264 ], [ %.081, %254 ], [ %.081, %253 ], [ %.081, %232 ], [ %.081, %222 ], [ %.081, %220 ], [ %.081, %209 ], [ %.081, %199 ], [ %.081, %198 ], [ %.081, %195 ], [ %.081, %194 ], [ %.081, %184 ], [ %.081, %174 ], [ %173, %172 ], [ %.081, %171 ], [ %.081, %152 ], [ %.081, %142 ], [ %.081, %139 ], [ 1, %138 ], [ %.081, %136 ], [ %.081, %131 ], [ %.081, %128 ], [ %.081, %127 ], [ %.081, %126 ], [ %.081, %115 ], [ %.081, %105 ], [ %.081, %96 ], [ %.081, %94 ], [ %.081, %83 ], [ %.081, %73 ], [ %.081, %72 ], [ %.081, %62 ], [ %.081, %52 ], [ %.081, %50 ], [ %.081, %43 ], [ %.081, %40 ], [ %.081, %39 ], [ %.081, %37 ], [ %.081, %36 ], [ %.081, %18 ], [ %.081, %8 ], [ %.081, %5 ]
  %.079.be = phi i64 [ %.079, %4 ], [ %.079, %429 ], [ %.079, %427 ], [ %.079, %416 ], [ %.079, %414 ], [ %.079, %402 ], [ %.079, %401 ], [ 1, %400 ], [ %.079, %390 ], [ %.079, %388 ], [ %.079, %387 ], [ %.079, %386 ], [ %.079, %377 ], [ %.079, %370 ], [ %.079, %359 ], [ %.079, %356 ], [ %.079, %355 ], [ %.079, %345 ], [ %.079, %335 ], [ %.079, %334 ], [ %.079, %323 ], [ %.079, %313 ], [ %.079, %312 ], [ %.079, %292 ], [ %.079, %282 ], [ %.079, %279 ], [ %.079, %278 ], [ %.neg, %277 ], [ %.079, %276 ], [ %.079, %275 ], [ %.079, %264 ], [ %.079, %254 ], [ %.079, %253 ], [ %.079, %232 ], [ %.079, %222 ], [ %.079, %220 ], [ %.079, %209 ], [ %.079, %199 ], [ %.079, %198 ], [ %.079, %195 ], [ %.079, %194 ], [ 1, %184 ], [ %.079, %174 ], [ %.079, %172 ], [ %.079, %171 ], [ %.079, %152 ], [ %.079, %142 ], [ %.079, %139 ], [ %.079, %138 ], [ %.079, %136 ], [ %.079, %131 ], [ %.079, %128 ], [ %.079, %127 ], [ %.079, %126 ], [ %.079, %115 ], [ %.079, %105 ], [ %.079, %96 ], [ %.079, %94 ], [ %.079, %83 ], [ %.079, %73 ], [ %.079, %72 ], [ %.079, %62 ], [ %.079, %52 ], [ %.079, %50 ], [ %.079, %43 ], [ %.079, %40 ], [ %.079, %39 ], [ %.079, %37 ], [ %.079, %36 ], [ %.079, %18 ], [ %.079, %8 ], [ %.079, %5 ]
  %.077.be = phi i64 [ %.077, %4 ], [ %.077, %429 ], [ %.077, %427 ], [ %.077, %416 ], [ %415, %414 ], [ %.077, %402 ], [ %.077, %401 ], [ %.077, %400 ], [ %.077, %390 ], [ %.077, %388 ], [ %.077, %387 ], [ %.077, %386 ], [ %.077, %377 ], [ %.077, %370 ], [ %.077, %359 ], [ %.077, %356 ], [ %.077, %355 ], [ %.077, %345 ], [ %.077, %335 ], [ %.077, %334 ], [ %.077, %323 ], [ %.077, %313 ], [ %.077, %312 ], [ %.077, %292 ], [ %.077, %282 ], [ %.077, %279 ], [ %.077, %278 ], [ %.077, %277 ], [ %.077, %276 ], [ %.077, %275 ], [ %265, %264 ], [ %.077, %254 ], [ %.077, %253 ], [ %.077, %232 ], [ %.077, %222 ], [ %.077, %220 ], [ %.077, %209 ], [ %.077, %199 ], [ 1, %198 ], [ %.077, %195 ], [ %.077, %194 ], [ %.077, %184 ], [ %.077, %174 ], [ %.077, %172 ], [ %.077, %171 ], [ %.077, %152 ], [ %.077, %142 ], [ %.077, %139 ], [ %.077, %138 ], [ %.077, %136 ], [ %.077, %131 ], [ %.077, %128 ], [ %.077, %127 ], [ %.077, %126 ], [ %.077, %115 ], [ %.077, %105 ], [ %.077, %96 ], [ %.077, %94 ], [ %.077, %83 ], [ %.077, %73 ], [ %.077, %72 ], [ %.077, %62 ], [ %.077, %52 ], [ %.077, %50 ], [ %.077, %43 ], [ %.077, %40 ], [ %.077, %39 ], [ %.077, %37 ], [ %.077, %36 ], [ %.077, %18 ], [ %.077, %8 ], [ %.077, %5 ]
  %.075.be = phi i64 [ %.075, %4 ], [ %.075, %429 ], [ %.075, %427 ], [ %426, %416 ], [ %.075, %414 ], [ %.075, %402 ], [ %.075, %401 ], [ %.075, %400 ], [ %.075, %390 ], [ %.075, %388 ], [ %.075, %387 ], [ %.075, %386 ], [ %.075, %377 ], [ %.075, %370 ], [ %369, %359 ], [ %.075, %356 ], [ %.075, %355 ], [ %.075, %345 ], [ %.075, %335 ], [ %.075, %334 ], [ %.075, %323 ], [ %.075, %313 ], [ %.075, %312 ], [ %302, %292 ], [ %.075, %282 ], [ %.075, %279 ], [ 0, %278 ], [ %.075, %277 ], [ %.075, %276 ], [ %.075, %275 ], [ %.075, %264 ], [ %.075, %254 ], [ %.075, %253 ], [ %.075, %232 ], [ %.075, %222 ], [ %.075, %220 ], [ %.075, %209 ], [ %.075, %199 ], [ %.075, %198 ], [ %.075, %195 ], [ %.075, %194 ], [ %.075, %184 ], [ %.075, %174 ], [ %.075, %172 ], [ %.075, %171 ], [ %.075, %152 ], [ %.075, %142 ], [ %.075, %139 ], [ %.075, %138 ], [ %.075, %136 ], [ %.075, %131 ], [ %.075, %128 ], [ %.075, %127 ], [ %.075, %126 ], [ %.075, %115 ], [ %.075, %105 ], [ %.075, %96 ], [ %.075, %94 ], [ %.075, %83 ], [ %.075, %73 ], [ %.075, %72 ], [ %.075, %62 ], [ %.075, %52 ], [ %.075, %50 ], [ %.075, %43 ], [ %.075, %40 ], [ %.075, %39 ], [ %.075, %37 ], [ %.075, %36 ], [ %.075, %18 ], [ %.075, %8 ], [ %.075, %5 ]
  %.073.be = phi i64 [ %.073, %4 ], [ %.073, %429 ], [ %428, %427 ], [ %.073, %416 ], [ %.073, %414 ], [ %.073, %402 ], [ %.073, %401 ], [ %.073, %400 ], [ %.073, %390 ], [ %.073, %388 ], [ %.073, %387 ], [ %.073, %386 ], [ %.073, %377 ], [ %.073, %370 ], [ %.073, %359 ], [ %.073, %356 ], [ %.073, %355 ], [ %.073, %345 ], [ %.073, %335 ], [ %.073, %334 ], [ %324, %323 ], [ %.073, %313 ], [ %.073, %312 ], [ %.073, %292 ], [ %.073, %282 ], [ %.073, %279 ], [ 1, %278 ], [ %.073, %277 ], [ %.073, %276 ], [ %.073, %275 ], [ %.073, %264 ], [ %.073, %254 ], [ %.073, %253 ], [ %.073, %232 ], [ %.073, %222 ], [ %.073, %220 ], [ %.073, %209 ], [ %.073, %199 ], [ %.073, %198 ], [ %.073, %195 ], [ %.073, %194 ], [ %.073, %184 ], [ %.073, %174 ], [ %.073, %172 ], [ %.073, %171 ], [ %.073, %152 ], [ %.073, %142 ], [ %.073, %139 ], [ %.073, %138 ], [ %.073, %136 ], [ %.073, %131 ], [ %.073, %128 ], [ %.073, %127 ], [ %.073, %126 ], [ %.073, %115 ], [ %.073, %105 ], [ %.073, %96 ], [ %.073, %94 ], [ %.073, %83 ], [ %.073, %73 ], [ %.073, %72 ], [ %.073, %62 ], [ %.073, %52 ], [ %.073, %50 ], [ %.073, %43 ], [ %.073, %40 ], [ %.073, %39 ], [ %.073, %37 ], [ %.073, %36 ], [ %.073, %18 ], [ %.073, %8 ], [ %.073, %5 ]
  %.071.be = phi i64 [ %.071, %4 ], [ 1, %429 ], [ %.071, %427 ], [ %.071, %416 ], [ %.071, %414 ], [ %.071, %402 ], [ %.071, %401 ], [ %.071, %400 ], [ %.071, %390 ], [ %.071, %388 ], [ %.071, %387 ], [ %.071, %386 ], [ %.071, %377 ], [ %371, %370 ], [ %.071, %359 ], [ %.071, %356 ], [ %.071, %355 ], [ 1, %345 ], [ %.071, %335 ], [ %.071, %334 ], [ %.071, %323 ], [ %.071, %313 ], [ %.071, %312 ], [ %.071, %292 ], [ %.071, %282 ], [ %.071, %279 ], [ %.071, %278 ], [ %.071, %277 ], [ %.071, %276 ], [ %.071, %275 ], [ %.071, %264 ], [ %.071, %254 ], [ %.071, %253 ], [ %.071, %232 ], [ %.071, %222 ], [ %.071, %220 ], [ %.071, %209 ], [ %.071, %199 ], [ %.071, %198 ], [ %.071, %195 ], [ %.071, %194 ], [ %.071, %184 ], [ %.071, %174 ], [ %.071, %172 ], [ %.071, %171 ], [ %.071, %152 ], [ %.071, %142 ], [ %.071, %139 ], [ %.071, %138 ], [ %.071, %136 ], [ %.071, %131 ], [ %.071, %128 ], [ %.071, %127 ], [ %.071, %126 ], [ %.071, %115 ], [ %.071, %105 ], [ %.071, %96 ], [ %.071, %94 ], [ %.071, %83 ], [ %.071, %73 ], [ %.071, %72 ], [ %.071, %62 ], [ %.071, %52 ], [ %.071, %50 ], [ %.071, %43 ], [ %.071, %40 ], [ %.071, %39 ], [ %.071, %37 ], [ %.071, %36 ], [ %.071, %18 ], [ %.071, %8 ], [ %.071, %5 ]
  %.0.be = phi i32 [ %.0, %4 ], [ 1548918446, %429 ], [ 1406857765, %427 ], [ 652514501, %416 ], [ 1761972969, %414 ], [ 38738453, %402 ], [ 79768269, %401 ], [ 1938708711, %400 ], [ -1469167482, %390 ], [ 299555303, %388 ], [ -1801928475, %387 ], [ 331949502, %386 ], [ 1710155524, %377 ], [ -165137055, %370 ], [ -977626680, %359 ], [ %358, %356 ], [ -165137055, %355 ], [ %354, %345 ], [ %344, %335 ], [ 285588441, %334 ], [ %333, %323 ], [ %322, %313 ], [ 1588077845, %312 ], [ %311, %292 ], [ %291, %282 ], [ %281, %279 ], [ 285588441, %278 ], [ 1049738627, %277 ], [ 30608077, %276 ], [ 928407076, %275 ], [ %274, %264 ], [ %263, %254 ], [ 490622682, %253 ], [ %252, %232 ], [ %231, %222 ], [ %221, %220 ], [ %219, %209 ], [ %208, %199 ], [ 928407076, %198 ], [ %197, %195 ], [ 1049738627, %194 ], [ %193, %184 ], [ %183, %174 ], [ 1897524882, %172 ], [ -316942929, %171 ], [ %170, %152 ], [ %151, %142 ], [ %141, %139 ], [ 1897524882, %138 ], [ -1838864718, %136 ], [ -996786827, %131 ], [ %130, %128 ], [ -1838864718, %127 ], [ 205392287, %126 ], [ %125, %115 ], [ %114, %105 ], [ 178426193, %96 ], [ %95, %94 ], [ %93, %83 ], [ %82, %73 ], [ 205392287, %72 ], [ %71, %62 ], [ %61, %52 ], [ 1237406364, %50 ], [ 89342471, %43 ], [ %42, %40 ], [ 1237406364, %39 ], [ -516992815, %37 ], [ 1480986714, %36 ], [ %35, %18 ], [ %17, %8 ], [ %7, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = icmp slt i64 %.089, 10001
  %7 = select i1 %6, i32 1588371853, i32 1625394762
  br label %.backedge

8:                                                ; preds = %4
  %9 = load i32, i32* @x.3, align 4
  %10 = load i32, i32* @y.4, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %15, %14
  %17 = select i1 %16, i32 1710155524, i32 -385094222
  br label %.backedge

18:                                               ; preds = %4
  %19 = sdiv i64 1000000007, %.089
  %20 = sub nsw i64 1000000007, %19
  %21 = srem i64 1000000007, %.089
  %22 = getelementptr inbounds [200005 x i64], [200005 x i64]* @inv, i64 0, i64 %21
  %23 = load i64, i64* %22, align 8
  %24 = mul nsw i64 %23, %20
  %25 = srem i64 %24, 1000000007
  %26 = getelementptr inbounds [200005 x i64], [200005 x i64]* @inv, i64 0, i64 %.089
  store i64 %25, i64* %26, align 8
  %27 = load i32, i32* @x.3, align 4
  %28 = load i32, i32* @y.4, align 4
  %29 = add i32 %27, -1
  %30 = mul i32 %29, %27
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %33, %32
  %35 = select i1 %34, i32 1059062304, i32 -385094222
  br label %.backedge

36:                                               ; preds = %4
  br label %.backedge

37:                                               ; preds = %4
  %38 = add i64 %.089, 1
  br label %.backedge

39:                                               ; preds = %4
  br label %.backedge

40:                                               ; preds = %4
  %41 = icmp slt i64 %.087, 10001
  %42 = select i1 %41, i32 -1265646556, i32 419047505
  br label %.backedge

43:                                               ; preds = %4
  %44 = add i64 %.087, -1
  %45 = getelementptr inbounds [200005 x i64], [200005 x i64]* @fac, i64 0, i64 %44
  %46 = load i64, i64* %45, align 8
  %47 = mul nsw i64 %46, %.087
  %48 = srem i64 %47, 1000000007
  %49 = getelementptr inbounds [200005 x i64], [200005 x i64]* @fac, i64 0, i64 %.087
  store i64 %48, i64* %49, align 8
  br label %.backedge

50:                                               ; preds = %4
  %51 = add i64 %.087, 1
  br label %.backedge

52:                                               ; preds = %4
  %53 = load i32, i32* @x.3, align 4
  %54 = load i32, i32* @y.4, align 4
  %55 = add i32 %53, -1
  %56 = mul i32 %55, %53
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %59, %58
  %61 = select i1 %60, i32 331949502, i32 55900499
  br label %.backedge

62:                                               ; preds = %4
  %63 = load i32, i32* @x.3, align 4
  %64 = load i32, i32* @y.4, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 -1240522444, i32 55900499
  br label %.backedge

72:                                               ; preds = %4
  br label %.backedge

73:                                               ; preds = %4
  %74 = load i32, i32* @x.3, align 4
  %75 = load i32, i32* @y.4, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 -1801928475, i32 2138966298
  br label %.backedge

83:                                               ; preds = %4
  %84 = icmp slt i64 %.085, 10001
  store i1 %84, i1* %2, align 1
  %85 = load i32, i32* @x.3, align 4
  %86 = load i32, i32* @y.4, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 -246407134, i32 2138966298
  br label %.backedge

94:                                               ; preds = %4
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %95 = select i1 %.0..0..0., i32 -687887888, i32 -1230059433
  br label %.backedge

96:                                               ; preds = %4
  %97 = add i64 %.085, -1
  %98 = getelementptr inbounds [200005 x i64], [200005 x i64]* @ifac, i64 0, i64 %97
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds [200005 x i64], [200005 x i64]* @inv, i64 0, i64 %.085
  %101 = load i64, i64* %100, align 8
  %102 = mul nsw i64 %101, %99
  %103 = srem i64 %102, 1000000007
  %104 = getelementptr inbounds [200005 x i64], [200005 x i64]* @ifac, i64 0, i64 %.085
  store i64 %103, i64* %104, align 8
  br label %.backedge

105:                                              ; preds = %4
  %106 = load i32, i32* @x.3, align 4
  %107 = load i32, i32* @y.4, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 299555303, i32 -1547129132
  br label %.backedge

115:                                              ; preds = %4
  %116 = add i64 %.085, 1
  %117 = load i32, i32* @x.3, align 4
  %118 = load i32, i32* @y.4, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 1539396691, i32 -1547129132
  br label %.backedge

126:                                              ; preds = %4
  br label %.backedge

127:                                              ; preds = %4
  br label %.backedge

128:                                              ; preds = %4
  %129 = load i64, i64* @n, align 8
  %.not94 = icmp sgt i64 %.083, %129
  %130 = select i1 %.not94, i32 -584897327, i32 -198995631
  br label %.backedge

131:                                              ; preds = %4
  %132 = tail call i64 @_Z4readv()
  %133 = getelementptr inbounds [200005 x i64], [200005 x i64]* @X, i64 0, i64 %.083
  store i64 %132, i64* %133, align 8
  %134 = tail call i64 @_Z4readv()
  %135 = getelementptr inbounds [200005 x i64], [200005 x i64]* @Y, i64 0, i64 %.083
  store i64 %134, i64* %135, align 8
  br label %.backedge

136:                                              ; preds = %4
  %137 = add i64 %.083, 1
  br label %.backedge

138:                                              ; preds = %4
  br label %.backedge

139:                                              ; preds = %4
  %140 = load i64, i64* @n, align 8
  %.not93 = icmp sgt i64 %.081, %140
  %141 = select i1 %.not93, i32 1454951039, i32 344946337
  br label %.backedge

142:                                              ; preds = %4
  %143 = load i32, i32* @x.3, align 4
  %144 = load i32, i32* @y.4, align 4
  %145 = add i32 %143, -1
  %146 = mul i32 %145, %143
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %149, %148
  %151 = select i1 %150, i32 -1469167482, i32 441965356
  br label %.backedge

152:                                              ; preds = %4
  %153 = getelementptr inbounds [200005 x i64], [200005 x i64]* @X, i64 0, i64 %.081
  %154 = load i64, i64* %153, align 8
  %155 = sub i64 2005, %154
  %156 = getelementptr inbounds [200005 x i64], [200005 x i64]* @Y, i64 0, i64 %.081
  %157 = load i64, i64* %156, align 8
  %158 = sub i64 2005, %157
  %159 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %155, i64 %158
  %160 = load i64, i64* %159, align 8
  %161 = add i64 %160, 1
  store i64 %161, i64* %159, align 8
  %162 = load i32, i32* @x.3, align 4
  %163 = load i32, i32* @y.4, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 -150992224, i32 441965356
  br label %.backedge

171:                                              ; preds = %4
  br label %.backedge

172:                                              ; preds = %4
  %173 = add i64 %.081, 1
  br label %.backedge

174:                                              ; preds = %4
  %175 = load i32, i32* @x.3, align 4
  %176 = load i32, i32* @y.4, align 4
  %177 = add i32 %175, -1
  %178 = mul i32 %177, %175
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %181, %180
  %183 = select i1 %182, i32 1938708711, i32 1105816086
  br label %.backedge

184:                                              ; preds = %4
  %185 = load i32, i32* @x.3, align 4
  %186 = load i32, i32* @y.4, align 4
  %187 = add i32 %185, -1
  %188 = mul i32 %187, %185
  %189 = and i32 %188, 1
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %191, %190
  %193 = select i1 %192, i32 1602072010, i32 1105816086
  br label %.backedge

194:                                              ; preds = %4
  br label %.backedge

195:                                              ; preds = %4
  %196 = icmp slt i64 %.079, 4011
  %197 = select i1 %196, i32 816407048, i32 306331815
  br label %.backedge

198:                                              ; preds = %4
  br label %.backedge

199:                                              ; preds = %4
  %200 = load i32, i32* @x.3, align 4
  %201 = load i32, i32* @y.4, align 4
  %202 = add i32 %200, -1
  %203 = mul i32 %202, %200
  %204 = and i32 %203, 1
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %206, %205
  %208 = select i1 %207, i32 79768269, i32 748089649
  br label %.backedge

209:                                              ; preds = %4
  %210 = icmp slt i64 %.077, 4011
  store i1 %210, i1* %1, align 1
  %211 = load i32, i32* @x.3, align 4
  %212 = load i32, i32* @y.4, align 4
  %213 = add i32 %211, -1
  %214 = mul i32 %213, %211
  %215 = and i32 %214, 1
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %217, %216
  %219 = select i1 %218, i32 -1869042467, i32 748089649
  br label %.backedge

220:                                              ; preds = %4
  %.0..0..0.70 = load volatile i1, i1* %1, align 1
  %221 = select i1 %.0..0..0.70, i32 965309370, i32 583767756
  br label %.backedge

222:                                              ; preds = %4
  %223 = load i32, i32* @x.3, align 4
  %224 = load i32, i32* @y.4, align 4
  %225 = add i32 %223, -1
  %226 = mul i32 %225, %223
  %227 = and i32 %226, 1
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %229, %228
  %231 = select i1 %230, i32 38738453, i32 -19738824
  br label %.backedge

232:                                              ; preds = %4
  %233 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %.079, i64 %.077
  %234 = load i64, i64* %233, align 8
  %235 = add i64 %.079, -1
  %236 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %235, i64 %.077
  %237 = load i64, i64* %236, align 8
  %238 = add i64 %237, %234
  %239 = add i64 %.077, -1
  %240 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %.079, i64 %239
  %241 = load i64, i64* %240, align 8
  %242 = add i64 %238, %241
  %243 = srem i64 %242, 1000000007
  store i64 %243, i64* %233, align 8
  %244 = load i32, i32* @x.3, align 4
  %245 = load i32, i32* @y.4, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 704074672, i32 -19738824
  br label %.backedge

253:                                              ; preds = %4
  br label %.backedge

254:                                              ; preds = %4
  %255 = load i32, i32* @x.3, align 4
  %256 = load i32, i32* @y.4, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 1761972969, i32 -1612123863
  br label %.backedge

264:                                              ; preds = %4
  %265 = add i64 %.077, 1
  %266 = load i32, i32* @x.3, align 4
  %267 = load i32, i32* @y.4, align 4
  %268 = add i32 %266, -1
  %269 = mul i32 %268, %266
  %270 = and i32 %269, 1
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %272, %271
  %274 = select i1 %273, i32 914032513, i32 -1612123863
  br label %.backedge

275:                                              ; preds = %4
  br label %.backedge

276:                                              ; preds = %4
  br label %.backedge

277:                                              ; preds = %4
  %.neg = add i64 %.079, 1
  br label %.backedge

278:                                              ; preds = %4
  br label %.backedge

279:                                              ; preds = %4
  %280 = load i64, i64* @n, align 8
  %.not92 = icmp sgt i64 %.073, %280
  %281 = select i1 %.not92, i32 -112406626, i32 -819812491
  br label %.backedge

282:                                              ; preds = %4
  %283 = load i32, i32* @x.3, align 4
  %284 = load i32, i32* @y.4, align 4
  %285 = add i32 %283, -1
  %286 = mul i32 %285, %283
  %287 = and i32 %286, 1
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %289, %288
  %291 = select i1 %290, i32 652514501, i32 -1788922903
  br label %.backedge

292:                                              ; preds = %4
  %293 = getelementptr inbounds [200005 x i64], [200005 x i64]* @X, i64 0, i64 %.073
  %294 = load i64, i64* %293, align 8
  %295 = add i64 %294, 2005
  %296 = getelementptr inbounds [200005 x i64], [200005 x i64]* @Y, i64 0, i64 %.073
  %297 = load i64, i64* %296, align 8
  %298 = add i64 %297, 2005
  %299 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %295, i64 %298
  %300 = load i64, i64* %299, align 8
  %301 = add i64 %300, %.075
  %302 = srem i64 %301, 1000000007
  %303 = load i32, i32* @x.3, align 4
  %304 = load i32, i32* @y.4, align 4
  %305 = add i32 %303, -1
  %306 = mul i32 %305, %303
  %307 = and i32 %306, 1
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %309, %308
  %311 = select i1 %310, i32 -988258359, i32 -1788922903
  br label %.backedge

312:                                              ; preds = %4
  br label %.backedge

313:                                              ; preds = %4
  %314 = load i32, i32* @x.3, align 4
  %315 = load i32, i32* @y.4, align 4
  %316 = add i32 %314, -1
  %317 = mul i32 %316, %314
  %318 = and i32 %317, 1
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %320, %319
  %322 = select i1 %321, i32 1406857765, i32 666634495
  br label %.backedge

323:                                              ; preds = %4
  %324 = add i64 %.073, 1
  %325 = load i32, i32* @x.3, align 4
  %326 = load i32, i32* @y.4, align 4
  %327 = add i32 %325, -1
  %328 = mul i32 %327, %325
  %329 = and i32 %328, 1
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %331, %330
  %333 = select i1 %332, i32 1551945041, i32 666634495
  br label %.backedge

334:                                              ; preds = %4
  br label %.backedge

335:                                              ; preds = %4
  %336 = load i32, i32* @x.3, align 4
  %337 = load i32, i32* @y.4, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 1548918446, i32 1491290824
  br label %.backedge

345:                                              ; preds = %4
  %346 = load i32, i32* @x.3, align 4
  %347 = load i32, i32* @y.4, align 4
  %348 = add i32 %346, -1
  %349 = mul i32 %348, %346
  %350 = and i32 %349, 1
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %352, %351
  %354 = select i1 %353, i32 2112152933, i32 1491290824
  br label %.backedge

355:                                              ; preds = %4
  br label %.backedge

356:                                              ; preds = %4
  %357 = load i64, i64* @n, align 8
  %.not = icmp sgt i64 %.071, %357
  %358 = select i1 %.not, i32 663739790, i32 -2075983135
  br label %.backedge

359:                                              ; preds = %4
  %360 = getelementptr inbounds [200005 x i64], [200005 x i64]* @X, i64 0, i64 %.071
  %361 = load i64, i64* %360, align 8
  %362 = shl nsw i64 %361, 1
  %363 = getelementptr inbounds [200005 x i64], [200005 x i64]* @Y, i64 0, i64 %.071
  %364 = load i64, i64* %363, align 8
  %365 = add i64 %364, %361
  %.neg91 = shl i64 %365, 1
  %366 = tail call i64 @_Z1Cxx(i64 %.neg91, i64 %362)
  %367 = add i64 %.075, 1000000007
  %368 = sub i64 %367, %366
  %369 = srem i64 %368, 1000000007
  br label %.backedge

370:                                              ; preds = %4
  %371 = add i64 %.071, 1
  br label %.backedge

372:                                              ; preds = %4
  %373 = load i64, i64* getelementptr inbounds ([200005 x i64], [200005 x i64]* @inv, i64 0, i64 2), align 16
  %374 = mul nsw i64 %373, %.075
  %375 = srem i64 %374, 1000000007
  %376 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %375)
  ret i32 0

377:                                              ; preds = %4
  %378 = sdiv i64 1000000007, %.089
  %379 = sub nsw i64 1000000007, %378
  %380 = srem i64 1000000007, %.089
  %381 = getelementptr inbounds [200005 x i64], [200005 x i64]* @inv, i64 0, i64 %380
  %382 = load i64, i64* %381, align 8
  %383 = mul nsw i64 %382, %379
  %384 = srem i64 %383, 1000000007
  %385 = getelementptr inbounds [200005 x i64], [200005 x i64]* @inv, i64 0, i64 %.089
  store i64 %384, i64* %385, align 8
  br label %.backedge

386:                                              ; preds = %4
  br label %.backedge

387:                                              ; preds = %4
  br label %.backedge

388:                                              ; preds = %4
  %389 = add i64 %.085, 1
  br label %.backedge

390:                                              ; preds = %4
  %391 = getelementptr inbounds [200005 x i64], [200005 x i64]* @X, i64 0, i64 %.081
  %392 = load i64, i64* %391, align 8
  %393 = sub i64 2005, %392
  %394 = getelementptr inbounds [200005 x i64], [200005 x i64]* @Y, i64 0, i64 %.081
  %395 = load i64, i64* %394, align 8
  %396 = sub i64 2005, %395
  %397 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %393, i64 %396
  %398 = load i64, i64* %397, align 8
  %399 = add i64 %398, 1
  store i64 %399, i64* %397, align 8
  br label %.backedge

400:                                              ; preds = %4
  br label %.backedge

401:                                              ; preds = %4
  br label %.backedge

402:                                              ; preds = %4
  %403 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %.079, i64 %.077
  %404 = load i64, i64* %403, align 8
  %405 = add i64 %.079, -1
  %406 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %405, i64 %.077
  %407 = load i64, i64* %406, align 8
  %408 = add i64 %407, %404
  %409 = add i64 %.077, -1
  %410 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %.079, i64 %409
  %411 = load i64, i64* %410, align 8
  %412 = add i64 %408, %411
  %413 = srem i64 %412, 1000000007
  store i64 %413, i64* %403, align 8
  br label %.backedge

414:                                              ; preds = %4
  %415 = add i64 %.077, 1
  br label %.backedge

416:                                              ; preds = %4
  %417 = getelementptr inbounds [200005 x i64], [200005 x i64]* @X, i64 0, i64 %.073
  %418 = load i64, i64* %417, align 8
  %419 = add i64 %418, 2005
  %420 = getelementptr inbounds [200005 x i64], [200005 x i64]* @Y, i64 0, i64 %.073
  %421 = load i64, i64* %420, align 8
  %422 = add i64 %421, 2005
  %423 = getelementptr inbounds [4050 x [4050 x i64]], [4050 x [4050 x i64]]* @mp, i64 0, i64 %419, i64 %422
  %424 = load i64, i64* %423, align 8
  %425 = add i64 %424, %.075
  %426 = srem i64 %425, 1000000007
  br label %.backedge

427:                                              ; preds = %4
  %428 = add i64 %.073, 1
  br label %.backedge

429:                                              ; preds = %4
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_Z4readv() local_unnamed_addr #0 comdat {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = load i32, i32* @x.5, align 4
  %9 = load i32, i32* @y.6, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %7, align 1
  %14 = icmp slt i32 %9, 10
  store i1 %14, i1* %6, align 1
  br label %15

15:                                               ; preds = %.backedge, %0
  %.024 = phi i32 [ 1801711973, %0 ], [ %.024.be, %.backedge ]
  %.022 = phi i1 [ undef, %0 ], [ %.022.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.024, label %.backedge [
    i32 1801711973, label %16
    i32 1181439736, label %19
    i32 2082766605, label %32
    i32 -561029896, label %33
    i32 1164206425, label %38
    i32 -2093129873, label %41
    i32 -1701837642, label %43
    i32 1599769289, label %47
    i32 1153962083, label %48
    i32 -2046106439, label %49
    i32 1926314993, label %53
    i32 76164052, label %58
    i32 -173299720, label %68
    i32 -171083787, label %80
    i32 -801204879, label %81
    i32 -1958990478, label %91
    i32 -1986128027, label %101
    i32 -1917029972, label %103
    i32 995953366, label %113
    i32 640346871, label %117
    i32 -1751102422, label %118
    i32 -1023887430, label %119
  ]

.backedge:                                        ; preds = %15, %119, %118, %117, %103, %101, %91, %81, %80, %68, %58, %53, %49, %48, %47, %43, %41, %38, %33, %32, %19, %16
  %.024.be = phi i32 [ %.024, %15 ], [ -1958990478, %119 ], [ -173299720, %118 ], [ 1181439736, %117 ], [ 1926314993, %103 ], [ %102, %101 ], [ %100, %91 ], [ %90, %81 ], [ -801204879, %80 ], [ %79, %68 ], [ %67, %58 ], [ %57, %53 ], [ 1926314993, %49 ], [ -561029896, %48 ], [ 1153962083, %47 ], [ %46, %43 ], [ %42, %41 ], [ -2093129873, %38 ], [ %37, %33 ], [ -561029896, %32 ], [ %31, %19 ], [ %18, %16 ]
  %.022.be = phi i1 [ %.022, %15 ], [ %.022, %119 ], [ %.022, %118 ], [ %.022, %117 ], [ %.022, %103 ], [ %.022, %101 ], [ %.022, %91 ], [ %.022, %81 ], [ %.022, %80 ], [ %.022, %68 ], [ %.022, %58 ], [ %.022, %53 ], [ %.022, %49 ], [ %.022, %48 ], [ %.022, %47 ], [ %.022, %43 ], [ %.022, %41 ], [ %40, %38 ], [ true, %33 ], [ %.022, %32 ], [ %.022, %19 ], [ %.022, %16 ]
  %.0.be = phi i1 [ %.0, %15 ], [ %.0, %119 ], [ %.0, %118 ], [ %.0, %117 ], [ %.0, %103 ], [ %.0, %101 ], [ %.0, %91 ], [ %.0, %81 ], [ %.0..0..0.20, %80 ], [ %.0, %68 ], [ %.0, %58 ], [ false, %53 ], [ %.0, %49 ], [ %.0, %48 ], [ %.0, %47 ], [ %.0, %43 ], [ %.0, %41 ], [ %.0, %38 ], [ %.0, %33 ], [ %.0, %32 ], [ %.0, %19 ], [ %.0, %16 ]
  br label %15

16:                                               ; preds = %15
  %.0..0..0.2 = load volatile i1, i1* %7, align 1
  %.0..0..0.3 = load volatile i1, i1* %6, align 1
  %17 = or i1 %.0..0..0.2, %.0..0..0.3
  %18 = select i1 %17, i32 1181439736, i32 640346871
  br label %.backedge

19:                                               ; preds = %15
  %20 = alloca i8, align 1
  store i8* %20, i8** %5, align 8
  %21 = alloca i64, align 8
  store i64* %21, i64** %4, align 8
  %22 = alloca i64, align 8
  store i64* %22, i64** %3, align 8
  %.0..0..0.12 = load volatile i64*, i64** %4, align 8
  store i64 1, i64* %.0..0..0.12, align 8
  %23 = load i32, i32* @x.5, align 4
  %24 = load i32, i32* @y.6, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 2082766605, i32 640346871
  br label %.backedge

32:                                               ; preds = %15
  br label %.backedge

33:                                               ; preds = %15
  %34 = call i32 @getchar()
  %35 = trunc i32 %34 to i8
  %.0..0..0.4 = load volatile i8*, i8** %5, align 8
  store i8 %35, i8* %.0..0..0.4, align 1
  %36 = icmp slt i8 %35, 48
  %37 = select i1 %36, i32 -2093129873, i32 1164206425
  br label %.backedge

38:                                               ; preds = %15
  %.0..0..0.5 = load volatile i8*, i8** %5, align 8
  %39 = load i8, i8* %.0..0..0.5, align 1
  %40 = icmp sgt i8 %39, 57
  br label %.backedge

41:                                               ; preds = %15
  %42 = select i1 %.022, i32 -1701837642, i32 -2046106439
  br label %.backedge

43:                                               ; preds = %15
  %.0..0..0.6 = load volatile i8*, i8** %5, align 8
  %44 = load i8, i8* %.0..0..0.6, align 1
  %45 = icmp eq i8 %44, 45
  %46 = select i1 %45, i32 1599769289, i32 1153962083
  br label %.backedge

47:                                               ; preds = %15
  %.0..0..0.13 = load volatile i64*, i64** %4, align 8
  store i64 -1, i64* %.0..0..0.13, align 8
  br label %.backedge

48:                                               ; preds = %15
  br label %.backedge

49:                                               ; preds = %15
  %.0..0..0.7 = load volatile i8*, i8** %5, align 8
  %50 = load i8, i8* %.0..0..0.7, align 1
  %51 = sext i8 %50 to i64
  %52 = add nsw i64 %51, -48
  %.0..0..0.15 = load volatile i64*, i64** %3, align 8
  store i64 %52, i64* %.0..0..0.15, align 8
  br label %.backedge

53:                                               ; preds = %15
  %54 = call i32 @getchar()
  %55 = trunc i32 %54 to i8
  %.0..0..0.8 = load volatile i8*, i8** %5, align 8
  store i8 %55, i8* %.0..0..0.8, align 1
  %56 = icmp sgt i8 %55, 47
  %57 = select i1 %56, i32 76164052, i32 -801204879
  br label %.backedge

58:                                               ; preds = %15
  %59 = load i32, i32* @x.5, align 4
  %60 = load i32, i32* @y.6, align 4
  %61 = add i32 %59, -1
  %62 = mul i32 %61, %59
  %63 = and i32 %62, 1
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %65, %64
  %67 = select i1 %66, i32 -173299720, i32 -1751102422
  br label %.backedge

68:                                               ; preds = %15
  %.0..0..0.9 = load volatile i8*, i8** %5, align 8
  %69 = load i8, i8* %.0..0..0.9, align 1
  %70 = icmp slt i8 %69, 58
  store i1 %70, i1* %2, align 1
  %71 = load i32, i32* @x.5, align 4
  %72 = load i32, i32* @y.6, align 4
  %73 = add i32 %71, -1
  %74 = mul i32 %73, %71
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %77, %76
  %79 = select i1 %78, i32 -171083787, i32 -1751102422
  br label %.backedge

80:                                               ; preds = %15
  %.0..0..0.20 = load volatile i1, i1* %2, align 1
  br label %.backedge

81:                                               ; preds = %15
  store i1 %.0, i1* %1, align 1
  %82 = load i32, i32* @x.5, align 4
  %83 = load i32, i32* @y.6, align 4
  %84 = add i32 %82, -1
  %85 = mul i32 %84, %82
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %88, %87
  %90 = select i1 %89, i32 -1958990478, i32 -1023887430
  br label %.backedge

91:                                               ; preds = %15
  %92 = load i32, i32* @x.5, align 4
  %93 = load i32, i32* @y.6, align 4
  %94 = add i32 %92, -1
  %95 = mul i32 %94, %92
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %98, %97
  %100 = select i1 %99, i32 -1986128027, i32 -1023887430
  br label %.backedge

101:                                              ; preds = %15
  %.0..0..0.21 = load volatile i1, i1* %1, align 1
  %102 = select i1 %.0..0..0.21, i32 -1917029972, i32 995953366
  br label %.backedge

103:                                              ; preds = %15
  %.0..0..0.16 = load volatile i64*, i64** %3, align 8
  %104 = load i64, i64* %.0..0..0.16, align 8
  %105 = shl i64 %104, 1
  %.0..0..0.17 = load volatile i64*, i64** %3, align 8
  %106 = load i64, i64* %.0..0..0.17, align 8
  %107 = shl i64 %106, 3
  %.0..0..0.10 = load volatile i8*, i8** %5, align 8
  %108 = load i8, i8* %.0..0..0.10, align 1
  %109 = sext i8 %108 to i64
  %110 = add i64 %105, -48
  %111 = add i64 %110, %107
  %112 = add i64 %111, %109
  %.0..0..0.18 = load volatile i64*, i64** %3, align 8
  store i64 %112, i64* %.0..0..0.18, align 8
  br label %.backedge

113:                                              ; preds = %15
  %.0..0..0.19 = load volatile i64*, i64** %3, align 8
  %114 = load i64, i64* %.0..0..0.19, align 8
  %.0..0..0.14 = load volatile i64*, i64** %4, align 8
  %115 = load i64, i64* %.0..0..0.14, align 8
  %116 = mul nsw i64 %115, %114
  ret i64 %116

117:                                              ; preds = %15
  br label %.backedge

118:                                              ; preds = %15
  %.0..0..0.11 = load volatile i8*, i8** %5, align 8
  br label %.backedge

119:                                              ; preds = %15
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s316122310.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
