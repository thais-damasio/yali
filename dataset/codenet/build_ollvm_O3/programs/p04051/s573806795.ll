; ModuleID = 'build_ollvm/programs/p04051/s573806795.ll'
source_filename = "Project_CodeNet_C++1400/p04051/s573806795.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

$_Z6addmodi = comdat any

$_Z6submodi = comdat any

@n = global i32 0, align 4
@f = local_unnamed_addr global [4005 x [4005 x i32]] zeroinitializer, align 16
@pn = local_unnamed_addr global i32 2000, align 4
@a = global [200005 x i32] zeroinitializer, align 16
@b = global [200005 x i32] zeroinitializer, align 16
@fr = local_unnamed_addr global [1000005 x i32] zeroinitializer, align 16
@infr = local_unnamed_addr global [1000005 x i32] zeroinitializer, align 16
@val = local_unnamed_addr global i32 1000000, align 4
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0

; Function Attrs: nofree noinline norecurse nosync nounwind readonly uwtable
define i32 @_Z4fpowii(i32 %0, i32 %1) local_unnamed_addr #0 {
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %9, %8
  %11 = select i1 %10, i32 -472191040, i32 1430109963
  %12 = select i1 %10, i32 -547531190, i32 1430109963
  br label %13

13:                                               ; preds = %.backedge, %2
  %.015 = phi i32 [ %0, %2 ], [ %.015.be, %.backedge ]
  %.013 = phi i32 [ %1, %2 ], [ %.013.be, %.backedge ]
  %.011 = phi i32 [ 1, %2 ], [ %.011.be, %.backedge ]
  %.0 = phi i32 [ 99697588, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 99697588, label %14
    i32 -1844184711, label %16
    i32 -373571566, label %19
    i32 -547531190, label %20
    i32 -472191040, label %26
    i32 -738165177, label %27
    i32 1617521954, label %33
    i32 1430109963, label %34
  ]

.backedge:                                        ; preds = %13, %34, %27, %26, %20, %19, %16, %14
  %.015.be = phi i32 [ %.015, %13 ], [ %.015, %34 ], [ %31, %27 ], [ %.015, %26 ], [ %.015, %20 ], [ %.015, %19 ], [ %.015, %16 ], [ %.015, %14 ]
  %.013.be = phi i32 [ %.013, %13 ], [ %.013, %34 ], [ %32, %27 ], [ %.013, %26 ], [ %.013, %20 ], [ %.013, %19 ], [ %.013, %16 ], [ %.013, %14 ]
  %.011.be = phi i32 [ %.011, %13 ], [ %39, %34 ], [ %.011, %27 ], [ %.011, %26 ], [ %25, %20 ], [ %.011, %19 ], [ %.011, %16 ], [ %.011, %14 ]
  %.0.be = phi i32 [ %.0, %13 ], [ -547531190, %34 ], [ 99697588, %27 ], [ -738165177, %26 ], [ %11, %20 ], [ %12, %19 ], [ %18, %16 ], [ %15, %14 ]
  br label %13

14:                                               ; preds = %13
  %.not17 = icmp eq i32 %.013, 0
  %15 = select i1 %.not17, i32 1617521954, i32 -1844184711
  br label %.backedge

16:                                               ; preds = %13
  %17 = and i32 %.013, 1
  %.not = icmp eq i32 %17, 0
  %18 = select i1 %.not, i32 -738165177, i32 -373571566
  br label %.backedge

19:                                               ; preds = %13
  br label %.backedge

20:                                               ; preds = %13
  %21 = sext i32 %.011 to i64
  %22 = sext i32 %.015 to i64
  %23 = mul nsw i64 %21, %22
  %24 = srem i64 %23, 1000000007
  %25 = trunc i64 %24 to i32
  br label %.backedge

26:                                               ; preds = %13
  br label %.backedge

27:                                               ; preds = %13
  %28 = sext i32 %.015 to i64
  %29 = mul nsw i64 %28, %28
  %30 = urem i64 %29, 1000000007
  %31 = trunc i64 %30 to i32
  %32 = sdiv i32 %.013, 2
  br label %.backedge

33:                                               ; preds = %13
  ret i32 %.011

34:                                               ; preds = %13
  %35 = sext i32 %.011 to i64
  %36 = sext i32 %.015 to i64
  %37 = mul nsw i64 %35, %36
  %38 = srem i64 %37, 1000000007
  %39 = trunc i64 %38 to i32
  br label %.backedge
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn
define i32 @_Z1Cii(i32 %0, i32 %1) local_unnamed_addr #1 {
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @fr, i64 0, i64 %3
  %5 = load i32, i32* %4, align 4
  %6 = sext i32 %5 to i64
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @infr, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %10, %6
  %12 = srem i64 %11, 1000000007
  %13 = sub i32 %0, %1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @infr, i64 0, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = mul nsw i64 %12, %17
  %19 = srem i64 %18, 1000000007
  %20 = trunc i64 %19 to i32
  ret i32 %20
}

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #2 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  store i32 1, i32* getelementptr inbounds ([1000005 x i32], [1000005 x i32]* @infr, i64 0, i64 0), align 16
  store i32 1, i32* getelementptr inbounds ([1000005 x i32], [1000005 x i32]* @fr, i64 0, i64 0), align 16
  br label %3

3:                                                ; preds = %.backedge, %0
  %.076 = phi i32 [ 1, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.0 = phi i32 [ -141338166, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -141338166, label %4
    i32 -704774274, label %7
    i32 780018522, label %17
    i32 -1620942031, label %37
    i32 -1316999928, label %38
    i32 -368187260, label %40
    i32 1016508569, label %48
    i32 1296734173, label %58
    i32 -1590641268, label %69
    i32 1665155503, label %71
    i32 1912614109, label %82
    i32 736529235, label %84
    i32 1000393677, label %86
    i32 -1948489116, label %96
    i32 539607432, label %108
    i32 -1034643021, label %110
    i32 -1722211880, label %115
    i32 -1919992224, label %125
    i32 303676262, label %136
    i32 370519839, label %137
    i32 -1502202114, label %147
    i32 -1033743535, label %157
    i32 -417835093, label %158
    i32 651955196, label %161
    i32 955833247, label %171
    i32 -1002188124, label %194
    i32 1653064530, label %195
    i32 -1850422944, label %197
    i32 -514434678, label %207
    i32 1721823606, label %217
    i32 1951853862, label %218
    i32 43877196, label %222
    i32 -2055046179, label %223
    i32 -890902799, label %227
    i32 -1511803721, label %229
    i32 1725702252, label %240
    i32 -557818328, label %242
    i32 591342747, label %253
    i32 -518907811, label %263
    i32 -1361856796, label %273
    i32 -712541338, label %274
    i32 134790359, label %276
    i32 190303690, label %277
    i32 1791466130, label %279
    i32 -43763037, label %289
    i32 1574512597, label %299
    i32 340760375, label %300
    i32 784634304, label %303
    i32 -1613479986, label %318
    i32 713823741, label %320
    i32 -1684702041, label %321
    i32 334301391, label %324
    i32 1977154183, label %336
    i32 -1265607640, label %338
    i32 630550893, label %346
    i32 1544112743, label %357
    i32 -514419896, label %358
    i32 1985014145, label %359
    i32 -98804617, label %360
    i32 1999337675, label %361
    i32 1485946117, label %375
    i32 1399964325, label %376
    i32 -1321353009, label %377
  ]

.backedge:                                        ; preds = %3, %377, %376, %375, %361, %360, %359, %358, %357, %346, %336, %324, %321, %320, %318, %303, %300, %299, %289, %279, %277, %276, %274, %273, %263, %253, %242, %240, %229, %227, %223, %222, %218, %217, %207, %197, %195, %194, %171, %161, %158, %157, %147, %137, %136, %125, %115, %110, %108, %96, %86, %84, %82, %71, %69, %58, %48, %40, %38, %37, %17, %7, %4
  %.076.be = phi i32 [ %.076, %3 ], [ %.076, %377 ], [ %.076, %376 ], [ %.076, %375 ], [ %.076, %361 ], [ %.076, %360 ], [ %.076, %359 ], [ %.076, %358 ], [ %.076, %357 ], [ %.076, %346 ], [ %.076, %336 ], [ %.076, %324 ], [ %.076, %321 ], [ %.076, %320 ], [ %.076, %318 ], [ %.076, %303 ], [ %.076, %300 ], [ %.076, %299 ], [ %.076, %289 ], [ %.076, %279 ], [ %.076, %277 ], [ %.076, %276 ], [ %.076, %274 ], [ %.076, %273 ], [ %.076, %263 ], [ %.076, %253 ], [ %.076, %242 ], [ %.076, %240 ], [ %.076, %229 ], [ %.076, %227 ], [ %.076, %223 ], [ %.076, %222 ], [ %.076, %218 ], [ %.076, %217 ], [ %.076, %207 ], [ %.076, %197 ], [ %.076, %195 ], [ %.076, %194 ], [ %.076, %171 ], [ %.076, %161 ], [ %.076, %158 ], [ %.076, %157 ], [ %.076, %147 ], [ %.076, %137 ], [ %.076, %136 ], [ %.076, %125 ], [ %.076, %115 ], [ %.076, %110 ], [ %.076, %108 ], [ %.076, %96 ], [ %.076, %86 ], [ %.076, %84 ], [ %.076, %82 ], [ %.076, %71 ], [ %.076, %69 ], [ %.076, %58 ], [ %.076, %48 ], [ %.076, %40 ], [ %39, %38 ], [ %.076, %37 ], [ %.076, %17 ], [ %.076, %7 ], [ %.076, %4 ]
  %.074.be = phi i32 [ %.074, %3 ], [ %.074, %377 ], [ %.074, %376 ], [ %.074, %375 ], [ %.074, %361 ], [ %.074, %360 ], [ %.074, %359 ], [ %.074, %358 ], [ %.074, %357 ], [ %.074, %346 ], [ %.074, %336 ], [ %.074, %324 ], [ %.074, %321 ], [ %.074, %320 ], [ %.074, %318 ], [ %.074, %303 ], [ %.074, %300 ], [ %.074, %299 ], [ %.074, %289 ], [ %.074, %279 ], [ %.074, %277 ], [ %.074, %276 ], [ %.074, %274 ], [ %.074, %273 ], [ %.074, %263 ], [ %.074, %253 ], [ %.074, %242 ], [ %.074, %240 ], [ %.074, %229 ], [ %.074, %227 ], [ %.074, %223 ], [ %.074, %222 ], [ %.074, %218 ], [ %.074, %217 ], [ %.074, %207 ], [ %.074, %197 ], [ %.074, %195 ], [ %.074, %194 ], [ %.074, %171 ], [ %.074, %161 ], [ %.074, %158 ], [ %.074, %157 ], [ %.074, %147 ], [ %.074, %137 ], [ %.074, %136 ], [ %.074, %125 ], [ %.074, %115 ], [ %.074, %110 ], [ %.074, %108 ], [ %.074, %96 ], [ %.074, %86 ], [ %.074, %84 ], [ %83, %82 ], [ %.074, %71 ], [ %.074, %69 ], [ %.074, %58 ], [ %.074, %48 ], [ %47, %40 ], [ %.074, %38 ], [ %.074, %37 ], [ %.074, %17 ], [ %.074, %7 ], [ %.074, %4 ]
  %.072.be = phi i32 [ %.072, %3 ], [ %.072, %377 ], [ %.072, %376 ], [ %.072, %375 ], [ %.072, %361 ], [ %.072, %360 ], [ %.neg, %359 ], [ %.072, %358 ], [ %.072, %357 ], [ %.072, %346 ], [ %.072, %336 ], [ %.072, %324 ], [ %.072, %321 ], [ %.072, %320 ], [ %.072, %318 ], [ %.072, %303 ], [ %.072, %300 ], [ %.072, %299 ], [ %.072, %289 ], [ %.072, %279 ], [ %.072, %277 ], [ %.072, %276 ], [ %.072, %274 ], [ %.072, %273 ], [ %.072, %263 ], [ %.072, %253 ], [ %.072, %242 ], [ %.072, %240 ], [ %.072, %229 ], [ %.072, %227 ], [ %.072, %223 ], [ %.072, %222 ], [ %.072, %218 ], [ %.072, %217 ], [ %.072, %207 ], [ %.072, %197 ], [ %.072, %195 ], [ %.072, %194 ], [ %.072, %171 ], [ %.072, %161 ], [ %.072, %158 ], [ %.072, %157 ], [ %.072, %147 ], [ %.072, %137 ], [ %.072, %136 ], [ %126, %125 ], [ %.072, %115 ], [ %.072, %110 ], [ %.072, %108 ], [ %.072, %96 ], [ %.072, %86 ], [ 1, %84 ], [ %.072, %82 ], [ %.072, %71 ], [ %.072, %69 ], [ %.072, %58 ], [ %.072, %48 ], [ %.072, %40 ], [ %.072, %38 ], [ %.072, %37 ], [ %.072, %17 ], [ %.072, %7 ], [ %.072, %4 ]
  %.070.be = phi i32 [ %.070, %3 ], [ %.070, %377 ], [ %.070, %376 ], [ %.070, %375 ], [ %.070, %361 ], [ 1, %360 ], [ %.070, %359 ], [ %.070, %358 ], [ %.070, %357 ], [ %.070, %346 ], [ %.070, %336 ], [ %.070, %324 ], [ %.070, %321 ], [ %.070, %320 ], [ %.070, %318 ], [ %.070, %303 ], [ %.070, %300 ], [ %.070, %299 ], [ %.070, %289 ], [ %.070, %279 ], [ %.070, %277 ], [ %.070, %276 ], [ %.070, %274 ], [ %.070, %273 ], [ %.070, %263 ], [ %.070, %253 ], [ %.070, %242 ], [ %.070, %240 ], [ %.070, %229 ], [ %.070, %227 ], [ %.070, %223 ], [ %.070, %222 ], [ %.070, %218 ], [ %.070, %217 ], [ %.070, %207 ], [ %.070, %197 ], [ %196, %195 ], [ %.070, %194 ], [ %.070, %171 ], [ %.070, %161 ], [ %.070, %158 ], [ %.070, %157 ], [ 1, %147 ], [ %.070, %137 ], [ %.070, %136 ], [ %.070, %125 ], [ %.070, %115 ], [ %.070, %110 ], [ %.070, %108 ], [ %.070, %96 ], [ %.070, %86 ], [ %.070, %84 ], [ %.070, %82 ], [ %.070, %71 ], [ %.070, %69 ], [ %.070, %58 ], [ %.070, %48 ], [ %.070, %40 ], [ %.070, %38 ], [ %.070, %37 ], [ %.070, %17 ], [ %.070, %7 ], [ %.070, %4 ]
  %.068.be = phi i32 [ %.068, %3 ], [ %.068, %377 ], [ %.068, %376 ], [ 0, %375 ], [ %.068, %361 ], [ %.068, %360 ], [ %.068, %359 ], [ %.068, %358 ], [ %.068, %357 ], [ %.068, %346 ], [ %.068, %336 ], [ %.068, %324 ], [ %.068, %321 ], [ %.068, %320 ], [ %.068, %318 ], [ %.068, %303 ], [ %.068, %300 ], [ %.068, %299 ], [ %.068, %289 ], [ %.068, %279 ], [ %278, %277 ], [ %.068, %276 ], [ %.068, %274 ], [ %.068, %273 ], [ %.068, %263 ], [ %.068, %253 ], [ %.068, %242 ], [ %.068, %240 ], [ %.068, %229 ], [ %.068, %227 ], [ %.068, %223 ], [ %.068, %222 ], [ %.068, %218 ], [ %.068, %217 ], [ 0, %207 ], [ %.068, %197 ], [ %.068, %195 ], [ %.068, %194 ], [ %.068, %171 ], [ %.068, %161 ], [ %.068, %158 ], [ %.068, %157 ], [ %.068, %147 ], [ %.068, %137 ], [ %.068, %136 ], [ %.068, %125 ], [ %.068, %115 ], [ %.068, %110 ], [ %.068, %108 ], [ %.068, %96 ], [ %.068, %86 ], [ %.068, %84 ], [ %.068, %82 ], [ %.068, %71 ], [ %.068, %69 ], [ %.068, %58 ], [ %.068, %48 ], [ %.068, %40 ], [ %.068, %38 ], [ %.068, %37 ], [ %.068, %17 ], [ %.068, %7 ], [ %.068, %4 ]
  %.066.be = phi i32 [ %.066, %3 ], [ %.066, %377 ], [ %.066, %376 ], [ %.066, %375 ], [ %.066, %361 ], [ %.066, %360 ], [ %.066, %359 ], [ %.066, %358 ], [ %.066, %357 ], [ %.066, %346 ], [ %.066, %336 ], [ %.066, %324 ], [ %.066, %321 ], [ %.066, %320 ], [ %.066, %318 ], [ %.066, %303 ], [ %.066, %300 ], [ %.066, %299 ], [ %.066, %289 ], [ %.066, %279 ], [ %.066, %277 ], [ %.066, %276 ], [ %275, %274 ], [ %.066, %273 ], [ %.066, %263 ], [ %.066, %253 ], [ %.066, %242 ], [ %.066, %240 ], [ %.066, %229 ], [ %.066, %227 ], [ %.066, %223 ], [ 0, %222 ], [ %.066, %218 ], [ %.066, %217 ], [ %.066, %207 ], [ %.066, %197 ], [ %.066, %195 ], [ %.066, %194 ], [ %.066, %171 ], [ %.066, %161 ], [ %.066, %158 ], [ %.066, %157 ], [ %.066, %147 ], [ %.066, %137 ], [ %.066, %136 ], [ %.066, %125 ], [ %.066, %115 ], [ %.066, %110 ], [ %.066, %108 ], [ %.066, %96 ], [ %.066, %86 ], [ %.066, %84 ], [ %.066, %82 ], [ %.066, %71 ], [ %.066, %69 ], [ %.066, %58 ], [ %.066, %48 ], [ %.066, %40 ], [ %.066, %38 ], [ %.066, %37 ], [ %.066, %17 ], [ %.066, %7 ], [ %.066, %4 ]
  %.064.be = phi i32 [ %.064, %3 ], [ 0, %377 ], [ %.064, %376 ], [ %.064, %375 ], [ %.064, %361 ], [ %.064, %360 ], [ %.064, %359 ], [ %.064, %358 ], [ %.064, %357 ], [ %.064, %346 ], [ %.064, %336 ], [ %335, %324 ], [ %.064, %321 ], [ %.064, %320 ], [ %.064, %318 ], [ %317, %303 ], [ %.064, %300 ], [ %.064, %299 ], [ 0, %289 ], [ %.064, %279 ], [ %.064, %277 ], [ %.064, %276 ], [ %.064, %274 ], [ %.064, %273 ], [ %.064, %263 ], [ %.064, %253 ], [ %.064, %242 ], [ %.064, %240 ], [ %.064, %229 ], [ %.064, %227 ], [ %.064, %223 ], [ %.064, %222 ], [ %.064, %218 ], [ %.064, %217 ], [ %.064, %207 ], [ %.064, %197 ], [ %.064, %195 ], [ %.064, %194 ], [ %.064, %171 ], [ %.064, %161 ], [ %.064, %158 ], [ %.064, %157 ], [ %.064, %147 ], [ %.064, %137 ], [ %.064, %136 ], [ %.064, %125 ], [ %.064, %115 ], [ %.064, %110 ], [ %.064, %108 ], [ %.064, %96 ], [ %.064, %86 ], [ %.064, %84 ], [ %.064, %82 ], [ %.064, %71 ], [ %.064, %69 ], [ %.064, %58 ], [ %.064, %48 ], [ %.064, %40 ], [ %.064, %38 ], [ %.064, %37 ], [ %.064, %17 ], [ %.064, %7 ], [ %.064, %4 ]
  %.062.be = phi i32 [ %.062, %3 ], [ 1, %377 ], [ %.062, %376 ], [ %.062, %375 ], [ %.062, %361 ], [ %.062, %360 ], [ %.062, %359 ], [ %.062, %358 ], [ %.062, %357 ], [ %.062, %346 ], [ %.062, %336 ], [ %.062, %324 ], [ %.062, %321 ], [ %.062, %320 ], [ %319, %318 ], [ %.062, %303 ], [ %.062, %300 ], [ %.062, %299 ], [ 1, %289 ], [ %.062, %279 ], [ %.062, %277 ], [ %.062, %276 ], [ %.062, %274 ], [ %.062, %273 ], [ %.062, %263 ], [ %.062, %253 ], [ %.062, %242 ], [ %.062, %240 ], [ %.062, %229 ], [ %.062, %227 ], [ %.062, %223 ], [ %.062, %222 ], [ %.062, %218 ], [ %.062, %217 ], [ %.062, %207 ], [ %.062, %197 ], [ %.062, %195 ], [ %.062, %194 ], [ %.062, %171 ], [ %.062, %161 ], [ %.062, %158 ], [ %.062, %157 ], [ %.062, %147 ], [ %.062, %137 ], [ %.062, %136 ], [ %.062, %125 ], [ %.062, %115 ], [ %.062, %110 ], [ %.062, %108 ], [ %.062, %96 ], [ %.062, %86 ], [ %.062, %84 ], [ %.062, %82 ], [ %.062, %71 ], [ %.062, %69 ], [ %.062, %58 ], [ %.062, %48 ], [ %.062, %40 ], [ %.062, %38 ], [ %.062, %37 ], [ %.062, %17 ], [ %.062, %7 ], [ %.062, %4 ]
  %.060.be = phi i32 [ %.060, %3 ], [ %.060, %377 ], [ %.060, %376 ], [ %.060, %375 ], [ %.060, %361 ], [ %.060, %360 ], [ %.060, %359 ], [ %.060, %358 ], [ %.060, %357 ], [ %.060, %346 ], [ %337, %336 ], [ %.060, %324 ], [ %.060, %321 ], [ 1, %320 ], [ %.060, %318 ], [ %.060, %303 ], [ %.060, %300 ], [ %.060, %299 ], [ %.060, %289 ], [ %.060, %279 ], [ %.060, %277 ], [ %.060, %276 ], [ %.060, %274 ], [ %.060, %273 ], [ %.060, %263 ], [ %.060, %253 ], [ %.060, %242 ], [ %.060, %240 ], [ %.060, %229 ], [ %.060, %227 ], [ %.060, %223 ], [ %.060, %222 ], [ %.060, %218 ], [ %.060, %217 ], [ %.060, %207 ], [ %.060, %197 ], [ %.060, %195 ], [ %.060, %194 ], [ %.060, %171 ], [ %.060, %161 ], [ %.060, %158 ], [ %.060, %157 ], [ %.060, %147 ], [ %.060, %137 ], [ %.060, %136 ], [ %.060, %125 ], [ %.060, %115 ], [ %.060, %110 ], [ %.060, %108 ], [ %.060, %96 ], [ %.060, %86 ], [ %.060, %84 ], [ %.060, %82 ], [ %.060, %71 ], [ %.060, %69 ], [ %.060, %58 ], [ %.060, %48 ], [ %.060, %40 ], [ %.060, %38 ], [ %.060, %37 ], [ %.060, %17 ], [ %.060, %7 ], [ %.060, %4 ]
  %.0.be = phi i32 [ %.0, %3 ], [ -43763037, %377 ], [ -518907811, %376 ], [ -514434678, %375 ], [ 955833247, %361 ], [ -1502202114, %360 ], [ -1919992224, %359 ], [ -1948489116, %358 ], [ 1296734173, %357 ], [ 780018522, %346 ], [ -1684702041, %336 ], [ 1977154183, %324 ], [ %323, %321 ], [ -1684702041, %320 ], [ 340760375, %318 ], [ -1613479986, %303 ], [ %302, %300 ], [ 340760375, %299 ], [ %298, %289 ], [ %288, %279 ], [ 1951853862, %277 ], [ 190303690, %276 ], [ -2055046179, %274 ], [ -712541338, %273 ], [ %272, %263 ], [ %262, %253 ], [ 591342747, %242 ], [ %241, %240 ], [ 1725702252, %229 ], [ %228, %227 ], [ %226, %223 ], [ -2055046179, %222 ], [ %221, %218 ], [ 1951853862, %217 ], [ %216, %207 ], [ %206, %197 ], [ -417835093, %195 ], [ 1653064530, %194 ], [ %193, %171 ], [ %170, %161 ], [ %160, %158 ], [ -417835093, %157 ], [ %156, %147 ], [ %146, %137 ], [ 1000393677, %136 ], [ %135, %125 ], [ %124, %115 ], [ -1722211880, %110 ], [ %109, %108 ], [ %107, %96 ], [ %95, %86 ], [ 1000393677, %84 ], [ 1016508569, %82 ], [ 1912614109, %71 ], [ %70, %69 ], [ %68, %58 ], [ %57, %48 ], [ 1016508569, %40 ], [ -141338166, %38 ], [ -1316999928, %37 ], [ %36, %17 ], [ %16, %7 ], [ %6, %4 ]
  br label %3

4:                                                ; preds = %3
  %5 = load i32, i32* @val, align 4
  %.not84 = icmp sgt i32 %.076, %5
  %6 = select i1 %.not84, i32 -368187260, i32 -704774274
  br label %.backedge

7:                                                ; preds = %3
  %8 = load i32, i32* @x.4, align 4
  %9 = load i32, i32* @y.5, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 780018522, i32 630550893
  br label %.backedge

17:                                               ; preds = %3
  %18 = add i32 %.076, -1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @fr, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = sext i32 %.076 to i64
  %24 = mul nsw i64 %22, %23
  %25 = srem i64 %24, 1000000007
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @fr, i64 0, i64 %23
  store i32 %26, i32* %27, align 4
  %28 = load i32, i32* @x.4, align 4
  %29 = load i32, i32* @y.5, align 4
  %30 = add i32 %28, -1
  %31 = mul i32 %30, %28
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %34, %33
  %36 = select i1 %35, i32 -1620942031, i32 630550893
  br label %.backedge

37:                                               ; preds = %3
  br label %.backedge

38:                                               ; preds = %3
  %39 = add i32 %.076, 1
  br label %.backedge

40:                                               ; preds = %3
  %41 = load i32, i32* @val, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @fr, i64 0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = tail call i32 @_Z4fpowii(i32 %44, i32 1000000005)
  %46 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @infr, i64 0, i64 %42
  store i32 %45, i32* %46, align 4
  %47 = add i32 %41, -1
  br label %.backedge

48:                                               ; preds = %3
  %49 = load i32, i32* @x.4, align 4
  %50 = load i32, i32* @y.5, align 4
  %51 = add i32 %49, -1
  %52 = mul i32 %51, %49
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %55, %54
  %57 = select i1 %56, i32 1296734173, i32 1544112743
  br label %.backedge

58:                                               ; preds = %3
  %59 = icmp sgt i32 %.074, 0
  store i1 %59, i1* %2, align 1
  %60 = load i32, i32* @x.4, align 4
  %61 = load i32, i32* @y.5, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -1590641268, i32 1544112743
  br label %.backedge

69:                                               ; preds = %3
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %70 = select i1 %.0..0..0., i32 1665155503, i32 736529235
  br label %.backedge

71:                                               ; preds = %3
  %72 = add i32 %.074, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @infr, i64 0, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = sext i32 %75 to i64
  %77 = mul nsw i64 %76, %73
  %78 = srem i64 %77, 1000000007
  %79 = trunc i64 %78 to i32
  %80 = sext i32 %.074 to i64
  %81 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @infr, i64 0, i64 %80
  store i32 %79, i32* %81, align 4
  br label %.backedge

82:                                               ; preds = %3
  %83 = add i32 %.074, -1
  br label %.backedge

84:                                               ; preds = %3
  %85 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull @n)
  br label %.backedge

86:                                               ; preds = %3
  %87 = load i32, i32* @x.4, align 4
  %88 = load i32, i32* @y.5, align 4
  %89 = add i32 %87, -1
  %90 = mul i32 %89, %87
  %91 = and i32 %90, 1
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %93, %92
  %95 = select i1 %94, i32 -1948489116, i32 -514419896
  br label %.backedge

96:                                               ; preds = %3
  %97 = load i32, i32* @n, align 4
  %98 = icmp sle i32 %.072, %97
  store i1 %98, i1* %1, align 1
  %99 = load i32, i32* @x.4, align 4
  %100 = load i32, i32* @y.5, align 4
  %101 = add i32 %99, -1
  %102 = mul i32 %101, %99
  %103 = and i32 %102, 1
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %105, %104
  %107 = select i1 %106, i32 539607432, i32 -514419896
  br label %.backedge

108:                                              ; preds = %3
  %.0..0..0.59 = load volatile i1, i1* %1, align 1
  %109 = select i1 %.0..0..0.59, i32 -1034643021, i32 370519839
  br label %.backedge

110:                                              ; preds = %3
  %111 = sext i32 %.072 to i64
  %112 = getelementptr inbounds [200005 x i32], [200005 x i32]* @a, i64 0, i64 %111
  %113 = getelementptr inbounds [200005 x i32], [200005 x i32]* @b, i64 0, i64 %111
  %114 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %112, i32* nonnull %113)
  br label %.backedge

115:                                              ; preds = %3
  %116 = load i32, i32* @x.4, align 4
  %117 = load i32, i32* @y.5, align 4
  %118 = add i32 %116, -1
  %119 = mul i32 %118, %116
  %120 = and i32 %119, 1
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %122, %121
  %124 = select i1 %123, i32 -1919992224, i32 1985014145
  br label %.backedge

125:                                              ; preds = %3
  %126 = add i32 %.072, 1
  %127 = load i32, i32* @x.4, align 4
  %128 = load i32, i32* @y.5, align 4
  %129 = add i32 %127, -1
  %130 = mul i32 %129, %127
  %131 = and i32 %130, 1
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %133, %132
  %135 = select i1 %134, i32 303676262, i32 1985014145
  br label %.backedge

136:                                              ; preds = %3
  br label %.backedge

137:                                              ; preds = %3
  %138 = load i32, i32* @x.4, align 4
  %139 = load i32, i32* @y.5, align 4
  %140 = add i32 %138, -1
  %141 = mul i32 %140, %138
  %142 = and i32 %141, 1
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %144, %143
  %146 = select i1 %145, i32 -1502202114, i32 -98804617
  br label %.backedge

147:                                              ; preds = %3
  %148 = load i32, i32* @x.4, align 4
  %149 = load i32, i32* @y.5, align 4
  %150 = add i32 %148, -1
  %151 = mul i32 %150, %148
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 -1033743535, i32 -98804617
  br label %.backedge

157:                                              ; preds = %3
  br label %.backedge

158:                                              ; preds = %3
  %159 = load i32, i32* @n, align 4
  %.not83 = icmp sgt i32 %.070, %159
  %160 = select i1 %.not83, i32 -1850422944, i32 651955196
  br label %.backedge

161:                                              ; preds = %3
  %162 = load i32, i32* @x.4, align 4
  %163 = load i32, i32* @y.5, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 955833247, i32 1999337675
  br label %.backedge

171:                                              ; preds = %3
  %172 = load i32, i32* @pn, align 4
  %173 = sext i32 %.070 to i64
  %174 = getelementptr inbounds [200005 x i32], [200005 x i32]* @a, i64 0, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = sub i32 %172, %175
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [200005 x i32], [200005 x i32]* @b, i64 0, i64 %173
  %179 = load i32, i32* %178, align 4
  %180 = sub i32 %172, %179
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @f, i64 0, i64 %177, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = add i32 %183, 1
  store i32 %184, i32* %182, align 4
  %185 = load i32, i32* @x.4, align 4
  %186 = load i32, i32* @y.5, align 4
  %187 = add i32 %185, -1
  %188 = mul i32 %187, %185
  %189 = and i32 %188, 1
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %191, %190
  %193 = select i1 %192, i32 -1002188124, i32 1999337675
  br label %.backedge

194:                                              ; preds = %3
  br label %.backedge

195:                                              ; preds = %3
  %196 = add i32 %.070, 1
  br label %.backedge

197:                                              ; preds = %3
  %198 = load i32, i32* @x.4, align 4
  %199 = load i32, i32* @y.5, align 4
  %200 = add i32 %198, -1
  %201 = mul i32 %200, %198
  %202 = and i32 %201, 1
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %204, %203
  %206 = select i1 %205, i32 -514434678, i32 1485946117
  br label %.backedge

207:                                              ; preds = %3
  %208 = load i32, i32* @x.4, align 4
  %209 = load i32, i32* @y.5, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 1721823606, i32 1485946117
  br label %.backedge

217:                                              ; preds = %3
  br label %.backedge

218:                                              ; preds = %3
  %219 = load i32, i32* @pn, align 4
  %220 = shl nsw i32 %219, 1
  %.not82 = icmp sgt i32 %.068, %220
  %221 = select i1 %.not82, i32 1791466130, i32 43877196
  br label %.backedge

222:                                              ; preds = %3
  br label %.backedge

223:                                              ; preds = %3
  %224 = load i32, i32* @pn, align 4
  %225 = shl nsw i32 %224, 1
  %.not81 = icmp sgt i32 %.066, %225
  %226 = select i1 %.not81, i32 134790359, i32 -890902799
  br label %.backedge

227:                                              ; preds = %3
  %.not80 = icmp eq i32 %.068, 0
  %228 = select i1 %.not80, i32 1725702252, i32 -1511803721
  br label %.backedge

229:                                              ; preds = %3
  %230 = sext i32 %.068 to i64
  %231 = sext i32 %.066 to i64
  %232 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @f, i64 0, i64 %230, i64 %231
  %233 = load i32, i32* %232, align 4
  %234 = add i32 %.068, -1
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @f, i64 0, i64 %235, i64 %231
  %237 = load i32, i32* %236, align 4
  %238 = add i32 %237, %233
  %239 = tail call i32 @_Z6addmodi(i32 %238)
  store i32 %239, i32* %232, align 4
  br label %.backedge

240:                                              ; preds = %3
  %.not79 = icmp eq i32 %.066, 0
  %241 = select i1 %.not79, i32 591342747, i32 -557818328
  br label %.backedge

242:                                              ; preds = %3
  %243 = sext i32 %.068 to i64
  %244 = sext i32 %.066 to i64
  %245 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @f, i64 0, i64 %243, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = add i32 %.066, -1
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @f, i64 0, i64 %243, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = add i32 %250, %246
  %252 = tail call i32 @_Z6addmodi(i32 %251)
  store i32 %252, i32* %245, align 4
  br label %.backedge

253:                                              ; preds = %3
  %254 = load i32, i32* @x.4, align 4
  %255 = load i32, i32* @y.5, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 -518907811, i32 1399964325
  br label %.backedge

263:                                              ; preds = %3
  %264 = load i32, i32* @x.4, align 4
  %265 = load i32, i32* @y.5, align 4
  %266 = add i32 %264, -1
  %267 = mul i32 %266, %264
  %268 = and i32 %267, 1
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %270, %269
  %272 = select i1 %271, i32 -1361856796, i32 1399964325
  br label %.backedge

273:                                              ; preds = %3
  br label %.backedge

274:                                              ; preds = %3
  %275 = add i32 %.066, 1
  br label %.backedge

276:                                              ; preds = %3
  br label %.backedge

277:                                              ; preds = %3
  %278 = add i32 %.068, 1
  br label %.backedge

279:                                              ; preds = %3
  %280 = load i32, i32* @x.4, align 4
  %281 = load i32, i32* @y.5, align 4
  %282 = add i32 %280, -1
  %283 = mul i32 %282, %280
  %284 = and i32 %283, 1
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %286, %285
  %288 = select i1 %287, i32 -43763037, i32 -1321353009
  br label %.backedge

289:                                              ; preds = %3
  %290 = load i32, i32* @x.4, align 4
  %291 = load i32, i32* @y.5, align 4
  %292 = add i32 %290, -1
  %293 = mul i32 %292, %290
  %294 = and i32 %293, 1
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %296, %295
  %298 = select i1 %297, i32 1574512597, i32 -1321353009
  br label %.backedge

299:                                              ; preds = %3
  br label %.backedge

300:                                              ; preds = %3
  %301 = load i32, i32* @n, align 4
  %.not78 = icmp sgt i32 %.062, %301
  %302 = select i1 %.not78, i32 713823741, i32 784634304
  br label %.backedge

303:                                              ; preds = %3
  %304 = load i32, i32* @pn, align 4
  %305 = sext i32 %.062 to i64
  %306 = getelementptr inbounds [200005 x i32], [200005 x i32]* @a, i64 0, i64 %305
  %307 = load i32, i32* %306, align 4
  %308 = add i32 %307, %304
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds [200005 x i32], [200005 x i32]* @b, i64 0, i64 %305
  %311 = load i32, i32* %310, align 4
  %312 = add i32 %311, %304
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @f, i64 0, i64 %309, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = add i32 %315, %.064
  %317 = tail call i32 @_Z6addmodi(i32 %316)
  br label %.backedge

318:                                              ; preds = %3
  %319 = add i32 %.062, 1
  br label %.backedge

320:                                              ; preds = %3
  br label %.backedge

321:                                              ; preds = %3
  %322 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.060, %322
  %323 = select i1 %.not, i32 -1265607640, i32 334301391
  br label %.backedge

324:                                              ; preds = %3
  %325 = sext i32 %.060 to i64
  %326 = getelementptr inbounds [200005 x i32], [200005 x i32]* @a, i64 0, i64 %325
  %327 = load i32, i32* %326, align 4
  %328 = getelementptr inbounds [200005 x i32], [200005 x i32]* @b, i64 0, i64 %325
  %329 = load i32, i32* %328, align 4
  %330 = add i32 %329, %327
  %331 = shl nsw i32 %330, 1
  %332 = shl nsw i32 %327, 1
  %333 = tail call i32 @_Z1Cii(i32 %331, i32 %332)
  %334 = sub i32 %.064, %333
  %335 = tail call i32 @_Z6submodi(i32 %334)
  br label %.backedge

336:                                              ; preds = %3
  %337 = add i32 %.060, 1
  br label %.backedge

338:                                              ; preds = %3
  %339 = sext i32 %.064 to i64
  %340 = tail call i32 @_Z4fpowii(i32 2, i32 1000000005)
  %341 = sext i32 %340 to i64
  %342 = mul nsw i64 %341, %339
  %343 = srem i64 %342, 1000000007
  %344 = trunc i64 %343 to i32
  %345 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %344)
  ret i32 0

346:                                              ; preds = %3
  %347 = add i32 %.076, -1
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @fr, i64 0, i64 %348
  %350 = load i32, i32* %349, align 4
  %351 = sext i32 %350 to i64
  %352 = sext i32 %.076 to i64
  %353 = mul nsw i64 %351, %352
  %354 = srem i64 %353, 1000000007
  %355 = trunc i64 %354 to i32
  %356 = getelementptr inbounds [1000005 x i32], [1000005 x i32]* @fr, i64 0, i64 %352
  store i32 %355, i32* %356, align 4
  br label %.backedge

357:                                              ; preds = %3
  br label %.backedge

358:                                              ; preds = %3
  br label %.backedge

359:                                              ; preds = %3
  %.neg = add i32 %.072, 1
  br label %.backedge

360:                                              ; preds = %3
  br label %.backedge

361:                                              ; preds = %3
  %362 = load i32, i32* @pn, align 4
  %363 = sext i32 %.070 to i64
  %364 = getelementptr inbounds [200005 x i32], [200005 x i32]* @a, i64 0, i64 %363
  %365 = load i32, i32* %364, align 4
  %366 = sub i32 %362, %365
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds [200005 x i32], [200005 x i32]* @b, i64 0, i64 %363
  %369 = load i32, i32* %368, align 4
  %370 = sub i32 %362, %369
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @f, i64 0, i64 %367, i64 %371
  %373 = load i32, i32* %372, align 4
  %374 = add i32 %373, 1
  store i32 %374, i32* %372, align 4
  br label %.backedge

375:                                              ; preds = %3
  br label %.backedge

376:                                              ; preds = %3
  br label %.backedge

377:                                              ; preds = %3
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_Z6addmodi(i32 %0) local_unnamed_addr #4 comdat {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = add i32 %0, -1000000007
  br label %.outer.outer

.outer.outer:                                     ; preds = %.outer.outer.backedge, %1
  %.05.ph.ph = phi i32 [ 1486070643, %1 ], [ 652331293, %.outer.outer.backedge ]
  %.0.ph.ph = phi i32 [ undef, %1 ], [ %.0.ph.ph.be, %.outer.outer.backedge ]
  br label %.outer

.outer:                                           ; preds = %.outer.outer, %5
  %.05.ph = phi i32 [ %7, %5 ], [ %.05.ph.ph, %.outer.outer ]
  br label %4

4:                                                ; preds = %.outer, %4
  switch i32 %.05.ph, label %4 [
    i32 1486070643, label %5
    i32 -399303892, label %.outer.outer.backedge
    i32 1968924505, label %8
    i32 652331293, label %9
  ]

5:                                                ; preds = %4
  %.0..0..0. = load volatile i32, i32* %2, align 4
  %6 = icmp sgt i32 %.0..0..0., 1000000006
  %7 = select i1 %6, i32 -399303892, i32 1968924505
  br label %.outer

.outer.outer.backedge:                            ; preds = %4, %8
  %.0.ph.ph.be = phi i32 [ %0, %8 ], [ %3, %4 ]
  br label %.outer.outer

8:                                                ; preds = %4
  br label %.outer.outer.backedge

9:                                                ; preds = %4
  ret i32 %.0.ph.ph
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_Z6submodi(i32 %0) local_unnamed_addr #4 comdat {
  %2 = alloca i32, align 4
  %3 = alloca i1, align 1
  %4 = alloca i32*, align 8
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = load i32, i32* @x.8, align 4
  %8 = load i32, i32* @y.9, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %6, align 1
  %13 = icmp slt i32 %8, 10
  store i1 %13, i1* %5, align 1
  br label %14

14:                                               ; preds = %.backedge, %1
  %15 = phi i32 [ %8, %1 ], [ %.be, %.backedge ]
  %16 = phi i32 [ %7, %1 ], [ %.be11, %.backedge ]
  %17 = phi i32 [ %8, %1 ], [ %.be12, %.backedge ]
  %18 = phi i32 [ %7, %1 ], [ %.be13, %.backedge ]
  %.09 = phi i32 [ 798376872, %1 ], [ %.09.be, %.backedge ]
  %.0 = phi i32 [ undef, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.09, label %.backedge [
    i32 798376872, label %19
    i32 1314089560, label %22
    i32 1211312053, label %35
    i32 -1071252393, label %37
    i32 -24980843, label %40
    i32 -964436048, label %42
    i32 970655570, label %50
    i32 1101811203, label %58
    i32 732236720, label %59
    i32 1834768374, label %60
  ]

.backedge:                                        ; preds = %14, %60, %59, %50, %42, %40, %37, %35, %22, %19
  %.be = phi i32 [ %15, %14 ], [ %15, %60 ], [ %15, %59 ], [ %15, %50 ], [ %15, %42 ], [ %15, %40 ], [ %15, %37 ], [ %15, %35 ], [ %27, %22 ], [ %15, %19 ]
  %.be11 = phi i32 [ %16, %14 ], [ %16, %60 ], [ %16, %59 ], [ %16, %50 ], [ %16, %42 ], [ %16, %40 ], [ %16, %37 ], [ %16, %35 ], [ %26, %22 ], [ %16, %19 ]
  %.be12 = phi i32 [ %17, %14 ], [ %17, %60 ], [ %17, %59 ], [ %17, %50 ], [ %15, %42 ], [ %17, %40 ], [ %17, %37 ], [ %17, %35 ], [ %27, %22 ], [ %17, %19 ]
  %.be13 = phi i32 [ %18, %14 ], [ %18, %60 ], [ %18, %59 ], [ %18, %50 ], [ %16, %42 ], [ %18, %40 ], [ %18, %37 ], [ %18, %35 ], [ %26, %22 ], [ %18, %19 ]
  %.09.be = phi i32 [ %.09, %14 ], [ 970655570, %60 ], [ 1314089560, %59 ], [ %57, %50 ], [ %49, %42 ], [ -964436048, %40 ], [ -964436048, %37 ], [ %36, %35 ], [ %34, %22 ], [ %21, %19 ]
  %.0.be = phi i32 [ %.0, %14 ], [ %.0, %60 ], [ %.0, %59 ], [ %.0, %50 ], [ %.0, %42 ], [ %41, %40 ], [ %39, %37 ], [ %.0, %35 ], [ %.0, %22 ], [ %.0, %19 ]
  br label %14

19:                                               ; preds = %14
  %.0..0..0. = load volatile i1, i1* %6, align 1
  %.0..0..0.2 = load volatile i1, i1* %5, align 1
  %20 = or i1 %.0..0..0., %.0..0..0.2
  %21 = select i1 %20, i32 1314089560, i32 732236720
  br label %.backedge

22:                                               ; preds = %14
  %23 = alloca i32, align 4
  store i32* %23, i32** %4, align 8
  %.0..0..0.3 = load volatile i32*, i32** %4, align 8
  store i32 %0, i32* %.0..0..0.3, align 4
  %.0..0..0.4 = load volatile i32*, i32** %4, align 8
  %24 = load i32, i32* %.0..0..0.4, align 4
  %25 = icmp slt i32 %24, 0
  store i1 %25, i1* %3, align 1
  %26 = load i32, i32* @x.8, align 4
  %27 = load i32, i32* @y.9, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 1211312053, i32 732236720
  br label %.backedge

35:                                               ; preds = %14
  %.0..0..0.7 = load volatile i1, i1* %3, align 1
  %36 = select i1 %.0..0..0.7, i32 -1071252393, i32 -24980843
  br label %.backedge

37:                                               ; preds = %14
  %.0..0..0.5 = load volatile i32*, i32** %4, align 8
  %38 = load i32, i32* %.0..0..0.5, align 4
  %39 = add i32 %38, 1000000007
  br label %.backedge

40:                                               ; preds = %14
  %.0..0..0.6 = load volatile i32*, i32** %4, align 8
  %41 = load i32, i32* %.0..0..0.6, align 4
  br label %.backedge

42:                                               ; preds = %14
  store i32 %.0, i32* %2, align 4
  %43 = add i32 %16, -1
  %44 = mul i32 %43, %16
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %15, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 970655570, i32 1834768374
  br label %.backedge

50:                                               ; preds = %14
  %51 = add i32 %18, -1
  %52 = mul i32 %51, %18
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %17, 10
  %56 = or i1 %55, %54
  %57 = select i1 %56, i32 1101811203, i32 1834768374
  br label %.backedge

58:                                               ; preds = %14
  %.0..0..0.8 = load volatile i32, i32* %2, align 4
  ret i32 %.0..0..0.8

59:                                               ; preds = %14
  br label %.backedge

60:                                               ; preds = %14
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

attributes #0 = { nofree noinline norecurse nosync nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { mustprogress nofree noinline norecurse nosync nounwind readonly uwtable willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
