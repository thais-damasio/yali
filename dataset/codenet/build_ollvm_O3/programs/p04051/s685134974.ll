; ModuleID = 'build_ollvm/programs/p04051/s685134974.ll'
source_filename = "Project_CodeNet_C++1400/p04051/s685134974.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZN6FastIO4readEv = comdat any

$_Z3invxx = comdat any

$_ZN6FastIO7writelnEx = comdat any

$_Z5exgcdxxRxS_ = comdat any

$_ZN6FastIO5writeEx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@fac = local_unnamed_addr global [8040 x i64] zeroinitializer, align 16
@N = local_unnamed_addr global i64 0, align 8
@arr = local_unnamed_addr global [200010 x [2 x i64]] zeroinitializer, align 16
@dp = local_unnamed_addr global [4020 x [4020 x i64]] zeroinitializer, align 16
@invv = local_unnamed_addr global [8040 x i64] zeroinitializer, align 16
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s685134974.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = tail call i64 @_ZN6FastIO4readEv()
  store i64 %2, i64* @N, align 8
  br label %3

3:                                                ; preds = %.backedge, %0
  %.082 = phi i64 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i64 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i64 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i64 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i64 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i64 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i64 [ 1, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i64 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i64 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.0 = phi i32 [ -1431634202, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1431634202, label %4
    i32 2114168038, label %7
    i32 1192683606, label %18
    i32 874102340, label %28
    i32 -1825541091, label %39
    i32 -161839255, label %40
    i32 -2015572485, label %41
    i32 1689920947, label %44
    i32 533716485, label %45
    i32 -566700969, label %48
    i32 -536768074, label %58
    i32 1693153680, label %79
    i32 -973539355, label %80
    i32 -1059400559, label %81
    i32 -2068322340, label %91
    i32 282689491, label %101
    i32 1562502441, label %102
    i32 1048045798, label %112
    i32 -1824502657, label %122
    i32 869660057, label %123
    i32 -1187542963, label %133
    i32 1480511805, label %143
    i32 -43683985, label %144
    i32 1304642050, label %154
    i32 -1840602145, label %165
    i32 -126739216, label %167
    i32 -1335635248, label %174
    i32 95029919, label %184
    i32 -1734016652, label %195
    i32 -144939733, label %196
    i32 1604790388, label %197
    i32 -661733876, label %200
    i32 -1996971360, label %210
    i32 -374855756, label %224
    i32 1348293090, label %225
    i32 2115018643, label %227
    i32 1918169111, label %228
    i32 1431035224, label %231
    i32 17586239, label %252
    i32 -1985975616, label %254
    i32 1408433648, label %255
    i32 -1174980751, label %258
    i32 1012079740, label %269
    i32 -2108436705, label %271
    i32 -508143937, label %281
    i32 1787878737, label %296
    i32 1495322218, label %297
    i32 1606210414, label %299
    i32 -2035711386, label %311
    i32 -2117225081, label %312
    i32 807977477, label %314
    i32 -185625643, label %315
    i32 1663792427, label %316
    i32 -1030274355, label %318
    i32 877128267, label %323
  ]

.backedge:                                        ; preds = %3, %323, %318, %316, %315, %314, %312, %311, %299, %297, %281, %271, %269, %258, %255, %254, %252, %231, %228, %227, %225, %224, %210, %200, %197, %196, %195, %184, %174, %167, %165, %154, %144, %143, %133, %123, %122, %112, %102, %101, %91, %81, %80, %79, %58, %48, %45, %44, %41, %40, %39, %28, %18, %7, %4
  %.082.be = phi i64 [ %.082, %3 ], [ %.082, %323 ], [ %.082, %318 ], [ %317, %316 ], [ %.082, %315 ], [ 1, %314 ], [ %.082, %312 ], [ %.082, %311 ], [ %.082, %299 ], [ %.082, %297 ], [ %.082, %281 ], [ %.082, %271 ], [ %.082, %269 ], [ %.082, %258 ], [ %.082, %255 ], [ %.082, %254 ], [ %.082, %252 ], [ %.082, %231 ], [ %.082, %228 ], [ %.082, %227 ], [ %.082, %225 ], [ %.082, %224 ], [ %.082, %210 ], [ %.082, %200 ], [ %.082, %197 ], [ %.082, %196 ], [ %.082, %195 ], [ %185, %184 ], [ %.082, %174 ], [ %.082, %167 ], [ %.082, %165 ], [ %.082, %154 ], [ %.082, %144 ], [ %.082, %143 ], [ 1, %133 ], [ %.082, %123 ], [ %.082, %122 ], [ %.082, %112 ], [ %.082, %102 ], [ %.082, %101 ], [ %.082, %91 ], [ %.082, %81 ], [ %.082, %80 ], [ %.082, %79 ], [ %.082, %58 ], [ %.082, %48 ], [ %.082, %45 ], [ %.082, %44 ], [ %.082, %41 ], [ %.082, %40 ], [ %.082, %39 ], [ %.082, %28 ], [ %.082, %18 ], [ %.082, %7 ], [ %.082, %4 ]
  %.080.be = phi i64 [ %.080, %3 ], [ %.080, %323 ], [ %.080, %318 ], [ %.080, %316 ], [ %.080, %315 ], [ %.080, %314 ], [ %.080, %312 ], [ %.080, %311 ], [ %.080, %299 ], [ %.080, %297 ], [ %.080, %281 ], [ %.080, %271 ], [ %.080, %269 ], [ %.080, %258 ], [ %.080, %255 ], [ %.080, %254 ], [ %.080, %252 ], [ %.080, %231 ], [ %.080, %228 ], [ %.080, %227 ], [ %226, %225 ], [ %.080, %224 ], [ %.080, %210 ], [ %.080, %200 ], [ %.080, %197 ], [ 0, %196 ], [ %.080, %195 ], [ %.080, %184 ], [ %.080, %174 ], [ %.080, %167 ], [ %.080, %165 ], [ %.080, %154 ], [ %.080, %144 ], [ %.080, %143 ], [ %.080, %133 ], [ %.080, %123 ], [ %.080, %122 ], [ %.080, %112 ], [ %.080, %102 ], [ %.080, %101 ], [ %.080, %91 ], [ %.080, %81 ], [ %.080, %80 ], [ %.080, %79 ], [ %.080, %58 ], [ %.080, %48 ], [ %.080, %45 ], [ %.080, %44 ], [ %.080, %41 ], [ %.080, %40 ], [ %.080, %39 ], [ %.080, %28 ], [ %.080, %18 ], [ %.080, %7 ], [ %.080, %4 ]
  %.078.be = phi i64 [ %.078, %3 ], [ %.078, %323 ], [ %.078, %318 ], [ %.078, %316 ], [ %.078, %315 ], [ %.078, %314 ], [ %.078, %312 ], [ %.078, %311 ], [ %.078, %299 ], [ %.078, %297 ], [ %.078, %281 ], [ %.078, %271 ], [ %.078, %269 ], [ %.078, %258 ], [ %.078, %255 ], [ %.078, %254 ], [ %.078, %252 ], [ %251, %231 ], [ %.078, %228 ], [ 0, %227 ], [ %.078, %225 ], [ %.078, %224 ], [ %.078, %210 ], [ %.078, %200 ], [ %.078, %197 ], [ %.078, %196 ], [ %.078, %195 ], [ %.078, %184 ], [ %.078, %174 ], [ %.078, %167 ], [ %.078, %165 ], [ %.078, %154 ], [ %.078, %144 ], [ %.078, %143 ], [ %.078, %133 ], [ %.078, %123 ], [ %.078, %122 ], [ %.078, %112 ], [ %.078, %102 ], [ %.078, %101 ], [ %.078, %91 ], [ %.078, %81 ], [ %.078, %80 ], [ %.078, %79 ], [ %.078, %58 ], [ %.078, %48 ], [ %.078, %45 ], [ %.078, %44 ], [ %.078, %41 ], [ %.078, %40 ], [ %.078, %39 ], [ %.078, %28 ], [ %.078, %18 ], [ %.078, %7 ], [ %.078, %4 ]
  %.076.be = phi i64 [ %.076, %3 ], [ %.076, %323 ], [ %.076, %318 ], [ %.076, %316 ], [ %.076, %315 ], [ %.076, %314 ], [ %.076, %312 ], [ %.076, %311 ], [ %.076, %299 ], [ %.076, %297 ], [ %.076, %281 ], [ %.076, %271 ], [ %.076, %269 ], [ %.076, %258 ], [ %.076, %255 ], [ %.076, %254 ], [ %253, %252 ], [ %.076, %231 ], [ %.076, %228 ], [ 1, %227 ], [ %.076, %225 ], [ %.076, %224 ], [ %.076, %210 ], [ %.076, %200 ], [ %.076, %197 ], [ %.076, %196 ], [ %.076, %195 ], [ %.076, %184 ], [ %.076, %174 ], [ %.076, %167 ], [ %.076, %165 ], [ %.076, %154 ], [ %.076, %144 ], [ %.076, %143 ], [ %.076, %133 ], [ %.076, %123 ], [ %.076, %122 ], [ %.076, %112 ], [ %.076, %102 ], [ %.076, %101 ], [ %.076, %91 ], [ %.076, %81 ], [ %.076, %80 ], [ %.076, %79 ], [ %.076, %58 ], [ %.076, %48 ], [ %.076, %45 ], [ %.076, %44 ], [ %.076, %41 ], [ %.076, %40 ], [ %.076, %39 ], [ %.076, %28 ], [ %.076, %18 ], [ %.076, %7 ], [ %.076, %4 ]
  %.074.be = phi i64 [ %.074, %3 ], [ %.074, %323 ], [ %.074, %318 ], [ %.074, %316 ], [ %.074, %315 ], [ %.074, %314 ], [ %.074, %312 ], [ %.074, %311 ], [ %.074, %299 ], [ %.074, %297 ], [ %.074, %281 ], [ %.074, %271 ], [ %.074, %269 ], [ %.074, %258 ], [ %.074, %255 ], [ %.074, %254 ], [ %.074, %252 ], [ %.074, %231 ], [ %.074, %228 ], [ %.074, %227 ], [ %.074, %225 ], [ %.074, %224 ], [ %.074, %210 ], [ %.074, %200 ], [ %.074, %197 ], [ %.074, %196 ], [ %.074, %195 ], [ %.074, %184 ], [ %.074, %174 ], [ %.074, %167 ], [ %.074, %165 ], [ %.074, %154 ], [ %.074, %144 ], [ %.074, %143 ], [ %.074, %133 ], [ %.074, %123 ], [ %.074, %122 ], [ %.074, %112 ], [ %.074, %102 ], [ %.074, %101 ], [ %.074, %91 ], [ %.074, %81 ], [ %.neg86, %80 ], [ %.074, %79 ], [ %.074, %58 ], [ %.074, %48 ], [ %.074, %45 ], [ 5, %44 ], [ %.074, %41 ], [ %.074, %40 ], [ %.074, %39 ], [ %.074, %28 ], [ %.074, %18 ], [ %.074, %7 ], [ %.074, %4 ]
  %.072.be = phi i64 [ %.072, %3 ], [ %.072, %323 ], [ %.072, %318 ], [ %.072, %316 ], [ %.072, %315 ], [ %.072, %314 ], [ %313, %312 ], [ %.072, %311 ], [ %.072, %299 ], [ %.072, %297 ], [ %.072, %281 ], [ %.072, %271 ], [ %.072, %269 ], [ %.072, %258 ], [ %.072, %255 ], [ %.072, %254 ], [ %.072, %252 ], [ %.072, %231 ], [ %.072, %228 ], [ %.072, %227 ], [ %.072, %225 ], [ %.072, %224 ], [ %.072, %210 ], [ %.072, %200 ], [ %.072, %197 ], [ %.072, %196 ], [ %.072, %195 ], [ %.072, %184 ], [ %.072, %174 ], [ %.072, %167 ], [ %.072, %165 ], [ %.072, %154 ], [ %.072, %144 ], [ %.072, %143 ], [ %.072, %133 ], [ %.072, %123 ], [ %.072, %122 ], [ %.neg, %112 ], [ %.072, %102 ], [ %.072, %101 ], [ %.072, %91 ], [ %.072, %81 ], [ %.072, %80 ], [ %.072, %79 ], [ %.072, %58 ], [ %.072, %48 ], [ %.072, %45 ], [ %.072, %44 ], [ %.072, %41 ], [ 5, %40 ], [ %.072, %39 ], [ %.072, %28 ], [ %.072, %18 ], [ %.072, %7 ], [ %.072, %4 ]
  %.070.be = phi i64 [ %.070, %3 ], [ %.070, %323 ], [ %.070, %318 ], [ %.070, %316 ], [ %.070, %315 ], [ %.070, %314 ], [ %.070, %312 ], [ %.070, %311 ], [ %.070, %299 ], [ %298, %297 ], [ %.070, %281 ], [ %.070, %271 ], [ %.070, %269 ], [ %.070, %258 ], [ %.070, %255 ], [ %.070, %254 ], [ %.070, %252 ], [ %.070, %231 ], [ %.070, %228 ], [ %.070, %227 ], [ %.070, %225 ], [ %.070, %224 ], [ %.070, %210 ], [ %.070, %200 ], [ %.070, %197 ], [ %.070, %196 ], [ %.070, %195 ], [ %.070, %184 ], [ %.070, %174 ], [ %.070, %167 ], [ %.070, %165 ], [ %.070, %154 ], [ %.070, %144 ], [ %.070, %143 ], [ %.070, %133 ], [ %.070, %123 ], [ %.070, %122 ], [ %.070, %112 ], [ %.070, %102 ], [ %.070, %101 ], [ %.070, %91 ], [ %.070, %81 ], [ %.070, %80 ], [ %.070, %79 ], [ %.070, %58 ], [ %.070, %48 ], [ %.070, %45 ], [ %.070, %44 ], [ %.070, %41 ], [ %.070, %40 ], [ %.070, %39 ], [ %29, %28 ], [ %.070, %18 ], [ %.070, %7 ], [ %.070, %4 ]
  %.068.be = phi i64 [ %.068, %3 ], [ %328, %323 ], [ %.068, %318 ], [ %.068, %316 ], [ %.068, %315 ], [ %.068, %314 ], [ %.068, %312 ], [ %.068, %311 ], [ %.068, %299 ], [ %.068, %297 ], [ %286, %281 ], [ %.068, %271 ], [ %.068, %269 ], [ %268, %258 ], [ %.068, %255 ], [ 0, %254 ], [ %.068, %252 ], [ %.068, %231 ], [ %.068, %228 ], [ %.068, %227 ], [ %.068, %225 ], [ %.068, %224 ], [ %.068, %210 ], [ %.068, %200 ], [ %.068, %197 ], [ %.068, %196 ], [ %.068, %195 ], [ %.068, %184 ], [ %.068, %174 ], [ %.068, %167 ], [ %.068, %165 ], [ %.068, %154 ], [ %.068, %144 ], [ %.068, %143 ], [ %.068, %133 ], [ %.068, %123 ], [ %.068, %122 ], [ %.068, %112 ], [ %.068, %102 ], [ %.068, %101 ], [ %.068, %91 ], [ %.068, %81 ], [ %.068, %80 ], [ %.068, %79 ], [ %.068, %58 ], [ %.068, %48 ], [ %.068, %45 ], [ %.068, %44 ], [ %.068, %41 ], [ %.068, %40 ], [ %.068, %39 ], [ %.068, %28 ], [ %.068, %18 ], [ %.068, %7 ], [ %.068, %4 ]
  %.066.be = phi i64 [ %.066, %3 ], [ %.066, %323 ], [ %.066, %318 ], [ %.066, %316 ], [ %.066, %315 ], [ %.066, %314 ], [ %.066, %312 ], [ %.066, %311 ], [ %.066, %299 ], [ %.066, %297 ], [ %.066, %281 ], [ %.066, %271 ], [ %270, %269 ], [ %.066, %258 ], [ %.066, %255 ], [ 1, %254 ], [ %.066, %252 ], [ %.066, %231 ], [ %.066, %228 ], [ %.066, %227 ], [ %.066, %225 ], [ %.066, %224 ], [ %.066, %210 ], [ %.066, %200 ], [ %.066, %197 ], [ %.066, %196 ], [ %.066, %195 ], [ %.066, %184 ], [ %.066, %174 ], [ %.066, %167 ], [ %.066, %165 ], [ %.066, %154 ], [ %.066, %144 ], [ %.066, %143 ], [ %.066, %133 ], [ %.066, %123 ], [ %.066, %122 ], [ %.066, %112 ], [ %.066, %102 ], [ %.066, %101 ], [ %.066, %91 ], [ %.066, %81 ], [ %.066, %80 ], [ %.066, %79 ], [ %.066, %58 ], [ %.066, %48 ], [ %.066, %45 ], [ %.066, %44 ], [ %.066, %41 ], [ %.066, %40 ], [ %.066, %39 ], [ %.066, %28 ], [ %.066, %18 ], [ %.066, %7 ], [ %.066, %4 ]
  %.0.be = phi i32 [ %.0, %3 ], [ -508143937, %323 ], [ -1996971360, %318 ], [ 95029919, %316 ], [ 1304642050, %315 ], [ -1187542963, %314 ], [ 1048045798, %312 ], [ -2068322340, %311 ], [ -536768074, %299 ], [ 874102340, %297 ], [ %295, %281 ], [ %280, %271 ], [ 1408433648, %269 ], [ 1012079740, %258 ], [ %257, %255 ], [ 1408433648, %254 ], [ 1918169111, %252 ], [ 17586239, %231 ], [ %230, %228 ], [ 1918169111, %227 ], [ 1604790388, %225 ], [ 1348293090, %224 ], [ %223, %210 ], [ %209, %200 ], [ %199, %197 ], [ 1604790388, %196 ], [ -43683985, %195 ], [ %194, %184 ], [ %183, %174 ], [ -1335635248, %167 ], [ %166, %165 ], [ %164, %154 ], [ %153, %144 ], [ -43683985, %143 ], [ %142, %133 ], [ %132, %123 ], [ -2015572485, %122 ], [ %121, %112 ], [ %111, %102 ], [ 1562502441, %101 ], [ %100, %91 ], [ %90, %81 ], [ 533716485, %80 ], [ -973539355, %79 ], [ %78, %58 ], [ %57, %48 ], [ %47, %45 ], [ 533716485, %44 ], [ %43, %41 ], [ -2015572485, %40 ], [ -1431634202, %39 ], [ %38, %28 ], [ %27, %18 ], [ 1192683606, %7 ], [ %6, %4 ]
  br label %3

4:                                                ; preds = %3
  %5 = load i64, i64* @N, align 8
  %.not87 = icmp sgt i64 %.070, %5
  %6 = select i1 %.not87, i32 -161839255, i32 2114168038
  br label %.backedge

7:                                                ; preds = %3
  %8 = tail call i64 @_ZN6FastIO4readEv()
  %9 = getelementptr inbounds [200010 x [2 x i64]], [200010 x [2 x i64]]* @arr, i64 0, i64 %.070, i64 0
  store i64 %8, i64* %9, align 16
  %10 = tail call i64 @_ZN6FastIO4readEv()
  %11 = getelementptr inbounds [200010 x [2 x i64]], [200010 x [2 x i64]]* @arr, i64 0, i64 %.070, i64 1
  store i64 %10, i64* %11, align 8
  %12 = load i64, i64* %9, align 16
  %13 = sub i64 2005, %12
  %14 = sub i64 2005, %10
  %15 = getelementptr inbounds [4020 x [4020 x i64]], [4020 x [4020 x i64]]* @dp, i64 0, i64 %13, i64 %14
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %15, align 8
  br label %.backedge

18:                                               ; preds = %3
  %19 = load i32, i32* @x.1, align 4
  %20 = load i32, i32* @y.2, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 874102340, i32 1495322218
  br label %.backedge

28:                                               ; preds = %3
  %29 = add i64 %.070, 1
  %30 = load i32, i32* @x.1, align 4
  %31 = load i32, i32* @y.2, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -1825541091, i32 1495322218
  br label %.backedge

39:                                               ; preds = %3
  br label %.backedge

40:                                               ; preds = %3
  br label %.backedge

41:                                               ; preds = %3
  %42 = icmp slt i64 %.072, 4006
  %43 = select i1 %42, i32 1689920947, i32 869660057
  br label %.backedge

44:                                               ; preds = %3
  br label %.backedge

45:                                               ; preds = %3
  %46 = icmp slt i64 %.074, 4006
  %47 = select i1 %46, i32 -566700969, i32 -1059400559
  br label %.backedge

48:                                               ; preds = %3
  %49 = load i32, i32* @x.1, align 4
  %50 = load i32, i32* @y.2, align 4
  %51 = add i32 %49, -1
  %52 = mul i32 %51, %49
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %55, %54
  %57 = select i1 %56, i32 -536768074, i32 1606210414
  br label %.backedge

58:                                               ; preds = %3
  %59 = add i64 %.072, -1
  %60 = getelementptr inbounds [4020 x [4020 x i64]], [4020 x [4020 x i64]]* @dp, i64 0, i64 %59, i64 %.074
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds [4020 x [4020 x i64]], [4020 x [4020 x i64]]* @dp, i64 0, i64 %.072, i64 %.074
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, %61
  %65 = add i64 %.074, -1
  %66 = getelementptr inbounds [4020 x [4020 x i64]], [4020 x [4020 x i64]]* @dp, i64 0, i64 %.072, i64 %65
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %64, %67
  %69 = srem i64 %68, 1000000007
  store i64 %69, i64* %62, align 8
  %70 = load i32, i32* @x.1, align 4
  %71 = load i32, i32* @y.2, align 4
  %72 = add i32 %70, -1
  %73 = mul i32 %72, %70
  %74 = and i32 %73, 1
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %76, %75
  %78 = select i1 %77, i32 1693153680, i32 1606210414
  br label %.backedge

79:                                               ; preds = %3
  br label %.backedge

80:                                               ; preds = %3
  %.neg86 = add i64 %.074, 1
  br label %.backedge

81:                                               ; preds = %3
  %82 = load i32, i32* @x.1, align 4
  %83 = load i32, i32* @y.2, align 4
  %84 = add i32 %82, -1
  %85 = mul i32 %84, %82
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %88, %87
  %90 = select i1 %89, i32 -2068322340, i32 -2035711386
  br label %.backedge

91:                                               ; preds = %3
  %92 = load i32, i32* @x.1, align 4
  %93 = load i32, i32* @y.2, align 4
  %94 = add i32 %92, -1
  %95 = mul i32 %94, %92
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %98, %97
  %100 = select i1 %99, i32 282689491, i32 -2035711386
  br label %.backedge

101:                                              ; preds = %3
  br label %.backedge

102:                                              ; preds = %3
  %103 = load i32, i32* @x.1, align 4
  %104 = load i32, i32* @y.2, align 4
  %105 = add i32 %103, -1
  %106 = mul i32 %105, %103
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %109, %108
  %111 = select i1 %110, i32 1048045798, i32 -2117225081
  br label %.backedge

112:                                              ; preds = %3
  %.neg = add i64 %.072, 1
  %113 = load i32, i32* @x.1, align 4
  %114 = load i32, i32* @y.2, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 -1824502657, i32 -2117225081
  br label %.backedge

122:                                              ; preds = %3
  br label %.backedge

123:                                              ; preds = %3
  %124 = load i32, i32* @x.1, align 4
  %125 = load i32, i32* @y.2, align 4
  %126 = add i32 %124, -1
  %127 = mul i32 %126, %124
  %128 = and i32 %127, 1
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %130, %129
  %132 = select i1 %131, i32 -1187542963, i32 807977477
  br label %.backedge

133:                                              ; preds = %3
  store i64 1, i64* getelementptr inbounds ([8040 x i64], [8040 x i64]* @fac, i64 0, i64 0), align 16
  %134 = load i32, i32* @x.1, align 4
  %135 = load i32, i32* @y.2, align 4
  %136 = add i32 %134, -1
  %137 = mul i32 %136, %134
  %138 = and i32 %137, 1
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %140, %139
  %142 = select i1 %141, i32 1480511805, i32 807977477
  br label %.backedge

143:                                              ; preds = %3
  br label %.backedge

144:                                              ; preds = %3
  %145 = load i32, i32* @x.1, align 4
  %146 = load i32, i32* @y.2, align 4
  %147 = add i32 %145, -1
  %148 = mul i32 %147, %145
  %149 = and i32 %148, 1
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %151, %150
  %153 = select i1 %152, i32 1304642050, i32 -185625643
  br label %.backedge

154:                                              ; preds = %3
  %155 = icmp slt i64 %.082, 8040
  store i1 %155, i1* %1, align 1
  %156 = load i32, i32* @x.1, align 4
  %157 = load i32, i32* @y.2, align 4
  %158 = add i32 %156, -1
  %159 = mul i32 %158, %156
  %160 = and i32 %159, 1
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %162, %161
  %164 = select i1 %163, i32 -1840602145, i32 -185625643
  br label %.backedge

165:                                              ; preds = %3
  %.0..0..0. = load volatile i1, i1* %1, align 1
  %166 = select i1 %.0..0..0., i32 -126739216, i32 -144939733
  br label %.backedge

167:                                              ; preds = %3
  %168 = add i64 %.082, -1
  %169 = getelementptr inbounds [8040 x i64], [8040 x i64]* @fac, i64 0, i64 %168
  %170 = load i64, i64* %169, align 8
  %171 = mul nsw i64 %170, %.082
  %172 = srem i64 %171, 1000000007
  %173 = getelementptr inbounds [8040 x i64], [8040 x i64]* @fac, i64 0, i64 %.082
  store i64 %172, i64* %173, align 8
  br label %.backedge

174:                                              ; preds = %3
  %175 = load i32, i32* @x.1, align 4
  %176 = load i32, i32* @y.2, align 4
  %177 = add i32 %175, -1
  %178 = mul i32 %177, %175
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %181, %180
  %183 = select i1 %182, i32 95029919, i32 1663792427
  br label %.backedge

184:                                              ; preds = %3
  %185 = add i64 %.082, 1
  %186 = load i32, i32* @x.1, align 4
  %187 = load i32, i32* @y.2, align 4
  %188 = add i32 %186, -1
  %189 = mul i32 %188, %186
  %190 = and i32 %189, 1
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %192, %191
  %194 = select i1 %193, i32 -1734016652, i32 1663792427
  br label %.backedge

195:                                              ; preds = %3
  br label %.backedge

196:                                              ; preds = %3
  br label %.backedge

197:                                              ; preds = %3
  %198 = icmp slt i64 %.080, 8040
  %199 = select i1 %198, i32 -661733876, i32 2115018643
  br label %.backedge

200:                                              ; preds = %3
  %201 = load i32, i32* @x.1, align 4
  %202 = load i32, i32* @y.2, align 4
  %203 = add i32 %201, -1
  %204 = mul i32 %203, %201
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %207, %206
  %209 = select i1 %208, i32 -1996971360, i32 -1030274355
  br label %.backedge

210:                                              ; preds = %3
  %211 = getelementptr inbounds [8040 x i64], [8040 x i64]* @fac, i64 0, i64 %.080
  %212 = load i64, i64* %211, align 8
  %213 = tail call i64 @_Z3invxx(i64 %212, i64 1000000007)
  %214 = getelementptr inbounds [8040 x i64], [8040 x i64]* @invv, i64 0, i64 %.080
  store i64 %213, i64* %214, align 8
  %215 = load i32, i32* @x.1, align 4
  %216 = load i32, i32* @y.2, align 4
  %217 = add i32 %215, -1
  %218 = mul i32 %217, %215
  %219 = and i32 %218, 1
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %221, %220
  %223 = select i1 %222, i32 -374855756, i32 -1030274355
  br label %.backedge

224:                                              ; preds = %3
  br label %.backedge

225:                                              ; preds = %3
  %226 = add i64 %.080, 1
  br label %.backedge

227:                                              ; preds = %3
  br label %.backedge

228:                                              ; preds = %3
  %229 = load i64, i64* @N, align 8
  %.not85 = icmp sgt i64 %.076, %229
  %230 = select i1 %.not85, i32 -1985975616, i32 1431035224
  br label %.backedge

231:                                              ; preds = %3
  %232 = getelementptr inbounds [200010 x [2 x i64]], [200010 x [2 x i64]]* @arr, i64 0, i64 %.076, i64 0
  %233 = load i64, i64* %232, align 16
  %234 = getelementptr inbounds [200010 x [2 x i64]], [200010 x [2 x i64]]* @arr, i64 0, i64 %.076, i64 1
  %235 = load i64, i64* %234, align 8
  %236 = add i64 %235, %233
  %237 = shl nsw i64 %236, 1
  %238 = shl nsw i64 %233, 1
  %239 = getelementptr inbounds [8040 x i64], [8040 x i64]* @fac, i64 0, i64 %237
  %240 = load i64, i64* %239, align 16
  %241 = shl i64 %235, 1
  %242 = getelementptr inbounds [8040 x i64], [8040 x i64]* @invv, i64 0, i64 %241
  %243 = load i64, i64* %242, align 16
  %244 = mul nsw i64 %243, %240
  %245 = srem i64 %244, 1000000007
  %246 = getelementptr inbounds [8040 x i64], [8040 x i64]* @invv, i64 0, i64 %238
  %247 = load i64, i64* %246, align 16
  %248 = mul nsw i64 %245, %247
  %249 = srem i64 %248, 1000000007
  %250 = add i64 %249, %.078
  %251 = srem i64 %250, 1000000007
  br label %.backedge

252:                                              ; preds = %3
  %253 = add i64 %.076, 1
  br label %.backedge

254:                                              ; preds = %3
  br label %.backedge

255:                                              ; preds = %3
  %256 = load i64, i64* @N, align 8
  %.not = icmp sgt i64 %.066, %256
  %257 = select i1 %.not, i32 -2108436705, i32 -1174980751
  br label %.backedge

258:                                              ; preds = %3
  %259 = getelementptr inbounds [200010 x [2 x i64]], [200010 x [2 x i64]]* @arr, i64 0, i64 %.066, i64 0
  %260 = load i64, i64* %259, align 16
  %261 = add i64 %260, 2005
  %262 = getelementptr inbounds [200010 x [2 x i64]], [200010 x [2 x i64]]* @arr, i64 0, i64 %.066, i64 1
  %263 = load i64, i64* %262, align 8
  %264 = add i64 %263, 2005
  %265 = getelementptr inbounds [4020 x [4020 x i64]], [4020 x [4020 x i64]]* @dp, i64 0, i64 %261, i64 %264
  %266 = load i64, i64* %265, align 8
  %267 = add i64 %266, %.068
  %268 = srem i64 %267, 1000000007
  br label %.backedge

269:                                              ; preds = %3
  %270 = add i64 %.066, 1
  br label %.backedge

271:                                              ; preds = %3
  %272 = load i32, i32* @x.1, align 4
  %273 = load i32, i32* @y.2, align 4
  %274 = add i32 %272, -1
  %275 = mul i32 %274, %272
  %276 = and i32 %275, 1
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %278, %277
  %280 = select i1 %279, i32 -508143937, i32 877128267
  br label %.backedge

281:                                              ; preds = %3
  %.neg.neg84 = sub i64 1000000007, %.078
  %282 = add i64 %.neg.neg84, %.068
  %283 = srem i64 %282, 1000000007
  %284 = tail call i64 @_Z3invxx(i64 2, i64 1000000007)
  %285 = mul nsw i64 %284, %283
  %286 = srem i64 %285, 1000000007
  tail call void @_ZN6FastIO7writelnEx(i64 %286)
  %287 = load i32, i32* @x.1, align 4
  %288 = load i32, i32* @y.2, align 4
  %289 = add i32 %287, -1
  %290 = mul i32 %289, %287
  %291 = and i32 %290, 1
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %293, %292
  %295 = select i1 %294, i32 1787878737, i32 877128267
  br label %.backedge

296:                                              ; preds = %3
  ret i32 0

297:                                              ; preds = %3
  %298 = add i64 %.070, 1
  br label %.backedge

299:                                              ; preds = %3
  %300 = add i64 %.072, -1
  %301 = getelementptr inbounds [4020 x [4020 x i64]], [4020 x [4020 x i64]]* @dp, i64 0, i64 %300, i64 %.074
  %302 = load i64, i64* %301, align 8
  %303 = getelementptr inbounds [4020 x [4020 x i64]], [4020 x [4020 x i64]]* @dp, i64 0, i64 %.072, i64 %.074
  %304 = load i64, i64* %303, align 8
  %305 = add i64 %304, %302
  %306 = add i64 %.074, -1
  %307 = getelementptr inbounds [4020 x [4020 x i64]], [4020 x [4020 x i64]]* @dp, i64 0, i64 %.072, i64 %306
  %308 = load i64, i64* %307, align 8
  %309 = add i64 %305, %308
  %310 = srem i64 %309, 1000000007
  store i64 %310, i64* %303, align 8
  br label %.backedge

311:                                              ; preds = %3
  br label %.backedge

312:                                              ; preds = %3
  %313 = add i64 %.072, 1
  br label %.backedge

314:                                              ; preds = %3
  store i64 1, i64* getelementptr inbounds ([8040 x i64], [8040 x i64]* @fac, i64 0, i64 0), align 16
  br label %.backedge

315:                                              ; preds = %3
  br label %.backedge

316:                                              ; preds = %3
  %317 = add i64 %.082, 1
  br label %.backedge

318:                                              ; preds = %3
  %319 = getelementptr inbounds [8040 x i64], [8040 x i64]* @fac, i64 0, i64 %.080
  %320 = load i64, i64* %319, align 8
  %321 = tail call i64 @_Z3invxx(i64 %320, i64 1000000007)
  %322 = getelementptr inbounds [8040 x i64], [8040 x i64]* @invv, i64 0, i64 %.080
  store i64 %321, i64* %322, align 8
  br label %.backedge

323:                                              ; preds = %3
  %.neg.neg = sub i64 1000000007, %.078
  %324 = add i64 %.neg.neg, %.068
  %325 = srem i64 %324, 1000000007
  %326 = tail call i64 @_Z3invxx(i64 2, i64 1000000007)
  %327 = mul nsw i64 %326, %325
  %328 = srem i64 %327, 1000000007
  tail call void @_ZN6FastIO7writelnEx(i64 %328)
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZN6FastIO4readEv() local_unnamed_addr #0 comdat {
  %1 = alloca i64, align 8
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = tail call i32 @getchar()
  %6 = trunc i32 %5 to i8
  br label %7

7:                                                ; preds = %.backedge, %0
  %8 = phi i64 [ undef, %0 ], [ %.be, %.backedge ]
  %.022 = phi i64 [ 1, %0 ], [ %.022.be, %.backedge ]
  %.020 = phi i64 [ 0, %0 ], [ %.020.be, %.backedge ]
  %.018 = phi i8 [ %6, %0 ], [ %.018.be, %.backedge ]
  %.0 = phi i32 [ -1206038163, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1206038163, label %9
    i32 91508717, label %19
    i32 435269546, label %30
    i32 -508011318, label %32
    i32 863744125, label %42
    i32 89997818, label %53
    i32 -1105649273, label %55
    i32 1508592773, label %65
    i32 -175840319, label %75
    i32 856264211, label %76
    i32 1957427717, label %79
    i32 2003524050, label %80
    i32 350286205, label %90
    i32 1384690954, label %101
    i32 200344408, label %103
    i32 1662811314, label %113
    i32 -859738631, label %129
    i32 1861610060, label %130
    i32 612244204, label %140
    i32 -837658475, label %151
    i32 1647335259, label %152
    i32 1362365678, label %153
    i32 2110852922, label %154
    i32 -527708728, label %155
    i32 -2091425607, label %156
    i32 -792141497, label %163
  ]

.backedge:                                        ; preds = %7, %163, %156, %155, %154, %153, %152, %140, %130, %129, %113, %103, %101, %90, %80, %79, %76, %75, %65, %55, %53, %42, %32, %30, %19, %9
  %.be = phi i64 [ %8, %7 ], [ %8, %163 ], [ %8, %156 ], [ %8, %155 ], [ %8, %154 ], [ %8, %153 ], [ %8, %152 ], [ %141, %140 ], [ %8, %130 ], [ %8, %129 ], [ %8, %113 ], [ %8, %103 ], [ %8, %101 ], [ %8, %90 ], [ %8, %80 ], [ %8, %79 ], [ %8, %76 ], [ %8, %75 ], [ %8, %65 ], [ %8, %55 ], [ %8, %53 ], [ %8, %42 ], [ %8, %32 ], [ %8, %30 ], [ %8, %19 ], [ %8, %9 ]
  %.022.be = phi i64 [ %.022, %7 ], [ %.022, %163 ], [ %.022, %156 ], [ %.022, %155 ], [ -1, %154 ], [ %.022, %153 ], [ %.022, %152 ], [ %.022, %140 ], [ %.022, %130 ], [ %.022, %129 ], [ %.022, %113 ], [ %.022, %103 ], [ %.022, %101 ], [ %.022, %90 ], [ %.022, %80 ], [ %.022, %79 ], [ %.022, %76 ], [ %.022, %75 ], [ -1, %65 ], [ %.022, %55 ], [ %.022, %53 ], [ %.022, %42 ], [ %.022, %32 ], [ %.022, %30 ], [ %.022, %19 ], [ %.022, %9 ]
  %.020.be = phi i64 [ %.020, %7 ], [ %.020, %163 ], [ %160, %156 ], [ %.020, %155 ], [ %.020, %154 ], [ %.020, %153 ], [ %.020, %152 ], [ %.020, %140 ], [ %.020, %130 ], [ %.020, %129 ], [ %117, %113 ], [ %.020, %103 ], [ %.020, %101 ], [ %.020, %90 ], [ %.020, %80 ], [ %.020, %79 ], [ %.020, %76 ], [ %.020, %75 ], [ %.020, %65 ], [ %.020, %55 ], [ %.020, %53 ], [ %.020, %42 ], [ %.020, %32 ], [ %.020, %30 ], [ %.020, %19 ], [ %.020, %9 ]
  %.018.be = phi i8 [ %.018, %7 ], [ %.018, %163 ], [ %162, %156 ], [ %.018, %155 ], [ %.018, %154 ], [ %.018, %153 ], [ %.018, %152 ], [ %.018, %140 ], [ %.018, %130 ], [ %.018, %129 ], [ %119, %113 ], [ %.018, %103 ], [ %.018, %101 ], [ %.018, %90 ], [ %.018, %80 ], [ %.018, %79 ], [ %78, %76 ], [ %.018, %75 ], [ %.018, %65 ], [ %.018, %55 ], [ %.018, %53 ], [ %.018, %42 ], [ %.018, %32 ], [ %.018, %30 ], [ %.018, %19 ], [ %.018, %9 ]
  %.0.be = phi i32 [ %.0, %7 ], [ 612244204, %163 ], [ 1662811314, %156 ], [ 350286205, %155 ], [ 1508592773, %154 ], [ 863744125, %153 ], [ 91508717, %152 ], [ %150, %140 ], [ %139, %130 ], [ 2003524050, %129 ], [ %128, %113 ], [ %112, %103 ], [ %102, %101 ], [ %100, %90 ], [ %89, %80 ], [ 2003524050, %79 ], [ -1206038163, %76 ], [ 856264211, %75 ], [ %74, %65 ], [ %64, %55 ], [ %54, %53 ], [ %52, %42 ], [ %41, %32 ], [ %31, %30 ], [ %29, %19 ], [ %18, %9 ]
  br label %7

9:                                                ; preds = %7
  %10 = load i32, i32* @x.3, align 4
  %11 = load i32, i32* @y.4, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %16, %15
  %18 = select i1 %17, i32 91508717, i32 1647335259
  br label %.backedge

19:                                               ; preds = %7
  %20 = sext i8 %.018 to i32
  %isdigittmp24 = add nsw i32 %20, -48
  %isdigit25 = icmp ugt i32 %isdigittmp24, 9
  store i1 %isdigit25, i1* %4, align 1
  %21 = load i32, i32* @x.3, align 4
  %22 = load i32, i32* @y.4, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 435269546, i32 1647335259
  br label %.backedge

30:                                               ; preds = %7
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %31 = select i1 %.0..0..0., i32 -508011318, i32 1957427717
  br label %.backedge

32:                                               ; preds = %7
  %33 = load i32, i32* @x.3, align 4
  %34 = load i32, i32* @y.4, align 4
  %35 = add i32 %33, -1
  %36 = mul i32 %35, %33
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %39, %38
  %41 = select i1 %40, i32 863744125, i32 1362365678
  br label %.backedge

42:                                               ; preds = %7
  %43 = icmp eq i8 %.018, 45
  store i1 %43, i1* %3, align 1
  %44 = load i32, i32* @x.3, align 4
  %45 = load i32, i32* @y.4, align 4
  %46 = add i32 %44, -1
  %47 = mul i32 %46, %44
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %50, %49
  %52 = select i1 %51, i32 89997818, i32 1362365678
  br label %.backedge

53:                                               ; preds = %7
  %.0..0..0.15 = load volatile i1, i1* %3, align 1
  %54 = select i1 %.0..0..0.15, i32 -1105649273, i32 856264211
  br label %.backedge

55:                                               ; preds = %7
  %56 = load i32, i32* @x.3, align 4
  %57 = load i32, i32* @y.4, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 1508592773, i32 2110852922
  br label %.backedge

65:                                               ; preds = %7
  %66 = load i32, i32* @x.3, align 4
  %67 = load i32, i32* @y.4, align 4
  %68 = add i32 %66, -1
  %69 = mul i32 %68, %66
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %72, %71
  %74 = select i1 %73, i32 -175840319, i32 2110852922
  br label %.backedge

75:                                               ; preds = %7
  br label %.backedge

76:                                               ; preds = %7
  %77 = tail call i32 @getchar()
  %78 = trunc i32 %77 to i8
  br label %.backedge

79:                                               ; preds = %7
  br label %.backedge

80:                                               ; preds = %7
  %81 = load i32, i32* @x.3, align 4
  %82 = load i32, i32* @y.4, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 350286205, i32 -527708728
  br label %.backedge

90:                                               ; preds = %7
  %91 = sext i8 %.018 to i32
  %isdigittmp = add nsw i32 %91, -48
  %isdigit = icmp ult i32 %isdigittmp, 10
  store i1 %isdigit, i1* %2, align 1
  %92 = load i32, i32* @x.3, align 4
  %93 = load i32, i32* @y.4, align 4
  %94 = add i32 %92, -1
  %95 = mul i32 %94, %92
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %98, %97
  %100 = select i1 %99, i32 1384690954, i32 -527708728
  br label %.backedge

101:                                              ; preds = %7
  %.0..0..0.16 = load volatile i1, i1* %2, align 1
  %102 = select i1 %.0..0..0.16, i32 200344408, i32 1861610060
  br label %.backedge

103:                                              ; preds = %7
  %104 = load i32, i32* @x.3, align 4
  %105 = load i32, i32* @y.4, align 4
  %106 = add i32 %104, -1
  %107 = mul i32 %106, %104
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %110, %109
  %112 = select i1 %111, i32 1662811314, i32 -2091425607
  br label %.backedge

113:                                              ; preds = %7
  %114 = mul nsw i64 %.020, 10
  %115 = sext i8 %.018 to i64
  %116 = add i64 %114, -48
  %117 = add i64 %116, %115
  %118 = tail call i32 @getchar()
  %119 = trunc i32 %118 to i8
  %120 = load i32, i32* @x.3, align 4
  %121 = load i32, i32* @y.4, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 -859738631, i32 -2091425607
  br label %.backedge

129:                                              ; preds = %7
  br label %.backedge

130:                                              ; preds = %7
  %131 = load i32, i32* @x.3, align 4
  %132 = load i32, i32* @y.4, align 4
  %133 = add i32 %131, -1
  %134 = mul i32 %133, %131
  %135 = and i32 %134, 1
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %137, %136
  %139 = select i1 %138, i32 612244204, i32 -792141497
  br label %.backedge

140:                                              ; preds = %7
  %141 = mul nsw i64 %.020, %.022
  %142 = load i32, i32* @x.3, align 4
  %143 = load i32, i32* @y.4, align 4
  %144 = add i32 %142, -1
  %145 = mul i32 %144, %142
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %148, %147
  %150 = select i1 %149, i32 -837658475, i32 -792141497
  br label %.backedge

151:                                              ; preds = %7
  store i64 %8, i64* %1, align 8
  %.0..0..0.17 = load volatile i64, i64* %1, align 8
  ret i64 %.0..0..0.17

152:                                              ; preds = %7
  br label %.backedge

153:                                              ; preds = %7
  br label %.backedge

154:                                              ; preds = %7
  br label %.backedge

155:                                              ; preds = %7
  br label %.backedge

156:                                              ; preds = %7
  %157 = mul nsw i64 %.020, 10
  %158 = sext i8 %.018 to i64
  %159 = add i64 %157, -48
  %160 = add i64 %159, %158
  %161 = tail call i32 @getchar()
  %162 = trunc i32 %161 to i8
  br label %.backedge

163:                                              ; preds = %7
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_Z3invxx(i64 %0, i64 %1) local_unnamed_addr #0 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = call i64 @_Z5exgcdxxRxS_(i64 %0, i64 %1, i64* nonnull dereferenceable(8) %3, i64* nonnull dereferenceable(8) %4)
  %6 = load i64, i64* %3, align 8
  %7 = add i64 %6, 1000000007
  %8 = srem i64 %7, 1000000007
  ret i64 %8
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN6FastIO7writelnEx(i64 %0) local_unnamed_addr #0 comdat {
  tail call void @_ZN6FastIO5writeEx(i64 %0)
  %putchar = tail call i32 @putchar(i32 10)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_Z5exgcdxxRxS_(i64 %0, i64 %1, i64* dereferenceable(8) %2, i64* dereferenceable(8) %3) local_unnamed_addr #0 comdat {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %1, i64* %6, align 8
  br label %.outer

.outer:                                           ; preds = %29, %4
  %.022.ph = phi i64 [ %.022.ph27, %29 ], [ undef, %4 ]
  %.0.ph = phi i32 [ %38, %29 ], [ -1608764743, %4 ]
  br label %.outer26

.outer26:                                         ; preds = %.outer26.backedge, %.outer
  %.022.ph27 = phi i64 [ %.022.ph, %.outer ], [ %.022.ph27.be, %.outer26.backedge ]
  %.0.ph28 = phi i32 [ %.0.ph, %.outer ], [ 1158145819, %.outer26.backedge ]
  %7 = load i32, i32* @x.9, align 4
  %8 = load i32, i32* @y.10, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 2059899418, i32 1469602769
  br label %.outer29

.outer29:                                         ; preds = %.outer29.backedge, %.outer26
  %.0.ph30 = phi i32 [ %.0.ph28, %.outer26 ], [ %.0.ph30.be, %.outer29.backedge ]
  br label %16

16:                                               ; preds = %.outer29, %16
  switch i32 %.0.ph30, label %16 [
    i32 -1608764743, label %17
    i32 1903965071, label %20
    i32 21771252, label %21
    i32 1158145819, label %.outer29.backedge
    i32 2059899418, label %29
    i32 2059843706, label %39
    i32 1469602769, label %40
  ]

17:                                               ; preds = %16
  %.0..0..0.20 = load volatile i64, i64* %6, align 8
  %18 = icmp eq i64 %.0..0..0.20, 0
  %19 = select i1 %18, i32 1903965071, i32 21771252
  br label %.outer29.backedge

20:                                               ; preds = %16
  store i64 1, i64* %2, align 8
  store i64 0, i64* %3, align 8
  br label %.outer26.backedge

21:                                               ; preds = %16
  %22 = srem i64 %0, %1
  %23 = tail call i64 @_Z5exgcdxxRxS_(i64 %1, i64 %22, i64* nonnull dereferenceable(8) %2, i64* nonnull dereferenceable(8) %3)
  %24 = load i64, i64* %3, align 8
  %25 = load i64, i64* %2, align 8
  %26 = sdiv i64 %0, %1
  %27 = mul nsw i64 %26, %24
  %28 = sub i64 %25, %27
  store i64 %28, i64* %3, align 8
  store i64 %24, i64* %2, align 8
  br label %.outer26.backedge

.outer26.backedge:                                ; preds = %21, %20
  %.022.ph27.be = phi i64 [ %0, %20 ], [ %23, %21 ]
  br label %.outer26

29:                                               ; preds = %16
  %30 = load i32, i32* @x.9, align 4
  %31 = load i32, i32* @y.10, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 2059843706, i32 1469602769
  br label %.outer

39:                                               ; preds = %16
  store i64 %.022.ph, i64* %5, align 8
  %.0..0..0.21 = load volatile i64, i64* %5, align 8
  ret i64 %.0..0..0.21

40:                                               ; preds = %16
  br label %.outer29.backedge

.outer29.backedge:                                ; preds = %16, %40, %17
  %.0.ph30.be = phi i32 [ %19, %17 ], [ 2059899418, %40 ], [ %15, %16 ]
  br label %.outer29
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN6FastIO5writeEx(i64 %0) local_unnamed_addr #0 comdat {
  %2 = alloca i1, align 1
  %3 = alloca i64*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = load i32, i32* @x.11, align 4
  %7 = load i32, i32* @y.12, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %5, align 1
  %12 = icmp slt i32 %7, 10
  store i1 %12, i1* %4, align 1
  br label %13

13:                                               ; preds = %.backedge, %1
  %.0 = phi i32 [ -1315963065, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1315963065, label %14
    i32 -1233918430, label %17
    i32 1770472390, label %30
    i32 920425703, label %32
    i32 683528214, label %36
    i32 -829995130, label %40
    i32 1973057286, label %43
    i32 -1772180863, label %49
  ]

.backedge:                                        ; preds = %13, %49, %40, %36, %32, %30, %17, %14
  %.0.be = phi i32 [ %.0, %13 ], [ -1233918430, %49 ], [ 1973057286, %40 ], [ %39, %36 ], [ 683528214, %32 ], [ %31, %30 ], [ %29, %17 ], [ %16, %14 ]
  br label %13

14:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %.0..0..0.1 = load volatile i1, i1* %4, align 1
  %15 = or i1 %.0..0..0., %.0..0..0.1
  %16 = select i1 %15, i32 -1233918430, i32 -1772180863
  br label %.backedge

17:                                               ; preds = %13
  %18 = alloca i64, align 8
  store i64* %18, i64** %3, align 8
  %.0..0..0.2 = load volatile i64*, i64** %3, align 8
  store i64 %0, i64* %.0..0..0.2, align 8
  %.0..0..0.3 = load volatile i64*, i64** %3, align 8
  %19 = load i64, i64* %.0..0..0.3, align 8
  %20 = icmp slt i64 %19, 0
  store i1 %20, i1* %2, align 1
  %21 = load i32, i32* @x.11, align 4
  %22 = load i32, i32* @y.12, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 1770472390, i32 -1772180863
  br label %.backedge

30:                                               ; preds = %13
  %.0..0..0.9 = load volatile i1, i1* %2, align 1
  %31 = select i1 %.0..0..0.9, i32 920425703, i32 683528214
  br label %.backedge

32:                                               ; preds = %13
  %33 = call i32 @putchar(i32 45)
  %.0..0..0.4 = load volatile i64*, i64** %3, align 8
  %34 = load i64, i64* %.0..0..0.4, align 8
  %35 = sub i64 0, %34
  %.0..0..0.5 = load volatile i64*, i64** %3, align 8
  store i64 %35, i64* %.0..0..0.5, align 8
  br label %.backedge

36:                                               ; preds = %13
  %.0..0..0.6 = load volatile i64*, i64** %3, align 8
  %37 = load i64, i64* %.0..0..0.6, align 8
  %38 = icmp sgt i64 %37, 9
  %39 = select i1 %38, i32 -829995130, i32 1973057286
  br label %.backedge

40:                                               ; preds = %13
  %.0..0..0.7 = load volatile i64*, i64** %3, align 8
  %41 = load i64, i64* %.0..0..0.7, align 8
  %42 = sdiv i64 %41, 10
  call void @_ZN6FastIO5writeEx(i64 %42)
  br label %.backedge

43:                                               ; preds = %13
  %.0..0..0.8 = load volatile i64*, i64** %3, align 8
  %44 = load i64, i64* %.0..0..0.8, align 8
  %45 = srem i64 %44, 10
  %46 = trunc i64 %45 to i32
  %47 = add nsw i32 %46, 48
  %48 = call i32 @putchar(i32 %47)
  ret void

49:                                               ; preds = %13
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s685134974.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.13, align 4
  %4 = load i32, i32* @y.14, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -432684950, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -432684950, label %11
    i32 987028047, label %14
    i32 -857483377, label %24
    i32 -1510088862, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 987028047, i32 -1510088862
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.13, align 4
  %16 = load i32, i32* @y.14, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -857483377, i32 -1510088862
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 987028047, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
