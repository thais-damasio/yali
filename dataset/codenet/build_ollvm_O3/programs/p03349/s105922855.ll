; ModuleID = 'build_ollvm/programs/p03349/s105922855.ll'
source_filename = "Project_CodeNet_C++1400/p03349/s105922855.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = local_unnamed_addr global i32 0, align 4
@k = local_unnamed_addr global i32 0, align 4
@mod = local_unnamed_addr global i32 0, align 4
@f = global [310 x [310 x i32]] zeroinitializer, align 16
@g = global [310 x [310 x i32]] zeroinitializer, align 16
@c = local_unnamed_addr global [310 x [310 x i32]] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s105922855.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1682140713, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1682140713, label %11
    i32 -1470930526, label %14
    i32 512241153, label %25
    i32 -1162009962, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -1470930526, i32 -1162009962
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 512241153, i32 -1162009962
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -1470930526, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind uwtable
define i32 @_Z2rdv() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  br label %2

2:                                                ; preds = %.backedge, %0
  %.025 = phi i32 [ 0, %0 ], [ %.025.be, %.backedge ]
  %.023 = phi i32 [ 1, %0 ], [ %.023.be, %.backedge ]
  %.021 = phi i8 [ 0, %0 ], [ %.021.be, %.backedge ]
  %.019 = phi i32 [ 1460044494, %0 ], [ %.019.be, %.backedge ]
  %.017 = phi i1 [ undef, %0 ], [ %.017.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.019, label %.backedge [
    i32 1460044494, label %3
    i32 -849795979, label %6
    i32 1222513529, label %8
    i32 1366734440, label %10
    i32 -898168876, label %20
    i32 216283143, label %31
    i32 -1481889545, label %33
    i32 -1677549104, label %34
    i32 1547133437, label %37
    i32 1781565598, label %38
    i32 1941742204, label %41
    i32 -1180222997, label %43
    i32 -325884835, label %45
    i32 -599129202, label %55
    i32 529839714, label %71
    i32 -1632308939, label %72
    i32 231954045, label %74
    i32 388282382, label %75
  ]

.backedge:                                        ; preds = %2, %75, %74, %71, %55, %45, %43, %41, %38, %37, %34, %33, %31, %20, %10, %8, %6, %3
  %.025.be = phi i32 [ %.025, %2 ], [ %79, %75 ], [ %.025, %74 ], [ %.025, %71 ], [ %59, %55 ], [ %.025, %45 ], [ %.025, %43 ], [ %.025, %41 ], [ %.025, %38 ], [ %.025, %37 ], [ %.025, %34 ], [ %.025, %33 ], [ %.025, %31 ], [ %.025, %20 ], [ %.025, %10 ], [ %.025, %8 ], [ %.025, %6 ], [ %.025, %3 ]
  %.023.be = phi i32 [ %.023, %2 ], [ %.023, %75 ], [ %.023, %74 ], [ %.023, %71 ], [ %.023, %55 ], [ %.023, %45 ], [ %.023, %43 ], [ %.023, %41 ], [ %.023, %38 ], [ %.023, %37 ], [ %.023, %34 ], [ -1, %33 ], [ %.023, %31 ], [ %.023, %20 ], [ %.023, %10 ], [ %.023, %8 ], [ %.023, %6 ], [ %.023, %3 ]
  %.021.be = phi i8 [ %.021, %2 ], [ %81, %75 ], [ %.021, %74 ], [ %.021, %71 ], [ %61, %55 ], [ %.021, %45 ], [ %.021, %43 ], [ %.021, %41 ], [ %.021, %38 ], [ %.021, %37 ], [ %36, %34 ], [ %.021, %33 ], [ %.021, %31 ], [ %.021, %20 ], [ %.021, %10 ], [ %.021, %8 ], [ %.021, %6 ], [ %.021, %3 ]
  %.019.be = phi i32 [ %.019, %2 ], [ -599129202, %75 ], [ -898168876, %74 ], [ 1781565598, %71 ], [ %70, %55 ], [ %54, %45 ], [ %44, %43 ], [ -1180222997, %41 ], [ %40, %38 ], [ 1781565598, %37 ], [ 1460044494, %34 ], [ -1677549104, %33 ], [ %32, %31 ], [ %30, %20 ], [ %19, %10 ], [ %9, %8 ], [ 1222513529, %6 ], [ %5, %3 ]
  %.017.be = phi i1 [ %.017, %2 ], [ %.017, %75 ], [ %.017, %74 ], [ %.017, %71 ], [ %.017, %55 ], [ %.017, %45 ], [ %.017, %43 ], [ %.017, %41 ], [ %.017, %38 ], [ %.017, %37 ], [ %.017, %34 ], [ %.017, %33 ], [ %.017, %31 ], [ %.017, %20 ], [ %.017, %10 ], [ %.017, %8 ], [ %7, %6 ], [ true, %3 ]
  %.0.be = phi i1 [ %.0, %2 ], [ %.0, %75 ], [ %.0, %74 ], [ %.0, %71 ], [ %.0, %55 ], [ %.0, %45 ], [ %.0, %43 ], [ %42, %41 ], [ false, %38 ], [ %.0, %37 ], [ %.0, %34 ], [ %.0, %33 ], [ %.0, %31 ], [ %.0, %20 ], [ %.0, %10 ], [ %.0, %8 ], [ %.0, %6 ], [ %.0, %3 ]
  br label %2

3:                                                ; preds = %2
  %4 = icmp slt i8 %.021, 48
  %5 = select i1 %4, i32 1222513529, i32 -849795979
  br label %.backedge

6:                                                ; preds = %2
  %7 = icmp sgt i8 %.021, 57
  br label %.backedge

8:                                                ; preds = %2
  %9 = select i1 %.017, i32 1366734440, i32 1547133437
  br label %.backedge

10:                                               ; preds = %2
  %11 = load i32, i32* @x.1, align 4
  %12 = load i32, i32* @y.2, align 4
  %13 = add i32 %11, -1
  %14 = mul i32 %13, %11
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %17, %16
  %19 = select i1 %18, i32 -898168876, i32 231954045
  br label %.backedge

20:                                               ; preds = %2
  %21 = icmp eq i8 %.021, 45
  store i1 %21, i1* %1, align 1
  %22 = load i32, i32* @x.1, align 4
  %23 = load i32, i32* @y.2, align 4
  %24 = add i32 %22, -1
  %25 = mul i32 %24, %22
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %28, %27
  %30 = select i1 %29, i32 216283143, i32 231954045
  br label %.backedge

31:                                               ; preds = %2
  %.0..0..0.16 = load volatile i1, i1* %1, align 1
  %32 = select i1 %.0..0..0.16, i32 -1481889545, i32 -1677549104
  br label %.backedge

33:                                               ; preds = %2
  br label %.backedge

34:                                               ; preds = %2
  %35 = tail call i32 @getchar()
  %36 = trunc i32 %35 to i8
  br label %.backedge

37:                                               ; preds = %2
  br label %.backedge

38:                                               ; preds = %2
  %39 = icmp sgt i8 %.021, 47
  %40 = select i1 %39, i32 1941742204, i32 -1180222997
  br label %.backedge

41:                                               ; preds = %2
  %42 = icmp slt i8 %.021, 58
  br label %.backedge

43:                                               ; preds = %2
  %44 = select i1 %.0, i32 -325884835, i32 -1632308939
  br label %.backedge

45:                                               ; preds = %2
  %46 = load i32, i32* @x.1, align 4
  %47 = load i32, i32* @y.2, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -599129202, i32 388282382
  br label %.backedge

55:                                               ; preds = %2
  %56 = mul i32 %.025, 10
  %57 = xor i8 %.021, 48
  %58 = sext i8 %57 to i32
  %59 = add i32 %56, %58
  %60 = tail call i32 @getchar()
  %61 = trunc i32 %60 to i8
  %62 = load i32, i32* @x.1, align 4
  %63 = load i32, i32* @y.2, align 4
  %64 = add i32 %62, -1
  %65 = mul i32 %64, %62
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %68, %67
  %70 = select i1 %69, i32 529839714, i32 388282382
  br label %.backedge

71:                                               ; preds = %2
  br label %.backedge

72:                                               ; preds = %2
  %73 = mul nsw i32 %.023, %.025
  ret i32 %73

74:                                               ; preds = %2
  br label %.backedge

75:                                               ; preds = %2
  %76 = mul i32 %.025, 10
  %77 = xor i8 %.021, 48
  %78 = sext i8 %77 to i32
  %79 = add i32 %76, %78
  %80 = tail call i32 @getchar()
  %81 = trunc i32 %80 to i8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: nofree noinline norecurse nounwind uwtable
define void @_Z2adRii(i32* nocapture dereferenceable(4) %0, i32 %1) local_unnamed_addr #6 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* %0, align 4
  %7 = add i32 %6, %1
  store i32 %7, i32* %0, align 4
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* @mod, align 4
  store i32 %8, i32* %4, align 4
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.ph = phi i32 [ %7, %2 ], [ %.ph.be, %.outer.backedge ]
  %.012.ph = phi i32 [ -1970856351, %2 ], [ %.012.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ undef, %2 ], [ %.0.ph16.ph, %.outer.backedge ]
  %9 = load i32, i32* @x.3, align 4
  %10 = load i32, i32* @y.4, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %15, %14
  %17 = select i1 %16, i32 -2098743824, i32 2078844979
  %18 = load i32, i32* @mod, align 4
  br label %.outer14.outer

.outer14.outer:                                   ; preds = %.outer14.outer.backedge, %.outer
  %.012.ph15.ph = phi i32 [ %.012.ph, %.outer ], [ -522338427, %.outer14.outer.backedge ]
  %.0.ph16.ph = phi i32 [ %.0.ph, %.outer ], [ %.0.ph16.ph.be, %.outer14.outer.backedge ]
  br label %.outer14

.outer14:                                         ; preds = %.outer14.backedge, %.outer14.outer
  %.012.ph15 = phi i32 [ %.012.ph15.ph, %.outer14.outer ], [ %.012.ph15.be, %.outer14.backedge ]
  br label %19

19:                                               ; preds = %.outer14, %19
  switch i32 %.012.ph15, label %19 [
    i32 -1970856351, label %20
    i32 1801864995, label %.outer14.outer.backedge
    i32 -1906766300, label %22
    i32 -522338427, label %23
    i32 -2098743824, label %24
    i32 -1860613468, label %35
    i32 2078844979, label %36
  ]

20:                                               ; preds = %19
  %.0..0..0.6 = load volatile i32, i32* %5, align 4
  %.0..0..0.7 = load volatile i32, i32* %4, align 4
  %.not = icmp slt i32 %.0..0..0.6, %.0..0..0.7
  %21 = select i1 %.not, i32 -1906766300, i32 1801864995
  br label %.outer14.backedge

.outer14.outer.backedge:                          ; preds = %19, %22
  %.0.ph16.ph.be = phi i32 [ 0, %22 ], [ %18, %19 ]
  br label %.outer14.outer

22:                                               ; preds = %19
  br label %.outer14.outer.backedge

23:                                               ; preds = %19
  store i32 %.0.ph16.ph, i32* %3, align 4
  br label %.outer14.backedge

.outer14.backedge:                                ; preds = %23, %20
  %.012.ph15.be = phi i32 [ %21, %20 ], [ %17, %23 ]
  br label %.outer14

24:                                               ; preds = %19
  %.0..0..0.8 = load volatile i32, i32* %3, align 4
  %25 = sub i32 %.ph, %.0..0..0.8
  store i32 %25, i32* %0, align 4
  %26 = load i32, i32* @x.3, align 4
  %27 = load i32, i32* @y.4, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 -1860613468, i32 2078844979
  br label %.outer.backedge

35:                                               ; preds = %19
  ret void

36:                                               ; preds = %19
  %.0..0..0.9 = load volatile i32, i32* %3, align 4
  %.0..0..0.10 = load volatile i32, i32* %3, align 4
  %.0..0..0.11 = load volatile i32, i32* %3, align 4
  %37 = sub i32 %.ph, %.0..0..0.11
  store i32 %37, i32* %0, align 4
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %36, %24
  %.ph.be = phi i32 [ %25, %24 ], [ %37, %36 ]
  %.012.ph.be = phi i32 [ %34, %24 ], [ -2098743824, %36 ]
  br label %.outer
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = tail call i32 @_Z2rdv()
  store i32 %5, i32* @n, align 4
  %6 = tail call i32 @_Z2rdv()
  store i32 %6, i32* @k, align 4
  %7 = tail call i32 @_Z2rdv()
  store i32 %7, i32* @mod, align 4
  br label %8

8:                                                ; preds = %.backedge, %0
  %.086 = phi i32 [ 0, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i32 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i32 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.0 = phi i32 [ 578445905, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 578445905, label %9
    i32 1762268841, label %13
    i32 -860413336, label %16
    i32 1300477092, label %18
    i32 -1112900414, label %28
    i32 270490207, label %52
    i32 -642028301, label %53
    i32 1901788933, label %63
    i32 -608648681, label %74
    i32 345641646, label %75
    i32 -1805426348, label %85
    i32 2061384046, label %95
    i32 1755077576, label %96
    i32 1350027365, label %106
    i32 -740551837, label %117
    i32 -502902166, label %118
    i32 -2004084548, label %119
    i32 1161735006, label %129
    i32 1391719069, label %141
    i32 464852559, label %143
    i32 1632834213, label %147
    i32 -223601875, label %149
    i32 -602049809, label %159
    i32 1326214293, label %170
    i32 651221015, label %171
    i32 -1599725293, label %173
    i32 755514642, label %179
    i32 822606162, label %181
    i32 -1650583616, label %182
    i32 496900822, label %192
    i32 896364578, label %205
    i32 1087302369, label %207
    i32 1328220831, label %208
    i32 1197055762, label %218
    i32 -1881853226, label %230
    i32 1800227808, label %232
    i32 -1697758434, label %233
    i32 1629124835, label %243
    i32 749283488, label %254
    i32 -1694766484, label %256
    i32 812098666, label %266
    i32 -1542508302, label %303
    i32 -956693140, label %304
    i32 -1236542397, label %306
    i32 137006267, label %316
    i32 1989560114, label %326
    i32 -1370595553, label %327
    i32 -183484425, label %329
    i32 -1160690711, label %339
    i32 184749785, label %350
    i32 95859105, label %351
    i32 -503413066, label %353
    i32 -1861235254, label %362
    i32 -877016547, label %364
    i32 -1688250541, label %365
    i32 1191968835, label %367
    i32 456138599, label %374
    i32 1501986634, label %389
    i32 1252158598, label %391
    i32 1253664468, label %392
    i32 -878764700, label %394
    i32 1319664041, label %395
    i32 2121466482, label %397
    i32 -1873904708, label %398
    i32 -1218717167, label %399
    i32 -967107921, label %400
    i32 -1891998435, label %429
    i32 1226861475, label %430
  ]

.backedge:                                        ; preds = %8, %430, %429, %400, %399, %398, %397, %395, %394, %392, %391, %389, %374, %365, %364, %362, %353, %351, %350, %339, %329, %327, %326, %316, %306, %304, %303, %266, %256, %254, %243, %233, %232, %230, %218, %208, %207, %205, %192, %182, %181, %179, %173, %171, %170, %159, %149, %147, %143, %141, %129, %119, %118, %117, %106, %96, %95, %85, %75, %74, %63, %53, %52, %28, %18, %16, %13, %9
  %.086.be = phi i32 [ %.086, %8 ], [ %.086, %430 ], [ %.086, %429 ], [ %.086, %400 ], [ %.086, %399 ], [ %.086, %398 ], [ %.086, %397 ], [ %.086, %395 ], [ %.086, %394 ], [ %393, %392 ], [ %.086, %391 ], [ %.086, %389 ], [ %.086, %374 ], [ %.086, %365 ], [ %.086, %364 ], [ %.086, %362 ], [ %.086, %353 ], [ %.086, %351 ], [ %.086, %350 ], [ %.086, %339 ], [ %.086, %329 ], [ %.086, %327 ], [ %.086, %326 ], [ %.086, %316 ], [ %.086, %306 ], [ %.086, %304 ], [ %.086, %303 ], [ %.086, %266 ], [ %.086, %256 ], [ %.086, %254 ], [ %.086, %243 ], [ %.086, %233 ], [ %.086, %232 ], [ %.086, %230 ], [ %.086, %218 ], [ %.086, %208 ], [ %.086, %207 ], [ %.086, %205 ], [ %.086, %192 ], [ %.086, %182 ], [ %.086, %181 ], [ %.086, %179 ], [ %.086, %173 ], [ %.086, %171 ], [ %.086, %170 ], [ %.086, %159 ], [ %.086, %149 ], [ %.086, %147 ], [ %.086, %143 ], [ %.086, %141 ], [ %.086, %129 ], [ %.086, %119 ], [ %.086, %118 ], [ %.086, %117 ], [ %107, %106 ], [ %.086, %96 ], [ %.086, %95 ], [ %.086, %85 ], [ %.086, %75 ], [ %.086, %74 ], [ %.086, %63 ], [ %.086, %53 ], [ %.086, %52 ], [ %.086, %28 ], [ %.086, %18 ], [ %.086, %16 ], [ %.086, %13 ], [ %.086, %9 ]
  %.084.be = phi i32 [ %.084, %8 ], [ %.084, %430 ], [ %.084, %429 ], [ %.084, %400 ], [ %.084, %399 ], [ %.084, %398 ], [ %.084, %397 ], [ %.084, %395 ], [ %.084, %394 ], [ %.084, %392 ], [ %.084, %391 ], [ %390, %389 ], [ %.084, %374 ], [ %.084, %365 ], [ %.084, %364 ], [ %.084, %362 ], [ %.084, %353 ], [ %.084, %351 ], [ %.084, %350 ], [ %.084, %339 ], [ %.084, %329 ], [ %.084, %327 ], [ %.084, %326 ], [ %.084, %316 ], [ %.084, %306 ], [ %.084, %304 ], [ %.084, %303 ], [ %.084, %266 ], [ %.084, %256 ], [ %.084, %254 ], [ %.084, %243 ], [ %.084, %233 ], [ %.084, %232 ], [ %.084, %230 ], [ %.084, %218 ], [ %.084, %208 ], [ %.084, %207 ], [ %.084, %205 ], [ %.084, %192 ], [ %.084, %182 ], [ %.084, %181 ], [ %.084, %179 ], [ %.084, %173 ], [ %.084, %171 ], [ %.084, %170 ], [ %.084, %159 ], [ %.084, %149 ], [ %.084, %147 ], [ %.084, %143 ], [ %.084, %141 ], [ %.084, %129 ], [ %.084, %119 ], [ %.084, %118 ], [ %.084, %117 ], [ %.084, %106 ], [ %.084, %96 ], [ %.084, %95 ], [ %.084, %85 ], [ %.084, %75 ], [ %.084, %74 ], [ %64, %63 ], [ %.084, %53 ], [ %.084, %52 ], [ %.084, %28 ], [ %.084, %18 ], [ %.084, %16 ], [ 1, %13 ], [ %.084, %9 ]
  %.082.be = phi i32 [ %.082, %8 ], [ %.082, %430 ], [ %.082, %429 ], [ %.082, %400 ], [ %.082, %399 ], [ %.082, %398 ], [ %.082, %397 ], [ %.082, %395 ], [ %.082, %394 ], [ %.082, %392 ], [ %.082, %391 ], [ %.082, %389 ], [ %.082, %374 ], [ %.082, %365 ], [ %.082, %364 ], [ %.082, %362 ], [ %.082, %353 ], [ %.082, %351 ], [ %.082, %350 ], [ %.082, %339 ], [ %.082, %329 ], [ %.082, %327 ], [ %.082, %326 ], [ %.082, %316 ], [ %.082, %306 ], [ %.082, %304 ], [ %.082, %303 ], [ %.082, %266 ], [ %.082, %256 ], [ %.082, %254 ], [ %.082, %243 ], [ %.082, %233 ], [ %.082, %232 ], [ %.082, %230 ], [ %.082, %218 ], [ %.082, %208 ], [ %.082, %207 ], [ %.082, %205 ], [ %.082, %192 ], [ %.082, %182 ], [ %.082, %181 ], [ %.082, %179 ], [ %.082, %173 ], [ %.082, %171 ], [ %.082, %170 ], [ %.082, %159 ], [ %.082, %149 ], [ %148, %147 ], [ %.082, %143 ], [ %.082, %141 ], [ %.082, %129 ], [ %.082, %119 ], [ 0, %118 ], [ %.082, %117 ], [ %.082, %106 ], [ %.082, %96 ], [ %.082, %95 ], [ %.082, %85 ], [ %.082, %75 ], [ %.082, %74 ], [ %.082, %63 ], [ %.082, %53 ], [ %.082, %52 ], [ %.082, %28 ], [ %.082, %18 ], [ %.082, %16 ], [ %.082, %13 ], [ %.082, %9 ]
  %.080.be = phi i32 [ %.080, %8 ], [ %.080, %430 ], [ %.080, %429 ], [ %.080, %400 ], [ %.080, %399 ], [ %.080, %398 ], [ %.080, %397 ], [ %396, %395 ], [ %.080, %394 ], [ %.080, %392 ], [ %.080, %391 ], [ %.080, %389 ], [ %.080, %374 ], [ %.080, %365 ], [ %.080, %364 ], [ %.080, %362 ], [ %.080, %353 ], [ %.080, %351 ], [ %.080, %350 ], [ %.080, %339 ], [ %.080, %329 ], [ %.080, %327 ], [ %.080, %326 ], [ %.080, %316 ], [ %.080, %306 ], [ %.080, %304 ], [ %.080, %303 ], [ %.080, %266 ], [ %.080, %256 ], [ %.080, %254 ], [ %.080, %243 ], [ %.080, %233 ], [ %.080, %232 ], [ %.080, %230 ], [ %.080, %218 ], [ %.080, %208 ], [ %.080, %207 ], [ %.080, %205 ], [ %.080, %192 ], [ %.080, %182 ], [ %.080, %181 ], [ %180, %179 ], [ %.080, %173 ], [ %.080, %171 ], [ %.080, %170 ], [ %160, %159 ], [ %.080, %149 ], [ %.080, %147 ], [ %.080, %143 ], [ %.080, %141 ], [ %.080, %129 ], [ %.080, %119 ], [ %.080, %118 ], [ %.080, %117 ], [ %.080, %106 ], [ %.080, %96 ], [ %.080, %95 ], [ %.080, %85 ], [ %.080, %75 ], [ %.080, %74 ], [ %.080, %63 ], [ %.080, %53 ], [ %.080, %52 ], [ %.080, %28 ], [ %.080, %18 ], [ %.080, %16 ], [ %.080, %13 ], [ %.080, %9 ]
  %.078.be = phi i32 [ %.078, %8 ], [ %.078, %430 ], [ %.078, %429 ], [ %.078, %400 ], [ %.078, %399 ], [ %.078, %398 ], [ %.078, %397 ], [ %.078, %395 ], [ %.078, %394 ], [ %.078, %392 ], [ %.078, %391 ], [ %.078, %389 ], [ %.078, %374 ], [ %366, %365 ], [ %.078, %364 ], [ %.078, %362 ], [ %.078, %353 ], [ %.078, %351 ], [ %.078, %350 ], [ %.078, %339 ], [ %.078, %329 ], [ %.078, %327 ], [ %.078, %326 ], [ %.078, %316 ], [ %.078, %306 ], [ %.078, %304 ], [ %.078, %303 ], [ %.078, %266 ], [ %.078, %256 ], [ %.078, %254 ], [ %.078, %243 ], [ %.078, %233 ], [ %.078, %232 ], [ %.078, %230 ], [ %.078, %218 ], [ %.078, %208 ], [ %.078, %207 ], [ %.078, %205 ], [ %.078, %192 ], [ %.078, %182 ], [ 2, %181 ], [ %.078, %179 ], [ %.078, %173 ], [ %.078, %171 ], [ %.078, %170 ], [ %.078, %159 ], [ %.078, %149 ], [ %.078, %147 ], [ %.078, %143 ], [ %.078, %141 ], [ %.078, %129 ], [ %.078, %119 ], [ %.078, %118 ], [ %.078, %117 ], [ %.078, %106 ], [ %.078, %96 ], [ %.078, %95 ], [ %.078, %85 ], [ %.078, %75 ], [ %.078, %74 ], [ %.078, %63 ], [ %.078, %53 ], [ %.078, %52 ], [ %.078, %28 ], [ %.078, %18 ], [ %.078, %16 ], [ %.078, %13 ], [ %.078, %9 ]
  %.076.be = phi i32 [ %.076, %8 ], [ %.076, %430 ], [ %.076, %429 ], [ %.076, %400 ], [ %.076, %399 ], [ %.076, %398 ], [ %.076, %397 ], [ %.076, %395 ], [ %.076, %394 ], [ %.076, %392 ], [ %.076, %391 ], [ %.076, %389 ], [ %.076, %374 ], [ %.076, %365 ], [ %.076, %364 ], [ %.076, %362 ], [ %.076, %353 ], [ %.076, %351 ], [ %.076, %350 ], [ %.076, %339 ], [ %.076, %329 ], [ %328, %327 ], [ %.076, %326 ], [ %.076, %316 ], [ %.076, %306 ], [ %.076, %304 ], [ %.076, %303 ], [ %.076, %266 ], [ %.076, %256 ], [ %.076, %254 ], [ %.076, %243 ], [ %.076, %233 ], [ %.076, %232 ], [ %.076, %230 ], [ %.076, %218 ], [ %.076, %208 ], [ 0, %207 ], [ %.076, %205 ], [ %.076, %192 ], [ %.076, %182 ], [ %.076, %181 ], [ %.076, %179 ], [ %.076, %173 ], [ %.076, %171 ], [ %.076, %170 ], [ %.076, %159 ], [ %.076, %149 ], [ %.076, %147 ], [ %.076, %143 ], [ %.076, %141 ], [ %.076, %129 ], [ %.076, %119 ], [ %.076, %118 ], [ %.076, %117 ], [ %.076, %106 ], [ %.076, %96 ], [ %.076, %95 ], [ %.076, %85 ], [ %.076, %75 ], [ %.076, %74 ], [ %.076, %63 ], [ %.076, %53 ], [ %.076, %52 ], [ %.076, %28 ], [ %.076, %18 ], [ %.076, %16 ], [ %.076, %13 ], [ %.076, %9 ]
  %.074.be = phi i32 [ %.074, %8 ], [ %.074, %430 ], [ %.074, %429 ], [ %.074, %400 ], [ %.074, %399 ], [ %.074, %398 ], [ %.074, %397 ], [ %.074, %395 ], [ %.074, %394 ], [ %.074, %392 ], [ %.074, %391 ], [ %.074, %389 ], [ %.074, %374 ], [ %.074, %365 ], [ %.074, %364 ], [ %.074, %362 ], [ %.074, %353 ], [ %.074, %351 ], [ %.074, %350 ], [ %.074, %339 ], [ %.074, %329 ], [ %.074, %327 ], [ %.074, %326 ], [ %.074, %316 ], [ %.074, %306 ], [ %305, %304 ], [ %.074, %303 ], [ %.074, %266 ], [ %.074, %256 ], [ %.074, %254 ], [ %.074, %243 ], [ %.074, %233 ], [ 1, %232 ], [ %.074, %230 ], [ %.074, %218 ], [ %.074, %208 ], [ %.074, %207 ], [ %.074, %205 ], [ %.074, %192 ], [ %.074, %182 ], [ %.074, %181 ], [ %.074, %179 ], [ %.074, %173 ], [ %.074, %171 ], [ %.074, %170 ], [ %.074, %159 ], [ %.074, %149 ], [ %.074, %147 ], [ %.074, %143 ], [ %.074, %141 ], [ %.074, %129 ], [ %.074, %119 ], [ %.074, %118 ], [ %.074, %117 ], [ %.074, %106 ], [ %.074, %96 ], [ %.074, %95 ], [ %.074, %85 ], [ %.074, %75 ], [ %.074, %74 ], [ %.074, %63 ], [ %.074, %53 ], [ %.074, %52 ], [ %.074, %28 ], [ %.074, %18 ], [ %.074, %16 ], [ %.074, %13 ], [ %.074, %9 ]
  %.072.be = phi i32 [ %.072, %8 ], [ %431, %430 ], [ %.072, %429 ], [ %.072, %400 ], [ %.072, %399 ], [ %.072, %398 ], [ %.072, %397 ], [ %.072, %395 ], [ %.072, %394 ], [ %.072, %392 ], [ %.072, %391 ], [ %.072, %389 ], [ %.072, %374 ], [ %.072, %365 ], [ %.072, %364 ], [ %363, %362 ], [ %.072, %353 ], [ %.072, %351 ], [ %.072, %350 ], [ %340, %339 ], [ %.072, %329 ], [ %.072, %327 ], [ %.072, %326 ], [ %.072, %316 ], [ %.072, %306 ], [ %.072, %304 ], [ %.072, %303 ], [ %.072, %266 ], [ %.072, %256 ], [ %.072, %254 ], [ %.072, %243 ], [ %.072, %233 ], [ %.072, %232 ], [ %.072, %230 ], [ %.072, %218 ], [ %.072, %208 ], [ %.072, %207 ], [ %.072, %205 ], [ %.072, %192 ], [ %.072, %182 ], [ %.072, %181 ], [ %.072, %179 ], [ %.072, %173 ], [ %.072, %171 ], [ %.072, %170 ], [ %.072, %159 ], [ %.072, %149 ], [ %.072, %147 ], [ %.072, %143 ], [ %.072, %141 ], [ %.072, %129 ], [ %.072, %119 ], [ %.072, %118 ], [ %.072, %117 ], [ %.072, %106 ], [ %.072, %96 ], [ %.072, %95 ], [ %.072, %85 ], [ %.072, %75 ], [ %.072, %74 ], [ %.072, %63 ], [ %.072, %53 ], [ %.072, %52 ], [ %.072, %28 ], [ %.072, %18 ], [ %.072, %16 ], [ %.072, %13 ], [ %.072, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ -1160690711, %430 ], [ 137006267, %429 ], [ 812098666, %400 ], [ 1629124835, %399 ], [ 1197055762, %398 ], [ 496900822, %397 ], [ -602049809, %395 ], [ 1161735006, %394 ], [ 1350027365, %392 ], [ -1805426348, %391 ], [ 1901788933, %389 ], [ -1112900414, %374 ], [ -1650583616, %365 ], [ -1688250541, %364 ], [ 95859105, %362 ], [ -1861235254, %353 ], [ %352, %351 ], [ 95859105, %350 ], [ %349, %339 ], [ %338, %329 ], [ 1328220831, %327 ], [ -1370595553, %326 ], [ %325, %316 ], [ %315, %306 ], [ -1697758434, %304 ], [ -956693140, %303 ], [ %302, %266 ], [ %265, %256 ], [ %255, %254 ], [ %253, %243 ], [ %242, %233 ], [ -1697758434, %232 ], [ %231, %230 ], [ %229, %218 ], [ %217, %208 ], [ 1328220831, %207 ], [ %206, %205 ], [ %204, %192 ], [ %191, %182 ], [ -1650583616, %181 ], [ 651221015, %179 ], [ 755514642, %173 ], [ %172, %171 ], [ 651221015, %170 ], [ %169, %159 ], [ %158, %149 ], [ -2004084548, %147 ], [ 1632834213, %143 ], [ %142, %141 ], [ %140, %129 ], [ %128, %119 ], [ -2004084548, %118 ], [ 578445905, %117 ], [ %116, %106 ], [ %105, %96 ], [ 1755077576, %95 ], [ %94, %85 ], [ %84, %75 ], [ -860413336, %74 ], [ %73, %63 ], [ %62, %53 ], [ -642028301, %52 ], [ %51, %28 ], [ %27, %18 ], [ %17, %16 ], [ -860413336, %13 ], [ %12, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i32, i32* @n, align 4
  %11 = add i32 %10, 1
  %.not92 = icmp sgt i32 %.086, %11
  %12 = select i1 %.not92, i32 -502902166, i32 1762268841
  br label %.backedge

13:                                               ; preds = %8
  %14 = sext i32 %.086 to i64
  %15 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %14, i64 0
  store i32 1, i32* %15, align 8
  br label %.backedge

16:                                               ; preds = %8
  %.not91 = icmp sgt i32 %.084, %.086
  %17 = select i1 %.not91, i32 345641646, i32 1300477092
  br label %.backedge

18:                                               ; preds = %8
  %19 = load i32, i32* @x.5, align 4
  %20 = load i32, i32* @y.6, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 -1112900414, i32 456138599
  br label %.backedge

28:                                               ; preds = %8
  %29 = add i32 %.086, -1
  %30 = sext i32 %29 to i64
  %31 = sext i32 %.084 to i64
  %32 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %30, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %.084, -1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %30, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %37, %33
  %39 = load i32, i32* @mod, align 4
  %40 = srem i32 %38, %39
  %41 = sext i32 %.086 to i64
  %42 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %41, i64 %31
  store i32 %40, i32* %42, align 4
  %43 = load i32, i32* @x.5, align 4
  %44 = load i32, i32* @y.6, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 270490207, i32 456138599
  br label %.backedge

52:                                               ; preds = %8
  br label %.backedge

53:                                               ; preds = %8
  %54 = load i32, i32* @x.5, align 4
  %55 = load i32, i32* @y.6, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 1901788933, i32 1501986634
  br label %.backedge

63:                                               ; preds = %8
  %64 = add i32 %.084, 1
  %65 = load i32, i32* @x.5, align 4
  %66 = load i32, i32* @y.6, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 -608648681, i32 1501986634
  br label %.backedge

74:                                               ; preds = %8
  br label %.backedge

75:                                               ; preds = %8
  %76 = load i32, i32* @x.5, align 4
  %77 = load i32, i32* @y.6, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 -1805426348, i32 1252158598
  br label %.backedge

85:                                               ; preds = %8
  %86 = load i32, i32* @x.5, align 4
  %87 = load i32, i32* @y.6, align 4
  %88 = add i32 %86, -1
  %89 = mul i32 %88, %86
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %92, %91
  %94 = select i1 %93, i32 2061384046, i32 1252158598
  br label %.backedge

95:                                               ; preds = %8
  br label %.backedge

96:                                               ; preds = %8
  %97 = load i32, i32* @x.5, align 4
  %98 = load i32, i32* @y.6, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 1350027365, i32 1253664468
  br label %.backedge

106:                                              ; preds = %8
  %107 = add i32 %.086, 1
  %108 = load i32, i32* @x.5, align 4
  %109 = load i32, i32* @y.6, align 4
  %110 = add i32 %108, -1
  %111 = mul i32 %110, %108
  %112 = and i32 %111, 1
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %114, %113
  %116 = select i1 %115, i32 -740551837, i32 1253664468
  br label %.backedge

117:                                              ; preds = %8
  br label %.backedge

118:                                              ; preds = %8
  br label %.backedge

119:                                              ; preds = %8
  %120 = load i32, i32* @x.5, align 4
  %121 = load i32, i32* @y.6, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 1161735006, i32 -878764700
  br label %.backedge

129:                                              ; preds = %8
  %130 = load i32, i32* @k, align 4
  %131 = icmp sle i32 %.082, %130
  store i1 %131, i1* %4, align 1
  %132 = load i32, i32* @x.5, align 4
  %133 = load i32, i32* @y.6, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 1391719069, i32 -878764700
  br label %.backedge

141:                                              ; preds = %8
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %142 = select i1 %.0..0..0., i32 464852559, i32 -223601875
  br label %.backedge

143:                                              ; preds = %8
  %144 = sext i32 %.082 to i64
  %145 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @g, i64 0, i64 1, i64 %144
  store i32 1, i32* %145, align 4
  %146 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @f, i64 0, i64 1, i64 %144
  store i32 1, i32* %146, align 4
  br label %.backedge

147:                                              ; preds = %8
  %148 = add i32 %.082, 1
  br label %.backedge

149:                                              ; preds = %8
  %150 = load i32, i32* @x.5, align 4
  %151 = load i32, i32* @y.6, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 -602049809, i32 1319664041
  br label %.backedge

159:                                              ; preds = %8
  %160 = load i32, i32* @k, align 4
  %161 = load i32, i32* @x.5, align 4
  %162 = load i32, i32* @y.6, align 4
  %163 = add i32 %161, -1
  %164 = mul i32 %163, %161
  %165 = and i32 %164, 1
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %167, %166
  %169 = select i1 %168, i32 1326214293, i32 1319664041
  br label %.backedge

170:                                              ; preds = %8
  br label %.backedge

171:                                              ; preds = %8
  %.not90 = icmp eq i32 %.080, -1
  %172 = select i1 %.not90, i32 822606162, i32 -1599725293
  br label %.backedge

173:                                              ; preds = %8
  %174 = sext i32 %.080 to i64
  %175 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @g, i64 0, i64 1, i64 %174
  %.neg89 = add i32 %.080, 1
  %176 = sext i32 %.neg89 to i64
  %177 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @g, i64 0, i64 1, i64 %176
  %178 = load i32, i32* %177, align 4
  tail call void @_Z2adRii(i32* nonnull dereferenceable(4) %175, i32 %178)
  br label %.backedge

179:                                              ; preds = %8
  %180 = add i32 %.080, -1
  br label %.backedge

181:                                              ; preds = %8
  br label %.backedge

182:                                              ; preds = %8
  %183 = load i32, i32* @x.5, align 4
  %184 = load i32, i32* @y.6, align 4
  %185 = add i32 %183, -1
  %186 = mul i32 %185, %183
  %187 = and i32 %186, 1
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %189, %188
  %191 = select i1 %190, i32 496900822, i32 2121466482
  br label %.backedge

192:                                              ; preds = %8
  %193 = load i32, i32* @n, align 4
  %194 = add i32 %193, 1
  %195 = icmp sle i32 %.078, %194
  store i1 %195, i1* %3, align 1
  %196 = load i32, i32* @x.5, align 4
  %197 = load i32, i32* @y.6, align 4
  %198 = add i32 %196, -1
  %199 = mul i32 %198, %196
  %200 = and i32 %199, 1
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %202, %201
  %204 = select i1 %203, i32 896364578, i32 2121466482
  br label %.backedge

205:                                              ; preds = %8
  %.0..0..0.69 = load volatile i1, i1* %3, align 1
  %206 = select i1 %.0..0..0.69, i32 1087302369, i32 1191968835
  br label %.backedge

207:                                              ; preds = %8
  br label %.backedge

208:                                              ; preds = %8
  %209 = load i32, i32* @x.5, align 4
  %210 = load i32, i32* @y.6, align 4
  %211 = add i32 %209, -1
  %212 = mul i32 %211, %209
  %213 = and i32 %212, 1
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %215, %214
  %217 = select i1 %216, i32 1197055762, i32 -1873904708
  br label %.backedge

218:                                              ; preds = %8
  %219 = load i32, i32* @k, align 4
  %220 = icmp sle i32 %.076, %219
  store i1 %220, i1* %2, align 1
  %221 = load i32, i32* @x.5, align 4
  %222 = load i32, i32* @y.6, align 4
  %223 = add i32 %221, -1
  %224 = mul i32 %223, %221
  %225 = and i32 %224, 1
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %227, %226
  %229 = select i1 %228, i32 -1881853226, i32 -1873904708
  br label %.backedge

230:                                              ; preds = %8
  %.0..0..0.70 = load volatile i1, i1* %2, align 1
  %231 = select i1 %.0..0..0.70, i32 1800227808, i32 -183484425
  br label %.backedge

232:                                              ; preds = %8
  br label %.backedge

233:                                              ; preds = %8
  %234 = load i32, i32* @x.5, align 4
  %235 = load i32, i32* @y.6, align 4
  %236 = add i32 %234, -1
  %237 = mul i32 %236, %234
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %240, %239
  %242 = select i1 %241, i32 1629124835, i32 -1218717167
  br label %.backedge

243:                                              ; preds = %8
  %244 = icmp sgt i32 %.078, %.074
  store i1 %244, i1* %1, align 1
  %245 = load i32, i32* @x.5, align 4
  %246 = load i32, i32* @y.6, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 749283488, i32 -1218717167
  br label %.backedge

254:                                              ; preds = %8
  %.0..0..0.71 = load volatile i1, i1* %1, align 1
  %255 = select i1 %.0..0..0.71, i32 -1694766484, i32 -1236542397
  br label %.backedge

256:                                              ; preds = %8
  %257 = load i32, i32* @x.5, align 4
  %258 = load i32, i32* @y.6, align 4
  %259 = add i32 %257, -1
  %260 = mul i32 %259, %257
  %261 = and i32 %260, 1
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %263, %262
  %265 = select i1 %264, i32 812098666, i32 -967107921
  br label %.backedge

266:                                              ; preds = %8
  %267 = sext i32 %.078 to i64
  %268 = sext i32 %.076 to i64
  %269 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @f, i64 0, i64 %267, i64 %268
  %270 = sext i32 %.074 to i64
  %271 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @f, i64 0, i64 %270, i64 %268
  %272 = load i32, i32* %271, align 4
  %273 = sext i32 %272 to i64
  %274 = sub i32 %.078, %.074
  %275 = sext i32 %274 to i64
  %.neg88 = add i32 %.076, 1
  %276 = sext i32 %.neg88 to i64
  %277 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @g, i64 0, i64 %275, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = sext i32 %278 to i64
  %280 = mul nsw i64 %279, %273
  %281 = load i32, i32* @mod, align 4
  %282 = sext i32 %281 to i64
  %283 = srem i64 %280, %282
  %284 = add i32 %.078, -2
  %285 = sext i32 %284 to i64
  %286 = add i32 %.074, -1
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %285, i64 %287
  %289 = load i32, i32* %288, align 4
  %290 = sext i32 %289 to i64
  %291 = mul nsw i64 %283, %290
  %292 = srem i64 %291, %282
  %293 = trunc i64 %292 to i32
  tail call void @_Z2adRii(i32* nonnull dereferenceable(4) %269, i32 %293)
  %294 = load i32, i32* @x.5, align 4
  %295 = load i32, i32* @y.6, align 4
  %296 = add i32 %294, -1
  %297 = mul i32 %296, %294
  %298 = and i32 %297, 1
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %300, %299
  %302 = select i1 %301, i32 -1542508302, i32 -967107921
  br label %.backedge

303:                                              ; preds = %8
  br label %.backedge

304:                                              ; preds = %8
  %305 = add i32 %.074, 1
  br label %.backedge

306:                                              ; preds = %8
  %307 = load i32, i32* @x.5, align 4
  %308 = load i32, i32* @y.6, align 4
  %309 = add i32 %307, -1
  %310 = mul i32 %309, %307
  %311 = and i32 %310, 1
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %313, %312
  %315 = select i1 %314, i32 137006267, i32 -1891998435
  br label %.backedge

316:                                              ; preds = %8
  %317 = load i32, i32* @x.5, align 4
  %318 = load i32, i32* @y.6, align 4
  %319 = add i32 %317, -1
  %320 = mul i32 %319, %317
  %321 = and i32 %320, 1
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %323, %322
  %325 = select i1 %324, i32 1989560114, i32 -1891998435
  br label %.backedge

326:                                              ; preds = %8
  br label %.backedge

327:                                              ; preds = %8
  %328 = add i32 %.076, 1
  br label %.backedge

329:                                              ; preds = %8
  %330 = load i32, i32* @x.5, align 4
  %331 = load i32, i32* @y.6, align 4
  %332 = add i32 %330, -1
  %333 = mul i32 %332, %330
  %334 = and i32 %333, 1
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %336, %335
  %338 = select i1 %337, i32 -1160690711, i32 1226861475
  br label %.backedge

339:                                              ; preds = %8
  %340 = load i32, i32* @k, align 4
  %341 = load i32, i32* @x.5, align 4
  %342 = load i32, i32* @y.6, align 4
  %343 = add i32 %341, -1
  %344 = mul i32 %343, %341
  %345 = and i32 %344, 1
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %347, %346
  %349 = select i1 %348, i32 184749785, i32 1226861475
  br label %.backedge

350:                                              ; preds = %8
  br label %.backedge

351:                                              ; preds = %8
  %.not = icmp eq i32 %.072, -1
  %352 = select i1 %.not, i32 -877016547, i32 -503413066
  br label %.backedge

353:                                              ; preds = %8
  %354 = sext i32 %.078 to i64
  %355 = sext i32 %.072 to i64
  %356 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @f, i64 0, i64 %354, i64 %355
  %357 = load i32, i32* %356, align 4
  %358 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @g, i64 0, i64 %354, i64 %355
  store i32 %357, i32* %358, align 4
  %.neg = add i32 %.072, 1
  %359 = sext i32 %.neg to i64
  %360 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @g, i64 0, i64 %354, i64 %359
  %361 = load i32, i32* %360, align 4
  tail call void @_Z2adRii(i32* nonnull dereferenceable(4) %358, i32 %361)
  br label %.backedge

362:                                              ; preds = %8
  %363 = add i32 %.072, -1
  br label %.backedge

364:                                              ; preds = %8
  br label %.backedge

365:                                              ; preds = %8
  %366 = add i32 %.078, 1
  br label %.backedge

367:                                              ; preds = %8
  %368 = load i32, i32* @n, align 4
  %369 = add i32 %368, 1
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @f, i64 0, i64 %370, i64 0
  %372 = load i32, i32* %371, align 8
  %373 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %372)
  ret i32 0

374:                                              ; preds = %8
  %375 = add i32 %.086, -1
  %376 = sext i32 %375 to i64
  %377 = sext i32 %.084 to i64
  %378 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %376, i64 %377
  %379 = load i32, i32* %378, align 4
  %380 = add i32 %.084, -1
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %376, i64 %381
  %383 = load i32, i32* %382, align 4
  %384 = add i32 %383, %379
  %385 = load i32, i32* @mod, align 4
  %386 = srem i32 %384, %385
  %387 = sext i32 %.086 to i64
  %388 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %387, i64 %377
  store i32 %386, i32* %388, align 4
  br label %.backedge

389:                                              ; preds = %8
  %390 = add i32 %.084, 1
  br label %.backedge

391:                                              ; preds = %8
  br label %.backedge

392:                                              ; preds = %8
  %393 = add i32 %.086, 1
  br label %.backedge

394:                                              ; preds = %8
  br label %.backedge

395:                                              ; preds = %8
  %396 = load i32, i32* @k, align 4
  br label %.backedge

397:                                              ; preds = %8
  br label %.backedge

398:                                              ; preds = %8
  br label %.backedge

399:                                              ; preds = %8
  br label %.backedge

400:                                              ; preds = %8
  %401 = sext i32 %.078 to i64
  %402 = sext i32 %.076 to i64
  %403 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @f, i64 0, i64 %401, i64 %402
  %404 = sext i32 %.074 to i64
  %405 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @f, i64 0, i64 %404, i64 %402
  %406 = load i32, i32* %405, align 4
  %407 = sext i32 %406 to i64
  %408 = sub i32 %.078, %.074
  %409 = sext i32 %408 to i64
  %410 = add i32 %.076, 1
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @g, i64 0, i64 %409, i64 %411
  %413 = load i32, i32* %412, align 4
  %414 = sext i32 %413 to i64
  %415 = mul nsw i64 %414, %407
  %416 = load i32, i32* @mod, align 4
  %417 = sext i32 %416 to i64
  %418 = srem i64 %415, %417
  %419 = add i32 %.078, -2
  %420 = sext i32 %419 to i64
  %421 = add i32 %.074, -1
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds [310 x [310 x i32]], [310 x [310 x i32]]* @c, i64 0, i64 %420, i64 %422
  %424 = load i32, i32* %423, align 4
  %425 = sext i32 %424 to i64
  %426 = mul nsw i64 %418, %425
  %427 = srem i64 %426, %417
  %428 = trunc i64 %427 to i32
  tail call void @_Z2adRii(i32* nonnull dereferenceable(4) %403, i32 %428)
  br label %.backedge

429:                                              ; preds = %8
  br label %.backedge

430:                                              ; preds = %8
  %431 = load i32, i32* @k, align 4
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s105922855.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
