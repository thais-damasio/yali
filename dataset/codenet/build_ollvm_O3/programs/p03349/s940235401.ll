; ModuleID = 'build_ollvm/programs/p03349/s940235401.ll'
source_filename = "Project_CodeNet_C++1400/p03349/s940235401.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@MOD = global i64 0, align 8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s940235401.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -612624711, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -612624711, label %11
    i32 -864839856, label %14
    i32 2069182224, label %25
    i32 111006031, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -864839856, i32 111006031
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 2069182224, i32 111006031
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -864839856, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind uwtable willreturn
define void @_Z3addRll(i64* nocapture dereferenceable(8) %0, i64 %1) local_unnamed_addr #4 {
  %3 = load i64, i64* %0, align 8
  %4 = add i64 %3, %1
  %5 = load i64, i64* @MOD, align 8
  %6 = srem i64 %4, %5
  store i64 %6, i64* %0, align 8
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind uwtable willreturn
define void @_Z3mulRll(i64* nocapture dereferenceable(8) %0, i64 %1) local_unnamed_addr #4 {
  %3 = load i64, i64* %0, align 8
  %4 = mul nsw i64 %3, %1
  %5 = load i64, i64* @MOD, align 8
  %6 = srem i64 %4, %5
  store i64 %6, i64* %0, align 8
  ret void
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [302 x [302 x i64]], align 16
  %9 = alloca [302 x [302 x i64]], align 16
  %10 = alloca [302 x [302 x i64]], align 16
  %11 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %6)
  %12 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %11, i32* nonnull dereferenceable(4) %7)
  %13 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERl(%"class.std::basic_istream"* nonnull %12, i64* nonnull dereferenceable(8) @MOD)
  %14 = load i32, i32* %6, align 4
  %15 = add i32 %14, 1
  store i32 %15, i32* %6, align 4
  %16 = bitcast [302 x [302 x i64]]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(729632) %16, i8 0, i64 729632, i1 false)
  %17 = bitcast [302 x [302 x i64]]* %10 to i8*
  %18 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %10, i64 0, i64 0, i64 1
  %19 = bitcast [302 x [302 x i64]]* %9 to i8*
  %20 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %9, i64 0, i64 0, i64 0
  br label %21

21:                                               ; preds = %.backedge, %0
  %.084 = phi i32 [ 1, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i32 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.0 = phi i32 [ 888615473, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 888615473, label %22
    i32 -1990374070, label %32
    i32 -1659128522, label %43
    i32 -1846923431, label %45
    i32 731552681, label %48
    i32 1938097170, label %51
    i32 45781374, label %61
    i32 102879611, label %81
    i32 -489426201, label %82
    i32 -546276703, label %92
    i32 296862394, label %102
    i32 972300177, label %103
    i32 763643378, label %104
    i32 -259272349, label %106
    i32 407353406, label %107
    i32 819534673, label %117
    i32 1225903368, label %128
    i32 -45365096, label %130
    i32 1777713590, label %131
    i32 174736020, label %141
    i32 -420807260, label %152
    i32 -605155105, label %154
    i32 1132837041, label %155
    i32 583561712, label %165
    i32 1942642705, label %177
    i32 1315097089, label %179
    i32 1499126089, label %189
    i32 -2028084067, label %212
    i32 -463919578, label %213
    i32 -756649892, label %215
    i32 148856565, label %225
    i32 -339076825, label %235
    i32 -1709864394, label %236
    i32 686869389, label %238
    i32 -728901702, label %239
    i32 1239151115, label %249
    i32 2016636790, label %260
    i32 -71608319, label %261
    i32 -5105605, label %271
    i32 1652521952, label %281
    i32 -607098502, label %282
    i32 209970972, label %285
    i32 -484666310, label %286
    i32 1390229562, label %296
    i32 -1433667655, label %307
    i32 -1260881805, label %309
    i32 1360858513, label %319
    i32 -1678577354, label %329
    i32 812457866, label %330
    i32 -1334818426, label %334
    i32 1309107687, label %344
    i32 -952065966, label %367
    i32 1739740331, label %368
    i32 -703530860, label %369
    i32 -250704317, label %379
    i32 213276170, label %389
    i32 -777975571, label %390
    i32 -306358697, label %392
    i32 1978670758, label %393
    i32 -559573847, label %395
    i32 -1396775310, label %405
    i32 646322619, label %423
    i32 725344937, label %424
    i32 1708060294, label %425
    i32 -1849967759, label %436
    i32 -1097606663, label %438
    i32 -1094793469, label %439
    i32 -1139705994, label %440
    i32 732853914, label %441
    i32 536743040, label %455
    i32 -1985250700, label %456
    i32 625661902, label %458
    i32 2023682102, label %459
    i32 674849196, label %460
    i32 -1437172539, label %461
    i32 -1360739189, label %475
    i32 704598216, label %476
  ]

.backedge:                                        ; preds = %21, %476, %475, %461, %460, %459, %458, %456, %455, %441, %440, %439, %438, %436, %425, %424, %405, %395, %393, %392, %390, %389, %379, %369, %368, %367, %344, %334, %330, %329, %319, %309, %307, %296, %286, %285, %282, %281, %271, %261, %260, %249, %239, %238, %236, %235, %225, %215, %213, %212, %189, %179, %177, %165, %155, %154, %152, %141, %131, %130, %128, %117, %107, %106, %104, %103, %102, %92, %82, %81, %61, %51, %48, %45, %43, %32, %22
  %.084.be = phi i32 [ %.084, %21 ], [ %.084, %476 ], [ %.084, %475 ], [ %.084, %461 ], [ %.084, %460 ], [ %.084, %459 ], [ %.084, %458 ], [ %.084, %456 ], [ %.084, %455 ], [ %.084, %441 ], [ %.084, %440 ], [ %.084, %439 ], [ %.084, %438 ], [ %.084, %436 ], [ %.084, %425 ], [ %.084, %424 ], [ %.084, %405 ], [ %.084, %395 ], [ %.084, %393 ], [ %.084, %392 ], [ %.084, %390 ], [ %.084, %389 ], [ %.084, %379 ], [ %.084, %369 ], [ %.084, %368 ], [ %.084, %367 ], [ %.084, %344 ], [ %.084, %334 ], [ %.084, %330 ], [ %.084, %329 ], [ %.084, %319 ], [ %.084, %309 ], [ %.084, %307 ], [ %.084, %296 ], [ %.084, %286 ], [ %.084, %285 ], [ %.084, %282 ], [ %.084, %281 ], [ %.084, %271 ], [ %.084, %261 ], [ %.084, %260 ], [ %.084, %249 ], [ %.084, %239 ], [ %.084, %238 ], [ %.084, %236 ], [ %.084, %235 ], [ %.084, %225 ], [ %.084, %215 ], [ %.084, %213 ], [ %.084, %212 ], [ %.084, %189 ], [ %.084, %179 ], [ %.084, %177 ], [ %.084, %165 ], [ %.084, %155 ], [ %.084, %154 ], [ %.084, %152 ], [ %.084, %141 ], [ %.084, %131 ], [ %.084, %130 ], [ %.084, %128 ], [ %.084, %117 ], [ %.084, %107 ], [ %.084, %106 ], [ %105, %104 ], [ %.084, %103 ], [ %.084, %102 ], [ %.084, %92 ], [ %.084, %82 ], [ %.084, %81 ], [ %.084, %61 ], [ %.084, %51 ], [ %.084, %48 ], [ %.084, %45 ], [ %.084, %43 ], [ %.084, %32 ], [ %.084, %22 ]
  %.082.be = phi i32 [ %.082, %21 ], [ %.082, %476 ], [ %.082, %475 ], [ %.082, %461 ], [ %.082, %460 ], [ %.082, %459 ], [ %.082, %458 ], [ %.082, %456 ], [ %.082, %455 ], [ %.082, %441 ], [ %.082, %440 ], [ %.082, %439 ], [ %.082, %438 ], [ %437, %436 ], [ %.082, %425 ], [ %.082, %424 ], [ %.082, %405 ], [ %.082, %395 ], [ %.082, %393 ], [ %.082, %392 ], [ %.082, %390 ], [ %.082, %389 ], [ %.082, %379 ], [ %.082, %369 ], [ %.082, %368 ], [ %.082, %367 ], [ %.082, %344 ], [ %.082, %334 ], [ %.082, %330 ], [ %.082, %329 ], [ %.082, %319 ], [ %.082, %309 ], [ %.082, %307 ], [ %.082, %296 ], [ %.082, %286 ], [ %.082, %285 ], [ %.082, %282 ], [ %.082, %281 ], [ %.082, %271 ], [ %.082, %261 ], [ %.082, %260 ], [ %.082, %249 ], [ %.082, %239 ], [ %.082, %238 ], [ %.082, %236 ], [ %.082, %235 ], [ %.082, %225 ], [ %.082, %215 ], [ %.082, %213 ], [ %.082, %212 ], [ %.082, %189 ], [ %.082, %179 ], [ %.082, %177 ], [ %.082, %165 ], [ %.082, %155 ], [ %.082, %154 ], [ %.082, %152 ], [ %.082, %141 ], [ %.082, %131 ], [ %.082, %130 ], [ %.082, %128 ], [ %.082, %117 ], [ %.082, %107 ], [ %.082, %106 ], [ %.082, %104 ], [ %.082, %103 ], [ %.082, %102 ], [ %.neg86, %92 ], [ %.082, %82 ], [ %.082, %81 ], [ %.082, %61 ], [ %.082, %51 ], [ %.082, %48 ], [ 1, %45 ], [ %.082, %43 ], [ %.082, %32 ], [ %.082, %22 ]
  %.080.be = phi i32 [ %.080, %21 ], [ %.080, %476 ], [ %.080, %475 ], [ %.080, %461 ], [ %.080, %460 ], [ %.080, %459 ], [ %.080, %458 ], [ %457, %456 ], [ %.080, %455 ], [ %.080, %441 ], [ %.080, %440 ], [ %.080, %439 ], [ %.080, %438 ], [ %.080, %436 ], [ %.080, %425 ], [ %.080, %424 ], [ %.080, %405 ], [ %.080, %395 ], [ %.080, %393 ], [ %.080, %392 ], [ %.080, %390 ], [ %.080, %389 ], [ %.080, %379 ], [ %.080, %369 ], [ %.080, %368 ], [ %.080, %367 ], [ %.080, %344 ], [ %.080, %334 ], [ %.080, %330 ], [ %.080, %329 ], [ %.080, %319 ], [ %.080, %309 ], [ %.080, %307 ], [ %.080, %296 ], [ %.080, %286 ], [ %.080, %285 ], [ %.080, %282 ], [ %.080, %281 ], [ %.080, %271 ], [ %.080, %261 ], [ %.080, %260 ], [ %250, %249 ], [ %.080, %239 ], [ %.080, %238 ], [ %.080, %236 ], [ %.080, %235 ], [ %.080, %225 ], [ %.080, %215 ], [ %.080, %213 ], [ %.080, %212 ], [ %.080, %189 ], [ %.080, %179 ], [ %.080, %177 ], [ %.080, %165 ], [ %.080, %155 ], [ %.080, %154 ], [ %.080, %152 ], [ %.080, %141 ], [ %.080, %131 ], [ %.080, %130 ], [ %.080, %128 ], [ %.080, %117 ], [ %.080, %107 ], [ 1, %106 ], [ %.080, %104 ], [ %.080, %103 ], [ %.080, %102 ], [ %.080, %92 ], [ %.080, %82 ], [ %.080, %81 ], [ %.080, %61 ], [ %.080, %51 ], [ %.080, %48 ], [ %.080, %45 ], [ %.080, %43 ], [ %.080, %32 ], [ %.080, %22 ]
  %.078.be = phi i32 [ %.078, %21 ], [ %.078, %476 ], [ %.078, %475 ], [ %.078, %461 ], [ %.078, %460 ], [ %.078, %459 ], [ %.078, %458 ], [ %.078, %456 ], [ %.078, %455 ], [ %.078, %441 ], [ %.078, %440 ], [ %.078, %439 ], [ %.078, %438 ], [ %.078, %436 ], [ %.078, %425 ], [ %.078, %424 ], [ %.078, %405 ], [ %.078, %395 ], [ %.078, %393 ], [ %.078, %392 ], [ %.078, %390 ], [ %.078, %389 ], [ %.078, %379 ], [ %.078, %369 ], [ %.078, %368 ], [ %.078, %367 ], [ %.078, %344 ], [ %.078, %334 ], [ %.078, %330 ], [ %.078, %329 ], [ %.078, %319 ], [ %.078, %309 ], [ %.078, %307 ], [ %.078, %296 ], [ %.078, %286 ], [ %.078, %285 ], [ %.078, %282 ], [ %.078, %281 ], [ %.078, %271 ], [ %.078, %261 ], [ %.078, %260 ], [ %.078, %249 ], [ %.078, %239 ], [ %.078, %238 ], [ %237, %236 ], [ %.078, %235 ], [ %.078, %225 ], [ %.078, %215 ], [ %.078, %213 ], [ %.078, %212 ], [ %.078, %189 ], [ %.078, %179 ], [ %.078, %177 ], [ %.078, %165 ], [ %.078, %155 ], [ %.078, %154 ], [ %.078, %152 ], [ %.078, %141 ], [ %.078, %131 ], [ 0, %130 ], [ %.078, %128 ], [ %.078, %117 ], [ %.078, %107 ], [ %.078, %106 ], [ %.078, %104 ], [ %.078, %103 ], [ %.078, %102 ], [ %.078, %92 ], [ %.078, %82 ], [ %.078, %81 ], [ %.078, %61 ], [ %.078, %51 ], [ %.078, %48 ], [ %.078, %45 ], [ %.078, %43 ], [ %.078, %32 ], [ %.078, %22 ]
  %.076.be = phi i32 [ %.076, %21 ], [ %.076, %476 ], [ %.076, %475 ], [ %.076, %461 ], [ %.076, %460 ], [ %.076, %459 ], [ %.076, %458 ], [ %.076, %456 ], [ %.076, %455 ], [ %.076, %441 ], [ %.076, %440 ], [ %.076, %439 ], [ %.076, %438 ], [ %.076, %436 ], [ %.076, %425 ], [ %.076, %424 ], [ %.076, %405 ], [ %.076, %395 ], [ %.076, %393 ], [ %.076, %392 ], [ %.076, %390 ], [ %.076, %389 ], [ %.076, %379 ], [ %.076, %369 ], [ %.076, %368 ], [ %.076, %367 ], [ %.076, %344 ], [ %.076, %334 ], [ %.076, %330 ], [ %.076, %329 ], [ %.076, %319 ], [ %.076, %309 ], [ %.076, %307 ], [ %.076, %296 ], [ %.076, %286 ], [ %.076, %285 ], [ %.076, %282 ], [ %.076, %281 ], [ %.076, %271 ], [ %.076, %261 ], [ %.076, %260 ], [ %.076, %249 ], [ %.076, %239 ], [ %.076, %238 ], [ %.076, %236 ], [ %.076, %235 ], [ %.076, %225 ], [ %.076, %215 ], [ %214, %213 ], [ %.076, %212 ], [ %.076, %189 ], [ %.076, %179 ], [ %.076, %177 ], [ %.076, %165 ], [ %.076, %155 ], [ 0, %154 ], [ %.076, %152 ], [ %.076, %141 ], [ %.076, %131 ], [ %.076, %130 ], [ %.076, %128 ], [ %.076, %117 ], [ %.076, %107 ], [ %.076, %106 ], [ %.076, %104 ], [ %.076, %103 ], [ %.076, %102 ], [ %.076, %92 ], [ %.076, %82 ], [ %.076, %81 ], [ %.076, %61 ], [ %.076, %51 ], [ %.076, %48 ], [ %.076, %45 ], [ %.076, %43 ], [ %.076, %32 ], [ %.076, %22 ]
  %.074.be = phi i32 [ %.074, %21 ], [ %.074, %476 ], [ %.074, %475 ], [ %.074, %461 ], [ %.074, %460 ], [ %.074, %459 ], [ 1, %458 ], [ %.074, %456 ], [ %.074, %455 ], [ %.074, %441 ], [ %.074, %440 ], [ %.074, %439 ], [ %.074, %438 ], [ %.074, %436 ], [ %.074, %425 ], [ %.074, %424 ], [ %.074, %405 ], [ %.074, %395 ], [ %394, %393 ], [ %.074, %392 ], [ %.074, %390 ], [ %.074, %389 ], [ %.074, %379 ], [ %.074, %369 ], [ %.074, %368 ], [ %.074, %367 ], [ %.074, %344 ], [ %.074, %334 ], [ %.074, %330 ], [ %.074, %329 ], [ %.074, %319 ], [ %.074, %309 ], [ %.074, %307 ], [ %.074, %296 ], [ %.074, %286 ], [ %.074, %285 ], [ %.074, %282 ], [ %.074, %281 ], [ 1, %271 ], [ %.074, %261 ], [ %.074, %260 ], [ %.074, %249 ], [ %.074, %239 ], [ %.074, %238 ], [ %.074, %236 ], [ %.074, %235 ], [ %.074, %225 ], [ %.074, %215 ], [ %.074, %213 ], [ %.074, %212 ], [ %.074, %189 ], [ %.074, %179 ], [ %.074, %177 ], [ %.074, %165 ], [ %.074, %155 ], [ %.074, %154 ], [ %.074, %152 ], [ %.074, %141 ], [ %.074, %131 ], [ %.074, %130 ], [ %.074, %128 ], [ %.074, %117 ], [ %.074, %107 ], [ %.074, %106 ], [ %.074, %104 ], [ %.074, %103 ], [ %.074, %102 ], [ %.074, %92 ], [ %.074, %82 ], [ %.074, %81 ], [ %.074, %61 ], [ %.074, %51 ], [ %.074, %48 ], [ %.074, %45 ], [ %.074, %43 ], [ %.074, %32 ], [ %.074, %22 ]
  %.072.be = phi i32 [ %.072, %21 ], [ %.072, %476 ], [ %.072, %475 ], [ %.072, %461 ], [ %.072, %460 ], [ %.072, %459 ], [ %.072, %458 ], [ %.072, %456 ], [ %.072, %455 ], [ %.072, %441 ], [ %.072, %440 ], [ %.072, %439 ], [ %.072, %438 ], [ %.072, %436 ], [ %.072, %425 ], [ %.072, %424 ], [ %.072, %405 ], [ %.072, %395 ], [ %.072, %393 ], [ %.072, %392 ], [ %391, %390 ], [ %.072, %389 ], [ %.072, %379 ], [ %.072, %369 ], [ %.072, %368 ], [ %.072, %367 ], [ %.072, %344 ], [ %.072, %334 ], [ %.072, %330 ], [ %.072, %329 ], [ %.072, %319 ], [ %.072, %309 ], [ %.072, %307 ], [ %.072, %296 ], [ %.072, %286 ], [ 0, %285 ], [ %.072, %282 ], [ %.072, %281 ], [ %.072, %271 ], [ %.072, %261 ], [ %.072, %260 ], [ %.072, %249 ], [ %.072, %239 ], [ %.072, %238 ], [ %.072, %236 ], [ %.072, %235 ], [ %.072, %225 ], [ %.072, %215 ], [ %.072, %213 ], [ %.072, %212 ], [ %.072, %189 ], [ %.072, %179 ], [ %.072, %177 ], [ %.072, %165 ], [ %.072, %155 ], [ %.072, %154 ], [ %.072, %152 ], [ %.072, %141 ], [ %.072, %131 ], [ %.072, %130 ], [ %.072, %128 ], [ %.072, %117 ], [ %.072, %107 ], [ %.072, %106 ], [ %.072, %104 ], [ %.072, %103 ], [ %.072, %102 ], [ %.072, %92 ], [ %.072, %82 ], [ %.072, %81 ], [ %.072, %61 ], [ %.072, %51 ], [ %.072, %48 ], [ %.072, %45 ], [ %.072, %43 ], [ %.072, %32 ], [ %.072, %22 ]
  %.070.be = phi i32 [ %.070, %21 ], [ %.070, %476 ], [ %.070, %475 ], [ %.070, %461 ], [ 0, %460 ], [ %.070, %459 ], [ %.070, %458 ], [ %.070, %456 ], [ %.070, %455 ], [ %.070, %441 ], [ %.070, %440 ], [ %.070, %439 ], [ %.070, %438 ], [ %.070, %436 ], [ %.070, %425 ], [ %.070, %424 ], [ %.070, %405 ], [ %.070, %395 ], [ %.070, %393 ], [ %.070, %392 ], [ %.070, %390 ], [ %.070, %389 ], [ %.070, %379 ], [ %.070, %369 ], [ %.neg, %368 ], [ %.070, %367 ], [ %.070, %344 ], [ %.070, %334 ], [ %.070, %330 ], [ %.070, %329 ], [ 0, %319 ], [ %.070, %309 ], [ %.070, %307 ], [ %.070, %296 ], [ %.070, %286 ], [ %.070, %285 ], [ %.070, %282 ], [ %.070, %281 ], [ %.070, %271 ], [ %.070, %261 ], [ %.070, %260 ], [ %.070, %249 ], [ %.070, %239 ], [ %.070, %238 ], [ %.070, %236 ], [ %.070, %235 ], [ %.070, %225 ], [ %.070, %215 ], [ %.070, %213 ], [ %.070, %212 ], [ %.070, %189 ], [ %.070, %179 ], [ %.070, %177 ], [ %.070, %165 ], [ %.070, %155 ], [ %.070, %154 ], [ %.070, %152 ], [ %.070, %141 ], [ %.070, %131 ], [ %.070, %130 ], [ %.070, %128 ], [ %.070, %117 ], [ %.070, %107 ], [ %.070, %106 ], [ %.070, %104 ], [ %.070, %103 ], [ %.070, %102 ], [ %.070, %92 ], [ %.070, %82 ], [ %.070, %81 ], [ %.070, %61 ], [ %.070, %51 ], [ %.070, %48 ], [ %.070, %45 ], [ %.070, %43 ], [ %.070, %32 ], [ %.070, %22 ]
  %.0.be = phi i32 [ %.0, %21 ], [ -1396775310, %476 ], [ -250704317, %475 ], [ 1309107687, %461 ], [ 1360858513, %460 ], [ 1390229562, %459 ], [ -5105605, %458 ], [ 1239151115, %456 ], [ 148856565, %455 ], [ 1499126089, %441 ], [ 583561712, %440 ], [ 174736020, %439 ], [ 819534673, %438 ], [ -546276703, %436 ], [ 45781374, %425 ], [ -1990374070, %424 ], [ %422, %405 ], [ %404, %395 ], [ -607098502, %393 ], [ 1978670758, %392 ], [ -484666310, %390 ], [ -777975571, %389 ], [ %388, %379 ], [ %378, %369 ], [ 812457866, %368 ], [ 1739740331, %367 ], [ %366, %344 ], [ %343, %334 ], [ %333, %330 ], [ 812457866, %329 ], [ %328, %319 ], [ %318, %309 ], [ %308, %307 ], [ %306, %296 ], [ %295, %286 ], [ -484666310, %285 ], [ %284, %282 ], [ -607098502, %281 ], [ %280, %271 ], [ %270, %261 ], [ 407353406, %260 ], [ %259, %249 ], [ %248, %239 ], [ -728901702, %238 ], [ 1777713590, %236 ], [ -1709864394, %235 ], [ %234, %225 ], [ %224, %215 ], [ 1132837041, %213 ], [ -463919578, %212 ], [ %211, %189 ], [ %188, %179 ], [ %178, %177 ], [ %176, %165 ], [ %164, %155 ], [ 1132837041, %154 ], [ %153, %152 ], [ %151, %141 ], [ %140, %131 ], [ 1777713590, %130 ], [ %129, %128 ], [ %127, %117 ], [ %116, %107 ], [ 407353406, %106 ], [ 888615473, %104 ], [ 763643378, %103 ], [ 731552681, %102 ], [ %101, %92 ], [ %91, %82 ], [ -489426201, %81 ], [ %80, %61 ], [ %60, %51 ], [ %50, %48 ], [ 731552681, %45 ], [ %44, %43 ], [ %42, %32 ], [ %31, %22 ]
  br label %21

22:                                               ; preds = %21
  %23 = load i32, i32* @x.5, align 4
  %24 = load i32, i32* @y.6, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 -1990374070, i32 725344937
  br label %.backedge

32:                                               ; preds = %21
  %33 = icmp slt i32 %.084, 302
  store i1 %33, i1* %5, align 1
  %34 = load i32, i32* @x.5, align 4
  %35 = load i32, i32* @y.6, align 4
  %36 = add i32 %34, -1
  %37 = mul i32 %36, %34
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %40, %39
  %42 = select i1 %41, i32 -1659128522, i32 725344937
  br label %.backedge

43:                                               ; preds = %21
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %44 = select i1 %.0..0..0., i32 -1846923431, i32 -259272349
  br label %.backedge

45:                                               ; preds = %21
  %46 = sext i32 %.084 to i64
  %47 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %8, i64 0, i64 %46, i64 0
  store i64 1, i64* %47, align 16
  br label %.backedge

48:                                               ; preds = %21
  %49 = icmp slt i32 %.082, 302
  %50 = select i1 %49, i32 1938097170, i32 972300177
  br label %.backedge

51:                                               ; preds = %21
  %52 = load i32, i32* @x.5, align 4
  %53 = load i32, i32* @y.6, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 45781374, i32 1708060294
  br label %.backedge

61:                                               ; preds = %21
  %62 = sext i32 %.084 to i64
  %63 = add i32 %.082, -1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %8, i64 0, i64 %62, i64 %64
  %66 = load i64, i64* %65, align 8
  %67 = mul nsw i64 %66, %62
  %68 = load i64, i64* @MOD, align 8
  %69 = srem i64 %67, %68
  %70 = sext i32 %.082 to i64
  %71 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %8, i64 0, i64 %62, i64 %70
  store i64 %69, i64* %71, align 8
  %72 = load i32, i32* @x.5, align 4
  %73 = load i32, i32* @y.6, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 102879611, i32 1708060294
  br label %.backedge

81:                                               ; preds = %21
  br label %.backedge

82:                                               ; preds = %21
  %83 = load i32, i32* @x.5, align 4
  %84 = load i32, i32* @y.6, align 4
  %85 = add i32 %83, -1
  %86 = mul i32 %85, %83
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %89, %88
  %91 = select i1 %90, i32 -546276703, i32 -1849967759
  br label %.backedge

92:                                               ; preds = %21
  %.neg86 = add i32 %.082, 1
  %93 = load i32, i32* @x.5, align 4
  %94 = load i32, i32* @y.6, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 296862394, i32 -1849967759
  br label %.backedge

102:                                              ; preds = %21
  br label %.backedge

103:                                              ; preds = %21
  br label %.backedge

104:                                              ; preds = %21
  %105 = add i32 %.084, 1
  br label %.backedge

106:                                              ; preds = %21
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(729632) %19, i8 0, i64 729632, i1 false)
  store i64 1, i64* %20, align 16
  br label %.backedge

107:                                              ; preds = %21
  %108 = load i32, i32* @x.5, align 4
  %109 = load i32, i32* @y.6, align 4
  %110 = add i32 %108, -1
  %111 = mul i32 %110, %108
  %112 = and i32 %111, 1
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %114, %113
  %116 = select i1 %115, i32 819534673, i32 -1097606663
  br label %.backedge

117:                                              ; preds = %21
  %118 = icmp slt i32 %.080, 302
  store i1 %118, i1* %4, align 1
  %119 = load i32, i32* @x.5, align 4
  %120 = load i32, i32* @y.6, align 4
  %121 = add i32 %119, -1
  %122 = mul i32 %121, %119
  %123 = and i32 %122, 1
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %125, %124
  %127 = select i1 %126, i32 1225903368, i32 -1097606663
  br label %.backedge

128:                                              ; preds = %21
  %.0..0..0.66 = load volatile i1, i1* %4, align 1
  %129 = select i1 %.0..0..0.66, i32 -45365096, i32 -71608319
  br label %.backedge

130:                                              ; preds = %21
  br label %.backedge

131:                                              ; preds = %21
  %132 = load i32, i32* @x.5, align 4
  %133 = load i32, i32* @y.6, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 174736020, i32 -1094793469
  br label %.backedge

141:                                              ; preds = %21
  %142 = icmp slt i32 %.078, 302
  store i1 %142, i1* %3, align 1
  %143 = load i32, i32* @x.5, align 4
  %144 = load i32, i32* @y.6, align 4
  %145 = add i32 %143, -1
  %146 = mul i32 %145, %143
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %149, %148
  %151 = select i1 %150, i32 -420807260, i32 -1094793469
  br label %.backedge

152:                                              ; preds = %21
  %.0..0..0.67 = load volatile i1, i1* %3, align 1
  %153 = select i1 %.0..0..0.67, i32 -605155105, i32 686869389
  br label %.backedge

154:                                              ; preds = %21
  br label %.backedge

155:                                              ; preds = %21
  %156 = load i32, i32* @x.5, align 4
  %157 = load i32, i32* @y.6, align 4
  %158 = add i32 %156, -1
  %159 = mul i32 %158, %156
  %160 = and i32 %159, 1
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %162, %161
  %164 = select i1 %163, i32 583561712, i32 -1139705994
  br label %.backedge

165:                                              ; preds = %21
  %166 = add i32 %.076, %.078
  %167 = icmp slt i32 %166, 302
  store i1 %167, i1* %2, align 1
  %168 = load i32, i32* @x.5, align 4
  %169 = load i32, i32* @y.6, align 4
  %170 = add i32 %168, -1
  %171 = mul i32 %170, %168
  %172 = and i32 %171, 1
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %174, %173
  %176 = select i1 %175, i32 1942642705, i32 -1139705994
  br label %.backedge

177:                                              ; preds = %21
  %.0..0..0.68 = load volatile i1, i1* %2, align 1
  %178 = select i1 %.0..0..0.68, i32 1315097089, i32 -756649892
  br label %.backedge

179:                                              ; preds = %21
  %180 = load i32, i32* @x.5, align 4
  %181 = load i32, i32* @y.6, align 4
  %182 = add i32 %180, -1
  %183 = mul i32 %182, %180
  %184 = and i32 %183, 1
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %186, %185
  %188 = select i1 %187, i32 1499126089, i32 732853914
  br label %.backedge

189:                                              ; preds = %21
  %190 = sext i32 %.080 to i64
  %191 = add i32 %.076, %.078
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %9, i64 0, i64 %190, i64 %192
  %194 = add i32 %.080, -1
  %195 = sext i32 %194 to i64
  %196 = sext i32 %.078 to i64
  %197 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %9, i64 0, i64 %195, i64 %196
  %198 = load i64, i64* %197, align 8
  %199 = sext i32 %.076 to i64
  %200 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %8, i64 0, i64 %190, i64 %199
  %201 = load i64, i64* %200, align 8
  %202 = mul nsw i64 %201, %198
  call void @_Z3addRll(i64* nonnull dereferenceable(8) %193, i64 %202)
  %203 = load i32, i32* @x.5, align 4
  %204 = load i32, i32* @y.6, align 4
  %205 = add i32 %203, -1
  %206 = mul i32 %205, %203
  %207 = and i32 %206, 1
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %209, %208
  %211 = select i1 %210, i32 -2028084067, i32 732853914
  br label %.backedge

212:                                              ; preds = %21
  br label %.backedge

213:                                              ; preds = %21
  %214 = add i32 %.076, 1
  br label %.backedge

215:                                              ; preds = %21
  %216 = load i32, i32* @x.5, align 4
  %217 = load i32, i32* @y.6, align 4
  %218 = add i32 %216, -1
  %219 = mul i32 %218, %216
  %220 = and i32 %219, 1
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %222, %221
  %224 = select i1 %223, i32 148856565, i32 536743040
  br label %.backedge

225:                                              ; preds = %21
  %226 = load i32, i32* @x.5, align 4
  %227 = load i32, i32* @y.6, align 4
  %228 = add i32 %226, -1
  %229 = mul i32 %228, %226
  %230 = and i32 %229, 1
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %232, %231
  %234 = select i1 %233, i32 -339076825, i32 536743040
  br label %.backedge

235:                                              ; preds = %21
  br label %.backedge

236:                                              ; preds = %21
  %237 = add i32 %.078, 1
  br label %.backedge

238:                                              ; preds = %21
  br label %.backedge

239:                                              ; preds = %21
  %240 = load i32, i32* @x.5, align 4
  %241 = load i32, i32* @y.6, align 4
  %242 = add i32 %240, -1
  %243 = mul i32 %242, %240
  %244 = and i32 %243, 1
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %246, %245
  %248 = select i1 %247, i32 1239151115, i32 -1985250700
  br label %.backedge

249:                                              ; preds = %21
  %250 = add i32 %.080, 1
  %251 = load i32, i32* @x.5, align 4
  %252 = load i32, i32* @y.6, align 4
  %253 = add i32 %251, -1
  %254 = mul i32 %253, %251
  %255 = and i32 %254, 1
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %257, %256
  %259 = select i1 %258, i32 2016636790, i32 -1985250700
  br label %.backedge

260:                                              ; preds = %21
  br label %.backedge

261:                                              ; preds = %21
  %262 = load i32, i32* @x.5, align 4
  %263 = load i32, i32* @y.6, align 4
  %264 = add i32 %262, -1
  %265 = mul i32 %264, %262
  %266 = and i32 %265, 1
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %268, %267
  %270 = select i1 %269, i32 -5105605, i32 625661902
  br label %.backedge

271:                                              ; preds = %21
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(729632) %17, i8 0, i64 729632, i1 false)
  store i64 1, i64* %18, align 8
  %272 = load i32, i32* @x.5, align 4
  %273 = load i32, i32* @y.6, align 4
  %274 = add i32 %272, -1
  %275 = mul i32 %274, %272
  %276 = and i32 %275, 1
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %278, %277
  %280 = select i1 %279, i32 1652521952, i32 625661902
  br label %.backedge

281:                                              ; preds = %21
  br label %.backedge

282:                                              ; preds = %21
  %283 = icmp slt i32 %.074, 302
  %284 = select i1 %283, i32 209970972, i32 -559573847
  br label %.backedge

285:                                              ; preds = %21
  br label %.backedge

286:                                              ; preds = %21
  %287 = load i32, i32* @x.5, align 4
  %288 = load i32, i32* @y.6, align 4
  %289 = add i32 %287, -1
  %290 = mul i32 %289, %287
  %291 = and i32 %290, 1
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %293, %292
  %295 = select i1 %294, i32 1390229562, i32 2023682102
  br label %.backedge

296:                                              ; preds = %21
  %297 = icmp slt i32 %.072, 302
  store i1 %297, i1* %1, align 1
  %298 = load i32, i32* @x.5, align 4
  %299 = load i32, i32* @y.6, align 4
  %300 = add i32 %298, -1
  %301 = mul i32 %300, %298
  %302 = and i32 %301, 1
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %304, %303
  %306 = select i1 %305, i32 -1433667655, i32 2023682102
  br label %.backedge

307:                                              ; preds = %21
  %.0..0..0.69 = load volatile i1, i1* %1, align 1
  %308 = select i1 %.0..0..0.69, i32 -1260881805, i32 -306358697
  br label %.backedge

309:                                              ; preds = %21
  %310 = load i32, i32* @x.5, align 4
  %311 = load i32, i32* @y.6, align 4
  %312 = add i32 %310, -1
  %313 = mul i32 %312, %310
  %314 = and i32 %313, 1
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %316, %315
  %318 = select i1 %317, i32 1360858513, i32 674849196
  br label %.backedge

319:                                              ; preds = %21
  %320 = load i32, i32* @x.5, align 4
  %321 = load i32, i32* @y.6, align 4
  %322 = add i32 %320, -1
  %323 = mul i32 %322, %320
  %324 = and i32 %323, 1
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %326, %325
  %328 = select i1 %327, i32 -1678577354, i32 674849196
  br label %.backedge

329:                                              ; preds = %21
  br label %.backedge

330:                                              ; preds = %21
  %331 = add i32 %.070, %.072
  %332 = icmp slt i32 %331, 302
  %333 = select i1 %332, i32 -1334818426, i32 -703530860
  br label %.backedge

334:                                              ; preds = %21
  %335 = load i32, i32* @x.5, align 4
  %336 = load i32, i32* @y.6, align 4
  %337 = add i32 %335, -1
  %338 = mul i32 %337, %335
  %339 = and i32 %338, 1
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %341, %340
  %343 = select i1 %342, i32 1309107687, i32 -1437172539
  br label %.backedge

344:                                              ; preds = %21
  %345 = sext i32 %.074 to i64
  %346 = add i32 %.070, %.072
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %10, i64 0, i64 %345, i64 %347
  %349 = add i32 %.074, -1
  %350 = sext i32 %349 to i64
  %351 = sext i32 %.072 to i64
  %352 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %10, i64 0, i64 %350, i64 %351
  %353 = load i64, i64* %352, align 8
  %354 = sext i32 %.070 to i64
  %355 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %9, i64 0, i64 %351, i64 %354
  %356 = load i64, i64* %355, align 8
  %357 = mul nsw i64 %356, %353
  call void @_Z3addRll(i64* nonnull dereferenceable(8) %348, i64 %357)
  %358 = load i32, i32* @x.5, align 4
  %359 = load i32, i32* @y.6, align 4
  %360 = add i32 %358, -1
  %361 = mul i32 %360, %358
  %362 = and i32 %361, 1
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %364, %363
  %366 = select i1 %365, i32 -952065966, i32 -1437172539
  br label %.backedge

367:                                              ; preds = %21
  br label %.backedge

368:                                              ; preds = %21
  %.neg = add i32 %.070, 1
  br label %.backedge

369:                                              ; preds = %21
  %370 = load i32, i32* @x.5, align 4
  %371 = load i32, i32* @y.6, align 4
  %372 = add i32 %370, -1
  %373 = mul i32 %372, %370
  %374 = and i32 %373, 1
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %376, %375
  %378 = select i1 %377, i32 -250704317, i32 -1360739189
  br label %.backedge

379:                                              ; preds = %21
  %380 = load i32, i32* @x.5, align 4
  %381 = load i32, i32* @y.6, align 4
  %382 = add i32 %380, -1
  %383 = mul i32 %382, %380
  %384 = and i32 %383, 1
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %386, %385
  %388 = select i1 %387, i32 213276170, i32 -1360739189
  br label %.backedge

389:                                              ; preds = %21
  br label %.backedge

390:                                              ; preds = %21
  %391 = add i32 %.072, 1
  br label %.backedge

392:                                              ; preds = %21
  br label %.backedge

393:                                              ; preds = %21
  %394 = add i32 %.074, 1
  br label %.backedge

395:                                              ; preds = %21
  %396 = load i32, i32* @x.5, align 4
  %397 = load i32, i32* @y.6, align 4
  %398 = add i32 %396, -1
  %399 = mul i32 %398, %396
  %400 = and i32 %399, 1
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %402, %401
  %404 = select i1 %403, i32 -1396775310, i32 704598216
  br label %.backedge

405:                                              ; preds = %21
  %406 = load i32, i32* %7, align 4
  %407 = sext i32 %406 to i64
  %408 = load i32, i32* %6, align 4
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %10, i64 0, i64 %407, i64 %409
  %411 = load i64, i64* %410, align 8
  %412 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEl(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %411)
  %413 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %412, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %414 = load i32, i32* @x.5, align 4
  %415 = load i32, i32* @y.6, align 4
  %416 = add i32 %414, -1
  %417 = mul i32 %416, %414
  %418 = and i32 %417, 1
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %420, %419
  %422 = select i1 %421, i32 646322619, i32 704598216
  br label %.backedge

423:                                              ; preds = %21
  ret i32 0

424:                                              ; preds = %21
  br label %.backedge

425:                                              ; preds = %21
  %426 = sext i32 %.084 to i64
  %427 = add i32 %.082, -1
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %8, i64 0, i64 %426, i64 %428
  %430 = load i64, i64* %429, align 8
  %431 = mul nsw i64 %430, %426
  %432 = load i64, i64* @MOD, align 8
  %433 = srem i64 %431, %432
  %434 = sext i32 %.082 to i64
  %435 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %8, i64 0, i64 %426, i64 %434
  store i64 %433, i64* %435, align 8
  br label %.backedge

436:                                              ; preds = %21
  %437 = add i32 %.082, 1
  br label %.backedge

438:                                              ; preds = %21
  br label %.backedge

439:                                              ; preds = %21
  br label %.backedge

440:                                              ; preds = %21
  br label %.backedge

441:                                              ; preds = %21
  %442 = sext i32 %.080 to i64
  %443 = add i32 %.076, %.078
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %9, i64 0, i64 %442, i64 %444
  %446 = add i32 %.080, -1
  %447 = sext i32 %446 to i64
  %448 = sext i32 %.078 to i64
  %449 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %9, i64 0, i64 %447, i64 %448
  %450 = load i64, i64* %449, align 8
  %451 = sext i32 %.076 to i64
  %452 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %8, i64 0, i64 %442, i64 %451
  %453 = load i64, i64* %452, align 8
  %454 = mul nsw i64 %453, %450
  call void @_Z3addRll(i64* nonnull dereferenceable(8) %445, i64 %454)
  br label %.backedge

455:                                              ; preds = %21
  br label %.backedge

456:                                              ; preds = %21
  %457 = add i32 %.080, 1
  br label %.backedge

458:                                              ; preds = %21
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(729632) %17, i8 0, i64 729632, i1 false)
  store i64 1, i64* %18, align 8
  br label %.backedge

459:                                              ; preds = %21
  br label %.backedge

460:                                              ; preds = %21
  br label %.backedge

461:                                              ; preds = %21
  %462 = sext i32 %.074 to i64
  %463 = add i32 %.070, %.072
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %10, i64 0, i64 %462, i64 %464
  %466 = add i32 %.074, -1
  %467 = sext i32 %466 to i64
  %468 = sext i32 %.072 to i64
  %469 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %10, i64 0, i64 %467, i64 %468
  %470 = load i64, i64* %469, align 8
  %471 = sext i32 %.070 to i64
  %472 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %9, i64 0, i64 %468, i64 %471
  %473 = load i64, i64* %472, align 8
  %474 = mul nsw i64 %473, %470
  call void @_Z3addRll(i64* nonnull dereferenceable(8) %465, i64 %474)
  br label %.backedge

475:                                              ; preds = %21
  br label %.backedge

476:                                              ; preds = %21
  %477 = load i32, i32* %7, align 4
  %478 = sext i32 %477 to i64
  %479 = load i32, i32* %6, align 4
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds [302 x [302 x i64]], [302 x [302 x i64]]* %10, i64 0, i64 %478, i64 %480
  %482 = load i64, i64* %481, align 8
  %483 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEl(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %482)
  %484 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %483, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERl(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEl(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s940235401.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.7, align 4
  %4 = load i32, i32* @y.8, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 466347699, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 466347699, label %11
    i32 -302341016, label %14
    i32 -2031311291, label %24
    i32 358001467, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -302341016, i32 358001467
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.7, align 4
  %16 = load i32, i32* @y.8, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -2031311291, i32 358001467
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -302341016, %25 ]
  br label %.outer
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { mustprogress nofree noinline norecurse nosync nounwind uwtable willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
