; ModuleID = 'build_ollvm/programs/p03349/s566050224.ll'
source_filename = "Project_CodeNet_C++1400/p03349/s566050224.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@m = global i32 0, align 4
@MOD = global i32 0, align 4
@f = local_unnamed_addr global [305 x [305 x i64]] zeroinitializer, align 16
@g = local_unnamed_addr global [305 x [305 x i64]] zeroinitializer, align 16
@.str = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s566050224.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1048629942, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1048629942, label %11
    i32 888544161, label %14
    i32 -125748966, label %25
    i32 502299, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 888544161, i32 502299
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -125748966, i32 502299
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 888544161, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32* nonnull @n, i32* nonnull @m, i32* nonnull @MOD)
  br label %6

6:                                                ; preds = %.backedge, %0
  %.075 = phi i32 [ 0, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i32 [ undef, %0 ], [ %.067.be, %.backedge ]
  %.065 = phi i32 [ undef, %0 ], [ %.065.be, %.backedge ]
  %.063 = phi i32 [ undef, %0 ], [ %.063.be, %.backedge ]
  %.061 = phi i32 [ undef, %0 ], [ %.061.be, %.backedge ]
  %.0 = phi i32 [ 714398609, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 714398609, label %7
    i32 1478059748, label %17
    i32 -2129074004, label %29
    i32 -470916473, label %31
    i32 -815649585, label %32
    i32 -873730147, label %42
    i32 2104673504, label %54
    i32 291930578, label %56
    i32 1959169216, label %59
    i32 -230545692, label %69
    i32 401717839, label %79
    i32 -1069693786, label %80
    i32 -805299941, label %81
    i32 -1928739197, label %91
    i32 -635057409, label %102
    i32 49105701, label %104
    i32 -1743254270, label %105
    i32 2005315757, label %108
    i32 172623549, label %117
    i32 967678608, label %132
    i32 -988264936, label %142
    i32 -218634660, label %152
    i32 1220873466, label %153
    i32 -33052063, label %163
    i32 -740184791, label %173
    i32 -365851535, label %174
    i32 716072326, label %184
    i32 -794476351, label %194
    i32 1222603819, label %195
    i32 1875124794, label %197
    i32 100221772, label %198
    i32 623732708, label %201
    i32 1033648597, label %211
    i32 -118985433, label %224
    i32 1343949761, label %226
    i32 1131326720, label %234
    i32 -1623666097, label %244
    i32 -1645374055, label %254
    i32 1571942465, label %255
    i32 858483836, label %265
    i32 -967015805, label %275
    i32 1099531306, label %276
    i32 1330916915, label %277
    i32 -1104110071, label %278
    i32 1936281861, label %279
    i32 240005842, label %282
    i32 1001503119, label %283
    i32 1776628942, label %286
    i32 -516410299, label %296
    i32 1360172157, label %306
    i32 1487424580, label %307
    i32 896527522, label %309
    i32 1981982488, label %319
    i32 1808455893, label %345
    i32 -637938639, label %346
    i32 -828161315, label %348
    i32 462910825, label %349
    i32 501629644, label %350
    i32 820977803, label %351
    i32 -1681837090, label %353
    i32 -1048875065, label %363
    i32 -1219336242, label %380
    i32 -1057749793, label %381
    i32 646587686, label %382
    i32 -1334157745, label %383
    i32 928557954, label %385
    i32 1093976430, label %386
    i32 -1922442334, label %387
    i32 -1883334878, label %389
    i32 -1008415749, label %390
    i32 957244146, label %391
    i32 -1648264884, label %392
    i32 -1389737432, label %394
    i32 -1124479079, label %395
    i32 -546943169, label %412
  ]

.backedge:                                        ; preds = %6, %412, %395, %394, %392, %391, %390, %389, %387, %386, %385, %383, %382, %381, %363, %353, %351, %350, %349, %348, %346, %345, %319, %309, %307, %306, %296, %286, %283, %282, %279, %278, %277, %276, %275, %265, %255, %254, %244, %234, %226, %224, %211, %201, %198, %197, %195, %194, %184, %174, %173, %163, %153, %152, %142, %132, %117, %108, %105, %104, %102, %91, %81, %80, %79, %69, %59, %56, %54, %42, %32, %31, %29, %17, %7
  %.075.be = phi i32 [ %.075, %6 ], [ %.075, %412 ], [ %.075, %395 ], [ %.075, %394 ], [ %.075, %392 ], [ %.075, %391 ], [ %.075, %390 ], [ %.075, %389 ], [ %.075, %387 ], [ %.075, %386 ], [ %.075, %385 ], [ %.075, %383 ], [ %.075, %382 ], [ %.075, %381 ], [ %.075, %363 ], [ %.075, %353 ], [ %.075, %351 ], [ %.075, %350 ], [ %.075, %349 ], [ %.075, %348 ], [ %.075, %346 ], [ %.075, %345 ], [ %.075, %319 ], [ %.075, %309 ], [ %.075, %307 ], [ %.075, %306 ], [ %.075, %296 ], [ %.075, %286 ], [ %.075, %283 ], [ %.075, %282 ], [ %.075, %279 ], [ %.075, %278 ], [ %.neg79, %277 ], [ %.075, %276 ], [ %.075, %275 ], [ %.075, %265 ], [ %.075, %255 ], [ %.075, %254 ], [ %.075, %244 ], [ %.075, %234 ], [ %.075, %226 ], [ %.075, %224 ], [ %.075, %211 ], [ %.075, %201 ], [ %.075, %198 ], [ %.075, %197 ], [ %.075, %195 ], [ %.075, %194 ], [ %.075, %184 ], [ %.075, %174 ], [ %.075, %173 ], [ %.075, %163 ], [ %.075, %153 ], [ %.075, %152 ], [ %.075, %142 ], [ %.075, %132 ], [ %.075, %117 ], [ %.075, %108 ], [ %.075, %105 ], [ %.075, %104 ], [ %.075, %102 ], [ %.075, %91 ], [ %.075, %81 ], [ %.075, %80 ], [ %.075, %79 ], [ %.075, %69 ], [ %.075, %59 ], [ %.075, %56 ], [ %.075, %54 ], [ %.075, %42 ], [ %.075, %32 ], [ %.075, %31 ], [ %.075, %29 ], [ %.075, %17 ], [ %.075, %7 ]
  %.073.be = phi i32 [ %.073, %6 ], [ %.073, %412 ], [ %.073, %395 ], [ %.073, %394 ], [ %.073, %392 ], [ %.073, %391 ], [ %.073, %390 ], [ %.073, %389 ], [ %.073, %387 ], [ %.073, %386 ], [ %.073, %385 ], [ %384, %383 ], [ %.073, %382 ], [ %.073, %381 ], [ %.073, %363 ], [ %.073, %353 ], [ %.073, %351 ], [ %.073, %350 ], [ %.073, %349 ], [ %.073, %348 ], [ %.073, %346 ], [ %.073, %345 ], [ %.073, %319 ], [ %.073, %309 ], [ %.073, %307 ], [ %.073, %306 ], [ %.073, %296 ], [ %.073, %286 ], [ %.073, %283 ], [ %.073, %282 ], [ %.073, %279 ], [ %.073, %278 ], [ %.073, %277 ], [ %.073, %276 ], [ %.073, %275 ], [ %.073, %265 ], [ %.073, %255 ], [ %.073, %254 ], [ %.073, %244 ], [ %.073, %234 ], [ %.073, %226 ], [ %.073, %224 ], [ %.073, %211 ], [ %.073, %201 ], [ %.073, %198 ], [ %.073, %197 ], [ %.073, %195 ], [ %.073, %194 ], [ %.073, %184 ], [ %.073, %174 ], [ %.073, %173 ], [ %.073, %163 ], [ %.073, %153 ], [ %.073, %152 ], [ %.073, %142 ], [ %.073, %132 ], [ %.073, %117 ], [ %.073, %108 ], [ %.073, %105 ], [ %.073, %104 ], [ %.073, %102 ], [ %.073, %91 ], [ %.073, %81 ], [ %.073, %80 ], [ %.073, %79 ], [ %.neg86, %69 ], [ %.073, %59 ], [ %.073, %56 ], [ %.073, %54 ], [ %.073, %42 ], [ %.073, %32 ], [ 0, %31 ], [ %.073, %29 ], [ %.073, %17 ], [ %.073, %7 ]
  %.071.be = phi i32 [ %.071, %6 ], [ %.071, %412 ], [ %.071, %395 ], [ %.071, %394 ], [ %.071, %392 ], [ %.071, %391 ], [ %.071, %390 ], [ %.071, %389 ], [ %.071, %387 ], [ %.071, %386 ], [ %.071, %385 ], [ %.071, %383 ], [ %.071, %382 ], [ %.071, %381 ], [ %.071, %363 ], [ %.071, %353 ], [ %.071, %351 ], [ %.071, %350 ], [ %.071, %349 ], [ %.071, %348 ], [ %.071, %346 ], [ %.071, %345 ], [ %.071, %319 ], [ %.071, %309 ], [ %.071, %307 ], [ %.071, %306 ], [ %.071, %296 ], [ %.071, %286 ], [ %.071, %283 ], [ %.071, %282 ], [ %.071, %279 ], [ %.071, %278 ], [ %.071, %277 ], [ %.071, %276 ], [ %.071, %275 ], [ %.071, %265 ], [ %.071, %255 ], [ %.071, %254 ], [ %.071, %244 ], [ %.071, %234 ], [ %.071, %226 ], [ %.071, %224 ], [ %.071, %211 ], [ %.071, %201 ], [ %.071, %198 ], [ %.071, %197 ], [ %196, %195 ], [ %.071, %194 ], [ %.071, %184 ], [ %.071, %174 ], [ %.071, %173 ], [ %.071, %163 ], [ %.071, %153 ], [ %.071, %152 ], [ %.071, %142 ], [ %.071, %132 ], [ %.071, %117 ], [ %.071, %108 ], [ %.071, %105 ], [ %.071, %104 ], [ %.071, %102 ], [ %.071, %91 ], [ %.071, %81 ], [ 1, %80 ], [ %.071, %79 ], [ %.071, %69 ], [ %.071, %59 ], [ %.071, %56 ], [ %.071, %54 ], [ %.071, %42 ], [ %.071, %32 ], [ %.071, %31 ], [ %.071, %29 ], [ %.071, %17 ], [ %.071, %7 ]
  %.069.be = phi i32 [ %.069, %6 ], [ %.069, %412 ], [ %.069, %395 ], [ %.069, %394 ], [ %.069, %392 ], [ %.069, %391 ], [ %.069, %390 ], [ %.069, %389 ], [ %388, %387 ], [ %.069, %386 ], [ %.069, %385 ], [ %.069, %383 ], [ %.069, %382 ], [ %.069, %381 ], [ %.069, %363 ], [ %.069, %353 ], [ %.069, %351 ], [ %.069, %350 ], [ %.069, %349 ], [ %.069, %348 ], [ %.069, %346 ], [ %.069, %345 ], [ %.069, %319 ], [ %.069, %309 ], [ %.069, %307 ], [ %.069, %306 ], [ %.069, %296 ], [ %.069, %286 ], [ %.069, %283 ], [ %.069, %282 ], [ %.069, %279 ], [ %.069, %278 ], [ %.069, %277 ], [ %.069, %276 ], [ %.069, %275 ], [ %.069, %265 ], [ %.069, %255 ], [ %.069, %254 ], [ %.069, %244 ], [ %.069, %234 ], [ %.069, %226 ], [ %.069, %224 ], [ %.069, %211 ], [ %.069, %201 ], [ %.069, %198 ], [ %.069, %197 ], [ %.069, %195 ], [ %.069, %194 ], [ %.069, %184 ], [ %.069, %174 ], [ %.069, %173 ], [ %.neg82, %163 ], [ %.069, %153 ], [ %.069, %152 ], [ %.069, %142 ], [ %.069, %132 ], [ %.069, %117 ], [ %.069, %108 ], [ %.069, %105 ], [ 0, %104 ], [ %.069, %102 ], [ %.069, %91 ], [ %.069, %81 ], [ %.069, %80 ], [ %.069, %79 ], [ %.069, %69 ], [ %.069, %59 ], [ %.069, %56 ], [ %.069, %54 ], [ %.069, %42 ], [ %.069, %32 ], [ %.069, %31 ], [ %.069, %29 ], [ %.069, %17 ], [ %.069, %7 ]
  %.067.be = phi i32 [ %.067, %6 ], [ %.067, %412 ], [ %.067, %395 ], [ %.067, %394 ], [ %393, %392 ], [ %.067, %391 ], [ %.067, %390 ], [ %.067, %389 ], [ %.067, %387 ], [ %.067, %386 ], [ %.067, %385 ], [ %.067, %383 ], [ %.067, %382 ], [ %.067, %381 ], [ %.067, %363 ], [ %.067, %353 ], [ %.067, %351 ], [ %.067, %350 ], [ %.067, %349 ], [ %.067, %348 ], [ %.067, %346 ], [ %.067, %345 ], [ %.067, %319 ], [ %.067, %309 ], [ %.067, %307 ], [ %.067, %306 ], [ %.067, %296 ], [ %.067, %286 ], [ %.067, %283 ], [ %.067, %282 ], [ %.067, %279 ], [ %.067, %278 ], [ %.067, %277 ], [ %.067, %276 ], [ %.067, %275 ], [ %.neg80, %265 ], [ %.067, %255 ], [ %.067, %254 ], [ %.067, %244 ], [ %.067, %234 ], [ %.067, %226 ], [ %.067, %224 ], [ %.067, %211 ], [ %.067, %201 ], [ %.067, %198 ], [ 0, %197 ], [ %.067, %195 ], [ %.067, %194 ], [ %.067, %184 ], [ %.067, %174 ], [ %.067, %173 ], [ %.067, %163 ], [ %.067, %153 ], [ %.067, %152 ], [ %.067, %142 ], [ %.067, %132 ], [ %.067, %117 ], [ %.067, %108 ], [ %.067, %105 ], [ %.067, %104 ], [ %.067, %102 ], [ %.067, %91 ], [ %.067, %81 ], [ %.067, %80 ], [ %.067, %79 ], [ %.067, %69 ], [ %.067, %59 ], [ %.067, %56 ], [ %.067, %54 ], [ %.067, %42 ], [ %.067, %32 ], [ %.067, %31 ], [ %.067, %29 ], [ %.067, %17 ], [ %.067, %7 ]
  %.065.be = phi i32 [ %.065, %6 ], [ %.065, %412 ], [ %.065, %395 ], [ %.065, %394 ], [ %.065, %392 ], [ %.065, %391 ], [ %.065, %390 ], [ %.065, %389 ], [ %.065, %387 ], [ %.065, %386 ], [ %.065, %385 ], [ %.065, %383 ], [ %.065, %382 ], [ %.065, %381 ], [ %.065, %363 ], [ %.065, %353 ], [ %352, %351 ], [ %.065, %350 ], [ %.065, %349 ], [ %.065, %348 ], [ %.065, %346 ], [ %.065, %345 ], [ %.065, %319 ], [ %.065, %309 ], [ %.065, %307 ], [ %.065, %306 ], [ %.065, %296 ], [ %.065, %286 ], [ %.065, %283 ], [ %.065, %282 ], [ %.065, %279 ], [ 1, %278 ], [ %.065, %277 ], [ %.065, %276 ], [ %.065, %275 ], [ %.065, %265 ], [ %.065, %255 ], [ %.065, %254 ], [ %.065, %244 ], [ %.065, %234 ], [ %.065, %226 ], [ %.065, %224 ], [ %.065, %211 ], [ %.065, %201 ], [ %.065, %198 ], [ %.065, %197 ], [ %.065, %195 ], [ %.065, %194 ], [ %.065, %184 ], [ %.065, %174 ], [ %.065, %173 ], [ %.065, %163 ], [ %.065, %153 ], [ %.065, %152 ], [ %.065, %142 ], [ %.065, %132 ], [ %.065, %117 ], [ %.065, %108 ], [ %.065, %105 ], [ %.065, %104 ], [ %.065, %102 ], [ %.065, %91 ], [ %.065, %81 ], [ %.065, %80 ], [ %.065, %79 ], [ %.065, %69 ], [ %.065, %59 ], [ %.065, %56 ], [ %.065, %54 ], [ %.065, %42 ], [ %.065, %32 ], [ %.065, %31 ], [ %.065, %29 ], [ %.065, %17 ], [ %.065, %7 ]
  %.063.be = phi i32 [ %.063, %6 ], [ %.063, %412 ], [ %.063, %395 ], [ %.063, %394 ], [ %.063, %392 ], [ %.063, %391 ], [ %.063, %390 ], [ %.063, %389 ], [ %.063, %387 ], [ %.063, %386 ], [ %.063, %385 ], [ %.063, %383 ], [ %.063, %382 ], [ %.063, %381 ], [ %.063, %363 ], [ %.063, %353 ], [ %.063, %351 ], [ %.063, %350 ], [ %.neg, %349 ], [ %.063, %348 ], [ %.063, %346 ], [ %.063, %345 ], [ %.063, %319 ], [ %.063, %309 ], [ %.063, %307 ], [ %.063, %306 ], [ %.063, %296 ], [ %.063, %286 ], [ %.063, %283 ], [ 0, %282 ], [ %.063, %279 ], [ %.063, %278 ], [ %.063, %277 ], [ %.063, %276 ], [ %.063, %275 ], [ %.063, %265 ], [ %.063, %255 ], [ %.063, %254 ], [ %.063, %244 ], [ %.063, %234 ], [ %.063, %226 ], [ %.063, %224 ], [ %.063, %211 ], [ %.063, %201 ], [ %.063, %198 ], [ %.063, %197 ], [ %.063, %195 ], [ %.063, %194 ], [ %.063, %184 ], [ %.063, %174 ], [ %.063, %173 ], [ %.063, %163 ], [ %.063, %153 ], [ %.063, %152 ], [ %.063, %142 ], [ %.063, %132 ], [ %.063, %117 ], [ %.063, %108 ], [ %.063, %105 ], [ %.063, %104 ], [ %.063, %102 ], [ %.063, %91 ], [ %.063, %81 ], [ %.063, %80 ], [ %.063, %79 ], [ %.063, %69 ], [ %.063, %59 ], [ %.063, %56 ], [ %.063, %54 ], [ %.063, %42 ], [ %.063, %32 ], [ %.063, %31 ], [ %.063, %29 ], [ %.063, %17 ], [ %.063, %7 ]
  %.061.be = phi i32 [ %.061, %6 ], [ %.061, %412 ], [ %.061, %395 ], [ 0, %394 ], [ %.061, %392 ], [ %.061, %391 ], [ %.061, %390 ], [ %.061, %389 ], [ %.061, %387 ], [ %.061, %386 ], [ %.061, %385 ], [ %.061, %383 ], [ %.061, %382 ], [ %.061, %381 ], [ %.061, %363 ], [ %.061, %353 ], [ %.061, %351 ], [ %.061, %350 ], [ %.061, %349 ], [ %.061, %348 ], [ %347, %346 ], [ %.061, %345 ], [ %.061, %319 ], [ %.061, %309 ], [ %.061, %307 ], [ %.061, %306 ], [ 0, %296 ], [ %.061, %286 ], [ %.061, %283 ], [ %.061, %282 ], [ %.061, %279 ], [ %.061, %278 ], [ %.061, %277 ], [ %.061, %276 ], [ %.061, %275 ], [ %.061, %265 ], [ %.061, %255 ], [ %.061, %254 ], [ %.061, %244 ], [ %.061, %234 ], [ %.061, %226 ], [ %.061, %224 ], [ %.061, %211 ], [ %.061, %201 ], [ %.061, %198 ], [ %.061, %197 ], [ %.061, %195 ], [ %.061, %194 ], [ %.061, %184 ], [ %.061, %174 ], [ %.061, %173 ], [ %.061, %163 ], [ %.061, %153 ], [ %.061, %152 ], [ %.061, %142 ], [ %.061, %132 ], [ %.061, %117 ], [ %.061, %108 ], [ %.061, %105 ], [ %.061, %104 ], [ %.061, %102 ], [ %.061, %91 ], [ %.061, %81 ], [ %.061, %80 ], [ %.061, %79 ], [ %.061, %69 ], [ %.061, %59 ], [ %.061, %56 ], [ %.061, %54 ], [ %.061, %42 ], [ %.061, %32 ], [ %.061, %31 ], [ %.061, %29 ], [ %.061, %17 ], [ %.061, %7 ]
  %.0.be = phi i32 [ %.0, %6 ], [ -1048875065, %412 ], [ 1981982488, %395 ], [ -516410299, %394 ], [ 858483836, %392 ], [ -1623666097, %391 ], [ 1033648597, %390 ], [ 716072326, %389 ], [ -33052063, %387 ], [ -988264936, %386 ], [ -1928739197, %385 ], [ -230545692, %383 ], [ -873730147, %382 ], [ 1478059748, %381 ], [ %379, %363 ], [ %362, %353 ], [ 1936281861, %351 ], [ 820977803, %350 ], [ 1001503119, %349 ], [ 462910825, %348 ], [ 1487424580, %346 ], [ -637938639, %345 ], [ %344, %319 ], [ %318, %309 ], [ %308, %307 ], [ 1487424580, %306 ], [ %305, %296 ], [ %295, %286 ], [ %285, %283 ], [ 1001503119, %282 ], [ %281, %279 ], [ 1936281861, %278 ], [ 714398609, %277 ], [ 1330916915, %276 ], [ 100221772, %275 ], [ %274, %265 ], [ %264, %255 ], [ 1571942465, %254 ], [ %253, %244 ], [ %243, %234 ], [ 1131326720, %226 ], [ %225, %224 ], [ %223, %211 ], [ %210, %201 ], [ %200, %198 ], [ 100221772, %197 ], [ -805299941, %195 ], [ 1222603819, %194 ], [ %193, %184 ], [ %183, %174 ], [ -1743254270, %173 ], [ %172, %163 ], [ %162, %153 ], [ 1220873466, %152 ], [ %151, %142 ], [ %141, %132 ], [ 967678608, %117 ], [ %116, %108 ], [ %107, %105 ], [ -1743254270, %104 ], [ %103, %102 ], [ %101, %91 ], [ %90, %81 ], [ -805299941, %80 ], [ -815649585, %79 ], [ %78, %69 ], [ %68, %59 ], [ 1959169216, %56 ], [ %55, %54 ], [ %53, %42 ], [ %41, %32 ], [ -815649585, %31 ], [ %30, %29 ], [ %28, %17 ], [ %16, %7 ]
  br label %6

7:                                                ; preds = %6
  %8 = load i32, i32* @x.2, align 4
  %9 = load i32, i32* @y.3, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 1478059748, i32 -1057749793
  br label %.backedge

17:                                               ; preds = %6
  %18 = load i32, i32* @n, align 4
  %19 = icmp sle i32 %.075, %18
  store i1 %19, i1* %4, align 1
  %20 = load i32, i32* @x.2, align 4
  %21 = load i32, i32* @y.3, align 4
  %22 = add i32 %20, -1
  %23 = mul i32 %22, %20
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %26, %25
  %28 = select i1 %27, i32 -2129074004, i32 -1057749793
  br label %.backedge

29:                                               ; preds = %6
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %30 = select i1 %.0..0..0., i32 -470916473, i32 -1104110071
  br label %.backedge

31:                                               ; preds = %6
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(744200) bitcast ([305 x [305 x i64]]* @f to i8*), i8 0, i64 744200, i1 false)
  br label %.backedge

32:                                               ; preds = %6
  %33 = load i32, i32* @x.2, align 4
  %34 = load i32, i32* @y.3, align 4
  %35 = add i32 %33, -1
  %36 = mul i32 %35, %33
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %39, %38
  %41 = select i1 %40, i32 -873730147, i32 646587686
  br label %.backedge

42:                                               ; preds = %6
  %43 = load i32, i32* @n, align 4
  %44 = icmp sle i32 %.073, %43
  store i1 %44, i1* %3, align 1
  %45 = load i32, i32* @x.2, align 4
  %46 = load i32, i32* @y.3, align 4
  %47 = add i32 %45, -1
  %48 = mul i32 %47, %45
  %49 = and i32 %48, 1
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %51, %50
  %53 = select i1 %52, i32 2104673504, i32 646587686
  br label %.backedge

54:                                               ; preds = %6
  %.0..0..0.58 = load volatile i1, i1* %3, align 1
  %55 = select i1 %.0..0..0.58, i32 291930578, i32 -1069693786
  br label %.backedge

56:                                               ; preds = %6
  %57 = sext i32 %.073 to i64
  %58 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 0, i64 %57
  store i64 1, i64* %58, align 8
  br label %.backedge

59:                                               ; preds = %6
  %60 = load i32, i32* @x.2, align 4
  %61 = load i32, i32* @y.3, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -230545692, i32 -1334157745
  br label %.backedge

69:                                               ; preds = %6
  %.neg86 = add i32 %.073, 1
  %70 = load i32, i32* @x.2, align 4
  %71 = load i32, i32* @y.3, align 4
  %72 = add i32 %70, -1
  %73 = mul i32 %72, %70
  %74 = and i32 %73, 1
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %76, %75
  %78 = select i1 %77, i32 401717839, i32 -1334157745
  br label %.backedge

79:                                               ; preds = %6
  br label %.backedge

80:                                               ; preds = %6
  br label %.backedge

81:                                               ; preds = %6
  %82 = load i32, i32* @x.2, align 4
  %83 = load i32, i32* @y.3, align 4
  %84 = add i32 %82, -1
  %85 = mul i32 %84, %82
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %88, %87
  %90 = select i1 %89, i32 -1928739197, i32 928557954
  br label %.backedge

91:                                               ; preds = %6
  %92 = icmp sle i32 %.071, %.075
  store i1 %92, i1* %2, align 1
  %93 = load i32, i32* @x.2, align 4
  %94 = load i32, i32* @y.3, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 -635057409, i32 928557954
  br label %.backedge

102:                                              ; preds = %6
  %.0..0..0.59 = load volatile i1, i1* %2, align 1
  %103 = select i1 %.0..0..0.59, i32 49105701, i32 1875124794
  br label %.backedge

104:                                              ; preds = %6
  br label %.backedge

105:                                              ; preds = %6
  %106 = load i32, i32* @n, align 4
  %.not85 = icmp sgt i32 %.069, %106
  %107 = select i1 %.not85, i32 -365851535, i32 2005315757
  br label %.backedge

108:                                              ; preds = %6
  %109 = add i32 %.071, -1
  %110 = sext i32 %109 to i64
  %111 = sext i32 %.069 to i64
  %112 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %110, i64 %111
  %113 = load i64, i64* %112, align 8
  %114 = sext i32 %.071 to i64
  %115 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %114, i64 %111
  store i64 %113, i64* %115, align 8
  %.not84 = icmp eq i32 %.069, 0
  %116 = select i1 %.not84, i32 967678608, i32 172623549
  br label %.backedge

117:                                              ; preds = %6
  %118 = load i32, i32* @MOD, align 4
  %119 = sext i32 %118 to i64
  %120 = sext i32 %.071 to i64
  %121 = add i32 %.069, -1
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %120, i64 %122
  %124 = load i64, i64* %123, align 8
  %.neg83 = add i32 %.071, 1
  %125 = sext i32 %.neg83 to i64
  %126 = mul nsw i64 %124, %125
  %127 = sext i32 %.069 to i64
  %128 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %120, i64 %127
  %129 = load i64, i64* %128, align 8
  %130 = add i64 %129, %126
  %131 = srem i64 %130, %119
  store i64 %131, i64* %128, align 8
  br label %.backedge

132:                                              ; preds = %6
  %133 = load i32, i32* @x.2, align 4
  %134 = load i32, i32* @y.3, align 4
  %135 = add i32 %133, -1
  %136 = mul i32 %135, %133
  %137 = and i32 %136, 1
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %139, %138
  %141 = select i1 %140, i32 -988264936, i32 1093976430
  br label %.backedge

142:                                              ; preds = %6
  %143 = load i32, i32* @x.2, align 4
  %144 = load i32, i32* @y.3, align 4
  %145 = add i32 %143, -1
  %146 = mul i32 %145, %143
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %149, %148
  %151 = select i1 %150, i32 -218634660, i32 1093976430
  br label %.backedge

152:                                              ; preds = %6
  br label %.backedge

153:                                              ; preds = %6
  %154 = load i32, i32* @x.2, align 4
  %155 = load i32, i32* @y.3, align 4
  %156 = add i32 %154, -1
  %157 = mul i32 %156, %154
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %160, %159
  %162 = select i1 %161, i32 -33052063, i32 -1922442334
  br label %.backedge

163:                                              ; preds = %6
  %.neg82 = add i32 %.069, 1
  %164 = load i32, i32* @x.2, align 4
  %165 = load i32, i32* @y.3, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 -740184791, i32 -1922442334
  br label %.backedge

173:                                              ; preds = %6
  br label %.backedge

174:                                              ; preds = %6
  %175 = load i32, i32* @x.2, align 4
  %176 = load i32, i32* @y.3, align 4
  %177 = add i32 %175, -1
  %178 = mul i32 %177, %175
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %181, %180
  %183 = select i1 %182, i32 716072326, i32 -1883334878
  br label %.backedge

184:                                              ; preds = %6
  %185 = load i32, i32* @x.2, align 4
  %186 = load i32, i32* @y.3, align 4
  %187 = add i32 %185, -1
  %188 = mul i32 %187, %185
  %189 = and i32 %188, 1
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %191, %190
  %193 = select i1 %192, i32 -794476351, i32 -1883334878
  br label %.backedge

194:                                              ; preds = %6
  br label %.backedge

195:                                              ; preds = %6
  %196 = add i32 %.071, 1
  br label %.backedge

197:                                              ; preds = %6
  br label %.backedge

198:                                              ; preds = %6
  %199 = load i32, i32* @n, align 4
  %.not81 = icmp sgt i32 %.067, %199
  %200 = select i1 %.not81, i32 1099531306, i32 623732708
  br label %.backedge

201:                                              ; preds = %6
  %202 = load i32, i32* @x.2, align 4
  %203 = load i32, i32* @y.3, align 4
  %204 = add i32 %202, -1
  %205 = mul i32 %204, %202
  %206 = and i32 %205, 1
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %208, %207
  %210 = select i1 %209, i32 1033648597, i32 -1008415749
  br label %.backedge

211:                                              ; preds = %6
  %212 = add i32 %.067, %.075
  %213 = load i32, i32* @n, align 4
  %214 = icmp sle i32 %212, %213
  store i1 %214, i1* %1, align 1
  %215 = load i32, i32* @x.2, align 4
  %216 = load i32, i32* @y.3, align 4
  %217 = add i32 %215, -1
  %218 = mul i32 %217, %215
  %219 = and i32 %218, 1
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %221, %220
  %223 = select i1 %222, i32 -118985433, i32 -1008415749
  br label %.backedge

224:                                              ; preds = %6
  %.0..0..0.60 = load volatile i1, i1* %1, align 1
  %225 = select i1 %.0..0..0.60, i32 1343949761, i32 1131326720
  br label %.backedge

226:                                              ; preds = %6
  %227 = sext i32 %.075 to i64
  %228 = sext i32 %.067 to i64
  %229 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %227, i64 %228
  %230 = load i64, i64* %229, align 8
  %231 = add i32 %.067, %.075
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @g, i64 0, i64 %227, i64 %232
  store i64 %230, i64* %233, align 8
  br label %.backedge

234:                                              ; preds = %6
  %235 = load i32, i32* @x.2, align 4
  %236 = load i32, i32* @y.3, align 4
  %237 = add i32 %235, -1
  %238 = mul i32 %237, %235
  %239 = and i32 %238, 1
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %241, %240
  %243 = select i1 %242, i32 -1623666097, i32 957244146
  br label %.backedge

244:                                              ; preds = %6
  %245 = load i32, i32* @x.2, align 4
  %246 = load i32, i32* @y.3, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 -1645374055, i32 957244146
  br label %.backedge

254:                                              ; preds = %6
  br label %.backedge

255:                                              ; preds = %6
  %256 = load i32, i32* @x.2, align 4
  %257 = load i32, i32* @y.3, align 4
  %258 = add i32 %256, -1
  %259 = mul i32 %258, %256
  %260 = and i32 %259, 1
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %262, %261
  %264 = select i1 %263, i32 858483836, i32 -1648264884
  br label %.backedge

265:                                              ; preds = %6
  %.neg80 = add i32 %.067, 1
  %266 = load i32, i32* @x.2, align 4
  %267 = load i32, i32* @y.3, align 4
  %268 = add i32 %266, -1
  %269 = mul i32 %268, %266
  %270 = and i32 %269, 1
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %272, %271
  %274 = select i1 %273, i32 -967015805, i32 -1648264884
  br label %.backedge

275:                                              ; preds = %6
  br label %.backedge

276:                                              ; preds = %6
  br label %.backedge

277:                                              ; preds = %6
  %.neg79 = add i32 %.075, 1
  br label %.backedge

278:                                              ; preds = %6
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(744200) bitcast ([305 x [305 x i64]]* @f to i8*), i8 0, i64 744200, i1 false)
  store i64 1, i64* getelementptr inbounds ([305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 0, i64 0), align 16
  br label %.backedge

279:                                              ; preds = %6
  %280 = load i32, i32* @m, align 4
  %.not78 = icmp sgt i32 %.065, %280
  %281 = select i1 %.not78, i32 -1681837090, i32 240005842
  br label %.backedge

282:                                              ; preds = %6
  br label %.backedge

283:                                              ; preds = %6
  %284 = load i32, i32* @n, align 4
  %.not77 = icmp sgt i32 %.063, %284
  %285 = select i1 %.not77, i32 501629644, i32 1776628942
  br label %.backedge

286:                                              ; preds = %6
  %287 = load i32, i32* @x.2, align 4
  %288 = load i32, i32* @y.3, align 4
  %289 = add i32 %287, -1
  %290 = mul i32 %289, %287
  %291 = and i32 %290, 1
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %293, %292
  %295 = select i1 %294, i32 -516410299, i32 -1389737432
  br label %.backedge

296:                                              ; preds = %6
  %297 = load i32, i32* @x.2, align 4
  %298 = load i32, i32* @y.3, align 4
  %299 = add i32 %297, -1
  %300 = mul i32 %299, %297
  %301 = and i32 %300, 1
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %303, %302
  %305 = select i1 %304, i32 1360172157, i32 -1389737432
  br label %.backedge

306:                                              ; preds = %6
  br label %.backedge

307:                                              ; preds = %6
  %.not = icmp sgt i32 %.061, %.063
  %308 = select i1 %.not, i32 -828161315, i32 896527522
  br label %.backedge

309:                                              ; preds = %6
  %310 = load i32, i32* @x.2, align 4
  %311 = load i32, i32* @y.3, align 4
  %312 = add i32 %310, -1
  %313 = mul i32 %312, %310
  %314 = and i32 %313, 1
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %316, %315
  %318 = select i1 %317, i32 1981982488, i32 -1124479079
  br label %.backedge

319:                                              ; preds = %6
  %320 = load i32, i32* @MOD, align 4
  %321 = sext i32 %320 to i64
  %322 = add i32 %.065, -1
  %323 = sext i32 %322 to i64
  %324 = sext i32 %.061 to i64
  %325 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %323, i64 %324
  %326 = load i64, i64* %325, align 8
  %327 = sext i32 %.063 to i64
  %328 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @g, i64 0, i64 %324, i64 %327
  %329 = load i64, i64* %328, align 8
  %330 = mul nsw i64 %329, %326
  %331 = sext i32 %.065 to i64
  %332 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %331, i64 %327
  %333 = load i64, i64* %332, align 8
  %334 = add i64 %333, %330
  %335 = srem i64 %334, %321
  store i64 %335, i64* %332, align 8
  %336 = load i32, i32* @x.2, align 4
  %337 = load i32, i32* @y.3, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 1808455893, i32 -1124479079
  br label %.backedge

345:                                              ; preds = %6
  br label %.backedge

346:                                              ; preds = %6
  %347 = add i32 %.061, 1
  br label %.backedge

348:                                              ; preds = %6
  br label %.backedge

349:                                              ; preds = %6
  %.neg = add i32 %.063, 1
  br label %.backedge

350:                                              ; preds = %6
  br label %.backedge

351:                                              ; preds = %6
  %352 = add i32 %.065, 1
  br label %.backedge

353:                                              ; preds = %6
  %354 = load i32, i32* @x.2, align 4
  %355 = load i32, i32* @y.3, align 4
  %356 = add i32 %354, -1
  %357 = mul i32 %356, %354
  %358 = and i32 %357, 1
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %360, %359
  %362 = select i1 %361, i32 -1048875065, i32 -546943169
  br label %.backedge

363:                                              ; preds = %6
  %364 = load i32, i32* @m, align 4
  %365 = sext i32 %364 to i64
  %366 = load i32, i32* @n, align 4
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %365, i64 %367
  %369 = load i64, i64* %368, align 8
  %370 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 %369)
  %371 = load i32, i32* @x.2, align 4
  %372 = load i32, i32* @y.3, align 4
  %373 = add i32 %371, -1
  %374 = mul i32 %373, %371
  %375 = and i32 %374, 1
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %377, %376
  %379 = select i1 %378, i32 -1219336242, i32 -546943169
  br label %.backedge

380:                                              ; preds = %6
  ret i32 0

381:                                              ; preds = %6
  br label %.backedge

382:                                              ; preds = %6
  br label %.backedge

383:                                              ; preds = %6
  %384 = add i32 %.073, 1
  br label %.backedge

385:                                              ; preds = %6
  br label %.backedge

386:                                              ; preds = %6
  br label %.backedge

387:                                              ; preds = %6
  %388 = add i32 %.069, 1
  br label %.backedge

389:                                              ; preds = %6
  br label %.backedge

390:                                              ; preds = %6
  br label %.backedge

391:                                              ; preds = %6
  br label %.backedge

392:                                              ; preds = %6
  %393 = add i32 %.067, 1
  br label %.backedge

394:                                              ; preds = %6
  br label %.backedge

395:                                              ; preds = %6
  %396 = load i32, i32* @MOD, align 4
  %397 = sext i32 %396 to i64
  %398 = add i32 %.065, -1
  %399 = sext i32 %398 to i64
  %400 = sext i32 %.061 to i64
  %401 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %399, i64 %400
  %402 = load i64, i64* %401, align 8
  %403 = sext i32 %.063 to i64
  %404 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @g, i64 0, i64 %400, i64 %403
  %405 = load i64, i64* %404, align 8
  %406 = mul nsw i64 %405, %402
  %407 = sext i32 %.065 to i64
  %408 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %407, i64 %403
  %409 = load i64, i64* %408, align 8
  %410 = add i64 %409, %406
  %411 = srem i64 %410, %397
  store i64 %411, i64* %408, align 8
  br label %.backedge

412:                                              ; preds = %6
  %413 = load i32, i32* @m, align 4
  %414 = sext i32 %413 to i64
  %415 = load i32, i32* @n, align 4
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @f, i64 0, i64 %414, i64 %416
  %418 = load i64, i64* %417, align 8
  %419 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 %418)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s566050224.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
