; ModuleID = 'build_ollvm/programs/p03349/s550494576.ll'
source_filename = "Project_CodeNet_C++1400/p03349/s550494576.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@dp = local_unnamed_addr global [305 x [305 x i64]] zeroinitializer, align 16
@pref = local_unnamed_addr global [305 x [305 x i64]] zeroinitializer, align 16
@C = local_unnamed_addr global [305 x [305 x i64]] zeroinitializer, align 16
@n = global i64 0, align 8
@k = global i64 0, align 8
@m = global i64 0, align 8
@.str = private unnamed_addr constant [15 x i8] c"%lld %lld %lld\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s550494576.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 115312097, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 115312097, label %11
    i32 1819852127, label %14
    i32 2094059235, label %25
    i32 1299710871, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1819852127, i32 1299710871
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 2094059235, i32 1299710871
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 1819852127, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i64* nonnull @n, i64* nonnull @k, i64* nonnull @m)
  br label %9

9:                                                ; preds = %.backedge, %0
  %.092 = phi i64 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i64 [ undef, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i64 [ undef, %0 ], [ %.088.be, %.backedge ]
  %.086 = phi i64 [ undef, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i64 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i64 [ 0, %0 ], [ %.082.be, %.backedge ]
  %.0 = phi i32 [ -750776754, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -750776754, label %10
    i32 2142046051, label %13
    i32 -160705933, label %14
    i32 -1667475046, label %16
    i32 -1809862718, label %26
    i32 -1486368495, label %37
    i32 1295933263, label %39
    i32 -790473963, label %49
    i32 1828754157, label %60
    i32 -1780219233, label %62
    i32 -1468019326, label %72
    i32 1298698964, label %83
    i32 2073550610, label %85
    i32 -1707389581, label %87
    i32 -577942594, label %98
    i32 -803972923, label %108
    i32 -1637121502, label %118
    i32 616798007, label %119
    i32 -1904718807, label %129
    i32 -1679341619, label %140
    i32 1964985117, label %141
    i32 -1800686660, label %142
    i32 1114547447, label %144
    i32 -1473336997, label %154
    i32 -1728318236, label %164
    i32 -1159302677, label %165
    i32 -1964522186, label %175
    i32 -1287978081, label %188
    i32 -2114194446, label %190
    i32 -1868838107, label %194
    i32 -1312689624, label %204
    i32 -897304690, label %217
    i32 -1635310909, label %218
    i32 1086377872, label %228
    i32 -1612241993, label %238
    i32 -1337752532, label %248
    i32 1649674304, label %249
    i32 -559747349, label %250
    i32 -1069164322, label %251
    i32 221632937, label %254
    i32 1035122490, label %255
    i32 899059276, label %265
    i32 1737719594, label %278
    i32 603566732, label %280
    i32 -1879510366, label %281
    i32 -705511610, label %291
    i32 -1264780461, label %303
    i32 -1430636175, label %305
    i32 490548404, label %325
    i32 1271981213, label %335
    i32 -1680057358, label %346
    i32 -1400082807, label %347
    i32 831852047, label %357
    i32 -1606830043, label %368
    i32 1799882667, label %370
    i32 2057776363, label %374
    i32 1590766960, label %384
    i32 86569861, label %394
    i32 -1396258948, label %404
    i32 694396595, label %405
    i32 -1654553902, label %415
    i32 313082877, label %425
    i32 1407831019, label %426
    i32 843691568, label %427
    i32 1453307666, label %437
    i32 161352800, label %448
    i32 -1497417398, label %449
    i32 -2027023525, label %459
    i32 1225877850, label %476
    i32 1121461489, label %477
    i32 -1435247039, label %478
    i32 -842374465, label %479
    i32 1971805305, label %480
    i32 437923592, label %481
    i32 1791526883, label %483
    i32 301998466, label %484
    i32 -719617526, label %485
    i32 -1160831553, label %489
    i32 -164745326, label %490
    i32 -1735581367, label %491
    i32 98587026, label %492
    i32 -1406034948, label %494
    i32 -1671532072, label %495
    i32 -789503703, label %496
    i32 -913610771, label %498
    i32 631148589, label %499
  ]

.backedge:                                        ; preds = %9, %499, %498, %496, %495, %494, %492, %491, %490, %489, %485, %484, %483, %481, %480, %479, %478, %477, %459, %449, %448, %437, %427, %426, %425, %415, %405, %404, %394, %384, %374, %370, %368, %357, %347, %346, %335, %325, %305, %303, %291, %281, %280, %278, %265, %255, %254, %251, %250, %249, %248, %238, %228, %218, %217, %204, %194, %190, %188, %175, %165, %164, %154, %144, %142, %141, %140, %129, %119, %118, %108, %98, %87, %85, %83, %72, %62, %60, %49, %39, %37, %26, %16, %14, %13, %10
  %.092.be = phi i64 [ %.092, %9 ], [ %.092, %499 ], [ %.092, %498 ], [ %.092, %496 ], [ %.092, %495 ], [ %.092, %494 ], [ %.092, %492 ], [ %.092, %491 ], [ %.092, %490 ], [ %.092, %489 ], [ %.092, %485 ], [ %.092, %484 ], [ %.092, %483 ], [ %482, %481 ], [ %.092, %480 ], [ %.092, %479 ], [ %.092, %478 ], [ %.092, %477 ], [ %.092, %459 ], [ %.092, %449 ], [ %.092, %448 ], [ %.092, %437 ], [ %.092, %427 ], [ %.092, %426 ], [ %.092, %425 ], [ %.092, %415 ], [ %.092, %405 ], [ %.092, %404 ], [ %.092, %394 ], [ %.092, %384 ], [ %.092, %374 ], [ %.092, %370 ], [ %.092, %368 ], [ %.092, %357 ], [ %.092, %347 ], [ %.092, %346 ], [ %.092, %335 ], [ %.092, %325 ], [ %.092, %305 ], [ %.092, %303 ], [ %.092, %291 ], [ %.092, %281 ], [ %.092, %280 ], [ %.092, %278 ], [ %.092, %265 ], [ %.092, %255 ], [ %.092, %254 ], [ %.092, %251 ], [ %.092, %250 ], [ %.092, %249 ], [ %.092, %248 ], [ %.092, %238 ], [ %.092, %228 ], [ %.092, %218 ], [ %.092, %217 ], [ %.092, %204 ], [ %.092, %194 ], [ %.092, %190 ], [ %.092, %188 ], [ %.092, %175 ], [ %.092, %165 ], [ %.092, %164 ], [ %.092, %154 ], [ %.092, %144 ], [ %.092, %142 ], [ %.092, %141 ], [ %.092, %140 ], [ %130, %129 ], [ %.092, %119 ], [ %.092, %118 ], [ %.092, %108 ], [ %.092, %98 ], [ %.092, %87 ], [ %.092, %85 ], [ %.092, %83 ], [ %.092, %72 ], [ %.092, %62 ], [ %.092, %60 ], [ %.092, %49 ], [ %.092, %39 ], [ %.092, %37 ], [ %.092, %26 ], [ %.092, %16 ], [ %.092, %14 ], [ 0, %13 ], [ %.092, %10 ]
  %.090.be = phi i64 [ %.090, %9 ], [ %.090, %499 ], [ %.090, %498 ], [ %.090, %496 ], [ %.090, %495 ], [ %.090, %494 ], [ %.090, %492 ], [ %.090, %491 ], [ %.090, %490 ], [ %.090, %489 ], [ %.090, %485 ], [ %.090, %484 ], [ 1, %483 ], [ %.090, %481 ], [ %.090, %480 ], [ %.090, %479 ], [ %.090, %478 ], [ %.090, %477 ], [ %.090, %459 ], [ %.090, %449 ], [ %.090, %448 ], [ %.090, %437 ], [ %.090, %427 ], [ %.090, %426 ], [ %.090, %425 ], [ %.090, %415 ], [ %.090, %405 ], [ %.090, %404 ], [ %.090, %394 ], [ %.090, %384 ], [ %.090, %374 ], [ %.090, %370 ], [ %.090, %368 ], [ %.090, %357 ], [ %.090, %347 ], [ %.090, %346 ], [ %.090, %335 ], [ %.090, %325 ], [ %.090, %305 ], [ %.090, %303 ], [ %.090, %291 ], [ %.090, %281 ], [ %.090, %280 ], [ %.090, %278 ], [ %.090, %265 ], [ %.090, %255 ], [ %.090, %254 ], [ %.090, %251 ], [ %.090, %250 ], [ %.neg97, %249 ], [ %.090, %248 ], [ %.090, %238 ], [ %.090, %228 ], [ %.090, %218 ], [ %.090, %217 ], [ %.090, %204 ], [ %.090, %194 ], [ %.090, %190 ], [ %.090, %188 ], [ %.090, %175 ], [ %.090, %165 ], [ %.090, %164 ], [ 1, %154 ], [ %.090, %144 ], [ %.090, %142 ], [ %.090, %141 ], [ %.090, %140 ], [ %.090, %129 ], [ %.090, %119 ], [ %.090, %118 ], [ %.090, %108 ], [ %.090, %98 ], [ %.090, %87 ], [ %.090, %85 ], [ %.090, %83 ], [ %.090, %72 ], [ %.090, %62 ], [ %.090, %60 ], [ %.090, %49 ], [ %.090, %39 ], [ %.090, %37 ], [ %.090, %26 ], [ %.090, %16 ], [ %.090, %14 ], [ %.090, %13 ], [ %.090, %10 ]
  %.088.be = phi i64 [ %.088, %9 ], [ %.088, %499 ], [ %.neg94, %498 ], [ %.088, %496 ], [ %.088, %495 ], [ %.088, %494 ], [ %.088, %492 ], [ %.088, %491 ], [ %.088, %490 ], [ %.088, %489 ], [ %.088, %485 ], [ %.088, %484 ], [ %.088, %483 ], [ %.088, %481 ], [ %.088, %480 ], [ %.088, %479 ], [ %.088, %478 ], [ %.088, %477 ], [ %.088, %459 ], [ %.088, %449 ], [ %.088, %448 ], [ %438, %437 ], [ %.088, %427 ], [ %.088, %426 ], [ %.088, %425 ], [ %.088, %415 ], [ %.088, %405 ], [ %.088, %404 ], [ %.088, %394 ], [ %.088, %384 ], [ %.088, %374 ], [ %.088, %370 ], [ %.088, %368 ], [ %.088, %357 ], [ %.088, %347 ], [ %.088, %346 ], [ %.088, %335 ], [ %.088, %325 ], [ %.088, %305 ], [ %.088, %303 ], [ %.088, %291 ], [ %.088, %281 ], [ %.088, %280 ], [ %.088, %278 ], [ %.088, %265 ], [ %.088, %255 ], [ %.088, %254 ], [ %.088, %251 ], [ 2, %250 ], [ %.088, %249 ], [ %.088, %248 ], [ %.088, %238 ], [ %.088, %228 ], [ %.088, %218 ], [ %.088, %217 ], [ %.088, %204 ], [ %.088, %194 ], [ %.088, %190 ], [ %.088, %188 ], [ %.088, %175 ], [ %.088, %165 ], [ %.088, %164 ], [ %.088, %154 ], [ %.088, %144 ], [ %.088, %142 ], [ %.088, %141 ], [ %.088, %140 ], [ %.088, %129 ], [ %.088, %119 ], [ %.088, %118 ], [ %.088, %108 ], [ %.088, %98 ], [ %.088, %87 ], [ %.088, %85 ], [ %.088, %83 ], [ %.088, %72 ], [ %.088, %62 ], [ %.088, %60 ], [ %.088, %49 ], [ %.088, %39 ], [ %.088, %37 ], [ %.088, %26 ], [ %.088, %16 ], [ %.088, %14 ], [ %.088, %13 ], [ %.088, %10 ]
  %.086.be = phi i64 [ %.086, %9 ], [ %.086, %499 ], [ %.086, %498 ], [ %497, %496 ], [ %.086, %495 ], [ %.086, %494 ], [ %.086, %492 ], [ %.086, %491 ], [ %.086, %490 ], [ %.086, %489 ], [ %.086, %485 ], [ %.086, %484 ], [ %.086, %483 ], [ %.086, %481 ], [ %.086, %480 ], [ %.086, %479 ], [ %.086, %478 ], [ %.086, %477 ], [ %.086, %459 ], [ %.086, %449 ], [ %.086, %448 ], [ %.086, %437 ], [ %.086, %427 ], [ %.086, %426 ], [ %.086, %425 ], [ %.neg95, %415 ], [ %.086, %405 ], [ %.086, %404 ], [ %.086, %394 ], [ %.086, %384 ], [ %.086, %374 ], [ %.086, %370 ], [ %.086, %368 ], [ %.086, %357 ], [ %.086, %347 ], [ %.086, %346 ], [ %.086, %335 ], [ %.086, %325 ], [ %.086, %305 ], [ %.086, %303 ], [ %.086, %291 ], [ %.086, %281 ], [ %.086, %280 ], [ %.086, %278 ], [ %.086, %265 ], [ %.086, %255 ], [ 1, %254 ], [ %.086, %251 ], [ %.086, %250 ], [ %.086, %249 ], [ %.086, %248 ], [ %.086, %238 ], [ %.086, %228 ], [ %.086, %218 ], [ %.086, %217 ], [ %.086, %204 ], [ %.086, %194 ], [ %.086, %190 ], [ %.086, %188 ], [ %.086, %175 ], [ %.086, %165 ], [ %.086, %164 ], [ %.086, %154 ], [ %.086, %144 ], [ %.086, %142 ], [ %.086, %141 ], [ %.086, %140 ], [ %.086, %129 ], [ %.086, %119 ], [ %.086, %118 ], [ %.086, %108 ], [ %.086, %98 ], [ %.086, %87 ], [ %.086, %85 ], [ %.086, %83 ], [ %.086, %72 ], [ %.086, %62 ], [ %.086, %60 ], [ %.086, %49 ], [ %.086, %39 ], [ %.086, %37 ], [ %.086, %26 ], [ %.086, %16 ], [ %.086, %14 ], [ %.086, %13 ], [ %.086, %10 ]
  %.084.be = phi i64 [ %.084, %9 ], [ %.084, %499 ], [ %.084, %498 ], [ %.084, %496 ], [ %.084, %495 ], [ %.084, %494 ], [ %493, %492 ], [ %.084, %491 ], [ %.084, %490 ], [ %.084, %489 ], [ %.084, %485 ], [ %.084, %484 ], [ %.084, %483 ], [ %.084, %481 ], [ %.084, %480 ], [ %.084, %479 ], [ %.084, %478 ], [ %.084, %477 ], [ %.084, %459 ], [ %.084, %449 ], [ %.084, %448 ], [ %.084, %437 ], [ %.084, %427 ], [ %.084, %426 ], [ %.084, %425 ], [ %.084, %415 ], [ %.084, %405 ], [ %.084, %404 ], [ %.084, %394 ], [ %.084, %384 ], [ %.084, %374 ], [ %.084, %370 ], [ %.084, %368 ], [ %.084, %357 ], [ %.084, %347 ], [ %.084, %346 ], [ %336, %335 ], [ %.084, %325 ], [ %.084, %305 ], [ %.084, %303 ], [ %.084, %291 ], [ %.084, %281 ], [ 1, %280 ], [ %.084, %278 ], [ %.084, %265 ], [ %.084, %255 ], [ %.084, %254 ], [ %.084, %251 ], [ %.084, %250 ], [ %.084, %249 ], [ %.084, %248 ], [ %.084, %238 ], [ %.084, %228 ], [ %.084, %218 ], [ %.084, %217 ], [ %.084, %204 ], [ %.084, %194 ], [ %.084, %190 ], [ %.084, %188 ], [ %.084, %175 ], [ %.084, %165 ], [ %.084, %164 ], [ %.084, %154 ], [ %.084, %144 ], [ %.084, %142 ], [ %.084, %141 ], [ %.084, %140 ], [ %.084, %129 ], [ %.084, %119 ], [ %.084, %118 ], [ %.084, %108 ], [ %.084, %98 ], [ %.084, %87 ], [ %.084, %85 ], [ %.084, %83 ], [ %.084, %72 ], [ %.084, %62 ], [ %.084, %60 ], [ %.084, %49 ], [ %.084, %39 ], [ %.084, %37 ], [ %.084, %26 ], [ %.084, %16 ], [ %.084, %14 ], [ %.084, %13 ], [ %.084, %10 ]
  %.082.be = phi i64 [ %.082, %9 ], [ %.082, %499 ], [ %.082, %498 ], [ %.082, %496 ], [ %.082, %495 ], [ %.082, %494 ], [ %.082, %492 ], [ %.082, %491 ], [ %.082, %490 ], [ %.082, %489 ], [ %.082, %485 ], [ %.082, %484 ], [ %.082, %483 ], [ %.082, %481 ], [ %.082, %480 ], [ %.082, %479 ], [ %.082, %478 ], [ %.082, %477 ], [ %.082, %459 ], [ %.082, %449 ], [ %.082, %448 ], [ %.082, %437 ], [ %.082, %427 ], [ %.082, %426 ], [ %.082, %425 ], [ %.082, %415 ], [ %.082, %405 ], [ %.082, %404 ], [ %.082, %394 ], [ %.082, %384 ], [ %.082, %374 ], [ %.082, %370 ], [ %.082, %368 ], [ %.082, %357 ], [ %.082, %347 ], [ %.082, %346 ], [ %.082, %335 ], [ %.082, %325 ], [ %.082, %305 ], [ %.082, %303 ], [ %.082, %291 ], [ %.082, %281 ], [ %.082, %280 ], [ %.082, %278 ], [ %.082, %265 ], [ %.082, %255 ], [ %.082, %254 ], [ %.082, %251 ], [ %.082, %250 ], [ %.082, %249 ], [ %.082, %248 ], [ %.082, %238 ], [ %.082, %228 ], [ %.082, %218 ], [ %.082, %217 ], [ %.082, %204 ], [ %.082, %194 ], [ %.082, %190 ], [ %.082, %188 ], [ %.082, %175 ], [ %.082, %165 ], [ %.082, %164 ], [ %.082, %154 ], [ %.082, %144 ], [ %143, %142 ], [ %.082, %141 ], [ %.082, %140 ], [ %.082, %129 ], [ %.082, %119 ], [ %.082, %118 ], [ %.082, %108 ], [ %.082, %98 ], [ %.082, %87 ], [ %.082, %85 ], [ %.082, %83 ], [ %.082, %72 ], [ %.082, %62 ], [ %.082, %60 ], [ %.082, %49 ], [ %.082, %39 ], [ %.082, %37 ], [ %.082, %26 ], [ %.082, %16 ], [ %.082, %14 ], [ %.082, %13 ], [ %.082, %10 ]
  %.0.be = phi i32 [ %.0, %9 ], [ -2027023525, %499 ], [ 1453307666, %498 ], [ -1654553902, %496 ], [ 86569861, %495 ], [ 831852047, %494 ], [ 1271981213, %492 ], [ -705511610, %491 ], [ 899059276, %490 ], [ -1612241993, %489 ], [ -1312689624, %485 ], [ -1964522186, %484 ], [ -1473336997, %483 ], [ -1904718807, %481 ], [ -803972923, %480 ], [ -1468019326, %479 ], [ -790473963, %478 ], [ -1809862718, %477 ], [ %475, %459 ], [ %458, %449 ], [ -1069164322, %448 ], [ %447, %437 ], [ %436, %427 ], [ 843691568, %426 ], [ 1035122490, %425 ], [ %424, %415 ], [ %414, %405 ], [ 694396595, %404 ], [ %403, %394 ], [ %393, %384 ], [ 1590766960, %374 ], [ 1590766960, %370 ], [ %369, %368 ], [ %367, %357 ], [ %356, %347 ], [ -1879510366, %346 ], [ %345, %335 ], [ %334, %325 ], [ 490548404, %305 ], [ %304, %303 ], [ %302, %291 ], [ %290, %281 ], [ -1879510366, %280 ], [ %279, %278 ], [ %277, %265 ], [ %264, %255 ], [ 1035122490, %254 ], [ %253, %251 ], [ -1069164322, %250 ], [ -1159302677, %249 ], [ 1649674304, %248 ], [ %247, %238 ], [ %237, %228 ], [ 1086377872, %218 ], [ 1086377872, %217 ], [ %216, %204 ], [ %203, %194 ], [ %193, %190 ], [ %189, %188 ], [ %187, %175 ], [ %174, %165 ], [ -1159302677, %164 ], [ %163, %154 ], [ %153, %144 ], [ -750776754, %142 ], [ -1800686660, %141 ], [ -160705933, %140 ], [ %139, %129 ], [ %128, %119 ], [ 616798007, %118 ], [ %117, %108 ], [ %107, %98 ], [ -577942594, %87 ], [ -577942594, %85 ], [ %84, %83 ], [ %82, %72 ], [ %71, %62 ], [ %61, %60 ], [ %59, %49 ], [ %48, %39 ], [ %38, %37 ], [ %36, %26 ], [ %25, %16 ], [ %15, %14 ], [ -160705933, %13 ], [ %12, %10 ]
  br label %9

10:                                               ; preds = %9
  %11 = icmp slt i64 %.082, 305
  %12 = select i1 %11, i32 2142046051, i32 1114547447
  br label %.backedge

13:                                               ; preds = %9
  br label %.backedge

14:                                               ; preds = %9
  %.not98 = icmp sgt i64 %.092, %.082
  %15 = select i1 %.not98, i32 1964985117, i32 -1667475046
  br label %.backedge

16:                                               ; preds = %9
  %17 = load i32, i32* @x.2, align 4
  %18 = load i32, i32* @y.3, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 -1809862718, i32 1121461489
  br label %.backedge

26:                                               ; preds = %9
  %27 = icmp eq i64 %.082, 0
  store i1 %27, i1* %7, align 1
  %28 = load i32, i32* @x.2, align 4
  %29 = load i32, i32* @y.3, align 4
  %30 = add i32 %28, -1
  %31 = mul i32 %30, %28
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %34, %33
  %36 = select i1 %35, i32 -1486368495, i32 1121461489
  br label %.backedge

37:                                               ; preds = %9
  %.0..0..0. = load volatile i1, i1* %7, align 1
  %38 = select i1 %.0..0..0., i32 2073550610, i32 1295933263
  br label %.backedge

39:                                               ; preds = %9
  %40 = load i32, i32* @x.2, align 4
  %41 = load i32, i32* @y.3, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 -790473963, i32 -1435247039
  br label %.backedge

49:                                               ; preds = %9
  %50 = icmp eq i64 %.092, 0
  store i1 %50, i1* %6, align 1
  %51 = load i32, i32* @x.2, align 4
  %52 = load i32, i32* @y.3, align 4
  %53 = add i32 %51, -1
  %54 = mul i32 %53, %51
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %57, %56
  %59 = select i1 %58, i32 1828754157, i32 -1435247039
  br label %.backedge

60:                                               ; preds = %9
  %.0..0..0.76 = load volatile i1, i1* %6, align 1
  %61 = select i1 %.0..0..0.76, i32 2073550610, i32 -1780219233
  br label %.backedge

62:                                               ; preds = %9
  %63 = load i32, i32* @x.2, align 4
  %64 = load i32, i32* @y.3, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 -1468019326, i32 -842374465
  br label %.backedge

72:                                               ; preds = %9
  %73 = icmp eq i64 %.082, %.092
  store i1 %73, i1* %5, align 1
  %74 = load i32, i32* @x.2, align 4
  %75 = load i32, i32* @y.3, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 1298698964, i32 -842374465
  br label %.backedge

83:                                               ; preds = %9
  %.0..0..0.77 = load volatile i1, i1* %5, align 1
  %84 = select i1 %.0..0..0.77, i32 2073550610, i32 -1707389581
  br label %.backedge

85:                                               ; preds = %9
  %86 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @C, i64 0, i64 %.082, i64 %.092
  store i64 1, i64* %86, align 8
  br label %.backedge

87:                                               ; preds = %9
  %88 = add i64 %.082, -1
  %89 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @C, i64 0, i64 %88, i64 %.092
  %90 = load i64, i64* %89, align 8
  %91 = add i64 %.092, -1
  %92 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @C, i64 0, i64 %88, i64 %91
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, %90
  %95 = load i64, i64* @m, align 8
  %96 = srem i64 %94, %95
  %97 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @C, i64 0, i64 %.082, i64 %.092
  store i64 %96, i64* %97, align 8
  br label %.backedge

98:                                               ; preds = %9
  %99 = load i32, i32* @x.2, align 4
  %100 = load i32, i32* @y.3, align 4
  %101 = add i32 %99, -1
  %102 = mul i32 %101, %99
  %103 = and i32 %102, 1
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %105, %104
  %107 = select i1 %106, i32 -803972923, i32 1971805305
  br label %.backedge

108:                                              ; preds = %9
  %109 = load i32, i32* @x.2, align 4
  %110 = load i32, i32* @y.3, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 -1637121502, i32 1971805305
  br label %.backedge

118:                                              ; preds = %9
  br label %.backedge

119:                                              ; preds = %9
  %120 = load i32, i32* @x.2, align 4
  %121 = load i32, i32* @y.3, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 -1904718807, i32 437923592
  br label %.backedge

129:                                              ; preds = %9
  %130 = add i64 %.092, 1
  %131 = load i32, i32* @x.2, align 4
  %132 = load i32, i32* @y.3, align 4
  %133 = add i32 %131, -1
  %134 = mul i32 %133, %131
  %135 = and i32 %134, 1
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %137, %136
  %139 = select i1 %138, i32 -1679341619, i32 437923592
  br label %.backedge

140:                                              ; preds = %9
  br label %.backedge

141:                                              ; preds = %9
  br label %.backedge

142:                                              ; preds = %9
  %143 = add i64 %.082, 1
  br label %.backedge

144:                                              ; preds = %9
  %145 = load i32, i32* @x.2, align 4
  %146 = load i32, i32* @y.3, align 4
  %147 = add i32 %145, -1
  %148 = mul i32 %147, %145
  %149 = and i32 %148, 1
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %151, %150
  %153 = select i1 %152, i32 -1473336997, i32 1791526883
  br label %.backedge

154:                                              ; preds = %9
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(744200) bitcast ([305 x [305 x i64]]* @dp to i8*), i8 0, i64 744200, i1 false)
  %155 = load i32, i32* @x.2, align 4
  %156 = load i32, i32* @y.3, align 4
  %157 = add i32 %155, -1
  %158 = mul i32 %157, %155
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %161, %160
  %163 = select i1 %162, i32 -1728318236, i32 1791526883
  br label %.backedge

164:                                              ; preds = %9
  br label %.backedge

165:                                              ; preds = %9
  %166 = load i32, i32* @x.2, align 4
  %167 = load i32, i32* @y.3, align 4
  %168 = add i32 %166, -1
  %169 = mul i32 %168, %166
  %170 = and i32 %169, 1
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %172, %171
  %174 = select i1 %173, i32 -1964522186, i32 301998466
  br label %.backedge

175:                                              ; preds = %9
  %176 = load i64, i64* @k, align 8
  %177 = add i64 %176, 1
  %178 = icmp sle i64 %.090, %177
  store i1 %178, i1* %4, align 1
  %179 = load i32, i32* @x.2, align 4
  %180 = load i32, i32* @y.3, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 -1287978081, i32 301998466
  br label %.backedge

188:                                              ; preds = %9
  %.0..0..0.78 = load volatile i1, i1* %4, align 1
  %189 = select i1 %.0..0..0.78, i32 -2114194446, i32 -559747349
  br label %.backedge

190:                                              ; preds = %9
  %191 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 1, i64 %.090
  store i64 1, i64* %191, align 8
  %192 = icmp eq i64 %.090, 1
  %193 = select i1 %192, i32 -1868838107, i32 -1635310909
  br label %.backedge

194:                                              ; preds = %9
  %195 = load i32, i32* @x.2, align 4
  %196 = load i32, i32* @y.3, align 4
  %197 = add i32 %195, -1
  %198 = mul i32 %197, %195
  %199 = and i32 %198, 1
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %201, %200
  %203 = select i1 %202, i32 -1312689624, i32 -719617526
  br label %.backedge

204:                                              ; preds = %9
  %205 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 1, i64 %.090
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @pref, i64 0, i64 1, i64 %.090
  store i64 %206, i64* %207, align 8
  %208 = load i32, i32* @x.2, align 4
  %209 = load i32, i32* @y.3, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 -897304690, i32 -719617526
  br label %.backedge

217:                                              ; preds = %9
  br label %.backedge

218:                                              ; preds = %9
  %219 = add i64 %.090, -1
  %220 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @pref, i64 0, i64 1, i64 %219
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 1, i64 %.090
  %223 = load i64, i64* %222, align 8
  %224 = add i64 %223, %221
  %225 = load i64, i64* @m, align 8
  %226 = srem i64 %224, %225
  %227 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @pref, i64 0, i64 1, i64 %.090
  store i64 %226, i64* %227, align 8
  br label %.backedge

228:                                              ; preds = %9
  %229 = load i32, i32* @x.2, align 4
  %230 = load i32, i32* @y.3, align 4
  %231 = add i32 %229, -1
  %232 = mul i32 %231, %229
  %233 = and i32 %232, 1
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %235, %234
  %237 = select i1 %236, i32 -1612241993, i32 -1160831553
  br label %.backedge

238:                                              ; preds = %9
  %239 = load i32, i32* @x.2, align 4
  %240 = load i32, i32* @y.3, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 -1337752532, i32 -1160831553
  br label %.backedge

248:                                              ; preds = %9
  br label %.backedge

249:                                              ; preds = %9
  %.neg97 = add i64 %.090, 1
  br label %.backedge

250:                                              ; preds = %9
  br label %.backedge

251:                                              ; preds = %9
  %252 = load i64, i64* @n, align 8
  %.neg96 = add i64 %252, 1
  %.not = icmp sgt i64 %.088, %.neg96
  %253 = select i1 %.not, i32 -1497417398, i32 221632937
  br label %.backedge

254:                                              ; preds = %9
  br label %.backedge

255:                                              ; preds = %9
  %256 = load i32, i32* @x.2, align 4
  %257 = load i32, i32* @y.3, align 4
  %258 = add i32 %256, -1
  %259 = mul i32 %258, %256
  %260 = and i32 %259, 1
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %262, %261
  %264 = select i1 %263, i32 899059276, i32 -164745326
  br label %.backedge

265:                                              ; preds = %9
  %266 = load i64, i64* @k, align 8
  %267 = add i64 %266, 1
  %268 = icmp sle i64 %.086, %267
  store i1 %268, i1* %3, align 1
  %269 = load i32, i32* @x.2, align 4
  %270 = load i32, i32* @y.3, align 4
  %271 = add i32 %269, -1
  %272 = mul i32 %271, %269
  %273 = and i32 %272, 1
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %275, %274
  %277 = select i1 %276, i32 1737719594, i32 -164745326
  br label %.backedge

278:                                              ; preds = %9
  %.0..0..0.79 = load volatile i1, i1* %3, align 1
  %279 = select i1 %.0..0..0.79, i32 603566732, i32 1407831019
  br label %.backedge

280:                                              ; preds = %9
  br label %.backedge

281:                                              ; preds = %9
  %282 = load i32, i32* @x.2, align 4
  %283 = load i32, i32* @y.3, align 4
  %284 = add i32 %282, -1
  %285 = mul i32 %284, %282
  %286 = and i32 %285, 1
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %288, %287
  %290 = select i1 %289, i32 -705511610, i32 -1735581367
  br label %.backedge

291:                                              ; preds = %9
  %292 = add i64 %.088, -1
  %293 = icmp sle i64 %.084, %292
  store i1 %293, i1* %2, align 1
  %294 = load i32, i32* @x.2, align 4
  %295 = load i32, i32* @y.3, align 4
  %296 = add i32 %294, -1
  %297 = mul i32 %296, %294
  %298 = and i32 %297, 1
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %300, %299
  %302 = select i1 %301, i32 -1264780461, i32 -1735581367
  br label %.backedge

303:                                              ; preds = %9
  %.0..0..0.80 = load volatile i1, i1* %2, align 1
  %304 = select i1 %.0..0..0.80, i32 -1430636175, i32 -1400082807
  br label %.backedge

305:                                              ; preds = %9
  %306 = add i64 %.088, -2
  %307 = add i64 %.084, -1
  %308 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @C, i64 0, i64 %306, i64 %307
  %309 = load i64, i64* %308, align 8
  %310 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 %.084, i64 %.086
  %311 = load i64, i64* %310, align 8
  %312 = mul nsw i64 %311, %309
  %313 = load i64, i64* @m, align 8
  %314 = srem i64 %312, %313
  %315 = sub i64 %.088, %.084
  %316 = add i64 %.086, -1
  %317 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @pref, i64 0, i64 %315, i64 %316
  %318 = load i64, i64* %317, align 8
  %319 = mul nsw i64 %318, %314
  %320 = srem i64 %319, %313
  %321 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 %.088, i64 %.086
  %322 = load i64, i64* %321, align 8
  %323 = add i64 %322, %320
  %324 = srem i64 %323, %313
  store i64 %324, i64* %321, align 8
  br label %.backedge

325:                                              ; preds = %9
  %326 = load i32, i32* @x.2, align 4
  %327 = load i32, i32* @y.3, align 4
  %328 = add i32 %326, -1
  %329 = mul i32 %328, %326
  %330 = and i32 %329, 1
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %332, %331
  %334 = select i1 %333, i32 1271981213, i32 98587026
  br label %.backedge

335:                                              ; preds = %9
  %336 = add i64 %.084, 1
  %337 = load i32, i32* @x.2, align 4
  %338 = load i32, i32* @y.3, align 4
  %339 = add i32 %337, -1
  %340 = mul i32 %339, %337
  %341 = and i32 %340, 1
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %343, %342
  %345 = select i1 %344, i32 -1680057358, i32 98587026
  br label %.backedge

346:                                              ; preds = %9
  br label %.backedge

347:                                              ; preds = %9
  %348 = load i32, i32* @x.2, align 4
  %349 = load i32, i32* @y.3, align 4
  %350 = add i32 %348, -1
  %351 = mul i32 %350, %348
  %352 = and i32 %351, 1
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %354, %353
  %356 = select i1 %355, i32 831852047, i32 -1406034948
  br label %.backedge

357:                                              ; preds = %9
  %358 = icmp eq i64 %.086, 1
  store i1 %358, i1* %1, align 1
  %359 = load i32, i32* @x.2, align 4
  %360 = load i32, i32* @y.3, align 4
  %361 = add i32 %359, -1
  %362 = mul i32 %361, %359
  %363 = and i32 %362, 1
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %365, %364
  %367 = select i1 %366, i32 -1606830043, i32 -1406034948
  br label %.backedge

368:                                              ; preds = %9
  %.0..0..0.81 = load volatile i1, i1* %1, align 1
  %369 = select i1 %.0..0..0.81, i32 1799882667, i32 2057776363
  br label %.backedge

370:                                              ; preds = %9
  %371 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 %.088, i64 %.086
  %372 = load i64, i64* %371, align 8
  %373 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @pref, i64 0, i64 %.088, i64 %.086
  store i64 %372, i64* %373, align 8
  br label %.backedge

374:                                              ; preds = %9
  %375 = add i64 %.086, -1
  %376 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @pref, i64 0, i64 %.088, i64 %375
  %377 = load i64, i64* %376, align 8
  %378 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 %.088, i64 %.086
  %379 = load i64, i64* %378, align 8
  %380 = add i64 %379, %377
  %381 = load i64, i64* @m, align 8
  %382 = srem i64 %380, %381
  %383 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @pref, i64 0, i64 %.088, i64 %.086
  store i64 %382, i64* %383, align 8
  br label %.backedge

384:                                              ; preds = %9
  %385 = load i32, i32* @x.2, align 4
  %386 = load i32, i32* @y.3, align 4
  %387 = add i32 %385, -1
  %388 = mul i32 %387, %385
  %389 = and i32 %388, 1
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %391, %390
  %393 = select i1 %392, i32 86569861, i32 -1671532072
  br label %.backedge

394:                                              ; preds = %9
  %395 = load i32, i32* @x.2, align 4
  %396 = load i32, i32* @y.3, align 4
  %397 = add i32 %395, -1
  %398 = mul i32 %397, %395
  %399 = and i32 %398, 1
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %401, %400
  %403 = select i1 %402, i32 -1396258948, i32 -1671532072
  br label %.backedge

404:                                              ; preds = %9
  br label %.backedge

405:                                              ; preds = %9
  %406 = load i32, i32* @x.2, align 4
  %407 = load i32, i32* @y.3, align 4
  %408 = add i32 %406, -1
  %409 = mul i32 %408, %406
  %410 = and i32 %409, 1
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %412, %411
  %414 = select i1 %413, i32 -1654553902, i32 -789503703
  br label %.backedge

415:                                              ; preds = %9
  %.neg95 = add i64 %.086, 1
  %416 = load i32, i32* @x.2, align 4
  %417 = load i32, i32* @y.3, align 4
  %418 = add i32 %416, -1
  %419 = mul i32 %418, %416
  %420 = and i32 %419, 1
  %421 = icmp eq i32 %420, 0
  %422 = icmp slt i32 %417, 10
  %423 = or i1 %422, %421
  %424 = select i1 %423, i32 313082877, i32 -789503703
  br label %.backedge

425:                                              ; preds = %9
  br label %.backedge

426:                                              ; preds = %9
  br label %.backedge

427:                                              ; preds = %9
  %428 = load i32, i32* @x.2, align 4
  %429 = load i32, i32* @y.3, align 4
  %430 = add i32 %428, -1
  %431 = mul i32 %430, %428
  %432 = and i32 %431, 1
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %434, %433
  %436 = select i1 %435, i32 1453307666, i32 -913610771
  br label %.backedge

437:                                              ; preds = %9
  %438 = add i64 %.088, 1
  %439 = load i32, i32* @x.2, align 4
  %440 = load i32, i32* @y.3, align 4
  %441 = add i32 %439, -1
  %442 = mul i32 %441, %439
  %443 = and i32 %442, 1
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %445, %444
  %447 = select i1 %446, i32 161352800, i32 -913610771
  br label %.backedge

448:                                              ; preds = %9
  br label %.backedge

449:                                              ; preds = %9
  %450 = load i32, i32* @x.2, align 4
  %451 = load i32, i32* @y.3, align 4
  %452 = add i32 %450, -1
  %453 = mul i32 %452, %450
  %454 = and i32 %453, 1
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %456, %455
  %458 = select i1 %457, i32 -2027023525, i32 631148589
  br label %.backedge

459:                                              ; preds = %9
  %460 = load i64, i64* @n, align 8
  %461 = add i64 %460, 1
  %462 = load i64, i64* @k, align 8
  %463 = add i64 %462, 1
  %464 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 %461, i64 %463
  %465 = load i64, i64* %464, align 8
  %466 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %465)
  %467 = load i32, i32* @x.2, align 4
  %468 = load i32, i32* @y.3, align 4
  %469 = add i32 %467, -1
  %470 = mul i32 %469, %467
  %471 = and i32 %470, 1
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %473, %472
  %475 = select i1 %474, i32 1225877850, i32 631148589
  br label %.backedge

476:                                              ; preds = %9
  ret i32 0

477:                                              ; preds = %9
  br label %.backedge

478:                                              ; preds = %9
  br label %.backedge

479:                                              ; preds = %9
  br label %.backedge

480:                                              ; preds = %9
  br label %.backedge

481:                                              ; preds = %9
  %482 = add i64 %.092, 1
  br label %.backedge

483:                                              ; preds = %9
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(744200) bitcast ([305 x [305 x i64]]* @dp to i8*), i8 0, i64 744200, i1 false)
  br label %.backedge

484:                                              ; preds = %9
  br label %.backedge

485:                                              ; preds = %9
  %486 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 1, i64 %.090
  %487 = load i64, i64* %486, align 8
  %488 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @pref, i64 0, i64 1, i64 %.090
  store i64 %487, i64* %488, align 8
  br label %.backedge

489:                                              ; preds = %9
  br label %.backedge

490:                                              ; preds = %9
  br label %.backedge

491:                                              ; preds = %9
  br label %.backedge

492:                                              ; preds = %9
  %493 = add i64 %.084, 1
  br label %.backedge

494:                                              ; preds = %9
  br label %.backedge

495:                                              ; preds = %9
  br label %.backedge

496:                                              ; preds = %9
  %497 = add i64 %.086, 1
  br label %.backedge

498:                                              ; preds = %9
  %.neg94 = add i64 %.088, 1
  br label %.backedge

499:                                              ; preds = %9
  %500 = load i64, i64* @n, align 8
  %.neg = add i64 %500, 1
  %501 = load i64, i64* @k, align 8
  %502 = add i64 %501, 1
  %503 = getelementptr inbounds [305 x [305 x i64]], [305 x [305 x i64]]* @dp, i64 0, i64 %.neg, i64 %502
  %504 = load i64, i64* %503, align 8
  %505 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %504)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s550494576.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
