; ModuleID = 'build_ollvm/programs/p03707/s497094054.ll'
source_filename = "Project_CodeNet_C++1400/p03707/s497094054.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z4readIiEvRT_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@m = global i32 0, align 4
@Q = global i32 0, align 4
@pt = local_unnamed_addr global [4005 x [4005 x i32]] zeroinitializer, align 16
@eg = local_unnamed_addr global [4005 x [4005 x i32]] zeroinitializer, align 16
@mp = global [2005 x [2005 x i8]] zeroinitializer, align 16
@s = local_unnamed_addr global [4005 x [4005 x i8]] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s497094054.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1943424377, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1943424377, label %11
    i32 -1412129516, label %14
    i32 146927252, label %25
    i32 -624488201, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -1412129516, i32 -624488201
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 146927252, i32 -624488201
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -1412129516, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  tail call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) @n)
  tail call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) @m)
  tail call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) @Q)
  br label %8

8:                                                ; preds = %.backedge, %0
  %.0104 = phi i32 [ undef, %0 ], [ %.0104.be, %.backedge ]
  %.0102 = phi i32 [ undef, %0 ], [ %.0102.be, %.backedge ]
  %.0100 = phi i32 [ undef, %0 ], [ %.0100.be, %.backedge ]
  %.098 = phi i32 [ undef, %0 ], [ %.098.be, %.backedge ]
  %.096 = phi i32 [ undef, %0 ], [ %.096.be, %.backedge ]
  %.094 = phi i32 [ undef, %0 ], [ %.094.be, %.backedge ]
  %.092 = phi i32 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i32 [ 1, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i32 [ undef, %0 ], [ %.088.be, %.backedge ]
  %.0 = phi i32 [ -625571789, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -625571789, label %9
    i32 -1879371348, label %12
    i32 1157470920, label %16
    i32 2058358805, label %19
    i32 -470251022, label %31
    i32 604246821, label %41
    i32 1721061106, label %51
    i32 -7513395, label %52
    i32 1164906826, label %53
    i32 1099452063, label %63
    i32 -216183978, label %74
    i32 2136521165, label %75
    i32 1581289634, label %85
    i32 -1643675310, label %95
    i32 -91032237, label %96
    i32 507551200, label %99
    i32 653292184, label %109
    i32 1573753364, label %121
    i32 -949919895, label %122
    i32 -120497751, label %132
    i32 -565126048, label %144
    i32 772891679, label %146
    i32 1733877913, label %156
    i32 330127744, label %173
    i32 -1944602353, label %175
    i32 1612461274, label %183
    i32 -83445349, label %188
    i32 -1808956064, label %195
    i32 -162493418, label %200
    i32 -757961127, label %201
    i32 -1984720108, label %202
    i32 -282974956, label %203
    i32 225706630, label %213
    i32 1719892480, label %223
    i32 -490107043, label %224
    i32 -1278508049, label %226
    i32 380700688, label %236
    i32 -2019639180, label %246
    i32 -584780498, label %247
    i32 -1571258846, label %257
    i32 -888308632, label %271
    i32 1942520464, label %273
    i32 1124306365, label %274
    i32 -1688197767, label %279
    i32 107497461, label %289
    i32 -808677909, label %331
    i32 2109060276, label %332
    i32 -409089912, label %342
    i32 1215616826, label %353
    i32 -1875199787, label %354
    i32 2036563616, label %355
    i32 -552796820, label %365
    i32 1166853618, label %376
    i32 -657947762, label %377
    i32 1965870353, label %378
    i32 2106530376, label %381
    i32 -735700584, label %423
    i32 7586809, label %433
    i32 -1707274319, label %443
    i32 -1244732164, label %444
    i32 -1148419897, label %445
    i32 231767944, label %447
    i32 1882829181, label %448
    i32 -546475210, label %449
    i32 2120590653, label %452
    i32 1573855387, label %453
    i32 -122670753, label %456
    i32 1864058664, label %457
    i32 -1352893835, label %458
    i32 1839041837, label %459
    i32 1176915637, label %493
    i32 1947713748, label %495
    i32 -782240944, label %496
  ]

.backedge:                                        ; preds = %8, %496, %495, %493, %459, %458, %457, %456, %453, %452, %449, %448, %447, %445, %443, %433, %423, %381, %378, %377, %376, %365, %355, %354, %353, %342, %332, %331, %289, %279, %274, %273, %271, %257, %247, %246, %236, %226, %224, %223, %213, %203, %202, %201, %200, %195, %188, %183, %175, %173, %156, %146, %144, %132, %122, %121, %109, %99, %96, %95, %85, %75, %74, %63, %53, %52, %51, %41, %31, %19, %16, %12, %9
  %.0104.be = phi i32 [ %.0104, %8 ], [ %.0104, %496 ], [ %.0104, %495 ], [ %.0104, %493 ], [ %.0104, %459 ], [ %.0104, %458 ], [ %.0104, %457 ], [ %.0104, %456 ], [ %.0104, %453 ], [ %.0104, %452 ], [ %.0104, %449 ], [ 1, %448 ], [ %.0104, %447 ], [ %.0104, %445 ], [ %.0104, %443 ], [ %.0104, %433 ], [ %.0104, %423 ], [ %.0104, %381 ], [ %.0104, %378 ], [ %.0104, %377 ], [ %.0104, %376 ], [ %.0104, %365 ], [ %.0104, %355 ], [ %.0104, %354 ], [ %.0104, %353 ], [ %.0104, %342 ], [ %.0104, %332 ], [ %.0104, %331 ], [ %.0104, %289 ], [ %.0104, %279 ], [ %.0104, %274 ], [ %.0104, %273 ], [ %.0104, %271 ], [ %.0104, %257 ], [ %.0104, %247 ], [ %.0104, %246 ], [ %.0104, %236 ], [ %.0104, %226 ], [ %225, %224 ], [ %.0104, %223 ], [ %.0104, %213 ], [ %.0104, %203 ], [ %.0104, %202 ], [ %.0104, %201 ], [ %.0104, %200 ], [ %.0104, %195 ], [ %.0104, %188 ], [ %.0104, %183 ], [ %.0104, %175 ], [ %.0104, %173 ], [ %.0104, %156 ], [ %.0104, %146 ], [ %.0104, %144 ], [ %.0104, %132 ], [ %.0104, %122 ], [ %.0104, %121 ], [ %.0104, %109 ], [ %.0104, %99 ], [ %.0104, %96 ], [ %.0104, %95 ], [ 1, %85 ], [ %.0104, %75 ], [ %.0104, %74 ], [ %.0104, %63 ], [ %.0104, %53 ], [ %.0104, %52 ], [ %.0104, %51 ], [ %.0104, %41 ], [ %.0104, %31 ], [ %.0104, %19 ], [ %.0104, %16 ], [ %.0104, %12 ], [ %.0104, %9 ]
  %.0102.be = phi i32 [ %.0102, %8 ], [ %.0102, %496 ], [ %.0102, %495 ], [ %.0102, %493 ], [ %.0102, %459 ], [ %.0102, %458 ], [ %.0102, %457 ], [ %.0102, %456 ], [ %.0102, %453 ], [ %.0102, %452 ], [ %451, %449 ], [ %.0102, %448 ], [ %.0102, %447 ], [ %.0102, %445 ], [ %.0102, %443 ], [ %.0102, %433 ], [ %.0102, %423 ], [ %.0102, %381 ], [ %.0102, %378 ], [ %.0102, %377 ], [ %.0102, %376 ], [ %.0102, %365 ], [ %.0102, %355 ], [ %.0102, %354 ], [ %.0102, %353 ], [ %.0102, %342 ], [ %.0102, %332 ], [ %.0102, %331 ], [ %.0102, %289 ], [ %.0102, %279 ], [ %.0102, %274 ], [ %.0102, %273 ], [ %.0102, %271 ], [ %.0102, %257 ], [ %.0102, %247 ], [ %.0102, %246 ], [ %.0102, %236 ], [ %.0102, %226 ], [ %.0102, %224 ], [ %.0102, %223 ], [ %.0102, %213 ], [ %.0102, %203 ], [ %.0102, %202 ], [ %.0102, %201 ], [ %.0102, %200 ], [ %.0102, %195 ], [ %.0102, %188 ], [ %.0102, %183 ], [ %.0102, %175 ], [ %.0102, %173 ], [ %.0102, %156 ], [ %.0102, %146 ], [ %.0102, %144 ], [ %.0102, %132 ], [ %.0102, %122 ], [ %.0102, %121 ], [ %111, %109 ], [ %.0102, %99 ], [ %.0102, %96 ], [ %.0102, %95 ], [ %.0102, %85 ], [ %.0102, %75 ], [ %.0102, %74 ], [ %.0102, %63 ], [ %.0102, %53 ], [ %.0102, %52 ], [ %.0102, %51 ], [ %.0102, %41 ], [ %.0102, %31 ], [ %.0102, %19 ], [ %.0102, %16 ], [ %.0102, %12 ], [ %.0102, %9 ]
  %.0100.be = phi i32 [ %.0100, %8 ], [ %.0100, %496 ], [ %.0100, %495 ], [ %.0100, %493 ], [ %.0100, %459 ], [ %.0100, %458 ], [ %.0100, %457 ], [ %.0100, %456 ], [ %455, %453 ], [ %.0100, %452 ], [ %.0100, %449 ], [ %.0100, %448 ], [ %.0100, %447 ], [ %.0100, %445 ], [ %.0100, %443 ], [ %.0100, %433 ], [ %.0100, %423 ], [ %.0100, %381 ], [ %.0100, %378 ], [ %.0100, %377 ], [ %.0100, %376 ], [ %.0100, %365 ], [ %.0100, %355 ], [ %.0100, %354 ], [ %.0100, %353 ], [ %.0100, %342 ], [ %.0100, %332 ], [ %.0100, %331 ], [ %.0100, %289 ], [ %.0100, %279 ], [ %.0100, %274 ], [ %.0100, %273 ], [ %.0100, %271 ], [ %.0100, %257 ], [ %.0100, %247 ], [ %.0100, %246 ], [ %.0100, %236 ], [ %.0100, %226 ], [ %.0100, %224 ], [ %.0100, %223 ], [ %.0100, %213 ], [ %.0100, %203 ], [ %.0100, %202 ], [ %.0100, %201 ], [ %.0100, %200 ], [ %.0100, %195 ], [ %.0100, %188 ], [ %.0100, %183 ], [ %.0100, %175 ], [ %.0100, %173 ], [ %158, %156 ], [ %.0100, %146 ], [ %.0100, %144 ], [ %.0100, %132 ], [ %.0100, %122 ], [ %.0100, %121 ], [ %.0100, %109 ], [ %.0100, %99 ], [ %.0100, %96 ], [ %.0100, %95 ], [ %.0100, %85 ], [ %.0100, %75 ], [ %.0100, %74 ], [ %.0100, %63 ], [ %.0100, %53 ], [ %.0100, %52 ], [ %.0100, %51 ], [ %.0100, %41 ], [ %.0100, %31 ], [ %.0100, %19 ], [ %.0100, %16 ], [ %.0100, %12 ], [ %.0100, %9 ]
  %.098.be = phi i32 [ %.098, %8 ], [ %.098, %496 ], [ %.098, %495 ], [ %.098, %493 ], [ %.098, %459 ], [ %.098, %458 ], [ %.098, %457 ], [ %.098, %456 ], [ %.098, %453 ], [ %.098, %452 ], [ 1, %449 ], [ %.098, %448 ], [ %.098, %447 ], [ %.098, %445 ], [ %.098, %443 ], [ %.098, %433 ], [ %.098, %423 ], [ %.098, %381 ], [ %.098, %378 ], [ %.098, %377 ], [ %.098, %376 ], [ %.098, %365 ], [ %.098, %355 ], [ %.098, %354 ], [ %.098, %353 ], [ %.098, %342 ], [ %.098, %332 ], [ %.098, %331 ], [ %.098, %289 ], [ %.098, %279 ], [ %.098, %274 ], [ %.098, %273 ], [ %.098, %271 ], [ %.098, %257 ], [ %.098, %247 ], [ %.098, %246 ], [ %.098, %236 ], [ %.098, %226 ], [ %.098, %224 ], [ %.098, %223 ], [ %.098, %213 ], [ %.098, %203 ], [ %.neg115, %202 ], [ %.098, %201 ], [ %.098, %200 ], [ %.098, %195 ], [ %.098, %188 ], [ %.098, %183 ], [ %.098, %175 ], [ %.098, %173 ], [ %.098, %156 ], [ %.098, %146 ], [ %.098, %144 ], [ %.098, %132 ], [ %.098, %122 ], [ %.098, %121 ], [ 1, %109 ], [ %.098, %99 ], [ %.098, %96 ], [ %.098, %95 ], [ %.098, %85 ], [ %.098, %75 ], [ %.098, %74 ], [ %.098, %63 ], [ %.098, %53 ], [ %.098, %52 ], [ %.098, %51 ], [ %.098, %41 ], [ %.098, %31 ], [ %.098, %19 ], [ %.098, %16 ], [ %.098, %12 ], [ %.098, %9 ]
  %.096.be = phi i32 [ %.096, %8 ], [ %.096, %496 ], [ %.neg, %495 ], [ %.096, %493 ], [ %.096, %459 ], [ %.096, %458 ], [ 1, %457 ], [ %.096, %456 ], [ %.096, %453 ], [ %.096, %452 ], [ %.096, %449 ], [ %.096, %448 ], [ %.096, %447 ], [ %.096, %445 ], [ %.096, %443 ], [ %.096, %433 ], [ %.096, %423 ], [ %.096, %381 ], [ %.096, %378 ], [ %.096, %377 ], [ %.096, %376 ], [ %366, %365 ], [ %.096, %355 ], [ %.096, %354 ], [ %.096, %353 ], [ %.096, %342 ], [ %.096, %332 ], [ %.096, %331 ], [ %.096, %289 ], [ %.096, %279 ], [ %.096, %274 ], [ %.096, %273 ], [ %.096, %271 ], [ %.096, %257 ], [ %.096, %247 ], [ %.096, %246 ], [ 1, %236 ], [ %.096, %226 ], [ %.096, %224 ], [ %.096, %223 ], [ %.096, %213 ], [ %.096, %203 ], [ %.096, %202 ], [ %.096, %201 ], [ %.096, %200 ], [ %.096, %195 ], [ %.096, %188 ], [ %.096, %183 ], [ %.096, %175 ], [ %.096, %173 ], [ %.096, %156 ], [ %.096, %146 ], [ %.096, %144 ], [ %.096, %132 ], [ %.096, %122 ], [ %.096, %121 ], [ %.096, %109 ], [ %.096, %99 ], [ %.096, %96 ], [ %.096, %95 ], [ %.096, %85 ], [ %.096, %75 ], [ %.096, %74 ], [ %.096, %63 ], [ %.096, %53 ], [ %.096, %52 ], [ %.096, %51 ], [ %.096, %41 ], [ %.096, %31 ], [ %.096, %19 ], [ %.096, %16 ], [ %.096, %12 ], [ %.096, %9 ]
  %.094.be = phi i32 [ %.094, %8 ], [ %.094, %496 ], [ %.094, %495 ], [ %494, %493 ], [ %.094, %459 ], [ %.094, %458 ], [ %.094, %457 ], [ %.094, %456 ], [ %.094, %453 ], [ %.094, %452 ], [ %.094, %449 ], [ %.094, %448 ], [ %.094, %447 ], [ %.094, %445 ], [ %.094, %443 ], [ %.094, %433 ], [ %.094, %423 ], [ %.094, %381 ], [ %.094, %378 ], [ %.094, %377 ], [ %.094, %376 ], [ %.094, %365 ], [ %.094, %355 ], [ %.094, %354 ], [ %.094, %353 ], [ %343, %342 ], [ %.094, %332 ], [ %.094, %331 ], [ %.094, %289 ], [ %.094, %279 ], [ %.094, %274 ], [ 1, %273 ], [ %.094, %271 ], [ %.094, %257 ], [ %.094, %247 ], [ %.094, %246 ], [ %.094, %236 ], [ %.094, %226 ], [ %.094, %224 ], [ %.094, %223 ], [ %.094, %213 ], [ %.094, %203 ], [ %.094, %202 ], [ %.094, %201 ], [ %.094, %200 ], [ %.094, %195 ], [ %.094, %188 ], [ %.094, %183 ], [ %.094, %175 ], [ %.094, %173 ], [ %.094, %156 ], [ %.094, %146 ], [ %.094, %144 ], [ %.094, %132 ], [ %.094, %122 ], [ %.094, %121 ], [ %.094, %109 ], [ %.094, %99 ], [ %.094, %96 ], [ %.094, %95 ], [ %.094, %85 ], [ %.094, %75 ], [ %.094, %74 ], [ %.094, %63 ], [ %.094, %53 ], [ %.094, %52 ], [ %.094, %51 ], [ %.094, %41 ], [ %.094, %31 ], [ %.094, %19 ], [ %.094, %16 ], [ %.094, %12 ], [ %.094, %9 ]
  %.092.be = phi i32 [ %.092, %8 ], [ %.092, %496 ], [ %.092, %495 ], [ %.092, %493 ], [ %.092, %459 ], [ %.092, %458 ], [ %.092, %457 ], [ %.092, %456 ], [ %.092, %453 ], [ %.092, %452 ], [ %.092, %449 ], [ %.092, %448 ], [ %.092, %447 ], [ %446, %445 ], [ %.092, %443 ], [ %.092, %433 ], [ %.092, %423 ], [ %.092, %381 ], [ %.092, %378 ], [ %.092, %377 ], [ %.092, %376 ], [ %.092, %365 ], [ %.092, %355 ], [ %.092, %354 ], [ %.092, %353 ], [ %.092, %342 ], [ %.092, %332 ], [ %.092, %331 ], [ %.092, %289 ], [ %.092, %279 ], [ %.092, %274 ], [ %.092, %273 ], [ %.092, %271 ], [ %.092, %257 ], [ %.092, %247 ], [ %.092, %246 ], [ %.092, %236 ], [ %.092, %226 ], [ %.092, %224 ], [ %.092, %223 ], [ %.092, %213 ], [ %.092, %203 ], [ %.092, %202 ], [ %.092, %201 ], [ %.092, %200 ], [ %.092, %195 ], [ %.092, %188 ], [ %.092, %183 ], [ %.092, %175 ], [ %.092, %173 ], [ %.092, %156 ], [ %.092, %146 ], [ %.092, %144 ], [ %.092, %132 ], [ %.092, %122 ], [ %.092, %121 ], [ %.092, %109 ], [ %.092, %99 ], [ %.092, %96 ], [ %.092, %95 ], [ %.092, %85 ], [ %.092, %75 ], [ %.092, %74 ], [ %.092, %63 ], [ %.092, %53 ], [ %.092, %52 ], [ %.092, %51 ], [ %.neg118, %41 ], [ %.092, %31 ], [ %.092, %19 ], [ %.092, %16 ], [ 1, %12 ], [ %.092, %9 ]
  %.090.be = phi i32 [ %.090, %8 ], [ %.090, %496 ], [ %.090, %495 ], [ %.090, %493 ], [ %.090, %459 ], [ %.090, %458 ], [ %.090, %457 ], [ %.090, %456 ], [ %.090, %453 ], [ %.090, %452 ], [ %.090, %449 ], [ %.090, %448 ], [ %.neg110, %447 ], [ %.090, %445 ], [ %.090, %443 ], [ %.090, %433 ], [ %.090, %423 ], [ %.090, %381 ], [ %.090, %378 ], [ %.090, %377 ], [ %.090, %376 ], [ %.090, %365 ], [ %.090, %355 ], [ %.090, %354 ], [ %.090, %353 ], [ %.090, %342 ], [ %.090, %332 ], [ %.090, %331 ], [ %.090, %289 ], [ %.090, %279 ], [ %.090, %274 ], [ %.090, %273 ], [ %.090, %271 ], [ %.090, %257 ], [ %.090, %247 ], [ %.090, %246 ], [ %.090, %236 ], [ %.090, %226 ], [ %.090, %224 ], [ %.090, %223 ], [ %.090, %213 ], [ %.090, %203 ], [ %.090, %202 ], [ %.090, %201 ], [ %.090, %200 ], [ %.090, %195 ], [ %.090, %188 ], [ %.090, %183 ], [ %.090, %175 ], [ %.090, %173 ], [ %.090, %156 ], [ %.090, %146 ], [ %.090, %144 ], [ %.090, %132 ], [ %.090, %122 ], [ %.090, %121 ], [ %.090, %109 ], [ %.090, %99 ], [ %.090, %96 ], [ %.090, %95 ], [ %.090, %85 ], [ %.090, %75 ], [ %.090, %74 ], [ %64, %63 ], [ %.090, %53 ], [ %.090, %52 ], [ %.090, %51 ], [ %.090, %41 ], [ %.090, %31 ], [ %.090, %19 ], [ %.090, %16 ], [ %.090, %12 ], [ %.090, %9 ]
  %.088.be = phi i32 [ %.088, %8 ], [ %497, %496 ], [ %.088, %495 ], [ %.088, %493 ], [ %.088, %459 ], [ %.088, %458 ], [ %.088, %457 ], [ %.088, %456 ], [ %.088, %453 ], [ %.088, %452 ], [ %.088, %449 ], [ %.088, %448 ], [ %.088, %447 ], [ %.088, %445 ], [ %.088, %443 ], [ %.neg111, %433 ], [ %.088, %423 ], [ %.088, %381 ], [ %.088, %378 ], [ 1, %377 ], [ %.088, %376 ], [ %.088, %365 ], [ %.088, %355 ], [ %.088, %354 ], [ %.088, %353 ], [ %.088, %342 ], [ %.088, %332 ], [ %.088, %331 ], [ %.088, %289 ], [ %.088, %279 ], [ %.088, %274 ], [ %.088, %273 ], [ %.088, %271 ], [ %.088, %257 ], [ %.088, %247 ], [ %.088, %246 ], [ %.088, %236 ], [ %.088, %226 ], [ %.088, %224 ], [ %.088, %223 ], [ %.088, %213 ], [ %.088, %203 ], [ %.088, %202 ], [ %.088, %201 ], [ %.088, %200 ], [ %.088, %195 ], [ %.088, %188 ], [ %.088, %183 ], [ %.088, %175 ], [ %.088, %173 ], [ %.088, %156 ], [ %.088, %146 ], [ %.088, %144 ], [ %.088, %132 ], [ %.088, %122 ], [ %.088, %121 ], [ %.088, %109 ], [ %.088, %99 ], [ %.088, %96 ], [ %.088, %95 ], [ %.088, %85 ], [ %.088, %75 ], [ %.088, %74 ], [ %.088, %63 ], [ %.088, %53 ], [ %.088, %52 ], [ %.088, %51 ], [ %.088, %41 ], [ %.088, %31 ], [ %.088, %19 ], [ %.088, %16 ], [ %.088, %12 ], [ %.088, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ 7586809, %496 ], [ -552796820, %495 ], [ -409089912, %493 ], [ 107497461, %459 ], [ -1571258846, %458 ], [ 380700688, %457 ], [ 225706630, %456 ], [ 1733877913, %453 ], [ -120497751, %452 ], [ 653292184, %449 ], [ 1581289634, %448 ], [ 1099452063, %447 ], [ 604246821, %445 ], [ 1965870353, %443 ], [ %442, %433 ], [ %432, %423 ], [ -735700584, %381 ], [ %380, %378 ], [ 1965870353, %377 ], [ -584780498, %376 ], [ %375, %365 ], [ %364, %355 ], [ 2036563616, %354 ], [ 1124306365, %353 ], [ %352, %342 ], [ %341, %332 ], [ 2109060276, %331 ], [ %330, %289 ], [ %288, %279 ], [ %278, %274 ], [ 1124306365, %273 ], [ %272, %271 ], [ %270, %257 ], [ %256, %247 ], [ -584780498, %246 ], [ %245, %236 ], [ %235, %226 ], [ -91032237, %224 ], [ -490107043, %223 ], [ %222, %213 ], [ %212, %203 ], [ -949919895, %202 ], [ -1984720108, %201 ], [ -757961127, %200 ], [ -162493418, %195 ], [ %194, %188 ], [ -83445349, %183 ], [ %182, %175 ], [ %174, %173 ], [ %172, %156 ], [ %155, %146 ], [ %145, %144 ], [ %143, %132 ], [ %131, %122 ], [ -949919895, %121 ], [ %120, %109 ], [ %108, %99 ], [ %98, %96 ], [ -91032237, %95 ], [ %94, %85 ], [ %84, %75 ], [ -625571789, %74 ], [ %73, %63 ], [ %62, %53 ], [ 1164906826, %52 ], [ 1157470920, %51 ], [ %50, %41 ], [ %40, %31 ], [ -470251022, %19 ], [ %18, %16 ], [ 1157470920, %12 ], [ %11, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i32, i32* @n, align 4
  %.not120 = icmp sgt i32 %.090, %10
  %11 = select i1 %.not120, i32 2136521165, i32 -1879371348
  br label %.backedge

12:                                               ; preds = %8
  %13 = sext i32 %.090 to i64
  %14 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @mp, i64 0, i64 %13, i64 1
  %15 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* nonnull %14)
  br label %.backedge

16:                                               ; preds = %8
  %17 = load i32, i32* @m, align 4
  %.not119 = icmp sgt i32 %.092, %17
  %18 = select i1 %.not119, i32 -7513395, i32 2058358805
  br label %.backedge

19:                                               ; preds = %8
  %20 = sext i32 %.090 to i64
  %21 = sext i32 %.092 to i64
  %22 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @mp, i64 0, i64 %20, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = shl nsw i32 %.090, 1
  %25 = add i32 %24, -1
  %26 = sext i32 %25 to i64
  %27 = shl nsw i32 %.092, 1
  %28 = add i32 %27, -1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [4005 x [4005 x i8]], [4005 x [4005 x i8]]* @s, i64 0, i64 %26, i64 %29
  store i8 %23, i8* %30, align 2
  br label %.backedge

31:                                               ; preds = %8
  %32 = load i32, i32* @x.2, align 4
  %33 = load i32, i32* @y.3, align 4
  %34 = add i32 %32, -1
  %35 = mul i32 %34, %32
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %38, %37
  %40 = select i1 %39, i32 604246821, i32 -1148419897
  br label %.backedge

41:                                               ; preds = %8
  %.neg118 = add i32 %.092, 1
  %42 = load i32, i32* @x.2, align 4
  %43 = load i32, i32* @y.3, align 4
  %44 = add i32 %42, -1
  %45 = mul i32 %44, %42
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %48, %47
  %50 = select i1 %49, i32 1721061106, i32 -1148419897
  br label %.backedge

51:                                               ; preds = %8
  br label %.backedge

52:                                               ; preds = %8
  br label %.backedge

53:                                               ; preds = %8
  %54 = load i32, i32* @x.2, align 4
  %55 = load i32, i32* @y.3, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 1099452063, i32 231767944
  br label %.backedge

63:                                               ; preds = %8
  %64 = add i32 %.090, 1
  %65 = load i32, i32* @x.2, align 4
  %66 = load i32, i32* @y.3, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 -216183978, i32 231767944
  br label %.backedge

74:                                               ; preds = %8
  br label %.backedge

75:                                               ; preds = %8
  %76 = load i32, i32* @x.2, align 4
  %77 = load i32, i32* @y.3, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 1581289634, i32 1882829181
  br label %.backedge

85:                                               ; preds = %8
  %86 = load i32, i32* @x.2, align 4
  %87 = load i32, i32* @y.3, align 4
  %88 = add i32 %86, -1
  %89 = mul i32 %88, %86
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %92, %91
  %94 = select i1 %93, i32 -1643675310, i32 1882829181
  br label %.backedge

95:                                               ; preds = %8
  br label %.backedge

96:                                               ; preds = %8
  %97 = load i32, i32* @n, align 4
  %.not117 = icmp sgt i32 %.0104, %97
  %98 = select i1 %.not117, i32 -1278508049, i32 507551200
  br label %.backedge

99:                                               ; preds = %8
  %100 = load i32, i32* @x.2, align 4
  %101 = load i32, i32* @y.3, align 4
  %102 = add i32 %100, -1
  %103 = mul i32 %102, %100
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %106, %105
  %108 = select i1 %107, i32 653292184, i32 -546475210
  br label %.backedge

109:                                              ; preds = %8
  %110 = shl nsw i32 %.0104, 1
  %111 = add i32 %110, -1
  %112 = load i32, i32* @x.2, align 4
  %113 = load i32, i32* @y.3, align 4
  %114 = add i32 %112, -1
  %115 = mul i32 %114, %112
  %116 = and i32 %115, 1
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %118, %117
  %120 = select i1 %119, i32 1573753364, i32 -546475210
  br label %.backedge

121:                                              ; preds = %8
  br label %.backedge

122:                                              ; preds = %8
  %123 = load i32, i32* @x.2, align 4
  %124 = load i32, i32* @y.3, align 4
  %125 = add i32 %123, -1
  %126 = mul i32 %125, %123
  %127 = and i32 %126, 1
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %129, %128
  %131 = select i1 %130, i32 -120497751, i32 2120590653
  br label %.backedge

132:                                              ; preds = %8
  %133 = load i32, i32* @m, align 4
  %134 = icmp sle i32 %.098, %133
  store i1 %134, i1* %3, align 1
  %135 = load i32, i32* @x.2, align 4
  %136 = load i32, i32* @y.3, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 -565126048, i32 2120590653
  br label %.backedge

144:                                              ; preds = %8
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %145 = select i1 %.0..0..0., i32 772891679, i32 -282974956
  br label %.backedge

146:                                              ; preds = %8
  %147 = load i32, i32* @x.2, align 4
  %148 = load i32, i32* @y.3, align 4
  %149 = add i32 %147, -1
  %150 = mul i32 %149, %147
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 1733877913, i32 1573855387
  br label %.backedge

156:                                              ; preds = %8
  %157 = shl nsw i32 %.098, 1
  %158 = add i32 %157, -1
  %159 = sext i32 %.0102 to i64
  %160 = sext i32 %158 to i64
  %161 = getelementptr inbounds [4005 x [4005 x i8]], [4005 x [4005 x i8]]* @s, i64 0, i64 %159, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = icmp eq i8 %162, 49
  store i1 %163, i1* %2, align 1
  %164 = load i32, i32* @x.2, align 4
  %165 = load i32, i32* @y.3, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 330127744, i32 1573855387
  br label %.backedge

173:                                              ; preds = %8
  %.0..0..0.86 = load volatile i1, i1* %2, align 1
  %174 = select i1 %.0..0..0.86, i32 -1944602353, i32 -757961127
  br label %.backedge

175:                                              ; preds = %8
  %176 = add i32 %.0102, 2
  %177 = sext i32 %176 to i64
  %178 = sext i32 %.0100 to i64
  %179 = getelementptr inbounds [4005 x [4005 x i8]], [4005 x [4005 x i8]]* @s, i64 0, i64 %177, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = icmp eq i8 %180, 49
  %182 = select i1 %181, i32 1612461274, i32 -83445349
  br label %.backedge

183:                                              ; preds = %8
  %184 = add i32 %.0102, 1
  %185 = sext i32 %184 to i64
  %186 = sext i32 %.0100 to i64
  %187 = getelementptr inbounds [4005 x [4005 x i8]], [4005 x [4005 x i8]]* @s, i64 0, i64 %185, i64 %186
  store i8 50, i8* %187, align 1
  br label %.backedge

188:                                              ; preds = %8
  %189 = sext i32 %.0102 to i64
  %.neg116 = add i32 %.0100, 2
  %190 = sext i32 %.neg116 to i64
  %191 = getelementptr inbounds [4005 x [4005 x i8]], [4005 x [4005 x i8]]* @s, i64 0, i64 %189, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 49
  %194 = select i1 %193, i32 -1808956064, i32 -162493418
  br label %.backedge

195:                                              ; preds = %8
  %196 = sext i32 %.0102 to i64
  %197 = add i32 %.0100, 1
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds [4005 x [4005 x i8]], [4005 x [4005 x i8]]* @s, i64 0, i64 %196, i64 %198
  store i8 50, i8* %199, align 1
  br label %.backedge

200:                                              ; preds = %8
  br label %.backedge

201:                                              ; preds = %8
  br label %.backedge

202:                                              ; preds = %8
  %.neg115 = add i32 %.098, 1
  br label %.backedge

203:                                              ; preds = %8
  %204 = load i32, i32* @x.2, align 4
  %205 = load i32, i32* @y.3, align 4
  %206 = add i32 %204, -1
  %207 = mul i32 %206, %204
  %208 = and i32 %207, 1
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %210, %209
  %212 = select i1 %211, i32 225706630, i32 -122670753
  br label %.backedge

213:                                              ; preds = %8
  %214 = load i32, i32* @x.2, align 4
  %215 = load i32, i32* @y.3, align 4
  %216 = add i32 %214, -1
  %217 = mul i32 %216, %214
  %218 = and i32 %217, 1
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %220, %219
  %222 = select i1 %221, i32 1719892480, i32 -122670753
  br label %.backedge

223:                                              ; preds = %8
  br label %.backedge

224:                                              ; preds = %8
  %225 = add i32 %.0104, 1
  br label %.backedge

226:                                              ; preds = %8
  %227 = load i32, i32* @x.2, align 4
  %228 = load i32, i32* @y.3, align 4
  %229 = add i32 %227, -1
  %230 = mul i32 %229, %227
  %231 = and i32 %230, 1
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %233, %232
  %235 = select i1 %234, i32 380700688, i32 1864058664
  br label %.backedge

236:                                              ; preds = %8
  %237 = load i32, i32* @x.2, align 4
  %238 = load i32, i32* @y.3, align 4
  %239 = add i32 %237, -1
  %240 = mul i32 %239, %237
  %241 = and i32 %240, 1
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %243, %242
  %245 = select i1 %244, i32 -2019639180, i32 1864058664
  br label %.backedge

246:                                              ; preds = %8
  br label %.backedge

247:                                              ; preds = %8
  %248 = load i32, i32* @x.2, align 4
  %249 = load i32, i32* @y.3, align 4
  %250 = add i32 %248, -1
  %251 = mul i32 %250, %248
  %252 = and i32 %251, 1
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %254, %253
  %256 = select i1 %255, i32 -1571258846, i32 -1352893835
  br label %.backedge

257:                                              ; preds = %8
  %258 = load i32, i32* @n, align 4
  %259 = shl nsw i32 %258, 1
  %260 = add i32 %259, -1
  %261 = icmp sle i32 %.096, %260
  store i1 %261, i1* %1, align 1
  %262 = load i32, i32* @x.2, align 4
  %263 = load i32, i32* @y.3, align 4
  %264 = add i32 %262, -1
  %265 = mul i32 %264, %262
  %266 = and i32 %265, 1
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %268, %267
  %270 = select i1 %269, i32 -888308632, i32 -1352893835
  br label %.backedge

271:                                              ; preds = %8
  %.0..0..0.87 = load volatile i1, i1* %1, align 1
  %272 = select i1 %.0..0..0.87, i32 1942520464, i32 -657947762
  br label %.backedge

273:                                              ; preds = %8
  br label %.backedge

274:                                              ; preds = %8
  %275 = load i32, i32* @m, align 4
  %276 = shl nsw i32 %275, 1
  %277 = add i32 %276, -1
  %.not114 = icmp sgt i32 %.094, %277
  %278 = select i1 %.not114, i32 -1875199787, i32 -1688197767
  br label %.backedge

279:                                              ; preds = %8
  %280 = load i32, i32* @x.2, align 4
  %281 = load i32, i32* @y.3, align 4
  %282 = add i32 %280, -1
  %283 = mul i32 %282, %280
  %284 = and i32 %283, 1
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %286, %285
  %288 = select i1 %287, i32 107497461, i32 1839041837
  br label %.backedge

289:                                              ; preds = %8
  %290 = sext i32 %.096 to i64
  %291 = sext i32 %.094 to i64
  %292 = getelementptr inbounds [4005 x [4005 x i8]], [4005 x [4005 x i8]]* @s, i64 0, i64 %290, i64 %291
  %293 = load i8, i8* %292, align 1
  %294 = icmp eq i8 %293, 49
  %295 = zext i1 %294 to i32
  %296 = add i32 %.096, -1
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %297, i64 %291
  %299 = load i32, i32* %298, align 4
  %300 = add i32 %299, %295
  %301 = add i32 %.094, -1
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %290, i64 %302
  %304 = load i32, i32* %303, align 4
  %305 = add i32 %300, %304
  %306 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %297, i64 %302
  %307 = load i32, i32* %306, align 4
  %308 = sub i32 %305, %307
  %309 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %290, i64 %291
  store i32 %308, i32* %309, align 4
  %310 = icmp eq i8 %293, 50
  %311 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %297, i64 %291
  %312 = load i32, i32* %311, align 4
  %313 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %290, i64 %302
  %314 = load i32, i32* %313, align 4
  %315 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %297, i64 %302
  %316 = load i32, i32* %315, align 4
  %317 = zext i1 %310 to i32
  %318 = add i32 %312, %317
  %319 = add i32 %318, %314
  %320 = sub i32 %319, %316
  %321 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %290, i64 %291
  store i32 %320, i32* %321, align 4
  %322 = load i32, i32* @x.2, align 4
  %323 = load i32, i32* @y.3, align 4
  %324 = add i32 %322, -1
  %325 = mul i32 %324, %322
  %326 = and i32 %325, 1
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %328, %327
  %330 = select i1 %329, i32 -808677909, i32 1839041837
  br label %.backedge

331:                                              ; preds = %8
  br label %.backedge

332:                                              ; preds = %8
  %333 = load i32, i32* @x.2, align 4
  %334 = load i32, i32* @y.3, align 4
  %335 = add i32 %333, -1
  %336 = mul i32 %335, %333
  %337 = and i32 %336, 1
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %339, %338
  %341 = select i1 %340, i32 -409089912, i32 1176915637
  br label %.backedge

342:                                              ; preds = %8
  %343 = add i32 %.094, 1
  %344 = load i32, i32* @x.2, align 4
  %345 = load i32, i32* @y.3, align 4
  %346 = add i32 %344, -1
  %347 = mul i32 %346, %344
  %348 = and i32 %347, 1
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %350, %349
  %352 = select i1 %351, i32 1215616826, i32 1176915637
  br label %.backedge

353:                                              ; preds = %8
  br label %.backedge

354:                                              ; preds = %8
  br label %.backedge

355:                                              ; preds = %8
  %356 = load i32, i32* @x.2, align 4
  %357 = load i32, i32* @y.3, align 4
  %358 = add i32 %356, -1
  %359 = mul i32 %358, %356
  %360 = and i32 %359, 1
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %362, %361
  %364 = select i1 %363, i32 -552796820, i32 1947713748
  br label %.backedge

365:                                              ; preds = %8
  %366 = add i32 %.096, 1
  %367 = load i32, i32* @x.2, align 4
  %368 = load i32, i32* @y.3, align 4
  %369 = add i32 %367, -1
  %370 = mul i32 %369, %367
  %371 = and i32 %370, 1
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %373, %372
  %375 = select i1 %374, i32 1166853618, i32 1947713748
  br label %.backedge

376:                                              ; preds = %8
  br label %.backedge

377:                                              ; preds = %8
  br label %.backedge

378:                                              ; preds = %8
  %379 = load i32, i32* @Q, align 4
  %.not = icmp sgt i32 %.088, %379
  %380 = select i1 %.not, i32 -1244732164, i32 2106530376
  br label %.backedge

381:                                              ; preds = %8
  call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) %4)
  call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) %5)
  call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) %6)
  call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) %7)
  %382 = load i32, i32* %4, align 4
  %383 = shl nsw i32 %382, 1
  %384 = add i32 %383, -1
  store i32 %384, i32* %4, align 4
  %385 = load i32, i32* %5, align 4
  %386 = shl nsw i32 %385, 1
  %387 = add i32 %386, -1
  store i32 %387, i32* %5, align 4
  %388 = load i32, i32* %6, align 4
  %389 = shl nsw i32 %388, 1
  %390 = add i32 %389, -1
  store i32 %390, i32* %6, align 4
  %391 = load i32, i32* %7, align 4
  %392 = shl nsw i32 %391, 1
  %393 = add i32 %392, -1
  store i32 %393, i32* %7, align 4
  %394 = sext i32 %390 to i64
  %395 = sext i32 %393 to i64
  %396 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %394, i64 %395
  %397 = load i32, i32* %396, align 8
  %398 = add i32 %383, -2
  %399 = sext i32 %398 to i64
  %400 = add i32 %386, -2
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %399, i64 %401
  %403 = load i32, i32* %402, align 8
  %404 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %399, i64 %395
  %405 = load i32, i32* %404, align 4
  %406 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %394, i64 %401
  %407 = load i32, i32* %406, align 4
  %408 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %394, i64 %395
  %409 = load i32, i32* %408, align 8
  %410 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %399, i64 %401
  %411 = load i32, i32* %410, align 8
  %412 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %399, i64 %395
  %413 = load i32, i32* %412, align 4
  %414 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %394, i64 %401
  %415 = load i32, i32* %414, align 4
  %.neg112 = add i32 %403, %397
  %416 = add i32 %405, %407
  %417 = add i32 %416, %409
  %418 = add i32 %417, %411
  %419 = sub i32 %.neg112, %418
  %420 = add i32 %419, %413
  %421 = add i32 %420, %415
  %422 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %421)
  br label %.backedge

423:                                              ; preds = %8
  %424 = load i32, i32* @x.2, align 4
  %425 = load i32, i32* @y.3, align 4
  %426 = add i32 %424, -1
  %427 = mul i32 %426, %424
  %428 = and i32 %427, 1
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %430, %429
  %432 = select i1 %431, i32 7586809, i32 -782240944
  br label %.backedge

433:                                              ; preds = %8
  %.neg111 = add i32 %.088, 1
  %434 = load i32, i32* @x.2, align 4
  %435 = load i32, i32* @y.3, align 4
  %436 = add i32 %434, -1
  %437 = mul i32 %436, %434
  %438 = and i32 %437, 1
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %440, %439
  %442 = select i1 %441, i32 -1707274319, i32 -782240944
  br label %.backedge

443:                                              ; preds = %8
  br label %.backedge

444:                                              ; preds = %8
  ret i32 0

445:                                              ; preds = %8
  %446 = add i32 %.092, 1
  br label %.backedge

447:                                              ; preds = %8
  %.neg110 = add i32 %.090, 1
  br label %.backedge

448:                                              ; preds = %8
  br label %.backedge

449:                                              ; preds = %8
  %450 = shl nsw i32 %.0104, 1
  %451 = add i32 %450, -1
  br label %.backedge

452:                                              ; preds = %8
  br label %.backedge

453:                                              ; preds = %8
  %454 = shl nsw i32 %.098, 1
  %455 = add i32 %454, -1
  br label %.backedge

456:                                              ; preds = %8
  br label %.backedge

457:                                              ; preds = %8
  br label %.backedge

458:                                              ; preds = %8
  br label %.backedge

459:                                              ; preds = %8
  %460 = sext i32 %.096 to i64
  %461 = sext i32 %.094 to i64
  %462 = getelementptr inbounds [4005 x [4005 x i8]], [4005 x [4005 x i8]]* @s, i64 0, i64 %460, i64 %461
  %463 = load i8, i8* %462, align 1
  %464 = icmp eq i8 %463, 49
  %465 = add i32 %.096, -1
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %466, i64 %461
  %468 = load i32, i32* %467, align 4
  %469 = select i1 %464, i32 -1023164717, i32 -1023164718
  %470 = add i32 %.094, -1
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %460, i64 %471
  %473 = load i32, i32* %472, align 4
  %474 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %466, i64 %471
  %475 = load i32, i32* %474, align 4
  %476 = add i32 %468, 1023164718
  %477 = add i32 %476, %469
  %478 = add i32 %477, %473
  %479 = sub i32 %478, %475
  %480 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @pt, i64 0, i64 %460, i64 %461
  store i32 %479, i32* %480, align 4
  %481 = icmp eq i8 %463, 50
  %482 = zext i1 %481 to i32
  %483 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %466, i64 %461
  %484 = load i32, i32* %483, align 4
  %485 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %460, i64 %471
  %486 = load i32, i32* %485, align 4
  %487 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %466, i64 %471
  %488 = load i32, i32* %487, align 4
  %489 = add i32 %484, %482
  %490 = add i32 %489, %486
  %491 = sub i32 %490, %488
  %492 = getelementptr inbounds [4005 x [4005 x i32]], [4005 x [4005 x i32]]* @eg, i64 0, i64 %460, i64 %461
  store i32 %491, i32* %492, align 4
  br label %.backedge

493:                                              ; preds = %8
  %494 = add i32 %.094, 1
  br label %.backedge

495:                                              ; preds = %8
  %.neg = add i32 %.096, 1
  br label %.backedge

496:                                              ; preds = %8
  %497 = add i32 %.088, 1
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z4readIiEvRT_(i32* dereferenceable(4) %0) local_unnamed_addr #0 comdat {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  br label %4

4:                                                ; preds = %.backedge, %1
  %.017 = phi i8 [ undef, %1 ], [ %.017.be, %.backedge ]
  %.015 = phi i32 [ 493640075, %1 ], [ %.015.be, %.backedge ]
  %.013 = phi i1 [ undef, %1 ], [ %.013.be, %.backedge ]
  %.0 = phi i1 [ undef, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.015, label %.backedge [
    i32 493640075, label %5
    i32 499822788, label %10
    i32 -1457078837, label %12
    i32 1950426790, label %22
    i32 -252179166, label %32
    i32 1617859197, label %34
    i32 261999372, label %35
    i32 -783971479, label %38
    i32 -517616418, label %43
    i32 741975410, label %53
    i32 517448850, label %64
    i32 -1558525686, label %65
    i32 -581327056, label %67
    i32 -1306749165, label %73
    i32 1870776870, label %83
    i32 1336664698, label %93
    i32 -578755976, label %94
    i32 -1667918353, label %95
    i32 -1729637320, label %96
  ]

.backedge:                                        ; preds = %4, %96, %95, %94, %83, %73, %67, %65, %64, %53, %43, %38, %35, %34, %32, %22, %12, %10, %5
  %.017.be = phi i8 [ %.017, %4 ], [ %.017, %96 ], [ %.017, %95 ], [ %.017, %94 ], [ %.017, %83 ], [ %.017, %73 ], [ %.017, %67 ], [ %.017, %65 ], [ %.017, %64 ], [ %.017, %53 ], [ %.017, %43 ], [ %40, %38 ], [ %.017, %35 ], [ %.017, %34 ], [ %.017, %32 ], [ %.017, %22 ], [ %.017, %12 ], [ %.017, %10 ], [ %7, %5 ]
  %.015.be = phi i32 [ %.015, %4 ], [ 1870776870, %96 ], [ 741975410, %95 ], [ 1950426790, %94 ], [ %92, %83 ], [ %82, %73 ], [ -783971479, %67 ], [ %66, %65 ], [ -1558525686, %64 ], [ %63, %53 ], [ %52, %43 ], [ %42, %38 ], [ -783971479, %35 ], [ 493640075, %34 ], [ %33, %32 ], [ %31, %22 ], [ %21, %12 ], [ -1457078837, %10 ], [ %9, %5 ]
  %.013.be = phi i1 [ %.013, %4 ], [ %.013, %96 ], [ %.013, %95 ], [ %.013, %94 ], [ %.013, %83 ], [ %.013, %73 ], [ %.013, %67 ], [ %.013, %65 ], [ %.013, %64 ], [ %.013, %53 ], [ %.013, %43 ], [ %.013, %38 ], [ %.013, %35 ], [ %.013, %34 ], [ %.013, %32 ], [ %.013, %22 ], [ %.013, %12 ], [ %11, %10 ], [ true, %5 ]
  %.0.be = phi i1 [ %.0, %4 ], [ %.0, %96 ], [ %.0, %95 ], [ %.0, %94 ], [ %.0, %83 ], [ %.0, %73 ], [ %.0, %67 ], [ %.0, %65 ], [ %.0..0..0.11, %64 ], [ %.0, %53 ], [ %.0, %43 ], [ false, %38 ], [ %.0, %35 ], [ %.0, %34 ], [ %.0, %32 ], [ %.0, %22 ], [ %.0, %12 ], [ %.0, %10 ], [ %.0, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = tail call i32 @getchar()
  %7 = trunc i32 %6 to i8
  %8 = icmp slt i8 %7, 48
  %9 = select i1 %8, i32 -1457078837, i32 499822788
  br label %.backedge

10:                                               ; preds = %4
  %11 = icmp sgt i8 %.017, 57
  br label %.backedge

12:                                               ; preds = %4
  store i1 %.013, i1* %2, align 1
  %13 = load i32, i32* @x.4, align 4
  %14 = load i32, i32* @y.5, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 1950426790, i32 -578755976
  br label %.backedge

22:                                               ; preds = %4
  %23 = load i32, i32* @x.4, align 4
  %24 = load i32, i32* @y.5, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 -252179166, i32 -578755976
  br label %.backedge

32:                                               ; preds = %4
  %.0..0..0.12 = load volatile i1, i1* %2, align 1
  %33 = select i1 %.0..0..0.12, i32 1617859197, i32 261999372
  br label %.backedge

34:                                               ; preds = %4
  br label %.backedge

35:                                               ; preds = %4
  %36 = sext i8 %.017 to i32
  %37 = add nsw i32 %36, -48
  store i32 %37, i32* %0, align 4
  br label %.backedge

38:                                               ; preds = %4
  %39 = tail call i32 @getchar()
  %40 = trunc i32 %39 to i8
  %41 = icmp sgt i8 %40, 47
  %42 = select i1 %41, i32 -517616418, i32 -1558525686
  br label %.backedge

43:                                               ; preds = %4
  %44 = load i32, i32* @x.4, align 4
  %45 = load i32, i32* @y.5, align 4
  %46 = add i32 %44, -1
  %47 = mul i32 %46, %44
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %50, %49
  %52 = select i1 %51, i32 741975410, i32 -1667918353
  br label %.backedge

53:                                               ; preds = %4
  %54 = icmp slt i8 %.017, 58
  store i1 %54, i1* %3, align 1
  %55 = load i32, i32* @x.4, align 4
  %56 = load i32, i32* @y.5, align 4
  %57 = add i32 %55, -1
  %58 = mul i32 %57, %55
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %61, %60
  %63 = select i1 %62, i32 517448850, i32 -1667918353
  br label %.backedge

64:                                               ; preds = %4
  %.0..0..0.11 = load volatile i1, i1* %3, align 1
  br label %.backedge

65:                                               ; preds = %4
  %66 = select i1 %.0, i32 -581327056, i32 -1306749165
  br label %.backedge

67:                                               ; preds = %4
  %68 = load i32, i32* %0, align 4
  %69 = mul i32 %68, 10
  %70 = sext i8 %.017 to i32
  %71 = add nsw i32 %70, -48
  %72 = add i32 %71, %69
  store i32 %72, i32* %0, align 4
  br label %.backedge

73:                                               ; preds = %4
  %74 = load i32, i32* @x.4, align 4
  %75 = load i32, i32* @y.5, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 1870776870, i32 -1729637320
  br label %.backedge

83:                                               ; preds = %4
  %84 = load i32, i32* @x.4, align 4
  %85 = load i32, i32* @y.5, align 4
  %86 = add i32 %84, -1
  %87 = mul i32 %86, %84
  %88 = and i32 %87, 1
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %90, %89
  %92 = select i1 %91, i32 1336664698, i32 -1729637320
  br label %.backedge

93:                                               ; preds = %4
  ret void

94:                                               ; preds = %4
  br label %.backedge

95:                                               ; preds = %4
  br label %.backedge

96:                                               ; preds = %4
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s497094054.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.6, align 4
  %4 = load i32, i32* @y.7, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 647984113, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 647984113, label %11
    i32 716246521, label %14
    i32 331075825, label %24
    i32 1311556713, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 716246521, i32 1311556713
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.6, align 4
  %16 = load i32, i32* @y.7, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 331075825, i32 1311556713
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 716246521, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
