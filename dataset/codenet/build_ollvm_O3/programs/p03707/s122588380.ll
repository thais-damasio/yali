; ModuleID = 'build_ollvm/programs/p03707/s122588380.ll'
source_filename = "Project_CodeNet_C++1400/p03707/s122588380.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@m = global i32 0, align 4
@q = global i32 0, align 4
@a = local_unnamed_addr global [2005 x [2005 x i32]] zeroinitializer, align 16
@sum1 = local_unnamed_addr global [2005 x [2005 x i32]] zeroinitializer, align 16
@sum2 = local_unnamed_addr global [2005 x [2005 x i32]] zeroinitializer, align 16
@sum = local_unnamed_addr global [2005 x [2005 x i32]] zeroinitializer, align 16
@s = global [2005 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"%d%d%d%d\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s122588380.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1129455260, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1129455260, label %11
    i32 -1021055117, label %14
    i32 2107574786, label %25
    i32 126197641, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -1021055117, i32 126197641
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 2107574786, i32 126197641
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -1021055117, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32* nonnull @n, i32* nonnull @m, i32* nonnull @q)
  br label %15

15:                                               ; preds = %.backedge, %0
  %.0119 = phi i32 [ 1, %0 ], [ %.0119.be, %.backedge ]
  %.0117 = phi i32 [ undef, %0 ], [ %.0117.be, %.backedge ]
  %.0115 = phi i32 [ undef, %0 ], [ %.0115.be, %.backedge ]
  %.0113 = phi i32 [ undef, %0 ], [ %.0113.be, %.backedge ]
  %.0111 = phi i32 [ undef, %0 ], [ %.0111.be, %.backedge ]
  %.0109 = phi i32 [ undef, %0 ], [ %.0109.be, %.backedge ]
  %.0107 = phi i32 [ 567901985, %0 ], [ %.0107.be, %.backedge ]
  %.0105 = phi i1 [ undef, %0 ], [ %.0105.be, %.backedge ]
  %.0103 = phi i1 [ undef, %0 ], [ %.0103.be, %.backedge ]
  %.0101 = phi i32 [ undef, %0 ], [ %.0101.be, %.backedge ]
  %.0 = phi i32 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0107, label %.backedge [
    i32 567901985, label %16
    i32 -1506684838, label %26
    i32 1464628932, label %38
    i32 -706838603, label %40
    i32 -2045932255, label %42
    i32 -248840132, label %52
    i32 -760922494, label %64
    i32 1031895179, label %66
    i32 1999232258, label %76
    i32 795179399, label %78
    i32 -1723124586, label %88
    i32 -969744170, label %98
    i32 930290807, label %99
    i32 2003810286, label %101
    i32 476115135, label %102
    i32 -67613038, label %105
    i32 -225500085, label %115
    i32 1075757856, label %125
    i32 -1674419096, label %126
    i32 415547344, label %129
    i32 -1752911444, label %147
    i32 2135211049, label %154
    i32 459025642, label %164
    i32 1032529514, label %193
    i32 192537716, label %195
    i32 430679754, label %202
    i32 815224644, label %212
    i32 50713887, label %241
    i32 -71763551, label %242
    i32 1168562116, label %244
    i32 1161225670, label %254
    i32 636731080, label %264
    i32 -1745210156, label %265
    i32 1324337429, label %267
    i32 607122460, label %268
    i32 -433900900, label %271
    i32 1224501704, label %277
    i32 1413012813, label %278
    i32 -1237547470, label %299
    i32 572998113, label %304
    i32 516998014, label %305
    i32 -623635836, label %315
    i32 664974625, label %345
    i32 1964818253, label %346
    i32 199169188, label %356
    i32 1210094003, label %390
    i32 1824972666, label %391
    i32 954733291, label %401
    i32 -2021997476, label %412
    i32 1228201923, label %413
    i32 1207096333, label %414
    i32 -1337115719, label %415
    i32 820921833, label %416
    i32 1994702839, label %417
    i32 1481271164, label %418
    i32 116523545, label %422
    i32 2031928578, label %443
    i32 117347407, label %444
    i32 295572321, label %445
    i32 -1859711819, label %470
  ]

.backedge:                                        ; preds = %15, %470, %445, %444, %443, %422, %418, %417, %416, %415, %414, %412, %401, %391, %390, %356, %346, %345, %315, %305, %304, %299, %278, %277, %271, %268, %267, %265, %264, %254, %244, %242, %241, %212, %202, %195, %193, %164, %154, %147, %129, %126, %125, %115, %105, %102, %101, %99, %98, %88, %78, %76, %66, %64, %52, %42, %40, %38, %26, %16
  %.0119.be = phi i32 [ %.0119, %15 ], [ %.0119, %470 ], [ %.0119, %445 ], [ %.0119, %444 ], [ %.0119, %443 ], [ %.0119, %422 ], [ %.0119, %418 ], [ %.0119, %417 ], [ %.0119, %416 ], [ %.0119, %415 ], [ %.0119, %414 ], [ %.0119, %412 ], [ %.0119, %401 ], [ %.0119, %391 ], [ %.0119, %390 ], [ %.0119, %356 ], [ %.0119, %346 ], [ %.0119, %345 ], [ %.0119, %315 ], [ %.0119, %305 ], [ %.0119, %304 ], [ %.0119, %299 ], [ %.0119, %278 ], [ %.0119, %277 ], [ %.0119, %271 ], [ %.0119, %268 ], [ %.0119, %267 ], [ %.0119, %265 ], [ %.0119, %264 ], [ %.0119, %254 ], [ %.0119, %244 ], [ %.0119, %242 ], [ %.0119, %241 ], [ %.0119, %212 ], [ %.0119, %202 ], [ %.0119, %195 ], [ %.0119, %193 ], [ %.0119, %164 ], [ %.0119, %154 ], [ %.0119, %147 ], [ %.0119, %129 ], [ %.0119, %126 ], [ %.0119, %125 ], [ %.0119, %115 ], [ %.0119, %105 ], [ %.0119, %102 ], [ %.0119, %101 ], [ %100, %99 ], [ %.0119, %98 ], [ %.0119, %88 ], [ %.0119, %78 ], [ %.0119, %76 ], [ %.0119, %66 ], [ %.0119, %64 ], [ %.0119, %52 ], [ %.0119, %42 ], [ %.0119, %40 ], [ %.0119, %38 ], [ %.0119, %26 ], [ %.0119, %16 ]
  %.0117.be = phi i32 [ %.0117, %15 ], [ %.0117, %470 ], [ %.0117, %445 ], [ %.0117, %444 ], [ %.0117, %443 ], [ %.0117, %422 ], [ %.0117, %418 ], [ %.0117, %417 ], [ %.0117, %416 ], [ %.0117, %415 ], [ %.0117, %414 ], [ %.0117, %412 ], [ %.0117, %401 ], [ %.0117, %391 ], [ %.0117, %390 ], [ %.0117, %356 ], [ %.0117, %346 ], [ %.0117, %345 ], [ %.0117, %315 ], [ %.0117, %305 ], [ %.0117, %304 ], [ %.0117, %299 ], [ %.0117, %278 ], [ %.0117, %277 ], [ %.0117, %271 ], [ %.0117, %268 ], [ %.0117, %267 ], [ %.0117, %265 ], [ %.0117, %264 ], [ %.0117, %254 ], [ %.0117, %244 ], [ %.0117, %242 ], [ %.0117, %241 ], [ %.0117, %212 ], [ %.0117, %202 ], [ %.0117, %195 ], [ %.0117, %193 ], [ %.0117, %164 ], [ %.0117, %154 ], [ %.0117, %147 ], [ %.0117, %129 ], [ %.0117, %126 ], [ %.0117, %125 ], [ %.0117, %115 ], [ %.0117, %105 ], [ %.0117, %102 ], [ %.0117, %101 ], [ %.0117, %99 ], [ %.0117, %98 ], [ %.0117, %88 ], [ %.0117, %78 ], [ %77, %76 ], [ %.0117, %66 ], [ %.0117, %64 ], [ %.0117, %52 ], [ %.0117, %42 ], [ 1, %40 ], [ %.0117, %38 ], [ %.0117, %26 ], [ %.0117, %16 ]
  %.0115.be = phi i32 [ %.0115, %15 ], [ %.0115, %470 ], [ %.0115, %445 ], [ %.0115, %444 ], [ %.0115, %443 ], [ %.0115, %422 ], [ %.0115, %418 ], [ %.0115, %417 ], [ %.0115, %416 ], [ %.0115, %415 ], [ %.0115, %414 ], [ %.0115, %412 ], [ %.0115, %401 ], [ %.0115, %391 ], [ %.0115, %390 ], [ %.0115, %356 ], [ %.0115, %346 ], [ %.0115, %345 ], [ %.0115, %315 ], [ %.0115, %305 ], [ %.0115, %304 ], [ %.0115, %299 ], [ %.0115, %278 ], [ %.0115, %277 ], [ %.0115, %271 ], [ %.0115, %268 ], [ %.0115, %267 ], [ %266, %265 ], [ %.0115, %264 ], [ %.0115, %254 ], [ %.0115, %244 ], [ %.0115, %242 ], [ %.0115, %241 ], [ %.0115, %212 ], [ %.0115, %202 ], [ %.0115, %195 ], [ %.0115, %193 ], [ %.0115, %164 ], [ %.0115, %154 ], [ %.0115, %147 ], [ %.0115, %129 ], [ %.0115, %126 ], [ %.0115, %125 ], [ %.0115, %115 ], [ %.0115, %105 ], [ %.0115, %102 ], [ 1, %101 ], [ %.0115, %99 ], [ %.0115, %98 ], [ %.0115, %88 ], [ %.0115, %78 ], [ %.0115, %76 ], [ %.0115, %66 ], [ %.0115, %64 ], [ %.0115, %52 ], [ %.0115, %42 ], [ %.0115, %40 ], [ %.0115, %38 ], [ %.0115, %26 ], [ %.0115, %16 ]
  %.0113.be = phi i32 [ %.0113, %15 ], [ %.0113, %470 ], [ %.0113, %445 ], [ %.0113, %444 ], [ %.0113, %443 ], [ %.0113, %422 ], [ %.0113, %418 ], [ 1, %417 ], [ %.0113, %416 ], [ %.0113, %415 ], [ %.0113, %414 ], [ %.0113, %412 ], [ %.0113, %401 ], [ %.0113, %391 ], [ %.0113, %390 ], [ %.0113, %356 ], [ %.0113, %346 ], [ %.0113, %345 ], [ %.0113, %315 ], [ %.0113, %305 ], [ %.0113, %304 ], [ %.0113, %299 ], [ %.0113, %278 ], [ %.0113, %277 ], [ %.0113, %271 ], [ %.0113, %268 ], [ %.0113, %267 ], [ %.0113, %265 ], [ %.0113, %264 ], [ %.0113, %254 ], [ %.0113, %244 ], [ %243, %242 ], [ %.0113, %241 ], [ %.0113, %212 ], [ %.0113, %202 ], [ %.0113, %195 ], [ %.0113, %193 ], [ %.0113, %164 ], [ %.0113, %154 ], [ %.0113, %147 ], [ %.0113, %129 ], [ %.0113, %126 ], [ %.0113, %125 ], [ 1, %115 ], [ %.0113, %105 ], [ %.0113, %102 ], [ %.0113, %101 ], [ %.0113, %99 ], [ %.0113, %98 ], [ %.0113, %88 ], [ %.0113, %78 ], [ %.0113, %76 ], [ %.0113, %66 ], [ %.0113, %64 ], [ %.0113, %52 ], [ %.0113, %42 ], [ %.0113, %40 ], [ %.0113, %38 ], [ %.0113, %26 ], [ %.0113, %16 ]
  %.0111.be = phi i32 [ %.0111, %15 ], [ %471, %470 ], [ %.0111, %445 ], [ %.0111, %444 ], [ %.0111, %443 ], [ %.0111, %422 ], [ %.0111, %418 ], [ %.0111, %417 ], [ %.0111, %416 ], [ %.0111, %415 ], [ %.0111, %414 ], [ %.0111, %412 ], [ %402, %401 ], [ %.0111, %391 ], [ %.0111, %390 ], [ %.0111, %356 ], [ %.0111, %346 ], [ %.0111, %345 ], [ %.0111, %315 ], [ %.0111, %305 ], [ %.0111, %304 ], [ %.0111, %299 ], [ %.0111, %278 ], [ %.0111, %277 ], [ %.0111, %271 ], [ %.0111, %268 ], [ 1, %267 ], [ %.0111, %265 ], [ %.0111, %264 ], [ %.0111, %254 ], [ %.0111, %244 ], [ %.0111, %242 ], [ %.0111, %241 ], [ %.0111, %212 ], [ %.0111, %202 ], [ %.0111, %195 ], [ %.0111, %193 ], [ %.0111, %164 ], [ %.0111, %154 ], [ %.0111, %147 ], [ %.0111, %129 ], [ %.0111, %126 ], [ %.0111, %125 ], [ %.0111, %115 ], [ %.0111, %105 ], [ %.0111, %102 ], [ %.0111, %101 ], [ %.0111, %99 ], [ %.0111, %98 ], [ %.0111, %88 ], [ %.0111, %78 ], [ %.0111, %76 ], [ %.0111, %66 ], [ %.0111, %64 ], [ %.0111, %52 ], [ %.0111, %42 ], [ %.0111, %40 ], [ %.0111, %38 ], [ %.0111, %26 ], [ %.0111, %16 ]
  %.0109.be = phi i32 [ %.0109, %15 ], [ %.0109, %470 ], [ %.0109, %445 ], [ %.0109, %444 ], [ %.0109, %443 ], [ %.0109, %422 ], [ %.0109, %418 ], [ %.0109, %417 ], [ %.0109, %416 ], [ %.0109, %415 ], [ %.0109, %414 ], [ %.0109, %412 ], [ %.0109, %401 ], [ %.0109, %391 ], [ %.0109, %390 ], [ %.0109, %356 ], [ %.0109, %346 ], [ %.0109, %345 ], [ %.0109, %315 ], [ %.0109, %305 ], [ %.0109, %304 ], [ %.0101, %299 ], [ %.0109, %278 ], [ %.0109, %277 ], [ %.0109, %271 ], [ %.0109, %268 ], [ %.0109, %267 ], [ %.0109, %265 ], [ %.0109, %264 ], [ %.0109, %254 ], [ %.0109, %244 ], [ %.0109, %242 ], [ %.0109, %241 ], [ %.0109, %212 ], [ %.0109, %202 ], [ %.0109, %195 ], [ %.0109, %193 ], [ %.0109, %164 ], [ %.0109, %154 ], [ %.0109, %147 ], [ %.0109, %129 ], [ %.0109, %126 ], [ %.0109, %125 ], [ %.0109, %115 ], [ %.0109, %105 ], [ %.0109, %102 ], [ %.0109, %101 ], [ %.0109, %99 ], [ %.0109, %98 ], [ %.0109, %88 ], [ %.0109, %78 ], [ %.0109, %76 ], [ %.0109, %66 ], [ %.0109, %64 ], [ %.0109, %52 ], [ %.0109, %42 ], [ %.0109, %40 ], [ %.0109, %38 ], [ %.0109, %26 ], [ %.0109, %16 ]
  %.0107.be = phi i32 [ %.0107, %15 ], [ 954733291, %470 ], [ 199169188, %445 ], [ -623635836, %444 ], [ 1161225670, %443 ], [ 815224644, %422 ], [ 459025642, %418 ], [ -225500085, %417 ], [ -1723124586, %416 ], [ -248840132, %415 ], [ -1506684838, %414 ], [ 607122460, %412 ], [ %411, %401 ], [ %400, %391 ], [ 1824972666, %390 ], [ %389, %356 ], [ %355, %346 ], [ 1964818253, %345 ], [ %344, %315 ], [ %314, %305 ], [ 1964818253, %304 ], [ %303, %299 ], [ -1237547470, %278 ], [ -1237547470, %277 ], [ %276, %271 ], [ %270, %268 ], [ 607122460, %267 ], [ 476115135, %265 ], [ -1745210156, %264 ], [ %263, %254 ], [ %253, %244 ], [ -1674419096, %242 ], [ -71763551, %241 ], [ %240, %212 ], [ %211, %202 ], [ 430679754, %195 ], [ %194, %193 ], [ %192, %164 ], [ %163, %154 ], [ 2135211049, %147 ], [ %146, %129 ], [ %128, %126 ], [ -1674419096, %125 ], [ %124, %115 ], [ %114, %105 ], [ %104, %102 ], [ 476115135, %101 ], [ 567901985, %99 ], [ 930290807, %98 ], [ %97, %88 ], [ %87, %78 ], [ -2045932255, %76 ], [ 1999232258, %66 ], [ %65, %64 ], [ %63, %52 ], [ %51, %42 ], [ -2045932255, %40 ], [ %39, %38 ], [ %37, %26 ], [ %25, %16 ]
  %.0105.be = phi i1 [ %.0105, %15 ], [ %.0105, %470 ], [ %.0105, %445 ], [ %.0105, %444 ], [ %.0105, %443 ], [ %.0105, %422 ], [ %.0105, %418 ], [ %.0105, %417 ], [ %.0105, %416 ], [ %.0105, %415 ], [ %.0105, %414 ], [ %.0105, %412 ], [ %.0105, %401 ], [ %.0105, %391 ], [ %.0105, %390 ], [ %.0105, %356 ], [ %.0105, %346 ], [ %.0105, %345 ], [ %.0105, %315 ], [ %.0105, %305 ], [ %.0105, %304 ], [ %.0105, %299 ], [ %.0105, %278 ], [ %.0105, %277 ], [ %.0105, %271 ], [ %.0105, %268 ], [ %.0105, %267 ], [ %.0105, %265 ], [ %.0105, %264 ], [ %.0105, %254 ], [ %.0105, %244 ], [ %.0105, %242 ], [ %.0105, %241 ], [ %.0105, %212 ], [ %.0105, %202 ], [ %.0105, %195 ], [ %.0105, %193 ], [ %.0105, %164 ], [ %.0105, %154 ], [ %153, %147 ], [ false, %129 ], [ %.0105, %126 ], [ %.0105, %125 ], [ %.0105, %115 ], [ %.0105, %105 ], [ %.0105, %102 ], [ %.0105, %101 ], [ %.0105, %99 ], [ %.0105, %98 ], [ %.0105, %88 ], [ %.0105, %78 ], [ %.0105, %76 ], [ %.0105, %66 ], [ %.0105, %64 ], [ %.0105, %52 ], [ %.0105, %42 ], [ %.0105, %40 ], [ %.0105, %38 ], [ %.0105, %26 ], [ %.0105, %16 ]
  %.0103.be = phi i1 [ %.0103, %15 ], [ %.0103, %470 ], [ %.0103, %445 ], [ %.0103, %444 ], [ %.0103, %443 ], [ %.0103, %422 ], [ %.0103, %418 ], [ %.0103, %417 ], [ %.0103, %416 ], [ %.0103, %415 ], [ %.0103, %414 ], [ %.0103, %412 ], [ %.0103, %401 ], [ %.0103, %391 ], [ %.0103, %390 ], [ %.0103, %356 ], [ %.0103, %346 ], [ %.0103, %345 ], [ %.0103, %315 ], [ %.0103, %305 ], [ %.0103, %304 ], [ %.0103, %299 ], [ %.0103, %278 ], [ %.0103, %277 ], [ %.0103, %271 ], [ %.0103, %268 ], [ %.0103, %267 ], [ %.0103, %265 ], [ %.0103, %264 ], [ %.0103, %254 ], [ %.0103, %244 ], [ %.0103, %242 ], [ %.0103, %241 ], [ %.0103, %212 ], [ %.0103, %202 ], [ %201, %195 ], [ false, %193 ], [ %.0103, %164 ], [ %.0103, %154 ], [ %.0103, %147 ], [ %.0103, %129 ], [ %.0103, %126 ], [ %.0103, %125 ], [ %.0103, %115 ], [ %.0103, %105 ], [ %.0103, %102 ], [ %.0103, %101 ], [ %.0103, %99 ], [ %.0103, %98 ], [ %.0103, %88 ], [ %.0103, %78 ], [ %.0103, %76 ], [ %.0103, %66 ], [ %.0103, %64 ], [ %.0103, %52 ], [ %.0103, %42 ], [ %.0103, %40 ], [ %.0103, %38 ], [ %.0103, %26 ], [ %.0103, %16 ]
  %.0101.be = phi i32 [ %.0101, %15 ], [ %.0101, %470 ], [ %.0101, %445 ], [ %.0101, %444 ], [ %.0101, %443 ], [ %.0101, %422 ], [ %.0101, %418 ], [ %.0101, %417 ], [ %.0101, %416 ], [ %.0101, %415 ], [ %.0101, %414 ], [ %.0101, %412 ], [ %.0101, %401 ], [ %.0101, %391 ], [ %.0101, %390 ], [ %.0101, %356 ], [ %.0101, %346 ], [ %.0101, %345 ], [ %.0101, %315 ], [ %.0101, %305 ], [ %.0101, %304 ], [ %.0101, %299 ], [ %298, %278 ], [ 0, %277 ], [ %.0101, %271 ], [ %.0101, %268 ], [ %.0101, %267 ], [ %.0101, %265 ], [ %.0101, %264 ], [ %.0101, %254 ], [ %.0101, %244 ], [ %.0101, %242 ], [ %.0101, %241 ], [ %.0101, %212 ], [ %.0101, %202 ], [ %.0101, %195 ], [ %.0101, %193 ], [ %.0101, %164 ], [ %.0101, %154 ], [ %.0101, %147 ], [ %.0101, %129 ], [ %.0101, %126 ], [ %.0101, %125 ], [ %.0101, %115 ], [ %.0101, %105 ], [ %.0101, %102 ], [ %.0101, %101 ], [ %.0101, %99 ], [ %.0101, %98 ], [ %.0101, %88 ], [ %.0101, %78 ], [ %.0101, %76 ], [ %.0101, %66 ], [ %.0101, %64 ], [ %.0101, %52 ], [ %.0101, %42 ], [ %.0101, %40 ], [ %.0101, %38 ], [ %.0101, %26 ], [ %.0101, %16 ]
  %.0.be = phi i32 [ %.0, %15 ], [ %.0, %470 ], [ %.0, %445 ], [ %.0, %444 ], [ %.0, %443 ], [ %.0, %422 ], [ %.0, %418 ], [ %.0, %417 ], [ %.0, %416 ], [ %.0, %415 ], [ %.0, %414 ], [ %.0, %412 ], [ %.0, %401 ], [ %.0, %391 ], [ %.0, %390 ], [ %.0, %356 ], [ %.0, %346 ], [ %.0..0..0.94, %345 ], [ %.0, %315 ], [ %.0, %305 ], [ 0, %304 ], [ %.0, %299 ], [ %.0, %278 ], [ %.0, %277 ], [ %.0, %271 ], [ %.0, %268 ], [ %.0, %267 ], [ %.0, %265 ], [ %.0, %264 ], [ %.0, %254 ], [ %.0, %244 ], [ %.0, %242 ], [ %.0, %241 ], [ %.0, %212 ], [ %.0, %202 ], [ %.0, %195 ], [ %.0, %193 ], [ %.0, %164 ], [ %.0, %154 ], [ %.0, %147 ], [ %.0, %129 ], [ %.0, %126 ], [ %.0, %125 ], [ %.0, %115 ], [ %.0, %105 ], [ %.0, %102 ], [ %.0, %101 ], [ %.0, %99 ], [ %.0, %98 ], [ %.0, %88 ], [ %.0, %78 ], [ %.0, %76 ], [ %.0, %66 ], [ %.0, %64 ], [ %.0, %52 ], [ %.0, %42 ], [ %.0, %40 ], [ %.0, %38 ], [ %.0, %26 ], [ %.0, %16 ]
  br label %15

16:                                               ; preds = %15
  %17 = load i32, i32* @x.4, align 4
  %18 = load i32, i32* @y.5, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 -1506684838, i32 1207096333
  br label %.backedge

26:                                               ; preds = %15
  %27 = load i32, i32* @n, align 4
  %28 = icmp sle i32 %.0119, %27
  store i1 %28, i1* %9, align 1
  %29 = load i32, i32* @x.4, align 4
  %30 = load i32, i32* @y.5, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 1464628932, i32 1207096333
  br label %.backedge

38:                                               ; preds = %15
  %.0..0..0.80 = load volatile i1, i1* %9, align 1
  %39 = select i1 %.0..0..0.80, i32 -706838603, i32 2003810286
  br label %.backedge

40:                                               ; preds = %15
  %41 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2005 x i8], [2005 x i8]* @s, i64 0, i64 0))
  br label %.backedge

42:                                               ; preds = %15
  %43 = load i32, i32* @x.4, align 4
  %44 = load i32, i32* @y.5, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 -248840132, i32 -1337115719
  br label %.backedge

52:                                               ; preds = %15
  %53 = load i32, i32* @m, align 4
  %54 = icmp sle i32 %.0117, %53
  store i1 %54, i1* %8, align 1
  %55 = load i32, i32* @x.4, align 4
  %56 = load i32, i32* @y.5, align 4
  %57 = add i32 %55, -1
  %58 = mul i32 %57, %55
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %61, %60
  %63 = select i1 %62, i32 -760922494, i32 -1337115719
  br label %.backedge

64:                                               ; preds = %15
  %.0..0..0.81 = load volatile i1, i1* %8, align 1
  %65 = select i1 %.0..0..0.81, i32 1031895179, i32 795179399
  br label %.backedge

66:                                               ; preds = %15
  %67 = add i32 %.0117, -1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [2005 x i8], [2005 x i8]* @s, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = add nsw i32 %71, -48
  %73 = sext i32 %.0119 to i64
  %74 = sext i32 %.0117 to i64
  %75 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @a, i64 0, i64 %73, i64 %74
  store i32 %72, i32* %75, align 4
  br label %.backedge

76:                                               ; preds = %15
  %77 = add i32 %.0117, 1
  br label %.backedge

78:                                               ; preds = %15
  %79 = load i32, i32* @x.4, align 4
  %80 = load i32, i32* @y.5, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 -1723124586, i32 820921833
  br label %.backedge

88:                                               ; preds = %15
  %89 = load i32, i32* @x.4, align 4
  %90 = load i32, i32* @y.5, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 -969744170, i32 820921833
  br label %.backedge

98:                                               ; preds = %15
  br label %.backedge

99:                                               ; preds = %15
  %100 = add i32 %.0119, 1
  br label %.backedge

101:                                              ; preds = %15
  br label %.backedge

102:                                              ; preds = %15
  %103 = load i32, i32* @n, align 4
  %.not128 = icmp sgt i32 %.0115, %103
  %104 = select i1 %.not128, i32 1324337429, i32 -67613038
  br label %.backedge

105:                                              ; preds = %15
  %106 = load i32, i32* @x.4, align 4
  %107 = load i32, i32* @y.5, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 -225500085, i32 1994702839
  br label %.backedge

115:                                              ; preds = %15
  %116 = load i32, i32* @x.4, align 4
  %117 = load i32, i32* @y.5, align 4
  %118 = add i32 %116, -1
  %119 = mul i32 %118, %116
  %120 = and i32 %119, 1
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %122, %121
  %124 = select i1 %123, i32 1075757856, i32 1994702839
  br label %.backedge

125:                                              ; preds = %15
  br label %.backedge

126:                                              ; preds = %15
  %127 = load i32, i32* @m, align 4
  %.not127 = icmp sgt i32 %.0113, %127
  %128 = select i1 %.not127, i32 1168562116, i32 415547344
  br label %.backedge

129:                                              ; preds = %15
  %130 = sext i32 %.0115 to i64
  %131 = add i32 %.0113, -1
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %130, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = add i32 %.0115, -1
  %136 = sext i32 %135 to i64
  %137 = sext i32 %.0113 to i64
  %138 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %136, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = add i32 %139, %134
  %141 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %136, i64 %132
  %142 = load i32, i32* %141, align 4
  %143 = sub i32 %140, %142
  store i32 %143, i32* %7, align 4
  %144 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @a, i64 0, i64 %130, i64 %137
  %145 = load i32, i32* %144, align 4
  %.not126 = icmp eq i32 %145, 0
  %146 = select i1 %.not126, i32 2135211049, i32 -1752911444
  br label %.backedge

147:                                              ; preds = %15
  %148 = sext i32 %.0115 to i64
  %149 = add i32 %.0113, -1
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @a, i64 0, i64 %148, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = icmp ne i32 %152, 0
  br label %.backedge

154:                                              ; preds = %15
  store i1 %.0105, i1* %3, align 1
  %155 = load i32, i32* @x.4, align 4
  %156 = load i32, i32* @y.5, align 4
  %157 = add i32 %155, -1
  %158 = mul i32 %157, %155
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %161, %160
  %163 = select i1 %162, i32 459025642, i32 1481271164
  br label %.backedge

164:                                              ; preds = %15
  %.0..0..0.95 = load volatile i1, i1* %3, align 1
  %.neg.neg125 = zext i1 %.0..0..0.95 to i32
  %.0..0..0.82 = load volatile i32, i32* %7, align 4
  %165 = add i32 %.0..0..0.82, %.neg.neg125
  %166 = sext i32 %.0115 to i64
  %167 = sext i32 %.0113 to i64
  %168 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %166, i64 %167
  store i32 %165, i32* %168, align 4
  %169 = add i32 %.0113, -1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %166, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = add i32 %.0115, -1
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %174, i64 %167
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %174, i64 %170
  %178 = load i32, i32* %177, align 4
  %179 = add i32 %176, %172
  %180 = sub i32 %179, %178
  store i32 %180, i32* %6, align 4
  %181 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @a, i64 0, i64 %166, i64 %167
  %182 = load i32, i32* %181, align 4
  %183 = icmp ne i32 %182, 0
  store i1 %183, i1* %5, align 1
  %184 = load i32, i32* @x.4, align 4
  %185 = load i32, i32* @y.5, align 4
  %186 = add i32 %184, -1
  %187 = mul i32 %186, %184
  %188 = and i32 %187, 1
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %190, %189
  %192 = select i1 %191, i32 1032529514, i32 1481271164
  br label %.backedge

193:                                              ; preds = %15
  %.0..0..0.93 = load volatile i1, i1* %5, align 1
  %194 = select i1 %.0..0..0.93, i32 192537716, i32 430679754
  br label %.backedge

195:                                              ; preds = %15
  %196 = add i32 %.0115, -1
  %197 = sext i32 %196 to i64
  %198 = sext i32 %.0113 to i64
  %199 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @a, i64 0, i64 %197, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = icmp ne i32 %200, 0
  br label %.backedge

202:                                              ; preds = %15
  store i1 %.0103, i1* %2, align 1
  %203 = load i32, i32* @x.4, align 4
  %204 = load i32, i32* @y.5, align 4
  %205 = add i32 %203, -1
  %206 = mul i32 %205, %203
  %207 = and i32 %206, 1
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %209, %208
  %211 = select i1 %210, i32 815224644, i32 116523545
  br label %.backedge

212:                                              ; preds = %15
  %.0..0..0.97 = load volatile i1, i1* %2, align 1
  %.neg.neg124 = zext i1 %.0..0..0.97 to i32
  %.0..0..0.86 = load volatile i32, i32* %6, align 4
  %.neg123 = add i32 %.0..0..0.86, %.neg.neg124
  %213 = sext i32 %.0115 to i64
  %214 = sext i32 %.0113 to i64
  %215 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %213, i64 %214
  store i32 %.neg123, i32* %215, align 4
  %216 = add i32 %.0115, -1
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %217, i64 %214
  %219 = load i32, i32* %218, align 4
  %220 = add i32 %.0113, -1
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %213, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %217, i64 %221
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @a, i64 0, i64 %213, i64 %214
  %227 = load i32, i32* %226, align 4
  %228 = add i32 %223, %219
  %229 = sub i32 %228, %225
  %230 = add i32 %229, %227
  %231 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %213, i64 %214
  store i32 %230, i32* %231, align 4
  %232 = load i32, i32* @x.4, align 4
  %233 = load i32, i32* @y.5, align 4
  %234 = add i32 %232, -1
  %235 = mul i32 %234, %232
  %236 = and i32 %235, 1
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %238, %237
  %240 = select i1 %239, i32 50713887, i32 116523545
  br label %.backedge

241:                                              ; preds = %15
  br label %.backedge

242:                                              ; preds = %15
  %243 = add i32 %.0113, 1
  br label %.backedge

244:                                              ; preds = %15
  %245 = load i32, i32* @x.4, align 4
  %246 = load i32, i32* @y.5, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 1161225670, i32 2031928578
  br label %.backedge

254:                                              ; preds = %15
  %255 = load i32, i32* @x.4, align 4
  %256 = load i32, i32* @y.5, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 636731080, i32 2031928578
  br label %.backedge

264:                                              ; preds = %15
  br label %.backedge

265:                                              ; preds = %15
  %266 = add i32 %.0115, 1
  br label %.backedge

267:                                              ; preds = %15
  br label %.backedge

268:                                              ; preds = %15
  %269 = load i32, i32* @q, align 4
  %.not = icmp sgt i32 %.0111, %269
  %270 = select i1 %.not, i32 1228201923, i32 -433900900
  br label %.backedge

271:                                              ; preds = %15
  %272 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %10, i32* nonnull %12, i32* nonnull %11, i32* nonnull %13)
  %273 = load i32, i32* %12, align 4
  %274 = load i32, i32* %13, align 4
  %275 = icmp eq i32 %273, %274
  %276 = select i1 %275, i32 1224501704, i32 1413012813
  br label %.backedge

277:                                              ; preds = %15
  br label %.backedge

278:                                              ; preds = %15
  %279 = load i32, i32* %11, align 4
  %280 = sext i32 %279 to i64
  %281 = load i32, i32* %13, align 4
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %280, i64 %282
  %284 = load i32, i32* %283, align 4
  %285 = load i32, i32* %12, align 4
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %280, i64 %286
  %288 = load i32, i32* %287, align 4
  %289 = load i32, i32* %10, align 4
  %290 = add i32 %289, -1
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %291, i64 %282
  %293 = load i32, i32* %292, align 4
  %294 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %291, i64 %286
  %295 = load i32, i32* %294, align 4
  %296 = add i32 %288, %293
  %297 = sub i32 %284, %296
  %298 = add i32 %297, %295
  br label %.backedge

299:                                              ; preds = %15
  %300 = load i32, i32* %10, align 4
  %301 = load i32, i32* %11, align 4
  %302 = icmp eq i32 %300, %301
  %303 = select i1 %302, i32 572998113, i32 516998014
  br label %.backedge

304:                                              ; preds = %15
  br label %.backedge

305:                                              ; preds = %15
  %306 = load i32, i32* @x.4, align 4
  %307 = load i32, i32* @y.5, align 4
  %308 = add i32 %306, -1
  %309 = mul i32 %308, %306
  %310 = and i32 %309, 1
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %312, %311
  %314 = select i1 %313, i32 -623635836, i32 117347407
  br label %.backedge

315:                                              ; preds = %15
  %316 = load i32, i32* %11, align 4
  %317 = sext i32 %316 to i64
  %318 = load i32, i32* %13, align 4
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %317, i64 %319
  %321 = load i32, i32* %320, align 4
  %322 = load i32, i32* %12, align 4
  %323 = add i32 %322, -1
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %317, i64 %324
  %326 = load i32, i32* %325, align 4
  %327 = load i32, i32* %10, align 4
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %328, i64 %319
  %330 = load i32, i32* %329, align 4
  %331 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %328, i64 %324
  %332 = load i32, i32* %331, align 4
  %333 = add i32 %326, %330
  %334 = sub i32 %321, %333
  %335 = add i32 %334, %332
  store i32 %335, i32* %4, align 4
  %336 = load i32, i32* @x.4, align 4
  %337 = load i32, i32* @y.5, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 664974625, i32 117347407
  br label %.backedge

345:                                              ; preds = %15
  %.0..0..0.94 = load volatile i32, i32* %4, align 4
  br label %.backedge

346:                                              ; preds = %15
  store i32 %.0, i32* %1, align 4
  %347 = load i32, i32* @x.4, align 4
  %348 = load i32, i32* @y.5, align 4
  %349 = add i32 %347, -1
  %350 = mul i32 %349, %347
  %351 = and i32 %350, 1
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %353, %352
  %355 = select i1 %354, i32 199169188, i32 295572321
  br label %.backedge

356:                                              ; preds = %15
  %.0..0..0.99 = load volatile i32, i32* %1, align 4
  %357 = load i32, i32* %11, align 4
  %358 = sext i32 %357 to i64
  %359 = load i32, i32* %13, align 4
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %358, i64 %360
  %362 = load i32, i32* %361, align 4
  %363 = load i32, i32* %12, align 4
  %364 = add i32 %363, -1
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %358, i64 %365
  %367 = load i32, i32* %366, align 4
  %368 = load i32, i32* %10, align 4
  %369 = add i32 %368, -1
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %370, i64 %360
  %372 = load i32, i32* %371, align 4
  %373 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %370, i64 %365
  %374 = load i32, i32* %373, align 4
  %375 = add i32 %.0..0..0.99, %.0109
  %376 = add i32 %375, %367
  %377 = add i32 %376, %372
  %378 = sub i32 %362, %377
  %379 = add i32 %378, %374
  %380 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %379)
  %381 = load i32, i32* @x.4, align 4
  %382 = load i32, i32* @y.5, align 4
  %383 = add i32 %381, -1
  %384 = mul i32 %383, %381
  %385 = and i32 %384, 1
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %387, %386
  %389 = select i1 %388, i32 1210094003, i32 295572321
  br label %.backedge

390:                                              ; preds = %15
  br label %.backedge

391:                                              ; preds = %15
  %392 = load i32, i32* @x.4, align 4
  %393 = load i32, i32* @y.5, align 4
  %394 = add i32 %392, -1
  %395 = mul i32 %394, %392
  %396 = and i32 %395, 1
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %398, %397
  %400 = select i1 %399, i32 954733291, i32 -1859711819
  br label %.backedge

401:                                              ; preds = %15
  %402 = add i32 %.0111, 1
  %403 = load i32, i32* @x.4, align 4
  %404 = load i32, i32* @y.5, align 4
  %405 = add i32 %403, -1
  %406 = mul i32 %405, %403
  %407 = and i32 %406, 1
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %409, %408
  %411 = select i1 %410, i32 -2021997476, i32 -1859711819
  br label %.backedge

412:                                              ; preds = %15
  br label %.backedge

413:                                              ; preds = %15
  ret i32 0

414:                                              ; preds = %15
  br label %.backedge

415:                                              ; preds = %15
  br label %.backedge

416:                                              ; preds = %15
  br label %.backedge

417:                                              ; preds = %15
  br label %.backedge

418:                                              ; preds = %15
  %.0..0..0.96 = load volatile i1, i1* %3, align 1
  %.neg.neg122 = zext i1 %.0..0..0.96 to i32
  %.0..0..0.83 = load volatile i32, i32* %7, align 4
  %.0..0..0.84 = load volatile i32, i32* %7, align 4
  %.0..0..0.85 = load volatile i32, i32* %7, align 4
  %.neg121 = add i32 %.0..0..0.85, %.neg.neg122
  %419 = sext i32 %.0115 to i64
  %420 = sext i32 %.0113 to i64
  %421 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum1, i64 0, i64 %419, i64 %420
  store i32 %.neg121, i32* %421, align 4
  br label %.backedge

422:                                              ; preds = %15
  %.0..0..0.98 = load volatile i1, i1* %2, align 1
  %.neg.neg = zext i1 %.0..0..0.98 to i32
  %.0..0..0.87 = load volatile i32, i32* %6, align 4
  %.0..0..0.88 = load volatile i32, i32* %6, align 4
  %.0..0..0.89 = load volatile i32, i32* %6, align 4
  %.0..0..0.90 = load volatile i32, i32* %6, align 4
  %.0..0..0.91 = load volatile i32, i32* %6, align 4
  %.0..0..0.92 = load volatile i32, i32* %6, align 4
  %423 = add i32 %.0..0..0.92, %.neg.neg
  %424 = sext i32 %.0115 to i64
  %425 = sext i32 %.0113 to i64
  %426 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum2, i64 0, i64 %424, i64 %425
  store i32 %423, i32* %426, align 4
  %427 = add i32 %.0115, -1
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %428, i64 %425
  %430 = load i32, i32* %429, align 4
  %431 = add i32 %.0113, -1
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %424, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %428, i64 %432
  %436 = load i32, i32* %435, align 4
  %437 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @a, i64 0, i64 %424, i64 %425
  %438 = load i32, i32* %437, align 4
  %439 = add i32 %434, %430
  %440 = sub i32 %439, %436
  %441 = add i32 %440, %438
  %442 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %424, i64 %425
  store i32 %441, i32* %442, align 4
  br label %.backedge

443:                                              ; preds = %15
  br label %.backedge

444:                                              ; preds = %15
  br label %.backedge

445:                                              ; preds = %15
  %.0..0..0.100 = load volatile i32, i32* %1, align 4
  %446 = load i32, i32* %11, align 4
  %447 = sext i32 %446 to i64
  %448 = load i32, i32* %13, align 4
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %447, i64 %449
  %451 = load i32, i32* %450, align 4
  %452 = load i32, i32* %12, align 4
  %453 = add i32 %452, -1
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %447, i64 %454
  %456 = load i32, i32* %455, align 4
  %457 = load i32, i32* %10, align 4
  %458 = add i32 %457, -1
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %459, i64 %449
  %461 = load i32, i32* %460, align 4
  %462 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @sum, i64 0, i64 %459, i64 %454
  %463 = load i32, i32* %462, align 4
  %464 = add i32 %.0..0..0.100, %.0109
  %465 = add i32 %464, %456
  %466 = add i32 %465, %461
  %467 = sub i32 %451, %466
  %468 = add i32 %467, %463
  %469 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %468)
  br label %.backedge

470:                                              ; preds = %15
  %471 = add i32 %.0111, 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s122588380.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.6, align 4
  %4 = load i32, i32* @y.7, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1049530497, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1049530497, label %11
    i32 1553956153, label %14
    i32 -1142935653, label %24
    i32 1946496702, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1553956153, i32 1946496702
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.6, align 4
  %16 = load i32, i32* @y.7, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -1142935653, i32 1946496702
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 1553956153, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
