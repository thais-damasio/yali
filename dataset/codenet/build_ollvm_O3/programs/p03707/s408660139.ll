; ModuleID = 'build_ollvm/programs/p03707/s408660139.ll'
source_filename = "Project_CodeNet_C++1400/p03707/s408660139.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@N = global i32 0, align 4
@M = global i32 0, align 4
@Q = global i32 0, align 4
@board = local_unnamed_addr global [2005 x [2005 x i8]] zeroinitializer, align 16
@prf = local_unnamed_addr global [2005 x [2005 x i32]] zeroinitializer, align 16
@edgb = local_unnamed_addr global [2005 x [2005 x i8]] zeroinitializer, align 16
@prfb = local_unnamed_addr global [2005 x [2005 x i32]] zeroinitializer, align 16
@edgs = local_unnamed_addr global [2005 x [2005 x i8]] zeroinitializer, align 16
@prfs = local_unnamed_addr global [2005 x [2005 x i32]] zeroinitializer, align 16
@.str = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"%d %d %d %d\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s408660139.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca [2005 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32* nonnull @N, i32* nonnull @M, i32* nonnull @Q)
  %13 = getelementptr inbounds [2005 x i8], [2005 x i8]* %7, i64 0, i64 0
  br label %14

14:                                               ; preds = %.backedge, %0
  %.0114 = phi i32 [ 1, %0 ], [ %.0114.be, %.backedge ]
  %.0112 = phi i32 [ undef, %0 ], [ %.0112.be, %.backedge ]
  %.0110 = phi i32 [ undef, %0 ], [ %.0110.be, %.backedge ]
  %.0108 = phi i32 [ undef, %0 ], [ %.0108.be, %.backedge ]
  %.0106 = phi i32 [ undef, %0 ], [ %.0106.be, %.backedge ]
  %.0104 = phi i32 [ undef, %0 ], [ %.0104.be, %.backedge ]
  %.0102 = phi i32 [ undef, %0 ], [ %.0102.be, %.backedge ]
  %.0100 = phi i32 [ undef, %0 ], [ %.0100.be, %.backedge ]
  %.098 = phi i32 [ undef, %0 ], [ %.098.be, %.backedge ]
  %.096 = phi i32 [ undef, %0 ], [ %.096.be, %.backedge ]
  %.094 = phi i32 [ undef, %0 ], [ %.094.be, %.backedge ]
  %.092 = phi i32 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i32 [ 422999828, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i1 [ undef, %0 ], [ %.088.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.090, label %.backedge [
    i32 422999828, label %15
    i32 2130542169, label %20
    i32 -205716278, label %30
    i32 -1729995250, label %41
    i32 -1627564044, label %42
    i32 -905237587, label %52
    i32 -2127668790, label %65
    i32 -150579069, label %67
    i32 -1108603725, label %77
    i32 885700816, label %78
    i32 1563134622, label %88
    i32 -344656065, label %98
    i32 -1107593459, label %99
    i32 -2096806439, label %109
    i32 736091522, label %120
    i32 -1859750309, label %121
    i32 1533532745, label %131
    i32 2083983067, label %141
    i32 973405308, label %142
    i32 2090717613, label %146
    i32 998536880, label %147
    i32 -847660187, label %157
    i32 -513229624, label %170
    i32 429386325, label %172
    i32 -1930997101, label %179
    i32 -973848345, label %189
    i32 -447164932, label %206
    i32 288232974, label %207
    i32 -166119566, label %217
    i32 -406743937, label %231
    i32 1130031988, label %232
    i32 1535214765, label %234
    i32 -1250430449, label %235
    i32 -1016005999, label %237
    i32 -1445928730, label %238
    i32 -1602197216, label %243
    i32 -863646636, label %253
    i32 41764618, label %263
    i32 130839907, label %264
    i32 -381670760, label %268
    i32 -617850925, label %278
    i32 1094401470, label %294
    i32 1908402079, label %296
    i32 -271471191, label %304
    i32 1608370976, label %309
    i32 -8044888, label %311
    i32 -334380682, label %312
    i32 -1903035453, label %314
    i32 2139862291, label %315
    i32 1520091775, label %320
    i32 966006192, label %330
    i32 268467557, label %340
    i32 2041351135, label %341
    i32 -1671292452, label %346
    i32 1732485542, label %394
    i32 1541203546, label %396
    i32 133849867, label %397
    i32 378460119, label %399
    i32 211500301, label %400
    i32 1294552060, label %404
    i32 -749210505, label %414
    i32 -1411263531, label %447
    i32 817674730, label %449
    i32 -1374993475, label %459
    i32 1105374283, label %490
    i32 1025060431, label %491
    i32 1414466908, label %492
    i32 259534974, label %496
    i32 -135442845, label %519
    i32 -442688442, label %520
    i32 -1608792642, label %530
    i32 1929014041, label %543
    i32 -139937987, label %544
    i32 1910737106, label %554
    i32 -16240620, label %565
    i32 729619076, label %566
    i32 -1095854170, label %567
    i32 -970390456, label %569
    i32 -648813272, label %570
    i32 -108312336, label %571
    i32 868242096, label %573
    i32 -360674063, label %574
    i32 -1575649520, label %575
    i32 -76189939, label %576
    i32 1941431099, label %581
    i32 -263152694, label %582
    i32 -1022865414, label %583
    i32 -1024141557, label %584
    i32 620440062, label %606
    i32 880394638, label %628
    i32 -1044481665, label %632
  ]

.backedge:                                        ; preds = %14, %632, %628, %606, %584, %583, %582, %581, %576, %575, %574, %573, %571, %570, %569, %567, %565, %554, %544, %543, %530, %520, %519, %496, %492, %491, %490, %459, %449, %447, %414, %404, %400, %399, %397, %396, %394, %346, %341, %340, %330, %320, %315, %314, %312, %311, %309, %304, %296, %294, %278, %268, %264, %263, %253, %243, %238, %237, %235, %234, %232, %231, %217, %207, %206, %189, %179, %172, %170, %157, %147, %146, %142, %141, %131, %121, %120, %109, %99, %98, %88, %78, %77, %67, %65, %52, %42, %41, %30, %20, %15
  %.0114.be = phi i32 [ %.0114, %14 ], [ %.0114, %632 ], [ %.0114, %628 ], [ %.0114, %606 ], [ %.0114, %584 ], [ %.0114, %583 ], [ %.0114, %582 ], [ %.0114, %581 ], [ %.0114, %576 ], [ %.0114, %575 ], [ %.0114, %574 ], [ %.0114, %573 ], [ %572, %571 ], [ %.0114, %570 ], [ %.0114, %569 ], [ %.0114, %567 ], [ %.0114, %565 ], [ %.0114, %554 ], [ %.0114, %544 ], [ %.0114, %543 ], [ %.0114, %530 ], [ %.0114, %520 ], [ %.0114, %519 ], [ %.0114, %496 ], [ %.0114, %492 ], [ %.0114, %491 ], [ %.0114, %490 ], [ %.0114, %459 ], [ %.0114, %449 ], [ %.0114, %447 ], [ %.0114, %414 ], [ %.0114, %404 ], [ %.0114, %400 ], [ %.0114, %399 ], [ %.0114, %397 ], [ %.0114, %396 ], [ %.0114, %394 ], [ %.0114, %346 ], [ %.0114, %341 ], [ %.0114, %340 ], [ %.0114, %330 ], [ %.0114, %320 ], [ %.0114, %315 ], [ %.0114, %314 ], [ %.0114, %312 ], [ %.0114, %311 ], [ %.0114, %309 ], [ %.0114, %304 ], [ %.0114, %296 ], [ %.0114, %294 ], [ %.0114, %278 ], [ %.0114, %268 ], [ %.0114, %264 ], [ %.0114, %263 ], [ %.0114, %253 ], [ %.0114, %243 ], [ %.0114, %238 ], [ %.0114, %237 ], [ %.0114, %235 ], [ %.0114, %234 ], [ %.0114, %232 ], [ %.0114, %231 ], [ %.0114, %217 ], [ %.0114, %207 ], [ %.0114, %206 ], [ %.0114, %189 ], [ %.0114, %179 ], [ %.0114, %172 ], [ %.0114, %170 ], [ %.0114, %157 ], [ %.0114, %147 ], [ %.0114, %146 ], [ %.0114, %142 ], [ %.0114, %141 ], [ %.0114, %131 ], [ %.0114, %121 ], [ %.0114, %120 ], [ %110, %109 ], [ %.0114, %99 ], [ %.0114, %98 ], [ %.0114, %88 ], [ %.0114, %78 ], [ %.0114, %77 ], [ %.0114, %67 ], [ %.0114, %65 ], [ %.0114, %52 ], [ %.0114, %42 ], [ %.0114, %41 ], [ %.0114, %30 ], [ %.0114, %20 ], [ %.0114, %15 ]
  %.0112.be = phi i32 [ %.0112, %14 ], [ %.0112, %632 ], [ %.0112, %628 ], [ %.0112, %606 ], [ %.0112, %584 ], [ %.0112, %583 ], [ %.0112, %582 ], [ %.0112, %581 ], [ %.0112, %576 ], [ %.0112, %575 ], [ %.0112, %574 ], [ %.0112, %573 ], [ %.0112, %571 ], [ %.0112, %570 ], [ %.0112, %569 ], [ 1, %567 ], [ %.0112, %565 ], [ %.0112, %554 ], [ %.0112, %544 ], [ %.0112, %543 ], [ %.0112, %530 ], [ %.0112, %520 ], [ %.0112, %519 ], [ %.0112, %496 ], [ %.0112, %492 ], [ %.0112, %491 ], [ %.0112, %490 ], [ %.0112, %459 ], [ %.0112, %449 ], [ %.0112, %447 ], [ %.0112, %414 ], [ %.0112, %404 ], [ %.0112, %400 ], [ %.0112, %399 ], [ %.0112, %397 ], [ %.0112, %396 ], [ %.0112, %394 ], [ %.0112, %346 ], [ %.0112, %341 ], [ %.0112, %340 ], [ %.0112, %330 ], [ %.0112, %320 ], [ %.0112, %315 ], [ %.0112, %314 ], [ %.0112, %312 ], [ %.0112, %311 ], [ %.0112, %309 ], [ %.0112, %304 ], [ %.0112, %296 ], [ %.0112, %294 ], [ %.0112, %278 ], [ %.0112, %268 ], [ %.0112, %264 ], [ %.0112, %263 ], [ %.0112, %253 ], [ %.0112, %243 ], [ %.0112, %238 ], [ %.0112, %237 ], [ %.0112, %235 ], [ %.0112, %234 ], [ %.0112, %232 ], [ %.0112, %231 ], [ %.0112, %217 ], [ %.0112, %207 ], [ %.0112, %206 ], [ %.0112, %189 ], [ %.0112, %179 ], [ %.0112, %172 ], [ %.0112, %170 ], [ %.0112, %157 ], [ %.0112, %147 ], [ %.0112, %146 ], [ %.0112, %142 ], [ %.0112, %141 ], [ %.0112, %131 ], [ %.0112, %121 ], [ %.0112, %120 ], [ %.0112, %109 ], [ %.0112, %99 ], [ %.0112, %98 ], [ %.0112, %88 ], [ %.0112, %78 ], [ %.neg117, %77 ], [ %.0112, %67 ], [ %.0112, %65 ], [ %.0112, %52 ], [ %.0112, %42 ], [ %.0112, %41 ], [ 1, %30 ], [ %.0112, %20 ], [ %.0112, %15 ]
  %.0110.be = phi i32 [ %.0110, %14 ], [ %.0110, %632 ], [ %.0110, %628 ], [ %.0110, %606 ], [ %.0110, %584 ], [ %.0110, %583 ], [ %.0110, %582 ], [ %.0110, %581 ], [ %.0110, %576 ], [ %.0110, %575 ], [ %.0110, %574 ], [ 1, %573 ], [ %.0110, %571 ], [ %.0110, %570 ], [ %.0110, %569 ], [ %.0110, %567 ], [ %.0110, %565 ], [ %.0110, %554 ], [ %.0110, %544 ], [ %.0110, %543 ], [ %.0110, %530 ], [ %.0110, %520 ], [ %.0110, %519 ], [ %.0110, %496 ], [ %.0110, %492 ], [ %.0110, %491 ], [ %.0110, %490 ], [ %.0110, %459 ], [ %.0110, %449 ], [ %.0110, %447 ], [ %.0110, %414 ], [ %.0110, %404 ], [ %.0110, %400 ], [ %.0110, %399 ], [ %.0110, %397 ], [ %.0110, %396 ], [ %.0110, %394 ], [ %.0110, %346 ], [ %.0110, %341 ], [ %.0110, %340 ], [ %.0110, %330 ], [ %.0110, %320 ], [ %.0110, %315 ], [ %.0110, %314 ], [ %.0110, %312 ], [ %.0110, %311 ], [ %.0110, %309 ], [ %.0110, %304 ], [ %.0110, %296 ], [ %.0110, %294 ], [ %.0110, %278 ], [ %.0110, %268 ], [ %.0110, %264 ], [ %.0110, %263 ], [ %.0110, %253 ], [ %.0110, %243 ], [ %.0110, %238 ], [ %.0110, %237 ], [ %236, %235 ], [ %.0110, %234 ], [ %.0110, %232 ], [ %.0110, %231 ], [ %.0110, %217 ], [ %.0110, %207 ], [ %.0110, %206 ], [ %.0110, %189 ], [ %.0110, %179 ], [ %.0110, %172 ], [ %.0110, %170 ], [ %.0110, %157 ], [ %.0110, %147 ], [ %.0110, %146 ], [ %.0110, %142 ], [ %.0110, %141 ], [ 1, %131 ], [ %.0110, %121 ], [ %.0110, %120 ], [ %.0110, %109 ], [ %.0110, %99 ], [ %.0110, %98 ], [ %.0110, %88 ], [ %.0110, %78 ], [ %.0110, %77 ], [ %.0110, %67 ], [ %.0110, %65 ], [ %.0110, %52 ], [ %.0110, %42 ], [ %.0110, %41 ], [ %.0110, %30 ], [ %.0110, %20 ], [ %.0110, %15 ]
  %.0108.be = phi i32 [ %.0108, %14 ], [ %.0108, %632 ], [ %.0108, %628 ], [ %.0108, %606 ], [ %.0108, %584 ], [ %.0108, %583 ], [ %.0108, %582 ], [ %.0108, %581 ], [ %.0108, %576 ], [ %.0108, %575 ], [ %.0108, %574 ], [ %.0108, %573 ], [ %.0108, %571 ], [ %.0108, %570 ], [ %.0108, %569 ], [ %.0108, %567 ], [ %.0108, %565 ], [ %.0108, %554 ], [ %.0108, %544 ], [ %.0108, %543 ], [ %.0108, %530 ], [ %.0108, %520 ], [ %.0108, %519 ], [ %.0108, %496 ], [ %.0108, %492 ], [ %.0108, %491 ], [ %.0108, %490 ], [ %.0108, %459 ], [ %.0108, %449 ], [ %.0108, %447 ], [ %.0108, %414 ], [ %.0108, %404 ], [ %.0108, %400 ], [ %.0108, %399 ], [ %.0108, %397 ], [ %.0108, %396 ], [ %.0108, %394 ], [ %.0108, %346 ], [ %.0108, %341 ], [ %.0108, %340 ], [ %.0108, %330 ], [ %.0108, %320 ], [ %.0108, %315 ], [ %.0108, %314 ], [ %.0108, %312 ], [ %.0108, %311 ], [ %.0108, %309 ], [ %.0108, %304 ], [ %.0108, %296 ], [ %.0108, %294 ], [ %.0108, %278 ], [ %.0108, %268 ], [ %.0108, %264 ], [ %.0108, %263 ], [ %.0108, %253 ], [ %.0108, %243 ], [ %.0108, %238 ], [ %.0108, %237 ], [ %.0108, %235 ], [ %.0108, %234 ], [ %233, %232 ], [ %.0108, %231 ], [ %.0108, %217 ], [ %.0108, %207 ], [ %.0108, %206 ], [ %.0108, %189 ], [ %.0108, %179 ], [ %.0108, %172 ], [ %.0108, %170 ], [ %.0108, %157 ], [ %.0108, %147 ], [ 1, %146 ], [ %.0108, %142 ], [ %.0108, %141 ], [ %.0108, %131 ], [ %.0108, %121 ], [ %.0108, %120 ], [ %.0108, %109 ], [ %.0108, %99 ], [ %.0108, %98 ], [ %.0108, %88 ], [ %.0108, %78 ], [ %.0108, %77 ], [ %.0108, %67 ], [ %.0108, %65 ], [ %.0108, %52 ], [ %.0108, %42 ], [ %.0108, %41 ], [ %.0108, %30 ], [ %.0108, %20 ], [ %.0108, %15 ]
  %.0106.be = phi i32 [ %.0106, %14 ], [ %.0106, %632 ], [ %.0106, %628 ], [ %.0106, %606 ], [ %.0106, %584 ], [ %.0106, %583 ], [ %.0106, %582 ], [ %.0106, %581 ], [ %.0106, %576 ], [ %.0106, %575 ], [ %.0106, %574 ], [ %.0106, %573 ], [ %.0106, %571 ], [ %.0106, %570 ], [ %.0106, %569 ], [ %.0106, %567 ], [ %.0106, %565 ], [ %.0106, %554 ], [ %.0106, %544 ], [ %.0106, %543 ], [ %.0106, %530 ], [ %.0106, %520 ], [ %.0106, %519 ], [ %.0106, %496 ], [ %.0106, %492 ], [ %.0106, %491 ], [ %.0106, %490 ], [ %.0106, %459 ], [ %.0106, %449 ], [ %.0106, %447 ], [ %.0106, %414 ], [ %.0106, %404 ], [ %.0106, %400 ], [ %.0106, %399 ], [ %.0106, %397 ], [ %.0106, %396 ], [ %.0106, %394 ], [ %.0106, %346 ], [ %.0106, %341 ], [ %.0106, %340 ], [ %.0106, %330 ], [ %.0106, %320 ], [ %.0106, %315 ], [ %.0106, %314 ], [ %313, %312 ], [ %.0106, %311 ], [ %.0106, %309 ], [ %.0106, %304 ], [ %.0106, %296 ], [ %.0106, %294 ], [ %.0106, %278 ], [ %.0106, %268 ], [ %.0106, %264 ], [ %.0106, %263 ], [ %.0106, %253 ], [ %.0106, %243 ], [ %.0106, %238 ], [ 1, %237 ], [ %.0106, %235 ], [ %.0106, %234 ], [ %.0106, %232 ], [ %.0106, %231 ], [ %.0106, %217 ], [ %.0106, %207 ], [ %.0106, %206 ], [ %.0106, %189 ], [ %.0106, %179 ], [ %.0106, %172 ], [ %.0106, %170 ], [ %.0106, %157 ], [ %.0106, %147 ], [ %.0106, %146 ], [ %.0106, %142 ], [ %.0106, %141 ], [ %.0106, %131 ], [ %.0106, %121 ], [ %.0106, %120 ], [ %.0106, %109 ], [ %.0106, %99 ], [ %.0106, %98 ], [ %.0106, %88 ], [ %.0106, %78 ], [ %.0106, %77 ], [ %.0106, %67 ], [ %.0106, %65 ], [ %.0106, %52 ], [ %.0106, %42 ], [ %.0106, %41 ], [ %.0106, %30 ], [ %.0106, %20 ], [ %.0106, %15 ]
  %.0104.be = phi i32 [ %.0104, %14 ], [ %.0104, %632 ], [ %.0104, %628 ], [ %.0104, %606 ], [ %.0104, %584 ], [ %.0104, %583 ], [ %.0104, %582 ], [ 1, %581 ], [ %.0104, %576 ], [ %.0104, %575 ], [ %.0104, %574 ], [ %.0104, %573 ], [ %.0104, %571 ], [ %.0104, %570 ], [ %.0104, %569 ], [ %.0104, %567 ], [ %.0104, %565 ], [ %.0104, %554 ], [ %.0104, %544 ], [ %.0104, %543 ], [ %.0104, %530 ], [ %.0104, %520 ], [ %.0104, %519 ], [ %.0104, %496 ], [ %.0104, %492 ], [ %.0104, %491 ], [ %.0104, %490 ], [ %.0104, %459 ], [ %.0104, %449 ], [ %.0104, %447 ], [ %.0104, %414 ], [ %.0104, %404 ], [ %.0104, %400 ], [ %.0104, %399 ], [ %.0104, %397 ], [ %.0104, %396 ], [ %.0104, %394 ], [ %.0104, %346 ], [ %.0104, %341 ], [ %.0104, %340 ], [ %.0104, %330 ], [ %.0104, %320 ], [ %.0104, %315 ], [ %.0104, %314 ], [ %.0104, %312 ], [ %.0104, %311 ], [ %310, %309 ], [ %.0104, %304 ], [ %.0104, %296 ], [ %.0104, %294 ], [ %.0104, %278 ], [ %.0104, %268 ], [ %.0104, %264 ], [ %.0104, %263 ], [ 1, %253 ], [ %.0104, %243 ], [ %.0104, %238 ], [ %.0104, %237 ], [ %.0104, %235 ], [ %.0104, %234 ], [ %.0104, %232 ], [ %.0104, %231 ], [ %.0104, %217 ], [ %.0104, %207 ], [ %.0104, %206 ], [ %.0104, %189 ], [ %.0104, %179 ], [ %.0104, %172 ], [ %.0104, %170 ], [ %.0104, %157 ], [ %.0104, %147 ], [ %.0104, %146 ], [ %.0104, %142 ], [ %.0104, %141 ], [ %.0104, %131 ], [ %.0104, %121 ], [ %.0104, %120 ], [ %.0104, %109 ], [ %.0104, %99 ], [ %.0104, %98 ], [ %.0104, %88 ], [ %.0104, %78 ], [ %.0104, %77 ], [ %.0104, %67 ], [ %.0104, %65 ], [ %.0104, %52 ], [ %.0104, %42 ], [ %.0104, %41 ], [ %.0104, %30 ], [ %.0104, %20 ], [ %.0104, %15 ]
  %.0102.be = phi i32 [ %.0102, %14 ], [ %.0102, %632 ], [ %.0102, %628 ], [ %.0102, %606 ], [ %.0102, %584 ], [ %.0102, %583 ], [ %.0102, %582 ], [ %.0102, %581 ], [ %.0102, %576 ], [ %.0102, %575 ], [ %.0102, %574 ], [ %.0102, %573 ], [ %.0102, %571 ], [ %.0102, %570 ], [ %.0102, %569 ], [ %.0102, %567 ], [ %.0102, %565 ], [ %.0102, %554 ], [ %.0102, %544 ], [ %.0102, %543 ], [ %.0102, %530 ], [ %.0102, %520 ], [ %.0102, %519 ], [ %.0102, %496 ], [ %.0102, %492 ], [ %.0102, %491 ], [ %.0102, %490 ], [ %.0102, %459 ], [ %.0102, %449 ], [ %.0102, %447 ], [ %.0102, %414 ], [ %.0102, %404 ], [ %.0102, %400 ], [ %.0102, %399 ], [ %398, %397 ], [ %.0102, %396 ], [ %.0102, %394 ], [ %.0102, %346 ], [ %.0102, %341 ], [ %.0102, %340 ], [ %.0102, %330 ], [ %.0102, %320 ], [ %.0102, %315 ], [ 1, %314 ], [ %.0102, %312 ], [ %.0102, %311 ], [ %.0102, %309 ], [ %.0102, %304 ], [ %.0102, %296 ], [ %.0102, %294 ], [ %.0102, %278 ], [ %.0102, %268 ], [ %.0102, %264 ], [ %.0102, %263 ], [ %.0102, %253 ], [ %.0102, %243 ], [ %.0102, %238 ], [ %.0102, %237 ], [ %.0102, %235 ], [ %.0102, %234 ], [ %.0102, %232 ], [ %.0102, %231 ], [ %.0102, %217 ], [ %.0102, %207 ], [ %.0102, %206 ], [ %.0102, %189 ], [ %.0102, %179 ], [ %.0102, %172 ], [ %.0102, %170 ], [ %.0102, %157 ], [ %.0102, %147 ], [ %.0102, %146 ], [ %.0102, %142 ], [ %.0102, %141 ], [ %.0102, %131 ], [ %.0102, %121 ], [ %.0102, %120 ], [ %.0102, %109 ], [ %.0102, %99 ], [ %.0102, %98 ], [ %.0102, %88 ], [ %.0102, %78 ], [ %.0102, %77 ], [ %.0102, %67 ], [ %.0102, %65 ], [ %.0102, %52 ], [ %.0102, %42 ], [ %.0102, %41 ], [ %.0102, %30 ], [ %.0102, %20 ], [ %.0102, %15 ]
  %.0100.be = phi i32 [ %.0100, %14 ], [ %.0100, %632 ], [ %.0100, %628 ], [ %.0100, %606 ], [ %.0100, %584 ], [ 1, %583 ], [ %.0100, %582 ], [ %.0100, %581 ], [ %.0100, %576 ], [ %.0100, %575 ], [ %.0100, %574 ], [ %.0100, %573 ], [ %.0100, %571 ], [ %.0100, %570 ], [ %.0100, %569 ], [ %.0100, %567 ], [ %.0100, %565 ], [ %.0100, %554 ], [ %.0100, %544 ], [ %.0100, %543 ], [ %.0100, %530 ], [ %.0100, %520 ], [ %.0100, %519 ], [ %.0100, %496 ], [ %.0100, %492 ], [ %.0100, %491 ], [ %.0100, %490 ], [ %.0100, %459 ], [ %.0100, %449 ], [ %.0100, %447 ], [ %.0100, %414 ], [ %.0100, %404 ], [ %.0100, %400 ], [ %.0100, %399 ], [ %.0100, %397 ], [ %.0100, %396 ], [ %395, %394 ], [ %.0100, %346 ], [ %.0100, %341 ], [ %.0100, %340 ], [ 1, %330 ], [ %.0100, %320 ], [ %.0100, %315 ], [ %.0100, %314 ], [ %.0100, %312 ], [ %.0100, %311 ], [ %.0100, %309 ], [ %.0100, %304 ], [ %.0100, %296 ], [ %.0100, %294 ], [ %.0100, %278 ], [ %.0100, %268 ], [ %.0100, %264 ], [ %.0100, %263 ], [ %.0100, %253 ], [ %.0100, %243 ], [ %.0100, %238 ], [ %.0100, %237 ], [ %.0100, %235 ], [ %.0100, %234 ], [ %.0100, %232 ], [ %.0100, %231 ], [ %.0100, %217 ], [ %.0100, %207 ], [ %.0100, %206 ], [ %.0100, %189 ], [ %.0100, %179 ], [ %.0100, %172 ], [ %.0100, %170 ], [ %.0100, %157 ], [ %.0100, %147 ], [ %.0100, %146 ], [ %.0100, %142 ], [ %.0100, %141 ], [ %.0100, %131 ], [ %.0100, %121 ], [ %.0100, %120 ], [ %.0100, %109 ], [ %.0100, %99 ], [ %.0100, %98 ], [ %.0100, %88 ], [ %.0100, %78 ], [ %.0100, %77 ], [ %.0100, %67 ], [ %.0100, %65 ], [ %.0100, %52 ], [ %.0100, %42 ], [ %.0100, %41 ], [ %.0100, %30 ], [ %.0100, %20 ], [ %.0100, %15 ]
  %.098.be = phi i32 [ %.098, %14 ], [ %.098, %632 ], [ %.098, %628 ], [ %.098, %606 ], [ %605, %584 ], [ %.098, %583 ], [ %.098, %582 ], [ %.098, %581 ], [ %.098, %576 ], [ %.098, %575 ], [ %.098, %574 ], [ %.098, %573 ], [ %.098, %571 ], [ %.098, %570 ], [ %.098, %569 ], [ %.098, %567 ], [ %.098, %565 ], [ %.098, %554 ], [ %.098, %544 ], [ %.098, %543 ], [ %.098, %530 ], [ %.098, %520 ], [ %.098, %519 ], [ %.098, %496 ], [ %.098, %492 ], [ %.098, %491 ], [ %.098, %490 ], [ %.098, %459 ], [ %.098, %449 ], [ %.098, %447 ], [ %436, %414 ], [ %.098, %404 ], [ %.098, %400 ], [ %.098, %399 ], [ %.098, %397 ], [ %.098, %396 ], [ %.098, %394 ], [ %.098, %346 ], [ %.098, %341 ], [ %.098, %340 ], [ %.098, %330 ], [ %.098, %320 ], [ %.098, %315 ], [ %.098, %314 ], [ %.098, %312 ], [ %.098, %311 ], [ %.098, %309 ], [ %.098, %304 ], [ %.098, %296 ], [ %.098, %294 ], [ %.098, %278 ], [ %.098, %268 ], [ %.098, %264 ], [ %.098, %263 ], [ %.098, %253 ], [ %.098, %243 ], [ %.098, %238 ], [ %.098, %237 ], [ %.098, %235 ], [ %.098, %234 ], [ %.098, %232 ], [ %.098, %231 ], [ %.098, %217 ], [ %.098, %207 ], [ %.098, %206 ], [ %.098, %189 ], [ %.098, %179 ], [ %.098, %172 ], [ %.098, %170 ], [ %.098, %157 ], [ %.098, %147 ], [ %.098, %146 ], [ %.098, %142 ], [ %.098, %141 ], [ %.098, %131 ], [ %.098, %121 ], [ %.098, %120 ], [ %.098, %109 ], [ %.098, %99 ], [ %.098, %98 ], [ %.098, %88 ], [ %.098, %78 ], [ %.098, %77 ], [ %.098, %67 ], [ %.098, %65 ], [ %.098, %52 ], [ %.098, %42 ], [ %.098, %41 ], [ %.098, %30 ], [ %.098, %20 ], [ %.098, %15 ]
  %.096.be = phi i32 [ %.096, %14 ], [ %.096, %632 ], [ %.096, %628 ], [ %627, %606 ], [ %.096, %584 ], [ %.096, %583 ], [ %.096, %582 ], [ %.096, %581 ], [ %.096, %576 ], [ %.096, %575 ], [ %.096, %574 ], [ %.096, %573 ], [ %.096, %571 ], [ %.096, %570 ], [ %.096, %569 ], [ %.096, %567 ], [ %.096, %565 ], [ %.096, %554 ], [ %.096, %544 ], [ %.096, %543 ], [ %.096, %530 ], [ %.096, %520 ], [ %.096, %519 ], [ %.096, %496 ], [ %.096, %492 ], [ 0, %491 ], [ %.096, %490 ], [ %480, %459 ], [ %.096, %449 ], [ %.096, %447 ], [ %.096, %414 ], [ %.096, %404 ], [ %.096, %400 ], [ %.096, %399 ], [ %.096, %397 ], [ %.096, %396 ], [ %.096, %394 ], [ %.096, %346 ], [ %.096, %341 ], [ %.096, %340 ], [ %.096, %330 ], [ %.096, %320 ], [ %.096, %315 ], [ %.096, %314 ], [ %.096, %312 ], [ %.096, %311 ], [ %.096, %309 ], [ %.096, %304 ], [ %.096, %296 ], [ %.096, %294 ], [ %.096, %278 ], [ %.096, %268 ], [ %.096, %264 ], [ %.096, %263 ], [ %.096, %253 ], [ %.096, %243 ], [ %.096, %238 ], [ %.096, %237 ], [ %.096, %235 ], [ %.096, %234 ], [ %.096, %232 ], [ %.096, %231 ], [ %.096, %217 ], [ %.096, %207 ], [ %.096, %206 ], [ %.096, %189 ], [ %.096, %179 ], [ %.096, %172 ], [ %.096, %170 ], [ %.096, %157 ], [ %.096, %147 ], [ %.096, %146 ], [ %.096, %142 ], [ %.096, %141 ], [ %.096, %131 ], [ %.096, %121 ], [ %.096, %120 ], [ %.096, %109 ], [ %.096, %99 ], [ %.096, %98 ], [ %.096, %88 ], [ %.096, %78 ], [ %.096, %77 ], [ %.096, %67 ], [ %.096, %65 ], [ %.096, %52 ], [ %.096, %42 ], [ %.096, %41 ], [ %.096, %30 ], [ %.096, %20 ], [ %.096, %15 ]
  %.094.be = phi i32 [ %.094, %14 ], [ %.094, %632 ], [ %.094, %628 ], [ %.094, %606 ], [ %.094, %584 ], [ %.094, %583 ], [ %.094, %582 ], [ %.094, %581 ], [ %.094, %576 ], [ %.094, %575 ], [ %.094, %574 ], [ %.094, %573 ], [ %.094, %571 ], [ %.094, %570 ], [ %.094, %569 ], [ %.094, %567 ], [ %.094, %565 ], [ %.094, %554 ], [ %.094, %544 ], [ %.094, %543 ], [ %.094, %530 ], [ %.094, %520 ], [ 0, %519 ], [ %518, %496 ], [ %.094, %492 ], [ %.094, %491 ], [ %.094, %490 ], [ %.094, %459 ], [ %.094, %449 ], [ %.094, %447 ], [ %.094, %414 ], [ %.094, %404 ], [ %.094, %400 ], [ %.094, %399 ], [ %.094, %397 ], [ %.094, %396 ], [ %.094, %394 ], [ %.094, %346 ], [ %.094, %341 ], [ %.094, %340 ], [ %.094, %330 ], [ %.094, %320 ], [ %.094, %315 ], [ %.094, %314 ], [ %.094, %312 ], [ %.094, %311 ], [ %.094, %309 ], [ %.094, %304 ], [ %.094, %296 ], [ %.094, %294 ], [ %.094, %278 ], [ %.094, %268 ], [ %.094, %264 ], [ %.094, %263 ], [ %.094, %253 ], [ %.094, %243 ], [ %.094, %238 ], [ %.094, %237 ], [ %.094, %235 ], [ %.094, %234 ], [ %.094, %232 ], [ %.094, %231 ], [ %.094, %217 ], [ %.094, %207 ], [ %.094, %206 ], [ %.094, %189 ], [ %.094, %179 ], [ %.094, %172 ], [ %.094, %170 ], [ %.094, %157 ], [ %.094, %147 ], [ %.094, %146 ], [ %.094, %142 ], [ %.094, %141 ], [ %.094, %131 ], [ %.094, %121 ], [ %.094, %120 ], [ %.094, %109 ], [ %.094, %99 ], [ %.094, %98 ], [ %.094, %88 ], [ %.094, %78 ], [ %.094, %77 ], [ %.094, %67 ], [ %.094, %65 ], [ %.094, %52 ], [ %.094, %42 ], [ %.094, %41 ], [ %.094, %30 ], [ %.094, %20 ], [ %.094, %15 ]
  %.092.be = phi i32 [ %.092, %14 ], [ %633, %632 ], [ %.092, %628 ], [ %.092, %606 ], [ %.092, %584 ], [ %.092, %583 ], [ %.092, %582 ], [ %.092, %581 ], [ %.092, %576 ], [ %.092, %575 ], [ %.092, %574 ], [ %.092, %573 ], [ %.092, %571 ], [ %.092, %570 ], [ %.092, %569 ], [ %.092, %567 ], [ %.092, %565 ], [ %555, %554 ], [ %.092, %544 ], [ %.092, %543 ], [ %.092, %530 ], [ %.092, %520 ], [ %.092, %519 ], [ %.092, %496 ], [ %.092, %492 ], [ %.092, %491 ], [ %.092, %490 ], [ %.092, %459 ], [ %.092, %449 ], [ %.092, %447 ], [ %.092, %414 ], [ %.092, %404 ], [ %.092, %400 ], [ 0, %399 ], [ %.092, %397 ], [ %.092, %396 ], [ %.092, %394 ], [ %.092, %346 ], [ %.092, %341 ], [ %.092, %340 ], [ %.092, %330 ], [ %.092, %320 ], [ %.092, %315 ], [ %.092, %314 ], [ %.092, %312 ], [ %.092, %311 ], [ %.092, %309 ], [ %.092, %304 ], [ %.092, %296 ], [ %.092, %294 ], [ %.092, %278 ], [ %.092, %268 ], [ %.092, %264 ], [ %.092, %263 ], [ %.092, %253 ], [ %.092, %243 ], [ %.092, %238 ], [ %.092, %237 ], [ %.092, %235 ], [ %.092, %234 ], [ %.092, %232 ], [ %.092, %231 ], [ %.092, %217 ], [ %.092, %207 ], [ %.092, %206 ], [ %.092, %189 ], [ %.092, %179 ], [ %.092, %172 ], [ %.092, %170 ], [ %.092, %157 ], [ %.092, %147 ], [ %.092, %146 ], [ %.092, %142 ], [ %.092, %141 ], [ %.092, %131 ], [ %.092, %121 ], [ %.092, %120 ], [ %.092, %109 ], [ %.092, %99 ], [ %.092, %98 ], [ %.092, %88 ], [ %.092, %78 ], [ %.092, %77 ], [ %.092, %67 ], [ %.092, %65 ], [ %.092, %52 ], [ %.092, %42 ], [ %.092, %41 ], [ %.092, %30 ], [ %.092, %20 ], [ %.092, %15 ]
  %.090.be = phi i32 [ %.090, %14 ], [ 1910737106, %632 ], [ -1608792642, %628 ], [ -1374993475, %606 ], [ -749210505, %584 ], [ 966006192, %583 ], [ -617850925, %582 ], [ -863646636, %581 ], [ -166119566, %576 ], [ -973848345, %575 ], [ -847660187, %574 ], [ 1533532745, %573 ], [ -2096806439, %571 ], [ 1563134622, %570 ], [ -905237587, %569 ], [ -205716278, %567 ], [ 211500301, %565 ], [ %564, %554 ], [ %553, %544 ], [ -139937987, %543 ], [ %542, %530 ], [ %529, %520 ], [ -442688442, %519 ], [ -442688442, %496 ], [ %495, %492 ], [ 1414466908, %491 ], [ 1414466908, %490 ], [ %489, %459 ], [ %458, %449 ], [ %448, %447 ], [ %446, %414 ], [ %413, %404 ], [ %403, %400 ], [ 211500301, %399 ], [ 2139862291, %397 ], [ 133849867, %396 ], [ 2041351135, %394 ], [ 1732485542, %346 ], [ %345, %341 ], [ 2041351135, %340 ], [ %339, %330 ], [ %329, %320 ], [ %319, %315 ], [ 2139862291, %314 ], [ -1445928730, %312 ], [ -334380682, %311 ], [ 130839907, %309 ], [ 1608370976, %304 ], [ -271471191, %296 ], [ %295, %294 ], [ %293, %278 ], [ %277, %268 ], [ %267, %264 ], [ 130839907, %263 ], [ %262, %253 ], [ %252, %243 ], [ %242, %238 ], [ -1445928730, %237 ], [ 973405308, %235 ], [ -1250430449, %234 ], [ 998536880, %232 ], [ 1130031988, %231 ], [ %230, %217 ], [ %216, %207 ], [ 288232974, %206 ], [ %205, %189 ], [ %188, %179 ], [ %178, %172 ], [ %171, %170 ], [ %169, %157 ], [ %156, %147 ], [ 998536880, %146 ], [ %145, %142 ], [ 973405308, %141 ], [ %140, %131 ], [ %130, %121 ], [ 422999828, %120 ], [ %119, %109 ], [ %108, %99 ], [ -1107593459, %98 ], [ %97, %88 ], [ %87, %78 ], [ -1627564044, %77 ], [ -1108603725, %67 ], [ %66, %65 ], [ %64, %52 ], [ %51, %42 ], [ -1627564044, %41 ], [ %40, %30 ], [ %29, %20 ], [ %19, %15 ]
  %.088.be = phi i1 [ %.088, %14 ], [ %.088, %632 ], [ %.088, %628 ], [ %.088, %606 ], [ %.088, %584 ], [ %.088, %583 ], [ %.088, %582 ], [ %.088, %581 ], [ %.088, %576 ], [ %.088, %575 ], [ %.088, %574 ], [ %.088, %573 ], [ %.088, %571 ], [ %.088, %570 ], [ %.088, %569 ], [ %.088, %567 ], [ %.088, %565 ], [ %.088, %554 ], [ %.088, %544 ], [ %.088, %543 ], [ %.088, %530 ], [ %.088, %520 ], [ %.088, %519 ], [ %.088, %496 ], [ %.088, %492 ], [ %.088, %491 ], [ %.088, %490 ], [ %.088, %459 ], [ %.088, %449 ], [ %.088, %447 ], [ %.088, %414 ], [ %.088, %404 ], [ %.088, %400 ], [ %.088, %399 ], [ %.088, %397 ], [ %.088, %396 ], [ %.088, %394 ], [ %.088, %346 ], [ %.088, %341 ], [ %.088, %340 ], [ %.088, %330 ], [ %.088, %320 ], [ %.088, %315 ], [ %.088, %314 ], [ %.088, %312 ], [ %.088, %311 ], [ %.088, %309 ], [ %.088, %304 ], [ %.088, %296 ], [ %.088, %294 ], [ %.088, %278 ], [ %.088, %268 ], [ %.088, %264 ], [ %.088, %263 ], [ %.088, %253 ], [ %.088, %243 ], [ %.088, %238 ], [ %.088, %237 ], [ %.088, %235 ], [ %.088, %234 ], [ %.088, %232 ], [ %.088, %231 ], [ %.088, %217 ], [ %.088, %207 ], [ %.0..0..0.83, %206 ], [ %.088, %189 ], [ %.088, %179 ], [ false, %172 ], [ %.088, %170 ], [ %.088, %157 ], [ %.088, %147 ], [ %.088, %146 ], [ %.088, %142 ], [ %.088, %141 ], [ %.088, %131 ], [ %.088, %121 ], [ %.088, %120 ], [ %.088, %109 ], [ %.088, %99 ], [ %.088, %98 ], [ %.088, %88 ], [ %.088, %78 ], [ %.088, %77 ], [ %.088, %67 ], [ %.088, %65 ], [ %.088, %52 ], [ %.088, %42 ], [ %.088, %41 ], [ %.088, %30 ], [ %.088, %20 ], [ %.088, %15 ]
  %.0.be = phi i1 [ %.0, %14 ], [ %.0, %632 ], [ %.0, %628 ], [ %.0, %606 ], [ %.0, %584 ], [ %.0, %583 ], [ %.0, %582 ], [ %.0, %581 ], [ %.0, %576 ], [ %.0, %575 ], [ %.0, %574 ], [ %.0, %573 ], [ %.0, %571 ], [ %.0, %570 ], [ %.0, %569 ], [ %.0, %567 ], [ %.0, %565 ], [ %.0, %554 ], [ %.0, %544 ], [ %.0, %543 ], [ %.0, %530 ], [ %.0, %520 ], [ %.0, %519 ], [ %.0, %496 ], [ %.0, %492 ], [ %.0, %491 ], [ %.0, %490 ], [ %.0, %459 ], [ %.0, %449 ], [ %.0, %447 ], [ %.0, %414 ], [ %.0, %404 ], [ %.0, %400 ], [ %.0, %399 ], [ %.0, %397 ], [ %.0, %396 ], [ %.0, %394 ], [ %.0, %346 ], [ %.0, %341 ], [ %.0, %340 ], [ %.0, %330 ], [ %.0, %320 ], [ %.0, %315 ], [ %.0, %314 ], [ %.0, %312 ], [ %.0, %311 ], [ %.0, %309 ], [ %.0, %304 ], [ %303, %296 ], [ false, %294 ], [ %.0, %278 ], [ %.0, %268 ], [ %.0, %264 ], [ %.0, %263 ], [ %.0, %253 ], [ %.0, %243 ], [ %.0, %238 ], [ %.0, %237 ], [ %.0, %235 ], [ %.0, %234 ], [ %.0, %232 ], [ %.0, %231 ], [ %.0, %217 ], [ %.0, %207 ], [ %.0, %206 ], [ %.0, %189 ], [ %.0, %179 ], [ %.0, %172 ], [ %.0, %170 ], [ %.0, %157 ], [ %.0, %147 ], [ %.0, %146 ], [ %.0, %142 ], [ %.0, %141 ], [ %.0, %131 ], [ %.0, %121 ], [ %.0, %120 ], [ %.0, %109 ], [ %.0, %99 ], [ %.0, %98 ], [ %.0, %88 ], [ %.0, %78 ], [ %.0, %77 ], [ %.0, %67 ], [ %.0, %65 ], [ %.0, %52 ], [ %.0, %42 ], [ %.0, %41 ], [ %.0, %30 ], [ %.0, %20 ], [ %.0, %15 ]
  br label %14

15:                                               ; preds = %14
  %16 = load i32, i32* @N, align 4
  %17 = add i32 %16, 1
  %18 = icmp slt i32 %.0114, %17
  %19 = select i1 %18, i32 2130542169, i32 -1859750309
  br label %.backedge

20:                                               ; preds = %14
  %21 = load i32, i32* @x.4, align 4
  %22 = load i32, i32* @y.5, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 -205716278, i32 -1095854170
  br label %.backedge

30:                                               ; preds = %14
  %31 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %13)
  %32 = load i32, i32* @x.4, align 4
  %33 = load i32, i32* @y.5, align 4
  %34 = add i32 %32, -1
  %35 = mul i32 %34, %32
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %38, %37
  %40 = select i1 %39, i32 -1729995250, i32 -1095854170
  br label %.backedge

41:                                               ; preds = %14
  br label %.backedge

42:                                               ; preds = %14
  %43 = load i32, i32* @x.4, align 4
  %44 = load i32, i32* @y.5, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 -905237587, i32 -970390456
  br label %.backedge

52:                                               ; preds = %14
  %53 = load i32, i32* @M, align 4
  %54 = add i32 %53, 1
  %55 = icmp slt i32 %.0112, %54
  store i1 %55, i1* %6, align 1
  %56 = load i32, i32* @x.4, align 4
  %57 = load i32, i32* @y.5, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 -2127668790, i32 -970390456
  br label %.backedge

65:                                               ; preds = %14
  %.0..0..0.81 = load volatile i1, i1* %6, align 1
  %66 = select i1 %.0..0..0.81, i32 -150579069, i32 885700816
  br label %.backedge

67:                                               ; preds = %14
  %68 = add i32 %.0112, -1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [2005 x i8], [2005 x i8]* %7, i64 0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 49
  %73 = sext i32 %.0114 to i64
  %74 = sext i32 %.0112 to i64
  %75 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @board, i64 0, i64 %73, i64 %74
  %76 = zext i1 %72 to i8
  store i8 %76, i8* %75, align 1
  br label %.backedge

77:                                               ; preds = %14
  %.neg117 = add i32 %.0112, 1
  br label %.backedge

78:                                               ; preds = %14
  %79 = load i32, i32* @x.4, align 4
  %80 = load i32, i32* @y.5, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 1563134622, i32 -648813272
  br label %.backedge

88:                                               ; preds = %14
  %89 = load i32, i32* @x.4, align 4
  %90 = load i32, i32* @y.5, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 -344656065, i32 -648813272
  br label %.backedge

98:                                               ; preds = %14
  br label %.backedge

99:                                               ; preds = %14
  %100 = load i32, i32* @x.4, align 4
  %101 = load i32, i32* @y.5, align 4
  %102 = add i32 %100, -1
  %103 = mul i32 %102, %100
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %106, %105
  %108 = select i1 %107, i32 -2096806439, i32 -108312336
  br label %.backedge

109:                                              ; preds = %14
  %110 = add i32 %.0114, 1
  %111 = load i32, i32* @x.4, align 4
  %112 = load i32, i32* @y.5, align 4
  %113 = add i32 %111, -1
  %114 = mul i32 %113, %111
  %115 = and i32 %114, 1
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %117, %116
  %119 = select i1 %118, i32 736091522, i32 -108312336
  br label %.backedge

120:                                              ; preds = %14
  br label %.backedge

121:                                              ; preds = %14
  %122 = load i32, i32* @x.4, align 4
  %123 = load i32, i32* @y.5, align 4
  %124 = add i32 %122, -1
  %125 = mul i32 %124, %122
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %128, %127
  %130 = select i1 %129, i32 1533532745, i32 868242096
  br label %.backedge

131:                                              ; preds = %14
  %132 = load i32, i32* @x.4, align 4
  %133 = load i32, i32* @y.5, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 2083983067, i32 868242096
  br label %.backedge

141:                                              ; preds = %14
  br label %.backedge

142:                                              ; preds = %14
  %143 = load i32, i32* @N, align 4
  %144 = icmp slt i32 %.0110, %143
  %145 = select i1 %144, i32 2090717613, i32 -1016005999
  br label %.backedge

146:                                              ; preds = %14
  br label %.backedge

147:                                              ; preds = %14
  %148 = load i32, i32* @x.4, align 4
  %149 = load i32, i32* @y.5, align 4
  %150 = add i32 %148, -1
  %151 = mul i32 %150, %148
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 -847660187, i32 -360674063
  br label %.backedge

157:                                              ; preds = %14
  %158 = load i32, i32* @M, align 4
  %159 = add i32 %158, 1
  %160 = icmp slt i32 %.0108, %159
  store i1 %160, i1* %5, align 1
  %161 = load i32, i32* @x.4, align 4
  %162 = load i32, i32* @y.5, align 4
  %163 = add i32 %161, -1
  %164 = mul i32 %163, %161
  %165 = and i32 %164, 1
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %167, %166
  %169 = select i1 %168, i32 -513229624, i32 -360674063
  br label %.backedge

170:                                              ; preds = %14
  %.0..0..0.82 = load volatile i1, i1* %5, align 1
  %171 = select i1 %.0..0..0.82, i32 429386325, i32 1535214765
  br label %.backedge

172:                                              ; preds = %14
  %173 = sext i32 %.0110 to i64
  %174 = sext i32 %.0108 to i64
  %175 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @board, i64 0, i64 %173, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = and i8 %176, 1
  %.not116 = icmp eq i8 %177, 0
  %178 = select i1 %.not116, i32 288232974, i32 -1930997101
  br label %.backedge

179:                                              ; preds = %14
  %180 = load i32, i32* @x.4, align 4
  %181 = load i32, i32* @y.5, align 4
  %182 = add i32 %180, -1
  %183 = mul i32 %182, %180
  %184 = and i32 %183, 1
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %186, %185
  %188 = select i1 %187, i32 -973848345, i32 -1575649520
  br label %.backedge

189:                                              ; preds = %14
  %190 = add i32 %.0110, 1
  %191 = sext i32 %190 to i64
  %192 = sext i32 %.0108 to i64
  %193 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @board, i64 0, i64 %191, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = and i8 %194, 1
  %196 = icmp ne i8 %195, 0
  store i1 %196, i1* %4, align 1
  %197 = load i32, i32* @x.4, align 4
  %198 = load i32, i32* @y.5, align 4
  %199 = add i32 %197, -1
  %200 = mul i32 %199, %197
  %201 = and i32 %200, 1
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %203, %202
  %205 = select i1 %204, i32 -447164932, i32 -1575649520
  br label %.backedge

206:                                              ; preds = %14
  %.0..0..0.83 = load volatile i1, i1* %4, align 1
  br label %.backedge

207:                                              ; preds = %14
  store i1 %.088, i1* %1, align 1
  %208 = load i32, i32* @x.4, align 4
  %209 = load i32, i32* @y.5, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 -166119566, i32 -76189939
  br label %.backedge

217:                                              ; preds = %14
  %218 = sext i32 %.0110 to i64
  %219 = sext i32 %.0108 to i64
  %220 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @edgb, i64 0, i64 %218, i64 %219
  %.0..0..0.86 = load volatile i1, i1* %1, align 1
  %221 = zext i1 %.0..0..0.86 to i8
  store i8 %221, i8* %220, align 1
  %222 = load i32, i32* @x.4, align 4
  %223 = load i32, i32* @y.5, align 4
  %224 = add i32 %222, -1
  %225 = mul i32 %224, %222
  %226 = and i32 %225, 1
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %228, %227
  %230 = select i1 %229, i32 -406743937, i32 -76189939
  br label %.backedge

231:                                              ; preds = %14
  br label %.backedge

232:                                              ; preds = %14
  %233 = add i32 %.0108, 1
  br label %.backedge

234:                                              ; preds = %14
  br label %.backedge

235:                                              ; preds = %14
  %236 = add i32 %.0110, 1
  br label %.backedge

237:                                              ; preds = %14
  br label %.backedge

238:                                              ; preds = %14
  %239 = load i32, i32* @N, align 4
  %240 = add i32 %239, 1
  %241 = icmp slt i32 %.0106, %240
  %242 = select i1 %241, i32 -1602197216, i32 -1903035453
  br label %.backedge

243:                                              ; preds = %14
  %244 = load i32, i32* @x.4, align 4
  %245 = load i32, i32* @y.5, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 -863646636, i32 1941431099
  br label %.backedge

253:                                              ; preds = %14
  %254 = load i32, i32* @x.4, align 4
  %255 = load i32, i32* @y.5, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 41764618, i32 1941431099
  br label %.backedge

263:                                              ; preds = %14
  br label %.backedge

264:                                              ; preds = %14
  %265 = load i32, i32* @M, align 4
  %266 = icmp slt i32 %.0104, %265
  %267 = select i1 %266, i32 -381670760, i32 -8044888
  br label %.backedge

268:                                              ; preds = %14
  %269 = load i32, i32* @x.4, align 4
  %270 = load i32, i32* @y.5, align 4
  %271 = add i32 %269, -1
  %272 = mul i32 %271, %269
  %273 = and i32 %272, 1
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %275, %274
  %277 = select i1 %276, i32 -617850925, i32 -263152694
  br label %.backedge

278:                                              ; preds = %14
  %279 = sext i32 %.0106 to i64
  %280 = sext i32 %.0104 to i64
  %281 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @board, i64 0, i64 %279, i64 %280
  %282 = load i8, i8* %281, align 1
  %283 = and i8 %282, 1
  %284 = icmp ne i8 %283, 0
  store i1 %284, i1* %3, align 1
  %285 = load i32, i32* @x.4, align 4
  %286 = load i32, i32* @y.5, align 4
  %287 = add i32 %285, -1
  %288 = mul i32 %287, %285
  %289 = and i32 %288, 1
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %291, %290
  %293 = select i1 %292, i32 1094401470, i32 -263152694
  br label %.backedge

294:                                              ; preds = %14
  %.0..0..0.84 = load volatile i1, i1* %3, align 1
  %295 = select i1 %.0..0..0.84, i32 1908402079, i32 -271471191
  br label %.backedge

296:                                              ; preds = %14
  %297 = sext i32 %.0106 to i64
  %298 = add i32 %.0104, 1
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @board, i64 0, i64 %297, i64 %299
  %301 = load i8, i8* %300, align 1
  %302 = and i8 %301, 1
  %303 = icmp ne i8 %302, 0
  br label %.backedge

304:                                              ; preds = %14
  %305 = sext i32 %.0106 to i64
  %306 = sext i32 %.0104 to i64
  %307 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @edgs, i64 0, i64 %305, i64 %306
  %308 = zext i1 %.0 to i8
  store i8 %308, i8* %307, align 1
  br label %.backedge

309:                                              ; preds = %14
  %310 = add i32 %.0104, 1
  br label %.backedge

311:                                              ; preds = %14
  br label %.backedge

312:                                              ; preds = %14
  %313 = add i32 %.0106, 1
  br label %.backedge

314:                                              ; preds = %14
  br label %.backedge

315:                                              ; preds = %14
  %316 = load i32, i32* @N, align 4
  %317 = add i32 %316, 1
  %318 = icmp slt i32 %.0102, %317
  %319 = select i1 %318, i32 1520091775, i32 378460119
  br label %.backedge

320:                                              ; preds = %14
  %321 = load i32, i32* @x.4, align 4
  %322 = load i32, i32* @y.5, align 4
  %323 = add i32 %321, -1
  %324 = mul i32 %323, %321
  %325 = and i32 %324, 1
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %327, %326
  %329 = select i1 %328, i32 966006192, i32 -1022865414
  br label %.backedge

330:                                              ; preds = %14
  %331 = load i32, i32* @x.4, align 4
  %332 = load i32, i32* @y.5, align 4
  %333 = add i32 %331, -1
  %334 = mul i32 %333, %331
  %335 = and i32 %334, 1
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %337, %336
  %339 = select i1 %338, i32 268467557, i32 -1022865414
  br label %.backedge

340:                                              ; preds = %14
  br label %.backedge

341:                                              ; preds = %14
  %342 = load i32, i32* @M, align 4
  %343 = add i32 %342, 1
  %344 = icmp slt i32 %.0100, %343
  %345 = select i1 %344, i32 -1671292452, i32 1541203546
  br label %.backedge

346:                                              ; preds = %14
  %347 = add i32 %.0102, -1
  %348 = sext i32 %347 to i64
  %349 = sext i32 %.0100 to i64
  %350 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %348, i64 %349
  %351 = load i32, i32* %350, align 4
  %352 = sext i32 %.0102 to i64
  %353 = add i32 %.0100, -1
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %352, i64 %354
  %356 = load i32, i32* %355, align 4
  %357 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %348, i64 %354
  %358 = load i32, i32* %357, align 4
  %359 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @board, i64 0, i64 %352, i64 %349
  %360 = load i8, i8* %359, align 1
  %361 = and i8 %360, 1
  %362 = zext i8 %361 to i32
  %363 = add i32 %356, %351
  %364 = sub i32 %363, %358
  %365 = add i32 %364, %362
  %366 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %352, i64 %349
  store i32 %365, i32* %366, align 4
  %367 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @edgb, i64 0, i64 %352, i64 %349
  %368 = load i8, i8* %367, align 1
  %369 = and i8 %368, 1
  %370 = zext i8 %369 to i32
  %371 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %348, i64 %349
  %372 = load i32, i32* %371, align 4
  %373 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %352, i64 %354
  %374 = load i32, i32* %373, align 4
  %375 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %348, i64 %354
  %376 = load i32, i32* %375, align 4
  %377 = add i32 %372, %370
  %.neg = add i32 %377, %374
  %378 = sub i32 %.neg, %376
  %379 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %352, i64 %349
  store i32 %378, i32* %379, align 4
  %380 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @edgs, i64 0, i64 %352, i64 %349
  %381 = load i8, i8* %380, align 1
  %382 = and i8 %381, 1
  %383 = zext i8 %382 to i32
  %384 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfs, i64 0, i64 %348, i64 %349
  %385 = load i32, i32* %384, align 4
  %386 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfs, i64 0, i64 %352, i64 %354
  %387 = load i32, i32* %386, align 4
  %388 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfs, i64 0, i64 %348, i64 %354
  %389 = load i32, i32* %388, align 4
  %390 = add i32 %385, %383
  %391 = add i32 %390, %387
  %392 = sub i32 %391, %389
  %393 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfs, i64 0, i64 %352, i64 %349
  store i32 %392, i32* %393, align 4
  br label %.backedge

394:                                              ; preds = %14
  %395 = add i32 %.0100, 1
  br label %.backedge

396:                                              ; preds = %14
  br label %.backedge

397:                                              ; preds = %14
  %398 = add i32 %.0102, 1
  br label %.backedge

399:                                              ; preds = %14
  br label %.backedge

400:                                              ; preds = %14
  %401 = load i32, i32* @Q, align 4
  %402 = icmp slt i32 %.092, %401
  %403 = select i1 %402, i32 1294552060, i32 729619076
  br label %.backedge

404:                                              ; preds = %14
  %405 = load i32, i32* @x.4, align 4
  %406 = load i32, i32* @y.5, align 4
  %407 = add i32 %405, -1
  %408 = mul i32 %407, %405
  %409 = and i32 %408, 1
  %410 = icmp eq i32 %409, 0
  %411 = icmp slt i32 %406, 10
  %412 = or i1 %411, %410
  %413 = select i1 %412, i32 -749210505, i32 -1024141557
  br label %.backedge

414:                                              ; preds = %14
  %415 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11)
  %416 = load i32, i32* %10, align 4
  %417 = sext i32 %416 to i64
  %418 = load i32, i32* %11, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %417, i64 %419
  %421 = load i32, i32* %420, align 4
  %422 = load i32, i32* %8, align 4
  %423 = add i32 %422, -1
  %424 = sext i32 %423 to i64
  %425 = load i32, i32* %9, align 4
  %426 = add i32 %425, -1
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %424, i64 %427
  %429 = load i32, i32* %428, align 4
  %430 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %424, i64 %419
  %431 = load i32, i32* %430, align 4
  %432 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %417, i64 %427
  %433 = load i32, i32* %432, align 4
  %434 = add i32 %429, %421
  %435 = add i32 %431, %433
  %436 = sub i32 %434, %435
  %437 = icmp ne i32 %422, %416
  store i1 %437, i1* %2, align 1
  %438 = load i32, i32* @x.4, align 4
  %439 = load i32, i32* @y.5, align 4
  %440 = add i32 %438, -1
  %441 = mul i32 %440, %438
  %442 = and i32 %441, 1
  %443 = icmp eq i32 %442, 0
  %444 = icmp slt i32 %439, 10
  %445 = or i1 %444, %443
  %446 = select i1 %445, i32 -1411263531, i32 -1024141557
  br label %.backedge

447:                                              ; preds = %14
  %.0..0..0.85 = load volatile i1, i1* %2, align 1
  %448 = select i1 %.0..0..0.85, i32 817674730, i32 1025060431
  br label %.backedge

449:                                              ; preds = %14
  %450 = load i32, i32* @x.4, align 4
  %451 = load i32, i32* @y.5, align 4
  %452 = add i32 %450, -1
  %453 = mul i32 %452, %450
  %454 = and i32 %453, 1
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %456, %455
  %458 = select i1 %457, i32 -1374993475, i32 620440062
  br label %.backedge

459:                                              ; preds = %14
  %460 = load i32, i32* %10, align 4
  %461 = add i32 %460, -1
  %462 = sext i32 %461 to i64
  %463 = load i32, i32* %11, align 4
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %462, i64 %464
  %466 = load i32, i32* %465, align 4
  %467 = load i32, i32* %8, align 4
  %468 = add i32 %467, -1
  %469 = sext i32 %468 to i64
  %470 = load i32, i32* %9, align 4
  %471 = add i32 %470, -1
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %469, i64 %472
  %474 = load i32, i32* %473, align 4
  %475 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %469, i64 %464
  %476 = load i32, i32* %475, align 4
  %477 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %462, i64 %472
  %478 = load i32, i32* %477, align 4
  %.neg131 = add i32 %474, %466
  %479 = add i32 %476, %478
  %480 = sub i32 %.neg131, %479
  %481 = load i32, i32* @x.4, align 4
  %482 = load i32, i32* @y.5, align 4
  %483 = add i32 %481, -1
  %484 = mul i32 %483, %481
  %485 = and i32 %484, 1
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %487, %486
  %489 = select i1 %488, i32 1105374283, i32 620440062
  br label %.backedge

490:                                              ; preds = %14
  br label %.backedge

491:                                              ; preds = %14
  br label %.backedge

492:                                              ; preds = %14
  %493 = load i32, i32* %9, align 4
  %494 = load i32, i32* %11, align 4
  %.not = icmp eq i32 %493, %494
  %495 = select i1 %.not, i32 -135442845, i32 259534974
  br label %.backedge

496:                                              ; preds = %14
  %497 = load i32, i32* %10, align 4
  %498 = sext i32 %497 to i64
  %499 = load i32, i32* %11, align 4
  %500 = add i32 %499, -1
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfs, i64 0, i64 %498, i64 %501
  %503 = load i32, i32* %502, align 4
  %504 = load i32, i32* %8, align 4
  %505 = add i32 %504, -1
  %506 = sext i32 %505 to i64
  %507 = load i32, i32* %9, align 4
  %508 = add i32 %507, -1
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfs, i64 0, i64 %506, i64 %509
  %511 = load i32, i32* %510, align 4
  %512 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfs, i64 0, i64 %506, i64 %501
  %513 = load i32, i32* %512, align 4
  %514 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfs, i64 0, i64 %498, i64 %509
  %515 = load i32, i32* %514, align 4
  %516 = add i32 %511, %503
  %517 = add i32 %513, %515
  %518 = sub i32 %516, %517
  br label %.backedge

519:                                              ; preds = %14
  br label %.backedge

520:                                              ; preds = %14
  %521 = load i32, i32* @x.4, align 4
  %522 = load i32, i32* @y.5, align 4
  %523 = add i32 %521, -1
  %524 = mul i32 %523, %521
  %525 = and i32 %524, 1
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %527, %526
  %529 = select i1 %528, i32 -1608792642, i32 880394638
  br label %.backedge

530:                                              ; preds = %14
  %531 = add i32 %.096, %.094
  %532 = sub i32 %.098, %531
  %533 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %532)
  %534 = load i32, i32* @x.4, align 4
  %535 = load i32, i32* @y.5, align 4
  %536 = add i32 %534, -1
  %537 = mul i32 %536, %534
  %538 = and i32 %537, 1
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %540, %539
  %542 = select i1 %541, i32 1929014041, i32 880394638
  br label %.backedge

543:                                              ; preds = %14
  br label %.backedge

544:                                              ; preds = %14
  %545 = load i32, i32* @x.4, align 4
  %546 = load i32, i32* @y.5, align 4
  %547 = add i32 %545, -1
  %548 = mul i32 %547, %545
  %549 = and i32 %548, 1
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %551, %550
  %553 = select i1 %552, i32 1910737106, i32 -1044481665
  br label %.backedge

554:                                              ; preds = %14
  %555 = add i32 %.092, 1
  %556 = load i32, i32* @x.4, align 4
  %557 = load i32, i32* @y.5, align 4
  %558 = add i32 %556, -1
  %559 = mul i32 %558, %556
  %560 = and i32 %559, 1
  %561 = icmp eq i32 %560, 0
  %562 = icmp slt i32 %557, 10
  %563 = or i1 %562, %561
  %564 = select i1 %563, i32 -16240620, i32 -1044481665
  br label %.backedge

565:                                              ; preds = %14
  br label %.backedge

566:                                              ; preds = %14
  ret i32 0

567:                                              ; preds = %14
  %568 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %13)
  br label %.backedge

569:                                              ; preds = %14
  br label %.backedge

570:                                              ; preds = %14
  br label %.backedge

571:                                              ; preds = %14
  %572 = add i32 %.0114, 1
  br label %.backedge

573:                                              ; preds = %14
  br label %.backedge

574:                                              ; preds = %14
  br label %.backedge

575:                                              ; preds = %14
  br label %.backedge

576:                                              ; preds = %14
  %577 = sext i32 %.0110 to i64
  %578 = sext i32 %.0108 to i64
  %579 = getelementptr inbounds [2005 x [2005 x i8]], [2005 x [2005 x i8]]* @edgb, i64 0, i64 %577, i64 %578
  %.0..0..0.87 = load volatile i1, i1* %1, align 1
  %580 = zext i1 %.0..0..0.87 to i8
  store i8 %580, i8* %579, align 1
  br label %.backedge

581:                                              ; preds = %14
  br label %.backedge

582:                                              ; preds = %14
  br label %.backedge

583:                                              ; preds = %14
  br label %.backedge

584:                                              ; preds = %14
  %585 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11)
  %586 = load i32, i32* %10, align 4
  %587 = sext i32 %586 to i64
  %588 = load i32, i32* %11, align 4
  %589 = sext i32 %588 to i64
  %590 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %587, i64 %589
  %591 = load i32, i32* %590, align 4
  %592 = load i32, i32* %8, align 4
  %593 = add i32 %592, -1
  %594 = sext i32 %593 to i64
  %595 = load i32, i32* %9, align 4
  %596 = add i32 %595, -1
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %594, i64 %597
  %599 = load i32, i32* %598, align 4
  %600 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %594, i64 %589
  %601 = load i32, i32* %600, align 4
  %602 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prf, i64 0, i64 %587, i64 %597
  %603 = load i32, i32* %602, align 4
  %.neg124 = add i32 %599, %591
  %604 = add i32 %601, %603
  %605 = sub i32 %.neg124, %604
  br label %.backedge

606:                                              ; preds = %14
  %607 = load i32, i32* %10, align 4
  %608 = add i32 %607, -1
  %609 = sext i32 %608 to i64
  %610 = load i32, i32* %11, align 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %609, i64 %611
  %613 = load i32, i32* %612, align 4
  %614 = load i32, i32* %8, align 4
  %615 = add i32 %614, -1
  %616 = sext i32 %615 to i64
  %617 = load i32, i32* %9, align 4
  %618 = add i32 %617, -1
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %616, i64 %619
  %621 = load i32, i32* %620, align 4
  %622 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %616, i64 %611
  %623 = load i32, i32* %622, align 4
  %624 = getelementptr inbounds [2005 x [2005 x i32]], [2005 x [2005 x i32]]* @prfb, i64 0, i64 %609, i64 %619
  %625 = load i32, i32* %624, align 4
  %.neg121 = add i32 %621, %613
  %626 = add i32 %623, %625
  %627 = sub i32 %.neg121, %626
  br label %.backedge

628:                                              ; preds = %14
  %629 = add i32 %.096, %.094
  %630 = sub i32 %.098, %629
  %631 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %630)
  br label %.backedge

632:                                              ; preds = %14
  %633 = add i32 %.092, 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s408660139.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
