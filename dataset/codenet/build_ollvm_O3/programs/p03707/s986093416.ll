; ModuleID = 'build_ollvm/programs/p03707/s986093416.ll'
source_filename = "Project_CodeNet_C++1400/p03707/s986093416.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@board = local_unnamed_addr global [2020 x [2020 x i32]] zeroinitializer, align 16
@bCUM = local_unnamed_addr global [2020 x [2020 x i32]] zeroinitializer, align 16
@rCUM = local_unnamed_addr global [2020 x [2020 x i32]] zeroinitializer, align 16
@cCUM = local_unnamed_addr global [2020 x [2020 x i32]] zeroinitializer, align 16
@.str = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"%d %d %d %d\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s986093416.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [2020 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32* nonnull %5, i32* nonnull %6, i32* nonnull %7)
  %14 = getelementptr inbounds [2020 x i8], [2020 x i8]* %8, i64 0, i64 0
  br label %15

15:                                               ; preds = %.backedge, %0
  %.0114 = phi i32 [ undef, %0 ], [ %.0114.be, %.backedge ]
  %.0112 = phi i32 [ undef, %0 ], [ %.0112.be, %.backedge ]
  %.0110 = phi i32 [ undef, %0 ], [ %.0110.be, %.backedge ]
  %.0108 = phi i32 [ undef, %0 ], [ %.0108.be, %.backedge ]
  %.0106 = phi i32 [ undef, %0 ], [ %.0106.be, %.backedge ]
  %.0104 = phi i32 [ undef, %0 ], [ %.0104.be, %.backedge ]
  %.0102 = phi i32 [ undef, %0 ], [ %.0102.be, %.backedge ]
  %.0100 = phi i32 [ undef, %0 ], [ %.0100.be, %.backedge ]
  %.098 = phi i32 [ 0, %0 ], [ %.098.be, %.backedge ]
  %.0 = phi i32 [ 961841188, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 961841188, label %16
    i32 -979651409, label %20
    i32 1922183139, label %22
    i32 -1376139217, label %26
    i32 1545066062, label %34
    i32 1767870487, label %44
    i32 -953337141, label %55
    i32 -887796672, label %56
    i32 1669615619, label %66
    i32 -1103996768, label %76
    i32 -534368024, label %77
    i32 -2022362380, label %79
    i32 1058760096, label %80
    i32 -1121579485, label %85
    i32 1723890926, label %95
    i32 570689394, label %105
    i32 1827185136, label %106
    i32 614697694, label %111
    i32 409473628, label %130
    i32 -764182626, label %132
    i32 -2074191306, label %133
    i32 1695198622, label %135
    i32 1188378844, label %136
    i32 -540639326, label %141
    i32 2096192295, label %142
    i32 -115156304, label %152
    i32 1855392414, label %164
    i32 -1362461730, label %166
    i32 1083997587, label %176
    i32 -444223456, label %202
    i32 -1602608067, label %204
    i32 -1906473766, label %212
    i32 283880843, label %220
    i32 1290709067, label %230
    i32 1359347148, label %245
    i32 1155535742, label %246
    i32 -1575424188, label %247
    i32 -1398172938, label %249
    i32 -1729748459, label %250
    i32 -355314501, label %260
    i32 -2034888590, label %270
    i32 -1692241780, label %271
    i32 704689114, label %272
    i32 1972020565, label %276
    i32 27924006, label %277
    i32 -2127077706, label %282
    i32 1055904575, label %292
    i32 875962811, label %318
    i32 863868862, label %320
    i32 1881978974, label %330
    i32 -1431230151, label %347
    i32 -1729458138, label %349
    i32 -1890791632, label %357
    i32 -867290586, label %367
    i32 1347072005, label %381
    i32 -825429517, label %382
    i32 1503007024, label %392
    i32 -12666192, label %402
    i32 -71245461, label %403
    i32 1629343635, label %405
    i32 1260510488, label %406
    i32 -2054911949, label %408
    i32 -944328038, label %409
    i32 1933674169, label %413
    i32 -49548507, label %462
    i32 557305494, label %472
    i32 -665298117, label %483
    i32 -1558562749, label %484
    i32 -1081787054, label %485
    i32 -1134214341, label %487
    i32 276553103, label %488
    i32 -6586236, label %489
    i32 159375589, label %490
    i32 43989970, label %506
    i32 -352330196, label %511
    i32 -193945462, label %513
    i32 -740620383, label %529
    i32 -1593863143, label %530
    i32 2108668668, label %536
    i32 1002414575, label %537
  ]

.backedge:                                        ; preds = %15, %537, %536, %530, %529, %513, %511, %506, %490, %489, %488, %487, %485, %483, %472, %462, %413, %409, %408, %406, %405, %403, %402, %392, %382, %381, %367, %357, %349, %347, %330, %320, %318, %292, %282, %277, %276, %272, %271, %270, %260, %250, %249, %247, %246, %245, %230, %220, %212, %204, %202, %176, %166, %164, %152, %142, %141, %136, %135, %133, %132, %130, %111, %106, %105, %95, %85, %80, %79, %77, %76, %66, %56, %55, %44, %34, %26, %22, %20, %16
  %.0114.be = phi i32 [ %.0114, %15 ], [ %.0114, %537 ], [ %.0114, %536 ], [ %.0114, %530 ], [ %.0114, %529 ], [ %.0114, %513 ], [ %.0114, %511 ], [ %.0114, %506 ], [ %.0114, %490 ], [ %.0114, %489 ], [ 1, %488 ], [ %.0114, %487 ], [ %.0114, %485 ], [ %.0114, %483 ], [ %.0114, %472 ], [ %.0114, %462 ], [ %.0114, %413 ], [ %.0114, %409 ], [ %.0114, %408 ], [ %.0114, %406 ], [ %.0114, %405 ], [ %.0114, %403 ], [ %.0114, %402 ], [ %.0114, %392 ], [ %.0114, %382 ], [ %.0114, %381 ], [ %.0114, %367 ], [ %.0114, %357 ], [ %.0114, %349 ], [ %.0114, %347 ], [ %.0114, %330 ], [ %.0114, %320 ], [ %.0114, %318 ], [ %.0114, %292 ], [ %.0114, %282 ], [ %.0114, %277 ], [ %.0114, %276 ], [ %.0114, %272 ], [ %.0114, %271 ], [ %.0114, %270 ], [ %.0114, %260 ], [ %.0114, %250 ], [ %.0114, %249 ], [ %.0114, %247 ], [ %.0114, %246 ], [ %.0114, %245 ], [ %.0114, %230 ], [ %.0114, %220 ], [ %.0114, %212 ], [ %.0114, %204 ], [ %.0114, %202 ], [ %.0114, %176 ], [ %.0114, %166 ], [ %.0114, %164 ], [ %.0114, %152 ], [ %.0114, %142 ], [ %.0114, %141 ], [ %.0114, %136 ], [ %.0114, %135 ], [ %.0114, %133 ], [ %.0114, %132 ], [ %131, %130 ], [ %.0114, %111 ], [ %.0114, %106 ], [ %.0114, %105 ], [ 1, %95 ], [ %.0114, %85 ], [ %.0114, %80 ], [ %.0114, %79 ], [ %.0114, %77 ], [ %.0114, %76 ], [ %.0114, %66 ], [ %.0114, %56 ], [ %.0114, %55 ], [ %.0114, %44 ], [ %.0114, %34 ], [ %.0114, %26 ], [ %.0114, %22 ], [ %.0114, %20 ], [ %.0114, %16 ]
  %.0112.be = phi i32 [ %.0112, %15 ], [ %.0112, %537 ], [ %.0112, %536 ], [ %.0112, %530 ], [ %.0112, %529 ], [ %.0112, %513 ], [ %512, %511 ], [ %.0112, %506 ], [ %.0112, %490 ], [ %.0112, %489 ], [ %.0112, %488 ], [ %.0112, %487 ], [ %.0112, %485 ], [ %.0112, %483 ], [ %.0112, %472 ], [ %.0112, %462 ], [ %.0112, %413 ], [ %.0112, %409 ], [ %.0112, %408 ], [ %.0112, %406 ], [ %.0112, %405 ], [ %.0112, %403 ], [ %.0112, %402 ], [ %.0112, %392 ], [ %.0112, %382 ], [ %.0112, %381 ], [ %.0112, %367 ], [ %.0112, %357 ], [ %.0112, %349 ], [ %.0112, %347 ], [ %.0112, %330 ], [ %.0112, %320 ], [ %.0112, %318 ], [ %.0112, %292 ], [ %.0112, %282 ], [ %.0112, %277 ], [ %.0112, %276 ], [ %.0112, %272 ], [ %.0112, %271 ], [ %.0112, %270 ], [ %.neg122, %260 ], [ %.0112, %250 ], [ %.0112, %249 ], [ %.0112, %247 ], [ %.0112, %246 ], [ %.0112, %245 ], [ %.0112, %230 ], [ %.0112, %220 ], [ %.0112, %212 ], [ %.0112, %204 ], [ %.0112, %202 ], [ %.0112, %176 ], [ %.0112, %166 ], [ %.0112, %164 ], [ %.0112, %152 ], [ %.0112, %142 ], [ %.0112, %141 ], [ %.0112, %136 ], [ 1, %135 ], [ %.0112, %133 ], [ %.0112, %132 ], [ %.0112, %130 ], [ %.0112, %111 ], [ %.0112, %106 ], [ %.0112, %105 ], [ %.0112, %95 ], [ %.0112, %85 ], [ %.0112, %80 ], [ %.0112, %79 ], [ %.0112, %77 ], [ %.0112, %76 ], [ %.0112, %66 ], [ %.0112, %56 ], [ %.0112, %55 ], [ %.0112, %44 ], [ %.0112, %34 ], [ %.0112, %26 ], [ %.0112, %22 ], [ %.0112, %20 ], [ %.0112, %16 ]
  %.0110.be = phi i32 [ %.0110, %15 ], [ %.0110, %537 ], [ %.0110, %536 ], [ %.0110, %530 ], [ %.0110, %529 ], [ %.0110, %513 ], [ %.0110, %511 ], [ %.0110, %506 ], [ %.0110, %490 ], [ %.0110, %489 ], [ %.0110, %488 ], [ %.0110, %487 ], [ %.0110, %485 ], [ %.0110, %483 ], [ %.0110, %472 ], [ %.0110, %462 ], [ %.0110, %413 ], [ %.0110, %409 ], [ %.0110, %408 ], [ %.0110, %406 ], [ %.0110, %405 ], [ %.0110, %403 ], [ %.0110, %402 ], [ %.0110, %392 ], [ %.0110, %382 ], [ %.0110, %381 ], [ %.0110, %367 ], [ %.0110, %357 ], [ %.0110, %349 ], [ %.0110, %347 ], [ %.0110, %330 ], [ %.0110, %320 ], [ %.0110, %318 ], [ %.0110, %292 ], [ %.0110, %282 ], [ %.0110, %277 ], [ %.0110, %276 ], [ %.0110, %272 ], [ %.0110, %271 ], [ %.0110, %270 ], [ %.0110, %260 ], [ %.0110, %250 ], [ %.0110, %249 ], [ %248, %247 ], [ %.0110, %246 ], [ %.0110, %245 ], [ %.0110, %230 ], [ %.0110, %220 ], [ %.0110, %212 ], [ %.0110, %204 ], [ %.0110, %202 ], [ %.0110, %176 ], [ %.0110, %166 ], [ %.0110, %164 ], [ %.0110, %152 ], [ %.0110, %142 ], [ 1, %141 ], [ %.0110, %136 ], [ %.0110, %135 ], [ %.0110, %133 ], [ %.0110, %132 ], [ %.0110, %130 ], [ %.0110, %111 ], [ %.0110, %106 ], [ %.0110, %105 ], [ %.0110, %95 ], [ %.0110, %85 ], [ %.0110, %80 ], [ %.0110, %79 ], [ %.0110, %77 ], [ %.0110, %76 ], [ %.0110, %66 ], [ %.0110, %56 ], [ %.0110, %55 ], [ %.0110, %44 ], [ %.0110, %34 ], [ %.0110, %26 ], [ %.0110, %22 ], [ %.0110, %20 ], [ %.0110, %16 ]
  %.0108.be = phi i32 [ %.0108, %15 ], [ %.0108, %537 ], [ %.0108, %536 ], [ %.0108, %530 ], [ %.0108, %529 ], [ %.0108, %513 ], [ %.0108, %511 ], [ %.0108, %506 ], [ %.0108, %490 ], [ %.0108, %489 ], [ %.0108, %488 ], [ %.0108, %487 ], [ %.0108, %485 ], [ %.0108, %483 ], [ %.0108, %472 ], [ %.0108, %462 ], [ %.0108, %413 ], [ %.0108, %409 ], [ %.0108, %408 ], [ %407, %406 ], [ %.0108, %405 ], [ %.0108, %403 ], [ %.0108, %402 ], [ %.0108, %392 ], [ %.0108, %382 ], [ %.0108, %381 ], [ %.0108, %367 ], [ %.0108, %357 ], [ %.0108, %349 ], [ %.0108, %347 ], [ %.0108, %330 ], [ %.0108, %320 ], [ %.0108, %318 ], [ %.0108, %292 ], [ %.0108, %282 ], [ %.0108, %277 ], [ %.0108, %276 ], [ %.0108, %272 ], [ 1, %271 ], [ %.0108, %270 ], [ %.0108, %260 ], [ %.0108, %250 ], [ %.0108, %249 ], [ %.0108, %247 ], [ %.0108, %246 ], [ %.0108, %245 ], [ %.0108, %230 ], [ %.0108, %220 ], [ %.0108, %212 ], [ %.0108, %204 ], [ %.0108, %202 ], [ %.0108, %176 ], [ %.0108, %166 ], [ %.0108, %164 ], [ %.0108, %152 ], [ %.0108, %142 ], [ %.0108, %141 ], [ %.0108, %136 ], [ %.0108, %135 ], [ %.0108, %133 ], [ %.0108, %132 ], [ %.0108, %130 ], [ %.0108, %111 ], [ %.0108, %106 ], [ %.0108, %105 ], [ %.0108, %95 ], [ %.0108, %85 ], [ %.0108, %80 ], [ %.0108, %79 ], [ %.0108, %77 ], [ %.0108, %76 ], [ %.0108, %66 ], [ %.0108, %56 ], [ %.0108, %55 ], [ %.0108, %44 ], [ %.0108, %34 ], [ %.0108, %26 ], [ %.0108, %22 ], [ %.0108, %20 ], [ %.0108, %16 ]
  %.0106.be = phi i32 [ %.0106, %15 ], [ %.0106, %537 ], [ %.0106, %536 ], [ %.0106, %530 ], [ %.0106, %529 ], [ %.0106, %513 ], [ %.0106, %511 ], [ %.0106, %506 ], [ %.0106, %490 ], [ %.0106, %489 ], [ %.0106, %488 ], [ %.0106, %487 ], [ %.0106, %485 ], [ %.0106, %483 ], [ %.0106, %472 ], [ %.0106, %462 ], [ %.0106, %413 ], [ %.0106, %409 ], [ %.0106, %408 ], [ %.0106, %406 ], [ %.0106, %405 ], [ %404, %403 ], [ %.0106, %402 ], [ %.0106, %392 ], [ %.0106, %382 ], [ %.0106, %381 ], [ %.0106, %367 ], [ %.0106, %357 ], [ %.0106, %349 ], [ %.0106, %347 ], [ %.0106, %330 ], [ %.0106, %320 ], [ %.0106, %318 ], [ %.0106, %292 ], [ %.0106, %282 ], [ %.0106, %277 ], [ 1, %276 ], [ %.0106, %272 ], [ %.0106, %271 ], [ %.0106, %270 ], [ %.0106, %260 ], [ %.0106, %250 ], [ %.0106, %249 ], [ %.0106, %247 ], [ %.0106, %246 ], [ %.0106, %245 ], [ %.0106, %230 ], [ %.0106, %220 ], [ %.0106, %212 ], [ %.0106, %204 ], [ %.0106, %202 ], [ %.0106, %176 ], [ %.0106, %166 ], [ %.0106, %164 ], [ %.0106, %152 ], [ %.0106, %142 ], [ %.0106, %141 ], [ %.0106, %136 ], [ %.0106, %135 ], [ %.0106, %133 ], [ %.0106, %132 ], [ %.0106, %130 ], [ %.0106, %111 ], [ %.0106, %106 ], [ %.0106, %105 ], [ %.0106, %95 ], [ %.0106, %85 ], [ %.0106, %80 ], [ %.0106, %79 ], [ %.0106, %77 ], [ %.0106, %76 ], [ %.0106, %66 ], [ %.0106, %56 ], [ %.0106, %55 ], [ %.0106, %44 ], [ %.0106, %34 ], [ %.0106, %26 ], [ %.0106, %22 ], [ %.0106, %20 ], [ %.0106, %16 ]
  %.0104.be = phi i32 [ %.0104, %15 ], [ %538, %537 ], [ %.0104, %536 ], [ %.0104, %530 ], [ %.0104, %529 ], [ %.0104, %513 ], [ %.0104, %511 ], [ %.0104, %506 ], [ %.0104, %490 ], [ %.0104, %489 ], [ %.0104, %488 ], [ %.0104, %487 ], [ %.0104, %485 ], [ %.0104, %483 ], [ %473, %472 ], [ %.0104, %462 ], [ %.0104, %413 ], [ %.0104, %409 ], [ 0, %408 ], [ %.0104, %406 ], [ %.0104, %405 ], [ %.0104, %403 ], [ %.0104, %402 ], [ %.0104, %392 ], [ %.0104, %382 ], [ %.0104, %381 ], [ %.0104, %367 ], [ %.0104, %357 ], [ %.0104, %349 ], [ %.0104, %347 ], [ %.0104, %330 ], [ %.0104, %320 ], [ %.0104, %318 ], [ %.0104, %292 ], [ %.0104, %282 ], [ %.0104, %277 ], [ %.0104, %276 ], [ %.0104, %272 ], [ %.0104, %271 ], [ %.0104, %270 ], [ %.0104, %260 ], [ %.0104, %250 ], [ %.0104, %249 ], [ %.0104, %247 ], [ %.0104, %246 ], [ %.0104, %245 ], [ %.0104, %230 ], [ %.0104, %220 ], [ %.0104, %212 ], [ %.0104, %204 ], [ %.0104, %202 ], [ %.0104, %176 ], [ %.0104, %166 ], [ %.0104, %164 ], [ %.0104, %152 ], [ %.0104, %142 ], [ %.0104, %141 ], [ %.0104, %136 ], [ %.0104, %135 ], [ %.0104, %133 ], [ %.0104, %132 ], [ %.0104, %130 ], [ %.0104, %111 ], [ %.0104, %106 ], [ %.0104, %105 ], [ %.0104, %95 ], [ %.0104, %85 ], [ %.0104, %80 ], [ %.0104, %79 ], [ %.0104, %77 ], [ %.0104, %76 ], [ %.0104, %66 ], [ %.0104, %56 ], [ %.0104, %55 ], [ %.0104, %44 ], [ %.0104, %34 ], [ %.0104, %26 ], [ %.0104, %22 ], [ %.0104, %20 ], [ %.0104, %16 ]
  %.0102.be = phi i32 [ %.0102, %15 ], [ %.0102, %537 ], [ %.0102, %536 ], [ %.0102, %530 ], [ %.0102, %529 ], [ %.0102, %513 ], [ %.0102, %511 ], [ %.0102, %506 ], [ %.0102, %490 ], [ %.0102, %489 ], [ %.0102, %488 ], [ %.0102, %487 ], [ %.0102, %485 ], [ %.0102, %483 ], [ %.0102, %472 ], [ %.0102, %462 ], [ %.0102, %413 ], [ %.0102, %409 ], [ %.0102, %408 ], [ %.0102, %406 ], [ %.0102, %405 ], [ %.0102, %403 ], [ %.0102, %402 ], [ %.0102, %392 ], [ %.0102, %382 ], [ %.0102, %381 ], [ %.0102, %367 ], [ %.0102, %357 ], [ %.0102, %349 ], [ %.0102, %347 ], [ %.0102, %330 ], [ %.0102, %320 ], [ %.0102, %318 ], [ %.0102, %292 ], [ %.0102, %282 ], [ %.0102, %277 ], [ %.0102, %276 ], [ %.0102, %272 ], [ %.0102, %271 ], [ %.0102, %270 ], [ %.0102, %260 ], [ %.0102, %250 ], [ %.0102, %249 ], [ %.0102, %247 ], [ %.0102, %246 ], [ %.0102, %245 ], [ %.0102, %230 ], [ %.0102, %220 ], [ %.0102, %212 ], [ %.0102, %204 ], [ %.0102, %202 ], [ %.0102, %176 ], [ %.0102, %166 ], [ %.0102, %164 ], [ %.0102, %152 ], [ %.0102, %142 ], [ %.0102, %141 ], [ %.0102, %136 ], [ %.0102, %135 ], [ %134, %133 ], [ %.0102, %132 ], [ %.0102, %130 ], [ %.0102, %111 ], [ %.0102, %106 ], [ %.0102, %105 ], [ %.0102, %95 ], [ %.0102, %85 ], [ %.0102, %80 ], [ 1, %79 ], [ %.0102, %77 ], [ %.0102, %76 ], [ %.0102, %66 ], [ %.0102, %56 ], [ %.0102, %55 ], [ %.0102, %44 ], [ %.0102, %34 ], [ %.0102, %26 ], [ %.0102, %22 ], [ %.0102, %20 ], [ %.0102, %16 ]
  %.0100.be = phi i32 [ %.0100, %15 ], [ %.0100, %537 ], [ %.0100, %536 ], [ %.0100, %530 ], [ %.0100, %529 ], [ %.0100, %513 ], [ %.0100, %511 ], [ %.0100, %506 ], [ %.0100, %490 ], [ %.0100, %489 ], [ %.0100, %488 ], [ %.0100, %487 ], [ %486, %485 ], [ %.0100, %483 ], [ %.0100, %472 ], [ %.0100, %462 ], [ %.0100, %413 ], [ %.0100, %409 ], [ %.0100, %408 ], [ %.0100, %406 ], [ %.0100, %405 ], [ %.0100, %403 ], [ %.0100, %402 ], [ %.0100, %392 ], [ %.0100, %382 ], [ %.0100, %381 ], [ %.0100, %367 ], [ %.0100, %357 ], [ %.0100, %349 ], [ %.0100, %347 ], [ %.0100, %330 ], [ %.0100, %320 ], [ %.0100, %318 ], [ %.0100, %292 ], [ %.0100, %282 ], [ %.0100, %277 ], [ %.0100, %276 ], [ %.0100, %272 ], [ %.0100, %271 ], [ %.0100, %270 ], [ %.0100, %260 ], [ %.0100, %250 ], [ %.0100, %249 ], [ %.0100, %247 ], [ %.0100, %246 ], [ %.0100, %245 ], [ %.0100, %230 ], [ %.0100, %220 ], [ %.0100, %212 ], [ %.0100, %204 ], [ %.0100, %202 ], [ %.0100, %176 ], [ %.0100, %166 ], [ %.0100, %164 ], [ %.0100, %152 ], [ %.0100, %142 ], [ %.0100, %141 ], [ %.0100, %136 ], [ %.0100, %135 ], [ %.0100, %133 ], [ %.0100, %132 ], [ %.0100, %130 ], [ %.0100, %111 ], [ %.0100, %106 ], [ %.0100, %105 ], [ %.0100, %95 ], [ %.0100, %85 ], [ %.0100, %80 ], [ %.0100, %79 ], [ %.0100, %77 ], [ %.0100, %76 ], [ %.0100, %66 ], [ %.0100, %56 ], [ %.0100, %55 ], [ %45, %44 ], [ %.0100, %34 ], [ %.0100, %26 ], [ %.0100, %22 ], [ 0, %20 ], [ %.0100, %16 ]
  %.098.be = phi i32 [ %.098, %15 ], [ %.098, %537 ], [ %.098, %536 ], [ %.098, %530 ], [ %.098, %529 ], [ %.098, %513 ], [ %.098, %511 ], [ %.098, %506 ], [ %.098, %490 ], [ %.098, %489 ], [ %.098, %488 ], [ %.098, %487 ], [ %.098, %485 ], [ %.098, %483 ], [ %.098, %472 ], [ %.098, %462 ], [ %.098, %413 ], [ %.098, %409 ], [ %.098, %408 ], [ %.098, %406 ], [ %.098, %405 ], [ %.098, %403 ], [ %.098, %402 ], [ %.098, %392 ], [ %.098, %382 ], [ %.098, %381 ], [ %.098, %367 ], [ %.098, %357 ], [ %.098, %349 ], [ %.098, %347 ], [ %.098, %330 ], [ %.098, %320 ], [ %.098, %318 ], [ %.098, %292 ], [ %.098, %282 ], [ %.098, %277 ], [ %.098, %276 ], [ %.098, %272 ], [ %.098, %271 ], [ %.098, %270 ], [ %.098, %260 ], [ %.098, %250 ], [ %.098, %249 ], [ %.098, %247 ], [ %.098, %246 ], [ %.098, %245 ], [ %.098, %230 ], [ %.098, %220 ], [ %.098, %212 ], [ %.098, %204 ], [ %.098, %202 ], [ %.098, %176 ], [ %.098, %166 ], [ %.098, %164 ], [ %.098, %152 ], [ %.098, %142 ], [ %.098, %141 ], [ %.098, %136 ], [ %.098, %135 ], [ %.098, %133 ], [ %.098, %132 ], [ %.098, %130 ], [ %.098, %111 ], [ %.098, %106 ], [ %.098, %105 ], [ %.098, %95 ], [ %.098, %85 ], [ %.098, %80 ], [ %.098, %79 ], [ %78, %77 ], [ %.098, %76 ], [ %.098, %66 ], [ %.098, %56 ], [ %.098, %55 ], [ %.098, %44 ], [ %.098, %34 ], [ %.098, %26 ], [ %.098, %22 ], [ %.098, %20 ], [ %.098, %16 ]
  %.0.be = phi i32 [ %.0, %15 ], [ 557305494, %537 ], [ 1503007024, %536 ], [ -867290586, %530 ], [ 1881978974, %529 ], [ 1055904575, %513 ], [ -355314501, %511 ], [ 1290709067, %506 ], [ 1083997587, %490 ], [ -115156304, %489 ], [ 1723890926, %488 ], [ 1669615619, %487 ], [ 1767870487, %485 ], [ -944328038, %483 ], [ %482, %472 ], [ %471, %462 ], [ -49548507, %413 ], [ %412, %409 ], [ -944328038, %408 ], [ 704689114, %406 ], [ 1260510488, %405 ], [ 27924006, %403 ], [ -71245461, %402 ], [ %401, %392 ], [ %391, %382 ], [ -825429517, %381 ], [ %380, %367 ], [ %366, %357 ], [ %356, %349 ], [ %348, %347 ], [ %346, %330 ], [ %329, %320 ], [ %319, %318 ], [ %317, %292 ], [ %291, %282 ], [ %281, %277 ], [ 27924006, %276 ], [ %275, %272 ], [ 704689114, %271 ], [ 1188378844, %270 ], [ %269, %260 ], [ %259, %250 ], [ -1729748459, %249 ], [ 2096192295, %247 ], [ -1575424188, %246 ], [ 1155535742, %245 ], [ %244, %230 ], [ %229, %220 ], [ %219, %212 ], [ %211, %204 ], [ %203, %202 ], [ %201, %176 ], [ %175, %166 ], [ %165, %164 ], [ %163, %152 ], [ %151, %142 ], [ 2096192295, %141 ], [ %140, %136 ], [ 1188378844, %135 ], [ 1058760096, %133 ], [ -2074191306, %132 ], [ 1827185136, %130 ], [ 409473628, %111 ], [ %110, %106 ], [ 1827185136, %105 ], [ %104, %95 ], [ %94, %85 ], [ %84, %80 ], [ 1058760096, %79 ], [ 961841188, %77 ], [ -534368024, %76 ], [ %75, %66 ], [ %65, %56 ], [ 1922183139, %55 ], [ %54, %44 ], [ %43, %34 ], [ 1545066062, %26 ], [ %25, %22 ], [ 1922183139, %20 ], [ %19, %16 ]
  br label %15

16:                                               ; preds = %15
  %17 = load i32, i32* %5, align 4
  %18 = icmp slt i32 %.098, %17
  %19 = select i1 %18, i32 -979651409, i32 -2022362380
  br label %.backedge

20:                                               ; preds = %15
  %21 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %14)
  br label %.backedge

22:                                               ; preds = %15
  %23 = load i32, i32* %6, align 4
  %24 = icmp slt i32 %.0100, %23
  %25 = select i1 %24, i32 -1376139217, i32 -887796672
  br label %.backedge

26:                                               ; preds = %15
  %27 = sext i32 %.0100 to i64
  %28 = getelementptr inbounds [2020 x i8], [2020 x i8]* %8, i64 0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = add nsw i32 %30, -48
  %32 = sext i32 %.098 to i64
  %33 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @board, i64 0, i64 %32, i64 %27
  store i32 %31, i32* %33, align 4
  br label %.backedge

34:                                               ; preds = %15
  %35 = load i32, i32* @x.4, align 4
  %36 = load i32, i32* @y.5, align 4
  %37 = add i32 %35, -1
  %38 = mul i32 %37, %35
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %41, %40
  %43 = select i1 %42, i32 1767870487, i32 -1081787054
  br label %.backedge

44:                                               ; preds = %15
  %45 = add i32 %.0100, 1
  %46 = load i32, i32* @x.4, align 4
  %47 = load i32, i32* @y.5, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -953337141, i32 -1081787054
  br label %.backedge

55:                                               ; preds = %15
  br label %.backedge

56:                                               ; preds = %15
  %57 = load i32, i32* @x.4, align 4
  %58 = load i32, i32* @y.5, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 1669615619, i32 -1134214341
  br label %.backedge

66:                                               ; preds = %15
  %67 = load i32, i32* @x.4, align 4
  %68 = load i32, i32* @y.5, align 4
  %69 = add i32 %67, -1
  %70 = mul i32 %69, %67
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %73, %72
  %75 = select i1 %74, i32 -1103996768, i32 -1134214341
  br label %.backedge

76:                                               ; preds = %15
  br label %.backedge

77:                                               ; preds = %15
  %78 = add i32 %.098, 1
  br label %.backedge

79:                                               ; preds = %15
  br label %.backedge

80:                                               ; preds = %15
  %81 = load i32, i32* %5, align 4
  %82 = add i32 %81, 1
  %83 = icmp slt i32 %.0102, %82
  %84 = select i1 %83, i32 -1121579485, i32 1695198622
  br label %.backedge

85:                                               ; preds = %15
  %86 = load i32, i32* @x.4, align 4
  %87 = load i32, i32* @y.5, align 4
  %88 = add i32 %86, -1
  %89 = mul i32 %88, %86
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %92, %91
  %94 = select i1 %93, i32 1723890926, i32 276553103
  br label %.backedge

95:                                               ; preds = %15
  %96 = load i32, i32* @x.4, align 4
  %97 = load i32, i32* @y.5, align 4
  %98 = add i32 %96, -1
  %99 = mul i32 %98, %96
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %102, %101
  %104 = select i1 %103, i32 570689394, i32 276553103
  br label %.backedge

105:                                              ; preds = %15
  br label %.backedge

106:                                              ; preds = %15
  %107 = load i32, i32* %6, align 4
  %108 = add i32 %107, 1
  %109 = icmp slt i32 %.0114, %108
  %110 = select i1 %109, i32 614697694, i32 -764182626
  br label %.backedge

111:                                              ; preds = %15
  %112 = add i32 %.0102, -1
  %113 = sext i32 %112 to i64
  %114 = add i32 %.0114, -1
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @board, i64 0, i64 %113, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = sext i32 %.0114 to i64
  %119 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @bCUM, i64 0, i64 %113, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, %117
  %122 = sext i32 %.0102 to i64
  %123 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @bCUM, i64 0, i64 %122, i64 %115
  %124 = load i32, i32* %123, align 4
  %125 = add i32 %121, %124
  %126 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @bCUM, i64 0, i64 %113, i64 %115
  %127 = load i32, i32* %126, align 4
  %128 = sub i32 %125, %127
  %129 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @bCUM, i64 0, i64 %122, i64 %118
  store i32 %128, i32* %129, align 4
  br label %.backedge

130:                                              ; preds = %15
  %131 = add i32 %.0114, 1
  br label %.backedge

132:                                              ; preds = %15
  br label %.backedge

133:                                              ; preds = %15
  %134 = add i32 %.0102, 1
  br label %.backedge

135:                                              ; preds = %15
  br label %.backedge

136:                                              ; preds = %15
  %137 = load i32, i32* %5, align 4
  %138 = add i32 %137, 1
  %139 = icmp slt i32 %.0112, %138
  %140 = select i1 %139, i32 -540639326, i32 -1692241780
  br label %.backedge

141:                                              ; preds = %15
  br label %.backedge

142:                                              ; preds = %15
  %143 = load i32, i32* @x.4, align 4
  %144 = load i32, i32* @y.5, align 4
  %145 = add i32 %143, -1
  %146 = mul i32 %145, %143
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %149, %148
  %151 = select i1 %150, i32 -115156304, i32 -6586236
  br label %.backedge

152:                                              ; preds = %15
  %153 = load i32, i32* %6, align 4
  %.neg125 = add i32 %153, 1
  %154 = icmp slt i32 %.0110, %.neg125
  store i1 %154, i1* %4, align 1
  %155 = load i32, i32* @x.4, align 4
  %156 = load i32, i32* @y.5, align 4
  %157 = add i32 %155, -1
  %158 = mul i32 %157, %155
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %161, %160
  %163 = select i1 %162, i32 1855392414, i32 -6586236
  br label %.backedge

164:                                              ; preds = %15
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %165 = select i1 %.0..0..0., i32 -1362461730, i32 -1398172938
  br label %.backedge

166:                                              ; preds = %15
  %167 = load i32, i32* @x.4, align 4
  %168 = load i32, i32* @y.5, align 4
  %169 = add i32 %167, -1
  %170 = mul i32 %169, %167
  %171 = and i32 %170, 1
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %173, %172
  %175 = select i1 %174, i32 1083997587, i32 159375589
  br label %.backedge

176:                                              ; preds = %15
  %177 = add i32 %.0112, -1
  %178 = sext i32 %177 to i64
  %179 = sext i32 %.0110 to i64
  %180 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %178, i64 %179
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %.0112 to i64
  %183 = add i32 %.0110, -1
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %182, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = add i32 %186, %181
  %188 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %178, i64 %184
  %189 = load i32, i32* %188, align 4
  %190 = sub i32 %187, %189
  %191 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %182, i64 %179
  store i32 %190, i32* %191, align 4
  %192 = icmp sgt i32 %.0112, 1
  store i1 %192, i1* %3, align 1
  %193 = load i32, i32* @x.4, align 4
  %194 = load i32, i32* @y.5, align 4
  %195 = add i32 %193, -1
  %196 = mul i32 %195, %193
  %197 = and i32 %196, 1
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %199, %198
  %201 = select i1 %200, i32 -444223456, i32 159375589
  br label %.backedge

202:                                              ; preds = %15
  %.0..0..0.95 = load volatile i1, i1* %3, align 1
  %203 = select i1 %.0..0..0.95, i32 -1602608067, i32 1155535742
  br label %.backedge

204:                                              ; preds = %15
  %205 = add i32 %.0112, -2
  %206 = sext i32 %205 to i64
  %207 = add i32 %.0110, -1
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @board, i64 0, i64 %206, i64 %208
  %210 = load i32, i32* %209, align 4
  %.not124 = icmp eq i32 %210, 0
  %211 = select i1 %.not124, i32 1155535742, i32 -1906473766
  br label %.backedge

212:                                              ; preds = %15
  %213 = add i32 %.0112, -1
  %214 = sext i32 %213 to i64
  %215 = add i32 %.0110, -1
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @board, i64 0, i64 %214, i64 %216
  %218 = load i32, i32* %217, align 4
  %.not123 = icmp eq i32 %218, 0
  %219 = select i1 %.not123, i32 1155535742, i32 283880843
  br label %.backedge

220:                                              ; preds = %15
  %221 = load i32, i32* @x.4, align 4
  %222 = load i32, i32* @y.5, align 4
  %223 = add i32 %221, -1
  %224 = mul i32 %223, %221
  %225 = and i32 %224, 1
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %227, %226
  %229 = select i1 %228, i32 1290709067, i32 43989970
  br label %.backedge

230:                                              ; preds = %15
  %231 = sext i32 %.0112 to i64
  %232 = sext i32 %.0110 to i64
  %233 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %231, i64 %232
  %234 = load i32, i32* %233, align 4
  %235 = add i32 %234, 1
  store i32 %235, i32* %233, align 4
  %236 = load i32, i32* @x.4, align 4
  %237 = load i32, i32* @y.5, align 4
  %238 = add i32 %236, -1
  %239 = mul i32 %238, %236
  %240 = and i32 %239, 1
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %242, %241
  %244 = select i1 %243, i32 1359347148, i32 43989970
  br label %.backedge

245:                                              ; preds = %15
  br label %.backedge

246:                                              ; preds = %15
  br label %.backedge

247:                                              ; preds = %15
  %248 = add i32 %.0110, 1
  br label %.backedge

249:                                              ; preds = %15
  br label %.backedge

250:                                              ; preds = %15
  %251 = load i32, i32* @x.4, align 4
  %252 = load i32, i32* @y.5, align 4
  %253 = add i32 %251, -1
  %254 = mul i32 %253, %251
  %255 = and i32 %254, 1
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %257, %256
  %259 = select i1 %258, i32 -355314501, i32 -352330196
  br label %.backedge

260:                                              ; preds = %15
  %.neg122 = add i32 %.0112, 1
  %261 = load i32, i32* @x.4, align 4
  %262 = load i32, i32* @y.5, align 4
  %263 = add i32 %261, -1
  %264 = mul i32 %263, %261
  %265 = and i32 %264, 1
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %267, %266
  %269 = select i1 %268, i32 -2034888590, i32 -352330196
  br label %.backedge

270:                                              ; preds = %15
  br label %.backedge

271:                                              ; preds = %15
  br label %.backedge

272:                                              ; preds = %15
  %273 = load i32, i32* %5, align 4
  %.neg121 = add i32 %273, 1
  %274 = icmp slt i32 %.0108, %.neg121
  %275 = select i1 %274, i32 1972020565, i32 -2054911949
  br label %.backedge

276:                                              ; preds = %15
  br label %.backedge

277:                                              ; preds = %15
  %278 = load i32, i32* %6, align 4
  %279 = add i32 %278, 1
  %280 = icmp slt i32 %.0106, %279
  %281 = select i1 %280, i32 -2127077706, i32 1629343635
  br label %.backedge

282:                                              ; preds = %15
  %283 = load i32, i32* @x.4, align 4
  %284 = load i32, i32* @y.5, align 4
  %285 = add i32 %283, -1
  %286 = mul i32 %285, %283
  %287 = and i32 %286, 1
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %289, %288
  %291 = select i1 %290, i32 1055904575, i32 -193945462
  br label %.backedge

292:                                              ; preds = %15
  %293 = add i32 %.0108, -1
  %294 = sext i32 %293 to i64
  %295 = sext i32 %.0106 to i64
  %296 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %294, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = sext i32 %.0108 to i64
  %299 = add i32 %.0106, -1
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %298, i64 %300
  %302 = load i32, i32* %301, align 4
  %303 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %294, i64 %300
  %304 = load i32, i32* %303, align 4
  %305 = add i32 %302, %297
  %306 = sub i32 %305, %304
  %307 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %298, i64 %295
  store i32 %306, i32* %307, align 4
  %308 = icmp sgt i32 %.0106, 1
  store i1 %308, i1* %2, align 1
  %309 = load i32, i32* @x.4, align 4
  %310 = load i32, i32* @y.5, align 4
  %311 = add i32 %309, -1
  %312 = mul i32 %311, %309
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %315, %314
  %317 = select i1 %316, i32 875962811, i32 -193945462
  br label %.backedge

318:                                              ; preds = %15
  %.0..0..0.96 = load volatile i1, i1* %2, align 1
  %319 = select i1 %.0..0..0.96, i32 863868862, i32 -825429517
  br label %.backedge

320:                                              ; preds = %15
  %321 = load i32, i32* @x.4, align 4
  %322 = load i32, i32* @y.5, align 4
  %323 = add i32 %321, -1
  %324 = mul i32 %323, %321
  %325 = and i32 %324, 1
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %327, %326
  %329 = select i1 %328, i32 1881978974, i32 -740620383
  br label %.backedge

330:                                              ; preds = %15
  %331 = add i32 %.0108, -1
  %332 = sext i32 %331 to i64
  %333 = add i32 %.0106, -2
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @board, i64 0, i64 %332, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = icmp ne i32 %336, 0
  store i1 %337, i1* %1, align 1
  %338 = load i32, i32* @x.4, align 4
  %339 = load i32, i32* @y.5, align 4
  %340 = add i32 %338, -1
  %341 = mul i32 %340, %338
  %342 = and i32 %341, 1
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %344, %343
  %346 = select i1 %345, i32 -1431230151, i32 -740620383
  br label %.backedge

347:                                              ; preds = %15
  %.0..0..0.97 = load volatile i1, i1* %1, align 1
  %348 = select i1 %.0..0..0.97, i32 -1729458138, i32 -825429517
  br label %.backedge

349:                                              ; preds = %15
  %350 = add i32 %.0108, -1
  %351 = sext i32 %350 to i64
  %352 = add i32 %.0106, -1
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @board, i64 0, i64 %351, i64 %353
  %355 = load i32, i32* %354, align 4
  %.not = icmp eq i32 %355, 0
  %356 = select i1 %.not, i32 -825429517, i32 -1890791632
  br label %.backedge

357:                                              ; preds = %15
  %358 = load i32, i32* @x.4, align 4
  %359 = load i32, i32* @y.5, align 4
  %360 = add i32 %358, -1
  %361 = mul i32 %360, %358
  %362 = and i32 %361, 1
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %364, %363
  %366 = select i1 %365, i32 -867290586, i32 -1593863143
  br label %.backedge

367:                                              ; preds = %15
  %368 = sext i32 %.0108 to i64
  %369 = sext i32 %.0106 to i64
  %370 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %368, i64 %369
  %371 = load i32, i32* %370, align 4
  %.neg120 = add i32 %371, 1
  store i32 %.neg120, i32* %370, align 4
  %372 = load i32, i32* @x.4, align 4
  %373 = load i32, i32* @y.5, align 4
  %374 = add i32 %372, -1
  %375 = mul i32 %374, %372
  %376 = and i32 %375, 1
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %378, %377
  %380 = select i1 %379, i32 1347072005, i32 -1593863143
  br label %.backedge

381:                                              ; preds = %15
  br label %.backedge

382:                                              ; preds = %15
  %383 = load i32, i32* @x.4, align 4
  %384 = load i32, i32* @y.5, align 4
  %385 = add i32 %383, -1
  %386 = mul i32 %385, %383
  %387 = and i32 %386, 1
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %389, %388
  %391 = select i1 %390, i32 1503007024, i32 2108668668
  br label %.backedge

392:                                              ; preds = %15
  %393 = load i32, i32* @x.4, align 4
  %394 = load i32, i32* @y.5, align 4
  %395 = add i32 %393, -1
  %396 = mul i32 %395, %393
  %397 = and i32 %396, 1
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %399, %398
  %401 = select i1 %400, i32 -12666192, i32 2108668668
  br label %.backedge

402:                                              ; preds = %15
  br label %.backedge

403:                                              ; preds = %15
  %404 = add i32 %.0106, 1
  br label %.backedge

405:                                              ; preds = %15
  br label %.backedge

406:                                              ; preds = %15
  %407 = add i32 %.0108, 1
  br label %.backedge

408:                                              ; preds = %15
  br label %.backedge

409:                                              ; preds = %15
  %410 = load i32, i32* %7, align 4
  %411 = icmp slt i32 %.0104, %410
  %412 = select i1 %411, i32 1933674169, i32 -1558562749
  br label %.backedge

413:                                              ; preds = %15
  %414 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %9, i32* nonnull %10, i32* nonnull %11, i32* nonnull %12)
  %415 = load i32, i32* %11, align 4
  %416 = sext i32 %415 to i64
  %417 = load i32, i32* %12, align 4
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @bCUM, i64 0, i64 %416, i64 %418
  %420 = load i32, i32* %419, align 4
  %421 = load i32, i32* %9, align 4
  %422 = add i32 %421, -1
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @bCUM, i64 0, i64 %423, i64 %418
  %425 = load i32, i32* %424, align 4
  %426 = load i32, i32* %10, align 4
  %427 = add i32 %426, -1
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @bCUM, i64 0, i64 %416, i64 %428
  %430 = load i32, i32* %429, align 4
  %431 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @bCUM, i64 0, i64 %423, i64 %428
  %432 = load i32, i32* %431, align 4
  %433 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %416, i64 %418
  %434 = load i32, i32* %433, align 4
  %435 = sext i32 %421 to i64
  %436 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %435, i64 %418
  %437 = load i32, i32* %436, align 4
  %438 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %416, i64 %428
  %439 = load i32, i32* %438, align 4
  %440 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %435, i64 %428
  %441 = load i32, i32* %440, align 4
  %442 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %416, i64 %418
  %443 = load i32, i32* %442, align 4
  %444 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %423, i64 %418
  %445 = load i32, i32* %444, align 4
  %446 = sext i32 %426 to i64
  %447 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %416, i64 %446
  %448 = load i32, i32* %447, align 4
  %449 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %423, i64 %446
  %450 = load i32, i32* %449, align 4
  %451 = add i32 %425, %430
  %452 = add i32 %420, %432
  %453 = add i32 %451, %434
  %.neg134 = sub i32 %452, %453
  %454 = add i32 %.neg134, %437
  %455 = add i32 %454, %439
  %456 = add i32 %441, %443
  %457 = sub i32 %455, %456
  %458 = add i32 %457, %445
  %459 = add i32 %458, %448
  %460 = sub i32 %459, %450
  %461 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %460)
  br label %.backedge

462:                                              ; preds = %15
  %463 = load i32, i32* @x.4, align 4
  %464 = load i32, i32* @y.5, align 4
  %465 = add i32 %463, -1
  %466 = mul i32 %465, %463
  %467 = and i32 %466, 1
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %469, %468
  %471 = select i1 %470, i32 557305494, i32 1002414575
  br label %.backedge

472:                                              ; preds = %15
  %473 = add i32 %.0104, 1
  %474 = load i32, i32* @x.4, align 4
  %475 = load i32, i32* @y.5, align 4
  %476 = add i32 %474, -1
  %477 = mul i32 %476, %474
  %478 = and i32 %477, 1
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %480, %479
  %482 = select i1 %481, i32 -665298117, i32 1002414575
  br label %.backedge

483:                                              ; preds = %15
  br label %.backedge

484:                                              ; preds = %15
  ret i32 0

485:                                              ; preds = %15
  %486 = add i32 %.0100, 1
  br label %.backedge

487:                                              ; preds = %15
  br label %.backedge

488:                                              ; preds = %15
  br label %.backedge

489:                                              ; preds = %15
  br label %.backedge

490:                                              ; preds = %15
  %491 = add i32 %.0112, -1
  %492 = sext i32 %491 to i64
  %493 = sext i32 %.0110 to i64
  %494 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %492, i64 %493
  %495 = load i32, i32* %494, align 4
  %496 = sext i32 %.0112 to i64
  %497 = add i32 %.0110, -1
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %496, i64 %498
  %500 = load i32, i32* %499, align 4
  %501 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %492, i64 %498
  %502 = load i32, i32* %501, align 4
  %503 = add i32 %500, %495
  %504 = sub i32 %503, %502
  %505 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %496, i64 %493
  store i32 %504, i32* %505, align 4
  br label %.backedge

506:                                              ; preds = %15
  %507 = sext i32 %.0112 to i64
  %508 = sext i32 %.0110 to i64
  %509 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @cCUM, i64 0, i64 %507, i64 %508
  %510 = load i32, i32* %509, align 4
  %.neg = add i32 %510, 1
  store i32 %.neg, i32* %509, align 4
  br label %.backedge

511:                                              ; preds = %15
  %512 = add i32 %.0112, 1
  br label %.backedge

513:                                              ; preds = %15
  %514 = add i32 %.0108, -1
  %515 = sext i32 %514 to i64
  %516 = sext i32 %.0106 to i64
  %517 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %515, i64 %516
  %518 = load i32, i32* %517, align 4
  %519 = sext i32 %.0108 to i64
  %520 = add i32 %.0106, -1
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %519, i64 %521
  %523 = load i32, i32* %522, align 4
  %524 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %515, i64 %521
  %525 = load i32, i32* %524, align 4
  %526 = add i32 %523, %518
  %527 = sub i32 %526, %525
  %528 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %519, i64 %516
  store i32 %527, i32* %528, align 4
  br label %.backedge

529:                                              ; preds = %15
  br label %.backedge

530:                                              ; preds = %15
  %531 = sext i32 %.0108 to i64
  %532 = sext i32 %.0106 to i64
  %533 = getelementptr inbounds [2020 x [2020 x i32]], [2020 x [2020 x i32]]* @rCUM, i64 0, i64 %531, i64 %532
  %534 = load i32, i32* %533, align 4
  %535 = add i32 %534, 1
  store i32 %535, i32* %533, align 4
  br label %.backedge

536:                                              ; preds = %15
  br label %.backedge

537:                                              ; preds = %15
  %538 = add i32 %.0104, 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s986093416.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
