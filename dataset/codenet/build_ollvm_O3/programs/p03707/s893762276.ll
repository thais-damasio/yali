; ModuleID = 'build_ollvm/programs/p03707/s893762276.ll'
source_filename = "Project_CodeNet_C++1400/p03707/s893762276.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@m = global i32 0, align 4
@q = global i32 0, align 4
@a = global [2010 x [2010 x i32]] zeroinitializer, align 16
@s1 = local_unnamed_addr global [2010 x [2010 x i32]] zeroinitializer, align 16
@s2 = local_unnamed_addr global [2010 x [2010 x i32]] zeroinitializer, align 16
@s3 = local_unnamed_addr global [2010 x [2010 x i32]] zeroinitializer, align 16
@s4 = local_unnamed_addr global [2010 x [2010 x i32]] zeroinitializer, align 16
@.str = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%1d\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"%d %d %d %d\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s893762276.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32* nonnull @n, i32* nonnull @m, i32* nonnull @q)
  br label %10

10:                                               ; preds = %.backedge, %0
  %.0103 = phi i32 [ undef, %0 ], [ %.0103.be, %.backedge ]
  %.0101 = phi i32 [ undef, %0 ], [ %.0101.be, %.backedge ]
  %.099 = phi i32 [ undef, %0 ], [ %.099.be, %.backedge ]
  %.097 = phi i32 [ undef, %0 ], [ %.097.be, %.backedge ]
  %.095 = phi i32 [ undef, %0 ], [ %.095.be, %.backedge ]
  %.093 = phi i32 [ undef, %0 ], [ %.093.be, %.backedge ]
  %.091 = phi i32 [ undef, %0 ], [ %.091.be, %.backedge ]
  %.089 = phi i32 [ undef, %0 ], [ %.089.be, %.backedge ]
  %.087 = phi i32 [ undef, %0 ], [ %.087.be, %.backedge ]
  %.085 = phi i32 [ 1, %0 ], [ %.085.be, %.backedge ]
  %.0 = phi i32 [ 1369535194, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1369535194, label %11
    i32 -1228349206, label %21
    i32 -535447147, label %33
    i32 478589524, label %35
    i32 754364593, label %45
    i32 -1491724351, label %55
    i32 1216801195, label %56
    i32 -875661931, label %59
    i32 -47064108, label %64
    i32 1978245851, label %74
    i32 -406575024, label %85
    i32 -839220919, label %86
    i32 1424357181, label %96
    i32 801075027, label %106
    i32 1285609462, label %107
    i32 -429388141, label %109
    i32 -1091077221, label %119
    i32 930316382, label %129
    i32 614621042, label %130
    i32 361335003, label %133
    i32 1580933972, label %143
    i32 1266205459, label %153
    i32 701205394, label %154
    i32 1245306710, label %164
    i32 1999343401, label %176
    i32 1700521866, label %178
    i32 -1098686330, label %196
    i32 1997522365, label %206
    i32 917320292, label %216
    i32 -1440139333, label %217
    i32 762266668, label %218
    i32 -1583486200, label %220
    i32 -138201006, label %230
    i32 -900997412, label %240
    i32 1519881578, label %241
    i32 -418127169, label %244
    i32 1934361531, label %254
    i32 -2006730236, label %264
    i32 1532141315, label %265
    i32 -1606984281, label %268
    i32 149568092, label %293
    i32 395866566, label %294
    i32 695826872, label %295
    i32 -284566065, label %297
    i32 -1947279788, label %298
    i32 -510662642, label %301
    i32 352693546, label %302
    i32 1089009242, label %305
    i32 -534698609, label %315
    i32 -1779345978, label %340
    i32 1571720263, label %341
    i32 2016449621, label %351
    i32 872901083, label %362
    i32 -716307986, label %363
    i32 478039279, label %364
    i32 -807842799, label %366
    i32 -1717507758, label %367
    i32 -2034830204, label %377
    i32 -772930519, label %389
    i32 -1101388286, label %391
    i32 1392206354, label %392
    i32 1912653852, label %402
    i32 -1020273124, label %414
    i32 -320777452, label %416
    i32 1548451679, label %431
    i32 -691346420, label %433
    i32 1487541998, label %443
    i32 -2072690176, label %453
    i32 1024151464, label %454
    i32 -1330916337, label %455
    i32 1840220223, label %456
    i32 858833309, label %459
    i32 1586622355, label %509
    i32 -1185154013, label %519
    i32 1878139066, label %529
    i32 -386261016, label %530
    i32 -1417, label %531
    i32 -597594888, label %532
    i32 -1845499837, label %533
    i32 61059551, label %534
    i32 -1249152464, label %535
    i32 737173719, label %536
    i32 -272158219, label %537
    i32 547608943, label %539
    i32 -1235114806, label %540
    i32 -1057842906, label %541
    i32 1544728416, label %556
    i32 -333084511, label %557
    i32 -1705437747, label %558
    i32 -76488949, label %559
    i32 -1363108581, label %560
  ]

.backedge:                                        ; preds = %10, %560, %559, %558, %557, %556, %541, %540, %539, %537, %536, %535, %534, %533, %532, %531, %530, %519, %509, %459, %456, %455, %454, %453, %443, %433, %431, %416, %414, %402, %392, %391, %389, %377, %367, %366, %364, %363, %362, %351, %341, %340, %315, %305, %302, %301, %298, %297, %295, %294, %293, %268, %265, %264, %254, %244, %241, %240, %230, %220, %218, %217, %216, %206, %196, %178, %176, %164, %154, %153, %143, %133, %130, %129, %119, %109, %107, %106, %96, %86, %85, %74, %64, %59, %56, %55, %45, %35, %33, %21, %11
  %.0103.be = phi i32 [ %.0103, %10 ], [ %.0103, %560 ], [ %.0103, %559 ], [ %.0103, %558 ], [ %.0103, %557 ], [ %.0103, %556 ], [ %.0103, %541 ], [ %.0103, %540 ], [ %.0103, %539 ], [ %.0103, %537 ], [ %.0103, %536 ], [ %.0103, %535 ], [ 1, %534 ], [ %.0103, %533 ], [ %.0103, %532 ], [ %.0103, %531 ], [ %.0103, %530 ], [ %.0103, %519 ], [ %.0103, %509 ], [ %.0103, %459 ], [ %.0103, %456 ], [ %.0103, %455 ], [ %.0103, %454 ], [ %.0103, %453 ], [ %.0103, %443 ], [ %.0103, %433 ], [ %.0103, %431 ], [ %.0103, %416 ], [ %.0103, %414 ], [ %.0103, %402 ], [ %.0103, %392 ], [ %.0103, %391 ], [ %.0103, %389 ], [ %.0103, %377 ], [ %.0103, %367 ], [ %.0103, %366 ], [ %.0103, %364 ], [ %.0103, %363 ], [ %.0103, %362 ], [ %.0103, %351 ], [ %.0103, %341 ], [ %.0103, %340 ], [ %.0103, %315 ], [ %.0103, %305 ], [ %.0103, %302 ], [ %.0103, %301 ], [ %.0103, %298 ], [ %.0103, %297 ], [ %.0103, %295 ], [ %.0103, %294 ], [ %.0103, %293 ], [ %.0103, %268 ], [ %.0103, %265 ], [ %.0103, %264 ], [ %.0103, %254 ], [ %.0103, %244 ], [ %.0103, %241 ], [ %.0103, %240 ], [ %.0103, %230 ], [ %.0103, %220 ], [ %219, %218 ], [ %.0103, %217 ], [ %.0103, %216 ], [ %.0103, %206 ], [ %.0103, %196 ], [ %.0103, %178 ], [ %.0103, %176 ], [ %.0103, %164 ], [ %.0103, %154 ], [ %.0103, %153 ], [ %.0103, %143 ], [ %.0103, %133 ], [ %.0103, %130 ], [ %.0103, %129 ], [ 1, %119 ], [ %.0103, %109 ], [ %.0103, %107 ], [ %.0103, %106 ], [ %.0103, %96 ], [ %.0103, %86 ], [ %.0103, %85 ], [ %.0103, %74 ], [ %.0103, %64 ], [ %.0103, %59 ], [ %.0103, %56 ], [ %.0103, %55 ], [ %.0103, %45 ], [ %.0103, %35 ], [ %.0103, %33 ], [ %.0103, %21 ], [ %.0103, %11 ]
  %.0101.be = phi i32 [ %.0101, %10 ], [ %.0101, %560 ], [ %.0101, %559 ], [ %.0101, %558 ], [ %.0101, %557 ], [ %.0101, %556 ], [ %.0101, %541 ], [ %.0101, %540 ], [ %.0101, %539 ], [ %538, %537 ], [ %.0101, %536 ], [ 1, %535 ], [ %.0101, %534 ], [ %.0101, %533 ], [ %.0101, %532 ], [ %.0101, %531 ], [ %.0101, %530 ], [ %.0101, %519 ], [ %.0101, %509 ], [ %.0101, %459 ], [ %.0101, %456 ], [ %.0101, %455 ], [ %.0101, %454 ], [ %.0101, %453 ], [ %.0101, %443 ], [ %.0101, %433 ], [ %.0101, %431 ], [ %.0101, %416 ], [ %.0101, %414 ], [ %.0101, %402 ], [ %.0101, %392 ], [ %.0101, %391 ], [ %.0101, %389 ], [ %.0101, %377 ], [ %.0101, %367 ], [ %.0101, %366 ], [ %.0101, %364 ], [ %.0101, %363 ], [ %.0101, %362 ], [ %.0101, %351 ], [ %.0101, %341 ], [ %.0101, %340 ], [ %.0101, %315 ], [ %.0101, %305 ], [ %.0101, %302 ], [ %.0101, %301 ], [ %.0101, %298 ], [ %.0101, %297 ], [ %.0101, %295 ], [ %.0101, %294 ], [ %.0101, %293 ], [ %.0101, %268 ], [ %.0101, %265 ], [ %.0101, %264 ], [ %.0101, %254 ], [ %.0101, %244 ], [ %.0101, %241 ], [ %.0101, %240 ], [ %.0101, %230 ], [ %.0101, %220 ], [ %.0101, %218 ], [ %.0101, %217 ], [ %.0101, %216 ], [ %.neg121, %206 ], [ %.0101, %196 ], [ %.0101, %178 ], [ %.0101, %176 ], [ %.0101, %164 ], [ %.0101, %154 ], [ %.0101, %153 ], [ 1, %143 ], [ %.0101, %133 ], [ %.0101, %130 ], [ %.0101, %129 ], [ %.0101, %119 ], [ %.0101, %109 ], [ %.0101, %107 ], [ %.0101, %106 ], [ %.0101, %96 ], [ %.0101, %86 ], [ %.0101, %85 ], [ %.0101, %74 ], [ %.0101, %64 ], [ %.0101, %59 ], [ %.0101, %56 ], [ %.0101, %55 ], [ %.0101, %45 ], [ %.0101, %35 ], [ %.0101, %33 ], [ %.0101, %21 ], [ %.0101, %11 ]
  %.099.be = phi i32 [ %.099, %10 ], [ %.099, %560 ], [ %.099, %559 ], [ %.099, %558 ], [ %.099, %557 ], [ %.099, %556 ], [ %.099, %541 ], [ %.099, %540 ], [ 1, %539 ], [ %.099, %537 ], [ %.099, %536 ], [ %.099, %535 ], [ %.099, %534 ], [ %.099, %533 ], [ %.099, %532 ], [ %.099, %531 ], [ %.099, %530 ], [ %.099, %519 ], [ %.099, %509 ], [ %.099, %459 ], [ %.099, %456 ], [ %.099, %455 ], [ %.099, %454 ], [ %.099, %453 ], [ %.099, %443 ], [ %.099, %433 ], [ %.099, %431 ], [ %.099, %416 ], [ %.099, %414 ], [ %.099, %402 ], [ %.099, %392 ], [ %.099, %391 ], [ %.099, %389 ], [ %.099, %377 ], [ %.099, %367 ], [ %.099, %366 ], [ %.099, %364 ], [ %.099, %363 ], [ %.099, %362 ], [ %.099, %351 ], [ %.099, %341 ], [ %.099, %340 ], [ %.099, %315 ], [ %.099, %305 ], [ %.099, %302 ], [ %.099, %301 ], [ %.099, %298 ], [ %.099, %297 ], [ %296, %295 ], [ %.099, %294 ], [ %.099, %293 ], [ %.099, %268 ], [ %.099, %265 ], [ %.099, %264 ], [ %.099, %254 ], [ %.099, %244 ], [ %.099, %241 ], [ %.099, %240 ], [ 1, %230 ], [ %.099, %220 ], [ %.099, %218 ], [ %.099, %217 ], [ %.099, %216 ], [ %.099, %206 ], [ %.099, %196 ], [ %.099, %178 ], [ %.099, %176 ], [ %.099, %164 ], [ %.099, %154 ], [ %.099, %153 ], [ %.099, %143 ], [ %.099, %133 ], [ %.099, %130 ], [ %.099, %129 ], [ %.099, %119 ], [ %.099, %109 ], [ %.099, %107 ], [ %.099, %106 ], [ %.099, %96 ], [ %.099, %86 ], [ %.099, %85 ], [ %.099, %74 ], [ %.099, %64 ], [ %.099, %59 ], [ %.099, %56 ], [ %.099, %55 ], [ %.099, %45 ], [ %.099, %35 ], [ %.099, %33 ], [ %.099, %21 ], [ %.099, %11 ]
  %.097.be = phi i32 [ %.097, %10 ], [ %.097, %560 ], [ %.097, %559 ], [ %.097, %558 ], [ %.097, %557 ], [ %.097, %556 ], [ %.097, %541 ], [ 1, %540 ], [ %.097, %539 ], [ %.097, %537 ], [ %.097, %536 ], [ %.097, %535 ], [ %.097, %534 ], [ %.097, %533 ], [ %.097, %532 ], [ %.097, %531 ], [ %.097, %530 ], [ %.097, %519 ], [ %.097, %509 ], [ %.097, %459 ], [ %.097, %456 ], [ %.097, %455 ], [ %.097, %454 ], [ %.097, %453 ], [ %.097, %443 ], [ %.097, %433 ], [ %.097, %431 ], [ %.097, %416 ], [ %.097, %414 ], [ %.097, %402 ], [ %.097, %392 ], [ %.097, %391 ], [ %.097, %389 ], [ %.097, %377 ], [ %.097, %367 ], [ %.097, %366 ], [ %.097, %364 ], [ %.097, %363 ], [ %.097, %362 ], [ %.097, %351 ], [ %.097, %341 ], [ %.097, %340 ], [ %.097, %315 ], [ %.097, %305 ], [ %.097, %302 ], [ %.097, %301 ], [ %.097, %298 ], [ %.097, %297 ], [ %.097, %295 ], [ %.097, %294 ], [ %.neg115, %293 ], [ %.097, %268 ], [ %.097, %265 ], [ %.097, %264 ], [ 1, %254 ], [ %.097, %244 ], [ %.097, %241 ], [ %.097, %240 ], [ %.097, %230 ], [ %.097, %220 ], [ %.097, %218 ], [ %.097, %217 ], [ %.097, %216 ], [ %.097, %206 ], [ %.097, %196 ], [ %.097, %178 ], [ %.097, %176 ], [ %.097, %164 ], [ %.097, %154 ], [ %.097, %153 ], [ %.097, %143 ], [ %.097, %133 ], [ %.097, %130 ], [ %.097, %129 ], [ %.097, %119 ], [ %.097, %109 ], [ %.097, %107 ], [ %.097, %106 ], [ %.097, %96 ], [ %.097, %86 ], [ %.097, %85 ], [ %.097, %74 ], [ %.097, %64 ], [ %.097, %59 ], [ %.097, %56 ], [ %.097, %55 ], [ %.097, %45 ], [ %.097, %35 ], [ %.097, %33 ], [ %.097, %21 ], [ %.097, %11 ]
  %.095.be = phi i32 [ %.095, %10 ], [ %.095, %560 ], [ %.095, %559 ], [ %.095, %558 ], [ %.095, %557 ], [ %.095, %556 ], [ %.095, %541 ], [ %.095, %540 ], [ %.095, %539 ], [ %.095, %537 ], [ %.095, %536 ], [ %.095, %535 ], [ %.095, %534 ], [ %.095, %533 ], [ %.095, %532 ], [ %.095, %531 ], [ %.095, %530 ], [ %.095, %519 ], [ %.095, %509 ], [ %.095, %459 ], [ %.095, %456 ], [ %.095, %455 ], [ %.095, %454 ], [ %.095, %453 ], [ %.095, %443 ], [ %.095, %433 ], [ %.095, %431 ], [ %.095, %416 ], [ %.095, %414 ], [ %.095, %402 ], [ %.095, %392 ], [ %.095, %391 ], [ %.095, %389 ], [ %.095, %377 ], [ %.095, %367 ], [ %.095, %366 ], [ %365, %364 ], [ %.095, %363 ], [ %.095, %362 ], [ %.095, %351 ], [ %.095, %341 ], [ %.095, %340 ], [ %.095, %315 ], [ %.095, %305 ], [ %.095, %302 ], [ %.095, %301 ], [ %.095, %298 ], [ 1, %297 ], [ %.095, %295 ], [ %.095, %294 ], [ %.095, %293 ], [ %.095, %268 ], [ %.095, %265 ], [ %.095, %264 ], [ %.095, %254 ], [ %.095, %244 ], [ %.095, %241 ], [ %.095, %240 ], [ %.095, %230 ], [ %.095, %220 ], [ %.095, %218 ], [ %.095, %217 ], [ %.095, %216 ], [ %.095, %206 ], [ %.095, %196 ], [ %.095, %178 ], [ %.095, %176 ], [ %.095, %164 ], [ %.095, %154 ], [ %.095, %153 ], [ %.095, %143 ], [ %.095, %133 ], [ %.095, %130 ], [ %.095, %129 ], [ %.095, %119 ], [ %.095, %109 ], [ %.095, %107 ], [ %.095, %106 ], [ %.095, %96 ], [ %.095, %86 ], [ %.095, %85 ], [ %.095, %74 ], [ %.095, %64 ], [ %.095, %59 ], [ %.095, %56 ], [ %.095, %55 ], [ %.095, %45 ], [ %.095, %35 ], [ %.095, %33 ], [ %.095, %21 ], [ %.095, %11 ]
  %.093.be = phi i32 [ %.093, %10 ], [ %.093, %560 ], [ %.093, %559 ], [ %.093, %558 ], [ %.093, %557 ], [ %.neg, %556 ], [ %.093, %541 ], [ %.093, %540 ], [ %.093, %539 ], [ %.093, %537 ], [ %.093, %536 ], [ %.093, %535 ], [ %.093, %534 ], [ %.093, %533 ], [ %.093, %532 ], [ %.093, %531 ], [ %.093, %530 ], [ %.093, %519 ], [ %.093, %509 ], [ %.093, %459 ], [ %.093, %456 ], [ %.093, %455 ], [ %.093, %454 ], [ %.093, %453 ], [ %.093, %443 ], [ %.093, %433 ], [ %.093, %431 ], [ %.093, %416 ], [ %.093, %414 ], [ %.093, %402 ], [ %.093, %392 ], [ %.093, %391 ], [ %.093, %389 ], [ %.093, %377 ], [ %.093, %367 ], [ %.093, %366 ], [ %.093, %364 ], [ %.093, %363 ], [ %.093, %362 ], [ %352, %351 ], [ %.093, %341 ], [ %.093, %340 ], [ %.093, %315 ], [ %.093, %305 ], [ %.093, %302 ], [ 1, %301 ], [ %.093, %298 ], [ %.093, %297 ], [ %.093, %295 ], [ %.093, %294 ], [ %.093, %293 ], [ %.093, %268 ], [ %.093, %265 ], [ %.093, %264 ], [ %.093, %254 ], [ %.093, %244 ], [ %.093, %241 ], [ %.093, %240 ], [ %.093, %230 ], [ %.093, %220 ], [ %.093, %218 ], [ %.093, %217 ], [ %.093, %216 ], [ %.093, %206 ], [ %.093, %196 ], [ %.093, %178 ], [ %.093, %176 ], [ %.093, %164 ], [ %.093, %154 ], [ %.093, %153 ], [ %.093, %143 ], [ %.093, %133 ], [ %.093, %130 ], [ %.093, %129 ], [ %.093, %119 ], [ %.093, %109 ], [ %.093, %107 ], [ %.093, %106 ], [ %.093, %96 ], [ %.093, %86 ], [ %.093, %85 ], [ %.093, %74 ], [ %.093, %64 ], [ %.093, %59 ], [ %.093, %56 ], [ %.093, %55 ], [ %.093, %45 ], [ %.093, %35 ], [ %.093, %33 ], [ %.093, %21 ], [ %.093, %11 ]
  %.091.be = phi i32 [ %.091, %10 ], [ %.091, %560 ], [ %.091, %559 ], [ %.091, %558 ], [ %.091, %557 ], [ %.091, %556 ], [ %.091, %541 ], [ %.091, %540 ], [ %.091, %539 ], [ %.091, %537 ], [ %.091, %536 ], [ %.091, %535 ], [ %.091, %534 ], [ %.091, %533 ], [ %.091, %532 ], [ %.091, %531 ], [ %.091, %530 ], [ %.091, %519 ], [ %.091, %509 ], [ %.091, %459 ], [ %.091, %456 ], [ %.091, %455 ], [ %.neg109, %454 ], [ %.091, %453 ], [ %.091, %443 ], [ %.091, %433 ], [ %.091, %431 ], [ %.091, %416 ], [ %.091, %414 ], [ %.091, %402 ], [ %.091, %392 ], [ %.091, %391 ], [ %.091, %389 ], [ %.091, %377 ], [ %.091, %367 ], [ 1, %366 ], [ %.091, %364 ], [ %.091, %363 ], [ %.091, %362 ], [ %.091, %351 ], [ %.091, %341 ], [ %.091, %340 ], [ %.091, %315 ], [ %.091, %305 ], [ %.091, %302 ], [ %.091, %301 ], [ %.091, %298 ], [ %.091, %297 ], [ %.091, %295 ], [ %.091, %294 ], [ %.091, %293 ], [ %.091, %268 ], [ %.091, %265 ], [ %.091, %264 ], [ %.091, %254 ], [ %.091, %244 ], [ %.091, %241 ], [ %.091, %240 ], [ %.091, %230 ], [ %.091, %220 ], [ %.091, %218 ], [ %.091, %217 ], [ %.091, %216 ], [ %.091, %206 ], [ %.091, %196 ], [ %.091, %178 ], [ %.091, %176 ], [ %.091, %164 ], [ %.091, %154 ], [ %.091, %153 ], [ %.091, %143 ], [ %.091, %133 ], [ %.091, %130 ], [ %.091, %129 ], [ %.091, %119 ], [ %.091, %109 ], [ %.091, %107 ], [ %.091, %106 ], [ %.091, %96 ], [ %.091, %86 ], [ %.091, %85 ], [ %.091, %74 ], [ %.091, %64 ], [ %.091, %59 ], [ %.091, %56 ], [ %.091, %55 ], [ %.091, %45 ], [ %.091, %35 ], [ %.091, %33 ], [ %.091, %21 ], [ %.091, %11 ]
  %.089.be = phi i32 [ %.089, %10 ], [ %.089, %560 ], [ %.089, %559 ], [ %.089, %558 ], [ %.089, %557 ], [ %.089, %556 ], [ %.089, %541 ], [ %.089, %540 ], [ %.089, %539 ], [ %.089, %537 ], [ %.089, %536 ], [ %.089, %535 ], [ %.089, %534 ], [ %.089, %533 ], [ %.089, %532 ], [ %.089, %531 ], [ %.089, %530 ], [ %.089, %519 ], [ %.089, %509 ], [ %.089, %459 ], [ %.089, %456 ], [ %.089, %455 ], [ %.089, %454 ], [ %.089, %453 ], [ %.089, %443 ], [ %.089, %433 ], [ %432, %431 ], [ %.089, %416 ], [ %.089, %414 ], [ %.089, %402 ], [ %.089, %392 ], [ 1, %391 ], [ %.089, %389 ], [ %.089, %377 ], [ %.089, %367 ], [ %.089, %366 ], [ %.089, %364 ], [ %.089, %363 ], [ %.089, %362 ], [ %.089, %351 ], [ %.089, %341 ], [ %.089, %340 ], [ %.089, %315 ], [ %.089, %305 ], [ %.089, %302 ], [ %.089, %301 ], [ %.089, %298 ], [ %.089, %297 ], [ %.089, %295 ], [ %.089, %294 ], [ %.089, %293 ], [ %.089, %268 ], [ %.089, %265 ], [ %.089, %264 ], [ %.089, %254 ], [ %.089, %244 ], [ %.089, %241 ], [ %.089, %240 ], [ %.089, %230 ], [ %.089, %220 ], [ %.089, %218 ], [ %.089, %217 ], [ %.089, %216 ], [ %.089, %206 ], [ %.089, %196 ], [ %.089, %178 ], [ %.089, %176 ], [ %.089, %164 ], [ %.089, %154 ], [ %.089, %153 ], [ %.089, %143 ], [ %.089, %133 ], [ %.089, %130 ], [ %.089, %129 ], [ %.089, %119 ], [ %.089, %109 ], [ %.089, %107 ], [ %.089, %106 ], [ %.089, %96 ], [ %.089, %86 ], [ %.089, %85 ], [ %.089, %74 ], [ %.089, %64 ], [ %.089, %59 ], [ %.089, %56 ], [ %.089, %55 ], [ %.089, %45 ], [ %.089, %35 ], [ %.089, %33 ], [ %.089, %21 ], [ %.089, %11 ]
  %.087.be = phi i32 [ %.087, %10 ], [ %.087, %560 ], [ %.087, %559 ], [ %.087, %558 ], [ %.087, %557 ], [ %.087, %556 ], [ %.087, %541 ], [ %.087, %540 ], [ %.087, %539 ], [ %.087, %537 ], [ %.087, %536 ], [ %.087, %535 ], [ %.087, %534 ], [ %.087, %533 ], [ %.neg105, %532 ], [ 1, %531 ], [ %.087, %530 ], [ %.087, %519 ], [ %.087, %509 ], [ %.087, %459 ], [ %.087, %456 ], [ %.087, %455 ], [ %.087, %454 ], [ %.087, %453 ], [ %.087, %443 ], [ %.087, %433 ], [ %.087, %431 ], [ %.087, %416 ], [ %.087, %414 ], [ %.087, %402 ], [ %.087, %392 ], [ %.087, %391 ], [ %.087, %389 ], [ %.087, %377 ], [ %.087, %367 ], [ %.087, %366 ], [ %.087, %364 ], [ %.087, %363 ], [ %.087, %362 ], [ %.087, %351 ], [ %.087, %341 ], [ %.087, %340 ], [ %.087, %315 ], [ %.087, %305 ], [ %.087, %302 ], [ %.087, %301 ], [ %.087, %298 ], [ %.087, %297 ], [ %.087, %295 ], [ %.087, %294 ], [ %.087, %293 ], [ %.087, %268 ], [ %.087, %265 ], [ %.087, %264 ], [ %.087, %254 ], [ %.087, %244 ], [ %.087, %241 ], [ %.087, %240 ], [ %.087, %230 ], [ %.087, %220 ], [ %.087, %218 ], [ %.087, %217 ], [ %.087, %216 ], [ %.087, %206 ], [ %.087, %196 ], [ %.087, %178 ], [ %.087, %176 ], [ %.087, %164 ], [ %.087, %154 ], [ %.087, %153 ], [ %.087, %143 ], [ %.087, %133 ], [ %.087, %130 ], [ %.087, %129 ], [ %.087, %119 ], [ %.087, %109 ], [ %.087, %107 ], [ %.087, %106 ], [ %.087, %96 ], [ %.087, %86 ], [ %.087, %85 ], [ %75, %74 ], [ %.087, %64 ], [ %.087, %59 ], [ %.087, %56 ], [ %.087, %55 ], [ 1, %45 ], [ %.087, %35 ], [ %.087, %33 ], [ %.087, %21 ], [ %.087, %11 ]
  %.085.be = phi i32 [ %.085, %10 ], [ %.085, %560 ], [ %.085, %559 ], [ %.085, %558 ], [ %.085, %557 ], [ %.085, %556 ], [ %.085, %541 ], [ %.085, %540 ], [ %.085, %539 ], [ %.085, %537 ], [ %.085, %536 ], [ %.085, %535 ], [ %.085, %534 ], [ %.085, %533 ], [ %.085, %532 ], [ %.085, %531 ], [ %.085, %530 ], [ %.085, %519 ], [ %.085, %509 ], [ %.085, %459 ], [ %.085, %456 ], [ %.085, %455 ], [ %.085, %454 ], [ %.085, %453 ], [ %.085, %443 ], [ %.085, %433 ], [ %.085, %431 ], [ %.085, %416 ], [ %.085, %414 ], [ %.085, %402 ], [ %.085, %392 ], [ %.085, %391 ], [ %.085, %389 ], [ %.085, %377 ], [ %.085, %367 ], [ %.085, %366 ], [ %.085, %364 ], [ %.085, %363 ], [ %.085, %362 ], [ %.085, %351 ], [ %.085, %341 ], [ %.085, %340 ], [ %.085, %315 ], [ %.085, %305 ], [ %.085, %302 ], [ %.085, %301 ], [ %.085, %298 ], [ %.085, %297 ], [ %.085, %295 ], [ %.085, %294 ], [ %.085, %293 ], [ %.085, %268 ], [ %.085, %265 ], [ %.085, %264 ], [ %.085, %254 ], [ %.085, %244 ], [ %.085, %241 ], [ %.085, %240 ], [ %.085, %230 ], [ %.085, %220 ], [ %.085, %218 ], [ %.085, %217 ], [ %.085, %216 ], [ %.085, %206 ], [ %.085, %196 ], [ %.085, %178 ], [ %.085, %176 ], [ %.085, %164 ], [ %.085, %154 ], [ %.085, %153 ], [ %.085, %143 ], [ %.085, %133 ], [ %.085, %130 ], [ %.085, %129 ], [ %.085, %119 ], [ %.085, %109 ], [ %108, %107 ], [ %.085, %106 ], [ %.085, %96 ], [ %.085, %86 ], [ %.085, %85 ], [ %.085, %74 ], [ %.085, %64 ], [ %.085, %59 ], [ %.085, %56 ], [ %.085, %55 ], [ %.085, %45 ], [ %.085, %35 ], [ %.085, %33 ], [ %.085, %21 ], [ %.085, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ -1185154013, %560 ], [ 1487541998, %559 ], [ 1912653852, %558 ], [ -2034830204, %557 ], [ 2016449621, %556 ], [ -534698609, %541 ], [ 1934361531, %540 ], [ -138201006, %539 ], [ 1997522365, %537 ], [ 1245306710, %536 ], [ 1580933972, %535 ], [ -1091077221, %534 ], [ 1424357181, %533 ], [ 1978245851, %532 ], [ 754364593, %531 ], [ -1228349206, %530 ], [ %528, %519 ], [ %518, %509 ], [ 1840220223, %459 ], [ %458, %456 ], [ 1840220223, %455 ], [ -1717507758, %454 ], [ 1024151464, %453 ], [ %452, %443 ], [ %442, %433 ], [ 1392206354, %431 ], [ 1548451679, %416 ], [ %415, %414 ], [ %413, %402 ], [ %401, %392 ], [ 1392206354, %391 ], [ %390, %389 ], [ %388, %377 ], [ %376, %367 ], [ -1717507758, %366 ], [ -1947279788, %364 ], [ 478039279, %363 ], [ 352693546, %362 ], [ %361, %351 ], [ %350, %341 ], [ 1571720263, %340 ], [ %339, %315 ], [ %314, %305 ], [ %304, %302 ], [ 352693546, %301 ], [ %300, %298 ], [ -1947279788, %297 ], [ 1519881578, %295 ], [ 695826872, %294 ], [ 1532141315, %293 ], [ 149568092, %268 ], [ %267, %265 ], [ 1532141315, %264 ], [ %263, %254 ], [ %253, %244 ], [ %243, %241 ], [ 1519881578, %240 ], [ %239, %230 ], [ %229, %220 ], [ 614621042, %218 ], [ 762266668, %217 ], [ 701205394, %216 ], [ %215, %206 ], [ %205, %196 ], [ -1098686330, %178 ], [ %177, %176 ], [ %175, %164 ], [ %163, %154 ], [ 701205394, %153 ], [ %152, %143 ], [ %142, %133 ], [ %132, %130 ], [ 614621042, %129 ], [ %128, %119 ], [ %118, %109 ], [ 1369535194, %107 ], [ 1285609462, %106 ], [ %105, %96 ], [ %95, %86 ], [ 1216801195, %85 ], [ %84, %74 ], [ %73, %64 ], [ -47064108, %59 ], [ %58, %56 ], [ 1216801195, %55 ], [ %54, %45 ], [ %44, %35 ], [ %34, %33 ], [ %32, %21 ], [ %20, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = load i32, i32* @x.4, align 4
  %13 = load i32, i32* @y.5, align 4
  %14 = add i32 %12, -1
  %15 = mul i32 %14, %12
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %18, %17
  %20 = select i1 %19, i32 -1228349206, i32 -386261016
  br label %.backedge

21:                                               ; preds = %10
  %22 = load i32, i32* @n, align 4
  %23 = icmp sle i32 %.085, %22
  store i1 %23, i1* %4, align 1
  %24 = load i32, i32* @x.4, align 4
  %25 = load i32, i32* @y.5, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 -535447147, i32 -386261016
  br label %.backedge

33:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %34 = select i1 %.0..0..0., i32 478589524, i32 -429388141
  br label %.backedge

35:                                               ; preds = %10
  %36 = load i32, i32* @x.4, align 4
  %37 = load i32, i32* @y.5, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 754364593, i32 -1417
  br label %.backedge

45:                                               ; preds = %10
  %46 = load i32, i32* @x.4, align 4
  %47 = load i32, i32* @y.5, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -1491724351, i32 -1417
  br label %.backedge

55:                                               ; preds = %10
  br label %.backedge

56:                                               ; preds = %10
  %57 = load i32, i32* @m, align 4
  %.not127 = icmp sgt i32 %.087, %57
  %58 = select i1 %.not127, i32 -839220919, i32 -875661931
  br label %.backedge

59:                                               ; preds = %10
  %60 = sext i32 %.085 to i64
  %61 = sext i32 %.087 to i64
  %62 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %60, i64 %61
  %63 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %62)
  br label %.backedge

64:                                               ; preds = %10
  %65 = load i32, i32* @x.4, align 4
  %66 = load i32, i32* @y.5, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 1978245851, i32 -597594888
  br label %.backedge

74:                                               ; preds = %10
  %75 = add i32 %.087, 1
  %76 = load i32, i32* @x.4, align 4
  %77 = load i32, i32* @y.5, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 -406575024, i32 -597594888
  br label %.backedge

85:                                               ; preds = %10
  br label %.backedge

86:                                               ; preds = %10
  %87 = load i32, i32* @x.4, align 4
  %88 = load i32, i32* @y.5, align 4
  %89 = add i32 %87, -1
  %90 = mul i32 %89, %87
  %91 = and i32 %90, 1
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %93, %92
  %95 = select i1 %94, i32 1424357181, i32 -1845499837
  br label %.backedge

96:                                               ; preds = %10
  %97 = load i32, i32* @x.4, align 4
  %98 = load i32, i32* @y.5, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 801075027, i32 -1845499837
  br label %.backedge

106:                                              ; preds = %10
  br label %.backedge

107:                                              ; preds = %10
  %108 = add i32 %.085, 1
  br label %.backedge

109:                                              ; preds = %10
  %110 = load i32, i32* @x.4, align 4
  %111 = load i32, i32* @y.5, align 4
  %112 = add i32 %110, -1
  %113 = mul i32 %112, %110
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %116, %115
  %118 = select i1 %117, i32 -1091077221, i32 61059551
  br label %.backedge

119:                                              ; preds = %10
  %120 = load i32, i32* @x.4, align 4
  %121 = load i32, i32* @y.5, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 930316382, i32 61059551
  br label %.backedge

129:                                              ; preds = %10
  br label %.backedge

130:                                              ; preds = %10
  %131 = load i32, i32* @n, align 4
  %.not126 = icmp sgt i32 %.0103, %131
  %132 = select i1 %.not126, i32 -1583486200, i32 361335003
  br label %.backedge

133:                                              ; preds = %10
  %134 = load i32, i32* @x.4, align 4
  %135 = load i32, i32* @y.5, align 4
  %136 = add i32 %134, -1
  %137 = mul i32 %136, %134
  %138 = and i32 %137, 1
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %140, %139
  %142 = select i1 %141, i32 1580933972, i32 -1249152464
  br label %.backedge

143:                                              ; preds = %10
  %144 = load i32, i32* @x.4, align 4
  %145 = load i32, i32* @y.5, align 4
  %146 = add i32 %144, -1
  %147 = mul i32 %146, %144
  %148 = and i32 %147, 1
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %150, %149
  %152 = select i1 %151, i32 1266205459, i32 -1249152464
  br label %.backedge

153:                                              ; preds = %10
  br label %.backedge

154:                                              ; preds = %10
  %155 = load i32, i32* @x.4, align 4
  %156 = load i32, i32* @y.5, align 4
  %157 = add i32 %155, -1
  %158 = mul i32 %157, %155
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %161, %160
  %163 = select i1 %162, i32 1245306710, i32 737173719
  br label %.backedge

164:                                              ; preds = %10
  %165 = load i32, i32* @m, align 4
  %166 = icmp sle i32 %.0101, %165
  store i1 %166, i1* %3, align 1
  %167 = load i32, i32* @x.4, align 4
  %168 = load i32, i32* @y.5, align 4
  %169 = add i32 %167, -1
  %170 = mul i32 %169, %167
  %171 = and i32 %170, 1
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %173, %172
  %175 = select i1 %174, i32 1999343401, i32 737173719
  br label %.backedge

176:                                              ; preds = %10
  %.0..0..0.82 = load volatile i1, i1* %3, align 1
  %177 = select i1 %.0..0..0.82, i32 1700521866, i32 -1440139333
  br label %.backedge

178:                                              ; preds = %10
  %179 = add i32 %.0103, -1
  %180 = sext i32 %179 to i64
  %181 = sext i32 %.0101 to i64
  %182 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s1, i64 0, i64 %180, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = sext i32 %.0103 to i64
  %185 = add i32 %.0101, -1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s1, i64 0, i64 %184, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = add i32 %188, %183
  %190 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s1, i64 0, i64 %180, i64 %186
  %191 = load i32, i32* %190, align 4
  %192 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %184, i64 %181
  %193 = load i32, i32* %192, align 4
  %194 = sub i32 %189, %191
  %.neg123 = add i32 %194, %193
  %195 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s1, i64 0, i64 %184, i64 %181
  store i32 %.neg123, i32* %195, align 4
  br label %.backedge

196:                                              ; preds = %10
  %197 = load i32, i32* @x.4, align 4
  %198 = load i32, i32* @y.5, align 4
  %199 = add i32 %197, -1
  %200 = mul i32 %199, %197
  %201 = and i32 %200, 1
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %203, %202
  %205 = select i1 %204, i32 1997522365, i32 -272158219
  br label %.backedge

206:                                              ; preds = %10
  %.neg121 = add i32 %.0101, 1
  %207 = load i32, i32* @x.4, align 4
  %208 = load i32, i32* @y.5, align 4
  %209 = add i32 %207, -1
  %210 = mul i32 %209, %207
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %213, %212
  %215 = select i1 %214, i32 917320292, i32 -272158219
  br label %.backedge

216:                                              ; preds = %10
  br label %.backedge

217:                                              ; preds = %10
  br label %.backedge

218:                                              ; preds = %10
  %219 = add i32 %.0103, 1
  br label %.backedge

220:                                              ; preds = %10
  %221 = load i32, i32* @x.4, align 4
  %222 = load i32, i32* @y.5, align 4
  %223 = add i32 %221, -1
  %224 = mul i32 %223, %221
  %225 = and i32 %224, 1
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %227, %226
  %229 = select i1 %228, i32 -138201006, i32 547608943
  br label %.backedge

230:                                              ; preds = %10
  %231 = load i32, i32* @x.4, align 4
  %232 = load i32, i32* @y.5, align 4
  %233 = add i32 %231, -1
  %234 = mul i32 %233, %231
  %235 = and i32 %234, 1
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %237, %236
  %239 = select i1 %238, i32 -900997412, i32 547608943
  br label %.backedge

240:                                              ; preds = %10
  br label %.backedge

241:                                              ; preds = %10
  %242 = load i32, i32* @n, align 4
  %.not120 = icmp sgt i32 %.099, %242
  %243 = select i1 %.not120, i32 -284566065, i32 -418127169
  br label %.backedge

244:                                              ; preds = %10
  %245 = load i32, i32* @x.4, align 4
  %246 = load i32, i32* @y.5, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 1934361531, i32 -1235114806
  br label %.backedge

254:                                              ; preds = %10
  %255 = load i32, i32* @x.4, align 4
  %256 = load i32, i32* @y.5, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 -2006730236, i32 -1235114806
  br label %.backedge

264:                                              ; preds = %10
  br label %.backedge

265:                                              ; preds = %10
  %266 = load i32, i32* @m, align 4
  %.not119 = icmp sgt i32 %.097, %266
  %267 = select i1 %.not119, i32 395866566, i32 -1606984281
  br label %.backedge

268:                                              ; preds = %10
  %269 = add i32 %.099, -1
  %270 = sext i32 %269 to i64
  %271 = sext i32 %.097 to i64
  %272 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s2, i64 0, i64 %270, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = sext i32 %.099 to i64
  %275 = add i32 %.097, -1
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s2, i64 0, i64 %274, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s2, i64 0, i64 %270, i64 %276
  %280 = load i32, i32* %279, align 4
  %281 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %274, i64 %271
  %282 = load i32, i32* %281, align 4
  %283 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %270, i64 %271
  %284 = load i32, i32* %283, align 4
  %285 = and i32 %284, %282
  %286 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %274, i64 %276
  %287 = load i32, i32* %286, align 4
  %.demorgan118 = and i32 %287, %282
  %288 = add i32 %278, %273
  %289 = sub i32 %288, %280
  %290 = add i32 %289, %285
  %291 = add i32 %290, %.demorgan118
  %292 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s2, i64 0, i64 %274, i64 %271
  store i32 %291, i32* %292, align 4
  br label %.backedge

293:                                              ; preds = %10
  %.neg115 = add i32 %.097, 1
  br label %.backedge

294:                                              ; preds = %10
  br label %.backedge

295:                                              ; preds = %10
  %296 = add i32 %.099, 1
  br label %.backedge

297:                                              ; preds = %10
  br label %.backedge

298:                                              ; preds = %10
  %299 = load i32, i32* @n, align 4
  %.not114 = icmp sgt i32 %.095, %299
  %300 = select i1 %.not114, i32 -807842799, i32 -510662642
  br label %.backedge

301:                                              ; preds = %10
  br label %.backedge

302:                                              ; preds = %10
  %303 = load i32, i32* @m, align 4
  %.not113 = icmp sgt i32 %.093, %303
  %304 = select i1 %.not113, i32 -716307986, i32 1089009242
  br label %.backedge

305:                                              ; preds = %10
  %306 = load i32, i32* @x.4, align 4
  %307 = load i32, i32* @y.5, align 4
  %308 = add i32 %306, -1
  %309 = mul i32 %308, %306
  %310 = and i32 %309, 1
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %312, %311
  %314 = select i1 %313, i32 -534698609, i32 -1057842906
  br label %.backedge

315:                                              ; preds = %10
  %316 = sext i32 %.095 to i64
  %317 = add i32 %.093, -1
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s3, i64 0, i64 %316, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = sext i32 %.093 to i64
  %322 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %316, i64 %321
  %323 = load i32, i32* %322, align 4
  %324 = add i32 %.095, -1
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %325, i64 %321
  %327 = load i32, i32* %326, align 4
  %328 = and i32 %327, %323
  %329 = add i32 %328, %320
  %330 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s3, i64 0, i64 %316, i64 %321
  store i32 %329, i32* %330, align 4
  %331 = load i32, i32* @x.4, align 4
  %332 = load i32, i32* @y.5, align 4
  %333 = add i32 %331, -1
  %334 = mul i32 %333, %331
  %335 = and i32 %334, 1
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %337, %336
  %339 = select i1 %338, i32 -1779345978, i32 -1057842906
  br label %.backedge

340:                                              ; preds = %10
  br label %.backedge

341:                                              ; preds = %10
  %342 = load i32, i32* @x.4, align 4
  %343 = load i32, i32* @y.5, align 4
  %344 = add i32 %342, -1
  %345 = mul i32 %344, %342
  %346 = and i32 %345, 1
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %348, %347
  %350 = select i1 %349, i32 2016449621, i32 1544728416
  br label %.backedge

351:                                              ; preds = %10
  %352 = add i32 %.093, 1
  %353 = load i32, i32* @x.4, align 4
  %354 = load i32, i32* @y.5, align 4
  %355 = add i32 %353, -1
  %356 = mul i32 %355, %353
  %357 = and i32 %356, 1
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %359, %358
  %361 = select i1 %360, i32 872901083, i32 1544728416
  br label %.backedge

362:                                              ; preds = %10
  br label %.backedge

363:                                              ; preds = %10
  br label %.backedge

364:                                              ; preds = %10
  %365 = add i32 %.095, 1
  br label %.backedge

366:                                              ; preds = %10
  br label %.backedge

367:                                              ; preds = %10
  %368 = load i32, i32* @x.4, align 4
  %369 = load i32, i32* @y.5, align 4
  %370 = add i32 %368, -1
  %371 = mul i32 %370, %368
  %372 = and i32 %371, 1
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %374, %373
  %376 = select i1 %375, i32 -2034830204, i32 -333084511
  br label %.backedge

377:                                              ; preds = %10
  %378 = load i32, i32* @m, align 4
  %379 = icmp sle i32 %.091, %378
  store i1 %379, i1* %2, align 1
  %380 = load i32, i32* @x.4, align 4
  %381 = load i32, i32* @y.5, align 4
  %382 = add i32 %380, -1
  %383 = mul i32 %382, %380
  %384 = and i32 %383, 1
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %386, %385
  %388 = select i1 %387, i32 -772930519, i32 -333084511
  br label %.backedge

389:                                              ; preds = %10
  %.0..0..0.83 = load volatile i1, i1* %2, align 1
  %390 = select i1 %.0..0..0.83, i32 -1101388286, i32 -1330916337
  br label %.backedge

391:                                              ; preds = %10
  br label %.backedge

392:                                              ; preds = %10
  %393 = load i32, i32* @x.4, align 4
  %394 = load i32, i32* @y.5, align 4
  %395 = add i32 %393, -1
  %396 = mul i32 %395, %393
  %397 = and i32 %396, 1
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %399, %398
  %401 = select i1 %400, i32 1912653852, i32 -1705437747
  br label %.backedge

402:                                              ; preds = %10
  %403 = load i32, i32* @n, align 4
  %404 = icmp sle i32 %.089, %403
  store i1 %404, i1* %1, align 1
  %405 = load i32, i32* @x.4, align 4
  %406 = load i32, i32* @y.5, align 4
  %407 = add i32 %405, -1
  %408 = mul i32 %407, %405
  %409 = and i32 %408, 1
  %410 = icmp eq i32 %409, 0
  %411 = icmp slt i32 %406, 10
  %412 = or i1 %411, %410
  %413 = select i1 %412, i32 -1020273124, i32 -1705437747
  br label %.backedge

414:                                              ; preds = %10
  %.0..0..0.84 = load volatile i1, i1* %1, align 1
  %415 = select i1 %.0..0..0.84, i32 -320777452, i32 -691346420
  br label %.backedge

416:                                              ; preds = %10
  %417 = add i32 %.089, -1
  %418 = sext i32 %417 to i64
  %419 = sext i32 %.091 to i64
  %420 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s4, i64 0, i64 %418, i64 %419
  %421 = load i32, i32* %420, align 4
  %422 = sext i32 %.089 to i64
  %423 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %422, i64 %419
  %424 = load i32, i32* %423, align 4
  %425 = add i32 %.091, -1
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %422, i64 %426
  %428 = load i32, i32* %427, align 4
  %.demorgan110 = and i32 %428, %424
  %429 = add i32 %.demorgan110, %421
  %430 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s4, i64 0, i64 %422, i64 %419
  store i32 %429, i32* %430, align 4
  br label %.backedge

431:                                              ; preds = %10
  %432 = add i32 %.089, 1
  br label %.backedge

433:                                              ; preds = %10
  %434 = load i32, i32* @x.4, align 4
  %435 = load i32, i32* @y.5, align 4
  %436 = add i32 %434, -1
  %437 = mul i32 %436, %434
  %438 = and i32 %437, 1
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %440, %439
  %442 = select i1 %441, i32 1487541998, i32 -76488949
  br label %.backedge

443:                                              ; preds = %10
  %444 = load i32, i32* @x.4, align 4
  %445 = load i32, i32* @y.5, align 4
  %446 = add i32 %444, -1
  %447 = mul i32 %446, %444
  %448 = and i32 %447, 1
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %450, %449
  %452 = select i1 %451, i32 -2072690176, i32 -76488949
  br label %.backedge

453:                                              ; preds = %10
  br label %.backedge

454:                                              ; preds = %10
  %.neg109 = add i32 %.091, 1
  br label %.backedge

455:                                              ; preds = %10
  br label %.backedge

456:                                              ; preds = %10
  %457 = load i32, i32* @q, align 4
  %.neg108 = add i32 %457, -1
  store i32 %.neg108, i32* @q, align 4
  %.not = icmp eq i32 %457, 0
  %458 = select i1 %.not, i32 1586622355, i32 858833309
  br label %.backedge

459:                                              ; preds = %10
  %460 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8)
  %461 = load i32, i32* %7, align 4
  %462 = sext i32 %461 to i64
  %463 = load i32, i32* %8, align 4
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s1, i64 0, i64 %462, i64 %464
  %466 = load i32, i32* %465, align 4
  %467 = load i32, i32* %5, align 4
  %468 = add i32 %467, -1
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s1, i64 0, i64 %469, i64 %464
  %471 = load i32, i32* %470, align 4
  %472 = load i32, i32* %6, align 4
  %473 = add i32 %472, -1
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s1, i64 0, i64 %462, i64 %474
  %476 = load i32, i32* %475, align 4
  %477 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s1, i64 0, i64 %469, i64 %474
  %478 = load i32, i32* %477, align 4
  %479 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s2, i64 0, i64 %462, i64 %464
  %480 = load i32, i32* %479, align 4
  %481 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s2, i64 0, i64 %469, i64 %464
  %482 = load i32, i32* %481, align 4
  %483 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s2, i64 0, i64 %462, i64 %474
  %484 = load i32, i32* %483, align 4
  %485 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s2, i64 0, i64 %469, i64 %474
  %486 = load i32, i32* %485, align 4
  %487 = sext i32 %467 to i64
  %488 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s3, i64 0, i64 %487, i64 %464
  %489 = load i32, i32* %488, align 4
  %490 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s3, i64 0, i64 %487, i64 %474
  %491 = load i32, i32* %490, align 4
  %492 = sext i32 %472 to i64
  %493 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s4, i64 0, i64 %462, i64 %492
  %494 = load i32, i32* %493, align 4
  %495 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s4, i64 0, i64 %469, i64 %492
  %496 = load i32, i32* %495, align 4
  %497 = add i32 %471, %476
  %498 = add i32 %466, %478
  %499 = add i32 %497, %480
  %500 = sub i32 %498, %499
  %501 = add i32 %500, %482
  %502 = add i32 %501, %484
  %503 = add i32 %502, %489
  %504 = add i32 %486, %491
  %505 = add i32 %503, %494
  %506 = add i32 %504, %496
  %507 = sub i32 %505, %506
  %508 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %507)
  br label %.backedge

509:                                              ; preds = %10
  %510 = load i32, i32* @x.4, align 4
  %511 = load i32, i32* @y.5, align 4
  %512 = add i32 %510, -1
  %513 = mul i32 %512, %510
  %514 = and i32 %513, 1
  %515 = icmp eq i32 %514, 0
  %516 = icmp slt i32 %511, 10
  %517 = or i1 %516, %515
  %518 = select i1 %517, i32 -1185154013, i32 -1363108581
  br label %.backedge

519:                                              ; preds = %10
  %520 = load i32, i32* @x.4, align 4
  %521 = load i32, i32* @y.5, align 4
  %522 = add i32 %520, -1
  %523 = mul i32 %522, %520
  %524 = and i32 %523, 1
  %525 = icmp eq i32 %524, 0
  %526 = icmp slt i32 %521, 10
  %527 = or i1 %526, %525
  %528 = select i1 %527, i32 1878139066, i32 -1363108581
  br label %.backedge

529:                                              ; preds = %10
  ret i32 0

530:                                              ; preds = %10
  br label %.backedge

531:                                              ; preds = %10
  br label %.backedge

532:                                              ; preds = %10
  %.neg105 = add i32 %.087, 1
  br label %.backedge

533:                                              ; preds = %10
  br label %.backedge

534:                                              ; preds = %10
  br label %.backedge

535:                                              ; preds = %10
  br label %.backedge

536:                                              ; preds = %10
  br label %.backedge

537:                                              ; preds = %10
  %538 = add i32 %.0101, 1
  br label %.backedge

539:                                              ; preds = %10
  br label %.backedge

540:                                              ; preds = %10
  br label %.backedge

541:                                              ; preds = %10
  %542 = sext i32 %.095 to i64
  %543 = add i32 %.093, -1
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s3, i64 0, i64 %542, i64 %544
  %546 = load i32, i32* %545, align 4
  %547 = sext i32 %.093 to i64
  %548 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %542, i64 %547
  %549 = load i32, i32* %548, align 4
  %550 = add i32 %.095, -1
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @a, i64 0, i64 %551, i64 %547
  %553 = load i32, i32* %552, align 4
  %.demorgan = and i32 %553, %549
  %554 = add i32 %.demorgan, %546
  %555 = getelementptr inbounds [2010 x [2010 x i32]], [2010 x [2010 x i32]]* @s3, i64 0, i64 %542, i64 %547
  store i32 %554, i32* %555, align 4
  br label %.backedge

556:                                              ; preds = %10
  %.neg = add i32 %.093, 1
  br label %.backedge

557:                                              ; preds = %10
  br label %.backedge

558:                                              ; preds = %10
  br label %.backedge

559:                                              ; preds = %10
  br label %.backedge

560:                                              ; preds = %10
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s893762276.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
