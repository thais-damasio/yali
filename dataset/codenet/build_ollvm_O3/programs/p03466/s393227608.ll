; ModuleID = 'build_ollvm/programs/p03466/s393227608.ll'
source_filename = "Project_CodeNet_C++1400/p03466/s393227608.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3minIiERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@za = local_unnamed_addr global i32 0, align 4
@zb = local_unnamed_addr global i32 0, align 4
@la = local_unnamed_addr global i32 0, align 4
@lb = local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s393227608.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1688669292, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1688669292, label %11
    i32 -426677734, label %14
    i32 848283543, label %25
    i32 1017749181, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -426677734, i32 1017749181
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 848283543, i32 1017749181
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -426677734, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define zeroext i1 @_Z5checkiiii(i32 %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #4 {
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = sub i32 %1, %0
  %9 = sub i32 %2, %0
  %10 = add i32 %3, -1
  %11 = sdiv i32 %8, %10
  %12 = srem i32 %8, %10
  %13 = icmp ne i32 %12, 0
  %14 = zext i1 %13 to i32
  %15 = add i32 %11, %14
  store i32 %15, i32* @za, align 4
  %16 = sdiv i32 %9, %10
  %17 = srem i32 %9, %10
  %18 = icmp ne i32 %17, 0
  %19 = zext i1 %18 to i32
  %20 = add i32 %16, %19
  store i32 %20, i32* @zb, align 4
  %21 = add i32 %20, %15
  store i32 %21, i32* %7, align 4
  %22 = add i32 %0, 1
  store i32 %22, i32* %6, align 4
  %23 = load i32, i32* @x.4, align 4
  %24 = load i32, i32* @y.5, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 2112800756, i32 -1636450536
  %32 = select i1 %30, i32 -1166856039, i32 -1636450536
  br label %.outer

.outer:                                           ; preds = %33, %4
  %.018.ph = phi i1 [ undef, %4 ], [ %.018.ph23, %33 ]
  %.0.ph = phi i32 [ -528156444, %4 ], [ %31, %33 ]
  br label %.outer22

.outer22:                                         ; preds = %.outer22.backedge, %.outer
  %.018.ph23 = phi i1 [ %.018.ph, %.outer ], [ %.018.ph23.be, %.outer22.backedge ]
  %.0.ph24 = phi i32 [ %.0.ph, %.outer ], [ -949892618, %.outer22.backedge ]
  br label %.outer25

.outer25:                                         ; preds = %.outer25.backedge, %.outer22
  %.0.ph26 = phi i32 [ %.0.ph24, %.outer22 ], [ %.0.ph26.be, %.outer25.backedge ]
  br label %33

33:                                               ; preds = %.outer25, %33
  switch i32 %.0.ph26, label %33 [
    i32 -528156444, label %34
    i32 1393880436, label %.outer22.backedge
    i32 1017617510, label %37
    i32 -949892618, label %.outer25.backedge
    i32 -1166856039, label %.outer
    i32 2112800756, label %38
    i32 -1636450536, label %39
  ]

34:                                               ; preds = %33
  %.0..0..0.15 = load volatile i32, i32* %7, align 4
  %.0..0..0.16 = load volatile i32, i32* %6, align 4
  %35 = icmp sgt i32 %.0..0..0.15, %.0..0..0.16
  %36 = select i1 %35, i32 1393880436, i32 1017617510
  br label %.outer25.backedge

37:                                               ; preds = %33
  br label %.outer22.backedge

.outer22.backedge:                                ; preds = %33, %37
  %.018.ph23.be = phi i1 [ false, %37 ], [ true, %33 ]
  br label %.outer22

38:                                               ; preds = %33
  store i1 %.018.ph, i1* %5, align 1
  %.0..0..0.17 = load volatile i1, i1* %5, align 1
  ret i1 %.0..0..0.17

39:                                               ; preds = %33
  br label %.outer25.backedge

.outer25.backedge:                                ; preds = %33, %39, %34
  %.0.ph26.be = phi i32 [ %36, %34 ], [ -1166856039, %39 ], [ %32, %33 ]
  br label %.outer25
}

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %3)
  br label %9

9:                                                ; preds = %.backedge, %0
  %.0102 = phi i32 [ undef, %0 ], [ %.0102.be, %.backedge ]
  %.0100 = phi i32 [ undef, %0 ], [ %.0100.be, %.backedge ]
  %.098 = phi i32 [ undef, %0 ], [ %.098.be, %.backedge ]
  %.096 = phi i32 [ undef, %0 ], [ %.096.be, %.backedge ]
  %.094 = phi i32 [ undef, %0 ], [ %.094.be, %.backedge ]
  %.092 = phi i32 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i32 [ undef, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i32 [ undef, %0 ], [ %.088.be, %.backedge ]
  %.086 = phi i32 [ undef, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i32 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i32 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.0 = phi i32 [ -271087090, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -271087090, label %10
    i32 1503238610, label %14
    i32 -1689509447, label %21
    i32 -764236991, label %33
    i32 -1358017222, label %35
    i32 -146297414, label %45
    i32 -215463552, label %57
    i32 -2128851384, label %59
    i32 217961398, label %64
    i32 1216561315, label %74
    i32 -851607996, label %85
    i32 1155917174, label %86
    i32 -223369230, label %96
    i32 344431374, label %106
    i32 -899404878, label %107
    i32 568300837, label %108
    i32 -1213153582, label %113
    i32 351348552, label %126
    i32 1412134887, label %128
    i32 -2131866528, label %131
    i32 843052758, label %141
    i32 1864934626, label %159
    i32 -1158793033, label %160
    i32 279114868, label %162
    i32 423047456, label %163
    i32 176494060, label %173
    i32 546330936, label %183
    i32 -2059819726, label %184
    i32 -737656900, label %186
    i32 143611067, label %189
    i32 -202529345, label %192
    i32 1889508668, label %194
    i32 576069191, label %204
    i32 1509360725, label %214
    i32 -2070641643, label %215
    i32 36792064, label %216
    i32 -1691816553, label %219
    i32 -128484725, label %221
    i32 -1362796655, label %228
    i32 150507470, label %230
    i32 661704546, label %232
    i32 344752087, label %242
    i32 -89852532, label %252
    i32 -1733745584, label %253
    i32 903826318, label %263
    i32 787976619, label %293
    i32 1416652842, label %294
    i32 -1138661312, label %297
    i32 -4238846, label %299
    i32 1906903119, label %309
    i32 -1095839814, label %323
    i32 -1384416527, label %324
    i32 1754576062, label %334
    i32 -1349366337, label %348
    i32 484508158, label %350
    i32 2115431943, label %358
    i32 291066610, label %367
    i32 1155332163, label %368
    i32 -1419762217, label %369
    i32 1864470538, label %371
    i32 470414503, label %372
    i32 182676113, label %373
    i32 76867738, label %374
    i32 1260449236, label %376
    i32 -221053980, label %377
    i32 -508512633, label %387
    i32 -1417856486, label %388
    i32 -1181447099, label %389
    i32 56105355, label %390
    i32 -29538547, label %410
    i32 2037766848, label %414
  ]

.backedge:                                        ; preds = %9, %414, %410, %390, %389, %388, %387, %377, %376, %374, %373, %371, %369, %368, %367, %358, %350, %348, %334, %324, %323, %309, %299, %297, %294, %293, %263, %253, %252, %242, %232, %230, %228, %221, %219, %216, %215, %214, %204, %194, %192, %189, %186, %184, %183, %173, %163, %162, %160, %159, %141, %131, %128, %126, %113, %108, %107, %106, %96, %86, %85, %74, %64, %59, %57, %45, %35, %33, %21, %14, %10
  %.0102.be = phi i32 [ %.0102, %9 ], [ %.0102, %414 ], [ %.0102, %410 ], [ %.0102, %390 ], [ %.0102, %389 ], [ %.0102, %388 ], [ %.0102, %387 ], [ %.0102, %377 ], [ %.0102, %376 ], [ %375, %374 ], [ %.0102, %373 ], [ %.0102, %371 ], [ %.0102, %369 ], [ %.0102, %368 ], [ %.0102, %367 ], [ %.0102, %358 ], [ %.0102, %350 ], [ %.0102, %348 ], [ %.0102, %334 ], [ %.0102, %324 ], [ %.0102, %323 ], [ %.0102, %309 ], [ %.0102, %299 ], [ %.0102, %297 ], [ %.0102, %294 ], [ %.0102, %293 ], [ %.0102, %263 ], [ %.0102, %253 ], [ %.0102, %252 ], [ %.0102, %242 ], [ %.0102, %232 ], [ %.0102, %230 ], [ %.0102, %228 ], [ %.0102, %221 ], [ %.0102, %219 ], [ %.0102, %216 ], [ %.0102, %215 ], [ %.0102, %214 ], [ %.0102, %204 ], [ %.0102, %194 ], [ %.0102, %192 ], [ %.0102, %189 ], [ %.0102, %186 ], [ %.0102, %184 ], [ %.0102, %183 ], [ %.0102, %173 ], [ %.0102, %163 ], [ %.0102, %162 ], [ %.0102, %160 ], [ %.0102, %159 ], [ %.0102, %141 ], [ %.0102, %131 ], [ %.0102, %128 ], [ %.0102, %126 ], [ %.0102, %113 ], [ %.0102, %108 ], [ %.0102, %107 ], [ %.0102, %106 ], [ %.0102, %96 ], [ %.0102, %86 ], [ %.0102, %85 ], [ %75, %74 ], [ %.0102, %64 ], [ %.0102, %59 ], [ %.0102, %57 ], [ %.0102, %45 ], [ %.0102, %35 ], [ %34, %33 ], [ %.0102, %21 ], [ %.0102, %14 ], [ %.0102, %10 ]
  %.0100.be = phi i32 [ %.0100, %9 ], [ %.0100, %414 ], [ %.0100, %410 ], [ %.0100, %390 ], [ %.0100, %389 ], [ %.0100, %388 ], [ %.0100, %387 ], [ %.0100, %377 ], [ %.0100, %376 ], [ %.0100, %374 ], [ %.0100, %373 ], [ %.0100, %371 ], [ %.0100, %369 ], [ %.0100, %368 ], [ %.0100, %367 ], [ %.0100, %358 ], [ %.0100, %350 ], [ %.0100, %348 ], [ %.0100, %334 ], [ %.0100, %324 ], [ %.0100, %323 ], [ %.0100, %309 ], [ %.0100, %299 ], [ %.0100, %297 ], [ %.0100, %294 ], [ %.0100, %293 ], [ %.0100, %263 ], [ %.0100, %253 ], [ %.0100, %252 ], [ %.0100, %242 ], [ %.0100, %232 ], [ %.0100, %230 ], [ %.0100, %228 ], [ %.0100, %221 ], [ %.0100, %219 ], [ %.0100, %216 ], [ %.0100, %215 ], [ %.0100, %214 ], [ %.0100, %204 ], [ %.0100, %194 ], [ %.0100, %192 ], [ %.0100, %189 ], [ %.0100, %186 ], [ %.0100, %184 ], [ %.0100, %183 ], [ %.0100, %173 ], [ %.0100, %163 ], [ %.0100, %162 ], [ %161, %160 ], [ %.0100, %159 ], [ %.0100, %141 ], [ %.0100, %131 ], [ %.0100, %128 ], [ %127, %126 ], [ %.0100, %113 ], [ %.0100, %108 ], [ %.0100, %107 ], [ %.0100, %106 ], [ %.0100, %96 ], [ %.0100, %86 ], [ %.0100, %85 ], [ %.0100, %74 ], [ %.0100, %64 ], [ %.0100, %59 ], [ %.0100, %57 ], [ %.0100, %45 ], [ %.0100, %35 ], [ %.0100, %33 ], [ %.0100, %21 ], [ %.0100, %14 ], [ %.0100, %10 ]
  %.098.be = phi i32 [ %.098, %9 ], [ %.098, %414 ], [ %.098, %410 ], [ %.098, %390 ], [ %.098, %389 ], [ %.098, %388 ], [ %.098, %387 ], [ %.098, %377 ], [ %.098, %376 ], [ %.098, %374 ], [ %.098, %373 ], [ %.098, %371 ], [ %.098, %369 ], [ %.098, %368 ], [ %.098, %367 ], [ %.098, %358 ], [ %.098, %350 ], [ %.098, %348 ], [ %.098, %334 ], [ %.098, %324 ], [ %.098, %323 ], [ %.098, %309 ], [ %.098, %299 ], [ %.098, %297 ], [ %.098, %294 ], [ %.098, %293 ], [ %.098, %263 ], [ %.098, %253 ], [ %.098, %252 ], [ %.098, %242 ], [ %.098, %232 ], [ %.098, %230 ], [ %.098, %228 ], [ %.098, %221 ], [ %.098, %219 ], [ %.098, %216 ], [ %.098, %215 ], [ %.098, %214 ], [ %.098, %204 ], [ %.098, %194 ], [ %193, %192 ], [ %.098, %189 ], [ %.098, %186 ], [ %185, %184 ], [ %.098, %183 ], [ %.098, %173 ], [ %.098, %163 ], [ %.098, %162 ], [ %.098, %160 ], [ %.098, %159 ], [ %.098, %141 ], [ %.098, %131 ], [ %.098, %128 ], [ %.098, %126 ], [ %.098, %113 ], [ %.098, %108 ], [ %.098, %107 ], [ %.098, %106 ], [ %.098, %96 ], [ %.098, %86 ], [ %.098, %85 ], [ %.098, %74 ], [ %.098, %64 ], [ %.098, %59 ], [ %.098, %57 ], [ %.098, %45 ], [ %.098, %35 ], [ %.098, %33 ], [ %.098, %21 ], [ %.098, %14 ], [ %.098, %10 ]
  %.096.be = phi i32 [ %.096, %9 ], [ %.096, %414 ], [ %.096, %410 ], [ %.096, %390 ], [ %.096, %389 ], [ %.096, %388 ], [ %.096, %387 ], [ %.096, %377 ], [ %.096, %376 ], [ %.096, %374 ], [ %.096, %373 ], [ %.096, %371 ], [ %.096, %369 ], [ %.096, %368 ], [ %.096, %367 ], [ %.096, %358 ], [ %.096, %350 ], [ %.096, %348 ], [ %.096, %334 ], [ %.096, %324 ], [ %.096, %323 ], [ %.096, %309 ], [ %.096, %299 ], [ %.096, %297 ], [ %.096, %294 ], [ %.096, %293 ], [ %.096, %263 ], [ %.096, %253 ], [ %.096, %252 ], [ %.096, %242 ], [ %.096, %232 ], [ %.096, %230 ], [ %229, %228 ], [ %.096, %221 ], [ %.096, %219 ], [ 1, %216 ], [ %.096, %215 ], [ %.096, %214 ], [ %.096, %204 ], [ %.096, %194 ], [ %.096, %192 ], [ %.096, %189 ], [ %.096, %186 ], [ %.096, %184 ], [ %.096, %183 ], [ %.096, %173 ], [ %.096, %163 ], [ %.096, %162 ], [ %.096, %160 ], [ %.096, %159 ], [ %.096, %141 ], [ %.096, %131 ], [ %.096, %128 ], [ %.096, %126 ], [ %.096, %113 ], [ %.096, %108 ], [ %.096, %107 ], [ %.096, %106 ], [ %.096, %96 ], [ %.096, %86 ], [ %.096, %85 ], [ %.096, %74 ], [ %.096, %64 ], [ %.096, %59 ], [ %.096, %57 ], [ %.096, %45 ], [ %.096, %35 ], [ %.096, %33 ], [ %.096, %21 ], [ %.096, %14 ], [ %.096, %10 ]
  %.094.be = phi i32 [ %.094, %9 ], [ %.094, %414 ], [ %.094, %410 ], [ %.094, %390 ], [ %.094, %389 ], [ %.094, %388 ], [ %.094, %387 ], [ %.094, %377 ], [ %.094, %376 ], [ %.094, %374 ], [ %.094, %373 ], [ %.094, %371 ], [ %.094, %369 ], [ %.094, %368 ], [ %.094, %367 ], [ %.094, %358 ], [ %.094, %350 ], [ %.094, %348 ], [ %.094, %334 ], [ %.094, %324 ], [ %.094, %323 ], [ %.094, %309 ], [ %.094, %299 ], [ %.094, %297 ], [ %.094, %294 ], [ %.094, %293 ], [ %.094, %263 ], [ %.094, %253 ], [ %.094, %252 ], [ %.094, %242 ], [ %.094, %232 ], [ %231, %230 ], [ %.094, %228 ], [ %.094, %221 ], [ %.094, %219 ], [ %218, %216 ], [ %.094, %215 ], [ %.094, %214 ], [ %.094, %204 ], [ %.094, %194 ], [ %.094, %192 ], [ %.094, %189 ], [ %.094, %186 ], [ %.094, %184 ], [ %.094, %183 ], [ %.094, %173 ], [ %.094, %163 ], [ %.094, %162 ], [ %.094, %160 ], [ %.094, %159 ], [ %.094, %141 ], [ %.094, %131 ], [ %.094, %128 ], [ %.094, %126 ], [ %.094, %113 ], [ %.094, %108 ], [ %.094, %107 ], [ %.094, %106 ], [ %.094, %96 ], [ %.094, %86 ], [ %.094, %85 ], [ %.094, %74 ], [ %.094, %64 ], [ %.094, %59 ], [ %.094, %57 ], [ %.094, %45 ], [ %.094, %35 ], [ %.094, %33 ], [ %.094, %21 ], [ %.094, %14 ], [ %.094, %10 ]
  %.092.be = phi i32 [ %.092, %9 ], [ %.092, %414 ], [ %.092, %410 ], [ %.092, %390 ], [ %.092, %389 ], [ %.092, %388 ], [ %.092, %387 ], [ %.092, %377 ], [ %.092, %376 ], [ %.092, %374 ], [ %.092, %373 ], [ %.092, %371 ], [ %.092, %369 ], [ %.092, %368 ], [ %.092, %367 ], [ %.092, %358 ], [ %.092, %350 ], [ %.092, %348 ], [ %.092, %334 ], [ %.092, %324 ], [ %.092, %323 ], [ %.092, %309 ], [ %.092, %299 ], [ %.092, %297 ], [ %.092, %294 ], [ %.092, %293 ], [ %.092, %263 ], [ %.092, %253 ], [ %.092, %252 ], [ %.092, %242 ], [ %.092, %232 ], [ %.090, %230 ], [ %.092, %228 ], [ %.092, %221 ], [ %.092, %219 ], [ %.092, %216 ], [ %.092, %215 ], [ %.092, %214 ], [ %.092, %204 ], [ %.092, %194 ], [ %.092, %192 ], [ %.092, %189 ], [ %.092, %186 ], [ %.092, %184 ], [ %.092, %183 ], [ %.092, %173 ], [ %.092, %163 ], [ %.092, %162 ], [ %.092, %160 ], [ %.092, %159 ], [ %.092, %141 ], [ %.092, %131 ], [ %.092, %128 ], [ %.092, %126 ], [ %.092, %113 ], [ %.092, %108 ], [ %.092, %107 ], [ %.092, %106 ], [ %.092, %96 ], [ %.092, %86 ], [ %.092, %85 ], [ %.092, %74 ], [ %.092, %64 ], [ %.092, %59 ], [ %.092, %57 ], [ %.092, %45 ], [ %.092, %35 ], [ %.092, %33 ], [ %.092, %21 ], [ %.092, %14 ], [ %.092, %10 ]
  %.090.be = phi i32 [ %.090, %9 ], [ %.090, %414 ], [ %.090, %410 ], [ %.090, %390 ], [ %.090, %389 ], [ %.090, %388 ], [ %.090, %387 ], [ %.090, %377 ], [ %.090, %376 ], [ %.090, %374 ], [ %.090, %373 ], [ %.090, %371 ], [ %.090, %369 ], [ %.090, %368 ], [ %.090, %367 ], [ %.090, %358 ], [ %.090, %350 ], [ %.090, %348 ], [ %.090, %334 ], [ %.090, %324 ], [ %.090, %323 ], [ %.090, %309 ], [ %.090, %299 ], [ %.090, %297 ], [ %.090, %294 ], [ %.090, %293 ], [ %.090, %263 ], [ %.090, %253 ], [ %.090, %252 ], [ %.090, %242 ], [ %.090, %232 ], [ %.090, %230 ], [ %.090, %228 ], [ %223, %221 ], [ %.090, %219 ], [ %.090, %216 ], [ %.090, %215 ], [ %.090, %214 ], [ %.090, %204 ], [ %.090, %194 ], [ %.090, %192 ], [ %.090, %189 ], [ %.090, %186 ], [ %.090, %184 ], [ %.090, %183 ], [ %.090, %173 ], [ %.090, %163 ], [ %.090, %162 ], [ %.090, %160 ], [ %.090, %159 ], [ %.090, %141 ], [ %.090, %131 ], [ %.090, %128 ], [ %.090, %126 ], [ %.090, %113 ], [ %.090, %108 ], [ %.090, %107 ], [ %.090, %106 ], [ %.090, %96 ], [ %.090, %86 ], [ %.090, %85 ], [ %.090, %74 ], [ %.090, %64 ], [ %.090, %59 ], [ %.090, %57 ], [ %.090, %45 ], [ %.090, %35 ], [ %.090, %33 ], [ %.090, %21 ], [ %.090, %14 ], [ %.090, %10 ]
  %.088.be = phi i32 [ %.088, %9 ], [ %.088, %414 ], [ %.088, %410 ], [ %.088, %390 ], [ %.088, %389 ], [ %.088, %388 ], [ %.088, %387 ], [ %.088, %377 ], [ %.088, %376 ], [ %.088, %374 ], [ %.088, %373 ], [ %.088, %371 ], [ %.088, %369 ], [ %.088, %368 ], [ %.088, %367 ], [ %.088, %358 ], [ %.088, %350 ], [ %.088, %348 ], [ %.088, %334 ], [ %.088, %324 ], [ %.088, %323 ], [ %.088, %309 ], [ %.088, %299 ], [ %.088, %297 ], [ %.088, %294 ], [ %.088, %293 ], [ %.088, %263 ], [ %.088, %253 ], [ %.088, %252 ], [ %.088, %242 ], [ %.088, %232 ], [ %.088, %230 ], [ %.088, %228 ], [ %.088, %221 ], [ %.088, %219 ], [ %.088, %216 ], [ %.088, %215 ], [ %.088, %214 ], [ %.088, %204 ], [ %.088, %194 ], [ %.088, %192 ], [ %.088, %189 ], [ %.088, %186 ], [ %.088, %184 ], [ %.088, %183 ], [ %.088, %173 ], [ %.088, %163 ], [ %.088, %162 ], [ %.088, %160 ], [ %.088, %159 ], [ %.088, %141 ], [ %.088, %131 ], [ %.088, %128 ], [ %.088, %126 ], [ %.neg136, %113 ], [ %.088, %108 ], [ %.088, %107 ], [ %.088, %106 ], [ %.088, %96 ], [ %.088, %86 ], [ %.088, %85 ], [ %.088, %74 ], [ %.088, %64 ], [ %.088, %59 ], [ %.088, %57 ], [ %.088, %45 ], [ %.088, %35 ], [ %.088, %33 ], [ %27, %21 ], [ %.088, %14 ], [ %.088, %10 ]
  %.086.be = phi i32 [ %.086, %9 ], [ %.086, %414 ], [ %.086, %410 ], [ %394, %390 ], [ %.086, %389 ], [ %.086, %388 ], [ %.086, %387 ], [ %.086, %377 ], [ %.086, %376 ], [ %.086, %374 ], [ %.086, %373 ], [ %.086, %371 ], [ %.086, %369 ], [ %.086, %368 ], [ %.086, %367 ], [ %.086, %358 ], [ %.086, %350 ], [ %.086, %348 ], [ %.086, %334 ], [ %.086, %324 ], [ %.086, %323 ], [ %.086, %309 ], [ %.086, %299 ], [ %.086, %297 ], [ %.086, %294 ], [ %.086, %293 ], [ %267, %263 ], [ %.086, %253 ], [ %.086, %252 ], [ %.086, %242 ], [ %.086, %232 ], [ %.086, %230 ], [ %.086, %228 ], [ %.086, %221 ], [ %.086, %219 ], [ %.086, %216 ], [ %.086, %215 ], [ %.086, %214 ], [ %.086, %204 ], [ %.086, %194 ], [ %.086, %192 ], [ %.086, %189 ], [ %.086, %186 ], [ %.086, %184 ], [ %.086, %183 ], [ %.086, %173 ], [ %.086, %163 ], [ %.086, %162 ], [ %.086, %160 ], [ %.086, %159 ], [ %.086, %141 ], [ %.086, %131 ], [ %.086, %128 ], [ %.086, %126 ], [ %.086, %113 ], [ %.086, %108 ], [ %.086, %107 ], [ %.086, %106 ], [ %.086, %96 ], [ %.086, %86 ], [ %.086, %85 ], [ %.086, %74 ], [ %.086, %64 ], [ %.086, %59 ], [ %.086, %57 ], [ %.086, %45 ], [ %.086, %35 ], [ %.086, %33 ], [ %.086, %21 ], [ %.086, %14 ], [ %.086, %10 ]
  %.084.be = phi i32 [ %.084, %9 ], [ %.084, %414 ], [ %.084, %410 ], [ %395, %390 ], [ %.084, %389 ], [ %.084, %388 ], [ %.084, %387 ], [ %.084, %377 ], [ %.084, %376 ], [ %.084, %374 ], [ %.084, %373 ], [ %.084, %371 ], [ %.084, %369 ], [ %.084, %368 ], [ %.084, %367 ], [ %.084, %358 ], [ %.084, %350 ], [ %.084, %348 ], [ %.084, %334 ], [ %.084, %324 ], [ %.084, %323 ], [ %.084, %309 ], [ %.084, %299 ], [ %.084, %297 ], [ %.084, %294 ], [ %.084, %293 ], [ %268, %263 ], [ %.084, %253 ], [ %.084, %252 ], [ %.084, %242 ], [ %.084, %232 ], [ %.084, %230 ], [ %.084, %228 ], [ %.084, %221 ], [ %.084, %219 ], [ %.084, %216 ], [ %.084, %215 ], [ %.084, %214 ], [ %.084, %204 ], [ %.084, %194 ], [ %.084, %192 ], [ %.084, %189 ], [ %.084, %186 ], [ %.084, %184 ], [ %.084, %183 ], [ %.084, %173 ], [ %.084, %163 ], [ %.084, %162 ], [ %.084, %160 ], [ %.084, %159 ], [ %.084, %141 ], [ %.084, %131 ], [ %.084, %128 ], [ %.084, %126 ], [ %.084, %113 ], [ %.084, %108 ], [ %.084, %107 ], [ %.084, %106 ], [ %.084, %96 ], [ %.084, %86 ], [ %.084, %85 ], [ %.084, %74 ], [ %.084, %64 ], [ %.084, %59 ], [ %.084, %57 ], [ %.084, %45 ], [ %.084, %35 ], [ %.084, %33 ], [ %.084, %21 ], [ %.084, %14 ], [ %.084, %10 ]
  %.082.be = phi i32 [ %.082, %9 ], [ %.082, %414 ], [ %.082, %410 ], [ %405, %390 ], [ %.082, %389 ], [ %.082, %388 ], [ %.082, %387 ], [ %.082, %377 ], [ %.082, %376 ], [ %.082, %374 ], [ %.082, %373 ], [ %.082, %371 ], [ %.082, %369 ], [ %.082, %368 ], [ %.082, %367 ], [ %.082, %358 ], [ %.082, %350 ], [ %.082, %348 ], [ %.082, %334 ], [ %.082, %324 ], [ %.082, %323 ], [ %.082, %309 ], [ %.082, %299 ], [ %.082, %297 ], [ %.082, %294 ], [ %.082, %293 ], [ %279, %263 ], [ %.082, %253 ], [ %.082, %252 ], [ %.082, %242 ], [ %.082, %232 ], [ %.082, %230 ], [ %.082, %228 ], [ %.082, %221 ], [ %.082, %219 ], [ %.082, %216 ], [ %.082, %215 ], [ %.082, %214 ], [ %.082, %204 ], [ %.082, %194 ], [ %.082, %192 ], [ %.082, %189 ], [ %.082, %186 ], [ %.082, %184 ], [ %.082, %183 ], [ %.082, %173 ], [ %.082, %163 ], [ %.082, %162 ], [ %.082, %160 ], [ %.082, %159 ], [ %.082, %141 ], [ %.082, %131 ], [ %.082, %128 ], [ %.082, %126 ], [ %.082, %113 ], [ %.082, %108 ], [ %.082, %107 ], [ %.082, %106 ], [ %.082, %96 ], [ %.082, %86 ], [ %.082, %85 ], [ %.082, %74 ], [ %.082, %64 ], [ %.082, %59 ], [ %.082, %57 ], [ %.082, %45 ], [ %.082, %35 ], [ %.082, %33 ], [ %.082, %21 ], [ %.082, %14 ], [ %.082, %10 ]
  %.080.be = phi i32 [ %.080, %9 ], [ %.080, %414 ], [ %.080, %410 ], [ %.neg108, %390 ], [ %.080, %389 ], [ %.080, %388 ], [ %.080, %387 ], [ %.080, %377 ], [ %.080, %376 ], [ %.080, %374 ], [ %.080, %373 ], [ %.080, %371 ], [ %.080, %369 ], [ %.080, %368 ], [ %.080, %367 ], [ %.080, %358 ], [ %.080, %350 ], [ %.080, %348 ], [ %.080, %334 ], [ %.080, %324 ], [ %.080, %323 ], [ %.080, %309 ], [ %.080, %299 ], [ %.080, %297 ], [ %.080, %294 ], [ %.080, %293 ], [ %.neg123, %263 ], [ %.080, %253 ], [ %.080, %252 ], [ %.080, %242 ], [ %.080, %232 ], [ %.080, %230 ], [ %.080, %228 ], [ %.080, %221 ], [ %.080, %219 ], [ %.080, %216 ], [ %.080, %215 ], [ %.080, %214 ], [ %.080, %204 ], [ %.080, %194 ], [ %.080, %192 ], [ %.080, %189 ], [ %.080, %186 ], [ %.080, %184 ], [ %.080, %183 ], [ %.080, %173 ], [ %.080, %163 ], [ %.080, %162 ], [ %.080, %160 ], [ %.080, %159 ], [ %.080, %141 ], [ %.080, %131 ], [ %.080, %128 ], [ %.080, %126 ], [ %.080, %113 ], [ %.080, %108 ], [ %.080, %107 ], [ %.080, %106 ], [ %.080, %96 ], [ %.080, %86 ], [ %.080, %85 ], [ %.080, %74 ], [ %.080, %64 ], [ %.080, %59 ], [ %.080, %57 ], [ %.080, %45 ], [ %.080, %35 ], [ %.080, %33 ], [ %.080, %21 ], [ %.080, %14 ], [ %.080, %10 ]
  %.078.be = phi i32 [ %.078, %9 ], [ %.078, %414 ], [ %.078, %410 ], [ %409, %390 ], [ %.078, %389 ], [ %.078, %388 ], [ %.078, %387 ], [ %.078, %377 ], [ %.078, %376 ], [ %.078, %374 ], [ %.078, %373 ], [ %.078, %371 ], [ %370, %369 ], [ %.078, %368 ], [ %.078, %367 ], [ %.078, %358 ], [ %.078, %350 ], [ %.078, %348 ], [ %.078, %334 ], [ %.078, %324 ], [ %.078, %323 ], [ %.078, %309 ], [ %.078, %299 ], [ %.078, %297 ], [ %.078, %294 ], [ %.078, %293 ], [ %283, %263 ], [ %.078, %253 ], [ %.078, %252 ], [ %.078, %242 ], [ %.078, %232 ], [ %.078, %230 ], [ %.078, %228 ], [ %.078, %221 ], [ %.078, %219 ], [ %.078, %216 ], [ %.078, %215 ], [ %.078, %214 ], [ %.078, %204 ], [ %.078, %194 ], [ %.078, %192 ], [ %.078, %189 ], [ %.078, %186 ], [ %.078, %184 ], [ %.078, %183 ], [ %.078, %173 ], [ %.078, %163 ], [ %.078, %162 ], [ %.078, %160 ], [ %.078, %159 ], [ %.078, %141 ], [ %.078, %131 ], [ %.078, %128 ], [ %.078, %126 ], [ %.078, %113 ], [ %.078, %108 ], [ %.078, %107 ], [ %.078, %106 ], [ %.078, %96 ], [ %.078, %86 ], [ %.078, %85 ], [ %.078, %74 ], [ %.078, %64 ], [ %.078, %59 ], [ %.078, %57 ], [ %.078, %45 ], [ %.078, %35 ], [ %.078, %33 ], [ %.078, %21 ], [ %.078, %14 ], [ %.078, %10 ]
  %.0.be = phi i32 [ %.0, %9 ], [ 1754576062, %414 ], [ 1906903119, %410 ], [ 903826318, %390 ], [ 344752087, %389 ], [ 576069191, %388 ], [ 176494060, %387 ], [ 843052758, %377 ], [ -223369230, %376 ], [ 1216561315, %374 ], [ -146297414, %373 ], [ -271087090, %371 ], [ 1416652842, %369 ], [ -1419762217, %368 ], [ 1155332163, %367 ], [ 291066610, %358 ], [ 291066610, %350 ], [ %349, %348 ], [ %347, %334 ], [ %333, %324 ], [ 1155332163, %323 ], [ %322, %309 ], [ %308, %299 ], [ %298, %297 ], [ %296, %294 ], [ 1416652842, %293 ], [ %292, %263 ], [ %262, %253 ], [ -1691816553, %252 ], [ %251, %242 ], [ %241, %232 ], [ 661704546, %230 ], [ 661704546, %228 ], [ %227, %221 ], [ %220, %219 ], [ -1691816553, %216 ], [ 36792064, %215 ], [ -271087090, %214 ], [ %213, %204 ], [ %203, %194 ], [ -737656900, %192 ], [ -202529345, %189 ], [ %188, %186 ], [ -737656900, %184 ], [ -2070641643, %183 ], [ %182, %173 ], [ %172, %163 ], [ -271087090, %162 ], [ 1412134887, %160 ], [ -1158793033, %159 ], [ %158, %141 ], [ %140, %131 ], [ %130, %128 ], [ 1412134887, %126 ], [ %125, %113 ], [ %112, %108 ], [ 36792064, %107 ], [ -271087090, %106 ], [ %105, %96 ], [ %95, %86 ], [ -1358017222, %85 ], [ %84, %74 ], [ %73, %64 ], [ 217961398, %59 ], [ %58, %57 ], [ %56, %45 ], [ %44, %35 ], [ -1358017222, %33 ], [ %32, %21 ], [ %20, %14 ], [ %13, %10 ]
  br label %9

10:                                               ; preds = %9
  %11 = load i32, i32* %3, align 4
  %12 = add i32 %11, -1
  store i32 %12, i32* %3, align 4
  %.not143 = icmp eq i32 %11, 0
  %13 = select i1 %.not143, i32 470414503, i32 1503238610
  br label %.backedge

14:                                               ; preds = %9
  %15 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %4, i32* nonnull %5)
  %16 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7)
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %5, align 4
  %19 = icmp sgt i32 %17, %18
  %20 = select i1 %19, i32 -1689509447, i32 568300837
  br label %.backedge

21:                                               ; preds = %9
  %22 = load i32, i32* %4, align 4
  %23 = load i32, i32* %5, align 4
  %.neg139 = add i32 %23, 1
  %24 = sdiv i32 %22, %.neg139
  %25 = srem i32 %22, %.neg139
  %26 = icmp ne i32 %25, 0
  %.neg140.neg = zext i1 %26 to i32
  %27 = add i32 %24, %.neg140.neg
  %28 = sdiv i32 %22, %27
  %29 = srem i32 %22, %27
  %30 = icmp ne i32 %29, 0
  %.neg141.neg = zext i1 %30 to i32
  %.neg142 = add i32 %28, %.neg141.neg
  %31 = icmp slt i32 %23, %.neg142
  %32 = select i1 %31, i32 -764236991, i32 -899404878
  br label %.backedge

33:                                               ; preds = %9
  %34 = load i32, i32* %6, align 4
  br label %.backedge

35:                                               ; preds = %9
  %36 = load i32, i32* @x.6, align 4
  %37 = load i32, i32* @y.7, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 -146297414, i32 182676113
  br label %.backedge

45:                                               ; preds = %9
  %46 = load i32, i32* %7, align 4
  %47 = icmp sle i32 %.0102, %46
  store i1 %47, i1* %2, align 1
  %48 = load i32, i32* @x.6, align 4
  %49 = load i32, i32* @y.7, align 4
  %50 = add i32 %48, -1
  %51 = mul i32 %50, %48
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %54, %53
  %56 = select i1 %55, i32 -215463552, i32 182676113
  br label %.backedge

57:                                               ; preds = %9
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %58 = select i1 %.0..0..0., i32 -2128851384, i32 1155917174
  br label %.backedge

59:                                               ; preds = %9
  %60 = add i32 %.088, 1
  %61 = srem i32 %.0102, %60
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i32 66, i32 65
  %putchar138 = call i32 @putchar(i32 %63)
  br label %.backedge

64:                                               ; preds = %9
  %65 = load i32, i32* @x.6, align 4
  %66 = load i32, i32* @y.7, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 1216561315, i32 76867738
  br label %.backedge

74:                                               ; preds = %9
  %75 = add i32 %.0102, 1
  %76 = load i32, i32* @x.6, align 4
  %77 = load i32, i32* @y.7, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 -851607996, i32 76867738
  br label %.backedge

85:                                               ; preds = %9
  br label %.backedge

86:                                               ; preds = %9
  %87 = load i32, i32* @x.6, align 4
  %88 = load i32, i32* @y.7, align 4
  %89 = add i32 %87, -1
  %90 = mul i32 %89, %87
  %91 = and i32 %90, 1
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %93, %92
  %95 = select i1 %94, i32 -223369230, i32 1260449236
  br label %.backedge

96:                                               ; preds = %9
  %putchar137 = call i32 @putchar(i32 10)
  %97 = load i32, i32* @x.6, align 4
  %98 = load i32, i32* @y.7, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 344431374, i32 1260449236
  br label %.backedge

106:                                              ; preds = %9
  br label %.backedge

107:                                              ; preds = %9
  br label %.backedge

108:                                              ; preds = %9
  %109 = load i32, i32* %4, align 4
  %110 = load i32, i32* %5, align 4
  %111 = icmp slt i32 %109, %110
  %112 = select i1 %111, i32 -1213153582, i32 -2059819726
  br label %.backedge

113:                                              ; preds = %9
  %114 = load i32, i32* %5, align 4
  %115 = load i32, i32* %4, align 4
  %.neg134 = add i32 %115, 1
  %116 = sdiv i32 %114, %.neg134
  %117 = srem i32 %114, %.neg134
  %118 = icmp ne i32 %117, 0
  %.neg135.neg = zext i1 %118 to i32
  %.neg136 = add i32 %116, %.neg135.neg
  %119 = sdiv i32 %114, %.neg136
  %120 = srem i32 %114, %.neg136
  %121 = icmp ne i32 %120, 0
  %122 = zext i1 %121 to i32
  %123 = add i32 %119, %122
  %124 = icmp slt i32 %115, %123
  %125 = select i1 %124, i32 351348552, i32 423047456
  br label %.backedge

126:                                              ; preds = %9
  %127 = load i32, i32* %6, align 4
  br label %.backedge

128:                                              ; preds = %9
  %129 = load i32, i32* %7, align 4
  %.not133 = icmp sgt i32 %.0100, %129
  %130 = select i1 %.not133, i32 279114868, i32 -2131866528
  br label %.backedge

131:                                              ; preds = %9
  %132 = load i32, i32* @x.6, align 4
  %133 = load i32, i32* @y.7, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 843052758, i32 -221053980
  br label %.backedge

141:                                              ; preds = %9
  %142 = load i32, i32* %4, align 4
  %143 = load i32, i32* %5, align 4
  %144 = sub i32 1, %.0100
  %145 = add i32 %144, %142
  %146 = add i32 %145, %143
  %.neg131 = add i32 %.088, 1
  %147 = srem i32 %146, %.neg131
  %148 = icmp eq i32 %147, 0
  %149 = select i1 %148, i32 65, i32 66
  %putchar132 = call i32 @putchar(i32 %149)
  %150 = load i32, i32* @x.6, align 4
  %151 = load i32, i32* @y.7, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 1864934626, i32 -221053980
  br label %.backedge

159:                                              ; preds = %9
  br label %.backedge

160:                                              ; preds = %9
  %161 = add i32 %.0100, 1
  br label %.backedge

162:                                              ; preds = %9
  %putchar130 = call i32 @putchar(i32 10)
  br label %.backedge

163:                                              ; preds = %9
  %164 = load i32, i32* @x.6, align 4
  %165 = load i32, i32* @y.7, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 176494060, i32 -508512633
  br label %.backedge

173:                                              ; preds = %9
  %174 = load i32, i32* @x.6, align 4
  %175 = load i32, i32* @y.7, align 4
  %176 = add i32 %174, -1
  %177 = mul i32 %176, %174
  %178 = and i32 %177, 1
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %180, %179
  %182 = select i1 %181, i32 546330936, i32 -508512633
  br label %.backedge

183:                                              ; preds = %9
  br label %.backedge

184:                                              ; preds = %9
  %185 = load i32, i32* %6, align 4
  br label %.backedge

186:                                              ; preds = %9
  %187 = load i32, i32* %7, align 4
  %.not129 = icmp sgt i32 %.098, %187
  %188 = select i1 %.not129, i32 1889508668, i32 143611067
  br label %.backedge

189:                                              ; preds = %9
  %190 = and i32 %.098, 1
  %.not127 = icmp eq i32 %190, 0
  %191 = select i1 %.not127, i32 66, i32 65
  %putchar128 = call i32 @putchar(i32 %191)
  br label %.backedge

192:                                              ; preds = %9
  %193 = add i32 %.098, 1
  br label %.backedge

194:                                              ; preds = %9
  %195 = load i32, i32* @x.6, align 4
  %196 = load i32, i32* @y.7, align 4
  %197 = add i32 %195, -1
  %198 = mul i32 %197, %195
  %199 = and i32 %198, 1
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %201, %200
  %203 = select i1 %202, i32 576069191, i32 -1417856486
  br label %.backedge

204:                                              ; preds = %9
  %putchar125 = call i32 @putchar(i32 10)
  %205 = load i32, i32* @x.6, align 4
  %206 = load i32, i32* @y.7, align 4
  %207 = add i32 %205, -1
  %208 = mul i32 %207, %205
  %209 = and i32 %208, 1
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %211, %210
  %213 = select i1 %212, i32 1509360725, i32 -1417856486
  br label %.backedge

214:                                              ; preds = %9
  br label %.backedge

215:                                              ; preds = %9
  br label %.backedge

216:                                              ; preds = %9
  %217 = call dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %5)
  %218 = load i32, i32* %217, align 4
  br label %.backedge

219:                                              ; preds = %9
  %.not124 = icmp sgt i32 %.096, %.094
  %220 = select i1 %.not124, i32 -1733745584, i32 -128484725
  br label %.backedge

221:                                              ; preds = %9
  %222 = add i32 %.094, %.096
  %223 = ashr i32 %222, 1
  %224 = load i32, i32* %4, align 4
  %225 = load i32, i32* %5, align 4
  %226 = call zeroext i1 @_Z5checkiiii(i32 %223, i32 %224, i32 %225, i32 %.088)
  %227 = select i1 %226, i32 -1362796655, i32 150507470
  br label %.backedge

228:                                              ; preds = %9
  %229 = add i32 %.090, 1
  br label %.backedge

230:                                              ; preds = %9
  %231 = add i32 %.090, -1
  br label %.backedge

232:                                              ; preds = %9
  %233 = load i32, i32* @x.6, align 4
  %234 = load i32, i32* @y.7, align 4
  %235 = add i32 %233, -1
  %236 = mul i32 %235, %233
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %239, %238
  %241 = select i1 %240, i32 344752087, i32 -1181447099
  br label %.backedge

242:                                              ; preds = %9
  %243 = load i32, i32* @x.6, align 4
  %244 = load i32, i32* @y.7, align 4
  %245 = add i32 %243, -1
  %246 = mul i32 %245, %243
  %247 = and i32 %246, 1
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %249, %248
  %251 = select i1 %250, i32 -89852532, i32 -1181447099
  br label %.backedge

252:                                              ; preds = %9
  br label %.backedge

253:                                              ; preds = %9
  %254 = load i32, i32* @x.6, align 4
  %255 = load i32, i32* @y.7, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 903826318, i32 56105355
  br label %.backedge

263:                                              ; preds = %9
  %264 = load i32, i32* %4, align 4
  %265 = load i32, i32* %5, align 4
  %266 = call zeroext i1 @_Z5checkiiii(i32 3, i32 %264, i32 %265, i32 %.088)
  %267 = load i32, i32* %4, align 4
  %268 = load i32, i32* %5, align 4
  %269 = sub i32 %267, %.092
  store i32 %269, i32* %4, align 4
  %270 = sub i32 %268, %.092
  store i32 %270, i32* %5, align 4
  %271 = add i32 %.088, -1
  %272 = sdiv i32 %269, %271
  %273 = add i32 %.088, 1
  %274 = mul nsw i32 %272, %273
  %275 = srem i32 %269, %271
  %276 = add i32 %274, %275
  %277 = icmp ne i32 %275, 0
  %278 = zext i1 %277 to i32
  %279 = add i32 %276, %278
  %280 = sdiv i32 %270, %271
  %.neg120.neg = mul i32 %280, %273
  %281 = srem i32 %270, %271
  %.neg122 = add i32 %.neg120.neg, %281
  %282 = icmp ne i32 %281, 0
  %.neg121.neg = zext i1 %282 to i32
  %.neg123 = add i32 %.neg122, %.neg121.neg
  %283 = load i32, i32* %6, align 4
  %284 = load i32, i32* @x.6, align 4
  %285 = load i32, i32* @y.7, align 4
  %286 = add i32 %284, -1
  %287 = mul i32 %286, %284
  %288 = and i32 %287, 1
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %290, %289
  %292 = select i1 %291, i32 787976619, i32 56105355
  br label %.backedge

293:                                              ; preds = %9
  br label %.backedge

294:                                              ; preds = %9
  %295 = load i32, i32* %7, align 4
  %.not118 = icmp sgt i32 %.078, %295
  %296 = select i1 %.not118, i32 1864470538, i32 -1138661312
  br label %.backedge

297:                                              ; preds = %9
  %.not117 = icmp sgt i32 %.078, %.082
  %298 = select i1 %.not117, i32 -1384416527, i32 -4238846
  br label %.backedge

299:                                              ; preds = %9
  %300 = load i32, i32* @x.6, align 4
  %301 = load i32, i32* @y.7, align 4
  %302 = add i32 %300, -1
  %303 = mul i32 %302, %300
  %304 = and i32 %303, 1
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %306, %305
  %308 = select i1 %307, i32 1906903119, i32 -29538547
  br label %.backedge

309:                                              ; preds = %9
  %310 = add i32 %.088, 1
  %311 = srem i32 %.078, %310
  %312 = icmp eq i32 %311, 0
  %313 = select i1 %312, i32 66, i32 65
  %putchar116 = call i32 @putchar(i32 %313)
  %314 = load i32, i32* @x.6, align 4
  %315 = load i32, i32* @y.7, align 4
  %316 = add i32 %314, -1
  %317 = mul i32 %316, %314
  %318 = and i32 %317, 1
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %320, %319
  %322 = select i1 %321, i32 -1095839814, i32 -29538547
  br label %.backedge

323:                                              ; preds = %9
  br label %.backedge

324:                                              ; preds = %9
  %325 = load i32, i32* @x.6, align 4
  %326 = load i32, i32* @y.7, align 4
  %327 = add i32 %325, -1
  %328 = mul i32 %327, %325
  %329 = and i32 %328, 1
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %331, %330
  %333 = select i1 %332, i32 1754576062, i32 2037766848
  br label %.backedge

334:                                              ; preds = %9
  %335 = add i32 %.084, %.086
  %336 = add i32 %335, 1
  %337 = sub i32 %336, %.078
  %338 = icmp sle i32 %337, %.080
  store i1 %338, i1* %1, align 1
  %339 = load i32, i32* @x.6, align 4
  %340 = load i32, i32* @y.7, align 4
  %341 = add i32 %339, -1
  %342 = mul i32 %341, %339
  %343 = and i32 %342, 1
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %345, %344
  %347 = select i1 %346, i32 -1349366337, i32 2037766848
  br label %.backedge

348:                                              ; preds = %9
  %.0..0..0.77 = load volatile i1, i1* %1, align 1
  %349 = select i1 %.0..0..0.77, i32 484508158, i32 2115431943
  br label %.backedge

350:                                              ; preds = %9
  %351 = add i32 %.084, %.086
  %352 = add i32 %351, 1
  %353 = sub i32 %352, %.078
  %354 = add i32 %.088, 1
  %355 = srem i32 %353, %354
  %356 = icmp eq i32 %355, 0
  %357 = select i1 %356, i32 65, i32 66
  %putchar115 = call i32 @putchar(i32 %357)
  br label %.backedge

358:                                              ; preds = %9
  %359 = load i32, i32* %4, align 4
  %360 = add i32 %.088, -1
  %361 = srem i32 %359, %360
  %362 = icmp eq i32 %361, 0
  %.neg113.neg = zext i1 %362 to i32
  %363 = sub i32 %.078, %.082
  %364 = add i32 %363, %.neg113.neg
  %365 = and i32 %364, 1
  %.not = icmp eq i32 %365, 0
  %366 = select i1 %.not, i32 65, i32 66
  %putchar114 = call i32 @putchar(i32 %366)
  br label %.backedge

367:                                              ; preds = %9
  br label %.backedge

368:                                              ; preds = %9
  br label %.backedge

369:                                              ; preds = %9
  %370 = add i32 %.078, 1
  br label %.backedge

371:                                              ; preds = %9
  %putchar112 = call i32 @putchar(i32 10)
  br label %.backedge

372:                                              ; preds = %9
  ret i32 0

373:                                              ; preds = %9
  br label %.backedge

374:                                              ; preds = %9
  %375 = add i32 %.0102, 1
  br label %.backedge

376:                                              ; preds = %9
  %putchar111 = call i32 @putchar(i32 10)
  br label %.backedge

377:                                              ; preds = %9
  %378 = load i32, i32* %4, align 4
  %379 = load i32, i32* %5, align 4
  %380 = sub i32 1, %.0100
  %381 = add i32 %380, %378
  %382 = add i32 %381, %379
  %383 = add i32 %.088, 1
  %384 = srem i32 %382, %383
  %385 = icmp eq i32 %384, 0
  %386 = select i1 %385, i32 65, i32 66
  %putchar110 = call i32 @putchar(i32 %386)
  br label %.backedge

387:                                              ; preds = %9
  br label %.backedge

388:                                              ; preds = %9
  %putchar109 = call i32 @putchar(i32 10)
  br label %.backedge

389:                                              ; preds = %9
  br label %.backedge

390:                                              ; preds = %9
  %391 = load i32, i32* %4, align 4
  %392 = load i32, i32* %5, align 4
  %393 = call zeroext i1 @_Z5checkiiii(i32 3, i32 %391, i32 %392, i32 %.088)
  %394 = load i32, i32* %4, align 4
  %395 = load i32, i32* %5, align 4
  %396 = sub i32 %394, %.092
  store i32 %396, i32* %4, align 4
  %397 = sub i32 %395, %.092
  store i32 %397, i32* %5, align 4
  %398 = add i32 %.088, -1
  %399 = sdiv i32 %396, %398
  %.neg104.neg.neg = add i32 %.088, 1
  %400 = mul nsw i32 %399, %.neg104.neg.neg
  %401 = srem i32 %396, %398
  %402 = add i32 %400, %401
  %403 = icmp ne i32 %401, 0
  %404 = zext i1 %403 to i32
  %405 = add i32 %402, %404
  %406 = sdiv i32 %397, %398
  %.neg105.neg = mul i32 %406, %.neg104.neg.neg
  %407 = srem i32 %397, %398
  %.neg106.neg = add i32 %.neg105.neg, %407
  %408 = icmp ne i32 %407, 0
  %.neg107.neg = zext i1 %408 to i32
  %.neg108 = add i32 %.neg106.neg, %.neg107.neg
  %409 = load i32, i32* %6, align 4
  br label %.backedge

410:                                              ; preds = %9
  %.neg = add i32 %.088, 1
  %411 = srem i32 %.078, %.neg
  %412 = icmp eq i32 %411, 0
  %413 = select i1 %412, i32 66, i32 65
  %putchar = call i32 @putchar(i32 %413)
  br label %.backedge

414:                                              ; preds = %9
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* dereferenceable(4) %0, i32* dereferenceable(4) %1) local_unnamed_addr #7 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i32**, align 8
  %5 = alloca i32**, align 8
  %6 = alloca i32**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.8, align 4
  %10 = load i32, i32* @y.9, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ -787385817, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -787385817, label %17
    i32 -1069374970, label %20
    i32 1967152653, label %38
    i32 -888000446, label %40
    i32 619820663, label %42
    i32 -1053687144, label %52
    i32 1980049585, label %63
    i32 747680190, label %64
    i32 -182379108, label %66
    i32 -2049947301, label %67
  ]

.backedge:                                        ; preds = %16, %67, %66, %63, %52, %42, %40, %38, %20, %17
  %.0.be = phi i32 [ %.0, %16 ], [ -1053687144, %67 ], [ -1069374970, %66 ], [ 747680190, %63 ], [ %62, %52 ], [ %51, %42 ], [ 747680190, %40 ], [ %39, %38 ], [ %37, %20 ], [ %19, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 -1069374970, i32 -182379108
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i32*, align 8
  store i32** %21, i32*** %6, align 8
  %22 = alloca i32*, align 8
  store i32** %22, i32*** %5, align 8
  %23 = alloca i32*, align 8
  store i32** %23, i32*** %4, align 8
  %.0..0..0.6 = load volatile i32**, i32*** %5, align 8
  store i32* %0, i32** %.0..0..0.6, align 8
  %.0..0..0.10 = load volatile i32**, i32*** %4, align 8
  store i32* %1, i32** %.0..0..0.10, align 8
  %.0..0..0.11 = load volatile i32**, i32*** %4, align 8
  %24 = load i32*, i32** %.0..0..0.11, align 8
  %25 = load i32, i32* %24, align 4
  %.0..0..0.7 = load volatile i32**, i32*** %5, align 8
  %26 = load i32*, i32** %.0..0..0.7, align 8
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %25, %27
  store i1 %28, i1* %3, align 1
  %29 = load i32, i32* @x.8, align 4
  %30 = load i32, i32* @y.9, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 1967152653, i32 -182379108
  br label %.backedge

38:                                               ; preds = %16
  %.0..0..0.13 = load volatile i1, i1* %3, align 1
  %39 = select i1 %.0..0..0.13, i32 -888000446, i32 619820663
  br label %.backedge

40:                                               ; preds = %16
  %.0..0..0.12 = load volatile i32**, i32*** %4, align 8
  %41 = load i32*, i32** %.0..0..0.12, align 8
  %.0..0..0.2 = load volatile i32**, i32*** %6, align 8
  store i32* %41, i32** %.0..0..0.2, align 8
  br label %.backedge

42:                                               ; preds = %16
  %43 = load i32, i32* @x.8, align 4
  %44 = load i32, i32* @y.9, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 -1053687144, i32 -2049947301
  br label %.backedge

52:                                               ; preds = %16
  %.0..0..0.8 = load volatile i32**, i32*** %5, align 8
  %53 = load i32*, i32** %.0..0..0.8, align 8
  %.0..0..0.3 = load volatile i32**, i32*** %6, align 8
  store i32* %53, i32** %.0..0..0.3, align 8
  %54 = load i32, i32* @x.8, align 4
  %55 = load i32, i32* @y.9, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 1980049585, i32 -2049947301
  br label %.backedge

63:                                               ; preds = %16
  br label %.backedge

64:                                               ; preds = %16
  %.0..0..0.4 = load volatile i32**, i32*** %6, align 8
  %65 = load i32*, i32** %.0..0..0.4, align 8
  ret i32* %65

66:                                               ; preds = %16
  br label %.backedge

67:                                               ; preds = %16
  %.0..0..0.9 = load volatile i32**, i32*** %5, align 8
  %68 = load i32*, i32** %.0..0..0.9, align 8
  %.0..0..0.5 = load volatile i32**, i32*** %6, align 8
  store i32* %68, i32** %.0..0..0.5, align 8
  br label %.backedge
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s393227608.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
