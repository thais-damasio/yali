; ModuleID = 'build_ollvm/programs/p03466/s718892829.ll'
source_filename = "Project_CodeNet_C++1400/p03466/s718892829.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@q = global i32 0, align 4
@a = global i64 0, align 8
@b = global i64 0, align 8
@c = global i64 0, align 8
@d = global i64 0, align 8
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"%lld%lld%lld%lld\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s718892829.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1825746716, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1825746716, label %11
    i32 -709248643, label %14
    i32 -1341052797, label %25
    i32 -231023677, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -709248643, i32 -231023677
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -1341052797, i32 -231023677
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -709248643, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i32, align 4
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = alloca i1, align 1
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull @q)
  br label %16

16:                                               ; preds = %.backedge, %0
  %.0105 = phi i32 [ undef, %0 ], [ %.0105.be, %.backedge ]
  %.0103 = phi i64 [ undef, %0 ], [ %.0103.be, %.backedge ]
  %.0101 = phi i64 [ undef, %0 ], [ %.0101.be, %.backedge ]
  %.099 = phi i64 [ undef, %0 ], [ %.099.be, %.backedge ]
  %.097 = phi i64 [ undef, %0 ], [ %.097.be, %.backedge ]
  %.095 = phi i32 [ undef, %0 ], [ %.095.be, %.backedge ]
  %.093 = phi i64 [ undef, %0 ], [ %.093.be, %.backedge ]
  %.091 = phi i32 [ undef, %0 ], [ %.091.be, %.backedge ]
  %.089 = phi i32 [ 338681647, %0 ], [ %.089.be, %.backedge ]
  %.087 = phi i1 [ undef, %0 ], [ %.087.be, %.backedge ]
  %.085 = phi i1 [ undef, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i1 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i1 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.089, label %.backedge [
    i32 338681647, label %17
    i32 777177772, label %21
    i32 2040915353, label %35
    i32 1559009871, label %45
    i32 -412110794, label %59
    i32 1026966258, label %61
    i32 884511600, label %66
    i32 -1939688091, label %69
    i32 1309398943, label %74
    i32 -462205790, label %79
    i32 -621230226, label %81
    i32 -684662272, label %91
    i32 1752017278, label %101
    i32 1154142210, label %102
    i32 102840639, label %118
    i32 -1567040423, label %128
    i32 2067699564, label %138
    i32 -1589857466, label %139
    i32 -1297187358, label %144
    i32 -1571341211, label %149
    i32 1377686064, label %152
    i32 1262873254, label %154
    i32 1204787246, label %163
    i32 524662336, label %173
    i32 -2147131122, label %190
    i32 -901919915, label %192
    i32 -701105009, label %193
    i32 -175755706, label %199
    i32 827062362, label %204
    i32 498643817, label %214
    i32 -101402268, label %226
    i32 630836870, label %227
    i32 -1796366848, label %229
    i32 830827001, label %233
    i32 -2127010107, label %243
    i32 1229501918, label %257
    i32 -442745075, label %259
    i32 1577406964, label %260
    i32 -1376675240, label %270
    i32 -409351234, label %287
    i32 -1411500820, label %289
    i32 820626837, label %294
    i32 1225239475, label %304
    i32 -446961651, label %317
    i32 933575984, label %319
    i32 2054539844, label %323
    i32 -1994987764, label %325
    i32 -272564151, label %329
    i32 -1913822016, label %336
    i32 -2027585142, label %337
    i32 161431998, label %343
    i32 -1128818426, label %348
    i32 864262829, label %358
    i32 -1890433381, label %370
    i32 345957432, label %371
    i32 1330102943, label %373
    i32 689645439, label %383
    i32 1723850821, label %396
    i32 680902074, label %397
    i32 491027350, label %402
    i32 1895135894, label %412
    i32 885928752, label %422
    i32 190961978, label %423
    i32 2035086078, label %428
    i32 849064391, label %434
    i32 -229686882, label %444
    i32 433377717, label %457
    i32 -210754293, label %459
    i32 1485961176, label %463
    i32 860930182, label %473
    i32 -772288108, label %483
    i32 -1896871360, label %485
    i32 792413340, label %495
    i32 -1883344780, label %513
    i32 -1098288560, label %514
    i32 417834871, label %524
    i32 -1562712510, label %534
    i32 1609941469, label %535
    i32 564831256, label %545
    i32 -1860617158, label %555
    i32 2142879340, label %556
    i32 -788279922, label %557
    i32 2106467479, label %558
    i32 491839066, label %559
    i32 -490343742, label %565
    i32 1091779909, label %566
    i32 -549826411, label %569
    i32 -1639156370, label %576
    i32 1589832926, label %577
    i32 -1205556761, label %578
    i32 -308307928, label %582
    i32 -1554378876, label %583
    i32 853296388, label %584
    i32 975560272, label %585
    i32 -826313382, label %594
    i32 440299253, label %595
  ]

.backedge:                                        ; preds = %16, %595, %594, %585, %584, %583, %582, %578, %577, %576, %569, %566, %565, %559, %558, %557, %556, %545, %535, %534, %524, %514, %513, %495, %485, %483, %473, %463, %459, %457, %444, %434, %428, %423, %422, %412, %402, %397, %396, %383, %373, %371, %370, %358, %348, %343, %337, %336, %329, %325, %323, %319, %317, %304, %294, %289, %287, %270, %260, %259, %257, %243, %233, %229, %227, %226, %214, %204, %199, %193, %192, %190, %173, %163, %154, %152, %149, %144, %139, %138, %128, %118, %102, %101, %91, %81, %79, %74, %69, %66, %61, %59, %45, %35, %21, %17
  %.0105.be = phi i32 [ %.0105, %16 ], [ %.0105, %595 ], [ %.0105, %594 ], [ %.0105, %585 ], [ %.0105, %584 ], [ %.0105, %583 ], [ %.0105, %582 ], [ %.0105, %578 ], [ %.0105, %577 ], [ %.0105, %576 ], [ %.0105, %569 ], [ %.0105, %566 ], [ %.0105, %565 ], [ %.0105, %559 ], [ %.0105, %558 ], [ %.0105, %557 ], [ %.0105, %556 ], [ %.0105, %545 ], [ %.0105, %535 ], [ %.0105, %534 ], [ %.0105, %524 ], [ %.0105, %514 ], [ %.0105, %513 ], [ %.0105, %495 ], [ %.0105, %485 ], [ %.0105, %483 ], [ %.0105, %473 ], [ %.0105, %463 ], [ %.0105, %459 ], [ %.0105, %457 ], [ %.0105, %444 ], [ %.0105, %434 ], [ %.0105, %428 ], [ %.0105, %423 ], [ %.0105, %422 ], [ %.0105, %412 ], [ %.0105, %402 ], [ %.0105, %397 ], [ %.0105, %396 ], [ %.0105, %383 ], [ %.0105, %373 ], [ %.0105, %371 ], [ %.0105, %370 ], [ %.0105, %358 ], [ %.0105, %348 ], [ %.0105, %343 ], [ %.0105, %337 ], [ %.0105, %336 ], [ %.0105, %329 ], [ %.0105, %325 ], [ %.0105, %323 ], [ %.0105, %319 ], [ %.0105, %317 ], [ %.0105, %304 ], [ %.0105, %294 ], [ %.0105, %289 ], [ %.0105, %287 ], [ %.0105, %270 ], [ %.0105, %260 ], [ %.0105, %259 ], [ %.0105, %257 ], [ %.0105, %243 ], [ %.0105, %233 ], [ %.0105, %229 ], [ %.0105, %227 ], [ %.0105, %226 ], [ %.0105, %214 ], [ %.0105, %204 ], [ %.0105, %199 ], [ %.0105, %193 ], [ %.0105, %192 ], [ %.0105, %190 ], [ %.0105, %173 ], [ %.0105, %163 ], [ %.0105, %154 ], [ %.0105, %152 ], [ %.0105, %149 ], [ %.0105, %144 ], [ %.0105, %139 ], [ %.0105, %138 ], [ %.0105, %128 ], [ %.0105, %118 ], [ %.0105, %102 ], [ %.0105, %101 ], [ %.0105, %91 ], [ %.0105, %81 ], [ %80, %79 ], [ %.0105, %74 ], [ %.0105, %69 ], [ %68, %66 ], [ %.0105, %61 ], [ %.0105, %59 ], [ %.0105, %45 ], [ %.0105, %35 ], [ %.0105, %21 ], [ %.0105, %17 ]
  %.0103.be = phi i64 [ %.0103, %16 ], [ %.0103, %595 ], [ %.0103, %594 ], [ %.0103, %585 ], [ %.0103, %584 ], [ %.0103, %583 ], [ %.0103, %582 ], [ %.0103, %578 ], [ %.0103, %577 ], [ %.0103, %576 ], [ %575, %569 ], [ %.0103, %566 ], [ %.0103, %565 ], [ %.0103, %559 ], [ %.0103, %558 ], [ %.0103, %557 ], [ %.0103, %556 ], [ %.0103, %545 ], [ %.0103, %535 ], [ %.0103, %534 ], [ %.0103, %524 ], [ %.0103, %514 ], [ %.0103, %513 ], [ %.0103, %495 ], [ %.0103, %485 ], [ %.0103, %483 ], [ %.0103, %473 ], [ %.0103, %463 ], [ %.0103, %459 ], [ %.0103, %457 ], [ %.0103, %444 ], [ %.0103, %434 ], [ %.0103, %428 ], [ %.0103, %423 ], [ %.0103, %422 ], [ %.0103, %412 ], [ %.0103, %402 ], [ %.0103, %397 ], [ %.0103, %396 ], [ %.0103, %383 ], [ %.0103, %373 ], [ %.0103, %371 ], [ %.0103, %370 ], [ %.0103, %358 ], [ %.0103, %348 ], [ %.0103, %343 ], [ %.0103, %337 ], [ %.0103, %336 ], [ %.0103, %329 ], [ %.0103, %325 ], [ %.0103, %323 ], [ %.0103, %319 ], [ %.0103, %317 ], [ %.0103, %304 ], [ %.0103, %294 ], [ %.0103, %289 ], [ %.0103, %287 ], [ %276, %270 ], [ %.0103, %260 ], [ %.0103, %259 ], [ %.0103, %257 ], [ %.0103, %243 ], [ %.0103, %233 ], [ %.0103, %229 ], [ %.0103, %227 ], [ %.0103, %226 ], [ %.0103, %214 ], [ %.0103, %204 ], [ %.0103, %199 ], [ %.0103, %193 ], [ %.0103, %192 ], [ %.0103, %190 ], [ %.0103, %173 ], [ %.0103, %163 ], [ %.0103, %154 ], [ %.0103, %152 ], [ %.0103, %149 ], [ %.0103, %144 ], [ %143, %139 ], [ %.0103, %138 ], [ %.0103, %128 ], [ %.0103, %118 ], [ %107, %102 ], [ %.0103, %101 ], [ %.0103, %91 ], [ %.0103, %81 ], [ %.0103, %79 ], [ %.0103, %74 ], [ %.0103, %69 ], [ %.0103, %66 ], [ %.0103, %61 ], [ %.0103, %59 ], [ %.0103, %45 ], [ %.0103, %35 ], [ %.0103, %21 ], [ %.0103, %17 ]
  %.0101.be = phi i64 [ %.0101, %16 ], [ %.0101, %595 ], [ %.0101, %594 ], [ %.0101, %585 ], [ %.0101, %584 ], [ %.0101, %583 ], [ %.0101, %582 ], [ %.0101, %578 ], [ %.0101, %577 ], [ %.0101, %576 ], [ %.0101, %569 ], [ %.0101, %566 ], [ %.0101, %565 ], [ %.0101, %559 ], [ 0, %558 ], [ %.0101, %557 ], [ %.0101, %556 ], [ %.0101, %545 ], [ %.0101, %535 ], [ %.0101, %534 ], [ %.0101, %524 ], [ %.0101, %514 ], [ %.0101, %513 ], [ %.0101, %495 ], [ %.0101, %485 ], [ %.0101, %483 ], [ %.0101, %473 ], [ %.0101, %463 ], [ %.0101, %459 ], [ %.0101, %457 ], [ %.0101, %444 ], [ %.0101, %434 ], [ %.0101, %428 ], [ %.0101, %423 ], [ %.0101, %422 ], [ %.0101, %412 ], [ %.0101, %402 ], [ %.0101, %397 ], [ %.0101, %396 ], [ %.0101, %383 ], [ %.0101, %373 ], [ %.0101, %371 ], [ %.0101, %370 ], [ %.0101, %358 ], [ %.0101, %348 ], [ %.0101, %343 ], [ %.0101, %337 ], [ %.0101, %336 ], [ %.0101, %329 ], [ %.0101, %325 ], [ %.0101, %323 ], [ %.0101, %319 ], [ %.0101, %317 ], [ %.0101, %304 ], [ %.0101, %294 ], [ %.0101, %289 ], [ %.0101, %287 ], [ %.0101, %270 ], [ %.0101, %260 ], [ %.0101, %259 ], [ %.0101, %257 ], [ %.0101, %243 ], [ %.0101, %233 ], [ %.0101, %229 ], [ %.0101, %227 ], [ %.0101, %226 ], [ %.0101, %214 ], [ %.0101, %204 ], [ %.0101, %199 ], [ %.0101, %193 ], [ %.0101, %192 ], [ %.0101, %190 ], [ %.0101, %173 ], [ %.0101, %163 ], [ %.0101, %154 ], [ %.0101, %152 ], [ %.0101, %149 ], [ %.0101, %144 ], [ %.0101, %139 ], [ %.0101, %138 ], [ 0, %128 ], [ %.0101, %118 ], [ %115, %102 ], [ %.0101, %101 ], [ %.0101, %91 ], [ %.0101, %81 ], [ %.0101, %79 ], [ %.0101, %74 ], [ %.0101, %69 ], [ %.0101, %66 ], [ %.0101, %61 ], [ %.0101, %59 ], [ %.0101, %45 ], [ %.0101, %35 ], [ %.0101, %21 ], [ %.0101, %17 ]
  %.099.be = phi i64 [ %.099, %16 ], [ %.099, %595 ], [ %.099, %594 ], [ %.099, %585 ], [ %.099, %584 ], [ %.099, %583 ], [ %.099, %582 ], [ %.099, %578 ], [ %.099, %577 ], [ %.099, %576 ], [ %.099, %569 ], [ %.099, %566 ], [ %.099, %565 ], [ %.099, %559 ], [ %.099, %558 ], [ %.099, %557 ], [ %.099, %556 ], [ %.099, %545 ], [ %.099, %535 ], [ %.099, %534 ], [ %.099, %524 ], [ %.099, %514 ], [ %.099, %513 ], [ %.099, %495 ], [ %.099, %485 ], [ %.099, %483 ], [ %.099, %473 ], [ %.099, %463 ], [ %.099, %459 ], [ %.099, %457 ], [ %.099, %444 ], [ %.099, %434 ], [ %.099, %428 ], [ %.099, %423 ], [ %.099, %422 ], [ %.099, %412 ], [ %.099, %402 ], [ %.099, %397 ], [ %.099, %396 ], [ %.099, %383 ], [ %.099, %373 ], [ %.099, %371 ], [ %.099, %370 ], [ %.099, %358 ], [ %.099, %348 ], [ %.099, %343 ], [ %.099, %337 ], [ %.099, %336 ], [ %.099, %329 ], [ %.099, %325 ], [ %.099, %323 ], [ %.099, %319 ], [ %.099, %317 ], [ %.099, %304 ], [ %.099, %294 ], [ %.099, %289 ], [ %.099, %287 ], [ %.099, %270 ], [ %.099, %260 ], [ %.099, %259 ], [ %.099, %257 ], [ %.099, %243 ], [ %.099, %233 ], [ %.099, %229 ], [ %.099, %227 ], [ %.099, %226 ], [ %.099, %214 ], [ %.099, %204 ], [ %.099, %199 ], [ %.099, %193 ], [ %.099, %192 ], [ %.099, %190 ], [ %.099, %173 ], [ %.099, %163 ], [ %.099, %154 ], [ %.099, %152 ], [ %.099, %149 ], [ %.099, %144 ], [ %141, %139 ], [ %.099, %138 ], [ %.099, %128 ], [ %.099, %118 ], [ %.099, %102 ], [ %.099, %101 ], [ %.099, %91 ], [ %.099, %81 ], [ %.099, %79 ], [ %.099, %74 ], [ %.099, %69 ], [ %.099, %66 ], [ %.099, %61 ], [ %.099, %59 ], [ %.099, %45 ], [ %.099, %35 ], [ %.099, %21 ], [ %.099, %17 ]
  %.097.be = phi i64 [ %.097, %16 ], [ %.097, %595 ], [ %.097, %594 ], [ %.097, %585 ], [ %.097, %584 ], [ %.097, %583 ], [ %.097, %582 ], [ %.097, %578 ], [ %.097, %577 ], [ %.097, %576 ], [ %.097, %569 ], [ %.097, %566 ], [ %.097, %565 ], [ %.097, %559 ], [ %.097, %558 ], [ %.097, %557 ], [ %.097, %556 ], [ %.097, %545 ], [ %.097, %535 ], [ %.097, %534 ], [ %.097, %524 ], [ %.097, %514 ], [ %.097, %513 ], [ %.097, %495 ], [ %.097, %485 ], [ %.097, %483 ], [ %.097, %473 ], [ %.097, %463 ], [ %.097, %459 ], [ %.097, %457 ], [ %.097, %444 ], [ %.097, %434 ], [ %.097, %428 ], [ %.097, %423 ], [ %.097, %422 ], [ %.097, %412 ], [ %.097, %402 ], [ %.097, %397 ], [ %.097, %396 ], [ %.097, %383 ], [ %.097, %373 ], [ %.097, %371 ], [ %.097, %370 ], [ %.097, %358 ], [ %.097, %348 ], [ %.097, %343 ], [ %.097, %337 ], [ %.097, %336 ], [ %.097, %329 ], [ %.097, %325 ], [ %.097, %323 ], [ %.097, %319 ], [ %.097, %317 ], [ %.097, %304 ], [ %.097, %294 ], [ %.097, %289 ], [ %.097, %287 ], [ %.097, %270 ], [ %.097, %260 ], [ %.097, %259 ], [ %.097, %257 ], [ %.097, %243 ], [ %.097, %233 ], [ %.097, %229 ], [ %.097, %227 ], [ %.097, %226 ], [ %.097, %214 ], [ %.097, %204 ], [ %.097, %199 ], [ %198, %193 ], [ %.097, %192 ], [ %.097, %190 ], [ %.097, %173 ], [ %.097, %163 ], [ %.097, %154 ], [ %.097, %152 ], [ %.097, %149 ], [ %.097, %144 ], [ %.097, %139 ], [ %.097, %138 ], [ %.097, %128 ], [ %.097, %118 ], [ %.097, %102 ], [ %.097, %101 ], [ %.097, %91 ], [ %.097, %81 ], [ %.097, %79 ], [ %.097, %74 ], [ %.097, %69 ], [ %.097, %66 ], [ %.097, %61 ], [ %.097, %59 ], [ %.097, %45 ], [ %.097, %35 ], [ %.097, %21 ], [ %.097, %17 ]
  %.095.be = phi i32 [ %.095, %16 ], [ %.095, %595 ], [ %.095, %594 ], [ %.095, %585 ], [ %.095, %584 ], [ %.095, %583 ], [ %.095, %582 ], [ %.095, %578 ], [ %.095, %577 ], [ %.095, %576 ], [ %.095, %569 ], [ %.095, %566 ], [ %.095, %565 ], [ %.095, %559 ], [ %.095, %558 ], [ %.095, %557 ], [ %.095, %556 ], [ %.095, %545 ], [ %.095, %535 ], [ %.095, %534 ], [ %.095, %524 ], [ %.095, %514 ], [ %.095, %513 ], [ %.095, %495 ], [ %.095, %485 ], [ %.095, %483 ], [ %.095, %473 ], [ %.095, %463 ], [ %.095, %459 ], [ %.095, %457 ], [ %.095, %444 ], [ %.095, %434 ], [ %.095, %428 ], [ %.095, %423 ], [ %.095, %422 ], [ %.095, %412 ], [ %.095, %402 ], [ %.095, %397 ], [ %.095, %396 ], [ %.095, %383 ], [ %.095, %373 ], [ %.095, %371 ], [ %.095, %370 ], [ %.095, %358 ], [ %.095, %348 ], [ %.095, %343 ], [ %.095, %337 ], [ %.095, %336 ], [ %.095, %329 ], [ %.095, %325 ], [ %.095, %323 ], [ %.095, %319 ], [ %.095, %317 ], [ %.095, %304 ], [ %.095, %294 ], [ %293, %289 ], [ %.095, %287 ], [ %.095, %270 ], [ %.095, %260 ], [ %.095, %259 ], [ %.095, %257 ], [ %.095, %243 ], [ %.095, %233 ], [ %.095, %229 ], [ %.095, %227 ], [ %.095, %226 ], [ %.095, %214 ], [ %.095, %204 ], [ %.095, %199 ], [ %.095, %193 ], [ %.095, %192 ], [ %.095, %190 ], [ %.095, %173 ], [ %.095, %163 ], [ %.095, %154 ], [ %.095, %152 ], [ %.095, %149 ], [ %.095, %144 ], [ %.095, %139 ], [ %.095, %138 ], [ %.095, %128 ], [ %.095, %118 ], [ %.095, %102 ], [ %.095, %101 ], [ %.095, %91 ], [ %.095, %81 ], [ %.095, %79 ], [ %.095, %74 ], [ %.095, %69 ], [ %.095, %66 ], [ %.095, %61 ], [ %.095, %59 ], [ %.095, %45 ], [ %.095, %35 ], [ %.095, %21 ], [ %.095, %17 ]
  %.093.be = phi i64 [ %.093, %16 ], [ %.093, %595 ], [ %.093, %594 ], [ %.093, %585 ], [ %.093, %584 ], [ %.093, %583 ], [ %.093, %582 ], [ %.093, %578 ], [ %.093, %577 ], [ %.093, %576 ], [ %.093, %569 ], [ %.093, %566 ], [ %.093, %565 ], [ %.093, %559 ], [ %.093, %558 ], [ %.093, %557 ], [ %.093, %556 ], [ %.093, %545 ], [ %.093, %535 ], [ %.093, %534 ], [ %.093, %524 ], [ %.093, %514 ], [ %.093, %513 ], [ %.093, %495 ], [ %.093, %485 ], [ %.093, %483 ], [ %.093, %473 ], [ %.093, %463 ], [ %.093, %459 ], [ %.093, %457 ], [ %.093, %444 ], [ %.093, %434 ], [ %.093, %428 ], [ %.093, %423 ], [ %.093, %422 ], [ %.093, %412 ], [ %.093, %402 ], [ %.093, %397 ], [ %.093, %396 ], [ %.093, %383 ], [ %.093, %373 ], [ %.093, %371 ], [ %.093, %370 ], [ %.093, %358 ], [ %.093, %348 ], [ %.093, %343 ], [ %.093, %337 ], [ %.093, %336 ], [ %.093, %329 ], [ %.093, %325 ], [ %.093, %323 ], [ %.093, %319 ], [ %.093, %317 ], [ %.093, %304 ], [ %.093, %294 ], [ %.093, %289 ], [ %.093, %287 ], [ %.093, %270 ], [ %.093, %260 ], [ %.093, %259 ], [ %.093, %257 ], [ %.093, %243 ], [ %.093, %233 ], [ %.093, %229 ], [ %.093, %227 ], [ %.093, %226 ], [ %.093, %214 ], [ %.093, %204 ], [ %.093, %199 ], [ %.093, %193 ], [ %.093, %192 ], [ %.093, %190 ], [ %.093, %173 ], [ %.093, %163 ], [ %.093, %154 ], [ %.093, %152 ], [ %.093, %149 ], [ %.093, %144 ], [ %.093, %139 ], [ %.093, %138 ], [ %.093, %128 ], [ %.093, %118 ], [ %.093, %102 ], [ %.093, %101 ], [ %.093, %91 ], [ %.093, %81 ], [ %.093, %79 ], [ %.093, %74 ], [ %.093, %69 ], [ %.093, %66 ], [ %.093, %61 ], [ %.093, %59 ], [ %.093, %45 ], [ %.093, %35 ], [ %32, %21 ], [ %.093, %17 ]
  %.091.be = phi i32 [ %.091, %16 ], [ %.091, %595 ], [ %.091, %594 ], [ %.091, %585 ], [ %.091, %584 ], [ %.091, %583 ], [ %.091, %582 ], [ %.091, %578 ], [ %.091, %577 ], [ %.091, %576 ], [ %.091, %569 ], [ %.091, %566 ], [ %.091, %565 ], [ %.091, %559 ], [ %.091, %558 ], [ %.091, %557 ], [ %.091, %556 ], [ %.091, %545 ], [ %.091, %535 ], [ %.091, %534 ], [ %.091, %524 ], [ %.091, %514 ], [ %.091, %513 ], [ %.091, %495 ], [ %.091, %485 ], [ %.091, %483 ], [ %.091, %473 ], [ %.091, %463 ], [ %.091, %459 ], [ %.091, %457 ], [ %.091, %444 ], [ %.091, %434 ], [ %433, %428 ], [ %.091, %423 ], [ %.091, %422 ], [ %.091, %412 ], [ %.091, %402 ], [ %.091, %397 ], [ %.091, %396 ], [ %.091, %383 ], [ %.091, %373 ], [ %.091, %371 ], [ %.091, %370 ], [ %.091, %358 ], [ %.091, %348 ], [ %.091, %343 ], [ %.091, %337 ], [ %.091, %336 ], [ %.091, %329 ], [ %.091, %325 ], [ %.091, %323 ], [ %.091, %319 ], [ %.091, %317 ], [ %.091, %304 ], [ %.091, %294 ], [ %.091, %289 ], [ %.091, %287 ], [ %.091, %270 ], [ %.091, %260 ], [ %.091, %259 ], [ %.091, %257 ], [ %.091, %243 ], [ %.091, %233 ], [ %.091, %229 ], [ %.091, %227 ], [ %.091, %226 ], [ %.091, %214 ], [ %.091, %204 ], [ %.091, %199 ], [ %.091, %193 ], [ %.091, %192 ], [ %.091, %190 ], [ %.091, %173 ], [ %.091, %163 ], [ %.091, %154 ], [ %.091, %152 ], [ %.091, %149 ], [ %.091, %144 ], [ %.091, %139 ], [ %.091, %138 ], [ %.091, %128 ], [ %.091, %118 ], [ %.091, %102 ], [ %.091, %101 ], [ %.091, %91 ], [ %.091, %81 ], [ %.091, %79 ], [ %.091, %74 ], [ %.091, %69 ], [ %.091, %66 ], [ %.091, %61 ], [ %.091, %59 ], [ %.091, %45 ], [ %.091, %35 ], [ %.091, %21 ], [ %.091, %17 ]
  %.089.be = phi i32 [ %.089, %16 ], [ 564831256, %595 ], [ 417834871, %594 ], [ 792413340, %585 ], [ 860930182, %584 ], [ -229686882, %583 ], [ 1895135894, %582 ], [ 689645439, %578 ], [ 864262829, %577 ], [ 1225239475, %576 ], [ -1376675240, %569 ], [ -2127010107, %566 ], [ 498643817, %565 ], [ 524662336, %559 ], [ -1567040423, %558 ], [ -684662272, %557 ], [ 1559009871, %556 ], [ %554, %545 ], [ %544, %535 ], [ 338681647, %534 ], [ %533, %524 ], [ %523, %514 ], [ 849064391, %513 ], [ %512, %495 ], [ %494, %485 ], [ %484, %483 ], [ %482, %473 ], [ %472, %463 ], [ 1485961176, %459 ], [ %458, %457 ], [ %456, %444 ], [ %443, %434 ], [ 849064391, %428 ], [ 2035086078, %423 ], [ 338681647, %422 ], [ %421, %412 ], [ %411, %402 ], [ %401, %397 ], [ 161431998, %396 ], [ %395, %383 ], [ %382, %373 ], [ %372, %371 ], [ 345957432, %370 ], [ %369, %358 ], [ %357, %348 ], [ %347, %343 ], [ 161431998, %337 ], [ 338681647, %336 ], [ %335, %329 ], [ 820626837, %325 ], [ %324, %323 ], [ 2054539844, %319 ], [ %318, %317 ], [ %316, %304 ], [ %303, %294 ], [ 820626837, %289 ], [ %288, %287 ], [ %286, %270 ], [ %269, %260 ], [ 338681647, %259 ], [ %258, %257 ], [ %256, %243 ], [ %242, %233 ], [ -175755706, %229 ], [ %228, %227 ], [ 630836870, %226 ], [ %225, %214 ], [ %213, %204 ], [ %203, %199 ], [ -175755706, %193 ], [ 338681647, %192 ], [ %191, %190 ], [ %189, %173 ], [ %172, %163 ], [ -1297187358, %154 ], [ %153, %152 ], [ 1377686064, %149 ], [ %148, %144 ], [ -1297187358, %139 ], [ -1589857466, %138 ], [ %137, %128 ], [ %127, %118 ], [ %117, %102 ], [ 338681647, %101 ], [ %100, %91 ], [ %90, %81 ], [ -1939688091, %79 ], [ -462205790, %74 ], [ %73, %69 ], [ -1939688091, %66 ], [ 884511600, %61 ], [ %60, %59 ], [ %58, %45 ], [ %44, %35 ], [ %34, %21 ], [ %20, %17 ]
  %.087.be = phi i1 [ %.087, %16 ], [ %.087, %595 ], [ %.087, %594 ], [ %.087, %585 ], [ %.087, %584 ], [ %.087, %583 ], [ %.087, %582 ], [ %.087, %578 ], [ %.087, %577 ], [ %.087, %576 ], [ %.087, %569 ], [ %.087, %566 ], [ %.087, %565 ], [ %.087, %559 ], [ %.087, %558 ], [ %.087, %557 ], [ %.087, %556 ], [ %.087, %545 ], [ %.087, %535 ], [ %.087, %534 ], [ %.087, %524 ], [ %.087, %514 ], [ %.087, %513 ], [ %.087, %495 ], [ %.087, %485 ], [ %.087, %483 ], [ %.087, %473 ], [ %.087, %463 ], [ %.087, %459 ], [ %.087, %457 ], [ %.087, %444 ], [ %.087, %434 ], [ %.087, %428 ], [ %.087, %423 ], [ %.087, %422 ], [ %.087, %412 ], [ %.087, %402 ], [ %.087, %397 ], [ %.087, %396 ], [ %.087, %383 ], [ %.087, %373 ], [ %.087, %371 ], [ %.087, %370 ], [ %.087, %358 ], [ %.087, %348 ], [ %.087, %343 ], [ %.087, %337 ], [ %.087, %336 ], [ %.087, %329 ], [ %.087, %325 ], [ %.087, %323 ], [ %.087, %319 ], [ %.087, %317 ], [ %.087, %304 ], [ %.087, %294 ], [ %.087, %289 ], [ %.087, %287 ], [ %.087, %270 ], [ %.087, %260 ], [ %.087, %259 ], [ %.087, %257 ], [ %.087, %243 ], [ %.087, %233 ], [ %.087, %229 ], [ %.087, %227 ], [ %.087, %226 ], [ %.087, %214 ], [ %.087, %204 ], [ %.087, %199 ], [ %.087, %193 ], [ %.087, %192 ], [ %.087, %190 ], [ %.087, %173 ], [ %.087, %163 ], [ %.087, %154 ], [ %.087, %152 ], [ %151, %149 ], [ false, %144 ], [ %.087, %139 ], [ %.087, %138 ], [ %.087, %128 ], [ %.087, %118 ], [ %.087, %102 ], [ %.087, %101 ], [ %.087, %91 ], [ %.087, %81 ], [ %.087, %79 ], [ %.087, %74 ], [ %.087, %69 ], [ %.087, %66 ], [ %.087, %61 ], [ %.087, %59 ], [ %.087, %45 ], [ %.087, %35 ], [ %.087, %21 ], [ %.087, %17 ]
  %.085.be = phi i1 [ %.085, %16 ], [ %.085, %595 ], [ %.085, %594 ], [ %.085, %585 ], [ %.085, %584 ], [ %.085, %583 ], [ %.085, %582 ], [ %.085, %578 ], [ %.085, %577 ], [ %.085, %576 ], [ %.085, %569 ], [ %.085, %566 ], [ %.085, %565 ], [ %.085, %559 ], [ %.085, %558 ], [ %.085, %557 ], [ %.085, %556 ], [ %.085, %545 ], [ %.085, %535 ], [ %.085, %534 ], [ %.085, %524 ], [ %.085, %514 ], [ %.085, %513 ], [ %.085, %495 ], [ %.085, %485 ], [ %.085, %483 ], [ %.085, %473 ], [ %.085, %463 ], [ %.085, %459 ], [ %.085, %457 ], [ %.085, %444 ], [ %.085, %434 ], [ %.085, %428 ], [ %.085, %423 ], [ %.085, %422 ], [ %.085, %412 ], [ %.085, %402 ], [ %.085, %397 ], [ %.085, %396 ], [ %.085, %383 ], [ %.085, %373 ], [ %.085, %371 ], [ %.085, %370 ], [ %.085, %358 ], [ %.085, %348 ], [ %.085, %343 ], [ %.085, %337 ], [ %.085, %336 ], [ %.085, %329 ], [ %.085, %325 ], [ %.085, %323 ], [ %.085, %319 ], [ %.085, %317 ], [ %.085, %304 ], [ %.085, %294 ], [ %.085, %289 ], [ %.085, %287 ], [ %.085, %270 ], [ %.085, %260 ], [ %.085, %259 ], [ %.085, %257 ], [ %.085, %243 ], [ %.085, %233 ], [ %.085, %229 ], [ %.085, %227 ], [ %.0..0..0.73, %226 ], [ %.085, %214 ], [ %.085, %204 ], [ false, %199 ], [ %.085, %193 ], [ %.085, %192 ], [ %.085, %190 ], [ %.085, %173 ], [ %.085, %163 ], [ %.085, %154 ], [ %.085, %152 ], [ %.085, %149 ], [ %.085, %144 ], [ %.085, %139 ], [ %.085, %138 ], [ %.085, %128 ], [ %.085, %118 ], [ %.085, %102 ], [ %.085, %101 ], [ %.085, %91 ], [ %.085, %81 ], [ %.085, %79 ], [ %.085, %74 ], [ %.085, %69 ], [ %.085, %66 ], [ %.085, %61 ], [ %.085, %59 ], [ %.085, %45 ], [ %.085, %35 ], [ %.085, %21 ], [ %.085, %17 ]
  %.083.be = phi i1 [ %.083, %16 ], [ %.083, %595 ], [ %.083, %594 ], [ %.083, %585 ], [ %.083, %584 ], [ %.083, %583 ], [ %.083, %582 ], [ %.083, %578 ], [ %.083, %577 ], [ %.083, %576 ], [ %.083, %569 ], [ %.083, %566 ], [ %.083, %565 ], [ %.083, %559 ], [ %.083, %558 ], [ %.083, %557 ], [ %.083, %556 ], [ %.083, %545 ], [ %.083, %535 ], [ %.083, %534 ], [ %.083, %524 ], [ %.083, %514 ], [ %.083, %513 ], [ %.083, %495 ], [ %.083, %485 ], [ %.083, %483 ], [ %.083, %473 ], [ %.083, %463 ], [ %.083, %459 ], [ %.083, %457 ], [ %.083, %444 ], [ %.083, %434 ], [ %.083, %428 ], [ %.083, %423 ], [ %.083, %422 ], [ %.083, %412 ], [ %.083, %402 ], [ %.083, %397 ], [ %.083, %396 ], [ %.083, %383 ], [ %.083, %373 ], [ %.083, %371 ], [ %.083, %370 ], [ %.083, %358 ], [ %.083, %348 ], [ %.083, %343 ], [ %.083, %337 ], [ %.083, %336 ], [ %.083, %329 ], [ %.083, %325 ], [ %.083, %323 ], [ %322, %319 ], [ false, %317 ], [ %.083, %304 ], [ %.083, %294 ], [ %.083, %289 ], [ %.083, %287 ], [ %.083, %270 ], [ %.083, %260 ], [ %.083, %259 ], [ %.083, %257 ], [ %.083, %243 ], [ %.083, %233 ], [ %.083, %229 ], [ %.083, %227 ], [ %.083, %226 ], [ %.083, %214 ], [ %.083, %204 ], [ %.083, %199 ], [ %.083, %193 ], [ %.083, %192 ], [ %.083, %190 ], [ %.083, %173 ], [ %.083, %163 ], [ %.083, %154 ], [ %.083, %152 ], [ %.083, %149 ], [ %.083, %144 ], [ %.083, %139 ], [ %.083, %138 ], [ %.083, %128 ], [ %.083, %118 ], [ %.083, %102 ], [ %.083, %101 ], [ %.083, %91 ], [ %.083, %81 ], [ %.083, %79 ], [ %.083, %74 ], [ %.083, %69 ], [ %.083, %66 ], [ %.083, %61 ], [ %.083, %59 ], [ %.083, %45 ], [ %.083, %35 ], [ %.083, %21 ], [ %.083, %17 ]
  %.081.be = phi i1 [ %.081, %16 ], [ %.081, %595 ], [ %.081, %594 ], [ %.081, %585 ], [ %.081, %584 ], [ %.081, %583 ], [ %.081, %582 ], [ %.081, %578 ], [ %.081, %577 ], [ %.081, %576 ], [ %.081, %569 ], [ %.081, %566 ], [ %.081, %565 ], [ %.081, %559 ], [ %.081, %558 ], [ %.081, %557 ], [ %.081, %556 ], [ %.081, %545 ], [ %.081, %535 ], [ %.081, %534 ], [ %.081, %524 ], [ %.081, %514 ], [ %.081, %513 ], [ %.081, %495 ], [ %.081, %485 ], [ %.081, %483 ], [ %.081, %473 ], [ %.081, %463 ], [ %.081, %459 ], [ %.081, %457 ], [ %.081, %444 ], [ %.081, %434 ], [ %.081, %428 ], [ %.081, %423 ], [ %.081, %422 ], [ %.081, %412 ], [ %.081, %402 ], [ %.081, %397 ], [ %.081, %396 ], [ %.081, %383 ], [ %.081, %373 ], [ %.081, %371 ], [ %.0..0..0.77, %370 ], [ %.081, %358 ], [ %.081, %348 ], [ false, %343 ], [ %.081, %337 ], [ %.081, %336 ], [ %.081, %329 ], [ %.081, %325 ], [ %.081, %323 ], [ %.081, %319 ], [ %.081, %317 ], [ %.081, %304 ], [ %.081, %294 ], [ %.081, %289 ], [ %.081, %287 ], [ %.081, %270 ], [ %.081, %260 ], [ %.081, %259 ], [ %.081, %257 ], [ %.081, %243 ], [ %.081, %233 ], [ %.081, %229 ], [ %.081, %227 ], [ %.081, %226 ], [ %.081, %214 ], [ %.081, %204 ], [ %.081, %199 ], [ %.081, %193 ], [ %.081, %192 ], [ %.081, %190 ], [ %.081, %173 ], [ %.081, %163 ], [ %.081, %154 ], [ %.081, %152 ], [ %.081, %149 ], [ %.081, %144 ], [ %.081, %139 ], [ %.081, %138 ], [ %.081, %128 ], [ %.081, %118 ], [ %.081, %102 ], [ %.081, %101 ], [ %.081, %91 ], [ %.081, %81 ], [ %.081, %79 ], [ %.081, %74 ], [ %.081, %69 ], [ %.081, %66 ], [ %.081, %61 ], [ %.081, %59 ], [ %.081, %45 ], [ %.081, %35 ], [ %.081, %21 ], [ %.081, %17 ]
  %.0.be = phi i1 [ %.0, %16 ], [ %.0, %595 ], [ %.0, %594 ], [ %.0, %585 ], [ %.0, %584 ], [ %.0, %583 ], [ %.0, %582 ], [ %.0, %578 ], [ %.0, %577 ], [ %.0, %576 ], [ %.0, %569 ], [ %.0, %566 ], [ %.0, %565 ], [ %.0, %559 ], [ %.0, %558 ], [ %.0, %557 ], [ %.0, %556 ], [ %.0, %545 ], [ %.0, %535 ], [ %.0, %534 ], [ %.0, %524 ], [ %.0, %514 ], [ %.0, %513 ], [ %.0, %495 ], [ %.0, %485 ], [ %.0, %483 ], [ %.0, %473 ], [ %.0, %463 ], [ %462, %459 ], [ false, %457 ], [ %.0, %444 ], [ %.0, %434 ], [ %.0, %428 ], [ %.0, %423 ], [ %.0, %422 ], [ %.0, %412 ], [ %.0, %402 ], [ %.0, %397 ], [ %.0, %396 ], [ %.0, %383 ], [ %.0, %373 ], [ %.0, %371 ], [ %.0, %370 ], [ %.0, %358 ], [ %.0, %348 ], [ %.0, %343 ], [ %.0, %337 ], [ %.0, %336 ], [ %.0, %329 ], [ %.0, %325 ], [ %.0, %323 ], [ %.0, %319 ], [ %.0, %317 ], [ %.0, %304 ], [ %.0, %294 ], [ %.0, %289 ], [ %.0, %287 ], [ %.0, %270 ], [ %.0, %260 ], [ %.0, %259 ], [ %.0, %257 ], [ %.0, %243 ], [ %.0, %233 ], [ %.0, %229 ], [ %.0, %227 ], [ %.0, %226 ], [ %.0, %214 ], [ %.0, %204 ], [ %.0, %199 ], [ %.0, %193 ], [ %.0, %192 ], [ %.0, %190 ], [ %.0, %173 ], [ %.0, %163 ], [ %.0, %154 ], [ %.0, %152 ], [ %.0, %149 ], [ %.0, %144 ], [ %.0, %139 ], [ %.0, %138 ], [ %.0, %128 ], [ %.0, %118 ], [ %.0, %102 ], [ %.0, %101 ], [ %.0, %91 ], [ %.0, %81 ], [ %.0, %79 ], [ %.0, %74 ], [ %.0, %69 ], [ %.0, %66 ], [ %.0, %61 ], [ %.0, %59 ], [ %.0, %45 ], [ %.0, %35 ], [ %.0, %21 ], [ %.0, %17 ]
  br label %16

17:                                               ; preds = %16
  %18 = load i32, i32* @q, align 4
  %19 = add i32 %18, -1
  store i32 %19, i32* @q, align 4
  %.not = icmp eq i32 %18, 0
  %20 = select i1 %.not, i32 1609941469, i32 777177772
  br label %.backedge

21:                                               ; preds = %16
  %22 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i64* nonnull @a, i64* nonnull @b, i64* nonnull @c, i64* nonnull @d)
  %23 = load i64, i64* @c, align 8
  %24 = add i64 %23, -1
  store i64 %24, i64* @c, align 8
  %25 = load i64, i64* @a, align 8
  %26 = load i64, i64* @b, align 8
  %27 = add i64 %26, %25
  %28 = add i64 %25, 1
  store i64 %28, i64* %11, align 8
  %29 = add i64 %26, 1
  store i64 %29, i64* %12, align 8
  %30 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %11, i64* nonnull dereferenceable(8) %12)
  %31 = load i64, i64* %30, align 8
  %32 = sdiv i64 %27, %31
  %33 = icmp eq i64 %32, 1
  %34 = select i1 %33, i32 2040915353, i32 1154142210
  br label %.backedge

35:                                               ; preds = %16
  %36 = load i32, i32* @x.3, align 4
  %37 = load i32, i32* @y.4, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 1559009871, i32 2142879340
  br label %.backedge

45:                                               ; preds = %16
  %46 = load i64, i64* @a, align 8
  %47 = load i64, i64* @b, align 8
  %48 = add i64 %47, -1
  %49 = icmp eq i64 %46, %48
  store i1 %49, i1* %10, align 1
  %50 = load i32, i32* @x.3, align 4
  %51 = load i32, i32* @y.4, align 4
  %52 = add i32 %50, -1
  %53 = mul i32 %52, %50
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %56, %55
  %58 = select i1 %57, i32 -412110794, i32 2142879340
  br label %.backedge

59:                                               ; preds = %16
  %.0..0..0.71 = load volatile i1, i1* %10, align 1
  %60 = select i1 %.0..0..0.71, i32 1026966258, i32 884511600
  br label %.backedge

61:                                               ; preds = %16
  %62 = load i64, i64* @c, align 8
  %63 = add i64 %62, 1
  store i64 %63, i64* @c, align 8
  %64 = load i64, i64* @d, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* @d, align 8
  br label %.backedge

66:                                               ; preds = %16
  %67 = load i64, i64* @c, align 8
  %68 = trunc i64 %67 to i32
  br label %.backedge

69:                                               ; preds = %16
  %70 = sext i32 %.0105 to i64
  %71 = load i64, i64* @d, align 8
  %72 = icmp sgt i64 %71, %70
  %73 = select i1 %72, i32 1309398943, i32 -621230226
  br label %.backedge

74:                                               ; preds = %16
  %75 = and i32 %.0105, 1
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, i32 65, i32 66
  %78 = call i32 @putchar(i32 %77)
  br label %.backedge

79:                                               ; preds = %16
  %80 = add i32 %.0105, 1
  br label %.backedge

81:                                               ; preds = %16
  %82 = load i32, i32* @x.3, align 4
  %83 = load i32, i32* @y.4, align 4
  %84 = add i32 %82, -1
  %85 = mul i32 %84, %82
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %88, %87
  %90 = select i1 %89, i32 -684662272, i32 -788279922
  br label %.backedge

91:                                               ; preds = %16
  %putchar117 = call i32 @putchar(i32 10)
  %92 = load i32, i32* @x.3, align 4
  %93 = load i32, i32* @y.4, align 4
  %94 = add i32 %92, -1
  %95 = mul i32 %94, %92
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %98, %97
  %100 = select i1 %99, i32 1752017278, i32 -788279922
  br label %.backedge

101:                                              ; preds = %16
  br label %.backedge

102:                                              ; preds = %16
  %103 = load i64, i64* @a, align 8
  %104 = add i64 %103, 1
  %105 = mul nsw i64 %104, %.093
  %106 = load i64, i64* @b, align 8
  %107 = sub i64 %105, %106
  %108 = add i64 %107, -1
  %109 = mul nsw i64 %.093, %.093
  %110 = add nsw i64 %109, -1
  %111 = sdiv i64 %108, %110
  store i64 %111, i64* %13, align 8
  %112 = sdiv i64 %103, %.093
  store i64 %112, i64* %14, align 8
  %113 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %14, i64* nonnull dereferenceable(8) @b)
  %114 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %13, i64* nonnull dereferenceable(8) %113)
  %115 = load i64, i64* %114, align 8
  %116 = icmp slt i64 %115, 0
  %117 = select i1 %116, i32 102840639, i32 -1589857466
  br label %.backedge

118:                                              ; preds = %16
  %119 = load i32, i32* @x.3, align 4
  %120 = load i32, i32* @y.4, align 4
  %121 = add i32 %119, -1
  %122 = mul i32 %121, %119
  %123 = and i32 %122, 1
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %125, %124
  %127 = select i1 %126, i32 -1567040423, i32 2106467479
  br label %.backedge

128:                                              ; preds = %16
  %129 = load i32, i32* @x.3, align 4
  %130 = load i32, i32* @y.4, align 4
  %131 = add i32 %129, -1
  %132 = mul i32 %131, %129
  %133 = and i32 %132, 1
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %135, %134
  %137 = select i1 %136, i32 2067699564, i32 2106467479
  br label %.backedge

138:                                              ; preds = %16
  br label %.backedge

139:                                              ; preds = %16
  %140 = add i64 %.093, 1
  %141 = mul nsw i64 %140, %.0101
  %142 = mul nsw i64 %.093, %.093
  %.neg115 = sub nsw i64 1, %142
  %.neg116 = mul i64 %.neg115, %.0101
  %143 = add i64 %.neg116, %.0103
  br label %.backedge

144:                                              ; preds = %16
  %145 = load i64, i64* @c, align 8
  %146 = load i64, i64* @d, align 8
  %147 = icmp slt i64 %145, %146
  %148 = select i1 %147, i32 -1571341211, i32 1377686064
  br label %.backedge

149:                                              ; preds = %16
  %150 = load i64, i64* @c, align 8
  %151 = icmp slt i64 %150, %.099
  br label %.backedge

152:                                              ; preds = %16
  %153 = select i1 %.087, i32 1262873254, i32 1204787246
  br label %.backedge

154:                                              ; preds = %16
  %155 = load i64, i64* @c, align 8
  %156 = add i64 %.093, 1
  %157 = srem i64 %155, %156
  %158 = icmp eq i64 %157, %.093
  %159 = select i1 %158, i32 66, i32 65
  %160 = call i32 @putchar(i32 %159)
  %161 = load i64, i64* @c, align 8
  %162 = add i64 %161, 1
  store i64 %162, i64* @c, align 8
  br label %.backedge

163:                                              ; preds = %16
  %164 = load i32, i32* @x.3, align 4
  %165 = load i32, i32* @y.4, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 524662336, i32 491839066
  br label %.backedge

173:                                              ; preds = %16
  %174 = mul nsw i64 %.093, %.0101
  %175 = load i64, i64* @a, align 8
  %176 = sub i64 %175, %174
  store i64 %176, i64* @a, align 8
  %177 = load i64, i64* @b, align 8
  %178 = sub i64 %177, %.0101
  store i64 %178, i64* @b, align 8
  %179 = load i64, i64* @c, align 8
  %180 = icmp slt i64 %179, %.099
  store i1 %180, i1* %9, align 1
  %181 = load i32, i32* @x.3, align 4
  %182 = load i32, i32* @y.4, align 4
  %183 = add i32 %181, -1
  %184 = mul i32 %183, %181
  %185 = and i32 %184, 1
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %187, %186
  %189 = select i1 %188, i32 -2147131122, i32 491839066
  br label %.backedge

190:                                              ; preds = %16
  %.0..0..0.72 = load volatile i1, i1* %9, align 1
  %191 = select i1 %.0..0..0.72, i32 -901919915, i32 -701105009
  br label %.backedge

192:                                              ; preds = %16
  %putchar114 = call i32 @putchar(i32 10)
  br label %.backedge

193:                                              ; preds = %16
  %194 = load i64, i64* @c, align 8
  %195 = sub i64 %194, %.099
  store i64 %195, i64* @c, align 8
  %196 = load i64, i64* @d, align 8
  %197 = sub i64 %196, %.099
  store i64 %197, i64* @d, align 8
  %198 = sdiv i64 %.0103, %.093
  br label %.backedge

199:                                              ; preds = %16
  %200 = load i64, i64* @c, align 8
  %201 = load i64, i64* @d, align 8
  %202 = icmp slt i64 %200, %201
  %203 = select i1 %202, i32 827062362, i32 630836870
  br label %.backedge

204:                                              ; preds = %16
  %205 = load i32, i32* @x.3, align 4
  %206 = load i32, i32* @y.4, align 4
  %207 = add i32 %205, -1
  %208 = mul i32 %207, %205
  %209 = and i32 %208, 1
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %211, %210
  %213 = select i1 %212, i32 498643817, i32 -490343742
  br label %.backedge

214:                                              ; preds = %16
  %215 = load i64, i64* @c, align 8
  %216 = icmp slt i64 %215, %.097
  store i1 %216, i1* %8, align 1
  %217 = load i32, i32* @x.3, align 4
  %218 = load i32, i32* @y.4, align 4
  %219 = add i32 %217, -1
  %220 = mul i32 %219, %217
  %221 = and i32 %220, 1
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %223, %222
  %225 = select i1 %224, i32 -101402268, i32 -490343742
  br label %.backedge

226:                                              ; preds = %16
  %.0..0..0.73 = load volatile i1, i1* %8, align 1
  br label %.backedge

227:                                              ; preds = %16
  %228 = select i1 %.085, i32 -1796366848, i32 830827001
  br label %.backedge

229:                                              ; preds = %16
  %230 = call i32 @putchar(i32 65)
  %231 = load i64, i64* @c, align 8
  %232 = add i64 %231, 1
  store i64 %232, i64* @c, align 8
  br label %.backedge

233:                                              ; preds = %16
  %234 = load i32, i32* @x.3, align 4
  %235 = load i32, i32* @y.4, align 4
  %236 = add i32 %234, -1
  %237 = mul i32 %236, %234
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %240, %239
  %242 = select i1 %241, i32 -2127010107, i32 1091779909
  br label %.backedge

243:                                              ; preds = %16
  %244 = load i64, i64* @a, align 8
  %245 = sub i64 %244, %.097
  store i64 %245, i64* @a, align 8
  %246 = load i64, i64* @c, align 8
  %247 = icmp slt i64 %246, %.097
  store i1 %247, i1* %7, align 1
  %248 = load i32, i32* @x.3, align 4
  %249 = load i32, i32* @y.4, align 4
  %250 = add i32 %248, -1
  %251 = mul i32 %250, %248
  %252 = and i32 %251, 1
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %254, %253
  %256 = select i1 %255, i32 1229501918, i32 1091779909
  br label %.backedge

257:                                              ; preds = %16
  %.0..0..0.74 = load volatile i1, i1* %7, align 1
  %258 = select i1 %.0..0..0.74, i32 -442745075, i32 1577406964
  br label %.backedge

259:                                              ; preds = %16
  %putchar113 = call i32 @putchar(i32 10)
  br label %.backedge

260:                                              ; preds = %16
  %261 = load i32, i32* @x.3, align 4
  %262 = load i32, i32* @y.4, align 4
  %263 = add i32 %261, -1
  %264 = mul i32 %263, %261
  %265 = and i32 %264, 1
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %267, %266
  %269 = select i1 %268, i32 -1376675240, i32 -549826411
  br label %.backedge

270:                                              ; preds = %16
  %271 = load i64, i64* @c, align 8
  %272 = sub i64 %271, %.097
  store i64 %272, i64* @c, align 8
  %273 = load i64, i64* @d, align 8
  %274 = sub i64 %273, %.097
  store i64 %274, i64* @d, align 8
  %275 = mul nsw i64 %.093, %.097
  %276 = sub i64 %.0103, %275
  %277 = icmp sgt i64 %276, 0
  store i1 %277, i1* %6, align 1
  %278 = load i32, i32* @x.3, align 4
  %279 = load i32, i32* @y.4, align 4
  %280 = add i32 %278, -1
  %281 = mul i32 %280, %278
  %282 = and i32 %281, 1
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %284, %283
  %286 = select i1 %285, i32 -409351234, i32 -549826411
  br label %.backedge

287:                                              ; preds = %16
  %.0..0..0.75 = load volatile i1, i1* %6, align 1
  %288 = select i1 %.0..0..0.75, i32 -1411500820, i32 2035086078
  br label %.backedge

289:                                              ; preds = %16
  %290 = sub i64 1152368019, %.0103
  %291 = add i64 %290, %.093
  %292 = trunc i64 %291 to i32
  %293 = add i32 %292, -1152368019
  br label %.backedge

294:                                              ; preds = %16
  %295 = load i32, i32* @x.3, align 4
  %296 = load i32, i32* @y.4, align 4
  %297 = add i32 %295, -1
  %298 = mul i32 %297, %295
  %299 = and i32 %298, 1
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %301, %300
  %303 = select i1 %302, i32 1225239475, i32 -1639156370
  br label %.backedge

304:                                              ; preds = %16
  %305 = load i64, i64* @c, align 8
  %306 = load i64, i64* @d, align 8
  %307 = icmp slt i64 %305, %306
  store i1 %307, i1* %5, align 1
  %308 = load i32, i32* @x.3, align 4
  %309 = load i32, i32* @y.4, align 4
  %310 = add i32 %308, -1
  %311 = mul i32 %310, %308
  %312 = and i32 %311, 1
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %314, %313
  %316 = select i1 %315, i32 -446961651, i32 -1639156370
  br label %.backedge

317:                                              ; preds = %16
  %.0..0..0.76 = load volatile i1, i1* %5, align 1
  %318 = select i1 %.0..0..0.76, i32 933575984, i32 2054539844
  br label %.backedge

319:                                              ; preds = %16
  %320 = load i64, i64* @c, align 8
  %321 = sext i32 %.095 to i64
  %322 = icmp slt i64 %320, %321
  br label %.backedge

323:                                              ; preds = %16
  %324 = select i1 %.083, i32 -1994987764, i32 -272564151
  br label %.backedge

325:                                              ; preds = %16
  %326 = call i32 @putchar(i32 66)
  %327 = load i64, i64* @c, align 8
  %328 = add i64 %327, 1
  store i64 %328, i64* @c, align 8
  br label %.backedge

329:                                              ; preds = %16
  %330 = sext i32 %.095 to i64
  %331 = load i64, i64* @b, align 8
  %332 = sub i64 %331, %330
  store i64 %332, i64* @b, align 8
  %333 = load i64, i64* @c, align 8
  %334 = icmp slt i64 %333, %330
  %335 = select i1 %334, i32 -1913822016, i32 -2027585142
  br label %.backedge

336:                                              ; preds = %16
  %putchar112 = call i32 @putchar(i32 10)
  br label %.backedge

337:                                              ; preds = %16
  %338 = sext i32 %.095 to i64
  %339 = load i64, i64* @c, align 8
  %340 = sub i64 %339, %338
  store i64 %340, i64* @c, align 8
  %341 = load i64, i64* @d, align 8
  %342 = sub i64 %341, %338
  store i64 %342, i64* @d, align 8
  br label %.backedge

343:                                              ; preds = %16
  %344 = load i64, i64* @c, align 8
  %345 = load i64, i64* @d, align 8
  %346 = icmp slt i64 %344, %345
  %347 = select i1 %346, i32 -1128818426, i32 345957432
  br label %.backedge

348:                                              ; preds = %16
  %349 = load i32, i32* @x.3, align 4
  %350 = load i32, i32* @y.4, align 4
  %351 = add i32 %349, -1
  %352 = mul i32 %351, %349
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %355, %354
  %357 = select i1 %356, i32 864262829, i32 1589832926
  br label %.backedge

358:                                              ; preds = %16
  %359 = load i64, i64* @c, align 8
  %360 = icmp slt i64 %359, 1
  store i1 %360, i1* %4, align 1
  %361 = load i32, i32* @x.3, align 4
  %362 = load i32, i32* @y.4, align 4
  %363 = add i32 %361, -1
  %364 = mul i32 %363, %361
  %365 = and i32 %364, 1
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %367, %366
  %369 = select i1 %368, i32 -1890433381, i32 1589832926
  br label %.backedge

370:                                              ; preds = %16
  %.0..0..0.77 = load volatile i1, i1* %4, align 1
  br label %.backedge

371:                                              ; preds = %16
  %372 = select i1 %.081, i32 1330102943, i32 680902074
  br label %.backedge

373:                                              ; preds = %16
  %374 = load i32, i32* @x.3, align 4
  %375 = load i32, i32* @y.4, align 4
  %376 = add i32 %374, -1
  %377 = mul i32 %376, %374
  %378 = and i32 %377, 1
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %380, %379
  %382 = select i1 %381, i32 689645439, i32 -1205556761
  br label %.backedge

383:                                              ; preds = %16
  %384 = call i32 @putchar(i32 65)
  %385 = load i64, i64* @c, align 8
  %386 = add i64 %385, 1
  store i64 %386, i64* @c, align 8
  %387 = load i32, i32* @x.3, align 4
  %388 = load i32, i32* @y.4, align 4
  %389 = add i32 %387, -1
  %390 = mul i32 %389, %387
  %391 = and i32 %390, 1
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %393, %392
  %395 = select i1 %394, i32 1723850821, i32 -1205556761
  br label %.backedge

396:                                              ; preds = %16
  br label %.backedge

397:                                              ; preds = %16
  %398 = load i64, i64* @a, align 8
  %.neg111 = add i64 %398, -1
  store i64 %.neg111, i64* @a, align 8
  %399 = load i64, i64* @c, align 8
  %400 = icmp slt i64 %399, 1
  %401 = select i1 %400, i32 491027350, i32 190961978
  br label %.backedge

402:                                              ; preds = %16
  %403 = load i32, i32* @x.3, align 4
  %404 = load i32, i32* @y.4, align 4
  %405 = add i32 %403, -1
  %406 = mul i32 %405, %403
  %407 = and i32 %406, 1
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %409, %408
  %411 = select i1 %410, i32 1895135894, i32 -308307928
  br label %.backedge

412:                                              ; preds = %16
  %putchar110 = call i32 @putchar(i32 10)
  %413 = load i32, i32* @x.3, align 4
  %414 = load i32, i32* @y.4, align 4
  %415 = add i32 %413, -1
  %416 = mul i32 %415, %413
  %417 = and i32 %416, 1
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %419, %418
  %421 = select i1 %420, i32 885928752, i32 -308307928
  br label %.backedge

422:                                              ; preds = %16
  br label %.backedge

423:                                              ; preds = %16
  %424 = load i64, i64* @c, align 8
  %425 = add i64 %424, -1
  store i64 %425, i64* @c, align 8
  %426 = load i64, i64* @d, align 8
  %427 = add i64 %426, -1
  store i64 %427, i64* @d, align 8
  br label %.backedge

428:                                              ; preds = %16
  %429 = load i64, i64* @b, align 8
  %430 = sdiv i64 %429, %.093
  %sext = shl i64 %430, 32
  %431 = ashr exact i64 %sext, 32
  %.neg = add i64 %.093, 1
  %432 = mul nsw i64 %431, %.neg
  %433 = trunc i64 %432 to i32
  br label %.backedge

434:                                              ; preds = %16
  %435 = load i32, i32* @x.3, align 4
  %436 = load i32, i32* @y.4, align 4
  %437 = add i32 %435, -1
  %438 = mul i32 %437, %435
  %439 = and i32 %438, 1
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %441, %440
  %443 = select i1 %442, i32 -229686882, i32 -1554378876
  br label %.backedge

444:                                              ; preds = %16
  %445 = load i64, i64* @c, align 8
  %446 = load i64, i64* @d, align 8
  %447 = icmp slt i64 %445, %446
  store i1 %447, i1* %3, align 1
  %448 = load i32, i32* @x.3, align 4
  %449 = load i32, i32* @y.4, align 4
  %450 = add i32 %448, -1
  %451 = mul i32 %450, %448
  %452 = and i32 %451, 1
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %449, 10
  %455 = or i1 %454, %453
  %456 = select i1 %455, i32 433377717, i32 -1554378876
  br label %.backedge

457:                                              ; preds = %16
  %.0..0..0.78 = load volatile i1, i1* %3, align 1
  %458 = select i1 %.0..0..0.78, i32 -210754293, i32 1485961176
  br label %.backedge

459:                                              ; preds = %16
  %460 = load i64, i64* @c, align 8
  %461 = sext i32 %.091 to i64
  %462 = icmp slt i64 %460, %461
  br label %.backedge

463:                                              ; preds = %16
  store i1 %.0, i1* %1, align 1
  %464 = load i32, i32* @x.3, align 4
  %465 = load i32, i32* @y.4, align 4
  %466 = add i32 %464, -1
  %467 = mul i32 %466, %464
  %468 = and i32 %467, 1
  %469 = icmp eq i32 %468, 0
  %470 = icmp slt i32 %465, 10
  %471 = or i1 %470, %469
  %472 = select i1 %471, i32 860930182, i32 853296388
  br label %.backedge

473:                                              ; preds = %16
  %474 = load i32, i32* @x.3, align 4
  %475 = load i32, i32* @y.4, align 4
  %476 = add i32 %474, -1
  %477 = mul i32 %476, %474
  %478 = and i32 %477, 1
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %480, %479
  %482 = select i1 %481, i32 -772288108, i32 853296388
  br label %.backedge

483:                                              ; preds = %16
  %.0..0..0.80 = load volatile i1, i1* %1, align 1
  %484 = select i1 %.0..0..0.80, i32 -1896871360, i32 -1098288560
  br label %.backedge

485:                                              ; preds = %16
  %486 = load i32, i32* @x.3, align 4
  %487 = load i32, i32* @y.4, align 4
  %488 = add i32 %486, -1
  %489 = mul i32 %488, %486
  %490 = and i32 %489, 1
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %492, %491
  %494 = select i1 %493, i32 792413340, i32 975560272
  br label %.backedge

495:                                              ; preds = %16
  %496 = load i64, i64* @c, align 8
  %497 = add i64 %.093, 1
  %498 = srem i64 %496, %497
  %499 = icmp eq i64 %498, %.093
  %500 = select i1 %499, i32 65, i32 66
  %501 = call i32 @putchar(i32 %500)
  %502 = load i64, i64* @c, align 8
  %503 = add i64 %502, 1
  store i64 %503, i64* @c, align 8
  %504 = load i32, i32* @x.3, align 4
  %505 = load i32, i32* @y.4, align 4
  %506 = add i32 %504, -1
  %507 = mul i32 %506, %504
  %508 = and i32 %507, 1
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %510, %509
  %512 = select i1 %511, i32 -1883344780, i32 975560272
  br label %.backedge

513:                                              ; preds = %16
  br label %.backedge

514:                                              ; preds = %16
  %515 = load i32, i32* @x.3, align 4
  %516 = load i32, i32* @y.4, align 4
  %517 = add i32 %515, -1
  %518 = mul i32 %517, %515
  %519 = and i32 %518, 1
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %521, %520
  %523 = select i1 %522, i32 417834871, i32 -826313382
  br label %.backedge

524:                                              ; preds = %16
  %putchar109 = call i32 @putchar(i32 10)
  %525 = load i32, i32* @x.3, align 4
  %526 = load i32, i32* @y.4, align 4
  %527 = add i32 %525, -1
  %528 = mul i32 %527, %525
  %529 = and i32 %528, 1
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %531, %530
  %533 = select i1 %532, i32 -1562712510, i32 -826313382
  br label %.backedge

534:                                              ; preds = %16
  br label %.backedge

535:                                              ; preds = %16
  %536 = load i32, i32* @x.3, align 4
  %537 = load i32, i32* @y.4, align 4
  %538 = add i32 %536, -1
  %539 = mul i32 %538, %536
  %540 = and i32 %539, 1
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %542, %541
  %544 = select i1 %543, i32 564831256, i32 440299253
  br label %.backedge

545:                                              ; preds = %16
  store i32 0, i32* %2, align 4
  %546 = load i32, i32* @x.3, align 4
  %547 = load i32, i32* @y.4, align 4
  %548 = add i32 %546, -1
  %549 = mul i32 %548, %546
  %550 = and i32 %549, 1
  %551 = icmp eq i32 %550, 0
  %552 = icmp slt i32 %547, 10
  %553 = or i1 %552, %551
  %554 = select i1 %553, i32 -1860617158, i32 440299253
  br label %.backedge

555:                                              ; preds = %16
  %.0..0..0.79 = load volatile i32, i32* %2, align 4
  ret i32 %.0..0..0.79

556:                                              ; preds = %16
  br label %.backedge

557:                                              ; preds = %16
  %putchar108 = call i32 @putchar(i32 10)
  br label %.backedge

558:                                              ; preds = %16
  br label %.backedge

559:                                              ; preds = %16
  %560 = mul nsw i64 %.093, %.0101
  %561 = load i64, i64* @a, align 8
  %562 = sub i64 %561, %560
  store i64 %562, i64* @a, align 8
  %563 = load i64, i64* @b, align 8
  %564 = sub i64 %563, %.0101
  store i64 %564, i64* @b, align 8
  br label %.backedge

565:                                              ; preds = %16
  br label %.backedge

566:                                              ; preds = %16
  %567 = load i64, i64* @a, align 8
  %568 = sub i64 %567, %.097
  store i64 %568, i64* @a, align 8
  br label %.backedge

569:                                              ; preds = %16
  %570 = load i64, i64* @c, align 8
  %571 = sub i64 %570, %.097
  store i64 %571, i64* @c, align 8
  %572 = load i64, i64* @d, align 8
  %573 = sub i64 %572, %.097
  store i64 %573, i64* @d, align 8
  %574 = mul nsw i64 %.093, %.097
  %575 = sub i64 %.0103, %574
  br label %.backedge

576:                                              ; preds = %16
  br label %.backedge

577:                                              ; preds = %16
  br label %.backedge

578:                                              ; preds = %16
  %579 = call i32 @putchar(i32 65)
  %580 = load i64, i64* @c, align 8
  %581 = add i64 %580, 1
  store i64 %581, i64* @c, align 8
  br label %.backedge

582:                                              ; preds = %16
  %putchar107 = call i32 @putchar(i32 10)
  br label %.backedge

583:                                              ; preds = %16
  br label %.backedge

584:                                              ; preds = %16
  br label %.backedge

585:                                              ; preds = %16
  %586 = load i64, i64* @c, align 8
  %587 = add i64 %.093, 1
  %588 = srem i64 %586, %587
  %589 = icmp eq i64 %588, %.093
  %590 = select i1 %589, i32 65, i32 66
  %591 = call i32 @putchar(i32 %590)
  %592 = load i64, i64* @c, align 8
  %593 = add i64 %592, 1
  store i64 %593, i64* @c, align 8
  br label %.backedge

594:                                              ; preds = %16
  %putchar = call i32 @putchar(i32 10)
  br label %.backedge

595:                                              ; preds = %16
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64**, align 8
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.5, align 4
  %10 = load i32, i32* @y.6, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ -253274240, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %16

16:                                               ; preds = %.outer, %16
  switch i32 %.0.ph, label %16 [
    i32 -253274240, label %17
    i32 1113894134, label %20
    i32 -1447205900, label %38
    i32 -1098627195, label %40
    i32 -102366989, label %42
    i32 -951109307, label %44
    i32 -1907039008, label %.outer.backedge
  ]

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 1113894134, i32 -1907039008
  br label %.outer.backedge

20:                                               ; preds = %16
  %21 = alloca i64*, align 8
  store i64** %21, i64*** %6, align 8
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %5, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %4, align 8
  %.0..0..0.5 = load volatile i64**, i64*** %5, align 8
  store i64* %0, i64** %.0..0..0.5, align 8
  %.0..0..0.8 = load volatile i64**, i64*** %4, align 8
  store i64* %1, i64** %.0..0..0.8, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %4, align 8
  %24 = load i64*, i64** %.0..0..0.9, align 8
  %25 = load i64, i64* %24, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %5, align 8
  %26 = load i64*, i64** %.0..0..0.6, align 8
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %25, %27
  store i1 %28, i1* %3, align 1
  %29 = load i32, i32* @x.5, align 4
  %30 = load i32, i32* @y.6, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -1447205900, i32 -1907039008
  br label %.outer.backedge

38:                                               ; preds = %16
  %.0..0..0.11 = load volatile i1, i1* %3, align 1
  %39 = select i1 %.0..0..0.11, i32 -1098627195, i32 -102366989
  br label %.outer.backedge

40:                                               ; preds = %16
  %.0..0..0.10 = load volatile i64**, i64*** %4, align 8
  %41 = load i64*, i64** %.0..0..0.10, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %6, align 8
  store i64* %41, i64** %.0..0..0.2, align 8
  br label %.outer.backedge

42:                                               ; preds = %16
  %.0..0..0.7 = load volatile i64**, i64*** %5, align 8
  %43 = load i64*, i64** %.0..0..0.7, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %6, align 8
  store i64* %43, i64** %.0..0..0.3, align 8
  br label %.outer.backedge

44:                                               ; preds = %16
  %.0..0..0.4 = load volatile i64**, i64*** %6, align 8
  %45 = load i64*, i64** %.0..0..0.4, align 8
  ret i64* %45

.outer.backedge:                                  ; preds = %16, %42, %40, %38, %20, %17
  %.0.ph.be = phi i32 [ %19, %17 ], [ %37, %20 ], [ %39, %38 ], [ -951109307, %40 ], [ -951109307, %42 ], [ 1113894134, %16 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s718892829.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
