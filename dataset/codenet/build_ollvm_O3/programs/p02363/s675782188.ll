; ModuleID = 'build_ollvm/programs/p02363/s675782188.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s675782188.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@.str = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@.str.2 = private unnamed_addr constant [11 x i8] c"%d %d %lld\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s675782188.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0
@str.1 = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1296993687, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1296993687, label %11
    i32 -2038792030, label %14
    i32 1752854214, label %25
    i32 -2061129437, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -2038792030, i32 -2061129437
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 1752854214, i32 -2061129437
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -2038792030, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind uwtable
define void @_Z3putx(i64 %0) local_unnamed_addr #4 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.0.ph = phi i32 [ -1244574356, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %3

3:                                                ; preds = %.outer, %3
  switch i32 %.0.ph, label %3 [
    i32 -1244574356, label %4
    i32 138944287, label %7
    i32 414098540, label %9
    i32 -1172371262, label %11
  ]

4:                                                ; preds = %3
  %.0..0..0. = load volatile i64, i64* %2, align 8
  %5 = icmp slt i64 %.0..0..0., 4294967296
  %6 = select i1 %5, i32 138944287, i32 414098540
  br label %.outer.backedge

7:                                                ; preds = %3
  %8 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 %0)
  br label %.outer.backedge

9:                                                ; preds = %3
  %10 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %9, %7, %4
  %.0.ph.be = phi i32 [ %6, %4 ], [ -1172371262, %7 ], [ -1172371262, %9 ]
  br label %.outer

11:                                               ; preds = %3
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca [100 x [100 x i64]], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %7)
  %14 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %13, i32* nonnull dereferenceable(4) %8)
  br label %15

15:                                               ; preds = %.backedge, %0
  %.070 = phi i32 [ 0, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i32 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i32 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.0 = phi i32 [ 1817920140, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1817920140, label %16
    i32 423076307, label %26
    i32 -1347671945, label %38
    i32 -854957987, label %40
    i32 -552510064, label %41
    i32 -669431860, label %45
    i32 -273199544, label %51
    i32 226216039, label %52
    i32 -205736325, label %53
    i32 154370187, label %63
    i32 -1705838401, label %74
    i32 -2080457953, label %75
    i32 825379521, label %76
    i32 -31752776, label %86
    i32 1355639718, label %98
    i32 557366366, label %100
    i32 604555602, label %108
    i32 -1991559463, label %118
    i32 447489366, label %129
    i32 670498124, label %130
    i32 1706009798, label %140
    i32 -2117198022, label %150
    i32 -952303956, label %151
    i32 753963198, label %161
    i32 1493482045, label %173
    i32 -119537142, label %175
    i32 -747127661, label %176
    i32 1144209535, label %180
    i32 1427667079, label %187
    i32 1011447569, label %197
    i32 -372785422, label %207
    i32 1991687630, label %208
    i32 -1422101381, label %209
    i32 1313104408, label %213
    i32 1803642609, label %220
    i32 -1122462568, label %221
    i32 618197443, label %233
    i32 -1261916031, label %234
    i32 -702166634, label %235
    i32 -881163229, label %237
    i32 1447329627, label %238
    i32 -1680803554, label %240
    i32 1780671943, label %250
    i32 1366161642, label %260
    i32 2110488015, label %261
    i32 -887258747, label %271
    i32 128874788, label %283
    i32 -525136900, label %285
    i32 942291214, label %291
    i32 -927276013, label %301
    i32 325134853, label %311
    i32 525320950, label %312
    i32 1218752648, label %313
    i32 -2128451516, label %315
    i32 760964620, label %325
    i32 -193391965, label %335
    i32 -609845463, label %336
    i32 1804562040, label %340
    i32 -350505811, label %344
    i32 1153453655, label %354
    i32 2124148327, label %366
    i32 -1478440701, label %368
    i32 468031560, label %378
    i32 -2061289647, label %392
    i32 -229596295, label %393
    i32 1530963177, label %395
    i32 -1685560607, label %405
    i32 -414109625, label %415
    i32 -343706125, label %416
    i32 -2083275328, label %418
    i32 -136646376, label %419
    i32 -228326993, label %420
    i32 -1579027322, label %421
    i32 328571912, label %423
    i32 67763654, label %424
    i32 -997647919, label %426
    i32 -1090402704, label %427
    i32 -1721387803, label %428
    i32 -856939827, label %429
    i32 -422177838, label %430
    i32 1205563662, label %431
    i32 -1868422867, label %432
    i32 71387090, label %433
    i32 -1200890543, label %434
    i32 -1222657063, label %439
  ]

.backedge:                                        ; preds = %15, %439, %434, %433, %432, %431, %430, %429, %428, %427, %426, %424, %423, %421, %420, %418, %416, %415, %405, %395, %393, %392, %378, %368, %366, %354, %344, %340, %336, %335, %325, %315, %313, %312, %311, %301, %291, %285, %283, %271, %261, %260, %250, %240, %238, %237, %235, %234, %233, %221, %220, %213, %209, %208, %207, %197, %187, %180, %176, %175, %173, %161, %151, %150, %140, %130, %129, %118, %108, %100, %98, %86, %76, %75, %74, %63, %53, %52, %51, %45, %41, %40, %38, %26, %16
  %.070.be = phi i32 [ %.070, %15 ], [ %.070, %439 ], [ %.070, %434 ], [ %.070, %433 ], [ %.070, %432 ], [ %.070, %431 ], [ %.070, %430 ], [ %.070, %429 ], [ %.070, %428 ], [ %.070, %427 ], [ %.070, %426 ], [ %.070, %424 ], [ %.070, %423 ], [ %422, %421 ], [ %.070, %420 ], [ %.070, %418 ], [ %.070, %416 ], [ %.070, %415 ], [ %.070, %405 ], [ %.070, %395 ], [ %.070, %393 ], [ %.070, %392 ], [ %.070, %378 ], [ %.070, %368 ], [ %.070, %366 ], [ %.070, %354 ], [ %.070, %344 ], [ %.070, %340 ], [ %.070, %336 ], [ %.070, %335 ], [ %.070, %325 ], [ %.070, %315 ], [ %.070, %313 ], [ %.070, %312 ], [ %.070, %311 ], [ %.070, %301 ], [ %.070, %291 ], [ %.070, %285 ], [ %.070, %283 ], [ %.070, %271 ], [ %.070, %261 ], [ %.070, %260 ], [ %.070, %250 ], [ %.070, %240 ], [ %.070, %238 ], [ %.070, %237 ], [ %.070, %235 ], [ %.070, %234 ], [ %.070, %233 ], [ %.070, %221 ], [ %.070, %220 ], [ %.070, %213 ], [ %.070, %209 ], [ %.070, %208 ], [ %.070, %207 ], [ %.070, %197 ], [ %.070, %187 ], [ %.070, %180 ], [ %.070, %176 ], [ %.070, %175 ], [ %.070, %173 ], [ %.070, %161 ], [ %.070, %151 ], [ %.070, %150 ], [ %.070, %140 ], [ %.070, %130 ], [ %.070, %129 ], [ %.070, %118 ], [ %.070, %108 ], [ %.070, %100 ], [ %.070, %98 ], [ %.070, %86 ], [ %.070, %76 ], [ %.070, %75 ], [ %.070, %74 ], [ %64, %63 ], [ %.070, %53 ], [ %.070, %52 ], [ %.070, %51 ], [ %.070, %45 ], [ %.070, %41 ], [ %.070, %40 ], [ %.070, %38 ], [ %.070, %26 ], [ %.070, %16 ]
  %.068.be = phi i32 [ %.068, %15 ], [ %.068, %439 ], [ %.068, %434 ], [ %.068, %433 ], [ %.068, %432 ], [ %.068, %431 ], [ %.068, %430 ], [ %.068, %429 ], [ %.068, %428 ], [ %.068, %427 ], [ %.068, %426 ], [ %.068, %424 ], [ %.068, %423 ], [ %.068, %421 ], [ %.068, %420 ], [ %.068, %418 ], [ %.068, %416 ], [ %.068, %415 ], [ %.068, %405 ], [ %.068, %395 ], [ %.068, %393 ], [ %.068, %392 ], [ %.068, %378 ], [ %.068, %368 ], [ %.068, %366 ], [ %.068, %354 ], [ %.068, %344 ], [ %.068, %340 ], [ %.068, %336 ], [ %.068, %335 ], [ %.068, %325 ], [ %.068, %315 ], [ %.068, %313 ], [ %.068, %312 ], [ %.068, %311 ], [ %.068, %301 ], [ %.068, %291 ], [ %.068, %285 ], [ %.068, %283 ], [ %.068, %271 ], [ %.068, %261 ], [ %.068, %260 ], [ %.068, %250 ], [ %.068, %240 ], [ %.068, %238 ], [ %.068, %237 ], [ %.068, %235 ], [ %.068, %234 ], [ %.068, %233 ], [ %.068, %221 ], [ %.068, %220 ], [ %.068, %213 ], [ %.068, %209 ], [ %.068, %208 ], [ %.068, %207 ], [ %.068, %197 ], [ %.068, %187 ], [ %.068, %180 ], [ %.068, %176 ], [ %.068, %175 ], [ %.068, %173 ], [ %.068, %161 ], [ %.068, %151 ], [ %.068, %150 ], [ %.068, %140 ], [ %.068, %130 ], [ %.068, %129 ], [ %.068, %118 ], [ %.068, %108 ], [ %.068, %100 ], [ %.068, %98 ], [ %.068, %86 ], [ %.068, %76 ], [ %.068, %75 ], [ %.068, %74 ], [ %.068, %63 ], [ %.068, %53 ], [ %.068, %52 ], [ %.neg78, %51 ], [ %.068, %45 ], [ %.068, %41 ], [ 0, %40 ], [ %.068, %38 ], [ %.068, %26 ], [ %.068, %16 ]
  %.066.be = phi i32 [ %.066, %15 ], [ %.066, %439 ], [ %.066, %434 ], [ %.066, %433 ], [ %.066, %432 ], [ %.066, %431 ], [ %.066, %430 ], [ %.066, %429 ], [ %.066, %428 ], [ %.066, %427 ], [ %.066, %426 ], [ %425, %424 ], [ %.066, %423 ], [ %.066, %421 ], [ %.066, %420 ], [ %.066, %418 ], [ %.066, %416 ], [ %.066, %415 ], [ %.066, %405 ], [ %.066, %395 ], [ %.066, %393 ], [ %.066, %392 ], [ %.066, %378 ], [ %.066, %368 ], [ %.066, %366 ], [ %.066, %354 ], [ %.066, %344 ], [ %.066, %340 ], [ %.066, %336 ], [ %.066, %335 ], [ %.066, %325 ], [ %.066, %315 ], [ %.066, %313 ], [ %.066, %312 ], [ %.066, %311 ], [ %.066, %301 ], [ %.066, %291 ], [ %.066, %285 ], [ %.066, %283 ], [ %.066, %271 ], [ %.066, %261 ], [ %.066, %260 ], [ %.066, %250 ], [ %.066, %240 ], [ %.066, %238 ], [ %.066, %237 ], [ %.066, %235 ], [ %.066, %234 ], [ %.066, %233 ], [ %.066, %221 ], [ %.066, %220 ], [ %.066, %213 ], [ %.066, %209 ], [ %.066, %208 ], [ %.066, %207 ], [ %.066, %197 ], [ %.066, %187 ], [ %.066, %180 ], [ %.066, %176 ], [ %.066, %175 ], [ %.066, %173 ], [ %.066, %161 ], [ %.066, %151 ], [ %.066, %150 ], [ %.066, %140 ], [ %.066, %130 ], [ %.066, %129 ], [ %119, %118 ], [ %.066, %108 ], [ %.066, %100 ], [ %.066, %98 ], [ %.066, %86 ], [ %.066, %76 ], [ 0, %75 ], [ %.066, %74 ], [ %.066, %63 ], [ %.066, %53 ], [ %.066, %52 ], [ %.066, %51 ], [ %.066, %45 ], [ %.066, %41 ], [ %.066, %40 ], [ %.066, %38 ], [ %.066, %26 ], [ %.066, %16 ]
  %.064.be = phi i32 [ %.064, %15 ], [ %.064, %439 ], [ %.064, %434 ], [ %.064, %433 ], [ %.064, %432 ], [ %.064, %431 ], [ %.064, %430 ], [ %.064, %429 ], [ %.064, %428 ], [ %.064, %427 ], [ 0, %426 ], [ %.064, %424 ], [ %.064, %423 ], [ %.064, %421 ], [ %.064, %420 ], [ %.064, %418 ], [ %.064, %416 ], [ %.064, %415 ], [ %.064, %405 ], [ %.064, %395 ], [ %.064, %393 ], [ %.064, %392 ], [ %.064, %378 ], [ %.064, %368 ], [ %.064, %366 ], [ %.064, %354 ], [ %.064, %344 ], [ %.064, %340 ], [ %.064, %336 ], [ %.064, %335 ], [ %.064, %325 ], [ %.064, %315 ], [ %.064, %313 ], [ %.064, %312 ], [ %.064, %311 ], [ %.064, %301 ], [ %.064, %291 ], [ %.064, %285 ], [ %.064, %283 ], [ %.064, %271 ], [ %.064, %261 ], [ %.064, %260 ], [ %.064, %250 ], [ %.064, %240 ], [ %239, %238 ], [ %.064, %237 ], [ %.064, %235 ], [ %.064, %234 ], [ %.064, %233 ], [ %.064, %221 ], [ %.064, %220 ], [ %.064, %213 ], [ %.064, %209 ], [ %.064, %208 ], [ %.064, %207 ], [ %.064, %197 ], [ %.064, %187 ], [ %.064, %180 ], [ %.064, %176 ], [ %.064, %175 ], [ %.064, %173 ], [ %.064, %161 ], [ %.064, %151 ], [ %.064, %150 ], [ 0, %140 ], [ %.064, %130 ], [ %.064, %129 ], [ %.064, %118 ], [ %.064, %108 ], [ %.064, %100 ], [ %.064, %98 ], [ %.064, %86 ], [ %.064, %76 ], [ %.064, %75 ], [ %.064, %74 ], [ %.064, %63 ], [ %.064, %53 ], [ %.064, %52 ], [ %.064, %51 ], [ %.064, %45 ], [ %.064, %41 ], [ %.064, %40 ], [ %.064, %38 ], [ %.064, %26 ], [ %.064, %16 ]
  %.062.be = phi i32 [ %.062, %15 ], [ %.062, %439 ], [ %.062, %434 ], [ %.062, %433 ], [ %.062, %432 ], [ %.062, %431 ], [ %.062, %430 ], [ %.062, %429 ], [ %.062, %428 ], [ %.062, %427 ], [ %.062, %426 ], [ %.062, %424 ], [ %.062, %423 ], [ %.062, %421 ], [ %.062, %420 ], [ %.062, %418 ], [ %.062, %416 ], [ %.062, %415 ], [ %.062, %405 ], [ %.062, %395 ], [ %.062, %393 ], [ %.062, %392 ], [ %.062, %378 ], [ %.062, %368 ], [ %.062, %366 ], [ %.062, %354 ], [ %.062, %344 ], [ %.062, %340 ], [ %.062, %336 ], [ %.062, %335 ], [ %.062, %325 ], [ %.062, %315 ], [ %.062, %313 ], [ %.062, %312 ], [ %.062, %311 ], [ %.062, %301 ], [ %.062, %291 ], [ %.062, %285 ], [ %.062, %283 ], [ %.062, %271 ], [ %.062, %261 ], [ %.062, %260 ], [ %.062, %250 ], [ %.062, %240 ], [ %.062, %238 ], [ %.062, %237 ], [ %236, %235 ], [ %.062, %234 ], [ %.062, %233 ], [ %.062, %221 ], [ %.062, %220 ], [ %.062, %213 ], [ %.062, %209 ], [ %.062, %208 ], [ %.062, %207 ], [ %.062, %197 ], [ %.062, %187 ], [ %.062, %180 ], [ %.062, %176 ], [ 0, %175 ], [ %.062, %173 ], [ %.062, %161 ], [ %.062, %151 ], [ %.062, %150 ], [ %.062, %140 ], [ %.062, %130 ], [ %.062, %129 ], [ %.062, %118 ], [ %.062, %108 ], [ %.062, %100 ], [ %.062, %98 ], [ %.062, %86 ], [ %.062, %76 ], [ %.062, %75 ], [ %.062, %74 ], [ %.062, %63 ], [ %.062, %53 ], [ %.062, %52 ], [ %.062, %51 ], [ %.062, %45 ], [ %.062, %41 ], [ %.062, %40 ], [ %.062, %38 ], [ %.062, %26 ], [ %.062, %16 ]
  %.060.be = phi i32 [ %.060, %15 ], [ %.060, %439 ], [ %.060, %434 ], [ %.060, %433 ], [ %.060, %432 ], [ %.060, %431 ], [ %.060, %430 ], [ %.060, %429 ], [ %.060, %428 ], [ %.060, %427 ], [ %.060, %426 ], [ %.060, %424 ], [ %.060, %423 ], [ %.060, %421 ], [ %.060, %420 ], [ %.060, %418 ], [ %.060, %416 ], [ %.060, %415 ], [ %.060, %405 ], [ %.060, %395 ], [ %.060, %393 ], [ %.060, %392 ], [ %.060, %378 ], [ %.060, %368 ], [ %.060, %366 ], [ %.060, %354 ], [ %.060, %344 ], [ %.060, %340 ], [ %.060, %336 ], [ %.060, %335 ], [ %.060, %325 ], [ %.060, %315 ], [ %.060, %313 ], [ %.060, %312 ], [ %.060, %311 ], [ %.060, %301 ], [ %.060, %291 ], [ %.060, %285 ], [ %.060, %283 ], [ %.060, %271 ], [ %.060, %261 ], [ %.060, %260 ], [ %.060, %250 ], [ %.060, %240 ], [ %.060, %238 ], [ %.060, %237 ], [ %.060, %235 ], [ %.060, %234 ], [ %.neg, %233 ], [ %.060, %221 ], [ %.060, %220 ], [ %.060, %213 ], [ %.060, %209 ], [ 0, %208 ], [ %.060, %207 ], [ %.060, %197 ], [ %.060, %187 ], [ %.060, %180 ], [ %.060, %176 ], [ %.060, %175 ], [ %.060, %173 ], [ %.060, %161 ], [ %.060, %151 ], [ %.060, %150 ], [ %.060, %140 ], [ %.060, %130 ], [ %.060, %129 ], [ %.060, %118 ], [ %.060, %108 ], [ %.060, %100 ], [ %.060, %98 ], [ %.060, %86 ], [ %.060, %76 ], [ %.060, %75 ], [ %.060, %74 ], [ %.060, %63 ], [ %.060, %53 ], [ %.060, %52 ], [ %.060, %51 ], [ %.060, %45 ], [ %.060, %41 ], [ %.060, %40 ], [ %.060, %38 ], [ %.060, %26 ], [ %.060, %16 ]
  %.058.be = phi i32 [ %.058, %15 ], [ %.058, %439 ], [ %.058, %434 ], [ %.058, %433 ], [ %.058, %432 ], [ %.058, %431 ], [ %.058, %430 ], [ 0, %429 ], [ %.058, %428 ], [ %.058, %427 ], [ %.058, %426 ], [ %.058, %424 ], [ %.058, %423 ], [ %.058, %421 ], [ %.058, %420 ], [ %.058, %418 ], [ %.058, %416 ], [ %.058, %415 ], [ %.058, %405 ], [ %.058, %395 ], [ %.058, %393 ], [ %.058, %392 ], [ %.058, %378 ], [ %.058, %368 ], [ %.058, %366 ], [ %.058, %354 ], [ %.058, %344 ], [ %.058, %340 ], [ %.058, %336 ], [ %.058, %335 ], [ %.058, %325 ], [ %.058, %315 ], [ %314, %313 ], [ %.058, %312 ], [ %.058, %311 ], [ %.058, %301 ], [ %.058, %291 ], [ %.058, %285 ], [ %.058, %283 ], [ %.058, %271 ], [ %.058, %261 ], [ %.058, %260 ], [ 0, %250 ], [ %.058, %240 ], [ %.058, %238 ], [ %.058, %237 ], [ %.058, %235 ], [ %.058, %234 ], [ %.058, %233 ], [ %.058, %221 ], [ %.058, %220 ], [ %.058, %213 ], [ %.058, %209 ], [ %.058, %208 ], [ %.058, %207 ], [ %.058, %197 ], [ %.058, %187 ], [ %.058, %180 ], [ %.058, %176 ], [ %.058, %175 ], [ %.058, %173 ], [ %.058, %161 ], [ %.058, %151 ], [ %.058, %150 ], [ %.058, %140 ], [ %.058, %130 ], [ %.058, %129 ], [ %.058, %118 ], [ %.058, %108 ], [ %.058, %100 ], [ %.058, %98 ], [ %.058, %86 ], [ %.058, %76 ], [ %.058, %75 ], [ %.058, %74 ], [ %.058, %63 ], [ %.058, %53 ], [ %.058, %52 ], [ %.058, %51 ], [ %.058, %45 ], [ %.058, %41 ], [ %.058, %40 ], [ %.058, %38 ], [ %.058, %26 ], [ %.058, %16 ]
  %.056.be = phi i32 [ %.056, %15 ], [ %.056, %439 ], [ %.056, %434 ], [ %.056, %433 ], [ 0, %432 ], [ %.056, %431 ], [ %.056, %430 ], [ %.056, %429 ], [ %.056, %428 ], [ %.056, %427 ], [ %.056, %426 ], [ %.056, %424 ], [ %.056, %423 ], [ %.056, %421 ], [ %.056, %420 ], [ %.056, %418 ], [ %417, %416 ], [ %.056, %415 ], [ %.056, %405 ], [ %.056, %395 ], [ %.056, %393 ], [ %.056, %392 ], [ %.056, %378 ], [ %.056, %368 ], [ %.056, %366 ], [ %.056, %354 ], [ %.056, %344 ], [ %.056, %340 ], [ %.056, %336 ], [ %.056, %335 ], [ 0, %325 ], [ %.056, %315 ], [ %.056, %313 ], [ %.056, %312 ], [ %.056, %311 ], [ %.056, %301 ], [ %.056, %291 ], [ %.056, %285 ], [ %.056, %283 ], [ %.056, %271 ], [ %.056, %261 ], [ %.056, %260 ], [ %.056, %250 ], [ %.056, %240 ], [ %.056, %238 ], [ %.056, %237 ], [ %.056, %235 ], [ %.056, %234 ], [ %.056, %233 ], [ %.056, %221 ], [ %.056, %220 ], [ %.056, %213 ], [ %.056, %209 ], [ %.056, %208 ], [ %.056, %207 ], [ %.056, %197 ], [ %.056, %187 ], [ %.056, %180 ], [ %.056, %176 ], [ %.056, %175 ], [ %.056, %173 ], [ %.056, %161 ], [ %.056, %151 ], [ %.056, %150 ], [ %.056, %140 ], [ %.056, %130 ], [ %.056, %129 ], [ %.056, %118 ], [ %.056, %108 ], [ %.056, %100 ], [ %.056, %98 ], [ %.056, %86 ], [ %.056, %76 ], [ %.056, %75 ], [ %.056, %74 ], [ %.056, %63 ], [ %.056, %53 ], [ %.056, %52 ], [ %.056, %51 ], [ %.056, %45 ], [ %.056, %41 ], [ %.056, %40 ], [ %.056, %38 ], [ %.056, %26 ], [ %.056, %16 ]
  %.054.be = phi i32 [ %.054, %15 ], [ %.054, %439 ], [ %.054, %434 ], [ %.054, %433 ], [ %.054, %432 ], [ %.054, %431 ], [ %.054, %430 ], [ %.054, %429 ], [ %.054, %428 ], [ %.054, %427 ], [ %.054, %426 ], [ %.054, %424 ], [ %.054, %423 ], [ %.054, %421 ], [ %.054, %420 ], [ %.054, %418 ], [ %.054, %416 ], [ %.054, %415 ], [ %.054, %405 ], [ %.054, %395 ], [ %394, %393 ], [ %.054, %392 ], [ %.054, %378 ], [ %.054, %368 ], [ %.054, %366 ], [ %.054, %354 ], [ %.054, %344 ], [ 1, %340 ], [ %.054, %336 ], [ %.054, %335 ], [ %.054, %325 ], [ %.054, %315 ], [ %.054, %313 ], [ %.054, %312 ], [ %.054, %311 ], [ %.054, %301 ], [ %.054, %291 ], [ %.054, %285 ], [ %.054, %283 ], [ %.054, %271 ], [ %.054, %261 ], [ %.054, %260 ], [ %.054, %250 ], [ %.054, %240 ], [ %.054, %238 ], [ %.054, %237 ], [ %.054, %235 ], [ %.054, %234 ], [ %.054, %233 ], [ %.054, %221 ], [ %.054, %220 ], [ %.054, %213 ], [ %.054, %209 ], [ %.054, %208 ], [ %.054, %207 ], [ %.054, %197 ], [ %.054, %187 ], [ %.054, %180 ], [ %.054, %176 ], [ %.054, %175 ], [ %.054, %173 ], [ %.054, %161 ], [ %.054, %151 ], [ %.054, %150 ], [ %.054, %140 ], [ %.054, %130 ], [ %.054, %129 ], [ %.054, %118 ], [ %.054, %108 ], [ %.054, %100 ], [ %.054, %98 ], [ %.054, %86 ], [ %.054, %76 ], [ %.054, %75 ], [ %.054, %74 ], [ %.054, %63 ], [ %.054, %53 ], [ %.054, %52 ], [ %.054, %51 ], [ %.054, %45 ], [ %.054, %41 ], [ %.054, %40 ], [ %.054, %38 ], [ %.054, %26 ], [ %.054, %16 ]
  %.0.be = phi i32 [ %.0, %15 ], [ -1685560607, %439 ], [ 468031560, %434 ], [ 1153453655, %433 ], [ 760964620, %432 ], [ -927276013, %431 ], [ -887258747, %430 ], [ 1780671943, %429 ], [ 1011447569, %428 ], [ 753963198, %427 ], [ 1706009798, %426 ], [ -1991559463, %424 ], [ -31752776, %423 ], [ 154370187, %421 ], [ 423076307, %420 ], [ -136646376, %418 ], [ -609845463, %416 ], [ -343706125, %415 ], [ %414, %405 ], [ %404, %395 ], [ -350505811, %393 ], [ -229596295, %392 ], [ %391, %378 ], [ %377, %368 ], [ %367, %366 ], [ %365, %354 ], [ %353, %344 ], [ -350505811, %340 ], [ %339, %336 ], [ -609845463, %335 ], [ %334, %325 ], [ %324, %315 ], [ 2110488015, %313 ], [ 1218752648, %312 ], [ -136646376, %311 ], [ %310, %301 ], [ %300, %291 ], [ %290, %285 ], [ %284, %283 ], [ %282, %271 ], [ %270, %261 ], [ 2110488015, %260 ], [ %259, %250 ], [ %249, %240 ], [ -952303956, %238 ], [ 1447329627, %237 ], [ -747127661, %235 ], [ -702166634, %234 ], [ -1422101381, %233 ], [ 618197443, %221 ], [ 618197443, %220 ], [ %219, %213 ], [ %212, %209 ], [ -1422101381, %208 ], [ -702166634, %207 ], [ %206, %197 ], [ %196, %187 ], [ %186, %180 ], [ %179, %176 ], [ -747127661, %175 ], [ %174, %173 ], [ %172, %161 ], [ %160, %151 ], [ -952303956, %150 ], [ %149, %140 ], [ %139, %130 ], [ 825379521, %129 ], [ %128, %118 ], [ %117, %108 ], [ 604555602, %100 ], [ %99, %98 ], [ %97, %86 ], [ %85, %76 ], [ 825379521, %75 ], [ 1817920140, %74 ], [ %73, %63 ], [ %62, %53 ], [ -205736325, %52 ], [ -552510064, %51 ], [ -273199544, %45 ], [ %44, %41 ], [ -552510064, %40 ], [ %39, %38 ], [ %37, %26 ], [ %25, %16 ]
  br label %15

16:                                               ; preds = %15
  %17 = load i32, i32* @x.8, align 4
  %18 = load i32, i32* @y.9, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 423076307, i32 -228326993
  br label %.backedge

26:                                               ; preds = %15
  %27 = load i32, i32* %7, align 4
  %28 = icmp slt i32 %.070, %27
  store i1 %28, i1* %5, align 1
  %29 = load i32, i32* @x.8, align 4
  %30 = load i32, i32* @y.9, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -1347671945, i32 -228326993
  br label %.backedge

38:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %39 = select i1 %.0..0..0., i32 -854957987, i32 -2080457953
  br label %.backedge

40:                                               ; preds = %15
  br label %.backedge

41:                                               ; preds = %15
  %42 = load i32, i32* %7, align 4
  %43 = icmp slt i32 %.068, %42
  %44 = select i1 %43, i32 -669431860, i32 226216039
  br label %.backedge

45:                                               ; preds = %15
  %46 = icmp eq i32 %.070, %.068
  %47 = select i1 %46, i64 0, i64 4294967296
  %48 = sext i32 %.070 to i64
  %49 = sext i32 %.068 to i64
  %50 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %48, i64 %49
  store i64 %47, i64* %50, align 8
  br label %.backedge

51:                                               ; preds = %15
  %.neg78 = add i32 %.068, 1
  br label %.backedge

52:                                               ; preds = %15
  br label %.backedge

53:                                               ; preds = %15
  %54 = load i32, i32* @x.8, align 4
  %55 = load i32, i32* @y.9, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 154370187, i32 -1579027322
  br label %.backedge

63:                                               ; preds = %15
  %64 = add i32 %.070, 1
  %65 = load i32, i32* @x.8, align 4
  %66 = load i32, i32* @y.9, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 -1705838401, i32 -1579027322
  br label %.backedge

74:                                               ; preds = %15
  br label %.backedge

75:                                               ; preds = %15
  br label %.backedge

76:                                               ; preds = %15
  %77 = load i32, i32* @x.8, align 4
  %78 = load i32, i32* @y.9, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 -31752776, i32 328571912
  br label %.backedge

86:                                               ; preds = %15
  %87 = load i32, i32* %8, align 4
  %88 = icmp slt i32 %.066, %87
  store i1 %88, i1* %4, align 1
  %89 = load i32, i32* @x.8, align 4
  %90 = load i32, i32* @y.9, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 1355639718, i32 328571912
  br label %.backedge

98:                                               ; preds = %15
  %.0..0..0.50 = load volatile i1, i1* %4, align 1
  %99 = select i1 %.0..0..0.50, i32 557366366, i32 670498124
  br label %.backedge

100:                                              ; preds = %15
  %101 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32* nonnull %9, i32* nonnull %10, i64* nonnull %11)
  %102 = load i64, i64* %11, align 8
  %103 = load i32, i32* %9, align 4
  %104 = sext i32 %103 to i64
  %105 = load i32, i32* %10, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %104, i64 %106
  store i64 %102, i64* %107, align 8
  br label %.backedge

108:                                              ; preds = %15
  %109 = load i32, i32* @x.8, align 4
  %110 = load i32, i32* @y.9, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 -1991559463, i32 67763654
  br label %.backedge

118:                                              ; preds = %15
  %119 = add i32 %.066, 1
  %120 = load i32, i32* @x.8, align 4
  %121 = load i32, i32* @y.9, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 447489366, i32 67763654
  br label %.backedge

129:                                              ; preds = %15
  br label %.backedge

130:                                              ; preds = %15
  %131 = load i32, i32* @x.8, align 4
  %132 = load i32, i32* @y.9, align 4
  %133 = add i32 %131, -1
  %134 = mul i32 %133, %131
  %135 = and i32 %134, 1
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %137, %136
  %139 = select i1 %138, i32 1706009798, i32 -997647919
  br label %.backedge

140:                                              ; preds = %15
  %141 = load i32, i32* @x.8, align 4
  %142 = load i32, i32* @y.9, align 4
  %143 = add i32 %141, -1
  %144 = mul i32 %143, %141
  %145 = and i32 %144, 1
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %147, %146
  %149 = select i1 %148, i32 -2117198022, i32 -997647919
  br label %.backedge

150:                                              ; preds = %15
  br label %.backedge

151:                                              ; preds = %15
  %152 = load i32, i32* @x.8, align 4
  %153 = load i32, i32* @y.9, align 4
  %154 = add i32 %152, -1
  %155 = mul i32 %154, %152
  %156 = and i32 %155, 1
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %158, %157
  %160 = select i1 %159, i32 753963198, i32 -1090402704
  br label %.backedge

161:                                              ; preds = %15
  %162 = load i32, i32* %7, align 4
  %163 = icmp slt i32 %.064, %162
  store i1 %163, i1* %3, align 1
  %164 = load i32, i32* @x.8, align 4
  %165 = load i32, i32* @y.9, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 1493482045, i32 -1090402704
  br label %.backedge

173:                                              ; preds = %15
  %.0..0..0.51 = load volatile i1, i1* %3, align 1
  %174 = select i1 %.0..0..0.51, i32 -119537142, i32 -1680803554
  br label %.backedge

175:                                              ; preds = %15
  br label %.backedge

176:                                              ; preds = %15
  %177 = load i32, i32* %7, align 4
  %178 = icmp slt i32 %.062, %177
  %179 = select i1 %178, i32 1144209535, i32 -881163229
  br label %.backedge

180:                                              ; preds = %15
  %181 = sext i32 %.062 to i64
  %182 = sext i32 %.064 to i64
  %183 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %181, i64 %182
  %184 = load i64, i64* %183, align 8
  %185 = icmp eq i64 %184, 4294967296
  %186 = select i1 %185, i32 1427667079, i32 1991687630
  br label %.backedge

187:                                              ; preds = %15
  %188 = load i32, i32* @x.8, align 4
  %189 = load i32, i32* @y.9, align 4
  %190 = add i32 %188, -1
  %191 = mul i32 %190, %188
  %192 = and i32 %191, 1
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %194, %193
  %196 = select i1 %195, i32 1011447569, i32 -1721387803
  br label %.backedge

197:                                              ; preds = %15
  %198 = load i32, i32* @x.8, align 4
  %199 = load i32, i32* @y.9, align 4
  %200 = add i32 %198, -1
  %201 = mul i32 %200, %198
  %202 = and i32 %201, 1
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %204, %203
  %206 = select i1 %205, i32 -372785422, i32 -1721387803
  br label %.backedge

207:                                              ; preds = %15
  br label %.backedge

208:                                              ; preds = %15
  br label %.backedge

209:                                              ; preds = %15
  %210 = load i32, i32* %7, align 4
  %211 = icmp slt i32 %.060, %210
  %212 = select i1 %211, i32 1313104408, i32 -1261916031
  br label %.backedge

213:                                              ; preds = %15
  %214 = sext i32 %.064 to i64
  %215 = sext i32 %.060 to i64
  %216 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %214, i64 %215
  %217 = load i64, i64* %216, align 8
  %218 = icmp eq i64 %217, 4294967296
  %219 = select i1 %218, i32 1803642609, i32 -1122462568
  br label %.backedge

220:                                              ; preds = %15
  br label %.backedge

221:                                              ; preds = %15
  %222 = sext i32 %.062 to i64
  %223 = sext i32 %.060 to i64
  %224 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %222, i64 %223
  %225 = sext i32 %.064 to i64
  %226 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %222, i64 %225
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %225, i64 %223
  %229 = load i64, i64* %228, align 8
  %230 = add i64 %229, %227
  store i64 %230, i64* %12, align 8
  %231 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %224, i64* nonnull dereferenceable(8) %12)
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %224, align 8
  br label %.backedge

233:                                              ; preds = %15
  %.neg = add i32 %.060, 1
  br label %.backedge

234:                                              ; preds = %15
  br label %.backedge

235:                                              ; preds = %15
  %236 = add i32 %.062, 1
  br label %.backedge

237:                                              ; preds = %15
  br label %.backedge

238:                                              ; preds = %15
  %239 = add i32 %.064, 1
  br label %.backedge

240:                                              ; preds = %15
  %241 = load i32, i32* @x.8, align 4
  %242 = load i32, i32* @y.9, align 4
  %243 = add i32 %241, -1
  %244 = mul i32 %243, %241
  %245 = and i32 %244, 1
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %247, %246
  %249 = select i1 %248, i32 1780671943, i32 -856939827
  br label %.backedge

250:                                              ; preds = %15
  %251 = load i32, i32* @x.8, align 4
  %252 = load i32, i32* @y.9, align 4
  %253 = add i32 %251, -1
  %254 = mul i32 %253, %251
  %255 = and i32 %254, 1
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %257, %256
  %259 = select i1 %258, i32 1366161642, i32 -856939827
  br label %.backedge

260:                                              ; preds = %15
  br label %.backedge

261:                                              ; preds = %15
  %262 = load i32, i32* @x.8, align 4
  %263 = load i32, i32* @y.9, align 4
  %264 = add i32 %262, -1
  %265 = mul i32 %264, %262
  %266 = and i32 %265, 1
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %268, %267
  %270 = select i1 %269, i32 -887258747, i32 -422177838
  br label %.backedge

271:                                              ; preds = %15
  %272 = load i32, i32* %7, align 4
  %273 = icmp slt i32 %.058, %272
  store i1 %273, i1* %2, align 1
  %274 = load i32, i32* @x.8, align 4
  %275 = load i32, i32* @y.9, align 4
  %276 = add i32 %274, -1
  %277 = mul i32 %276, %274
  %278 = and i32 %277, 1
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %280, %279
  %282 = select i1 %281, i32 128874788, i32 -422177838
  br label %.backedge

283:                                              ; preds = %15
  %.0..0..0.52 = load volatile i1, i1* %2, align 1
  %284 = select i1 %.0..0..0.52, i32 -525136900, i32 -2128451516
  br label %.backedge

285:                                              ; preds = %15
  %286 = sext i32 %.058 to i64
  %287 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %286, i64 %286
  %288 = load i64, i64* %287, align 8
  %289 = icmp slt i64 %288, 0
  %290 = select i1 %289, i32 942291214, i32 525320950
  br label %.backedge

291:                                              ; preds = %15
  %292 = load i32, i32* @x.8, align 4
  %293 = load i32, i32* @y.9, align 4
  %294 = add i32 %292, -1
  %295 = mul i32 %294, %292
  %296 = and i32 %295, 1
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %298, %297
  %300 = select i1 %299, i32 -927276013, i32 1205563662
  br label %.backedge

301:                                              ; preds = %15
  %puts77 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @str.1, i64 0, i64 0))
  %302 = load i32, i32* @x.8, align 4
  %303 = load i32, i32* @y.9, align 4
  %304 = add i32 %302, -1
  %305 = mul i32 %304, %302
  %306 = and i32 %305, 1
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %308, %307
  %310 = select i1 %309, i32 325134853, i32 1205563662
  br label %.backedge

311:                                              ; preds = %15
  br label %.backedge

312:                                              ; preds = %15
  br label %.backedge

313:                                              ; preds = %15
  %314 = add i32 %.058, 1
  br label %.backedge

315:                                              ; preds = %15
  %316 = load i32, i32* @x.8, align 4
  %317 = load i32, i32* @y.9, align 4
  %318 = add i32 %316, -1
  %319 = mul i32 %318, %316
  %320 = and i32 %319, 1
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %322, %321
  %324 = select i1 %323, i32 760964620, i32 -1868422867
  br label %.backedge

325:                                              ; preds = %15
  %326 = load i32, i32* @x.8, align 4
  %327 = load i32, i32* @y.9, align 4
  %328 = add i32 %326, -1
  %329 = mul i32 %328, %326
  %330 = and i32 %329, 1
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %332, %331
  %334 = select i1 %333, i32 -193391965, i32 -1868422867
  br label %.backedge

335:                                              ; preds = %15
  br label %.backedge

336:                                              ; preds = %15
  %337 = load i32, i32* %7, align 4
  %338 = icmp slt i32 %.056, %337
  %339 = select i1 %338, i32 1804562040, i32 -2083275328
  br label %.backedge

340:                                              ; preds = %15
  %341 = sext i32 %.056 to i64
  %342 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %341, i64 0
  %343 = load i64, i64* %342, align 16
  call void @_Z3putx(i64 %343)
  br label %.backedge

344:                                              ; preds = %15
  %345 = load i32, i32* @x.8, align 4
  %346 = load i32, i32* @y.9, align 4
  %347 = add i32 %345, -1
  %348 = mul i32 %347, %345
  %349 = and i32 %348, 1
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %351, %350
  %353 = select i1 %352, i32 1153453655, i32 71387090
  br label %.backedge

354:                                              ; preds = %15
  %355 = load i32, i32* %7, align 4
  %356 = icmp slt i32 %.054, %355
  store i1 %356, i1* %1, align 1
  %357 = load i32, i32* @x.8, align 4
  %358 = load i32, i32* @y.9, align 4
  %359 = add i32 %357, -1
  %360 = mul i32 %359, %357
  %361 = and i32 %360, 1
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %363, %362
  %365 = select i1 %364, i32 2124148327, i32 71387090
  br label %.backedge

366:                                              ; preds = %15
  %.0..0..0.53 = load volatile i1, i1* %1, align 1
  %367 = select i1 %.0..0..0.53, i32 -1478440701, i32 1530963177
  br label %.backedge

368:                                              ; preds = %15
  %369 = load i32, i32* @x.8, align 4
  %370 = load i32, i32* @y.9, align 4
  %371 = add i32 %369, -1
  %372 = mul i32 %371, %369
  %373 = and i32 %372, 1
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %375, %374
  %377 = select i1 %376, i32 468031560, i32 -1200890543
  br label %.backedge

378:                                              ; preds = %15
  %putchar76 = call i32 @putchar(i32 32)
  %379 = sext i32 %.056 to i64
  %380 = sext i32 %.054 to i64
  %381 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %379, i64 %380
  %382 = load i64, i64* %381, align 8
  call void @_Z3putx(i64 %382)
  %383 = load i32, i32* @x.8, align 4
  %384 = load i32, i32* @y.9, align 4
  %385 = add i32 %383, -1
  %386 = mul i32 %385, %383
  %387 = and i32 %386, 1
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %389, %388
  %391 = select i1 %390, i32 -2061289647, i32 -1200890543
  br label %.backedge

392:                                              ; preds = %15
  br label %.backedge

393:                                              ; preds = %15
  %394 = add i32 %.054, 1
  br label %.backedge

395:                                              ; preds = %15
  %396 = load i32, i32* @x.8, align 4
  %397 = load i32, i32* @y.9, align 4
  %398 = add i32 %396, -1
  %399 = mul i32 %398, %396
  %400 = and i32 %399, 1
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %402, %401
  %404 = select i1 %403, i32 -1685560607, i32 -1222657063
  br label %.backedge

405:                                              ; preds = %15
  %putchar75 = call i32 @putchar(i32 10)
  %406 = load i32, i32* @x.8, align 4
  %407 = load i32, i32* @y.9, align 4
  %408 = add i32 %406, -1
  %409 = mul i32 %408, %406
  %410 = and i32 %409, 1
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %412, %411
  %414 = select i1 %413, i32 -414109625, i32 -1222657063
  br label %.backedge

415:                                              ; preds = %15
  br label %.backedge

416:                                              ; preds = %15
  %417 = add i32 %.056, 1
  br label %.backedge

418:                                              ; preds = %15
  br label %.backedge

419:                                              ; preds = %15
  ret i32 0

420:                                              ; preds = %15
  br label %.backedge

421:                                              ; preds = %15
  %422 = add i32 %.070, 1
  br label %.backedge

423:                                              ; preds = %15
  br label %.backedge

424:                                              ; preds = %15
  %425 = add i32 %.066, 1
  br label %.backedge

426:                                              ; preds = %15
  br label %.backedge

427:                                              ; preds = %15
  br label %.backedge

428:                                              ; preds = %15
  br label %.backedge

429:                                              ; preds = %15
  br label %.backedge

430:                                              ; preds = %15
  br label %.backedge

431:                                              ; preds = %15
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @str.1, i64 0, i64 0))
  br label %.backedge

432:                                              ; preds = %15
  br label %.backedge

433:                                              ; preds = %15
  br label %.backedge

434:                                              ; preds = %15
  %putchar74 = call i32 @putchar(i32 32)
  %435 = sext i32 %.056 to i64
  %436 = sext i32 %.054 to i64
  %437 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %6, i64 0, i64 %435, i64 %436
  %438 = load i64, i64* %437, align 8
  call void @_Z3putx(i64 %438)
  br label %.backedge

439:                                              ; preds = %15
  %putchar = call i32 @putchar(i32 10)
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #7 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %1, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %3, align 8
  %7 = load i32, i32* @x.10, align 4
  %8 = load i32, i32* @y.11, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 794878248, i32 184729493
  %16 = select i1 %14, i32 -1970909553, i32 184729493
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.08.ph = phi i64* [ undef, %2 ], [ %.08.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ 1376566522, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %.outer10

.outer10:                                         ; preds = %.outer10.backedge, %.outer
  %.0.ph11 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph11.be, %.outer10.backedge ]
  br label %17

17:                                               ; preds = %.outer10, %17
  switch i32 %.0.ph11, label %17 [
    i32 1376566522, label %18
    i32 1186329010, label %.outer.backedge
    i32 -1518117732, label %.outer10.backedge
    i32 -1970909553, label %21
    i32 794878248, label %22
    i32 463718768, label %23
    i32 184729493, label %24
  ]

18:                                               ; preds = %17
  %.0..0..0.6 = load volatile i64, i64* %4, align 8
  %.0..0..0.7 = load volatile i64, i64* %3, align 8
  %19 = icmp slt i64 %.0..0..0.6, %.0..0..0.7
  %20 = select i1 %19, i32 1186329010, i32 -1518117732
  br label %.outer10.backedge

21:                                               ; preds = %17
  br label %.outer.backedge

22:                                               ; preds = %17
  br label %.outer10.backedge

.outer10.backedge:                                ; preds = %17, %22, %18
  %.0.ph11.be = phi i32 [ %20, %18 ], [ 463718768, %22 ], [ %16, %17 ]
  br label %.outer10

23:                                               ; preds = %17
  ret i64* %.08.ph

24:                                               ; preds = %17
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %17, %24, %21
  %.08.ph.be = phi i64* [ %0, %21 ], [ %0, %24 ], [ %1, %17 ]
  %.0.ph.be = phi i32 [ %15, %21 ], [ -1970909553, %24 ], [ 463718768, %17 ]
  br label %.outer
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s675782188.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.12, align 4
  %4 = load i32, i32* @y.13, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1122939255, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1122939255, label %11
    i32 -721062301, label %14
    i32 -24520359, label %24
    i32 1891866607, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -721062301, i32 1891866607
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.12, align 4
  %16 = load i32, i32* @y.13, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -24520359, i32 1891866607
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -721062301, %25 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
