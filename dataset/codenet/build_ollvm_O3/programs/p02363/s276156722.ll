; ModuleID = 'build_ollvm/programs/p02363/s276156722.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s276156722.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@dist = global [110 x [110 x i64]] zeroinitializer, align 16
@.str = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s276156722.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  br label %13

13:                                               ; preds = %.backedge, %0
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i8 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.0 = phi i32 [ -1022626753, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1022626753, label %14
    i32 1739892289, label %24
    i32 -230270045, label %36
    i32 -1001682240, label %38
    i32 594143389, label %39
    i32 -1947471592, label %49
    i32 -1259977401, label %61
    i32 -1516798723, label %63
    i32 -805358655, label %66
    i32 -682489626, label %76
    i32 -1032094222, label %86
    i32 1720457577, label %87
    i32 1596477691, label %88
    i32 -274813265, label %91
    i32 796841196, label %107
    i32 -805819969, label %109
    i32 -1503143040, label %110
    i32 223542102, label %114
    i32 1110534863, label %124
    i32 611081089, label %134
    i32 -215317709, label %135
    i32 -933860954, label %139
    i32 -777575934, label %140
    i32 1625777669, label %150
    i32 1938845248, label %162
    i32 117830478, label %164
    i32 -1919270193, label %170
    i32 139493321, label %176
    i32 1623658361, label %186
    i32 1692974789, label %207
    i32 1938205816, label %208
    i32 1573316235, label %218
    i32 831046543, label %228
    i32 -412355406, label %229
    i32 1117866779, label %230
    i32 1606130418, label %240
    i32 -180415898, label %250
    i32 112917745, label %251
    i32 -683527512, label %261
    i32 507454378, label %272
    i32 889118742, label %273
    i32 -2037227748, label %274
    i32 -536557459, label %276
    i32 -192834261, label %277
    i32 -847449008, label %281
    i32 991404905, label %287
    i32 766925701, label %297
    i32 -374778629, label %308
    i32 -635383586, label %309
    i32 -1174231684, label %310
    i32 -694725736, label %312
    i32 -808128705, label %322
    i32 -1405932006, label %334
    i32 1749043701, label %336
    i32 -242820339, label %337
    i32 -984573542, label %338
    i32 195527606, label %342
    i32 1265031120, label %352
    i32 150342327, label %362
    i32 -1678978178, label %363
    i32 -120560103, label %373
    i32 29223593, label %385
    i32 -938332512, label %387
    i32 611659738, label %394
    i32 -1929371844, label %396
    i32 -1640843379, label %402
    i32 353421169, label %407
    i32 358077153, label %417
    i32 -1978661621, label %428
    i32 -1664805630, label %429
    i32 80233033, label %430
    i32 -60021597, label %432
    i32 599862784, label %433
    i32 1318742327, label %443
    i32 -393085382, label %453
    i32 -1208291936, label %454
    i32 -992667322, label %456
    i32 -502364560, label %457
    i32 -468553816, label %459
    i32 1048394783, label %460
    i32 -587997565, label %461
    i32 -1073253680, label %473
    i32 -1280424508, label %474
    i32 -974208210, label %475
    i32 1484317335, label %477
    i32 1976630004, label %479
    i32 495047388, label %480
    i32 -1096118056, label %481
    i32 -831630149, label %482
    i32 -1571936598, label %483
  ]

.backedge:                                        ; preds = %13, %483, %482, %481, %480, %479, %477, %475, %474, %473, %461, %460, %459, %457, %456, %454, %443, %433, %432, %430, %429, %428, %417, %407, %402, %396, %394, %387, %385, %373, %363, %362, %352, %342, %338, %337, %336, %334, %322, %312, %310, %309, %308, %297, %287, %281, %277, %276, %274, %273, %272, %261, %251, %250, %240, %230, %229, %228, %218, %208, %207, %186, %176, %170, %164, %162, %150, %140, %139, %135, %134, %124, %114, %110, %109, %107, %91, %88, %87, %86, %76, %66, %63, %61, %49, %39, %38, %36, %24, %14
  %.074.be = phi i32 [ %.074, %13 ], [ %.074, %483 ], [ %.074, %482 ], [ %.074, %481 ], [ %.074, %480 ], [ %.074, %479 ], [ %.074, %477 ], [ %.074, %475 ], [ %.074, %474 ], [ %.074, %473 ], [ %.074, %461 ], [ %.074, %460 ], [ %.074, %459 ], [ %458, %457 ], [ %.074, %456 ], [ %.074, %454 ], [ %.074, %443 ], [ %.074, %433 ], [ %.074, %432 ], [ %.074, %430 ], [ %.074, %429 ], [ %.074, %428 ], [ %.074, %417 ], [ %.074, %407 ], [ %.074, %402 ], [ %.074, %396 ], [ %.074, %394 ], [ %.074, %387 ], [ %.074, %385 ], [ %.074, %373 ], [ %.074, %363 ], [ %.074, %362 ], [ %.074, %352 ], [ %.074, %342 ], [ %.074, %338 ], [ %.074, %337 ], [ %.074, %336 ], [ %.074, %334 ], [ %.074, %322 ], [ %.074, %312 ], [ %.074, %310 ], [ %.074, %309 ], [ %.074, %308 ], [ %.074, %297 ], [ %.074, %287 ], [ %.074, %281 ], [ %.074, %277 ], [ %.074, %276 ], [ %.074, %274 ], [ %.074, %273 ], [ %.074, %272 ], [ %.074, %261 ], [ %.074, %251 ], [ %.074, %250 ], [ %.074, %240 ], [ %.074, %230 ], [ %.074, %229 ], [ %.074, %228 ], [ %.074, %218 ], [ %.074, %208 ], [ %.074, %207 ], [ %.074, %186 ], [ %.074, %176 ], [ %.074, %170 ], [ %.074, %164 ], [ %.074, %162 ], [ %.074, %150 ], [ %.074, %140 ], [ %.074, %139 ], [ %.074, %135 ], [ %.074, %134 ], [ %.074, %124 ], [ %.074, %114 ], [ %.074, %110 ], [ %.074, %109 ], [ %.074, %107 ], [ %.074, %91 ], [ %.074, %88 ], [ %.074, %87 ], [ %.074, %86 ], [ %.neg79, %76 ], [ %.074, %66 ], [ %.074, %63 ], [ %.074, %61 ], [ %.074, %49 ], [ %.074, %39 ], [ 0, %38 ], [ %.074, %36 ], [ %.074, %24 ], [ %.074, %14 ]
  %.072.be = phi i32 [ %.072, %13 ], [ %.072, %483 ], [ %.072, %482 ], [ %.072, %481 ], [ %.072, %480 ], [ %.072, %479 ], [ %.072, %477 ], [ %.072, %475 ], [ %.072, %474 ], [ %.072, %473 ], [ %.072, %461 ], [ %.072, %460 ], [ %.072, %459 ], [ %.072, %457 ], [ %.072, %456 ], [ %.072, %454 ], [ %.072, %443 ], [ %.072, %433 ], [ %.072, %432 ], [ %.072, %430 ], [ %.072, %429 ], [ %.072, %428 ], [ %.072, %417 ], [ %.072, %407 ], [ %.072, %402 ], [ %.072, %396 ], [ %.072, %394 ], [ %.072, %387 ], [ %.072, %385 ], [ %.072, %373 ], [ %.072, %363 ], [ %.072, %362 ], [ %.072, %352 ], [ %.072, %342 ], [ %.072, %338 ], [ %.072, %337 ], [ %.072, %336 ], [ %.072, %334 ], [ %.072, %322 ], [ %.072, %312 ], [ %.072, %310 ], [ %.072, %309 ], [ %.072, %308 ], [ %.072, %297 ], [ %.072, %287 ], [ %.072, %281 ], [ %.072, %277 ], [ %.072, %276 ], [ %.072, %274 ], [ %.072, %273 ], [ %.072, %272 ], [ %.072, %261 ], [ %.072, %251 ], [ %.072, %250 ], [ %.072, %240 ], [ %.072, %230 ], [ %.072, %229 ], [ %.072, %228 ], [ %.072, %218 ], [ %.072, %208 ], [ %.072, %207 ], [ %.072, %186 ], [ %.072, %176 ], [ %.072, %170 ], [ %.072, %164 ], [ %.072, %162 ], [ %.072, %150 ], [ %.072, %140 ], [ %.072, %139 ], [ %.072, %135 ], [ %.072, %134 ], [ %.072, %124 ], [ %.072, %114 ], [ %.072, %110 ], [ %.072, %109 ], [ %108, %107 ], [ %.072, %91 ], [ %.072, %88 ], [ 1, %87 ], [ %.072, %86 ], [ %.072, %76 ], [ %.072, %66 ], [ %.072, %63 ], [ %.072, %61 ], [ %.072, %49 ], [ %.072, %39 ], [ %.072, %38 ], [ %.072, %36 ], [ %.072, %24 ], [ %.072, %14 ]
  %.070.be = phi i32 [ %.070, %13 ], [ %.070, %483 ], [ %.070, %482 ], [ %.070, %481 ], [ %.070, %480 ], [ %.070, %479 ], [ %.070, %477 ], [ %.070, %475 ], [ %.070, %474 ], [ %.070, %473 ], [ %.070, %461 ], [ %.070, %460 ], [ %.070, %459 ], [ %.070, %457 ], [ %.070, %456 ], [ %.070, %454 ], [ %.070, %443 ], [ %.070, %433 ], [ %.070, %432 ], [ %.070, %430 ], [ %.070, %429 ], [ %.070, %428 ], [ %.070, %417 ], [ %.070, %407 ], [ %.070, %402 ], [ %.070, %396 ], [ %.070, %394 ], [ %.070, %387 ], [ %.070, %385 ], [ %.070, %373 ], [ %.070, %363 ], [ %.070, %362 ], [ %.070, %352 ], [ %.070, %342 ], [ %.070, %338 ], [ %.070, %337 ], [ %.070, %336 ], [ %.070, %334 ], [ %.070, %322 ], [ %.070, %312 ], [ %.070, %310 ], [ %.070, %309 ], [ %.070, %308 ], [ %.070, %297 ], [ %.070, %287 ], [ %.070, %281 ], [ %.070, %277 ], [ %.070, %276 ], [ %275, %274 ], [ %.070, %273 ], [ %.070, %272 ], [ %.070, %261 ], [ %.070, %251 ], [ %.070, %250 ], [ %.070, %240 ], [ %.070, %230 ], [ %.070, %229 ], [ %.070, %228 ], [ %.070, %218 ], [ %.070, %208 ], [ %.070, %207 ], [ %.070, %186 ], [ %.070, %176 ], [ %.070, %170 ], [ %.070, %164 ], [ %.070, %162 ], [ %.070, %150 ], [ %.070, %140 ], [ %.070, %139 ], [ %.070, %135 ], [ %.070, %134 ], [ %.070, %124 ], [ %.070, %114 ], [ %.070, %110 ], [ 0, %109 ], [ %.070, %107 ], [ %.070, %91 ], [ %.070, %88 ], [ %.070, %87 ], [ %.070, %86 ], [ %.070, %76 ], [ %.070, %66 ], [ %.070, %63 ], [ %.070, %61 ], [ %.070, %49 ], [ %.070, %39 ], [ %.070, %38 ], [ %.070, %36 ], [ %.070, %24 ], [ %.070, %14 ]
  %.068.be = phi i32 [ %.068, %13 ], [ %.068, %483 ], [ %.068, %482 ], [ %.068, %481 ], [ %.068, %480 ], [ %.068, %479 ], [ %.068, %477 ], [ %476, %475 ], [ %.068, %474 ], [ %.068, %473 ], [ %.068, %461 ], [ %.068, %460 ], [ 0, %459 ], [ %.068, %457 ], [ %.068, %456 ], [ %.068, %454 ], [ %.068, %443 ], [ %.068, %433 ], [ %.068, %432 ], [ %.068, %430 ], [ %.068, %429 ], [ %.068, %428 ], [ %.068, %417 ], [ %.068, %407 ], [ %.068, %402 ], [ %.068, %396 ], [ %.068, %394 ], [ %.068, %387 ], [ %.068, %385 ], [ %.068, %373 ], [ %.068, %363 ], [ %.068, %362 ], [ %.068, %352 ], [ %.068, %342 ], [ %.068, %338 ], [ %.068, %337 ], [ %.068, %336 ], [ %.068, %334 ], [ %.068, %322 ], [ %.068, %312 ], [ %.068, %310 ], [ %.068, %309 ], [ %.068, %308 ], [ %.068, %297 ], [ %.068, %287 ], [ %.068, %281 ], [ %.068, %277 ], [ %.068, %276 ], [ %.068, %274 ], [ %.068, %273 ], [ %.068, %272 ], [ %262, %261 ], [ %.068, %251 ], [ %.068, %250 ], [ %.068, %240 ], [ %.068, %230 ], [ %.068, %229 ], [ %.068, %228 ], [ %.068, %218 ], [ %.068, %208 ], [ %.068, %207 ], [ %.068, %186 ], [ %.068, %176 ], [ %.068, %170 ], [ %.068, %164 ], [ %.068, %162 ], [ %.068, %150 ], [ %.068, %140 ], [ %.068, %139 ], [ %.068, %135 ], [ %.068, %134 ], [ 0, %124 ], [ %.068, %114 ], [ %.068, %110 ], [ %.068, %109 ], [ %.068, %107 ], [ %.068, %91 ], [ %.068, %88 ], [ %.068, %87 ], [ %.068, %86 ], [ %.068, %76 ], [ %.068, %66 ], [ %.068, %63 ], [ %.068, %61 ], [ %.068, %49 ], [ %.068, %39 ], [ %.068, %38 ], [ %.068, %36 ], [ %.068, %24 ], [ %.068, %14 ]
  %.066.be = phi i32 [ %.066, %13 ], [ %.066, %483 ], [ %.066, %482 ], [ %.066, %481 ], [ %.066, %480 ], [ %.066, %479 ], [ %.066, %477 ], [ %.066, %475 ], [ %.066, %474 ], [ %.066, %473 ], [ %.066, %461 ], [ %.066, %460 ], [ %.066, %459 ], [ %.066, %457 ], [ %.066, %456 ], [ %.066, %454 ], [ %.066, %443 ], [ %.066, %433 ], [ %.066, %432 ], [ %.066, %430 ], [ %.066, %429 ], [ %.066, %428 ], [ %.066, %417 ], [ %.066, %407 ], [ %.066, %402 ], [ %.066, %396 ], [ %.066, %394 ], [ %.066, %387 ], [ %.066, %385 ], [ %.066, %373 ], [ %.066, %363 ], [ %.066, %362 ], [ %.066, %352 ], [ %.066, %342 ], [ %.066, %338 ], [ %.066, %337 ], [ %.066, %336 ], [ %.066, %334 ], [ %.066, %322 ], [ %.066, %312 ], [ %.066, %310 ], [ %.066, %309 ], [ %.066, %308 ], [ %.066, %297 ], [ %.066, %287 ], [ %.066, %281 ], [ %.066, %277 ], [ %.066, %276 ], [ %.066, %274 ], [ %.066, %273 ], [ %.066, %272 ], [ %.066, %261 ], [ %.066, %251 ], [ %.066, %250 ], [ %.066, %240 ], [ %.066, %230 ], [ %.neg76, %229 ], [ %.066, %228 ], [ %.066, %218 ], [ %.066, %208 ], [ %.066, %207 ], [ %.066, %186 ], [ %.066, %176 ], [ %.066, %170 ], [ %.066, %164 ], [ %.066, %162 ], [ %.066, %150 ], [ %.066, %140 ], [ 0, %139 ], [ %.066, %135 ], [ %.066, %134 ], [ %.066, %124 ], [ %.066, %114 ], [ %.066, %110 ], [ %.066, %109 ], [ %.066, %107 ], [ %.066, %91 ], [ %.066, %88 ], [ %.066, %87 ], [ %.066, %86 ], [ %.066, %76 ], [ %.066, %66 ], [ %.066, %63 ], [ %.066, %61 ], [ %.066, %49 ], [ %.066, %39 ], [ %.066, %38 ], [ %.066, %36 ], [ %.066, %24 ], [ %.066, %14 ]
  %.064.be = phi i8 [ %.064, %13 ], [ %.064, %483 ], [ %.064, %482 ], [ %.064, %481 ], [ %.064, %480 ], [ %.064, %479 ], [ 1, %477 ], [ %.064, %475 ], [ %.064, %474 ], [ %.064, %473 ], [ %.064, %461 ], [ %.064, %460 ], [ %.064, %459 ], [ %.064, %457 ], [ %.064, %456 ], [ %.064, %454 ], [ %.064, %443 ], [ %.064, %433 ], [ %.064, %432 ], [ %.064, %430 ], [ %.064, %429 ], [ %.064, %428 ], [ %.064, %417 ], [ %.064, %407 ], [ %.064, %402 ], [ %.064, %396 ], [ %.064, %394 ], [ %.064, %387 ], [ %.064, %385 ], [ %.064, %373 ], [ %.064, %363 ], [ %.064, %362 ], [ %.064, %352 ], [ %.064, %342 ], [ %.064, %338 ], [ %.064, %337 ], [ %.064, %336 ], [ %.064, %334 ], [ %.064, %322 ], [ %.064, %312 ], [ %.064, %310 ], [ %.064, %309 ], [ %.064, %308 ], [ 1, %297 ], [ %.064, %287 ], [ %.064, %281 ], [ %.064, %277 ], [ 0, %276 ], [ %.064, %274 ], [ %.064, %273 ], [ %.064, %272 ], [ %.064, %261 ], [ %.064, %251 ], [ %.064, %250 ], [ %.064, %240 ], [ %.064, %230 ], [ %.064, %229 ], [ %.064, %228 ], [ %.064, %218 ], [ %.064, %208 ], [ %.064, %207 ], [ %.064, %186 ], [ %.064, %176 ], [ %.064, %170 ], [ %.064, %164 ], [ %.064, %162 ], [ %.064, %150 ], [ %.064, %140 ], [ %.064, %139 ], [ %.064, %135 ], [ %.064, %134 ], [ %.064, %124 ], [ %.064, %114 ], [ %.064, %110 ], [ %.064, %109 ], [ %.064, %107 ], [ %.064, %91 ], [ %.064, %88 ], [ %.064, %87 ], [ %.064, %86 ], [ %.064, %76 ], [ %.064, %66 ], [ %.064, %63 ], [ %.064, %61 ], [ %.064, %49 ], [ %.064, %39 ], [ %.064, %38 ], [ %.064, %36 ], [ %.064, %24 ], [ %.064, %14 ]
  %.062.be = phi i32 [ %.062, %13 ], [ %.062, %483 ], [ %.062, %482 ], [ %.062, %481 ], [ %.062, %480 ], [ %.062, %479 ], [ %.062, %477 ], [ %.062, %475 ], [ %.062, %474 ], [ %.062, %473 ], [ %.062, %461 ], [ %.062, %460 ], [ %.062, %459 ], [ %.062, %457 ], [ %.062, %456 ], [ %.062, %454 ], [ %.062, %443 ], [ %.062, %433 ], [ %.062, %432 ], [ %.062, %430 ], [ %.062, %429 ], [ %.062, %428 ], [ %.062, %417 ], [ %.062, %407 ], [ %.062, %402 ], [ %.062, %396 ], [ %.062, %394 ], [ %.062, %387 ], [ %.062, %385 ], [ %.062, %373 ], [ %.062, %363 ], [ %.062, %362 ], [ %.062, %352 ], [ %.062, %342 ], [ %.062, %338 ], [ %.062, %337 ], [ %.062, %336 ], [ %.062, %334 ], [ %.062, %322 ], [ %.062, %312 ], [ %311, %310 ], [ %.062, %309 ], [ %.062, %308 ], [ %.062, %297 ], [ %.062, %287 ], [ %.062, %281 ], [ %.062, %277 ], [ 0, %276 ], [ %.062, %274 ], [ %.062, %273 ], [ %.062, %272 ], [ %.062, %261 ], [ %.062, %251 ], [ %.062, %250 ], [ %.062, %240 ], [ %.062, %230 ], [ %.062, %229 ], [ %.062, %228 ], [ %.062, %218 ], [ %.062, %208 ], [ %.062, %207 ], [ %.062, %186 ], [ %.062, %176 ], [ %.062, %170 ], [ %.062, %164 ], [ %.062, %162 ], [ %.062, %150 ], [ %.062, %140 ], [ %.062, %139 ], [ %.062, %135 ], [ %.062, %134 ], [ %.062, %124 ], [ %.062, %114 ], [ %.062, %110 ], [ %.062, %109 ], [ %.062, %107 ], [ %.062, %91 ], [ %.062, %88 ], [ %.062, %87 ], [ %.062, %86 ], [ %.062, %76 ], [ %.062, %66 ], [ %.062, %63 ], [ %.062, %61 ], [ %.062, %49 ], [ %.062, %39 ], [ %.062, %38 ], [ %.062, %36 ], [ %.062, %24 ], [ %.062, %14 ]
  %.060.be = phi i32 [ %.060, %13 ], [ %.060, %483 ], [ %.060, %482 ], [ %.060, %481 ], [ %.060, %480 ], [ %.060, %479 ], [ %.060, %477 ], [ %.060, %475 ], [ %.060, %474 ], [ %.060, %473 ], [ %.060, %461 ], [ %.060, %460 ], [ %.060, %459 ], [ %.060, %457 ], [ %.060, %456 ], [ %.060, %454 ], [ %.060, %443 ], [ %.060, %433 ], [ %.060, %432 ], [ %431, %430 ], [ %.060, %429 ], [ %.060, %428 ], [ %.060, %417 ], [ %.060, %407 ], [ %.060, %402 ], [ %.060, %396 ], [ %.060, %394 ], [ %.060, %387 ], [ %.060, %385 ], [ %.060, %373 ], [ %.060, %363 ], [ %.060, %362 ], [ %.060, %352 ], [ %.060, %342 ], [ %.060, %338 ], [ 0, %337 ], [ %.060, %336 ], [ %.060, %334 ], [ %.060, %322 ], [ %.060, %312 ], [ %.060, %310 ], [ %.060, %309 ], [ %.060, %308 ], [ %.060, %297 ], [ %.060, %287 ], [ %.060, %281 ], [ %.060, %277 ], [ %.060, %276 ], [ %.060, %274 ], [ %.060, %273 ], [ %.060, %272 ], [ %.060, %261 ], [ %.060, %251 ], [ %.060, %250 ], [ %.060, %240 ], [ %.060, %230 ], [ %.060, %229 ], [ %.060, %228 ], [ %.060, %218 ], [ %.060, %208 ], [ %.060, %207 ], [ %.060, %186 ], [ %.060, %176 ], [ %.060, %170 ], [ %.060, %164 ], [ %.060, %162 ], [ %.060, %150 ], [ %.060, %140 ], [ %.060, %139 ], [ %.060, %135 ], [ %.060, %134 ], [ %.060, %124 ], [ %.060, %114 ], [ %.060, %110 ], [ %.060, %109 ], [ %.060, %107 ], [ %.060, %91 ], [ %.060, %88 ], [ %.060, %87 ], [ %.060, %86 ], [ %.060, %76 ], [ %.060, %66 ], [ %.060, %63 ], [ %.060, %61 ], [ %.060, %49 ], [ %.060, %39 ], [ %.060, %38 ], [ %.060, %36 ], [ %.060, %24 ], [ %.060, %14 ]
  %.058.be = phi i32 [ %.058, %13 ], [ %.058, %483 ], [ %.neg, %482 ], [ %.058, %481 ], [ 0, %480 ], [ %.058, %479 ], [ %.058, %477 ], [ %.058, %475 ], [ %.058, %474 ], [ %.058, %473 ], [ %.058, %461 ], [ %.058, %460 ], [ %.058, %459 ], [ %.058, %457 ], [ %.058, %456 ], [ %.058, %454 ], [ %.058, %443 ], [ %.058, %433 ], [ %.058, %432 ], [ %.058, %430 ], [ %.058, %429 ], [ %.058, %428 ], [ %418, %417 ], [ %.058, %407 ], [ %.058, %402 ], [ %.058, %396 ], [ %.058, %394 ], [ %.058, %387 ], [ %.058, %385 ], [ %.058, %373 ], [ %.058, %363 ], [ %.058, %362 ], [ 0, %352 ], [ %.058, %342 ], [ %.058, %338 ], [ %.058, %337 ], [ %.058, %336 ], [ %.058, %334 ], [ %.058, %322 ], [ %.058, %312 ], [ %.058, %310 ], [ %.058, %309 ], [ %.058, %308 ], [ %.058, %297 ], [ %.058, %287 ], [ %.058, %281 ], [ %.058, %277 ], [ %.058, %276 ], [ %.058, %274 ], [ %.058, %273 ], [ %.058, %272 ], [ %.058, %261 ], [ %.058, %251 ], [ %.058, %250 ], [ %.058, %240 ], [ %.058, %230 ], [ %.058, %229 ], [ %.058, %228 ], [ %.058, %218 ], [ %.058, %208 ], [ %.058, %207 ], [ %.058, %186 ], [ %.058, %176 ], [ %.058, %170 ], [ %.058, %164 ], [ %.058, %162 ], [ %.058, %150 ], [ %.058, %140 ], [ %.058, %139 ], [ %.058, %135 ], [ %.058, %134 ], [ %.058, %124 ], [ %.058, %114 ], [ %.058, %110 ], [ %.058, %109 ], [ %.058, %107 ], [ %.058, %91 ], [ %.058, %88 ], [ %.058, %87 ], [ %.058, %86 ], [ %.058, %76 ], [ %.058, %66 ], [ %.058, %63 ], [ %.058, %61 ], [ %.058, %49 ], [ %.058, %39 ], [ %.058, %38 ], [ %.058, %36 ], [ %.058, %24 ], [ %.058, %14 ]
  %.0.be = phi i32 [ %.0, %13 ], [ 1318742327, %483 ], [ 358077153, %482 ], [ -120560103, %481 ], [ 1265031120, %480 ], [ -808128705, %479 ], [ 766925701, %477 ], [ -683527512, %475 ], [ 1606130418, %474 ], [ 1573316235, %473 ], [ 1623658361, %461 ], [ 1625777669, %460 ], [ 1110534863, %459 ], [ -682489626, %457 ], [ -1947471592, %456 ], [ 1739892289, %454 ], [ %452, %443 ], [ %442, %433 ], [ -1022626753, %432 ], [ -984573542, %430 ], [ 80233033, %429 ], [ -1678978178, %428 ], [ %427, %417 ], [ %416, %407 ], [ 353421169, %402 ], [ -1640843379, %396 ], [ -1640843379, %394 ], [ %393, %387 ], [ %386, %385 ], [ %384, %373 ], [ %372, %363 ], [ -1678978178, %362 ], [ %361, %352 ], [ %351, %342 ], [ %341, %338 ], [ -984573542, %337 ], [ -1022626753, %336 ], [ %335, %334 ], [ %333, %322 ], [ %321, %312 ], [ -192834261, %310 ], [ -1174231684, %309 ], [ -694725736, %308 ], [ %307, %297 ], [ %296, %287 ], [ %286, %281 ], [ %280, %277 ], [ -192834261, %276 ], [ -1503143040, %274 ], [ -2037227748, %273 ], [ -215317709, %272 ], [ %271, %261 ], [ %260, %251 ], [ 112917745, %250 ], [ %249, %240 ], [ %239, %230 ], [ -777575934, %229 ], [ -412355406, %228 ], [ %227, %218 ], [ %217, %208 ], [ 1938205816, %207 ], [ %206, %186 ], [ %185, %176 ], [ %175, %170 ], [ %169, %164 ], [ %163, %162 ], [ %161, %150 ], [ %149, %140 ], [ -777575934, %139 ], [ %138, %135 ], [ -215317709, %134 ], [ %133, %124 ], [ %123, %114 ], [ %113, %110 ], [ -1503143040, %109 ], [ 1596477691, %107 ], [ 796841196, %91 ], [ %90, %88 ], [ 1596477691, %87 ], [ 594143389, %86 ], [ %85, %76 ], [ %75, %66 ], [ -805358655, %63 ], [ %62, %61 ], [ %60, %49 ], [ %48, %39 ], [ 594143389, %38 ], [ %37, %36 ], [ %35, %24 ], [ %23, %14 ]
  br label %13

14:                                               ; preds = %13
  %15 = load i32, i32* @x.6, align 4
  %16 = load i32, i32* @y.7, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 1739892289, i32 -1208291936
  br label %.backedge

24:                                               ; preds = %13
  %25 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7)
  %26 = icmp ne i32 %25, -1
  store i1 %26, i1* %5, align 1
  %27 = load i32, i32* @x.6, align 4
  %28 = load i32, i32* @y.7, align 4
  %29 = add i32 %27, -1
  %30 = mul i32 %29, %27
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %33, %32
  %35 = select i1 %34, i32 -230270045, i32 -1208291936
  br label %.backedge

36:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %37 = select i1 %.0..0..0., i32 -1001682240, i32 599862784
  br label %.backedge

38:                                               ; preds = %13
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(96800) bitcast ([110 x [110 x i64]]* @dist to i8*), i8 63, i64 96800, i1 false)
  br label %.backedge

39:                                               ; preds = %13
  %40 = load i32, i32* @x.6, align 4
  %41 = load i32, i32* @y.7, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 -1947471592, i32 -992667322
  br label %.backedge

49:                                               ; preds = %13
  %50 = load i32, i32* %6, align 4
  %51 = icmp sle i32 %.074, %50
  store i1 %51, i1* %4, align 1
  %52 = load i32, i32* @x.6, align 4
  %53 = load i32, i32* @y.7, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 -1259977401, i32 -992667322
  br label %.backedge

61:                                               ; preds = %13
  %.0..0..0.54 = load volatile i1, i1* %4, align 1
  %62 = select i1 %.0..0..0.54, i32 -1516798723, i32 1720457577
  br label %.backedge

63:                                               ; preds = %13
  %64 = sext i32 %.074 to i64
  %65 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %64, i64 %64
  store i64 0, i64* %65, align 8
  br label %.backedge

66:                                               ; preds = %13
  %67 = load i32, i32* @x.6, align 4
  %68 = load i32, i32* @y.7, align 4
  %69 = add i32 %67, -1
  %70 = mul i32 %69, %67
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %73, %72
  %75 = select i1 %74, i32 -682489626, i32 -502364560
  br label %.backedge

76:                                               ; preds = %13
  %.neg79 = add i32 %.074, 1
  %77 = load i32, i32* @x.6, align 4
  %78 = load i32, i32* @y.7, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 -1032094222, i32 -502364560
  br label %.backedge

86:                                               ; preds = %13
  br label %.backedge

87:                                               ; preds = %13
  br label %.backedge

88:                                               ; preds = %13
  %89 = load i32, i32* %7, align 4
  %.not78 = icmp sgt i32 %.072, %89
  %90 = select i1 %.not78, i32 -805819969, i32 -274813265
  br label %.backedge

91:                                               ; preds = %13
  %92 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %8, i32* nonnull %9, i32* nonnull %10)
  %93 = load i32, i32* %8, align 4
  %94 = sext i32 %93 to i64
  %95 = load i32, i32* %9, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %94, i64 %96
  %98 = load i32, i32* %10, align 4
  %99 = sext i32 %98 to i64
  store i64 %99, i64* %11, align 8
  %100 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %97, i64* nonnull dereferenceable(8) %11)
  %101 = load i64, i64* %100, align 8
  %102 = load i32, i32* %8, align 4
  %103 = sext i32 %102 to i64
  %104 = load i32, i32* %9, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %103, i64 %105
  store i64 %101, i64* %106, align 8
  br label %.backedge

107:                                              ; preds = %13
  %108 = add i32 %.072, 1
  br label %.backedge

109:                                              ; preds = %13
  br label %.backedge

110:                                              ; preds = %13
  %111 = load i32, i32* %6, align 4
  %112 = icmp slt i32 %.070, %111
  %113 = select i1 %112, i32 223542102, i32 -536557459
  br label %.backedge

114:                                              ; preds = %13
  %115 = load i32, i32* @x.6, align 4
  %116 = load i32, i32* @y.7, align 4
  %117 = add i32 %115, -1
  %118 = mul i32 %117, %115
  %119 = and i32 %118, 1
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %121, %120
  %123 = select i1 %122, i32 1110534863, i32 -468553816
  br label %.backedge

124:                                              ; preds = %13
  %125 = load i32, i32* @x.6, align 4
  %126 = load i32, i32* @y.7, align 4
  %127 = add i32 %125, -1
  %128 = mul i32 %127, %125
  %129 = and i32 %128, 1
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %131, %130
  %133 = select i1 %132, i32 611081089, i32 -468553816
  br label %.backedge

134:                                              ; preds = %13
  br label %.backedge

135:                                              ; preds = %13
  %136 = load i32, i32* %6, align 4
  %137 = icmp slt i32 %.068, %136
  %138 = select i1 %137, i32 -933860954, i32 889118742
  br label %.backedge

139:                                              ; preds = %13
  br label %.backedge

140:                                              ; preds = %13
  %141 = load i32, i32* @x.6, align 4
  %142 = load i32, i32* @y.7, align 4
  %143 = add i32 %141, -1
  %144 = mul i32 %143, %141
  %145 = and i32 %144, 1
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %147, %146
  %149 = select i1 %148, i32 1625777669, i32 1048394783
  br label %.backedge

150:                                              ; preds = %13
  %151 = load i32, i32* %6, align 4
  %152 = icmp slt i32 %.066, %151
  store i1 %152, i1* %3, align 1
  %153 = load i32, i32* @x.6, align 4
  %154 = load i32, i32* @y.7, align 4
  %155 = add i32 %153, -1
  %156 = mul i32 %155, %153
  %157 = and i32 %156, 1
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %159, %158
  %161 = select i1 %160, i32 1938845248, i32 1048394783
  br label %.backedge

162:                                              ; preds = %13
  %.0..0..0.55 = load volatile i1, i1* %3, align 1
  %163 = select i1 %.0..0..0.55, i32 117830478, i32 1117866779
  br label %.backedge

164:                                              ; preds = %13
  %165 = sext i32 %.068 to i64
  %166 = sext i32 %.070 to i64
  %167 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %165, i64 %166
  %168 = load i64, i64* %167, align 8
  %.not77 = icmp eq i64 %168, 4557430888798830399
  %169 = select i1 %.not77, i32 1938205816, i32 -1919270193
  br label %.backedge

170:                                              ; preds = %13
  %171 = sext i32 %.070 to i64
  %172 = sext i32 %.066 to i64
  %173 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %171, i64 %172
  %174 = load i64, i64* %173, align 8
  %.not = icmp eq i64 %174, 4557430888798830399
  %175 = select i1 %.not, i32 1938205816, i32 139493321
  br label %.backedge

176:                                              ; preds = %13
  %177 = load i32, i32* @x.6, align 4
  %178 = load i32, i32* @y.7, align 4
  %179 = add i32 %177, -1
  %180 = mul i32 %179, %177
  %181 = and i32 %180, 1
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %183, %182
  %185 = select i1 %184, i32 1623658361, i32 -587997565
  br label %.backedge

186:                                              ; preds = %13
  %187 = sext i32 %.068 to i64
  %188 = sext i32 %.066 to i64
  %189 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %187, i64 %188
  %190 = sext i32 %.070 to i64
  %191 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %187, i64 %190
  %192 = load i64, i64* %191, align 8
  %193 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %190, i64 %188
  %194 = load i64, i64* %193, align 8
  %195 = add i64 %194, %192
  store i64 %195, i64* %12, align 8
  %196 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %189, i64* nonnull dereferenceable(8) %12)
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %189, align 8
  %198 = load i32, i32* @x.6, align 4
  %199 = load i32, i32* @y.7, align 4
  %200 = add i32 %198, -1
  %201 = mul i32 %200, %198
  %202 = and i32 %201, 1
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %204, %203
  %206 = select i1 %205, i32 1692974789, i32 -587997565
  br label %.backedge

207:                                              ; preds = %13
  br label %.backedge

208:                                              ; preds = %13
  %209 = load i32, i32* @x.6, align 4
  %210 = load i32, i32* @y.7, align 4
  %211 = add i32 %209, -1
  %212 = mul i32 %211, %209
  %213 = and i32 %212, 1
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %215, %214
  %217 = select i1 %216, i32 1573316235, i32 -1073253680
  br label %.backedge

218:                                              ; preds = %13
  %219 = load i32, i32* @x.6, align 4
  %220 = load i32, i32* @y.7, align 4
  %221 = add i32 %219, -1
  %222 = mul i32 %221, %219
  %223 = and i32 %222, 1
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %225, %224
  %227 = select i1 %226, i32 831046543, i32 -1073253680
  br label %.backedge

228:                                              ; preds = %13
  br label %.backedge

229:                                              ; preds = %13
  %.neg76 = add i32 %.066, 1
  br label %.backedge

230:                                              ; preds = %13
  %231 = load i32, i32* @x.6, align 4
  %232 = load i32, i32* @y.7, align 4
  %233 = add i32 %231, -1
  %234 = mul i32 %233, %231
  %235 = and i32 %234, 1
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %237, %236
  %239 = select i1 %238, i32 1606130418, i32 -1280424508
  br label %.backedge

240:                                              ; preds = %13
  %241 = load i32, i32* @x.6, align 4
  %242 = load i32, i32* @y.7, align 4
  %243 = add i32 %241, -1
  %244 = mul i32 %243, %241
  %245 = and i32 %244, 1
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %247, %246
  %249 = select i1 %248, i32 -180415898, i32 -1280424508
  br label %.backedge

250:                                              ; preds = %13
  br label %.backedge

251:                                              ; preds = %13
  %252 = load i32, i32* @x.6, align 4
  %253 = load i32, i32* @y.7, align 4
  %254 = add i32 %252, -1
  %255 = mul i32 %254, %252
  %256 = and i32 %255, 1
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %258, %257
  %260 = select i1 %259, i32 -683527512, i32 -974208210
  br label %.backedge

261:                                              ; preds = %13
  %262 = add i32 %.068, 1
  %263 = load i32, i32* @x.6, align 4
  %264 = load i32, i32* @y.7, align 4
  %265 = add i32 %263, -1
  %266 = mul i32 %265, %263
  %267 = and i32 %266, 1
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %269, %268
  %271 = select i1 %270, i32 507454378, i32 -974208210
  br label %.backedge

272:                                              ; preds = %13
  br label %.backedge

273:                                              ; preds = %13
  br label %.backedge

274:                                              ; preds = %13
  %275 = add i32 %.070, 1
  br label %.backedge

276:                                              ; preds = %13
  br label %.backedge

277:                                              ; preds = %13
  %278 = load i32, i32* %6, align 4
  %279 = icmp slt i32 %.062, %278
  %280 = select i1 %279, i32 -847449008, i32 -694725736
  br label %.backedge

281:                                              ; preds = %13
  %282 = sext i32 %.062 to i64
  %283 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %282, i64 %282
  %284 = load i64, i64* %283, align 8
  %285 = icmp slt i64 %284, 0
  %286 = select i1 %285, i32 991404905, i32 -635383586
  br label %.backedge

287:                                              ; preds = %13
  %288 = load i32, i32* @x.6, align 4
  %289 = load i32, i32* @y.7, align 4
  %290 = add i32 %288, -1
  %291 = mul i32 %290, %288
  %292 = and i32 %291, 1
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %294, %293
  %296 = select i1 %295, i32 766925701, i32 1484317335
  br label %.backedge

297:                                              ; preds = %13
  %298 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  %299 = load i32, i32* @x.6, align 4
  %300 = load i32, i32* @y.7, align 4
  %301 = add i32 %299, -1
  %302 = mul i32 %301, %299
  %303 = and i32 %302, 1
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %305, %304
  %307 = select i1 %306, i32 -374778629, i32 1484317335
  br label %.backedge

308:                                              ; preds = %13
  br label %.backedge

309:                                              ; preds = %13
  br label %.backedge

310:                                              ; preds = %13
  %311 = add i32 %.062, 1
  br label %.backedge

312:                                              ; preds = %13
  %313 = load i32, i32* @x.6, align 4
  %314 = load i32, i32* @y.7, align 4
  %315 = add i32 %313, -1
  %316 = mul i32 %315, %313
  %317 = and i32 %316, 1
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %319, %318
  %321 = select i1 %320, i32 -808128705, i32 1976630004
  br label %.backedge

322:                                              ; preds = %13
  %323 = and i8 %.064, 1
  %324 = icmp ne i8 %323, 0
  store i1 %324, i1* %2, align 1
  %325 = load i32, i32* @x.6, align 4
  %326 = load i32, i32* @y.7, align 4
  %327 = add i32 %325, -1
  %328 = mul i32 %327, %325
  %329 = and i32 %328, 1
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %331, %330
  %333 = select i1 %332, i32 -1405932006, i32 1976630004
  br label %.backedge

334:                                              ; preds = %13
  %.0..0..0.56 = load volatile i1, i1* %2, align 1
  %335 = select i1 %.0..0..0.56, i32 1749043701, i32 -242820339
  br label %.backedge

336:                                              ; preds = %13
  br label %.backedge

337:                                              ; preds = %13
  br label %.backedge

338:                                              ; preds = %13
  %339 = load i32, i32* %6, align 4
  %340 = icmp slt i32 %.060, %339
  %341 = select i1 %340, i32 195527606, i32 -60021597
  br label %.backedge

342:                                              ; preds = %13
  %343 = load i32, i32* @x.6, align 4
  %344 = load i32, i32* @y.7, align 4
  %345 = add i32 %343, -1
  %346 = mul i32 %345, %343
  %347 = and i32 %346, 1
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %349, %348
  %351 = select i1 %350, i32 1265031120, i32 495047388
  br label %.backedge

352:                                              ; preds = %13
  %353 = load i32, i32* @x.6, align 4
  %354 = load i32, i32* @y.7, align 4
  %355 = add i32 %353, -1
  %356 = mul i32 %355, %353
  %357 = and i32 %356, 1
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %359, %358
  %361 = select i1 %360, i32 150342327, i32 495047388
  br label %.backedge

362:                                              ; preds = %13
  br label %.backedge

363:                                              ; preds = %13
  %364 = load i32, i32* @x.6, align 4
  %365 = load i32, i32* @y.7, align 4
  %366 = add i32 %364, -1
  %367 = mul i32 %366, %364
  %368 = and i32 %367, 1
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %370, %369
  %372 = select i1 %371, i32 -120560103, i32 -1096118056
  br label %.backedge

373:                                              ; preds = %13
  %374 = load i32, i32* %6, align 4
  %375 = icmp slt i32 %.058, %374
  store i1 %375, i1* %1, align 1
  %376 = load i32, i32* @x.6, align 4
  %377 = load i32, i32* @y.7, align 4
  %378 = add i32 %376, -1
  %379 = mul i32 %378, %376
  %380 = and i32 %379, 1
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %382, %381
  %384 = select i1 %383, i32 29223593, i32 -1096118056
  br label %.backedge

385:                                              ; preds = %13
  %.0..0..0.57 = load volatile i1, i1* %1, align 1
  %386 = select i1 %.0..0..0.57, i32 -938332512, i32 -1664805630
  br label %.backedge

387:                                              ; preds = %13
  %388 = sext i32 %.060 to i64
  %389 = sext i32 %.058 to i64
  %390 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %388, i64 %389
  %391 = load i64, i64* %390, align 8
  %392 = icmp eq i64 %391, 4557430888798830399
  %393 = select i1 %392, i32 611659738, i32 -1929371844
  br label %.backedge

394:                                              ; preds = %13
  %395 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  br label %.backedge

396:                                              ; preds = %13
  %397 = sext i32 %.060 to i64
  %398 = sext i32 %.058 to i64
  %399 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %397, i64 %398
  %400 = load i64, i64* %399, align 8
  %401 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 %400)
  br label %.backedge

402:                                              ; preds = %13
  %403 = load i32, i32* %6, align 4
  %404 = add i32 %403, -1
  %405 = icmp slt i32 %.058, %404
  %406 = select i1 %405, i32 32, i32 10
  %putchar = call i32 @putchar(i32 %406)
  br label %.backedge

407:                                              ; preds = %13
  %408 = load i32, i32* @x.6, align 4
  %409 = load i32, i32* @y.7, align 4
  %410 = add i32 %408, -1
  %411 = mul i32 %410, %408
  %412 = and i32 %411, 1
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %414, %413
  %416 = select i1 %415, i32 358077153, i32 -831630149
  br label %.backedge

417:                                              ; preds = %13
  %418 = add i32 %.058, 1
  %419 = load i32, i32* @x.6, align 4
  %420 = load i32, i32* @y.7, align 4
  %421 = add i32 %419, -1
  %422 = mul i32 %421, %419
  %423 = and i32 %422, 1
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %425, %424
  %427 = select i1 %426, i32 -1978661621, i32 -831630149
  br label %.backedge

428:                                              ; preds = %13
  br label %.backedge

429:                                              ; preds = %13
  br label %.backedge

430:                                              ; preds = %13
  %431 = add i32 %.060, 1
  br label %.backedge

432:                                              ; preds = %13
  br label %.backedge

433:                                              ; preds = %13
  %434 = load i32, i32* @x.6, align 4
  %435 = load i32, i32* @y.7, align 4
  %436 = add i32 %434, -1
  %437 = mul i32 %436, %434
  %438 = and i32 %437, 1
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %440, %439
  %442 = select i1 %441, i32 1318742327, i32 -1571936598
  br label %.backedge

443:                                              ; preds = %13
  %444 = load i32, i32* @x.6, align 4
  %445 = load i32, i32* @y.7, align 4
  %446 = add i32 %444, -1
  %447 = mul i32 %446, %444
  %448 = and i32 %447, 1
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %450, %449
  %452 = select i1 %451, i32 -393085382, i32 -1571936598
  br label %.backedge

453:                                              ; preds = %13
  ret i32 0

454:                                              ; preds = %13
  %455 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7)
  br label %.backedge

456:                                              ; preds = %13
  br label %.backedge

457:                                              ; preds = %13
  %458 = add i32 %.074, 1
  br label %.backedge

459:                                              ; preds = %13
  br label %.backedge

460:                                              ; preds = %13
  br label %.backedge

461:                                              ; preds = %13
  %462 = sext i32 %.068 to i64
  %463 = sext i32 %.066 to i64
  %464 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %462, i64 %463
  %465 = sext i32 %.070 to i64
  %466 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %462, i64 %465
  %467 = load i64, i64* %466, align 8
  %468 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @dist, i64 0, i64 %465, i64 %463
  %469 = load i64, i64* %468, align 8
  %470 = add i64 %469, %467
  store i64 %470, i64* %12, align 8
  %471 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %464, i64* nonnull dereferenceable(8) %12)
  %472 = load i64, i64* %471, align 8
  store i64 %472, i64* %464, align 8
  br label %.backedge

473:                                              ; preds = %13
  br label %.backedge

474:                                              ; preds = %13
  br label %.backedge

475:                                              ; preds = %13
  %476 = add i32 %.068, 1
  br label %.backedge

477:                                              ; preds = %13
  %478 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  br label %.backedge

479:                                              ; preds = %13
  br label %.backedge

480:                                              ; preds = %13
  br label %.backedge

481:                                              ; preds = %13
  br label %.backedge

482:                                              ; preds = %13
  %.neg = add i32 %.058, 1
  br label %.backedge

483:                                              ; preds = %13
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %1, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %3, align 8
  %7 = load i32, i32* @x.8, align 4
  %8 = load i32, i32* @y.9, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 1003772001, i32 2124922397
  %16 = select i1 %14, i32 35075561, i32 2124922397
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.08.ph = phi i64* [ undef, %2 ], [ %.08.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ -843540439, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %.outer10

.outer10:                                         ; preds = %.outer10.backedge, %.outer
  %.0.ph11 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph11.be, %.outer10.backedge ]
  br label %17

17:                                               ; preds = %.outer10, %17
  switch i32 %.0.ph11, label %17 [
    i32 -843540439, label %18
    i32 -971007992, label %.outer.backedge
    i32 -592845110, label %.outer10.backedge
    i32 35075561, label %21
    i32 1003772001, label %22
    i32 -1722167218, label %23
    i32 2124922397, label %24
  ]

18:                                               ; preds = %17
  %.0..0..0.6 = load volatile i64, i64* %4, align 8
  %.0..0..0.7 = load volatile i64, i64* %3, align 8
  %19 = icmp slt i64 %.0..0..0.6, %.0..0..0.7
  %20 = select i1 %19, i32 -971007992, i32 -592845110
  br label %.outer10.backedge

21:                                               ; preds = %17
  br label %.outer.backedge

22:                                               ; preds = %17
  br label %.outer10.backedge

.outer10.backedge:                                ; preds = %17, %22, %18
  %.0.ph11.be = phi i32 [ %20, %18 ], [ -1722167218, %22 ], [ %16, %17 ]
  br label %.outer10

23:                                               ; preds = %17
  ret i64* %.08.ph

24:                                               ; preds = %17
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %17, %24, %21
  %.08.ph.be = phi i64* [ %0, %21 ], [ %0, %24 ], [ %1, %17 ]
  %.0.ph.be = phi i32 [ %15, %21 ], [ 35075561, %24 ], [ -1722167218, %17 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s276156722.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
