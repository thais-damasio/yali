; ModuleID = 'build_ollvm/programs/p02363/s317509205.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s317509205.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@V = global i64 0, align 8
@E = global i64 0, align 8
@G = global [100 x [100 x i64]] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s317509205.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) @V)
  %10 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %9, i64* nonnull dereferenceable(8) @E)
  br label %11

11:                                               ; preds = %.backedge, %0
  %.068 = phi i64 [ 0, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i64 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i64 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i64 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i64 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i64 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i64 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i64 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i64 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.050 = phi i64 [ undef, %0 ], [ %.050.be, %.backedge ]
  %.0 = phi i32 [ -1765946423, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1765946423, label %12
    i32 -2120717367, label %16
    i32 632120514, label %17
    i32 -398022248, label %21
    i32 59790415, label %23
    i32 1785120487, label %25
    i32 196767280, label %26
    i32 620594819, label %28
    i32 -762510501, label %29
    i32 1682885534, label %33
    i32 -2045917227, label %35
    i32 -36008586, label %37
    i32 963633441, label %38
    i32 -702486681, label %48
    i32 428412051, label %60
    i32 1028050859, label %62
    i32 -757578096, label %72
    i32 -678670690, label %89
    i32 -261573117, label %90
    i32 -995448568, label %92
    i32 813257614, label %102
    i32 369637313, label %112
    i32 -1175609020, label %113
    i32 576055367, label %117
    i32 1618646654, label %118
    i32 1764727126, label %122
    i32 -1090813056, label %123
    i32 -1436604828, label %127
    i32 -146710866, label %136
    i32 -1850063243, label %137
    i32 -544613913, label %138
    i32 733488325, label %148
    i32 51258758, label %159
    i32 2069077030, label %160
    i32 838896872, label %161
    i32 1839157722, label %162
    i32 -1957317381, label %172
    i32 1141250850, label %182
    i32 277255793, label %183
    i32 -1914061572, label %187
    i32 -1096237503, label %191
    i32 2063385666, label %194
    i32 -1515963701, label %195
    i32 -1391404389, label %197
    i32 -1836390186, label %198
    i32 30130977, label %208
    i32 1810033324, label %220
    i32 771208279, label %222
    i32 280234175, label %232
    i32 1608286890, label %242
    i32 1849526809, label %243
    i32 1944578411, label %253
    i32 1843308998, label %265
    i32 1055803568, label %267
    i32 -19202064, label %272
    i32 -1132701221, label %276
    i32 1156559855, label %278
    i32 -100175909, label %284
    i32 -907891604, label %294
    i32 1592633156, label %305
    i32 2144629053, label %306
    i32 -939477087, label %316
    i32 -1212210146, label %327
    i32 -1150877667, label %328
    i32 -813346250, label %330
    i32 -622081777, label %331
    i32 -1315197368, label %341
    i32 585093415, label %351
    i32 -1723703820, label %352
    i32 -1266150723, label %353
    i32 -862451449, label %361
    i32 -1031352849, label %362
    i32 654213862, label %364
    i32 -1270754815, label %365
    i32 1408062196, label %366
    i32 1149311625, label %367
    i32 -954974859, label %368
    i32 -1555285643, label %370
    i32 -1124820088, label %372
  ]

.backedge:                                        ; preds = %11, %372, %370, %368, %367, %366, %365, %364, %362, %361, %353, %352, %341, %331, %330, %328, %327, %316, %306, %305, %294, %284, %278, %276, %272, %267, %265, %253, %243, %242, %232, %222, %220, %208, %198, %197, %195, %194, %191, %187, %183, %182, %172, %162, %161, %160, %159, %148, %138, %137, %136, %127, %123, %122, %118, %117, %113, %112, %102, %92, %90, %89, %72, %62, %60, %48, %38, %37, %35, %33, %29, %28, %26, %25, %23, %21, %17, %16, %12
  %.068.be = phi i64 [ %.068, %11 ], [ %.068, %372 ], [ %.068, %370 ], [ %.068, %368 ], [ %.068, %367 ], [ %.068, %366 ], [ %.068, %365 ], [ %.068, %364 ], [ %.068, %362 ], [ %.068, %361 ], [ %.068, %353 ], [ %.068, %352 ], [ %.068, %341 ], [ %.068, %331 ], [ %.068, %330 ], [ %.068, %328 ], [ %.068, %327 ], [ %.068, %316 ], [ %.068, %306 ], [ %.068, %305 ], [ %.068, %294 ], [ %.068, %284 ], [ %.068, %278 ], [ %.068, %276 ], [ %.068, %272 ], [ %.068, %267 ], [ %.068, %265 ], [ %.068, %253 ], [ %.068, %243 ], [ %.068, %242 ], [ %.068, %232 ], [ %.068, %222 ], [ %.068, %220 ], [ %.068, %208 ], [ %.068, %198 ], [ %.068, %197 ], [ %.068, %195 ], [ %.068, %194 ], [ %.068, %191 ], [ %.068, %187 ], [ %.068, %183 ], [ %.068, %182 ], [ %.068, %172 ], [ %.068, %162 ], [ %.068, %161 ], [ %.068, %160 ], [ %.068, %159 ], [ %.068, %148 ], [ %.068, %138 ], [ %.068, %137 ], [ %.068, %136 ], [ %.068, %127 ], [ %.068, %123 ], [ %.068, %122 ], [ %.068, %118 ], [ %.068, %117 ], [ %.068, %113 ], [ %.068, %112 ], [ %.068, %102 ], [ %.068, %92 ], [ %.068, %90 ], [ %.068, %89 ], [ %.068, %72 ], [ %.068, %62 ], [ %.068, %60 ], [ %.068, %48 ], [ %.068, %38 ], [ %.068, %37 ], [ %.068, %35 ], [ %.068, %33 ], [ %.068, %29 ], [ %.068, %28 ], [ %27, %26 ], [ %.068, %25 ], [ %.068, %23 ], [ %.068, %21 ], [ %.068, %17 ], [ %.068, %16 ], [ %.068, %12 ]
  %.066.be = phi i64 [ %.066, %11 ], [ %.066, %372 ], [ %.066, %370 ], [ %.066, %368 ], [ %.066, %367 ], [ %.066, %366 ], [ %.066, %365 ], [ %.066, %364 ], [ %.066, %362 ], [ %.066, %361 ], [ %.066, %353 ], [ %.066, %352 ], [ %.066, %341 ], [ %.066, %331 ], [ %.066, %330 ], [ %.066, %328 ], [ %.066, %327 ], [ %.066, %316 ], [ %.066, %306 ], [ %.066, %305 ], [ %.066, %294 ], [ %.066, %284 ], [ %.066, %278 ], [ %.066, %276 ], [ %.066, %272 ], [ %.066, %267 ], [ %.066, %265 ], [ %.066, %253 ], [ %.066, %243 ], [ %.066, %242 ], [ %.066, %232 ], [ %.066, %222 ], [ %.066, %220 ], [ %.066, %208 ], [ %.066, %198 ], [ %.066, %197 ], [ %.066, %195 ], [ %.066, %194 ], [ %.066, %191 ], [ %.066, %187 ], [ %.066, %183 ], [ %.066, %182 ], [ %.066, %172 ], [ %.066, %162 ], [ %.066, %161 ], [ %.066, %160 ], [ %.066, %159 ], [ %.066, %148 ], [ %.066, %138 ], [ %.066, %137 ], [ %.066, %136 ], [ %.066, %127 ], [ %.066, %123 ], [ %.066, %122 ], [ %.066, %118 ], [ %.066, %117 ], [ %.066, %113 ], [ %.066, %112 ], [ %.066, %102 ], [ %.066, %92 ], [ %.066, %90 ], [ %.066, %89 ], [ %.066, %72 ], [ %.066, %62 ], [ %.066, %60 ], [ %.066, %48 ], [ %.066, %38 ], [ %.066, %37 ], [ %.066, %35 ], [ %.066, %33 ], [ %.066, %29 ], [ %.066, %28 ], [ %.066, %26 ], [ %.066, %25 ], [ %24, %23 ], [ %.066, %21 ], [ %.066, %17 ], [ 0, %16 ], [ %.066, %12 ]
  %.064.be = phi i64 [ %.064, %11 ], [ %.064, %372 ], [ %.064, %370 ], [ %.064, %368 ], [ %.064, %367 ], [ %.064, %366 ], [ %.064, %365 ], [ %.064, %364 ], [ %.064, %362 ], [ %.064, %361 ], [ %.064, %353 ], [ %.064, %352 ], [ %.064, %341 ], [ %.064, %331 ], [ %.064, %330 ], [ %.064, %328 ], [ %.064, %327 ], [ %.064, %316 ], [ %.064, %306 ], [ %.064, %305 ], [ %.064, %294 ], [ %.064, %284 ], [ %.064, %278 ], [ %.064, %276 ], [ %.064, %272 ], [ %.064, %267 ], [ %.064, %265 ], [ %.064, %253 ], [ %.064, %243 ], [ %.064, %242 ], [ %.064, %232 ], [ %.064, %222 ], [ %.064, %220 ], [ %.064, %208 ], [ %.064, %198 ], [ %.064, %197 ], [ %.064, %195 ], [ %.064, %194 ], [ %.064, %191 ], [ %.064, %187 ], [ %.064, %183 ], [ %.064, %182 ], [ %.064, %172 ], [ %.064, %162 ], [ %.064, %161 ], [ %.064, %160 ], [ %.064, %159 ], [ %.064, %148 ], [ %.064, %138 ], [ %.064, %137 ], [ %.064, %136 ], [ %.064, %127 ], [ %.064, %123 ], [ %.064, %122 ], [ %.064, %118 ], [ %.064, %117 ], [ %.064, %113 ], [ %.064, %112 ], [ %.064, %102 ], [ %.064, %92 ], [ %.064, %90 ], [ %.064, %89 ], [ %.064, %72 ], [ %.064, %62 ], [ %.064, %60 ], [ %.064, %48 ], [ %.064, %38 ], [ %.064, %37 ], [ %36, %35 ], [ %.064, %33 ], [ %.064, %29 ], [ 0, %28 ], [ %.064, %26 ], [ %.064, %25 ], [ %.064, %23 ], [ %.064, %21 ], [ %.064, %17 ], [ %.064, %16 ], [ %.064, %12 ]
  %.062.be = phi i64 [ %.062, %11 ], [ %.062, %372 ], [ %.062, %370 ], [ %.062, %368 ], [ %.062, %367 ], [ %.062, %366 ], [ %.062, %365 ], [ %.062, %364 ], [ %.062, %362 ], [ %.062, %361 ], [ %.062, %353 ], [ %.062, %352 ], [ %.062, %341 ], [ %.062, %331 ], [ %.062, %330 ], [ %.062, %328 ], [ %.062, %327 ], [ %.062, %316 ], [ %.062, %306 ], [ %.062, %305 ], [ %.062, %294 ], [ %.062, %284 ], [ %.062, %278 ], [ %.062, %276 ], [ %.062, %272 ], [ %.062, %267 ], [ %.062, %265 ], [ %.062, %253 ], [ %.062, %243 ], [ %.062, %242 ], [ %.062, %232 ], [ %.062, %222 ], [ %.062, %220 ], [ %.062, %208 ], [ %.062, %198 ], [ %.062, %197 ], [ %.062, %195 ], [ %.062, %194 ], [ %.062, %191 ], [ %.062, %187 ], [ %.062, %183 ], [ %.062, %182 ], [ %.062, %172 ], [ %.062, %162 ], [ %.062, %161 ], [ %.062, %160 ], [ %.062, %159 ], [ %.062, %148 ], [ %.062, %138 ], [ %.062, %137 ], [ %.062, %136 ], [ %.062, %127 ], [ %.062, %123 ], [ %.062, %122 ], [ %.062, %118 ], [ %.062, %117 ], [ %.062, %113 ], [ %.062, %112 ], [ %.062, %102 ], [ %.062, %92 ], [ %91, %90 ], [ %.062, %89 ], [ %.062, %72 ], [ %.062, %62 ], [ %.062, %60 ], [ %.062, %48 ], [ %.062, %38 ], [ 0, %37 ], [ %.062, %35 ], [ %.062, %33 ], [ %.062, %29 ], [ %.062, %28 ], [ %.062, %26 ], [ %.062, %25 ], [ %.062, %23 ], [ %.062, %21 ], [ %.062, %17 ], [ %.062, %16 ], [ %.062, %12 ]
  %.060.be = phi i64 [ %.060, %11 ], [ %.060, %372 ], [ %.060, %370 ], [ %.060, %368 ], [ %.060, %367 ], [ %.060, %366 ], [ %.060, %365 ], [ %.060, %364 ], [ %.060, %362 ], [ 0, %361 ], [ %.060, %353 ], [ %.060, %352 ], [ %.060, %341 ], [ %.060, %331 ], [ %.060, %330 ], [ %.060, %328 ], [ %.060, %327 ], [ %.060, %316 ], [ %.060, %306 ], [ %.060, %305 ], [ %.060, %294 ], [ %.060, %284 ], [ %.060, %278 ], [ %.060, %276 ], [ %.060, %272 ], [ %.060, %267 ], [ %.060, %265 ], [ %.060, %253 ], [ %.060, %243 ], [ %.060, %242 ], [ %.060, %232 ], [ %.060, %222 ], [ %.060, %220 ], [ %.060, %208 ], [ %.060, %198 ], [ %.060, %197 ], [ %.060, %195 ], [ %.060, %194 ], [ %.060, %191 ], [ %.060, %187 ], [ %.060, %183 ], [ %.060, %182 ], [ %.060, %172 ], [ %.060, %162 ], [ %.neg, %161 ], [ %.060, %160 ], [ %.060, %159 ], [ %.060, %148 ], [ %.060, %138 ], [ %.060, %137 ], [ %.060, %136 ], [ %.060, %127 ], [ %.060, %123 ], [ %.060, %122 ], [ %.060, %118 ], [ %.060, %117 ], [ %.060, %113 ], [ %.060, %112 ], [ 0, %102 ], [ %.060, %92 ], [ %.060, %90 ], [ %.060, %89 ], [ %.060, %72 ], [ %.060, %62 ], [ %.060, %60 ], [ %.060, %48 ], [ %.060, %38 ], [ %.060, %37 ], [ %.060, %35 ], [ %.060, %33 ], [ %.060, %29 ], [ %.060, %28 ], [ %.060, %26 ], [ %.060, %25 ], [ %.060, %23 ], [ %.060, %21 ], [ %.060, %17 ], [ %.060, %16 ], [ %.060, %12 ]
  %.058.be = phi i64 [ %.058, %11 ], [ %.058, %372 ], [ %.058, %370 ], [ %.058, %368 ], [ %.058, %367 ], [ %.058, %366 ], [ %.058, %365 ], [ %.058, %364 ], [ %363, %362 ], [ %.058, %361 ], [ %.058, %353 ], [ %.058, %352 ], [ %.058, %341 ], [ %.058, %331 ], [ %.058, %330 ], [ %.058, %328 ], [ %.058, %327 ], [ %.058, %316 ], [ %.058, %306 ], [ %.058, %305 ], [ %.058, %294 ], [ %.058, %284 ], [ %.058, %278 ], [ %.058, %276 ], [ %.058, %272 ], [ %.058, %267 ], [ %.058, %265 ], [ %.058, %253 ], [ %.058, %243 ], [ %.058, %242 ], [ %.058, %232 ], [ %.058, %222 ], [ %.058, %220 ], [ %.058, %208 ], [ %.058, %198 ], [ %.058, %197 ], [ %.058, %195 ], [ %.058, %194 ], [ %.058, %191 ], [ %.058, %187 ], [ %.058, %183 ], [ %.058, %182 ], [ %.058, %172 ], [ %.058, %162 ], [ %.058, %161 ], [ %.058, %160 ], [ %.058, %159 ], [ %149, %148 ], [ %.058, %138 ], [ %.058, %137 ], [ %.058, %136 ], [ %.058, %127 ], [ %.058, %123 ], [ %.058, %122 ], [ %.058, %118 ], [ 0, %117 ], [ %.058, %113 ], [ %.058, %112 ], [ %.058, %102 ], [ %.058, %92 ], [ %.058, %90 ], [ %.058, %89 ], [ %.058, %72 ], [ %.058, %62 ], [ %.058, %60 ], [ %.058, %48 ], [ %.058, %38 ], [ %.058, %37 ], [ %.058, %35 ], [ %.058, %33 ], [ %.058, %29 ], [ %.058, %28 ], [ %.058, %26 ], [ %.058, %25 ], [ %.058, %23 ], [ %.058, %21 ], [ %.058, %17 ], [ %.058, %16 ], [ %.058, %12 ]
  %.056.be = phi i64 [ %.056, %11 ], [ %.056, %372 ], [ %.056, %370 ], [ %.056, %368 ], [ %.056, %367 ], [ %.056, %366 ], [ %.056, %365 ], [ %.056, %364 ], [ %.056, %362 ], [ %.056, %361 ], [ %.056, %353 ], [ %.056, %352 ], [ %.056, %341 ], [ %.056, %331 ], [ %.056, %330 ], [ %.056, %328 ], [ %.056, %327 ], [ %.056, %316 ], [ %.056, %306 ], [ %.056, %305 ], [ %.056, %294 ], [ %.056, %284 ], [ %.056, %278 ], [ %.056, %276 ], [ %.056, %272 ], [ %.056, %267 ], [ %.056, %265 ], [ %.056, %253 ], [ %.056, %243 ], [ %.056, %242 ], [ %.056, %232 ], [ %.056, %222 ], [ %.056, %220 ], [ %.056, %208 ], [ %.056, %198 ], [ %.056, %197 ], [ %.056, %195 ], [ %.056, %194 ], [ %.056, %191 ], [ %.056, %187 ], [ %.056, %183 ], [ %.056, %182 ], [ %.056, %172 ], [ %.056, %162 ], [ %.056, %161 ], [ %.056, %160 ], [ %.056, %159 ], [ %.056, %148 ], [ %.056, %138 ], [ %.056, %137 ], [ %.neg72, %136 ], [ %.056, %127 ], [ %.056, %123 ], [ 0, %122 ], [ %.056, %118 ], [ %.056, %117 ], [ %.056, %113 ], [ %.056, %112 ], [ %.056, %102 ], [ %.056, %92 ], [ %.056, %90 ], [ %.056, %89 ], [ %.056, %72 ], [ %.056, %62 ], [ %.056, %60 ], [ %.056, %48 ], [ %.056, %38 ], [ %.056, %37 ], [ %.056, %35 ], [ %.056, %33 ], [ %.056, %29 ], [ %.056, %28 ], [ %.056, %26 ], [ %.056, %25 ], [ %.056, %23 ], [ %.056, %21 ], [ %.056, %17 ], [ %.056, %16 ], [ %.056, %12 ]
  %.054.be = phi i64 [ %.054, %11 ], [ %.054, %372 ], [ %.054, %370 ], [ %.054, %368 ], [ %.054, %367 ], [ %.054, %366 ], [ %.054, %365 ], [ 0, %364 ], [ %.054, %362 ], [ %.054, %361 ], [ %.054, %353 ], [ %.054, %352 ], [ %.054, %341 ], [ %.054, %331 ], [ %.054, %330 ], [ %.054, %328 ], [ %.054, %327 ], [ %.054, %316 ], [ %.054, %306 ], [ %.054, %305 ], [ %.054, %294 ], [ %.054, %284 ], [ %.054, %278 ], [ %.054, %276 ], [ %.054, %272 ], [ %.054, %267 ], [ %.054, %265 ], [ %.054, %253 ], [ %.054, %243 ], [ %.054, %242 ], [ %.054, %232 ], [ %.054, %222 ], [ %.054, %220 ], [ %.054, %208 ], [ %.054, %198 ], [ %.054, %197 ], [ %196, %195 ], [ %.054, %194 ], [ %.054, %191 ], [ %.054, %187 ], [ %.054, %183 ], [ %.054, %182 ], [ 0, %172 ], [ %.054, %162 ], [ %.054, %161 ], [ %.054, %160 ], [ %.054, %159 ], [ %.054, %148 ], [ %.054, %138 ], [ %.054, %137 ], [ %.054, %136 ], [ %.054, %127 ], [ %.054, %123 ], [ %.054, %122 ], [ %.054, %118 ], [ %.054, %117 ], [ %.054, %113 ], [ %.054, %112 ], [ %.054, %102 ], [ %.054, %92 ], [ %.054, %90 ], [ %.054, %89 ], [ %.054, %72 ], [ %.054, %62 ], [ %.054, %60 ], [ %.054, %48 ], [ %.054, %38 ], [ %.054, %37 ], [ %.054, %35 ], [ %.054, %33 ], [ %.054, %29 ], [ %.054, %28 ], [ %.054, %26 ], [ %.054, %25 ], [ %.054, %23 ], [ %.054, %21 ], [ %.054, %17 ], [ %.054, %16 ], [ %.054, %12 ]
  %.052.be = phi i64 [ %.052, %11 ], [ %.052, %372 ], [ %.052, %370 ], [ %.052, %368 ], [ %.052, %367 ], [ %.052, %366 ], [ %.052, %365 ], [ %.052, %364 ], [ %.052, %362 ], [ %.052, %361 ], [ %.052, %353 ], [ %.052, %352 ], [ %.052, %341 ], [ %.052, %331 ], [ %.052, %330 ], [ %329, %328 ], [ %.052, %327 ], [ %.052, %316 ], [ %.052, %306 ], [ %.052, %305 ], [ %.052, %294 ], [ %.052, %284 ], [ %.052, %278 ], [ %.052, %276 ], [ %.052, %272 ], [ %.052, %267 ], [ %.052, %265 ], [ %.052, %253 ], [ %.052, %243 ], [ %.052, %242 ], [ %.052, %232 ], [ %.052, %222 ], [ %.052, %220 ], [ %.052, %208 ], [ %.052, %198 ], [ 0, %197 ], [ %.052, %195 ], [ %.052, %194 ], [ %.052, %191 ], [ %.052, %187 ], [ %.052, %183 ], [ %.052, %182 ], [ %.052, %172 ], [ %.052, %162 ], [ %.052, %161 ], [ %.052, %160 ], [ %.052, %159 ], [ %.052, %148 ], [ %.052, %138 ], [ %.052, %137 ], [ %.052, %136 ], [ %.052, %127 ], [ %.052, %123 ], [ %.052, %122 ], [ %.052, %118 ], [ %.052, %117 ], [ %.052, %113 ], [ %.052, %112 ], [ %.052, %102 ], [ %.052, %92 ], [ %.052, %90 ], [ %.052, %89 ], [ %.052, %72 ], [ %.052, %62 ], [ %.052, %60 ], [ %.052, %48 ], [ %.052, %38 ], [ %.052, %37 ], [ %.052, %35 ], [ %.052, %33 ], [ %.052, %29 ], [ %.052, %28 ], [ %.052, %26 ], [ %.052, %25 ], [ %.052, %23 ], [ %.052, %21 ], [ %.052, %17 ], [ %.052, %16 ], [ %.052, %12 ]
  %.050.be = phi i64 [ %.050, %11 ], [ %.050, %372 ], [ %.050, %370 ], [ %369, %368 ], [ %.050, %367 ], [ 0, %366 ], [ %.050, %365 ], [ %.050, %364 ], [ %.050, %362 ], [ %.050, %361 ], [ %.050, %353 ], [ %.050, %352 ], [ %.050, %341 ], [ %.050, %331 ], [ %.050, %330 ], [ %.050, %328 ], [ %.050, %327 ], [ %.050, %316 ], [ %.050, %306 ], [ %.050, %305 ], [ %295, %294 ], [ %.050, %284 ], [ %.050, %278 ], [ %.050, %276 ], [ %.050, %272 ], [ %.050, %267 ], [ %.050, %265 ], [ %.050, %253 ], [ %.050, %243 ], [ %.050, %242 ], [ 0, %232 ], [ %.050, %222 ], [ %.050, %220 ], [ %.050, %208 ], [ %.050, %198 ], [ %.050, %197 ], [ %.050, %195 ], [ %.050, %194 ], [ %.050, %191 ], [ %.050, %187 ], [ %.050, %183 ], [ %.050, %182 ], [ %.050, %172 ], [ %.050, %162 ], [ %.050, %161 ], [ %.050, %160 ], [ %.050, %159 ], [ %.050, %148 ], [ %.050, %138 ], [ %.050, %137 ], [ %.050, %136 ], [ %.050, %127 ], [ %.050, %123 ], [ %.050, %122 ], [ %.050, %118 ], [ %.050, %117 ], [ %.050, %113 ], [ %.050, %112 ], [ %.050, %102 ], [ %.050, %92 ], [ %.050, %90 ], [ %.050, %89 ], [ %.050, %72 ], [ %.050, %62 ], [ %.050, %60 ], [ %.050, %48 ], [ %.050, %38 ], [ %.050, %37 ], [ %.050, %35 ], [ %.050, %33 ], [ %.050, %29 ], [ %.050, %28 ], [ %.050, %26 ], [ %.050, %25 ], [ %.050, %23 ], [ %.050, %21 ], [ %.050, %17 ], [ %.050, %16 ], [ %.050, %12 ]
  %.0.be = phi i32 [ %.0, %11 ], [ -1315197368, %372 ], [ -939477087, %370 ], [ -907891604, %368 ], [ 1944578411, %367 ], [ 280234175, %366 ], [ 30130977, %365 ], [ -1957317381, %364 ], [ 733488325, %362 ], [ 813257614, %361 ], [ -757578096, %353 ], [ -702486681, %352 ], [ %350, %341 ], [ %340, %331 ], [ -622081777, %330 ], [ -1836390186, %328 ], [ -1150877667, %327 ], [ %326, %316 ], [ %315, %306 ], [ 1849526809, %305 ], [ %304, %294 ], [ %293, %284 ], [ -100175909, %278 ], [ 1156559855, %276 ], [ 1156559855, %272 ], [ %271, %267 ], [ %266, %265 ], [ %264, %253 ], [ %252, %243 ], [ 1849526809, %242 ], [ %241, %232 ], [ %231, %222 ], [ %221, %220 ], [ %219, %208 ], [ %207, %198 ], [ -1836390186, %197 ], [ 277255793, %195 ], [ -1515963701, %194 ], [ -622081777, %191 ], [ %190, %187 ], [ %186, %183 ], [ 277255793, %182 ], [ %181, %172 ], [ %171, %162 ], [ -1175609020, %161 ], [ 838896872, %160 ], [ 1618646654, %159 ], [ %158, %148 ], [ %147, %138 ], [ -544613913, %137 ], [ -1090813056, %136 ], [ -146710866, %127 ], [ %126, %123 ], [ -1090813056, %122 ], [ %121, %118 ], [ 1618646654, %117 ], [ %116, %113 ], [ -1175609020, %112 ], [ %111, %102 ], [ %101, %92 ], [ 963633441, %90 ], [ -261573117, %89 ], [ %88, %72 ], [ %71, %62 ], [ %61, %60 ], [ %59, %48 ], [ %47, %38 ], [ 963633441, %37 ], [ -762510501, %35 ], [ -2045917227, %33 ], [ %32, %29 ], [ -762510501, %28 ], [ -1765946423, %26 ], [ 196767280, %25 ], [ 632120514, %23 ], [ 59790415, %21 ], [ %20, %17 ], [ 632120514, %16 ], [ %15, %12 ]
  br label %11

12:                                               ; preds = %11
  %13 = load i64, i64* @V, align 8
  %14 = icmp slt i64 %.068, %13
  %15 = select i1 %14, i32 -2120717367, i32 620594819
  br label %.backedge

16:                                               ; preds = %11
  br label %.backedge

17:                                               ; preds = %11
  %18 = load i64, i64* @V, align 8
  %19 = icmp slt i64 %.066, %18
  %20 = select i1 %19, i32 -398022248, i32 1785120487
  br label %.backedge

21:                                               ; preds = %11
  %22 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %.068, i64 %.066
  store i64 1000000000000, i64* %22, align 8
  br label %.backedge

23:                                               ; preds = %11
  %24 = add i64 %.066, 1
  br label %.backedge

25:                                               ; preds = %11
  br label %.backedge

26:                                               ; preds = %11
  %27 = add i64 %.068, 1
  br label %.backedge

28:                                               ; preds = %11
  br label %.backedge

29:                                               ; preds = %11
  %30 = load i64, i64* @V, align 8
  %31 = icmp slt i64 %.064, %30
  %32 = select i1 %31, i32 1682885534, i32 -36008586
  br label %.backedge

33:                                               ; preds = %11
  %34 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %.064, i64 %.064
  store i64 0, i64* %34, align 8
  br label %.backedge

35:                                               ; preds = %11
  %36 = add i64 %.064, 1
  br label %.backedge

37:                                               ; preds = %11
  br label %.backedge

38:                                               ; preds = %11
  %39 = load i32, i32* @x.4, align 4
  %40 = load i32, i32* @y.5, align 4
  %41 = add i32 %39, -1
  %42 = mul i32 %41, %39
  %43 = and i32 %42, 1
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %45, %44
  %47 = select i1 %46, i32 -702486681, i32 -1723703820
  br label %.backedge

48:                                               ; preds = %11
  %49 = load i64, i64* @E, align 8
  %50 = icmp slt i64 %.062, %49
  store i1 %50, i1* %4, align 1
  %51 = load i32, i32* @x.4, align 4
  %52 = load i32, i32* @y.5, align 4
  %53 = add i32 %51, -1
  %54 = mul i32 %53, %51
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %57, %56
  %59 = select i1 %58, i32 428412051, i32 -1723703820
  br label %.backedge

60:                                               ; preds = %11
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %61 = select i1 %.0..0..0., i32 1028050859, i32 -995448568
  br label %.backedge

62:                                               ; preds = %11
  %63 = load i32, i32* @x.4, align 4
  %64 = load i32, i32* @y.5, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 -757578096, i32 -1266150723
  br label %.backedge

72:                                               ; preds = %11
  %73 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %5)
  %74 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %73, i64* nonnull dereferenceable(8) %6)
  %75 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %74, i64* nonnull dereferenceable(8) %7)
  %76 = load i64, i64* %7, align 8
  %77 = load i64, i64* %5, align 8
  %78 = load i64, i64* %6, align 8
  %79 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %77, i64 %78
  store i64 %76, i64* %79, align 8
  %80 = load i32, i32* @x.4, align 4
  %81 = load i32, i32* @y.5, align 4
  %82 = add i32 %80, -1
  %83 = mul i32 %82, %80
  %84 = and i32 %83, 1
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %86, %85
  %88 = select i1 %87, i32 -678670690, i32 -1266150723
  br label %.backedge

89:                                               ; preds = %11
  br label %.backedge

90:                                               ; preds = %11
  %91 = add i64 %.062, 1
  br label %.backedge

92:                                               ; preds = %11
  %93 = load i32, i32* @x.4, align 4
  %94 = load i32, i32* @y.5, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 813257614, i32 -862451449
  br label %.backedge

102:                                              ; preds = %11
  %103 = load i32, i32* @x.4, align 4
  %104 = load i32, i32* @y.5, align 4
  %105 = add i32 %103, -1
  %106 = mul i32 %105, %103
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %109, %108
  %111 = select i1 %110, i32 369637313, i32 -862451449
  br label %.backedge

112:                                              ; preds = %11
  br label %.backedge

113:                                              ; preds = %11
  %114 = load i64, i64* @V, align 8
  %115 = icmp slt i64 %.060, %114
  %116 = select i1 %115, i32 576055367, i32 1839157722
  br label %.backedge

117:                                              ; preds = %11
  br label %.backedge

118:                                              ; preds = %11
  %119 = load i64, i64* @V, align 8
  %120 = icmp slt i64 %.058, %119
  %121 = select i1 %120, i32 1764727126, i32 2069077030
  br label %.backedge

122:                                              ; preds = %11
  br label %.backedge

123:                                              ; preds = %11
  %124 = load i64, i64* @V, align 8
  %125 = icmp slt i64 %.056, %124
  %126 = select i1 %125, i32 -1436604828, i32 -1850063243
  br label %.backedge

127:                                              ; preds = %11
  %128 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %.058, i64 %.056
  %129 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %.058, i64 %.060
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %.060, i64 %.056
  %132 = load i64, i64* %131, align 8
  %133 = add i64 %132, %130
  store i64 %133, i64* %8, align 8
  %134 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %128, i64* nonnull dereferenceable(8) %8)
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %128, align 8
  br label %.backedge

136:                                              ; preds = %11
  %.neg72 = add i64 %.056, 1
  br label %.backedge

137:                                              ; preds = %11
  br label %.backedge

138:                                              ; preds = %11
  %139 = load i32, i32* @x.4, align 4
  %140 = load i32, i32* @y.5, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 733488325, i32 -1031352849
  br label %.backedge

148:                                              ; preds = %11
  %149 = add i64 %.058, 1
  %150 = load i32, i32* @x.4, align 4
  %151 = load i32, i32* @y.5, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 51258758, i32 -1031352849
  br label %.backedge

159:                                              ; preds = %11
  br label %.backedge

160:                                              ; preds = %11
  br label %.backedge

161:                                              ; preds = %11
  %.neg = add i64 %.060, 1
  br label %.backedge

162:                                              ; preds = %11
  %163 = load i32, i32* @x.4, align 4
  %164 = load i32, i32* @y.5, align 4
  %165 = add i32 %163, -1
  %166 = mul i32 %165, %163
  %167 = and i32 %166, 1
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %169, %168
  %171 = select i1 %170, i32 -1957317381, i32 654213862
  br label %.backedge

172:                                              ; preds = %11
  %173 = load i32, i32* @x.4, align 4
  %174 = load i32, i32* @y.5, align 4
  %175 = add i32 %173, -1
  %176 = mul i32 %175, %173
  %177 = and i32 %176, 1
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %179, %178
  %181 = select i1 %180, i32 1141250850, i32 654213862
  br label %.backedge

182:                                              ; preds = %11
  br label %.backedge

183:                                              ; preds = %11
  %184 = load i64, i64* @V, align 8
  %185 = icmp slt i64 %.054, %184
  %186 = select i1 %185, i32 -1914061572, i32 -1391404389
  br label %.backedge

187:                                              ; preds = %11
  %188 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %.054, i64 %.054
  %189 = load i64, i64* %188, align 8
  %.not = icmp eq i64 %189, 0
  %190 = select i1 %.not, i32 2063385666, i32 -1096237503
  br label %.backedge

191:                                              ; preds = %11
  %192 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %193 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %192, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

194:                                              ; preds = %11
  br label %.backedge

195:                                              ; preds = %11
  %196 = add i64 %.054, 1
  br label %.backedge

197:                                              ; preds = %11
  br label %.backedge

198:                                              ; preds = %11
  %199 = load i32, i32* @x.4, align 4
  %200 = load i32, i32* @y.5, align 4
  %201 = add i32 %199, -1
  %202 = mul i32 %201, %199
  %203 = and i32 %202, 1
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %205, %204
  %207 = select i1 %206, i32 30130977, i32 -1270754815
  br label %.backedge

208:                                              ; preds = %11
  %209 = load i64, i64* @V, align 8
  %210 = icmp slt i64 %.052, %209
  store i1 %210, i1* %3, align 1
  %211 = load i32, i32* @x.4, align 4
  %212 = load i32, i32* @y.5, align 4
  %213 = add i32 %211, -1
  %214 = mul i32 %213, %211
  %215 = and i32 %214, 1
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %217, %216
  %219 = select i1 %218, i32 1810033324, i32 -1270754815
  br label %.backedge

220:                                              ; preds = %11
  %.0..0..0.47 = load volatile i1, i1* %3, align 1
  %221 = select i1 %.0..0..0.47, i32 771208279, i32 -813346250
  br label %.backedge

222:                                              ; preds = %11
  %223 = load i32, i32* @x.4, align 4
  %224 = load i32, i32* @y.5, align 4
  %225 = add i32 %223, -1
  %226 = mul i32 %225, %223
  %227 = and i32 %226, 1
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %229, %228
  %231 = select i1 %230, i32 280234175, i32 1408062196
  br label %.backedge

232:                                              ; preds = %11
  %233 = load i32, i32* @x.4, align 4
  %234 = load i32, i32* @y.5, align 4
  %235 = add i32 %233, -1
  %236 = mul i32 %235, %233
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %239, %238
  %241 = select i1 %240, i32 1608286890, i32 1408062196
  br label %.backedge

242:                                              ; preds = %11
  br label %.backedge

243:                                              ; preds = %11
  %244 = load i32, i32* @x.4, align 4
  %245 = load i32, i32* @y.5, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 1944578411, i32 1149311625
  br label %.backedge

253:                                              ; preds = %11
  %254 = load i64, i64* @V, align 8
  %255 = icmp slt i64 %.050, %254
  store i1 %255, i1* %2, align 1
  %256 = load i32, i32* @x.4, align 4
  %257 = load i32, i32* @y.5, align 4
  %258 = add i32 %256, -1
  %259 = mul i32 %258, %256
  %260 = and i32 %259, 1
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %262, %261
  %264 = select i1 %263, i32 1843308998, i32 1149311625
  br label %.backedge

265:                                              ; preds = %11
  %.0..0..0.48 = load volatile i1, i1* %2, align 1
  %266 = select i1 %.0..0..0.48, i32 1055803568, i32 2144629053
  br label %.backedge

267:                                              ; preds = %11
  %268 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %.052, i64 %.050
  %269 = load i64, i64* %268, align 8
  %270 = icmp slt i64 %269, 500000000000
  %271 = select i1 %270, i32 -19202064, i32 -1132701221
  br label %.backedge

272:                                              ; preds = %11
  %273 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %.052, i64 %.050
  %274 = load i64, i64* %273, align 8
  %275 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %274)
  br label %.backedge

276:                                              ; preds = %11
  %277 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  br label %.backedge

278:                                              ; preds = %11
  %279 = load i64, i64* @V, align 8
  %280 = add i64 %279, -1
  %281 = icmp slt i64 %.050, %280
  %282 = select i1 %281, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0)
  %283 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* %282)
  br label %.backedge

284:                                              ; preds = %11
  %285 = load i32, i32* @x.4, align 4
  %286 = load i32, i32* @y.5, align 4
  %287 = add i32 %285, -1
  %288 = mul i32 %287, %285
  %289 = and i32 %288, 1
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %291, %290
  %293 = select i1 %292, i32 -907891604, i32 -954974859
  br label %.backedge

294:                                              ; preds = %11
  %295 = add i64 %.050, 1
  %296 = load i32, i32* @x.4, align 4
  %297 = load i32, i32* @y.5, align 4
  %298 = add i32 %296, -1
  %299 = mul i32 %298, %296
  %300 = and i32 %299, 1
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %302, %301
  %304 = select i1 %303, i32 1592633156, i32 -954974859
  br label %.backedge

305:                                              ; preds = %11
  br label %.backedge

306:                                              ; preds = %11
  %307 = load i32, i32* @x.4, align 4
  %308 = load i32, i32* @y.5, align 4
  %309 = add i32 %307, -1
  %310 = mul i32 %309, %307
  %311 = and i32 %310, 1
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %313, %312
  %315 = select i1 %314, i32 -939477087, i32 -1555285643
  br label %.backedge

316:                                              ; preds = %11
  %317 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %318 = load i32, i32* @x.4, align 4
  %319 = load i32, i32* @y.5, align 4
  %320 = add i32 %318, -1
  %321 = mul i32 %320, %318
  %322 = and i32 %321, 1
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %324, %323
  %326 = select i1 %325, i32 -1212210146, i32 -1555285643
  br label %.backedge

327:                                              ; preds = %11
  br label %.backedge

328:                                              ; preds = %11
  %329 = add i64 %.052, 1
  br label %.backedge

330:                                              ; preds = %11
  br label %.backedge

331:                                              ; preds = %11
  %332 = load i32, i32* @x.4, align 4
  %333 = load i32, i32* @y.5, align 4
  %334 = add i32 %332, -1
  %335 = mul i32 %334, %332
  %336 = and i32 %335, 1
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %338, %337
  %340 = select i1 %339, i32 -1315197368, i32 -1124820088
  br label %.backedge

341:                                              ; preds = %11
  store i32 0, i32* %1, align 4
  %342 = load i32, i32* @x.4, align 4
  %343 = load i32, i32* @y.5, align 4
  %344 = add i32 %342, -1
  %345 = mul i32 %344, %342
  %346 = and i32 %345, 1
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %348, %347
  %350 = select i1 %349, i32 585093415, i32 -1124820088
  br label %.backedge

351:                                              ; preds = %11
  %.0..0..0.49 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.49

352:                                              ; preds = %11
  br label %.backedge

353:                                              ; preds = %11
  %354 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %5)
  %355 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %354, i64* nonnull dereferenceable(8) %6)
  %356 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %355, i64* nonnull dereferenceable(8) %7)
  %357 = load i64, i64* %7, align 8
  %358 = load i64, i64* %5, align 8
  %359 = load i64, i64* %6, align 8
  %360 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @G, i64 0, i64 %358, i64 %359
  store i64 %357, i64* %360, align 8
  br label %.backedge

361:                                              ; preds = %11
  br label %.backedge

362:                                              ; preds = %11
  %363 = add i64 %.058, 1
  br label %.backedge

364:                                              ; preds = %11
  br label %.backedge

365:                                              ; preds = %11
  br label %.backedge

366:                                              ; preds = %11
  br label %.backedge

367:                                              ; preds = %11
  br label %.backedge

368:                                              ; preds = %11
  %369 = add i64 %.050, 1
  br label %.backedge

370:                                              ; preds = %11
  %371 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

372:                                              ; preds = %11
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #5 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %1, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.07.ph = phi i64* [ undef, %2 ], [ %.07.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ -939282191, %2 ], [ 1277730003, %.outer.backedge ]
  br label %.outer9

.outer9:                                          ; preds = %.outer, %8
  %.0.ph10 = phi i32 [ %.0.ph, %.outer ], [ %10, %8 ]
  br label %7

7:                                                ; preds = %.outer9, %7
  switch i32 %.0.ph10, label %7 [
    i32 -939282191, label %8
    i32 982207749, label %.outer.backedge
    i32 -1888623347, label %11
    i32 1277730003, label %12
  ]

8:                                                ; preds = %7
  %.0..0..0.5 = load volatile i64, i64* %4, align 8
  %.0..0..0.6 = load volatile i64, i64* %3, align 8
  %9 = icmp slt i64 %.0..0..0.5, %.0..0..0.6
  %10 = select i1 %9, i32 982207749, i32 -1888623347
  br label %.outer9

11:                                               ; preds = %7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %7, %11
  %.07.ph.be = phi i64* [ %0, %11 ], [ %1, %7 ]
  br label %.outer

12:                                               ; preds = %7
  ret i64* %.07.ph
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s317509205.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.8, align 4
  %4 = load i32, i32* @y.9, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1111393642, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1111393642, label %11
    i32 1389346859, label %14
    i32 -1096378177, label %24
    i32 632713224, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1389346859, i32 632713224
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.8, align 4
  %16 = load i32, i32* @y.9, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -1096378177, i32 632713224
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 1389346859, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
