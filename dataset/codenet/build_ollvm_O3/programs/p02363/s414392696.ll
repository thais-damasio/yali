; ModuleID = 'build_ollvm/programs/p02363/s414392696.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s414392696.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

$_ZSt3minIxERKT_S2_S2_ = comdat any

@G = global [110 x [110 x i64]] zeroinitializer, align 16
@n = global i32 0, align 4
@nil = local_unnamed_addr global i64 4294967296, align 8
@.str = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@str = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1

; Function Attrs: noinline nounwind uwtable
define void @_Z4floyv() local_unnamed_addr #0 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i64, align 8
  br label %5

5:                                                ; preds = %.backedge, %0
  %.031 = phi i32 [ 0, %0 ], [ %.031.be, %.backedge ]
  %.029 = phi i32 [ undef, %0 ], [ %.029.be, %.backedge ]
  %.027 = phi i32 [ undef, %0 ], [ %.027.be, %.backedge ]
  %.0 = phi i32 [ -159629823, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -159629823, label %6
    i32 693601697, label %16
    i32 -366817672, label %28
    i32 304471675, label %30
    i32 -1782750632, label %40
    i32 111013589, label %50
    i32 2068104727, label %51
    i32 -210213978, label %61
    i32 992260702, label %73
    i32 -1199994540, label %75
    i32 1923317882, label %83
    i32 -1615278074, label %84
    i32 669122131, label %85
    i32 528008749, label %89
    i32 -769389270, label %99
    i32 1529316056, label %115
    i32 -62317039, label %117
    i32 -651177966, label %127
    i32 828545911, label %137
    i32 -1372277605, label %138
    i32 1887468029, label %150
    i32 253786979, label %151
    i32 -737235856, label %152
    i32 -1223663116, label %162
    i32 -686259878, label %173
    i32 378292748, label %174
    i32 1724397657, label %175
    i32 -2064994006, label %185
    i32 -1338720820, label %196
    i32 -2028185847, label %197
    i32 -1468189366, label %207
    i32 -1024715430, label %217
    i32 1312907074, label %218
    i32 1083748332, label %219
    i32 -89183168, label %220
    i32 1132333816, label %221
    i32 1972538030, label %222
    i32 1866933336, label %223
    i32 2021569193, label %225
    i32 -1696298285, label %227
  ]

.backedge:                                        ; preds = %5, %227, %225, %223, %222, %221, %220, %219, %218, %207, %197, %196, %185, %175, %174, %173, %162, %152, %151, %150, %138, %137, %127, %117, %115, %99, %89, %85, %84, %83, %75, %73, %61, %51, %50, %40, %30, %28, %16, %6
  %.031.be = phi i32 [ %.031, %5 ], [ %.031, %227 ], [ %226, %225 ], [ %.031, %223 ], [ %.031, %222 ], [ %.031, %221 ], [ %.031, %220 ], [ %.031, %219 ], [ %.031, %218 ], [ %.031, %207 ], [ %.031, %197 ], [ %.031, %196 ], [ %186, %185 ], [ %.031, %175 ], [ %.031, %174 ], [ %.031, %173 ], [ %.031, %162 ], [ %.031, %152 ], [ %.031, %151 ], [ %.031, %150 ], [ %.031, %138 ], [ %.031, %137 ], [ %.031, %127 ], [ %.031, %117 ], [ %.031, %115 ], [ %.031, %99 ], [ %.031, %89 ], [ %.031, %85 ], [ %.031, %84 ], [ %.031, %83 ], [ %.031, %75 ], [ %.031, %73 ], [ %.031, %61 ], [ %.031, %51 ], [ %.031, %50 ], [ %.031, %40 ], [ %.031, %30 ], [ %.031, %28 ], [ %.031, %16 ], [ %.031, %6 ]
  %.029.be = phi i32 [ %.029, %5 ], [ %.029, %227 ], [ %.029, %225 ], [ %224, %223 ], [ %.029, %222 ], [ %.029, %221 ], [ %.029, %220 ], [ 0, %219 ], [ %.029, %218 ], [ %.029, %207 ], [ %.029, %197 ], [ %.029, %196 ], [ %.029, %185 ], [ %.029, %175 ], [ %.029, %174 ], [ %.029, %173 ], [ %163, %162 ], [ %.029, %152 ], [ %.029, %151 ], [ %.029, %150 ], [ %.029, %138 ], [ %.029, %137 ], [ %.029, %127 ], [ %.029, %117 ], [ %.029, %115 ], [ %.029, %99 ], [ %.029, %89 ], [ %.029, %85 ], [ %.029, %84 ], [ %.029, %83 ], [ %.029, %75 ], [ %.029, %73 ], [ %.029, %61 ], [ %.029, %51 ], [ %.029, %50 ], [ 0, %40 ], [ %.029, %30 ], [ %.029, %28 ], [ %.029, %16 ], [ %.029, %6 ]
  %.027.be = phi i32 [ %.027, %5 ], [ %.027, %227 ], [ %.027, %225 ], [ %.027, %223 ], [ %.027, %222 ], [ %.027, %221 ], [ %.027, %220 ], [ %.027, %219 ], [ %.027, %218 ], [ %.027, %207 ], [ %.027, %197 ], [ %.027, %196 ], [ %.027, %185 ], [ %.027, %175 ], [ %.027, %174 ], [ %.027, %173 ], [ %.027, %162 ], [ %.027, %152 ], [ %.027, %151 ], [ %.neg, %150 ], [ %.027, %138 ], [ %.027, %137 ], [ %.027, %127 ], [ %.027, %117 ], [ %.027, %115 ], [ %.027, %99 ], [ %.027, %89 ], [ %.027, %85 ], [ 0, %84 ], [ %.027, %83 ], [ %.027, %75 ], [ %.027, %73 ], [ %.027, %61 ], [ %.027, %51 ], [ %.027, %50 ], [ %.027, %40 ], [ %.027, %30 ], [ %.027, %28 ], [ %.027, %16 ], [ %.027, %6 ]
  %.0.be = phi i32 [ %.0, %5 ], [ -1468189366, %227 ], [ -2064994006, %225 ], [ -1223663116, %223 ], [ -651177966, %222 ], [ -769389270, %221 ], [ -210213978, %220 ], [ -1782750632, %219 ], [ 693601697, %218 ], [ %216, %207 ], [ %206, %197 ], [ -159629823, %196 ], [ %195, %185 ], [ %184, %175 ], [ 1724397657, %174 ], [ 2068104727, %173 ], [ %172, %162 ], [ %161, %152 ], [ -737235856, %151 ], [ 669122131, %150 ], [ 1887468029, %138 ], [ 1887468029, %137 ], [ %136, %127 ], [ %126, %117 ], [ %116, %115 ], [ %114, %99 ], [ %98, %89 ], [ %88, %85 ], [ 669122131, %84 ], [ -737235856, %83 ], [ %82, %75 ], [ %74, %73 ], [ %72, %61 ], [ %60, %51 ], [ 2068104727, %50 ], [ %49, %40 ], [ %39, %30 ], [ %29, %28 ], [ %27, %16 ], [ %15, %6 ]
  br label %5

6:                                                ; preds = %5
  %7 = load i32, i32* @x, align 4
  %8 = load i32, i32* @y, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 693601697, i32 1312907074
  br label %.backedge

16:                                               ; preds = %5
  %17 = load i32, i32* @n, align 4
  %18 = icmp slt i32 %.031, %17
  store i1 %18, i1* %3, align 1
  %19 = load i32, i32* @x, align 4
  %20 = load i32, i32* @y, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 -366817672, i32 1312907074
  br label %.backedge

28:                                               ; preds = %5
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %29 = select i1 %.0..0..0., i32 304471675, i32 -2028185847
  br label %.backedge

30:                                               ; preds = %5
  %31 = load i32, i32* @x, align 4
  %32 = load i32, i32* @y, align 4
  %33 = add i32 %31, -1
  %34 = mul i32 %33, %31
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %37, %36
  %39 = select i1 %38, i32 -1782750632, i32 1083748332
  br label %.backedge

40:                                               ; preds = %5
  %41 = load i32, i32* @x, align 4
  %42 = load i32, i32* @y, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 111013589, i32 1083748332
  br label %.backedge

50:                                               ; preds = %5
  br label %.backedge

51:                                               ; preds = %5
  %52 = load i32, i32* @x, align 4
  %53 = load i32, i32* @y, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 -210213978, i32 -89183168
  br label %.backedge

61:                                               ; preds = %5
  %62 = load i32, i32* @n, align 4
  %63 = icmp slt i32 %.029, %62
  store i1 %63, i1* %2, align 1
  %64 = load i32, i32* @x, align 4
  %65 = load i32, i32* @y, align 4
  %66 = add i32 %64, -1
  %67 = mul i32 %66, %64
  %68 = and i32 %67, 1
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %70, %69
  %72 = select i1 %71, i32 992260702, i32 -89183168
  br label %.backedge

73:                                               ; preds = %5
  %.0..0..0.25 = load volatile i1, i1* %2, align 1
  %74 = select i1 %.0..0..0.25, i32 -1199994540, i32 378292748
  br label %.backedge

75:                                               ; preds = %5
  %76 = sext i32 %.029 to i64
  %77 = sext i32 %.031 to i64
  %78 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %76, i64 %77
  %79 = load i64, i64* %78, align 8
  %80 = load i64, i64* @nil, align 8
  %81 = icmp eq i64 %79, %80
  %82 = select i1 %81, i32 1923317882, i32 -1615278074
  br label %.backedge

83:                                               ; preds = %5
  br label %.backedge

84:                                               ; preds = %5
  br label %.backedge

85:                                               ; preds = %5
  %86 = load i32, i32* @n, align 4
  %87 = icmp slt i32 %.027, %86
  %88 = select i1 %87, i32 528008749, i32 253786979
  br label %.backedge

89:                                               ; preds = %5
  %90 = load i32, i32* @x, align 4
  %91 = load i32, i32* @y, align 4
  %92 = add i32 %90, -1
  %93 = mul i32 %92, %90
  %94 = and i32 %93, 1
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %96, %95
  %98 = select i1 %97, i32 -769389270, i32 1132333816
  br label %.backedge

99:                                               ; preds = %5
  %100 = sext i32 %.031 to i64
  %101 = sext i32 %.027 to i64
  %102 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %100, i64 %101
  %103 = load i64, i64* %102, align 8
  %104 = load i64, i64* @nil, align 8
  %105 = icmp eq i64 %103, %104
  store i1 %105, i1* %1, align 1
  %106 = load i32, i32* @x, align 4
  %107 = load i32, i32* @y, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 1529316056, i32 1132333816
  br label %.backedge

115:                                              ; preds = %5
  %.0..0..0.26 = load volatile i1, i1* %1, align 1
  %116 = select i1 %.0..0..0.26, i32 -62317039, i32 -1372277605
  br label %.backedge

117:                                              ; preds = %5
  %118 = load i32, i32* @x, align 4
  %119 = load i32, i32* @y, align 4
  %120 = add i32 %118, -1
  %121 = mul i32 %120, %118
  %122 = and i32 %121, 1
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %124, %123
  %126 = select i1 %125, i32 -651177966, i32 1972538030
  br label %.backedge

127:                                              ; preds = %5
  %128 = load i32, i32* @x, align 4
  %129 = load i32, i32* @y, align 4
  %130 = add i32 %128, -1
  %131 = mul i32 %130, %128
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %134, %133
  %136 = select i1 %135, i32 828545911, i32 1972538030
  br label %.backedge

137:                                              ; preds = %5
  br label %.backedge

138:                                              ; preds = %5
  %139 = sext i32 %.029 to i64
  %140 = sext i32 %.027 to i64
  %141 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %139, i64 %140
  %142 = sext i32 %.031 to i64
  %143 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %139, i64 %142
  %144 = load i64, i64* %143, align 8
  %145 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %142, i64 %140
  %146 = load i64, i64* %145, align 8
  %147 = add i64 %146, %144
  store i64 %147, i64* %4, align 8
  %148 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %141, i64* nonnull dereferenceable(8) %4)
  %149 = load i64, i64* %148, align 8
  store i64 %149, i64* %141, align 8
  br label %.backedge

150:                                              ; preds = %5
  %.neg = add i32 %.027, 1
  br label %.backedge

151:                                              ; preds = %5
  br label %.backedge

152:                                              ; preds = %5
  %153 = load i32, i32* @x, align 4
  %154 = load i32, i32* @y, align 4
  %155 = add i32 %153, -1
  %156 = mul i32 %155, %153
  %157 = and i32 %156, 1
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %159, %158
  %161 = select i1 %160, i32 -1223663116, i32 1866933336
  br label %.backedge

162:                                              ; preds = %5
  %163 = add i32 %.029, 1
  %164 = load i32, i32* @x, align 4
  %165 = load i32, i32* @y, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 -686259878, i32 1866933336
  br label %.backedge

173:                                              ; preds = %5
  br label %.backedge

174:                                              ; preds = %5
  br label %.backedge

175:                                              ; preds = %5
  %176 = load i32, i32* @x, align 4
  %177 = load i32, i32* @y, align 4
  %178 = add i32 %176, -1
  %179 = mul i32 %178, %176
  %180 = and i32 %179, 1
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %182, %181
  %184 = select i1 %183, i32 -2064994006, i32 2021569193
  br label %.backedge

185:                                              ; preds = %5
  %186 = add i32 %.031, 1
  %187 = load i32, i32* @x, align 4
  %188 = load i32, i32* @y, align 4
  %189 = add i32 %187, -1
  %190 = mul i32 %189, %187
  %191 = and i32 %190, 1
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %193, %192
  %195 = select i1 %194, i32 -1338720820, i32 2021569193
  br label %.backedge

196:                                              ; preds = %5
  br label %.backedge

197:                                              ; preds = %5
  %198 = load i32, i32* @x, align 4
  %199 = load i32, i32* @y, align 4
  %200 = add i32 %198, -1
  %201 = mul i32 %200, %198
  %202 = and i32 %201, 1
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %204, %203
  %206 = select i1 %205, i32 -1468189366, i32 -1696298285
  br label %.backedge

207:                                              ; preds = %5
  %208 = load i32, i32* @x, align 4
  %209 = load i32, i32* @y, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 -1024715430, i32 -1696298285
  br label %.backedge

217:                                              ; preds = %5
  ret void

218:                                              ; preds = %5
  br label %.backedge

219:                                              ; preds = %5
  br label %.backedge

220:                                              ; preds = %5
  br label %.backedge

221:                                              ; preds = %5
  br label %.backedge

222:                                              ; preds = %5
  br label %.backedge

223:                                              ; preds = %5
  %224 = add i32 %.029, 1
  br label %.backedge

225:                                              ; preds = %5
  %226 = add i32 %.031, 1
  br label %.backedge

227:                                              ; preds = %5
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #0 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64**, align 8
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.7, align 4
  %10 = load i32, i32* @y.8, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ -861746896, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -861746896, label %17
    i32 -1971007769, label %20
    i32 15807360, label %38
    i32 -583903769, label %40
    i32 -1188695210, label %50
    i32 1312546991, label %61
    i32 -1238814828, label %62
    i32 -658586120, label %64
    i32 1516869357, label %66
    i32 1197794463, label %67
  ]

.backedge:                                        ; preds = %16, %67, %66, %62, %61, %50, %40, %38, %20, %17
  %.0.be = phi i32 [ %.0, %16 ], [ -1188695210, %67 ], [ -1971007769, %66 ], [ -658586120, %62 ], [ -658586120, %61 ], [ %60, %50 ], [ %49, %40 ], [ %39, %38 ], [ %37, %20 ], [ %19, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 -1971007769, i32 1516869357
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i64*, align 8
  store i64** %21, i64*** %6, align 8
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %5, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %4, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %5, align 8
  store i64* %0, i64** %.0..0..0.6, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %4, align 8
  store i64* %1, i64** %.0..0..0.9, align 8
  %.0..0..0.10 = load volatile i64**, i64*** %4, align 8
  %24 = load i64*, i64** %.0..0..0.10, align 8
  %25 = load i64, i64* %24, align 8
  %.0..0..0.7 = load volatile i64**, i64*** %5, align 8
  %26 = load i64*, i64** %.0..0..0.7, align 8
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %25, %27
  store i1 %28, i1* %3, align 1
  %29 = load i32, i32* @x.7, align 4
  %30 = load i32, i32* @y.8, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 15807360, i32 1516869357
  br label %.backedge

38:                                               ; preds = %16
  %.0..0..0.13 = load volatile i1, i1* %3, align 1
  %39 = select i1 %.0..0..0.13, i32 -583903769, i32 -1238814828
  br label %.backedge

40:                                               ; preds = %16
  %41 = load i32, i32* @x.7, align 4
  %42 = load i32, i32* @y.8, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 -1188695210, i32 1197794463
  br label %.backedge

50:                                               ; preds = %16
  %.0..0..0.11 = load volatile i64**, i64*** %4, align 8
  %51 = load i64*, i64** %.0..0..0.11, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %6, align 8
  store i64* %51, i64** %.0..0..0.2, align 8
  %52 = load i32, i32* @x.7, align 4
  %53 = load i32, i32* @y.8, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 1312546991, i32 1197794463
  br label %.backedge

61:                                               ; preds = %16
  br label %.backedge

62:                                               ; preds = %16
  %.0..0..0.8 = load volatile i64**, i64*** %5, align 8
  %63 = load i64*, i64** %.0..0..0.8, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %6, align 8
  store i64* %63, i64** %.0..0..0.3, align 8
  br label %.backedge

64:                                               ; preds = %16
  %.0..0..0.4 = load volatile i64**, i64*** %6, align 8
  %65 = load i64*, i64** %.0..0..0.4, align 8
  ret i64* %65

66:                                               ; preds = %16
  br label %.backedge

67:                                               ; preds = %16
  %.0..0..0.12 = load volatile i64**, i64*** %4, align 8
  %68 = load i64*, i64** %.0..0..0.12, align 8
  %.0..0..0.5 = load volatile i64**, i64*** %6, align 8
  store i64* %68, i64** %.0..0..0.5, align 8
  br label %.backedge
}

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull @n, i32* nonnull %4)
  br label %9

9:                                                ; preds = %.backedge, %0
  %.048 = phi i32 [ 0, %0 ], [ %.048.be, %.backedge ]
  %.046 = phi i32 [ undef, %0 ], [ %.046.be, %.backedge ]
  %.044 = phi i32 [ undef, %0 ], [ %.044.be, %.backedge ]
  %.042 = phi i8 [ undef, %0 ], [ %.042.be, %.backedge ]
  %.040 = phi i32 [ undef, %0 ], [ %.040.be, %.backedge ]
  %.038 = phi i32 [ undef, %0 ], [ %.038.be, %.backedge ]
  %.036 = phi i32 [ undef, %0 ], [ %.036.be, %.backedge ]
  %.034 = phi i32 [ -1058640313, %0 ], [ %.034.be, %.backedge ]
  %.0 = phi i64 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.034, label %.backedge [
    i32 -1058640313, label %10
    i32 1625685717, label %14
    i32 -246630606, label %15
    i32 1446345504, label %25
    i32 -2052413529, label %37
    i32 369692793, label %39
    i32 -572132793, label %42
    i32 -425153436, label %52
    i32 1059755053, label %62
    i32 2118033389, label %63
    i32 -1419123819, label %65
    i32 -1459221179, label %69
    i32 1602062578, label %71
    i32 -1908228482, label %72
    i32 -249221116, label %73
    i32 -1551650388, label %74
    i32 684259056, label %78
    i32 1972175343, label %88
    i32 -1161652135, label %106
    i32 783164417, label %107
    i32 1761400031, label %109
    i32 -678841354, label %110
    i32 940652675, label %114
    i32 -1857473280, label %120
    i32 1839626596, label %121
    i32 673212745, label %122
    i32 1906752643, label %132
    i32 -1926349627, label %143
    i32 1597627936, label %144
    i32 -580085284, label %147
    i32 -773552503, label %148
    i32 717729469, label %149
    i32 636014145, label %153
    i32 576626114, label %154
    i32 -1268196846, label %164
    i32 878049686, label %176
    i32 1340648729, label %178
    i32 1997842541, label %188
    i32 1031051459, label %199
    i32 79149987, label %201
    i32 -704318222, label %202
    i32 -2128612823, label %210
    i32 2020121661, label %212
    i32 -1779640712, label %222
    i32 738586725, label %237
    i32 -1282592685, label %238
    i32 -1883402481, label %239
    i32 -1054251793, label %240
    i32 -703187109, label %241
    i32 422251709, label %243
    i32 90127101, label %244
    i32 -1774224619, label %245
    i32 2084692527, label %246
    i32 -574886519, label %247
    i32 -438162867, label %256
    i32 -1729631844, label %258
    i32 -149713947, label %259
    i32 -690676309, label %260
  ]

.backedge:                                        ; preds = %9, %260, %259, %258, %256, %247, %246, %245, %243, %241, %240, %239, %238, %237, %222, %212, %210, %202, %201, %199, %188, %178, %176, %164, %154, %153, %149, %148, %147, %144, %143, %132, %122, %121, %120, %114, %110, %109, %107, %106, %88, %78, %74, %73, %72, %71, %69, %65, %63, %62, %52, %42, %39, %37, %25, %15, %14, %10
  %.048.be = phi i32 [ %.048, %9 ], [ %.048, %260 ], [ %.048, %259 ], [ %.048, %258 ], [ %.048, %256 ], [ %.048, %247 ], [ %.048, %246 ], [ %.048, %245 ], [ %.048, %243 ], [ %.048, %241 ], [ %.048, %240 ], [ %.048, %239 ], [ %.048, %238 ], [ %.048, %237 ], [ %.048, %222 ], [ %.048, %212 ], [ %.048, %210 ], [ %.048, %202 ], [ %.048, %201 ], [ %.048, %199 ], [ %.048, %188 ], [ %.048, %178 ], [ %.048, %176 ], [ %.048, %164 ], [ %.048, %154 ], [ %.048, %153 ], [ %.048, %149 ], [ %.048, %148 ], [ %.048, %147 ], [ %.048, %144 ], [ %.048, %143 ], [ %.048, %132 ], [ %.048, %122 ], [ %.048, %121 ], [ %.048, %120 ], [ %.048, %114 ], [ %.048, %110 ], [ %.048, %109 ], [ %.048, %107 ], [ %.048, %106 ], [ %.048, %88 ], [ %.048, %78 ], [ %.048, %74 ], [ %.048, %73 ], [ %.neg51, %72 ], [ %.048, %71 ], [ %.048, %69 ], [ %.048, %65 ], [ %.048, %63 ], [ %.048, %62 ], [ %.048, %52 ], [ %.048, %42 ], [ %.048, %39 ], [ %.048, %37 ], [ %.048, %25 ], [ %.048, %15 ], [ %.048, %14 ], [ %.048, %10 ]
  %.046.be = phi i32 [ %.046, %9 ], [ %.046, %260 ], [ %.046, %259 ], [ %.046, %258 ], [ %.046, %256 ], [ %.046, %247 ], [ %.046, %246 ], [ %.046, %245 ], [ %.046, %243 ], [ %.046, %241 ], [ %.046, %240 ], [ %.046, %239 ], [ %.046, %238 ], [ %.046, %237 ], [ %.046, %222 ], [ %.046, %212 ], [ %.046, %210 ], [ %.046, %202 ], [ %.046, %201 ], [ %.046, %199 ], [ %.046, %188 ], [ %.046, %178 ], [ %.046, %176 ], [ %.046, %164 ], [ %.046, %154 ], [ %.046, %153 ], [ %.046, %149 ], [ %.046, %148 ], [ %.046, %147 ], [ %.046, %144 ], [ %.046, %143 ], [ %.046, %132 ], [ %.046, %122 ], [ %.046, %121 ], [ %.046, %120 ], [ %.046, %114 ], [ %.046, %110 ], [ %.046, %109 ], [ %.046, %107 ], [ %.046, %106 ], [ %.046, %88 ], [ %.046, %78 ], [ %.046, %74 ], [ %.046, %73 ], [ %.046, %72 ], [ %.046, %71 ], [ %70, %69 ], [ %.046, %65 ], [ %.046, %63 ], [ %.046, %62 ], [ %.046, %52 ], [ %.046, %42 ], [ %.046, %39 ], [ %.046, %37 ], [ %.046, %25 ], [ %.046, %15 ], [ 0, %14 ], [ %.046, %10 ]
  %.044.be = phi i32 [ %.044, %9 ], [ %.044, %260 ], [ %.044, %259 ], [ %.044, %258 ], [ %.044, %256 ], [ %.044, %247 ], [ %.044, %246 ], [ %.044, %245 ], [ %.044, %243 ], [ %.044, %241 ], [ %.044, %240 ], [ %.044, %239 ], [ %.044, %238 ], [ %.044, %237 ], [ %.044, %222 ], [ %.044, %212 ], [ %.044, %210 ], [ %.044, %202 ], [ %.044, %201 ], [ %.044, %199 ], [ %.044, %188 ], [ %.044, %178 ], [ %.044, %176 ], [ %.044, %164 ], [ %.044, %154 ], [ %.044, %153 ], [ %.044, %149 ], [ %.044, %148 ], [ %.044, %147 ], [ %.044, %144 ], [ %.044, %143 ], [ %.044, %132 ], [ %.044, %122 ], [ %.044, %121 ], [ %.044, %120 ], [ %.044, %114 ], [ %.044, %110 ], [ %.044, %109 ], [ %108, %107 ], [ %.044, %106 ], [ %.044, %88 ], [ %.044, %78 ], [ %.044, %74 ], [ 0, %73 ], [ %.044, %72 ], [ %.044, %71 ], [ %.044, %69 ], [ %.044, %65 ], [ %.044, %63 ], [ %.044, %62 ], [ %.044, %52 ], [ %.044, %42 ], [ %.044, %39 ], [ %.044, %37 ], [ %.044, %25 ], [ %.044, %15 ], [ %.044, %14 ], [ %.044, %10 ]
  %.042.be = phi i8 [ %.042, %9 ], [ %.042, %260 ], [ %.042, %259 ], [ %.042, %258 ], [ %.042, %256 ], [ %.042, %247 ], [ %.042, %246 ], [ %.042, %245 ], [ %.042, %243 ], [ %.042, %241 ], [ %.042, %240 ], [ %.042, %239 ], [ %.042, %238 ], [ %.042, %237 ], [ %.042, %222 ], [ %.042, %212 ], [ %.042, %210 ], [ %.042, %202 ], [ %.042, %201 ], [ %.042, %199 ], [ %.042, %188 ], [ %.042, %178 ], [ %.042, %176 ], [ %.042, %164 ], [ %.042, %154 ], [ %.042, %153 ], [ %.042, %149 ], [ %.042, %148 ], [ %.042, %147 ], [ %.042, %144 ], [ %.042, %143 ], [ %.042, %132 ], [ %.042, %122 ], [ %.042, %121 ], [ 1, %120 ], [ %.042, %114 ], [ %.042, %110 ], [ 0, %109 ], [ %.042, %107 ], [ %.042, %106 ], [ %.042, %88 ], [ %.042, %78 ], [ %.042, %74 ], [ %.042, %73 ], [ %.042, %72 ], [ %.042, %71 ], [ %.042, %69 ], [ %.042, %65 ], [ %.042, %63 ], [ %.042, %62 ], [ %.042, %52 ], [ %.042, %42 ], [ %.042, %39 ], [ %.042, %37 ], [ %.042, %25 ], [ %.042, %15 ], [ %.042, %14 ], [ %.042, %10 ]
  %.040.be = phi i32 [ %.040, %9 ], [ %.040, %260 ], [ %.040, %259 ], [ %.040, %258 ], [ %257, %256 ], [ %.040, %247 ], [ %.040, %246 ], [ %.040, %245 ], [ %.040, %243 ], [ %.040, %241 ], [ %.040, %240 ], [ %.040, %239 ], [ %.040, %238 ], [ %.040, %237 ], [ %.040, %222 ], [ %.040, %212 ], [ %.040, %210 ], [ %.040, %202 ], [ %.040, %201 ], [ %.040, %199 ], [ %.040, %188 ], [ %.040, %178 ], [ %.040, %176 ], [ %.040, %164 ], [ %.040, %154 ], [ %.040, %153 ], [ %.040, %149 ], [ %.040, %148 ], [ %.040, %147 ], [ %.040, %144 ], [ %.040, %143 ], [ %133, %132 ], [ %.040, %122 ], [ %.040, %121 ], [ %.040, %120 ], [ %.040, %114 ], [ %.040, %110 ], [ 0, %109 ], [ %.040, %107 ], [ %.040, %106 ], [ %.040, %88 ], [ %.040, %78 ], [ %.040, %74 ], [ %.040, %73 ], [ %.040, %72 ], [ %.040, %71 ], [ %.040, %69 ], [ %.040, %65 ], [ %.040, %63 ], [ %.040, %62 ], [ %.040, %52 ], [ %.040, %42 ], [ %.040, %39 ], [ %.040, %37 ], [ %.040, %25 ], [ %.040, %15 ], [ %.040, %14 ], [ %.040, %10 ]
  %.038.be = phi i32 [ %.038, %9 ], [ %.038, %260 ], [ %.038, %259 ], [ %.038, %258 ], [ %.038, %256 ], [ %.038, %247 ], [ %.038, %246 ], [ %.038, %245 ], [ %.038, %243 ], [ %242, %241 ], [ %.038, %240 ], [ %.038, %239 ], [ %.038, %238 ], [ %.038, %237 ], [ %.038, %222 ], [ %.038, %212 ], [ %.038, %210 ], [ %.038, %202 ], [ %.038, %201 ], [ %.038, %199 ], [ %.038, %188 ], [ %.038, %178 ], [ %.038, %176 ], [ %.038, %164 ], [ %.038, %154 ], [ %.038, %153 ], [ %.038, %149 ], [ 0, %148 ], [ %.038, %147 ], [ %.038, %144 ], [ %.038, %143 ], [ %.038, %132 ], [ %.038, %122 ], [ %.038, %121 ], [ %.038, %120 ], [ %.038, %114 ], [ %.038, %110 ], [ %.038, %109 ], [ %.038, %107 ], [ %.038, %106 ], [ %.038, %88 ], [ %.038, %78 ], [ %.038, %74 ], [ %.038, %73 ], [ %.038, %72 ], [ %.038, %71 ], [ %.038, %69 ], [ %.038, %65 ], [ %.038, %63 ], [ %.038, %62 ], [ %.038, %52 ], [ %.038, %42 ], [ %.038, %39 ], [ %.038, %37 ], [ %.038, %25 ], [ %.038, %15 ], [ %.038, %14 ], [ %.038, %10 ]
  %.036.be = phi i32 [ %.036, %9 ], [ %.036, %260 ], [ %.036, %259 ], [ %.036, %258 ], [ %.036, %256 ], [ %.036, %247 ], [ %.036, %246 ], [ %.036, %245 ], [ %.036, %243 ], [ %.036, %241 ], [ %.036, %240 ], [ %.neg, %239 ], [ %.036, %238 ], [ %.036, %237 ], [ %.036, %222 ], [ %.036, %212 ], [ %.036, %210 ], [ %.036, %202 ], [ %.036, %201 ], [ %.036, %199 ], [ %.036, %188 ], [ %.036, %178 ], [ %.036, %176 ], [ %.036, %164 ], [ %.036, %154 ], [ 0, %153 ], [ %.036, %149 ], [ %.036, %148 ], [ %.036, %147 ], [ %.036, %144 ], [ %.036, %143 ], [ %.036, %132 ], [ %.036, %122 ], [ %.036, %121 ], [ %.036, %120 ], [ %.036, %114 ], [ %.036, %110 ], [ %.036, %109 ], [ %.036, %107 ], [ %.036, %106 ], [ %.036, %88 ], [ %.036, %78 ], [ %.036, %74 ], [ %.036, %73 ], [ %.036, %72 ], [ %.036, %71 ], [ %.036, %69 ], [ %.036, %65 ], [ %.036, %63 ], [ %.036, %62 ], [ %.036, %52 ], [ %.036, %42 ], [ %.036, %39 ], [ %.036, %37 ], [ %.036, %25 ], [ %.036, %15 ], [ %.036, %14 ], [ %.036, %10 ]
  %.034.be = phi i32 [ %.034, %9 ], [ -1779640712, %260 ], [ 1997842541, %259 ], [ -1268196846, %258 ], [ 1906752643, %256 ], [ 1972175343, %247 ], [ -425153436, %246 ], [ 1446345504, %245 ], [ 90127101, %243 ], [ 717729469, %241 ], [ -703187109, %240 ], [ 576626114, %239 ], [ -1883402481, %238 ], [ -1282592685, %237 ], [ %236, %222 ], [ %221, %212 ], [ -1282592685, %210 ], [ %209, %202 ], [ -704318222, %201 ], [ %200, %199 ], [ %198, %188 ], [ %187, %178 ], [ %177, %176 ], [ %175, %164 ], [ %163, %154 ], [ 576626114, %153 ], [ %152, %149 ], [ 717729469, %148 ], [ 90127101, %147 ], [ %146, %144 ], [ -678841354, %143 ], [ %142, %132 ], [ %131, %122 ], [ 673212745, %121 ], [ 1597627936, %120 ], [ %119, %114 ], [ %113, %110 ], [ -678841354, %109 ], [ -1551650388, %107 ], [ 783164417, %106 ], [ %105, %88 ], [ %87, %78 ], [ %77, %74 ], [ -1551650388, %73 ], [ -1058640313, %72 ], [ -1908228482, %71 ], [ -246630606, %69 ], [ -1459221179, %65 ], [ -1419123819, %63 ], [ -1419123819, %62 ], [ %61, %52 ], [ %51, %42 ], [ %41, %39 ], [ %38, %37 ], [ %36, %25 ], [ %24, %15 ], [ -246630606, %14 ], [ %13, %10 ]
  %.0.be = phi i64 [ %.0, %9 ], [ %.0, %260 ], [ %.0, %259 ], [ %.0, %258 ], [ %.0, %256 ], [ %.0, %247 ], [ %.0, %246 ], [ %.0, %245 ], [ %.0, %243 ], [ %.0, %241 ], [ %.0, %240 ], [ %.0, %239 ], [ %.0, %238 ], [ %.0, %237 ], [ %.0, %222 ], [ %.0, %212 ], [ %.0, %210 ], [ %.0, %202 ], [ %.0, %201 ], [ %.0, %199 ], [ %.0, %188 ], [ %.0, %178 ], [ %.0, %176 ], [ %.0, %164 ], [ %.0, %154 ], [ %.0, %153 ], [ %.0, %149 ], [ %.0, %148 ], [ %.0, %147 ], [ %.0, %144 ], [ %.0, %143 ], [ %.0, %132 ], [ %.0, %122 ], [ %.0, %121 ], [ %.0, %120 ], [ %.0, %114 ], [ %.0, %110 ], [ %.0, %109 ], [ %.0, %107 ], [ %.0, %106 ], [ %.0, %88 ], [ %.0, %78 ], [ %.0, %74 ], [ %.0, %73 ], [ %.0, %72 ], [ %.0, %71 ], [ %.0, %69 ], [ %.0, %65 ], [ %64, %63 ], [ 0, %62 ], [ %.0, %52 ], [ %.0, %42 ], [ %.0, %39 ], [ %.0, %37 ], [ %.0, %25 ], [ %.0, %15 ], [ %.0, %14 ], [ %.0, %10 ]
  br label %9

10:                                               ; preds = %9
  %11 = load i32, i32* @n, align 4
  %12 = icmp slt i32 %.048, %11
  %13 = select i1 %12, i32 1625685717, i32 -249221116
  br label %.backedge

14:                                               ; preds = %9
  br label %.backedge

15:                                               ; preds = %9
  %16 = load i32, i32* @x.9, align 4
  %17 = load i32, i32* @y.10, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 1446345504, i32 -1774224619
  br label %.backedge

25:                                               ; preds = %9
  %26 = load i32, i32* @n, align 4
  %27 = icmp slt i32 %.046, %26
  store i1 %27, i1* %3, align 1
  %28 = load i32, i32* @x.9, align 4
  %29 = load i32, i32* @y.10, align 4
  %30 = add i32 %28, -1
  %31 = mul i32 %30, %28
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %34, %33
  %36 = select i1 %35, i32 -2052413529, i32 -1774224619
  br label %.backedge

37:                                               ; preds = %9
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %38 = select i1 %.0..0..0., i32 369692793, i32 1602062578
  br label %.backedge

39:                                               ; preds = %9
  %40 = icmp eq i32 %.048, %.046
  %41 = select i1 %40, i32 -572132793, i32 2118033389
  br label %.backedge

42:                                               ; preds = %9
  %43 = load i32, i32* @x.9, align 4
  %44 = load i32, i32* @y.10, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 -425153436, i32 2084692527
  br label %.backedge

52:                                               ; preds = %9
  %53 = load i32, i32* @x.9, align 4
  %54 = load i32, i32* @y.10, align 4
  %55 = add i32 %53, -1
  %56 = mul i32 %55, %53
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %59, %58
  %61 = select i1 %60, i32 1059755053, i32 2084692527
  br label %.backedge

62:                                               ; preds = %9
  br label %.backedge

63:                                               ; preds = %9
  %64 = load i64, i64* @nil, align 8
  br label %.backedge

65:                                               ; preds = %9
  %66 = sext i32 %.048 to i64
  %67 = sext i32 %.046 to i64
  %68 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %66, i64 %67
  store i64 %.0, i64* %68, align 8
  br label %.backedge

69:                                               ; preds = %9
  %70 = add i32 %.046, 1
  br label %.backedge

71:                                               ; preds = %9
  br label %.backedge

72:                                               ; preds = %9
  %.neg51 = add i32 %.048, 1
  br label %.backedge

73:                                               ; preds = %9
  br label %.backedge

74:                                               ; preds = %9
  %75 = load i32, i32* %4, align 4
  %76 = icmp slt i32 %.044, %75
  %77 = select i1 %76, i32 684259056, i32 1761400031
  br label %.backedge

78:                                               ; preds = %9
  %79 = load i32, i32* @x.9, align 4
  %80 = load i32, i32* @y.10, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 1972175343, i32 -574886519
  br label %.backedge

88:                                               ; preds = %9
  %89 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %5, i32* nonnull %6, i32* nonnull %7)
  %90 = load i32, i32* %7, align 4
  %91 = sext i32 %90 to i64
  %92 = load i32, i32* %5, align 4
  %93 = sext i32 %92 to i64
  %94 = load i32, i32* %6, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %93, i64 %95
  store i64 %91, i64* %96, align 8
  %97 = load i32, i32* @x.9, align 4
  %98 = load i32, i32* @y.10, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 -1161652135, i32 -574886519
  br label %.backedge

106:                                              ; preds = %9
  br label %.backedge

107:                                              ; preds = %9
  %108 = add i32 %.044, 1
  br label %.backedge

109:                                              ; preds = %9
  call void @_Z4floyv()
  br label %.backedge

110:                                              ; preds = %9
  %111 = load i32, i32* @n, align 4
  %112 = icmp slt i32 %.040, %111
  %113 = select i1 %112, i32 940652675, i32 1597627936
  br label %.backedge

114:                                              ; preds = %9
  %115 = sext i32 %.040 to i64
  %116 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %115, i64 %115
  %117 = load i64, i64* %116, align 8
  %118 = icmp slt i64 %117, 0
  %119 = select i1 %118, i32 -1857473280, i32 1839626596
  br label %.backedge

120:                                              ; preds = %9
  br label %.backedge

121:                                              ; preds = %9
  br label %.backedge

122:                                              ; preds = %9
  %123 = load i32, i32* @x.9, align 4
  %124 = load i32, i32* @y.10, align 4
  %125 = add i32 %123, -1
  %126 = mul i32 %125, %123
  %127 = and i32 %126, 1
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %129, %128
  %131 = select i1 %130, i32 1906752643, i32 -438162867
  br label %.backedge

132:                                              ; preds = %9
  %133 = add i32 %.040, 1
  %134 = load i32, i32* @x.9, align 4
  %135 = load i32, i32* @y.10, align 4
  %136 = add i32 %134, -1
  %137 = mul i32 %136, %134
  %138 = and i32 %137, 1
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %140, %139
  %142 = select i1 %141, i32 -1926349627, i32 -438162867
  br label %.backedge

143:                                              ; preds = %9
  br label %.backedge

144:                                              ; preds = %9
  %145 = and i8 %.042, 1
  %.not = icmp eq i8 %145, 0
  %146 = select i1 %.not, i32 -773552503, i32 -580085284
  br label %.backedge

147:                                              ; preds = %9
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @str, i64 0, i64 0))
  br label %.backedge

148:                                              ; preds = %9
  br label %.backedge

149:                                              ; preds = %9
  %150 = load i32, i32* @n, align 4
  %151 = icmp slt i32 %.038, %150
  %152 = select i1 %151, i32 636014145, i32 422251709
  br label %.backedge

153:                                              ; preds = %9
  br label %.backedge

154:                                              ; preds = %9
  %155 = load i32, i32* @x.9, align 4
  %156 = load i32, i32* @y.10, align 4
  %157 = add i32 %155, -1
  %158 = mul i32 %157, %155
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %161, %160
  %163 = select i1 %162, i32 -1268196846, i32 -1729631844
  br label %.backedge

164:                                              ; preds = %9
  %165 = load i32, i32* @n, align 4
  %166 = icmp slt i32 %.036, %165
  store i1 %166, i1* %2, align 1
  %167 = load i32, i32* @x.9, align 4
  %168 = load i32, i32* @y.10, align 4
  %169 = add i32 %167, -1
  %170 = mul i32 %169, %167
  %171 = and i32 %170, 1
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %173, %172
  %175 = select i1 %174, i32 878049686, i32 -1729631844
  br label %.backedge

176:                                              ; preds = %9
  %.0..0..0.32 = load volatile i1, i1* %2, align 1
  %177 = select i1 %.0..0..0.32, i32 1340648729, i32 -1054251793
  br label %.backedge

178:                                              ; preds = %9
  %179 = load i32, i32* @x.9, align 4
  %180 = load i32, i32* @y.10, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 1997842541, i32 -149713947
  br label %.backedge

188:                                              ; preds = %9
  %189 = icmp ne i32 %.036, 0
  store i1 %189, i1* %1, align 1
  %190 = load i32, i32* @x.9, align 4
  %191 = load i32, i32* @y.10, align 4
  %192 = add i32 %190, -1
  %193 = mul i32 %192, %190
  %194 = and i32 %193, 1
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %196, %195
  %198 = select i1 %197, i32 1031051459, i32 -149713947
  br label %.backedge

199:                                              ; preds = %9
  %.0..0..0.33 = load volatile i1, i1* %1, align 1
  %200 = select i1 %.0..0..0.33, i32 79149987, i32 -704318222
  br label %.backedge

201:                                              ; preds = %9
  %putchar50 = call i32 @putchar(i32 32)
  br label %.backedge

202:                                              ; preds = %9
  %203 = sext i32 %.038 to i64
  %204 = sext i32 %.036 to i64
  %205 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %203, i64 %204
  %206 = load i64, i64* %205, align 8
  %207 = load i64, i64* @nil, align 8
  %208 = icmp eq i64 %206, %207
  %209 = select i1 %208, i32 -2128612823, i32 2020121661
  br label %.backedge

210:                                              ; preds = %9
  %211 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  br label %.backedge

212:                                              ; preds = %9
  %213 = load i32, i32* @x.9, align 4
  %214 = load i32, i32* @y.10, align 4
  %215 = add i32 %213, -1
  %216 = mul i32 %215, %213
  %217 = and i32 %216, 1
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %219, %218
  %221 = select i1 %220, i32 -1779640712, i32 -690676309
  br label %.backedge

222:                                              ; preds = %9
  %223 = sext i32 %.038 to i64
  %224 = sext i32 %.036 to i64
  %225 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %223, i64 %224
  %226 = load i64, i64* %225, align 8
  %227 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 %226)
  %228 = load i32, i32* @x.9, align 4
  %229 = load i32, i32* @y.10, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 738586725, i32 -690676309
  br label %.backedge

237:                                              ; preds = %9
  br label %.backedge

238:                                              ; preds = %9
  br label %.backedge

239:                                              ; preds = %9
  %.neg = add i32 %.036, 1
  br label %.backedge

240:                                              ; preds = %9
  %putchar = call i32 @putchar(i32 10)
  br label %.backedge

241:                                              ; preds = %9
  %242 = add i32 %.038, 1
  br label %.backedge

243:                                              ; preds = %9
  br label %.backedge

244:                                              ; preds = %9
  ret i32 0

245:                                              ; preds = %9
  br label %.backedge

246:                                              ; preds = %9
  br label %.backedge

247:                                              ; preds = %9
  %248 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %5, i32* nonnull %6, i32* nonnull %7)
  %249 = load i32, i32* %7, align 4
  %250 = sext i32 %249 to i64
  %251 = load i32, i32* %5, align 4
  %252 = sext i32 %251 to i64
  %253 = load i32, i32* %6, align 4
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %252, i64 %254
  store i64 %250, i64* %255, align 8
  br label %.backedge

256:                                              ; preds = %9
  %257 = add i32 %.040, 1
  br label %.backedge

258:                                              ; preds = %9
  br label %.backedge

259:                                              ; preds = %9
  br label %.backedge

260:                                              ; preds = %9
  %261 = sext i32 %.038 to i64
  %262 = sext i32 %.036 to i64
  %263 = getelementptr inbounds [110 x [110 x i64]], [110 x [110 x i64]]* @G, i64 0, i64 %261, i64 %262
  %264 = load i64, i64* %263, align 8
  %265 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 %264)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
