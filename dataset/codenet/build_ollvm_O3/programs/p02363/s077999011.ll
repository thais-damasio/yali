; ModuleID = 'build_ollvm/programs/p02363/s077999011.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s077999011.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@.str = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str.2 = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s077999011.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 789097427, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 789097427, label %11
    i32 -1200943872, label %14
    i32 -1426677940, label %25
    i32 -1792475481, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -1200943872, i32 -1792475481
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -1426677940, i32 -1792475481
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -1200943872, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  %15 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* nonnull %9, i32* nonnull %10)
  %16 = load i32, i32* %9, align 4
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %8, align 8
  %18 = call i8* @llvm.stacksave()
  %.0..0..0.77 = load volatile i64, i64* %8, align 8
  %19 = mul nuw i64 %.0..0..0.77, %17
  %20 = alloca i64, i64 %19, align 16
  br label %21

21:                                               ; preds = %.backedge, %0
  %.0165 = phi i32 [ 0, %0 ], [ %.0165.be, %.backedge ]
  %.0163 = phi i32 [ undef, %0 ], [ %.0163.be, %.backedge ]
  %.0161 = phi i32 [ undef, %0 ], [ %.0161.be, %.backedge ]
  %.0159 = phi i32 [ undef, %0 ], [ %.0159.be, %.backedge ]
  %.0157 = phi i32 [ undef, %0 ], [ %.0157.be, %.backedge ]
  %.0155 = phi i32 [ undef, %0 ], [ %.0155.be, %.backedge ]
  %.0153 = phi i8 [ undef, %0 ], [ %.0153.be, %.backedge ]
  %.0151 = phi i32 [ undef, %0 ], [ %.0151.be, %.backedge ]
  %.0149 = phi i32 [ undef, %0 ], [ %.0149.be, %.backedge ]
  %.0147 = phi i32 [ undef, %0 ], [ %.0147.be, %.backedge ]
  %.0 = phi i32 [ -2137030408, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -2137030408, label %22
    i32 -1895237454, label %26
    i32 13916480, label %27
    i32 630061299, label %37
    i32 -1785864019, label %49
    i32 2143241262, label %51
    i32 594184548, label %54
    i32 1590211580, label %59
    i32 -1424705255, label %69
    i32 -39105339, label %83
    i32 837436893, label %84
    i32 -1846838399, label %85
    i32 1946206835, label %87
    i32 -410961826, label %88
    i32 -394077589, label %90
    i32 1248138649, label %91
    i32 2060052629, label %95
    i32 -1048045888, label %105
    i32 933020924, label %115
    i32 -1033960917, label %126
    i32 1195134292, label %127
    i32 -1235943934, label %137
    i32 -543182195, label %147
    i32 1963647363, label %148
    i32 -1374401101, label %152
    i32 1238070173, label %162
    i32 -1207592537, label %172
    i32 -202258776, label %173
    i32 -576532407, label %177
    i32 -882249592, label %187
    i32 387728873, label %203
    i32 2013454269, label %205
    i32 1189668910, label %206
    i32 52439889, label %207
    i32 574394849, label %217
    i32 -1460416324, label %229
    i32 -903711642, label %231
    i32 -580230210, label %239
    i32 -1520081658, label %249
    i32 546392006, label %259
    i32 1020761439, label %260
    i32 -232241736, label %270
    i32 -783060289, label %296
    i32 -418912824, label %297
    i32 -1940548192, label %299
    i32 141751101, label %300
    i32 980130366, label %310
    i32 1060506107, label %321
    i32 -2062228739, label %322
    i32 -565742060, label %323
    i32 1318506898, label %333
    i32 -1090473027, label %344
    i32 -1071213076, label %345
    i32 1479701228, label %346
    i32 129823921, label %350
    i32 -135449795, label %357
    i32 123406608, label %358
    i32 -1223923621, label %368
    i32 -693725417, label %378
    i32 -19106912, label %379
    i32 1173203951, label %381
    i32 827180426, label %384
    i32 -569962043, label %387
    i32 -519560031, label %388
    i32 -2062405108, label %398
    i32 1370739989, label %410
    i32 1119167495, label %412
    i32 -1100969102, label %413
    i32 217337641, label %417
    i32 1284547653, label %427
    i32 -686081975, label %438
    i32 -927180507, label %440
    i32 902106741, label %442
    i32 -2127756794, label %452
    i32 377237626, label %468
    i32 1163905635, label %470
    i32 -341987511, label %472
    i32 1525987943, label %479
    i32 -325209776, label %480
    i32 -301540238, label %481
    i32 1494103208, label %483
    i32 859103426, label %493
    i32 -1654288259, label %504
    i32 1696430729, label %505
    i32 13468046, label %506
    i32 1012837546, label %516
    i32 2080690567, label %526
    i32 1527472530, label %527
    i32 1128697032, label %528
    i32 630499379, label %533
    i32 -752957487, label %535
    i32 -1668396840, label %536
    i32 -563935525, label %537
    i32 718250125, label %538
    i32 -1062757161, label %539
    i32 2129313702, label %540
    i32 2075576730, label %557
    i32 355549717, label %559
    i32 -1318363557, label %561
    i32 -1648460507, label %562
    i32 659573884, label %563
    i32 364329049, label %564
    i32 1544124586, label %565
    i32 909254807, label %567
  ]

.backedge:                                        ; preds = %21, %567, %565, %564, %563, %562, %561, %559, %557, %540, %539, %538, %537, %536, %535, %533, %528, %527, %516, %506, %505, %504, %493, %483, %481, %480, %479, %472, %470, %468, %452, %442, %440, %438, %427, %417, %413, %412, %410, %398, %388, %387, %384, %381, %379, %378, %368, %358, %357, %350, %346, %345, %344, %333, %323, %322, %321, %310, %300, %299, %297, %296, %270, %260, %259, %249, %239, %231, %229, %217, %207, %206, %205, %203, %187, %177, %173, %172, %162, %152, %148, %147, %137, %127, %126, %115, %105, %95, %91, %90, %88, %87, %85, %84, %83, %69, %59, %54, %51, %49, %37, %27, %26, %22
  %.0165.be = phi i32 [ %.0165, %21 ], [ %.0165, %567 ], [ %.0165, %565 ], [ %.0165, %564 ], [ %.0165, %563 ], [ %.0165, %562 ], [ %.0165, %561 ], [ %.0165, %559 ], [ %.0165, %557 ], [ %.0165, %540 ], [ %.0165, %539 ], [ %.0165, %538 ], [ %.0165, %537 ], [ %.0165, %536 ], [ %.0165, %535 ], [ %.0165, %533 ], [ %.0165, %528 ], [ %.0165, %527 ], [ %.0165, %516 ], [ %.0165, %506 ], [ %.0165, %505 ], [ %.0165, %504 ], [ %.0165, %493 ], [ %.0165, %483 ], [ %.0165, %481 ], [ %.0165, %480 ], [ %.0165, %479 ], [ %.0165, %472 ], [ %.0165, %470 ], [ %.0165, %468 ], [ %.0165, %452 ], [ %.0165, %442 ], [ %.0165, %440 ], [ %.0165, %438 ], [ %.0165, %427 ], [ %.0165, %417 ], [ %.0165, %413 ], [ %.0165, %412 ], [ %.0165, %410 ], [ %.0165, %398 ], [ %.0165, %388 ], [ %.0165, %387 ], [ %.0165, %384 ], [ %.0165, %381 ], [ %.0165, %379 ], [ %.0165, %378 ], [ %.0165, %368 ], [ %.0165, %358 ], [ %.0165, %357 ], [ %.0165, %350 ], [ %.0165, %346 ], [ %.0165, %345 ], [ %.0165, %344 ], [ %.0165, %333 ], [ %.0165, %323 ], [ %.0165, %322 ], [ %.0165, %321 ], [ %.0165, %310 ], [ %.0165, %300 ], [ %.0165, %299 ], [ %.0165, %297 ], [ %.0165, %296 ], [ %.0165, %270 ], [ %.0165, %260 ], [ %.0165, %259 ], [ %.0165, %249 ], [ %.0165, %239 ], [ %.0165, %231 ], [ %.0165, %229 ], [ %.0165, %217 ], [ %.0165, %207 ], [ %.0165, %206 ], [ %.0165, %205 ], [ %.0165, %203 ], [ %.0165, %187 ], [ %.0165, %177 ], [ %.0165, %173 ], [ %.0165, %172 ], [ %.0165, %162 ], [ %.0165, %152 ], [ %.0165, %148 ], [ %.0165, %147 ], [ %.0165, %137 ], [ %.0165, %127 ], [ %.0165, %126 ], [ %.0165, %115 ], [ %.0165, %105 ], [ %.0165, %95 ], [ %.0165, %91 ], [ %.0165, %90 ], [ %89, %88 ], [ %.0165, %87 ], [ %.0165, %85 ], [ %.0165, %84 ], [ %.0165, %83 ], [ %.0165, %69 ], [ %.0165, %59 ], [ %.0165, %54 ], [ %.0165, %51 ], [ %.0165, %49 ], [ %.0165, %37 ], [ %.0165, %27 ], [ %.0165, %26 ], [ %.0165, %22 ]
  %.0163.be = phi i32 [ %.0163, %21 ], [ %.0163, %567 ], [ %.0163, %565 ], [ %.0163, %564 ], [ %.0163, %563 ], [ %.0163, %562 ], [ %.0163, %561 ], [ %.0163, %559 ], [ %.0163, %557 ], [ %.0163, %540 ], [ %.0163, %539 ], [ %.0163, %538 ], [ %.0163, %537 ], [ %.0163, %536 ], [ %.0163, %535 ], [ %.0163, %533 ], [ %.0163, %528 ], [ %.0163, %527 ], [ %.0163, %516 ], [ %.0163, %506 ], [ %.0163, %505 ], [ %.0163, %504 ], [ %.0163, %493 ], [ %.0163, %483 ], [ %.0163, %481 ], [ %.0163, %480 ], [ %.0163, %479 ], [ %.0163, %472 ], [ %.0163, %470 ], [ %.0163, %468 ], [ %.0163, %452 ], [ %.0163, %442 ], [ %.0163, %440 ], [ %.0163, %438 ], [ %.0163, %427 ], [ %.0163, %417 ], [ %.0163, %413 ], [ %.0163, %412 ], [ %.0163, %410 ], [ %.0163, %398 ], [ %.0163, %388 ], [ %.0163, %387 ], [ %.0163, %384 ], [ %.0163, %381 ], [ %.0163, %379 ], [ %.0163, %378 ], [ %.0163, %368 ], [ %.0163, %358 ], [ %.0163, %357 ], [ %.0163, %350 ], [ %.0163, %346 ], [ %.0163, %345 ], [ %.0163, %344 ], [ %.0163, %333 ], [ %.0163, %323 ], [ %.0163, %322 ], [ %.0163, %321 ], [ %.0163, %310 ], [ %.0163, %300 ], [ %.0163, %299 ], [ %.0163, %297 ], [ %.0163, %296 ], [ %.0163, %270 ], [ %.0163, %260 ], [ %.0163, %259 ], [ %.0163, %249 ], [ %.0163, %239 ], [ %.0163, %231 ], [ %.0163, %229 ], [ %.0163, %217 ], [ %.0163, %207 ], [ %.0163, %206 ], [ %.0163, %205 ], [ %.0163, %203 ], [ %.0163, %187 ], [ %.0163, %177 ], [ %.0163, %173 ], [ %.0163, %172 ], [ %.0163, %162 ], [ %.0163, %152 ], [ %.0163, %148 ], [ %.0163, %147 ], [ %.0163, %137 ], [ %.0163, %127 ], [ %.0163, %126 ], [ %.0163, %115 ], [ %.0163, %105 ], [ %.0163, %95 ], [ %.0163, %91 ], [ %.0163, %90 ], [ %.0163, %88 ], [ %.0163, %87 ], [ %86, %85 ], [ %.0163, %84 ], [ %.0163, %83 ], [ %.0163, %69 ], [ %.0163, %59 ], [ %.0163, %54 ], [ %.0163, %51 ], [ %.0163, %49 ], [ %.0163, %37 ], [ %.0163, %27 ], [ 0, %26 ], [ %.0163, %22 ]
  %.0161.be = phi i32 [ %.0161, %21 ], [ %.0161, %567 ], [ %.0161, %565 ], [ %.0161, %564 ], [ %.0161, %563 ], [ %.0161, %562 ], [ %.0161, %561 ], [ %.0161, %559 ], [ %.0161, %557 ], [ %.0161, %540 ], [ %.0161, %539 ], [ %.0161, %538 ], [ %.0161, %537 ], [ %.0161, %536 ], [ %.0161, %535 ], [ %534, %533 ], [ %.0161, %528 ], [ %.0161, %527 ], [ %.0161, %516 ], [ %.0161, %506 ], [ %.0161, %505 ], [ %.0161, %504 ], [ %.0161, %493 ], [ %.0161, %483 ], [ %.0161, %481 ], [ %.0161, %480 ], [ %.0161, %479 ], [ %.0161, %472 ], [ %.0161, %470 ], [ %.0161, %468 ], [ %.0161, %452 ], [ %.0161, %442 ], [ %.0161, %440 ], [ %.0161, %438 ], [ %.0161, %427 ], [ %.0161, %417 ], [ %.0161, %413 ], [ %.0161, %412 ], [ %.0161, %410 ], [ %.0161, %398 ], [ %.0161, %388 ], [ %.0161, %387 ], [ %.0161, %384 ], [ %.0161, %381 ], [ %.0161, %379 ], [ %.0161, %378 ], [ %.0161, %368 ], [ %.0161, %358 ], [ %.0161, %357 ], [ %.0161, %350 ], [ %.0161, %346 ], [ %.0161, %345 ], [ %.0161, %344 ], [ %.0161, %333 ], [ %.0161, %323 ], [ %.0161, %322 ], [ %.0161, %321 ], [ %.0161, %310 ], [ %.0161, %300 ], [ %.0161, %299 ], [ %.0161, %297 ], [ %.0161, %296 ], [ %.0161, %270 ], [ %.0161, %260 ], [ %.0161, %259 ], [ %.0161, %249 ], [ %.0161, %239 ], [ %.0161, %231 ], [ %.0161, %229 ], [ %.0161, %217 ], [ %.0161, %207 ], [ %.0161, %206 ], [ %.0161, %205 ], [ %.0161, %203 ], [ %.0161, %187 ], [ %.0161, %177 ], [ %.0161, %173 ], [ %.0161, %172 ], [ %.0161, %162 ], [ %.0161, %152 ], [ %.0161, %148 ], [ %.0161, %147 ], [ %.0161, %137 ], [ %.0161, %127 ], [ %.0161, %126 ], [ %116, %115 ], [ %.0161, %105 ], [ %.0161, %95 ], [ %.0161, %91 ], [ 0, %90 ], [ %.0161, %88 ], [ %.0161, %87 ], [ %.0161, %85 ], [ %.0161, %84 ], [ %.0161, %83 ], [ %.0161, %69 ], [ %.0161, %59 ], [ %.0161, %54 ], [ %.0161, %51 ], [ %.0161, %49 ], [ %.0161, %37 ], [ %.0161, %27 ], [ %.0161, %26 ], [ %.0161, %22 ]
  %.0159.be = phi i32 [ %.0159, %21 ], [ %.0159, %567 ], [ %.0159, %565 ], [ %.0159, %564 ], [ %.0159, %563 ], [ %.0159, %562 ], [ %.0159, %561 ], [ %560, %559 ], [ %.0159, %557 ], [ %.0159, %540 ], [ %.0159, %539 ], [ %.0159, %538 ], [ %.0159, %537 ], [ %.0159, %536 ], [ 0, %535 ], [ %.0159, %533 ], [ %.0159, %528 ], [ %.0159, %527 ], [ %.0159, %516 ], [ %.0159, %506 ], [ %.0159, %505 ], [ %.0159, %504 ], [ %.0159, %493 ], [ %.0159, %483 ], [ %.0159, %481 ], [ %.0159, %480 ], [ %.0159, %479 ], [ %.0159, %472 ], [ %.0159, %470 ], [ %.0159, %468 ], [ %.0159, %452 ], [ %.0159, %442 ], [ %.0159, %440 ], [ %.0159, %438 ], [ %.0159, %427 ], [ %.0159, %417 ], [ %.0159, %413 ], [ %.0159, %412 ], [ %.0159, %410 ], [ %.0159, %398 ], [ %.0159, %388 ], [ %.0159, %387 ], [ %.0159, %384 ], [ %.0159, %381 ], [ %.0159, %379 ], [ %.0159, %378 ], [ %.0159, %368 ], [ %.0159, %358 ], [ %.0159, %357 ], [ %.0159, %350 ], [ %.0159, %346 ], [ %.0159, %345 ], [ %.0159, %344 ], [ %334, %333 ], [ %.0159, %323 ], [ %.0159, %322 ], [ %.0159, %321 ], [ %.0159, %310 ], [ %.0159, %300 ], [ %.0159, %299 ], [ %.0159, %297 ], [ %.0159, %296 ], [ %.0159, %270 ], [ %.0159, %260 ], [ %.0159, %259 ], [ %.0159, %249 ], [ %.0159, %239 ], [ %.0159, %231 ], [ %.0159, %229 ], [ %.0159, %217 ], [ %.0159, %207 ], [ %.0159, %206 ], [ %.0159, %205 ], [ %.0159, %203 ], [ %.0159, %187 ], [ %.0159, %177 ], [ %.0159, %173 ], [ %.0159, %172 ], [ %.0159, %162 ], [ %.0159, %152 ], [ %.0159, %148 ], [ %.0159, %147 ], [ 0, %137 ], [ %.0159, %127 ], [ %.0159, %126 ], [ %.0159, %115 ], [ %.0159, %105 ], [ %.0159, %95 ], [ %.0159, %91 ], [ %.0159, %90 ], [ %.0159, %88 ], [ %.0159, %87 ], [ %.0159, %85 ], [ %.0159, %84 ], [ %.0159, %83 ], [ %.0159, %69 ], [ %.0159, %59 ], [ %.0159, %54 ], [ %.0159, %51 ], [ %.0159, %49 ], [ %.0159, %37 ], [ %.0159, %27 ], [ %.0159, %26 ], [ %.0159, %22 ]
  %.0157.be = phi i32 [ %.0157, %21 ], [ %.0157, %567 ], [ %.0157, %565 ], [ %.0157, %564 ], [ %.0157, %563 ], [ %.0157, %562 ], [ %.0157, %561 ], [ %.0157, %559 ], [ %558, %557 ], [ %.0157, %540 ], [ %.0157, %539 ], [ %.0157, %538 ], [ %.0157, %537 ], [ 0, %536 ], [ %.0157, %535 ], [ %.0157, %533 ], [ %.0157, %528 ], [ %.0157, %527 ], [ %.0157, %516 ], [ %.0157, %506 ], [ %.0157, %505 ], [ %.0157, %504 ], [ %.0157, %493 ], [ %.0157, %483 ], [ %.0157, %481 ], [ %.0157, %480 ], [ %.0157, %479 ], [ %.0157, %472 ], [ %.0157, %470 ], [ %.0157, %468 ], [ %.0157, %452 ], [ %.0157, %442 ], [ %.0157, %440 ], [ %.0157, %438 ], [ %.0157, %427 ], [ %.0157, %417 ], [ %.0157, %413 ], [ %.0157, %412 ], [ %.0157, %410 ], [ %.0157, %398 ], [ %.0157, %388 ], [ %.0157, %387 ], [ %.0157, %384 ], [ %.0157, %381 ], [ %.0157, %379 ], [ %.0157, %378 ], [ %.0157, %368 ], [ %.0157, %358 ], [ %.0157, %357 ], [ %.0157, %350 ], [ %.0157, %346 ], [ %.0157, %345 ], [ %.0157, %344 ], [ %.0157, %333 ], [ %.0157, %323 ], [ %.0157, %322 ], [ %.0157, %321 ], [ %311, %310 ], [ %.0157, %300 ], [ %.0157, %299 ], [ %.0157, %297 ], [ %.0157, %296 ], [ %.0157, %270 ], [ %.0157, %260 ], [ %.0157, %259 ], [ %.0157, %249 ], [ %.0157, %239 ], [ %.0157, %231 ], [ %.0157, %229 ], [ %.0157, %217 ], [ %.0157, %207 ], [ %.0157, %206 ], [ %.0157, %205 ], [ %.0157, %203 ], [ %.0157, %187 ], [ %.0157, %177 ], [ %.0157, %173 ], [ %.0157, %172 ], [ 0, %162 ], [ %.0157, %152 ], [ %.0157, %148 ], [ %.0157, %147 ], [ %.0157, %137 ], [ %.0157, %127 ], [ %.0157, %126 ], [ %.0157, %115 ], [ %.0157, %105 ], [ %.0157, %95 ], [ %.0157, %91 ], [ %.0157, %90 ], [ %.0157, %88 ], [ %.0157, %87 ], [ %.0157, %85 ], [ %.0157, %84 ], [ %.0157, %83 ], [ %.0157, %69 ], [ %.0157, %59 ], [ %.0157, %54 ], [ %.0157, %51 ], [ %.0157, %49 ], [ %.0157, %37 ], [ %.0157, %27 ], [ %.0157, %26 ], [ %.0157, %22 ]
  %.0155.be = phi i32 [ %.0155, %21 ], [ %.0155, %567 ], [ %.0155, %565 ], [ %.0155, %564 ], [ %.0155, %563 ], [ %.0155, %562 ], [ %.0155, %561 ], [ %.0155, %559 ], [ %.0155, %557 ], [ %.0155, %540 ], [ %.0155, %539 ], [ %.0155, %538 ], [ %.0155, %537 ], [ %.0155, %536 ], [ %.0155, %535 ], [ %.0155, %533 ], [ %.0155, %528 ], [ %.0155, %527 ], [ %.0155, %516 ], [ %.0155, %506 ], [ %.0155, %505 ], [ %.0155, %504 ], [ %.0155, %493 ], [ %.0155, %483 ], [ %.0155, %481 ], [ %.0155, %480 ], [ %.0155, %479 ], [ %.0155, %472 ], [ %.0155, %470 ], [ %.0155, %468 ], [ %.0155, %452 ], [ %.0155, %442 ], [ %.0155, %440 ], [ %.0155, %438 ], [ %.0155, %427 ], [ %.0155, %417 ], [ %.0155, %413 ], [ %.0155, %412 ], [ %.0155, %410 ], [ %.0155, %398 ], [ %.0155, %388 ], [ %.0155, %387 ], [ %.0155, %384 ], [ %.0155, %381 ], [ %.0155, %379 ], [ %.0155, %378 ], [ %.0155, %368 ], [ %.0155, %358 ], [ %.0155, %357 ], [ %.0155, %350 ], [ %.0155, %346 ], [ %.0155, %345 ], [ %.0155, %344 ], [ %.0155, %333 ], [ %.0155, %323 ], [ %.0155, %322 ], [ %.0155, %321 ], [ %.0155, %310 ], [ %.0155, %300 ], [ %.0155, %299 ], [ %298, %297 ], [ %.0155, %296 ], [ %.0155, %270 ], [ %.0155, %260 ], [ %.0155, %259 ], [ %.0155, %249 ], [ %.0155, %239 ], [ %.0155, %231 ], [ %.0155, %229 ], [ %.0155, %217 ], [ %.0155, %207 ], [ 0, %206 ], [ %.0155, %205 ], [ %.0155, %203 ], [ %.0155, %187 ], [ %.0155, %177 ], [ %.0155, %173 ], [ %.0155, %172 ], [ %.0155, %162 ], [ %.0155, %152 ], [ %.0155, %148 ], [ %.0155, %147 ], [ %.0155, %137 ], [ %.0155, %127 ], [ %.0155, %126 ], [ %.0155, %115 ], [ %.0155, %105 ], [ %.0155, %95 ], [ %.0155, %91 ], [ %.0155, %90 ], [ %.0155, %88 ], [ %.0155, %87 ], [ %.0155, %85 ], [ %.0155, %84 ], [ %.0155, %83 ], [ %.0155, %69 ], [ %.0155, %59 ], [ %.0155, %54 ], [ %.0155, %51 ], [ %.0155, %49 ], [ %.0155, %37 ], [ %.0155, %27 ], [ %.0155, %26 ], [ %.0155, %22 ]
  %.0153.be = phi i8 [ %.0153, %21 ], [ %.0153, %567 ], [ %.0153, %565 ], [ %.0153, %564 ], [ %.0153, %563 ], [ %.0153, %562 ], [ %.0153, %561 ], [ %.0153, %559 ], [ %.0153, %557 ], [ %.0153, %540 ], [ %.0153, %539 ], [ %.0153, %538 ], [ %.0153, %537 ], [ %.0153, %536 ], [ %.0153, %535 ], [ %.0153, %533 ], [ %.0153, %528 ], [ %.0153, %527 ], [ %.0153, %516 ], [ %.0153, %506 ], [ %.0153, %505 ], [ %.0153, %504 ], [ %.0153, %493 ], [ %.0153, %483 ], [ %.0153, %481 ], [ %.0153, %480 ], [ %.0153, %479 ], [ %.0153, %472 ], [ %.0153, %470 ], [ %.0153, %468 ], [ %.0153, %452 ], [ %.0153, %442 ], [ %.0153, %440 ], [ %.0153, %438 ], [ %.0153, %427 ], [ %.0153, %417 ], [ %.0153, %413 ], [ %.0153, %412 ], [ %.0153, %410 ], [ %.0153, %398 ], [ %.0153, %388 ], [ %.0153, %387 ], [ %.0153, %384 ], [ %.0153, %381 ], [ %.0153, %379 ], [ %.0153, %378 ], [ %.0153, %368 ], [ %.0153, %358 ], [ 1, %357 ], [ %.0153, %350 ], [ %.0153, %346 ], [ 0, %345 ], [ %.0153, %344 ], [ %.0153, %333 ], [ %.0153, %323 ], [ %.0153, %322 ], [ %.0153, %321 ], [ %.0153, %310 ], [ %.0153, %300 ], [ %.0153, %299 ], [ %.0153, %297 ], [ %.0153, %296 ], [ %.0153, %270 ], [ %.0153, %260 ], [ %.0153, %259 ], [ %.0153, %249 ], [ %.0153, %239 ], [ %.0153, %231 ], [ %.0153, %229 ], [ %.0153, %217 ], [ %.0153, %207 ], [ %.0153, %206 ], [ %.0153, %205 ], [ %.0153, %203 ], [ %.0153, %187 ], [ %.0153, %177 ], [ %.0153, %173 ], [ %.0153, %172 ], [ %.0153, %162 ], [ %.0153, %152 ], [ %.0153, %148 ], [ %.0153, %147 ], [ %.0153, %137 ], [ %.0153, %127 ], [ %.0153, %126 ], [ %.0153, %115 ], [ %.0153, %105 ], [ %.0153, %95 ], [ %.0153, %91 ], [ %.0153, %90 ], [ %.0153, %88 ], [ %.0153, %87 ], [ %.0153, %85 ], [ %.0153, %84 ], [ %.0153, %83 ], [ %.0153, %69 ], [ %.0153, %59 ], [ %.0153, %54 ], [ %.0153, %51 ], [ %.0153, %49 ], [ %.0153, %37 ], [ %.0153, %27 ], [ %.0153, %26 ], [ %.0153, %22 ]
  %.0151.be = phi i32 [ %.0151, %21 ], [ %.0151, %567 ], [ %.0151, %565 ], [ %.0151, %564 ], [ %.0151, %563 ], [ %.0151, %562 ], [ %.0151, %561 ], [ %.0151, %559 ], [ %.0151, %557 ], [ %.0151, %540 ], [ %.0151, %539 ], [ %.0151, %538 ], [ %.0151, %537 ], [ %.0151, %536 ], [ %.0151, %535 ], [ %.0151, %533 ], [ %.0151, %528 ], [ %.0151, %527 ], [ %.0151, %516 ], [ %.0151, %506 ], [ %.0151, %505 ], [ %.0151, %504 ], [ %.0151, %493 ], [ %.0151, %483 ], [ %.0151, %481 ], [ %.0151, %480 ], [ %.0151, %479 ], [ %.0151, %472 ], [ %.0151, %470 ], [ %.0151, %468 ], [ %.0151, %452 ], [ %.0151, %442 ], [ %.0151, %440 ], [ %.0151, %438 ], [ %.0151, %427 ], [ %.0151, %417 ], [ %.0151, %413 ], [ %.0151, %412 ], [ %.0151, %410 ], [ %.0151, %398 ], [ %.0151, %388 ], [ %.0151, %387 ], [ %.0151, %384 ], [ %.0151, %381 ], [ %380, %379 ], [ %.0151, %378 ], [ %.0151, %368 ], [ %.0151, %358 ], [ %.0151, %357 ], [ %.0151, %350 ], [ %.0151, %346 ], [ 0, %345 ], [ %.0151, %344 ], [ %.0151, %333 ], [ %.0151, %323 ], [ %.0151, %322 ], [ %.0151, %321 ], [ %.0151, %310 ], [ %.0151, %300 ], [ %.0151, %299 ], [ %.0151, %297 ], [ %.0151, %296 ], [ %.0151, %270 ], [ %.0151, %260 ], [ %.0151, %259 ], [ %.0151, %249 ], [ %.0151, %239 ], [ %.0151, %231 ], [ %.0151, %229 ], [ %.0151, %217 ], [ %.0151, %207 ], [ %.0151, %206 ], [ %.0151, %205 ], [ %.0151, %203 ], [ %.0151, %187 ], [ %.0151, %177 ], [ %.0151, %173 ], [ %.0151, %172 ], [ %.0151, %162 ], [ %.0151, %152 ], [ %.0151, %148 ], [ %.0151, %147 ], [ %.0151, %137 ], [ %.0151, %127 ], [ %.0151, %126 ], [ %.0151, %115 ], [ %.0151, %105 ], [ %.0151, %95 ], [ %.0151, %91 ], [ %.0151, %90 ], [ %.0151, %88 ], [ %.0151, %87 ], [ %.0151, %85 ], [ %.0151, %84 ], [ %.0151, %83 ], [ %.0151, %69 ], [ %.0151, %59 ], [ %.0151, %54 ], [ %.0151, %51 ], [ %.0151, %49 ], [ %.0151, %37 ], [ %.0151, %27 ], [ %.0151, %26 ], [ %.0151, %22 ]
  %.0149.be = phi i32 [ %.0149, %21 ], [ %.0149, %567 ], [ %566, %565 ], [ %.0149, %564 ], [ %.0149, %563 ], [ %.0149, %562 ], [ %.0149, %561 ], [ %.0149, %559 ], [ %.0149, %557 ], [ %.0149, %540 ], [ %.0149, %539 ], [ %.0149, %538 ], [ %.0149, %537 ], [ %.0149, %536 ], [ %.0149, %535 ], [ %.0149, %533 ], [ %.0149, %528 ], [ %.0149, %527 ], [ %.0149, %516 ], [ %.0149, %506 ], [ %.0149, %505 ], [ %.0149, %504 ], [ %494, %493 ], [ %.0149, %483 ], [ %.0149, %481 ], [ %.0149, %480 ], [ %.0149, %479 ], [ %.0149, %472 ], [ %.0149, %470 ], [ %.0149, %468 ], [ %.0149, %452 ], [ %.0149, %442 ], [ %.0149, %440 ], [ %.0149, %438 ], [ %.0149, %427 ], [ %.0149, %417 ], [ %.0149, %413 ], [ %.0149, %412 ], [ %.0149, %410 ], [ %.0149, %398 ], [ %.0149, %388 ], [ 0, %387 ], [ %.0149, %384 ], [ %.0149, %381 ], [ %.0149, %379 ], [ %.0149, %378 ], [ %.0149, %368 ], [ %.0149, %358 ], [ %.0149, %357 ], [ %.0149, %350 ], [ %.0149, %346 ], [ %.0149, %345 ], [ %.0149, %344 ], [ %.0149, %333 ], [ %.0149, %323 ], [ %.0149, %322 ], [ %.0149, %321 ], [ %.0149, %310 ], [ %.0149, %300 ], [ %.0149, %299 ], [ %.0149, %297 ], [ %.0149, %296 ], [ %.0149, %270 ], [ %.0149, %260 ], [ %.0149, %259 ], [ %.0149, %249 ], [ %.0149, %239 ], [ %.0149, %231 ], [ %.0149, %229 ], [ %.0149, %217 ], [ %.0149, %207 ], [ %.0149, %206 ], [ %.0149, %205 ], [ %.0149, %203 ], [ %.0149, %187 ], [ %.0149, %177 ], [ %.0149, %173 ], [ %.0149, %172 ], [ %.0149, %162 ], [ %.0149, %152 ], [ %.0149, %148 ], [ %.0149, %147 ], [ %.0149, %137 ], [ %.0149, %127 ], [ %.0149, %126 ], [ %.0149, %115 ], [ %.0149, %105 ], [ %.0149, %95 ], [ %.0149, %91 ], [ %.0149, %90 ], [ %.0149, %88 ], [ %.0149, %87 ], [ %.0149, %85 ], [ %.0149, %84 ], [ %.0149, %83 ], [ %.0149, %69 ], [ %.0149, %59 ], [ %.0149, %54 ], [ %.0149, %51 ], [ %.0149, %49 ], [ %.0149, %37 ], [ %.0149, %27 ], [ %.0149, %26 ], [ %.0149, %22 ]
  %.0147.be = phi i32 [ %.0147, %21 ], [ %.0147, %567 ], [ %.0147, %565 ], [ %.0147, %564 ], [ %.0147, %563 ], [ %.0147, %562 ], [ %.0147, %561 ], [ %.0147, %559 ], [ %.0147, %557 ], [ %.0147, %540 ], [ %.0147, %539 ], [ %.0147, %538 ], [ %.0147, %537 ], [ %.0147, %536 ], [ %.0147, %535 ], [ %.0147, %533 ], [ %.0147, %528 ], [ %.0147, %527 ], [ %.0147, %516 ], [ %.0147, %506 ], [ %.0147, %505 ], [ %.0147, %504 ], [ %.0147, %493 ], [ %.0147, %483 ], [ %.0147, %481 ], [ %.neg, %480 ], [ %.0147, %479 ], [ %.0147, %472 ], [ %.0147, %470 ], [ %.0147, %468 ], [ %.0147, %452 ], [ %.0147, %442 ], [ %.0147, %440 ], [ %.0147, %438 ], [ %.0147, %427 ], [ %.0147, %417 ], [ %.0147, %413 ], [ 0, %412 ], [ %.0147, %410 ], [ %.0147, %398 ], [ %.0147, %388 ], [ %.0147, %387 ], [ %.0147, %384 ], [ %.0147, %381 ], [ %.0147, %379 ], [ %.0147, %378 ], [ %.0147, %368 ], [ %.0147, %358 ], [ %.0147, %357 ], [ %.0147, %350 ], [ %.0147, %346 ], [ %.0147, %345 ], [ %.0147, %344 ], [ %.0147, %333 ], [ %.0147, %323 ], [ %.0147, %322 ], [ %.0147, %321 ], [ %.0147, %310 ], [ %.0147, %300 ], [ %.0147, %299 ], [ %.0147, %297 ], [ %.0147, %296 ], [ %.0147, %270 ], [ %.0147, %260 ], [ %.0147, %259 ], [ %.0147, %249 ], [ %.0147, %239 ], [ %.0147, %231 ], [ %.0147, %229 ], [ %.0147, %217 ], [ %.0147, %207 ], [ %.0147, %206 ], [ %.0147, %205 ], [ %.0147, %203 ], [ %.0147, %187 ], [ %.0147, %177 ], [ %.0147, %173 ], [ %.0147, %172 ], [ %.0147, %162 ], [ %.0147, %152 ], [ %.0147, %148 ], [ %.0147, %147 ], [ %.0147, %137 ], [ %.0147, %127 ], [ %.0147, %126 ], [ %.0147, %115 ], [ %.0147, %105 ], [ %.0147, %95 ], [ %.0147, %91 ], [ %.0147, %90 ], [ %.0147, %88 ], [ %.0147, %87 ], [ %.0147, %85 ], [ %.0147, %84 ], [ %.0147, %83 ], [ %.0147, %69 ], [ %.0147, %59 ], [ %.0147, %54 ], [ %.0147, %51 ], [ %.0147, %49 ], [ %.0147, %37 ], [ %.0147, %27 ], [ %.0147, %26 ], [ %.0147, %22 ]
  %.0.be = phi i32 [ %.0, %21 ], [ 1012837546, %567 ], [ 859103426, %565 ], [ -2127756794, %564 ], [ 1284547653, %563 ], [ -2062405108, %562 ], [ -1223923621, %561 ], [ 1318506898, %559 ], [ 980130366, %557 ], [ -232241736, %540 ], [ -1520081658, %539 ], [ 574394849, %538 ], [ -882249592, %537 ], [ 1238070173, %536 ], [ -1235943934, %535 ], [ 933020924, %533 ], [ -1424705255, %528 ], [ 630061299, %527 ], [ %525, %516 ], [ %515, %506 ], [ 13468046, %505 ], [ -519560031, %504 ], [ %503, %493 ], [ %492, %483 ], [ 1494103208, %481 ], [ -1100969102, %480 ], [ -325209776, %479 ], [ 1525987943, %472 ], [ 1525987943, %470 ], [ %469, %468 ], [ %467, %452 ], [ %451, %442 ], [ 902106741, %440 ], [ %439, %438 ], [ %437, %427 ], [ %426, %417 ], [ %416, %413 ], [ -1100969102, %412 ], [ %411, %410 ], [ %409, %398 ], [ %397, %388 ], [ -519560031, %387 ], [ 13468046, %384 ], [ %383, %381 ], [ 1479701228, %379 ], [ -19106912, %378 ], [ %377, %368 ], [ %367, %358 ], [ 1173203951, %357 ], [ %356, %350 ], [ %349, %346 ], [ 1479701228, %345 ], [ 1963647363, %344 ], [ %343, %333 ], [ %332, %323 ], [ -565742060, %322 ], [ -202258776, %321 ], [ %320, %310 ], [ %309, %300 ], [ 141751101, %299 ], [ 52439889, %297 ], [ -418912824, %296 ], [ %295, %270 ], [ %269, %260 ], [ -418912824, %259 ], [ %258, %249 ], [ %248, %239 ], [ %238, %231 ], [ %230, %229 ], [ %228, %217 ], [ %216, %207 ], [ 52439889, %206 ], [ 141751101, %205 ], [ %204, %203 ], [ %202, %187 ], [ %186, %177 ], [ %176, %173 ], [ -202258776, %172 ], [ %171, %162 ], [ %161, %152 ], [ %151, %148 ], [ 1963647363, %147 ], [ %146, %137 ], [ %136, %127 ], [ 1248138649, %126 ], [ %125, %115 ], [ %114, %105 ], [ -1048045888, %95 ], [ %94, %91 ], [ 1248138649, %90 ], [ -2137030408, %88 ], [ -410961826, %87 ], [ 13916480, %85 ], [ -1846838399, %84 ], [ 837436893, %83 ], [ %82, %69 ], [ %68, %59 ], [ 837436893, %54 ], [ %53, %51 ], [ %50, %49 ], [ %48, %37 ], [ %36, %27 ], [ 13916480, %26 ], [ %25, %22 ]
  br label %21

22:                                               ; preds = %21
  %23 = load i32, i32* %9, align 4
  %24 = icmp slt i32 %.0165, %23
  %25 = select i1 %24, i32 -1895237454, i32 -394077589
  br label %.backedge

26:                                               ; preds = %21
  br label %.backedge

27:                                               ; preds = %21
  %28 = load i32, i32* @x.5, align 4
  %29 = load i32, i32* @y.6, align 4
  %30 = add i32 %28, -1
  %31 = mul i32 %30, %28
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %34, %33
  %36 = select i1 %35, i32 630061299, i32 1527472530
  br label %.backedge

37:                                               ; preds = %21
  %38 = load i32, i32* %9, align 4
  %39 = icmp slt i32 %.0163, %38
  store i1 %39, i1* %7, align 1
  %40 = load i32, i32* @x.5, align 4
  %41 = load i32, i32* @y.6, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 -1785864019, i32 1527472530
  br label %.backedge

49:                                               ; preds = %21
  %.0..0..0.140 = load volatile i1, i1* %7, align 1
  %50 = select i1 %.0..0..0.140, i32 2143241262, i32 1946206835
  br label %.backedge

51:                                               ; preds = %21
  %52 = icmp eq i32 %.0165, %.0163
  %53 = select i1 %52, i32 594184548, i32 1590211580
  br label %.backedge

54:                                               ; preds = %21
  %55 = sext i32 %.0165 to i64
  %.0..0..0.78 = load volatile i64, i64* %8, align 8
  %56 = mul nsw i64 %.0..0..0.78, %55
  %57 = sext i32 %.0163 to i64
  %.idx184 = add nsw i64 %56, %57
  %58 = getelementptr inbounds i64, i64* %20, i64 %.idx184
  store i64 0, i64* %58, align 8
  br label %.backedge

59:                                               ; preds = %21
  %60 = load i32, i32* @x.5, align 4
  %61 = load i32, i32* @y.6, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -1424705255, i32 1128697032
  br label %.backedge

69:                                               ; preds = %21
  %70 = sext i32 %.0165 to i64
  %.0..0..0.79 = load volatile i64, i64* %8, align 8
  %71 = mul nsw i64 %.0..0..0.79, %70
  %72 = sext i32 %.0163 to i64
  %.idx183 = add nsw i64 %71, %72
  %73 = getelementptr inbounds i64, i64* %20, i64 %.idx183
  store i64 4294967296, i64* %73, align 8
  %74 = load i32, i32* @x.5, align 4
  %75 = load i32, i32* @y.6, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 -39105339, i32 1128697032
  br label %.backedge

83:                                               ; preds = %21
  br label %.backedge

84:                                               ; preds = %21
  br label %.backedge

85:                                               ; preds = %21
  %86 = add i32 %.0163, 1
  br label %.backedge

87:                                               ; preds = %21
  br label %.backedge

88:                                               ; preds = %21
  %89 = add i32 %.0165, 1
  br label %.backedge

90:                                               ; preds = %21
  br label %.backedge

91:                                               ; preds = %21
  %92 = load i32, i32* %10, align 4
  %93 = icmp slt i32 %.0161, %92
  %94 = select i1 %93, i32 2060052629, i32 1195134292
  br label %.backedge

95:                                               ; preds = %21
  %96 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %11, i32* nonnull %12, i32* nonnull %13)
  %97 = load i32, i32* %13, align 4
  %98 = sext i32 %97 to i64
  %99 = load i32, i32* %11, align 4
  %100 = sext i32 %99 to i64
  %.0..0..0.80 = load volatile i64, i64* %8, align 8
  %101 = mul nsw i64 %.0..0..0.80, %100
  %102 = load i32, i32* %12, align 4
  %103 = sext i32 %102 to i64
  %.idx182 = add nsw i64 %101, %103
  %104 = getelementptr inbounds i64, i64* %20, i64 %.idx182
  store i64 %98, i64* %104, align 8
  br label %.backedge

105:                                              ; preds = %21
  %106 = load i32, i32* @x.5, align 4
  %107 = load i32, i32* @y.6, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 933020924, i32 630499379
  br label %.backedge

115:                                              ; preds = %21
  %116 = add i32 %.0161, 1
  %117 = load i32, i32* @x.5, align 4
  %118 = load i32, i32* @y.6, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 -1033960917, i32 630499379
  br label %.backedge

126:                                              ; preds = %21
  br label %.backedge

127:                                              ; preds = %21
  %128 = load i32, i32* @x.5, align 4
  %129 = load i32, i32* @y.6, align 4
  %130 = add i32 %128, -1
  %131 = mul i32 %130, %128
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %134, %133
  %136 = select i1 %135, i32 -1235943934, i32 -752957487
  br label %.backedge

137:                                              ; preds = %21
  %138 = load i32, i32* @x.5, align 4
  %139 = load i32, i32* @y.6, align 4
  %140 = add i32 %138, -1
  %141 = mul i32 %140, %138
  %142 = and i32 %141, 1
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %144, %143
  %146 = select i1 %145, i32 -543182195, i32 -752957487
  br label %.backedge

147:                                              ; preds = %21
  br label %.backedge

148:                                              ; preds = %21
  %149 = load i32, i32* %9, align 4
  %150 = icmp slt i32 %.0159, %149
  %151 = select i1 %150, i32 -1374401101, i32 -1071213076
  br label %.backedge

152:                                              ; preds = %21
  %153 = load i32, i32* @x.5, align 4
  %154 = load i32, i32* @y.6, align 4
  %155 = add i32 %153, -1
  %156 = mul i32 %155, %153
  %157 = and i32 %156, 1
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %159, %158
  %161 = select i1 %160, i32 1238070173, i32 -1668396840
  br label %.backedge

162:                                              ; preds = %21
  %163 = load i32, i32* @x.5, align 4
  %164 = load i32, i32* @y.6, align 4
  %165 = add i32 %163, -1
  %166 = mul i32 %165, %163
  %167 = and i32 %166, 1
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %169, %168
  %171 = select i1 %170, i32 -1207592537, i32 -1668396840
  br label %.backedge

172:                                              ; preds = %21
  br label %.backedge

173:                                              ; preds = %21
  %174 = load i32, i32* %9, align 4
  %175 = icmp slt i32 %.0157, %174
  %176 = select i1 %175, i32 -576532407, i32 -2062228739
  br label %.backedge

177:                                              ; preds = %21
  %178 = load i32, i32* @x.5, align 4
  %179 = load i32, i32* @y.6, align 4
  %180 = add i32 %178, -1
  %181 = mul i32 %180, %178
  %182 = and i32 %181, 1
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %184, %183
  %186 = select i1 %185, i32 -882249592, i32 -563935525
  br label %.backedge

187:                                              ; preds = %21
  %188 = sext i32 %.0157 to i64
  %.0..0..0.81 = load volatile i64, i64* %8, align 8
  %189 = mul nsw i64 %.0..0..0.81, %188
  %190 = sext i32 %.0159 to i64
  %.idx181 = add nsw i64 %189, %190
  %191 = getelementptr inbounds i64, i64* %20, i64 %.idx181
  %192 = load i64, i64* %191, align 8
  %193 = icmp eq i64 %192, 4294967296
  store i1 %193, i1* %6, align 1
  %194 = load i32, i32* @x.5, align 4
  %195 = load i32, i32* @y.6, align 4
  %196 = add i32 %194, -1
  %197 = mul i32 %196, %194
  %198 = and i32 %197, 1
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %200, %199
  %202 = select i1 %201, i32 387728873, i32 -563935525
  br label %.backedge

203:                                              ; preds = %21
  %.0..0..0.141 = load volatile i1, i1* %6, align 1
  %204 = select i1 %.0..0..0.141, i32 2013454269, i32 1189668910
  br label %.backedge

205:                                              ; preds = %21
  br label %.backedge

206:                                              ; preds = %21
  br label %.backedge

207:                                              ; preds = %21
  %208 = load i32, i32* @x.5, align 4
  %209 = load i32, i32* @y.6, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 574394849, i32 718250125
  br label %.backedge

217:                                              ; preds = %21
  %218 = load i32, i32* %9, align 4
  %219 = icmp slt i32 %.0155, %218
  store i1 %219, i1* %5, align 1
  %220 = load i32, i32* @x.5, align 4
  %221 = load i32, i32* @y.6, align 4
  %222 = add i32 %220, -1
  %223 = mul i32 %222, %220
  %224 = and i32 %223, 1
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %226, %225
  %228 = select i1 %227, i32 -1460416324, i32 718250125
  br label %.backedge

229:                                              ; preds = %21
  %.0..0..0.142 = load volatile i1, i1* %5, align 1
  %230 = select i1 %.0..0..0.142, i32 -903711642, i32 -1940548192
  br label %.backedge

231:                                              ; preds = %21
  %232 = sext i32 %.0159 to i64
  %.0..0..0.82 = load volatile i64, i64* %8, align 8
  %233 = mul nsw i64 %.0..0..0.82, %232
  %234 = sext i32 %.0155 to i64
  %.idx180 = add nsw i64 %233, %234
  %235 = getelementptr inbounds i64, i64* %20, i64 %.idx180
  %236 = load i64, i64* %235, align 8
  %237 = icmp eq i64 %236, 4294967296
  %238 = select i1 %237, i32 -580230210, i32 1020761439
  br label %.backedge

239:                                              ; preds = %21
  %240 = load i32, i32* @x.5, align 4
  %241 = load i32, i32* @y.6, align 4
  %242 = add i32 %240, -1
  %243 = mul i32 %242, %240
  %244 = and i32 %243, 1
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %246, %245
  %248 = select i1 %247, i32 -1520081658, i32 -1062757161
  br label %.backedge

249:                                              ; preds = %21
  %250 = load i32, i32* @x.5, align 4
  %251 = load i32, i32* @y.6, align 4
  %252 = add i32 %250, -1
  %253 = mul i32 %252, %250
  %254 = and i32 %253, 1
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %256, %255
  %258 = select i1 %257, i32 546392006, i32 -1062757161
  br label %.backedge

259:                                              ; preds = %21
  br label %.backedge

260:                                              ; preds = %21
  %261 = load i32, i32* @x.5, align 4
  %262 = load i32, i32* @y.6, align 4
  %263 = add i32 %261, -1
  %264 = mul i32 %263, %261
  %265 = and i32 %264, 1
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %267, %266
  %269 = select i1 %268, i32 -232241736, i32 2129313702
  br label %.backedge

270:                                              ; preds = %21
  %271 = sext i32 %.0157 to i64
  %.0..0..0.83 = load volatile i64, i64* %8, align 8
  %272 = mul nsw i64 %.0..0..0.83, %271
  %273 = sext i32 %.0155 to i64
  %.idx176 = add nsw i64 %272, %273
  %274 = getelementptr inbounds i64, i64* %20, i64 %.idx176
  %.0..0..0.84 = load volatile i64, i64* %8, align 8
  %275 = mul nsw i64 %.0..0..0.84, %271
  %276 = sext i32 %.0159 to i64
  %.idx177 = add nsw i64 %275, %276
  %277 = getelementptr inbounds i64, i64* %20, i64 %.idx177
  %278 = load i64, i64* %277, align 8
  %.0..0..0.85 = load volatile i64, i64* %8, align 8
  %279 = mul nsw i64 %.0..0..0.85, %276
  %.idx178 = add nsw i64 %279, %273
  %280 = getelementptr inbounds i64, i64* %20, i64 %.idx178
  %281 = load i64, i64* %280, align 8
  %282 = add i64 %281, %278
  store i64 %282, i64* %14, align 8
  %283 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %274, i64* nonnull dereferenceable(8) %14)
  %284 = load i64, i64* %283, align 8
  %.0..0..0.86 = load volatile i64, i64* %8, align 8
  %285 = mul nsw i64 %.0..0..0.86, %271
  %.idx179 = add nsw i64 %285, %273
  %286 = getelementptr inbounds i64, i64* %20, i64 %.idx179
  store i64 %284, i64* %286, align 8
  %287 = load i32, i32* @x.5, align 4
  %288 = load i32, i32* @y.6, align 4
  %289 = add i32 %287, -1
  %290 = mul i32 %289, %287
  %291 = and i32 %290, 1
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %293, %292
  %295 = select i1 %294, i32 -783060289, i32 2129313702
  br label %.backedge

296:                                              ; preds = %21
  br label %.backedge

297:                                              ; preds = %21
  %298 = add i32 %.0155, 1
  br label %.backedge

299:                                              ; preds = %21
  br label %.backedge

300:                                              ; preds = %21
  %301 = load i32, i32* @x.5, align 4
  %302 = load i32, i32* @y.6, align 4
  %303 = add i32 %301, -1
  %304 = mul i32 %303, %301
  %305 = and i32 %304, 1
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %307, %306
  %309 = select i1 %308, i32 980130366, i32 2075576730
  br label %.backedge

310:                                              ; preds = %21
  %311 = add i32 %.0157, 1
  %312 = load i32, i32* @x.5, align 4
  %313 = load i32, i32* @y.6, align 4
  %314 = add i32 %312, -1
  %315 = mul i32 %314, %312
  %316 = and i32 %315, 1
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %318, %317
  %320 = select i1 %319, i32 1060506107, i32 2075576730
  br label %.backedge

321:                                              ; preds = %21
  br label %.backedge

322:                                              ; preds = %21
  br label %.backedge

323:                                              ; preds = %21
  %324 = load i32, i32* @x.5, align 4
  %325 = load i32, i32* @y.6, align 4
  %326 = add i32 %324, -1
  %327 = mul i32 %326, %324
  %328 = and i32 %327, 1
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %330, %329
  %332 = select i1 %331, i32 1318506898, i32 355549717
  br label %.backedge

333:                                              ; preds = %21
  %334 = add i32 %.0159, 1
  %335 = load i32, i32* @x.5, align 4
  %336 = load i32, i32* @y.6, align 4
  %337 = add i32 %335, -1
  %338 = mul i32 %337, %335
  %339 = and i32 %338, 1
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %341, %340
  %343 = select i1 %342, i32 -1090473027, i32 355549717
  br label %.backedge

344:                                              ; preds = %21
  br label %.backedge

345:                                              ; preds = %21
  br label %.backedge

346:                                              ; preds = %21
  %347 = load i32, i32* %9, align 4
  %348 = icmp slt i32 %.0151, %347
  %349 = select i1 %348, i32 129823921, i32 1173203951
  br label %.backedge

350:                                              ; preds = %21
  %351 = sext i32 %.0151 to i64
  %.0..0..0.87 = load volatile i64, i64* %8, align 8
  %352 = mul nsw i64 %.0..0..0.87, %351
  %.idx175 = add nsw i64 %352, %351
  %353 = getelementptr inbounds i64, i64* %20, i64 %.idx175
  %354 = load i64, i64* %353, align 8
  %355 = icmp slt i64 %354, 0
  %356 = select i1 %355, i32 -135449795, i32 123406608
  br label %.backedge

357:                                              ; preds = %21
  br label %.backedge

358:                                              ; preds = %21
  %359 = load i32, i32* @x.5, align 4
  %360 = load i32, i32* @y.6, align 4
  %361 = add i32 %359, -1
  %362 = mul i32 %361, %359
  %363 = and i32 %362, 1
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %365, %364
  %367 = select i1 %366, i32 -1223923621, i32 -1318363557
  br label %.backedge

368:                                              ; preds = %21
  %369 = load i32, i32* @x.5, align 4
  %370 = load i32, i32* @y.6, align 4
  %371 = add i32 %369, -1
  %372 = mul i32 %371, %369
  %373 = and i32 %372, 1
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %375, %374
  %377 = select i1 %376, i32 -693725417, i32 -1318363557
  br label %.backedge

378:                                              ; preds = %21
  br label %.backedge

379:                                              ; preds = %21
  %380 = add i32 %.0151, 1
  br label %.backedge

381:                                              ; preds = %21
  %382 = and i8 %.0153, 1
  %.not = icmp eq i8 %382, 0
  %383 = select i1 %.not, i32 -569962043, i32 827180426
  br label %.backedge

384:                                              ; preds = %21
  %385 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  %386 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %385, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

387:                                              ; preds = %21
  br label %.backedge

388:                                              ; preds = %21
  %389 = load i32, i32* @x.5, align 4
  %390 = load i32, i32* @y.6, align 4
  %391 = add i32 %389, -1
  %392 = mul i32 %391, %389
  %393 = and i32 %392, 1
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %395, %394
  %397 = select i1 %396, i32 -2062405108, i32 -1648460507
  br label %.backedge

398:                                              ; preds = %21
  %399 = load i32, i32* %9, align 4
  %400 = icmp slt i32 %.0149, %399
  store i1 %400, i1* %4, align 1
  %401 = load i32, i32* @x.5, align 4
  %402 = load i32, i32* @y.6, align 4
  %403 = add i32 %401, -1
  %404 = mul i32 %403, %401
  %405 = and i32 %404, 1
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %407, %406
  %409 = select i1 %408, i32 1370739989, i32 -1648460507
  br label %.backedge

410:                                              ; preds = %21
  %.0..0..0.143 = load volatile i1, i1* %4, align 1
  %411 = select i1 %.0..0..0.143, i32 1119167495, i32 1696430729
  br label %.backedge

412:                                              ; preds = %21
  br label %.backedge

413:                                              ; preds = %21
  %414 = load i32, i32* %9, align 4
  %415 = icmp slt i32 %.0147, %414
  %416 = select i1 %415, i32 217337641, i32 -301540238
  br label %.backedge

417:                                              ; preds = %21
  %418 = load i32, i32* @x.5, align 4
  %419 = load i32, i32* @y.6, align 4
  %420 = add i32 %418, -1
  %421 = mul i32 %420, %418
  %422 = and i32 %421, 1
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %424, %423
  %426 = select i1 %425, i32 1284547653, i32 659573884
  br label %.backedge

427:                                              ; preds = %21
  %428 = icmp ne i32 %.0147, 0
  store i1 %428, i1* %3, align 1
  %429 = load i32, i32* @x.5, align 4
  %430 = load i32, i32* @y.6, align 4
  %431 = add i32 %429, -1
  %432 = mul i32 %431, %429
  %433 = and i32 %432, 1
  %434 = icmp eq i32 %433, 0
  %435 = icmp slt i32 %430, 10
  %436 = or i1 %435, %434
  %437 = select i1 %436, i32 -686081975, i32 659573884
  br label %.backedge

438:                                              ; preds = %21
  %.0..0..0.144 = load volatile i1, i1* %3, align 1
  %439 = select i1 %.0..0..0.144, i32 -927180507, i32 902106741
  br label %.backedge

440:                                              ; preds = %21
  %441 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  br label %.backedge

442:                                              ; preds = %21
  %443 = load i32, i32* @x.5, align 4
  %444 = load i32, i32* @y.6, align 4
  %445 = add i32 %443, -1
  %446 = mul i32 %445, %443
  %447 = and i32 %446, 1
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %449, %448
  %451 = select i1 %450, i32 -2127756794, i32 364329049
  br label %.backedge

452:                                              ; preds = %21
  %453 = sext i32 %.0149 to i64
  %.0..0..0.88 = load volatile i64, i64* %8, align 8
  %454 = mul nsw i64 %.0..0..0.88, %453
  %455 = sext i32 %.0147 to i64
  %.idx174 = add nsw i64 %454, %455
  %456 = getelementptr inbounds i64, i64* %20, i64 %.idx174
  %457 = load i64, i64* %456, align 8
  %458 = icmp eq i64 %457, 4294967296
  store i1 %458, i1* %2, align 1
  %459 = load i32, i32* @x.5, align 4
  %460 = load i32, i32* @y.6, align 4
  %461 = add i32 %459, -1
  %462 = mul i32 %461, %459
  %463 = and i32 %462, 1
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %465, %464
  %467 = select i1 %466, i32 377237626, i32 364329049
  br label %.backedge

468:                                              ; preds = %21
  %.0..0..0.145 = load volatile i1, i1* %2, align 1
  %469 = select i1 %.0..0..0.145, i32 1163905635, i32 -341987511
  br label %.backedge

470:                                              ; preds = %21
  %471 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  br label %.backedge

472:                                              ; preds = %21
  %473 = sext i32 %.0149 to i64
  %.0..0..0.89 = load volatile i64, i64* %8, align 8
  %474 = mul nsw i64 %.0..0..0.89, %473
  %475 = sext i32 %.0147 to i64
  %.idx173 = add nsw i64 %474, %475
  %476 = getelementptr inbounds i64, i64* %20, i64 %.idx173
  %477 = load i64, i64* %476, align 8
  %478 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %477)
  br label %.backedge

479:                                              ; preds = %21
  br label %.backedge

480:                                              ; preds = %21
  %.neg = add i32 %.0147, 1
  br label %.backedge

481:                                              ; preds = %21
  %482 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

483:                                              ; preds = %21
  %484 = load i32, i32* @x.5, align 4
  %485 = load i32, i32* @y.6, align 4
  %486 = add i32 %484, -1
  %487 = mul i32 %486, %484
  %488 = and i32 %487, 1
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %490, %489
  %492 = select i1 %491, i32 859103426, i32 1544124586
  br label %.backedge

493:                                              ; preds = %21
  %494 = add i32 %.0149, 1
  %495 = load i32, i32* @x.5, align 4
  %496 = load i32, i32* @y.6, align 4
  %497 = add i32 %495, -1
  %498 = mul i32 %497, %495
  %499 = and i32 %498, 1
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %501, %500
  %503 = select i1 %502, i32 -1654288259, i32 1544124586
  br label %.backedge

504:                                              ; preds = %21
  br label %.backedge

505:                                              ; preds = %21
  br label %.backedge

506:                                              ; preds = %21
  %507 = load i32, i32* @x.5, align 4
  %508 = load i32, i32* @y.6, align 4
  %509 = add i32 %507, -1
  %510 = mul i32 %509, %507
  %511 = and i32 %510, 1
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %513, %512
  %515 = select i1 %514, i32 1012837546, i32 909254807
  br label %.backedge

516:                                              ; preds = %21
  call void @llvm.stackrestore(i8* %18)
  store i32 0, i32* %1, align 4
  %517 = load i32, i32* @x.5, align 4
  %518 = load i32, i32* @y.6, align 4
  %519 = add i32 %517, -1
  %520 = mul i32 %519, %517
  %521 = and i32 %520, 1
  %522 = icmp eq i32 %521, 0
  %523 = icmp slt i32 %518, 10
  %524 = or i1 %523, %522
  %525 = select i1 %524, i32 2080690567, i32 909254807
  br label %.backedge

526:                                              ; preds = %21
  %.0..0..0.146 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.146

527:                                              ; preds = %21
  br label %.backedge

528:                                              ; preds = %21
  %529 = sext i32 %.0165 to i64
  %.0..0..0.90 = load volatile i64, i64* %8, align 8
  %.0..0..0.91 = load volatile i64, i64* %8, align 8
  %.0..0..0.92 = load volatile i64, i64* %8, align 8
  %.0..0..0.93 = load volatile i64, i64* %8, align 8
  %.0..0..0.94 = load volatile i64, i64* %8, align 8
  %.0..0..0.95 = load volatile i64, i64* %8, align 8
  %.0..0..0.96 = load volatile i64, i64* %8, align 8
  %.0..0..0.97 = load volatile i64, i64* %8, align 8
  %.0..0..0.98 = load volatile i64, i64* %8, align 8
  %.0..0..0.99 = load volatile i64, i64* %8, align 8
  %530 = mul nsw i64 %.0..0..0.99, %529
  %531 = sext i32 %.0163 to i64
  %.idx172 = add nsw i64 %530, %531
  %532 = getelementptr inbounds i64, i64* %20, i64 %.idx172
  store i64 4294967296, i64* %532, align 8
  br label %.backedge

533:                                              ; preds = %21
  %534 = add i32 %.0161, 1
  br label %.backedge

535:                                              ; preds = %21
  br label %.backedge

536:                                              ; preds = %21
  br label %.backedge

537:                                              ; preds = %21
  %.0..0..0.100 = load volatile i64, i64* %8, align 8
  %.0..0..0.101 = load volatile i64, i64* %8, align 8
  %.0..0..0.102 = load volatile i64, i64* %8, align 8
  br label %.backedge

538:                                              ; preds = %21
  br label %.backedge

539:                                              ; preds = %21
  br label %.backedge

540:                                              ; preds = %21
  %541 = sext i32 %.0157 to i64
  %.0..0..0.103 = load volatile i64, i64* %8, align 8
  %.0..0..0.104 = load volatile i64, i64* %8, align 8
  %.0..0..0.105 = load volatile i64, i64* %8, align 8
  %.0..0..0.106 = load volatile i64, i64* %8, align 8
  %542 = mul nsw i64 %.0..0..0.106, %541
  %543 = sext i32 %.0155 to i64
  %.idx = add nsw i64 %542, %543
  %544 = getelementptr inbounds i64, i64* %20, i64 %.idx
  %.0..0..0.107 = load volatile i64, i64* %8, align 8
  %.0..0..0.108 = load volatile i64, i64* %8, align 8
  %.0..0..0.109 = load volatile i64, i64* %8, align 8
  %.0..0..0.110 = load volatile i64, i64* %8, align 8
  %.0..0..0.111 = load volatile i64, i64* %8, align 8
  %.0..0..0.112 = load volatile i64, i64* %8, align 8
  %.0..0..0.113 = load volatile i64, i64* %8, align 8
  %545 = mul nsw i64 %.0..0..0.113, %541
  %546 = sext i32 %.0159 to i64
  %.idx169 = add nsw i64 %545, %546
  %547 = getelementptr inbounds i64, i64* %20, i64 %.idx169
  %548 = load i64, i64* %547, align 8
  %.0..0..0.114 = load volatile i64, i64* %8, align 8
  %.0..0..0.115 = load volatile i64, i64* %8, align 8
  %.0..0..0.116 = load volatile i64, i64* %8, align 8
  %.0..0..0.117 = load volatile i64, i64* %8, align 8
  %.0..0..0.118 = load volatile i64, i64* %8, align 8
  %.0..0..0.119 = load volatile i64, i64* %8, align 8
  %.0..0..0.120 = load volatile i64, i64* %8, align 8
  %.0..0..0.121 = load volatile i64, i64* %8, align 8
  %.0..0..0.122 = load volatile i64, i64* %8, align 8
  %.0..0..0.123 = load volatile i64, i64* %8, align 8
  %549 = mul nsw i64 %.0..0..0.123, %546
  %.idx170 = add nsw i64 %549, %543
  %550 = getelementptr inbounds i64, i64* %20, i64 %.idx170
  %551 = load i64, i64* %550, align 8
  %552 = add i64 %551, %548
  store i64 %552, i64* %14, align 8
  %553 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %544, i64* nonnull dereferenceable(8) %14)
  %554 = load i64, i64* %553, align 8
  %.0..0..0.124 = load volatile i64, i64* %8, align 8
  %.0..0..0.125 = load volatile i64, i64* %8, align 8
  %.0..0..0.126 = load volatile i64, i64* %8, align 8
  %.0..0..0.127 = load volatile i64, i64* %8, align 8
  %.0..0..0.128 = load volatile i64, i64* %8, align 8
  %.0..0..0.129 = load volatile i64, i64* %8, align 8
  %.0..0..0.130 = load volatile i64, i64* %8, align 8
  %555 = mul nsw i64 %.0..0..0.130, %541
  %.idx171 = add nsw i64 %555, %543
  %556 = getelementptr inbounds i64, i64* %20, i64 %.idx171
  store i64 %554, i64* %556, align 8
  br label %.backedge

557:                                              ; preds = %21
  %558 = add i32 %.0157, 1
  br label %.backedge

559:                                              ; preds = %21
  %560 = add i32 %.0159, 1
  br label %.backedge

561:                                              ; preds = %21
  br label %.backedge

562:                                              ; preds = %21
  br label %.backedge

563:                                              ; preds = %21
  br label %.backedge

564:                                              ; preds = %21
  %.0..0..0.131 = load volatile i64, i64* %8, align 8
  %.0..0..0.132 = load volatile i64, i64* %8, align 8
  %.0..0..0.133 = load volatile i64, i64* %8, align 8
  %.0..0..0.134 = load volatile i64, i64* %8, align 8
  %.0..0..0.135 = load volatile i64, i64* %8, align 8
  %.0..0..0.136 = load volatile i64, i64* %8, align 8
  %.0..0..0.137 = load volatile i64, i64* %8, align 8
  %.0..0..0.138 = load volatile i64, i64* %8, align 8
  %.0..0..0.139 = load volatile i64, i64* %8, align 8
  br label %.backedge

565:                                              ; preds = %21
  %566 = add i32 %.0149, 1
  br label %.backedge

567:                                              ; preds = %21
  call void @llvm.stackrestore(i8* %18)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #7 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = load i64, i64* %1, align 8
  store i64 %6, i64* %5, align 8
  %7 = load i64, i64* %0, align 8
  store i64 %7, i64* %4, align 8
  %8 = load i32, i32* @x.7, align 4
  %9 = load i32, i32* @y.8, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 -1578649841, i32 -672413736
  %17 = select i1 %15, i32 1754289769, i32 -672413736
  br label %.outer

.outer:                                           ; preds = %18, %2
  %.09.ph = phi i64* [ undef, %2 ], [ %.09.ph14, %18 ]
  %.0.ph = phi i32 [ -1723743953, %2 ], [ %16, %18 ]
  br label %.outer13

.outer13:                                         ; preds = %.outer13.backedge, %.outer
  %.09.ph14 = phi i64* [ %.09.ph, %.outer ], [ %.09.ph14.be, %.outer13.backedge ]
  %.0.ph15 = phi i32 [ %.0.ph, %.outer ], [ 545366727, %.outer13.backedge ]
  br label %.outer16

.outer16:                                         ; preds = %.outer16.backedge, %.outer13
  %.0.ph17 = phi i32 [ %.0.ph15, %.outer13 ], [ %.0.ph17.be, %.outer16.backedge ]
  br label %18

18:                                               ; preds = %.outer16, %18
  switch i32 %.0.ph17, label %18 [
    i32 -1723743953, label %19
    i32 -10362653, label %.outer13.backedge
    i32 1445845560, label %22
    i32 545366727, label %.outer16.backedge
    i32 1754289769, label %.outer
    i32 -1578649841, label %23
    i32 -672413736, label %24
  ]

19:                                               ; preds = %18
  %.0..0..0.6 = load volatile i64, i64* %5, align 8
  %.0..0..0.7 = load volatile i64, i64* %4, align 8
  %20 = icmp slt i64 %.0..0..0.6, %.0..0..0.7
  %21 = select i1 %20, i32 -10362653, i32 1445845560
  br label %.outer16.backedge

22:                                               ; preds = %18
  br label %.outer13.backedge

.outer13.backedge:                                ; preds = %18, %22
  %.09.ph14.be = phi i64* [ %0, %22 ], [ %1, %18 ]
  br label %.outer13

23:                                               ; preds = %18
  store i64* %.09.ph, i64** %3, align 8
  %.0..0..0.8 = load volatile i64*, i64** %3, align 8
  ret i64* %.0..0..0.8

24:                                               ; preds = %18
  br label %.outer16.backedge

.outer16.backedge:                                ; preds = %18, %24, %19
  %.0.ph17.be = phi i32 [ %21, %19 ], [ 1754289769, %24 ], [ %17, %18 ]
  br label %.outer16
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s077999011.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { mustprogress nofree nosync nounwind willreturn }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
