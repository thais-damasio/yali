; ModuleID = 'build_ollvm/programs/p02363/s818053369.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s818053369.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@.str = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s818053369.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@str = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [100 x [100 x i64]], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7)
  br label %14

14:                                               ; preds = %.backedge, %0
  %.083 = phi i32 [ 0, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i32 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i32 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i32 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i32 [ undef, %0 ], [ %.067.be, %.backedge ]
  %.0 = phi i32 [ 1626035800, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1626035800, label %15
    i32 -197032381, label %19
    i32 -409230792, label %29
    i32 1719516738, label %39
    i32 1689325297, label %40
    i32 1141977518, label %44
    i32 845997913, label %47
    i32 -1348483951, label %51
    i32 -117901949, label %55
    i32 1480143325, label %65
    i32 1753972336, label %75
    i32 -1474003606, label %76
    i32 -1848489879, label %86
    i32 608667350, label %97
    i32 -923845505, label %98
    i32 1455350060, label %99
    i32 -70541181, label %101
    i32 976544293, label %111
    i32 -155823575, label %121
    i32 615597368, label %122
    i32 -1194504633, label %126
    i32 1898462498, label %135
    i32 -1570388780, label %137
    i32 -869359434, label %147
    i32 17511537, label %157
    i32 -2038283424, label %158
    i32 -355434369, label %162
    i32 513331728, label %163
    i32 857814610, label %167
    i32 -220127379, label %168
    i32 -447636129, label %178
    i32 1374053217, label %190
    i32 541520421, label %192
    i32 -1031817658, label %199
    i32 749032366, label %209
    i32 1193352194, label %224
    i32 1381730641, label %226
    i32 -1789352253, label %227
    i32 -1364112373, label %237
    i32 915489888, label %258
    i32 -1701778587, label %259
    i32 1809413076, label %269
    i32 873546336, label %280
    i32 -1731466682, label %281
    i32 2098189674, label %282
    i32 279784148, label %292
    i32 -424147327, label %303
    i32 42489562, label %304
    i32 1140335097, label %305
    i32 -2054388519, label %307
    i32 239022846, label %308
    i32 1002253808, label %312
    i32 2053458551, label %318
    i32 -275015503, label %319
    i32 1843841293, label %320
    i32 1474000946, label %322
    i32 294780197, label %332
    i32 -19001395, label %342
    i32 2031015046, label %343
    i32 1050608480, label %353
    i32 -881238062, label %365
    i32 1817159218, label %367
    i32 -761923229, label %368
    i32 111398206, label %372
    i32 -1876464278, label %382
    i32 912963098, label %393
    i32 1036209503, label %395
    i32 603231191, label %396
    i32 -797642134, label %406
    i32 -1015556164, label %421
    i32 -62891777, label %423
    i32 -1305747624, label %425
    i32 -77016756, label %431
    i32 117104789, label %441
    i32 -821448705, label %451
    i32 -601431141, label %452
    i32 -1403203792, label %454
    i32 -1542034138, label %455
    i32 388415906, label %456
    i32 -998477935, label %466
    i32 -1146912718, label %476
    i32 -367620544, label %477
    i32 1705796485, label %478
    i32 -109150355, label %479
    i32 989063752, label %480
    i32 -1000627119, label %482
    i32 1290358271, label %483
    i32 598497390, label %484
    i32 -466932874, label %485
    i32 412460466, label %486
    i32 -1532827273, label %498
    i32 139424353, label %500
    i32 -1876237929, label %502
    i32 2062035416, label %503
    i32 377073759, label %504
    i32 1377026444, label %505
    i32 -2013721308, label %506
    i32 -715898384, label %507
  ]

.backedge:                                        ; preds = %14, %507, %506, %505, %504, %503, %502, %500, %498, %486, %485, %484, %483, %482, %480, %479, %478, %476, %466, %456, %455, %454, %452, %451, %441, %431, %425, %423, %421, %406, %396, %395, %393, %382, %372, %368, %367, %365, %353, %343, %342, %332, %322, %320, %319, %318, %312, %308, %307, %305, %304, %303, %292, %282, %281, %280, %269, %259, %258, %237, %227, %226, %224, %209, %199, %192, %190, %178, %168, %167, %163, %162, %158, %157, %147, %137, %135, %126, %122, %121, %111, %101, %99, %98, %97, %86, %76, %75, %65, %55, %51, %47, %44, %40, %39, %29, %19, %15
  %.083.be = phi i32 [ %.083, %14 ], [ %.083, %507 ], [ %.083, %506 ], [ %.083, %505 ], [ %.083, %504 ], [ %.083, %503 ], [ %.083, %502 ], [ %.083, %500 ], [ %.083, %498 ], [ %.083, %486 ], [ %.083, %485 ], [ %.083, %484 ], [ %.083, %483 ], [ %.083, %482 ], [ %.083, %480 ], [ %.083, %479 ], [ %.083, %478 ], [ %.083, %476 ], [ %.083, %466 ], [ %.083, %456 ], [ %.083, %455 ], [ %.083, %454 ], [ %.083, %452 ], [ %.083, %451 ], [ %.083, %441 ], [ %.083, %431 ], [ %.083, %425 ], [ %.083, %423 ], [ %.083, %421 ], [ %.083, %406 ], [ %.083, %396 ], [ %.083, %395 ], [ %.083, %393 ], [ %.083, %382 ], [ %.083, %372 ], [ %.083, %368 ], [ %.083, %367 ], [ %.083, %365 ], [ %.083, %353 ], [ %.083, %343 ], [ %.083, %342 ], [ %.083, %332 ], [ %.083, %322 ], [ %.083, %320 ], [ %.083, %319 ], [ %.083, %318 ], [ %.083, %312 ], [ %.083, %308 ], [ %.083, %307 ], [ %.083, %305 ], [ %.083, %304 ], [ %.083, %303 ], [ %.083, %292 ], [ %.083, %282 ], [ %.083, %281 ], [ %.083, %280 ], [ %.083, %269 ], [ %.083, %259 ], [ %.083, %258 ], [ %.083, %237 ], [ %.083, %227 ], [ %.083, %226 ], [ %.083, %224 ], [ %.083, %209 ], [ %.083, %199 ], [ %.083, %192 ], [ %.083, %190 ], [ %.083, %178 ], [ %.083, %168 ], [ %.083, %167 ], [ %.083, %163 ], [ %.083, %162 ], [ %.083, %158 ], [ %.083, %157 ], [ %.083, %147 ], [ %.083, %137 ], [ %.083, %135 ], [ %.083, %126 ], [ %.083, %122 ], [ %.083, %121 ], [ %.083, %111 ], [ %.083, %101 ], [ %100, %99 ], [ %.083, %98 ], [ %.083, %97 ], [ %.083, %86 ], [ %.083, %76 ], [ %.083, %75 ], [ %.083, %65 ], [ %.083, %55 ], [ %.083, %51 ], [ %.083, %47 ], [ %.083, %44 ], [ %.083, %40 ], [ %.083, %39 ], [ %.083, %29 ], [ %.083, %19 ], [ %.083, %15 ]
  %.081.be = phi i32 [ %.081, %14 ], [ %.081, %507 ], [ %.081, %506 ], [ %.081, %505 ], [ %.081, %504 ], [ %.081, %503 ], [ %.081, %502 ], [ %.081, %500 ], [ %.081, %498 ], [ %.081, %486 ], [ %.081, %485 ], [ %.081, %484 ], [ %.081, %483 ], [ %.081, %482 ], [ %481, %480 ], [ %.081, %479 ], [ 0, %478 ], [ %.081, %476 ], [ %.081, %466 ], [ %.081, %456 ], [ %.081, %455 ], [ %.081, %454 ], [ %.081, %452 ], [ %.081, %451 ], [ %.081, %441 ], [ %.081, %431 ], [ %.081, %425 ], [ %.081, %423 ], [ %.081, %421 ], [ %.081, %406 ], [ %.081, %396 ], [ %.081, %395 ], [ %.081, %393 ], [ %.081, %382 ], [ %.081, %372 ], [ %.081, %368 ], [ %.081, %367 ], [ %.081, %365 ], [ %.081, %353 ], [ %.081, %343 ], [ %.081, %342 ], [ %.081, %332 ], [ %.081, %322 ], [ %.081, %320 ], [ %.081, %319 ], [ %.081, %318 ], [ %.081, %312 ], [ %.081, %308 ], [ %.081, %307 ], [ %.081, %305 ], [ %.081, %304 ], [ %.081, %303 ], [ %.081, %292 ], [ %.081, %282 ], [ %.081, %281 ], [ %.081, %280 ], [ %.081, %269 ], [ %.081, %259 ], [ %.081, %258 ], [ %.081, %237 ], [ %.081, %227 ], [ %.081, %226 ], [ %.081, %224 ], [ %.081, %209 ], [ %.081, %199 ], [ %.081, %192 ], [ %.081, %190 ], [ %.081, %178 ], [ %.081, %168 ], [ %.081, %167 ], [ %.081, %163 ], [ %.081, %162 ], [ %.081, %158 ], [ %.081, %157 ], [ %.081, %147 ], [ %.081, %137 ], [ %.081, %135 ], [ %.081, %126 ], [ %.081, %122 ], [ %.081, %121 ], [ %.081, %111 ], [ %.081, %101 ], [ %.081, %99 ], [ %.081, %98 ], [ %.081, %97 ], [ %87, %86 ], [ %.081, %76 ], [ %.081, %75 ], [ %.081, %65 ], [ %.081, %55 ], [ %.081, %51 ], [ %.081, %47 ], [ %.081, %44 ], [ %.081, %40 ], [ %.081, %39 ], [ 0, %29 ], [ %.081, %19 ], [ %.081, %15 ]
  %.079.be = phi i32 [ %.079, %14 ], [ %.079, %507 ], [ %.079, %506 ], [ %.079, %505 ], [ %.079, %504 ], [ %.079, %503 ], [ %.079, %502 ], [ %.079, %500 ], [ %.079, %498 ], [ %.079, %486 ], [ %.079, %485 ], [ %.079, %484 ], [ %.079, %483 ], [ 0, %482 ], [ %.079, %480 ], [ %.079, %479 ], [ %.079, %478 ], [ %.079, %476 ], [ %.079, %466 ], [ %.079, %456 ], [ %.079, %455 ], [ %.079, %454 ], [ %.079, %452 ], [ %.079, %451 ], [ %.079, %441 ], [ %.079, %431 ], [ %.079, %425 ], [ %.079, %423 ], [ %.079, %421 ], [ %.079, %406 ], [ %.079, %396 ], [ %.079, %395 ], [ %.079, %393 ], [ %.079, %382 ], [ %.079, %372 ], [ %.079, %368 ], [ %.079, %367 ], [ %.079, %365 ], [ %.079, %353 ], [ %.079, %343 ], [ %.079, %342 ], [ %.079, %332 ], [ %.079, %322 ], [ %.079, %320 ], [ %.079, %319 ], [ %.079, %318 ], [ %.079, %312 ], [ %.079, %308 ], [ %.079, %307 ], [ %.079, %305 ], [ %.079, %304 ], [ %.079, %303 ], [ %.079, %292 ], [ %.079, %282 ], [ %.079, %281 ], [ %.079, %280 ], [ %.079, %269 ], [ %.079, %259 ], [ %.079, %258 ], [ %.079, %237 ], [ %.079, %227 ], [ %.079, %226 ], [ %.079, %224 ], [ %.079, %209 ], [ %.079, %199 ], [ %.079, %192 ], [ %.079, %190 ], [ %.079, %178 ], [ %.079, %168 ], [ %.079, %167 ], [ %.079, %163 ], [ %.079, %162 ], [ %.079, %158 ], [ %.079, %157 ], [ %.079, %147 ], [ %.079, %137 ], [ %136, %135 ], [ %.079, %126 ], [ %.079, %122 ], [ %.079, %121 ], [ 0, %111 ], [ %.079, %101 ], [ %.079, %99 ], [ %.079, %98 ], [ %.079, %97 ], [ %.079, %86 ], [ %.079, %76 ], [ %.079, %75 ], [ %.079, %65 ], [ %.079, %55 ], [ %.079, %51 ], [ %.079, %47 ], [ %.079, %44 ], [ %.079, %40 ], [ %.079, %39 ], [ %.079, %29 ], [ %.079, %19 ], [ %.079, %15 ]
  %.077.be = phi i32 [ %.077, %14 ], [ %.077, %507 ], [ %.077, %506 ], [ %.077, %505 ], [ %.077, %504 ], [ %.077, %503 ], [ %.077, %502 ], [ %.077, %500 ], [ %.077, %498 ], [ %.077, %486 ], [ %.077, %485 ], [ %.077, %484 ], [ 0, %483 ], [ %.077, %482 ], [ %.077, %480 ], [ %.077, %479 ], [ %.077, %478 ], [ %.077, %476 ], [ %.077, %466 ], [ %.077, %456 ], [ %.077, %455 ], [ %.077, %454 ], [ %.077, %452 ], [ %.077, %451 ], [ %.077, %441 ], [ %.077, %431 ], [ %.077, %425 ], [ %.077, %423 ], [ %.077, %421 ], [ %.077, %406 ], [ %.077, %396 ], [ %.077, %395 ], [ %.077, %393 ], [ %.077, %382 ], [ %.077, %372 ], [ %.077, %368 ], [ %.077, %367 ], [ %.077, %365 ], [ %.077, %353 ], [ %.077, %343 ], [ %.077, %342 ], [ %.077, %332 ], [ %.077, %322 ], [ %.077, %320 ], [ %.077, %319 ], [ %.077, %318 ], [ %.077, %312 ], [ %.077, %308 ], [ %.077, %307 ], [ %306, %305 ], [ %.077, %304 ], [ %.077, %303 ], [ %.077, %292 ], [ %.077, %282 ], [ %.077, %281 ], [ %.077, %280 ], [ %.077, %269 ], [ %.077, %259 ], [ %.077, %258 ], [ %.077, %237 ], [ %.077, %227 ], [ %.077, %226 ], [ %.077, %224 ], [ %.077, %209 ], [ %.077, %199 ], [ %.077, %192 ], [ %.077, %190 ], [ %.077, %178 ], [ %.077, %168 ], [ %.077, %167 ], [ %.077, %163 ], [ %.077, %162 ], [ %.077, %158 ], [ %.077, %157 ], [ 0, %147 ], [ %.077, %137 ], [ %.077, %135 ], [ %.077, %126 ], [ %.077, %122 ], [ %.077, %121 ], [ %.077, %111 ], [ %.077, %101 ], [ %.077, %99 ], [ %.077, %98 ], [ %.077, %97 ], [ %.077, %86 ], [ %.077, %76 ], [ %.077, %75 ], [ %.077, %65 ], [ %.077, %55 ], [ %.077, %51 ], [ %.077, %47 ], [ %.077, %44 ], [ %.077, %40 ], [ %.077, %39 ], [ %.077, %29 ], [ %.077, %19 ], [ %.077, %15 ]
  %.075.be = phi i32 [ %.075, %14 ], [ %.075, %507 ], [ %.075, %506 ], [ %.075, %505 ], [ %.075, %504 ], [ %.075, %503 ], [ %.075, %502 ], [ %501, %500 ], [ %.075, %498 ], [ %.075, %486 ], [ %.075, %485 ], [ %.075, %484 ], [ %.075, %483 ], [ %.075, %482 ], [ %.075, %480 ], [ %.075, %479 ], [ %.075, %478 ], [ %.075, %476 ], [ %.075, %466 ], [ %.075, %456 ], [ %.075, %455 ], [ %.075, %454 ], [ %.075, %452 ], [ %.075, %451 ], [ %.075, %441 ], [ %.075, %431 ], [ %.075, %425 ], [ %.075, %423 ], [ %.075, %421 ], [ %.075, %406 ], [ %.075, %396 ], [ %.075, %395 ], [ %.075, %393 ], [ %.075, %382 ], [ %.075, %372 ], [ %.075, %368 ], [ %.075, %367 ], [ %.075, %365 ], [ %.075, %353 ], [ %.075, %343 ], [ %.075, %342 ], [ %.075, %332 ], [ %.075, %322 ], [ %.075, %320 ], [ %.075, %319 ], [ %.075, %318 ], [ %.075, %312 ], [ %.075, %308 ], [ %.075, %307 ], [ %.075, %305 ], [ %.075, %304 ], [ %.075, %303 ], [ %293, %292 ], [ %.075, %282 ], [ %.075, %281 ], [ %.075, %280 ], [ %.075, %269 ], [ %.075, %259 ], [ %.075, %258 ], [ %.075, %237 ], [ %.075, %227 ], [ %.075, %226 ], [ %.075, %224 ], [ %.075, %209 ], [ %.075, %199 ], [ %.075, %192 ], [ %.075, %190 ], [ %.075, %178 ], [ %.075, %168 ], [ %.075, %167 ], [ %.075, %163 ], [ 0, %162 ], [ %.075, %158 ], [ %.075, %157 ], [ %.075, %147 ], [ %.075, %137 ], [ %.075, %135 ], [ %.075, %126 ], [ %.075, %122 ], [ %.075, %121 ], [ %.075, %111 ], [ %.075, %101 ], [ %.075, %99 ], [ %.075, %98 ], [ %.075, %97 ], [ %.075, %86 ], [ %.075, %76 ], [ %.075, %75 ], [ %.075, %65 ], [ %.075, %55 ], [ %.075, %51 ], [ %.075, %47 ], [ %.075, %44 ], [ %.075, %40 ], [ %.075, %39 ], [ %.075, %29 ], [ %.075, %19 ], [ %.075, %15 ]
  %.073.be = phi i32 [ %.073, %14 ], [ %.073, %507 ], [ %.073, %506 ], [ %.073, %505 ], [ %.073, %504 ], [ %.073, %503 ], [ %.073, %502 ], [ %.073, %500 ], [ %499, %498 ], [ %.073, %486 ], [ %.073, %485 ], [ %.073, %484 ], [ %.073, %483 ], [ %.073, %482 ], [ %.073, %480 ], [ %.073, %479 ], [ %.073, %478 ], [ %.073, %476 ], [ %.073, %466 ], [ %.073, %456 ], [ %.073, %455 ], [ %.073, %454 ], [ %.073, %452 ], [ %.073, %451 ], [ %.073, %441 ], [ %.073, %431 ], [ %.073, %425 ], [ %.073, %423 ], [ %.073, %421 ], [ %.073, %406 ], [ %.073, %396 ], [ %.073, %395 ], [ %.073, %393 ], [ %.073, %382 ], [ %.073, %372 ], [ %.073, %368 ], [ %.073, %367 ], [ %.073, %365 ], [ %.073, %353 ], [ %.073, %343 ], [ %.073, %342 ], [ %.073, %332 ], [ %.073, %322 ], [ %.073, %320 ], [ %.073, %319 ], [ %.073, %318 ], [ %.073, %312 ], [ %.073, %308 ], [ %.073, %307 ], [ %.073, %305 ], [ %.073, %304 ], [ %.073, %303 ], [ %.073, %292 ], [ %.073, %282 ], [ %.073, %281 ], [ %.073, %280 ], [ %270, %269 ], [ %.073, %259 ], [ %.073, %258 ], [ %.073, %237 ], [ %.073, %227 ], [ %.073, %226 ], [ %.073, %224 ], [ %.073, %209 ], [ %.073, %199 ], [ %.073, %192 ], [ %.073, %190 ], [ %.073, %178 ], [ %.073, %168 ], [ 0, %167 ], [ %.073, %163 ], [ %.073, %162 ], [ %.073, %158 ], [ %.073, %157 ], [ %.073, %147 ], [ %.073, %137 ], [ %.073, %135 ], [ %.073, %126 ], [ %.073, %122 ], [ %.073, %121 ], [ %.073, %111 ], [ %.073, %101 ], [ %.073, %99 ], [ %.073, %98 ], [ %.073, %97 ], [ %.073, %86 ], [ %.073, %76 ], [ %.073, %75 ], [ %.073, %65 ], [ %.073, %55 ], [ %.073, %51 ], [ %.073, %47 ], [ %.073, %44 ], [ %.073, %40 ], [ %.073, %39 ], [ %.073, %29 ], [ %.073, %19 ], [ %.073, %15 ]
  %.071.be = phi i32 [ %.071, %14 ], [ %.071, %507 ], [ %.071, %506 ], [ %.071, %505 ], [ %.071, %504 ], [ %.071, %503 ], [ %.071, %502 ], [ %.071, %500 ], [ %.071, %498 ], [ %.071, %486 ], [ %.071, %485 ], [ %.071, %484 ], [ %.071, %483 ], [ %.071, %482 ], [ %.071, %480 ], [ %.071, %479 ], [ %.071, %478 ], [ %.071, %476 ], [ %.071, %466 ], [ %.071, %456 ], [ %.071, %455 ], [ %.071, %454 ], [ %.071, %452 ], [ %.071, %451 ], [ %.071, %441 ], [ %.071, %431 ], [ %.071, %425 ], [ %.071, %423 ], [ %.071, %421 ], [ %.071, %406 ], [ %.071, %396 ], [ %.071, %395 ], [ %.071, %393 ], [ %.071, %382 ], [ %.071, %372 ], [ %.071, %368 ], [ %.071, %367 ], [ %.071, %365 ], [ %.071, %353 ], [ %.071, %343 ], [ %.071, %342 ], [ %.071, %332 ], [ %.071, %322 ], [ %321, %320 ], [ %.071, %319 ], [ %.071, %318 ], [ %.071, %312 ], [ %.071, %308 ], [ 0, %307 ], [ %.071, %305 ], [ %.071, %304 ], [ %.071, %303 ], [ %.071, %292 ], [ %.071, %282 ], [ %.071, %281 ], [ %.071, %280 ], [ %.071, %269 ], [ %.071, %259 ], [ %.071, %258 ], [ %.071, %237 ], [ %.071, %227 ], [ %.071, %226 ], [ %.071, %224 ], [ %.071, %209 ], [ %.071, %199 ], [ %.071, %192 ], [ %.071, %190 ], [ %.071, %178 ], [ %.071, %168 ], [ %.071, %167 ], [ %.071, %163 ], [ %.071, %162 ], [ %.071, %158 ], [ %.071, %157 ], [ %.071, %147 ], [ %.071, %137 ], [ %.071, %135 ], [ %.071, %126 ], [ %.071, %122 ], [ %.071, %121 ], [ %.071, %111 ], [ %.071, %101 ], [ %.071, %99 ], [ %.071, %98 ], [ %.071, %97 ], [ %.071, %86 ], [ %.071, %76 ], [ %.071, %75 ], [ %.071, %65 ], [ %.071, %55 ], [ %.071, %51 ], [ %.071, %47 ], [ %.071, %44 ], [ %.071, %40 ], [ %.071, %39 ], [ %.071, %29 ], [ %.071, %19 ], [ %.071, %15 ]
  %.069.be = phi i32 [ %.069, %14 ], [ %.069, %507 ], [ %.069, %506 ], [ %.069, %505 ], [ %.069, %504 ], [ %.069, %503 ], [ 0, %502 ], [ %.069, %500 ], [ %.069, %498 ], [ %.069, %486 ], [ %.069, %485 ], [ %.069, %484 ], [ %.069, %483 ], [ %.069, %482 ], [ %.069, %480 ], [ %.069, %479 ], [ %.069, %478 ], [ %.069, %476 ], [ %.069, %466 ], [ %.069, %456 ], [ %.neg, %455 ], [ %.069, %454 ], [ %.069, %452 ], [ %.069, %451 ], [ %.069, %441 ], [ %.069, %431 ], [ %.069, %425 ], [ %.069, %423 ], [ %.069, %421 ], [ %.069, %406 ], [ %.069, %396 ], [ %.069, %395 ], [ %.069, %393 ], [ %.069, %382 ], [ %.069, %372 ], [ %.069, %368 ], [ %.069, %367 ], [ %.069, %365 ], [ %.069, %353 ], [ %.069, %343 ], [ %.069, %342 ], [ 0, %332 ], [ %.069, %322 ], [ %.069, %320 ], [ %.069, %319 ], [ %.069, %318 ], [ %.069, %312 ], [ %.069, %308 ], [ %.069, %307 ], [ %.069, %305 ], [ %.069, %304 ], [ %.069, %303 ], [ %.069, %292 ], [ %.069, %282 ], [ %.069, %281 ], [ %.069, %280 ], [ %.069, %269 ], [ %.069, %259 ], [ %.069, %258 ], [ %.069, %237 ], [ %.069, %227 ], [ %.069, %226 ], [ %.069, %224 ], [ %.069, %209 ], [ %.069, %199 ], [ %.069, %192 ], [ %.069, %190 ], [ %.069, %178 ], [ %.069, %168 ], [ %.069, %167 ], [ %.069, %163 ], [ %.069, %162 ], [ %.069, %158 ], [ %.069, %157 ], [ %.069, %147 ], [ %.069, %137 ], [ %.069, %135 ], [ %.069, %126 ], [ %.069, %122 ], [ %.069, %121 ], [ %.069, %111 ], [ %.069, %101 ], [ %.069, %99 ], [ %.069, %98 ], [ %.069, %97 ], [ %.069, %86 ], [ %.069, %76 ], [ %.069, %75 ], [ %.069, %65 ], [ %.069, %55 ], [ %.069, %51 ], [ %.069, %47 ], [ %.069, %44 ], [ %.069, %40 ], [ %.069, %39 ], [ %.069, %29 ], [ %.069, %19 ], [ %.069, %15 ]
  %.067.be = phi i32 [ %.067, %14 ], [ %.067, %507 ], [ %.067, %506 ], [ %.067, %505 ], [ %.067, %504 ], [ %.067, %503 ], [ %.067, %502 ], [ %.067, %500 ], [ %.067, %498 ], [ %.067, %486 ], [ %.067, %485 ], [ %.067, %484 ], [ %.067, %483 ], [ %.067, %482 ], [ %.067, %480 ], [ %.067, %479 ], [ %.067, %478 ], [ %.067, %476 ], [ %.067, %466 ], [ %.067, %456 ], [ %.067, %455 ], [ %.067, %454 ], [ %453, %452 ], [ %.067, %451 ], [ %.067, %441 ], [ %.067, %431 ], [ %.067, %425 ], [ %.067, %423 ], [ %.067, %421 ], [ %.067, %406 ], [ %.067, %396 ], [ %.067, %395 ], [ %.067, %393 ], [ %.067, %382 ], [ %.067, %372 ], [ %.067, %368 ], [ 0, %367 ], [ %.067, %365 ], [ %.067, %353 ], [ %.067, %343 ], [ %.067, %342 ], [ %.067, %332 ], [ %.067, %322 ], [ %.067, %320 ], [ %.067, %319 ], [ %.067, %318 ], [ %.067, %312 ], [ %.067, %308 ], [ %.067, %307 ], [ %.067, %305 ], [ %.067, %304 ], [ %.067, %303 ], [ %.067, %292 ], [ %.067, %282 ], [ %.067, %281 ], [ %.067, %280 ], [ %.067, %269 ], [ %.067, %259 ], [ %.067, %258 ], [ %.067, %237 ], [ %.067, %227 ], [ %.067, %226 ], [ %.067, %224 ], [ %.067, %209 ], [ %.067, %199 ], [ %.067, %192 ], [ %.067, %190 ], [ %.067, %178 ], [ %.067, %168 ], [ %.067, %167 ], [ %.067, %163 ], [ %.067, %162 ], [ %.067, %158 ], [ %.067, %157 ], [ %.067, %147 ], [ %.067, %137 ], [ %.067, %135 ], [ %.067, %126 ], [ %.067, %122 ], [ %.067, %121 ], [ %.067, %111 ], [ %.067, %101 ], [ %.067, %99 ], [ %.067, %98 ], [ %.067, %97 ], [ %.067, %86 ], [ %.067, %76 ], [ %.067, %75 ], [ %.067, %65 ], [ %.067, %55 ], [ %.067, %51 ], [ %.067, %47 ], [ %.067, %44 ], [ %.067, %40 ], [ %.067, %39 ], [ %.067, %29 ], [ %.067, %19 ], [ %.067, %15 ]
  %.0.be = phi i32 [ %.0, %14 ], [ -998477935, %507 ], [ 117104789, %506 ], [ -797642134, %505 ], [ -1876464278, %504 ], [ 1050608480, %503 ], [ 294780197, %502 ], [ 279784148, %500 ], [ 1809413076, %498 ], [ -1364112373, %486 ], [ 749032366, %485 ], [ -447636129, %484 ], [ -869359434, %483 ], [ 976544293, %482 ], [ -1848489879, %480 ], [ 1480143325, %479 ], [ -409230792, %478 ], [ -367620544, %476 ], [ %475, %466 ], [ %465, %456 ], [ 2031015046, %455 ], [ -1542034138, %454 ], [ -761923229, %452 ], [ -601431141, %451 ], [ %450, %441 ], [ %440, %431 ], [ -77016756, %425 ], [ -77016756, %423 ], [ %422, %421 ], [ %420, %406 ], [ %405, %396 ], [ 603231191, %395 ], [ %394, %393 ], [ %392, %382 ], [ %381, %372 ], [ %371, %368 ], [ -761923229, %367 ], [ %366, %365 ], [ %364, %353 ], [ %352, %343 ], [ 2031015046, %342 ], [ %341, %332 ], [ %331, %322 ], [ 239022846, %320 ], [ 1843841293, %319 ], [ -367620544, %318 ], [ %317, %312 ], [ %311, %308 ], [ 239022846, %307 ], [ -2038283424, %305 ], [ 1140335097, %304 ], [ 513331728, %303 ], [ %302, %292 ], [ %291, %282 ], [ 2098189674, %281 ], [ -220127379, %280 ], [ %279, %269 ], [ %268, %259 ], [ -1701778587, %258 ], [ %257, %237 ], [ %236, %227 ], [ -1701778587, %226 ], [ %225, %224 ], [ %223, %209 ], [ %208, %199 ], [ %198, %192 ], [ %191, %190 ], [ %189, %178 ], [ %177, %168 ], [ -220127379, %167 ], [ %166, %163 ], [ 513331728, %162 ], [ %161, %158 ], [ -2038283424, %157 ], [ %156, %147 ], [ %146, %137 ], [ 615597368, %135 ], [ 1898462498, %126 ], [ %125, %122 ], [ 615597368, %121 ], [ %120, %111 ], [ %110, %101 ], [ 1626035800, %99 ], [ 1455350060, %98 ], [ 1689325297, %97 ], [ %96, %86 ], [ %85, %76 ], [ -1474003606, %75 ], [ %74, %65 ], [ %64, %55 ], [ -117901949, %51 ], [ -117901949, %47 ], [ %46, %44 ], [ %43, %40 ], [ 1689325297, %39 ], [ %38, %29 ], [ %28, %19 ], [ %18, %15 ]
  br label %14

15:                                               ; preds = %14
  %16 = load i32, i32* %6, align 4
  %17 = icmp slt i32 %.083, %16
  %18 = select i1 %17, i32 -197032381, i32 -70541181
  br label %.backedge

19:                                               ; preds = %14
  %20 = load i32, i32* @x.7, align 4
  %21 = load i32, i32* @y.8, align 4
  %22 = add i32 %20, -1
  %23 = mul i32 %22, %20
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %26, %25
  %28 = select i1 %27, i32 -409230792, i32 1705796485
  br label %.backedge

29:                                               ; preds = %14
  %30 = load i32, i32* @x.7, align 4
  %31 = load i32, i32* @y.8, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 1719516738, i32 1705796485
  br label %.backedge

39:                                               ; preds = %14
  br label %.backedge

40:                                               ; preds = %14
  %41 = load i32, i32* %6, align 4
  %42 = icmp slt i32 %.081, %41
  %43 = select i1 %42, i32 1141977518, i32 -923845505
  br label %.backedge

44:                                               ; preds = %14
  %45 = icmp eq i32 %.083, %.081
  %46 = select i1 %45, i32 845997913, i32 -1348483951
  br label %.backedge

47:                                               ; preds = %14
  %48 = sext i32 %.083 to i64
  %49 = sext i32 %.081 to i64
  %50 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %48, i64 %49
  store i64 0, i64* %50, align 8
  br label %.backedge

51:                                               ; preds = %14
  %52 = sext i32 %.083 to i64
  %53 = sext i32 %.081 to i64
  %54 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %52, i64 %53
  store i64 20000000000, i64* %54, align 8
  br label %.backedge

55:                                               ; preds = %14
  %56 = load i32, i32* @x.7, align 4
  %57 = load i32, i32* @y.8, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 1480143325, i32 -109150355
  br label %.backedge

65:                                               ; preds = %14
  %66 = load i32, i32* @x.7, align 4
  %67 = load i32, i32* @y.8, align 4
  %68 = add i32 %66, -1
  %69 = mul i32 %68, %66
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %72, %71
  %74 = select i1 %73, i32 1753972336, i32 -109150355
  br label %.backedge

75:                                               ; preds = %14
  br label %.backedge

76:                                               ; preds = %14
  %77 = load i32, i32* @x.7, align 4
  %78 = load i32, i32* @y.8, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 -1848489879, i32 989063752
  br label %.backedge

86:                                               ; preds = %14
  %87 = add i32 %.081, 1
  %88 = load i32, i32* @x.7, align 4
  %89 = load i32, i32* @y.8, align 4
  %90 = add i32 %88, -1
  %91 = mul i32 %90, %88
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %94, %93
  %96 = select i1 %95, i32 608667350, i32 989063752
  br label %.backedge

97:                                               ; preds = %14
  br label %.backedge

98:                                               ; preds = %14
  br label %.backedge

99:                                               ; preds = %14
  %100 = add i32 %.083, 1
  br label %.backedge

101:                                              ; preds = %14
  %102 = load i32, i32* @x.7, align 4
  %103 = load i32, i32* @y.8, align 4
  %104 = add i32 %102, -1
  %105 = mul i32 %104, %102
  %106 = and i32 %105, 1
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %108, %107
  %110 = select i1 %109, i32 976544293, i32 -1000627119
  br label %.backedge

111:                                              ; preds = %14
  %112 = load i32, i32* @x.7, align 4
  %113 = load i32, i32* @y.8, align 4
  %114 = add i32 %112, -1
  %115 = mul i32 %114, %112
  %116 = and i32 %115, 1
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %118, %117
  %120 = select i1 %119, i32 -155823575, i32 -1000627119
  br label %.backedge

121:                                              ; preds = %14
  br label %.backedge

122:                                              ; preds = %14
  %123 = load i32, i32* %7, align 4
  %124 = icmp slt i32 %.079, %123
  %125 = select i1 %124, i32 -1194504633, i32 -1570388780
  br label %.backedge

126:                                              ; preds = %14
  %127 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %9, i32* nonnull %10, i32* nonnull %11)
  %128 = load i32, i32* %11, align 4
  %129 = sext i32 %128 to i64
  %130 = load i32, i32* %9, align 4
  %131 = sext i32 %130 to i64
  %132 = load i32, i32* %10, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %131, i64 %133
  store i64 %129, i64* %134, align 8
  br label %.backedge

135:                                              ; preds = %14
  %136 = add i32 %.079, 1
  br label %.backedge

137:                                              ; preds = %14
  %138 = load i32, i32* @x.7, align 4
  %139 = load i32, i32* @y.8, align 4
  %140 = add i32 %138, -1
  %141 = mul i32 %140, %138
  %142 = and i32 %141, 1
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %144, %143
  %146 = select i1 %145, i32 -869359434, i32 1290358271
  br label %.backedge

147:                                              ; preds = %14
  %148 = load i32, i32* @x.7, align 4
  %149 = load i32, i32* @y.8, align 4
  %150 = add i32 %148, -1
  %151 = mul i32 %150, %148
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 17511537, i32 1290358271
  br label %.backedge

157:                                              ; preds = %14
  br label %.backedge

158:                                              ; preds = %14
  %159 = load i32, i32* %6, align 4
  %160 = icmp slt i32 %.077, %159
  %161 = select i1 %160, i32 -355434369, i32 -2054388519
  br label %.backedge

162:                                              ; preds = %14
  br label %.backedge

163:                                              ; preds = %14
  %164 = load i32, i32* %6, align 4
  %165 = icmp slt i32 %.075, %164
  %166 = select i1 %165, i32 857814610, i32 42489562
  br label %.backedge

167:                                              ; preds = %14
  br label %.backedge

168:                                              ; preds = %14
  %169 = load i32, i32* @x.7, align 4
  %170 = load i32, i32* @y.8, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 -447636129, i32 598497390
  br label %.backedge

178:                                              ; preds = %14
  %179 = load i32, i32* %6, align 4
  %180 = icmp slt i32 %.073, %179
  store i1 %180, i1* %5, align 1
  %181 = load i32, i32* @x.7, align 4
  %182 = load i32, i32* @y.8, align 4
  %183 = add i32 %181, -1
  %184 = mul i32 %183, %181
  %185 = and i32 %184, 1
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %187, %186
  %189 = select i1 %188, i32 1374053217, i32 598497390
  br label %.backedge

190:                                              ; preds = %14
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %191 = select i1 %.0..0..0., i32 541520421, i32 -1731466682
  br label %.backedge

192:                                              ; preds = %14
  %193 = sext i32 %.075 to i64
  %194 = sext i32 %.077 to i64
  %195 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %193, i64 %194
  %196 = load i64, i64* %195, align 8
  %197 = icmp eq i64 %196, 20000000000
  %198 = select i1 %197, i32 1381730641, i32 -1031817658
  br label %.backedge

199:                                              ; preds = %14
  %200 = load i32, i32* @x.7, align 4
  %201 = load i32, i32* @y.8, align 4
  %202 = add i32 %200, -1
  %203 = mul i32 %202, %200
  %204 = and i32 %203, 1
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %206, %205
  %208 = select i1 %207, i32 749032366, i32 -466932874
  br label %.backedge

209:                                              ; preds = %14
  %210 = sext i32 %.077 to i64
  %211 = sext i32 %.073 to i64
  %212 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %210, i64 %211
  %213 = load i64, i64* %212, align 8
  %214 = icmp eq i64 %213, 20000000000
  store i1 %214, i1* %4, align 1
  %215 = load i32, i32* @x.7, align 4
  %216 = load i32, i32* @y.8, align 4
  %217 = add i32 %215, -1
  %218 = mul i32 %217, %215
  %219 = and i32 %218, 1
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %221, %220
  %223 = select i1 %222, i32 1193352194, i32 -466932874
  br label %.backedge

224:                                              ; preds = %14
  %.0..0..0.63 = load volatile i1, i1* %4, align 1
  %225 = select i1 %.0..0..0.63, i32 1381730641, i32 -1789352253
  br label %.backedge

226:                                              ; preds = %14
  br label %.backedge

227:                                              ; preds = %14
  %228 = load i32, i32* @x.7, align 4
  %229 = load i32, i32* @y.8, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 -1364112373, i32 412460466
  br label %.backedge

237:                                              ; preds = %14
  %238 = sext i32 %.075 to i64
  %239 = sext i32 %.073 to i64
  %240 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %238, i64 %239
  %241 = sext i32 %.077 to i64
  %242 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %238, i64 %241
  %243 = load i64, i64* %242, align 8
  %244 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %241, i64 %239
  %245 = load i64, i64* %244, align 8
  %246 = add i64 %245, %243
  store i64 %246, i64* %12, align 8
  %247 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %240, i64* nonnull dereferenceable(8) %12)
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %240, align 8
  %249 = load i32, i32* @x.7, align 4
  %250 = load i32, i32* @y.8, align 4
  %251 = add i32 %249, -1
  %252 = mul i32 %251, %249
  %253 = and i32 %252, 1
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %255, %254
  %257 = select i1 %256, i32 915489888, i32 412460466
  br label %.backedge

258:                                              ; preds = %14
  br label %.backedge

259:                                              ; preds = %14
  %260 = load i32, i32* @x.7, align 4
  %261 = load i32, i32* @y.8, align 4
  %262 = add i32 %260, -1
  %263 = mul i32 %262, %260
  %264 = and i32 %263, 1
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %266, %265
  %268 = select i1 %267, i32 1809413076, i32 -1532827273
  br label %.backedge

269:                                              ; preds = %14
  %270 = add i32 %.073, 1
  %271 = load i32, i32* @x.7, align 4
  %272 = load i32, i32* @y.8, align 4
  %273 = add i32 %271, -1
  %274 = mul i32 %273, %271
  %275 = and i32 %274, 1
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %277, %276
  %279 = select i1 %278, i32 873546336, i32 -1532827273
  br label %.backedge

280:                                              ; preds = %14
  br label %.backedge

281:                                              ; preds = %14
  br label %.backedge

282:                                              ; preds = %14
  %283 = load i32, i32* @x.7, align 4
  %284 = load i32, i32* @y.8, align 4
  %285 = add i32 %283, -1
  %286 = mul i32 %285, %283
  %287 = and i32 %286, 1
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %289, %288
  %291 = select i1 %290, i32 279784148, i32 139424353
  br label %.backedge

292:                                              ; preds = %14
  %293 = add i32 %.075, 1
  %294 = load i32, i32* @x.7, align 4
  %295 = load i32, i32* @y.8, align 4
  %296 = add i32 %294, -1
  %297 = mul i32 %296, %294
  %298 = and i32 %297, 1
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %300, %299
  %302 = select i1 %301, i32 -424147327, i32 139424353
  br label %.backedge

303:                                              ; preds = %14
  br label %.backedge

304:                                              ; preds = %14
  br label %.backedge

305:                                              ; preds = %14
  %306 = add i32 %.077, 1
  br label %.backedge

307:                                              ; preds = %14
  br label %.backedge

308:                                              ; preds = %14
  %309 = load i32, i32* %6, align 4
  %310 = icmp slt i32 %.071, %309
  %311 = select i1 %310, i32 1002253808, i32 1474000946
  br label %.backedge

312:                                              ; preds = %14
  %313 = sext i32 %.071 to i64
  %314 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %313, i64 %313
  %315 = load i64, i64* %314, align 8
  %316 = icmp slt i64 %315, 0
  %317 = select i1 %316, i32 2053458551, i32 -275015503
  br label %.backedge

318:                                              ; preds = %14
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @str, i64 0, i64 0))
  br label %.backedge

319:                                              ; preds = %14
  br label %.backedge

320:                                              ; preds = %14
  %321 = add i32 %.071, 1
  br label %.backedge

322:                                              ; preds = %14
  %323 = load i32, i32* @x.7, align 4
  %324 = load i32, i32* @y.8, align 4
  %325 = add i32 %323, -1
  %326 = mul i32 %325, %323
  %327 = and i32 %326, 1
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %329, %328
  %331 = select i1 %330, i32 294780197, i32 -1876237929
  br label %.backedge

332:                                              ; preds = %14
  %333 = load i32, i32* @x.7, align 4
  %334 = load i32, i32* @y.8, align 4
  %335 = add i32 %333, -1
  %336 = mul i32 %335, %333
  %337 = and i32 %336, 1
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %339, %338
  %341 = select i1 %340, i32 -19001395, i32 -1876237929
  br label %.backedge

342:                                              ; preds = %14
  br label %.backedge

343:                                              ; preds = %14
  %344 = load i32, i32* @x.7, align 4
  %345 = load i32, i32* @y.8, align 4
  %346 = add i32 %344, -1
  %347 = mul i32 %346, %344
  %348 = and i32 %347, 1
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %350, %349
  %352 = select i1 %351, i32 1050608480, i32 2062035416
  br label %.backedge

353:                                              ; preds = %14
  %354 = load i32, i32* %6, align 4
  %355 = icmp slt i32 %.069, %354
  store i1 %355, i1* %3, align 1
  %356 = load i32, i32* @x.7, align 4
  %357 = load i32, i32* @y.8, align 4
  %358 = add i32 %356, -1
  %359 = mul i32 %358, %356
  %360 = and i32 %359, 1
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %362, %361
  %364 = select i1 %363, i32 -881238062, i32 2062035416
  br label %.backedge

365:                                              ; preds = %14
  %.0..0..0.64 = load volatile i1, i1* %3, align 1
  %366 = select i1 %.0..0..0.64, i32 1817159218, i32 388415906
  br label %.backedge

367:                                              ; preds = %14
  br label %.backedge

368:                                              ; preds = %14
  %369 = load i32, i32* %6, align 4
  %370 = icmp slt i32 %.067, %369
  %371 = select i1 %370, i32 111398206, i32 -1403203792
  br label %.backedge

372:                                              ; preds = %14
  %373 = load i32, i32* @x.7, align 4
  %374 = load i32, i32* @y.8, align 4
  %375 = add i32 %373, -1
  %376 = mul i32 %375, %373
  %377 = and i32 %376, 1
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %379, %378
  %381 = select i1 %380, i32 -1876464278, i32 377073759
  br label %.backedge

382:                                              ; preds = %14
  %383 = icmp ne i32 %.067, 0
  store i1 %383, i1* %2, align 1
  %384 = load i32, i32* @x.7, align 4
  %385 = load i32, i32* @y.8, align 4
  %386 = add i32 %384, -1
  %387 = mul i32 %386, %384
  %388 = and i32 %387, 1
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %390, %389
  %392 = select i1 %391, i32 912963098, i32 377073759
  br label %.backedge

393:                                              ; preds = %14
  %.0..0..0.65 = load volatile i1, i1* %2, align 1
  %394 = select i1 %.0..0..0.65, i32 1036209503, i32 603231191
  br label %.backedge

395:                                              ; preds = %14
  %putchar87 = call i32 @putchar(i32 32)
  br label %.backedge

396:                                              ; preds = %14
  %397 = load i32, i32* @x.7, align 4
  %398 = load i32, i32* @y.8, align 4
  %399 = add i32 %397, -1
  %400 = mul i32 %399, %397
  %401 = and i32 %400, 1
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %403, %402
  %405 = select i1 %404, i32 -797642134, i32 1377026444
  br label %.backedge

406:                                              ; preds = %14
  %407 = sext i32 %.069 to i64
  %408 = sext i32 %.067 to i64
  %409 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %407, i64 %408
  %410 = load i64, i64* %409, align 8
  %411 = icmp eq i64 %410, 20000000000
  store i1 %411, i1* %1, align 1
  %412 = load i32, i32* @x.7, align 4
  %413 = load i32, i32* @y.8, align 4
  %414 = add i32 %412, -1
  %415 = mul i32 %414, %412
  %416 = and i32 %415, 1
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %418, %417
  %420 = select i1 %419, i32 -1015556164, i32 1377026444
  br label %.backedge

421:                                              ; preds = %14
  %.0..0..0.66 = load volatile i1, i1* %1, align 1
  %422 = select i1 %.0..0..0.66, i32 -62891777, i32 -1305747624
  br label %.backedge

423:                                              ; preds = %14
  %424 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  br label %.backedge

425:                                              ; preds = %14
  %426 = sext i32 %.069 to i64
  %427 = sext i32 %.067 to i64
  %428 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %426, i64 %427
  %429 = load i64, i64* %428, align 8
  %430 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 %429)
  br label %.backedge

431:                                              ; preds = %14
  %432 = load i32, i32* @x.7, align 4
  %433 = load i32, i32* @y.8, align 4
  %434 = add i32 %432, -1
  %435 = mul i32 %434, %432
  %436 = and i32 %435, 1
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %438, %437
  %440 = select i1 %439, i32 117104789, i32 -2013721308
  br label %.backedge

441:                                              ; preds = %14
  %442 = load i32, i32* @x.7, align 4
  %443 = load i32, i32* @y.8, align 4
  %444 = add i32 %442, -1
  %445 = mul i32 %444, %442
  %446 = and i32 %445, 1
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %448, %447
  %450 = select i1 %449, i32 -821448705, i32 -2013721308
  br label %.backedge

451:                                              ; preds = %14
  br label %.backedge

452:                                              ; preds = %14
  %453 = add i32 %.067, 1
  br label %.backedge

454:                                              ; preds = %14
  %putchar = call i32 @putchar(i32 10)
  br label %.backedge

455:                                              ; preds = %14
  %.neg = add i32 %.069, 1
  br label %.backedge

456:                                              ; preds = %14
  %457 = load i32, i32* @x.7, align 4
  %458 = load i32, i32* @y.8, align 4
  %459 = add i32 %457, -1
  %460 = mul i32 %459, %457
  %461 = and i32 %460, 1
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %463, %462
  %465 = select i1 %464, i32 -998477935, i32 -715898384
  br label %.backedge

466:                                              ; preds = %14
  %467 = load i32, i32* @x.7, align 4
  %468 = load i32, i32* @y.8, align 4
  %469 = add i32 %467, -1
  %470 = mul i32 %469, %467
  %471 = and i32 %470, 1
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %473, %472
  %475 = select i1 %474, i32 -1146912718, i32 -715898384
  br label %.backedge

476:                                              ; preds = %14
  br label %.backedge

477:                                              ; preds = %14
  ret i32 0

478:                                              ; preds = %14
  br label %.backedge

479:                                              ; preds = %14
  br label %.backedge

480:                                              ; preds = %14
  %481 = add i32 %.081, 1
  br label %.backedge

482:                                              ; preds = %14
  br label %.backedge

483:                                              ; preds = %14
  br label %.backedge

484:                                              ; preds = %14
  br label %.backedge

485:                                              ; preds = %14
  br label %.backedge

486:                                              ; preds = %14
  %487 = sext i32 %.075 to i64
  %488 = sext i32 %.073 to i64
  %489 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %487, i64 %488
  %490 = sext i32 %.077 to i64
  %491 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %487, i64 %490
  %492 = load i64, i64* %491, align 8
  %493 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %8, i64 0, i64 %490, i64 %488
  %494 = load i64, i64* %493, align 8
  %495 = add i64 %494, %492
  store i64 %495, i64* %12, align 8
  %496 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %489, i64* nonnull dereferenceable(8) %12)
  %497 = load i64, i64* %496, align 8
  store i64 %497, i64* %489, align 8
  br label %.backedge

498:                                              ; preds = %14
  %499 = add i32 %.073, 1
  br label %.backedge

500:                                              ; preds = %14
  %501 = add i32 %.075, 1
  br label %.backedge

502:                                              ; preds = %14
  br label %.backedge

503:                                              ; preds = %14
  br label %.backedge

504:                                              ; preds = %14
  br label %.backedge

505:                                              ; preds = %14
  br label %.backedge

506:                                              ; preds = %14
  br label %.backedge

507:                                              ; preds = %14
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %1, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.07.ph = phi i64* [ undef, %2 ], [ %.07.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ -1291682303, %2 ], [ 685126663, %.outer.backedge ]
  br label %.outer9

.outer9:                                          ; preds = %.outer, %8
  %.0.ph10 = phi i32 [ %.0.ph, %.outer ], [ %10, %8 ]
  br label %7

7:                                                ; preds = %.outer9, %7
  switch i32 %.0.ph10, label %7 [
    i32 -1291682303, label %8
    i32 -1504758487, label %.outer.backedge
    i32 873592763, label %11
    i32 685126663, label %12
  ]

8:                                                ; preds = %7
  %.0..0..0.5 = load volatile i64, i64* %4, align 8
  %.0..0..0.6 = load volatile i64, i64* %3, align 8
  %9 = icmp slt i64 %.0..0..0.5, %.0..0..0.6
  %10 = select i1 %9, i32 -1504758487, i32 873592763
  br label %.outer9

11:                                               ; preds = %7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %7, %11
  %.07.ph.be = phi i64* [ %0, %11 ], [ %1, %7 ]
  br label %.outer

12:                                               ; preds = %7
  ret i64* %.07.ph
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s818053369.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.11, align 4
  %4 = load i32, i32* @y.12, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1280503356, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1280503356, label %11
    i32 -626859611, label %14
    i32 1125234218, label %24
    i32 -1810738316, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -626859611, i32 -1810738316
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.11, align 4
  %16 = load i32, i32* @y.12, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 1125234218, i32 -1810738316
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -626859611, %25 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
