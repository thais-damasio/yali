; ModuleID = 'build_ollvm/programs/p02363/s133671102.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s133671102.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@INF = local_unnamed_addr global i64 4557430888798830399, align 8
@mp = global [105 x [105 x i64]] zeroinitializer, align 16
@.str = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s133671102.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@str = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(88200) bitcast ([105 x [105 x i64]]* @mp to i8*), i8 63, i64 88200, i1 false)
  br label %13

13:                                               ; preds = %.backedge, %0
  %.073 = phi i32 [ 1, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i32 [ undef, %0 ], [ %.067.be, %.backedge ]
  %.065 = phi i32 [ undef, %0 ], [ %.065.be, %.backedge ]
  %.063 = phi i8 [ undef, %0 ], [ %.063.be, %.backedge ]
  %.061 = phi i32 [ undef, %0 ], [ %.061.be, %.backedge ]
  %.059 = phi i32 [ undef, %0 ], [ %.059.be, %.backedge ]
  %.057 = phi i32 [ undef, %0 ], [ %.057.be, %.backedge ]
  %.0 = phi i32 [ -425997544, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -425997544, label %14
    i32 1146350958, label %17
    i32 -1957772796, label %27
    i32 415188688, label %39
    i32 -1748204081, label %40
    i32 1463106785, label %42
    i32 -775708172, label %43
    i32 -822226447, label %47
    i32 -690532064, label %58
    i32 182359030, label %60
    i32 -918857385, label %70
    i32 760784153, label %80
    i32 1622359349, label %81
    i32 -917546424, label %84
    i32 1059251545, label %85
    i32 1552209746, label %88
    i32 -1612673218, label %89
    i32 -596822909, label %92
    i32 1507684912, label %102
    i32 -1962070923, label %118
    i32 1749616514, label %120
    i32 -1720429616, label %127
    i32 -1394139909, label %139
    i32 1516727360, label %149
    i32 1089047414, label %159
    i32 -1749028597, label %160
    i32 336749810, label %170
    i32 -18768609, label %180
    i32 -987285607, label %181
    i32 572551496, label %182
    i32 225698261, label %184
    i32 -534682618, label %185
    i32 594643612, label %187
    i32 636148960, label %188
    i32 -1931860528, label %198
    i32 -730472914, label %210
    i32 1485935736, label %212
    i32 1414966863, label %222
    i32 666346700, label %236
    i32 -1626255794, label %238
    i32 -1053399799, label %248
    i32 -1172030068, label %258
    i32 940787389, label %259
    i32 692724594, label %260
    i32 -407760814, label %270
    i32 1293475087, label %280
    i32 -1356287773, label %281
    i32 315699078, label %284
    i32 -1280826218, label %285
    i32 -757976261, label %286
    i32 -765376119, label %289
    i32 1416296448, label %290
    i32 1607977601, label %300
    i32 -1976843257, label %312
    i32 93867317, label %314
    i32 1028469605, label %324
    i32 -115889275, label %340
    i32 -73737365, label %342
    i32 1884822910, label %344
    i32 197296092, label %350
    i32 -992985980, label %354
    i32 338668907, label %355
    i32 -546105842, label %356
    i32 1865519444, label %357
    i32 -940500117, label %367
    i32 -410308085, label %378
    i32 -1996651947, label %379
    i32 -1170481441, label %380
    i32 1486191283, label %390
    i32 631348328, label %401
    i32 -563742793, label %402
    i32 -682557183, label %403
    i32 -320765068, label %413
    i32 1884840363, label %423
    i32 -1838654558, label %424
    i32 -1928142369, label %427
    i32 1494996669, label %428
    i32 -1574843645, label %429
    i32 -1608583106, label %430
    i32 1019298208, label %432
    i32 519494648, label %433
    i32 -1467465120, label %434
    i32 -2073728548, label %435
    i32 1443808687, label %437
    i32 -733251173, label %438
    i32 -317762491, label %439
    i32 -1057882172, label %441
    i32 1859959001, label %443
  ]

.backedge:                                        ; preds = %13, %443, %441, %439, %438, %437, %435, %434, %433, %432, %430, %429, %428, %427, %424, %413, %403, %402, %401, %390, %380, %379, %378, %367, %357, %356, %355, %354, %350, %344, %342, %340, %324, %314, %312, %300, %290, %289, %286, %285, %284, %281, %280, %270, %260, %259, %258, %248, %238, %236, %222, %212, %210, %198, %188, %187, %185, %184, %182, %181, %180, %170, %160, %159, %149, %139, %127, %120, %118, %102, %92, %89, %88, %85, %84, %81, %80, %70, %60, %58, %47, %43, %42, %40, %39, %27, %17, %14
  %.073.be = phi i32 [ %.073, %13 ], [ %.073, %443 ], [ %.073, %441 ], [ %.073, %439 ], [ %.073, %438 ], [ %.073, %437 ], [ %.073, %435 ], [ %.073, %434 ], [ %.073, %433 ], [ %.073, %432 ], [ %.073, %430 ], [ %.073, %429 ], [ %.073, %428 ], [ %.073, %427 ], [ %.073, %424 ], [ %.073, %413 ], [ %.073, %403 ], [ %.073, %402 ], [ %.073, %401 ], [ %.073, %390 ], [ %.073, %380 ], [ %.073, %379 ], [ %.073, %378 ], [ %.073, %367 ], [ %.073, %357 ], [ %.073, %356 ], [ %.073, %355 ], [ %.073, %354 ], [ %.073, %350 ], [ %.073, %344 ], [ %.073, %342 ], [ %.073, %340 ], [ %.073, %324 ], [ %.073, %314 ], [ %.073, %312 ], [ %.073, %300 ], [ %.073, %290 ], [ %.073, %289 ], [ %.073, %286 ], [ %.073, %285 ], [ %.073, %284 ], [ %.073, %281 ], [ %.073, %280 ], [ %.073, %270 ], [ %.073, %260 ], [ %.073, %259 ], [ %.073, %258 ], [ %.073, %248 ], [ %.073, %238 ], [ %.073, %236 ], [ %.073, %222 ], [ %.073, %212 ], [ %.073, %210 ], [ %.073, %198 ], [ %.073, %188 ], [ %.073, %187 ], [ %.073, %185 ], [ %.073, %184 ], [ %.073, %182 ], [ %.073, %181 ], [ %.073, %180 ], [ %.073, %170 ], [ %.073, %160 ], [ %.073, %159 ], [ %.073, %149 ], [ %.073, %139 ], [ %.073, %127 ], [ %.073, %120 ], [ %.073, %118 ], [ %.073, %102 ], [ %.073, %92 ], [ %.073, %89 ], [ %.073, %88 ], [ %.073, %85 ], [ %.073, %84 ], [ %.073, %81 ], [ %.073, %80 ], [ %.073, %70 ], [ %.073, %60 ], [ %.073, %58 ], [ %.073, %47 ], [ %.073, %43 ], [ %.073, %42 ], [ %41, %40 ], [ %.073, %39 ], [ %.073, %27 ], [ %.073, %17 ], [ %.073, %14 ]
  %.071.be = phi i32 [ %.071, %13 ], [ %.071, %443 ], [ %.071, %441 ], [ %.071, %439 ], [ %.071, %438 ], [ %.071, %437 ], [ %.071, %435 ], [ %.071, %434 ], [ %.071, %433 ], [ %.071, %432 ], [ %.071, %430 ], [ %.071, %429 ], [ %.071, %428 ], [ %.071, %427 ], [ %.071, %424 ], [ %.071, %413 ], [ %.071, %403 ], [ %.071, %402 ], [ %.071, %401 ], [ %.071, %390 ], [ %.071, %380 ], [ %.071, %379 ], [ %.071, %378 ], [ %.071, %367 ], [ %.071, %357 ], [ %.071, %356 ], [ %.071, %355 ], [ %.071, %354 ], [ %.071, %350 ], [ %.071, %344 ], [ %.071, %342 ], [ %.071, %340 ], [ %.071, %324 ], [ %.071, %314 ], [ %.071, %312 ], [ %.071, %300 ], [ %.071, %290 ], [ %.071, %289 ], [ %.071, %286 ], [ %.071, %285 ], [ %.071, %284 ], [ %.071, %281 ], [ %.071, %280 ], [ %.071, %270 ], [ %.071, %260 ], [ %.071, %259 ], [ %.071, %258 ], [ %.071, %248 ], [ %.071, %238 ], [ %.071, %236 ], [ %.071, %222 ], [ %.071, %212 ], [ %.071, %210 ], [ %.071, %198 ], [ %.071, %188 ], [ %.071, %187 ], [ %.071, %185 ], [ %.071, %184 ], [ %.071, %182 ], [ %.071, %181 ], [ %.071, %180 ], [ %.071, %170 ], [ %.071, %160 ], [ %.071, %159 ], [ %.071, %149 ], [ %.071, %139 ], [ %.071, %127 ], [ %.071, %120 ], [ %.071, %118 ], [ %.071, %102 ], [ %.071, %92 ], [ %.071, %89 ], [ %.071, %88 ], [ %.071, %85 ], [ %.071, %84 ], [ %.071, %81 ], [ %.071, %80 ], [ %.071, %70 ], [ %.071, %60 ], [ %59, %58 ], [ %.071, %47 ], [ %.071, %43 ], [ 0, %42 ], [ %.071, %40 ], [ %.071, %39 ], [ %.071, %27 ], [ %.071, %17 ], [ %.071, %14 ]
  %.069.be = phi i32 [ %.069, %13 ], [ %.069, %443 ], [ %.069, %441 ], [ %.069, %439 ], [ %.069, %438 ], [ %.069, %437 ], [ %.069, %435 ], [ %.069, %434 ], [ %.069, %433 ], [ %.069, %432 ], [ %.069, %430 ], [ %.069, %429 ], [ %.069, %428 ], [ 1, %427 ], [ %.069, %424 ], [ %.069, %413 ], [ %.069, %403 ], [ %.069, %402 ], [ %.069, %401 ], [ %.069, %390 ], [ %.069, %380 ], [ %.069, %379 ], [ %.069, %378 ], [ %.069, %367 ], [ %.069, %357 ], [ %.069, %356 ], [ %.069, %355 ], [ %.069, %354 ], [ %.069, %350 ], [ %.069, %344 ], [ %.069, %342 ], [ %.069, %340 ], [ %.069, %324 ], [ %.069, %314 ], [ %.069, %312 ], [ %.069, %300 ], [ %.069, %290 ], [ %.069, %289 ], [ %.069, %286 ], [ %.069, %285 ], [ %.069, %284 ], [ %.069, %281 ], [ %.069, %280 ], [ %.069, %270 ], [ %.069, %260 ], [ %.069, %259 ], [ %.069, %258 ], [ %.069, %248 ], [ %.069, %238 ], [ %.069, %236 ], [ %.069, %222 ], [ %.069, %212 ], [ %.069, %210 ], [ %.069, %198 ], [ %.069, %188 ], [ %.069, %187 ], [ %186, %185 ], [ %.069, %184 ], [ %.069, %182 ], [ %.069, %181 ], [ %.069, %180 ], [ %.069, %170 ], [ %.069, %160 ], [ %.069, %159 ], [ %.069, %149 ], [ %.069, %139 ], [ %.069, %127 ], [ %.069, %120 ], [ %.069, %118 ], [ %.069, %102 ], [ %.069, %92 ], [ %.069, %89 ], [ %.069, %88 ], [ %.069, %85 ], [ %.069, %84 ], [ %.069, %81 ], [ %.069, %80 ], [ 1, %70 ], [ %.069, %60 ], [ %.069, %58 ], [ %.069, %47 ], [ %.069, %43 ], [ %.069, %42 ], [ %.069, %40 ], [ %.069, %39 ], [ %.069, %27 ], [ %.069, %17 ], [ %.069, %14 ]
  %.067.be = phi i32 [ %.067, %13 ], [ %.067, %443 ], [ %.067, %441 ], [ %.067, %439 ], [ %.067, %438 ], [ %.067, %437 ], [ %.067, %435 ], [ %.067, %434 ], [ %.067, %433 ], [ %.067, %432 ], [ %.067, %430 ], [ %.067, %429 ], [ %.067, %428 ], [ %.067, %427 ], [ %.067, %424 ], [ %.067, %413 ], [ %.067, %403 ], [ %.067, %402 ], [ %.067, %401 ], [ %.067, %390 ], [ %.067, %380 ], [ %.067, %379 ], [ %.067, %378 ], [ %.067, %367 ], [ %.067, %357 ], [ %.067, %356 ], [ %.067, %355 ], [ %.067, %354 ], [ %.067, %350 ], [ %.067, %344 ], [ %.067, %342 ], [ %.067, %340 ], [ %.067, %324 ], [ %.067, %314 ], [ %.067, %312 ], [ %.067, %300 ], [ %.067, %290 ], [ %.067, %289 ], [ %.067, %286 ], [ %.067, %285 ], [ %.067, %284 ], [ %.067, %281 ], [ %.067, %280 ], [ %.067, %270 ], [ %.067, %260 ], [ %.067, %259 ], [ %.067, %258 ], [ %.067, %248 ], [ %.067, %238 ], [ %.067, %236 ], [ %.067, %222 ], [ %.067, %212 ], [ %.067, %210 ], [ %.067, %198 ], [ %.067, %188 ], [ %.067, %187 ], [ %.067, %185 ], [ %.067, %184 ], [ %183, %182 ], [ %.067, %181 ], [ %.067, %180 ], [ %.067, %170 ], [ %.067, %160 ], [ %.067, %159 ], [ %.067, %149 ], [ %.067, %139 ], [ %.067, %127 ], [ %.067, %120 ], [ %.067, %118 ], [ %.067, %102 ], [ %.067, %92 ], [ %.067, %89 ], [ %.067, %88 ], [ %.067, %85 ], [ 1, %84 ], [ %.067, %81 ], [ %.067, %80 ], [ %.067, %70 ], [ %.067, %60 ], [ %.067, %58 ], [ %.067, %47 ], [ %.067, %43 ], [ %.067, %42 ], [ %.067, %40 ], [ %.067, %39 ], [ %.067, %27 ], [ %.067, %17 ], [ %.067, %14 ]
  %.065.be = phi i32 [ %.065, %13 ], [ %.065, %443 ], [ %.065, %441 ], [ %.065, %439 ], [ %.065, %438 ], [ %.065, %437 ], [ %.065, %435 ], [ %.065, %434 ], [ %.065, %433 ], [ %.065, %432 ], [ %431, %430 ], [ %.065, %429 ], [ %.065, %428 ], [ %.065, %427 ], [ %.065, %424 ], [ %.065, %413 ], [ %.065, %403 ], [ %.065, %402 ], [ %.065, %401 ], [ %.065, %390 ], [ %.065, %380 ], [ %.065, %379 ], [ %.065, %378 ], [ %.065, %367 ], [ %.065, %357 ], [ %.065, %356 ], [ %.065, %355 ], [ %.065, %354 ], [ %.065, %350 ], [ %.065, %344 ], [ %.065, %342 ], [ %.065, %340 ], [ %.065, %324 ], [ %.065, %314 ], [ %.065, %312 ], [ %.065, %300 ], [ %.065, %290 ], [ %.065, %289 ], [ %.065, %286 ], [ %.065, %285 ], [ %.065, %284 ], [ %.065, %281 ], [ %.065, %280 ], [ %.065, %270 ], [ %.065, %260 ], [ %.065, %259 ], [ %.065, %258 ], [ %.065, %248 ], [ %.065, %238 ], [ %.065, %236 ], [ %.065, %222 ], [ %.065, %212 ], [ %.065, %210 ], [ %.065, %198 ], [ %.065, %188 ], [ %.065, %187 ], [ %.065, %185 ], [ %.065, %184 ], [ %.065, %182 ], [ %.065, %181 ], [ %.065, %180 ], [ %.neg77, %170 ], [ %.065, %160 ], [ %.065, %159 ], [ %.065, %149 ], [ %.065, %139 ], [ %.065, %127 ], [ %.065, %120 ], [ %.065, %118 ], [ %.065, %102 ], [ %.065, %92 ], [ %.065, %89 ], [ 1, %88 ], [ %.065, %85 ], [ %.065, %84 ], [ %.065, %81 ], [ %.065, %80 ], [ %.065, %70 ], [ %.065, %60 ], [ %.065, %58 ], [ %.065, %47 ], [ %.065, %43 ], [ %.065, %42 ], [ %.065, %40 ], [ %.065, %39 ], [ %.065, %27 ], [ %.065, %17 ], [ %.065, %14 ]
  %.063.be = phi i8 [ %.063, %13 ], [ %.063, %443 ], [ %.063, %441 ], [ %.063, %439 ], [ %.063, %438 ], [ %.063, %437 ], [ %.063, %435 ], [ 1, %434 ], [ %.063, %433 ], [ %.063, %432 ], [ %.063, %430 ], [ %.063, %429 ], [ %.063, %428 ], [ %.063, %427 ], [ %.063, %424 ], [ %.063, %413 ], [ %.063, %403 ], [ %.063, %402 ], [ %.063, %401 ], [ %.063, %390 ], [ %.063, %380 ], [ %.063, %379 ], [ %.063, %378 ], [ %.063, %367 ], [ %.063, %357 ], [ %.063, %356 ], [ %.063, %355 ], [ %.063, %354 ], [ %.063, %350 ], [ %.063, %344 ], [ %.063, %342 ], [ %.063, %340 ], [ %.063, %324 ], [ %.063, %314 ], [ %.063, %312 ], [ %.063, %300 ], [ %.063, %290 ], [ %.063, %289 ], [ %.063, %286 ], [ %.063, %285 ], [ %.063, %284 ], [ %.063, %281 ], [ %.063, %280 ], [ %.063, %270 ], [ %.063, %260 ], [ %.063, %259 ], [ %.063, %258 ], [ 1, %248 ], [ %.063, %238 ], [ %.063, %236 ], [ %.063, %222 ], [ %.063, %212 ], [ %.063, %210 ], [ %.063, %198 ], [ %.063, %188 ], [ 0, %187 ], [ %.063, %185 ], [ %.063, %184 ], [ %.063, %182 ], [ %.063, %181 ], [ %.063, %180 ], [ %.063, %170 ], [ %.063, %160 ], [ %.063, %159 ], [ %.063, %149 ], [ %.063, %139 ], [ %.063, %127 ], [ %.063, %120 ], [ %.063, %118 ], [ %.063, %102 ], [ %.063, %92 ], [ %.063, %89 ], [ %.063, %88 ], [ %.063, %85 ], [ %.063, %84 ], [ %.063, %81 ], [ %.063, %80 ], [ %.063, %70 ], [ %.063, %60 ], [ %.063, %58 ], [ %.063, %47 ], [ %.063, %43 ], [ %.063, %42 ], [ %.063, %40 ], [ %.063, %39 ], [ %.063, %27 ], [ %.063, %17 ], [ %.063, %14 ]
  %.061.be = phi i32 [ %.061, %13 ], [ %.061, %443 ], [ %.061, %441 ], [ %.061, %439 ], [ %.061, %438 ], [ %.061, %437 ], [ %436, %435 ], [ %.061, %434 ], [ %.061, %433 ], [ %.061, %432 ], [ %.061, %430 ], [ %.061, %429 ], [ %.061, %428 ], [ %.061, %427 ], [ %.061, %424 ], [ %.061, %413 ], [ %.061, %403 ], [ %.061, %402 ], [ %.061, %401 ], [ %.061, %390 ], [ %.061, %380 ], [ %.061, %379 ], [ %.061, %378 ], [ %.061, %367 ], [ %.061, %357 ], [ %.061, %356 ], [ %.061, %355 ], [ %.061, %354 ], [ %.061, %350 ], [ %.061, %344 ], [ %.061, %342 ], [ %.061, %340 ], [ %.061, %324 ], [ %.061, %314 ], [ %.061, %312 ], [ %.061, %300 ], [ %.061, %290 ], [ %.061, %289 ], [ %.061, %286 ], [ %.061, %285 ], [ %.061, %284 ], [ %.061, %281 ], [ %.061, %280 ], [ %.neg, %270 ], [ %.061, %260 ], [ %.061, %259 ], [ %.061, %258 ], [ %.061, %248 ], [ %.061, %238 ], [ %.061, %236 ], [ %.061, %222 ], [ %.061, %212 ], [ %.061, %210 ], [ %.061, %198 ], [ %.061, %188 ], [ 1, %187 ], [ %.061, %185 ], [ %.061, %184 ], [ %.061, %182 ], [ %.061, %181 ], [ %.061, %180 ], [ %.061, %170 ], [ %.061, %160 ], [ %.061, %159 ], [ %.061, %149 ], [ %.061, %139 ], [ %.061, %127 ], [ %.061, %120 ], [ %.061, %118 ], [ %.061, %102 ], [ %.061, %92 ], [ %.061, %89 ], [ %.061, %88 ], [ %.061, %85 ], [ %.061, %84 ], [ %.061, %81 ], [ %.061, %80 ], [ %.061, %70 ], [ %.061, %60 ], [ %.061, %58 ], [ %.061, %47 ], [ %.061, %43 ], [ %.061, %42 ], [ %.061, %40 ], [ %.061, %39 ], [ %.061, %27 ], [ %.061, %17 ], [ %.061, %14 ]
  %.059.be = phi i32 [ %.059, %13 ], [ %.059, %443 ], [ %442, %441 ], [ %.059, %439 ], [ %.059, %438 ], [ %.059, %437 ], [ %.059, %435 ], [ %.059, %434 ], [ %.059, %433 ], [ %.059, %432 ], [ %.059, %430 ], [ %.059, %429 ], [ %.059, %428 ], [ %.059, %427 ], [ %.059, %424 ], [ %.059, %413 ], [ %.059, %403 ], [ %.059, %402 ], [ %.059, %401 ], [ %391, %390 ], [ %.059, %380 ], [ %.059, %379 ], [ %.059, %378 ], [ %.059, %367 ], [ %.059, %357 ], [ %.059, %356 ], [ %.059, %355 ], [ %.059, %354 ], [ %.059, %350 ], [ %.059, %344 ], [ %.059, %342 ], [ %.059, %340 ], [ %.059, %324 ], [ %.059, %314 ], [ %.059, %312 ], [ %.059, %300 ], [ %.059, %290 ], [ %.059, %289 ], [ %.059, %286 ], [ 1, %285 ], [ %.059, %284 ], [ %.059, %281 ], [ %.059, %280 ], [ %.059, %270 ], [ %.059, %260 ], [ %.059, %259 ], [ %.059, %258 ], [ %.059, %248 ], [ %.059, %238 ], [ %.059, %236 ], [ %.059, %222 ], [ %.059, %212 ], [ %.059, %210 ], [ %.059, %198 ], [ %.059, %188 ], [ %.059, %187 ], [ %.059, %185 ], [ %.059, %184 ], [ %.059, %182 ], [ %.059, %181 ], [ %.059, %180 ], [ %.059, %170 ], [ %.059, %160 ], [ %.059, %159 ], [ %.059, %149 ], [ %.059, %139 ], [ %.059, %127 ], [ %.059, %120 ], [ %.059, %118 ], [ %.059, %102 ], [ %.059, %92 ], [ %.059, %89 ], [ %.059, %88 ], [ %.059, %85 ], [ %.059, %84 ], [ %.059, %81 ], [ %.059, %80 ], [ %.059, %70 ], [ %.059, %60 ], [ %.059, %58 ], [ %.059, %47 ], [ %.059, %43 ], [ %.059, %42 ], [ %.059, %40 ], [ %.059, %39 ], [ %.059, %27 ], [ %.059, %17 ], [ %.059, %14 ]
  %.057.be = phi i32 [ %.057, %13 ], [ %.057, %443 ], [ %.057, %441 ], [ %440, %439 ], [ %.057, %438 ], [ %.057, %437 ], [ %.057, %435 ], [ %.057, %434 ], [ %.057, %433 ], [ %.057, %432 ], [ %.057, %430 ], [ %.057, %429 ], [ %.057, %428 ], [ %.057, %427 ], [ %.057, %424 ], [ %.057, %413 ], [ %.057, %403 ], [ %.057, %402 ], [ %.057, %401 ], [ %.057, %390 ], [ %.057, %380 ], [ %.057, %379 ], [ %.057, %378 ], [ %368, %367 ], [ %.057, %357 ], [ %.057, %356 ], [ %.057, %355 ], [ %.057, %354 ], [ %.057, %350 ], [ %.057, %344 ], [ %.057, %342 ], [ %.057, %340 ], [ %.057, %324 ], [ %.057, %314 ], [ %.057, %312 ], [ %.057, %300 ], [ %.057, %290 ], [ 1, %289 ], [ %.057, %286 ], [ %.057, %285 ], [ %.057, %284 ], [ %.057, %281 ], [ %.057, %280 ], [ %.057, %270 ], [ %.057, %260 ], [ %.057, %259 ], [ %.057, %258 ], [ %.057, %248 ], [ %.057, %238 ], [ %.057, %236 ], [ %.057, %222 ], [ %.057, %212 ], [ %.057, %210 ], [ %.057, %198 ], [ %.057, %188 ], [ %.057, %187 ], [ %.057, %185 ], [ %.057, %184 ], [ %.057, %182 ], [ %.057, %181 ], [ %.057, %180 ], [ %.057, %170 ], [ %.057, %160 ], [ %.057, %159 ], [ %.057, %149 ], [ %.057, %139 ], [ %.057, %127 ], [ %.057, %120 ], [ %.057, %118 ], [ %.057, %102 ], [ %.057, %92 ], [ %.057, %89 ], [ %.057, %88 ], [ %.057, %85 ], [ %.057, %84 ], [ %.057, %81 ], [ %.057, %80 ], [ %.057, %70 ], [ %.057, %60 ], [ %.057, %58 ], [ %.057, %47 ], [ %.057, %43 ], [ %.057, %42 ], [ %.057, %40 ], [ %.057, %39 ], [ %.057, %27 ], [ %.057, %17 ], [ %.057, %14 ]
  %.0.be = phi i32 [ %.0, %13 ], [ -320765068, %443 ], [ 1486191283, %441 ], [ -940500117, %439 ], [ 1028469605, %438 ], [ 1607977601, %437 ], [ -407760814, %435 ], [ -1053399799, %434 ], [ 1414966863, %433 ], [ -1931860528, %432 ], [ 336749810, %430 ], [ 1516727360, %429 ], [ 1507684912, %428 ], [ -918857385, %427 ], [ -1957772796, %424 ], [ %422, %413 ], [ %412, %403 ], [ -682557183, %402 ], [ -757976261, %401 ], [ %400, %390 ], [ %389, %380 ], [ -1170481441, %379 ], [ 1416296448, %378 ], [ %377, %367 ], [ %366, %357 ], [ 1865519444, %356 ], [ -546105842, %355 ], [ -546105842, %354 ], [ %353, %350 ], [ 197296092, %344 ], [ 197296092, %342 ], [ %341, %340 ], [ %339, %324 ], [ %323, %314 ], [ %313, %312 ], [ %311, %300 ], [ %299, %290 ], [ 1416296448, %289 ], [ %288, %286 ], [ -757976261, %285 ], [ -682557183, %284 ], [ %283, %281 ], [ 636148960, %280 ], [ %279, %270 ], [ %269, %260 ], [ 692724594, %259 ], [ -1356287773, %258 ], [ %257, %248 ], [ %247, %238 ], [ %237, %236 ], [ %235, %222 ], [ %221, %212 ], [ %211, %210 ], [ %209, %198 ], [ %197, %188 ], [ 636148960, %187 ], [ 1622359349, %185 ], [ -534682618, %184 ], [ 1059251545, %182 ], [ 572551496, %181 ], [ -1612673218, %180 ], [ %179, %170 ], [ %169, %160 ], [ -1749028597, %159 ], [ %158, %149 ], [ %148, %139 ], [ -1394139909, %127 ], [ %126, %120 ], [ %119, %118 ], [ %117, %102 ], [ %101, %92 ], [ %91, %89 ], [ -1612673218, %88 ], [ %87, %85 ], [ 1059251545, %84 ], [ %83, %81 ], [ 1622359349, %80 ], [ %79, %70 ], [ %69, %60 ], [ -775708172, %58 ], [ -690532064, %47 ], [ %46, %43 ], [ -775708172, %42 ], [ -425997544, %40 ], [ -1748204081, %39 ], [ %38, %27 ], [ %26, %17 ], [ %16, %14 ]
  br label %13

14:                                               ; preds = %13
  %15 = load i32, i32* %6, align 4
  %.not82 = icmp sgt i32 %.073, %15
  %16 = select i1 %.not82, i32 1463106785, i32 1146350958
  br label %.backedge

17:                                               ; preds = %13
  %18 = load i32, i32* @x.7, align 4
  %19 = load i32, i32* @y.8, align 4
  %20 = add i32 %18, -1
  %21 = mul i32 %20, %18
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %24, %23
  %26 = select i1 %25, i32 -1957772796, i32 -1838654558
  br label %.backedge

27:                                               ; preds = %13
  %28 = sext i32 %.073 to i64
  %29 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %28, i64 %28
  store i64 0, i64* %29, align 8
  %30 = load i32, i32* @x.7, align 4
  %31 = load i32, i32* @y.8, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 415188688, i32 -1838654558
  br label %.backedge

39:                                               ; preds = %13
  br label %.backedge

40:                                               ; preds = %13
  %41 = add i32 %.073, 1
  br label %.backedge

42:                                               ; preds = %13
  br label %.backedge

43:                                               ; preds = %13
  %44 = load i32, i32* %7, align 4
  %45 = icmp slt i32 %.071, %44
  %46 = select i1 %45, i32 -822226447, i32 182359030
  br label %.backedge

47:                                               ; preds = %13
  %48 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %8, i32* nonnull %9, i32* nonnull %10)
  %49 = load i32, i32* %8, align 4
  %50 = add i32 %49, 1
  store i32 %50, i32* %8, align 4
  %51 = load i32, i32* %9, align 4
  %52 = add i32 %51, 1
  store i32 %52, i32* %9, align 4
  %53 = load i32, i32* %10, align 4
  %54 = sext i32 %53 to i64
  %55 = sext i32 %50 to i64
  %56 = sext i32 %52 to i64
  %57 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %55, i64 %56
  store i64 %54, i64* %57, align 8
  br label %.backedge

58:                                               ; preds = %13
  %59 = add i32 %.071, 1
  br label %.backedge

60:                                               ; preds = %13
  %61 = load i32, i32* @x.7, align 4
  %62 = load i32, i32* @y.8, align 4
  %63 = add i32 %61, -1
  %64 = mul i32 %63, %61
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %67, %66
  %69 = select i1 %68, i32 -918857385, i32 -1928142369
  br label %.backedge

70:                                               ; preds = %13
  %71 = load i32, i32* @x.7, align 4
  %72 = load i32, i32* @y.8, align 4
  %73 = add i32 %71, -1
  %74 = mul i32 %73, %71
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %77, %76
  %79 = select i1 %78, i32 760784153, i32 -1928142369
  br label %.backedge

80:                                               ; preds = %13
  br label %.backedge

81:                                               ; preds = %13
  %82 = load i32, i32* %6, align 4
  %.not81 = icmp sgt i32 %.069, %82
  %83 = select i1 %.not81, i32 594643612, i32 -917546424
  br label %.backedge

84:                                               ; preds = %13
  br label %.backedge

85:                                               ; preds = %13
  %86 = load i32, i32* %6, align 4
  %.not80 = icmp sgt i32 %.067, %86
  %87 = select i1 %.not80, i32 225698261, i32 1552209746
  br label %.backedge

88:                                               ; preds = %13
  br label %.backedge

89:                                               ; preds = %13
  %90 = load i32, i32* %6, align 4
  %.not79 = icmp sgt i32 %.065, %90
  %91 = select i1 %.not79, i32 -987285607, i32 -596822909
  br label %.backedge

92:                                               ; preds = %13
  %93 = load i32, i32* @x.7, align 4
  %94 = load i32, i32* @y.8, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 1507684912, i32 1494996669
  br label %.backedge

102:                                              ; preds = %13
  %103 = sext i32 %.067 to i64
  %104 = sext i32 %.069 to i64
  %105 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %103, i64 %104
  %106 = load i64, i64* %105, align 8
  %107 = load i64, i64* @INF, align 8
  %108 = icmp ne i64 %106, %107
  store i1 %108, i1* %5, align 1
  %109 = load i32, i32* @x.7, align 4
  %110 = load i32, i32* @y.8, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 -1962070923, i32 1494996669
  br label %.backedge

118:                                              ; preds = %13
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %119 = select i1 %.0..0..0., i32 1749616514, i32 -1394139909
  br label %.backedge

120:                                              ; preds = %13
  %121 = sext i32 %.069 to i64
  %122 = sext i32 %.065 to i64
  %123 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %121, i64 %122
  %124 = load i64, i64* %123, align 8
  %125 = load i64, i64* @INF, align 8
  %.not78 = icmp eq i64 %124, %125
  %126 = select i1 %.not78, i32 -1394139909, i32 -1720429616
  br label %.backedge

127:                                              ; preds = %13
  %128 = sext i32 %.067 to i64
  %129 = sext i32 %.065 to i64
  %130 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %128, i64 %129
  %131 = sext i32 %.069 to i64
  %132 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %128, i64 %131
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %131, i64 %129
  %135 = load i64, i64* %134, align 8
  %136 = add i64 %135, %133
  store i64 %136, i64* %11, align 8
  %137 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %130, i64* nonnull dereferenceable(8) %11)
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %130, align 8
  br label %.backedge

139:                                              ; preds = %13
  %140 = load i32, i32* @x.7, align 4
  %141 = load i32, i32* @y.8, align 4
  %142 = add i32 %140, -1
  %143 = mul i32 %142, %140
  %144 = and i32 %143, 1
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %146, %145
  %148 = select i1 %147, i32 1516727360, i32 -1574843645
  br label %.backedge

149:                                              ; preds = %13
  %150 = load i32, i32* @x.7, align 4
  %151 = load i32, i32* @y.8, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 1089047414, i32 -1574843645
  br label %.backedge

159:                                              ; preds = %13
  br label %.backedge

160:                                              ; preds = %13
  %161 = load i32, i32* @x.7, align 4
  %162 = load i32, i32* @y.8, align 4
  %163 = add i32 %161, -1
  %164 = mul i32 %163, %161
  %165 = and i32 %164, 1
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %167, %166
  %169 = select i1 %168, i32 336749810, i32 -1608583106
  br label %.backedge

170:                                              ; preds = %13
  %.neg77 = add i32 %.065, 1
  %171 = load i32, i32* @x.7, align 4
  %172 = load i32, i32* @y.8, align 4
  %173 = add i32 %171, -1
  %174 = mul i32 %173, %171
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %177, %176
  %179 = select i1 %178, i32 -18768609, i32 -1608583106
  br label %.backedge

180:                                              ; preds = %13
  br label %.backedge

181:                                              ; preds = %13
  br label %.backedge

182:                                              ; preds = %13
  %183 = add i32 %.067, 1
  br label %.backedge

184:                                              ; preds = %13
  br label %.backedge

185:                                              ; preds = %13
  %186 = add i32 %.069, 1
  br label %.backedge

187:                                              ; preds = %13
  br label %.backedge

188:                                              ; preds = %13
  %189 = load i32, i32* @x.7, align 4
  %190 = load i32, i32* @y.8, align 4
  %191 = add i32 %189, -1
  %192 = mul i32 %191, %189
  %193 = and i32 %192, 1
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %195, %194
  %197 = select i1 %196, i32 -1931860528, i32 1019298208
  br label %.backedge

198:                                              ; preds = %13
  %199 = load i32, i32* %6, align 4
  %200 = icmp sle i32 %.061, %199
  store i1 %200, i1* %4, align 1
  %201 = load i32, i32* @x.7, align 4
  %202 = load i32, i32* @y.8, align 4
  %203 = add i32 %201, -1
  %204 = mul i32 %203, %201
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %207, %206
  %209 = select i1 %208, i32 -730472914, i32 1019298208
  br label %.backedge

210:                                              ; preds = %13
  %.0..0..0.53 = load volatile i1, i1* %4, align 1
  %211 = select i1 %.0..0..0.53, i32 1485935736, i32 -1356287773
  br label %.backedge

212:                                              ; preds = %13
  %213 = load i32, i32* @x.7, align 4
  %214 = load i32, i32* @y.8, align 4
  %215 = add i32 %213, -1
  %216 = mul i32 %215, %213
  %217 = and i32 %216, 1
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %219, %218
  %221 = select i1 %220, i32 1414966863, i32 519494648
  br label %.backedge

222:                                              ; preds = %13
  %223 = sext i32 %.061 to i64
  %224 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %223, i64 %223
  %225 = load i64, i64* %224, align 8
  %226 = icmp slt i64 %225, 0
  store i1 %226, i1* %3, align 1
  %227 = load i32, i32* @x.7, align 4
  %228 = load i32, i32* @y.8, align 4
  %229 = add i32 %227, -1
  %230 = mul i32 %229, %227
  %231 = and i32 %230, 1
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %233, %232
  %235 = select i1 %234, i32 666346700, i32 519494648
  br label %.backedge

236:                                              ; preds = %13
  %.0..0..0.54 = load volatile i1, i1* %3, align 1
  %237 = select i1 %.0..0..0.54, i32 -1626255794, i32 940787389
  br label %.backedge

238:                                              ; preds = %13
  %239 = load i32, i32* @x.7, align 4
  %240 = load i32, i32* @y.8, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 -1053399799, i32 -1467465120
  br label %.backedge

248:                                              ; preds = %13
  %249 = load i32, i32* @x.7, align 4
  %250 = load i32, i32* @y.8, align 4
  %251 = add i32 %249, -1
  %252 = mul i32 %251, %249
  %253 = and i32 %252, 1
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %255, %254
  %257 = select i1 %256, i32 -1172030068, i32 -1467465120
  br label %.backedge

258:                                              ; preds = %13
  br label %.backedge

259:                                              ; preds = %13
  br label %.backedge

260:                                              ; preds = %13
  %261 = load i32, i32* @x.7, align 4
  %262 = load i32, i32* @y.8, align 4
  %263 = add i32 %261, -1
  %264 = mul i32 %263, %261
  %265 = and i32 %264, 1
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %267, %266
  %269 = select i1 %268, i32 -407760814, i32 -2073728548
  br label %.backedge

270:                                              ; preds = %13
  %.neg = add i32 %.061, 1
  %271 = load i32, i32* @x.7, align 4
  %272 = load i32, i32* @y.8, align 4
  %273 = add i32 %271, -1
  %274 = mul i32 %273, %271
  %275 = and i32 %274, 1
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %277, %276
  %279 = select i1 %278, i32 1293475087, i32 -2073728548
  br label %.backedge

280:                                              ; preds = %13
  br label %.backedge

281:                                              ; preds = %13
  %282 = and i8 %.063, 1
  %.not76 = icmp eq i8 %282, 0
  %283 = select i1 %.not76, i32 -1280826218, i32 315699078
  br label %.backedge

284:                                              ; preds = %13
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @str, i64 0, i64 0))
  br label %.backedge

285:                                              ; preds = %13
  br label %.backedge

286:                                              ; preds = %13
  %287 = load i32, i32* %6, align 4
  %.not = icmp sgt i32 %.059, %287
  %288 = select i1 %.not, i32 -563742793, i32 -765376119
  br label %.backedge

289:                                              ; preds = %13
  br label %.backedge

290:                                              ; preds = %13
  %291 = load i32, i32* @x.7, align 4
  %292 = load i32, i32* @y.8, align 4
  %293 = add i32 %291, -1
  %294 = mul i32 %293, %291
  %295 = and i32 %294, 1
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %297, %296
  %299 = select i1 %298, i32 1607977601, i32 1443808687
  br label %.backedge

300:                                              ; preds = %13
  %301 = load i32, i32* %6, align 4
  %302 = icmp sle i32 %.057, %301
  store i1 %302, i1* %2, align 1
  %303 = load i32, i32* @x.7, align 4
  %304 = load i32, i32* @y.8, align 4
  %305 = add i32 %303, -1
  %306 = mul i32 %305, %303
  %307 = and i32 %306, 1
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %309, %308
  %311 = select i1 %310, i32 -1976843257, i32 1443808687
  br label %.backedge

312:                                              ; preds = %13
  %.0..0..0.55 = load volatile i1, i1* %2, align 1
  %313 = select i1 %.0..0..0.55, i32 93867317, i32 -1996651947
  br label %.backedge

314:                                              ; preds = %13
  %315 = load i32, i32* @x.7, align 4
  %316 = load i32, i32* @y.8, align 4
  %317 = add i32 %315, -1
  %318 = mul i32 %317, %315
  %319 = and i32 %318, 1
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %321, %320
  %323 = select i1 %322, i32 1028469605, i32 -733251173
  br label %.backedge

324:                                              ; preds = %13
  %325 = sext i32 %.059 to i64
  %326 = sext i32 %.057 to i64
  %327 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %325, i64 %326
  %328 = load i64, i64* %327, align 8
  %329 = load i64, i64* @INF, align 8
  %330 = icmp eq i64 %328, %329
  store i1 %330, i1* %1, align 1
  %331 = load i32, i32* @x.7, align 4
  %332 = load i32, i32* @y.8, align 4
  %333 = add i32 %331, -1
  %334 = mul i32 %333, %331
  %335 = and i32 %334, 1
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %337, %336
  %339 = select i1 %338, i32 -115889275, i32 -733251173
  br label %.backedge

340:                                              ; preds = %13
  %.0..0..0.56 = load volatile i1, i1* %1, align 1
  %341 = select i1 %.0..0..0.56, i32 -73737365, i32 1884822910
  br label %.backedge

342:                                              ; preds = %13
  %343 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  br label %.backedge

344:                                              ; preds = %13
  %345 = sext i32 %.059 to i64
  %346 = sext i32 %.057 to i64
  %347 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %345, i64 %346
  %348 = load i64, i64* %347, align 8
  %349 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 %348)
  br label %.backedge

350:                                              ; preds = %13
  %351 = load i32, i32* %6, align 4
  %352 = icmp eq i32 %.057, %351
  %353 = select i1 %352, i32 -992985980, i32 338668907
  br label %.backedge

354:                                              ; preds = %13
  %putchar75 = call i32 @putchar(i32 10)
  br label %.backedge

355:                                              ; preds = %13
  %putchar = call i32 @putchar(i32 32)
  br label %.backedge

356:                                              ; preds = %13
  br label %.backedge

357:                                              ; preds = %13
  %358 = load i32, i32* @x.7, align 4
  %359 = load i32, i32* @y.8, align 4
  %360 = add i32 %358, -1
  %361 = mul i32 %360, %358
  %362 = and i32 %361, 1
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %364, %363
  %366 = select i1 %365, i32 -940500117, i32 -317762491
  br label %.backedge

367:                                              ; preds = %13
  %368 = add i32 %.057, 1
  %369 = load i32, i32* @x.7, align 4
  %370 = load i32, i32* @y.8, align 4
  %371 = add i32 %369, -1
  %372 = mul i32 %371, %369
  %373 = and i32 %372, 1
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %375, %374
  %377 = select i1 %376, i32 -410308085, i32 -317762491
  br label %.backedge

378:                                              ; preds = %13
  br label %.backedge

379:                                              ; preds = %13
  br label %.backedge

380:                                              ; preds = %13
  %381 = load i32, i32* @x.7, align 4
  %382 = load i32, i32* @y.8, align 4
  %383 = add i32 %381, -1
  %384 = mul i32 %383, %381
  %385 = and i32 %384, 1
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %387, %386
  %389 = select i1 %388, i32 1486191283, i32 -1057882172
  br label %.backedge

390:                                              ; preds = %13
  %391 = add i32 %.059, 1
  %392 = load i32, i32* @x.7, align 4
  %393 = load i32, i32* @y.8, align 4
  %394 = add i32 %392, -1
  %395 = mul i32 %394, %392
  %396 = and i32 %395, 1
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %398, %397
  %400 = select i1 %399, i32 631348328, i32 -1057882172
  br label %.backedge

401:                                              ; preds = %13
  br label %.backedge

402:                                              ; preds = %13
  br label %.backedge

403:                                              ; preds = %13
  %404 = load i32, i32* @x.7, align 4
  %405 = load i32, i32* @y.8, align 4
  %406 = add i32 %404, -1
  %407 = mul i32 %406, %404
  %408 = and i32 %407, 1
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %410, %409
  %412 = select i1 %411, i32 -320765068, i32 1859959001
  br label %.backedge

413:                                              ; preds = %13
  %414 = load i32, i32* @x.7, align 4
  %415 = load i32, i32* @y.8, align 4
  %416 = add i32 %414, -1
  %417 = mul i32 %416, %414
  %418 = and i32 %417, 1
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %420, %419
  %422 = select i1 %421, i32 1884840363, i32 1859959001
  br label %.backedge

423:                                              ; preds = %13
  ret i32 0

424:                                              ; preds = %13
  %425 = sext i32 %.073 to i64
  %426 = getelementptr inbounds [105 x [105 x i64]], [105 x [105 x i64]]* @mp, i64 0, i64 %425, i64 %425
  store i64 0, i64* %426, align 8
  br label %.backedge

427:                                              ; preds = %13
  br label %.backedge

428:                                              ; preds = %13
  br label %.backedge

429:                                              ; preds = %13
  br label %.backedge

430:                                              ; preds = %13
  %431 = add i32 %.065, 1
  br label %.backedge

432:                                              ; preds = %13
  br label %.backedge

433:                                              ; preds = %13
  br label %.backedge

434:                                              ; preds = %13
  br label %.backedge

435:                                              ; preds = %13
  %436 = add i32 %.061, 1
  br label %.backedge

437:                                              ; preds = %13
  br label %.backedge

438:                                              ; preds = %13
  br label %.backedge

439:                                              ; preds = %13
  %440 = add i32 %.057, 1
  br label %.backedge

441:                                              ; preds = %13
  %442 = add i32 %.059, 1
  br label %.backedge

443:                                              ; preds = %13
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %1, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.07.ph = phi i64* [ undef, %2 ], [ %.07.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ 959152459, %2 ], [ -1293462492, %.outer.backedge ]
  br label %.outer9

.outer9:                                          ; preds = %.outer, %8
  %.0.ph10 = phi i32 [ %.0.ph, %.outer ], [ %10, %8 ]
  br label %7

7:                                                ; preds = %.outer9, %7
  switch i32 %.0.ph10, label %7 [
    i32 959152459, label %8
    i32 709677192, label %.outer.backedge
    i32 -1092974222, label %11
    i32 -1293462492, label %12
  ]

8:                                                ; preds = %7
  %.0..0..0.5 = load volatile i64, i64* %4, align 8
  %.0..0..0.6 = load volatile i64, i64* %3, align 8
  %9 = icmp slt i64 %.0..0..0.5, %.0..0..0.6
  %10 = select i1 %9, i32 709677192, i32 -1092974222
  br label %.outer9

11:                                               ; preds = %7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %7, %11
  %.07.ph.be = phi i64* [ %0, %11 ], [ %1, %7 ]
  br label %.outer

12:                                               ; preds = %7
  ret i64* %.07.ph
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s133671102.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.11, align 4
  %4 = load i32, i32* @y.12, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1337071432, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1337071432, label %11
    i32 -2036693100, label %14
    i32 1328464353, label %24
    i32 501223045, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -2036693100, i32 501223045
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.11, align 4
  %16 = load i32, i32* @y.12, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 1328464353, i32 501223045
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -2036693100, %25 ]
  br label %.outer
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
