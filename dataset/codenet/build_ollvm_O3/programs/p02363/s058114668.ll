; ModuleID = 'build_ollvm/programs/p02363/s058114668.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s058114668.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@wf = global [100 x [100 x i64]] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s058114668.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline uwtable
define void @_Z14warshall_floydv() local_unnamed_addr #0 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %3)
  br label %10

10:                                               ; preds = %.backedge, %0
  %.070 = phi i64 [ 0, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i64 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i64 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i64 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i64 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i64 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i64 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i64 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i64 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i64 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.0 = phi i32 [ -138947614, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -138947614, label %11
    i32 -796103102, label %15
    i32 1153898689, label %25
    i32 1539020711, label %35
    i32 -1371975510, label %36
    i32 1075275581, label %40
    i32 -451762505, label %42
    i32 863380910, label %44
    i32 -718691558, label %45
    i32 1652353376, label %47
    i32 -2111659488, label %48
    i32 -657839577, label %52
    i32 957770795, label %62
    i32 970158055, label %73
    i32 2023798034, label %74
    i32 -598330789, label %76
    i32 -796724854, label %78
    i32 1925263851, label %88
    i32 1976194571, label %100
    i32 966376088, label %102
    i32 -1373452252, label %114
    i32 784901902, label %116
    i32 1418368749, label %117
    i32 -77559851, label %121
    i32 244891916, label %131
    i32 -1255423448, label %141
    i32 947445354, label %142
    i32 209888513, label %146
    i32 -332517067, label %147
    i32 -1012032524, label %151
    i32 770272289, label %155
    i32 1152329386, label %159
    i32 1101403624, label %168
    i32 1003786209, label %178
    i32 291528123, label %188
    i32 149718699, label %189
    i32 1353915167, label %191
    i32 794332777, label %192
    i32 -174587862, label %194
    i32 1367162233, label %195
    i32 270576459, label %205
    i32 -747486783, label %216
    i32 1030860982, label %217
    i32 -708969678, label %218
    i32 -1014050286, label %222
    i32 444669344, label %227
    i32 1762103355, label %230
    i32 1844518281, label %231
    i32 -1405595878, label %232
    i32 2030108937, label %242
    i32 -1943881411, label %252
    i32 -1484347402, label %253
    i32 -2074204081, label %263
    i32 102701819, label %275
    i32 2146837543, label %277
    i32 560436629, label %282
    i32 -1670339448, label %284
    i32 1768609438, label %288
    i32 1158667057, label %298
    i32 -771508099, label %308
    i32 -637789615, label %309
    i32 -1874475232, label %313
    i32 1831327219, label %319
    i32 -720126144, label %329
    i32 369003594, label %340
    i32 160880835, label %341
    i32 736340029, label %345
    i32 -1838550393, label %355
    i32 192209851, label %365
    i32 1509850911, label %366
    i32 -267975323, label %367
    i32 1940129717, label %369
    i32 -1150848435, label %379
    i32 -1256262413, label %389
    i32 -208340231, label %390
    i32 1852597204, label %391
    i32 -1496034576, label %392
    i32 850193655, label %394
    i32 920348798, label %395
    i32 1172284158, label %396
    i32 1859375589, label %397
    i32 -1723731, label %399
    i32 -528926210, label %400
    i32 -338430250, label %401
    i32 -527316738, label %402
    i32 870932386, label %404
    i32 -1625638671, label %405
  ]

.backedge:                                        ; preds = %10, %405, %404, %402, %401, %400, %399, %397, %396, %395, %394, %392, %391, %389, %379, %369, %367, %366, %365, %355, %345, %341, %340, %329, %319, %313, %309, %308, %298, %288, %284, %282, %277, %275, %263, %253, %252, %242, %232, %231, %230, %227, %222, %218, %217, %216, %205, %195, %194, %192, %191, %189, %188, %178, %168, %159, %155, %151, %147, %146, %142, %141, %131, %121, %117, %116, %114, %102, %100, %88, %78, %76, %74, %73, %62, %52, %48, %47, %45, %44, %42, %40, %36, %35, %25, %15, %11
  %.070.be = phi i64 [ %.070, %10 ], [ %.070, %405 ], [ %.070, %404 ], [ %.070, %402 ], [ %.070, %401 ], [ %.070, %400 ], [ %.070, %399 ], [ %.070, %397 ], [ %.070, %396 ], [ %.070, %395 ], [ %.070, %394 ], [ %.070, %392 ], [ %.070, %391 ], [ %.070, %389 ], [ %.070, %379 ], [ %.070, %369 ], [ %.070, %367 ], [ %.070, %366 ], [ %.070, %365 ], [ %.070, %355 ], [ %.070, %345 ], [ %.070, %341 ], [ %.070, %340 ], [ %.070, %329 ], [ %.070, %319 ], [ %.070, %313 ], [ %.070, %309 ], [ %.070, %308 ], [ %.070, %298 ], [ %.070, %288 ], [ %.070, %284 ], [ %.070, %282 ], [ %.070, %277 ], [ %.070, %275 ], [ %.070, %263 ], [ %.070, %253 ], [ %.070, %252 ], [ %.070, %242 ], [ %.070, %232 ], [ %.070, %231 ], [ %.070, %230 ], [ %.070, %227 ], [ %.070, %222 ], [ %.070, %218 ], [ %.070, %217 ], [ %.070, %216 ], [ %.070, %205 ], [ %.070, %195 ], [ %.070, %194 ], [ %.070, %192 ], [ %.070, %191 ], [ %.070, %189 ], [ %.070, %188 ], [ %.070, %178 ], [ %.070, %168 ], [ %.070, %159 ], [ %.070, %155 ], [ %.070, %151 ], [ %.070, %147 ], [ %.070, %146 ], [ %.070, %142 ], [ %.070, %141 ], [ %.070, %131 ], [ %.070, %121 ], [ %.070, %117 ], [ %.070, %116 ], [ %.070, %114 ], [ %.070, %102 ], [ %.070, %100 ], [ %.070, %88 ], [ %.070, %78 ], [ %.070, %76 ], [ %.070, %74 ], [ %.070, %73 ], [ %.070, %62 ], [ %.070, %52 ], [ %.070, %48 ], [ %.070, %47 ], [ %46, %45 ], [ %.070, %44 ], [ %.070, %42 ], [ %.070, %40 ], [ %.070, %36 ], [ %.070, %35 ], [ %.070, %25 ], [ %.070, %15 ], [ %.070, %11 ]
  %.068.be = phi i64 [ %.068, %10 ], [ %.068, %405 ], [ %.068, %404 ], [ %.068, %402 ], [ %.068, %401 ], [ %.068, %400 ], [ %.068, %399 ], [ %.068, %397 ], [ %.068, %396 ], [ %.068, %395 ], [ %.068, %394 ], [ %.068, %392 ], [ 0, %391 ], [ %.068, %389 ], [ %.068, %379 ], [ %.068, %369 ], [ %.068, %367 ], [ %.068, %366 ], [ %.068, %365 ], [ %.068, %355 ], [ %.068, %345 ], [ %.068, %341 ], [ %.068, %340 ], [ %.068, %329 ], [ %.068, %319 ], [ %.068, %313 ], [ %.068, %309 ], [ %.068, %308 ], [ %.068, %298 ], [ %.068, %288 ], [ %.068, %284 ], [ %.068, %282 ], [ %.068, %277 ], [ %.068, %275 ], [ %.068, %263 ], [ %.068, %253 ], [ %.068, %252 ], [ %.068, %242 ], [ %.068, %232 ], [ %.068, %231 ], [ %.068, %230 ], [ %.068, %227 ], [ %.068, %222 ], [ %.068, %218 ], [ %.068, %217 ], [ %.068, %216 ], [ %.068, %205 ], [ %.068, %195 ], [ %.068, %194 ], [ %.068, %192 ], [ %.068, %191 ], [ %.068, %189 ], [ %.068, %188 ], [ %.068, %178 ], [ %.068, %168 ], [ %.068, %159 ], [ %.068, %155 ], [ %.068, %151 ], [ %.068, %147 ], [ %.068, %146 ], [ %.068, %142 ], [ %.068, %141 ], [ %.068, %131 ], [ %.068, %121 ], [ %.068, %117 ], [ %.068, %116 ], [ %.068, %114 ], [ %.068, %102 ], [ %.068, %100 ], [ %.068, %88 ], [ %.068, %78 ], [ %.068, %76 ], [ %.068, %74 ], [ %.068, %73 ], [ %.068, %62 ], [ %.068, %52 ], [ %.068, %48 ], [ %.068, %47 ], [ %.068, %45 ], [ %.068, %44 ], [ %43, %42 ], [ %.068, %40 ], [ %.068, %36 ], [ %.068, %35 ], [ 0, %25 ], [ %.068, %15 ], [ %.068, %11 ]
  %.066.be = phi i64 [ %.066, %10 ], [ %.066, %405 ], [ %.066, %404 ], [ %.066, %402 ], [ %.066, %401 ], [ %.066, %400 ], [ %.066, %399 ], [ %.066, %397 ], [ %.066, %396 ], [ %.066, %395 ], [ %.066, %394 ], [ %.066, %392 ], [ %.066, %391 ], [ %.066, %389 ], [ %.066, %379 ], [ %.066, %369 ], [ %.066, %367 ], [ %.066, %366 ], [ %.066, %365 ], [ %.066, %355 ], [ %.066, %345 ], [ %.066, %341 ], [ %.066, %340 ], [ %.066, %329 ], [ %.066, %319 ], [ %.066, %313 ], [ %.066, %309 ], [ %.066, %308 ], [ %.066, %298 ], [ %.066, %288 ], [ %.066, %284 ], [ %.066, %282 ], [ %.066, %277 ], [ %.066, %275 ], [ %.066, %263 ], [ %.066, %253 ], [ %.066, %252 ], [ %.066, %242 ], [ %.066, %232 ], [ %.066, %231 ], [ %.066, %230 ], [ %.066, %227 ], [ %.066, %222 ], [ %.066, %218 ], [ %.066, %217 ], [ %.066, %216 ], [ %.066, %205 ], [ %.066, %195 ], [ %.066, %194 ], [ %.066, %192 ], [ %.066, %191 ], [ %.066, %189 ], [ %.066, %188 ], [ %.066, %178 ], [ %.066, %168 ], [ %.066, %159 ], [ %.066, %155 ], [ %.066, %151 ], [ %.066, %147 ], [ %.066, %146 ], [ %.066, %142 ], [ %.066, %141 ], [ %.066, %131 ], [ %.066, %121 ], [ %.066, %117 ], [ %.066, %116 ], [ %.066, %114 ], [ %.066, %102 ], [ %.066, %100 ], [ %.066, %88 ], [ %.066, %78 ], [ %.066, %76 ], [ %75, %74 ], [ %.066, %73 ], [ %.066, %62 ], [ %.066, %52 ], [ %.066, %48 ], [ 0, %47 ], [ %.066, %45 ], [ %.066, %44 ], [ %.066, %42 ], [ %.066, %40 ], [ %.066, %36 ], [ %.066, %35 ], [ %.066, %25 ], [ %.066, %15 ], [ %.066, %11 ]
  %.064.be = phi i64 [ %.064, %10 ], [ %.064, %405 ], [ %.064, %404 ], [ %.064, %402 ], [ %.064, %401 ], [ %.064, %400 ], [ %.064, %399 ], [ %.064, %397 ], [ %.064, %396 ], [ %.064, %395 ], [ %.064, %394 ], [ %.064, %392 ], [ %.064, %391 ], [ %.064, %389 ], [ %.064, %379 ], [ %.064, %369 ], [ %.064, %367 ], [ %.064, %366 ], [ %.064, %365 ], [ %.064, %355 ], [ %.064, %345 ], [ %.064, %341 ], [ %.064, %340 ], [ %.064, %329 ], [ %.064, %319 ], [ %.064, %313 ], [ %.064, %309 ], [ %.064, %308 ], [ %.064, %298 ], [ %.064, %288 ], [ %.064, %284 ], [ %.064, %282 ], [ %.064, %277 ], [ %.064, %275 ], [ %.064, %263 ], [ %.064, %253 ], [ %.064, %252 ], [ %.064, %242 ], [ %.064, %232 ], [ %.064, %231 ], [ %.064, %230 ], [ %.064, %227 ], [ %.064, %222 ], [ %.064, %218 ], [ %.064, %217 ], [ %.064, %216 ], [ %.064, %205 ], [ %.064, %195 ], [ %.064, %194 ], [ %.064, %192 ], [ %.064, %191 ], [ %.064, %189 ], [ %.064, %188 ], [ %.064, %178 ], [ %.064, %168 ], [ %.064, %159 ], [ %.064, %155 ], [ %.064, %151 ], [ %.064, %147 ], [ %.064, %146 ], [ %.064, %142 ], [ %.064, %141 ], [ %.064, %131 ], [ %.064, %121 ], [ %.064, %117 ], [ %.064, %116 ], [ %115, %114 ], [ %.064, %102 ], [ %.064, %100 ], [ %.064, %88 ], [ %.064, %78 ], [ 0, %76 ], [ %.064, %74 ], [ %.064, %73 ], [ %.064, %62 ], [ %.064, %52 ], [ %.064, %48 ], [ %.064, %47 ], [ %.064, %45 ], [ %.064, %44 ], [ %.064, %42 ], [ %.064, %40 ], [ %.064, %36 ], [ %.064, %35 ], [ %.064, %25 ], [ %.064, %15 ], [ %.064, %11 ]
  %.062.be = phi i64 [ %.062, %10 ], [ %.062, %405 ], [ %.062, %404 ], [ %.062, %402 ], [ %.062, %401 ], [ %.062, %400 ], [ %.062, %399 ], [ %398, %397 ], [ %.062, %396 ], [ %.062, %395 ], [ %.062, %394 ], [ %.062, %392 ], [ %.062, %391 ], [ %.062, %389 ], [ %.062, %379 ], [ %.062, %369 ], [ %.062, %367 ], [ %.062, %366 ], [ %.062, %365 ], [ %.062, %355 ], [ %.062, %345 ], [ %.062, %341 ], [ %.062, %340 ], [ %.062, %329 ], [ %.062, %319 ], [ %.062, %313 ], [ %.062, %309 ], [ %.062, %308 ], [ %.062, %298 ], [ %.062, %288 ], [ %.062, %284 ], [ %.062, %282 ], [ %.062, %277 ], [ %.062, %275 ], [ %.062, %263 ], [ %.062, %253 ], [ %.062, %252 ], [ %.062, %242 ], [ %.062, %232 ], [ %.062, %231 ], [ %.062, %230 ], [ %.062, %227 ], [ %.062, %222 ], [ %.062, %218 ], [ %.062, %217 ], [ %.062, %216 ], [ %206, %205 ], [ %.062, %195 ], [ %.062, %194 ], [ %.062, %192 ], [ %.062, %191 ], [ %.062, %189 ], [ %.062, %188 ], [ %.062, %178 ], [ %.062, %168 ], [ %.062, %159 ], [ %.062, %155 ], [ %.062, %151 ], [ %.062, %147 ], [ %.062, %146 ], [ %.062, %142 ], [ %.062, %141 ], [ %.062, %131 ], [ %.062, %121 ], [ %.062, %117 ], [ 0, %116 ], [ %.062, %114 ], [ %.062, %102 ], [ %.062, %100 ], [ %.062, %88 ], [ %.062, %78 ], [ %.062, %76 ], [ %.062, %74 ], [ %.062, %73 ], [ %.062, %62 ], [ %.062, %52 ], [ %.062, %48 ], [ %.062, %47 ], [ %.062, %45 ], [ %.062, %44 ], [ %.062, %42 ], [ %.062, %40 ], [ %.062, %36 ], [ %.062, %35 ], [ %.062, %25 ], [ %.062, %15 ], [ %.062, %11 ]
  %.060.be = phi i64 [ %.060, %10 ], [ %.060, %405 ], [ %.060, %404 ], [ %.060, %402 ], [ %.060, %401 ], [ %.060, %400 ], [ %.060, %399 ], [ %.060, %397 ], [ %.060, %396 ], [ 0, %395 ], [ %.060, %394 ], [ %.060, %392 ], [ %.060, %391 ], [ %.060, %389 ], [ %.060, %379 ], [ %.060, %369 ], [ %.060, %367 ], [ %.060, %366 ], [ %.060, %365 ], [ %.060, %355 ], [ %.060, %345 ], [ %.060, %341 ], [ %.060, %340 ], [ %.060, %329 ], [ %.060, %319 ], [ %.060, %313 ], [ %.060, %309 ], [ %.060, %308 ], [ %.060, %298 ], [ %.060, %288 ], [ %.060, %284 ], [ %.060, %282 ], [ %.060, %277 ], [ %.060, %275 ], [ %.060, %263 ], [ %.060, %253 ], [ %.060, %252 ], [ %.060, %242 ], [ %.060, %232 ], [ %.060, %231 ], [ %.060, %230 ], [ %.060, %227 ], [ %.060, %222 ], [ %.060, %218 ], [ %.060, %217 ], [ %.060, %216 ], [ %.060, %205 ], [ %.060, %195 ], [ %.060, %194 ], [ %193, %192 ], [ %.060, %191 ], [ %.060, %189 ], [ %.060, %188 ], [ %.060, %178 ], [ %.060, %168 ], [ %.060, %159 ], [ %.060, %155 ], [ %.060, %151 ], [ %.060, %147 ], [ %.060, %146 ], [ %.060, %142 ], [ %.060, %141 ], [ 0, %131 ], [ %.060, %121 ], [ %.060, %117 ], [ %.060, %116 ], [ %.060, %114 ], [ %.060, %102 ], [ %.060, %100 ], [ %.060, %88 ], [ %.060, %78 ], [ %.060, %76 ], [ %.060, %74 ], [ %.060, %73 ], [ %.060, %62 ], [ %.060, %52 ], [ %.060, %48 ], [ %.060, %47 ], [ %.060, %45 ], [ %.060, %44 ], [ %.060, %42 ], [ %.060, %40 ], [ %.060, %36 ], [ %.060, %35 ], [ %.060, %25 ], [ %.060, %15 ], [ %.060, %11 ]
  %.058.be = phi i64 [ %.058, %10 ], [ %.058, %405 ], [ %.058, %404 ], [ %.058, %402 ], [ %.058, %401 ], [ %.058, %400 ], [ %.058, %399 ], [ %.058, %397 ], [ %.058, %396 ], [ %.058, %395 ], [ %.058, %394 ], [ %.058, %392 ], [ %.058, %391 ], [ %.058, %389 ], [ %.058, %379 ], [ %.058, %369 ], [ %.058, %367 ], [ %.058, %366 ], [ %.058, %365 ], [ %.058, %355 ], [ %.058, %345 ], [ %.058, %341 ], [ %.058, %340 ], [ %.058, %329 ], [ %.058, %319 ], [ %.058, %313 ], [ %.058, %309 ], [ %.058, %308 ], [ %.058, %298 ], [ %.058, %288 ], [ %.058, %284 ], [ %.058, %282 ], [ %.058, %277 ], [ %.058, %275 ], [ %.058, %263 ], [ %.058, %253 ], [ %.058, %252 ], [ %.058, %242 ], [ %.058, %232 ], [ %.058, %231 ], [ %.058, %230 ], [ %.058, %227 ], [ %.058, %222 ], [ %.058, %218 ], [ %.058, %217 ], [ %.058, %216 ], [ %.058, %205 ], [ %.058, %195 ], [ %.058, %194 ], [ %.058, %192 ], [ %.058, %191 ], [ %190, %189 ], [ %.058, %188 ], [ %.058, %178 ], [ %.058, %168 ], [ %.058, %159 ], [ %.058, %155 ], [ %.058, %151 ], [ %.058, %147 ], [ 0, %146 ], [ %.058, %142 ], [ %.058, %141 ], [ %.058, %131 ], [ %.058, %121 ], [ %.058, %117 ], [ %.058, %116 ], [ %.058, %114 ], [ %.058, %102 ], [ %.058, %100 ], [ %.058, %88 ], [ %.058, %78 ], [ %.058, %76 ], [ %.058, %74 ], [ %.058, %73 ], [ %.058, %62 ], [ %.058, %52 ], [ %.058, %48 ], [ %.058, %47 ], [ %.058, %45 ], [ %.058, %44 ], [ %.058, %42 ], [ %.058, %40 ], [ %.058, %36 ], [ %.058, %35 ], [ %.058, %25 ], [ %.058, %15 ], [ %.058, %11 ]
  %.056.be = phi i64 [ %.056, %10 ], [ %.056, %405 ], [ %.056, %404 ], [ %.056, %402 ], [ %.056, %401 ], [ %.056, %400 ], [ %.056, %399 ], [ %.056, %397 ], [ %.056, %396 ], [ %.056, %395 ], [ %.056, %394 ], [ %.056, %392 ], [ %.056, %391 ], [ %.056, %389 ], [ %.056, %379 ], [ %.056, %369 ], [ %.056, %367 ], [ %.056, %366 ], [ %.056, %365 ], [ %.056, %355 ], [ %.056, %345 ], [ %.056, %341 ], [ %.056, %340 ], [ %.056, %329 ], [ %.056, %319 ], [ %.056, %313 ], [ %.056, %309 ], [ %.056, %308 ], [ %.056, %298 ], [ %.056, %288 ], [ %.056, %284 ], [ %.056, %282 ], [ %.056, %277 ], [ %.056, %275 ], [ %.056, %263 ], [ %.056, %253 ], [ %.056, %252 ], [ %.056, %242 ], [ %.056, %232 ], [ %.neg74, %231 ], [ %.056, %230 ], [ %.056, %227 ], [ %.056, %222 ], [ %.056, %218 ], [ 0, %217 ], [ %.056, %216 ], [ %.056, %205 ], [ %.056, %195 ], [ %.056, %194 ], [ %.056, %192 ], [ %.056, %191 ], [ %.056, %189 ], [ %.056, %188 ], [ %.056, %178 ], [ %.056, %168 ], [ %.056, %159 ], [ %.056, %155 ], [ %.056, %151 ], [ %.056, %147 ], [ %.056, %146 ], [ %.056, %142 ], [ %.056, %141 ], [ %.056, %131 ], [ %.056, %121 ], [ %.056, %117 ], [ %.056, %116 ], [ %.056, %114 ], [ %.056, %102 ], [ %.056, %100 ], [ %.056, %88 ], [ %.056, %78 ], [ %.056, %76 ], [ %.056, %74 ], [ %.056, %73 ], [ %.056, %62 ], [ %.056, %52 ], [ %.056, %48 ], [ %.056, %47 ], [ %.056, %45 ], [ %.056, %44 ], [ %.056, %42 ], [ %.056, %40 ], [ %.056, %36 ], [ %.056, %35 ], [ %.056, %25 ], [ %.056, %15 ], [ %.056, %11 ]
  %.054.be = phi i64 [ %.054, %10 ], [ %.neg, %405 ], [ %.054, %404 ], [ %.054, %402 ], [ %.054, %401 ], [ %.054, %400 ], [ 0, %399 ], [ %.054, %397 ], [ %.054, %396 ], [ %.054, %395 ], [ %.054, %394 ], [ %.054, %392 ], [ %.054, %391 ], [ %.054, %389 ], [ %.neg72, %379 ], [ %.054, %369 ], [ %.054, %367 ], [ %.054, %366 ], [ %.054, %365 ], [ %.054, %355 ], [ %.054, %345 ], [ %.054, %341 ], [ %.054, %340 ], [ %.054, %329 ], [ %.054, %319 ], [ %.054, %313 ], [ %.054, %309 ], [ %.054, %308 ], [ %.054, %298 ], [ %.054, %288 ], [ %.054, %284 ], [ %.054, %282 ], [ %.054, %277 ], [ %.054, %275 ], [ %.054, %263 ], [ %.054, %253 ], [ %.054, %252 ], [ 0, %242 ], [ %.054, %232 ], [ %.054, %231 ], [ %.054, %230 ], [ %.054, %227 ], [ %.054, %222 ], [ %.054, %218 ], [ %.054, %217 ], [ %.054, %216 ], [ %.054, %205 ], [ %.054, %195 ], [ %.054, %194 ], [ %.054, %192 ], [ %.054, %191 ], [ %.054, %189 ], [ %.054, %188 ], [ %.054, %178 ], [ %.054, %168 ], [ %.054, %159 ], [ %.054, %155 ], [ %.054, %151 ], [ %.054, %147 ], [ %.054, %146 ], [ %.054, %142 ], [ %.054, %141 ], [ %.054, %131 ], [ %.054, %121 ], [ %.054, %117 ], [ %.054, %116 ], [ %.054, %114 ], [ %.054, %102 ], [ %.054, %100 ], [ %.054, %88 ], [ %.054, %78 ], [ %.054, %76 ], [ %.054, %74 ], [ %.054, %73 ], [ %.054, %62 ], [ %.054, %52 ], [ %.054, %48 ], [ %.054, %47 ], [ %.054, %45 ], [ %.054, %44 ], [ %.054, %42 ], [ %.054, %40 ], [ %.054, %36 ], [ %.054, %35 ], [ %.054, %25 ], [ %.054, %15 ], [ %.054, %11 ]
  %.052.be = phi i64 [ %.052, %10 ], [ %.052, %405 ], [ %.052, %404 ], [ %.052, %402 ], [ 1, %401 ], [ %.052, %400 ], [ %.052, %399 ], [ %.052, %397 ], [ %.052, %396 ], [ %.052, %395 ], [ %.052, %394 ], [ %.052, %392 ], [ %.052, %391 ], [ %.052, %389 ], [ %.052, %379 ], [ %.052, %369 ], [ %.052, %367 ], [ %.neg73, %366 ], [ %.052, %365 ], [ %.052, %355 ], [ %.052, %345 ], [ %.052, %341 ], [ %.052, %340 ], [ %.052, %329 ], [ %.052, %319 ], [ %.052, %313 ], [ %.052, %309 ], [ %.052, %308 ], [ 1, %298 ], [ %.052, %288 ], [ %.052, %284 ], [ %.052, %282 ], [ %.052, %277 ], [ %.052, %275 ], [ %.052, %263 ], [ %.052, %253 ], [ %.052, %252 ], [ %.052, %242 ], [ %.052, %232 ], [ %.052, %231 ], [ %.052, %230 ], [ %.052, %227 ], [ %.052, %222 ], [ %.052, %218 ], [ %.052, %217 ], [ %.052, %216 ], [ %.052, %205 ], [ %.052, %195 ], [ %.052, %194 ], [ %.052, %192 ], [ %.052, %191 ], [ %.052, %189 ], [ %.052, %188 ], [ %.052, %178 ], [ %.052, %168 ], [ %.052, %159 ], [ %.052, %155 ], [ %.052, %151 ], [ %.052, %147 ], [ %.052, %146 ], [ %.052, %142 ], [ %.052, %141 ], [ %.052, %131 ], [ %.052, %121 ], [ %.052, %117 ], [ %.052, %116 ], [ %.052, %114 ], [ %.052, %102 ], [ %.052, %100 ], [ %.052, %88 ], [ %.052, %78 ], [ %.052, %76 ], [ %.052, %74 ], [ %.052, %73 ], [ %.052, %62 ], [ %.052, %52 ], [ %.052, %48 ], [ %.052, %47 ], [ %.052, %45 ], [ %.052, %44 ], [ %.052, %42 ], [ %.052, %40 ], [ %.052, %36 ], [ %.052, %35 ], [ %.052, %25 ], [ %.052, %15 ], [ %.052, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ -1150848435, %405 ], [ -1838550393, %404 ], [ -720126144, %402 ], [ 1158667057, %401 ], [ -2074204081, %400 ], [ 2030108937, %399 ], [ 270576459, %397 ], [ 1003786209, %396 ], [ 244891916, %395 ], [ 1925263851, %394 ], [ 957770795, %392 ], [ 1153898689, %391 ], [ -1484347402, %389 ], [ %388, %379 ], [ %378, %369 ], [ 1940129717, %367 ], [ -637789615, %366 ], [ 1509850911, %365 ], [ %364, %355 ], [ %354, %345 ], [ 736340029, %341 ], [ 736340029, %340 ], [ %339, %329 ], [ %328, %319 ], [ %318, %313 ], [ %312, %309 ], [ -637789615, %308 ], [ %307, %298 ], [ %297, %288 ], [ 1768609438, %284 ], [ 1768609438, %282 ], [ %281, %277 ], [ %276, %275 ], [ %274, %263 ], [ %262, %253 ], [ -1484347402, %252 ], [ %251, %242 ], [ %241, %232 ], [ -708969678, %231 ], [ 1844518281, %230 ], [ -208340231, %227 ], [ %226, %222 ], [ %221, %218 ], [ -708969678, %217 ], [ 1418368749, %216 ], [ %215, %205 ], [ %204, %195 ], [ 1367162233, %194 ], [ 947445354, %192 ], [ 794332777, %191 ], [ -332517067, %189 ], [ 149718699, %188 ], [ %187, %178 ], [ %177, %168 ], [ 1101403624, %159 ], [ %158, %155 ], [ %154, %151 ], [ %150, %147 ], [ -332517067, %146 ], [ %145, %142 ], [ 947445354, %141 ], [ %140, %131 ], [ %130, %121 ], [ %120, %117 ], [ 1418368749, %116 ], [ -796724854, %114 ], [ -1373452252, %102 ], [ %101, %100 ], [ %99, %88 ], [ %87, %78 ], [ -796724854, %76 ], [ -2111659488, %74 ], [ 2023798034, %73 ], [ %72, %62 ], [ %61, %52 ], [ %51, %48 ], [ -2111659488, %47 ], [ -138947614, %45 ], [ -718691558, %44 ], [ -1371975510, %42 ], [ -451762505, %40 ], [ %39, %36 ], [ -1371975510, %35 ], [ %34, %25 ], [ %24, %15 ], [ %14, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = load i64, i64* %3, align 8
  %13 = icmp slt i64 %.070, %12
  %14 = select i1 %13, i32 -796103102, i32 1652353376
  br label %.backedge

15:                                               ; preds = %10
  %16 = load i32, i32* @x.3, align 4
  %17 = load i32, i32* @y.4, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 1153898689, i32 1852597204
  br label %.backedge

25:                                               ; preds = %10
  %26 = load i32, i32* @x.3, align 4
  %27 = load i32, i32* @y.4, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 1539020711, i32 1852597204
  br label %.backedge

35:                                               ; preds = %10
  br label %.backedge

36:                                               ; preds = %10
  %37 = load i64, i64* %3, align 8
  %38 = icmp slt i64 %.068, %37
  %39 = select i1 %38, i32 1075275581, i32 863380910
  br label %.backedge

40:                                               ; preds = %10
  %41 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.070, i64 %.068
  store i64 4557430888798830399, i64* %41, align 8
  br label %.backedge

42:                                               ; preds = %10
  %43 = add i64 %.068, 1
  br label %.backedge

44:                                               ; preds = %10
  br label %.backedge

45:                                               ; preds = %10
  %46 = add i64 %.070, 1
  br label %.backedge

47:                                               ; preds = %10
  br label %.backedge

48:                                               ; preds = %10
  %49 = load i64, i64* %3, align 8
  %50 = icmp slt i64 %.066, %49
  %51 = select i1 %50, i32 -657839577, i32 -598330789
  br label %.backedge

52:                                               ; preds = %10
  %53 = load i32, i32* @x.3, align 4
  %54 = load i32, i32* @y.4, align 4
  %55 = add i32 %53, -1
  %56 = mul i32 %55, %53
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %59, %58
  %61 = select i1 %60, i32 957770795, i32 -1496034576
  br label %.backedge

62:                                               ; preds = %10
  %63 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.066, i64 %.066
  store i64 0, i64* %63, align 8
  %64 = load i32, i32* @x.3, align 4
  %65 = load i32, i32* @y.4, align 4
  %66 = add i32 %64, -1
  %67 = mul i32 %66, %64
  %68 = and i32 %67, 1
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %70, %69
  %72 = select i1 %71, i32 970158055, i32 -1496034576
  br label %.backedge

73:                                               ; preds = %10
  br label %.backedge

74:                                               ; preds = %10
  %75 = add i64 %.066, 1
  br label %.backedge

76:                                               ; preds = %10
  %77 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %4)
  br label %.backedge

78:                                               ; preds = %10
  %79 = load i32, i32* @x.3, align 4
  %80 = load i32, i32* @y.4, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 1925263851, i32 850193655
  br label %.backedge

88:                                               ; preds = %10
  %89 = load i64, i64* %4, align 8
  %90 = icmp slt i64 %.064, %89
  store i1 %90, i1* %2, align 1
  %91 = load i32, i32* @x.3, align 4
  %92 = load i32, i32* @y.4, align 4
  %93 = add i32 %91, -1
  %94 = mul i32 %93, %91
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %97, %96
  %99 = select i1 %98, i32 1976194571, i32 850193655
  br label %.backedge

100:                                              ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %101 = select i1 %.0..0..0., i32 966376088, i32 784901902
  br label %.backedge

102:                                              ; preds = %10
  %103 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %5)
  %104 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %103, i64* nonnull dereferenceable(8) %6)
  %105 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %104, i64* nonnull dereferenceable(8) %7)
  %106 = load i64, i64* %5, align 8
  %107 = load i64, i64* %6, align 8
  %108 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %106, i64 %107
  %109 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %108, i64* nonnull dereferenceable(8) %7)
  %110 = load i64, i64* %109, align 8
  %111 = load i64, i64* %5, align 8
  %112 = load i64, i64* %6, align 8
  %113 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %111, i64 %112
  store i64 %110, i64* %113, align 8
  br label %.backedge

114:                                              ; preds = %10
  %115 = add i64 %.064, 1
  br label %.backedge

116:                                              ; preds = %10
  br label %.backedge

117:                                              ; preds = %10
  %118 = load i64, i64* %3, align 8
  %119 = icmp slt i64 %.062, %118
  %120 = select i1 %119, i32 -77559851, i32 1030860982
  br label %.backedge

121:                                              ; preds = %10
  %122 = load i32, i32* @x.3, align 4
  %123 = load i32, i32* @y.4, align 4
  %124 = add i32 %122, -1
  %125 = mul i32 %124, %122
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %128, %127
  %130 = select i1 %129, i32 244891916, i32 920348798
  br label %.backedge

131:                                              ; preds = %10
  %132 = load i32, i32* @x.3, align 4
  %133 = load i32, i32* @y.4, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 -1255423448, i32 920348798
  br label %.backedge

141:                                              ; preds = %10
  br label %.backedge

142:                                              ; preds = %10
  %143 = load i64, i64* %3, align 8
  %144 = icmp slt i64 %.060, %143
  %145 = select i1 %144, i32 209888513, i32 -174587862
  br label %.backedge

146:                                              ; preds = %10
  br label %.backedge

147:                                              ; preds = %10
  %148 = load i64, i64* %3, align 8
  %149 = icmp slt i64 %.058, %148
  %150 = select i1 %149, i32 -1012032524, i32 1353915167
  br label %.backedge

151:                                              ; preds = %10
  %152 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.060, i64 %.062
  %153 = load i64, i64* %152, align 8
  %.not75 = icmp eq i64 %153, 4557430888798830399
  %154 = select i1 %.not75, i32 1101403624, i32 770272289
  br label %.backedge

155:                                              ; preds = %10
  %156 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.062, i64 %.058
  %157 = load i64, i64* %156, align 8
  %.not = icmp eq i64 %157, 4557430888798830399
  %158 = select i1 %.not, i32 1101403624, i32 1152329386
  br label %.backedge

159:                                              ; preds = %10
  %160 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.060, i64 %.058
  %161 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.060, i64 %.062
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.062, i64 %.058
  %164 = load i64, i64* %163, align 8
  %165 = add i64 %164, %162
  store i64 %165, i64* %8, align 8
  %166 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %160, i64* nonnull dereferenceable(8) %8)
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %160, align 8
  br label %.backedge

168:                                              ; preds = %10
  %169 = load i32, i32* @x.3, align 4
  %170 = load i32, i32* @y.4, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 1003786209, i32 1172284158
  br label %.backedge

178:                                              ; preds = %10
  %179 = load i32, i32* @x.3, align 4
  %180 = load i32, i32* @y.4, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 291528123, i32 1172284158
  br label %.backedge

188:                                              ; preds = %10
  br label %.backedge

189:                                              ; preds = %10
  %190 = add i64 %.058, 1
  br label %.backedge

191:                                              ; preds = %10
  br label %.backedge

192:                                              ; preds = %10
  %193 = add i64 %.060, 1
  br label %.backedge

194:                                              ; preds = %10
  br label %.backedge

195:                                              ; preds = %10
  %196 = load i32, i32* @x.3, align 4
  %197 = load i32, i32* @y.4, align 4
  %198 = add i32 %196, -1
  %199 = mul i32 %198, %196
  %200 = and i32 %199, 1
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %202, %201
  %204 = select i1 %203, i32 270576459, i32 1859375589
  br label %.backedge

205:                                              ; preds = %10
  %206 = add i64 %.062, 1
  %207 = load i32, i32* @x.3, align 4
  %208 = load i32, i32* @y.4, align 4
  %209 = add i32 %207, -1
  %210 = mul i32 %209, %207
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %213, %212
  %215 = select i1 %214, i32 -747486783, i32 1859375589
  br label %.backedge

216:                                              ; preds = %10
  br label %.backedge

217:                                              ; preds = %10
  br label %.backedge

218:                                              ; preds = %10
  %219 = load i64, i64* %3, align 8
  %220 = icmp slt i64 %.056, %219
  %221 = select i1 %220, i32 -1014050286, i32 -1405595878
  br label %.backedge

222:                                              ; preds = %10
  %223 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.056, i64 %.056
  %224 = load i64, i64* %223, align 8
  %225 = icmp slt i64 %224, 0
  %226 = select i1 %225, i32 444669344, i32 1762103355
  br label %.backedge

227:                                              ; preds = %10
  %228 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %229 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %228, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

230:                                              ; preds = %10
  br label %.backedge

231:                                              ; preds = %10
  %.neg74 = add i64 %.056, 1
  br label %.backedge

232:                                              ; preds = %10
  %233 = load i32, i32* @x.3, align 4
  %234 = load i32, i32* @y.4, align 4
  %235 = add i32 %233, -1
  %236 = mul i32 %235, %233
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %239, %238
  %241 = select i1 %240, i32 2030108937, i32 -1723731
  br label %.backedge

242:                                              ; preds = %10
  %243 = load i32, i32* @x.3, align 4
  %244 = load i32, i32* @y.4, align 4
  %245 = add i32 %243, -1
  %246 = mul i32 %245, %243
  %247 = and i32 %246, 1
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %249, %248
  %251 = select i1 %250, i32 -1943881411, i32 -1723731
  br label %.backedge

252:                                              ; preds = %10
  br label %.backedge

253:                                              ; preds = %10
  %254 = load i32, i32* @x.3, align 4
  %255 = load i32, i32* @y.4, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 -2074204081, i32 -528926210
  br label %.backedge

263:                                              ; preds = %10
  %264 = load i64, i64* %3, align 8
  %265 = icmp slt i64 %.054, %264
  store i1 %265, i1* %1, align 1
  %266 = load i32, i32* @x.3, align 4
  %267 = load i32, i32* @y.4, align 4
  %268 = add i32 %266, -1
  %269 = mul i32 %268, %266
  %270 = and i32 %269, 1
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %272, %271
  %274 = select i1 %273, i32 102701819, i32 -528926210
  br label %.backedge

275:                                              ; preds = %10
  %.0..0..0.51 = load volatile i1, i1* %1, align 1
  %276 = select i1 %.0..0..0.51, i32 2146837543, i32 -208340231
  br label %.backedge

277:                                              ; preds = %10
  %278 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.054, i64 0
  %279 = load i64, i64* %278, align 16
  %280 = icmp eq i64 %279, 4557430888798830399
  %281 = select i1 %280, i32 560436629, i32 -1670339448
  br label %.backedge

282:                                              ; preds = %10
  %283 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  br label %.backedge

284:                                              ; preds = %10
  %285 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.054, i64 0
  %286 = load i64, i64* %285, align 16
  %287 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %286)
  br label %.backedge

288:                                              ; preds = %10
  %289 = load i32, i32* @x.3, align 4
  %290 = load i32, i32* @y.4, align 4
  %291 = add i32 %289, -1
  %292 = mul i32 %291, %289
  %293 = and i32 %292, 1
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %295, %294
  %297 = select i1 %296, i32 1158667057, i32 -338430250
  br label %.backedge

298:                                              ; preds = %10
  %299 = load i32, i32* @x.3, align 4
  %300 = load i32, i32* @y.4, align 4
  %301 = add i32 %299, -1
  %302 = mul i32 %301, %299
  %303 = and i32 %302, 1
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %305, %304
  %307 = select i1 %306, i32 -771508099, i32 -338430250
  br label %.backedge

308:                                              ; preds = %10
  br label %.backedge

309:                                              ; preds = %10
  %310 = load i64, i64* %3, align 8
  %311 = icmp slt i64 %.052, %310
  %312 = select i1 %311, i32 -1874475232, i32 -267975323
  br label %.backedge

313:                                              ; preds = %10
  %314 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %315 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.054, i64 %.052
  %316 = load i64, i64* %315, align 8
  %317 = icmp eq i64 %316, 4557430888798830399
  %318 = select i1 %317, i32 1831327219, i32 160880835
  br label %.backedge

319:                                              ; preds = %10
  %320 = load i32, i32* @x.3, align 4
  %321 = load i32, i32* @y.4, align 4
  %322 = add i32 %320, -1
  %323 = mul i32 %322, %320
  %324 = and i32 %323, 1
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %326, %325
  %328 = select i1 %327, i32 -720126144, i32 -527316738
  br label %.backedge

329:                                              ; preds = %10
  %330 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  %331 = load i32, i32* @x.3, align 4
  %332 = load i32, i32* @y.4, align 4
  %333 = add i32 %331, -1
  %334 = mul i32 %333, %331
  %335 = and i32 %334, 1
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %337, %336
  %339 = select i1 %338, i32 369003594, i32 -527316738
  br label %.backedge

340:                                              ; preds = %10
  br label %.backedge

341:                                              ; preds = %10
  %342 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.054, i64 %.052
  %343 = load i64, i64* %342, align 8
  %344 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %343)
  br label %.backedge

345:                                              ; preds = %10
  %346 = load i32, i32* @x.3, align 4
  %347 = load i32, i32* @y.4, align 4
  %348 = add i32 %346, -1
  %349 = mul i32 %348, %346
  %350 = and i32 %349, 1
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %352, %351
  %354 = select i1 %353, i32 -1838550393, i32 870932386
  br label %.backedge

355:                                              ; preds = %10
  %356 = load i32, i32* @x.3, align 4
  %357 = load i32, i32* @y.4, align 4
  %358 = add i32 %356, -1
  %359 = mul i32 %358, %356
  %360 = and i32 %359, 1
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %362, %361
  %364 = select i1 %363, i32 192209851, i32 870932386
  br label %.backedge

365:                                              ; preds = %10
  br label %.backedge

366:                                              ; preds = %10
  %.neg73 = add i64 %.052, 1
  br label %.backedge

367:                                              ; preds = %10
  %368 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

369:                                              ; preds = %10
  %370 = load i32, i32* @x.3, align 4
  %371 = load i32, i32* @y.4, align 4
  %372 = add i32 %370, -1
  %373 = mul i32 %372, %370
  %374 = and i32 %373, 1
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %376, %375
  %378 = select i1 %377, i32 -1150848435, i32 -1625638671
  br label %.backedge

379:                                              ; preds = %10
  %.neg72 = add i64 %.054, 1
  %380 = load i32, i32* @x.3, align 4
  %381 = load i32, i32* @y.4, align 4
  %382 = add i32 %380, -1
  %383 = mul i32 %382, %380
  %384 = and i32 %383, 1
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %386, %385
  %388 = select i1 %387, i32 -1256262413, i32 -1625638671
  br label %.backedge

389:                                              ; preds = %10
  br label %.backedge

390:                                              ; preds = %10
  ret void

391:                                              ; preds = %10
  br label %.backedge

392:                                              ; preds = %10
  %393 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @wf, i64 0, i64 %.066, i64 %.066
  store i64 0, i64* %393, align 8
  br label %.backedge

394:                                              ; preds = %10
  br label %.backedge

395:                                              ; preds = %10
  br label %.backedge

396:                                              ; preds = %10
  br label %.backedge

397:                                              ; preds = %10
  %398 = add i64 %.062, 1
  br label %.backedge

399:                                              ; preds = %10
  br label %.backedge

400:                                              ; preds = %10
  br label %.backedge

401:                                              ; preds = %10
  br label %.backedge

402:                                              ; preds = %10
  %403 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  br label %.backedge

404:                                              ; preds = %10
  br label %.backedge

405:                                              ; preds = %10
  %.neg = add i64 %.054, 1
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #4 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64**, align 8
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.5, align 4
  %10 = load i32, i32* @y.6, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ 1754499141, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %16

16:                                               ; preds = %.outer, %16
  switch i32 %.0.ph, label %16 [
    i32 1754499141, label %17
    i32 -1272770916, label %20
    i32 -1326038841, label %38
    i32 234699978, label %40
    i32 919076065, label %42
    i32 2066280754, label %44
    i32 -1112648693, label %.outer.backedge
  ]

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 -1272770916, i32 -1112648693
  br label %.outer.backedge

20:                                               ; preds = %16
  %21 = alloca i64*, align 8
  store i64** %21, i64*** %6, align 8
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %5, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %4, align 8
  %.0..0..0.5 = load volatile i64**, i64*** %5, align 8
  store i64* %0, i64** %.0..0..0.5, align 8
  %.0..0..0.8 = load volatile i64**, i64*** %4, align 8
  store i64* %1, i64** %.0..0..0.8, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %4, align 8
  %24 = load i64*, i64** %.0..0..0.9, align 8
  %25 = load i64, i64* %24, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %5, align 8
  %26 = load i64*, i64** %.0..0..0.6, align 8
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %25, %27
  store i1 %28, i1* %3, align 1
  %29 = load i32, i32* @x.5, align 4
  %30 = load i32, i32* @y.6, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -1326038841, i32 -1112648693
  br label %.outer.backedge

38:                                               ; preds = %16
  %.0..0..0.11 = load volatile i1, i1* %3, align 1
  %39 = select i1 %.0..0..0.11, i32 234699978, i32 919076065
  br label %.outer.backedge

40:                                               ; preds = %16
  %.0..0..0.10 = load volatile i64**, i64*** %4, align 8
  %41 = load i64*, i64** %.0..0..0.10, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %6, align 8
  store i64* %41, i64** %.0..0..0.2, align 8
  br label %.outer.backedge

42:                                               ; preds = %16
  %.0..0..0.7 = load volatile i64**, i64*** %5, align 8
  %43 = load i64*, i64** %.0..0..0.7, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %6, align 8
  store i64* %43, i64** %.0..0..0.3, align 8
  br label %.outer.backedge

44:                                               ; preds = %16
  %.0..0..0.4 = load volatile i64**, i64*** %6, align 8
  %45 = load i64*, i64** %.0..0..0.4, align 8
  ret i64* %45

.outer.backedge:                                  ; preds = %16, %42, %40, %38, %20, %17
  %.0.ph.be = phi i32 [ %19, %17 ], [ %37, %20 ], [ %39, %38 ], [ 2066280754, %40 ], [ 2066280754, %42 ], [ -1272770916, %16 ]
  br label %.outer
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %2 = getelementptr i8, i8* %1, i64 -24
  %3 = bitcast i8* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %4
  %6 = bitcast i8* %5 to %"class.std::basic_ios"*
  %7 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %6, %"class.std::basic_ostream"* null)
  %8 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  tail call void @_Z14warshall_floydv()
  ret i32 0
}

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) local_unnamed_addr #1

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s058114668.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.9, align 4
  %4 = load i32, i32* @y.10, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1024413321, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1024413321, label %11
    i32 -1573450887, label %14
    i32 -416398216, label %24
    i32 1211113781, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -1573450887, i32 1211113781
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.9, align 4
  %16 = load i32, i32* @y.10, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -416398216, i32 1211113781
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -1573450887, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
