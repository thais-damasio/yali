; ModuleID = 'build_ollvm/programs/p02363/s910394125.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s910394125.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@D = global [100 x [100 x i64]] zeroinitializer, align 16
@INF = local_unnamed_addr global i64 4294967296, align 8
@.str = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str.2 = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s910394125.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* nonnull %3, i32* nonnull %4)
  br label %10

10:                                               ; preds = %.backedge, %0
  %.078 = phi i32 [ 0, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i8 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.0 = phi i32 [ 542186303, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 542186303, label %11
    i32 1987088923, label %15
    i32 668112316, label %16
    i32 2081904119, label %20
    i32 -243149939, label %23
    i32 -643704606, label %27
    i32 1054461870, label %32
    i32 -1028311387, label %33
    i32 74830614, label %35
    i32 -1343102913, label %36
    i32 -1412441469, label %38
    i32 289919602, label %48
    i32 -509419273, label %58
    i32 -412820025, label %59
    i32 -998975327, label %69
    i32 -1942425047, label %81
    i32 1469605734, label %83
    i32 1493238858, label %93
    i32 192488420, label %111
    i32 -1663395058, label %112
    i32 -1335720819, label %114
    i32 889579869, label %115
    i32 -904235839, label %119
    i32 -2012123523, label %129
    i32 2094089546, label %139
    i32 1802183353, label %140
    i32 1482146577, label %144
    i32 491901632, label %152
    i32 1735094066, label %153
    i32 -1977161154, label %163
    i32 2107297747, label %173
    i32 631132127, label %174
    i32 566293435, label %184
    i32 -1955933063, label %196
    i32 -712545666, label %198
    i32 820286373, label %206
    i32 602973558, label %216
    i32 537292126, label %226
    i32 671065035, label %227
    i32 -1020271913, label %237
    i32 -2138255340, label %258
    i32 212307384, label %259
    i32 1832373611, label %261
    i32 388618584, label %262
    i32 416026843, label %264
    i32 -719933867, label %265
    i32 815341212, label %267
    i32 -1490471168, label %268
    i32 185669152, label %272
    i32 -783491144, label %278
    i32 -1065227342, label %279
    i32 2013782518, label %280
    i32 -1857609863, label %282
    i32 -1890266548, label %285
    i32 -1138645711, label %295
    i32 -57757397, label %307
    i32 -1149333538, label %308
    i32 1235386759, label %318
    i32 993728055, label %328
    i32 113129233, label %329
    i32 -606245133, label %333
    i32 -1977080811, label %334
    i32 1884258876, label %338
    i32 1668607263, label %340
    i32 -1060960315, label %342
    i32 -657767828, label %349
    i32 1461140418, label %359
    i32 -649141187, label %374
    i32 1156140719, label %375
    i32 1842919444, label %377
    i32 235483927, label %387
    i32 369534689, label %397
    i32 -1075507722, label %398
    i32 1137324704, label %408
    i32 580022690, label %419
    i32 523794199, label %420
    i32 1464365600, label %430
    i32 29551540, label %441
    i32 222569725, label %442
    i32 742177875, label %452
    i32 599090320, label %463
    i32 494689571, label %464
    i32 229809938, label %465
    i32 -801638800, label %475
    i32 -594604246, label %485
    i32 59831861, label %486
    i32 -2103463560, label %487
    i32 -421921211, label %488
    i32 1833582616, label %497
    i32 -1840692773, label %498
    i32 -1623985236, label %499
    i32 805501528, label %500
    i32 -1044380898, label %501
    i32 -1767876388, label %513
    i32 -372658039, label %516
    i32 -700537838, label %517
    i32 -190510633, label %523
    i32 1318329795, label %524
    i32 -1741047290, label %526
    i32 -671629518, label %528
    i32 -1502937353, label %530
  ]

.backedge:                                        ; preds = %10, %530, %528, %526, %524, %523, %517, %516, %513, %501, %500, %499, %498, %497, %488, %487, %486, %475, %465, %464, %463, %452, %442, %441, %430, %420, %419, %408, %398, %397, %387, %377, %375, %374, %359, %349, %342, %340, %338, %334, %333, %329, %328, %318, %308, %307, %295, %285, %282, %280, %279, %278, %272, %268, %267, %265, %264, %262, %261, %259, %258, %237, %227, %226, %216, %206, %198, %196, %184, %174, %173, %163, %153, %152, %144, %140, %139, %129, %119, %115, %114, %112, %111, %93, %83, %81, %69, %59, %58, %48, %38, %36, %35, %33, %32, %27, %23, %20, %16, %15, %11
  %.078.be = phi i32 [ %.078, %10 ], [ %.078, %530 ], [ %.078, %528 ], [ %.078, %526 ], [ %.078, %524 ], [ %.078, %523 ], [ %.078, %517 ], [ %.078, %516 ], [ %.078, %513 ], [ %.078, %501 ], [ %.078, %500 ], [ %.078, %499 ], [ %.078, %498 ], [ %.078, %497 ], [ %.078, %488 ], [ %.078, %487 ], [ %.078, %486 ], [ %.078, %475 ], [ %.078, %465 ], [ %.078, %464 ], [ %.078, %463 ], [ %.078, %452 ], [ %.078, %442 ], [ %.078, %441 ], [ %.078, %430 ], [ %.078, %420 ], [ %.078, %419 ], [ %.078, %408 ], [ %.078, %398 ], [ %.078, %397 ], [ %.078, %387 ], [ %.078, %377 ], [ %.078, %375 ], [ %.078, %374 ], [ %.078, %359 ], [ %.078, %349 ], [ %.078, %342 ], [ %.078, %340 ], [ %.078, %338 ], [ %.078, %334 ], [ %.078, %333 ], [ %.078, %329 ], [ %.078, %328 ], [ %.078, %318 ], [ %.078, %308 ], [ %.078, %307 ], [ %.078, %295 ], [ %.078, %285 ], [ %.078, %282 ], [ %.078, %280 ], [ %.078, %279 ], [ %.078, %278 ], [ %.078, %272 ], [ %.078, %268 ], [ %.078, %267 ], [ %.078, %265 ], [ %.078, %264 ], [ %.078, %262 ], [ %.078, %261 ], [ %.078, %259 ], [ %.078, %258 ], [ %.078, %237 ], [ %.078, %227 ], [ %.078, %226 ], [ %.078, %216 ], [ %.078, %206 ], [ %.078, %198 ], [ %.078, %196 ], [ %.078, %184 ], [ %.078, %174 ], [ %.078, %173 ], [ %.078, %163 ], [ %.078, %153 ], [ %.078, %152 ], [ %.078, %144 ], [ %.078, %140 ], [ %.078, %139 ], [ %.078, %129 ], [ %.078, %119 ], [ %.078, %115 ], [ %.078, %114 ], [ %.078, %112 ], [ %.078, %111 ], [ %.078, %93 ], [ %.078, %83 ], [ %.078, %81 ], [ %.078, %69 ], [ %.078, %59 ], [ %.078, %58 ], [ %.078, %48 ], [ %.078, %38 ], [ %37, %36 ], [ %.078, %35 ], [ %.078, %33 ], [ %.078, %32 ], [ %.078, %27 ], [ %.078, %23 ], [ %.078, %20 ], [ %.078, %16 ], [ %.078, %15 ], [ %.078, %11 ]
  %.076.be = phi i32 [ %.076, %10 ], [ %.076, %530 ], [ %.076, %528 ], [ %.076, %526 ], [ %.076, %524 ], [ %.076, %523 ], [ %.076, %517 ], [ %.076, %516 ], [ %.076, %513 ], [ %.076, %501 ], [ %.076, %500 ], [ %.076, %499 ], [ %.076, %498 ], [ %.076, %497 ], [ %.076, %488 ], [ %.076, %487 ], [ %.076, %486 ], [ %.076, %475 ], [ %.076, %465 ], [ %.076, %464 ], [ %.076, %463 ], [ %.076, %452 ], [ %.076, %442 ], [ %.076, %441 ], [ %.076, %430 ], [ %.076, %420 ], [ %.076, %419 ], [ %.076, %408 ], [ %.076, %398 ], [ %.076, %397 ], [ %.076, %387 ], [ %.076, %377 ], [ %.076, %375 ], [ %.076, %374 ], [ %.076, %359 ], [ %.076, %349 ], [ %.076, %342 ], [ %.076, %340 ], [ %.076, %338 ], [ %.076, %334 ], [ %.076, %333 ], [ %.076, %329 ], [ %.076, %328 ], [ %.076, %318 ], [ %.076, %308 ], [ %.076, %307 ], [ %.076, %295 ], [ %.076, %285 ], [ %.076, %282 ], [ %.076, %280 ], [ %.076, %279 ], [ %.076, %278 ], [ %.076, %272 ], [ %.076, %268 ], [ %.076, %267 ], [ %.076, %265 ], [ %.076, %264 ], [ %.076, %262 ], [ %.076, %261 ], [ %.076, %259 ], [ %.076, %258 ], [ %.076, %237 ], [ %.076, %227 ], [ %.076, %226 ], [ %.076, %216 ], [ %.076, %206 ], [ %.076, %198 ], [ %.076, %196 ], [ %.076, %184 ], [ %.076, %174 ], [ %.076, %173 ], [ %.076, %163 ], [ %.076, %153 ], [ %.076, %152 ], [ %.076, %144 ], [ %.076, %140 ], [ %.076, %139 ], [ %.076, %129 ], [ %.076, %119 ], [ %.076, %115 ], [ %.076, %114 ], [ %.076, %112 ], [ %.076, %111 ], [ %.076, %93 ], [ %.076, %83 ], [ %.076, %81 ], [ %.076, %69 ], [ %.076, %59 ], [ %.076, %58 ], [ %.076, %48 ], [ %.076, %38 ], [ %.076, %36 ], [ %.076, %35 ], [ %34, %33 ], [ %.076, %32 ], [ %.076, %27 ], [ %.076, %23 ], [ %.076, %20 ], [ %.076, %16 ], [ 0, %15 ], [ %.076, %11 ]
  %.074.be = phi i32 [ %.074, %10 ], [ %.074, %530 ], [ %.074, %528 ], [ %.074, %526 ], [ %.074, %524 ], [ %.074, %523 ], [ %.074, %517 ], [ %.074, %516 ], [ %.074, %513 ], [ %.074, %501 ], [ %.074, %500 ], [ %.074, %499 ], [ %.074, %498 ], [ %.074, %497 ], [ %.074, %488 ], [ %.074, %487 ], [ 0, %486 ], [ %.074, %475 ], [ %.074, %465 ], [ %.074, %464 ], [ %.074, %463 ], [ %.074, %452 ], [ %.074, %442 ], [ %.074, %441 ], [ %.074, %430 ], [ %.074, %420 ], [ %.074, %419 ], [ %.074, %408 ], [ %.074, %398 ], [ %.074, %397 ], [ %.074, %387 ], [ %.074, %377 ], [ %.074, %375 ], [ %.074, %374 ], [ %.074, %359 ], [ %.074, %349 ], [ %.074, %342 ], [ %.074, %340 ], [ %.074, %338 ], [ %.074, %334 ], [ %.074, %333 ], [ %.074, %329 ], [ %.074, %328 ], [ %.074, %318 ], [ %.074, %308 ], [ %.074, %307 ], [ %.074, %295 ], [ %.074, %285 ], [ %.074, %282 ], [ %.074, %280 ], [ %.074, %279 ], [ %.074, %278 ], [ %.074, %272 ], [ %.074, %268 ], [ %.074, %267 ], [ %.074, %265 ], [ %.074, %264 ], [ %.074, %262 ], [ %.074, %261 ], [ %.074, %259 ], [ %.074, %258 ], [ %.074, %237 ], [ %.074, %227 ], [ %.074, %226 ], [ %.074, %216 ], [ %.074, %206 ], [ %.074, %198 ], [ %.074, %196 ], [ %.074, %184 ], [ %.074, %174 ], [ %.074, %173 ], [ %.074, %163 ], [ %.074, %153 ], [ %.074, %152 ], [ %.074, %144 ], [ %.074, %140 ], [ %.074, %139 ], [ %.074, %129 ], [ %.074, %119 ], [ %.074, %115 ], [ %.074, %114 ], [ %113, %112 ], [ %.074, %111 ], [ %.074, %93 ], [ %.074, %83 ], [ %.074, %81 ], [ %.074, %69 ], [ %.074, %59 ], [ %.074, %58 ], [ 0, %48 ], [ %.074, %38 ], [ %.074, %36 ], [ %.074, %35 ], [ %.074, %33 ], [ %.074, %32 ], [ %.074, %27 ], [ %.074, %23 ], [ %.074, %20 ], [ %.074, %16 ], [ %.074, %15 ], [ %.074, %11 ]
  %.072.be = phi i32 [ %.072, %10 ], [ %.072, %530 ], [ %.072, %528 ], [ %.072, %526 ], [ %.072, %524 ], [ %.072, %523 ], [ %.072, %517 ], [ %.072, %516 ], [ %.072, %513 ], [ %.072, %501 ], [ %.072, %500 ], [ %.072, %499 ], [ %.072, %498 ], [ %.072, %497 ], [ %.072, %488 ], [ %.072, %487 ], [ %.072, %486 ], [ %.072, %475 ], [ %.072, %465 ], [ %.072, %464 ], [ %.072, %463 ], [ %.072, %452 ], [ %.072, %442 ], [ %.072, %441 ], [ %.072, %430 ], [ %.072, %420 ], [ %.072, %419 ], [ %.072, %408 ], [ %.072, %398 ], [ %.072, %397 ], [ %.072, %387 ], [ %.072, %377 ], [ %.072, %375 ], [ %.072, %374 ], [ %.072, %359 ], [ %.072, %349 ], [ %.072, %342 ], [ %.072, %340 ], [ %.072, %338 ], [ %.072, %334 ], [ %.072, %333 ], [ %.072, %329 ], [ %.072, %328 ], [ %.072, %318 ], [ %.072, %308 ], [ %.072, %307 ], [ %.072, %295 ], [ %.072, %285 ], [ %.072, %282 ], [ %.072, %280 ], [ %.072, %279 ], [ %.072, %278 ], [ %.072, %272 ], [ %.072, %268 ], [ %.072, %267 ], [ %266, %265 ], [ %.072, %264 ], [ %.072, %262 ], [ %.072, %261 ], [ %.072, %259 ], [ %.072, %258 ], [ %.072, %237 ], [ %.072, %227 ], [ %.072, %226 ], [ %.072, %216 ], [ %.072, %206 ], [ %.072, %198 ], [ %.072, %196 ], [ %.072, %184 ], [ %.072, %174 ], [ %.072, %173 ], [ %.072, %163 ], [ %.072, %153 ], [ %.072, %152 ], [ %.072, %144 ], [ %.072, %140 ], [ %.072, %139 ], [ %.072, %129 ], [ %.072, %119 ], [ %.072, %115 ], [ 0, %114 ], [ %.072, %112 ], [ %.072, %111 ], [ %.072, %93 ], [ %.072, %83 ], [ %.072, %81 ], [ %.072, %69 ], [ %.072, %59 ], [ %.072, %58 ], [ %.072, %48 ], [ %.072, %38 ], [ %.072, %36 ], [ %.072, %35 ], [ %.072, %33 ], [ %.072, %32 ], [ %.072, %27 ], [ %.072, %23 ], [ %.072, %20 ], [ %.072, %16 ], [ %.072, %15 ], [ %.072, %11 ]
  %.070.be = phi i32 [ %.070, %10 ], [ %.070, %530 ], [ %.070, %528 ], [ %.070, %526 ], [ %.070, %524 ], [ %.070, %523 ], [ %.070, %517 ], [ %.070, %516 ], [ %.070, %513 ], [ %.070, %501 ], [ %.070, %500 ], [ %.070, %499 ], [ %.070, %498 ], [ 0, %497 ], [ %.070, %488 ], [ %.070, %487 ], [ %.070, %486 ], [ %.070, %475 ], [ %.070, %465 ], [ %.070, %464 ], [ %.070, %463 ], [ %.070, %452 ], [ %.070, %442 ], [ %.070, %441 ], [ %.070, %430 ], [ %.070, %420 ], [ %.070, %419 ], [ %.070, %408 ], [ %.070, %398 ], [ %.070, %397 ], [ %.070, %387 ], [ %.070, %377 ], [ %.070, %375 ], [ %.070, %374 ], [ %.070, %359 ], [ %.070, %349 ], [ %.070, %342 ], [ %.070, %340 ], [ %.070, %338 ], [ %.070, %334 ], [ %.070, %333 ], [ %.070, %329 ], [ %.070, %328 ], [ %.070, %318 ], [ %.070, %308 ], [ %.070, %307 ], [ %.070, %295 ], [ %.070, %285 ], [ %.070, %282 ], [ %.070, %280 ], [ %.070, %279 ], [ %.070, %278 ], [ %.070, %272 ], [ %.070, %268 ], [ %.070, %267 ], [ %.070, %265 ], [ %.070, %264 ], [ %263, %262 ], [ %.070, %261 ], [ %.070, %259 ], [ %.070, %258 ], [ %.070, %237 ], [ %.070, %227 ], [ %.070, %226 ], [ %.070, %216 ], [ %.070, %206 ], [ %.070, %198 ], [ %.070, %196 ], [ %.070, %184 ], [ %.070, %174 ], [ %.070, %173 ], [ %.070, %163 ], [ %.070, %153 ], [ %.070, %152 ], [ %.070, %144 ], [ %.070, %140 ], [ %.070, %139 ], [ 0, %129 ], [ %.070, %119 ], [ %.070, %115 ], [ %.070, %114 ], [ %.070, %112 ], [ %.070, %111 ], [ %.070, %93 ], [ %.070, %83 ], [ %.070, %81 ], [ %.070, %69 ], [ %.070, %59 ], [ %.070, %58 ], [ %.070, %48 ], [ %.070, %38 ], [ %.070, %36 ], [ %.070, %35 ], [ %.070, %33 ], [ %.070, %32 ], [ %.070, %27 ], [ %.070, %23 ], [ %.070, %20 ], [ %.070, %16 ], [ %.070, %15 ], [ %.070, %11 ]
  %.068.be = phi i32 [ %.068, %10 ], [ %.068, %530 ], [ %.068, %528 ], [ %.068, %526 ], [ %.068, %524 ], [ %.068, %523 ], [ %.068, %517 ], [ %.068, %516 ], [ %.068, %513 ], [ %.068, %501 ], [ %.068, %500 ], [ %.068, %499 ], [ 0, %498 ], [ %.068, %497 ], [ %.068, %488 ], [ %.068, %487 ], [ %.068, %486 ], [ %.068, %475 ], [ %.068, %465 ], [ %.068, %464 ], [ %.068, %463 ], [ %.068, %452 ], [ %.068, %442 ], [ %.068, %441 ], [ %.068, %430 ], [ %.068, %420 ], [ %.068, %419 ], [ %.068, %408 ], [ %.068, %398 ], [ %.068, %397 ], [ %.068, %387 ], [ %.068, %377 ], [ %.068, %375 ], [ %.068, %374 ], [ %.068, %359 ], [ %.068, %349 ], [ %.068, %342 ], [ %.068, %340 ], [ %.068, %338 ], [ %.068, %334 ], [ %.068, %333 ], [ %.068, %329 ], [ %.068, %328 ], [ %.068, %318 ], [ %.068, %308 ], [ %.068, %307 ], [ %.068, %295 ], [ %.068, %285 ], [ %.068, %282 ], [ %.068, %280 ], [ %.068, %279 ], [ %.068, %278 ], [ %.068, %272 ], [ %.068, %268 ], [ %.068, %267 ], [ %.068, %265 ], [ %.068, %264 ], [ %.068, %262 ], [ %.068, %261 ], [ %260, %259 ], [ %.068, %258 ], [ %.068, %237 ], [ %.068, %227 ], [ %.068, %226 ], [ %.068, %216 ], [ %.068, %206 ], [ %.068, %198 ], [ %.068, %196 ], [ %.068, %184 ], [ %.068, %174 ], [ %.068, %173 ], [ 0, %163 ], [ %.068, %153 ], [ %.068, %152 ], [ %.068, %144 ], [ %.068, %140 ], [ %.068, %139 ], [ %.068, %129 ], [ %.068, %119 ], [ %.068, %115 ], [ %.068, %114 ], [ %.068, %112 ], [ %.068, %111 ], [ %.068, %93 ], [ %.068, %83 ], [ %.068, %81 ], [ %.068, %69 ], [ %.068, %59 ], [ %.068, %58 ], [ %.068, %48 ], [ %.068, %38 ], [ %.068, %36 ], [ %.068, %35 ], [ %.068, %33 ], [ %.068, %32 ], [ %.068, %27 ], [ %.068, %23 ], [ %.068, %20 ], [ %.068, %16 ], [ %.068, %15 ], [ %.068, %11 ]
  %.066.be = phi i8 [ %.066, %10 ], [ %.066, %530 ], [ %.066, %528 ], [ %.066, %526 ], [ %.066, %524 ], [ %.066, %523 ], [ %.066, %517 ], [ %.066, %516 ], [ %.066, %513 ], [ %.066, %501 ], [ %.066, %500 ], [ %.066, %499 ], [ %.066, %498 ], [ %.066, %497 ], [ %.066, %488 ], [ %.066, %487 ], [ %.066, %486 ], [ %.066, %475 ], [ %.066, %465 ], [ %.066, %464 ], [ %.066, %463 ], [ %.066, %452 ], [ %.066, %442 ], [ %.066, %441 ], [ %.066, %430 ], [ %.066, %420 ], [ %.066, %419 ], [ %.066, %408 ], [ %.066, %398 ], [ %.066, %397 ], [ %.066, %387 ], [ %.066, %377 ], [ %.066, %375 ], [ %.066, %374 ], [ %.066, %359 ], [ %.066, %349 ], [ %.066, %342 ], [ %.066, %340 ], [ %.066, %338 ], [ %.066, %334 ], [ %.066, %333 ], [ %.066, %329 ], [ %.066, %328 ], [ %.066, %318 ], [ %.066, %308 ], [ %.066, %307 ], [ %.066, %295 ], [ %.066, %285 ], [ %.066, %282 ], [ %.066, %280 ], [ %.066, %279 ], [ 1, %278 ], [ %.066, %272 ], [ %.066, %268 ], [ 0, %267 ], [ %.066, %265 ], [ %.066, %264 ], [ %.066, %262 ], [ %.066, %261 ], [ %.066, %259 ], [ %.066, %258 ], [ %.066, %237 ], [ %.066, %227 ], [ %.066, %226 ], [ %.066, %216 ], [ %.066, %206 ], [ %.066, %198 ], [ %.066, %196 ], [ %.066, %184 ], [ %.066, %174 ], [ %.066, %173 ], [ %.066, %163 ], [ %.066, %153 ], [ %.066, %152 ], [ %.066, %144 ], [ %.066, %140 ], [ %.066, %139 ], [ %.066, %129 ], [ %.066, %119 ], [ %.066, %115 ], [ %.066, %114 ], [ %.066, %112 ], [ %.066, %111 ], [ %.066, %93 ], [ %.066, %83 ], [ %.066, %81 ], [ %.066, %69 ], [ %.066, %59 ], [ %.066, %58 ], [ %.066, %48 ], [ %.066, %38 ], [ %.066, %36 ], [ %.066, %35 ], [ %.066, %33 ], [ %.066, %32 ], [ %.066, %27 ], [ %.066, %23 ], [ %.066, %20 ], [ %.066, %16 ], [ %.066, %15 ], [ %.066, %11 ]
  %.064.be = phi i32 [ %.064, %10 ], [ %.064, %530 ], [ %.064, %528 ], [ %.064, %526 ], [ %.064, %524 ], [ %.064, %523 ], [ %.064, %517 ], [ %.064, %516 ], [ %.064, %513 ], [ %.064, %501 ], [ %.064, %500 ], [ %.064, %499 ], [ %.064, %498 ], [ %.064, %497 ], [ %.064, %488 ], [ %.064, %487 ], [ %.064, %486 ], [ %.064, %475 ], [ %.064, %465 ], [ %.064, %464 ], [ %.064, %463 ], [ %.064, %452 ], [ %.064, %442 ], [ %.064, %441 ], [ %.064, %430 ], [ %.064, %420 ], [ %.064, %419 ], [ %.064, %408 ], [ %.064, %398 ], [ %.064, %397 ], [ %.064, %387 ], [ %.064, %377 ], [ %.064, %375 ], [ %.064, %374 ], [ %.064, %359 ], [ %.064, %349 ], [ %.064, %342 ], [ %.064, %340 ], [ %.064, %338 ], [ %.064, %334 ], [ %.064, %333 ], [ %.064, %329 ], [ %.064, %328 ], [ %.064, %318 ], [ %.064, %308 ], [ %.064, %307 ], [ %.064, %295 ], [ %.064, %285 ], [ %.064, %282 ], [ %281, %280 ], [ %.064, %279 ], [ %.064, %278 ], [ %.064, %272 ], [ %.064, %268 ], [ 0, %267 ], [ %.064, %265 ], [ %.064, %264 ], [ %.064, %262 ], [ %.064, %261 ], [ %.064, %259 ], [ %.064, %258 ], [ %.064, %237 ], [ %.064, %227 ], [ %.064, %226 ], [ %.064, %216 ], [ %.064, %206 ], [ %.064, %198 ], [ %.064, %196 ], [ %.064, %184 ], [ %.064, %174 ], [ %.064, %173 ], [ %.064, %163 ], [ %.064, %153 ], [ %.064, %152 ], [ %.064, %144 ], [ %.064, %140 ], [ %.064, %139 ], [ %.064, %129 ], [ %.064, %119 ], [ %.064, %115 ], [ %.064, %114 ], [ %.064, %112 ], [ %.064, %111 ], [ %.064, %93 ], [ %.064, %83 ], [ %.064, %81 ], [ %.064, %69 ], [ %.064, %59 ], [ %.064, %58 ], [ %.064, %48 ], [ %.064, %38 ], [ %.064, %36 ], [ %.064, %35 ], [ %.064, %33 ], [ %.064, %32 ], [ %.064, %27 ], [ %.064, %23 ], [ %.064, %20 ], [ %.064, %16 ], [ %.064, %15 ], [ %.064, %11 ]
  %.062.be = phi i32 [ %.062, %10 ], [ %.062, %530 ], [ %529, %528 ], [ %.062, %526 ], [ %.062, %524 ], [ %.062, %523 ], [ %.062, %517 ], [ 0, %516 ], [ %.062, %513 ], [ %.062, %501 ], [ %.062, %500 ], [ %.062, %499 ], [ %.062, %498 ], [ %.062, %497 ], [ %.062, %488 ], [ %.062, %487 ], [ %.062, %486 ], [ %.062, %475 ], [ %.062, %465 ], [ %.062, %464 ], [ %.062, %463 ], [ %453, %452 ], [ %.062, %442 ], [ %.062, %441 ], [ %.062, %430 ], [ %.062, %420 ], [ %.062, %419 ], [ %.062, %408 ], [ %.062, %398 ], [ %.062, %397 ], [ %.062, %387 ], [ %.062, %377 ], [ %.062, %375 ], [ %.062, %374 ], [ %.062, %359 ], [ %.062, %349 ], [ %.062, %342 ], [ %.062, %340 ], [ %.062, %338 ], [ %.062, %334 ], [ %.062, %333 ], [ %.062, %329 ], [ %.062, %328 ], [ 0, %318 ], [ %.062, %308 ], [ %.062, %307 ], [ %.062, %295 ], [ %.062, %285 ], [ %.062, %282 ], [ %.062, %280 ], [ %.062, %279 ], [ %.062, %278 ], [ %.062, %272 ], [ %.062, %268 ], [ %.062, %267 ], [ %.062, %265 ], [ %.062, %264 ], [ %.062, %262 ], [ %.062, %261 ], [ %.062, %259 ], [ %.062, %258 ], [ %.062, %237 ], [ %.062, %227 ], [ %.062, %226 ], [ %.062, %216 ], [ %.062, %206 ], [ %.062, %198 ], [ %.062, %196 ], [ %.062, %184 ], [ %.062, %174 ], [ %.062, %173 ], [ %.062, %163 ], [ %.062, %153 ], [ %.062, %152 ], [ %.062, %144 ], [ %.062, %140 ], [ %.062, %139 ], [ %.062, %129 ], [ %.062, %119 ], [ %.062, %115 ], [ %.062, %114 ], [ %.062, %112 ], [ %.062, %111 ], [ %.062, %93 ], [ %.062, %83 ], [ %.062, %81 ], [ %.062, %69 ], [ %.062, %59 ], [ %.062, %58 ], [ %.062, %48 ], [ %.062, %38 ], [ %.062, %36 ], [ %.062, %35 ], [ %.062, %33 ], [ %.062, %32 ], [ %.062, %27 ], [ %.062, %23 ], [ %.062, %20 ], [ %.062, %16 ], [ %.062, %15 ], [ %.062, %11 ]
  %.060.be = phi i32 [ %.060, %10 ], [ %.060, %530 ], [ %.060, %528 ], [ %.060, %526 ], [ %525, %524 ], [ %.060, %523 ], [ %.060, %517 ], [ %.060, %516 ], [ %.060, %513 ], [ %.060, %501 ], [ %.060, %500 ], [ %.060, %499 ], [ %.060, %498 ], [ %.060, %497 ], [ %.060, %488 ], [ %.060, %487 ], [ %.060, %486 ], [ %.060, %475 ], [ %.060, %465 ], [ %.060, %464 ], [ %.060, %463 ], [ %.060, %452 ], [ %.060, %442 ], [ %.060, %441 ], [ %.060, %430 ], [ %.060, %420 ], [ %.060, %419 ], [ %409, %408 ], [ %.060, %398 ], [ %.060, %397 ], [ %.060, %387 ], [ %.060, %377 ], [ %.060, %375 ], [ %.060, %374 ], [ %.060, %359 ], [ %.060, %349 ], [ %.060, %342 ], [ %.060, %340 ], [ %.060, %338 ], [ %.060, %334 ], [ 0, %333 ], [ %.060, %329 ], [ %.060, %328 ], [ %.060, %318 ], [ %.060, %308 ], [ %.060, %307 ], [ %.060, %295 ], [ %.060, %285 ], [ %.060, %282 ], [ %.060, %280 ], [ %.060, %279 ], [ %.060, %278 ], [ %.060, %272 ], [ %.060, %268 ], [ %.060, %267 ], [ %.060, %265 ], [ %.060, %264 ], [ %.060, %262 ], [ %.060, %261 ], [ %.060, %259 ], [ %.060, %258 ], [ %.060, %237 ], [ %.060, %227 ], [ %.060, %226 ], [ %.060, %216 ], [ %.060, %206 ], [ %.060, %198 ], [ %.060, %196 ], [ %.060, %184 ], [ %.060, %174 ], [ %.060, %173 ], [ %.060, %163 ], [ %.060, %153 ], [ %.060, %152 ], [ %.060, %144 ], [ %.060, %140 ], [ %.060, %139 ], [ %.060, %129 ], [ %.060, %119 ], [ %.060, %115 ], [ %.060, %114 ], [ %.060, %112 ], [ %.060, %111 ], [ %.060, %93 ], [ %.060, %83 ], [ %.060, %81 ], [ %.060, %69 ], [ %.060, %59 ], [ %.060, %58 ], [ %.060, %48 ], [ %.060, %38 ], [ %.060, %36 ], [ %.060, %35 ], [ %.060, %33 ], [ %.060, %32 ], [ %.060, %27 ], [ %.060, %23 ], [ %.060, %20 ], [ %.060, %16 ], [ %.060, %15 ], [ %.060, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ -801638800, %530 ], [ 742177875, %528 ], [ 1464365600, %526 ], [ 1137324704, %524 ], [ 235483927, %523 ], [ 1461140418, %517 ], [ 1235386759, %516 ], [ -1138645711, %513 ], [ -1020271913, %501 ], [ 602973558, %500 ], [ 566293435, %499 ], [ -1977161154, %498 ], [ -2012123523, %497 ], [ 1493238858, %488 ], [ -998975327, %487 ], [ 289919602, %486 ], [ %484, %475 ], [ %474, %465 ], [ 229809938, %464 ], [ 113129233, %463 ], [ %462, %452 ], [ %451, %442 ], [ 222569725, %441 ], [ %440, %430 ], [ %429, %420 ], [ -1977080811, %419 ], [ %418, %408 ], [ %407, %398 ], [ -1075507722, %397 ], [ %396, %387 ], [ %386, %377 ], [ 1842919444, %375 ], [ 1842919444, %374 ], [ %373, %359 ], [ %358, %349 ], [ %348, %342 ], [ -1060960315, %340 ], [ %339, %338 ], [ %337, %334 ], [ -1977080811, %333 ], [ %332, %329 ], [ 113129233, %328 ], [ %327, %318 ], [ %317, %308 ], [ 229809938, %307 ], [ %306, %295 ], [ %294, %285 ], [ %284, %282 ], [ -1490471168, %280 ], [ 2013782518, %279 ], [ -1065227342, %278 ], [ %277, %272 ], [ %271, %268 ], [ -1490471168, %267 ], [ 889579869, %265 ], [ -719933867, %264 ], [ 1802183353, %262 ], [ 388618584, %261 ], [ 631132127, %259 ], [ 212307384, %258 ], [ %257, %237 ], [ %236, %227 ], [ 212307384, %226 ], [ %225, %216 ], [ %215, %206 ], [ %205, %198 ], [ %197, %196 ], [ %195, %184 ], [ %183, %174 ], [ 631132127, %173 ], [ %172, %163 ], [ %162, %153 ], [ 388618584, %152 ], [ %151, %144 ], [ %143, %140 ], [ 1802183353, %139 ], [ %138, %129 ], [ %128, %119 ], [ %118, %115 ], [ 889579869, %114 ], [ -412820025, %112 ], [ -1663395058, %111 ], [ %110, %93 ], [ %92, %83 ], [ %82, %81 ], [ %80, %69 ], [ %68, %59 ], [ -412820025, %58 ], [ %57, %48 ], [ %47, %38 ], [ 542186303, %36 ], [ -1343102913, %35 ], [ 668112316, %33 ], [ -1028311387, %32 ], [ 1054461870, %27 ], [ 1054461870, %23 ], [ %22, %20 ], [ %19, %16 ], [ 668112316, %15 ], [ %14, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %.078, %12
  %14 = select i1 %13, i32 1987088923, i32 -1412441469
  br label %.backedge

15:                                               ; preds = %10
  br label %.backedge

16:                                               ; preds = %10
  %17 = load i32, i32* %3, align 4
  %18 = icmp slt i32 %.076, %17
  %19 = select i1 %18, i32 2081904119, i32 74830614
  br label %.backedge

20:                                               ; preds = %10
  %21 = icmp eq i32 %.078, %.076
  %22 = select i1 %21, i32 -243149939, i32 -643704606
  br label %.backedge

23:                                               ; preds = %10
  %24 = sext i32 %.078 to i64
  %25 = sext i32 %.076 to i64
  %26 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %24, i64 %25
  store i64 0, i64* %26, align 8
  br label %.backedge

27:                                               ; preds = %10
  %28 = load i64, i64* @INF, align 8
  %29 = sext i32 %.078 to i64
  %30 = sext i32 %.076 to i64
  %31 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %29, i64 %30
  store i64 %28, i64* %31, align 8
  br label %.backedge

32:                                               ; preds = %10
  br label %.backedge

33:                                               ; preds = %10
  %34 = add i32 %.076, 1
  br label %.backedge

35:                                               ; preds = %10
  br label %.backedge

36:                                               ; preds = %10
  %37 = add i32 %.078, 1
  br label %.backedge

38:                                               ; preds = %10
  %39 = load i32, i32* @x.5, align 4
  %40 = load i32, i32* @y.6, align 4
  %41 = add i32 %39, -1
  %42 = mul i32 %41, %39
  %43 = and i32 %42, 1
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %45, %44
  %47 = select i1 %46, i32 289919602, i32 59831861
  br label %.backedge

48:                                               ; preds = %10
  %49 = load i32, i32* @x.5, align 4
  %50 = load i32, i32* @y.6, align 4
  %51 = add i32 %49, -1
  %52 = mul i32 %51, %49
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %55, %54
  %57 = select i1 %56, i32 -509419273, i32 59831861
  br label %.backedge

58:                                               ; preds = %10
  br label %.backedge

59:                                               ; preds = %10
  %60 = load i32, i32* @x.5, align 4
  %61 = load i32, i32* @y.6, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -998975327, i32 -2103463560
  br label %.backedge

69:                                               ; preds = %10
  %70 = load i32, i32* %4, align 4
  %71 = icmp slt i32 %.074, %70
  store i1 %71, i1* %2, align 1
  %72 = load i32, i32* @x.5, align 4
  %73 = load i32, i32* @y.6, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 -1942425047, i32 -2103463560
  br label %.backedge

81:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %82 = select i1 %.0..0..0., i32 1469605734, i32 -1335720819
  br label %.backedge

83:                                               ; preds = %10
  %84 = load i32, i32* @x.5, align 4
  %85 = load i32, i32* @y.6, align 4
  %86 = add i32 %84, -1
  %87 = mul i32 %86, %84
  %88 = and i32 %87, 1
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %90, %89
  %92 = select i1 %91, i32 1493238858, i32 -421921211
  br label %.backedge

93:                                               ; preds = %10
  %94 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %5, i32* nonnull %6, i32* nonnull %7)
  %95 = load i32, i32* %7, align 4
  %96 = sext i32 %95 to i64
  %97 = load i32, i32* %5, align 4
  %98 = sext i32 %97 to i64
  %99 = load i32, i32* %6, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %98, i64 %100
  store i64 %96, i64* %101, align 8
  %102 = load i32, i32* @x.5, align 4
  %103 = load i32, i32* @y.6, align 4
  %104 = add i32 %102, -1
  %105 = mul i32 %104, %102
  %106 = and i32 %105, 1
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %108, %107
  %110 = select i1 %109, i32 192488420, i32 -421921211
  br label %.backedge

111:                                              ; preds = %10
  br label %.backedge

112:                                              ; preds = %10
  %113 = add i32 %.074, 1
  br label %.backedge

114:                                              ; preds = %10
  br label %.backedge

115:                                              ; preds = %10
  %116 = load i32, i32* %3, align 4
  %117 = icmp slt i32 %.072, %116
  %118 = select i1 %117, i32 -904235839, i32 815341212
  br label %.backedge

119:                                              ; preds = %10
  %120 = load i32, i32* @x.5, align 4
  %121 = load i32, i32* @y.6, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 -2012123523, i32 1833582616
  br label %.backedge

129:                                              ; preds = %10
  %130 = load i32, i32* @x.5, align 4
  %131 = load i32, i32* @y.6, align 4
  %132 = add i32 %130, -1
  %133 = mul i32 %132, %130
  %134 = and i32 %133, 1
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %136, %135
  %138 = select i1 %137, i32 2094089546, i32 1833582616
  br label %.backedge

139:                                              ; preds = %10
  br label %.backedge

140:                                              ; preds = %10
  %141 = load i32, i32* %3, align 4
  %142 = icmp slt i32 %.070, %141
  %143 = select i1 %142, i32 1482146577, i32 416026843
  br label %.backedge

144:                                              ; preds = %10
  %145 = sext i32 %.070 to i64
  %146 = sext i32 %.072 to i64
  %147 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %145, i64 %146
  %148 = load i64, i64* %147, align 8
  %149 = load i64, i64* @INF, align 8
  %150 = icmp eq i64 %148, %149
  %151 = select i1 %150, i32 491901632, i32 1735094066
  br label %.backedge

152:                                              ; preds = %10
  br label %.backedge

153:                                              ; preds = %10
  %154 = load i32, i32* @x.5, align 4
  %155 = load i32, i32* @y.6, align 4
  %156 = add i32 %154, -1
  %157 = mul i32 %156, %154
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %160, %159
  %162 = select i1 %161, i32 -1977161154, i32 -1840692773
  br label %.backedge

163:                                              ; preds = %10
  %164 = load i32, i32* @x.5, align 4
  %165 = load i32, i32* @y.6, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 2107297747, i32 -1840692773
  br label %.backedge

173:                                              ; preds = %10
  br label %.backedge

174:                                              ; preds = %10
  %175 = load i32, i32* @x.5, align 4
  %176 = load i32, i32* @y.6, align 4
  %177 = add i32 %175, -1
  %178 = mul i32 %177, %175
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %181, %180
  %183 = select i1 %182, i32 566293435, i32 -1623985236
  br label %.backedge

184:                                              ; preds = %10
  %185 = load i32, i32* %3, align 4
  %186 = icmp slt i32 %.068, %185
  store i1 %186, i1* %1, align 1
  %187 = load i32, i32* @x.5, align 4
  %188 = load i32, i32* @y.6, align 4
  %189 = add i32 %187, -1
  %190 = mul i32 %189, %187
  %191 = and i32 %190, 1
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %193, %192
  %195 = select i1 %194, i32 -1955933063, i32 -1623985236
  br label %.backedge

196:                                              ; preds = %10
  %.0..0..0.59 = load volatile i1, i1* %1, align 1
  %197 = select i1 %.0..0..0.59, i32 -712545666, i32 1832373611
  br label %.backedge

198:                                              ; preds = %10
  %199 = sext i32 %.072 to i64
  %200 = sext i32 %.068 to i64
  %201 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %199, i64 %200
  %202 = load i64, i64* %201, align 8
  %203 = load i64, i64* @INF, align 8
  %204 = icmp eq i64 %202, %203
  %205 = select i1 %204, i32 820286373, i32 671065035
  br label %.backedge

206:                                              ; preds = %10
  %207 = load i32, i32* @x.5, align 4
  %208 = load i32, i32* @y.6, align 4
  %209 = add i32 %207, -1
  %210 = mul i32 %209, %207
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %213, %212
  %215 = select i1 %214, i32 602973558, i32 805501528
  br label %.backedge

216:                                              ; preds = %10
  %217 = load i32, i32* @x.5, align 4
  %218 = load i32, i32* @y.6, align 4
  %219 = add i32 %217, -1
  %220 = mul i32 %219, %217
  %221 = and i32 %220, 1
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %223, %222
  %225 = select i1 %224, i32 537292126, i32 805501528
  br label %.backedge

226:                                              ; preds = %10
  br label %.backedge

227:                                              ; preds = %10
  %228 = load i32, i32* @x.5, align 4
  %229 = load i32, i32* @y.6, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 -1020271913, i32 -1044380898
  br label %.backedge

237:                                              ; preds = %10
  %238 = sext i32 %.070 to i64
  %239 = sext i32 %.068 to i64
  %240 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %238, i64 %239
  %241 = sext i32 %.072 to i64
  %242 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %238, i64 %241
  %243 = load i64, i64* %242, align 8
  %244 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %241, i64 %239
  %245 = load i64, i64* %244, align 8
  %246 = add i64 %245, %243
  store i64 %246, i64* %8, align 8
  %247 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %240, i64* nonnull dereferenceable(8) %8)
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %240, align 8
  %249 = load i32, i32* @x.5, align 4
  %250 = load i32, i32* @y.6, align 4
  %251 = add i32 %249, -1
  %252 = mul i32 %251, %249
  %253 = and i32 %252, 1
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %255, %254
  %257 = select i1 %256, i32 -2138255340, i32 -1044380898
  br label %.backedge

258:                                              ; preds = %10
  br label %.backedge

259:                                              ; preds = %10
  %260 = add i32 %.068, 1
  br label %.backedge

261:                                              ; preds = %10
  br label %.backedge

262:                                              ; preds = %10
  %263 = add i32 %.070, 1
  br label %.backedge

264:                                              ; preds = %10
  br label %.backedge

265:                                              ; preds = %10
  %266 = add i32 %.072, 1
  br label %.backedge

267:                                              ; preds = %10
  br label %.backedge

268:                                              ; preds = %10
  %269 = load i32, i32* %3, align 4
  %270 = icmp slt i32 %.064, %269
  %271 = select i1 %270, i32 185669152, i32 -1857609863
  br label %.backedge

272:                                              ; preds = %10
  %273 = sext i32 %.064 to i64
  %274 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %273, i64 %273
  %275 = load i64, i64* %274, align 8
  %276 = icmp slt i64 %275, 0
  %277 = select i1 %276, i32 -783491144, i32 -1065227342
  br label %.backedge

278:                                              ; preds = %10
  br label %.backedge

279:                                              ; preds = %10
  br label %.backedge

280:                                              ; preds = %10
  %281 = add i32 %.064, 1
  br label %.backedge

282:                                              ; preds = %10
  %283 = and i8 %.066, 1
  %.not81 = icmp eq i8 %283, 0
  %284 = select i1 %.not81, i32 -1149333538, i32 -1890266548
  br label %.backedge

285:                                              ; preds = %10
  %286 = load i32, i32* @x.5, align 4
  %287 = load i32, i32* @y.6, align 4
  %288 = add i32 %286, -1
  %289 = mul i32 %288, %286
  %290 = and i32 %289, 1
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %292, %291
  %294 = select i1 %293, i32 -1138645711, i32 -1767876388
  br label %.backedge

295:                                              ; preds = %10
  %296 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  %297 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %296, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %298 = load i32, i32* @x.5, align 4
  %299 = load i32, i32* @y.6, align 4
  %300 = add i32 %298, -1
  %301 = mul i32 %300, %298
  %302 = and i32 %301, 1
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %304, %303
  %306 = select i1 %305, i32 -57757397, i32 -1767876388
  br label %.backedge

307:                                              ; preds = %10
  br label %.backedge

308:                                              ; preds = %10
  %309 = load i32, i32* @x.5, align 4
  %310 = load i32, i32* @y.6, align 4
  %311 = add i32 %309, -1
  %312 = mul i32 %311, %309
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %315, %314
  %317 = select i1 %316, i32 1235386759, i32 -372658039
  br label %.backedge

318:                                              ; preds = %10
  %319 = load i32, i32* @x.5, align 4
  %320 = load i32, i32* @y.6, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 993728055, i32 -372658039
  br label %.backedge

328:                                              ; preds = %10
  br label %.backedge

329:                                              ; preds = %10
  %330 = load i32, i32* %3, align 4
  %331 = icmp slt i32 %.062, %330
  %332 = select i1 %331, i32 -606245133, i32 494689571
  br label %.backedge

333:                                              ; preds = %10
  br label %.backedge

334:                                              ; preds = %10
  %335 = load i32, i32* %3, align 4
  %336 = icmp slt i32 %.060, %335
  %337 = select i1 %336, i32 1884258876, i32 523794199
  br label %.backedge

338:                                              ; preds = %10
  %.not80 = icmp eq i32 %.060, 0
  %339 = select i1 %.not80, i32 -1060960315, i32 1668607263
  br label %.backedge

340:                                              ; preds = %10
  %341 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  br label %.backedge

342:                                              ; preds = %10
  %343 = sext i32 %.062 to i64
  %344 = sext i32 %.060 to i64
  %345 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %343, i64 %344
  %346 = load i64, i64* %345, align 8
  %347 = load i64, i64* @INF, align 8
  %.not = icmp eq i64 %346, %347
  %348 = select i1 %.not, i32 1156140719, i32 -657767828
  br label %.backedge

349:                                              ; preds = %10
  %350 = load i32, i32* @x.5, align 4
  %351 = load i32, i32* @y.6, align 4
  %352 = add i32 %350, -1
  %353 = mul i32 %352, %350
  %354 = and i32 %353, 1
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %356, %355
  %358 = select i1 %357, i32 1461140418, i32 -700537838
  br label %.backedge

359:                                              ; preds = %10
  %360 = sext i32 %.062 to i64
  %361 = sext i32 %.060 to i64
  %362 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %360, i64 %361
  %363 = load i64, i64* %362, align 8
  %364 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %363)
  %365 = load i32, i32* @x.5, align 4
  %366 = load i32, i32* @y.6, align 4
  %367 = add i32 %365, -1
  %368 = mul i32 %367, %365
  %369 = and i32 %368, 1
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %371, %370
  %373 = select i1 %372, i32 -649141187, i32 -700537838
  br label %.backedge

374:                                              ; preds = %10
  br label %.backedge

375:                                              ; preds = %10
  %376 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  br label %.backedge

377:                                              ; preds = %10
  %378 = load i32, i32* @x.5, align 4
  %379 = load i32, i32* @y.6, align 4
  %380 = add i32 %378, -1
  %381 = mul i32 %380, %378
  %382 = and i32 %381, 1
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %384, %383
  %386 = select i1 %385, i32 235483927, i32 -190510633
  br label %.backedge

387:                                              ; preds = %10
  %388 = load i32, i32* @x.5, align 4
  %389 = load i32, i32* @y.6, align 4
  %390 = add i32 %388, -1
  %391 = mul i32 %390, %388
  %392 = and i32 %391, 1
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %394, %393
  %396 = select i1 %395, i32 369534689, i32 -190510633
  br label %.backedge

397:                                              ; preds = %10
  br label %.backedge

398:                                              ; preds = %10
  %399 = load i32, i32* @x.5, align 4
  %400 = load i32, i32* @y.6, align 4
  %401 = add i32 %399, -1
  %402 = mul i32 %401, %399
  %403 = and i32 %402, 1
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %405, %404
  %407 = select i1 %406, i32 1137324704, i32 1318329795
  br label %.backedge

408:                                              ; preds = %10
  %409 = add i32 %.060, 1
  %410 = load i32, i32* @x.5, align 4
  %411 = load i32, i32* @y.6, align 4
  %412 = add i32 %410, -1
  %413 = mul i32 %412, %410
  %414 = and i32 %413, 1
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %416, %415
  %418 = select i1 %417, i32 580022690, i32 1318329795
  br label %.backedge

419:                                              ; preds = %10
  br label %.backedge

420:                                              ; preds = %10
  %421 = load i32, i32* @x.5, align 4
  %422 = load i32, i32* @y.6, align 4
  %423 = add i32 %421, -1
  %424 = mul i32 %423, %421
  %425 = and i32 %424, 1
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %427, %426
  %429 = select i1 %428, i32 1464365600, i32 -1741047290
  br label %.backedge

430:                                              ; preds = %10
  %431 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %432 = load i32, i32* @x.5, align 4
  %433 = load i32, i32* @y.6, align 4
  %434 = add i32 %432, -1
  %435 = mul i32 %434, %432
  %436 = and i32 %435, 1
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %438, %437
  %440 = select i1 %439, i32 29551540, i32 -1741047290
  br label %.backedge

441:                                              ; preds = %10
  br label %.backedge

442:                                              ; preds = %10
  %443 = load i32, i32* @x.5, align 4
  %444 = load i32, i32* @y.6, align 4
  %445 = add i32 %443, -1
  %446 = mul i32 %445, %443
  %447 = and i32 %446, 1
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %449, %448
  %451 = select i1 %450, i32 742177875, i32 -671629518
  br label %.backedge

452:                                              ; preds = %10
  %453 = add i32 %.062, 1
  %454 = load i32, i32* @x.5, align 4
  %455 = load i32, i32* @y.6, align 4
  %456 = add i32 %454, -1
  %457 = mul i32 %456, %454
  %458 = and i32 %457, 1
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %460, %459
  %462 = select i1 %461, i32 599090320, i32 -671629518
  br label %.backedge

463:                                              ; preds = %10
  br label %.backedge

464:                                              ; preds = %10
  br label %.backedge

465:                                              ; preds = %10
  %466 = load i32, i32* @x.5, align 4
  %467 = load i32, i32* @y.6, align 4
  %468 = add i32 %466, -1
  %469 = mul i32 %468, %466
  %470 = and i32 %469, 1
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %472, %471
  %474 = select i1 %473, i32 -801638800, i32 -1502937353
  br label %.backedge

475:                                              ; preds = %10
  %476 = load i32, i32* @x.5, align 4
  %477 = load i32, i32* @y.6, align 4
  %478 = add i32 %476, -1
  %479 = mul i32 %478, %476
  %480 = and i32 %479, 1
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %482, %481
  %484 = select i1 %483, i32 -594604246, i32 -1502937353
  br label %.backedge

485:                                              ; preds = %10
  ret i32 0

486:                                              ; preds = %10
  br label %.backedge

487:                                              ; preds = %10
  br label %.backedge

488:                                              ; preds = %10
  %489 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %5, i32* nonnull %6, i32* nonnull %7)
  %490 = load i32, i32* %7, align 4
  %491 = sext i32 %490 to i64
  %492 = load i32, i32* %5, align 4
  %493 = sext i32 %492 to i64
  %494 = load i32, i32* %6, align 4
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %493, i64 %495
  store i64 %491, i64* %496, align 8
  br label %.backedge

497:                                              ; preds = %10
  br label %.backedge

498:                                              ; preds = %10
  br label %.backedge

499:                                              ; preds = %10
  br label %.backedge

500:                                              ; preds = %10
  br label %.backedge

501:                                              ; preds = %10
  %502 = sext i32 %.070 to i64
  %503 = sext i32 %.068 to i64
  %504 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %502, i64 %503
  %505 = sext i32 %.072 to i64
  %506 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %502, i64 %505
  %507 = load i64, i64* %506, align 8
  %508 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %505, i64 %503
  %509 = load i64, i64* %508, align 8
  %510 = add i64 %509, %507
  store i64 %510, i64* %8, align 8
  %511 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %504, i64* nonnull dereferenceable(8) %8)
  %512 = load i64, i64* %511, align 8
  store i64 %512, i64* %504, align 8
  br label %.backedge

513:                                              ; preds = %10
  %514 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  %515 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %514, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

516:                                              ; preds = %10
  br label %.backedge

517:                                              ; preds = %10
  %518 = sext i32 %.062 to i64
  %519 = sext i32 %.060 to i64
  %520 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @D, i64 0, i64 %518, i64 %519
  %521 = load i64, i64* %520, align 8
  %522 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %521)
  br label %.backedge

523:                                              ; preds = %10
  br label %.backedge

524:                                              ; preds = %10
  %525 = add i32 %.060, 1
  br label %.backedge

526:                                              ; preds = %10
  %527 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

528:                                              ; preds = %10
  %529 = add i32 %.062, 1
  br label %.backedge

530:                                              ; preds = %10
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i64**, align 8
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = load i32, i32* @x.7, align 4
  %11 = load i32, i32* @y.8, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %9, align 1
  %16 = icmp slt i32 %11, 10
  store i1 %16, i1* %8, align 1
  br label %17

17:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ 1960156757, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1960156757, label %18
    i32 1161461320, label %21
    i32 -1461609192, label %39
    i32 -322506749, label %41
    i32 -779133802, label %43
    i32 -513963262, label %45
    i32 855177846, label %55
    i32 1933605021, label %66
    i32 -917498091, label %67
    i32 1973223983, label %68
  ]

.backedge:                                        ; preds = %17, %68, %67, %55, %45, %43, %41, %39, %21, %18
  %.0.be = phi i32 [ %.0, %17 ], [ 855177846, %68 ], [ 1161461320, %67 ], [ %65, %55 ], [ %54, %45 ], [ -513963262, %43 ], [ -513963262, %41 ], [ %40, %39 ], [ %38, %21 ], [ %20, %18 ]
  br label %17

18:                                               ; preds = %17
  %.0..0..0. = load volatile i1, i1* %9, align 1
  %.0..0..0.1 = load volatile i1, i1* %8, align 1
  %19 = or i1 %.0..0..0., %.0..0..0.1
  %20 = select i1 %19, i32 1161461320, i32 -917498091
  br label %.backedge

21:                                               ; preds = %17
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %7, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %6, align 8
  %24 = alloca i64*, align 8
  store i64** %24, i64*** %5, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %6, align 8
  store i64* %0, i64** %.0..0..0.6, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %5, align 8
  store i64* %1, i64** %.0..0..0.9, align 8
  %.0..0..0.10 = load volatile i64**, i64*** %5, align 8
  %25 = load i64*, i64** %.0..0..0.10, align 8
  %26 = load i64, i64* %25, align 8
  %.0..0..0.7 = load volatile i64**, i64*** %6, align 8
  %27 = load i64*, i64** %.0..0..0.7, align 8
  %28 = load i64, i64* %27, align 8
  %29 = icmp slt i64 %26, %28
  store i1 %29, i1* %4, align 1
  %30 = load i32, i32* @x.7, align 4
  %31 = load i32, i32* @y.8, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -1461609192, i32 -917498091
  br label %.backedge

39:                                               ; preds = %17
  %.0..0..0.12 = load volatile i1, i1* %4, align 1
  %40 = select i1 %.0..0..0.12, i32 -322506749, i32 -779133802
  br label %.backedge

41:                                               ; preds = %17
  %.0..0..0.11 = load volatile i64**, i64*** %5, align 8
  %42 = load i64*, i64** %.0..0..0.11, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %7, align 8
  store i64* %42, i64** %.0..0..0.2, align 8
  br label %.backedge

43:                                               ; preds = %17
  %.0..0..0.8 = load volatile i64**, i64*** %6, align 8
  %44 = load i64*, i64** %.0..0..0.8, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %7, align 8
  store i64* %44, i64** %.0..0..0.3, align 8
  br label %.backedge

45:                                               ; preds = %17
  %46 = load i32, i32* @x.7, align 4
  %47 = load i32, i32* @y.8, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 855177846, i32 1973223983
  br label %.backedge

55:                                               ; preds = %17
  %.0..0..0.4 = load volatile i64**, i64*** %7, align 8
  %56 = load i64*, i64** %.0..0..0.4, align 8
  store i64* %56, i64** %3, align 8
  %57 = load i32, i32* @x.7, align 4
  %58 = load i32, i32* @y.8, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 1933605021, i32 1973223983
  br label %.backedge

66:                                               ; preds = %17
  %.0..0..0.13 = load volatile i64*, i64** %3, align 8
  ret i64* %.0..0..0.13

67:                                               ; preds = %17
  br label %.backedge

68:                                               ; preds = %17
  %.0..0..0.5 = load volatile i64**, i64*** %7, align 8
  br label %.backedge
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s910394125.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
