; ModuleID = 'build_ollvm/programs/p02363/s312980262.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s312980262.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@.str = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %d %d\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s312980262.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@str.1 = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [100 x [100 x i64]], align 16
  %11 = alloca i64, align 8
  %12 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* nonnull %9, i32* nonnull %5)
  br label %13

13:                                               ; preds = %.backedge, %0
  %.075 = phi i32 [ 0, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i32 [ undef, %0 ], [ %.067.be, %.backedge ]
  %.065 = phi i32 [ undef, %0 ], [ %.065.be, %.backedge ]
  %.063 = phi i32 [ undef, %0 ], [ %.063.be, %.backedge ]
  %.061 = phi i32 [ undef, %0 ], [ %.061.be, %.backedge ]
  %.059 = phi i32 [ undef, %0 ], [ %.059.be, %.backedge ]
  %.057 = phi i32 [ undef, %0 ], [ %.057.be, %.backedge ]
  %.0 = phi i32 [ 1517562604, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1517562604, label %14
    i32 -229616852, label %18
    i32 -29028205, label %28
    i32 -233346631, label %38
    i32 -911042772, label %39
    i32 -205721328, label %43
    i32 906275857, label %49
    i32 -64146956, label %59
    i32 204357655, label %70
    i32 1429705366, label %71
    i32 497094889, label %72
    i32 607576239, label %74
    i32 994477704, label %75
    i32 1429960720, label %79
    i32 -1353776885, label %88
    i32 618415290, label %89
    i32 1328100498, label %90
    i32 -97301749, label %94
    i32 228358488, label %95
    i32 -1535247986, label %99
    i32 -636998698, label %109
    i32 -1186260000, label %124
    i32 -1347465670, label %126
    i32 437437940, label %136
    i32 605105521, label %146
    i32 -176763243, label %147
    i32 -390583468, label %148
    i32 731916879, label %158
    i32 550551183, label %170
    i32 -1042595705, label %172
    i32 -1034334607, label %182
    i32 -1888771499, label %197
    i32 263744002, label %199
    i32 -1509263528, label %200
    i32 -748136104, label %212
    i32 488783425, label %214
    i32 -932455651, label %215
    i32 23734781, label %216
    i32 -1953129289, label %217
    i32 399959233, label %219
    i32 -1396884937, label %220
    i32 576746773, label %224
    i32 -1426967318, label %230
    i32 1419566564, label %231
    i32 -1370773575, label %232
    i32 -1164673343, label %242
    i32 873278667, label %253
    i32 148327884, label %254
    i32 1738281891, label %256
    i32 -868851817, label %266
    i32 -1347951781, label %276
    i32 249680968, label %277
    i32 597184865, label %278
    i32 -1132685562, label %282
    i32 262445069, label %292
    i32 526681316, label %302
    i32 -1341281730, label %303
    i32 -906657255, label %307
    i32 1495416013, label %317
    i32 900153150, label %328
    i32 267506356, label %330
    i32 1839067636, label %331
    i32 1718673591, label %338
    i32 1364688096, label %348
    i32 916425513, label %359
    i32 -1688401636, label %360
    i32 -1157546998, label %370
    i32 -316160075, label %385
    i32 589308631, label %386
    i32 1931342546, label %387
    i32 381403746, label %397
    i32 1620441147, label %408
    i32 1672036579, label %409
    i32 1169491449, label %419
    i32 -91515823, label %429
    i32 537812959, label %430
    i32 1050605464, label %432
    i32 1312038944, label %433
    i32 -1636715041, label %434
    i32 -1512875876, label %435
    i32 142842464, label %437
    i32 583727510, label %438
    i32 -438185554, label %439
    i32 1983615609, label %440
    i32 -1899804259, label %441
    i32 -1178466526, label %443
    i32 1441569785, label %444
    i32 1591789991, label %445
    i32 -40660916, label %446
    i32 1572364737, label %448
    i32 -1218974562, label %454
    i32 -159333426, label %456
  ]

.backedge:                                        ; preds = %13, %456, %454, %448, %446, %445, %444, %443, %441, %440, %439, %438, %437, %435, %434, %432, %430, %429, %419, %409, %408, %397, %387, %386, %385, %370, %360, %359, %348, %338, %331, %330, %328, %317, %307, %303, %302, %292, %282, %278, %277, %276, %266, %256, %254, %253, %242, %232, %231, %230, %224, %220, %219, %217, %216, %215, %214, %212, %200, %199, %197, %182, %172, %170, %158, %148, %147, %146, %136, %126, %124, %109, %99, %95, %94, %90, %89, %88, %79, %75, %74, %72, %71, %70, %59, %49, %43, %39, %38, %28, %18, %14
  %.075.be = phi i32 [ %.075, %13 ], [ %.075, %456 ], [ %.075, %454 ], [ %.075, %448 ], [ %.075, %446 ], [ %.075, %445 ], [ %.075, %444 ], [ %.075, %443 ], [ %.075, %441 ], [ %.075, %440 ], [ %.075, %439 ], [ %.075, %438 ], [ %.075, %437 ], [ %.075, %435 ], [ %.075, %434 ], [ %.075, %432 ], [ %.075, %430 ], [ %.075, %429 ], [ %.075, %419 ], [ %.075, %409 ], [ %.075, %408 ], [ %.075, %397 ], [ %.075, %387 ], [ %.075, %386 ], [ %.075, %385 ], [ %.075, %370 ], [ %.075, %360 ], [ %.075, %359 ], [ %.075, %348 ], [ %.075, %338 ], [ %.075, %331 ], [ %.075, %330 ], [ %.075, %328 ], [ %.075, %317 ], [ %.075, %307 ], [ %.075, %303 ], [ %.075, %302 ], [ %.075, %292 ], [ %.075, %282 ], [ %.075, %278 ], [ %.075, %277 ], [ %.075, %276 ], [ %.075, %266 ], [ %.075, %256 ], [ %.075, %254 ], [ %.075, %253 ], [ %.075, %242 ], [ %.075, %232 ], [ %.075, %231 ], [ %.075, %230 ], [ %.075, %224 ], [ %.075, %220 ], [ %.075, %219 ], [ %.075, %217 ], [ %.075, %216 ], [ %.075, %215 ], [ %.075, %214 ], [ %.075, %212 ], [ %.075, %200 ], [ %.075, %199 ], [ %.075, %197 ], [ %.075, %182 ], [ %.075, %172 ], [ %.075, %170 ], [ %.075, %158 ], [ %.075, %148 ], [ %.075, %147 ], [ %.075, %146 ], [ %.075, %136 ], [ %.075, %126 ], [ %.075, %124 ], [ %.075, %109 ], [ %.075, %99 ], [ %.075, %95 ], [ %.075, %94 ], [ %.075, %90 ], [ %.075, %89 ], [ %.075, %88 ], [ %.075, %79 ], [ %.075, %75 ], [ %.075, %74 ], [ %73, %72 ], [ %.075, %71 ], [ %.075, %70 ], [ %.075, %59 ], [ %.075, %49 ], [ %.075, %43 ], [ %.075, %39 ], [ %.075, %38 ], [ %.075, %28 ], [ %.075, %18 ], [ %.075, %14 ]
  %.073.be = phi i32 [ %.073, %13 ], [ %.073, %456 ], [ %.073, %454 ], [ %.073, %448 ], [ %.073, %446 ], [ %.073, %445 ], [ %.073, %444 ], [ %.073, %443 ], [ %.073, %441 ], [ %.073, %440 ], [ %.073, %439 ], [ %.073, %438 ], [ %.073, %437 ], [ %436, %435 ], [ 0, %434 ], [ %.073, %432 ], [ %.073, %430 ], [ %.073, %429 ], [ %.073, %419 ], [ %.073, %409 ], [ %.073, %408 ], [ %.073, %397 ], [ %.073, %387 ], [ %.073, %386 ], [ %.073, %385 ], [ %.073, %370 ], [ %.073, %360 ], [ %.073, %359 ], [ %.073, %348 ], [ %.073, %338 ], [ %.073, %331 ], [ %.073, %330 ], [ %.073, %328 ], [ %.073, %317 ], [ %.073, %307 ], [ %.073, %303 ], [ %.073, %302 ], [ %.073, %292 ], [ %.073, %282 ], [ %.073, %278 ], [ %.073, %277 ], [ %.073, %276 ], [ %.073, %266 ], [ %.073, %256 ], [ %.073, %254 ], [ %.073, %253 ], [ %.073, %242 ], [ %.073, %232 ], [ %.073, %231 ], [ %.073, %230 ], [ %.073, %224 ], [ %.073, %220 ], [ %.073, %219 ], [ %.073, %217 ], [ %.073, %216 ], [ %.073, %215 ], [ %.073, %214 ], [ %.073, %212 ], [ %.073, %200 ], [ %.073, %199 ], [ %.073, %197 ], [ %.073, %182 ], [ %.073, %172 ], [ %.073, %170 ], [ %.073, %158 ], [ %.073, %148 ], [ %.073, %147 ], [ %.073, %146 ], [ %.073, %136 ], [ %.073, %126 ], [ %.073, %124 ], [ %.073, %109 ], [ %.073, %99 ], [ %.073, %95 ], [ %.073, %94 ], [ %.073, %90 ], [ %.073, %89 ], [ %.073, %88 ], [ %.073, %79 ], [ %.073, %75 ], [ %.073, %74 ], [ %.073, %72 ], [ %.073, %71 ], [ %.073, %70 ], [ %60, %59 ], [ %.073, %49 ], [ %.073, %43 ], [ %.073, %39 ], [ %.073, %38 ], [ 0, %28 ], [ %.073, %18 ], [ %.073, %14 ]
  %.071.be = phi i32 [ %.071, %13 ], [ %.071, %456 ], [ %.071, %454 ], [ %.071, %448 ], [ %.071, %446 ], [ %.071, %445 ], [ %.071, %444 ], [ %.071, %443 ], [ %.071, %441 ], [ %.071, %440 ], [ %.071, %439 ], [ %.071, %438 ], [ %.071, %437 ], [ %.071, %435 ], [ %.071, %434 ], [ %.071, %432 ], [ %.071, %430 ], [ %.071, %429 ], [ %.071, %419 ], [ %.071, %409 ], [ %.071, %408 ], [ %.071, %397 ], [ %.071, %387 ], [ %.071, %386 ], [ %.071, %385 ], [ %.071, %370 ], [ %.071, %360 ], [ %.071, %359 ], [ %.071, %348 ], [ %.071, %338 ], [ %.071, %331 ], [ %.071, %330 ], [ %.071, %328 ], [ %.071, %317 ], [ %.071, %307 ], [ %.071, %303 ], [ %.071, %302 ], [ %.071, %292 ], [ %.071, %282 ], [ %.071, %278 ], [ %.071, %277 ], [ %.071, %276 ], [ %.071, %266 ], [ %.071, %256 ], [ %.071, %254 ], [ %.071, %253 ], [ %.071, %242 ], [ %.071, %232 ], [ %.071, %231 ], [ %.071, %230 ], [ %.071, %224 ], [ %.071, %220 ], [ %.071, %219 ], [ %.071, %217 ], [ %.071, %216 ], [ %.071, %215 ], [ %.071, %214 ], [ %.071, %212 ], [ %.071, %200 ], [ %.071, %199 ], [ %.071, %197 ], [ %.071, %182 ], [ %.071, %172 ], [ %.071, %170 ], [ %.071, %158 ], [ %.071, %148 ], [ %.071, %147 ], [ %.071, %146 ], [ %.071, %136 ], [ %.071, %126 ], [ %.071, %124 ], [ %.071, %109 ], [ %.071, %99 ], [ %.071, %95 ], [ %.071, %94 ], [ %.071, %90 ], [ %.071, %89 ], [ %.neg80, %88 ], [ %.071, %79 ], [ %.071, %75 ], [ 0, %74 ], [ %.071, %72 ], [ %.071, %71 ], [ %.071, %70 ], [ %.071, %59 ], [ %.071, %49 ], [ %.071, %43 ], [ %.071, %39 ], [ %.071, %38 ], [ %.071, %28 ], [ %.071, %18 ], [ %.071, %14 ]
  %.069.be = phi i32 [ %.069, %13 ], [ %.069, %456 ], [ %.069, %454 ], [ %.069, %448 ], [ %.069, %446 ], [ %.069, %445 ], [ %.069, %444 ], [ %.069, %443 ], [ %.069, %441 ], [ %.069, %440 ], [ %.069, %439 ], [ %.069, %438 ], [ %.069, %437 ], [ %.069, %435 ], [ %.069, %434 ], [ %.069, %432 ], [ %.069, %430 ], [ %.069, %429 ], [ %.069, %419 ], [ %.069, %409 ], [ %.069, %408 ], [ %.069, %397 ], [ %.069, %387 ], [ %.069, %386 ], [ %.069, %385 ], [ %.069, %370 ], [ %.069, %360 ], [ %.069, %359 ], [ %.069, %348 ], [ %.069, %338 ], [ %.069, %331 ], [ %.069, %330 ], [ %.069, %328 ], [ %.069, %317 ], [ %.069, %307 ], [ %.069, %303 ], [ %.069, %302 ], [ %.069, %292 ], [ %.069, %282 ], [ %.069, %278 ], [ %.069, %277 ], [ %.069, %276 ], [ %.069, %266 ], [ %.069, %256 ], [ %.069, %254 ], [ %.069, %253 ], [ %.069, %242 ], [ %.069, %232 ], [ %.069, %231 ], [ %.069, %230 ], [ %.069, %224 ], [ %.069, %220 ], [ %.069, %219 ], [ %218, %217 ], [ %.069, %216 ], [ %.069, %215 ], [ %.069, %214 ], [ %.069, %212 ], [ %.069, %200 ], [ %.069, %199 ], [ %.069, %197 ], [ %.069, %182 ], [ %.069, %172 ], [ %.069, %170 ], [ %.069, %158 ], [ %.069, %148 ], [ %.069, %147 ], [ %.069, %146 ], [ %.069, %136 ], [ %.069, %126 ], [ %.069, %124 ], [ %.069, %109 ], [ %.069, %99 ], [ %.069, %95 ], [ %.069, %94 ], [ %.069, %90 ], [ 0, %89 ], [ %.069, %88 ], [ %.069, %79 ], [ %.069, %75 ], [ %.069, %74 ], [ %.069, %72 ], [ %.069, %71 ], [ %.069, %70 ], [ %.069, %59 ], [ %.069, %49 ], [ %.069, %43 ], [ %.069, %39 ], [ %.069, %38 ], [ %.069, %28 ], [ %.069, %18 ], [ %.069, %14 ]
  %.067.be = phi i32 [ %.067, %13 ], [ %.067, %456 ], [ %.067, %454 ], [ %.067, %448 ], [ %.067, %446 ], [ %.067, %445 ], [ %.067, %444 ], [ %.067, %443 ], [ %.067, %441 ], [ %.067, %440 ], [ %.067, %439 ], [ %.067, %438 ], [ %.067, %437 ], [ %.067, %435 ], [ %.067, %434 ], [ %.067, %432 ], [ %.067, %430 ], [ %.067, %429 ], [ %.067, %419 ], [ %.067, %409 ], [ %.067, %408 ], [ %.067, %397 ], [ %.067, %387 ], [ %.067, %386 ], [ %.067, %385 ], [ %.067, %370 ], [ %.067, %360 ], [ %.067, %359 ], [ %.067, %348 ], [ %.067, %338 ], [ %.067, %331 ], [ %.067, %330 ], [ %.067, %328 ], [ %.067, %317 ], [ %.067, %307 ], [ %.067, %303 ], [ %.067, %302 ], [ %.067, %292 ], [ %.067, %282 ], [ %.067, %278 ], [ %.067, %277 ], [ %.067, %276 ], [ %.067, %266 ], [ %.067, %256 ], [ %.067, %254 ], [ %.067, %253 ], [ %.067, %242 ], [ %.067, %232 ], [ %.067, %231 ], [ %.067, %230 ], [ %.067, %224 ], [ %.067, %220 ], [ %.067, %219 ], [ %.067, %217 ], [ %.067, %216 ], [ %.neg, %215 ], [ %.067, %214 ], [ %.067, %212 ], [ %.067, %200 ], [ %.067, %199 ], [ %.067, %197 ], [ %.067, %182 ], [ %.067, %172 ], [ %.067, %170 ], [ %.067, %158 ], [ %.067, %148 ], [ %.067, %147 ], [ %.067, %146 ], [ %.067, %136 ], [ %.067, %126 ], [ %.067, %124 ], [ %.067, %109 ], [ %.067, %99 ], [ %.067, %95 ], [ 0, %94 ], [ %.067, %90 ], [ %.067, %89 ], [ %.067, %88 ], [ %.067, %79 ], [ %.067, %75 ], [ %.067, %74 ], [ %.067, %72 ], [ %.067, %71 ], [ %.067, %70 ], [ %.067, %59 ], [ %.067, %49 ], [ %.067, %43 ], [ %.067, %39 ], [ %.067, %38 ], [ %.067, %28 ], [ %.067, %18 ], [ %.067, %14 ]
  %.065.be = phi i32 [ %.065, %13 ], [ %.065, %456 ], [ %.065, %454 ], [ %.065, %448 ], [ %.065, %446 ], [ %.065, %445 ], [ %.065, %444 ], [ %.065, %443 ], [ %.065, %441 ], [ %.065, %440 ], [ %.065, %439 ], [ %.065, %438 ], [ %.065, %437 ], [ %.065, %435 ], [ %.065, %434 ], [ %.065, %432 ], [ %.065, %430 ], [ %.065, %429 ], [ %.065, %419 ], [ %.065, %409 ], [ %.065, %408 ], [ %.065, %397 ], [ %.065, %387 ], [ %.065, %386 ], [ %.065, %385 ], [ %.065, %370 ], [ %.065, %360 ], [ %.065, %359 ], [ %.065, %348 ], [ %.065, %338 ], [ %.065, %331 ], [ %.065, %330 ], [ %.065, %328 ], [ %.065, %317 ], [ %.065, %307 ], [ %.065, %303 ], [ %.065, %302 ], [ %.065, %292 ], [ %.065, %282 ], [ %.065, %278 ], [ %.065, %277 ], [ %.065, %276 ], [ %.065, %266 ], [ %.065, %256 ], [ %.065, %254 ], [ %.065, %253 ], [ %.065, %242 ], [ %.065, %232 ], [ %.065, %231 ], [ %.065, %230 ], [ %.065, %224 ], [ %.065, %220 ], [ %.065, %219 ], [ %.065, %217 ], [ %.065, %216 ], [ %.065, %215 ], [ %.065, %214 ], [ %213, %212 ], [ %.065, %200 ], [ %.065, %199 ], [ %.065, %197 ], [ %.065, %182 ], [ %.065, %172 ], [ %.065, %170 ], [ %.065, %158 ], [ %.065, %148 ], [ 0, %147 ], [ %.065, %146 ], [ %.065, %136 ], [ %.065, %126 ], [ %.065, %124 ], [ %.065, %109 ], [ %.065, %99 ], [ %.065, %95 ], [ %.065, %94 ], [ %.065, %90 ], [ %.065, %89 ], [ %.065, %88 ], [ %.065, %79 ], [ %.065, %75 ], [ %.065, %74 ], [ %.065, %72 ], [ %.065, %71 ], [ %.065, %70 ], [ %.065, %59 ], [ %.065, %49 ], [ %.065, %43 ], [ %.065, %39 ], [ %.065, %38 ], [ %.065, %28 ], [ %.065, %18 ], [ %.065, %14 ]
  %.063.be = phi i32 [ %.063, %13 ], [ %.063, %456 ], [ %.063, %454 ], [ %.063, %448 ], [ %.063, %446 ], [ %.063, %445 ], [ %.063, %444 ], [ %.063, %443 ], [ %.063, %441 ], [ %.063, %440 ], [ %.063, %439 ], [ %.063, %438 ], [ %.063, %437 ], [ %.063, %435 ], [ %.063, %434 ], [ %.063, %432 ], [ %.063, %430 ], [ %.063, %429 ], [ %.063, %419 ], [ %.063, %409 ], [ %.063, %408 ], [ %.063, %397 ], [ %.063, %387 ], [ %.063, %386 ], [ %.063, %385 ], [ %.063, %370 ], [ %.063, %360 ], [ %.063, %359 ], [ %.063, %348 ], [ %.063, %338 ], [ %.063, %331 ], [ %.063, %330 ], [ %.063, %328 ], [ %.063, %317 ], [ %.063, %307 ], [ %.063, %303 ], [ %.063, %302 ], [ %.063, %292 ], [ %.063, %282 ], [ %.063, %278 ], [ %.063, %277 ], [ %.063, %276 ], [ %.063, %266 ], [ %.063, %256 ], [ %.063, %254 ], [ %.063, %253 ], [ %.063, %242 ], [ %.063, %232 ], [ %.063, %231 ], [ 1, %230 ], [ %.063, %224 ], [ %.063, %220 ], [ 0, %219 ], [ %.063, %217 ], [ %.063, %216 ], [ %.063, %215 ], [ %.063, %214 ], [ %.063, %212 ], [ %.063, %200 ], [ %.063, %199 ], [ %.063, %197 ], [ %.063, %182 ], [ %.063, %172 ], [ %.063, %170 ], [ %.063, %158 ], [ %.063, %148 ], [ %.063, %147 ], [ %.063, %146 ], [ %.063, %136 ], [ %.063, %126 ], [ %.063, %124 ], [ %.063, %109 ], [ %.063, %99 ], [ %.063, %95 ], [ %.063, %94 ], [ %.063, %90 ], [ %.063, %89 ], [ %.063, %88 ], [ %.063, %79 ], [ %.063, %75 ], [ %.063, %74 ], [ %.063, %72 ], [ %.063, %71 ], [ %.063, %70 ], [ %.063, %59 ], [ %.063, %49 ], [ %.063, %43 ], [ %.063, %39 ], [ %.063, %38 ], [ %.063, %28 ], [ %.063, %18 ], [ %.063, %14 ]
  %.061.be = phi i32 [ %.061, %13 ], [ %.061, %456 ], [ %.061, %454 ], [ %.061, %448 ], [ %.061, %446 ], [ %.061, %445 ], [ %.061, %444 ], [ %.061, %443 ], [ %442, %441 ], [ %.061, %440 ], [ %.061, %439 ], [ %.061, %438 ], [ %.061, %437 ], [ %.061, %435 ], [ %.061, %434 ], [ %.061, %432 ], [ %.061, %430 ], [ %.061, %429 ], [ %.061, %419 ], [ %.061, %409 ], [ %.061, %408 ], [ %.061, %397 ], [ %.061, %387 ], [ %.061, %386 ], [ %.061, %385 ], [ %.061, %370 ], [ %.061, %360 ], [ %.061, %359 ], [ %.061, %348 ], [ %.061, %338 ], [ %.061, %331 ], [ %.061, %330 ], [ %.061, %328 ], [ %.061, %317 ], [ %.061, %307 ], [ %.061, %303 ], [ %.061, %302 ], [ %.061, %292 ], [ %.061, %282 ], [ %.061, %278 ], [ %.061, %277 ], [ %.061, %276 ], [ %.061, %266 ], [ %.061, %256 ], [ %.061, %254 ], [ %.061, %253 ], [ %243, %242 ], [ %.061, %232 ], [ %.061, %231 ], [ %.061, %230 ], [ %.061, %224 ], [ %.061, %220 ], [ 0, %219 ], [ %.061, %217 ], [ %.061, %216 ], [ %.061, %215 ], [ %.061, %214 ], [ %.061, %212 ], [ %.061, %200 ], [ %.061, %199 ], [ %.061, %197 ], [ %.061, %182 ], [ %.061, %172 ], [ %.061, %170 ], [ %.061, %158 ], [ %.061, %148 ], [ %.061, %147 ], [ %.061, %146 ], [ %.061, %136 ], [ %.061, %126 ], [ %.061, %124 ], [ %.061, %109 ], [ %.061, %99 ], [ %.061, %95 ], [ %.061, %94 ], [ %.061, %90 ], [ %.061, %89 ], [ %.061, %88 ], [ %.061, %79 ], [ %.061, %75 ], [ %.061, %74 ], [ %.061, %72 ], [ %.061, %71 ], [ %.061, %70 ], [ %.061, %59 ], [ %.061, %49 ], [ %.061, %43 ], [ %.061, %39 ], [ %.061, %38 ], [ %.061, %28 ], [ %.061, %18 ], [ %.061, %14 ]
  %.059.be = phi i32 [ %.059, %13 ], [ %.059, %456 ], [ %.059, %454 ], [ %.059, %448 ], [ %.059, %446 ], [ %.059, %445 ], [ %.059, %444 ], [ %.059, %443 ], [ %.059, %441 ], [ %.059, %440 ], [ %.059, %439 ], [ %.059, %438 ], [ %.059, %437 ], [ %.059, %435 ], [ %.059, %434 ], [ %.059, %432 ], [ %431, %430 ], [ %.059, %429 ], [ %.059, %419 ], [ %.059, %409 ], [ %.059, %408 ], [ %.059, %397 ], [ %.059, %387 ], [ %.059, %386 ], [ %.059, %385 ], [ %.059, %370 ], [ %.059, %360 ], [ %.059, %359 ], [ %.059, %348 ], [ %.059, %338 ], [ %.059, %331 ], [ %.059, %330 ], [ %.059, %328 ], [ %.059, %317 ], [ %.059, %307 ], [ %.059, %303 ], [ %.059, %302 ], [ %.059, %292 ], [ %.059, %282 ], [ %.059, %278 ], [ 0, %277 ], [ %.059, %276 ], [ %.059, %266 ], [ %.059, %256 ], [ %.059, %254 ], [ %.059, %253 ], [ %.059, %242 ], [ %.059, %232 ], [ %.059, %231 ], [ %.059, %230 ], [ %.059, %224 ], [ %.059, %220 ], [ %.059, %219 ], [ %.059, %217 ], [ %.059, %216 ], [ %.059, %215 ], [ %.059, %214 ], [ %.059, %212 ], [ %.059, %200 ], [ %.059, %199 ], [ %.059, %197 ], [ %.059, %182 ], [ %.059, %172 ], [ %.059, %170 ], [ %.059, %158 ], [ %.059, %148 ], [ %.059, %147 ], [ %.059, %146 ], [ %.059, %136 ], [ %.059, %126 ], [ %.059, %124 ], [ %.059, %109 ], [ %.059, %99 ], [ %.059, %95 ], [ %.059, %94 ], [ %.059, %90 ], [ %.059, %89 ], [ %.059, %88 ], [ %.059, %79 ], [ %.059, %75 ], [ %.059, %74 ], [ %.059, %72 ], [ %.059, %71 ], [ %.059, %70 ], [ %.059, %59 ], [ %.059, %49 ], [ %.059, %43 ], [ %.059, %39 ], [ %.059, %38 ], [ %.059, %28 ], [ %.059, %18 ], [ %.059, %14 ]
  %.057.be = phi i32 [ %.057, %13 ], [ %.057, %456 ], [ %455, %454 ], [ %.057, %448 ], [ %.057, %446 ], [ %.057, %445 ], [ 0, %444 ], [ %.057, %443 ], [ %.057, %441 ], [ %.057, %440 ], [ %.057, %439 ], [ %.057, %438 ], [ %.057, %437 ], [ %.057, %435 ], [ %.057, %434 ], [ %.057, %432 ], [ %.057, %430 ], [ %.057, %429 ], [ %.057, %419 ], [ %.057, %409 ], [ %.057, %408 ], [ %398, %397 ], [ %.057, %387 ], [ %.057, %386 ], [ %.057, %385 ], [ %.057, %370 ], [ %.057, %360 ], [ %.057, %359 ], [ %.057, %348 ], [ %.057, %338 ], [ %.057, %331 ], [ %.057, %330 ], [ %.057, %328 ], [ %.057, %317 ], [ %.057, %307 ], [ %.057, %303 ], [ %.057, %302 ], [ 0, %292 ], [ %.057, %282 ], [ %.057, %278 ], [ %.057, %277 ], [ %.057, %276 ], [ %.057, %266 ], [ %.057, %256 ], [ %.057, %254 ], [ %.057, %253 ], [ %.057, %242 ], [ %.057, %232 ], [ %.057, %231 ], [ %.057, %230 ], [ %.057, %224 ], [ %.057, %220 ], [ %.057, %219 ], [ %.057, %217 ], [ %.057, %216 ], [ %.057, %215 ], [ %.057, %214 ], [ %.057, %212 ], [ %.057, %200 ], [ %.057, %199 ], [ %.057, %197 ], [ %.057, %182 ], [ %.057, %172 ], [ %.057, %170 ], [ %.057, %158 ], [ %.057, %148 ], [ %.057, %147 ], [ %.057, %146 ], [ %.057, %136 ], [ %.057, %126 ], [ %.057, %124 ], [ %.057, %109 ], [ %.057, %99 ], [ %.057, %95 ], [ %.057, %94 ], [ %.057, %90 ], [ %.057, %89 ], [ %.057, %88 ], [ %.057, %79 ], [ %.057, %75 ], [ %.057, %74 ], [ %.057, %72 ], [ %.057, %71 ], [ %.057, %70 ], [ %.057, %59 ], [ %.057, %49 ], [ %.057, %43 ], [ %.057, %39 ], [ %.057, %38 ], [ %.057, %28 ], [ %.057, %18 ], [ %.057, %14 ]
  %.0.be = phi i32 [ %.0, %13 ], [ 1169491449, %456 ], [ 381403746, %454 ], [ -1157546998, %448 ], [ 1364688096, %446 ], [ 1495416013, %445 ], [ 262445069, %444 ], [ -868851817, %443 ], [ -1164673343, %441 ], [ -1034334607, %440 ], [ 731916879, %439 ], [ 437437940, %438 ], [ -636998698, %437 ], [ -64146956, %435 ], [ -29028205, %434 ], [ 1312038944, %432 ], [ 597184865, %430 ], [ 537812959, %429 ], [ %428, %419 ], [ %418, %409 ], [ -1341281730, %408 ], [ %407, %397 ], [ %396, %387 ], [ 1931342546, %386 ], [ 589308631, %385 ], [ %384, %370 ], [ %369, %360 ], [ 589308631, %359 ], [ %358, %348 ], [ %347, %338 ], [ %337, %331 ], [ 1839067636, %330 ], [ %329, %328 ], [ %327, %317 ], [ %316, %307 ], [ %306, %303 ], [ -1341281730, %302 ], [ %301, %292 ], [ %291, %282 ], [ %281, %278 ], [ 597184865, %277 ], [ 1312038944, %276 ], [ %275, %266 ], [ %265, %256 ], [ %255, %254 ], [ -1396884937, %253 ], [ %252, %242 ], [ %241, %232 ], [ -1370773575, %231 ], [ 1419566564, %230 ], [ %229, %224 ], [ %223, %220 ], [ -1396884937, %219 ], [ 1328100498, %217 ], [ -1953129289, %216 ], [ 228358488, %215 ], [ -932455651, %214 ], [ -390583468, %212 ], [ -748136104, %200 ], [ -748136104, %199 ], [ %198, %197 ], [ %196, %182 ], [ %181, %172 ], [ %171, %170 ], [ %169, %158 ], [ %157, %148 ], [ -390583468, %147 ], [ -932455651, %146 ], [ %145, %136 ], [ %135, %126 ], [ %125, %124 ], [ %123, %109 ], [ %108, %99 ], [ %98, %95 ], [ 228358488, %94 ], [ %93, %90 ], [ 1328100498, %89 ], [ 994477704, %88 ], [ -1353776885, %79 ], [ %78, %75 ], [ 994477704, %74 ], [ 1517562604, %72 ], [ 497094889, %71 ], [ -911042772, %70 ], [ %69, %59 ], [ %58, %49 ], [ 906275857, %43 ], [ %42, %39 ], [ -911042772, %38 ], [ %37, %28 ], [ %27, %18 ], [ %17, %14 ]
  br label %13

14:                                               ; preds = %13
  %15 = load i32, i32* %9, align 4
  %16 = icmp slt i32 %.075, %15
  %17 = select i1 %16, i32 -229616852, i32 607576239
  br label %.backedge

18:                                               ; preds = %13
  %19 = load i32, i32* @x.7, align 4
  %20 = load i32, i32* @y.8, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 -29028205, i32 -1636715041
  br label %.backedge

28:                                               ; preds = %13
  %29 = load i32, i32* @x.7, align 4
  %30 = load i32, i32* @y.8, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -233346631, i32 -1636715041
  br label %.backedge

38:                                               ; preds = %13
  br label %.backedge

39:                                               ; preds = %13
  %40 = load i32, i32* %9, align 4
  %41 = icmp slt i32 %.073, %40
  %42 = select i1 %41, i32 -205721328, i32 1429705366
  br label %.backedge

43:                                               ; preds = %13
  %44 = icmp eq i32 %.075, %.073
  %45 = select i1 %44, i64 0, i64 4294967296
  %46 = sext i32 %.075 to i64
  %47 = sext i32 %.073 to i64
  %48 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %46, i64 %47
  store i64 %45, i64* %48, align 8
  br label %.backedge

49:                                               ; preds = %13
  %50 = load i32, i32* @x.7, align 4
  %51 = load i32, i32* @y.8, align 4
  %52 = add i32 %50, -1
  %53 = mul i32 %52, %50
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %56, %55
  %58 = select i1 %57, i32 -64146956, i32 -1512875876
  br label %.backedge

59:                                               ; preds = %13
  %60 = add i32 %.073, 1
  %61 = load i32, i32* @x.7, align 4
  %62 = load i32, i32* @y.8, align 4
  %63 = add i32 %61, -1
  %64 = mul i32 %63, %61
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %67, %66
  %69 = select i1 %68, i32 204357655, i32 -1512875876
  br label %.backedge

70:                                               ; preds = %13
  br label %.backedge

71:                                               ; preds = %13
  br label %.backedge

72:                                               ; preds = %13
  %73 = add i32 %.075, 1
  br label %.backedge

74:                                               ; preds = %13
  br label %.backedge

75:                                               ; preds = %13
  %76 = load i32, i32* %5, align 4
  %77 = icmp slt i32 %.071, %76
  %78 = select i1 %77, i32 1429960720, i32 618415290
  br label %.backedge

79:                                               ; preds = %13
  %80 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7, i32* nonnull %8)
  %81 = load i32, i32* %8, align 4
  %82 = sext i32 %81 to i64
  %83 = load i32, i32* %6, align 4
  %84 = sext i32 %83 to i64
  %85 = load i32, i32* %7, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %84, i64 %86
  store i64 %82, i64* %87, align 8
  br label %.backedge

88:                                               ; preds = %13
  %.neg80 = add i32 %.071, 1
  br label %.backedge

89:                                               ; preds = %13
  br label %.backedge

90:                                               ; preds = %13
  %91 = load i32, i32* %9, align 4
  %92 = icmp slt i32 %.069, %91
  %93 = select i1 %92, i32 -97301749, i32 399959233
  br label %.backedge

94:                                               ; preds = %13
  br label %.backedge

95:                                               ; preds = %13
  %96 = load i32, i32* %9, align 4
  %97 = icmp slt i32 %.067, %96
  %98 = select i1 %97, i32 -1535247986, i32 23734781
  br label %.backedge

99:                                               ; preds = %13
  %100 = load i32, i32* @x.7, align 4
  %101 = load i32, i32* @y.8, align 4
  %102 = add i32 %100, -1
  %103 = mul i32 %102, %100
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %106, %105
  %108 = select i1 %107, i32 -636998698, i32 142842464
  br label %.backedge

109:                                              ; preds = %13
  %110 = sext i32 %.067 to i64
  %111 = sext i32 %.069 to i64
  %112 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %110, i64 %111
  %113 = load i64, i64* %112, align 8
  %114 = icmp eq i64 %113, 4294967296
  store i1 %114, i1* %4, align 1
  %115 = load i32, i32* @x.7, align 4
  %116 = load i32, i32* @y.8, align 4
  %117 = add i32 %115, -1
  %118 = mul i32 %117, %115
  %119 = and i32 %118, 1
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %121, %120
  %123 = select i1 %122, i32 -1186260000, i32 142842464
  br label %.backedge

124:                                              ; preds = %13
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %125 = select i1 %.0..0..0., i32 -1347465670, i32 -176763243
  br label %.backedge

126:                                              ; preds = %13
  %127 = load i32, i32* @x.7, align 4
  %128 = load i32, i32* @y.8, align 4
  %129 = add i32 %127, -1
  %130 = mul i32 %129, %127
  %131 = and i32 %130, 1
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %133, %132
  %135 = select i1 %134, i32 437437940, i32 583727510
  br label %.backedge

136:                                              ; preds = %13
  %137 = load i32, i32* @x.7, align 4
  %138 = load i32, i32* @y.8, align 4
  %139 = add i32 %137, -1
  %140 = mul i32 %139, %137
  %141 = and i32 %140, 1
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %143, %142
  %145 = select i1 %144, i32 605105521, i32 583727510
  br label %.backedge

146:                                              ; preds = %13
  br label %.backedge

147:                                              ; preds = %13
  br label %.backedge

148:                                              ; preds = %13
  %149 = load i32, i32* @x.7, align 4
  %150 = load i32, i32* @y.8, align 4
  %151 = add i32 %149, -1
  %152 = mul i32 %151, %149
  %153 = and i32 %152, 1
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %155, %154
  %157 = select i1 %156, i32 731916879, i32 -438185554
  br label %.backedge

158:                                              ; preds = %13
  %159 = load i32, i32* %9, align 4
  %160 = icmp slt i32 %.065, %159
  store i1 %160, i1* %3, align 1
  %161 = load i32, i32* @x.7, align 4
  %162 = load i32, i32* @y.8, align 4
  %163 = add i32 %161, -1
  %164 = mul i32 %163, %161
  %165 = and i32 %164, 1
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %167, %166
  %169 = select i1 %168, i32 550551183, i32 -438185554
  br label %.backedge

170:                                              ; preds = %13
  %.0..0..0.54 = load volatile i1, i1* %3, align 1
  %171 = select i1 %.0..0..0.54, i32 -1042595705, i32 488783425
  br label %.backedge

172:                                              ; preds = %13
  %173 = load i32, i32* @x.7, align 4
  %174 = load i32, i32* @y.8, align 4
  %175 = add i32 %173, -1
  %176 = mul i32 %175, %173
  %177 = and i32 %176, 1
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %179, %178
  %181 = select i1 %180, i32 -1034334607, i32 1983615609
  br label %.backedge

182:                                              ; preds = %13
  %183 = sext i32 %.069 to i64
  %184 = sext i32 %.065 to i64
  %185 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %183, i64 %184
  %186 = load i64, i64* %185, align 8
  %187 = icmp eq i64 %186, 4294967296
  store i1 %187, i1* %2, align 1
  %188 = load i32, i32* @x.7, align 4
  %189 = load i32, i32* @y.8, align 4
  %190 = add i32 %188, -1
  %191 = mul i32 %190, %188
  %192 = and i32 %191, 1
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %194, %193
  %196 = select i1 %195, i32 -1888771499, i32 1983615609
  br label %.backedge

197:                                              ; preds = %13
  %.0..0..0.55 = load volatile i1, i1* %2, align 1
  %198 = select i1 %.0..0..0.55, i32 263744002, i32 -1509263528
  br label %.backedge

199:                                              ; preds = %13
  br label %.backedge

200:                                              ; preds = %13
  %201 = sext i32 %.067 to i64
  %202 = sext i32 %.065 to i64
  %203 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %201, i64 %202
  %204 = sext i32 %.069 to i64
  %205 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %201, i64 %204
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %204, i64 %202
  %208 = load i64, i64* %207, align 8
  %209 = add i64 %208, %206
  store i64 %209, i64* %11, align 8
  %210 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %203, i64* nonnull dereferenceable(8) %11)
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %203, align 8
  br label %.backedge

212:                                              ; preds = %13
  %213 = add i32 %.065, 1
  br label %.backedge

214:                                              ; preds = %13
  br label %.backedge

215:                                              ; preds = %13
  %.neg = add i32 %.067, 1
  br label %.backedge

216:                                              ; preds = %13
  br label %.backedge

217:                                              ; preds = %13
  %218 = add i32 %.069, 1
  br label %.backedge

219:                                              ; preds = %13
  br label %.backedge

220:                                              ; preds = %13
  %221 = load i32, i32* %9, align 4
  %222 = icmp slt i32 %.061, %221
  %223 = select i1 %222, i32 576746773, i32 148327884
  br label %.backedge

224:                                              ; preds = %13
  %225 = sext i32 %.061 to i64
  %226 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %225, i64 %225
  %227 = load i64, i64* %226, align 8
  %228 = icmp slt i64 %227, 0
  %229 = select i1 %228, i32 -1426967318, i32 1419566564
  br label %.backedge

230:                                              ; preds = %13
  br label %.backedge

231:                                              ; preds = %13
  br label %.backedge

232:                                              ; preds = %13
  %233 = load i32, i32* @x.7, align 4
  %234 = load i32, i32* @y.8, align 4
  %235 = add i32 %233, -1
  %236 = mul i32 %235, %233
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %239, %238
  %241 = select i1 %240, i32 -1164673343, i32 -1899804259
  br label %.backedge

242:                                              ; preds = %13
  %243 = add i32 %.061, 1
  %244 = load i32, i32* @x.7, align 4
  %245 = load i32, i32* @y.8, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 873278667, i32 -1899804259
  br label %.backedge

253:                                              ; preds = %13
  br label %.backedge

254:                                              ; preds = %13
  %.not = icmp eq i32 %.063, 0
  %255 = select i1 %.not, i32 249680968, i32 1738281891
  br label %.backedge

256:                                              ; preds = %13
  %257 = load i32, i32* @x.7, align 4
  %258 = load i32, i32* @y.8, align 4
  %259 = add i32 %257, -1
  %260 = mul i32 %259, %257
  %261 = and i32 %260, 1
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %263, %262
  %265 = select i1 %264, i32 -868851817, i32 -1178466526
  br label %.backedge

266:                                              ; preds = %13
  %puts79 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @str.1, i64 0, i64 0))
  %267 = load i32, i32* @x.7, align 4
  %268 = load i32, i32* @y.8, align 4
  %269 = add i32 %267, -1
  %270 = mul i32 %269, %267
  %271 = and i32 %270, 1
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %273, %272
  %275 = select i1 %274, i32 -1347951781, i32 -1178466526
  br label %.backedge

276:                                              ; preds = %13
  br label %.backedge

277:                                              ; preds = %13
  br label %.backedge

278:                                              ; preds = %13
  %279 = load i32, i32* %9, align 4
  %280 = icmp slt i32 %.059, %279
  %281 = select i1 %280, i32 -1132685562, i32 1050605464
  br label %.backedge

282:                                              ; preds = %13
  %283 = load i32, i32* @x.7, align 4
  %284 = load i32, i32* @y.8, align 4
  %285 = add i32 %283, -1
  %286 = mul i32 %285, %283
  %287 = and i32 %286, 1
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %289, %288
  %291 = select i1 %290, i32 262445069, i32 1441569785
  br label %.backedge

292:                                              ; preds = %13
  %293 = load i32, i32* @x.7, align 4
  %294 = load i32, i32* @y.8, align 4
  %295 = add i32 %293, -1
  %296 = mul i32 %295, %293
  %297 = and i32 %296, 1
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %299, %298
  %301 = select i1 %300, i32 526681316, i32 1441569785
  br label %.backedge

302:                                              ; preds = %13
  br label %.backedge

303:                                              ; preds = %13
  %304 = load i32, i32* %9, align 4
  %305 = icmp slt i32 %.057, %304
  %306 = select i1 %305, i32 -906657255, i32 1672036579
  br label %.backedge

307:                                              ; preds = %13
  %308 = load i32, i32* @x.7, align 4
  %309 = load i32, i32* @y.8, align 4
  %310 = add i32 %308, -1
  %311 = mul i32 %310, %308
  %312 = and i32 %311, 1
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %314, %313
  %316 = select i1 %315, i32 1495416013, i32 1591789991
  br label %.backedge

317:                                              ; preds = %13
  %318 = icmp ne i32 %.057, 0
  store i1 %318, i1* %1, align 1
  %319 = load i32, i32* @x.7, align 4
  %320 = load i32, i32* @y.8, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 900153150, i32 1591789991
  br label %.backedge

328:                                              ; preds = %13
  %.0..0..0.56 = load volatile i1, i1* %1, align 1
  %329 = select i1 %.0..0..0.56, i32 267506356, i32 1839067636
  br label %.backedge

330:                                              ; preds = %13
  %putchar78 = call i32 @putchar(i32 32)
  br label %.backedge

331:                                              ; preds = %13
  %332 = sext i32 %.059 to i64
  %333 = sext i32 %.057 to i64
  %334 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %332, i64 %333
  %335 = load i64, i64* %334, align 8
  %336 = icmp eq i64 %335, 4294967296
  %337 = select i1 %336, i32 1718673591, i32 -1688401636
  br label %.backedge

338:                                              ; preds = %13
  %339 = load i32, i32* @x.7, align 4
  %340 = load i32, i32* @y.8, align 4
  %341 = add i32 %339, -1
  %342 = mul i32 %341, %339
  %343 = and i32 %342, 1
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %345, %344
  %347 = select i1 %346, i32 1364688096, i32 -40660916
  br label %.backedge

348:                                              ; preds = %13
  %349 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %350 = load i32, i32* @x.7, align 4
  %351 = load i32, i32* @y.8, align 4
  %352 = add i32 %350, -1
  %353 = mul i32 %352, %350
  %354 = and i32 %353, 1
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %356, %355
  %358 = select i1 %357, i32 916425513, i32 -40660916
  br label %.backedge

359:                                              ; preds = %13
  br label %.backedge

360:                                              ; preds = %13
  %361 = load i32, i32* @x.7, align 4
  %362 = load i32, i32* @y.8, align 4
  %363 = add i32 %361, -1
  %364 = mul i32 %363, %361
  %365 = and i32 %364, 1
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %367, %366
  %369 = select i1 %368, i32 -1157546998, i32 1572364737
  br label %.backedge

370:                                              ; preds = %13
  %371 = sext i32 %.059 to i64
  %372 = sext i32 %.057 to i64
  %373 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %371, i64 %372
  %374 = load i64, i64* %373, align 8
  %375 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 %374)
  %376 = load i32, i32* @x.7, align 4
  %377 = load i32, i32* @y.8, align 4
  %378 = add i32 %376, -1
  %379 = mul i32 %378, %376
  %380 = and i32 %379, 1
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %382, %381
  %384 = select i1 %383, i32 -316160075, i32 1572364737
  br label %.backedge

385:                                              ; preds = %13
  br label %.backedge

386:                                              ; preds = %13
  br label %.backedge

387:                                              ; preds = %13
  %388 = load i32, i32* @x.7, align 4
  %389 = load i32, i32* @y.8, align 4
  %390 = add i32 %388, -1
  %391 = mul i32 %390, %388
  %392 = and i32 %391, 1
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %394, %393
  %396 = select i1 %395, i32 381403746, i32 -1218974562
  br label %.backedge

397:                                              ; preds = %13
  %398 = add i32 %.057, 1
  %399 = load i32, i32* @x.7, align 4
  %400 = load i32, i32* @y.8, align 4
  %401 = add i32 %399, -1
  %402 = mul i32 %401, %399
  %403 = and i32 %402, 1
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %405, %404
  %407 = select i1 %406, i32 1620441147, i32 -1218974562
  br label %.backedge

408:                                              ; preds = %13
  br label %.backedge

409:                                              ; preds = %13
  %410 = load i32, i32* @x.7, align 4
  %411 = load i32, i32* @y.8, align 4
  %412 = add i32 %410, -1
  %413 = mul i32 %412, %410
  %414 = and i32 %413, 1
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %416, %415
  %418 = select i1 %417, i32 1169491449, i32 -159333426
  br label %.backedge

419:                                              ; preds = %13
  %putchar77 = call i32 @putchar(i32 10)
  %420 = load i32, i32* @x.7, align 4
  %421 = load i32, i32* @y.8, align 4
  %422 = add i32 %420, -1
  %423 = mul i32 %422, %420
  %424 = and i32 %423, 1
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %426, %425
  %428 = select i1 %427, i32 -91515823, i32 -159333426
  br label %.backedge

429:                                              ; preds = %13
  br label %.backedge

430:                                              ; preds = %13
  %431 = add i32 %.059, 1
  br label %.backedge

432:                                              ; preds = %13
  br label %.backedge

433:                                              ; preds = %13
  ret i32 0

434:                                              ; preds = %13
  br label %.backedge

435:                                              ; preds = %13
  %436 = add i32 %.073, 1
  br label %.backedge

437:                                              ; preds = %13
  br label %.backedge

438:                                              ; preds = %13
  br label %.backedge

439:                                              ; preds = %13
  br label %.backedge

440:                                              ; preds = %13
  br label %.backedge

441:                                              ; preds = %13
  %442 = add i32 %.061, 1
  br label %.backedge

443:                                              ; preds = %13
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @str.1, i64 0, i64 0))
  br label %.backedge

444:                                              ; preds = %13
  br label %.backedge

445:                                              ; preds = %13
  br label %.backedge

446:                                              ; preds = %13
  %447 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  br label %.backedge

448:                                              ; preds = %13
  %449 = sext i32 %.059 to i64
  %450 = sext i32 %.057 to i64
  %451 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %10, i64 0, i64 %449, i64 %450
  %452 = load i64, i64* %451, align 8
  %453 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 %452)
  br label %.backedge

454:                                              ; preds = %13
  %455 = add i32 %.057, 1
  br label %.backedge

456:                                              ; preds = %13
  %putchar = call i32 @putchar(i32 10)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = load i64, i64* %1, align 8
  store i64 %6, i64* %5, align 8
  %7 = load i64, i64* %0, align 8
  store i64 %7, i64* %4, align 8
  %8 = load i32, i32* @x.9, align 4
  %9 = load i32, i32* @y.10, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 -719850372, i32 1077708787
  %17 = select i1 %15, i32 -1630159240, i32 1077708787
  %18 = select i1 %15, i32 1854825886, i32 1824100412
  %19 = select i1 %15, i32 -2134982395, i32 1824100412
  br label %20

20:                                               ; preds = %.backedge, %2
  %.01013 = phi i64* [ undef, %2 ], [ %.01013.be, %.backedge ]
  %.010 = phi i64* [ undef, %2 ], [ %.010.be, %.backedge ]
  %.0 = phi i32 [ -779823816, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -779823816, label %21
    i32 -1586715641, label %24
    i32 49587910, label %25
    i32 -2134982395, label %26
    i32 1854825886, label %27
    i32 -703036727, label %28
    i32 -1630159240, label %29
    i32 -719850372, label %30
    i32 1824100412, label %31
    i32 1077708787, label %32
  ]

.backedge:                                        ; preds = %20, %32, %31, %29, %28, %27, %26, %25, %24, %21
  %.01013.be = phi i64* [ %.01013, %20 ], [ %.01013, %32 ], [ %.01013, %31 ], [ %.010, %29 ], [ %.01013, %28 ], [ %.01013, %27 ], [ %.01013, %26 ], [ %.01013, %25 ], [ %.01013, %24 ], [ %.01013, %21 ]
  %.010.be = phi i64* [ %.010, %20 ], [ %.010, %32 ], [ %0, %31 ], [ %.010, %29 ], [ %.010, %28 ], [ %.010, %27 ], [ %0, %26 ], [ %.010, %25 ], [ %1, %24 ], [ %.010, %21 ]
  %.0.be = phi i32 [ %.0, %20 ], [ -1630159240, %32 ], [ -2134982395, %31 ], [ %16, %29 ], [ %17, %28 ], [ -703036727, %27 ], [ %18, %26 ], [ %19, %25 ], [ -703036727, %24 ], [ %23, %21 ]
  br label %20

21:                                               ; preds = %20
  %.0..0..0.7 = load volatile i64, i64* %5, align 8
  %.0..0..0.8 = load volatile i64, i64* %4, align 8
  %22 = icmp slt i64 %.0..0..0.7, %.0..0..0.8
  %23 = select i1 %22, i32 -1586715641, i32 49587910
  br label %.backedge

24:                                               ; preds = %20
  br label %.backedge

25:                                               ; preds = %20
  br label %.backedge

26:                                               ; preds = %20
  br label %.backedge

27:                                               ; preds = %20
  br label %.backedge

28:                                               ; preds = %20
  br label %.backedge

29:                                               ; preds = %20
  br label %.backedge

30:                                               ; preds = %20
  store i64* %.01013, i64** %3, align 8
  %.0..0..0.9 = load volatile i64*, i64** %3, align 8
  ret i64* %.0..0..0.9

31:                                               ; preds = %20
  br label %.backedge

32:                                               ; preds = %20
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s312980262.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
