; ModuleID = 'build_ollvm/programs/p02363/s162617229.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s162617229.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@dis = global [101 x [101 x i64]] zeroinitializer, align 16
@n = global i32 0, align 4
@m = global i32 0, align 4
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@.str = private unnamed_addr constant [16 x i8] c"NEGATIVE CYCLE\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s162617229.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #4 {
  %3 = alloca i32, align 4
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) @n)
  %14 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %13, i32* nonnull dereferenceable(4) @m)
  br label %15

15:                                               ; preds = %.backedge, %2
  %.080 = phi i32 [ 0, %2 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ 0, %2 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %2 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %2 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %2 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %2 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %2 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %2 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %2 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %2 ], [ %.062.be, %.backedge ]
  %.0 = phi i32 [ 1157350715, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1157350715, label %16
    i32 2096871401, label %20
    i32 -775827172, label %21
    i32 451079514, label %31
    i32 -1974663555, label %43
    i32 -1188657912, label %45
    i32 -1836787817, label %55
    i32 -344380960, label %66
    i32 1324963987, label %68
    i32 -1344378243, label %78
    i32 -224765190, label %90
    i32 1217817547, label %91
    i32 1106050819, label %95
    i32 65570779, label %96
    i32 1382399657, label %98
    i32 -2005821410, label %108
    i32 1743540437, label %118
    i32 -1127463592, label %119
    i32 -1244903256, label %120
    i32 -1781818331, label %121
    i32 -504475070, label %125
    i32 29194901, label %135
    i32 -1095273765, label %155
    i32 -520338885, label %156
    i32 201561226, label %166
    i32 -1510288877, label %177
    i32 1040153855, label %178
    i32 -1804827015, label %179
    i32 -317953630, label %189
    i32 2125691974, label %201
    i32 -1230422626, label %203
    i32 -828027930, label %204
    i32 1979550923, label %208
    i32 910103636, label %218
    i32 475250961, label %228
    i32 -792333292, label %229
    i32 2060874939, label %233
    i32 -97210532, label %245
    i32 -845094059, label %255
    i32 385522049, label %266
    i32 1271321381, label %267
    i32 -1981231358, label %268
    i32 -1219265337, label %278
    i32 2052667689, label %289
    i32 995376227, label %290
    i32 -968047919, label %300
    i32 -1837334549, label %310
    i32 -906907080, label %311
    i32 931314616, label %312
    i32 213134263, label %313
    i32 748415996, label %317
    i32 -981690583, label %327
    i32 -2011102902, label %341
    i32 1297121368, label %343
    i32 -99613913, label %346
    i32 -1755357397, label %347
    i32 164859426, label %349
    i32 -1964681794, label %350
    i32 1497309834, label %360
    i32 2113734335, label %372
    i32 -1011090611, label %374
    i32 -2054888503, label %375
    i32 -2068174866, label %379
    i32 -1012406949, label %381
    i32 688329677, label %382
    i32 -785994238, label %389
    i32 969714272, label %399
    i32 1329717107, label %410
    i32 -1310302254, label %411
    i32 -1580814095, label %421
    i32 -459526646, label %436
    i32 -460864416, label %437
    i32 1059941832, label %447
    i32 -927238426, label %457
    i32 818077765, label %458
    i32 1761577397, label %468
    i32 -1656594150, label %479
    i32 5791311, label %480
    i32 -2141540611, label %481
    i32 563681446, label %483
    i32 -1404218264, label %493
    i32 396215534, label %503
    i32 -1973332459, label %504
    i32 1858320954, label %505
    i32 -1594395297, label %506
    i32 -48576299, label %509
    i32 4793489, label %510
    i32 2108791519, label %521
    i32 154054771, label %522
    i32 1199133028, label %523
    i32 -581371650, label %524
    i32 -537546853, label %526
    i32 -124172039, label %528
    i32 1240260133, label %529
    i32 -399524250, label %530
    i32 -1166185806, label %531
    i32 471614465, label %533
    i32 2019110639, label %539
    i32 -639769949, label %540
    i32 -1238764974, label %542
  ]

.backedge:                                        ; preds = %15, %542, %540, %539, %533, %531, %530, %529, %528, %526, %524, %523, %522, %521, %510, %509, %506, %505, %504, %493, %483, %481, %480, %479, %468, %458, %457, %447, %437, %436, %421, %411, %410, %399, %389, %382, %381, %379, %375, %374, %372, %360, %350, %349, %347, %346, %343, %341, %327, %317, %313, %312, %311, %310, %300, %290, %289, %278, %268, %267, %266, %255, %245, %233, %229, %228, %218, %208, %204, %203, %201, %189, %179, %178, %177, %166, %156, %155, %135, %125, %121, %120, %119, %118, %108, %98, %96, %95, %91, %90, %78, %68, %66, %55, %45, %43, %31, %21, %20, %16
  %.080.be = phi i32 [ %.080, %15 ], [ %.080, %542 ], [ %.080, %540 ], [ %.080, %539 ], [ %.080, %533 ], [ %.080, %531 ], [ %.080, %530 ], [ %.080, %529 ], [ %.080, %528 ], [ %.080, %526 ], [ %.080, %524 ], [ %.080, %523 ], [ %.080, %522 ], [ %.080, %521 ], [ %.080, %510 ], [ %.080, %509 ], [ %.080, %506 ], [ %.080, %505 ], [ %.080, %504 ], [ %.080, %493 ], [ %.080, %483 ], [ %.080, %481 ], [ %.080, %480 ], [ %.080, %479 ], [ %.080, %468 ], [ %.080, %458 ], [ %.080, %457 ], [ %.080, %447 ], [ %.080, %437 ], [ %.080, %436 ], [ %.080, %421 ], [ %.080, %411 ], [ %.080, %410 ], [ %.080, %399 ], [ %.080, %389 ], [ %.080, %382 ], [ %.080, %381 ], [ %.080, %379 ], [ %.080, %375 ], [ %.080, %374 ], [ %.080, %372 ], [ %.080, %360 ], [ %.080, %350 ], [ %.080, %349 ], [ %.080, %347 ], [ %.080, %346 ], [ %345, %343 ], [ %.080, %341 ], [ %.080, %327 ], [ %.080, %317 ], [ %.080, %313 ], [ %.080, %312 ], [ %.080, %311 ], [ %.080, %310 ], [ %.080, %300 ], [ %.080, %290 ], [ %.080, %289 ], [ %.080, %278 ], [ %.080, %268 ], [ %.080, %267 ], [ %.080, %266 ], [ %.080, %255 ], [ %.080, %245 ], [ %.080, %233 ], [ %.080, %229 ], [ %.080, %228 ], [ %.080, %218 ], [ %.080, %208 ], [ %.080, %204 ], [ %.080, %203 ], [ %.080, %201 ], [ %.080, %189 ], [ %.080, %179 ], [ %.080, %178 ], [ %.080, %177 ], [ %.080, %166 ], [ %.080, %156 ], [ %.080, %155 ], [ %.080, %135 ], [ %.080, %125 ], [ %.080, %121 ], [ %.080, %120 ], [ %.080, %119 ], [ %.080, %118 ], [ %.080, %108 ], [ %.080, %98 ], [ %.080, %96 ], [ %.080, %95 ], [ %.080, %91 ], [ %.080, %90 ], [ %.080, %78 ], [ %.080, %68 ], [ %.080, %66 ], [ %.080, %55 ], [ %.080, %45 ], [ %.080, %43 ], [ %.080, %31 ], [ %.080, %21 ], [ %.080, %20 ], [ %.080, %16 ]
  %.078.be = phi i32 [ %.078, %15 ], [ %.078, %542 ], [ %.078, %540 ], [ %.078, %539 ], [ %.078, %533 ], [ %.078, %531 ], [ %.078, %530 ], [ %.078, %529 ], [ %.078, %528 ], [ %.078, %526 ], [ %.078, %524 ], [ %.078, %523 ], [ %.078, %522 ], [ %.078, %521 ], [ %.078, %510 ], [ %.078, %509 ], [ %.078, %506 ], [ %.078, %505 ], [ %.078, %504 ], [ %.078, %493 ], [ %.078, %483 ], [ %.078, %481 ], [ %.078, %480 ], [ %.078, %479 ], [ %.078, %468 ], [ %.078, %458 ], [ %.078, %457 ], [ %.078, %447 ], [ %.078, %437 ], [ %.078, %436 ], [ %.078, %421 ], [ %.078, %411 ], [ %.078, %410 ], [ %.078, %399 ], [ %.078, %389 ], [ %.078, %382 ], [ %.078, %381 ], [ %.078, %379 ], [ %.078, %375 ], [ %.078, %374 ], [ %.078, %372 ], [ %.078, %360 ], [ %.078, %350 ], [ %.078, %349 ], [ %.078, %347 ], [ %.078, %346 ], [ %.078, %343 ], [ %.078, %341 ], [ %.078, %327 ], [ %.078, %317 ], [ %.078, %313 ], [ %.078, %312 ], [ %.078, %311 ], [ %.078, %310 ], [ %.078, %300 ], [ %.078, %290 ], [ %.078, %289 ], [ %.078, %278 ], [ %.078, %268 ], [ %.078, %267 ], [ %.078, %266 ], [ %.078, %255 ], [ %.078, %245 ], [ %.078, %233 ], [ %.078, %229 ], [ %.078, %228 ], [ %.078, %218 ], [ %.078, %208 ], [ %.078, %204 ], [ %.078, %203 ], [ %.078, %201 ], [ %.078, %189 ], [ %.078, %179 ], [ %.078, %178 ], [ %.078, %177 ], [ %.078, %166 ], [ %.078, %156 ], [ %.078, %155 ], [ %.078, %135 ], [ %.078, %125 ], [ %.078, %121 ], [ %.078, %120 ], [ %.neg85, %119 ], [ %.078, %118 ], [ %.078, %108 ], [ %.078, %98 ], [ %.078, %96 ], [ %.078, %95 ], [ %.078, %91 ], [ %.078, %90 ], [ %.078, %78 ], [ %.078, %68 ], [ %.078, %66 ], [ %.078, %55 ], [ %.078, %45 ], [ %.078, %43 ], [ %.078, %31 ], [ %.078, %21 ], [ %.078, %20 ], [ %.078, %16 ]
  %.076.be = phi i32 [ %.076, %15 ], [ %.076, %542 ], [ %.076, %540 ], [ %.076, %539 ], [ %.076, %533 ], [ %.076, %531 ], [ %.076, %530 ], [ %.076, %529 ], [ %.076, %528 ], [ %.076, %526 ], [ %.076, %524 ], [ %.076, %523 ], [ %.076, %522 ], [ %.076, %521 ], [ %.076, %510 ], [ %.076, %509 ], [ %.076, %506 ], [ %.076, %505 ], [ %.076, %504 ], [ %.076, %493 ], [ %.076, %483 ], [ %.076, %481 ], [ %.076, %480 ], [ %.076, %479 ], [ %.076, %468 ], [ %.076, %458 ], [ %.076, %457 ], [ %.076, %447 ], [ %.076, %437 ], [ %.076, %436 ], [ %.076, %421 ], [ %.076, %411 ], [ %.076, %410 ], [ %.076, %399 ], [ %.076, %389 ], [ %.076, %382 ], [ %.076, %381 ], [ %.076, %379 ], [ %.076, %375 ], [ %.076, %374 ], [ %.076, %372 ], [ %.076, %360 ], [ %.076, %350 ], [ %.076, %349 ], [ %.076, %347 ], [ %.076, %346 ], [ %.076, %343 ], [ %.076, %341 ], [ %.076, %327 ], [ %.076, %317 ], [ %.076, %313 ], [ %.076, %312 ], [ %.076, %311 ], [ %.076, %310 ], [ %.076, %300 ], [ %.076, %290 ], [ %.076, %289 ], [ %.076, %278 ], [ %.076, %268 ], [ %.076, %267 ], [ %.076, %266 ], [ %.076, %255 ], [ %.076, %245 ], [ %.076, %233 ], [ %.076, %229 ], [ %.076, %228 ], [ %.076, %218 ], [ %.076, %208 ], [ %.076, %204 ], [ %.076, %203 ], [ %.076, %201 ], [ %.076, %189 ], [ %.076, %179 ], [ %.076, %178 ], [ %.076, %177 ], [ %.076, %166 ], [ %.076, %156 ], [ %.076, %155 ], [ %.076, %135 ], [ %.076, %125 ], [ %.076, %121 ], [ %.076, %120 ], [ %.076, %119 ], [ %.076, %118 ], [ %.076, %108 ], [ %.076, %98 ], [ %97, %96 ], [ %.076, %95 ], [ %.076, %91 ], [ %.076, %90 ], [ %.076, %78 ], [ %.076, %68 ], [ %.076, %66 ], [ %.076, %55 ], [ %.076, %45 ], [ %.076, %43 ], [ %.076, %31 ], [ %.076, %21 ], [ 0, %20 ], [ %.076, %16 ]
  %.074.be = phi i32 [ %.074, %15 ], [ %.074, %542 ], [ %.074, %540 ], [ %.074, %539 ], [ %.074, %533 ], [ %.074, %531 ], [ %.074, %530 ], [ %.074, %529 ], [ %.074, %528 ], [ %.074, %526 ], [ %.074, %524 ], [ %.074, %523 ], [ %.074, %522 ], [ %.neg, %521 ], [ %.074, %510 ], [ %.074, %509 ], [ %.074, %506 ], [ %.074, %505 ], [ %.074, %504 ], [ %.074, %493 ], [ %.074, %483 ], [ %.074, %481 ], [ %.074, %480 ], [ %.074, %479 ], [ %.074, %468 ], [ %.074, %458 ], [ %.074, %457 ], [ %.074, %447 ], [ %.074, %437 ], [ %.074, %436 ], [ %.074, %421 ], [ %.074, %411 ], [ %.074, %410 ], [ %.074, %399 ], [ %.074, %389 ], [ %.074, %382 ], [ %.074, %381 ], [ %.074, %379 ], [ %.074, %375 ], [ %.074, %374 ], [ %.074, %372 ], [ %.074, %360 ], [ %.074, %350 ], [ %.074, %349 ], [ %.074, %347 ], [ %.074, %346 ], [ %.074, %343 ], [ %.074, %341 ], [ %.074, %327 ], [ %.074, %317 ], [ %.074, %313 ], [ %.074, %312 ], [ %.074, %311 ], [ %.074, %310 ], [ %.074, %300 ], [ %.074, %290 ], [ %.074, %289 ], [ %.074, %278 ], [ %.074, %268 ], [ %.074, %267 ], [ %.074, %266 ], [ %.074, %255 ], [ %.074, %245 ], [ %.074, %233 ], [ %.074, %229 ], [ %.074, %228 ], [ %.074, %218 ], [ %.074, %208 ], [ %.074, %204 ], [ %.074, %203 ], [ %.074, %201 ], [ %.074, %189 ], [ %.074, %179 ], [ %.074, %178 ], [ %.074, %177 ], [ %167, %166 ], [ %.074, %156 ], [ %.074, %155 ], [ %.074, %135 ], [ %.074, %125 ], [ %.074, %121 ], [ 0, %120 ], [ %.074, %119 ], [ %.074, %118 ], [ %.074, %108 ], [ %.074, %98 ], [ %.074, %96 ], [ %.074, %95 ], [ %.074, %91 ], [ %.074, %90 ], [ %.074, %78 ], [ %.074, %68 ], [ %.074, %66 ], [ %.074, %55 ], [ %.074, %45 ], [ %.074, %43 ], [ %.074, %31 ], [ %.074, %21 ], [ %.074, %20 ], [ %.074, %16 ]
  %.072.be = phi i32 [ %.072, %15 ], [ %.072, %542 ], [ %.072, %540 ], [ %.072, %539 ], [ %.072, %533 ], [ %.072, %531 ], [ %.072, %530 ], [ %.072, %529 ], [ %.072, %528 ], [ %.072, %526 ], [ %.072, %524 ], [ %.072, %523 ], [ %.072, %522 ], [ %.072, %521 ], [ %.072, %510 ], [ %.072, %509 ], [ %.072, %506 ], [ %.072, %505 ], [ %.072, %504 ], [ %.072, %493 ], [ %.072, %483 ], [ %.072, %481 ], [ %.072, %480 ], [ %.072, %479 ], [ %.072, %468 ], [ %.072, %458 ], [ %.072, %457 ], [ %.072, %447 ], [ %.072, %437 ], [ %.072, %436 ], [ %.072, %421 ], [ %.072, %411 ], [ %.072, %410 ], [ %.072, %399 ], [ %.072, %389 ], [ %.072, %382 ], [ %.072, %381 ], [ %.072, %379 ], [ %.072, %375 ], [ %.072, %374 ], [ %.072, %372 ], [ %.072, %360 ], [ %.072, %350 ], [ %.072, %349 ], [ %.072, %347 ], [ %.072, %346 ], [ %.072, %343 ], [ %.072, %341 ], [ %.072, %327 ], [ %.072, %317 ], [ %.072, %313 ], [ %.072, %312 ], [ %.neg84, %311 ], [ %.072, %310 ], [ %.072, %300 ], [ %.072, %290 ], [ %.072, %289 ], [ %.072, %278 ], [ %.072, %268 ], [ %.072, %267 ], [ %.072, %266 ], [ %.072, %255 ], [ %.072, %245 ], [ %.072, %233 ], [ %.072, %229 ], [ %.072, %228 ], [ %.072, %218 ], [ %.072, %208 ], [ %.072, %204 ], [ %.072, %203 ], [ %.072, %201 ], [ %.072, %189 ], [ %.072, %179 ], [ 0, %178 ], [ %.072, %177 ], [ %.072, %166 ], [ %.072, %156 ], [ %.072, %155 ], [ %.072, %135 ], [ %.072, %125 ], [ %.072, %121 ], [ %.072, %120 ], [ %.072, %119 ], [ %.072, %118 ], [ %.072, %108 ], [ %.072, %98 ], [ %.072, %96 ], [ %.072, %95 ], [ %.072, %91 ], [ %.072, %90 ], [ %.072, %78 ], [ %.072, %68 ], [ %.072, %66 ], [ %.072, %55 ], [ %.072, %45 ], [ %.072, %43 ], [ %.072, %31 ], [ %.072, %21 ], [ %.072, %20 ], [ %.072, %16 ]
  %.070.be = phi i32 [ %.070, %15 ], [ %.070, %542 ], [ %.070, %540 ], [ %.070, %539 ], [ %.070, %533 ], [ %.070, %531 ], [ %.070, %530 ], [ %.070, %529 ], [ %.070, %528 ], [ %527, %526 ], [ %.070, %524 ], [ %.070, %523 ], [ %.070, %522 ], [ %.070, %521 ], [ %.070, %510 ], [ %.070, %509 ], [ %.070, %506 ], [ %.070, %505 ], [ %.070, %504 ], [ %.070, %493 ], [ %.070, %483 ], [ %.070, %481 ], [ %.070, %480 ], [ %.070, %479 ], [ %.070, %468 ], [ %.070, %458 ], [ %.070, %457 ], [ %.070, %447 ], [ %.070, %437 ], [ %.070, %436 ], [ %.070, %421 ], [ %.070, %411 ], [ %.070, %410 ], [ %.070, %399 ], [ %.070, %389 ], [ %.070, %382 ], [ %.070, %381 ], [ %.070, %379 ], [ %.070, %375 ], [ %.070, %374 ], [ %.070, %372 ], [ %.070, %360 ], [ %.070, %350 ], [ %.070, %349 ], [ %.070, %347 ], [ %.070, %346 ], [ %.070, %343 ], [ %.070, %341 ], [ %.070, %327 ], [ %.070, %317 ], [ %.070, %313 ], [ %.070, %312 ], [ %.070, %311 ], [ %.070, %310 ], [ %.070, %300 ], [ %.070, %290 ], [ %.070, %289 ], [ %279, %278 ], [ %.070, %268 ], [ %.070, %267 ], [ %.070, %266 ], [ %.070, %255 ], [ %.070, %245 ], [ %.070, %233 ], [ %.070, %229 ], [ %.070, %228 ], [ %.070, %218 ], [ %.070, %208 ], [ %.070, %204 ], [ 0, %203 ], [ %.070, %201 ], [ %.070, %189 ], [ %.070, %179 ], [ %.070, %178 ], [ %.070, %177 ], [ %.070, %166 ], [ %.070, %156 ], [ %.070, %155 ], [ %.070, %135 ], [ %.070, %125 ], [ %.070, %121 ], [ %.070, %120 ], [ %.070, %119 ], [ %.070, %118 ], [ %.070, %108 ], [ %.070, %98 ], [ %.070, %96 ], [ %.070, %95 ], [ %.070, %91 ], [ %.070, %90 ], [ %.070, %78 ], [ %.070, %68 ], [ %.070, %66 ], [ %.070, %55 ], [ %.070, %45 ], [ %.070, %43 ], [ %.070, %31 ], [ %.070, %21 ], [ %.070, %20 ], [ %.070, %16 ]
  %.068.be = phi i32 [ %.068, %15 ], [ %.068, %542 ], [ %.068, %540 ], [ %.068, %539 ], [ %.068, %533 ], [ %.068, %531 ], [ %.068, %530 ], [ %.068, %529 ], [ %.068, %528 ], [ %.068, %526 ], [ %525, %524 ], [ 0, %523 ], [ %.068, %522 ], [ %.068, %521 ], [ %.068, %510 ], [ %.068, %509 ], [ %.068, %506 ], [ %.068, %505 ], [ %.068, %504 ], [ %.068, %493 ], [ %.068, %483 ], [ %.068, %481 ], [ %.068, %480 ], [ %.068, %479 ], [ %.068, %468 ], [ %.068, %458 ], [ %.068, %457 ], [ %.068, %447 ], [ %.068, %437 ], [ %.068, %436 ], [ %.068, %421 ], [ %.068, %411 ], [ %.068, %410 ], [ %.068, %399 ], [ %.068, %389 ], [ %.068, %382 ], [ %.068, %381 ], [ %.068, %379 ], [ %.068, %375 ], [ %.068, %374 ], [ %.068, %372 ], [ %.068, %360 ], [ %.068, %350 ], [ %.068, %349 ], [ %.068, %347 ], [ %.068, %346 ], [ %.068, %343 ], [ %.068, %341 ], [ %.068, %327 ], [ %.068, %317 ], [ %.068, %313 ], [ %.068, %312 ], [ %.068, %311 ], [ %.068, %310 ], [ %.068, %300 ], [ %.068, %290 ], [ %.068, %289 ], [ %.068, %278 ], [ %.068, %268 ], [ %.068, %267 ], [ %.068, %266 ], [ %256, %255 ], [ %.068, %245 ], [ %.068, %233 ], [ %.068, %229 ], [ %.068, %228 ], [ 0, %218 ], [ %.068, %208 ], [ %.068, %204 ], [ %.068, %203 ], [ %.068, %201 ], [ %.068, %189 ], [ %.068, %179 ], [ %.068, %178 ], [ %.068, %177 ], [ %.068, %166 ], [ %.068, %156 ], [ %.068, %155 ], [ %.068, %135 ], [ %.068, %125 ], [ %.068, %121 ], [ %.068, %120 ], [ %.068, %119 ], [ %.068, %118 ], [ %.068, %108 ], [ %.068, %98 ], [ %.068, %96 ], [ %.068, %95 ], [ %.068, %91 ], [ %.068, %90 ], [ %.068, %78 ], [ %.068, %68 ], [ %.068, %66 ], [ %.068, %55 ], [ %.068, %45 ], [ %.068, %43 ], [ %.068, %31 ], [ %.068, %21 ], [ %.068, %20 ], [ %.068, %16 ]
  %.066.be = phi i32 [ %.066, %15 ], [ %.066, %542 ], [ %.066, %540 ], [ %.066, %539 ], [ %.066, %533 ], [ %.066, %531 ], [ %.066, %530 ], [ %.066, %529 ], [ %.066, %528 ], [ %.066, %526 ], [ %.066, %524 ], [ %.066, %523 ], [ %.066, %522 ], [ %.066, %521 ], [ %.066, %510 ], [ %.066, %509 ], [ %.066, %506 ], [ %.066, %505 ], [ %.066, %504 ], [ %.066, %493 ], [ %.066, %483 ], [ %.066, %481 ], [ %.066, %480 ], [ %.066, %479 ], [ %.066, %468 ], [ %.066, %458 ], [ %.066, %457 ], [ %.066, %447 ], [ %.066, %437 ], [ %.066, %436 ], [ %.066, %421 ], [ %.066, %411 ], [ %.066, %410 ], [ %.066, %399 ], [ %.066, %389 ], [ %.066, %382 ], [ %.066, %381 ], [ %.066, %379 ], [ %.066, %375 ], [ %.066, %374 ], [ %.066, %372 ], [ %.066, %360 ], [ %.066, %350 ], [ %.066, %349 ], [ %348, %347 ], [ %.066, %346 ], [ %.066, %343 ], [ %.066, %341 ], [ %.066, %327 ], [ %.066, %317 ], [ %.066, %313 ], [ 0, %312 ], [ %.066, %311 ], [ %.066, %310 ], [ %.066, %300 ], [ %.066, %290 ], [ %.066, %289 ], [ %.066, %278 ], [ %.066, %268 ], [ %.066, %267 ], [ %.066, %266 ], [ %.066, %255 ], [ %.066, %245 ], [ %.066, %233 ], [ %.066, %229 ], [ %.066, %228 ], [ %.066, %218 ], [ %.066, %208 ], [ %.066, %204 ], [ %.066, %203 ], [ %.066, %201 ], [ %.066, %189 ], [ %.066, %179 ], [ %.066, %178 ], [ %.066, %177 ], [ %.066, %166 ], [ %.066, %156 ], [ %.066, %155 ], [ %.066, %135 ], [ %.066, %125 ], [ %.066, %121 ], [ %.066, %120 ], [ %.066, %119 ], [ %.066, %118 ], [ %.066, %108 ], [ %.066, %98 ], [ %.066, %96 ], [ %.066, %95 ], [ %.066, %91 ], [ %.066, %90 ], [ %.066, %78 ], [ %.066, %68 ], [ %.066, %66 ], [ %.066, %55 ], [ %.066, %45 ], [ %.066, %43 ], [ %.066, %31 ], [ %.066, %21 ], [ %.066, %20 ], [ %.066, %16 ]
  %.064.be = phi i32 [ %.064, %15 ], [ %.064, %542 ], [ %.064, %540 ], [ %.064, %539 ], [ %.064, %533 ], [ %.064, %531 ], [ %.064, %530 ], [ %.064, %529 ], [ %.064, %528 ], [ %.064, %526 ], [ %.064, %524 ], [ %.064, %523 ], [ %.064, %522 ], [ %.064, %521 ], [ %.064, %510 ], [ %.064, %509 ], [ %.064, %506 ], [ %.064, %505 ], [ %.064, %504 ], [ %.064, %493 ], [ %.064, %483 ], [ %482, %481 ], [ %.064, %480 ], [ %.064, %479 ], [ %.064, %468 ], [ %.064, %458 ], [ %.064, %457 ], [ %.064, %447 ], [ %.064, %437 ], [ %.064, %436 ], [ %.064, %421 ], [ %.064, %411 ], [ %.064, %410 ], [ %.064, %399 ], [ %.064, %389 ], [ %.064, %382 ], [ %.064, %381 ], [ %.064, %379 ], [ %.064, %375 ], [ %.064, %374 ], [ %.064, %372 ], [ %.064, %360 ], [ %.064, %350 ], [ 0, %349 ], [ %.064, %347 ], [ %.064, %346 ], [ %.064, %343 ], [ %.064, %341 ], [ %.064, %327 ], [ %.064, %317 ], [ %.064, %313 ], [ %.064, %312 ], [ %.064, %311 ], [ %.064, %310 ], [ %.064, %300 ], [ %.064, %290 ], [ %.064, %289 ], [ %.064, %278 ], [ %.064, %268 ], [ %.064, %267 ], [ %.064, %266 ], [ %.064, %255 ], [ %.064, %245 ], [ %.064, %233 ], [ %.064, %229 ], [ %.064, %228 ], [ %.064, %218 ], [ %.064, %208 ], [ %.064, %204 ], [ %.064, %203 ], [ %.064, %201 ], [ %.064, %189 ], [ %.064, %179 ], [ %.064, %178 ], [ %.064, %177 ], [ %.064, %166 ], [ %.064, %156 ], [ %.064, %155 ], [ %.064, %135 ], [ %.064, %125 ], [ %.064, %121 ], [ %.064, %120 ], [ %.064, %119 ], [ %.064, %118 ], [ %.064, %108 ], [ %.064, %98 ], [ %.064, %96 ], [ %.064, %95 ], [ %.064, %91 ], [ %.064, %90 ], [ %.064, %78 ], [ %.064, %68 ], [ %.064, %66 ], [ %.064, %55 ], [ %.064, %45 ], [ %.064, %43 ], [ %.064, %31 ], [ %.064, %21 ], [ %.064, %20 ], [ %.064, %16 ]
  %.062.be = phi i32 [ %.062, %15 ], [ %.062, %542 ], [ %541, %540 ], [ %.062, %539 ], [ %.062, %533 ], [ %.062, %531 ], [ %.062, %530 ], [ %.062, %529 ], [ %.062, %528 ], [ %.062, %526 ], [ %.062, %524 ], [ %.062, %523 ], [ %.062, %522 ], [ %.062, %521 ], [ %.062, %510 ], [ %.062, %509 ], [ %.062, %506 ], [ %.062, %505 ], [ %.062, %504 ], [ %.062, %493 ], [ %.062, %483 ], [ %.062, %481 ], [ %.062, %480 ], [ %.062, %479 ], [ %469, %468 ], [ %.062, %458 ], [ %.062, %457 ], [ %.062, %447 ], [ %.062, %437 ], [ %.062, %436 ], [ %.062, %421 ], [ %.062, %411 ], [ %.062, %410 ], [ %.062, %399 ], [ %.062, %389 ], [ %.062, %382 ], [ %.062, %381 ], [ %.062, %379 ], [ %.062, %375 ], [ 0, %374 ], [ %.062, %372 ], [ %.062, %360 ], [ %.062, %350 ], [ %.062, %349 ], [ %.062, %347 ], [ %.062, %346 ], [ %.062, %343 ], [ %.062, %341 ], [ %.062, %327 ], [ %.062, %317 ], [ %.062, %313 ], [ %.062, %312 ], [ %.062, %311 ], [ %.062, %310 ], [ %.062, %300 ], [ %.062, %290 ], [ %.062, %289 ], [ %.062, %278 ], [ %.062, %268 ], [ %.062, %267 ], [ %.062, %266 ], [ %.062, %255 ], [ %.062, %245 ], [ %.062, %233 ], [ %.062, %229 ], [ %.062, %228 ], [ %.062, %218 ], [ %.062, %208 ], [ %.062, %204 ], [ %.062, %203 ], [ %.062, %201 ], [ %.062, %189 ], [ %.062, %179 ], [ %.062, %178 ], [ %.062, %177 ], [ %.062, %166 ], [ %.062, %156 ], [ %.062, %155 ], [ %.062, %135 ], [ %.062, %125 ], [ %.062, %121 ], [ %.062, %120 ], [ %.062, %119 ], [ %.062, %118 ], [ %.062, %108 ], [ %.062, %98 ], [ %.062, %96 ], [ %.062, %95 ], [ %.062, %91 ], [ %.062, %90 ], [ %.062, %78 ], [ %.062, %68 ], [ %.062, %66 ], [ %.062, %55 ], [ %.062, %45 ], [ %.062, %43 ], [ %.062, %31 ], [ %.062, %21 ], [ %.062, %20 ], [ %.062, %16 ]
  %.0.be = phi i32 [ %.0, %15 ], [ -1404218264, %542 ], [ 1761577397, %540 ], [ 1059941832, %539 ], [ -1580814095, %533 ], [ 969714272, %531 ], [ 1497309834, %530 ], [ -981690583, %529 ], [ -968047919, %528 ], [ -1219265337, %526 ], [ -845094059, %524 ], [ 910103636, %523 ], [ -317953630, %522 ], [ 201561226, %521 ], [ 29194901, %510 ], [ -2005821410, %509 ], [ -1344378243, %506 ], [ -1836787817, %505 ], [ 451079514, %504 ], [ %502, %493 ], [ %492, %483 ], [ -1964681794, %481 ], [ -2141540611, %480 ], [ -2054888503, %479 ], [ %478, %468 ], [ %467, %458 ], [ 818077765, %457 ], [ %456, %447 ], [ %446, %437 ], [ -460864416, %436 ], [ %435, %421 ], [ %420, %411 ], [ -460864416, %410 ], [ %409, %399 ], [ %398, %389 ], [ %388, %382 ], [ 688329677, %381 ], [ %380, %379 ], [ %378, %375 ], [ -2054888503, %374 ], [ %373, %372 ], [ %371, %360 ], [ %359, %350 ], [ -1964681794, %349 ], [ 213134263, %347 ], [ -1755357397, %346 ], [ 563681446, %343 ], [ %342, %341 ], [ %340, %327 ], [ %326, %317 ], [ %316, %313 ], [ 213134263, %312 ], [ -1804827015, %311 ], [ -906907080, %310 ], [ %309, %300 ], [ %299, %290 ], [ -828027930, %289 ], [ %288, %278 ], [ %277, %268 ], [ -1981231358, %267 ], [ -792333292, %266 ], [ %265, %255 ], [ %254, %245 ], [ -97210532, %233 ], [ %232, %229 ], [ -792333292, %228 ], [ %227, %218 ], [ %217, %208 ], [ %207, %204 ], [ -828027930, %203 ], [ %202, %201 ], [ %200, %189 ], [ %188, %179 ], [ -1804827015, %178 ], [ -1781818331, %177 ], [ %176, %166 ], [ %165, %156 ], [ -520338885, %155 ], [ %154, %135 ], [ %134, %125 ], [ %124, %121 ], [ -1781818331, %120 ], [ 1157350715, %119 ], [ -1127463592, %118 ], [ %117, %108 ], [ %107, %98 ], [ -775827172, %96 ], [ 65570779, %95 ], [ 1106050819, %91 ], [ 1106050819, %90 ], [ %89, %78 ], [ %77, %68 ], [ %67, %66 ], [ %65, %55 ], [ %54, %45 ], [ %44, %43 ], [ %42, %31 ], [ %30, %21 ], [ -775827172, %20 ], [ %19, %16 ]
  br label %15

16:                                               ; preds = %15
  %17 = load i32, i32* @n, align 4
  %18 = icmp slt i32 %.078, %17
  %19 = select i1 %18, i32 2096871401, i32 -1244903256
  br label %.backedge

20:                                               ; preds = %15
  br label %.backedge

21:                                               ; preds = %15
  %22 = load i32, i32* @x.5, align 4
  %23 = load i32, i32* @y.6, align 4
  %24 = add i32 %22, -1
  %25 = mul i32 %24, %22
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %28, %27
  %30 = select i1 %29, i32 451079514, i32 -1973332459
  br label %.backedge

31:                                               ; preds = %15
  %32 = load i32, i32* @n, align 4
  %33 = icmp slt i32 %.076, %32
  store i1 %33, i1* %8, align 1
  %34 = load i32, i32* @x.5, align 4
  %35 = load i32, i32* @y.6, align 4
  %36 = add i32 %34, -1
  %37 = mul i32 %36, %34
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %40, %39
  %42 = select i1 %41, i32 -1974663555, i32 -1973332459
  br label %.backedge

43:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %44 = select i1 %.0..0..0., i32 -1188657912, i32 1382399657
  br label %.backedge

45:                                               ; preds = %15
  %46 = load i32, i32* @x.5, align 4
  %47 = load i32, i32* @y.6, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -1836787817, i32 1858320954
  br label %.backedge

55:                                               ; preds = %15
  %56 = icmp eq i32 %.078, %.076
  store i1 %56, i1* %7, align 1
  %57 = load i32, i32* @x.5, align 4
  %58 = load i32, i32* @y.6, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 -344380960, i32 1858320954
  br label %.backedge

66:                                               ; preds = %15
  %.0..0..0.57 = load volatile i1, i1* %7, align 1
  %67 = select i1 %.0..0..0.57, i32 1324963987, i32 1217817547
  br label %.backedge

68:                                               ; preds = %15
  %69 = load i32, i32* @x.5, align 4
  %70 = load i32, i32* @y.6, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 -1344378243, i32 -1594395297
  br label %.backedge

78:                                               ; preds = %15
  %79 = sext i32 %.078 to i64
  %80 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %79, i64 %79
  store i64 0, i64* %80, align 8
  %81 = load i32, i32* @x.5, align 4
  %82 = load i32, i32* @y.6, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 -224765190, i32 -1594395297
  br label %.backedge

90:                                               ; preds = %15
  br label %.backedge

91:                                               ; preds = %15
  %92 = sext i32 %.078 to i64
  %93 = sext i32 %.076 to i64
  %94 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %92, i64 %93
  store i64 1000000000000000000, i64* %94, align 8
  br label %.backedge

95:                                               ; preds = %15
  br label %.backedge

96:                                               ; preds = %15
  %97 = add i32 %.076, 1
  br label %.backedge

98:                                               ; preds = %15
  %99 = load i32, i32* @x.5, align 4
  %100 = load i32, i32* @y.6, align 4
  %101 = add i32 %99, -1
  %102 = mul i32 %101, %99
  %103 = and i32 %102, 1
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %105, %104
  %107 = select i1 %106, i32 -2005821410, i32 -48576299
  br label %.backedge

108:                                              ; preds = %15
  %109 = load i32, i32* @x.5, align 4
  %110 = load i32, i32* @y.6, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 1743540437, i32 -48576299
  br label %.backedge

118:                                              ; preds = %15
  br label %.backedge

119:                                              ; preds = %15
  %.neg85 = add i32 %.078, 1
  br label %.backedge

120:                                              ; preds = %15
  br label %.backedge

121:                                              ; preds = %15
  %122 = load i32, i32* @m, align 4
  %123 = icmp slt i32 %.074, %122
  %124 = select i1 %123, i32 -504475070, i32 1040153855
  br label %.backedge

125:                                              ; preds = %15
  %126 = load i32, i32* @x.5, align 4
  %127 = load i32, i32* @y.6, align 4
  %128 = add i32 %126, -1
  %129 = mul i32 %128, %126
  %130 = and i32 %129, 1
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %132, %131
  %134 = select i1 %133, i32 29194901, i32 4793489
  br label %.backedge

135:                                              ; preds = %15
  %136 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %9)
  %137 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %136, i32* nonnull dereferenceable(4) %10)
  %138 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %137, i32* nonnull dereferenceable(4) %11)
  %139 = load i32, i32* %11, align 4
  %140 = sext i32 %139 to i64
  %141 = load i32, i32* %9, align 4
  %142 = sext i32 %141 to i64
  %143 = load i32, i32* %10, align 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %142, i64 %144
  store i64 %140, i64* %145, align 8
  %146 = load i32, i32* @x.5, align 4
  %147 = load i32, i32* @y.6, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 -1095273765, i32 4793489
  br label %.backedge

155:                                              ; preds = %15
  br label %.backedge

156:                                              ; preds = %15
  %157 = load i32, i32* @x.5, align 4
  %158 = load i32, i32* @y.6, align 4
  %159 = add i32 %157, -1
  %160 = mul i32 %159, %157
  %161 = and i32 %160, 1
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %163, %162
  %165 = select i1 %164, i32 201561226, i32 2108791519
  br label %.backedge

166:                                              ; preds = %15
  %167 = add i32 %.074, 1
  %168 = load i32, i32* @x.5, align 4
  %169 = load i32, i32* @y.6, align 4
  %170 = add i32 %168, -1
  %171 = mul i32 %170, %168
  %172 = and i32 %171, 1
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %174, %173
  %176 = select i1 %175, i32 -1510288877, i32 2108791519
  br label %.backedge

177:                                              ; preds = %15
  br label %.backedge

178:                                              ; preds = %15
  br label %.backedge

179:                                              ; preds = %15
  %180 = load i32, i32* @x.5, align 4
  %181 = load i32, i32* @y.6, align 4
  %182 = add i32 %180, -1
  %183 = mul i32 %182, %180
  %184 = and i32 %183, 1
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %186, %185
  %188 = select i1 %187, i32 -317953630, i32 154054771
  br label %.backedge

189:                                              ; preds = %15
  %190 = load i32, i32* @n, align 4
  %191 = icmp slt i32 %.072, %190
  store i1 %191, i1* %6, align 1
  %192 = load i32, i32* @x.5, align 4
  %193 = load i32, i32* @y.6, align 4
  %194 = add i32 %192, -1
  %195 = mul i32 %194, %192
  %196 = and i32 %195, 1
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %198, %197
  %200 = select i1 %199, i32 2125691974, i32 154054771
  br label %.backedge

201:                                              ; preds = %15
  %.0..0..0.58 = load volatile i1, i1* %6, align 1
  %202 = select i1 %.0..0..0.58, i32 -1230422626, i32 931314616
  br label %.backedge

203:                                              ; preds = %15
  br label %.backedge

204:                                              ; preds = %15
  %205 = load i32, i32* @n, align 4
  %206 = icmp slt i32 %.070, %205
  %207 = select i1 %206, i32 1979550923, i32 995376227
  br label %.backedge

208:                                              ; preds = %15
  %209 = load i32, i32* @x.5, align 4
  %210 = load i32, i32* @y.6, align 4
  %211 = add i32 %209, -1
  %212 = mul i32 %211, %209
  %213 = and i32 %212, 1
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %215, %214
  %217 = select i1 %216, i32 910103636, i32 1199133028
  br label %.backedge

218:                                              ; preds = %15
  %219 = load i32, i32* @x.5, align 4
  %220 = load i32, i32* @y.6, align 4
  %221 = add i32 %219, -1
  %222 = mul i32 %221, %219
  %223 = and i32 %222, 1
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %225, %224
  %227 = select i1 %226, i32 475250961, i32 1199133028
  br label %.backedge

228:                                              ; preds = %15
  br label %.backedge

229:                                              ; preds = %15
  %230 = load i32, i32* @n, align 4
  %231 = icmp slt i32 %.068, %230
  %232 = select i1 %231, i32 2060874939, i32 1271321381
  br label %.backedge

233:                                              ; preds = %15
  %234 = sext i32 %.070 to i64
  %235 = sext i32 %.068 to i64
  %236 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %234, i64 %235
  %237 = sext i32 %.072 to i64
  %238 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %234, i64 %237
  %239 = load i64, i64* %238, align 8
  %240 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %237, i64 %235
  %241 = load i64, i64* %240, align 8
  %242 = add i64 %241, %239
  store i64 %242, i64* %12, align 8
  %243 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %236, i64* nonnull dereferenceable(8) %12)
  %244 = load i64, i64* %243, align 8
  store i64 %244, i64* %236, align 8
  br label %.backedge

245:                                              ; preds = %15
  %246 = load i32, i32* @x.5, align 4
  %247 = load i32, i32* @y.6, align 4
  %248 = add i32 %246, -1
  %249 = mul i32 %248, %246
  %250 = and i32 %249, 1
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %252, %251
  %254 = select i1 %253, i32 -845094059, i32 -581371650
  br label %.backedge

255:                                              ; preds = %15
  %256 = add i32 %.068, 1
  %257 = load i32, i32* @x.5, align 4
  %258 = load i32, i32* @y.6, align 4
  %259 = add i32 %257, -1
  %260 = mul i32 %259, %257
  %261 = and i32 %260, 1
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %263, %262
  %265 = select i1 %264, i32 385522049, i32 -581371650
  br label %.backedge

266:                                              ; preds = %15
  br label %.backedge

267:                                              ; preds = %15
  br label %.backedge

268:                                              ; preds = %15
  %269 = load i32, i32* @x.5, align 4
  %270 = load i32, i32* @y.6, align 4
  %271 = add i32 %269, -1
  %272 = mul i32 %271, %269
  %273 = and i32 %272, 1
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %275, %274
  %277 = select i1 %276, i32 -1219265337, i32 -537546853
  br label %.backedge

278:                                              ; preds = %15
  %279 = add i32 %.070, 1
  %280 = load i32, i32* @x.5, align 4
  %281 = load i32, i32* @y.6, align 4
  %282 = add i32 %280, -1
  %283 = mul i32 %282, %280
  %284 = and i32 %283, 1
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %286, %285
  %288 = select i1 %287, i32 2052667689, i32 -537546853
  br label %.backedge

289:                                              ; preds = %15
  br label %.backedge

290:                                              ; preds = %15
  %291 = load i32, i32* @x.5, align 4
  %292 = load i32, i32* @y.6, align 4
  %293 = add i32 %291, -1
  %294 = mul i32 %293, %291
  %295 = and i32 %294, 1
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %297, %296
  %299 = select i1 %298, i32 -968047919, i32 -124172039
  br label %.backedge

300:                                              ; preds = %15
  %301 = load i32, i32* @x.5, align 4
  %302 = load i32, i32* @y.6, align 4
  %303 = add i32 %301, -1
  %304 = mul i32 %303, %301
  %305 = and i32 %304, 1
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %307, %306
  %309 = select i1 %308, i32 -1837334549, i32 -124172039
  br label %.backedge

310:                                              ; preds = %15
  br label %.backedge

311:                                              ; preds = %15
  %.neg84 = add i32 %.072, 1
  br label %.backedge

312:                                              ; preds = %15
  br label %.backedge

313:                                              ; preds = %15
  %314 = load i32, i32* @n, align 4
  %315 = icmp slt i32 %.066, %314
  %316 = select i1 %315, i32 748415996, i32 164859426
  br label %.backedge

317:                                              ; preds = %15
  %318 = load i32, i32* @x.5, align 4
  %319 = load i32, i32* @y.6, align 4
  %320 = add i32 %318, -1
  %321 = mul i32 %320, %318
  %322 = and i32 %321, 1
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %324, %323
  %326 = select i1 %325, i32 -981690583, i32 1240260133
  br label %.backedge

327:                                              ; preds = %15
  %328 = sext i32 %.066 to i64
  %329 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %328, i64 %328
  %330 = load i64, i64* %329, align 8
  %331 = icmp slt i64 %330, 0
  store i1 %331, i1* %5, align 1
  %332 = load i32, i32* @x.5, align 4
  %333 = load i32, i32* @y.6, align 4
  %334 = add i32 %332, -1
  %335 = mul i32 %334, %332
  %336 = and i32 %335, 1
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %338, %337
  %340 = select i1 %339, i32 -2011102902, i32 1240260133
  br label %.backedge

341:                                              ; preds = %15
  %.0..0..0.59 = load volatile i1, i1* %5, align 1
  %342 = select i1 %.0..0..0.59, i32 1297121368, i32 -99613913
  br label %.backedge

343:                                              ; preds = %15
  %344 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  %.not83 = icmp eq i32 %344, 0
  %345 = zext i1 %.not83 to i32
  br label %.backedge

346:                                              ; preds = %15
  br label %.backedge

347:                                              ; preds = %15
  %348 = add i32 %.066, 1
  br label %.backedge

349:                                              ; preds = %15
  br label %.backedge

350:                                              ; preds = %15
  %351 = load i32, i32* @x.5, align 4
  %352 = load i32, i32* @y.6, align 4
  %353 = add i32 %351, -1
  %354 = mul i32 %353, %351
  %355 = and i32 %354, 1
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %357, %356
  %359 = select i1 %358, i32 1497309834, i32 -399524250
  br label %.backedge

360:                                              ; preds = %15
  %361 = load i32, i32* @n, align 4
  %362 = icmp slt i32 %.064, %361
  store i1 %362, i1* %4, align 1
  %363 = load i32, i32* @x.5, align 4
  %364 = load i32, i32* @y.6, align 4
  %365 = add i32 %363, -1
  %366 = mul i32 %365, %363
  %367 = and i32 %366, 1
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %369, %368
  %371 = select i1 %370, i32 2113734335, i32 -399524250
  br label %.backedge

372:                                              ; preds = %15
  %.0..0..0.60 = load volatile i1, i1* %4, align 1
  %373 = select i1 %.0..0..0.60, i32 -1011090611, i32 563681446
  br label %.backedge

374:                                              ; preds = %15
  br label %.backedge

375:                                              ; preds = %15
  %376 = load i32, i32* @n, align 4
  %377 = icmp slt i32 %.062, %376
  %378 = select i1 %377, i32 -2068174866, i32 5791311
  br label %.backedge

379:                                              ; preds = %15
  %.not = icmp eq i32 %.062, 0
  %380 = select i1 %.not, i32 688329677, i32 -1012406949
  br label %.backedge

381:                                              ; preds = %15
  %putchar82 = call i32 @putchar(i32 32)
  br label %.backedge

382:                                              ; preds = %15
  %383 = sext i32 %.064 to i64
  %384 = sext i32 %.062 to i64
  %385 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %383, i64 %384
  %386 = load i64, i64* %385, align 8
  %387 = icmp sgt i64 %386, 2000000000
  %388 = select i1 %387, i32 -785994238, i32 -1310302254
  br label %.backedge

389:                                              ; preds = %15
  %390 = load i32, i32* @x.5, align 4
  %391 = load i32, i32* @y.6, align 4
  %392 = add i32 %390, -1
  %393 = mul i32 %392, %390
  %394 = and i32 %393, 1
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %396, %395
  %398 = select i1 %397, i32 969714272, i32 -1166185806
  br label %.backedge

399:                                              ; preds = %15
  %400 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %401 = load i32, i32* @x.5, align 4
  %402 = load i32, i32* @y.6, align 4
  %403 = add i32 %401, -1
  %404 = mul i32 %403, %401
  %405 = and i32 %404, 1
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %407, %406
  %409 = select i1 %408, i32 1329717107, i32 -1166185806
  br label %.backedge

410:                                              ; preds = %15
  br label %.backedge

411:                                              ; preds = %15
  %412 = load i32, i32* @x.5, align 4
  %413 = load i32, i32* @y.6, align 4
  %414 = add i32 %412, -1
  %415 = mul i32 %414, %412
  %416 = and i32 %415, 1
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %418, %417
  %420 = select i1 %419, i32 -1580814095, i32 471614465
  br label %.backedge

421:                                              ; preds = %15
  %422 = sext i32 %.064 to i64
  %423 = sext i32 %.062 to i64
  %424 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %422, i64 %423
  %425 = load i64, i64* %424, align 8
  %426 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 %425)
  %427 = load i32, i32* @x.5, align 4
  %428 = load i32, i32* @y.6, align 4
  %429 = add i32 %427, -1
  %430 = mul i32 %429, %427
  %431 = and i32 %430, 1
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %433, %432
  %435 = select i1 %434, i32 -459526646, i32 471614465
  br label %.backedge

436:                                              ; preds = %15
  br label %.backedge

437:                                              ; preds = %15
  %438 = load i32, i32* @x.5, align 4
  %439 = load i32, i32* @y.6, align 4
  %440 = add i32 %438, -1
  %441 = mul i32 %440, %438
  %442 = and i32 %441, 1
  %443 = icmp eq i32 %442, 0
  %444 = icmp slt i32 %439, 10
  %445 = or i1 %444, %443
  %446 = select i1 %445, i32 1059941832, i32 2019110639
  br label %.backedge

447:                                              ; preds = %15
  %448 = load i32, i32* @x.5, align 4
  %449 = load i32, i32* @y.6, align 4
  %450 = add i32 %448, -1
  %451 = mul i32 %450, %448
  %452 = and i32 %451, 1
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %449, 10
  %455 = or i1 %454, %453
  %456 = select i1 %455, i32 -927238426, i32 2019110639
  br label %.backedge

457:                                              ; preds = %15
  br label %.backedge

458:                                              ; preds = %15
  %459 = load i32, i32* @x.5, align 4
  %460 = load i32, i32* @y.6, align 4
  %461 = add i32 %459, -1
  %462 = mul i32 %461, %459
  %463 = and i32 %462, 1
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %465, %464
  %467 = select i1 %466, i32 1761577397, i32 -639769949
  br label %.backedge

468:                                              ; preds = %15
  %469 = add i32 %.062, 1
  %470 = load i32, i32* @x.5, align 4
  %471 = load i32, i32* @y.6, align 4
  %472 = add i32 %470, -1
  %473 = mul i32 %472, %470
  %474 = and i32 %473, 1
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %476, %475
  %478 = select i1 %477, i32 -1656594150, i32 -639769949
  br label %.backedge

479:                                              ; preds = %15
  br label %.backedge

480:                                              ; preds = %15
  %putchar = call i32 @putchar(i32 10)
  br label %.backedge

481:                                              ; preds = %15
  %482 = add i32 %.064, 1
  br label %.backedge

483:                                              ; preds = %15
  %484 = load i32, i32* @x.5, align 4
  %485 = load i32, i32* @y.6, align 4
  %486 = add i32 %484, -1
  %487 = mul i32 %486, %484
  %488 = and i32 %487, 1
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %490, %489
  %492 = select i1 %491, i32 -1404218264, i32 -1238764974
  br label %.backedge

493:                                              ; preds = %15
  store i32 %.080, i32* %3, align 4
  %494 = load i32, i32* @x.5, align 4
  %495 = load i32, i32* @y.6, align 4
  %496 = add i32 %494, -1
  %497 = mul i32 %496, %494
  %498 = and i32 %497, 1
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %500, %499
  %502 = select i1 %501, i32 396215534, i32 -1238764974
  br label %.backedge

503:                                              ; preds = %15
  %.0..0..0.61 = load volatile i32, i32* %3, align 4
  ret i32 %.0..0..0.61

504:                                              ; preds = %15
  br label %.backedge

505:                                              ; preds = %15
  br label %.backedge

506:                                              ; preds = %15
  %507 = sext i32 %.078 to i64
  %508 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %507, i64 %507
  store i64 0, i64* %508, align 8
  br label %.backedge

509:                                              ; preds = %15
  br label %.backedge

510:                                              ; preds = %15
  %511 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %9)
  %512 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %511, i32* nonnull dereferenceable(4) %10)
  %513 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %512, i32* nonnull dereferenceable(4) %11)
  %514 = load i32, i32* %11, align 4
  %515 = sext i32 %514 to i64
  %516 = load i32, i32* %9, align 4
  %517 = sext i32 %516 to i64
  %518 = load i32, i32* %10, align 4
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %517, i64 %519
  store i64 %515, i64* %520, align 8
  br label %.backedge

521:                                              ; preds = %15
  %.neg = add i32 %.074, 1
  br label %.backedge

522:                                              ; preds = %15
  br label %.backedge

523:                                              ; preds = %15
  br label %.backedge

524:                                              ; preds = %15
  %525 = add i32 %.068, 1
  br label %.backedge

526:                                              ; preds = %15
  %527 = add i32 %.070, 1
  br label %.backedge

528:                                              ; preds = %15
  br label %.backedge

529:                                              ; preds = %15
  br label %.backedge

530:                                              ; preds = %15
  br label %.backedge

531:                                              ; preds = %15
  %532 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  br label %.backedge

533:                                              ; preds = %15
  %534 = sext i32 %.064 to i64
  %535 = sext i32 %.062 to i64
  %536 = getelementptr inbounds [101 x [101 x i64]], [101 x [101 x i64]]* @dis, i64 0, i64 %534, i64 %535
  %537 = load i64, i64* %536, align 8
  %538 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 %537)
  br label %.backedge

539:                                              ; preds = %15
  br label %.backedge

540:                                              ; preds = %15
  %541 = add i32 %.062, 1
  br label %.backedge

542:                                              ; preds = %15
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #5 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i64**, align 8
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = load i32, i32* @x.7, align 4
  %11 = load i32, i32* @y.8, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %9, align 1
  %16 = icmp slt i32 %11, 10
  store i1 %16, i1* %8, align 1
  br label %17

17:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ -479988189, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -479988189, label %18
    i32 -238617630, label %21
    i32 -1042151998, label %39
    i32 -2118416824, label %41
    i32 1704520864, label %43
    i32 -1814293507, label %53
    i32 -990481800, label %64
    i32 244632857, label %65
    i32 1029351301, label %75
    i32 -191958072, label %86
    i32 -1992808452, label %87
    i32 -1732125467, label %88
    i32 612660650, label %90
  ]

.backedge:                                        ; preds = %17, %90, %88, %87, %75, %65, %64, %53, %43, %41, %39, %21, %18
  %.0.be = phi i32 [ %.0, %17 ], [ 1029351301, %90 ], [ -1814293507, %88 ], [ -238617630, %87 ], [ %85, %75 ], [ %74, %65 ], [ 244632857, %64 ], [ %63, %53 ], [ %52, %43 ], [ 244632857, %41 ], [ %40, %39 ], [ %38, %21 ], [ %20, %18 ]
  br label %17

18:                                               ; preds = %17
  %.0..0..0. = load volatile i1, i1* %9, align 1
  %.0..0..0.1 = load volatile i1, i1* %8, align 1
  %19 = or i1 %.0..0..0., %.0..0..0.1
  %20 = select i1 %19, i32 -238617630, i32 -1992808452
  br label %.backedge

21:                                               ; preds = %17
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %7, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %6, align 8
  %24 = alloca i64*, align 8
  store i64** %24, i64*** %5, align 8
  %.0..0..0.7 = load volatile i64**, i64*** %6, align 8
  store i64* %0, i64** %.0..0..0.7, align 8
  %.0..0..0.11 = load volatile i64**, i64*** %5, align 8
  store i64* %1, i64** %.0..0..0.11, align 8
  %.0..0..0.12 = load volatile i64**, i64*** %5, align 8
  %25 = load i64*, i64** %.0..0..0.12, align 8
  %26 = load i64, i64* %25, align 8
  %.0..0..0.8 = load volatile i64**, i64*** %6, align 8
  %27 = load i64*, i64** %.0..0..0.8, align 8
  %28 = load i64, i64* %27, align 8
  %29 = icmp slt i64 %26, %28
  store i1 %29, i1* %4, align 1
  %30 = load i32, i32* @x.7, align 4
  %31 = load i32, i32* @y.8, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -1042151998, i32 -1992808452
  br label %.backedge

39:                                               ; preds = %17
  %.0..0..0.14 = load volatile i1, i1* %4, align 1
  %40 = select i1 %.0..0..0.14, i32 -2118416824, i32 1704520864
  br label %.backedge

41:                                               ; preds = %17
  %.0..0..0.13 = load volatile i64**, i64*** %5, align 8
  %42 = load i64*, i64** %.0..0..0.13, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %7, align 8
  store i64* %42, i64** %.0..0..0.2, align 8
  br label %.backedge

43:                                               ; preds = %17
  %44 = load i32, i32* @x.7, align 4
  %45 = load i32, i32* @y.8, align 4
  %46 = add i32 %44, -1
  %47 = mul i32 %46, %44
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %50, %49
  %52 = select i1 %51, i32 -1814293507, i32 -1732125467
  br label %.backedge

53:                                               ; preds = %17
  %.0..0..0.9 = load volatile i64**, i64*** %6, align 8
  %54 = load i64*, i64** %.0..0..0.9, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %7, align 8
  store i64* %54, i64** %.0..0..0.3, align 8
  %55 = load i32, i32* @x.7, align 4
  %56 = load i32, i32* @y.8, align 4
  %57 = add i32 %55, -1
  %58 = mul i32 %57, %55
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %61, %60
  %63 = select i1 %62, i32 -990481800, i32 -1732125467
  br label %.backedge

64:                                               ; preds = %17
  br label %.backedge

65:                                               ; preds = %17
  %66 = load i32, i32* @x.7, align 4
  %67 = load i32, i32* @y.8, align 4
  %68 = add i32 %66, -1
  %69 = mul i32 %68, %66
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %72, %71
  %74 = select i1 %73, i32 1029351301, i32 612660650
  br label %.backedge

75:                                               ; preds = %17
  %.0..0..0.4 = load volatile i64**, i64*** %7, align 8
  %76 = load i64*, i64** %.0..0..0.4, align 8
  store i64* %76, i64** %3, align 8
  %77 = load i32, i32* @x.7, align 4
  %78 = load i32, i32* @y.8, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 -191958072, i32 612660650
  br label %.backedge

86:                                               ; preds = %17
  %.0..0..0.15 = load volatile i64*, i64** %3, align 8
  ret i64* %.0..0..0.15

87:                                               ; preds = %17
  br label %.backedge

88:                                               ; preds = %17
  %.0..0..0.10 = load volatile i64**, i64*** %6, align 8
  %89 = load i64*, i64** %.0..0..0.10, align 8
  %.0..0..0.5 = load volatile i64**, i64*** %7, align 8
  store i64* %89, i64** %.0..0..0.5, align 8
  br label %.backedge

90:                                               ; preds = %17
  %.0..0..0.6 = load volatile i64**, i64*** %7, align 8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s162617229.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.9, align 4
  %4 = load i32, i32* @y.10, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1465976720, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1465976720, label %11
    i32 1630224393, label %14
    i32 1070068665, label %24
    i32 -1462799244, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1630224393, i32 -1462799244
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.9, align 4
  %16 = load i32, i32* @y.10, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 1070068665, i32 -1462799244
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 1630224393, %25 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
