; ModuleID = 'build_ollvm/programs/p02363/s330054350.ll'
source_filename = "Project_CodeNet_C++1400/p02363/s330054350.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@.str = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"INF \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s330054350.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@str = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@str.1 = private unnamed_addr constant [15 x i8] c"NEGATIVE CYCLE\00", align 1

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca [100 x [100 x i64]], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %4, i32* nonnull %5)
  br label %11

11:                                               ; preds = %.backedge, %0
  %.072 = phi i32 [ 0, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i8 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i32 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i32 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.0 = phi i32 [ -1878678156, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1878678156, label %12
    i32 156152921, label %16
    i32 561692718, label %17
    i32 453047581, label %21
    i32 -1807799840, label %25
    i32 31459454, label %35
    i32 -977717809, label %46
    i32 -1833151491, label %47
    i32 -436577009, label %50
    i32 -1494981819, label %60
    i32 -1896575101, label %71
    i32 -1248310517, label %72
    i32 -1312391847, label %73
    i32 -1212475411, label %83
    i32 -1278472979, label %95
    i32 -691624102, label %97
    i32 -587032118, label %107
    i32 -55123607, label %125
    i32 1103477429, label %126
    i32 1642987617, label %136
    i32 710641231, label %147
    i32 889035231, label %148
    i32 -1546828026, label %158
    i32 -1568604250, label %168
    i32 229057876, label %169
    i32 -1608610616, label %173
    i32 -458725699, label %174
    i32 1431438706, label %178
    i32 -1969551697, label %188
    i32 17015586, label %198
    i32 1161384644, label %199
    i32 -1817052956, label %209
    i32 -865842237, label %221
    i32 195475459, label %223
    i32 1322763406, label %229
    i32 -1968796289, label %235
    i32 -584341934, label %247
    i32 -1183719162, label %257
    i32 1356381768, label %267
    i32 1618934433, label %268
    i32 -192958631, label %270
    i32 -2094382996, label %271
    i32 -156456263, label %273
    i32 2063378953, label %283
    i32 893198972, label %293
    i32 1947831155, label %294
    i32 -1126409591, label %296
    i32 -255341438, label %306
    i32 -510426759, label %316
    i32 1610259528, label %317
    i32 570203154, label %321
    i32 -1679079540, label %327
    i32 677650173, label %337
    i32 -353368997, label %347
    i32 1732832593, label %348
    i32 -1147337806, label %349
    i32 -1535799127, label %359
    i32 -1613267661, label %369
    i32 -925531053, label %370
    i32 1175002840, label %373
    i32 -1238407633, label %374
    i32 1725419350, label %375
    i32 1863770625, label %379
    i32 -1118649653, label %380
    i32 -267145260, label %385
    i32 -1975748950, label %392
    i32 -1883720850, label %402
    i32 -1529074275, label %413
    i32 -5089352, label %414
    i32 -466187213, label %424
    i32 1128669191, label %439
    i32 1283684489, label %440
    i32 1370517952, label %441
    i32 -46723802, label %443
    i32 -1380592008, label %452
    i32 -601782038, label %453
    i32 -1857492468, label %461
    i32 790800116, label %462
    i32 -575900407, label %464
    i32 -473778707, label %465
    i32 353890145, label %466
    i32 712114664, label %467
    i32 -2021277513, label %468
    i32 -1995146145, label %469
    i32 1455482422, label %478
    i32 1178021790, label %479
    i32 1367673351, label %480
    i32 1066782706, label %481
    i32 -2070771361, label %482
    i32 -526199184, label %483
    i32 1547309035, label %484
    i32 -1448203510, label %485
    i32 -2030577572, label %486
    i32 1317387424, label %488
    i32 -1800767467, label %490
  ]

.backedge:                                        ; preds = %11, %490, %488, %486, %485, %484, %483, %482, %481, %480, %479, %478, %469, %468, %467, %466, %464, %462, %461, %453, %452, %443, %441, %440, %439, %424, %414, %413, %402, %392, %385, %380, %379, %375, %374, %373, %370, %369, %359, %349, %348, %347, %337, %327, %321, %317, %316, %306, %296, %294, %293, %283, %273, %271, %270, %268, %267, %257, %247, %235, %229, %223, %221, %209, %199, %198, %188, %178, %174, %173, %169, %168, %158, %148, %147, %136, %126, %125, %107, %97, %95, %83, %73, %72, %71, %60, %50, %47, %46, %35, %25, %21, %17, %16, %12
  %.072.be = phi i32 [ %.072, %11 ], [ %.072, %490 ], [ %.072, %488 ], [ %.072, %486 ], [ %.072, %485 ], [ %.072, %484 ], [ %.072, %483 ], [ %.072, %482 ], [ %.072, %481 ], [ %.072, %480 ], [ %.072, %479 ], [ %.072, %478 ], [ %.072, %469 ], [ %.072, %468 ], [ %.neg74, %467 ], [ %.072, %466 ], [ %.072, %464 ], [ %.072, %462 ], [ %.072, %461 ], [ %.072, %453 ], [ %.072, %452 ], [ %.072, %443 ], [ %.072, %441 ], [ %.072, %440 ], [ %.072, %439 ], [ %.072, %424 ], [ %.072, %414 ], [ %.072, %413 ], [ %.072, %402 ], [ %.072, %392 ], [ %.072, %385 ], [ %.072, %380 ], [ %.072, %379 ], [ %.072, %375 ], [ %.072, %374 ], [ %.072, %373 ], [ %.072, %370 ], [ %.072, %369 ], [ %.072, %359 ], [ %.072, %349 ], [ %.072, %348 ], [ %.072, %347 ], [ %.072, %337 ], [ %.072, %327 ], [ %.072, %321 ], [ %.072, %317 ], [ %.072, %316 ], [ %.072, %306 ], [ %.072, %296 ], [ %.072, %294 ], [ %.072, %293 ], [ %.072, %283 ], [ %.072, %273 ], [ %.072, %271 ], [ %.072, %270 ], [ %.072, %268 ], [ %.072, %267 ], [ %.072, %257 ], [ %.072, %247 ], [ %.072, %235 ], [ %.072, %229 ], [ %.072, %223 ], [ %.072, %221 ], [ %.072, %209 ], [ %.072, %199 ], [ %.072, %198 ], [ %.072, %188 ], [ %.072, %178 ], [ %.072, %174 ], [ %.072, %173 ], [ %.072, %169 ], [ %.072, %168 ], [ %.072, %158 ], [ %.072, %148 ], [ %.072, %147 ], [ %.072, %136 ], [ %.072, %126 ], [ %.072, %125 ], [ %.072, %107 ], [ %.072, %97 ], [ %.072, %95 ], [ %.072, %83 ], [ %.072, %73 ], [ %.072, %72 ], [ %.072, %71 ], [ %61, %60 ], [ %.072, %50 ], [ %.072, %47 ], [ %.072, %46 ], [ %.072, %35 ], [ %.072, %25 ], [ %.072, %21 ], [ %.072, %17 ], [ %.072, %16 ], [ %.072, %12 ]
  %.070.be = phi i32 [ %.070, %11 ], [ %.070, %490 ], [ %.070, %488 ], [ %.070, %486 ], [ %.070, %485 ], [ %.070, %484 ], [ %.070, %483 ], [ %.070, %482 ], [ %.070, %481 ], [ %.070, %480 ], [ %.070, %479 ], [ %.070, %478 ], [ %.070, %469 ], [ %.070, %468 ], [ %.070, %467 ], [ %.neg75, %466 ], [ %.070, %464 ], [ %.070, %462 ], [ %.070, %461 ], [ %.070, %453 ], [ %.070, %452 ], [ %.070, %443 ], [ %.070, %441 ], [ %.070, %440 ], [ %.070, %439 ], [ %.070, %424 ], [ %.070, %414 ], [ %.070, %413 ], [ %.070, %402 ], [ %.070, %392 ], [ %.070, %385 ], [ %.070, %380 ], [ %.070, %379 ], [ %.070, %375 ], [ %.070, %374 ], [ %.070, %373 ], [ %.070, %370 ], [ %.070, %369 ], [ %.070, %359 ], [ %.070, %349 ], [ %.070, %348 ], [ %.070, %347 ], [ %.070, %337 ], [ %.070, %327 ], [ %.070, %321 ], [ %.070, %317 ], [ %.070, %316 ], [ %.070, %306 ], [ %.070, %296 ], [ %.070, %294 ], [ %.070, %293 ], [ %.070, %283 ], [ %.070, %273 ], [ %.070, %271 ], [ %.070, %270 ], [ %.070, %268 ], [ %.070, %267 ], [ %.070, %257 ], [ %.070, %247 ], [ %.070, %235 ], [ %.070, %229 ], [ %.070, %223 ], [ %.070, %221 ], [ %.070, %209 ], [ %.070, %199 ], [ %.070, %198 ], [ %.070, %188 ], [ %.070, %178 ], [ %.070, %174 ], [ %.070, %173 ], [ %.070, %169 ], [ %.070, %168 ], [ %.070, %158 ], [ %.070, %148 ], [ %.070, %147 ], [ %.070, %136 ], [ %.070, %126 ], [ %.070, %125 ], [ %.070, %107 ], [ %.070, %97 ], [ %.070, %95 ], [ %.070, %83 ], [ %.070, %73 ], [ %.070, %72 ], [ %.070, %71 ], [ %.070, %60 ], [ %.070, %50 ], [ %.070, %47 ], [ %.070, %46 ], [ %36, %35 ], [ %.070, %25 ], [ %.070, %21 ], [ %.070, %17 ], [ 0, %16 ], [ %.070, %12 ]
  %.068.be = phi i32 [ %.068, %11 ], [ %.068, %490 ], [ %.068, %488 ], [ %.068, %486 ], [ %.068, %485 ], [ %.068, %484 ], [ %.068, %483 ], [ %.068, %482 ], [ %.068, %481 ], [ %.068, %480 ], [ %.068, %479 ], [ %.neg, %478 ], [ %.068, %469 ], [ %.068, %468 ], [ %.068, %467 ], [ %.068, %466 ], [ %.068, %464 ], [ %.068, %462 ], [ %.068, %461 ], [ %.068, %453 ], [ %.068, %452 ], [ %.068, %443 ], [ %.068, %441 ], [ %.068, %440 ], [ %.068, %439 ], [ %.068, %424 ], [ %.068, %414 ], [ %.068, %413 ], [ %.068, %402 ], [ %.068, %392 ], [ %.068, %385 ], [ %.068, %380 ], [ %.068, %379 ], [ %.068, %375 ], [ %.068, %374 ], [ %.068, %373 ], [ %.068, %370 ], [ %.068, %369 ], [ %.068, %359 ], [ %.068, %349 ], [ %.068, %348 ], [ %.068, %347 ], [ %.068, %337 ], [ %.068, %327 ], [ %.068, %321 ], [ %.068, %317 ], [ %.068, %316 ], [ %.068, %306 ], [ %.068, %296 ], [ %.068, %294 ], [ %.068, %293 ], [ %.068, %283 ], [ %.068, %273 ], [ %.068, %271 ], [ %.068, %270 ], [ %.068, %268 ], [ %.068, %267 ], [ %.068, %257 ], [ %.068, %247 ], [ %.068, %235 ], [ %.068, %229 ], [ %.068, %223 ], [ %.068, %221 ], [ %.068, %209 ], [ %.068, %199 ], [ %.068, %198 ], [ %.068, %188 ], [ %.068, %178 ], [ %.068, %174 ], [ %.068, %173 ], [ %.068, %169 ], [ %.068, %168 ], [ %.068, %158 ], [ %.068, %148 ], [ %.068, %147 ], [ %137, %136 ], [ %.068, %126 ], [ %.068, %125 ], [ %.068, %107 ], [ %.068, %97 ], [ %.068, %95 ], [ %.068, %83 ], [ %.068, %73 ], [ 0, %72 ], [ %.068, %71 ], [ %.068, %60 ], [ %.068, %50 ], [ %.068, %47 ], [ %.068, %46 ], [ %.068, %35 ], [ %.068, %25 ], [ %.068, %21 ], [ %.068, %17 ], [ %.068, %16 ], [ %.068, %12 ]
  %.066.be = phi i32 [ %.066, %11 ], [ %.066, %490 ], [ %.066, %488 ], [ %.066, %486 ], [ %.066, %485 ], [ %.066, %484 ], [ %.066, %483 ], [ %.066, %482 ], [ %.066, %481 ], [ %.066, %480 ], [ 0, %479 ], [ %.066, %478 ], [ %.066, %469 ], [ %.066, %468 ], [ %.066, %467 ], [ %.066, %466 ], [ %.066, %464 ], [ %.066, %462 ], [ %.066, %461 ], [ %.066, %453 ], [ %.066, %452 ], [ %.066, %443 ], [ %.066, %441 ], [ %.066, %440 ], [ %.066, %439 ], [ %.066, %424 ], [ %.066, %414 ], [ %.066, %413 ], [ %.066, %402 ], [ %.066, %392 ], [ %.066, %385 ], [ %.066, %380 ], [ %.066, %379 ], [ %.066, %375 ], [ %.066, %374 ], [ %.066, %373 ], [ %.066, %370 ], [ %.066, %369 ], [ %.066, %359 ], [ %.066, %349 ], [ %.066, %348 ], [ %.066, %347 ], [ %.066, %337 ], [ %.066, %327 ], [ %.066, %321 ], [ %.066, %317 ], [ %.066, %316 ], [ %.066, %306 ], [ %.066, %296 ], [ %295, %294 ], [ %.066, %293 ], [ %.066, %283 ], [ %.066, %273 ], [ %.066, %271 ], [ %.066, %270 ], [ %.066, %268 ], [ %.066, %267 ], [ %.066, %257 ], [ %.066, %247 ], [ %.066, %235 ], [ %.066, %229 ], [ %.066, %223 ], [ %.066, %221 ], [ %.066, %209 ], [ %.066, %199 ], [ %.066, %198 ], [ %.066, %188 ], [ %.066, %178 ], [ %.066, %174 ], [ %.066, %173 ], [ %.066, %169 ], [ %.066, %168 ], [ 0, %158 ], [ %.066, %148 ], [ %.066, %147 ], [ %.066, %136 ], [ %.066, %126 ], [ %.066, %125 ], [ %.066, %107 ], [ %.066, %97 ], [ %.066, %95 ], [ %.066, %83 ], [ %.066, %73 ], [ %.066, %72 ], [ %.066, %71 ], [ %.066, %60 ], [ %.066, %50 ], [ %.066, %47 ], [ %.066, %46 ], [ %.066, %35 ], [ %.066, %25 ], [ %.066, %21 ], [ %.066, %17 ], [ %.066, %16 ], [ %.066, %12 ]
  %.064.be = phi i32 [ %.064, %11 ], [ %.064, %490 ], [ %.064, %488 ], [ %.064, %486 ], [ %.064, %485 ], [ %.064, %484 ], [ %.064, %483 ], [ %.064, %482 ], [ %.064, %481 ], [ %.064, %480 ], [ %.064, %479 ], [ %.064, %478 ], [ %.064, %469 ], [ %.064, %468 ], [ %.064, %467 ], [ %.064, %466 ], [ %.064, %464 ], [ %.064, %462 ], [ %.064, %461 ], [ %.064, %453 ], [ %.064, %452 ], [ %.064, %443 ], [ %.064, %441 ], [ %.064, %440 ], [ %.064, %439 ], [ %.064, %424 ], [ %.064, %414 ], [ %.064, %413 ], [ %.064, %402 ], [ %.064, %392 ], [ %.064, %385 ], [ %.064, %380 ], [ %.064, %379 ], [ %.064, %375 ], [ %.064, %374 ], [ %.064, %373 ], [ %.064, %370 ], [ %.064, %369 ], [ %.064, %359 ], [ %.064, %349 ], [ %.064, %348 ], [ %.064, %347 ], [ %.064, %337 ], [ %.064, %327 ], [ %.064, %321 ], [ %.064, %317 ], [ %.064, %316 ], [ %.064, %306 ], [ %.064, %296 ], [ %.064, %294 ], [ %.064, %293 ], [ %.064, %283 ], [ %.064, %273 ], [ %272, %271 ], [ %.064, %270 ], [ %.064, %268 ], [ %.064, %267 ], [ %.064, %257 ], [ %.064, %247 ], [ %.064, %235 ], [ %.064, %229 ], [ %.064, %223 ], [ %.064, %221 ], [ %.064, %209 ], [ %.064, %199 ], [ %.064, %198 ], [ %.064, %188 ], [ %.064, %178 ], [ %.064, %174 ], [ 0, %173 ], [ %.064, %169 ], [ %.064, %168 ], [ %.064, %158 ], [ %.064, %148 ], [ %.064, %147 ], [ %.064, %136 ], [ %.064, %126 ], [ %.064, %125 ], [ %.064, %107 ], [ %.064, %97 ], [ %.064, %95 ], [ %.064, %83 ], [ %.064, %73 ], [ %.064, %72 ], [ %.064, %71 ], [ %.064, %60 ], [ %.064, %50 ], [ %.064, %47 ], [ %.064, %46 ], [ %.064, %35 ], [ %.064, %25 ], [ %.064, %21 ], [ %.064, %17 ], [ %.064, %16 ], [ %.064, %12 ]
  %.062.be = phi i32 [ %.062, %11 ], [ %.062, %490 ], [ %.062, %488 ], [ %.062, %486 ], [ %.062, %485 ], [ %.062, %484 ], [ %.062, %483 ], [ %.062, %482 ], [ %.062, %481 ], [ 0, %480 ], [ %.062, %479 ], [ %.062, %478 ], [ %.062, %469 ], [ %.062, %468 ], [ %.062, %467 ], [ %.062, %466 ], [ %.062, %464 ], [ %.062, %462 ], [ %.062, %461 ], [ %.062, %453 ], [ %.062, %452 ], [ %.062, %443 ], [ %.062, %441 ], [ %.062, %440 ], [ %.062, %439 ], [ %.062, %424 ], [ %.062, %414 ], [ %.062, %413 ], [ %.062, %402 ], [ %.062, %392 ], [ %.062, %385 ], [ %.062, %380 ], [ %.062, %379 ], [ %.062, %375 ], [ %.062, %374 ], [ %.062, %373 ], [ %.062, %370 ], [ %.062, %369 ], [ %.062, %359 ], [ %.062, %349 ], [ %.062, %348 ], [ %.062, %347 ], [ %.062, %337 ], [ %.062, %327 ], [ %.062, %321 ], [ %.062, %317 ], [ %.062, %316 ], [ %.062, %306 ], [ %.062, %296 ], [ %.062, %294 ], [ %.062, %293 ], [ %.062, %283 ], [ %.062, %273 ], [ %.062, %271 ], [ %.062, %270 ], [ %269, %268 ], [ %.062, %267 ], [ %.062, %257 ], [ %.062, %247 ], [ %.062, %235 ], [ %.062, %229 ], [ %.062, %223 ], [ %.062, %221 ], [ %.062, %209 ], [ %.062, %199 ], [ %.062, %198 ], [ 0, %188 ], [ %.062, %178 ], [ %.062, %174 ], [ %.062, %173 ], [ %.062, %169 ], [ %.062, %168 ], [ %.062, %158 ], [ %.062, %148 ], [ %.062, %147 ], [ %.062, %136 ], [ %.062, %126 ], [ %.062, %125 ], [ %.062, %107 ], [ %.062, %97 ], [ %.062, %95 ], [ %.062, %83 ], [ %.062, %73 ], [ %.062, %72 ], [ %.062, %71 ], [ %.062, %60 ], [ %.062, %50 ], [ %.062, %47 ], [ %.062, %46 ], [ %.062, %35 ], [ %.062, %25 ], [ %.062, %21 ], [ %.062, %17 ], [ %.062, %16 ], [ %.062, %12 ]
  %.060.be = phi i8 [ %.060, %11 ], [ %.060, %490 ], [ %.060, %488 ], [ %.060, %486 ], [ 1, %485 ], [ 0, %484 ], [ %.060, %483 ], [ %.060, %482 ], [ %.060, %481 ], [ %.060, %480 ], [ %.060, %479 ], [ %.060, %478 ], [ %.060, %469 ], [ %.060, %468 ], [ %.060, %467 ], [ %.060, %466 ], [ %.060, %464 ], [ %.060, %462 ], [ %.060, %461 ], [ %.060, %453 ], [ %.060, %452 ], [ %.060, %443 ], [ %.060, %441 ], [ %.060, %440 ], [ %.060, %439 ], [ %.060, %424 ], [ %.060, %414 ], [ %.060, %413 ], [ %.060, %402 ], [ %.060, %392 ], [ %.060, %385 ], [ %.060, %380 ], [ %.060, %379 ], [ %.060, %375 ], [ %.060, %374 ], [ %.060, %373 ], [ %.060, %370 ], [ %.060, %369 ], [ %.060, %359 ], [ %.060, %349 ], [ %.060, %348 ], [ %.060, %347 ], [ 1, %337 ], [ %.060, %327 ], [ %.060, %321 ], [ %.060, %317 ], [ %.060, %316 ], [ 0, %306 ], [ %.060, %296 ], [ %.060, %294 ], [ %.060, %293 ], [ %.060, %283 ], [ %.060, %273 ], [ %.060, %271 ], [ %.060, %270 ], [ %.060, %268 ], [ %.060, %267 ], [ %.060, %257 ], [ %.060, %247 ], [ %.060, %235 ], [ %.060, %229 ], [ %.060, %223 ], [ %.060, %221 ], [ %.060, %209 ], [ %.060, %199 ], [ %.060, %198 ], [ %.060, %188 ], [ %.060, %178 ], [ %.060, %174 ], [ %.060, %173 ], [ %.060, %169 ], [ %.060, %168 ], [ %.060, %158 ], [ %.060, %148 ], [ %.060, %147 ], [ %.060, %136 ], [ %.060, %126 ], [ %.060, %125 ], [ %.060, %107 ], [ %.060, %97 ], [ %.060, %95 ], [ %.060, %83 ], [ %.060, %73 ], [ %.060, %72 ], [ %.060, %71 ], [ %.060, %60 ], [ %.060, %50 ], [ %.060, %47 ], [ %.060, %46 ], [ %.060, %35 ], [ %.060, %25 ], [ %.060, %21 ], [ %.060, %17 ], [ %.060, %16 ], [ %.060, %12 ]
  %.058.be = phi i32 [ %.058, %11 ], [ %.058, %490 ], [ %.058, %488 ], [ %487, %486 ], [ %.058, %485 ], [ 0, %484 ], [ %.058, %483 ], [ %.058, %482 ], [ %.058, %481 ], [ %.058, %480 ], [ %.058, %479 ], [ %.058, %478 ], [ %.058, %469 ], [ %.058, %468 ], [ %.058, %467 ], [ %.058, %466 ], [ %.058, %464 ], [ %.058, %462 ], [ %.058, %461 ], [ %.058, %453 ], [ %.058, %452 ], [ %.058, %443 ], [ %.058, %441 ], [ %.058, %440 ], [ %.058, %439 ], [ %.058, %424 ], [ %.058, %414 ], [ %.058, %413 ], [ %.058, %402 ], [ %.058, %392 ], [ %.058, %385 ], [ %.058, %380 ], [ %.058, %379 ], [ %.058, %375 ], [ %.058, %374 ], [ %.058, %373 ], [ %.058, %370 ], [ %.058, %369 ], [ %.neg77, %359 ], [ %.058, %349 ], [ %.058, %348 ], [ %.058, %347 ], [ %.058, %337 ], [ %.058, %327 ], [ %.058, %321 ], [ %.058, %317 ], [ %.058, %316 ], [ 0, %306 ], [ %.058, %296 ], [ %.058, %294 ], [ %.058, %293 ], [ %.058, %283 ], [ %.058, %273 ], [ %.058, %271 ], [ %.058, %270 ], [ %.058, %268 ], [ %.058, %267 ], [ %.058, %257 ], [ %.058, %247 ], [ %.058, %235 ], [ %.058, %229 ], [ %.058, %223 ], [ %.058, %221 ], [ %.058, %209 ], [ %.058, %199 ], [ %.058, %198 ], [ %.058, %188 ], [ %.058, %178 ], [ %.058, %174 ], [ %.058, %173 ], [ %.058, %169 ], [ %.058, %168 ], [ %.058, %158 ], [ %.058, %148 ], [ %.058, %147 ], [ %.058, %136 ], [ %.058, %126 ], [ %.058, %125 ], [ %.058, %107 ], [ %.058, %97 ], [ %.058, %95 ], [ %.058, %83 ], [ %.058, %73 ], [ %.058, %72 ], [ %.058, %71 ], [ %.058, %60 ], [ %.058, %50 ], [ %.058, %47 ], [ %.058, %46 ], [ %.058, %35 ], [ %.058, %25 ], [ %.058, %21 ], [ %.058, %17 ], [ %.058, %16 ], [ %.058, %12 ]
  %.056.be = phi i32 [ %.056, %11 ], [ %.056, %490 ], [ %.056, %488 ], [ %.056, %486 ], [ %.056, %485 ], [ %.056, %484 ], [ %.056, %483 ], [ %.056, %482 ], [ %.056, %481 ], [ %.056, %480 ], [ %.056, %479 ], [ %.056, %478 ], [ %.056, %469 ], [ %.056, %468 ], [ %.056, %467 ], [ %.056, %466 ], [ %.056, %464 ], [ %463, %462 ], [ %.056, %461 ], [ %.056, %453 ], [ %.056, %452 ], [ %.056, %443 ], [ %.056, %441 ], [ %.056, %440 ], [ %.056, %439 ], [ %.056, %424 ], [ %.056, %414 ], [ %.056, %413 ], [ %.056, %402 ], [ %.056, %392 ], [ %.056, %385 ], [ %.056, %380 ], [ %.056, %379 ], [ %.056, %375 ], [ 0, %374 ], [ %.056, %373 ], [ %.056, %370 ], [ %.056, %369 ], [ %.056, %359 ], [ %.056, %349 ], [ %.056, %348 ], [ %.056, %347 ], [ %.056, %337 ], [ %.056, %327 ], [ %.056, %321 ], [ %.056, %317 ], [ %.056, %316 ], [ %.056, %306 ], [ %.056, %296 ], [ %.056, %294 ], [ %.056, %293 ], [ %.056, %283 ], [ %.056, %273 ], [ %.056, %271 ], [ %.056, %270 ], [ %.056, %268 ], [ %.056, %267 ], [ %.056, %257 ], [ %.056, %247 ], [ %.056, %235 ], [ %.056, %229 ], [ %.056, %223 ], [ %.056, %221 ], [ %.056, %209 ], [ %.056, %199 ], [ %.056, %198 ], [ %.056, %188 ], [ %.056, %178 ], [ %.056, %174 ], [ %.056, %173 ], [ %.056, %169 ], [ %.056, %168 ], [ %.056, %158 ], [ %.056, %148 ], [ %.056, %147 ], [ %.056, %136 ], [ %.056, %126 ], [ %.056, %125 ], [ %.056, %107 ], [ %.056, %97 ], [ %.056, %95 ], [ %.056, %83 ], [ %.056, %73 ], [ %.056, %72 ], [ %.056, %71 ], [ %.056, %60 ], [ %.056, %50 ], [ %.056, %47 ], [ %.056, %46 ], [ %.056, %35 ], [ %.056, %25 ], [ %.056, %21 ], [ %.056, %17 ], [ %.056, %16 ], [ %.056, %12 ]
  %.054.be = phi i32 [ %.054, %11 ], [ %.054, %490 ], [ %.054, %488 ], [ %.054, %486 ], [ %.054, %485 ], [ %.054, %484 ], [ %.054, %483 ], [ %.054, %482 ], [ %.054, %481 ], [ %.054, %480 ], [ %.054, %479 ], [ %.054, %478 ], [ %.054, %469 ], [ %.054, %468 ], [ %.054, %467 ], [ %.054, %466 ], [ %.054, %464 ], [ %.054, %462 ], [ %.054, %461 ], [ %.054, %453 ], [ %.054, %452 ], [ %.054, %443 ], [ %442, %441 ], [ %.054, %440 ], [ %.054, %439 ], [ %.054, %424 ], [ %.054, %414 ], [ %.054, %413 ], [ %.054, %402 ], [ %.054, %392 ], [ %.054, %385 ], [ %.054, %380 ], [ 0, %379 ], [ %.054, %375 ], [ %.054, %374 ], [ %.054, %373 ], [ %.054, %370 ], [ %.054, %369 ], [ %.054, %359 ], [ %.054, %349 ], [ %.054, %348 ], [ %.054, %347 ], [ %.054, %337 ], [ %.054, %327 ], [ %.054, %321 ], [ %.054, %317 ], [ %.054, %316 ], [ %.054, %306 ], [ %.054, %296 ], [ %.054, %294 ], [ %.054, %293 ], [ %.054, %283 ], [ %.054, %273 ], [ %.054, %271 ], [ %.054, %270 ], [ %.054, %268 ], [ %.054, %267 ], [ %.054, %257 ], [ %.054, %247 ], [ %.054, %235 ], [ %.054, %229 ], [ %.054, %223 ], [ %.054, %221 ], [ %.054, %209 ], [ %.054, %199 ], [ %.054, %198 ], [ %.054, %188 ], [ %.054, %178 ], [ %.054, %174 ], [ %.054, %173 ], [ %.054, %169 ], [ %.054, %168 ], [ %.054, %158 ], [ %.054, %148 ], [ %.054, %147 ], [ %.054, %136 ], [ %.054, %126 ], [ %.054, %125 ], [ %.054, %107 ], [ %.054, %97 ], [ %.054, %95 ], [ %.054, %83 ], [ %.054, %73 ], [ %.054, %72 ], [ %.054, %71 ], [ %.054, %60 ], [ %.054, %50 ], [ %.054, %47 ], [ %.054, %46 ], [ %.054, %35 ], [ %.054, %25 ], [ %.054, %21 ], [ %.054, %17 ], [ %.054, %16 ], [ %.054, %12 ]
  %.0.be = phi i32 [ %.0, %11 ], [ -466187213, %490 ], [ -1883720850, %488 ], [ -1535799127, %486 ], [ 677650173, %485 ], [ -255341438, %484 ], [ 2063378953, %483 ], [ -1183719162, %482 ], [ -1817052956, %481 ], [ -1969551697, %480 ], [ -1546828026, %479 ], [ 1642987617, %478 ], [ -587032118, %469 ], [ -1212475411, %468 ], [ -1494981819, %467 ], [ 31459454, %466 ], [ -473778707, %464 ], [ 1725419350, %462 ], [ 790800116, %461 ], [ -1857492468, %453 ], [ -1857492468, %452 ], [ %451, %443 ], [ -1118649653, %441 ], [ 1370517952, %440 ], [ 1283684489, %439 ], [ %438, %424 ], [ %423, %414 ], [ 1283684489, %413 ], [ %412, %402 ], [ %401, %392 ], [ %391, %385 ], [ %384, %380 ], [ -1118649653, %379 ], [ %378, %375 ], [ 1725419350, %374 ], [ -473778707, %373 ], [ %372, %370 ], [ 1610259528, %369 ], [ %368, %359 ], [ %358, %349 ], [ -1147337806, %348 ], [ 1732832593, %347 ], [ %346, %337 ], [ %336, %327 ], [ %326, %321 ], [ %320, %317 ], [ 1610259528, %316 ], [ %315, %306 ], [ %305, %296 ], [ 229057876, %294 ], [ 1947831155, %293 ], [ %292, %283 ], [ %282, %273 ], [ -458725699, %271 ], [ -2094382996, %270 ], [ 1161384644, %268 ], [ 1618934433, %267 ], [ %266, %257 ], [ %256, %247 ], [ -584341934, %235 ], [ %234, %229 ], [ %228, %223 ], [ %222, %221 ], [ %220, %209 ], [ %208, %199 ], [ 1161384644, %198 ], [ %197, %188 ], [ %187, %178 ], [ %177, %174 ], [ -458725699, %173 ], [ %172, %169 ], [ 229057876, %168 ], [ %167, %158 ], [ %157, %148 ], [ -1312391847, %147 ], [ %146, %136 ], [ %135, %126 ], [ 1103477429, %125 ], [ %124, %107 ], [ %106, %97 ], [ %96, %95 ], [ %94, %83 ], [ %82, %73 ], [ -1312391847, %72 ], [ -1878678156, %71 ], [ %70, %60 ], [ %59, %50 ], [ -436577009, %47 ], [ 561692718, %46 ], [ %45, %35 ], [ %34, %25 ], [ -1807799840, %21 ], [ %20, %17 ], [ 561692718, %16 ], [ %15, %12 ]
  br label %11

12:                                               ; preds = %11
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %.072, %13
  %15 = select i1 %14, i32 156152921, i32 -1248310517
  br label %.backedge

16:                                               ; preds = %11
  br label %.backedge

17:                                               ; preds = %11
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %.070, %18
  %20 = select i1 %19, i32 453047581, i32 -1833151491
  br label %.backedge

21:                                               ; preds = %11
  %22 = sext i32 %.072 to i64
  %23 = sext i32 %.070 to i64
  %24 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %22, i64 %23
  store i64 100000000000000, i64* %24, align 8
  br label %.backedge

25:                                               ; preds = %11
  %26 = load i32, i32* @x.7, align 4
  %27 = load i32, i32* @y.8, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 31459454, i32 353890145
  br label %.backedge

35:                                               ; preds = %11
  %36 = add i32 %.070, 1
  %37 = load i32, i32* @x.7, align 4
  %38 = load i32, i32* @y.8, align 4
  %39 = add i32 %37, -1
  %40 = mul i32 %39, %37
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %43, %42
  %45 = select i1 %44, i32 -977717809, i32 353890145
  br label %.backedge

46:                                               ; preds = %11
  br label %.backedge

47:                                               ; preds = %11
  %48 = sext i32 %.072 to i64
  %49 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %48, i64 %48
  store i64 0, i64* %49, align 8
  br label %.backedge

50:                                               ; preds = %11
  %51 = load i32, i32* @x.7, align 4
  %52 = load i32, i32* @y.8, align 4
  %53 = add i32 %51, -1
  %54 = mul i32 %53, %51
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %57, %56
  %59 = select i1 %58, i32 -1494981819, i32 712114664
  br label %.backedge

60:                                               ; preds = %11
  %61 = add i32 %.072, 1
  %62 = load i32, i32* @x.7, align 4
  %63 = load i32, i32* @y.8, align 4
  %64 = add i32 %62, -1
  %65 = mul i32 %64, %62
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %68, %67
  %70 = select i1 %69, i32 -1896575101, i32 712114664
  br label %.backedge

71:                                               ; preds = %11
  br label %.backedge

72:                                               ; preds = %11
  br label %.backedge

73:                                               ; preds = %11
  %74 = load i32, i32* @x.7, align 4
  %75 = load i32, i32* @y.8, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 -1212475411, i32 -2021277513
  br label %.backedge

83:                                               ; preds = %11
  %84 = load i32, i32* %5, align 4
  %85 = icmp slt i32 %.068, %84
  store i1 %85, i1* %2, align 1
  %86 = load i32, i32* @x.7, align 4
  %87 = load i32, i32* @y.8, align 4
  %88 = add i32 %86, -1
  %89 = mul i32 %88, %86
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %92, %91
  %94 = select i1 %93, i32 -1278472979, i32 -2021277513
  br label %.backedge

95:                                               ; preds = %11
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %96 = select i1 %.0..0..0., i32 -691624102, i32 889035231
  br label %.backedge

97:                                               ; preds = %11
  %98 = load i32, i32* @x.7, align 4
  %99 = load i32, i32* @y.8, align 4
  %100 = add i32 %98, -1
  %101 = mul i32 %100, %98
  %102 = and i32 %101, 1
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %104, %103
  %106 = select i1 %105, i32 -587032118, i32 -1995146145
  br label %.backedge

107:                                              ; preds = %11
  %108 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7, i32* nonnull %8)
  %109 = load i32, i32* %8, align 4
  %110 = sext i32 %109 to i64
  %111 = load i32, i32* %6, align 4
  %112 = sext i32 %111 to i64
  %113 = load i32, i32* %7, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %112, i64 %114
  store i64 %110, i64* %115, align 8
  %116 = load i32, i32* @x.7, align 4
  %117 = load i32, i32* @y.8, align 4
  %118 = add i32 %116, -1
  %119 = mul i32 %118, %116
  %120 = and i32 %119, 1
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %122, %121
  %124 = select i1 %123, i32 -55123607, i32 -1995146145
  br label %.backedge

125:                                              ; preds = %11
  br label %.backedge

126:                                              ; preds = %11
  %127 = load i32, i32* @x.7, align 4
  %128 = load i32, i32* @y.8, align 4
  %129 = add i32 %127, -1
  %130 = mul i32 %129, %127
  %131 = and i32 %130, 1
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %133, %132
  %135 = select i1 %134, i32 1642987617, i32 1455482422
  br label %.backedge

136:                                              ; preds = %11
  %137 = add i32 %.068, 1
  %138 = load i32, i32* @x.7, align 4
  %139 = load i32, i32* @y.8, align 4
  %140 = add i32 %138, -1
  %141 = mul i32 %140, %138
  %142 = and i32 %141, 1
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %144, %143
  %146 = select i1 %145, i32 710641231, i32 1455482422
  br label %.backedge

147:                                              ; preds = %11
  br label %.backedge

148:                                              ; preds = %11
  %149 = load i32, i32* @x.7, align 4
  %150 = load i32, i32* @y.8, align 4
  %151 = add i32 %149, -1
  %152 = mul i32 %151, %149
  %153 = and i32 %152, 1
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %155, %154
  %157 = select i1 %156, i32 -1546828026, i32 1178021790
  br label %.backedge

158:                                              ; preds = %11
  %159 = load i32, i32* @x.7, align 4
  %160 = load i32, i32* @y.8, align 4
  %161 = add i32 %159, -1
  %162 = mul i32 %161, %159
  %163 = and i32 %162, 1
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %165, %164
  %167 = select i1 %166, i32 -1568604250, i32 1178021790
  br label %.backedge

168:                                              ; preds = %11
  br label %.backedge

169:                                              ; preds = %11
  %170 = load i32, i32* %4, align 4
  %171 = icmp slt i32 %.066, %170
  %172 = select i1 %171, i32 -1608610616, i32 -1126409591
  br label %.backedge

173:                                              ; preds = %11
  br label %.backedge

174:                                              ; preds = %11
  %175 = load i32, i32* %4, align 4
  %176 = icmp slt i32 %.064, %175
  %177 = select i1 %176, i32 1431438706, i32 -156456263
  br label %.backedge

178:                                              ; preds = %11
  %179 = load i32, i32* @x.7, align 4
  %180 = load i32, i32* @y.8, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 -1969551697, i32 1367673351
  br label %.backedge

188:                                              ; preds = %11
  %189 = load i32, i32* @x.7, align 4
  %190 = load i32, i32* @y.8, align 4
  %191 = add i32 %189, -1
  %192 = mul i32 %191, %189
  %193 = and i32 %192, 1
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %195, %194
  %197 = select i1 %196, i32 17015586, i32 1367673351
  br label %.backedge

198:                                              ; preds = %11
  br label %.backedge

199:                                              ; preds = %11
  %200 = load i32, i32* @x.7, align 4
  %201 = load i32, i32* @y.8, align 4
  %202 = add i32 %200, -1
  %203 = mul i32 %202, %200
  %204 = and i32 %203, 1
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %206, %205
  %208 = select i1 %207, i32 -1817052956, i32 1066782706
  br label %.backedge

209:                                              ; preds = %11
  %210 = load i32, i32* %4, align 4
  %211 = icmp slt i32 %.062, %210
  store i1 %211, i1* %1, align 1
  %212 = load i32, i32* @x.7, align 4
  %213 = load i32, i32* @y.8, align 4
  %214 = add i32 %212, -1
  %215 = mul i32 %214, %212
  %216 = and i32 %215, 1
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %218, %217
  %220 = select i1 %219, i32 -865842237, i32 1066782706
  br label %.backedge

221:                                              ; preds = %11
  %.0..0..0.53 = load volatile i1, i1* %1, align 1
  %222 = select i1 %.0..0..0.53, i32 195475459, i32 -192958631
  br label %.backedge

223:                                              ; preds = %11
  %224 = sext i32 %.064 to i64
  %225 = sext i32 %.066 to i64
  %226 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %224, i64 %225
  %227 = load i64, i64* %226, align 8
  %.not79 = icmp eq i64 %227, 100000000000000
  %228 = select i1 %.not79, i32 -584341934, i32 1322763406
  br label %.backedge

229:                                              ; preds = %11
  %230 = sext i32 %.066 to i64
  %231 = sext i32 %.062 to i64
  %232 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %230, i64 %231
  %233 = load i64, i64* %232, align 8
  %.not78 = icmp eq i64 %233, 100000000000000
  %234 = select i1 %.not78, i32 -584341934, i32 -1968796289
  br label %.backedge

235:                                              ; preds = %11
  %236 = sext i32 %.064 to i64
  %237 = sext i32 %.062 to i64
  %238 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %236, i64 %237
  %239 = sext i32 %.066 to i64
  %240 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %236, i64 %239
  %241 = load i64, i64* %240, align 8
  %242 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %239, i64 %237
  %243 = load i64, i64* %242, align 8
  %244 = add i64 %243, %241
  store i64 %244, i64* %9, align 8
  %245 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %238, i64* nonnull dereferenceable(8) %9)
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %238, align 8
  br label %.backedge

247:                                              ; preds = %11
  %248 = load i32, i32* @x.7, align 4
  %249 = load i32, i32* @y.8, align 4
  %250 = add i32 %248, -1
  %251 = mul i32 %250, %248
  %252 = and i32 %251, 1
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %254, %253
  %256 = select i1 %255, i32 -1183719162, i32 -2070771361
  br label %.backedge

257:                                              ; preds = %11
  %258 = load i32, i32* @x.7, align 4
  %259 = load i32, i32* @y.8, align 4
  %260 = add i32 %258, -1
  %261 = mul i32 %260, %258
  %262 = and i32 %261, 1
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %264, %263
  %266 = select i1 %265, i32 1356381768, i32 -2070771361
  br label %.backedge

267:                                              ; preds = %11
  br label %.backedge

268:                                              ; preds = %11
  %269 = add i32 %.062, 1
  br label %.backedge

270:                                              ; preds = %11
  br label %.backedge

271:                                              ; preds = %11
  %272 = add i32 %.064, 1
  br label %.backedge

273:                                              ; preds = %11
  %274 = load i32, i32* @x.7, align 4
  %275 = load i32, i32* @y.8, align 4
  %276 = add i32 %274, -1
  %277 = mul i32 %276, %274
  %278 = and i32 %277, 1
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %280, %279
  %282 = select i1 %281, i32 2063378953, i32 -526199184
  br label %.backedge

283:                                              ; preds = %11
  %284 = load i32, i32* @x.7, align 4
  %285 = load i32, i32* @y.8, align 4
  %286 = add i32 %284, -1
  %287 = mul i32 %286, %284
  %288 = and i32 %287, 1
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %290, %289
  %292 = select i1 %291, i32 893198972, i32 -526199184
  br label %.backedge

293:                                              ; preds = %11
  br label %.backedge

294:                                              ; preds = %11
  %295 = add i32 %.066, 1
  br label %.backedge

296:                                              ; preds = %11
  %297 = load i32, i32* @x.7, align 4
  %298 = load i32, i32* @y.8, align 4
  %299 = add i32 %297, -1
  %300 = mul i32 %299, %297
  %301 = and i32 %300, 1
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %303, %302
  %305 = select i1 %304, i32 -255341438, i32 1547309035
  br label %.backedge

306:                                              ; preds = %11
  %307 = load i32, i32* @x.7, align 4
  %308 = load i32, i32* @y.8, align 4
  %309 = add i32 %307, -1
  %310 = mul i32 %309, %307
  %311 = and i32 %310, 1
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %313, %312
  %315 = select i1 %314, i32 -510426759, i32 1547309035
  br label %.backedge

316:                                              ; preds = %11
  br label %.backedge

317:                                              ; preds = %11
  %318 = load i32, i32* %4, align 4
  %319 = icmp slt i32 %.058, %318
  %320 = select i1 %319, i32 570203154, i32 -925531053
  br label %.backedge

321:                                              ; preds = %11
  %322 = sext i32 %.058 to i64
  %323 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %322, i64 %322
  %324 = load i64, i64* %323, align 8
  %325 = icmp slt i64 %324, 0
  %326 = select i1 %325, i32 -1679079540, i32 1732832593
  br label %.backedge

327:                                              ; preds = %11
  %328 = load i32, i32* @x.7, align 4
  %329 = load i32, i32* @y.8, align 4
  %330 = add i32 %328, -1
  %331 = mul i32 %330, %328
  %332 = and i32 %331, 1
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %334, %333
  %336 = select i1 %335, i32 677650173, i32 -1448203510
  br label %.backedge

337:                                              ; preds = %11
  %338 = load i32, i32* @x.7, align 4
  %339 = load i32, i32* @y.8, align 4
  %340 = add i32 %338, -1
  %341 = mul i32 %340, %338
  %342 = and i32 %341, 1
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %344, %343
  %346 = select i1 %345, i32 -353368997, i32 -1448203510
  br label %.backedge

347:                                              ; preds = %11
  br label %.backedge

348:                                              ; preds = %11
  br label %.backedge

349:                                              ; preds = %11
  %350 = load i32, i32* @x.7, align 4
  %351 = load i32, i32* @y.8, align 4
  %352 = add i32 %350, -1
  %353 = mul i32 %352, %350
  %354 = and i32 %353, 1
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %356, %355
  %358 = select i1 %357, i32 -1535799127, i32 -2030577572
  br label %.backedge

359:                                              ; preds = %11
  %.neg77 = add i32 %.058, 1
  %360 = load i32, i32* @x.7, align 4
  %361 = load i32, i32* @y.8, align 4
  %362 = add i32 %360, -1
  %363 = mul i32 %362, %360
  %364 = and i32 %363, 1
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %366, %365
  %368 = select i1 %367, i32 -1613267661, i32 -2030577572
  br label %.backedge

369:                                              ; preds = %11
  br label %.backedge

370:                                              ; preds = %11
  %371 = and i8 %.060, 1
  %.not = icmp eq i8 %371, 0
  %372 = select i1 %.not, i32 -1238407633, i32 1175002840
  br label %.backedge

373:                                              ; preds = %11
  %puts76 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([15 x i8], [15 x i8]* @str.1, i64 0, i64 0))
  br label %.backedge

374:                                              ; preds = %11
  br label %.backedge

375:                                              ; preds = %11
  %376 = load i32, i32* %4, align 4
  %377 = icmp slt i32 %.056, %376
  %378 = select i1 %377, i32 1863770625, i32 -575900407
  br label %.backedge

379:                                              ; preds = %11
  br label %.backedge

380:                                              ; preds = %11
  %381 = load i32, i32* %4, align 4
  %382 = add i32 %381, -1
  %383 = icmp slt i32 %.054, %382
  %384 = select i1 %383, i32 -267145260, i32 -46723802
  br label %.backedge

385:                                              ; preds = %11
  %386 = sext i32 %.056 to i64
  %387 = sext i32 %.054 to i64
  %388 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %386, i64 %387
  %389 = load i64, i64* %388, align 8
  %390 = icmp eq i64 %389, 100000000000000
  %391 = select i1 %390, i32 -1975748950, i32 -5089352
  br label %.backedge

392:                                              ; preds = %11
  %393 = load i32, i32* @x.7, align 4
  %394 = load i32, i32* @y.8, align 4
  %395 = add i32 %393, -1
  %396 = mul i32 %395, %393
  %397 = and i32 %396, 1
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %399, %398
  %401 = select i1 %400, i32 -1883720850, i32 1317387424
  br label %.backedge

402:                                              ; preds = %11
  %403 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %404 = load i32, i32* @x.7, align 4
  %405 = load i32, i32* @y.8, align 4
  %406 = add i32 %404, -1
  %407 = mul i32 %406, %404
  %408 = and i32 %407, 1
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %410, %409
  %412 = select i1 %411, i32 -1529074275, i32 1317387424
  br label %.backedge

413:                                              ; preds = %11
  br label %.backedge

414:                                              ; preds = %11
  %415 = load i32, i32* @x.7, align 4
  %416 = load i32, i32* @y.8, align 4
  %417 = add i32 %415, -1
  %418 = mul i32 %417, %415
  %419 = and i32 %418, 1
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %421, %420
  %423 = select i1 %422, i32 -466187213, i32 -1800767467
  br label %.backedge

424:                                              ; preds = %11
  %425 = sext i32 %.056 to i64
  %426 = sext i32 %.054 to i64
  %427 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %425, i64 %426
  %428 = load i64, i64* %427, align 8
  %429 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 %428)
  %430 = load i32, i32* @x.7, align 4
  %431 = load i32, i32* @y.8, align 4
  %432 = add i32 %430, -1
  %433 = mul i32 %432, %430
  %434 = and i32 %433, 1
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %436, %435
  %438 = select i1 %437, i32 1128669191, i32 -1800767467
  br label %.backedge

439:                                              ; preds = %11
  br label %.backedge

440:                                              ; preds = %11
  br label %.backedge

441:                                              ; preds = %11
  %442 = add i32 %.054, 1
  br label %.backedge

443:                                              ; preds = %11
  %444 = sext i32 %.056 to i64
  %445 = load i32, i32* %4, align 4
  %446 = add i32 %445, -1
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %444, i64 %447
  %449 = load i64, i64* %448, align 8
  %450 = icmp eq i64 %449, 100000000000000
  %451 = select i1 %450, i32 -1380592008, i32 -601782038
  br label %.backedge

452:                                              ; preds = %11
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @str, i64 0, i64 0))
  br label %.backedge

453:                                              ; preds = %11
  %454 = sext i32 %.056 to i64
  %455 = load i32, i32* %4, align 4
  %456 = add i32 %455, -1
  %457 = sext i32 %456 to i64
  %458 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %454, i64 %457
  %459 = load i64, i64* %458, align 8
  %460 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0), i64 %459)
  br label %.backedge

461:                                              ; preds = %11
  br label %.backedge

462:                                              ; preds = %11
  %463 = add i32 %.056, 1
  br label %.backedge

464:                                              ; preds = %11
  br label %.backedge

465:                                              ; preds = %11
  ret i32 0

466:                                              ; preds = %11
  %.neg75 = add i32 %.070, 1
  br label %.backedge

467:                                              ; preds = %11
  %.neg74 = add i32 %.072, 1
  br label %.backedge

468:                                              ; preds = %11
  br label %.backedge

469:                                              ; preds = %11
  %470 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7, i32* nonnull %8)
  %471 = load i32, i32* %8, align 4
  %472 = sext i32 %471 to i64
  %473 = load i32, i32* %6, align 4
  %474 = sext i32 %473 to i64
  %475 = load i32, i32* %7, align 4
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %474, i64 %476
  store i64 %472, i64* %477, align 8
  br label %.backedge

478:                                              ; preds = %11
  %.neg = add i32 %.068, 1
  br label %.backedge

479:                                              ; preds = %11
  br label %.backedge

480:                                              ; preds = %11
  br label %.backedge

481:                                              ; preds = %11
  br label %.backedge

482:                                              ; preds = %11
  br label %.backedge

483:                                              ; preds = %11
  br label %.backedge

484:                                              ; preds = %11
  br label %.backedge

485:                                              ; preds = %11
  br label %.backedge

486:                                              ; preds = %11
  %487 = add i32 %.058, 1
  br label %.backedge

488:                                              ; preds = %11
  %489 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  br label %.backedge

490:                                              ; preds = %11
  %491 = sext i32 %.056 to i64
  %492 = sext i32 %.054 to i64
  %493 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* %3, i64 0, i64 %491, i64 %492
  %494 = load i64, i64* %493, align 8
  %495 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i64 %494)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = load i64, i64* %1, align 8
  store i64 %6, i64* %5, align 8
  %7 = load i64, i64* %0, align 8
  store i64 %7, i64* %4, align 8
  %8 = load i32, i32* @x.9, align 4
  %9 = load i32, i32* @y.10, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 827261579, i32 -198906430
  %17 = select i1 %15, i32 1886592080, i32 -198906430
  br label %.outer

.outer:                                           ; preds = %18, %2
  %.09.ph = phi i64* [ undef, %2 ], [ %.09.ph14, %18 ]
  %.0.ph = phi i32 [ 80542070, %2 ], [ %16, %18 ]
  br label %.outer13

.outer13:                                         ; preds = %.outer13.backedge, %.outer
  %.09.ph14 = phi i64* [ %.09.ph, %.outer ], [ %.09.ph14.be, %.outer13.backedge ]
  %.0.ph15 = phi i32 [ %.0.ph, %.outer ], [ 1983842568, %.outer13.backedge ]
  br label %.outer16

.outer16:                                         ; preds = %.outer16.backedge, %.outer13
  %.0.ph17 = phi i32 [ %.0.ph15, %.outer13 ], [ %.0.ph17.be, %.outer16.backedge ]
  br label %18

18:                                               ; preds = %.outer16, %18
  switch i32 %.0.ph17, label %18 [
    i32 80542070, label %19
    i32 -230830203, label %.outer13.backedge
    i32 761134901, label %22
    i32 1983842568, label %.outer16.backedge
    i32 1886592080, label %.outer
    i32 827261579, label %23
    i32 -198906430, label %24
  ]

19:                                               ; preds = %18
  %.0..0..0.6 = load volatile i64, i64* %5, align 8
  %.0..0..0.7 = load volatile i64, i64* %4, align 8
  %20 = icmp slt i64 %.0..0..0.6, %.0..0..0.7
  %21 = select i1 %20, i32 -230830203, i32 761134901
  br label %.outer16.backedge

22:                                               ; preds = %18
  br label %.outer13.backedge

.outer13.backedge:                                ; preds = %18, %22
  %.09.ph14.be = phi i64* [ %0, %22 ], [ %1, %18 ]
  br label %.outer13

23:                                               ; preds = %18
  store i64* %.09.ph, i64** %3, align 8
  %.0..0..0.8 = load volatile i64*, i64** %3, align 8
  ret i64* %.0..0..0.8

24:                                               ; preds = %18
  br label %.outer16.backedge

.outer16.backedge:                                ; preds = %18, %24, %19
  %.0.ph17.be = phi i32 [ %21, %19 ], [ 1886592080, %24 ], [ %17, %18 ]
  br label %.outer16
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s330054350.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
