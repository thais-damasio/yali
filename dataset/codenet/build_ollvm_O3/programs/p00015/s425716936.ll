; ModuleID = 'build_ollvm/programs/p00015/s425716936.ll'
source_filename = "Project_CodeNet_C++1400/p00015/s425716936.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt4fillIPxiEvT_S1_RKT0_ = comdat any

$_ZSt8__fill_aIPxiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_ = comdat any

$_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_ = comdat any

$_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_Z1aB5cxx11 = global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@_Z1bB5cxx11 = global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@s = local_unnamed_addr global i64 0, align 8
@cop = local_unnamed_addr global i64 0, align 8
@copp = local_unnamed_addr global i64 0, align 8
@last = local_unnamed_addr global i64 0, align 8
@n = global i64 0, align 8
@latte = global [1000 x i64] zeroinitializer, align 16
@cafe = global [1000 x i64] zeroinitializer, align 16
@all = global [1000 x i64] zeroinitializer, align 16
@ans = global [1000 x i64] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [9 x i8] c"overflow\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s425716936.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0
@x.15 = common local_unnamed_addr global i32 0
@y.16 = common local_unnamed_addr global i32 0
@x.17 = common local_unnamed_addr global i32 0
@y.18 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline nounwind uwtable
define internal fastcc void @__cxx_global_var_init.1() unnamed_addr #4 section ".text.startup" {
  tail call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11) #6
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_Z1aB5cxx11 to i8*), i8* nonnull @__dso_handle) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #2

; Function Attrs: noinline nounwind uwtable
define internal fastcc void @__cxx_global_var_init.2() unnamed_addr #4 section ".text.startup" {
  tail call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11) #6
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_Z1bB5cxx11 to i8*), i8* nonnull @__dso_handle) #6
  ret void
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) @n)
  br label %16

16:                                               ; preds = %.backedge, %0
  %.082 = phi i32 [ 0, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ 0, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.0 = phi i32 [ 293983533, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 293983533, label %17
    i32 -1488877189, label %22
    i32 559932234, label %32
    i32 439976429, label %47
    i32 1763780772, label %49
    i32 1094180884, label %54
    i32 944974145, label %59
    i32 -2093718419, label %69
    i32 -292275807, label %81
    i32 1410717986, label %83
    i32 589366420, label %86
    i32 1212158189, label %87
    i32 1400451944, label %92
    i32 -1444436183, label %99
    i32 -1689523240, label %102
    i32 -1072024300, label %108
    i32 -353827239, label %118
    i32 834788071, label %130
    i32 1459841140, label %131
    i32 -1937571374, label %137
    i32 -60271710, label %140
    i32 1043956385, label %150
    i32 589110772, label %164
    i32 1223843679, label %166
    i32 -762352327, label %176
    i32 1876937865, label %188
    i32 -1939531196, label %189
    i32 -707852475, label %195
    i32 1250058986, label %198
    i32 1911910115, label %204
    i32 932564272, label %207
    i32 -1355253710, label %217
    i32 -1736129268, label %231
    i32 1254074618, label %233
    i32 790808961, label %236
    i32 -1423440805, label %242
    i32 -2024403302, label %245
    i32 -79705921, label %251
    i32 164708663, label %254
    i32 -1793450192, label %260
    i32 -1269927577, label %263
    i32 -186997721, label %264
    i32 1457050634, label %274
    i32 -987944960, label %284
    i32 -464133267, label %285
    i32 850830069, label %286
    i32 -2022402408, label %296
    i32 -1982642275, label %309
    i32 1351479069, label %311
    i32 16318248, label %321
    i32 69533342, label %337
    i32 1550351794, label %339
    i32 -1827051126, label %349
    i32 520794421, label %361
    i32 -1098485474, label %362
    i32 145428705, label %368
    i32 -1708494573, label %371
    i32 -152950374, label %377
    i32 -720542542, label %380
    i32 340508808, label %386
    i32 -1850653971, label %396
    i32 1399710352, label %408
    i32 389237147, label %409
    i32 -344128150, label %415
    i32 984506112, label %425
    i32 1215292400, label %437
    i32 -1954803881, label %438
    i32 1339743962, label %444
    i32 -721107125, label %447
    i32 787580514, label %453
    i32 1167031867, label %456
    i32 -184062384, label %466
    i32 984255188, label %480
    i32 937446195, label %482
    i32 -1500516406, label %485
    i32 -1719739391, label %491
    i32 -516814044, label %494
    i32 -1605803190, label %500
    i32 -2010353958, label %503
    i32 315723192, label %513
    i32 2058419990, label %523
    i32 589736912, label %524
    i32 2099921625, label %534
    i32 208131330, label %544
    i32 -375096581, label %545
    i32 -803238495, label %546
    i32 1549709905, label %556
    i32 1816315997, label %569
    i32 1235655387, label %571
    i32 -244902432, label %583
    i32 -1780690315, label %593
    i32 1985968271, label %612
    i32 716934088, label %613
    i32 -1825211206, label %614
    i32 -1668771839, label %616
    i32 174194091, label %620
    i32 811427277, label %623
    i32 301199699, label %633
    i32 -1445096148, label %647
    i32 1430626361, label %649
    i32 96749916, label %655
    i32 -102368544, label %665
    i32 -1405877757, label %679
    i32 -993740093, label %680
    i32 -1145433240, label %690
    i32 -1384439728, label %701
    i32 1194285995, label %702
    i32 1956309243, label %712
    i32 1858589736, label %723
    i32 252991067, label %725
    i32 -36673380, label %735
    i32 29600329, label %746
    i32 -2066071527, label %747
    i32 253354214, label %751
    i32 -832343317, label %754
    i32 1771408339, label %759
    i32 -1790306462, label %769
    i32 -2032737099, label %783
    i32 1995194001, label %784
    i32 -739865693, label %791
    i32 -585723041, label %793
    i32 1646537892, label %794
    i32 1246634860, label %796
    i32 -278650774, label %798
    i32 327077312, label %799
    i32 1169418094, label %804
    i32 -1648028263, label %805
    i32 -1307204847, label %808
    i32 -1347222220, label %811
    i32 -943328478, label %814
    i32 -1774137217, label %817
    i32 -1272295261, label %819
    i32 -46484053, label %821
    i32 -439305103, label %826
    i32 -1351595009, label %829
    i32 -2118262955, label %832
    i32 1668397338, label %835
    i32 69362722, label %838
    i32 -368749379, label %839
    i32 -990298363, label %840
    i32 1011636628, label %841
    i32 65720637, label %851
    i32 1036801977, label %852
    i32 1048995662, label %858
    i32 -1990727713, label %859
    i32 -937360241, label %860
    i32 -1735737253, label %862
  ]

.backedge:                                        ; preds = %16, %862, %860, %859, %858, %852, %851, %841, %840, %839, %838, %835, %832, %829, %826, %821, %819, %817, %814, %811, %808, %805, %804, %799, %796, %794, %793, %791, %784, %783, %769, %759, %754, %751, %747, %746, %735, %725, %723, %712, %702, %701, %690, %680, %679, %665, %655, %649, %647, %633, %623, %620, %616, %614, %613, %612, %593, %583, %571, %569, %556, %546, %545, %544, %534, %524, %523, %513, %503, %500, %494, %491, %485, %482, %480, %466, %456, %453, %447, %444, %438, %437, %425, %415, %409, %408, %396, %386, %380, %377, %371, %368, %362, %361, %349, %339, %337, %321, %311, %309, %296, %286, %285, %284, %274, %264, %263, %260, %254, %251, %245, %242, %236, %233, %231, %217, %207, %204, %198, %195, %189, %188, %176, %166, %164, %150, %140, %137, %131, %130, %118, %108, %102, %99, %92, %87, %86, %83, %81, %69, %59, %54, %49, %47, %32, %22, %17
  %.082.be = phi i32 [ %.082, %16 ], [ %.082, %862 ], [ %.082, %860 ], [ %.082, %859 ], [ %.082, %858 ], [ %857, %852 ], [ %.082, %851 ], [ %.082, %841 ], [ %.082, %840 ], [ %.082, %839 ], [ %.082, %838 ], [ %.082, %835 ], [ %.082, %832 ], [ %.082, %829 ], [ %.082, %826 ], [ %.082, %821 ], [ %.082, %819 ], [ %.082, %817 ], [ %.082, %814 ], [ %.082, %811 ], [ %.082, %808 ], [ %.082, %805 ], [ %.082, %804 ], [ 0, %799 ], [ %.082, %796 ], [ %.082, %794 ], [ %.082, %793 ], [ %.082, %791 ], [ %.082, %784 ], [ %.082, %783 ], [ %.082, %769 ], [ %.082, %759 ], [ %.082, %754 ], [ %.082, %751 ], [ %.082, %747 ], [ %.082, %746 ], [ %.082, %735 ], [ %.082, %725 ], [ %.082, %723 ], [ %.082, %712 ], [ %.082, %702 ], [ %.082, %701 ], [ %.082, %690 ], [ %.082, %680 ], [ %.082, %679 ], [ %.neg85, %665 ], [ %.082, %655 ], [ %654, %649 ], [ %.082, %647 ], [ %.082, %633 ], [ %.082, %623 ], [ %.082, %620 ], [ %.082, %616 ], [ %.082, %614 ], [ %.082, %613 ], [ %.082, %612 ], [ %.082, %593 ], [ %.082, %583 ], [ %.082, %571 ], [ %.082, %569 ], [ %.082, %556 ], [ %.082, %546 ], [ %.082, %545 ], [ %.082, %544 ], [ %.082, %534 ], [ %.082, %524 ], [ %.082, %523 ], [ %.082, %513 ], [ %.082, %503 ], [ %.082, %500 ], [ %.082, %494 ], [ %.082, %491 ], [ %.082, %485 ], [ %.082, %482 ], [ %.082, %480 ], [ %.082, %466 ], [ %.082, %456 ], [ %.082, %453 ], [ %.082, %447 ], [ %.082, %444 ], [ %.082, %438 ], [ %.082, %437 ], [ %.082, %425 ], [ %.082, %415 ], [ %.082, %409 ], [ %.082, %408 ], [ %.082, %396 ], [ %.082, %386 ], [ %.082, %380 ], [ %.082, %377 ], [ %.082, %371 ], [ %.082, %368 ], [ %.082, %362 ], [ %.082, %361 ], [ %.082, %349 ], [ %.082, %339 ], [ %.082, %337 ], [ %.082, %321 ], [ %.082, %311 ], [ %.082, %309 ], [ %.082, %296 ], [ %.082, %286 ], [ %.082, %285 ], [ %.082, %284 ], [ %.082, %274 ], [ %.082, %264 ], [ %.082, %263 ], [ %.082, %260 ], [ %.082, %254 ], [ %.082, %251 ], [ %.082, %245 ], [ %.082, %242 ], [ %.082, %236 ], [ %.082, %233 ], [ %.082, %231 ], [ %.082, %217 ], [ %.082, %207 ], [ %.082, %204 ], [ %.082, %198 ], [ %.082, %195 ], [ %.082, %189 ], [ %.082, %188 ], [ %.082, %176 ], [ %.082, %166 ], [ %.082, %164 ], [ %.082, %150 ], [ %.082, %140 ], [ %.082, %137 ], [ %.082, %131 ], [ %.082, %130 ], [ %.082, %118 ], [ %.082, %108 ], [ %.082, %102 ], [ %.082, %99 ], [ %.082, %92 ], [ %.082, %87 ], [ %.082, %86 ], [ %.082, %83 ], [ %.082, %81 ], [ %.082, %69 ], [ %.082, %59 ], [ %.082, %54 ], [ %.082, %49 ], [ %.082, %47 ], [ 0, %32 ], [ %.082, %22 ], [ %.082, %17 ]
  %.080.be = phi i32 [ %.080, %16 ], [ %.080, %862 ], [ %.080, %860 ], [ %.080, %859 ], [ %.080, %858 ], [ %.080, %852 ], [ %.080, %851 ], [ %.080, %841 ], [ %.080, %840 ], [ %.080, %839 ], [ %.080, %838 ], [ %.080, %835 ], [ %.080, %832 ], [ %.080, %829 ], [ %.080, %826 ], [ %.080, %821 ], [ %.080, %819 ], [ %.080, %817 ], [ %.080, %814 ], [ %.080, %811 ], [ %.080, %808 ], [ %.080, %805 ], [ %.080, %804 ], [ %.080, %799 ], [ %797, %796 ], [ %.080, %794 ], [ %.080, %793 ], [ %.080, %791 ], [ %.080, %784 ], [ %.080, %783 ], [ %.080, %769 ], [ %.080, %759 ], [ %.080, %754 ], [ %.080, %751 ], [ %.080, %747 ], [ %.080, %746 ], [ %.080, %735 ], [ %.080, %725 ], [ %.080, %723 ], [ %.080, %712 ], [ %.080, %702 ], [ %.080, %701 ], [ %.080, %690 ], [ %.080, %680 ], [ %.080, %679 ], [ %.080, %665 ], [ %.080, %655 ], [ %.080, %649 ], [ %.080, %647 ], [ %.080, %633 ], [ %.080, %623 ], [ %.080, %620 ], [ %.080, %616 ], [ %.080, %614 ], [ %.080, %613 ], [ %.080, %612 ], [ %.080, %593 ], [ %.080, %583 ], [ %.080, %571 ], [ %.080, %569 ], [ %.080, %556 ], [ %.080, %546 ], [ %.080, %545 ], [ %.080, %544 ], [ %.080, %534 ], [ %.080, %524 ], [ %.080, %523 ], [ %.080, %513 ], [ %.080, %503 ], [ %.080, %500 ], [ %.080, %494 ], [ %.080, %491 ], [ %.080, %485 ], [ %.080, %482 ], [ %.080, %480 ], [ %.080, %466 ], [ %.080, %456 ], [ %.080, %453 ], [ %.080, %447 ], [ %.080, %444 ], [ %.080, %438 ], [ %.080, %437 ], [ %.080, %425 ], [ %.080, %415 ], [ %.080, %409 ], [ %.080, %408 ], [ %.080, %396 ], [ %.080, %386 ], [ %.080, %380 ], [ %.080, %377 ], [ %.080, %371 ], [ %.080, %368 ], [ %.080, %362 ], [ %.080, %361 ], [ %.080, %349 ], [ %.080, %339 ], [ %.080, %337 ], [ %.080, %321 ], [ %.080, %311 ], [ %.080, %309 ], [ %.080, %296 ], [ %.080, %286 ], [ %.080, %285 ], [ %.080, %284 ], [ %.080, %274 ], [ %.080, %264 ], [ %.080, %263 ], [ %.080, %260 ], [ %.080, %254 ], [ %.080, %251 ], [ %.080, %245 ], [ %.080, %242 ], [ %.080, %236 ], [ %.080, %233 ], [ %.080, %231 ], [ %.080, %217 ], [ %.080, %207 ], [ %.080, %204 ], [ %.080, %198 ], [ %.080, %195 ], [ %.080, %189 ], [ %.080, %188 ], [ %.080, %176 ], [ %.080, %166 ], [ %.080, %164 ], [ %.080, %150 ], [ %.080, %140 ], [ %.080, %137 ], [ %.080, %131 ], [ %.080, %130 ], [ %.080, %118 ], [ %.080, %108 ], [ %.080, %102 ], [ %.080, %99 ], [ %.080, %92 ], [ %.080, %87 ], [ %.080, %86 ], [ %.080, %83 ], [ %.080, %81 ], [ %.080, %69 ], [ %.080, %59 ], [ %.080, %54 ], [ %.080, %49 ], [ %.080, %47 ], [ %.080, %32 ], [ %.080, %22 ], [ %.080, %17 ]
  %.078.be = phi i32 [ %.078, %16 ], [ %.078, %862 ], [ %.078, %860 ], [ %.078, %859 ], [ %.078, %858 ], [ %.078, %852 ], [ %.078, %851 ], [ %.078, %841 ], [ %.078, %840 ], [ %.078, %839 ], [ %.078, %838 ], [ %.078, %835 ], [ %.078, %832 ], [ %.078, %829 ], [ %.078, %826 ], [ %.078, %821 ], [ %.078, %819 ], [ %818, %817 ], [ %.078, %814 ], [ %.078, %811 ], [ %.078, %808 ], [ %.078, %805 ], [ %.078, %804 ], [ %.078, %799 ], [ %.078, %796 ], [ %.078, %794 ], [ %.078, %793 ], [ %.078, %791 ], [ %.078, %784 ], [ %.078, %783 ], [ %.078, %769 ], [ %.078, %759 ], [ %.078, %754 ], [ %.078, %751 ], [ %.078, %747 ], [ %.078, %746 ], [ %.078, %735 ], [ %.078, %725 ], [ %.078, %723 ], [ %.078, %712 ], [ %.078, %702 ], [ %.078, %701 ], [ %.078, %690 ], [ %.078, %680 ], [ %.078, %679 ], [ %.078, %665 ], [ %.078, %655 ], [ %.078, %649 ], [ %.078, %647 ], [ %.078, %633 ], [ %.078, %623 ], [ %.078, %620 ], [ %.078, %616 ], [ %.078, %614 ], [ %.078, %613 ], [ %.078, %612 ], [ %.078, %593 ], [ %.078, %583 ], [ %.078, %571 ], [ %.078, %569 ], [ %.078, %556 ], [ %.078, %546 ], [ %.078, %545 ], [ %.078, %544 ], [ %.078, %534 ], [ %.078, %524 ], [ %.078, %523 ], [ %.078, %513 ], [ %.078, %503 ], [ %.078, %500 ], [ %.078, %494 ], [ %.078, %491 ], [ %.078, %485 ], [ %.078, %482 ], [ %.078, %480 ], [ %.078, %466 ], [ %.078, %456 ], [ %.078, %453 ], [ %.078, %447 ], [ %.078, %444 ], [ %.078, %438 ], [ %.078, %437 ], [ %.078, %425 ], [ %.078, %415 ], [ %.078, %409 ], [ %.078, %408 ], [ %.078, %396 ], [ %.078, %386 ], [ %.078, %380 ], [ %.078, %377 ], [ %.078, %371 ], [ %.078, %368 ], [ %.078, %362 ], [ %.078, %361 ], [ %.078, %349 ], [ %.078, %339 ], [ %.078, %337 ], [ %.078, %321 ], [ %.078, %311 ], [ %.078, %309 ], [ %.078, %296 ], [ %.078, %286 ], [ %.078, %285 ], [ %.078, %284 ], [ %.neg87, %274 ], [ %.078, %264 ], [ %.078, %263 ], [ %.078, %260 ], [ %.078, %254 ], [ %.078, %251 ], [ %.078, %245 ], [ %.078, %242 ], [ %.078, %236 ], [ %.078, %233 ], [ %.078, %231 ], [ %.078, %217 ], [ %.078, %207 ], [ %.078, %204 ], [ %.078, %198 ], [ %.078, %195 ], [ %.078, %189 ], [ %.078, %188 ], [ %.078, %176 ], [ %.078, %166 ], [ %.078, %164 ], [ %.078, %150 ], [ %.078, %140 ], [ %.078, %137 ], [ %.078, %131 ], [ %.078, %130 ], [ %.078, %118 ], [ %.078, %108 ], [ %.078, %102 ], [ %.078, %99 ], [ %.078, %92 ], [ %.078, %87 ], [ 0, %86 ], [ %.078, %83 ], [ %.078, %81 ], [ %.078, %69 ], [ %.078, %59 ], [ %.078, %54 ], [ %.078, %49 ], [ %.078, %47 ], [ %.078, %32 ], [ %.078, %22 ], [ %.078, %17 ]
  %.076.be = phi i32 [ %.076, %16 ], [ %.076, %862 ], [ %.076, %860 ], [ %.076, %859 ], [ %.076, %858 ], [ %.076, %852 ], [ %.076, %851 ], [ %.076, %841 ], [ %.076, %840 ], [ %.neg84, %839 ], [ %.076, %838 ], [ %.076, %835 ], [ %.076, %832 ], [ %.076, %829 ], [ %.076, %826 ], [ %.076, %821 ], [ %.076, %819 ], [ %.076, %817 ], [ %.076, %814 ], [ %.076, %811 ], [ %.076, %808 ], [ %.076, %805 ], [ %.076, %804 ], [ %.076, %799 ], [ %.076, %796 ], [ %.076, %794 ], [ %.076, %793 ], [ %.076, %791 ], [ %.076, %784 ], [ %.076, %783 ], [ %.076, %769 ], [ %.076, %759 ], [ %.076, %754 ], [ %.076, %751 ], [ %.076, %747 ], [ %.076, %746 ], [ %.076, %735 ], [ %.076, %725 ], [ %.076, %723 ], [ %.076, %712 ], [ %.076, %702 ], [ %.076, %701 ], [ %.076, %690 ], [ %.076, %680 ], [ %.076, %679 ], [ %.076, %665 ], [ %.076, %655 ], [ %.076, %649 ], [ %.076, %647 ], [ %.076, %633 ], [ %.076, %623 ], [ %.076, %620 ], [ %.076, %616 ], [ %.076, %614 ], [ %.076, %613 ], [ %.076, %612 ], [ %.076, %593 ], [ %.076, %583 ], [ %.076, %571 ], [ %.076, %569 ], [ %.076, %556 ], [ %.076, %546 ], [ %.076, %545 ], [ %.076, %544 ], [ %.neg86, %534 ], [ %.076, %524 ], [ %.076, %523 ], [ %.076, %513 ], [ %.076, %503 ], [ %.076, %500 ], [ %.076, %494 ], [ %.076, %491 ], [ %.076, %485 ], [ %.076, %482 ], [ %.076, %480 ], [ %.076, %466 ], [ %.076, %456 ], [ %.076, %453 ], [ %.076, %447 ], [ %.076, %444 ], [ %.076, %438 ], [ %.076, %437 ], [ %.076, %425 ], [ %.076, %415 ], [ %.076, %409 ], [ %.076, %408 ], [ %.076, %396 ], [ %.076, %386 ], [ %.076, %380 ], [ %.076, %377 ], [ %.076, %371 ], [ %.076, %368 ], [ %.076, %362 ], [ %.076, %361 ], [ %.076, %349 ], [ %.076, %339 ], [ %.076, %337 ], [ %.076, %321 ], [ %.076, %311 ], [ %.076, %309 ], [ %.076, %296 ], [ %.076, %286 ], [ 0, %285 ], [ %.076, %284 ], [ %.076, %274 ], [ %.076, %264 ], [ %.076, %263 ], [ %.076, %260 ], [ %.076, %254 ], [ %.076, %251 ], [ %.076, %245 ], [ %.076, %242 ], [ %.076, %236 ], [ %.076, %233 ], [ %.076, %231 ], [ %.076, %217 ], [ %.076, %207 ], [ %.076, %204 ], [ %.076, %198 ], [ %.076, %195 ], [ %.076, %189 ], [ %.076, %188 ], [ %.076, %176 ], [ %.076, %166 ], [ %.076, %164 ], [ %.076, %150 ], [ %.076, %140 ], [ %.076, %137 ], [ %.076, %131 ], [ %.076, %130 ], [ %.076, %118 ], [ %.076, %108 ], [ %.076, %102 ], [ %.076, %99 ], [ %.076, %92 ], [ %.076, %87 ], [ %.076, %86 ], [ %.076, %83 ], [ %.076, %81 ], [ %.076, %69 ], [ %.076, %59 ], [ %.076, %54 ], [ %.076, %49 ], [ %.076, %47 ], [ %.076, %32 ], [ %.076, %22 ], [ %.076, %17 ]
  %.074.be = phi i32 [ %.074, %16 ], [ %.074, %862 ], [ %.074, %860 ], [ %.074, %859 ], [ %.074, %858 ], [ %.074, %852 ], [ %.074, %851 ], [ %.074, %841 ], [ %.074, %840 ], [ %.074, %839 ], [ %.074, %838 ], [ %.074, %835 ], [ %.074, %832 ], [ %.074, %829 ], [ %.074, %826 ], [ %.074, %821 ], [ %.074, %819 ], [ %.074, %817 ], [ %.074, %814 ], [ %.074, %811 ], [ %.074, %808 ], [ %.074, %805 ], [ %.074, %804 ], [ %.074, %799 ], [ %.074, %796 ], [ %.074, %794 ], [ %.074, %793 ], [ %.074, %791 ], [ %.074, %784 ], [ %.074, %783 ], [ %.074, %769 ], [ %.074, %759 ], [ %.074, %754 ], [ %.074, %751 ], [ %.074, %747 ], [ %.074, %746 ], [ %.074, %735 ], [ %.074, %725 ], [ %.074, %723 ], [ %.074, %712 ], [ %.074, %702 ], [ %.074, %701 ], [ %.074, %690 ], [ %.074, %680 ], [ %.074, %679 ], [ %.074, %665 ], [ %.074, %655 ], [ %.074, %649 ], [ %.074, %647 ], [ %.074, %633 ], [ %.074, %623 ], [ %.074, %620 ], [ %.074, %616 ], [ %615, %614 ], [ %.074, %613 ], [ %.074, %612 ], [ %.074, %593 ], [ %.074, %583 ], [ %.074, %571 ], [ %.074, %569 ], [ %.074, %556 ], [ %.074, %546 ], [ 0, %545 ], [ %.074, %544 ], [ %.074, %534 ], [ %.074, %524 ], [ %.074, %523 ], [ %.074, %513 ], [ %.074, %503 ], [ %.074, %500 ], [ %.074, %494 ], [ %.074, %491 ], [ %.074, %485 ], [ %.074, %482 ], [ %.074, %480 ], [ %.074, %466 ], [ %.074, %456 ], [ %.074, %453 ], [ %.074, %447 ], [ %.074, %444 ], [ %.074, %438 ], [ %.074, %437 ], [ %.074, %425 ], [ %.074, %415 ], [ %.074, %409 ], [ %.074, %408 ], [ %.074, %396 ], [ %.074, %386 ], [ %.074, %380 ], [ %.074, %377 ], [ %.074, %371 ], [ %.074, %368 ], [ %.074, %362 ], [ %.074, %361 ], [ %.074, %349 ], [ %.074, %339 ], [ %.074, %337 ], [ %.074, %321 ], [ %.074, %311 ], [ %.074, %309 ], [ %.074, %296 ], [ %.074, %286 ], [ %.074, %285 ], [ %.074, %284 ], [ %.074, %274 ], [ %.074, %264 ], [ %.074, %263 ], [ %.074, %260 ], [ %.074, %254 ], [ %.074, %251 ], [ %.074, %245 ], [ %.074, %242 ], [ %.074, %236 ], [ %.074, %233 ], [ %.074, %231 ], [ %.074, %217 ], [ %.074, %207 ], [ %.074, %204 ], [ %.074, %198 ], [ %.074, %195 ], [ %.074, %189 ], [ %.074, %188 ], [ %.074, %176 ], [ %.074, %166 ], [ %.074, %164 ], [ %.074, %150 ], [ %.074, %140 ], [ %.074, %137 ], [ %.074, %131 ], [ %.074, %130 ], [ %.074, %118 ], [ %.074, %108 ], [ %.074, %102 ], [ %.074, %99 ], [ %.074, %92 ], [ %.074, %87 ], [ %.074, %86 ], [ %.074, %83 ], [ %.074, %81 ], [ %.074, %69 ], [ %.074, %59 ], [ %.074, %54 ], [ %.074, %49 ], [ %.074, %47 ], [ %.074, %32 ], [ %.074, %22 ], [ %.074, %17 ]
  %.072.be = phi i32 [ %.072, %16 ], [ %.072, %862 ], [ %.072, %860 ], [ %.072, %859 ], [ %.neg, %858 ], [ %.072, %852 ], [ %.072, %851 ], [ %.072, %841 ], [ %.072, %840 ], [ %.072, %839 ], [ %.072, %838 ], [ %.072, %835 ], [ %.072, %832 ], [ %.072, %829 ], [ %.072, %826 ], [ %.072, %821 ], [ %.072, %819 ], [ %.072, %817 ], [ %.072, %814 ], [ %.072, %811 ], [ %.072, %808 ], [ %.072, %805 ], [ %.072, %804 ], [ %.072, %799 ], [ %.072, %796 ], [ %.072, %794 ], [ %.072, %793 ], [ %.072, %791 ], [ %.072, %784 ], [ %.072, %783 ], [ %.072, %769 ], [ %.072, %759 ], [ %.072, %754 ], [ %.072, %751 ], [ %.072, %747 ], [ %.072, %746 ], [ %.072, %735 ], [ %.072, %725 ], [ %.072, %723 ], [ %.072, %712 ], [ %.072, %702 ], [ %.072, %701 ], [ %691, %690 ], [ %.072, %680 ], [ %.072, %679 ], [ %.072, %665 ], [ %.072, %655 ], [ %.072, %649 ], [ %.072, %647 ], [ %.072, %633 ], [ %.072, %623 ], [ %.072, %620 ], [ %619, %616 ], [ %.072, %614 ], [ %.072, %613 ], [ %.072, %612 ], [ %.072, %593 ], [ %.072, %583 ], [ %.072, %571 ], [ %.072, %569 ], [ %.072, %556 ], [ %.072, %546 ], [ %.072, %545 ], [ %.072, %544 ], [ %.072, %534 ], [ %.072, %524 ], [ %.072, %523 ], [ %.072, %513 ], [ %.072, %503 ], [ %.072, %500 ], [ %.072, %494 ], [ %.072, %491 ], [ %.072, %485 ], [ %.072, %482 ], [ %.072, %480 ], [ %.072, %466 ], [ %.072, %456 ], [ %.072, %453 ], [ %.072, %447 ], [ %.072, %444 ], [ %.072, %438 ], [ %.072, %437 ], [ %.072, %425 ], [ %.072, %415 ], [ %.072, %409 ], [ %.072, %408 ], [ %.072, %396 ], [ %.072, %386 ], [ %.072, %380 ], [ %.072, %377 ], [ %.072, %371 ], [ %.072, %368 ], [ %.072, %362 ], [ %.072, %361 ], [ %.072, %349 ], [ %.072, %339 ], [ %.072, %337 ], [ %.072, %321 ], [ %.072, %311 ], [ %.072, %309 ], [ %.072, %296 ], [ %.072, %286 ], [ %.072, %285 ], [ %.072, %284 ], [ %.072, %274 ], [ %.072, %264 ], [ %.072, %263 ], [ %.072, %260 ], [ %.072, %254 ], [ %.072, %251 ], [ %.072, %245 ], [ %.072, %242 ], [ %.072, %236 ], [ %.072, %233 ], [ %.072, %231 ], [ %.072, %217 ], [ %.072, %207 ], [ %.072, %204 ], [ %.072, %198 ], [ %.072, %195 ], [ %.072, %189 ], [ %.072, %188 ], [ %.072, %176 ], [ %.072, %166 ], [ %.072, %164 ], [ %.072, %150 ], [ %.072, %140 ], [ %.072, %137 ], [ %.072, %131 ], [ %.072, %130 ], [ %.072, %118 ], [ %.072, %108 ], [ %.072, %102 ], [ %.072, %99 ], [ %.072, %92 ], [ %.072, %87 ], [ %.072, %86 ], [ %.072, %83 ], [ %.072, %81 ], [ %.072, %69 ], [ %.072, %59 ], [ %.072, %54 ], [ %.072, %49 ], [ %.072, %47 ], [ %.072, %32 ], [ %.072, %22 ], [ %.072, %17 ]
  %.070.be = phi i32 [ %.070, %16 ], [ %.070, %862 ], [ %.070, %860 ], [ %.070, %859 ], [ %.070, %858 ], [ %.070, %852 ], [ %.070, %851 ], [ %.070, %841 ], [ %.070, %840 ], [ %.070, %839 ], [ %.070, %838 ], [ %.070, %835 ], [ %.070, %832 ], [ %.070, %829 ], [ %.070, %826 ], [ %.070, %821 ], [ %.070, %819 ], [ %.070, %817 ], [ %.070, %814 ], [ %.070, %811 ], [ %.070, %808 ], [ %.070, %805 ], [ %.070, %804 ], [ %.070, %799 ], [ %.070, %796 ], [ %.070, %794 ], [ %.070, %793 ], [ %792, %791 ], [ %.070, %784 ], [ %.070, %783 ], [ %.070, %769 ], [ %.070, %759 ], [ %.070, %754 ], [ %.070, %751 ], [ %750, %747 ], [ %.070, %746 ], [ %.070, %735 ], [ %.070, %725 ], [ %.070, %723 ], [ %.070, %712 ], [ %.070, %702 ], [ %.070, %701 ], [ %.070, %690 ], [ %.070, %680 ], [ %.070, %679 ], [ %.070, %665 ], [ %.070, %655 ], [ %.070, %649 ], [ %.070, %647 ], [ %.070, %633 ], [ %.070, %623 ], [ %.070, %620 ], [ %.070, %616 ], [ %.070, %614 ], [ %.070, %613 ], [ %.070, %612 ], [ %.070, %593 ], [ %.070, %583 ], [ %.070, %571 ], [ %.070, %569 ], [ %.070, %556 ], [ %.070, %546 ], [ %.070, %545 ], [ %.070, %544 ], [ %.070, %534 ], [ %.070, %524 ], [ %.070, %523 ], [ %.070, %513 ], [ %.070, %503 ], [ %.070, %500 ], [ %.070, %494 ], [ %.070, %491 ], [ %.070, %485 ], [ %.070, %482 ], [ %.070, %480 ], [ %.070, %466 ], [ %.070, %456 ], [ %.070, %453 ], [ %.070, %447 ], [ %.070, %444 ], [ %.070, %438 ], [ %.070, %437 ], [ %.070, %425 ], [ %.070, %415 ], [ %.070, %409 ], [ %.070, %408 ], [ %.070, %396 ], [ %.070, %386 ], [ %.070, %380 ], [ %.070, %377 ], [ %.070, %371 ], [ %.070, %368 ], [ %.070, %362 ], [ %.070, %361 ], [ %.070, %349 ], [ %.070, %339 ], [ %.070, %337 ], [ %.070, %321 ], [ %.070, %311 ], [ %.070, %309 ], [ %.070, %296 ], [ %.070, %286 ], [ %.070, %285 ], [ %.070, %284 ], [ %.070, %274 ], [ %.070, %264 ], [ %.070, %263 ], [ %.070, %260 ], [ %.070, %254 ], [ %.070, %251 ], [ %.070, %245 ], [ %.070, %242 ], [ %.070, %236 ], [ %.070, %233 ], [ %.070, %231 ], [ %.070, %217 ], [ %.070, %207 ], [ %.070, %204 ], [ %.070, %198 ], [ %.070, %195 ], [ %.070, %189 ], [ %.070, %188 ], [ %.070, %176 ], [ %.070, %166 ], [ %.070, %164 ], [ %.070, %150 ], [ %.070, %140 ], [ %.070, %137 ], [ %.070, %131 ], [ %.070, %130 ], [ %.070, %118 ], [ %.070, %108 ], [ %.070, %102 ], [ %.070, %99 ], [ %.070, %92 ], [ %.070, %87 ], [ %.070, %86 ], [ %.070, %83 ], [ %.070, %81 ], [ %.070, %69 ], [ %.070, %59 ], [ %.070, %54 ], [ %.070, %49 ], [ %.070, %47 ], [ %.070, %32 ], [ %.070, %22 ], [ %.070, %17 ]
  %.0.be = phi i32 [ %.0, %16 ], [ -1790306462, %862 ], [ -36673380, %860 ], [ 1956309243, %859 ], [ -1145433240, %858 ], [ -102368544, %852 ], [ 301199699, %851 ], [ -1780690315, %841 ], [ 1549709905, %840 ], [ 2099921625, %839 ], [ 315723192, %838 ], [ -184062384, %835 ], [ 984506112, %832 ], [ -1850653971, %829 ], [ -1827051126, %826 ], [ 16318248, %821 ], [ -2022402408, %819 ], [ 1457050634, %817 ], [ -1355253710, %814 ], [ -762352327, %811 ], [ 1043956385, %808 ], [ -353827239, %805 ], [ -2093718419, %804 ], [ 559932234, %799 ], [ 293983533, %796 ], [ 1246634860, %794 ], [ 1646537892, %793 ], [ 253354214, %791 ], [ -739865693, %784 ], [ 1995194001, %783 ], [ %782, %769 ], [ %768, %759 ], [ %758, %754 ], [ %753, %751 ], [ 253354214, %747 ], [ 1646537892, %746 ], [ %745, %735 ], [ %734, %725 ], [ %724, %723 ], [ %722, %712 ], [ %711, %702 ], [ 174194091, %701 ], [ %700, %690 ], [ %689, %680 ], [ -993740093, %679 ], [ %678, %665 ], [ %664, %655 ], [ 96749916, %649 ], [ %648, %647 ], [ %646, %633 ], [ %632, %623 ], [ %622, %620 ], [ 174194091, %616 ], [ -803238495, %614 ], [ -1825211206, %613 ], [ 716934088, %612 ], [ %611, %593 ], [ %592, %583 ], [ %582, %571 ], [ %570, %569 ], [ %568, %556 ], [ %555, %546 ], [ -803238495, %545 ], [ 850830069, %544 ], [ %543, %534 ], [ %533, %524 ], [ 589736912, %523 ], [ %522, %513 ], [ %512, %503 ], [ -2010353958, %500 ], [ %499, %494 ], [ -516814044, %491 ], [ %490, %485 ], [ -1500516406, %482 ], [ %481, %480 ], [ %479, %466 ], [ %465, %456 ], [ 1167031867, %453 ], [ %452, %447 ], [ -721107125, %444 ], [ %443, %438 ], [ -1954803881, %437 ], [ %436, %425 ], [ %424, %415 ], [ %414, %409 ], [ 389237147, %408 ], [ %407, %396 ], [ %395, %386 ], [ %385, %380 ], [ -720542542, %377 ], [ %376, %371 ], [ -1708494573, %368 ], [ %367, %362 ], [ -1098485474, %361 ], [ %360, %349 ], [ %348, %339 ], [ %338, %337 ], [ %336, %321 ], [ %320, %311 ], [ %310, %309 ], [ %308, %296 ], [ %295, %286 ], [ 850830069, %285 ], [ 1212158189, %284 ], [ %283, %274 ], [ %273, %264 ], [ -186997721, %263 ], [ -1269927577, %260 ], [ %259, %254 ], [ 164708663, %251 ], [ %250, %245 ], [ -2024403302, %242 ], [ %241, %236 ], [ 790808961, %233 ], [ %232, %231 ], [ %230, %217 ], [ %216, %207 ], [ 932564272, %204 ], [ %203, %198 ], [ 1250058986, %195 ], [ %194, %189 ], [ -1939531196, %188 ], [ %187, %176 ], [ %175, %166 ], [ %165, %164 ], [ %163, %150 ], [ %149, %140 ], [ -60271710, %137 ], [ %136, %131 ], [ 1459841140, %130 ], [ %129, %118 ], [ %117, %108 ], [ %107, %102 ], [ -1689523240, %99 ], [ %98, %92 ], [ %91, %87 ], [ 1212158189, %86 ], [ 1246634860, %83 ], [ %82, %81 ], [ %80, %69 ], [ %68, %59 ], [ 944974145, %54 ], [ 944974145, %49 ], [ %48, %47 ], [ %46, %32 ], [ %31, %22 ], [ %21, %17 ]
  br label %16

17:                                               ; preds = %16
  %18 = sext i32 %.080 to i64
  %19 = load i64, i64* @n, align 8
  %20 = icmp sgt i64 %19, %18
  %21 = select i1 %20, i32 -1488877189, i32 -278650774
  br label %.backedge

22:                                               ; preds = %16
  %23 = load i32, i32* @x.7, align 4
  %24 = load i32, i32* @y.8, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 559932234, i32 327077312
  br label %.backedge

32:                                               ; preds = %16
  store i32 0, i32* %11, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @latte, i64 0, i64 0), i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @latte, i64 1, i64 0), i32* nonnull dereferenceable(4) %11)
  store i32 0, i32* %12, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @cafe, i64 0, i64 0), i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @cafe, i64 1, i64 0), i32* nonnull dereferenceable(4) %12)
  store i32 0, i32* %13, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @all, i64 0, i64 0), i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @all, i64 1, i64 0), i32* nonnull dereferenceable(4) %13)
  store i32 0, i32* %14, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @ans, i64 0, i64 0), i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @ans, i64 1, i64 0), i32* nonnull dereferenceable(4) %14)
  %33 = call dereferenceable(280) %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE(%"class.std::basic_istream"* nonnull dereferenceable(280) @_ZSt3cin, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_Z1aB5cxx11)
  %34 = call dereferenceable(280) %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE(%"class.std::basic_istream"* nonnull dereferenceable(280) %33, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_Z1bB5cxx11)
  %35 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11) #6
  %36 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11) #6
  %37 = icmp ugt i64 %35, %36
  store i1 %37, i1* %10, align 1
  %38 = load i32, i32* @x.7, align 4
  %39 = load i32, i32* @y.8, align 4
  %40 = add i32 %38, -1
  %41 = mul i32 %40, %38
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %44, %43
  %46 = select i1 %45, i32 439976429, i32 327077312
  br label %.backedge

47:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %10, align 1
  %48 = select i1 %.0..0..0., i32 1763780772, i32 1094180884
  br label %.backedge

49:                                               ; preds = %16
  %50 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11) #6
  store i64 %50, i64* @s, align 8
  %51 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11) #6
  store i64 %51, i64* @cop, align 8
  %52 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11) #6
  store i64 %52, i64* @copp, align 8
  %53 = load i64, i64* @s, align 8
  store i64 %53, i64* @last, align 8
  br label %.backedge

54:                                               ; preds = %16
  %55 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11) #6
  store i64 %55, i64* @s, align 8
  %56 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11) #6
  store i64 %56, i64* @cop, align 8
  %57 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11) #6
  store i64 %57, i64* @copp, align 8
  %58 = load i64, i64* @s, align 8
  store i64 %58, i64* @last, align 8
  br label %.backedge

59:                                               ; preds = %16
  %60 = load i32, i32* @x.7, align 4
  %61 = load i32, i32* @y.8, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -2093718419, i32 1169418094
  br label %.backedge

69:                                               ; preds = %16
  %70 = load i64, i64* @s, align 8
  %71 = icmp sgt i64 %70, 80
  store i1 %71, i1* %9, align 1
  %72 = load i32, i32* @x.7, align 4
  %73 = load i32, i32* @y.8, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 -292275807, i32 1169418094
  br label %.backedge

81:                                               ; preds = %16
  %.0..0..0.61 = load volatile i1, i1* %9, align 1
  %82 = select i1 %.0..0..0.61, i32 1410717986, i32 589366420
  br label %.backedge

83:                                               ; preds = %16
  %84 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %85 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %84, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

86:                                               ; preds = %16
  br label %.backedge

87:                                               ; preds = %16
  %88 = sext i32 %.078 to i64
  %89 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11) #6
  %90 = icmp ugt i64 %89, %88
  %91 = select i1 %90, i32 1400451944, i32 -464133267
  br label %.backedge

92:                                               ; preds = %16
  %93 = load i64, i64* @cop, align 8
  %.neg88 = add i64 %93, -1
  store i64 %.neg88, i64* @cop, align 8
  %94 = sext i32 %.078 to i64
  %95 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %94)
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 48
  %98 = select i1 %97, i32 -1444436183, i32 -1689523240
  br label %.backedge

99:                                               ; preds = %16
  %100 = load i64, i64* @cop, align 8
  %101 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %100
  store i64 0, i64* %101, align 8
  br label %.backedge

102:                                              ; preds = %16
  %103 = sext i32 %.078 to i64
  %104 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %103)
  %105 = load i8, i8* %104, align 1
  %106 = icmp eq i8 %105, 49
  %107 = select i1 %106, i32 -1072024300, i32 1459841140
  br label %.backedge

108:                                              ; preds = %16
  %109 = load i32, i32* @x.7, align 4
  %110 = load i32, i32* @y.8, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 -353827239, i32 -1648028263
  br label %.backedge

118:                                              ; preds = %16
  %119 = load i64, i64* @cop, align 8
  %120 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %119
  store i64 1, i64* %120, align 8
  %121 = load i32, i32* @x.7, align 4
  %122 = load i32, i32* @y.8, align 4
  %123 = add i32 %121, -1
  %124 = mul i32 %123, %121
  %125 = and i32 %124, 1
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %127, %126
  %129 = select i1 %128, i32 834788071, i32 -1648028263
  br label %.backedge

130:                                              ; preds = %16
  br label %.backedge

131:                                              ; preds = %16
  %132 = sext i32 %.078 to i64
  %133 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %132)
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %134, 50
  %136 = select i1 %135, i32 -1937571374, i32 -60271710
  br label %.backedge

137:                                              ; preds = %16
  %138 = load i64, i64* @cop, align 8
  %139 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %138
  store i64 2, i64* %139, align 8
  br label %.backedge

140:                                              ; preds = %16
  %141 = load i32, i32* @x.7, align 4
  %142 = load i32, i32* @y.8, align 4
  %143 = add i32 %141, -1
  %144 = mul i32 %143, %141
  %145 = and i32 %144, 1
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %147, %146
  %149 = select i1 %148, i32 1043956385, i32 -1307204847
  br label %.backedge

150:                                              ; preds = %16
  %151 = sext i32 %.078 to i64
  %152 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %151)
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 51
  store i1 %154, i1* %8, align 1
  %155 = load i32, i32* @x.7, align 4
  %156 = load i32, i32* @y.8, align 4
  %157 = add i32 %155, -1
  %158 = mul i32 %157, %155
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %161, %160
  %163 = select i1 %162, i32 589110772, i32 -1307204847
  br label %.backedge

164:                                              ; preds = %16
  %.0..0..0.62 = load volatile i1, i1* %8, align 1
  %165 = select i1 %.0..0..0.62, i32 1223843679, i32 -1939531196
  br label %.backedge

166:                                              ; preds = %16
  %167 = load i32, i32* @x.7, align 4
  %168 = load i32, i32* @y.8, align 4
  %169 = add i32 %167, -1
  %170 = mul i32 %169, %167
  %171 = and i32 %170, 1
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %173, %172
  %175 = select i1 %174, i32 -762352327, i32 -1347222220
  br label %.backedge

176:                                              ; preds = %16
  %177 = load i64, i64* @cop, align 8
  %178 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %177
  store i64 3, i64* %178, align 8
  %179 = load i32, i32* @x.7, align 4
  %180 = load i32, i32* @y.8, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 1876937865, i32 -1347222220
  br label %.backedge

188:                                              ; preds = %16
  br label %.backedge

189:                                              ; preds = %16
  %190 = sext i32 %.078 to i64
  %191 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %190)
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 52
  %194 = select i1 %193, i32 -707852475, i32 1250058986
  br label %.backedge

195:                                              ; preds = %16
  %196 = load i64, i64* @cop, align 8
  %197 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %196
  store i64 4, i64* %197, align 8
  br label %.backedge

198:                                              ; preds = %16
  %199 = sext i32 %.078 to i64
  %200 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %199)
  %201 = load i8, i8* %200, align 1
  %202 = icmp eq i8 %201, 53
  %203 = select i1 %202, i32 1911910115, i32 932564272
  br label %.backedge

204:                                              ; preds = %16
  %205 = load i64, i64* @cop, align 8
  %206 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %205
  store i64 5, i64* %206, align 8
  br label %.backedge

207:                                              ; preds = %16
  %208 = load i32, i32* @x.7, align 4
  %209 = load i32, i32* @y.8, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 -1355253710, i32 -943328478
  br label %.backedge

217:                                              ; preds = %16
  %218 = sext i32 %.078 to i64
  %219 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %218)
  %220 = load i8, i8* %219, align 1
  %221 = icmp eq i8 %220, 54
  store i1 %221, i1* %7, align 1
  %222 = load i32, i32* @x.7, align 4
  %223 = load i32, i32* @y.8, align 4
  %224 = add i32 %222, -1
  %225 = mul i32 %224, %222
  %226 = and i32 %225, 1
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %228, %227
  %230 = select i1 %229, i32 -1736129268, i32 -943328478
  br label %.backedge

231:                                              ; preds = %16
  %.0..0..0.63 = load volatile i1, i1* %7, align 1
  %232 = select i1 %.0..0..0.63, i32 1254074618, i32 790808961
  br label %.backedge

233:                                              ; preds = %16
  %234 = load i64, i64* @cop, align 8
  %235 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %234
  store i64 6, i64* %235, align 8
  br label %.backedge

236:                                              ; preds = %16
  %237 = sext i32 %.078 to i64
  %238 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %237)
  %239 = load i8, i8* %238, align 1
  %240 = icmp eq i8 %239, 55
  %241 = select i1 %240, i32 -1423440805, i32 -2024403302
  br label %.backedge

242:                                              ; preds = %16
  %243 = load i64, i64* @cop, align 8
  %244 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %243
  store i64 7, i64* %244, align 8
  br label %.backedge

245:                                              ; preds = %16
  %246 = sext i32 %.078 to i64
  %247 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %246)
  %248 = load i8, i8* %247, align 1
  %249 = icmp eq i8 %248, 56
  %250 = select i1 %249, i32 -79705921, i32 164708663
  br label %.backedge

251:                                              ; preds = %16
  %252 = load i64, i64* @cop, align 8
  %253 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %252
  store i64 8, i64* %253, align 8
  br label %.backedge

254:                                              ; preds = %16
  %255 = sext i32 %.078 to i64
  %256 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %255)
  %257 = load i8, i8* %256, align 1
  %258 = icmp eq i8 %257, 57
  %259 = select i1 %258, i32 -1793450192, i32 -1269927577
  br label %.backedge

260:                                              ; preds = %16
  %261 = load i64, i64* @cop, align 8
  %262 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %261
  store i64 9, i64* %262, align 8
  br label %.backedge

263:                                              ; preds = %16
  br label %.backedge

264:                                              ; preds = %16
  %265 = load i32, i32* @x.7, align 4
  %266 = load i32, i32* @y.8, align 4
  %267 = add i32 %265, -1
  %268 = mul i32 %267, %265
  %269 = and i32 %268, 1
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %271, %270
  %273 = select i1 %272, i32 1457050634, i32 -1774137217
  br label %.backedge

274:                                              ; preds = %16
  %.neg87 = add i32 %.078, 1
  %275 = load i32, i32* @x.7, align 4
  %276 = load i32, i32* @y.8, align 4
  %277 = add i32 %275, -1
  %278 = mul i32 %277, %275
  %279 = and i32 %278, 1
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %281, %280
  %283 = select i1 %282, i32 -987944960, i32 -1774137217
  br label %.backedge

284:                                              ; preds = %16
  br label %.backedge

285:                                              ; preds = %16
  br label %.backedge

286:                                              ; preds = %16
  %287 = load i32, i32* @x.7, align 4
  %288 = load i32, i32* @y.8, align 4
  %289 = add i32 %287, -1
  %290 = mul i32 %289, %287
  %291 = and i32 %290, 1
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %293, %292
  %295 = select i1 %294, i32 -2022402408, i32 -1272295261
  br label %.backedge

296:                                              ; preds = %16
  %297 = sext i32 %.076 to i64
  %298 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11) #6
  %299 = icmp ugt i64 %298, %297
  store i1 %299, i1* %6, align 1
  %300 = load i32, i32* @x.7, align 4
  %301 = load i32, i32* @y.8, align 4
  %302 = add i32 %300, -1
  %303 = mul i32 %302, %300
  %304 = and i32 %303, 1
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %306, %305
  %308 = select i1 %307, i32 -1982642275, i32 -1272295261
  br label %.backedge

309:                                              ; preds = %16
  %.0..0..0.64 = load volatile i1, i1* %6, align 1
  %310 = select i1 %.0..0..0.64, i32 1351479069, i32 -375096581
  br label %.backedge

311:                                              ; preds = %16
  %312 = load i32, i32* @x.7, align 4
  %313 = load i32, i32* @y.8, align 4
  %314 = add i32 %312, -1
  %315 = mul i32 %314, %312
  %316 = and i32 %315, 1
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %318, %317
  %320 = select i1 %319, i32 16318248, i32 -46484053
  br label %.backedge

321:                                              ; preds = %16
  %322 = load i64, i64* @copp, align 8
  %323 = add i64 %322, -1
  store i64 %323, i64* @copp, align 8
  %324 = sext i32 %.076 to i64
  %325 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %324)
  %326 = load i8, i8* %325, align 1
  %327 = icmp eq i8 %326, 48
  store i1 %327, i1* %5, align 1
  %328 = load i32, i32* @x.7, align 4
  %329 = load i32, i32* @y.8, align 4
  %330 = add i32 %328, -1
  %331 = mul i32 %330, %328
  %332 = and i32 %331, 1
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %334, %333
  %336 = select i1 %335, i32 69533342, i32 -46484053
  br label %.backedge

337:                                              ; preds = %16
  %.0..0..0.65 = load volatile i1, i1* %5, align 1
  %338 = select i1 %.0..0..0.65, i32 1550351794, i32 -1098485474
  br label %.backedge

339:                                              ; preds = %16
  %340 = load i32, i32* @x.7, align 4
  %341 = load i32, i32* @y.8, align 4
  %342 = add i32 %340, -1
  %343 = mul i32 %342, %340
  %344 = and i32 %343, 1
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %346, %345
  %348 = select i1 %347, i32 -1827051126, i32 -439305103
  br label %.backedge

349:                                              ; preds = %16
  %350 = load i64, i64* @copp, align 8
  %351 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %350
  store i64 0, i64* %351, align 8
  %352 = load i32, i32* @x.7, align 4
  %353 = load i32, i32* @y.8, align 4
  %354 = add i32 %352, -1
  %355 = mul i32 %354, %352
  %356 = and i32 %355, 1
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %358, %357
  %360 = select i1 %359, i32 520794421, i32 -439305103
  br label %.backedge

361:                                              ; preds = %16
  br label %.backedge

362:                                              ; preds = %16
  %363 = sext i32 %.076 to i64
  %364 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %363)
  %365 = load i8, i8* %364, align 1
  %366 = icmp eq i8 %365, 49
  %367 = select i1 %366, i32 145428705, i32 -1708494573
  br label %.backedge

368:                                              ; preds = %16
  %369 = load i64, i64* @copp, align 8
  %370 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %369
  store i64 1, i64* %370, align 8
  br label %.backedge

371:                                              ; preds = %16
  %372 = sext i32 %.076 to i64
  %373 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %372)
  %374 = load i8, i8* %373, align 1
  %375 = icmp eq i8 %374, 50
  %376 = select i1 %375, i32 -152950374, i32 -720542542
  br label %.backedge

377:                                              ; preds = %16
  %378 = load i64, i64* @copp, align 8
  %379 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %378
  store i64 2, i64* %379, align 8
  br label %.backedge

380:                                              ; preds = %16
  %381 = sext i32 %.076 to i64
  %382 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %381)
  %383 = load i8, i8* %382, align 1
  %384 = icmp eq i8 %383, 51
  %385 = select i1 %384, i32 340508808, i32 389237147
  br label %.backedge

386:                                              ; preds = %16
  %387 = load i32, i32* @x.7, align 4
  %388 = load i32, i32* @y.8, align 4
  %389 = add i32 %387, -1
  %390 = mul i32 %389, %387
  %391 = and i32 %390, 1
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %393, %392
  %395 = select i1 %394, i32 -1850653971, i32 -1351595009
  br label %.backedge

396:                                              ; preds = %16
  %397 = load i64, i64* @copp, align 8
  %398 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %397
  store i64 3, i64* %398, align 8
  %399 = load i32, i32* @x.7, align 4
  %400 = load i32, i32* @y.8, align 4
  %401 = add i32 %399, -1
  %402 = mul i32 %401, %399
  %403 = and i32 %402, 1
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %405, %404
  %407 = select i1 %406, i32 1399710352, i32 -1351595009
  br label %.backedge

408:                                              ; preds = %16
  br label %.backedge

409:                                              ; preds = %16
  %410 = sext i32 %.076 to i64
  %411 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %410)
  %412 = load i8, i8* %411, align 1
  %413 = icmp eq i8 %412, 52
  %414 = select i1 %413, i32 -344128150, i32 -1954803881
  br label %.backedge

415:                                              ; preds = %16
  %416 = load i32, i32* @x.7, align 4
  %417 = load i32, i32* @y.8, align 4
  %418 = add i32 %416, -1
  %419 = mul i32 %418, %416
  %420 = and i32 %419, 1
  %421 = icmp eq i32 %420, 0
  %422 = icmp slt i32 %417, 10
  %423 = or i1 %422, %421
  %424 = select i1 %423, i32 984506112, i32 -2118262955
  br label %.backedge

425:                                              ; preds = %16
  %426 = load i64, i64* @copp, align 8
  %427 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %426
  store i64 4, i64* %427, align 8
  %428 = load i32, i32* @x.7, align 4
  %429 = load i32, i32* @y.8, align 4
  %430 = add i32 %428, -1
  %431 = mul i32 %430, %428
  %432 = and i32 %431, 1
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %434, %433
  %436 = select i1 %435, i32 1215292400, i32 -2118262955
  br label %.backedge

437:                                              ; preds = %16
  br label %.backedge

438:                                              ; preds = %16
  %439 = sext i32 %.076 to i64
  %440 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %439)
  %441 = load i8, i8* %440, align 1
  %442 = icmp eq i8 %441, 53
  %443 = select i1 %442, i32 1339743962, i32 -721107125
  br label %.backedge

444:                                              ; preds = %16
  %445 = load i64, i64* @copp, align 8
  %446 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %445
  store i64 5, i64* %446, align 8
  br label %.backedge

447:                                              ; preds = %16
  %448 = sext i32 %.076 to i64
  %449 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %448)
  %450 = load i8, i8* %449, align 1
  %451 = icmp eq i8 %450, 54
  %452 = select i1 %451, i32 787580514, i32 1167031867
  br label %.backedge

453:                                              ; preds = %16
  %454 = load i64, i64* @copp, align 8
  %455 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %454
  store i64 6, i64* %455, align 8
  br label %.backedge

456:                                              ; preds = %16
  %457 = load i32, i32* @x.7, align 4
  %458 = load i32, i32* @y.8, align 4
  %459 = add i32 %457, -1
  %460 = mul i32 %459, %457
  %461 = and i32 %460, 1
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %463, %462
  %465 = select i1 %464, i32 -184062384, i32 1668397338
  br label %.backedge

466:                                              ; preds = %16
  %467 = sext i32 %.076 to i64
  %468 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %467)
  %469 = load i8, i8* %468, align 1
  %470 = icmp eq i8 %469, 55
  store i1 %470, i1* %4, align 1
  %471 = load i32, i32* @x.7, align 4
  %472 = load i32, i32* @y.8, align 4
  %473 = add i32 %471, -1
  %474 = mul i32 %473, %471
  %475 = and i32 %474, 1
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %477, %476
  %479 = select i1 %478, i32 984255188, i32 1668397338
  br label %.backedge

480:                                              ; preds = %16
  %.0..0..0.66 = load volatile i1, i1* %4, align 1
  %481 = select i1 %.0..0..0.66, i32 937446195, i32 -1500516406
  br label %.backedge

482:                                              ; preds = %16
  %483 = load i64, i64* @copp, align 8
  %484 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %483
  store i64 7, i64* %484, align 8
  br label %.backedge

485:                                              ; preds = %16
  %486 = sext i32 %.076 to i64
  %487 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %486)
  %488 = load i8, i8* %487, align 1
  %489 = icmp eq i8 %488, 56
  %490 = select i1 %489, i32 -1719739391, i32 -516814044
  br label %.backedge

491:                                              ; preds = %16
  %492 = load i64, i64* @copp, align 8
  %493 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %492
  store i64 8, i64* %493, align 8
  br label %.backedge

494:                                              ; preds = %16
  %495 = sext i32 %.076 to i64
  %496 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %495)
  %497 = load i8, i8* %496, align 1
  %498 = icmp eq i8 %497, 57
  %499 = select i1 %498, i32 -1605803190, i32 -2010353958
  br label %.backedge

500:                                              ; preds = %16
  %501 = load i64, i64* @copp, align 8
  %502 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %501
  store i64 9, i64* %502, align 8
  br label %.backedge

503:                                              ; preds = %16
  %504 = load i32, i32* @x.7, align 4
  %505 = load i32, i32* @y.8, align 4
  %506 = add i32 %504, -1
  %507 = mul i32 %506, %504
  %508 = and i32 %507, 1
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %510, %509
  %512 = select i1 %511, i32 315723192, i32 69362722
  br label %.backedge

513:                                              ; preds = %16
  %514 = load i32, i32* @x.7, align 4
  %515 = load i32, i32* @y.8, align 4
  %516 = add i32 %514, -1
  %517 = mul i32 %516, %514
  %518 = and i32 %517, 1
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %520, %519
  %522 = select i1 %521, i32 2058419990, i32 69362722
  br label %.backedge

523:                                              ; preds = %16
  br label %.backedge

524:                                              ; preds = %16
  %525 = load i32, i32* @x.7, align 4
  %526 = load i32, i32* @y.8, align 4
  %527 = add i32 %525, -1
  %528 = mul i32 %527, %525
  %529 = and i32 %528, 1
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %531, %530
  %533 = select i1 %532, i32 2099921625, i32 -368749379
  br label %.backedge

534:                                              ; preds = %16
  %.neg86 = add i32 %.076, 1
  %535 = load i32, i32* @x.7, align 4
  %536 = load i32, i32* @y.8, align 4
  %537 = add i32 %535, -1
  %538 = mul i32 %537, %535
  %539 = and i32 %538, 1
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %541, %540
  %543 = select i1 %542, i32 208131330, i32 -368749379
  br label %.backedge

544:                                              ; preds = %16
  br label %.backedge

545:                                              ; preds = %16
  br label %.backedge

546:                                              ; preds = %16
  %547 = load i32, i32* @x.7, align 4
  %548 = load i32, i32* @y.8, align 4
  %549 = add i32 %547, -1
  %550 = mul i32 %549, %547
  %551 = and i32 %550, 1
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %553, %552
  %555 = select i1 %554, i32 1549709905, i32 -990298363
  br label %.backedge

556:                                              ; preds = %16
  %557 = sext i32 %.074 to i64
  %558 = load i64, i64* @s, align 8
  %559 = icmp sge i64 %558, %557
  store i1 %559, i1* %3, align 1
  %560 = load i32, i32* @x.7, align 4
  %561 = load i32, i32* @y.8, align 4
  %562 = add i32 %560, -1
  %563 = mul i32 %562, %560
  %564 = and i32 %563, 1
  %565 = icmp eq i32 %564, 0
  %566 = icmp slt i32 %561, 10
  %567 = or i1 %566, %565
  %568 = select i1 %567, i32 1816315997, i32 -990298363
  br label %.backedge

569:                                              ; preds = %16
  %.0..0..0.67 = load volatile i1, i1* %3, align 1
  %570 = select i1 %.0..0..0.67, i32 1235655387, i32 -1668771839
  br label %.backedge

571:                                              ; preds = %16
  %572 = sext i32 %.074 to i64
  %573 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %572
  %574 = load i64, i64* %573, align 8
  %575 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %572
  %576 = load i64, i64* %575, align 8
  %577 = add i64 %576, %574
  %578 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %572
  %579 = load i64, i64* %578, align 8
  %580 = add i64 %577, %579
  store i64 %580, i64* %578, align 8
  %581 = icmp sgt i64 %580, 9
  %582 = select i1 %581, i32 -244902432, i32 716934088
  br label %.backedge

583:                                              ; preds = %16
  %584 = load i32, i32* @x.7, align 4
  %585 = load i32, i32* @y.8, align 4
  %586 = add i32 %584, -1
  %587 = mul i32 %586, %584
  %588 = and i32 %587, 1
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %590, %589
  %592 = select i1 %591, i32 -1780690315, i32 1011636628
  br label %.backedge

593:                                              ; preds = %16
  %594 = sext i32 %.074 to i64
  %595 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %594
  %596 = load i64, i64* %595, align 8
  %597 = add i64 %596, -10
  store i64 %597, i64* %595, align 8
  %598 = add i32 %.074, 1
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %599
  %601 = load i64, i64* %600, align 8
  %602 = add i64 %601, 1
  store i64 %602, i64* %600, align 8
  %603 = load i32, i32* @x.7, align 4
  %604 = load i32, i32* @y.8, align 4
  %605 = add i32 %603, -1
  %606 = mul i32 %605, %603
  %607 = and i32 %606, 1
  %608 = icmp eq i32 %607, 0
  %609 = icmp slt i32 %604, 10
  %610 = or i1 %609, %608
  %611 = select i1 %610, i32 1985968271, i32 1011636628
  br label %.backedge

612:                                              ; preds = %16
  br label %.backedge

613:                                              ; preds = %16
  br label %.backedge

614:                                              ; preds = %16
  %615 = add i32 %.074, 1
  br label %.backedge

616:                                              ; preds = %16
  %617 = load i64, i64* @s, align 8
  %618 = trunc i64 %617 to i32
  %619 = add i32 %618, -1
  br label %.backedge

620:                                              ; preds = %16
  %621 = icmp sgt i32 %.072, -1
  %622 = select i1 %621, i32 811427277, i32 1194285995
  br label %.backedge

623:                                              ; preds = %16
  %624 = load i32, i32* @x.7, align 4
  %625 = load i32, i32* @y.8, align 4
  %626 = add i32 %624, -1
  %627 = mul i32 %626, %624
  %628 = and i32 %627, 1
  %629 = icmp eq i32 %628, 0
  %630 = icmp slt i32 %625, 10
  %631 = or i1 %630, %629
  %632 = select i1 %631, i32 301199699, i32 65720637
  br label %.backedge

633:                                              ; preds = %16
  %634 = load i64, i64* @last, align 8
  %635 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %634
  %636 = load i64, i64* %635, align 8
  %637 = icmp ne i64 %636, 0
  store i1 %637, i1* %2, align 1
  %638 = load i32, i32* @x.7, align 4
  %639 = load i32, i32* @y.8, align 4
  %640 = add i32 %638, -1
  %641 = mul i32 %640, %638
  %642 = and i32 %641, 1
  %643 = icmp eq i32 %642, 0
  %644 = icmp slt i32 %639, 10
  %645 = or i1 %644, %643
  %646 = select i1 %645, i32 -1445096148, i32 65720637
  br label %.backedge

647:                                              ; preds = %16
  %.0..0..0.68 = load volatile i1, i1* %2, align 1
  %648 = select i1 %.0..0..0.68, i32 1430626361, i32 96749916
  br label %.backedge

649:                                              ; preds = %16
  %650 = load i64, i64* @last, align 8
  %651 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %650
  %652 = load i64, i64* %651, align 8
  %653 = getelementptr inbounds [1000 x i64], [1000 x i64]* @ans, i64 0, i64 %650
  store i64 %652, i64* %653, align 8
  %654 = add i32 %.082, 1
  store i64 0, i64* %651, align 8
  br label %.backedge

655:                                              ; preds = %16
  %656 = load i32, i32* @x.7, align 4
  %657 = load i32, i32* @y.8, align 4
  %658 = add i32 %656, -1
  %659 = mul i32 %658, %656
  %660 = and i32 %659, 1
  %661 = icmp eq i32 %660, 0
  %662 = icmp slt i32 %657, 10
  %663 = or i1 %662, %661
  %664 = select i1 %663, i32 -102368544, i32 1036801977
  br label %.backedge

665:                                              ; preds = %16
  %666 = sext i32 %.072 to i64
  %667 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %666
  %668 = load i64, i64* %667, align 8
  %669 = getelementptr inbounds [1000 x i64], [1000 x i64]* @ans, i64 0, i64 %666
  store i64 %668, i64* %669, align 8
  %.neg85 = add i32 %.082, 1
  %670 = load i32, i32* @x.7, align 4
  %671 = load i32, i32* @y.8, align 4
  %672 = add i32 %670, -1
  %673 = mul i32 %672, %670
  %674 = and i32 %673, 1
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %676, %675
  %678 = select i1 %677, i32 -1405877757, i32 1036801977
  br label %.backedge

679:                                              ; preds = %16
  br label %.backedge

680:                                              ; preds = %16
  %681 = load i32, i32* @x.7, align 4
  %682 = load i32, i32* @y.8, align 4
  %683 = add i32 %681, -1
  %684 = mul i32 %683, %681
  %685 = and i32 %684, 1
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %687, %686
  %689 = select i1 %688, i32 -1145433240, i32 1048995662
  br label %.backedge

690:                                              ; preds = %16
  %691 = add i32 %.072, -1
  %692 = load i32, i32* @x.7, align 4
  %693 = load i32, i32* @y.8, align 4
  %694 = add i32 %692, -1
  %695 = mul i32 %694, %692
  %696 = and i32 %695, 1
  %697 = icmp eq i32 %696, 0
  %698 = icmp slt i32 %693, 10
  %699 = or i1 %698, %697
  %700 = select i1 %699, i32 -1384439728, i32 1048995662
  br label %.backedge

701:                                              ; preds = %16
  br label %.backedge

702:                                              ; preds = %16
  %703 = load i32, i32* @x.7, align 4
  %704 = load i32, i32* @y.8, align 4
  %705 = add i32 %703, -1
  %706 = mul i32 %705, %703
  %707 = and i32 %706, 1
  %708 = icmp eq i32 %707, 0
  %709 = icmp slt i32 %704, 10
  %710 = or i1 %709, %708
  %711 = select i1 %710, i32 1956309243, i32 -1990727713
  br label %.backedge

712:                                              ; preds = %16
  %713 = icmp sgt i32 %.082, 80
  store i1 %713, i1* %1, align 1
  %714 = load i32, i32* @x.7, align 4
  %715 = load i32, i32* @y.8, align 4
  %716 = add i32 %714, -1
  %717 = mul i32 %716, %714
  %718 = and i32 %717, 1
  %719 = icmp eq i32 %718, 0
  %720 = icmp slt i32 %715, 10
  %721 = or i1 %720, %719
  %722 = select i1 %721, i32 1858589736, i32 -1990727713
  br label %.backedge

723:                                              ; preds = %16
  %.0..0..0.69 = load volatile i1, i1* %1, align 1
  %724 = select i1 %.0..0..0.69, i32 252991067, i32 -2066071527
  br label %.backedge

725:                                              ; preds = %16
  %726 = load i32, i32* @x.7, align 4
  %727 = load i32, i32* @y.8, align 4
  %728 = add i32 %726, -1
  %729 = mul i32 %728, %726
  %730 = and i32 %729, 1
  %731 = icmp eq i32 %730, 0
  %732 = icmp slt i32 %727, 10
  %733 = or i1 %732, %731
  %734 = select i1 %733, i32 -36673380, i32 -937360241
  br label %.backedge

735:                                              ; preds = %16
  %736 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %737 = load i32, i32* @x.7, align 4
  %738 = load i32, i32* @y.8, align 4
  %739 = add i32 %737, -1
  %740 = mul i32 %739, %737
  %741 = and i32 %740, 1
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %743, %742
  %745 = select i1 %744, i32 29600329, i32 -937360241
  br label %.backedge

746:                                              ; preds = %16
  br label %.backedge

747:                                              ; preds = %16
  %748 = load i64, i64* @s, align 8
  %749 = trunc i64 %748 to i32
  %750 = add i32 %749, -1
  br label %.backedge

751:                                              ; preds = %16
  %752 = icmp sgt i32 %.070, -1
  %753 = select i1 %752, i32 -832343317, i32 -585723041
  br label %.backedge

754:                                              ; preds = %16
  %755 = load i64, i64* @last, align 8
  %756 = getelementptr inbounds [1000 x i64], [1000 x i64]* @ans, i64 0, i64 %755
  %757 = load i64, i64* %756, align 8
  %.not = icmp eq i64 %757, 0
  %758 = select i1 %.not, i32 1995194001, i32 1771408339
  br label %.backedge

759:                                              ; preds = %16
  %760 = load i32, i32* @x.7, align 4
  %761 = load i32, i32* @y.8, align 4
  %762 = add i32 %760, -1
  %763 = mul i32 %762, %760
  %764 = and i32 %763, 1
  %765 = icmp eq i32 %764, 0
  %766 = icmp slt i32 %761, 10
  %767 = or i1 %766, %765
  %768 = select i1 %767, i32 -1790306462, i32 -1735737253
  br label %.backedge

769:                                              ; preds = %16
  %770 = load i64, i64* @last, align 8
  %771 = getelementptr inbounds [1000 x i64], [1000 x i64]* @ans, i64 0, i64 %770
  %772 = load i64, i64* %771, align 8
  %773 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %772)
  %774 = load i32, i32* @x.7, align 4
  %775 = load i32, i32* @y.8, align 4
  %776 = add i32 %774, -1
  %777 = mul i32 %776, %774
  %778 = and i32 %777, 1
  %779 = icmp eq i32 %778, 0
  %780 = icmp slt i32 %775, 10
  %781 = or i1 %780, %779
  %782 = select i1 %781, i32 -2032737099, i32 -1735737253
  br label %.backedge

783:                                              ; preds = %16
  br label %.backedge

784:                                              ; preds = %16
  %785 = sext i32 %.070 to i64
  %786 = getelementptr inbounds [1000 x i64], [1000 x i64]* @ans, i64 0, i64 %785
  %787 = load i64, i64* %786, align 8
  %788 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %787)
  %789 = load i64, i64* @last, align 8
  %790 = getelementptr inbounds [1000 x i64], [1000 x i64]* @ans, i64 0, i64 %789
  store i64 0, i64* %790, align 8
  br label %.backedge

791:                                              ; preds = %16
  %792 = add i32 %.070, -1
  br label %.backedge

793:                                              ; preds = %16
  br label %.backedge

794:                                              ; preds = %16
  %795 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

796:                                              ; preds = %16
  %797 = add i32 %.080, 1
  br label %.backedge

798:                                              ; preds = %16
  ret i32 0

799:                                              ; preds = %16
  store i32 0, i32* %11, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @latte, i64 0, i64 0), i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @latte, i64 1, i64 0), i32* nonnull dereferenceable(4) %11)
  store i32 0, i32* %12, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @cafe, i64 0, i64 0), i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @cafe, i64 1, i64 0), i32* nonnull dereferenceable(4) %12)
  store i32 0, i32* %13, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @all, i64 0, i64 0), i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @all, i64 1, i64 0), i32* nonnull dereferenceable(4) %13)
  store i32 0, i32* %14, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @ans, i64 0, i64 0), i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @ans, i64 1, i64 0), i32* nonnull dereferenceable(4) %14)
  %800 = call dereferenceable(280) %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE(%"class.std::basic_istream"* nonnull dereferenceable(280) @_ZSt3cin, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_Z1aB5cxx11)
  %801 = call dereferenceable(280) %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE(%"class.std::basic_istream"* nonnull dereferenceable(280) %800, %"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) @_Z1bB5cxx11)
  %802 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11) #6
  %803 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11) #6
  br label %.backedge

804:                                              ; preds = %16
  br label %.backedge

805:                                              ; preds = %16
  %806 = load i64, i64* @cop, align 8
  %807 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %806
  store i64 1, i64* %807, align 8
  br label %.backedge

808:                                              ; preds = %16
  %809 = sext i32 %.078 to i64
  %810 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %809)
  br label %.backedge

811:                                              ; preds = %16
  %812 = load i64, i64* @cop, align 8
  %813 = getelementptr inbounds [1000 x i64], [1000 x i64]* @latte, i64 0, i64 %812
  store i64 3, i64* %813, align 8
  br label %.backedge

814:                                              ; preds = %16
  %815 = sext i32 %.078 to i64
  %816 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1aB5cxx11, i64 %815)
  br label %.backedge

817:                                              ; preds = %16
  %818 = add i32 %.078, 1
  br label %.backedge

819:                                              ; preds = %16
  %820 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11) #6
  br label %.backedge

821:                                              ; preds = %16
  %822 = load i64, i64* @copp, align 8
  %823 = add i64 %822, -1
  store i64 %823, i64* @copp, align 8
  %824 = sext i32 %.076 to i64
  %825 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %824)
  br label %.backedge

826:                                              ; preds = %16
  %827 = load i64, i64* @copp, align 8
  %828 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %827
  store i64 0, i64* %828, align 8
  br label %.backedge

829:                                              ; preds = %16
  %830 = load i64, i64* @copp, align 8
  %831 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %830
  store i64 3, i64* %831, align 8
  br label %.backedge

832:                                              ; preds = %16
  %833 = load i64, i64* @copp, align 8
  %834 = getelementptr inbounds [1000 x i64], [1000 x i64]* @cafe, i64 0, i64 %833
  store i64 4, i64* %834, align 8
  br label %.backedge

835:                                              ; preds = %16
  %836 = sext i32 %.076 to i64
  %837 = call dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"* nonnull @_Z1bB5cxx11, i64 %836)
  br label %.backedge

838:                                              ; preds = %16
  br label %.backedge

839:                                              ; preds = %16
  %.neg84 = add i32 %.076, 1
  br label %.backedge

840:                                              ; preds = %16
  br label %.backedge

841:                                              ; preds = %16
  %842 = sext i32 %.074 to i64
  %843 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %842
  %844 = load i64, i64* %843, align 8
  %845 = add i64 %844, -10
  store i64 %845, i64* %843, align 8
  %846 = add i32 %.074, 1
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %847
  %849 = load i64, i64* %848, align 8
  %850 = add i64 %849, 1
  store i64 %850, i64* %848, align 8
  br label %.backedge

851:                                              ; preds = %16
  br label %.backedge

852:                                              ; preds = %16
  %853 = sext i32 %.072 to i64
  %854 = getelementptr inbounds [1000 x i64], [1000 x i64]* @all, i64 0, i64 %853
  %855 = load i64, i64* %854, align 8
  %856 = getelementptr inbounds [1000 x i64], [1000 x i64]* @ans, i64 0, i64 %853
  store i64 %855, i64* %856, align 8
  %857 = add i32 %.082, 1
  br label %.backedge

858:                                              ; preds = %16
  %.neg = add i32 %.072, -1
  br label %.backedge

859:                                              ; preds = %16
  br label %.backedge

860:                                              ; preds = %16
  %861 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

862:                                              ; preds = %16
  %863 = load i64, i64* @last, align 8
  %864 = getelementptr inbounds [1000 x i64], [1000 x i64]* @ans, i64 0, i64 %863
  %865 = load i64, i64* %864, align 8
  %866 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %865)
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* %0, i64* %1, i32* dereferenceable(4) %2) local_unnamed_addr #0 comdat {
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = load i32, i32* @x.9, align 4
  %7 = load i32, i32* @y.10, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %5, align 1
  %12 = icmp slt i32 %7, 10
  store i1 %12, i1* %4, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %3
  %.0.ph = phi i32 [ 689948579, %3 ], [ %.0.ph.be, %.outer.backedge ]
  br label %13

13:                                               ; preds = %.outer, %13
  switch i32 %.0.ph, label %13 [
    i32 689948579, label %14
    i32 1800855730, label %17
    i32 -1336122244, label %29
    i32 -2001363903, label %30
  ]

14:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %.0..0..0.1 = load volatile i1, i1* %4, align 1
  %15 = or i1 %.0..0..0., %.0..0..0.1
  %16 = select i1 %15, i32 1800855730, i32 -2001363903
  br label %.outer.backedge

17:                                               ; preds = %13
  %18 = tail call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %0)
  %19 = tail call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %1)
  tail call void @_ZSt8__fill_aIPxiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i64* %18, i64* %19, i32* nonnull dereferenceable(4) %2)
  %20 = load i32, i32* @x.9, align 4
  %21 = load i32, i32* @y.10, align 4
  %22 = add i32 %20, -1
  %23 = mul i32 %22, %20
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %26, %25
  %28 = select i1 %27, i32 -1336122244, i32 -2001363903
  br label %.outer.backedge

29:                                               ; preds = %13
  ret void

30:                                               ; preds = %13
  %31 = tail call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %0)
  %32 = tail call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %1)
  tail call void @_ZSt8__fill_aIPxiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i64* %31, i64* %32, i32* nonnull dereferenceable(4) %2)
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %30, %17, %14
  %.0.ph.be = phi i32 [ %16, %14 ], [ %28, %17 ], [ 1800855730, %30 ]
  br label %.outer
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZStrsIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE(%"class.std::basic_istream"* dereferenceable(280), %"class.std::__cxx11::basic_string"* dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv(%"class.std::__cxx11::basic_string"*) local_unnamed_addr #2

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

declare dereferenceable(1) i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEm(%"class.std::__cxx11::basic_string"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt8__fill_aIPxiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i64* %0, i64* %1, i32* dereferenceable(4) %2) local_unnamed_addr #4 comdat {
  %4 = load i32, i32* %2, align 4
  %5 = sext i32 %4 to i64
  br label %.outer

.outer:                                           ; preds = %9, %3
  %.06.ph = phi i64* [ %10, %9 ], [ %0, %3 ]
  %.not = icmp eq i64* %.06.ph, %1
  %6 = select i1 %.not, i32 337374156, i32 -260647907
  br label %.outer8

.outer8:                                          ; preds = %.outer8.backedge, %.outer
  %.0.ph = phi i32 [ -1007035428, %.outer ], [ %.0.ph.be, %.outer8.backedge ]
  br label %7

7:                                                ; preds = %.outer8, %7
  switch i32 %.0.ph, label %7 [
    i32 -1007035428, label %.outer8.backedge
    i32 -260647907, label %8
    i32 1046915276, label %9
    i32 337374156, label %11
  ]

8:                                                ; preds = %7
  store i64 %5, i64* %.06.ph, align 8
  br label %.outer8.backedge

.outer8.backedge:                                 ; preds = %7, %8
  %.0.ph.be = phi i32 [ 1046915276, %8 ], [ %6, %7 ]
  br label %.outer8

9:                                                ; preds = %7
  %10 = getelementptr inbounds i64, i64* %.06.ph, i64 1
  br label %.outer

11:                                               ; preds = %7
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %0) local_unnamed_addr #0 comdat {
  %2 = tail call i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %0)
  ret i64* %2
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %0) local_unnamed_addr #4 comdat align 2 {
  %2 = alloca i64*, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.15, align 4
  %6 = load i32, i32* @y.16, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  %12 = or i1 %11, %10
  %13 = select i1 %12, i32 -599187745, i32 -889795717
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.0.ph = phi i32 [ 1991820523, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %14

14:                                               ; preds = %.outer, %14
  switch i32 %.0.ph, label %14 [
    i32 1991820523, label %15
    i32 992537617, label %.outer.backedge
    i32 -599187745, label %18
    i32 -889795717, label %19
  ]

15:                                               ; preds = %14
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %16 = or i1 %.0..0..0., %.0..0..0.1
  %17 = select i1 %16, i32 992537617, i32 -889795717
  br label %.outer.backedge

18:                                               ; preds = %14
  store i64* %0, i64** %2, align 8
  %.0..0..0.2 = load volatile i64*, i64** %2, align 8
  ret i64* %.0..0..0.2

19:                                               ; preds = %14
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %14, %19, %15
  %.0.ph.be = phi i32 [ %17, %15 ], [ 992537617, %19 ], [ %13, %14 ]
  br label %.outer
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s425716936.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  tail call fastcc void @__cxx_global_var_init.1()
  tail call fastcc void @__cxx_global_var_init.2()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
