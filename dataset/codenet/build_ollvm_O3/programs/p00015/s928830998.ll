; ModuleID = 'build_ollvm/programs/p00015/s928830998.ll'
source_filename = "Project_CodeNet_C++1400/p00015/s928830998.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s928830998.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@str.3 = private unnamed_addr constant [9 x i8] c"overflow\00", align 1

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main(i32 %0, i8** nocapture readnone %1) local_unnamed_addr #4 {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i32, align 4
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i32, align 4
  %9 = alloca [101 x i8], align 16
  %10 = alloca [101 x i8], align 16
  %11 = alloca [101 x i8], align 16
  %12 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %8)
  %13 = getelementptr inbounds [101 x i8], [101 x i8]* %11, i64 0, i64 0
  %14 = getelementptr inbounds [101 x i8], [101 x i8]* %11, i64 0, i64 1
  %15 = getelementptr inbounds [101 x i8], [101 x i8]* %11, i64 0, i64 80
  %16 = getelementptr inbounds [101 x i8], [101 x i8]* %9, i64 0, i64 0
  %17 = getelementptr inbounds [101 x i8], [101 x i8]* %10, i64 0, i64 0
  br label %18

18:                                               ; preds = %.backedge, %2
  %.074 = phi i32 [ undef, %2 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %2 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %2 ], [ %.070.be, %.backedge ]
  %.068 = phi i8 [ undef, %2 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %2 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ 0, %2 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %2 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ -471247294, %2 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %2 ], [ %.058.be, %.backedge ]
  %.056 = phi i32 [ undef, %2 ], [ %.056.be, %.backedge ]
  %.0 = phi i32 [ undef, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.060, label %.backedge [
    i32 -471247294, label %19
    i32 1929555324, label %22
    i32 -1975254958, label %25
    i32 1009959542, label %28
    i32 204041944, label %38
    i32 1358988548, label %52
    i32 -1504002790, label %54
    i32 824269845, label %64
    i32 -749652425, label %75
    i32 1188692689, label %77
    i32 -251269776, label %78
    i32 -231795275, label %84
    i32 -10031109, label %87
    i32 -581240375, label %88
    i32 57257435, label %91
    i32 38125078, label %94
    i32 -251682745, label %95
    i32 -1763955122, label %105
    i32 1113035339, label %115
    i32 -1492143450, label %116
    i32 218615497, label %126
    i32 1996894004, label %136
    i32 1751280302, label %137
    i32 1715934967, label %140
    i32 -2068413276, label %141
    i32 1722814384, label %151
    i32 999433185, label %161
    i32 311567934, label %162
    i32 -5346910, label %165
    i32 -1381380668, label %175
    i32 121337541, label %185
    i32 -611714789, label %186
    i32 -146303589, label %188
    i32 856794913, label %191
    i32 -199762227, label %194
    i32 -568635160, label %200
    i32 1232241321, label %201
    i32 1946819244, label %204
    i32 153716439, label %210
    i32 998071119, label %220
    i32 816253306, label %230
    i32 1703709393, label %231
    i32 625565528, label %238
    i32 -1543603755, label %248
    i32 1904266073, label %259
    i32 1486177475, label %260
    i32 416306104, label %261
    i32 1575648313, label %271
    i32 170118068, label %288
    i32 163377070, label %290
    i32 -670043014, label %293
    i32 426166302, label %296
    i32 -92805869, label %297
    i32 1118808313, label %298
    i32 -1394255099, label %300
    i32 -1815739217, label %304
    i32 1078969640, label %314
    i32 -486131468, label %324
    i32 1538462098, label %325
    i32 79079777, label %335
    i32 1095644821, label %347
    i32 1649537938, label %349
    i32 1775825155, label %359
    i32 1055594677, label %369
    i32 1856004841, label %370
    i32 739139026, label %380
    i32 -1791510759, label %390
    i32 -260183112, label %391
    i32 1904519243, label %392
    i32 -1523157249, label %393
    i32 6462747, label %394
    i32 -664178562, label %395
    i32 -814542797, label %396
    i32 -466970597, label %397
    i32 864012653, label %398
    i32 -1315639372, label %400
    i32 200763591, label %401
    i32 -762738720, label %402
    i32 -791158475, label %403
    i32 -1319497240, label %405
    i32 2092690616, label %412
    i32 -1523305172, label %413
    i32 693376502, label %414
    i32 -1169312333, label %415
  ]

.backedge:                                        ; preds = %18, %415, %414, %413, %412, %405, %403, %402, %401, %400, %398, %397, %396, %395, %393, %392, %391, %390, %380, %370, %369, %359, %349, %347, %335, %325, %324, %314, %304, %300, %298, %297, %296, %293, %290, %288, %271, %261, %260, %259, %248, %238, %231, %230, %220, %210, %204, %201, %200, %194, %191, %188, %186, %185, %175, %165, %162, %161, %151, %141, %140, %137, %136, %126, %116, %115, %105, %95, %94, %91, %88, %87, %84, %78, %77, %75, %64, %54, %52, %38, %28, %25, %22, %19
  %.074.be = phi i32 [ %.074, %18 ], [ %.074, %415 ], [ %.074, %414 ], [ %.074, %413 ], [ %.074, %412 ], [ %.074, %405 ], [ %.074, %403 ], [ %.074, %402 ], [ %.074, %401 ], [ %.074, %400 ], [ %399, %398 ], [ %.074, %397 ], [ %.074, %396 ], [ %.074, %395 ], [ %.074, %393 ], [ %.074, %392 ], [ %.074, %391 ], [ %.074, %390 ], [ %.074, %380 ], [ %.074, %370 ], [ %.074, %369 ], [ %.074, %359 ], [ %.074, %349 ], [ %.074, %347 ], [ %.074, %335 ], [ %.074, %325 ], [ %.074, %324 ], [ %.074, %314 ], [ %.074, %304 ], [ %.074, %300 ], [ %299, %298 ], [ %.074, %297 ], [ %.074, %296 ], [ %.074, %293 ], [ %.074, %290 ], [ %.074, %288 ], [ %.074, %271 ], [ %.074, %261 ], [ %.074, %260 ], [ %.074, %259 ], [ %.074, %248 ], [ %.074, %238 ], [ %.074, %231 ], [ %.074, %230 ], [ %.074, %220 ], [ %.074, %210 ], [ %.074, %204 ], [ %.074, %201 ], [ %.074, %200 ], [ %.074, %194 ], [ %.074, %191 ], [ %.074, %188 ], [ %187, %186 ], [ %.074, %185 ], [ %.074, %175 ], [ %.074, %165 ], [ %.058, %162 ], [ %.074, %161 ], [ %.074, %151 ], [ %.074, %141 ], [ %.074, %140 ], [ %.074, %137 ], [ %.074, %136 ], [ %.neg86, %126 ], [ %.074, %116 ], [ %.074, %115 ], [ %.074, %105 ], [ %.074, %95 ], [ %.074, %94 ], [ %.074, %91 ], [ %.074, %88 ], [ %.074, %87 ], [ %.074, %84 ], [ %.074, %78 ], [ %.074, %77 ], [ %.074, %75 ], [ %.074, %64 ], [ %.074, %54 ], [ %.074, %52 ], [ %.074, %38 ], [ %.074, %28 ], [ %.074, %25 ], [ 0, %22 ], [ %.074, %19 ]
  %.072.be = phi i32 [ %.072, %18 ], [ %.072, %415 ], [ %.072, %414 ], [ %.072, %413 ], [ %.072, %412 ], [ %410, %405 ], [ %.072, %403 ], [ %.072, %402 ], [ %.072, %401 ], [ %.072, %400 ], [ %.072, %398 ], [ %.072, %397 ], [ %.072, %396 ], [ %.072, %395 ], [ %.072, %393 ], [ %.072, %392 ], [ %.072, %391 ], [ %.072, %390 ], [ %.072, %380 ], [ %.072, %370 ], [ %.072, %369 ], [ %.072, %359 ], [ %.072, %349 ], [ %.072, %347 ], [ %.072, %335 ], [ %.072, %325 ], [ %.072, %324 ], [ %.072, %314 ], [ %.072, %304 ], [ %.072, %300 ], [ %.072, %298 ], [ %.072, %297 ], [ %.072, %296 ], [ %.072, %293 ], [ %.072, %290 ], [ %.072, %288 ], [ %276, %271 ], [ %.072, %261 ], [ %.072, %260 ], [ %.072, %259 ], [ %.072, %248 ], [ %.072, %238 ], [ %.072, %231 ], [ %.072, %230 ], [ %.072, %220 ], [ %.072, %210 ], [ %.072, %204 ], [ %.072, %201 ], [ %.072, %200 ], [ %.072, %194 ], [ %.072, %191 ], [ %.072, %188 ], [ %.072, %186 ], [ %.072, %185 ], [ %.072, %175 ], [ %.072, %165 ], [ %.072, %162 ], [ %.072, %161 ], [ %.072, %151 ], [ %.072, %141 ], [ %.072, %140 ], [ %.neg84, %137 ], [ %.072, %136 ], [ %.072, %126 ], [ %.072, %116 ], [ %.072, %115 ], [ %.072, %105 ], [ %.072, %95 ], [ %.072, %94 ], [ %.072, %91 ], [ %.072, %88 ], [ %.072, %87 ], [ %.072, %84 ], [ %.072, %78 ], [ %.074, %77 ], [ %.072, %75 ], [ %.072, %64 ], [ %.072, %54 ], [ %.072, %52 ], [ %.072, %38 ], [ %.072, %28 ], [ %.072, %25 ], [ 0, %22 ], [ %.072, %19 ]
  %.070.be = phi i32 [ %.070, %18 ], [ %.070, %415 ], [ %.070, %414 ], [ %.070, %413 ], [ %.070, %412 ], [ %411, %405 ], [ %.070, %403 ], [ %.070, %402 ], [ %.070, %401 ], [ %.070, %400 ], [ %.070, %398 ], [ %.070, %397 ], [ %.070, %396 ], [ %.070, %395 ], [ %.070, %393 ], [ %.070, %392 ], [ %.070, %391 ], [ %.070, %390 ], [ %.070, %380 ], [ %.070, %370 ], [ %.070, %369 ], [ %.070, %359 ], [ %.070, %349 ], [ %.070, %347 ], [ %.070, %335 ], [ %.070, %325 ], [ %.070, %324 ], [ %.070, %314 ], [ %.070, %304 ], [ %.070, %300 ], [ %.070, %298 ], [ %.070, %297 ], [ %.070, %296 ], [ %.070, %293 ], [ %.070, %290 ], [ %.070, %288 ], [ %277, %271 ], [ %.070, %261 ], [ %.070, %260 ], [ %.070, %259 ], [ %.070, %248 ], [ %.070, %238 ], [ %.070, %231 ], [ %.070, %230 ], [ %.070, %220 ], [ %.070, %210 ], [ %.070, %204 ], [ %.070, %201 ], [ %.070, %200 ], [ %.070, %194 ], [ %.070, %191 ], [ %.070, %188 ], [ %.070, %186 ], [ %.070, %185 ], [ %.070, %175 ], [ %.070, %165 ], [ %.070, %162 ], [ %.070, %161 ], [ %.070, %151 ], [ %.070, %141 ], [ %.070, %140 ], [ %.neg85, %137 ], [ %.070, %136 ], [ %.070, %126 ], [ %.070, %116 ], [ %.070, %115 ], [ %.070, %105 ], [ %.070, %95 ], [ %.070, %94 ], [ %.070, %91 ], [ %.070, %88 ], [ %.074, %87 ], [ %.070, %84 ], [ %.070, %78 ], [ %.070, %77 ], [ %.070, %75 ], [ %.070, %64 ], [ %.070, %54 ], [ %.070, %52 ], [ %.070, %38 ], [ %.070, %28 ], [ %.070, %25 ], [ 0, %22 ], [ %.070, %19 ]
  %.068.be = phi i8 [ %.068, %18 ], [ %.068, %415 ], [ %.068, %414 ], [ %.068, %413 ], [ %.068, %412 ], [ %.068, %405 ], [ 1, %403 ], [ %.068, %402 ], [ %.068, %401 ], [ %.068, %400 ], [ %.068, %398 ], [ %.068, %397 ], [ %.068, %396 ], [ %.068, %395 ], [ %.068, %393 ], [ %.068, %392 ], [ %.068, %391 ], [ %.068, %390 ], [ %.068, %380 ], [ %.068, %370 ], [ %.068, %369 ], [ %.068, %359 ], [ %.068, %349 ], [ %.068, %347 ], [ %.068, %335 ], [ %.068, %325 ], [ %.068, %324 ], [ %.068, %314 ], [ %.068, %304 ], [ %.068, %300 ], [ %.068, %298 ], [ %.068, %297 ], [ %.068, %296 ], [ %.068, %293 ], [ %.068, %290 ], [ %.068, %288 ], [ %.068, %271 ], [ %.068, %261 ], [ 0, %260 ], [ %.068, %259 ], [ 1, %248 ], [ %.068, %238 ], [ %.068, %231 ], [ %.068, %230 ], [ %.068, %220 ], [ %.068, %210 ], [ %.068, %204 ], [ %.068, %201 ], [ %.068, %200 ], [ %.068, %194 ], [ %.068, %191 ], [ %.068, %188 ], [ 0, %186 ], [ %.068, %185 ], [ %.068, %175 ], [ %.068, %165 ], [ %.068, %162 ], [ %.068, %161 ], [ %.068, %151 ], [ %.068, %141 ], [ %.068, %140 ], [ %.068, %137 ], [ %.068, %136 ], [ %.068, %126 ], [ %.068, %116 ], [ %.068, %115 ], [ %.068, %105 ], [ %.068, %95 ], [ %.068, %94 ], [ %.068, %91 ], [ %.068, %88 ], [ %.068, %87 ], [ %.068, %84 ], [ %.068, %78 ], [ %.068, %77 ], [ %.068, %75 ], [ %.068, %64 ], [ %.068, %54 ], [ %.068, %52 ], [ %.068, %38 ], [ %.068, %28 ], [ %.068, %25 ], [ %.068, %22 ], [ %.068, %19 ]
  %.066.be = phi i32 [ %.066, %18 ], [ %.066, %415 ], [ %.066, %414 ], [ %.066, %413 ], [ %.066, %412 ], [ %.066, %405 ], [ %.066, %403 ], [ %.066, %402 ], [ %.066, %401 ], [ %.066, %400 ], [ %.066, %398 ], [ %.066, %397 ], [ %.066, %396 ], [ %.066, %395 ], [ %.066, %393 ], [ %.066, %392 ], [ %.066, %391 ], [ %.066, %390 ], [ %.066, %380 ], [ %.066, %370 ], [ %.066, %369 ], [ %.066, %359 ], [ %.066, %349 ], [ %.066, %347 ], [ %.066, %335 ], [ %.066, %325 ], [ %.066, %324 ], [ %.066, %314 ], [ %.066, %304 ], [ %.066, %300 ], [ %.066, %298 ], [ %.066, %297 ], [ %.066, %296 ], [ %.066, %293 ], [ %.066, %290 ], [ %.066, %288 ], [ %.066, %271 ], [ %.066, %261 ], [ %.066, %260 ], [ %.066, %259 ], [ %.066, %248 ], [ %.066, %238 ], [ %.066, %231 ], [ %.066, %230 ], [ %.066, %220 ], [ %.066, %210 ], [ %.066, %204 ], [ %.056, %201 ], [ %.066, %200 ], [ %.066, %194 ], [ %.066, %191 ], [ %.066, %188 ], [ %.066, %186 ], [ %.066, %185 ], [ %.066, %175 ], [ %.066, %165 ], [ %.066, %162 ], [ %.066, %161 ], [ %.066, %151 ], [ %.066, %141 ], [ %.066, %140 ], [ %.066, %137 ], [ %.066, %136 ], [ %.066, %126 ], [ %.066, %116 ], [ %.066, %115 ], [ %.066, %105 ], [ %.066, %95 ], [ %.066, %94 ], [ %.066, %91 ], [ %.066, %88 ], [ %.066, %87 ], [ %.066, %84 ], [ %.066, %78 ], [ %.066, %77 ], [ %.066, %75 ], [ %.066, %64 ], [ %.066, %54 ], [ %.066, %52 ], [ %.066, %38 ], [ %.066, %28 ], [ %.066, %25 ], [ %.066, %22 ], [ %.066, %19 ]
  %.064.be = phi i32 [ %.064, %18 ], [ %.064, %415 ], [ %.064, %414 ], [ %.064, %413 ], [ %.064, %412 ], [ %.064, %405 ], [ %.064, %403 ], [ %.064, %402 ], [ %.064, %401 ], [ %.064, %400 ], [ %.064, %398 ], [ %.064, %397 ], [ %.064, %396 ], [ %.064, %395 ], [ %.neg, %393 ], [ %.064, %392 ], [ %.064, %391 ], [ %.064, %390 ], [ %.064, %380 ], [ %.064, %370 ], [ %.064, %369 ], [ %.064, %359 ], [ %.064, %349 ], [ %.064, %347 ], [ %.064, %335 ], [ %.064, %325 ], [ %.064, %324 ], [ %.064, %314 ], [ %.064, %304 ], [ %.064, %300 ], [ %.064, %298 ], [ %.064, %297 ], [ %.064, %296 ], [ %.064, %293 ], [ %.064, %290 ], [ %.064, %288 ], [ %.064, %271 ], [ %.064, %261 ], [ %.064, %260 ], [ %.064, %259 ], [ %.064, %248 ], [ %.064, %238 ], [ %.064, %231 ], [ %.064, %230 ], [ %.064, %220 ], [ %.064, %210 ], [ %.064, %204 ], [ %.064, %201 ], [ %.064, %200 ], [ %.064, %194 ], [ %.064, %191 ], [ %.064, %188 ], [ %.064, %186 ], [ %.064, %185 ], [ %.064, %175 ], [ %.064, %165 ], [ %.064, %162 ], [ %.064, %161 ], [ %.064, %151 ], [ %.064, %141 ], [ %.064, %140 ], [ %.064, %137 ], [ %.064, %136 ], [ %.064, %126 ], [ %.064, %116 ], [ %.064, %115 ], [ %.064, %105 ], [ %.064, %95 ], [ %.064, %94 ], [ %.064, %91 ], [ %.064, %88 ], [ %.064, %87 ], [ %.064, %84 ], [ %.064, %78 ], [ %.064, %77 ], [ %.064, %75 ], [ %.064, %64 ], [ %.064, %54 ], [ %.064, %52 ], [ %.064, %38 ], [ %.064, %28 ], [ %.064, %25 ], [ %.064, %22 ], [ %.064, %19 ]
  %.062.be = phi i32 [ %.062, %18 ], [ %.062, %415 ], [ %.062, %414 ], [ %.062, %413 ], [ %.062, %412 ], [ %.062, %405 ], [ %404, %403 ], [ %.062, %402 ], [ %.062, %401 ], [ %.062, %400 ], [ %.062, %398 ], [ %.062, %397 ], [ %.062, %396 ], [ %.062, %395 ], [ %.062, %393 ], [ %.062, %392 ], [ %.062, %391 ], [ %.062, %390 ], [ %.062, %380 ], [ %.062, %370 ], [ %.062, %369 ], [ %.062, %359 ], [ %.062, %349 ], [ %.062, %347 ], [ %.062, %335 ], [ %.062, %325 ], [ %.062, %324 ], [ %.062, %314 ], [ %.062, %304 ], [ %.062, %300 ], [ %.062, %298 ], [ %.062, %297 ], [ %.062, %296 ], [ %.062, %293 ], [ %.062, %290 ], [ %.062, %288 ], [ %.062, %271 ], [ %.062, %261 ], [ %.062, %260 ], [ %.062, %259 ], [ %249, %248 ], [ %.062, %238 ], [ %235, %231 ], [ %.062, %230 ], [ %.062, %220 ], [ %.062, %210 ], [ %.062, %204 ], [ %.062, %201 ], [ %.062, %200 ], [ %.062, %194 ], [ %.062, %191 ], [ %.062, %188 ], [ %.062, %186 ], [ %.062, %185 ], [ %.062, %175 ], [ %.062, %165 ], [ %.062, %162 ], [ %.062, %161 ], [ %.062, %151 ], [ %.062, %141 ], [ %.062, %140 ], [ %.062, %137 ], [ %.062, %136 ], [ %.062, %126 ], [ %.062, %116 ], [ %.062, %115 ], [ %.062, %105 ], [ %.062, %95 ], [ %.062, %94 ], [ %.062, %91 ], [ %.062, %88 ], [ %.062, %87 ], [ %.062, %84 ], [ %.062, %78 ], [ %.062, %77 ], [ %.062, %75 ], [ %.062, %64 ], [ %.062, %54 ], [ %.062, %52 ], [ %.062, %38 ], [ %.062, %28 ], [ %.062, %25 ], [ %.062, %22 ], [ %.062, %19 ]
  %.060.be = phi i32 [ %.060, %18 ], [ 739139026, %415 ], [ 1775825155, %414 ], [ 79079777, %413 ], [ 1078969640, %412 ], [ 1575648313, %405 ], [ -1543603755, %403 ], [ 998071119, %402 ], [ -1381380668, %401 ], [ 1722814384, %400 ], [ 218615497, %398 ], [ -1763955122, %397 ], [ 824269845, %396 ], [ 204041944, %395 ], [ -471247294, %393 ], [ -1523157249, %392 ], [ 1904519243, %391 ], [ -260183112, %390 ], [ %389, %380 ], [ %379, %370 ], [ -260183112, %369 ], [ %368, %359 ], [ %358, %349 ], [ %348, %347 ], [ %346, %335 ], [ %334, %325 ], [ 1904519243, %324 ], [ %323, %314 ], [ %313, %304 ], [ %303, %300 ], [ -146303589, %298 ], [ 1118808313, %297 ], [ -1394255099, %296 ], [ %295, %293 ], [ %292, %290 ], [ %289, %288 ], [ %287, %271 ], [ %270, %261 ], [ 416306104, %260 ], [ 416306104, %259 ], [ %258, %248 ], [ %247, %238 ], [ %237, %231 ], [ 1703709393, %230 ], [ %229, %220 ], [ %219, %210 ], [ 1703709393, %204 ], [ %203, %201 ], [ 1232241321, %200 ], [ 1232241321, %194 ], [ %193, %191 ], [ %190, %188 ], [ -146303589, %186 ], [ -1523157249, %185 ], [ %184, %175 ], [ %174, %165 ], [ %164, %162 ], [ 311567934, %161 ], [ %160, %151 ], [ %150, %141 ], [ 311567934, %140 ], [ %139, %137 ], [ -1975254958, %136 ], [ %135, %126 ], [ %125, %116 ], [ -1492143450, %115 ], [ %114, %105 ], [ %104, %95 ], [ 1751280302, %94 ], [ %93, %91 ], [ %90, %88 ], [ -581240375, %87 ], [ %86, %84 ], [ %83, %78 ], [ -251269776, %77 ], [ %76, %75 ], [ %74, %64 ], [ %63, %54 ], [ %53, %52 ], [ %51, %38 ], [ %37, %28 ], [ %27, %25 ], [ -1975254958, %22 ], [ %21, %19 ]
  %.058.be = phi i32 [ %.058, %18 ], [ %.058, %415 ], [ %.058, %414 ], [ %.058, %413 ], [ %.058, %412 ], [ %.058, %405 ], [ %.058, %403 ], [ %.058, %402 ], [ %.058, %401 ], [ %.058, %400 ], [ %.058, %398 ], [ %.058, %397 ], [ %.058, %396 ], [ %.058, %395 ], [ %.058, %393 ], [ %.058, %392 ], [ %.058, %391 ], [ %.058, %390 ], [ %.058, %380 ], [ %.058, %370 ], [ %.058, %369 ], [ %.058, %359 ], [ %.058, %349 ], [ %.058, %347 ], [ %.058, %335 ], [ %.058, %325 ], [ %.058, %324 ], [ %.058, %314 ], [ %.058, %304 ], [ %.058, %300 ], [ %.058, %298 ], [ %.058, %297 ], [ %.058, %296 ], [ %.058, %293 ], [ %.058, %290 ], [ %.058, %288 ], [ %.058, %271 ], [ %.058, %261 ], [ %.058, %260 ], [ %.058, %259 ], [ %.058, %248 ], [ %.058, %238 ], [ %.058, %231 ], [ %.058, %230 ], [ %.058, %220 ], [ %.058, %210 ], [ %.058, %204 ], [ %.058, %201 ], [ %.058, %200 ], [ %.058, %194 ], [ %.058, %191 ], [ %.058, %188 ], [ %.058, %186 ], [ %.058, %185 ], [ %.058, %175 ], [ %.058, %165 ], [ %.058, %162 ], [ %.0..0..0.53, %161 ], [ %.058, %151 ], [ %.058, %141 ], [ %.072, %140 ], [ %.058, %137 ], [ %.058, %136 ], [ %.058, %126 ], [ %.058, %116 ], [ %.058, %115 ], [ %.058, %105 ], [ %.058, %95 ], [ %.058, %94 ], [ %.058, %91 ], [ %.058, %88 ], [ %.058, %87 ], [ %.058, %84 ], [ %.058, %78 ], [ %.058, %77 ], [ %.058, %75 ], [ %.058, %64 ], [ %.058, %54 ], [ %.058, %52 ], [ %.058, %38 ], [ %.058, %28 ], [ %.058, %25 ], [ %.058, %22 ], [ %.058, %19 ]
  %.056.be = phi i32 [ %.056, %18 ], [ %.056, %415 ], [ %.056, %414 ], [ %.056, %413 ], [ %.056, %412 ], [ %.056, %405 ], [ %.056, %403 ], [ %.056, %402 ], [ %.056, %401 ], [ %.056, %400 ], [ %.056, %398 ], [ %.056, %397 ], [ %.056, %396 ], [ %.056, %395 ], [ %.056, %393 ], [ %.056, %392 ], [ %.056, %391 ], [ %.056, %390 ], [ %.056, %380 ], [ %.056, %370 ], [ %.056, %369 ], [ %.056, %359 ], [ %.056, %349 ], [ %.056, %347 ], [ %.056, %335 ], [ %.056, %325 ], [ %.056, %324 ], [ %.056, %314 ], [ %.056, %304 ], [ %.056, %300 ], [ %.056, %298 ], [ %.056, %297 ], [ %.056, %296 ], [ %.056, %293 ], [ %.056, %290 ], [ %.056, %288 ], [ %.056, %271 ], [ %.056, %261 ], [ %.056, %260 ], [ %.056, %259 ], [ %.056, %248 ], [ %.056, %238 ], [ %.056, %231 ], [ %.056, %230 ], [ %.056, %220 ], [ %.056, %210 ], [ %.056, %204 ], [ %.056, %201 ], [ 0, %200 ], [ %199, %194 ], [ %.056, %191 ], [ %.056, %188 ], [ %.056, %186 ], [ %.056, %185 ], [ %.056, %175 ], [ %.056, %165 ], [ %.056, %162 ], [ %.056, %161 ], [ %.056, %151 ], [ %.056, %141 ], [ %.056, %140 ], [ %.056, %137 ], [ %.056, %136 ], [ %.056, %126 ], [ %.056, %116 ], [ %.056, %115 ], [ %.056, %105 ], [ %.056, %95 ], [ %.056, %94 ], [ %.056, %91 ], [ %.056, %88 ], [ %.056, %87 ], [ %.056, %84 ], [ %.056, %78 ], [ %.056, %77 ], [ %.056, %75 ], [ %.056, %64 ], [ %.056, %54 ], [ %.056, %52 ], [ %.056, %38 ], [ %.056, %28 ], [ %.056, %25 ], [ %.056, %22 ], [ %.056, %19 ]
  %.0.be = phi i32 [ %.0, %18 ], [ %.0, %415 ], [ %.0, %414 ], [ %.0, %413 ], [ %.0, %412 ], [ %.0, %405 ], [ %.0, %403 ], [ %.0, %402 ], [ %.0, %401 ], [ %.0, %400 ], [ %.0, %398 ], [ %.0, %397 ], [ %.0, %396 ], [ %.0, %395 ], [ %.0, %393 ], [ %.0, %392 ], [ %.0, %391 ], [ %.0, %390 ], [ %.0, %380 ], [ %.0, %370 ], [ %.0, %369 ], [ %.0, %359 ], [ %.0, %349 ], [ %.0, %347 ], [ %.0, %335 ], [ %.0, %325 ], [ %.0, %324 ], [ %.0, %314 ], [ %.0, %304 ], [ %.0, %300 ], [ %.0, %298 ], [ %.0, %297 ], [ %.0, %296 ], [ %.0, %293 ], [ %.0, %290 ], [ %.0, %288 ], [ %.0, %271 ], [ %.0, %261 ], [ %.0, %260 ], [ %.0, %259 ], [ %.0, %248 ], [ %.0, %238 ], [ %.0, %231 ], [ 0, %230 ], [ %.0, %220 ], [ %.0, %210 ], [ %209, %204 ], [ %.0, %201 ], [ %.0, %200 ], [ %.0, %194 ], [ %.0, %191 ], [ %.0, %188 ], [ %.0, %186 ], [ %.0, %185 ], [ %.0, %175 ], [ %.0, %165 ], [ %.0, %162 ], [ %.0, %161 ], [ %.0, %151 ], [ %.0, %141 ], [ %.0, %140 ], [ %.0, %137 ], [ %.0, %136 ], [ %.0, %126 ], [ %.0, %116 ], [ %.0, %115 ], [ %.0, %105 ], [ %.0, %95 ], [ %.0, %94 ], [ %.0, %91 ], [ %.0, %88 ], [ %.0, %87 ], [ %.0, %84 ], [ %.0, %78 ], [ %.0, %77 ], [ %.0, %75 ], [ %.0, %64 ], [ %.0, %54 ], [ %.0, %52 ], [ %.0, %38 ], [ %.0, %28 ], [ %.0, %25 ], [ %.0, %22 ], [ %.0, %19 ]
  br label %18

19:                                               ; preds = %18
  %20 = load i32, i32* %8, align 4
  %.not87 = icmp eq i32 %.064, %20
  %21 = select i1 %.not87, i32 6462747, i32 1929555324
  br label %.backedge

22:                                               ; preds = %18
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(101) %16, i8 0, i64 101, i1 false)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(101) %17, i8 0, i64 101, i1 false)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(101) %13, i8 0, i64 101, i1 false)
  %23 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %16)
  %24 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %17)
  br label %.backedge

25:                                               ; preds = %18
  %26 = icmp slt i32 %.074, 100
  %27 = select i1 %26, i32 1009959542, i32 1751280302
  br label %.backedge

28:                                               ; preds = %18
  %29 = load i32, i32* @x.4, align 4
  %30 = load i32, i32* @y.5, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 204041944, i32 -664178562
  br label %.backedge

38:                                               ; preds = %18
  %39 = sext i32 %.074 to i64
  %40 = getelementptr inbounds [101 x i8], [101 x i8]* %9, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  store i1 %42, i1* %7, align 1
  %43 = load i32, i32* @x.4, align 4
  %44 = load i32, i32* @y.5, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 1358988548, i32 -664178562
  br label %.backedge

52:                                               ; preds = %18
  %.0..0..0. = load volatile i1, i1* %7, align 1
  %53 = select i1 %.0..0..0., i32 -1504002790, i32 -251269776
  br label %.backedge

54:                                               ; preds = %18
  %55 = load i32, i32* @x.4, align 4
  %56 = load i32, i32* @y.5, align 4
  %57 = add i32 %55, -1
  %58 = mul i32 %57, %55
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %61, %60
  %63 = select i1 %62, i32 824269845, i32 -814542797
  br label %.backedge

64:                                               ; preds = %18
  %65 = icmp eq i32 %.072, 0
  store i1 %65, i1* %6, align 1
  %66 = load i32, i32* @x.4, align 4
  %67 = load i32, i32* @y.5, align 4
  %68 = add i32 %66, -1
  %69 = mul i32 %68, %66
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %72, %71
  %74 = select i1 %73, i32 -749652425, i32 -814542797
  br label %.backedge

75:                                               ; preds = %18
  %.0..0..0.52 = load volatile i1, i1* %6, align 1
  %76 = select i1 %.0..0..0.52, i32 1188692689, i32 -251269776
  br label %.backedge

77:                                               ; preds = %18
  br label %.backedge

78:                                               ; preds = %18
  %79 = sext i32 %.074 to i64
  %80 = getelementptr inbounds [101 x i8], [101 x i8]* %10, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 0
  %83 = select i1 %82, i32 -231795275, i32 -581240375
  br label %.backedge

84:                                               ; preds = %18
  %85 = icmp eq i32 %.070, 0
  %86 = select i1 %85, i32 -10031109, i32 -581240375
  br label %.backedge

87:                                               ; preds = %18
  br label %.backedge

88:                                               ; preds = %18
  %89 = icmp sgt i32 %.072, 0
  %90 = select i1 %89, i32 57257435, i32 -251682745
  br label %.backedge

91:                                               ; preds = %18
  %92 = icmp sgt i32 %.070, 0
  %93 = select i1 %92, i32 38125078, i32 -251682745
  br label %.backedge

94:                                               ; preds = %18
  br label %.backedge

95:                                               ; preds = %18
  %96 = load i32, i32* @x.4, align 4
  %97 = load i32, i32* @y.5, align 4
  %98 = add i32 %96, -1
  %99 = mul i32 %98, %96
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %102, %101
  %104 = select i1 %103, i32 -1763955122, i32 -466970597
  br label %.backedge

105:                                              ; preds = %18
  %106 = load i32, i32* @x.4, align 4
  %107 = load i32, i32* @y.5, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 1113035339, i32 -466970597
  br label %.backedge

115:                                              ; preds = %18
  br label %.backedge

116:                                              ; preds = %18
  %117 = load i32, i32* @x.4, align 4
  %118 = load i32, i32* @y.5, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 218615497, i32 864012653
  br label %.backedge

126:                                              ; preds = %18
  %.neg86 = add i32 %.074, 1
  %127 = load i32, i32* @x.4, align 4
  %128 = load i32, i32* @y.5, align 4
  %129 = add i32 %127, -1
  %130 = mul i32 %129, %127
  %131 = and i32 %130, 1
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %133, %132
  %135 = select i1 %134, i32 1996894004, i32 864012653
  br label %.backedge

136:                                              ; preds = %18
  br label %.backedge

137:                                              ; preds = %18
  %.neg84 = add i32 %.072, -1
  %.neg85 = add i32 %.070, -1
  %138 = icmp sgt i32 %.neg84, %.neg85
  %139 = select i1 %138, i32 1715934967, i32 -2068413276
  br label %.backedge

140:                                              ; preds = %18
  br label %.backedge

141:                                              ; preds = %18
  %142 = load i32, i32* @x.4, align 4
  %143 = load i32, i32* @y.5, align 4
  %144 = add i32 %142, -1
  %145 = mul i32 %144, %142
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %148, %147
  %150 = select i1 %149, i32 1722814384, i32 -1315639372
  br label %.backedge

151:                                              ; preds = %18
  store i32 %.070, i32* %5, align 4
  %152 = load i32, i32* @x.4, align 4
  %153 = load i32, i32* @y.5, align 4
  %154 = add i32 %152, -1
  %155 = mul i32 %154, %152
  %156 = and i32 %155, 1
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %158, %157
  %160 = select i1 %159, i32 999433185, i32 -1315639372
  br label %.backedge

161:                                              ; preds = %18
  %.0..0..0.53 = load volatile i32, i32* %5, align 4
  br label %.backedge

162:                                              ; preds = %18
  %163 = icmp sgt i32 %.058, 79
  %164 = select i1 %163, i32 -5346910, i32 -611714789
  br label %.backedge

165:                                              ; preds = %18
  %166 = load i32, i32* @x.4, align 4
  %167 = load i32, i32* @y.5, align 4
  %168 = add i32 %166, -1
  %169 = mul i32 %168, %166
  %170 = and i32 %169, 1
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %172, %171
  %174 = select i1 %173, i32 -1381380668, i32 200763591
  br label %.backedge

175:                                              ; preds = %18
  %puts83 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @str.3, i64 0, i64 0))
  %176 = load i32, i32* @x.4, align 4
  %177 = load i32, i32* @y.5, align 4
  %178 = add i32 %176, -1
  %179 = mul i32 %178, %176
  %180 = and i32 %179, 1
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %182, %181
  %184 = select i1 %183, i32 121337541, i32 200763591
  br label %.backedge

185:                                              ; preds = %18
  br label %.backedge

186:                                              ; preds = %18
  %187 = add i32 %.074, 1
  br label %.backedge

188:                                              ; preds = %18
  %189 = icmp sgt i32 %.074, -1
  %190 = select i1 %189, i32 856794913, i32 -1394255099
  br label %.backedge

191:                                              ; preds = %18
  %192 = icmp sgt i32 %.072, -1
  %193 = select i1 %192, i32 -199762227, i32 -568635160
  br label %.backedge

194:                                              ; preds = %18
  %195 = sext i32 %.072 to i64
  %196 = getelementptr inbounds [101 x i8], [101 x i8]* %9, i64 0, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = sext i8 %197 to i32
  %199 = add nsw i32 %198, -48
  br label %.backedge

200:                                              ; preds = %18
  br label %.backedge

201:                                              ; preds = %18
  %202 = icmp sgt i32 %.070, -1
  %203 = select i1 %202, i32 1946819244, i32 153716439
  br label %.backedge

204:                                              ; preds = %18
  %205 = sext i32 %.070 to i64
  %206 = getelementptr inbounds [101 x i8], [101 x i8]* %10, i64 0, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = sext i8 %207 to i32
  %209 = add nsw i32 %208, -48
  br label %.backedge

210:                                              ; preds = %18
  %211 = load i32, i32* @x.4, align 4
  %212 = load i32, i32* @y.5, align 4
  %213 = add i32 %211, -1
  %214 = mul i32 %213, %211
  %215 = and i32 %214, 1
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %217, %216
  %219 = select i1 %218, i32 998071119, i32 -762738720
  br label %.backedge

220:                                              ; preds = %18
  %221 = load i32, i32* @x.4, align 4
  %222 = load i32, i32* @y.5, align 4
  %223 = add i32 %221, -1
  %224 = mul i32 %223, %221
  %225 = and i32 %224, 1
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %227, %226
  %229 = select i1 %228, i32 816253306, i32 -762738720
  br label %.backedge

230:                                              ; preds = %18
  br label %.backedge

231:                                              ; preds = %18
  %232 = and i8 %.068, 1
  %233 = zext i8 %232 to i32
  %234 = add i32 %.066, %233
  %235 = add i32 %234, %.0
  %236 = icmp sgt i32 %235, 9
  %237 = select i1 %236, i32 625565528, i32 1486177475
  br label %.backedge

238:                                              ; preds = %18
  %239 = load i32, i32* @x.4, align 4
  %240 = load i32, i32* @y.5, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 -1543603755, i32 -791158475
  br label %.backedge

248:                                              ; preds = %18
  %249 = add i32 %.062, -10
  %250 = load i32, i32* @x.4, align 4
  %251 = load i32, i32* @y.5, align 4
  %252 = add i32 %250, -1
  %253 = mul i32 %252, %250
  %254 = and i32 %253, 1
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %256, %255
  %258 = select i1 %257, i32 1904266073, i32 -791158475
  br label %.backedge

259:                                              ; preds = %18
  br label %.backedge

260:                                              ; preds = %18
  br label %.backedge

261:                                              ; preds = %18
  %262 = load i32, i32* @x.4, align 4
  %263 = load i32, i32* @y.5, align 4
  %264 = add i32 %262, -1
  %265 = mul i32 %264, %262
  %266 = and i32 %265, 1
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %268, %267
  %270 = select i1 %269, i32 1575648313, i32 -1319497240
  br label %.backedge

271:                                              ; preds = %18
  %272 = trunc i32 %.062 to i8
  %273 = add i8 %272, 48
  %274 = sext i32 %.074 to i64
  %275 = getelementptr inbounds [101 x i8], [101 x i8]* %11, i64 0, i64 %274
  store i8 %273, i8* %275, align 1
  %276 = add i32 %.072, -1
  %277 = add i32 %.070, -1
  %278 = icmp slt i32 %276, 0
  store i1 %278, i1* %4, align 1
  %279 = load i32, i32* @x.4, align 4
  %280 = load i32, i32* @y.5, align 4
  %281 = add i32 %279, -1
  %282 = mul i32 %281, %279
  %283 = and i32 %282, 1
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %285, %284
  %287 = select i1 %286, i32 170118068, i32 -1319497240
  br label %.backedge

288:                                              ; preds = %18
  %.0..0..0.54 = load volatile i1, i1* %4, align 1
  %289 = select i1 %.0..0..0.54, i32 163377070, i32 -92805869
  br label %.backedge

290:                                              ; preds = %18
  %291 = icmp slt i32 %.070, 0
  %292 = select i1 %291, i32 -670043014, i32 -92805869
  br label %.backedge

293:                                              ; preds = %18
  %294 = and i8 %.068, 1
  %.not = icmp eq i8 %294, 0
  %295 = select i1 %.not, i32 426166302, i32 -92805869
  br label %.backedge

296:                                              ; preds = %18
  br label %.backedge

297:                                              ; preds = %18
  br label %.backedge

298:                                              ; preds = %18
  %299 = add i32 %.074, -1
  br label %.backedge

300:                                              ; preds = %18
  %301 = load i8, i8* %13, align 16
  %302 = icmp eq i8 %301, 0
  %303 = select i1 %302, i32 -1815739217, i32 1538462098
  br label %.backedge

304:                                              ; preds = %18
  %305 = load i32, i32* @x.4, align 4
  %306 = load i32, i32* @y.5, align 4
  %307 = add i32 %305, -1
  %308 = mul i32 %307, %305
  %309 = and i32 %308, 1
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %311, %310
  %313 = select i1 %312, i32 1078969640, i32 2092690616
  br label %.backedge

314:                                              ; preds = %18
  %puts81 = call i32 @puts(i8* nonnull %14)
  %315 = load i32, i32* @x.4, align 4
  %316 = load i32, i32* @y.5, align 4
  %317 = add i32 %315, -1
  %318 = mul i32 %317, %315
  %319 = and i32 %318, 1
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %321, %320
  %323 = select i1 %322, i32 -486131468, i32 2092690616
  br label %.backedge

324:                                              ; preds = %18
  br label %.backedge

325:                                              ; preds = %18
  %326 = load i32, i32* @x.4, align 4
  %327 = load i32, i32* @y.5, align 4
  %328 = add i32 %326, -1
  %329 = mul i32 %328, %326
  %330 = and i32 %329, 1
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %332, %331
  %334 = select i1 %333, i32 79079777, i32 -1523305172
  br label %.backedge

335:                                              ; preds = %18
  %336 = load i8, i8* %15, align 16
  %337 = icmp ne i8 %336, 0
  store i1 %337, i1* %3, align 1
  %338 = load i32, i32* @x.4, align 4
  %339 = load i32, i32* @y.5, align 4
  %340 = add i32 %338, -1
  %341 = mul i32 %340, %338
  %342 = and i32 %341, 1
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %344, %343
  %346 = select i1 %345, i32 1095644821, i32 -1523305172
  br label %.backedge

347:                                              ; preds = %18
  %.0..0..0.55 = load volatile i1, i1* %3, align 1
  %348 = select i1 %.0..0..0.55, i32 1649537938, i32 1856004841
  br label %.backedge

349:                                              ; preds = %18
  %350 = load i32, i32* @x.4, align 4
  %351 = load i32, i32* @y.5, align 4
  %352 = add i32 %350, -1
  %353 = mul i32 %352, %350
  %354 = and i32 %353, 1
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %356, %355
  %358 = select i1 %357, i32 1775825155, i32 693376502
  br label %.backedge

359:                                              ; preds = %18
  %puts80 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @str.3, i64 0, i64 0))
  %360 = load i32, i32* @x.4, align 4
  %361 = load i32, i32* @y.5, align 4
  %362 = add i32 %360, -1
  %363 = mul i32 %362, %360
  %364 = and i32 %363, 1
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %366, %365
  %368 = select i1 %367, i32 1055594677, i32 693376502
  br label %.backedge

369:                                              ; preds = %18
  br label %.backedge

370:                                              ; preds = %18
  %371 = load i32, i32* @x.4, align 4
  %372 = load i32, i32* @y.5, align 4
  %373 = add i32 %371, -1
  %374 = mul i32 %373, %371
  %375 = and i32 %374, 1
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %377, %376
  %379 = select i1 %378, i32 739139026, i32 -1169312333
  br label %.backedge

380:                                              ; preds = %18
  %puts79 = call i32 @puts(i8* nonnull %13)
  %381 = load i32, i32* @x.4, align 4
  %382 = load i32, i32* @y.5, align 4
  %383 = add i32 %381, -1
  %384 = mul i32 %383, %381
  %385 = and i32 %384, 1
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %387, %386
  %389 = select i1 %388, i32 -1791510759, i32 -1169312333
  br label %.backedge

390:                                              ; preds = %18
  br label %.backedge

391:                                              ; preds = %18
  br label %.backedge

392:                                              ; preds = %18
  br label %.backedge

393:                                              ; preds = %18
  %.neg = add i32 %.064, 1
  br label %.backedge

394:                                              ; preds = %18
  ret i32 0

395:                                              ; preds = %18
  br label %.backedge

396:                                              ; preds = %18
  br label %.backedge

397:                                              ; preds = %18
  br label %.backedge

398:                                              ; preds = %18
  %399 = add i32 %.074, 1
  br label %.backedge

400:                                              ; preds = %18
  br label %.backedge

401:                                              ; preds = %18
  %puts78 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @str.3, i64 0, i64 0))
  br label %.backedge

402:                                              ; preds = %18
  br label %.backedge

403:                                              ; preds = %18
  %404 = add i32 %.062, -10
  br label %.backedge

405:                                              ; preds = %18
  %406 = trunc i32 %.062 to i8
  %407 = add i8 %406, 48
  %408 = sext i32 %.074 to i64
  %409 = getelementptr inbounds [101 x i8], [101 x i8]* %11, i64 0, i64 %408
  store i8 %407, i8* %409, align 1
  %410 = add i32 %.072, -1
  %411 = add i32 %.070, -1
  br label %.backedge

412:                                              ; preds = %18
  %puts77 = call i32 @puts(i8* nonnull %14)
  br label %.backedge

413:                                              ; preds = %18
  br label %.backedge

414:                                              ; preds = %18
  %puts76 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @str.3, i64 0, i64 0))
  br label %.backedge

415:                                              ; preds = %18
  %puts = call i32 @puts(i8* nonnull %13)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s928830998.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
