; ModuleID = 'build_ollvm/programs/p03833/s189512845.ll'
source_filename = "Project_CodeNet_C++1400/p03833/s189512845.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3maxIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = local_unnamed_addr global i32 0, align 4
@m = local_unnamed_addr global i32 0, align 4
@A = local_unnamed_addr global [5010 x i32] zeroinitializer, align 16
@d = local_unnamed_addr global [5010 x [210 x i32]] zeroinitializer, align 16
@St = local_unnamed_addr global [210 x [5010 x i32]] zeroinitializer, align 16
@top = local_unnamed_addr global [210 x i32] zeroinitializer, align 16
@add = local_unnamed_addr global [5010 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s189512845.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind uwtable
define i32 @_Z4readv() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = tail call i32 @getchar()
  %3 = trunc i32 %2 to i8
  br label %4

4:                                                ; preds = %.backedge, %0
  %.015 = phi i32 [ 0, %0 ], [ %.015.be, %.backedge ]
  %.013 = phi i32 [ 1, %0 ], [ %.013.be, %.backedge ]
  %.011 = phi i8 [ %3, %0 ], [ %.011.be, %.backedge ]
  %.0 = phi i32 [ 1321276005, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1321276005, label %5
    i32 628867180, label %15
    i32 1937159283, label %26
    i32 157236700, label %28
    i32 -1576869184, label %31
    i32 897955030, label %32
    i32 1799864838, label %35
    i32 545174897, label %45
    i32 441834343, label %55
    i32 -1070142592, label %56
    i32 577053171, label %59
    i32 -378359194, label %69
    i32 -429099330, label %85
    i32 -433625329, label %86
    i32 -1079262140, label %88
    i32 1761545150, label %89
    i32 -965367999, label %90
  ]

.backedge:                                        ; preds = %4, %90, %89, %88, %85, %69, %59, %56, %55, %45, %35, %32, %31, %28, %26, %15, %5
  %.015.be = phi i32 [ %.015, %4 ], [ %94, %90 ], [ %.015, %89 ], [ %.015, %88 ], [ %.015, %85 ], [ %73, %69 ], [ %.015, %59 ], [ %.015, %56 ], [ %.015, %55 ], [ %.015, %45 ], [ %.015, %35 ], [ %.015, %32 ], [ %.015, %31 ], [ %.015, %28 ], [ %.015, %26 ], [ %.015, %15 ], [ %.015, %5 ]
  %.013.be = phi i32 [ %.013, %4 ], [ %.013, %90 ], [ %.013, %89 ], [ %.013, %88 ], [ %.013, %85 ], [ %.013, %69 ], [ %.013, %59 ], [ %.013, %56 ], [ %.013, %55 ], [ %.013, %45 ], [ %.013, %35 ], [ %.013, %32 ], [ -1, %31 ], [ %.013, %28 ], [ %.013, %26 ], [ %.013, %15 ], [ %.013, %5 ]
  %.011.be = phi i8 [ %.011, %4 ], [ %96, %90 ], [ %.011, %89 ], [ %.011, %88 ], [ %.011, %85 ], [ %75, %69 ], [ %.011, %59 ], [ %.011, %56 ], [ %.011, %55 ], [ %.011, %45 ], [ %.011, %35 ], [ %34, %32 ], [ %.011, %31 ], [ %.011, %28 ], [ %.011, %26 ], [ %.011, %15 ], [ %.011, %5 ]
  %.0.be = phi i32 [ %.0, %4 ], [ -378359194, %90 ], [ 545174897, %89 ], [ 628867180, %88 ], [ -1070142592, %85 ], [ %84, %69 ], [ %68, %59 ], [ %58, %56 ], [ -1070142592, %55 ], [ %54, %45 ], [ %44, %35 ], [ 1321276005, %32 ], [ 897955030, %31 ], [ %30, %28 ], [ %27, %26 ], [ %25, %15 ], [ %14, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = load i32, i32* @x.1, align 4
  %7 = load i32, i32* @y.2, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %12, %11
  %14 = select i1 %13, i32 628867180, i32 -1079262140
  br label %.backedge

15:                                               ; preds = %4
  %16 = sext i8 %.011 to i32
  %isdigittmp17 = add nsw i32 %16, -48
  %isdigit18 = icmp ugt i32 %isdigittmp17, 9
  store i1 %isdigit18, i1* %1, align 1
  %17 = load i32, i32* @x.1, align 4
  %18 = load i32, i32* @y.2, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 1937159283, i32 -1079262140
  br label %.backedge

26:                                               ; preds = %4
  %.0..0..0. = load volatile i1, i1* %1, align 1
  %27 = select i1 %.0..0..0., i32 157236700, i32 1799864838
  br label %.backedge

28:                                               ; preds = %4
  %29 = icmp eq i8 %.011, 45
  %30 = select i1 %29, i32 -1576869184, i32 897955030
  br label %.backedge

31:                                               ; preds = %4
  br label %.backedge

32:                                               ; preds = %4
  %33 = tail call i32 @getchar()
  %34 = trunc i32 %33 to i8
  br label %.backedge

35:                                               ; preds = %4
  %36 = load i32, i32* @x.1, align 4
  %37 = load i32, i32* @y.2, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 545174897, i32 1761545150
  br label %.backedge

45:                                               ; preds = %4
  %46 = load i32, i32* @x.1, align 4
  %47 = load i32, i32* @y.2, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 441834343, i32 1761545150
  br label %.backedge

55:                                               ; preds = %4
  br label %.backedge

56:                                               ; preds = %4
  %57 = sext i8 %.011 to i32
  %isdigittmp = add nsw i32 %57, -48
  %isdigit = icmp ult i32 %isdigittmp, 10
  %58 = select i1 %isdigit, i32 577053171, i32 -433625329
  br label %.backedge

59:                                               ; preds = %4
  %60 = load i32, i32* @x.1, align 4
  %61 = load i32, i32* @y.2, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -378359194, i32 -965367999
  br label %.backedge

69:                                               ; preds = %4
  %70 = mul nsw i32 %.015, 10
  %71 = sext i8 %.011 to i32
  %72 = add i32 %70, -48
  %73 = add i32 %72, %71
  %74 = tail call i32 @getchar()
  %75 = trunc i32 %74 to i8
  %76 = load i32, i32* @x.1, align 4
  %77 = load i32, i32* @y.2, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 -429099330, i32 -965367999
  br label %.backedge

85:                                               ; preds = %4
  br label %.backedge

86:                                               ; preds = %4
  %87 = mul nsw i32 %.013, %.015
  ret i32 %87

88:                                               ; preds = %4
  br label %.backedge

89:                                               ; preds = %4
  br label %.backedge

90:                                               ; preds = %4
  %91 = mul nsw i32 %.015, 10
  %92 = sext i8 %.011 to i32
  %93 = add i32 %91, -48
  %94 = add i32 %93, %92
  %95 = tail call i32 @getchar()
  %96 = trunc i32 %95 to i8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = tail call i32 @_Z4readv()
  store i32 %8, i32* @n, align 4
  %9 = tail call i32 @_Z4readv()
  store i32 %9, i32* @m, align 4
  br label %10

10:                                               ; preds = %.backedge, %0
  %.085 = phi i32 [ 1, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i32 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i32 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i32 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i64 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i64 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ -620478685, %0 ], [ %.069.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.069, label %.backedge [
    i32 -620478685, label %11
    i32 1856849631, label %15
    i32 701219195, label %25
    i32 -1821669172, label %38
    i32 1740989636, label %39
    i32 1005284674, label %49
    i32 -819968537, label %59
    i32 -1673175648, label %60
    i32 -2025759422, label %61
    i32 -1534953013, label %71
    i32 118757974, label %83
    i32 169838177, label %85
    i32 492088718, label %86
    i32 136168710, label %89
    i32 164857109, label %94
    i32 -905298759, label %96
    i32 -1464665152, label %106
    i32 1698880323, label %116
    i32 -1817430995, label %117
    i32 1489336706, label %119
    i32 2038073770, label %121
    i32 820294174, label %131
    i32 619714321, label %142
    i32 492547395, label %144
    i32 642171411, label %145
    i32 139269775, label %148
    i32 603184106, label %149
    i32 76980804, label %159
    i32 -1603945782, label %173
    i32 -11072541, label %175
    i32 491729180, label %189
    i32 -962731385, label %199
    i32 434282947, label %209
    i32 1470191249, label %211
    i32 -7389850, label %217
    i32 277535328, label %239
    i32 658850762, label %244
    i32 1211623131, label %254
    i32 1840834854, label %271
    i32 -1703222265, label %273
    i32 -1322490090, label %292
    i32 -1560896946, label %299
    i32 -1104952974, label %309
    i32 1321607077, label %319
    i32 1611719500, label %320
    i32 557117672, label %330
    i32 920950657, label %340
    i32 446408908, label %341
    i32 536897417, label %344
    i32 2048430496, label %356
    i32 -330702363, label %358
    i32 -406440846, label %359
    i32 732948226, label %360
    i32 -1794257196, label %370
    i32 -1226012926, label %382
    i32 513154621, label %383
    i32 -1478863799, label %387
    i32 2066231713, label %389
    i32 1453684808, label %390
    i32 -168787041, label %391
    i32 1505620524, label %392
    i32 -1877200866, label %393
    i32 -2019023447, label %394
    i32 -1820676995, label %401
    i32 2102664972, label %402
    i32 -830831448, label %403
  ]

.backedge:                                        ; preds = %10, %403, %402, %401, %394, %393, %392, %391, %390, %389, %387, %383, %370, %360, %359, %358, %356, %344, %341, %340, %330, %320, %319, %309, %299, %292, %273, %271, %254, %244, %239, %217, %211, %209, %199, %189, %175, %173, %159, %149, %148, %145, %144, %142, %131, %121, %119, %117, %116, %106, %96, %94, %89, %86, %85, %83, %71, %61, %60, %59, %49, %39, %38, %25, %15, %11
  %.085.be = phi i32 [ %.085, %10 ], [ %.085, %403 ], [ %.085, %402 ], [ %.085, %401 ], [ %.085, %394 ], [ %.085, %393 ], [ %.085, %392 ], [ %.085, %391 ], [ %.085, %390 ], [ %.085, %389 ], [ %388, %387 ], [ %.085, %383 ], [ %.085, %370 ], [ %.085, %360 ], [ %.085, %359 ], [ %.085, %358 ], [ %.085, %356 ], [ %.085, %344 ], [ %.085, %341 ], [ %.085, %340 ], [ %.085, %330 ], [ %.085, %320 ], [ %.085, %319 ], [ %.085, %309 ], [ %.085, %299 ], [ %.085, %292 ], [ %.085, %273 ], [ %.085, %271 ], [ %.085, %254 ], [ %.085, %244 ], [ %.085, %239 ], [ %.085, %217 ], [ %.085, %211 ], [ %.085, %209 ], [ %.085, %199 ], [ %.085, %189 ], [ %.085, %175 ], [ %.085, %173 ], [ %.085, %159 ], [ %.085, %149 ], [ %.085, %148 ], [ %.085, %145 ], [ %.085, %144 ], [ %.085, %142 ], [ %.085, %131 ], [ %.085, %121 ], [ %.085, %119 ], [ %.085, %117 ], [ %.085, %116 ], [ %.085, %106 ], [ %.085, %96 ], [ %.085, %94 ], [ %.085, %89 ], [ %.085, %86 ], [ %.085, %85 ], [ %.085, %83 ], [ %.085, %71 ], [ %.085, %61 ], [ %.085, %60 ], [ %.085, %59 ], [ %.neg91, %49 ], [ %.085, %39 ], [ %.085, %38 ], [ %.085, %25 ], [ %.085, %15 ], [ %.085, %11 ]
  %.083.be = phi i32 [ %.083, %10 ], [ %.083, %403 ], [ %.083, %402 ], [ %.083, %401 ], [ %.083, %394 ], [ %.083, %393 ], [ %.083, %392 ], [ %.083, %391 ], [ %.083, %390 ], [ %.083, %389 ], [ %.083, %387 ], [ %.083, %383 ], [ %.083, %370 ], [ %.083, %360 ], [ %.083, %359 ], [ %.083, %358 ], [ %.083, %356 ], [ %.083, %344 ], [ %.083, %341 ], [ %.083, %340 ], [ %.083, %330 ], [ %.083, %320 ], [ %.083, %319 ], [ %.083, %309 ], [ %.083, %299 ], [ %.083, %292 ], [ %.083, %273 ], [ %.083, %271 ], [ %.083, %254 ], [ %.083, %244 ], [ %.083, %239 ], [ %.083, %217 ], [ %.083, %211 ], [ %.083, %209 ], [ %.083, %199 ], [ %.083, %189 ], [ %.083, %175 ], [ %.083, %173 ], [ %.083, %159 ], [ %.083, %149 ], [ %.083, %148 ], [ %.083, %145 ], [ %.083, %144 ], [ %.083, %142 ], [ %.083, %131 ], [ %.083, %121 ], [ %.083, %119 ], [ %118, %117 ], [ %.083, %116 ], [ %.083, %106 ], [ %.083, %96 ], [ %.083, %94 ], [ %.083, %89 ], [ %.083, %86 ], [ %.083, %85 ], [ %.083, %83 ], [ %.083, %71 ], [ %.083, %61 ], [ 1, %60 ], [ %.083, %59 ], [ %.083, %49 ], [ %.083, %39 ], [ %.083, %38 ], [ %.083, %25 ], [ %.083, %15 ], [ %.083, %11 ]
  %.081.be = phi i32 [ %.081, %10 ], [ %.081, %403 ], [ %.081, %402 ], [ %.081, %401 ], [ %.081, %394 ], [ %.081, %393 ], [ %.081, %392 ], [ %.081, %391 ], [ %.081, %390 ], [ %.081, %389 ], [ %.081, %387 ], [ %.081, %383 ], [ %.081, %370 ], [ %.081, %360 ], [ %.081, %359 ], [ %.081, %358 ], [ %.081, %356 ], [ %.081, %344 ], [ %.081, %341 ], [ %.081, %340 ], [ %.081, %330 ], [ %.081, %320 ], [ %.081, %319 ], [ %.081, %309 ], [ %.081, %299 ], [ %.081, %292 ], [ %.081, %273 ], [ %.081, %271 ], [ %.081, %254 ], [ %.081, %244 ], [ %.081, %239 ], [ %.081, %217 ], [ %.081, %211 ], [ %.081, %209 ], [ %.081, %199 ], [ %.081, %189 ], [ %.081, %175 ], [ %.081, %173 ], [ %.081, %159 ], [ %.081, %149 ], [ %.081, %148 ], [ %.081, %145 ], [ %.081, %144 ], [ %.081, %142 ], [ %.081, %131 ], [ %.081, %121 ], [ %.081, %119 ], [ %.081, %117 ], [ %.081, %116 ], [ %.081, %106 ], [ %.081, %96 ], [ %95, %94 ], [ %.081, %89 ], [ %.081, %86 ], [ 1, %85 ], [ %.081, %83 ], [ %.081, %71 ], [ %.081, %61 ], [ %.081, %60 ], [ %.081, %59 ], [ %.081, %49 ], [ %.081, %39 ], [ %.081, %38 ], [ %.081, %25 ], [ %.081, %15 ], [ %.081, %11 ]
  %.079.be = phi i32 [ %.079, %10 ], [ %.079, %403 ], [ %.079, %402 ], [ %.079, %401 ], [ %.079, %394 ], [ %.079, %393 ], [ %.079, %392 ], [ %.079, %391 ], [ %.079, %390 ], [ %.079, %389 ], [ %.079, %387 ], [ %.079, %383 ], [ %.079, %370 ], [ %.079, %360 ], [ %.neg87, %359 ], [ %.079, %358 ], [ %.079, %356 ], [ %.079, %344 ], [ %.079, %341 ], [ %.079, %340 ], [ %.079, %330 ], [ %.079, %320 ], [ %.079, %319 ], [ %.079, %309 ], [ %.079, %299 ], [ %.079, %292 ], [ %.079, %273 ], [ %.079, %271 ], [ %.079, %254 ], [ %.079, %244 ], [ %.079, %239 ], [ %.079, %217 ], [ %.079, %211 ], [ %.079, %209 ], [ %.079, %199 ], [ %.079, %189 ], [ %.079, %175 ], [ %.079, %173 ], [ %.079, %159 ], [ %.079, %149 ], [ %.079, %148 ], [ %.079, %145 ], [ %.079, %144 ], [ %.079, %142 ], [ %.079, %131 ], [ %.079, %121 ], [ %120, %119 ], [ %.079, %117 ], [ %.079, %116 ], [ %.079, %106 ], [ %.079, %96 ], [ %.079, %94 ], [ %.079, %89 ], [ %.079, %86 ], [ %.079, %85 ], [ %.079, %83 ], [ %.079, %71 ], [ %.079, %61 ], [ %.079, %60 ], [ %.079, %59 ], [ %.079, %49 ], [ %.079, %39 ], [ %.079, %38 ], [ %.079, %25 ], [ %.079, %15 ], [ %.079, %11 ]
  %.077.be = phi i64 [ %.077, %10 ], [ %.077, %403 ], [ %.077, %402 ], [ %.077, %401 ], [ %.077, %394 ], [ %.077, %393 ], [ %.077, %392 ], [ %.077, %391 ], [ %.077, %390 ], [ %.077, %389 ], [ %.077, %387 ], [ %.077, %383 ], [ %.077, %370 ], [ %.077, %360 ], [ %.077, %359 ], [ %.077, %358 ], [ %.077, %356 ], [ %355, %344 ], [ %.077, %341 ], [ %.077, %340 ], [ %.077, %330 ], [ %.077, %320 ], [ %.077, %319 ], [ %.077, %309 ], [ %.077, %299 ], [ %.077, %292 ], [ %.077, %273 ], [ %.077, %271 ], [ %.077, %254 ], [ %.077, %244 ], [ %.077, %239 ], [ %.077, %217 ], [ %.077, %211 ], [ %.077, %209 ], [ %.077, %199 ], [ %.077, %189 ], [ %.077, %175 ], [ %.077, %173 ], [ %.077, %159 ], [ %.077, %149 ], [ %.077, %148 ], [ %.077, %145 ], [ 0, %144 ], [ %.077, %142 ], [ %.077, %131 ], [ %.077, %121 ], [ %.077, %119 ], [ %.077, %117 ], [ %.077, %116 ], [ %.077, %106 ], [ %.077, %96 ], [ %.077, %94 ], [ %.077, %89 ], [ %.077, %86 ], [ %.077, %85 ], [ %.077, %83 ], [ %.077, %71 ], [ %.077, %61 ], [ %.077, %60 ], [ %.077, %59 ], [ %.077, %49 ], [ %.077, %39 ], [ %.077, %38 ], [ %.077, %25 ], [ %.077, %15 ], [ %.077, %11 ]
  %.075.be = phi i64 [ %.075, %10 ], [ %.075, %403 ], [ %.075, %402 ], [ %.075, %401 ], [ %.075, %394 ], [ %.075, %393 ], [ %.075, %392 ], [ %.075, %391 ], [ %.075, %390 ], [ %.075, %389 ], [ %.075, %387 ], [ %.075, %383 ], [ %.075, %370 ], [ %.075, %360 ], [ %.075, %359 ], [ %.075, %358 ], [ %.075, %356 ], [ %348, %344 ], [ %.075, %341 ], [ %.075, %340 ], [ %.075, %330 ], [ %.075, %320 ], [ %.075, %319 ], [ %.075, %309 ], [ %.075, %299 ], [ %298, %292 ], [ %.075, %273 ], [ %.075, %271 ], [ %.075, %254 ], [ %.075, %244 ], [ %.075, %239 ], [ %.075, %217 ], [ %.075, %211 ], [ %.075, %209 ], [ %.075, %199 ], [ %.075, %189 ], [ %.075, %175 ], [ %.075, %173 ], [ %.075, %159 ], [ %.075, %149 ], [ %.075, %148 ], [ %.075, %145 ], [ 0, %144 ], [ %.075, %142 ], [ %.075, %131 ], [ %.075, %121 ], [ %.075, %119 ], [ %.075, %117 ], [ %.075, %116 ], [ %.075, %106 ], [ %.075, %96 ], [ %.075, %94 ], [ %.075, %89 ], [ %.075, %86 ], [ %.075, %85 ], [ %.075, %83 ], [ %.075, %71 ], [ %.075, %61 ], [ %.075, %60 ], [ %.075, %59 ], [ %.075, %49 ], [ %.075, %39 ], [ %.075, %38 ], [ %.075, %25 ], [ %.075, %15 ], [ %.075, %11 ]
  %.073.be = phi i32 [ %.073, %10 ], [ %.073, %403 ], [ %.073, %402 ], [ %.neg, %401 ], [ %.073, %394 ], [ %.073, %393 ], [ %.073, %392 ], [ %.073, %391 ], [ %.073, %390 ], [ %.073, %389 ], [ %.073, %387 ], [ %.073, %383 ], [ %.073, %370 ], [ %.073, %360 ], [ %.073, %359 ], [ %.073, %358 ], [ %.073, %356 ], [ %.073, %344 ], [ %.073, %341 ], [ %.073, %340 ], [ %.073, %330 ], [ %.073, %320 ], [ %.073, %319 ], [ %.neg88, %309 ], [ %.073, %299 ], [ %.073, %292 ], [ %.073, %273 ], [ %.073, %271 ], [ %.073, %254 ], [ %.073, %244 ], [ %.073, %239 ], [ %.073, %217 ], [ %.073, %211 ], [ %.073, %209 ], [ %.073, %199 ], [ %.073, %189 ], [ %.073, %175 ], [ %.073, %173 ], [ %.073, %159 ], [ %.073, %149 ], [ %.073, %148 ], [ %.073, %145 ], [ 1, %144 ], [ %.073, %142 ], [ %.073, %131 ], [ %.073, %121 ], [ %.073, %119 ], [ %.073, %117 ], [ %.073, %116 ], [ %.073, %106 ], [ %.073, %96 ], [ %.073, %94 ], [ %.073, %89 ], [ %.073, %86 ], [ %.073, %85 ], [ %.073, %83 ], [ %.073, %71 ], [ %.073, %61 ], [ %.073, %60 ], [ %.073, %59 ], [ %.073, %49 ], [ %.073, %39 ], [ %.073, %38 ], [ %.073, %25 ], [ %.073, %15 ], [ %.073, %11 ]
  %.071.be = phi i32 [ %.071, %10 ], [ %.071, %403 ], [ %.079, %402 ], [ %.071, %401 ], [ %.071, %394 ], [ %.071, %393 ], [ %.071, %392 ], [ %.071, %391 ], [ %.071, %390 ], [ %.071, %389 ], [ %.071, %387 ], [ %.071, %383 ], [ %.071, %370 ], [ %.071, %360 ], [ %.071, %359 ], [ %.071, %358 ], [ %357, %356 ], [ %.071, %344 ], [ %.071, %341 ], [ %.071, %340 ], [ %.079, %330 ], [ %.071, %320 ], [ %.071, %319 ], [ %.071, %309 ], [ %.071, %299 ], [ %.071, %292 ], [ %.071, %273 ], [ %.071, %271 ], [ %.071, %254 ], [ %.071, %244 ], [ %.071, %239 ], [ %.071, %217 ], [ %.071, %211 ], [ %.071, %209 ], [ %.071, %199 ], [ %.071, %189 ], [ %.071, %175 ], [ %.071, %173 ], [ %.071, %159 ], [ %.071, %149 ], [ %.071, %148 ], [ %.071, %145 ], [ %.071, %144 ], [ %.071, %142 ], [ %.071, %131 ], [ %.071, %121 ], [ %.071, %119 ], [ %.071, %117 ], [ %.071, %116 ], [ %.071, %106 ], [ %.071, %96 ], [ %.071, %94 ], [ %.071, %89 ], [ %.071, %86 ], [ %.071, %85 ], [ %.071, %83 ], [ %.071, %71 ], [ %.071, %61 ], [ %.071, %60 ], [ %.071, %59 ], [ %.071, %49 ], [ %.071, %39 ], [ %.071, %38 ], [ %.071, %25 ], [ %.071, %15 ], [ %.071, %11 ]
  %.069.be = phi i32 [ %.069, %10 ], [ -1794257196, %403 ], [ 557117672, %402 ], [ -1104952974, %401 ], [ 1211623131, %394 ], [ -962731385, %393 ], [ 76980804, %392 ], [ 820294174, %391 ], [ -1464665152, %390 ], [ -1534953013, %389 ], [ 1005284674, %387 ], [ 701219195, %383 ], [ %381, %370 ], [ %369, %360 ], [ 2038073770, %359 ], [ -406440846, %358 ], [ 446408908, %356 ], [ 2048430496, %344 ], [ %343, %341 ], [ 446408908, %340 ], [ %339, %330 ], [ %329, %320 ], [ 642171411, %319 ], [ %318, %309 ], [ %308, %299 ], [ -1560896946, %292 ], [ -1322490090, %273 ], [ %272, %271 ], [ %270, %254 ], [ %253, %244 ], [ 603184106, %239 ], [ 277535328, %217 ], [ %216, %211 ], [ %210, %209 ], [ %208, %199 ], [ %198, %189 ], [ 491729180, %175 ], [ %174, %173 ], [ %172, %159 ], [ %158, %149 ], [ 603184106, %148 ], [ %147, %145 ], [ 642171411, %144 ], [ %143, %142 ], [ %141, %131 ], [ %130, %121 ], [ 2038073770, %119 ], [ -2025759422, %117 ], [ -1817430995, %116 ], [ %115, %106 ], [ %105, %96 ], [ 492088718, %94 ], [ 164857109, %89 ], [ %88, %86 ], [ 492088718, %85 ], [ %84, %83 ], [ %82, %71 ], [ %70, %61 ], [ -2025759422, %60 ], [ -620478685, %59 ], [ %58, %49 ], [ %48, %39 ], [ 1740989636, %38 ], [ %37, %25 ], [ %24, %15 ], [ %14, %11 ]
  %.0.be = phi i1 [ %.0, %10 ], [ %.0, %403 ], [ %.0, %402 ], [ %.0, %401 ], [ %.0, %394 ], [ %.0, %393 ], [ %.0, %392 ], [ %.0, %391 ], [ %.0, %390 ], [ %.0, %389 ], [ %.0, %387 ], [ %.0, %383 ], [ %.0, %370 ], [ %.0, %360 ], [ %.0, %359 ], [ %.0, %358 ], [ %.0, %356 ], [ %.0, %344 ], [ %.0, %341 ], [ %.0, %340 ], [ %.0, %330 ], [ %.0, %320 ], [ %.0, %319 ], [ %.0, %309 ], [ %.0, %299 ], [ %.0, %292 ], [ %.0, %273 ], [ %.0, %271 ], [ %.0, %254 ], [ %.0, %244 ], [ %.0, %239 ], [ %.0, %217 ], [ %.0, %211 ], [ %.0, %209 ], [ %.0, %199 ], [ %.0, %189 ], [ %188, %175 ], [ false, %173 ], [ %.0, %159 ], [ %.0, %149 ], [ %.0, %148 ], [ %.0, %145 ], [ %.0, %144 ], [ %.0, %142 ], [ %.0, %131 ], [ %.0, %121 ], [ %.0, %119 ], [ %.0, %117 ], [ %.0, %116 ], [ %.0, %106 ], [ %.0, %96 ], [ %.0, %94 ], [ %.0, %89 ], [ %.0, %86 ], [ %.0, %85 ], [ %.0, %83 ], [ %.0, %71 ], [ %.0, %61 ], [ %.0, %60 ], [ %.0, %59 ], [ %.0, %49 ], [ %.0, %39 ], [ %.0, %38 ], [ %.0, %25 ], [ %.0, %15 ], [ %.0, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = load i32, i32* @n, align 4
  %13 = add i32 %12, -1
  %.not92 = icmp sgt i32 %.085, %13
  %14 = select i1 %.not92, i32 -1673175648, i32 1856849631
  br label %.backedge

15:                                               ; preds = %10
  %16 = load i32, i32* @x.3, align 4
  %17 = load i32, i32* @y.4, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 701219195, i32 513154621
  br label %.backedge

25:                                               ; preds = %10
  %26 = call i32 @_Z4readv()
  %27 = sext i32 %.085 to i64
  %28 = getelementptr inbounds [5010 x i32], [5010 x i32]* @A, i64 0, i64 %27
  store i32 %26, i32* %28, align 4
  %29 = load i32, i32* @x.3, align 4
  %30 = load i32, i32* @y.4, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -1821669172, i32 513154621
  br label %.backedge

38:                                               ; preds = %10
  br label %.backedge

39:                                               ; preds = %10
  %40 = load i32, i32* @x.3, align 4
  %41 = load i32, i32* @y.4, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 1005284674, i32 -1478863799
  br label %.backedge

49:                                               ; preds = %10
  %.neg91 = add i32 %.085, 1
  %50 = load i32, i32* @x.3, align 4
  %51 = load i32, i32* @y.4, align 4
  %52 = add i32 %50, -1
  %53 = mul i32 %52, %50
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %56, %55
  %58 = select i1 %57, i32 -819968537, i32 -1478863799
  br label %.backedge

59:                                               ; preds = %10
  br label %.backedge

60:                                               ; preds = %10
  br label %.backedge

61:                                               ; preds = %10
  %62 = load i32, i32* @x.3, align 4
  %63 = load i32, i32* @y.4, align 4
  %64 = add i32 %62, -1
  %65 = mul i32 %64, %62
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %68, %67
  %70 = select i1 %69, i32 -1534953013, i32 2066231713
  br label %.backedge

71:                                               ; preds = %10
  %72 = load i32, i32* @n, align 4
  %73 = icmp sle i32 %.083, %72
  store i1 %73, i1* %5, align 1
  %74 = load i32, i32* @x.3, align 4
  %75 = load i32, i32* @y.4, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 118757974, i32 2066231713
  br label %.backedge

83:                                               ; preds = %10
  %.0..0..0.64 = load volatile i1, i1* %5, align 1
  %84 = select i1 %.0..0..0.64, i32 169838177, i32 1489336706
  br label %.backedge

85:                                               ; preds = %10
  br label %.backedge

86:                                               ; preds = %10
  %87 = load i32, i32* @m, align 4
  %.not90 = icmp sgt i32 %.081, %87
  %88 = select i1 %.not90, i32 -905298759, i32 136168710
  br label %.backedge

89:                                               ; preds = %10
  %90 = call i32 @_Z4readv()
  %91 = sext i32 %.083 to i64
  %92 = sext i32 %.081 to i64
  %93 = getelementptr inbounds [5010 x [210 x i32]], [5010 x [210 x i32]]* @d, i64 0, i64 %91, i64 %92
  store i32 %90, i32* %93, align 4
  br label %.backedge

94:                                               ; preds = %10
  %95 = add i32 %.081, 1
  br label %.backedge

96:                                               ; preds = %10
  %97 = load i32, i32* @x.3, align 4
  %98 = load i32, i32* @y.4, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 -1464665152, i32 1453684808
  br label %.backedge

106:                                              ; preds = %10
  %107 = load i32, i32* @x.3, align 4
  %108 = load i32, i32* @y.4, align 4
  %109 = add i32 %107, -1
  %110 = mul i32 %109, %107
  %111 = and i32 %110, 1
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %113, %112
  %115 = select i1 %114, i32 1698880323, i32 1453684808
  br label %.backedge

116:                                              ; preds = %10
  br label %.backedge

117:                                              ; preds = %10
  %118 = add i32 %.083, 1
  br label %.backedge

119:                                              ; preds = %10
  store i64 0, i64* %6, align 8
  %120 = load i32, i32* @n, align 4
  br label %.backedge

121:                                              ; preds = %10
  %122 = load i32, i32* @x.3, align 4
  %123 = load i32, i32* @y.4, align 4
  %124 = add i32 %122, -1
  %125 = mul i32 %124, %122
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %128, %127
  %130 = select i1 %129, i32 820294174, i32 -168787041
  br label %.backedge

131:                                              ; preds = %10
  %132 = icmp sgt i32 %.079, 0
  store i1 %132, i1* %4, align 1
  %133 = load i32, i32* @x.3, align 4
  %134 = load i32, i32* @y.4, align 4
  %135 = add i32 %133, -1
  %136 = mul i32 %135, %133
  %137 = and i32 %136, 1
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %139, %138
  %141 = select i1 %140, i32 619714321, i32 -168787041
  br label %.backedge

142:                                              ; preds = %10
  %.0..0..0.65 = load volatile i1, i1* %4, align 1
  %143 = select i1 %.0..0..0.65, i32 492547395, i32 732948226
  br label %.backedge

144:                                              ; preds = %10
  br label %.backedge

145:                                              ; preds = %10
  %146 = load i32, i32* @m, align 4
  %.not89 = icmp sgt i32 %.073, %146
  %147 = select i1 %.not89, i32 1611719500, i32 139269775
  br label %.backedge

148:                                              ; preds = %10
  br label %.backedge

149:                                              ; preds = %10
  %150 = load i32, i32* @x.3, align 4
  %151 = load i32, i32* @y.4, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 76980804, i32 1505620524
  br label %.backedge

159:                                              ; preds = %10
  %160 = sext i32 %.073 to i64
  %161 = getelementptr inbounds [210 x i32], [210 x i32]* @top, i64 0, i64 %160
  %162 = load i32, i32* %161, align 4
  %163 = icmp ne i32 %162, 0
  store i1 %163, i1* %3, align 1
  %164 = load i32, i32* @x.3, align 4
  %165 = load i32, i32* @y.4, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 -1603945782, i32 1505620524
  br label %.backedge

173:                                              ; preds = %10
  %.0..0..0.66 = load volatile i1, i1* %3, align 1
  %174 = select i1 %.0..0..0.66, i32 -11072541, i32 491729180
  br label %.backedge

175:                                              ; preds = %10
  %176 = sext i32 %.073 to i64
  %177 = getelementptr inbounds [210 x i32], [210 x i32]* @top, i64 0, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [210 x [5010 x i32]], [210 x [5010 x i32]]* @St, i64 0, i64 %176, i64 %179
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [5010 x [210 x i32]], [5010 x [210 x i32]]* @d, i64 0, i64 %182, i64 %176
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %.079 to i64
  %186 = getelementptr inbounds [5010 x [210 x i32]], [5010 x [210 x i32]]* @d, i64 0, i64 %185, i64 %176
  %187 = load i32, i32* %186, align 4
  %188 = icmp sle i32 %184, %187
  br label %.backedge

189:                                              ; preds = %10
  store i1 %.0, i1* %1, align 1
  %190 = load i32, i32* @x.3, align 4
  %191 = load i32, i32* @y.4, align 4
  %192 = add i32 %190, -1
  %193 = mul i32 %192, %190
  %194 = and i32 %193, 1
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %196, %195
  %198 = select i1 %197, i32 -962731385, i32 -1877200866
  br label %.backedge

199:                                              ; preds = %10
  %200 = load i32, i32* @x.3, align 4
  %201 = load i32, i32* @y.4, align 4
  %202 = add i32 %200, -1
  %203 = mul i32 %202, %200
  %204 = and i32 %203, 1
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %206, %205
  %208 = select i1 %207, i32 434282947, i32 -1877200866
  br label %.backedge

209:                                              ; preds = %10
  %.0..0..0.68 = load volatile i1, i1* %1, align 1
  %210 = select i1 %.0..0..0.68, i32 1470191249, i32 658850762
  br label %.backedge

211:                                              ; preds = %10
  %212 = sext i32 %.073 to i64
  %213 = getelementptr inbounds [210 x i32], [210 x i32]* @top, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = icmp sgt i32 %214, 1
  %216 = select i1 %215, i32 -7389850, i32 277535328
  br label %.backedge

217:                                              ; preds = %10
  %218 = sext i32 %.073 to i64
  %219 = getelementptr inbounds [210 x i32], [210 x i32]* @top, i64 0, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = add i32 %220, -1
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds [210 x [5010 x i32]], [210 x [5010 x i32]]* @St, i64 0, i64 %218, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds [5010 x [210 x i32]], [5010 x [210 x i32]]* @d, i64 0, i64 %225, i64 %218
  %227 = load i32, i32* %226, align 4
  %228 = sext i32 %220 to i64
  %229 = getelementptr inbounds [210 x [5010 x i32]], [210 x [5010 x i32]]* @St, i64 0, i64 %218, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds [5010 x [210 x i32]], [5010 x [210 x i32]]* @d, i64 0, i64 %231, i64 %218
  %233 = load i32, i32* %232, align 4
  %234 = sub i32 %227, %233
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds [5010 x i64], [5010 x i64]* @add, i64 0, i64 %225
  %237 = load i64, i64* %236, align 8
  %238 = sub i64 %237, %235
  store i64 %238, i64* %236, align 8
  br label %.backedge

239:                                              ; preds = %10
  %240 = sext i32 %.073 to i64
  %241 = getelementptr inbounds [210 x i32], [210 x i32]* @top, i64 0, i64 %240
  %242 = load i32, i32* %241, align 4
  %243 = add i32 %242, -1
  store i32 %243, i32* %241, align 4
  br label %.backedge

244:                                              ; preds = %10
  %245 = load i32, i32* @x.3, align 4
  %246 = load i32, i32* @y.4, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 1211623131, i32 -2019023447
  br label %.backedge

254:                                              ; preds = %10
  %255 = sext i32 %.073 to i64
  %256 = getelementptr inbounds [210 x i32], [210 x i32]* @top, i64 0, i64 %255
  %257 = load i32, i32* %256, align 4
  %258 = add i32 %257, 1
  store i32 %258, i32* %256, align 4
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds [210 x [5010 x i32]], [210 x [5010 x i32]]* @St, i64 0, i64 %255, i64 %259
  store i32 %.079, i32* %260, align 4
  %261 = icmp sgt i32 %258, 1
  store i1 %261, i1* %2, align 1
  %262 = load i32, i32* @x.3, align 4
  %263 = load i32, i32* @y.4, align 4
  %264 = add i32 %262, -1
  %265 = mul i32 %264, %262
  %266 = and i32 %265, 1
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %268, %267
  %270 = select i1 %269, i32 1840834854, i32 -2019023447
  br label %.backedge

271:                                              ; preds = %10
  %.0..0..0.67 = load volatile i1, i1* %2, align 1
  %272 = select i1 %.0..0..0.67, i32 -1703222265, i32 -1322490090
  br label %.backedge

273:                                              ; preds = %10
  %274 = sext i32 %.073 to i64
  %275 = getelementptr inbounds [210 x i32], [210 x i32]* @top, i64 0, i64 %274
  %276 = load i32, i32* %275, align 4
  %277 = add i32 %276, -1
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds [210 x [5010 x i32]], [210 x [5010 x i32]]* @St, i64 0, i64 %274, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds [5010 x [210 x i32]], [5010 x [210 x i32]]* @d, i64 0, i64 %281, i64 %274
  %283 = load i32, i32* %282, align 4
  %284 = sext i32 %.079 to i64
  %285 = getelementptr inbounds [5010 x [210 x i32]], [5010 x [210 x i32]]* @d, i64 0, i64 %284, i64 %274
  %286 = load i32, i32* %285, align 4
  %287 = sub i32 %283, %286
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds [5010 x i64], [5010 x i64]* @add, i64 0, i64 %281
  %290 = load i64, i64* %289, align 8
  %291 = add i64 %290, %288
  store i64 %291, i64* %289, align 8
  br label %.backedge

292:                                              ; preds = %10
  %293 = sext i32 %.079 to i64
  %294 = sext i32 %.073 to i64
  %295 = getelementptr inbounds [5010 x [210 x i32]], [5010 x [210 x i32]]* @d, i64 0, i64 %293, i64 %294
  %296 = load i32, i32* %295, align 4
  %297 = sext i32 %296 to i64
  %298 = add i64 %.075, %297
  br label %.backedge

299:                                              ; preds = %10
  %300 = load i32, i32* @x.3, align 4
  %301 = load i32, i32* @y.4, align 4
  %302 = add i32 %300, -1
  %303 = mul i32 %302, %300
  %304 = and i32 %303, 1
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %306, %305
  %308 = select i1 %307, i32 -1104952974, i32 -1820676995
  br label %.backedge

309:                                              ; preds = %10
  %.neg88 = add i32 %.073, 1
  %310 = load i32, i32* @x.3, align 4
  %311 = load i32, i32* @y.4, align 4
  %312 = add i32 %310, -1
  %313 = mul i32 %312, %310
  %314 = and i32 %313, 1
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %316, %315
  %318 = select i1 %317, i32 1321607077, i32 -1820676995
  br label %.backedge

319:                                              ; preds = %10
  br label %.backedge

320:                                              ; preds = %10
  %321 = load i32, i32* @x.3, align 4
  %322 = load i32, i32* @y.4, align 4
  %323 = add i32 %321, -1
  %324 = mul i32 %323, %321
  %325 = and i32 %324, 1
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %327, %326
  %329 = select i1 %328, i32 557117672, i32 2102664972
  br label %.backedge

330:                                              ; preds = %10
  %331 = load i32, i32* @x.3, align 4
  %332 = load i32, i32* @y.4, align 4
  %333 = add i32 %331, -1
  %334 = mul i32 %333, %331
  %335 = and i32 %334, 1
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %337, %336
  %339 = select i1 %338, i32 920950657, i32 2102664972
  br label %.backedge

340:                                              ; preds = %10
  br label %.backedge

341:                                              ; preds = %10
  %342 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.071, %342
  %343 = select i1 %.not, i32 -330702363, i32 536897417
  br label %.backedge

344:                                              ; preds = %10
  %345 = sext i32 %.071 to i64
  %346 = getelementptr inbounds [5010 x i64], [5010 x i64]* @add, i64 0, i64 %345
  %347 = load i64, i64* %346, align 8
  %348 = add i64 %347, %.075
  %349 = sub i64 %348, %.077
  store i64 %349, i64* %7, align 8
  %350 = call dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %6, i64* nonnull dereferenceable(8) %7)
  %351 = load i64, i64* %350, align 8
  store i64 %351, i64* %6, align 8
  %352 = getelementptr inbounds [5010 x i32], [5010 x i32]* @A, i64 0, i64 %345
  %353 = load i32, i32* %352, align 4
  %354 = sext i32 %353 to i64
  %355 = add i64 %.077, %354
  br label %.backedge

356:                                              ; preds = %10
  %357 = add i32 %.071, 1
  br label %.backedge

358:                                              ; preds = %10
  br label %.backedge

359:                                              ; preds = %10
  %.neg87 = add i32 %.079, -1
  br label %.backedge

360:                                              ; preds = %10
  %361 = load i32, i32* @x.3, align 4
  %362 = load i32, i32* @y.4, align 4
  %363 = add i32 %361, -1
  %364 = mul i32 %363, %361
  %365 = and i32 %364, 1
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %367, %366
  %369 = select i1 %368, i32 -1794257196, i32 -830831448
  br label %.backedge

370:                                              ; preds = %10
  %371 = load i64, i64* %6, align 8
  %372 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %371)
  %373 = load i32, i32* @x.3, align 4
  %374 = load i32, i32* @y.4, align 4
  %375 = add i32 %373, -1
  %376 = mul i32 %375, %373
  %377 = and i32 %376, 1
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %379, %378
  %381 = select i1 %380, i32 -1226012926, i32 -830831448
  br label %.backedge

382:                                              ; preds = %10
  ret i32 0

383:                                              ; preds = %10
  %384 = call i32 @_Z4readv()
  %385 = sext i32 %.085 to i64
  %386 = getelementptr inbounds [5010 x i32], [5010 x i32]* @A, i64 0, i64 %385
  store i32 %384, i32* %386, align 4
  br label %.backedge

387:                                              ; preds = %10
  %388 = add i32 %.085, 1
  br label %.backedge

389:                                              ; preds = %10
  br label %.backedge

390:                                              ; preds = %10
  br label %.backedge

391:                                              ; preds = %10
  br label %.backedge

392:                                              ; preds = %10
  br label %.backedge

393:                                              ; preds = %10
  br label %.backedge

394:                                              ; preds = %10
  %395 = sext i32 %.073 to i64
  %396 = getelementptr inbounds [210 x i32], [210 x i32]* @top, i64 0, i64 %395
  %397 = load i32, i32* %396, align 4
  %398 = add i32 %397, 1
  store i32 %398, i32* %396, align 4
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds [210 x [5010 x i32]], [210 x [5010 x i32]]* @St, i64 0, i64 %395, i64 %399
  store i32 %.079, i32* %400, align 4
  br label %.backedge

401:                                              ; preds = %10
  %.neg = add i32 %.073, 1
  br label %.backedge

402:                                              ; preds = %10
  br label %.backedge

403:                                              ; preds = %10
  %404 = load i64, i64* %6, align 8
  %405 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 %404)
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #7 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %0, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %1, align 8
  store i64 %6, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.07.ph = phi i64* [ undef, %2 ], [ %.07.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ 1084060935, %2 ], [ 362902390, %.outer.backedge ]
  br label %.outer9

.outer9:                                          ; preds = %.outer, %8
  %.0.ph10 = phi i32 [ %.0.ph, %.outer ], [ %10, %8 ]
  br label %7

7:                                                ; preds = %.outer9, %7
  switch i32 %.0.ph10, label %7 [
    i32 1084060935, label %8
    i32 750741698, label %.outer.backedge
    i32 343608419, label %11
    i32 362902390, label %12
  ]

8:                                                ; preds = %7
  %.0..0..0.5 = load volatile i64, i64* %4, align 8
  %.0..0..0.6 = load volatile i64, i64* %3, align 8
  %9 = icmp slt i64 %.0..0..0.5, %.0..0..0.6
  %10 = select i1 %9, i32 750741698, i32 343608419
  br label %.outer9

11:                                               ; preds = %7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %7, %11
  %.07.ph.be = phi i64* [ %0, %11 ], [ %1, %7 ]
  br label %.outer

12:                                               ; preds = %7
  ret i64* %.07.ph
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s189512845.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
