; ModuleID = 'build_ollvm/programs/p03833/s318821917.ll'
source_filename = "Project_CodeNet_C++1400/p03833/s318821917.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_Z4readv = comdat any

$_Z3gggiii = comdat any

$_ZSt3maxIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = local_unnamed_addr global i32 0, align 4
@m = local_unnamed_addr global i32 0, align 4
@g = local_unnamed_addr global [205 x [5005 x i32]] zeroinitializer, align 16
@a = local_unnamed_addr global [205 x [5005 x i32]] zeroinitializer, align 16
@de = local_unnamed_addr global [5005 x i64] zeroinitializer, align 16
@sum = local_unnamed_addr global [5005 x i64] zeroinitializer, align 16
@ans = global i64 0, align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s318821917.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i64, align 8
  %6 = tail call i32 @_Z4readv()
  store i32 %6, i32* @n, align 4
  %7 = tail call i32 @_Z4readv()
  store i32 %7, i32* @m, align 4
  br label %8

8:                                                ; preds = %.backedge, %0
  %.096 = phi i32 [ 2, %0 ], [ %.096.be, %.backedge ]
  %.094 = phi i32 [ undef, %0 ], [ %.094.be, %.backedge ]
  %.092 = phi i32 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i32 [ undef, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i32 [ undef, %0 ], [ %.088.be, %.backedge ]
  %.086 = phi i32 [ undef, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i32 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i32 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i64 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.0 = phi i32 [ -1008075596, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1008075596, label %9
    i32 -235168242, label %19
    i32 -536002843, label %31
    i32 -342695925, label %33
    i32 1758953874, label %43
    i32 -750227022, label %45
    i32 1707260746, label %46
    i32 -867582936, label %49
    i32 735587728, label %50
    i32 -859370737, label %53
    i32 -529163450, label %63
    i32 -455041311, label %77
    i32 -223078864, label %78
    i32 -1735377152, label %80
    i32 -118164575, label %90
    i32 2118475286, label %100
    i32 -1324065435, label %101
    i32 1867883994, label %111
    i32 -509142032, label %122
    i32 249281606, label %123
    i32 239020416, label %124
    i32 1314619453, label %134
    i32 -1451666599, label %146
    i32 -697142288, label %148
    i32 -1146848639, label %154
    i32 199426215, label %156
    i32 -575196057, label %164
    i32 446760555, label %166
    i32 1091903348, label %167
    i32 544242023, label %177
    i32 -777214082, label %188
    i32 257077359, label %189
    i32 -1524073620, label %199
    i32 -1090352675, label %210
    i32 -543402519, label %211
    i32 1811539699, label %213
    i32 -1466830763, label %223
    i32 -1792467871, label %233
    i32 -1694821759, label %234
    i32 -813264366, label %244
    i32 -1075378009, label %256
    i32 -1756679241, label %258
    i32 -460554794, label %267
    i32 1826119570, label %277
    i32 1637834300, label %295
    i32 1468679572, label %297
    i32 1627357339, label %312
    i32 1557542319, label %317
    i32 1232707398, label %336
    i32 -713323337, label %346
    i32 -1074916610, label %356
    i32 -311826420, label %357
    i32 1457659441, label %358
    i32 -1334016646, label %361
    i32 1874212833, label %375
    i32 -1981235038, label %377
    i32 -1370618873, label %378
    i32 -2048327285, label %380
    i32 2091239021, label %384
    i32 859620969, label %385
    i32 -153399823, label %390
    i32 1322634586, label %391
    i32 -399988404, label %393
    i32 -167254578, label %394
    i32 -101786144, label %396
    i32 1199867108, label %398
    i32 -622954196, label %399
    i32 1407744578, label %400
    i32 -1969369192, label %401
  ]

.backedge:                                        ; preds = %8, %401, %400, %399, %398, %396, %394, %393, %391, %390, %385, %384, %378, %377, %375, %361, %358, %357, %356, %346, %336, %317, %312, %297, %295, %277, %267, %258, %256, %244, %234, %233, %223, %213, %211, %210, %199, %189, %188, %177, %167, %166, %164, %156, %154, %148, %146, %134, %124, %123, %122, %111, %101, %100, %90, %80, %78, %77, %63, %53, %50, %49, %46, %45, %43, %33, %31, %19, %9
  %.096.be = phi i32 [ %.096, %8 ], [ %.096, %401 ], [ %.096, %400 ], [ %.096, %399 ], [ %.096, %398 ], [ %.096, %396 ], [ %.096, %394 ], [ %.096, %393 ], [ %.096, %391 ], [ %.096, %390 ], [ %.096, %385 ], [ %.096, %384 ], [ %.096, %378 ], [ %.096, %377 ], [ %.096, %375 ], [ %.096, %361 ], [ %.096, %358 ], [ %.096, %357 ], [ %.096, %356 ], [ %.096, %346 ], [ %.096, %336 ], [ %.096, %317 ], [ %.096, %312 ], [ %.096, %297 ], [ %.096, %295 ], [ %.096, %277 ], [ %.096, %267 ], [ %.096, %258 ], [ %.096, %256 ], [ %.096, %244 ], [ %.096, %234 ], [ %.096, %233 ], [ %.096, %223 ], [ %.096, %213 ], [ %.096, %211 ], [ %.096, %210 ], [ %.096, %199 ], [ %.096, %189 ], [ %.096, %188 ], [ %.096, %177 ], [ %.096, %167 ], [ %.096, %166 ], [ %.096, %164 ], [ %.096, %156 ], [ %.096, %154 ], [ %.096, %148 ], [ %.096, %146 ], [ %.096, %134 ], [ %.096, %124 ], [ %.096, %123 ], [ %.096, %122 ], [ %.096, %111 ], [ %.096, %101 ], [ %.096, %100 ], [ %.096, %90 ], [ %.096, %80 ], [ %.096, %78 ], [ %.096, %77 ], [ %.096, %63 ], [ %.096, %53 ], [ %.096, %50 ], [ %.096, %49 ], [ %.096, %46 ], [ %.096, %45 ], [ %44, %43 ], [ %.096, %33 ], [ %.096, %31 ], [ %.096, %19 ], [ %.096, %9 ]
  %.094.be = phi i32 [ %.094, %8 ], [ %.094, %401 ], [ %.094, %400 ], [ %.094, %399 ], [ %.094, %398 ], [ %.094, %396 ], [ %.094, %394 ], [ %.094, %393 ], [ %392, %391 ], [ %.094, %390 ], [ %.094, %385 ], [ %.094, %384 ], [ %.094, %378 ], [ %.094, %377 ], [ %.094, %375 ], [ %.094, %361 ], [ %.094, %358 ], [ %.094, %357 ], [ %.094, %356 ], [ %.094, %346 ], [ %.094, %336 ], [ %.094, %317 ], [ %.094, %312 ], [ %.094, %297 ], [ %.094, %295 ], [ %.094, %277 ], [ %.094, %267 ], [ %.094, %258 ], [ %.094, %256 ], [ %.094, %244 ], [ %.094, %234 ], [ %.094, %233 ], [ %.094, %223 ], [ %.094, %213 ], [ %.094, %211 ], [ %.094, %210 ], [ %.094, %199 ], [ %.094, %189 ], [ %.094, %188 ], [ %.094, %177 ], [ %.094, %167 ], [ %.094, %166 ], [ %.094, %164 ], [ %.094, %156 ], [ %.094, %154 ], [ %.094, %148 ], [ %.094, %146 ], [ %.094, %134 ], [ %.094, %124 ], [ %.094, %123 ], [ %.094, %122 ], [ %112, %111 ], [ %.094, %101 ], [ %.094, %100 ], [ %.094, %90 ], [ %.094, %80 ], [ %.094, %78 ], [ %.094, %77 ], [ %.094, %63 ], [ %.094, %53 ], [ %.094, %50 ], [ %.094, %49 ], [ %.094, %46 ], [ 1, %45 ], [ %.094, %43 ], [ %.094, %33 ], [ %.094, %31 ], [ %.094, %19 ], [ %.094, %9 ]
  %.092.be = phi i32 [ %.092, %8 ], [ %.092, %401 ], [ %.092, %400 ], [ %.092, %399 ], [ %.092, %398 ], [ %.092, %396 ], [ %.092, %394 ], [ %.092, %393 ], [ %.092, %391 ], [ %.092, %390 ], [ %.092, %385 ], [ %.092, %384 ], [ %.092, %378 ], [ %.092, %377 ], [ %.092, %375 ], [ %.092, %361 ], [ %.092, %358 ], [ %.092, %357 ], [ %.092, %356 ], [ %.092, %346 ], [ %.092, %336 ], [ %.092, %317 ], [ %.092, %312 ], [ %.092, %297 ], [ %.092, %295 ], [ %.092, %277 ], [ %.092, %267 ], [ %.092, %258 ], [ %.092, %256 ], [ %.092, %244 ], [ %.092, %234 ], [ %.092, %233 ], [ %.092, %223 ], [ %.092, %213 ], [ %.092, %211 ], [ %.092, %210 ], [ %.092, %199 ], [ %.092, %189 ], [ %.092, %188 ], [ %.092, %177 ], [ %.092, %167 ], [ %.092, %166 ], [ %.092, %164 ], [ %.092, %156 ], [ %.092, %154 ], [ %.092, %148 ], [ %.092, %146 ], [ %.092, %134 ], [ %.092, %124 ], [ %.092, %123 ], [ %.092, %122 ], [ %.092, %111 ], [ %.092, %101 ], [ %.092, %100 ], [ %.092, %90 ], [ %.092, %80 ], [ %79, %78 ], [ %.092, %77 ], [ %.092, %63 ], [ %.092, %53 ], [ %.092, %50 ], [ 1, %49 ], [ %.092, %46 ], [ %.092, %45 ], [ %.092, %43 ], [ %.092, %33 ], [ %.092, %31 ], [ %.092, %19 ], [ %.092, %9 ]
  %.090.be = phi i32 [ %.090, %8 ], [ %.090, %401 ], [ %.090, %400 ], [ %.090, %399 ], [ %.090, %398 ], [ %.090, %396 ], [ %395, %394 ], [ %.090, %393 ], [ %.090, %391 ], [ %.090, %390 ], [ %.090, %385 ], [ %.090, %384 ], [ %.090, %378 ], [ %.090, %377 ], [ %.090, %375 ], [ %.090, %361 ], [ %.090, %358 ], [ %.090, %357 ], [ %.090, %356 ], [ %.090, %346 ], [ %.090, %336 ], [ %.090, %317 ], [ %.090, %312 ], [ %.090, %297 ], [ %.090, %295 ], [ %.090, %277 ], [ %.090, %267 ], [ %.090, %258 ], [ %.090, %256 ], [ %.090, %244 ], [ %.090, %234 ], [ %.090, %233 ], [ %.090, %223 ], [ %.090, %213 ], [ %.090, %211 ], [ %.090, %210 ], [ %.090, %199 ], [ %.090, %189 ], [ %.090, %188 ], [ %178, %177 ], [ %.090, %167 ], [ %.090, %166 ], [ %.090, %164 ], [ %.090, %156 ], [ %.090, %154 ], [ %.090, %148 ], [ %.090, %146 ], [ %.090, %134 ], [ %.090, %124 ], [ 1, %123 ], [ %.090, %122 ], [ %.090, %111 ], [ %.090, %101 ], [ %.090, %100 ], [ %.090, %90 ], [ %.090, %80 ], [ %.090, %78 ], [ %.090, %77 ], [ %.090, %63 ], [ %.090, %53 ], [ %.090, %50 ], [ %.090, %49 ], [ %.090, %46 ], [ %.090, %45 ], [ %.090, %43 ], [ %.090, %33 ], [ %.090, %31 ], [ %.090, %19 ], [ %.090, %9 ]
  %.088.be = phi i32 [ %.088, %8 ], [ %.088, %401 ], [ %.088, %400 ], [ %.088, %399 ], [ %.088, %398 ], [ %.088, %396 ], [ %.088, %394 ], [ %.088, %393 ], [ %.088, %391 ], [ %.088, %390 ], [ %.088, %385 ], [ %.088, %384 ], [ %.088, %378 ], [ %.088, %377 ], [ %.088, %375 ], [ %.088, %361 ], [ %.088, %358 ], [ %.088, %357 ], [ %.088, %356 ], [ %.088, %346 ], [ %.088, %336 ], [ %.088, %317 ], [ %.088, %312 ], [ %.088, %297 ], [ %.088, %295 ], [ %.088, %277 ], [ %.088, %267 ], [ %.088, %258 ], [ %.088, %256 ], [ %.088, %244 ], [ %.088, %234 ], [ %.088, %233 ], [ %.088, %223 ], [ %.088, %213 ], [ %.088, %211 ], [ %.088, %210 ], [ %.088, %199 ], [ %.088, %189 ], [ %.088, %188 ], [ %.088, %177 ], [ %.088, %167 ], [ %.088, %166 ], [ %165, %164 ], [ %.088, %156 ], [ %.088, %154 ], [ %150, %148 ], [ %.088, %146 ], [ %.088, %134 ], [ %.088, %124 ], [ %.088, %123 ], [ %.088, %122 ], [ %.088, %111 ], [ %.088, %101 ], [ %.088, %100 ], [ %.088, %90 ], [ %.088, %80 ], [ %.088, %78 ], [ %.088, %77 ], [ %.088, %63 ], [ %.088, %53 ], [ %.088, %50 ], [ %.088, %49 ], [ %.088, %46 ], [ %.088, %45 ], [ %.088, %43 ], [ %.088, %33 ], [ %.088, %31 ], [ %.088, %19 ], [ %.088, %9 ]
  %.086.be = phi i32 [ %.086, %8 ], [ %.086, %401 ], [ %.086, %400 ], [ %.086, %399 ], [ %.086, %398 ], [ %397, %396 ], [ %.086, %394 ], [ %.086, %393 ], [ %.086, %391 ], [ %.086, %390 ], [ %.086, %385 ], [ %.086, %384 ], [ %379, %378 ], [ %.086, %377 ], [ %.086, %375 ], [ %.086, %361 ], [ %.086, %358 ], [ %.086, %357 ], [ %.086, %356 ], [ %.086, %346 ], [ %.086, %336 ], [ %.086, %317 ], [ %.086, %312 ], [ %.086, %297 ], [ %.086, %295 ], [ %.086, %277 ], [ %.086, %267 ], [ %.086, %258 ], [ %.086, %256 ], [ %.086, %244 ], [ %.086, %234 ], [ %.086, %233 ], [ %.086, %223 ], [ %.086, %213 ], [ %.086, %211 ], [ %.086, %210 ], [ %200, %199 ], [ %.086, %189 ], [ %.086, %188 ], [ %.086, %177 ], [ %.086, %167 ], [ %.086, %166 ], [ %.086, %164 ], [ %.086, %156 ], [ %.086, %154 ], [ %.086, %148 ], [ %.086, %146 ], [ %.086, %134 ], [ %.086, %124 ], [ %.086, %123 ], [ %.086, %122 ], [ %.086, %111 ], [ %.086, %101 ], [ %.086, %100 ], [ %.086, %90 ], [ %.086, %80 ], [ %.086, %78 ], [ %.086, %77 ], [ %.086, %63 ], [ %.086, %53 ], [ %.086, %50 ], [ %.086, %49 ], [ %.086, %46 ], [ %.086, %45 ], [ %.086, %43 ], [ %.086, %33 ], [ %.086, %31 ], [ %.086, %19 ], [ %.086, %9 ]
  %.084.be = phi i32 [ %.084, %8 ], [ %402, %401 ], [ %.084, %400 ], [ %.084, %399 ], [ 1, %398 ], [ %.084, %396 ], [ %.084, %394 ], [ %.084, %393 ], [ %.084, %391 ], [ %.084, %390 ], [ %.084, %385 ], [ %.084, %384 ], [ %.084, %378 ], [ %.084, %377 ], [ %.084, %375 ], [ %.084, %361 ], [ %.084, %358 ], [ %.084, %357 ], [ %.084, %356 ], [ %.neg99, %346 ], [ %.084, %336 ], [ %.084, %317 ], [ %.084, %312 ], [ %.084, %297 ], [ %.084, %295 ], [ %.084, %277 ], [ %.084, %267 ], [ %.084, %258 ], [ %.084, %256 ], [ %.084, %244 ], [ %.084, %234 ], [ %.084, %233 ], [ 1, %223 ], [ %.084, %213 ], [ %.084, %211 ], [ %.084, %210 ], [ %.084, %199 ], [ %.084, %189 ], [ %.084, %188 ], [ %.084, %177 ], [ %.084, %167 ], [ %.084, %166 ], [ %.084, %164 ], [ %.084, %156 ], [ %.084, %154 ], [ %.084, %148 ], [ %.084, %146 ], [ %.084, %134 ], [ %.084, %124 ], [ %.084, %123 ], [ %.084, %122 ], [ %.084, %111 ], [ %.084, %101 ], [ %.084, %100 ], [ %.084, %90 ], [ %.084, %80 ], [ %.084, %78 ], [ %.084, %77 ], [ %.084, %63 ], [ %.084, %53 ], [ %.084, %50 ], [ %.084, %49 ], [ %.084, %46 ], [ %.084, %45 ], [ %.084, %43 ], [ %.084, %33 ], [ %.084, %31 ], [ %.084, %19 ], [ %.084, %9 ]
  %.082.be = phi i32 [ %.082, %8 ], [ %.082, %401 ], [ %.082, %400 ], [ %.082, %399 ], [ %.082, %398 ], [ %.082, %396 ], [ %.082, %394 ], [ %.082, %393 ], [ %.082, %391 ], [ %.082, %390 ], [ %.082, %385 ], [ %.082, %384 ], [ %.082, %378 ], [ %.082, %377 ], [ %.082, %375 ], [ %.082, %361 ], [ %.082, %358 ], [ %.082, %357 ], [ %.082, %356 ], [ %.082, %346 ], [ %.082, %336 ], [ %.082, %317 ], [ %316, %312 ], [ %.082, %297 ], [ %.082, %295 ], [ %.082, %277 ], [ %.082, %267 ], [ %.neg100, %258 ], [ %.082, %256 ], [ %.082, %244 ], [ %.082, %234 ], [ %.082, %233 ], [ %.082, %223 ], [ %.082, %213 ], [ %.082, %211 ], [ %.082, %210 ], [ %.082, %199 ], [ %.082, %189 ], [ %.082, %188 ], [ %.082, %177 ], [ %.082, %167 ], [ %.082, %166 ], [ %.082, %164 ], [ %.082, %156 ], [ %.082, %154 ], [ %.082, %148 ], [ %.082, %146 ], [ %.082, %134 ], [ %.082, %124 ], [ %.082, %123 ], [ %.082, %122 ], [ %.082, %111 ], [ %.082, %101 ], [ %.082, %100 ], [ %.082, %90 ], [ %.082, %80 ], [ %.082, %78 ], [ %.082, %77 ], [ %.082, %63 ], [ %.082, %53 ], [ %.082, %50 ], [ %.082, %49 ], [ %.082, %46 ], [ %.082, %45 ], [ %.082, %43 ], [ %.082, %33 ], [ %.082, %31 ], [ %.082, %19 ], [ %.082, %9 ]
  %.080.be = phi i64 [ %.080, %8 ], [ %.080, %401 ], [ %.080, %400 ], [ %.080, %399 ], [ %.080, %398 ], [ %.080, %396 ], [ %.080, %394 ], [ %.080, %393 ], [ %.080, %391 ], [ %.080, %390 ], [ %.080, %385 ], [ %.080, %384 ], [ %.080, %378 ], [ %.080, %377 ], [ %.080, %375 ], [ %365, %361 ], [ %.080, %358 ], [ 0, %357 ], [ %.080, %356 ], [ %.080, %346 ], [ %.080, %336 ], [ %.080, %317 ], [ %.080, %312 ], [ %.080, %297 ], [ %.080, %295 ], [ %.080, %277 ], [ %.080, %267 ], [ %.080, %258 ], [ %.080, %256 ], [ %.080, %244 ], [ %.080, %234 ], [ %.080, %233 ], [ %.080, %223 ], [ %.080, %213 ], [ %.080, %211 ], [ %.080, %210 ], [ %.080, %199 ], [ %.080, %189 ], [ %.080, %188 ], [ %.080, %177 ], [ %.080, %167 ], [ %.080, %166 ], [ %.080, %164 ], [ %.080, %156 ], [ %.080, %154 ], [ %.080, %148 ], [ %.080, %146 ], [ %.080, %134 ], [ %.080, %124 ], [ %.080, %123 ], [ %.080, %122 ], [ %.080, %111 ], [ %.080, %101 ], [ %.080, %100 ], [ %.080, %90 ], [ %.080, %80 ], [ %.080, %78 ], [ %.080, %77 ], [ %.080, %63 ], [ %.080, %53 ], [ %.080, %50 ], [ %.080, %49 ], [ %.080, %46 ], [ %.080, %45 ], [ %.080, %43 ], [ %.080, %33 ], [ %.080, %31 ], [ %.080, %19 ], [ %.080, %9 ]
  %.078.be = phi i32 [ %.078, %8 ], [ %.078, %401 ], [ %.078, %400 ], [ %.078, %399 ], [ %.078, %398 ], [ %.078, %396 ], [ %.078, %394 ], [ %.078, %393 ], [ %.078, %391 ], [ %.078, %390 ], [ %.078, %385 ], [ %.078, %384 ], [ %.078, %378 ], [ %.078, %377 ], [ %376, %375 ], [ %.078, %361 ], [ %.078, %358 ], [ %.086, %357 ], [ %.078, %356 ], [ %.078, %346 ], [ %.078, %336 ], [ %.078, %317 ], [ %.078, %312 ], [ %.078, %297 ], [ %.078, %295 ], [ %.078, %277 ], [ %.078, %267 ], [ %.078, %258 ], [ %.078, %256 ], [ %.078, %244 ], [ %.078, %234 ], [ %.078, %233 ], [ %.078, %223 ], [ %.078, %213 ], [ %.078, %211 ], [ %.078, %210 ], [ %.078, %199 ], [ %.078, %189 ], [ %.078, %188 ], [ %.078, %177 ], [ %.078, %167 ], [ %.078, %166 ], [ %.078, %164 ], [ %.078, %156 ], [ %.078, %154 ], [ %.078, %148 ], [ %.078, %146 ], [ %.078, %134 ], [ %.078, %124 ], [ %.078, %123 ], [ %.078, %122 ], [ %.078, %111 ], [ %.078, %101 ], [ %.078, %100 ], [ %.078, %90 ], [ %.078, %80 ], [ %.078, %78 ], [ %.078, %77 ], [ %.078, %63 ], [ %.078, %53 ], [ %.078, %50 ], [ %.078, %49 ], [ %.078, %46 ], [ %.078, %45 ], [ %.078, %43 ], [ %.078, %33 ], [ %.078, %31 ], [ %.078, %19 ], [ %.078, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ -713323337, %401 ], [ 1826119570, %400 ], [ -813264366, %399 ], [ -1466830763, %398 ], [ -1524073620, %396 ], [ 544242023, %394 ], [ 1314619453, %393 ], [ 1867883994, %391 ], [ -118164575, %390 ], [ -529163450, %385 ], [ -235168242, %384 ], [ -543402519, %378 ], [ -1370618873, %377 ], [ 1457659441, %375 ], [ 1874212833, %361 ], [ %360, %358 ], [ 1457659441, %357 ], [ -1694821759, %356 ], [ %355, %346 ], [ %345, %336 ], [ 1232707398, %317 ], [ -460554794, %312 ], [ 1627357339, %297 ], [ %296, %295 ], [ %294, %277 ], [ %276, %267 ], [ -460554794, %258 ], [ %257, %256 ], [ %255, %244 ], [ %243, %234 ], [ -1694821759, %233 ], [ %232, %223 ], [ %222, %213 ], [ %212, %211 ], [ -543402519, %210 ], [ %209, %199 ], [ %198, %189 ], [ 239020416, %188 ], [ %187, %177 ], [ %176, %167 ], [ 1091903348, %166 ], [ -1146848639, %164 ], [ -575196057, %156 ], [ %155, %154 ], [ -1146848639, %148 ], [ %147, %146 ], [ %145, %134 ], [ %133, %124 ], [ 239020416, %123 ], [ 1707260746, %122 ], [ %121, %111 ], [ %110, %101 ], [ -1324065435, %100 ], [ %99, %90 ], [ %89, %80 ], [ 735587728, %78 ], [ -223078864, %77 ], [ %76, %63 ], [ %62, %53 ], [ %52, %50 ], [ 735587728, %49 ], [ %48, %46 ], [ 1707260746, %45 ], [ -1008075596, %43 ], [ 1758953874, %33 ], [ %32, %31 ], [ %30, %19 ], [ %18, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i32, i32* @x.1, align 4
  %11 = load i32, i32* @y.2, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %16, %15
  %18 = select i1 %17, i32 -235168242, i32 2091239021
  br label %.backedge

19:                                               ; preds = %8
  %20 = load i32, i32* @n, align 4
  %21 = icmp sle i32 %.096, %20
  store i1 %21, i1* %4, align 1
  %22 = load i32, i32* @x.1, align 4
  %23 = load i32, i32* @y.2, align 4
  %24 = add i32 %22, -1
  %25 = mul i32 %24, %22
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %28, %27
  %30 = select i1 %29, i32 -536002843, i32 2091239021
  br label %.backedge

31:                                               ; preds = %8
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %32 = select i1 %.0..0..0., i32 -342695925, i32 -750227022
  br label %.backedge

33:                                               ; preds = %8
  %34 = add i32 %.096, -1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [5005 x i64], [5005 x i64]* @sum, i64 0, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = call i32 @_Z4readv()
  %39 = sext i32 %38 to i64
  %40 = add i64 %37, %39
  %41 = sext i32 %.096 to i64
  %42 = getelementptr inbounds [5005 x i64], [5005 x i64]* @sum, i64 0, i64 %41
  store i64 %40, i64* %42, align 8
  br label %.backedge

43:                                               ; preds = %8
  %44 = add i32 %.096, 1
  br label %.backedge

45:                                               ; preds = %8
  br label %.backedge

46:                                               ; preds = %8
  %47 = load i32, i32* @n, align 4
  %.not105 = icmp sgt i32 %.094, %47
  %48 = select i1 %.not105, i32 249281606, i32 -867582936
  br label %.backedge

49:                                               ; preds = %8
  br label %.backedge

50:                                               ; preds = %8
  %51 = load i32, i32* @m, align 4
  %.not104 = icmp sgt i32 %.092, %51
  %52 = select i1 %.not104, i32 -1735377152, i32 -859370737
  br label %.backedge

53:                                               ; preds = %8
  %54 = load i32, i32* @x.1, align 4
  %55 = load i32, i32* @y.2, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 -529163450, i32 859620969
  br label %.backedge

63:                                               ; preds = %8
  %64 = call i32 @_Z4readv()
  %65 = sext i32 %.092 to i64
  %66 = sext i32 %.094 to i64
  %67 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %65, i64 %66
  store i32 %64, i32* %67, align 4
  %68 = load i32, i32* @x.1, align 4
  %69 = load i32, i32* @y.2, align 4
  %70 = add i32 %68, -1
  %71 = mul i32 %70, %68
  %72 = and i32 %71, 1
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %74, %73
  %76 = select i1 %75, i32 -455041311, i32 859620969
  br label %.backedge

77:                                               ; preds = %8
  br label %.backedge

78:                                               ; preds = %8
  %79 = add i32 %.092, 1
  br label %.backedge

80:                                               ; preds = %8
  %81 = load i32, i32* @x.1, align 4
  %82 = load i32, i32* @y.2, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 -118164575, i32 -153399823
  br label %.backedge

90:                                               ; preds = %8
  %91 = load i32, i32* @x.1, align 4
  %92 = load i32, i32* @y.2, align 4
  %93 = add i32 %91, -1
  %94 = mul i32 %93, %91
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %97, %96
  %99 = select i1 %98, i32 2118475286, i32 -153399823
  br label %.backedge

100:                                              ; preds = %8
  br label %.backedge

101:                                              ; preds = %8
  %102 = load i32, i32* @x.1, align 4
  %103 = load i32, i32* @y.2, align 4
  %104 = add i32 %102, -1
  %105 = mul i32 %104, %102
  %106 = and i32 %105, 1
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %108, %107
  %110 = select i1 %109, i32 1867883994, i32 1322634586
  br label %.backedge

111:                                              ; preds = %8
  %112 = add i32 %.094, 1
  %113 = load i32, i32* @x.1, align 4
  %114 = load i32, i32* @y.2, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 -509142032, i32 1322634586
  br label %.backedge

122:                                              ; preds = %8
  br label %.backedge

123:                                              ; preds = %8
  br label %.backedge

124:                                              ; preds = %8
  %125 = load i32, i32* @x.1, align 4
  %126 = load i32, i32* @y.2, align 4
  %127 = add i32 %125, -1
  %128 = mul i32 %127, %125
  %129 = and i32 %128, 1
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %131, %130
  %133 = select i1 %132, i32 1314619453, i32 -399988404
  br label %.backedge

134:                                              ; preds = %8
  %135 = load i32, i32* @m, align 4
  %136 = icmp sle i32 %.090, %135
  store i1 %136, i1* %3, align 1
  %137 = load i32, i32* @x.1, align 4
  %138 = load i32, i32* @y.2, align 4
  %139 = add i32 %137, -1
  %140 = mul i32 %139, %137
  %141 = and i32 %140, 1
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %143, %142
  %145 = select i1 %144, i32 -1451666599, i32 -399988404
  br label %.backedge

146:                                              ; preds = %8
  %.0..0..0.75 = load volatile i1, i1* %3, align 1
  %147 = select i1 %.0..0..0.75, i32 -697142288, i32 257077359
  br label %.backedge

148:                                              ; preds = %8
  %149 = sext i32 %.090 to i64
  %150 = load i32, i32* @n, align 4
  %.neg103 = add i32 %150, 1
  %151 = sext i32 %.neg103 to i64
  %152 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %149, i64 %151
  store i32 2000000000, i32* %152, align 4
  %153 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %149, i64 0
  store i32 2000000000, i32* %153, align 4
  br label %.backedge

154:                                              ; preds = %8
  %.not102 = icmp eq i32 %.088, 0
  %155 = select i1 %.not102, i32 446760555, i32 199426215
  br label %.backedge

156:                                              ; preds = %8
  %157 = add i32 %.088, 1
  %158 = sext i32 %.090 to i64
  %159 = sext i32 %.088 to i64
  %160 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %158, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = call i32 @_Z3gggiii(i32 %.090, i32 %157, i32 %161)
  %163 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @g, i64 0, i64 %158, i64 %159
  store i32 %162, i32* %163, align 4
  br label %.backedge

164:                                              ; preds = %8
  %165 = add i32 %.088, -1
  br label %.backedge

166:                                              ; preds = %8
  br label %.backedge

167:                                              ; preds = %8
  %168 = load i32, i32* @x.1, align 4
  %169 = load i32, i32* @y.2, align 4
  %170 = add i32 %168, -1
  %171 = mul i32 %170, %168
  %172 = and i32 %171, 1
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %174, %173
  %176 = select i1 %175, i32 544242023, i32 -167254578
  br label %.backedge

177:                                              ; preds = %8
  %178 = add i32 %.090, 1
  %179 = load i32, i32* @x.1, align 4
  %180 = load i32, i32* @y.2, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 -777214082, i32 -167254578
  br label %.backedge

188:                                              ; preds = %8
  br label %.backedge

189:                                              ; preds = %8
  %190 = load i32, i32* @x.1, align 4
  %191 = load i32, i32* @y.2, align 4
  %192 = add i32 %190, -1
  %193 = mul i32 %192, %190
  %194 = and i32 %193, 1
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %196, %195
  %198 = select i1 %197, i32 -1524073620, i32 -101786144
  br label %.backedge

199:                                              ; preds = %8
  %200 = load i32, i32* @n, align 4
  %201 = load i32, i32* @x.1, align 4
  %202 = load i32, i32* @y.2, align 4
  %203 = add i32 %201, -1
  %204 = mul i32 %203, %201
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %207, %206
  %209 = select i1 %208, i32 -1090352675, i32 -101786144
  br label %.backedge

210:                                              ; preds = %8
  br label %.backedge

211:                                              ; preds = %8
  %.not101 = icmp eq i32 %.086, 0
  %212 = select i1 %.not101, i32 -2048327285, i32 1811539699
  br label %.backedge

213:                                              ; preds = %8
  %214 = load i32, i32* @x.1, align 4
  %215 = load i32, i32* @y.2, align 4
  %216 = add i32 %214, -1
  %217 = mul i32 %216, %214
  %218 = and i32 %217, 1
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %220, %219
  %222 = select i1 %221, i32 -1466830763, i32 1199867108
  br label %.backedge

223:                                              ; preds = %8
  %224 = load i32, i32* @x.1, align 4
  %225 = load i32, i32* @y.2, align 4
  %226 = add i32 %224, -1
  %227 = mul i32 %226, %224
  %228 = and i32 %227, 1
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %230, %229
  %232 = select i1 %231, i32 -1792467871, i32 1199867108
  br label %.backedge

233:                                              ; preds = %8
  br label %.backedge

234:                                              ; preds = %8
  %235 = load i32, i32* @x.1, align 4
  %236 = load i32, i32* @y.2, align 4
  %237 = add i32 %235, -1
  %238 = mul i32 %237, %235
  %239 = and i32 %238, 1
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %241, %240
  %243 = select i1 %242, i32 -813264366, i32 -622954196
  br label %.backedge

244:                                              ; preds = %8
  %245 = load i32, i32* @m, align 4
  %246 = icmp sle i32 %.084, %245
  store i1 %246, i1* %2, align 1
  %247 = load i32, i32* @x.1, align 4
  %248 = load i32, i32* @y.2, align 4
  %249 = add i32 %247, -1
  %250 = mul i32 %249, %247
  %251 = and i32 %250, 1
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %253, %252
  %255 = select i1 %254, i32 -1075378009, i32 -622954196
  br label %.backedge

256:                                              ; preds = %8
  %.0..0..0.76 = load volatile i1, i1* %2, align 1
  %257 = select i1 %.0..0..0.76, i32 -1756679241, i32 -311826420
  br label %.backedge

258:                                              ; preds = %8
  %259 = sext i32 %.084 to i64
  %.neg100 = add i32 %.086, 1
  %260 = sext i32 %.neg100 to i64
  %261 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %259, i64 %260
  %262 = load i32, i32* %261, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds [5005 x i64], [5005 x i64]* @de, i64 0, i64 %260
  %265 = load i64, i64* %264, align 8
  %266 = sub i64 %265, %263
  store i64 %266, i64* %264, align 8
  br label %.backedge

267:                                              ; preds = %8
  %268 = load i32, i32* @x.1, align 4
  %269 = load i32, i32* @y.2, align 4
  %270 = add i32 %268, -1
  %271 = mul i32 %270, %268
  %272 = and i32 %271, 1
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %274, %273
  %276 = select i1 %275, i32 1826119570, i32 1407744578
  br label %.backedge

277:                                              ; preds = %8
  %278 = sext i32 %.084 to i64
  %279 = sext i32 %.082 to i64
  %280 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %278, i64 %279
  %281 = load i32, i32* %280, align 4
  %282 = sext i32 %.086 to i64
  %283 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %278, i64 %282
  %284 = load i32, i32* %283, align 4
  %285 = icmp sle i32 %281, %284
  store i1 %285, i1* %1, align 1
  %286 = load i32, i32* @x.1, align 4
  %287 = load i32, i32* @y.2, align 4
  %288 = add i32 %286, -1
  %289 = mul i32 %288, %286
  %290 = and i32 %289, 1
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %292, %291
  %294 = select i1 %293, i32 1637834300, i32 1407744578
  br label %.backedge

295:                                              ; preds = %8
  %.0..0..0.77 = load volatile i1, i1* %1, align 1
  %296 = select i1 %.0..0..0.77, i32 1468679572, i32 1557542319
  br label %.backedge

297:                                              ; preds = %8
  %298 = sext i32 %.084 to i64
  %299 = sext i32 %.082 to i64
  %300 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @g, i64 0, i64 %298, i64 %299
  %301 = load i32, i32* %300, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %298, i64 %302
  %304 = load i32, i32* %303, align 4
  %305 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %298, i64 %299
  %306 = load i32, i32* %305, align 4
  %307 = sub i32 %304, %306
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds [5005 x i64], [5005 x i64]* @de, i64 0, i64 %302
  %310 = load i64, i64* %309, align 8
  %311 = sub i64 %310, %308
  store i64 %311, i64* %309, align 8
  br label %.backedge

312:                                              ; preds = %8
  %313 = sext i32 %.084 to i64
  %314 = sext i32 %.082 to i64
  %315 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @g, i64 0, i64 %313, i64 %314
  %316 = load i32, i32* %315, align 4
  br label %.backedge

317:                                              ; preds = %8
  %318 = sext i32 %.084 to i64
  %319 = sext i32 %.086 to i64
  %320 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %318, i64 %319
  %321 = load i32, i32* %320, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds [5005 x i64], [5005 x i64]* @de, i64 0, i64 %319
  %324 = load i64, i64* %323, align 8
  %325 = add i64 %324, %322
  store i64 %325, i64* %323, align 8
  %326 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @g, i64 0, i64 %318, i64 %319
  %327 = load i32, i32* %326, align 4
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %318, i64 %328
  %330 = load i32, i32* %329, align 4
  %331 = sub i32 %330, %321
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds [5005 x i64], [5005 x i64]* @de, i64 0, i64 %328
  %334 = load i64, i64* %333, align 8
  %335 = add i64 %334, %332
  store i64 %335, i64* %333, align 8
  br label %.backedge

336:                                              ; preds = %8
  %337 = load i32, i32* @x.1, align 4
  %338 = load i32, i32* @y.2, align 4
  %339 = add i32 %337, -1
  %340 = mul i32 %339, %337
  %341 = and i32 %340, 1
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %343, %342
  %345 = select i1 %344, i32 -713323337, i32 -1969369192
  br label %.backedge

346:                                              ; preds = %8
  %.neg99 = add i32 %.084, 1
  %347 = load i32, i32* @x.1, align 4
  %348 = load i32, i32* @y.2, align 4
  %349 = add i32 %347, -1
  %350 = mul i32 %349, %347
  %351 = and i32 %350, 1
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %353, %352
  %355 = select i1 %354, i32 -1074916610, i32 -1969369192
  br label %.backedge

356:                                              ; preds = %8
  br label %.backedge

357:                                              ; preds = %8
  br label %.backedge

358:                                              ; preds = %8
  %359 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.078, %359
  %360 = select i1 %.not, i32 -1981235038, i32 -1334016646
  br label %.backedge

361:                                              ; preds = %8
  %362 = sext i32 %.078 to i64
  %363 = getelementptr inbounds [5005 x i64], [5005 x i64]* @de, i64 0, i64 %362
  %364 = load i64, i64* %363, align 8
  %365 = add i64 %364, %.080
  %366 = getelementptr inbounds [5005 x i64], [5005 x i64]* @sum, i64 0, i64 %362
  %367 = load i64, i64* %366, align 8
  %368 = sext i32 %.086 to i64
  %369 = getelementptr inbounds [5005 x i64], [5005 x i64]* @sum, i64 0, i64 %368
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %365, %367
  %372 = add i64 %371, %370
  store i64 %372, i64* %5, align 8
  %373 = call dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* nonnull dereferenceable(8) @ans, i64* nonnull dereferenceable(8) %5)
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* @ans, align 8
  br label %.backedge

375:                                              ; preds = %8
  %376 = add i32 %.078, 1
  br label %.backedge

377:                                              ; preds = %8
  br label %.backedge

378:                                              ; preds = %8
  %379 = add i32 %.086, -1
  br label %.backedge

380:                                              ; preds = %8
  %381 = load i64, i64* @ans, align 8
  %382 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %381)
  %383 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %382, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0

384:                                              ; preds = %8
  br label %.backedge

385:                                              ; preds = %8
  %386 = call i32 @_Z4readv()
  %387 = sext i32 %.092 to i64
  %388 = sext i32 %.094 to i64
  %389 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %387, i64 %388
  store i32 %386, i32* %389, align 4
  br label %.backedge

390:                                              ; preds = %8
  br label %.backedge

391:                                              ; preds = %8
  %392 = add i32 %.094, 1
  br label %.backedge

393:                                              ; preds = %8
  br label %.backedge

394:                                              ; preds = %8
  %395 = add i32 %.090, 1
  br label %.backedge

396:                                              ; preds = %8
  %397 = load i32, i32* @n, align 4
  br label %.backedge

398:                                              ; preds = %8
  br label %.backedge

399:                                              ; preds = %8
  br label %.backedge

400:                                              ; preds = %8
  br label %.backedge

401:                                              ; preds = %8
  %402 = add i32 %.084, 1
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z4readv() local_unnamed_addr #0 comdat {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = tail call i32 @getchar()
  %5 = trunc i32 %4 to i8
  br label %6

6:                                                ; preds = %.backedge, %0
  %.026 = phi i32 [ undef, %0 ], [ %.026.be, %.backedge ]
  %.020 = phi i32 [ 0, %0 ], [ %.020.be, %.backedge ]
  %.018 = phi i8 [ %5, %0 ], [ %.018.be, %.backedge ]
  %.016 = phi i8 [ 1, %0 ], [ %.016.be, %.backedge ]
  %.014 = phi i32 [ -1403448858, %0 ], [ %.014.be, %.backedge ]
  %.0 = phi i32 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.014, label %.backedge [
    i32 -1403448858, label %7
    i32 -735887379, label %17
    i32 1328508977, label %28
    i32 -1777289698, label %30
    i32 2090205912, label %33
    i32 -831392974, label %34
    i32 -1633550134, label %35
    i32 -971377320, label %45
    i32 -662091089, label %57
    i32 958430688, label %58
    i32 -1648233153, label %68
    i32 621327742, label %78
    i32 -1282375219, label %79
    i32 -1825855892, label %89
    i32 -739157076, label %100
    i32 1661347973, label %102
    i32 256046601, label %105
    i32 -93477076, label %115
    i32 1177788125, label %127
    i32 1004688555, label %128
    i32 1426083785, label %130
    i32 1174370626, label %131
    i32 691167420, label %133
    i32 1584634873, label %143
    i32 1351616826, label %153
    i32 -1521799483, label %154
    i32 1500383825, label %155
    i32 -1081124494, label %158
    i32 -1534100104, label %159
    i32 -1318103000, label %160
    i32 1049584819, label %163
  ]

.backedge:                                        ; preds = %6, %163, %160, %159, %158, %155, %154, %143, %133, %131, %130, %128, %127, %115, %105, %102, %100, %89, %79, %78, %68, %58, %57, %45, %35, %34, %33, %30, %28, %17, %7
  %.026.be = phi i32 [ %.026, %6 ], [ %.026, %163 ], [ %.026, %160 ], [ %.026, %159 ], [ %.026, %158 ], [ %.026, %155 ], [ %.026, %154 ], [ %.026, %143 ], [ %.0, %133 ], [ %.026, %131 ], [ %.026, %130 ], [ %.026, %128 ], [ %.026, %127 ], [ %.026, %115 ], [ %.026, %105 ], [ %.026, %102 ], [ %.026, %100 ], [ %.026, %89 ], [ %.026, %79 ], [ %.026, %78 ], [ %.026, %68 ], [ %.026, %58 ], [ %.026, %57 ], [ %.026, %45 ], [ %.026, %35 ], [ %.026, %34 ], [ %.026, %33 ], [ %.026, %30 ], [ %.026, %28 ], [ %.026, %17 ], [ %.026, %7 ]
  %.020.be = phi i32 [ %.020, %6 ], [ %.020, %163 ], [ %.020, %160 ], [ %.020, %159 ], [ %.020, %158 ], [ %.020, %155 ], [ %.020, %154 ], [ %.020, %143 ], [ %.020, %133 ], [ %.020, %131 ], [ %.020, %130 ], [ %.020, %128 ], [ %.020, %127 ], [ %.020, %115 ], [ %.020, %105 ], [ %104, %102 ], [ %.020, %100 ], [ %.020, %89 ], [ %.020, %79 ], [ %.020, %78 ], [ %.020, %68 ], [ %.020, %58 ], [ %.020, %57 ], [ %.020, %45 ], [ %.020, %35 ], [ %.020, %34 ], [ %.020, %33 ], [ %.020, %30 ], [ %.020, %28 ], [ %.020, %17 ], [ %.020, %7 ]
  %.018.be = phi i8 [ %.018, %6 ], [ %.018, %163 ], [ %162, %160 ], [ %.018, %159 ], [ %.018, %158 ], [ %157, %155 ], [ %.018, %154 ], [ %.018, %143 ], [ %.018, %133 ], [ %.018, %131 ], [ %.018, %130 ], [ %.018, %128 ], [ %.018, %127 ], [ %117, %115 ], [ %.018, %105 ], [ %.018, %102 ], [ %.018, %100 ], [ %.018, %89 ], [ %.018, %79 ], [ %.018, %78 ], [ %.018, %68 ], [ %.018, %58 ], [ %.018, %57 ], [ %47, %45 ], [ %.018, %35 ], [ %.018, %34 ], [ %.018, %33 ], [ %.018, %30 ], [ %.018, %28 ], [ %.018, %17 ], [ %.018, %7 ]
  %.016.be = phi i8 [ %.016, %6 ], [ %.016, %163 ], [ %.016, %160 ], [ %.016, %159 ], [ %.016, %158 ], [ %.016, %155 ], [ %.016, %154 ], [ %.016, %143 ], [ %.016, %133 ], [ %.016, %131 ], [ %.016, %130 ], [ %.016, %128 ], [ %.016, %127 ], [ %.016, %115 ], [ %.016, %105 ], [ %.016, %102 ], [ %.016, %100 ], [ %.016, %89 ], [ %.016, %79 ], [ %.016, %78 ], [ %.016, %68 ], [ %.016, %58 ], [ %.016, %57 ], [ %.016, %45 ], [ %.016, %35 ], [ %.016, %34 ], [ 0, %33 ], [ %.016, %30 ], [ %.016, %28 ], [ %.016, %17 ], [ %.016, %7 ]
  %.014.be = phi i32 [ %.014, %6 ], [ 1584634873, %163 ], [ -93477076, %160 ], [ -1825855892, %159 ], [ -1648233153, %158 ], [ -971377320, %155 ], [ -735887379, %154 ], [ %152, %143 ], [ %142, %133 ], [ 691167420, %131 ], [ 691167420, %130 ], [ %129, %128 ], [ -1282375219, %127 ], [ %126, %115 ], [ %114, %105 ], [ 256046601, %102 ], [ %101, %100 ], [ %99, %89 ], [ %88, %79 ], [ -1282375219, %78 ], [ %77, %68 ], [ %67, %58 ], [ -1403448858, %57 ], [ %56, %45 ], [ %44, %35 ], [ -1633550134, %34 ], [ -831392974, %33 ], [ %32, %30 ], [ %29, %28 ], [ %27, %17 ], [ %16, %7 ]
  %.0.be = phi i32 [ %.0, %6 ], [ %.0, %163 ], [ %.0, %160 ], [ %.0, %159 ], [ %.0, %158 ], [ %.0, %155 ], [ %.0, %154 ], [ %.0, %143 ], [ %.0, %133 ], [ %132, %131 ], [ %.020, %130 ], [ %.0, %128 ], [ %.0, %127 ], [ %.0, %115 ], [ %.0, %105 ], [ %.0, %102 ], [ %.0, %100 ], [ %.0, %89 ], [ %.0, %79 ], [ %.0, %78 ], [ %.0, %68 ], [ %.0, %58 ], [ %.0, %57 ], [ %.0, %45 ], [ %.0, %35 ], [ %.0, %34 ], [ %.0, %33 ], [ %.0, %30 ], [ %.0, %28 ], [ %.0, %17 ], [ %.0, %7 ]
  br label %6

7:                                                ; preds = %6
  %8 = load i32, i32* @x.3, align 4
  %9 = load i32, i32* @y.4, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 -735887379, i32 -1521799483
  br label %.backedge

17:                                               ; preds = %6
  %18 = sext i8 %.018 to i32
  %isdigittmp23 = add nsw i32 %18, -48
  %isdigit24 = icmp ugt i32 %isdigittmp23, 9
  store i1 %isdigit24, i1* %3, align 1
  %19 = load i32, i32* @x.3, align 4
  %20 = load i32, i32* @y.4, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 1328508977, i32 -1521799483
  br label %.backedge

28:                                               ; preds = %6
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %29 = select i1 %.0..0..0., i32 -1777289698, i32 958430688
  br label %.backedge

30:                                               ; preds = %6
  %31 = icmp eq i8 %.018, 45
  %32 = select i1 %31, i32 2090205912, i32 -831392974
  br label %.backedge

33:                                               ; preds = %6
  br label %.backedge

34:                                               ; preds = %6
  br label %.backedge

35:                                               ; preds = %6
  %36 = load i32, i32* @x.3, align 4
  %37 = load i32, i32* @y.4, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 -971377320, i32 1500383825
  br label %.backedge

45:                                               ; preds = %6
  %46 = tail call i32 @getchar()
  %47 = trunc i32 %46 to i8
  %48 = load i32, i32* @x.3, align 4
  %49 = load i32, i32* @y.4, align 4
  %50 = add i32 %48, -1
  %51 = mul i32 %50, %48
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %54, %53
  %56 = select i1 %55, i32 -662091089, i32 1500383825
  br label %.backedge

57:                                               ; preds = %6
  br label %.backedge

58:                                               ; preds = %6
  %59 = load i32, i32* @x.3, align 4
  %60 = load i32, i32* @y.4, align 4
  %61 = add i32 %59, -1
  %62 = mul i32 %61, %59
  %63 = and i32 %62, 1
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %65, %64
  %67 = select i1 %66, i32 -1648233153, i32 -1081124494
  br label %.backedge

68:                                               ; preds = %6
  %69 = load i32, i32* @x.3, align 4
  %70 = load i32, i32* @y.4, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 621327742, i32 -1081124494
  br label %.backedge

78:                                               ; preds = %6
  br label %.backedge

79:                                               ; preds = %6
  %80 = load i32, i32* @x.3, align 4
  %81 = load i32, i32* @y.4, align 4
  %82 = add i32 %80, -1
  %83 = mul i32 %82, %80
  %84 = and i32 %83, 1
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %86, %85
  %88 = select i1 %87, i32 -1825855892, i32 -1534100104
  br label %.backedge

89:                                               ; preds = %6
  %90 = sext i8 %.018 to i32
  %isdigittmp = add nsw i32 %90, -48
  %isdigit = icmp ult i32 %isdigittmp, 10
  store i1 %isdigit, i1* %2, align 1
  %91 = load i32, i32* @x.3, align 4
  %92 = load i32, i32* @y.4, align 4
  %93 = add i32 %91, -1
  %94 = mul i32 %93, %91
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %97, %96
  %99 = select i1 %98, i32 -739157076, i32 -1534100104
  br label %.backedge

100:                                              ; preds = %6
  %.0..0..0.12 = load volatile i1, i1* %2, align 1
  %101 = select i1 %.0..0..0.12, i32 1661347973, i32 1004688555
  br label %.backedge

102:                                              ; preds = %6
  %.neg.neg = mul i32 %.020, 10
  %103 = sext i8 %.018 to i32
  %.neg22 = add i32 %.neg.neg, -48
  %104 = add i32 %.neg22, %103
  br label %.backedge

105:                                              ; preds = %6
  %106 = load i32, i32* @x.3, align 4
  %107 = load i32, i32* @y.4, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 -93477076, i32 -1318103000
  br label %.backedge

115:                                              ; preds = %6
  %116 = tail call i32 @getchar()
  %117 = trunc i32 %116 to i8
  %118 = load i32, i32* @x.3, align 4
  %119 = load i32, i32* @y.4, align 4
  %120 = add i32 %118, -1
  %121 = mul i32 %120, %118
  %122 = and i32 %121, 1
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %124, %123
  %126 = select i1 %125, i32 1177788125, i32 -1318103000
  br label %.backedge

127:                                              ; preds = %6
  br label %.backedge

128:                                              ; preds = %6
  %.not = icmp eq i8 %.016, 0
  %129 = select i1 %.not, i32 1174370626, i32 1426083785
  br label %.backedge

130:                                              ; preds = %6
  br label %.backedge

131:                                              ; preds = %6
  %132 = sub i32 0, %.020
  br label %.backedge

133:                                              ; preds = %6
  %134 = load i32, i32* @x.3, align 4
  %135 = load i32, i32* @y.4, align 4
  %136 = add i32 %134, -1
  %137 = mul i32 %136, %134
  %138 = and i32 %137, 1
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %140, %139
  %142 = select i1 %141, i32 1584634873, i32 1049584819
  br label %.backedge

143:                                              ; preds = %6
  %144 = load i32, i32* @x.3, align 4
  %145 = load i32, i32* @y.4, align 4
  %146 = add i32 %144, -1
  %147 = mul i32 %146, %144
  %148 = and i32 %147, 1
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %150, %149
  %152 = select i1 %151, i32 1351616826, i32 1049584819
  br label %.backedge

153:                                              ; preds = %6
  store i32 %.026, i32* %1, align 4
  %.0..0..0.13 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.13

154:                                              ; preds = %6
  br label %.backedge

155:                                              ; preds = %6
  %156 = tail call i32 @getchar()
  %157 = trunc i32 %156 to i8
  br label %.backedge

158:                                              ; preds = %6
  br label %.backedge

159:                                              ; preds = %6
  br label %.backedge

160:                                              ; preds = %6
  %161 = tail call i32 @getchar()
  %162 = trunc i32 %161 to i8
  br label %.backedge

163:                                              ; preds = %6
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z3gggiii(i32 %0, i32 %1, i32 %2) local_unnamed_addr #0 comdat {
  %4 = alloca i1, align 1
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i1, align 1
  %10 = alloca i1, align 1
  %11 = load i32, i32* @x.5, align 4
  %12 = load i32, i32* @y.6, align 4
  %13 = add i32 %11, -1
  %14 = mul i32 %13, %11
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  store i1 %16, i1* %10, align 1
  %17 = icmp slt i32 %12, 10
  store i1 %17, i1* %9, align 1
  br label %18

18:                                               ; preds = %.backedge, %3
  %.0 = phi i32 [ -1077682681, %3 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1077682681, label %19
    i32 -1581892324, label %22
    i32 -253417095, label %44
    i32 -1652947760, label %46
    i32 -1455994913, label %56
    i32 1381980171, label %67
    i32 1917908726, label %68
    i32 -1385580986, label %78
    i32 -1636416189, label %97
    i32 2087955749, label %98
    i32 -1567815233, label %100
    i32 319001610, label %101
    i32 1969181776, label %103
  ]

.backedge:                                        ; preds = %18, %103, %101, %100, %97, %78, %68, %67, %56, %46, %44, %22, %19
  %.0.be = phi i32 [ %.0, %18 ], [ -1385580986, %103 ], [ -1455994913, %101 ], [ -1581892324, %100 ], [ 2087955749, %97 ], [ %96, %78 ], [ %77, %68 ], [ 2087955749, %67 ], [ %66, %56 ], [ %55, %46 ], [ %45, %44 ], [ %43, %22 ], [ %21, %19 ]
  br label %18

19:                                               ; preds = %18
  %.0..0..0. = load volatile i1, i1* %10, align 1
  %.0..0..0.1 = load volatile i1, i1* %9, align 1
  %20 = or i1 %.0..0..0., %.0..0..0.1
  %21 = select i1 %20, i32 -1581892324, i32 -1567815233
  br label %.backedge

22:                                               ; preds = %18
  %23 = alloca i32, align 4
  store i32* %23, i32** %8, align 8
  %24 = alloca i32, align 4
  store i32* %24, i32** %7, align 8
  %25 = alloca i32, align 4
  store i32* %25, i32** %6, align 8
  %26 = alloca i32, align 4
  store i32* %26, i32** %5, align 8
  %.0..0..0.7 = load volatile i32*, i32** %7, align 8
  store i32 %0, i32* %.0..0..0.7, align 4
  %.0..0..0.13 = load volatile i32*, i32** %6, align 8
  store i32 %1, i32* %.0..0..0.13, align 4
  %.0..0..0.19 = load volatile i32*, i32** %5, align 8
  store i32 %2, i32* %.0..0..0.19, align 4
  %.0..0..0.8 = load volatile i32*, i32** %7, align 8
  %27 = load i32, i32* %.0..0..0.8, align 4
  %28 = sext i32 %27 to i64
  %.0..0..0.14 = load volatile i32*, i32** %6, align 8
  %29 = load i32, i32* %.0..0..0.14, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @a, i64 0, i64 %28, i64 %30
  %32 = load i32, i32* %31, align 4
  %.0..0..0.20 = load volatile i32*, i32** %5, align 8
  %33 = load i32, i32* %.0..0..0.20, align 4
  %34 = icmp sgt i32 %32, %33
  store i1 %34, i1* %4, align 1
  %35 = load i32, i32* @x.5, align 4
  %36 = load i32, i32* @y.6, align 4
  %37 = add i32 %35, -1
  %38 = mul i32 %37, %35
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %41, %40
  %43 = select i1 %42, i32 -253417095, i32 -1567815233
  br label %.backedge

44:                                               ; preds = %18
  %.0..0..0.23 = load volatile i1, i1* %4, align 1
  %45 = select i1 %.0..0..0.23, i32 -1652947760, i32 1917908726
  br label %.backedge

46:                                               ; preds = %18
  %47 = load i32, i32* @x.5, align 4
  %48 = load i32, i32* @y.6, align 4
  %49 = add i32 %47, -1
  %50 = mul i32 %49, %47
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %53, %52
  %55 = select i1 %54, i32 -1455994913, i32 319001610
  br label %.backedge

56:                                               ; preds = %18
  %.0..0..0.15 = load volatile i32*, i32** %6, align 8
  %57 = load i32, i32* %.0..0..0.15, align 4
  %.0..0..0.2 = load volatile i32*, i32** %8, align 8
  store i32 %57, i32* %.0..0..0.2, align 4
  %58 = load i32, i32* @x.5, align 4
  %59 = load i32, i32* @y.6, align 4
  %60 = add i32 %58, -1
  %61 = mul i32 %60, %58
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %64, %63
  %66 = select i1 %65, i32 1381980171, i32 319001610
  br label %.backedge

67:                                               ; preds = %18
  br label %.backedge

68:                                               ; preds = %18
  %69 = load i32, i32* @x.5, align 4
  %70 = load i32, i32* @y.6, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 -1385580986, i32 1969181776
  br label %.backedge

78:                                               ; preds = %18
  %.0..0..0.9 = load volatile i32*, i32** %7, align 8
  %79 = load i32, i32* %.0..0..0.9, align 4
  %.0..0..0.10 = load volatile i32*, i32** %7, align 8
  %80 = load i32, i32* %.0..0..0.10, align 4
  %81 = sext i32 %80 to i64
  %.0..0..0.16 = load volatile i32*, i32** %6, align 8
  %82 = load i32, i32* %.0..0..0.16, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @g, i64 0, i64 %81, i64 %83
  %85 = load i32, i32* %84, align 4
  %.0..0..0.21 = load volatile i32*, i32** %5, align 8
  %86 = load i32, i32* %.0..0..0.21, align 4
  %87 = call i32 @_Z3gggiii(i32 %79, i32 %85, i32 %86)
  %.0..0..0.3 = load volatile i32*, i32** %8, align 8
  store i32 %87, i32* %.0..0..0.3, align 4
  %88 = load i32, i32* @x.5, align 4
  %89 = load i32, i32* @y.6, align 4
  %90 = add i32 %88, -1
  %91 = mul i32 %90, %88
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %94, %93
  %96 = select i1 %95, i32 -1636416189, i32 1969181776
  br label %.backedge

97:                                               ; preds = %18
  br label %.backedge

98:                                               ; preds = %18
  %.0..0..0.4 = load volatile i32*, i32** %8, align 8
  %99 = load i32, i32* %.0..0..0.4, align 4
  ret i32 %99

100:                                              ; preds = %18
  br label %.backedge

101:                                              ; preds = %18
  %.0..0..0.17 = load volatile i32*, i32** %6, align 8
  %102 = load i32, i32* %.0..0..0.17, align 4
  %.0..0..0.5 = load volatile i32*, i32** %8, align 8
  store i32 %102, i32* %.0..0..0.5, align 4
  br label %.backedge

103:                                              ; preds = %18
  %.0..0..0.11 = load volatile i32*, i32** %7, align 8
  %104 = load i32, i32* %.0..0..0.11, align 4
  %.0..0..0.12 = load volatile i32*, i32** %7, align 8
  %105 = load i32, i32* %.0..0..0.12, align 4
  %106 = sext i32 %105 to i64
  %.0..0..0.18 = load volatile i32*, i32** %6, align 8
  %107 = load i32, i32* %.0..0..0.18, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @g, i64 0, i64 %106, i64 %108
  %110 = load i32, i32* %109, align 4
  %.0..0..0.22 = load volatile i32*, i32** %5, align 8
  %111 = load i32, i32* %.0..0..0.22, align 4
  %112 = call i32 @_Z3gggiii(i32 %104, i32 %110, i32 %111)
  %.0..0..0.6 = load volatile i32*, i32** %8, align 8
  store i32 %112, i32* %.0..0..0.6, align 4
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #5 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %5, align 8
  %7 = load i64, i64* %1, align 8
  store i64 %7, i64* %4, align 8
  %8 = load i32, i32* @x.7, align 4
  %9 = load i32, i32* @y.8, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 -1431760852, i32 931997726
  %17 = select i1 %15, i32 238566308, i32 931997726
  br label %.outer

.outer:                                           ; preds = %18, %2
  %.09.ph = phi i64* [ undef, %2 ], [ %.09.ph14, %18 ]
  %.0.ph = phi i32 [ 863683690, %2 ], [ %16, %18 ]
  br label %.outer13

.outer13:                                         ; preds = %.outer13.backedge, %.outer
  %.09.ph14 = phi i64* [ %.09.ph, %.outer ], [ %.09.ph14.be, %.outer13.backedge ]
  %.0.ph15 = phi i32 [ %.0.ph, %.outer ], [ -382970132, %.outer13.backedge ]
  br label %.outer16

.outer16:                                         ; preds = %.outer16.backedge, %.outer13
  %.0.ph17 = phi i32 [ %.0.ph15, %.outer13 ], [ %.0.ph17.be, %.outer16.backedge ]
  br label %18

18:                                               ; preds = %.outer16, %18
  switch i32 %.0.ph17, label %18 [
    i32 863683690, label %19
    i32 -1532775930, label %.outer13.backedge
    i32 294743178, label %22
    i32 -382970132, label %.outer16.backedge
    i32 238566308, label %.outer
    i32 -1431760852, label %23
    i32 931997726, label %24
  ]

19:                                               ; preds = %18
  %.0..0..0.6 = load volatile i64, i64* %5, align 8
  %.0..0..0.7 = load volatile i64, i64* %4, align 8
  %20 = icmp slt i64 %.0..0..0.6, %.0..0..0.7
  %21 = select i1 %20, i32 -1532775930, i32 294743178
  br label %.outer16.backedge

22:                                               ; preds = %18
  br label %.outer13.backedge

.outer13.backedge:                                ; preds = %18, %22
  %.09.ph14.be = phi i64* [ %0, %22 ], [ %1, %18 ]
  br label %.outer13

23:                                               ; preds = %18
  store i64* %.09.ph, i64** %3, align 8
  %.0..0..0.8 = load volatile i64*, i64** %3, align 8
  ret i64* %.0..0..0.8

24:                                               ; preds = %18
  br label %.outer16.backedge

.outer16.backedge:                                ; preds = %18, %24, %19
  %.0.ph17.be = phi i32 [ %21, %19 ], [ 238566308, %24 ], [ %17, %18 ]
  br label %.outer16
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s318821917.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
