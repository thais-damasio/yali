; ModuleID = 'build_ollvm/programs/p03833/s489331415.ll'
source_filename = "Project_CodeNet_C++1400/p03833/s489331415.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z4readIxEvRT_ = comdat any

$_Z3addiix = comdat any

$_Z2MxIxEvRT_S0_ = comdat any

$_Z5writeIxEvT_c = comdat any

$_ZZ5writeIxEvT_cE2st = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@d = global [5005 x i64] zeroinitializer, align 16
@b = global [205 x [5005 x i64]] zeroinitializer, align 16
@ans = global i64 0, align 8
@n = global i64 0, align 8
@m = global i64 0, align 8
@st = local_unnamed_addr global [205 x [5005 x i32]] zeroinitializer, align 16
@tp = local_unnamed_addr global [205 x i32] zeroinitializer, align 16
@t = local_unnamed_addr global [5005 x i64] zeroinitializer, align 16
@tans = local_unnamed_addr global [5005 x i64] zeroinitializer, align 16
@_ZZ5writeIxEvT_cE2st = linkonce_odr local_unnamed_addr global [30 x i16] zeroinitializer, comdat, align 16
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s489331415.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1236638807, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1236638807, label %11
    i32 -65954616, label %14
    i32 581932231, label %25
    i32 1171717532, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -65954616, i32 1171717532
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 581932231, i32 1171717532
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -65954616, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  tail call void @_Z4readIxEvRT_(i64* nonnull dereferenceable(8) @n)
  tail call void @_Z4readIxEvRT_(i64* nonnull dereferenceable(8) @m)
  br label %4

4:                                                ; preds = %.backedge, %0
  %.083 = phi i32 [ 1, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i32 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i32 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i32 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i64* [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32* [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i32* [ undef, %0 ], [ %.067.be, %.backedge ]
  %.065 = phi i64 [ undef, %0 ], [ %.065.be, %.backedge ]
  %.063 = phi i32 [ undef, %0 ], [ %.063.be, %.backedge ]
  %.0 = phi i32 [ -1131589205, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1131589205, label %5
    i32 1472201663, label %15
    i32 -717384472, label %28
    i32 43585694, label %30
    i32 355099728, label %33
    i32 1497689647, label %35
    i32 -954358826, label %36
    i32 -694634140, label %40
    i32 919210150, label %50
    i32 1217998443, label %60
    i32 -2106250836, label %61
    i32 -1837413055, label %65
    i32 1993190609, label %69
    i32 828218200, label %71
    i32 641360870, label %81
    i32 1246218665, label %91
    i32 659558756, label %92
    i32 -1373024388, label %93
    i32 979143210, label %94
    i32 -1316963436, label %104
    i32 -836796404, label %117
    i32 -1617143190, label %119
    i32 4850333, label %127
    i32 -374595940, label %137
    i32 1658953129, label %148
    i32 527117005, label %149
    i32 -2029449586, label %159
    i32 -1489272691, label %171
    i32 -232472649, label %172
    i32 1004926729, label %182
    i32 -918500300, label %193
    i32 -1183553916, label %195
    i32 -72954531, label %196
    i32 89435088, label %200
    i32 2079030588, label %208
    i32 1543646486, label %220
    i32 -973435130, label %238
    i32 -1836459030, label %243
    i32 1892519413, label %253
    i32 218622981, label %263
    i32 475644495, label %264
    i32 -193993010, label %271
    i32 -1886959736, label %275
    i32 114014562, label %283
    i32 -1609581824, label %285
    i32 -1407287532, label %286
    i32 1570626728, label %296
    i32 339793072, label %307
    i32 1722104852, label %308
    i32 2068524134, label %310
    i32 324627060, label %311
    i32 1977180350, label %312
    i32 -1459878777, label %313
    i32 1709137686, label %314
    i32 1033979719, label %315
    i32 -430928307, label %318
    i32 -1276629214, label %319
    i32 -2030825272, label %320
  ]

.backedge:                                        ; preds = %4, %320, %319, %318, %315, %314, %313, %312, %311, %310, %307, %296, %286, %285, %283, %275, %271, %264, %263, %253, %243, %238, %220, %208, %200, %196, %195, %193, %182, %172, %171, %159, %149, %148, %137, %127, %119, %117, %104, %94, %93, %92, %91, %81, %71, %69, %65, %61, %60, %50, %40, %36, %35, %33, %30, %28, %15, %5
  %.083.be = phi i32 [ %.083, %4 ], [ %.083, %320 ], [ %.083, %319 ], [ %.083, %318 ], [ %.083, %315 ], [ %.083, %314 ], [ %.083, %313 ], [ %.083, %312 ], [ %.083, %311 ], [ %.083, %310 ], [ %.083, %307 ], [ %.083, %296 ], [ %.083, %286 ], [ %.083, %285 ], [ %.083, %283 ], [ %.083, %275 ], [ %.083, %271 ], [ %.083, %264 ], [ %.083, %263 ], [ %.083, %253 ], [ %.083, %243 ], [ %.083, %238 ], [ %.083, %220 ], [ %.083, %208 ], [ %.083, %200 ], [ %.083, %196 ], [ %.083, %195 ], [ %.083, %193 ], [ %.083, %182 ], [ %.083, %172 ], [ %.083, %171 ], [ %.083, %159 ], [ %.083, %149 ], [ %.083, %148 ], [ %.083, %137 ], [ %.083, %127 ], [ %.083, %119 ], [ %.083, %117 ], [ %.083, %104 ], [ %.083, %94 ], [ %.083, %93 ], [ %.083, %92 ], [ %.083, %91 ], [ %.083, %81 ], [ %.083, %71 ], [ %.083, %69 ], [ %.083, %65 ], [ %.083, %61 ], [ %.083, %60 ], [ %.083, %50 ], [ %.083, %40 ], [ %.083, %36 ], [ %.083, %35 ], [ %34, %33 ], [ %.083, %30 ], [ %.083, %28 ], [ %.083, %15 ], [ %.083, %5 ]
  %.081.be = phi i32 [ %.081, %4 ], [ %.081, %320 ], [ %.081, %319 ], [ %.081, %318 ], [ %.081, %315 ], [ %.081, %314 ], [ %.081, %313 ], [ %.081, %312 ], [ %.081, %311 ], [ %.081, %310 ], [ %.081, %307 ], [ %.081, %296 ], [ %.081, %286 ], [ %.081, %285 ], [ %.081, %283 ], [ %.081, %275 ], [ %.081, %271 ], [ %.081, %264 ], [ %.081, %263 ], [ %.081, %253 ], [ %.081, %243 ], [ %.081, %238 ], [ %.081, %220 ], [ %.081, %208 ], [ %.081, %200 ], [ %.081, %196 ], [ %.081, %195 ], [ %.081, %193 ], [ %.081, %182 ], [ %.081, %172 ], [ %.081, %171 ], [ %.081, %159 ], [ %.081, %149 ], [ %.081, %148 ], [ %.081, %137 ], [ %.081, %127 ], [ %.081, %119 ], [ %.081, %117 ], [ %.081, %104 ], [ %.081, %94 ], [ %.081, %93 ], [ %.neg93, %92 ], [ %.081, %91 ], [ %.081, %81 ], [ %.081, %71 ], [ %.081, %69 ], [ %.081, %65 ], [ %.081, %61 ], [ %.081, %60 ], [ %.081, %50 ], [ %.081, %40 ], [ %.081, %36 ], [ 1, %35 ], [ %.081, %33 ], [ %.081, %30 ], [ %.081, %28 ], [ %.081, %15 ], [ %.081, %5 ]
  %.079.be = phi i32 [ %.079, %4 ], [ %.079, %320 ], [ %.079, %319 ], [ %.079, %318 ], [ %.079, %315 ], [ %.079, %314 ], [ %.079, %313 ], [ %.079, %312 ], [ 1, %311 ], [ %.079, %310 ], [ %.079, %307 ], [ %.079, %296 ], [ %.079, %286 ], [ %.079, %285 ], [ %.079, %283 ], [ %.079, %275 ], [ %.079, %271 ], [ %.079, %264 ], [ %.079, %263 ], [ %.079, %253 ], [ %.079, %243 ], [ %.079, %238 ], [ %.079, %220 ], [ %.079, %208 ], [ %.079, %200 ], [ %.079, %196 ], [ %.079, %195 ], [ %.079, %193 ], [ %.079, %182 ], [ %.079, %172 ], [ %.079, %171 ], [ %.079, %159 ], [ %.079, %149 ], [ %.079, %148 ], [ %.079, %137 ], [ %.079, %127 ], [ %.079, %119 ], [ %.079, %117 ], [ %.079, %104 ], [ %.079, %94 ], [ %.079, %93 ], [ %.079, %92 ], [ %.079, %91 ], [ %.079, %81 ], [ %.079, %71 ], [ %70, %69 ], [ %.079, %65 ], [ %.079, %61 ], [ %.079, %60 ], [ 1, %50 ], [ %.079, %40 ], [ %.079, %36 ], [ %.079, %35 ], [ %.079, %33 ], [ %.079, %30 ], [ %.079, %28 ], [ %.079, %15 ], [ %.079, %5 ]
  %.077.be = phi i32 [ %.077, %4 ], [ %.077, %320 ], [ %.077, %319 ], [ %.077, %318 ], [ %.077, %315 ], [ %.neg86, %314 ], [ %.077, %313 ], [ %.077, %312 ], [ %.077, %311 ], [ %.077, %310 ], [ %.077, %307 ], [ %.077, %296 ], [ %.077, %286 ], [ %.077, %285 ], [ %.077, %283 ], [ %.077, %275 ], [ %.077, %271 ], [ %.077, %264 ], [ %.077, %263 ], [ %.077, %253 ], [ %.077, %243 ], [ %.077, %238 ], [ %.077, %220 ], [ %.077, %208 ], [ %.077, %200 ], [ %.077, %196 ], [ %.077, %195 ], [ %.077, %193 ], [ %.077, %182 ], [ %.077, %172 ], [ %.077, %171 ], [ %.077, %159 ], [ %.077, %149 ], [ %.077, %148 ], [ %138, %137 ], [ %.077, %127 ], [ %.077, %119 ], [ %.077, %117 ], [ %.077, %104 ], [ %.077, %94 ], [ 1, %93 ], [ %.077, %92 ], [ %.077, %91 ], [ %.077, %81 ], [ %.077, %71 ], [ %.077, %69 ], [ %.077, %65 ], [ %.077, %61 ], [ %.077, %60 ], [ %.077, %50 ], [ %.077, %40 ], [ %.077, %36 ], [ %.077, %35 ], [ %.077, %33 ], [ %.077, %30 ], [ %.077, %28 ], [ %.077, %15 ], [ %.077, %5 ]
  %.075.be = phi i32 [ %.075, %4 ], [ %.neg, %320 ], [ %.075, %319 ], [ %.075, %318 ], [ %317, %315 ], [ %.075, %314 ], [ %.075, %313 ], [ %.075, %312 ], [ %.075, %311 ], [ %.075, %310 ], [ %.075, %307 ], [ %297, %296 ], [ %.075, %286 ], [ %.075, %285 ], [ %.075, %283 ], [ %.075, %275 ], [ %.075, %271 ], [ %.075, %264 ], [ %.075, %263 ], [ %.075, %253 ], [ %.075, %243 ], [ %.075, %238 ], [ %.075, %220 ], [ %.075, %208 ], [ %.075, %200 ], [ %.075, %196 ], [ %.075, %195 ], [ %.075, %193 ], [ %.075, %182 ], [ %.075, %172 ], [ %.075, %171 ], [ %161, %159 ], [ %.075, %149 ], [ %.075, %148 ], [ %.075, %137 ], [ %.075, %127 ], [ %.075, %119 ], [ %.075, %117 ], [ %.075, %104 ], [ %.075, %94 ], [ %.075, %93 ], [ %.075, %92 ], [ %.075, %91 ], [ %.075, %81 ], [ %.075, %71 ], [ %.075, %69 ], [ %.075, %65 ], [ %.075, %61 ], [ %.075, %60 ], [ %.075, %50 ], [ %.075, %40 ], [ %.075, %36 ], [ %.075, %35 ], [ %.075, %33 ], [ %.075, %30 ], [ %.075, %28 ], [ %.075, %15 ], [ %.075, %5 ]
  %.073.be = phi i32 [ %.073, %4 ], [ %.073, %320 ], [ %.neg85, %319 ], [ %.073, %318 ], [ %.073, %315 ], [ %.073, %314 ], [ %.073, %313 ], [ %.073, %312 ], [ %.073, %311 ], [ %.073, %310 ], [ %.073, %307 ], [ %.073, %296 ], [ %.073, %286 ], [ %.073, %285 ], [ %.073, %283 ], [ %.073, %275 ], [ %.073, %271 ], [ %.073, %264 ], [ %.073, %263 ], [ %.neg88, %253 ], [ %.073, %243 ], [ %.073, %238 ], [ %.073, %220 ], [ %.073, %208 ], [ %.073, %200 ], [ %.073, %196 ], [ 1, %195 ], [ %.073, %193 ], [ %.073, %182 ], [ %.073, %172 ], [ %.073, %171 ], [ %.073, %159 ], [ %.073, %149 ], [ %.073, %148 ], [ %.073, %137 ], [ %.073, %127 ], [ %.073, %119 ], [ %.073, %117 ], [ %.073, %104 ], [ %.073, %94 ], [ %.073, %93 ], [ %.073, %92 ], [ %.073, %91 ], [ %.073, %81 ], [ %.073, %71 ], [ %.073, %69 ], [ %.073, %65 ], [ %.073, %61 ], [ %.073, %60 ], [ %.073, %50 ], [ %.073, %40 ], [ %.073, %36 ], [ %.073, %35 ], [ %.073, %33 ], [ %.073, %30 ], [ %.073, %28 ], [ %.073, %15 ], [ %.073, %5 ]
  %.071.be = phi i64* [ %.071, %4 ], [ %.071, %320 ], [ %.071, %319 ], [ %.071, %318 ], [ %.071, %315 ], [ %.071, %314 ], [ %.071, %313 ], [ %.071, %312 ], [ %.071, %311 ], [ %.071, %310 ], [ %.071, %307 ], [ %.071, %296 ], [ %.071, %286 ], [ %.071, %285 ], [ %.071, %283 ], [ %.071, %275 ], [ %.071, %271 ], [ %.071, %264 ], [ %.071, %263 ], [ %.071, %253 ], [ %.071, %243 ], [ %.071, %238 ], [ %.071, %220 ], [ %.071, %208 ], [ %202, %200 ], [ %.071, %196 ], [ %.071, %195 ], [ %.071, %193 ], [ %.071, %182 ], [ %.071, %172 ], [ %.071, %171 ], [ %.071, %159 ], [ %.071, %149 ], [ %.071, %148 ], [ %.071, %137 ], [ %.071, %127 ], [ %.071, %119 ], [ %.071, %117 ], [ %.071, %104 ], [ %.071, %94 ], [ %.071, %93 ], [ %.071, %92 ], [ %.071, %91 ], [ %.071, %81 ], [ %.071, %71 ], [ %.071, %69 ], [ %.071, %65 ], [ %.071, %61 ], [ %.071, %60 ], [ %.071, %50 ], [ %.071, %40 ], [ %.071, %36 ], [ %.071, %35 ], [ %.071, %33 ], [ %.071, %30 ], [ %.071, %28 ], [ %.071, %15 ], [ %.071, %5 ]
  %.069.be = phi i32* [ %.069, %4 ], [ %.069, %320 ], [ %.069, %319 ], [ %.069, %318 ], [ %.069, %315 ], [ %.069, %314 ], [ %.069, %313 ], [ %.069, %312 ], [ %.069, %311 ], [ %.069, %310 ], [ %.069, %307 ], [ %.069, %296 ], [ %.069, %286 ], [ %.069, %285 ], [ %.069, %283 ], [ %.069, %275 ], [ %.069, %271 ], [ %.069, %264 ], [ %.069, %263 ], [ %.069, %253 ], [ %.069, %243 ], [ %.069, %238 ], [ %.069, %220 ], [ %.069, %208 ], [ %203, %200 ], [ %.069, %196 ], [ %.069, %195 ], [ %.069, %193 ], [ %.069, %182 ], [ %.069, %172 ], [ %.069, %171 ], [ %.069, %159 ], [ %.069, %149 ], [ %.069, %148 ], [ %.069, %137 ], [ %.069, %127 ], [ %.069, %119 ], [ %.069, %117 ], [ %.069, %104 ], [ %.069, %94 ], [ %.069, %93 ], [ %.069, %92 ], [ %.069, %91 ], [ %.069, %81 ], [ %.069, %71 ], [ %.069, %69 ], [ %.069, %65 ], [ %.069, %61 ], [ %.069, %60 ], [ %.069, %50 ], [ %.069, %40 ], [ %.069, %36 ], [ %.069, %35 ], [ %.069, %33 ], [ %.069, %30 ], [ %.069, %28 ], [ %.069, %15 ], [ %.069, %5 ]
  %.067.be = phi i32* [ %.067, %4 ], [ %.067, %320 ], [ %.067, %319 ], [ %.067, %318 ], [ %.067, %315 ], [ %.067, %314 ], [ %.067, %313 ], [ %.067, %312 ], [ %.067, %311 ], [ %.067, %310 ], [ %.067, %307 ], [ %.067, %296 ], [ %.067, %286 ], [ %.067, %285 ], [ %.067, %283 ], [ %.067, %275 ], [ %.067, %271 ], [ %.067, %264 ], [ %.067, %263 ], [ %.067, %253 ], [ %.067, %243 ], [ %.067, %238 ], [ %.067, %220 ], [ %.067, %208 ], [ %204, %200 ], [ %.067, %196 ], [ %.067, %195 ], [ %.067, %193 ], [ %.067, %182 ], [ %.067, %172 ], [ %.067, %171 ], [ %.067, %159 ], [ %.067, %149 ], [ %.067, %148 ], [ %.067, %137 ], [ %.067, %127 ], [ %.067, %119 ], [ %.067, %117 ], [ %.067, %104 ], [ %.067, %94 ], [ %.067, %93 ], [ %.067, %92 ], [ %.067, %91 ], [ %.067, %81 ], [ %.067, %71 ], [ %.067, %69 ], [ %.067, %65 ], [ %.067, %61 ], [ %.067, %60 ], [ %.067, %50 ], [ %.067, %40 ], [ %.067, %36 ], [ %.067, %35 ], [ %.067, %33 ], [ %.067, %30 ], [ %.067, %28 ], [ %.067, %15 ], [ %.067, %5 ]
  %.065.be = phi i64 [ %.065, %4 ], [ %.065, %320 ], [ %.065, %319 ], [ %.065, %318 ], [ %.065, %315 ], [ %.065, %314 ], [ %.065, %313 ], [ %.065, %312 ], [ %.065, %311 ], [ %.065, %310 ], [ %.065, %307 ], [ %.065, %296 ], [ %.065, %286 ], [ %.065, %285 ], [ %.065, %283 ], [ %279, %275 ], [ %.065, %271 ], [ 0, %264 ], [ %.065, %263 ], [ %.065, %253 ], [ %.065, %243 ], [ %.065, %238 ], [ %.065, %220 ], [ %.065, %208 ], [ %.065, %200 ], [ %.065, %196 ], [ %.065, %195 ], [ %.065, %193 ], [ %.065, %182 ], [ %.065, %172 ], [ %.065, %171 ], [ %.065, %159 ], [ %.065, %149 ], [ %.065, %148 ], [ %.065, %137 ], [ %.065, %127 ], [ %.065, %119 ], [ %.065, %117 ], [ %.065, %104 ], [ %.065, %94 ], [ %.065, %93 ], [ %.065, %92 ], [ %.065, %91 ], [ %.065, %81 ], [ %.065, %71 ], [ %.065, %69 ], [ %.065, %65 ], [ %.065, %61 ], [ %.065, %60 ], [ %.065, %50 ], [ %.065, %40 ], [ %.065, %36 ], [ %.065, %35 ], [ %.065, %33 ], [ %.065, %30 ], [ %.065, %28 ], [ %.065, %15 ], [ %.065, %5 ]
  %.063.be = phi i32 [ %.063, %4 ], [ %.063, %320 ], [ %.063, %319 ], [ %.063, %318 ], [ %.063, %315 ], [ %.063, %314 ], [ %.063, %313 ], [ %.063, %312 ], [ %.063, %311 ], [ %.063, %310 ], [ %.063, %307 ], [ %.063, %296 ], [ %.063, %286 ], [ %.063, %285 ], [ %284, %283 ], [ %.063, %275 ], [ %.063, %271 ], [ %.075, %264 ], [ %.063, %263 ], [ %.063, %253 ], [ %.063, %243 ], [ %.063, %238 ], [ %.063, %220 ], [ %.063, %208 ], [ %.063, %200 ], [ %.063, %196 ], [ %.063, %195 ], [ %.063, %193 ], [ %.063, %182 ], [ %.063, %172 ], [ %.063, %171 ], [ %.063, %159 ], [ %.063, %149 ], [ %.063, %148 ], [ %.063, %137 ], [ %.063, %127 ], [ %.063, %119 ], [ %.063, %117 ], [ %.063, %104 ], [ %.063, %94 ], [ %.063, %93 ], [ %.063, %92 ], [ %.063, %91 ], [ %.063, %81 ], [ %.063, %71 ], [ %.063, %69 ], [ %.063, %65 ], [ %.063, %61 ], [ %.063, %60 ], [ %.063, %50 ], [ %.063, %40 ], [ %.063, %36 ], [ %.063, %35 ], [ %.063, %33 ], [ %.063, %30 ], [ %.063, %28 ], [ %.063, %15 ], [ %.063, %5 ]
  %.0.be = phi i32 [ %.0, %4 ], [ 1570626728, %320 ], [ 1892519413, %319 ], [ 1004926729, %318 ], [ -2029449586, %315 ], [ -374595940, %314 ], [ -1316963436, %313 ], [ 641360870, %312 ], [ 919210150, %311 ], [ 1472201663, %310 ], [ -232472649, %307 ], [ %306, %296 ], [ %295, %286 ], [ -1407287532, %285 ], [ -193993010, %283 ], [ 114014562, %275 ], [ %274, %271 ], [ -193993010, %264 ], [ -72954531, %263 ], [ %262, %253 ], [ %252, %243 ], [ -1836459030, %238 ], [ 2079030588, %220 ], [ %219, %208 ], [ 2079030588, %200 ], [ %199, %196 ], [ -72954531, %195 ], [ %194, %193 ], [ %192, %182 ], [ %181, %172 ], [ -232472649, %171 ], [ %170, %159 ], [ %158, %149 ], [ 979143210, %148 ], [ %147, %137 ], [ %136, %127 ], [ 4850333, %119 ], [ %118, %117 ], [ %116, %104 ], [ %103, %94 ], [ 979143210, %93 ], [ -954358826, %92 ], [ 659558756, %91 ], [ %90, %81 ], [ %80, %71 ], [ -2106250836, %69 ], [ 1993190609, %65 ], [ %64, %61 ], [ -2106250836, %60 ], [ %59, %50 ], [ %49, %40 ], [ %39, %36 ], [ -954358826, %35 ], [ -1131589205, %33 ], [ 355099728, %30 ], [ %29, %28 ], [ %27, %15 ], [ %14, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = load i32, i32* @x.1, align 4
  %7 = load i32, i32* @y.2, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %12, %11
  %14 = select i1 %13, i32 1472201663, i32 2068524134
  br label %.backedge

15:                                               ; preds = %4
  %16 = sext i32 %.083 to i64
  %17 = load i64, i64* @n, align 8
  %18 = icmp sgt i64 %17, %16
  store i1 %18, i1* %3, align 1
  %19 = load i32, i32* @x.1, align 4
  %20 = load i32, i32* @y.2, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 -717384472, i32 2068524134
  br label %.backedge

28:                                               ; preds = %4
  %.0..0..0.60 = load volatile i1, i1* %3, align 1
  %29 = select i1 %.0..0..0.60, i32 43585694, i32 1497689647
  br label %.backedge

30:                                               ; preds = %4
  %31 = sext i32 %.083 to i64
  %32 = getelementptr inbounds [5005 x i64], [5005 x i64]* @d, i64 0, i64 %31
  tail call void @_Z4readIxEvRT_(i64* nonnull dereferenceable(8) %32)
  br label %.backedge

33:                                               ; preds = %4
  %34 = add i32 %.083, 1
  br label %.backedge

35:                                               ; preds = %4
  br label %.backedge

36:                                               ; preds = %4
  %37 = sext i32 %.081 to i64
  %38 = load i64, i64* @n, align 8
  %.not95 = icmp slt i64 %38, %37
  %39 = select i1 %.not95, i32 -1373024388, i32 -694634140
  br label %.backedge

40:                                               ; preds = %4
  %41 = load i32, i32* @x.1, align 4
  %42 = load i32, i32* @y.2, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 919210150, i32 324627060
  br label %.backedge

50:                                               ; preds = %4
  %51 = load i32, i32* @x.1, align 4
  %52 = load i32, i32* @y.2, align 4
  %53 = add i32 %51, -1
  %54 = mul i32 %53, %51
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %57, %56
  %59 = select i1 %58, i32 1217998443, i32 324627060
  br label %.backedge

60:                                               ; preds = %4
  br label %.backedge

61:                                               ; preds = %4
  %62 = sext i32 %.079 to i64
  %63 = load i64, i64* @m, align 8
  %.not94 = icmp slt i64 %63, %62
  %64 = select i1 %.not94, i32 828218200, i32 -1837413055
  br label %.backedge

65:                                               ; preds = %4
  %66 = sext i32 %.079 to i64
  %67 = sext i32 %.081 to i64
  %68 = getelementptr inbounds [205 x [5005 x i64]], [205 x [5005 x i64]]* @b, i64 0, i64 %66, i64 %67
  tail call void @_Z4readIxEvRT_(i64* nonnull dereferenceable(8) %68)
  br label %.backedge

69:                                               ; preds = %4
  %70 = add i32 %.079, 1
  br label %.backedge

71:                                               ; preds = %4
  %72 = load i32, i32* @x.1, align 4
  %73 = load i32, i32* @y.2, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 641360870, i32 1977180350
  br label %.backedge

81:                                               ; preds = %4
  %82 = load i32, i32* @x.1, align 4
  %83 = load i32, i32* @y.2, align 4
  %84 = add i32 %82, -1
  %85 = mul i32 %84, %82
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %88, %87
  %90 = select i1 %89, i32 1246218665, i32 1977180350
  br label %.backedge

91:                                               ; preds = %4
  br label %.backedge

92:                                               ; preds = %4
  %.neg93 = add i32 %.081, 1
  br label %.backedge

93:                                               ; preds = %4
  br label %.backedge

94:                                               ; preds = %4
  %95 = load i32, i32* @x.1, align 4
  %96 = load i32, i32* @y.2, align 4
  %97 = add i32 %95, -1
  %98 = mul i32 %97, %95
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %101, %100
  %103 = select i1 %102, i32 -1316963436, i32 -1459878777
  br label %.backedge

104:                                              ; preds = %4
  %105 = sext i32 %.077 to i64
  %106 = load i64, i64* @m, align 8
  %107 = icmp sge i64 %106, %105
  store i1 %107, i1* %2, align 1
  %108 = load i32, i32* @x.1, align 4
  %109 = load i32, i32* @y.2, align 4
  %110 = add i32 %108, -1
  %111 = mul i32 %110, %108
  %112 = and i32 %111, 1
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %114, %113
  %116 = select i1 %115, i32 -836796404, i32 -1459878777
  br label %.backedge

117:                                              ; preds = %4
  %.0..0..0.61 = load volatile i1, i1* %2, align 1
  %118 = select i1 %.0..0..0.61, i32 -1617143190, i32 527117005
  br label %.backedge

119:                                              ; preds = %4
  %120 = load i64, i64* @n, align 8
  %121 = trunc i64 %120 to i32
  %122 = add i32 %121, 1
  %123 = sext i32 %.077 to i64
  %124 = getelementptr inbounds [205 x i32], [205 x i32]* @tp, i64 0, i64 %123
  store i32 1, i32* %124, align 4
  %125 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @st, i64 0, i64 %123, i64 1
  store i32 %122, i32* %125, align 4
  %.neg92 = add i64 %120, 1
  %126 = getelementptr inbounds [205 x [5005 x i64]], [205 x [5005 x i64]]* @b, i64 0, i64 %123, i64 %.neg92
  store i64 1000000000000000, i64* %126, align 8
  br label %.backedge

127:                                              ; preds = %4
  %128 = load i32, i32* @x.1, align 4
  %129 = load i32, i32* @y.2, align 4
  %130 = add i32 %128, -1
  %131 = mul i32 %130, %128
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %134, %133
  %136 = select i1 %135, i32 -374595940, i32 1709137686
  br label %.backedge

137:                                              ; preds = %4
  %138 = add i32 %.077, 1
  %139 = load i32, i32* @x.1, align 4
  %140 = load i32, i32* @y.2, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 1658953129, i32 1709137686
  br label %.backedge

148:                                              ; preds = %4
  br label %.backedge

149:                                              ; preds = %4
  %150 = load i32, i32* @x.1, align 4
  %151 = load i32, i32* @y.2, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 -2029449586, i32 1033979719
  br label %.backedge

159:                                              ; preds = %4
  %160 = load i64, i64* @n, align 8
  %161 = trunc i64 %160 to i32
  %162 = load i32, i32* @x.1, align 4
  %163 = load i32, i32* @y.2, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 -1489272691, i32 1033979719
  br label %.backedge

171:                                              ; preds = %4
  br label %.backedge

172:                                              ; preds = %4
  %173 = load i32, i32* @x.1, align 4
  %174 = load i32, i32* @y.2, align 4
  %175 = add i32 %173, -1
  %176 = mul i32 %175, %173
  %177 = and i32 %176, 1
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %179, %178
  %181 = select i1 %180, i32 1004926729, i32 -430928307
  br label %.backedge

182:                                              ; preds = %4
  %183 = icmp sgt i32 %.075, 0
  store i1 %183, i1* %1, align 1
  %184 = load i32, i32* @x.1, align 4
  %185 = load i32, i32* @y.2, align 4
  %186 = add i32 %184, -1
  %187 = mul i32 %186, %184
  %188 = and i32 %187, 1
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %190, %189
  %192 = select i1 %191, i32 -918500300, i32 -430928307
  br label %.backedge

193:                                              ; preds = %4
  %.0..0..0.62 = load volatile i1, i1* %1, align 1
  %194 = select i1 %.0..0..0.62, i32 -1183553916, i32 1722104852
  br label %.backedge

195:                                              ; preds = %4
  br label %.backedge

196:                                              ; preds = %4
  %197 = sext i32 %.073 to i64
  %198 = load i64, i64* @m, align 8
  %.not91 = icmp slt i64 %198, %197
  %199 = select i1 %.not91, i32 475644495, i32 89435088
  br label %.backedge

200:                                              ; preds = %4
  %201 = sext i32 %.073 to i64
  %202 = getelementptr inbounds [205 x [5005 x i64]], [205 x [5005 x i64]]* @b, i64 0, i64 %201, i64 0
  %203 = getelementptr inbounds [205 x [5005 x i32]], [205 x [5005 x i32]]* @st, i64 0, i64 %201, i64 0
  %204 = getelementptr inbounds [205 x i32], [205 x i32]* @tp, i64 0, i64 %201
  %205 = sext i32 %.075 to i64
  %206 = getelementptr inbounds [205 x [5005 x i64]], [205 x [5005 x i64]]* @b, i64 0, i64 %201, i64 %205
  %207 = load i64, i64* %206, align 8
  tail call void @_Z3addiix(i32 %.075, i32 %.075, i64 %207)
  br label %.backedge

208:                                              ; preds = %4
  %209 = load i32, i32* %.067, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i32, i32* %.069, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i64, i64* %.071, i64 %213
  %215 = load i64, i64* %214, align 8
  %216 = sext i32 %.075 to i64
  %217 = getelementptr inbounds i64, i64* %.071, i64 %216
  %218 = load i64, i64* %217, align 8
  %.not90 = icmp sgt i64 %215, %218
  %219 = select i1 %.not90, i32 -973435130, i32 1543646486
  br label %.backedge

220:                                              ; preds = %4
  %221 = load i32, i32* %.067, align 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds i32, i32* %.069, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = add i32 %221, -1
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i32, i32* %.069, i64 %226
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, -1
  %230 = sext i32 %.075 to i64
  %231 = getelementptr inbounds i64, i64* %.071, i64 %230
  %232 = load i64, i64* %231, align 8
  %233 = sext i32 %224 to i64
  %234 = getelementptr inbounds i64, i64* %.071, i64 %233
  %235 = load i64, i64* %234, align 8
  %236 = sub i64 %232, %235
  tail call void @_Z3addiix(i32 %224, i32 %229, i64 %236)
  %237 = load i32, i32* %.067, align 4
  %.neg89 = add i32 %237, -1
  store i32 %.neg89, i32* %.067, align 4
  br label %.backedge

238:                                              ; preds = %4
  %239 = load i32, i32* %.067, align 4
  %240 = add i32 %239, 1
  store i32 %240, i32* %.067, align 4
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds i32, i32* %.069, i64 %241
  store i32 %.075, i32* %242, align 4
  br label %.backedge

243:                                              ; preds = %4
  %244 = load i32, i32* @x.1, align 4
  %245 = load i32, i32* @y.2, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 1892519413, i32 -1276629214
  br label %.backedge

253:                                              ; preds = %4
  %.neg88 = add i32 %.073, 1
  %254 = load i32, i32* @x.1, align 4
  %255 = load i32, i32* @y.2, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 218622981, i32 -1276629214
  br label %.backedge

263:                                              ; preds = %4
  br label %.backedge

264:                                              ; preds = %4
  %.neg87 = add i32 %.075, 1
  %265 = load i64, i64* @n, align 8
  %266 = trunc i64 %265 to i32
  %267 = sext i32 %.075 to i64
  %268 = getelementptr inbounds [5005 x i64], [5005 x i64]* @d, i64 0, i64 %267
  %269 = load i64, i64* %268, align 8
  %270 = sub i64 0, %269
  tail call void @_Z3addiix(i32 %.neg87, i32 %266, i64 %270)
  br label %.backedge

271:                                              ; preds = %4
  %272 = sext i32 %.063 to i64
  %273 = load i64, i64* @n, align 8
  %.not = icmp slt i64 %273, %272
  %274 = select i1 %.not, i32 -1609581824, i32 -1886959736
  br label %.backedge

275:                                              ; preds = %4
  %276 = sext i32 %.063 to i64
  %277 = getelementptr inbounds [5005 x i64], [5005 x i64]* @t, i64 0, i64 %276
  %278 = load i64, i64* %277, align 8
  %279 = add i64 %278, %.065
  store i64 0, i64* %277, align 8
  %280 = getelementptr inbounds [5005 x i64], [5005 x i64]* @tans, i64 0, i64 %276
  %281 = load i64, i64* %280, align 8
  %282 = add i64 %281, %279
  store i64 %282, i64* %280, align 8
  tail call void @_Z2MxIxEvRT_S0_(i64* nonnull dereferenceable(8) @ans, i64 %282)
  br label %.backedge

283:                                              ; preds = %4
  %284 = add i32 %.063, 1
  br label %.backedge

285:                                              ; preds = %4
  br label %.backedge

286:                                              ; preds = %4
  %287 = load i32, i32* @x.1, align 4
  %288 = load i32, i32* @y.2, align 4
  %289 = add i32 %287, -1
  %290 = mul i32 %289, %287
  %291 = and i32 %290, 1
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %293, %292
  %295 = select i1 %294, i32 1570626728, i32 -2030825272
  br label %.backedge

296:                                              ; preds = %4
  %297 = add i32 %.075, -1
  %298 = load i32, i32* @x.1, align 4
  %299 = load i32, i32* @y.2, align 4
  %300 = add i32 %298, -1
  %301 = mul i32 %300, %298
  %302 = and i32 %301, 1
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %304, %303
  %306 = select i1 %305, i32 339793072, i32 -2030825272
  br label %.backedge

307:                                              ; preds = %4
  br label %.backedge

308:                                              ; preds = %4
  %309 = load i64, i64* @ans, align 8
  tail call void @_Z5writeIxEvT_c(i64 %309, i8 signext 10)
  ret i32 0

310:                                              ; preds = %4
  br label %.backedge

311:                                              ; preds = %4
  br label %.backedge

312:                                              ; preds = %4
  br label %.backedge

313:                                              ; preds = %4
  br label %.backedge

314:                                              ; preds = %4
  %.neg86 = add i32 %.077, 1
  br label %.backedge

315:                                              ; preds = %4
  %316 = load i64, i64* @n, align 8
  %317 = trunc i64 %316 to i32
  br label %.backedge

318:                                              ; preds = %4
  br label %.backedge

319:                                              ; preds = %4
  %.neg85 = add i32 %.073, 1
  br label %.backedge

320:                                              ; preds = %4
  %.neg = add i32 %.075, -1
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z4readIxEvRT_(i64* dereferenceable(8) %0) local_unnamed_addr #0 comdat {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  store i64 0, i64* %0, align 8
  %4 = tail call i32 @getchar()
  %5 = trunc i32 %4 to i8
  br label %6

6:                                                ; preds = %.backedge, %1
  %.019 = phi i8 [ 0, %1 ], [ %.019.be, %.backedge ]
  %.017 = phi i8 [ %5, %1 ], [ %.017.be, %.backedge ]
  %.0 = phi i32 [ -706318313, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -706318313, label %7
    i32 1860833832, label %17
    i32 370241666, label %28
    i32 -1054640192, label %30
    i32 232952515, label %33
    i32 -1893248728, label %34
    i32 -170965810, label %35
    i32 -1473332915, label %45
    i32 2127307936, label %57
    i32 -2006569963, label %58
    i32 1539244985, label %59
    i32 -948332057, label %62
    i32 -2048055167, label %72
    i32 -115100449, label %87
    i32 -1689506863, label %88
    i32 -1113678953, label %91
    i32 -1306215354, label %101
    i32 2087900137, label %112
    i32 1028429802, label %114
    i32 -1743812097, label %117
    i32 1977709828, label %127
    i32 820500984, label %137
    i32 437862320, label %138
    i32 -573928048, label %139
    i32 118970811, label %142
    i32 -1064704624, label %148
    i32 841277411, label %149
  ]

.backedge:                                        ; preds = %6, %149, %148, %142, %139, %138, %127, %117, %114, %112, %101, %91, %88, %87, %72, %62, %59, %58, %57, %45, %35, %34, %33, %30, %28, %17, %7
  %.019.be = phi i8 [ %.019, %6 ], [ %.019, %149 ], [ %.019, %148 ], [ %.019, %142 ], [ %.019, %139 ], [ %.019, %138 ], [ %.019, %127 ], [ %.019, %117 ], [ %.019, %114 ], [ %.019, %112 ], [ %.019, %101 ], [ %.019, %91 ], [ %.019, %88 ], [ %.019, %87 ], [ %.019, %72 ], [ %.019, %62 ], [ %.019, %59 ], [ %.019, %58 ], [ %.019, %57 ], [ %.019, %45 ], [ %.019, %35 ], [ %.019, %34 ], [ 1, %33 ], [ %.019, %30 ], [ %.019, %28 ], [ %.019, %17 ], [ %.019, %7 ]
  %.017.be = phi i8 [ %.017, %6 ], [ %.017, %149 ], [ %.017, %148 ], [ %.017, %142 ], [ %141, %139 ], [ %.017, %138 ], [ %.017, %127 ], [ %.017, %117 ], [ %.017, %114 ], [ %.017, %112 ], [ %.017, %101 ], [ %.017, %91 ], [ %90, %88 ], [ %.017, %87 ], [ %.017, %72 ], [ %.017, %62 ], [ %.017, %59 ], [ %.017, %58 ], [ %.017, %57 ], [ %47, %45 ], [ %.017, %35 ], [ %.017, %34 ], [ %.017, %33 ], [ %.017, %30 ], [ %.017, %28 ], [ %.017, %17 ], [ %.017, %7 ]
  %.0.be = phi i32 [ %.0, %6 ], [ 1977709828, %149 ], [ -1306215354, %148 ], [ -2048055167, %142 ], [ -1473332915, %139 ], [ 1860833832, %138 ], [ %136, %127 ], [ %126, %117 ], [ -1743812097, %114 ], [ %113, %112 ], [ %111, %101 ], [ %100, %91 ], [ 1539244985, %88 ], [ -1689506863, %87 ], [ %86, %72 ], [ %71, %62 ], [ %61, %59 ], [ 1539244985, %58 ], [ -706318313, %57 ], [ %56, %45 ], [ %44, %35 ], [ -170965810, %34 ], [ -1893248728, %33 ], [ %32, %30 ], [ %29, %28 ], [ %27, %17 ], [ %16, %7 ]
  br label %6

7:                                                ; preds = %6
  %8 = load i32, i32* @x.3, align 4
  %9 = load i32, i32* @y.4, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 1860833832, i32 437862320
  br label %.backedge

17:                                               ; preds = %6
  %18 = sext i8 %.017 to i32
  %isdigittmp21 = add nsw i32 %18, -48
  %isdigit22 = icmp ugt i32 %isdigittmp21, 9
  store i1 %isdigit22, i1* %3, align 1
  %19 = load i32, i32* @x.3, align 4
  %20 = load i32, i32* @y.4, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 370241666, i32 437862320
  br label %.backedge

28:                                               ; preds = %6
  %.0..0..0.15 = load volatile i1, i1* %3, align 1
  %29 = select i1 %.0..0..0.15, i32 -1054640192, i32 -2006569963
  br label %.backedge

30:                                               ; preds = %6
  %31 = icmp eq i8 %.017, 45
  %32 = select i1 %31, i32 232952515, i32 -1893248728
  br label %.backedge

33:                                               ; preds = %6
  br label %.backedge

34:                                               ; preds = %6
  br label %.backedge

35:                                               ; preds = %6
  %36 = load i32, i32* @x.3, align 4
  %37 = load i32, i32* @y.4, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 -1473332915, i32 -573928048
  br label %.backedge

45:                                               ; preds = %6
  %46 = tail call i32 @getchar()
  %47 = trunc i32 %46 to i8
  %48 = load i32, i32* @x.3, align 4
  %49 = load i32, i32* @y.4, align 4
  %50 = add i32 %48, -1
  %51 = mul i32 %50, %48
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %54, %53
  %56 = select i1 %55, i32 2127307936, i32 -573928048
  br label %.backedge

57:                                               ; preds = %6
  br label %.backedge

58:                                               ; preds = %6
  br label %.backedge

59:                                               ; preds = %6
  %60 = sext i8 %.017 to i32
  %isdigittmp = add nsw i32 %60, -48
  %isdigit = icmp ult i32 %isdigittmp, 10
  %61 = select i1 %isdigit, i32 -948332057, i32 -1113678953
  br label %.backedge

62:                                               ; preds = %6
  %63 = load i32, i32* @x.3, align 4
  %64 = load i32, i32* @y.4, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 -2048055167, i32 118970811
  br label %.backedge

72:                                               ; preds = %6
  %73 = load i64, i64* %0, align 8
  %74 = mul nsw i64 %73, 10
  %75 = xor i8 %.017, 48
  %76 = sext i8 %75 to i64
  %77 = add i64 %74, %76
  store i64 %77, i64* %0, align 8
  %78 = load i32, i32* @x.3, align 4
  %79 = load i32, i32* @y.4, align 4
  %80 = add i32 %78, -1
  %81 = mul i32 %80, %78
  %82 = and i32 %81, 1
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %84, %83
  %86 = select i1 %85, i32 -115100449, i32 118970811
  br label %.backedge

87:                                               ; preds = %6
  br label %.backedge

88:                                               ; preds = %6
  %89 = tail call i32 @getchar()
  %90 = trunc i32 %89 to i8
  br label %.backedge

91:                                               ; preds = %6
  %92 = load i32, i32* @x.3, align 4
  %93 = load i32, i32* @y.4, align 4
  %94 = add i32 %92, -1
  %95 = mul i32 %94, %92
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %98, %97
  %100 = select i1 %99, i32 -1306215354, i32 -1064704624
  br label %.backedge

101:                                              ; preds = %6
  %102 = icmp ne i8 %.019, 0
  store i1 %102, i1* %2, align 1
  %103 = load i32, i32* @x.3, align 4
  %104 = load i32, i32* @y.4, align 4
  %105 = add i32 %103, -1
  %106 = mul i32 %105, %103
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %109, %108
  %111 = select i1 %110, i32 2087900137, i32 -1064704624
  br label %.backedge

112:                                              ; preds = %6
  %.0..0..0.16 = load volatile i1, i1* %2, align 1
  %113 = select i1 %.0..0..0.16, i32 1028429802, i32 -1743812097
  br label %.backedge

114:                                              ; preds = %6
  %115 = load i64, i64* %0, align 8
  %116 = sub i64 0, %115
  store i64 %116, i64* %0, align 8
  br label %.backedge

117:                                              ; preds = %6
  %118 = load i32, i32* @x.3, align 4
  %119 = load i32, i32* @y.4, align 4
  %120 = add i32 %118, -1
  %121 = mul i32 %120, %118
  %122 = and i32 %121, 1
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %124, %123
  %126 = select i1 %125, i32 1977709828, i32 841277411
  br label %.backedge

127:                                              ; preds = %6
  %128 = load i32, i32* @x.3, align 4
  %129 = load i32, i32* @y.4, align 4
  %130 = add i32 %128, -1
  %131 = mul i32 %130, %128
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %134, %133
  %136 = select i1 %135, i32 820500984, i32 841277411
  br label %.backedge

137:                                              ; preds = %6
  ret void

138:                                              ; preds = %6
  br label %.backedge

139:                                              ; preds = %6
  %140 = tail call i32 @getchar()
  %141 = trunc i32 %140 to i8
  br label %.backedge

142:                                              ; preds = %6
  %143 = load i64, i64* %0, align 8
  %144 = mul nsw i64 %143, 10
  %145 = xor i8 %.017, 48
  %146 = sext i8 %145 to i64
  %147 = add i64 %144, %146
  store i64 %147, i64* %0, align 8
  br label %.backedge

148:                                              ; preds = %6
  br label %.backedge

149:                                              ; preds = %6
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z3addiix(i32 %0, i32 %1, i64 %2) local_unnamed_addr #5 comdat {
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [5005 x i64], [5005 x i64]* @t, i64 0, i64 %4
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %2
  store i64 %7, i64* %5, align 8
  %.neg = add i32 %1, 1
  %8 = sext i32 %.neg to i64
  %9 = getelementptr inbounds [5005 x i64], [5005 x i64]* @t, i64 0, i64 %8
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %2
  store i64 %11, i64* %9, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z2MxIxEvRT_S0_(i64* dereferenceable(8) %0, i64 %1) local_unnamed_addr #5 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %5, align 8
  store i64 %1, i64* %4, align 8
  %7 = icmp ne i64 %1, 0
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ 1092790146, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %8

8:                                                ; preds = %.outer, %8
  switch i32 %.0.ph, label %8 [
    i32 1092790146, label %9
    i32 971090640, label %12
    i32 964167585, label %22
    i32 -952015026, label %32
    i32 886760465, label %33
    i32 -737814355, label %34
  ]

9:                                                ; preds = %8
  %.0..0..0.6 = load volatile i64, i64* %5, align 8
  %.0..0..0.7 = load volatile i64, i64* %4, align 8
  %10 = icmp slt i64 %.0..0..0.6, %.0..0..0.7
  %11 = select i1 %10, i32 971090640, i32 886760465
  br label %.outer.backedge

12:                                               ; preds = %8
  %13 = load i32, i32* @x.7, align 4
  %14 = load i32, i32* @y.8, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 964167585, i32 -737814355
  br label %.outer.backedge

22:                                               ; preds = %8
  store i64 %1, i64* %0, align 8
  store i1 %7, i1* %3, align 1
  %23 = load i32, i32* @x.7, align 4
  %24 = load i32, i32* @y.8, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 -952015026, i32 -737814355
  br label %.outer.backedge

32:                                               ; preds = %8
  %.0..0..0.8 = load volatile i1, i1* %3, align 1
  br label %.outer.backedge

33:                                               ; preds = %8
  ret void

34:                                               ; preds = %8
  store i64 %1, i64* %0, align 8
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %34, %32, %22, %12, %9
  %.0.ph.be = phi i32 [ %11, %9 ], [ %21, %12 ], [ %31, %22 ], [ 886760465, %32 ], [ 964167585, %34 ]
  br label %.outer
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z5writeIxEvT_c(i64 %0, i8 signext %1) local_unnamed_addr #0 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  br label %5

5:                                                ; preds = %.backedge, %2
  %.014 = phi i64 [ %0, %2 ], [ %.014.be, %.backedge ]
  %.012 = phi i16 [ 0, %2 ], [ %.012.be, %.backedge ]
  %.0 = phi i32 [ 314087647, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 314087647, label %6
    i32 -1055464398, label %9
    i32 1220108354, label %12
    i32 -1695081375, label %22
    i32 1706479036, label %32
    i32 2071182280, label %33
    i32 -745065054, label %40
    i32 -534074660, label %50
    i32 721698883, label %61
    i32 503764651, label %63
    i32 -608844458, label %64
    i32 300099205, label %66
    i32 -440988715, label %73
    i32 -1052901131, label %76
    i32 -1595097094, label %77
  ]

.backedge:                                        ; preds = %5, %77, %76, %66, %64, %63, %61, %50, %40, %33, %32, %22, %12, %9, %6
  %.014.be = phi i64 [ %.014, %5 ], [ %.014, %77 ], [ %.014, %76 ], [ %.014, %66 ], [ %.014, %64 ], [ %.014, %63 ], [ %.014, %61 ], [ %.014, %50 ], [ %.014, %40 ], [ %39, %33 ], [ %.014, %32 ], [ %.014, %22 ], [ %.014, %12 ], [ %11, %9 ], [ %.014, %6 ]
  %.012.be = phi i16 [ %.012, %5 ], [ %.012, %77 ], [ %.012, %76 ], [ %.neg, %66 ], [ %.012, %64 ], [ %.012, %63 ], [ %.012, %61 ], [ %.012, %50 ], [ %.012, %40 ], [ %36, %33 ], [ %.012, %32 ], [ %.012, %22 ], [ %.012, %12 ], [ %.012, %9 ], [ %.012, %6 ]
  %.0.be = phi i32 [ %.0, %5 ], [ -534074660, %77 ], [ -1695081375, %76 ], [ -608844458, %66 ], [ %65, %64 ], [ -608844458, %63 ], [ %62, %61 ], [ %60, %50 ], [ %49, %40 ], [ -745065054, %33 ], [ 2071182280, %32 ], [ %31, %22 ], [ %21, %12 ], [ 1220108354, %9 ], [ %8, %6 ]
  br label %5

6:                                                ; preds = %5
  %.0..0..0. = load volatile i64, i64* %4, align 8
  %7 = icmp slt i64 %.0..0..0., 0
  %8 = select i1 %7, i32 -1055464398, i32 1220108354
  br label %.backedge

9:                                                ; preds = %5
  %10 = tail call i32 @putchar(i32 45)
  %11 = sub i64 0, %.014
  br label %.backedge

12:                                               ; preds = %5
  %13 = load i32, i32* @x.9, align 4
  %14 = load i32, i32* @y.10, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 -1695081375, i32 -1052901131
  br label %.backedge

22:                                               ; preds = %5
  %23 = load i32, i32* @x.9, align 4
  %24 = load i32, i32* @y.10, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 1706479036, i32 -1052901131
  br label %.backedge

32:                                               ; preds = %5
  br label %.backedge

33:                                               ; preds = %5
  %34 = srem i64 %.014, 10
  %35 = trunc i64 %34 to i16
  %36 = add i16 %.012, 1
  %37 = sext i16 %36 to i64
  %38 = getelementptr inbounds [30 x i16], [30 x i16]* @_ZZ5writeIxEvT_cE2st, i64 0, i64 %37
  store i16 %35, i16* %38, align 2
  %39 = sdiv i64 %.014, 10
  br label %.backedge

40:                                               ; preds = %5
  %41 = load i32, i32* @x.9, align 4
  %42 = load i32, i32* @y.10, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 -534074660, i32 -1595097094
  br label %.backedge

50:                                               ; preds = %5
  %51 = icmp ne i64 %.014, 0
  store i1 %51, i1* %3, align 1
  %52 = load i32, i32* @x.9, align 4
  %53 = load i32, i32* @y.10, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 721698883, i32 -1595097094
  br label %.backedge

61:                                               ; preds = %5
  %.0..0..0.11 = load volatile i1, i1* %3, align 1
  %62 = select i1 %.0..0..0.11, i32 2071182280, i32 503764651
  br label %.backedge

63:                                               ; preds = %5
  br label %.backedge

64:                                               ; preds = %5
  %.not = icmp eq i16 %.012, 0
  %65 = select i1 %.not, i32 -440988715, i32 300099205
  br label %.backedge

66:                                               ; preds = %5
  %.neg = add i16 %.012, -1
  %67 = sext i16 %.012 to i64
  %68 = getelementptr inbounds [30 x i16], [30 x i16]* @_ZZ5writeIxEvT_cE2st, i64 0, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = or i16 %69, 48
  %71 = sext i16 %70 to i32
  %72 = tail call i32 @putchar(i32 %71)
  br label %.backedge

73:                                               ; preds = %5
  %74 = sext i8 %1 to i32
  %75 = tail call i32 @putchar(i32 %74)
  ret void

76:                                               ; preds = %5
  br label %.backedge

77:                                               ; preds = %5
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s489331415.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
