; ModuleID = 'build_ollvm/programs/p03833/s725883248.ll'
source_filename = "Project_CodeNet_C++1400/p03833/s725883248.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_Z2Rdv = comdat any

$_Z6ChkMaxRxx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@N = local_unnamed_addr global i32 0, align 4
@M = local_unnamed_addr global i32 0, align 4
@stk = local_unnamed_addr global [5005 x i32] zeroinitializer, align 16
@p = local_unnamed_addr global [5005 x [205 x i32]] zeroinitializer, align 16
@lp = local_unnamed_addr global [5005 x i32] zeroinitializer, align 16
@rp = local_unnamed_addr global [5005 x i32] zeroinitializer, align 16
@f = local_unnamed_addr global [5005 x [5005 x i64]] zeroinitializer, align 16
@dis = local_unnamed_addr global [5005 x i64] zeroinitializer, align 16
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s725883248.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i64, align 8
  %4 = tail call i32 @_Z2Rdv()
  store i32 %4, i32* @N, align 4
  %5 = tail call i32 @_Z2Rdv()
  store i32 %5, i32* @M, align 4
  br label %6

6:                                                ; preds = %.backedge, %0
  %.0114 = phi i32 [ 2, %0 ], [ %.0114.be, %.backedge ]
  %.0112 = phi i32 [ undef, %0 ], [ %.0112.be, %.backedge ]
  %.0110 = phi i32 [ undef, %0 ], [ %.0110.be, %.backedge ]
  %.0108 = phi i32 [ undef, %0 ], [ %.0108.be, %.backedge ]
  %.0106 = phi i32 [ undef, %0 ], [ %.0106.be, %.backedge ]
  %.0104 = phi i32 [ undef, %0 ], [ %.0104.be, %.backedge ]
  %.0102 = phi i32 [ undef, %0 ], [ %.0102.be, %.backedge ]
  %.0100 = phi i32 [ undef, %0 ], [ %.0100.be, %.backedge ]
  %.098 = phi i32 [ undef, %0 ], [ %.098.be, %.backedge ]
  %.096 = phi i32 [ undef, %0 ], [ %.096.be, %.backedge ]
  %.0 = phi i32 [ 1183298442, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1183298442, label %7
    i32 1652416213, label %10
    i32 -1438922837, label %20
    i32 -1114073275, label %39
    i32 1925699163, label %40
    i32 1066417484, label %42
    i32 -1624629605, label %43
    i32 1322829477, label %46
    i32 1609129053, label %56
    i32 -141537414, label %66
    i32 -1520671233, label %67
    i32 901742346, label %70
    i32 -1721069093, label %75
    i32 -2126472350, label %77
    i32 1600422554, label %87
    i32 -1566610820, label %97
    i32 -161924125, label %98
    i32 1512458954, label %108
    i32 1509028895, label %119
    i32 1794837746, label %120
    i32 393972485, label %121
    i32 567636400, label %124
    i32 -1101919066, label %134
    i32 1481174982, label %146
    i32 -65581176, label %147
    i32 1753837249, label %149
    i32 -1465849080, label %159
    i32 114383303, label %169
    i32 1284811121, label %170
    i32 -386360298, label %173
    i32 824164759, label %174
    i32 730048766, label %177
    i32 -1106631199, label %187
    i32 431008045, label %197
    i32 1125713979, label %198
    i32 -1599178725, label %208
    i32 -2086769836, label %229
    i32 -2018924906, label %231
    i32 -759070362, label %241
    i32 111328861, label %257
    i32 -646704092, label %258
    i32 -662891460, label %273
    i32 876106236, label %280
    i32 -210583436, label %290
    i32 -341652243, label %303
    i32 -342271771, label %304
    i32 -1809434815, label %305
    i32 1304808046, label %307
    i32 1430666427, label %308
    i32 -1725514446, label %318
    i32 1907720426, label %329
    i32 -1049566752, label %331
    i32 473674158, label %341
    i32 798270247, label %358
    i32 1907954475, label %359
    i32 -499216615, label %360
    i32 -23332927, label %363
    i32 -1241499707, label %389
    i32 1834847184, label %391
    i32 128327709, label %392
    i32 212296528, label %402
    i32 -1735790065, label %413
    i32 -777433843, label %414
    i32 -2120238608, label %415
    i32 -1611687168, label %418
    i32 -1485352522, label %419
    i32 -1266241783, label %422
    i32 398410862, label %441
    i32 -2040903876, label %451
    i32 -434118159, label %470
    i32 1815123700, label %471
    i32 1101027044, label %472
    i32 -1153744668, label %482
    i32 -186614957, label %493
    i32 -1544090502, label %494
    i32 -786356106, label %504
    i32 494228490, label %514
    i32 1045951789, label %515
    i32 1404705364, label %525
    i32 1983151218, label %536
    i32 1201010959, label %537
    i32 -1899254592, label %541
    i32 188596671, label %551
    i32 -458480409, label %552
    i32 -1142195445, label %553
    i32 1605546218, label %555
    i32 -1211556256, label %558
    i32 902815401, label %559
    i32 1072792513, label %560
    i32 1536069964, label %561
    i32 1024814278, label %569
    i32 472594936, label %573
    i32 -1480254610, label %574
    i32 634874573, label %582
    i32 332091880, label %584
    i32 -248149985, label %595
    i32 174725924, label %597
    i32 -235095300, label %598
  ]

.backedge:                                        ; preds = %6, %598, %597, %595, %584, %582, %574, %573, %569, %561, %560, %559, %558, %555, %553, %552, %551, %541, %536, %525, %515, %514, %504, %494, %493, %482, %472, %471, %470, %451, %441, %422, %419, %418, %415, %414, %413, %402, %392, %391, %389, %363, %360, %359, %358, %341, %331, %329, %318, %308, %307, %305, %304, %303, %290, %280, %273, %258, %257, %241, %231, %229, %208, %198, %197, %187, %177, %174, %173, %170, %169, %159, %149, %147, %146, %134, %124, %121, %120, %119, %108, %98, %97, %87, %77, %75, %70, %67, %66, %56, %46, %43, %42, %40, %39, %20, %10, %7
  %.0114.be = phi i32 [ %.0114, %6 ], [ %.0114, %598 ], [ %.0114, %597 ], [ %.0114, %595 ], [ %.0114, %584 ], [ %.0114, %582 ], [ %.0114, %574 ], [ %.0114, %573 ], [ %.0114, %569 ], [ %.0114, %561 ], [ %.0114, %560 ], [ %.0114, %559 ], [ %.0114, %558 ], [ %.0114, %555 ], [ %.0114, %553 ], [ %.0114, %552 ], [ %.0114, %551 ], [ %.0114, %541 ], [ %.0114, %536 ], [ %.0114, %525 ], [ %.0114, %515 ], [ %.0114, %514 ], [ %.0114, %504 ], [ %.0114, %494 ], [ %.0114, %493 ], [ %.0114, %482 ], [ %.0114, %472 ], [ %.0114, %471 ], [ %.0114, %470 ], [ %.0114, %451 ], [ %.0114, %441 ], [ %.0114, %422 ], [ %.0114, %419 ], [ %.0114, %418 ], [ %.0114, %415 ], [ %.0114, %414 ], [ %.0114, %413 ], [ %.0114, %402 ], [ %.0114, %392 ], [ %.0114, %391 ], [ %.0114, %389 ], [ %.0114, %363 ], [ %.0114, %360 ], [ %.0114, %359 ], [ %.0114, %358 ], [ %.0114, %341 ], [ %.0114, %331 ], [ %.0114, %329 ], [ %.0114, %318 ], [ %.0114, %308 ], [ %.0114, %307 ], [ %.0114, %305 ], [ %.0114, %304 ], [ %.0114, %303 ], [ %.0114, %290 ], [ %.0114, %280 ], [ %.0114, %273 ], [ %.0114, %258 ], [ %.0114, %257 ], [ %.0114, %241 ], [ %.0114, %231 ], [ %.0114, %229 ], [ %.0114, %208 ], [ %.0114, %198 ], [ %.0114, %197 ], [ %.0114, %187 ], [ %.0114, %177 ], [ %.0114, %174 ], [ %.0114, %173 ], [ %.0114, %170 ], [ %.0114, %169 ], [ %.0114, %159 ], [ %.0114, %149 ], [ %.0114, %147 ], [ %.0114, %146 ], [ %.0114, %134 ], [ %.0114, %124 ], [ %.0114, %121 ], [ %.0114, %120 ], [ %.0114, %119 ], [ %.0114, %108 ], [ %.0114, %98 ], [ %.0114, %97 ], [ %.0114, %87 ], [ %.0114, %77 ], [ %.0114, %75 ], [ %.0114, %70 ], [ %.0114, %67 ], [ %.0114, %66 ], [ %.0114, %56 ], [ %.0114, %46 ], [ %.0114, %43 ], [ %.0114, %42 ], [ %41, %40 ], [ %.0114, %39 ], [ %.0114, %20 ], [ %.0114, %10 ], [ %.0114, %7 ]
  %.0112.be = phi i32 [ %.0112, %6 ], [ %.0112, %598 ], [ %.0112, %597 ], [ %.0112, %595 ], [ %.0112, %584 ], [ %.0112, %582 ], [ %.0112, %574 ], [ %.0112, %573 ], [ %.0112, %569 ], [ %.0112, %561 ], [ %.0112, %560 ], [ %.0112, %559 ], [ %.0112, %558 ], [ %.0112, %555 ], [ %554, %553 ], [ %.0112, %552 ], [ %.0112, %551 ], [ %.0112, %541 ], [ %.0112, %536 ], [ %.0112, %525 ], [ %.0112, %515 ], [ %.0112, %514 ], [ %.0112, %504 ], [ %.0112, %494 ], [ %.0112, %493 ], [ %.0112, %482 ], [ %.0112, %472 ], [ %.0112, %471 ], [ %.0112, %470 ], [ %.0112, %451 ], [ %.0112, %441 ], [ %.0112, %422 ], [ %.0112, %419 ], [ %.0112, %418 ], [ %.0112, %415 ], [ %.0112, %414 ], [ %.0112, %413 ], [ %.0112, %402 ], [ %.0112, %392 ], [ %.0112, %391 ], [ %.0112, %389 ], [ %.0112, %363 ], [ %.0112, %360 ], [ %.0112, %359 ], [ %.0112, %358 ], [ %.0112, %341 ], [ %.0112, %331 ], [ %.0112, %329 ], [ %.0112, %318 ], [ %.0112, %308 ], [ %.0112, %307 ], [ %.0112, %305 ], [ %.0112, %304 ], [ %.0112, %303 ], [ %.0112, %290 ], [ %.0112, %280 ], [ %.0112, %273 ], [ %.0112, %258 ], [ %.0112, %257 ], [ %.0112, %241 ], [ %.0112, %231 ], [ %.0112, %229 ], [ %.0112, %208 ], [ %.0112, %198 ], [ %.0112, %197 ], [ %.0112, %187 ], [ %.0112, %177 ], [ %.0112, %174 ], [ %.0112, %173 ], [ %.0112, %170 ], [ %.0112, %169 ], [ %.0112, %159 ], [ %.0112, %149 ], [ %.0112, %147 ], [ %.0112, %146 ], [ %.0112, %134 ], [ %.0112, %124 ], [ %.0112, %121 ], [ %.0112, %120 ], [ %.0112, %119 ], [ %109, %108 ], [ %.0112, %98 ], [ %.0112, %97 ], [ %.0112, %87 ], [ %.0112, %77 ], [ %.0112, %75 ], [ %.0112, %70 ], [ %.0112, %67 ], [ %.0112, %66 ], [ %.0112, %56 ], [ %.0112, %46 ], [ %.0112, %43 ], [ 1, %42 ], [ %.0112, %40 ], [ %.0112, %39 ], [ %.0112, %20 ], [ %.0112, %10 ], [ %.0112, %7 ]
  %.0110.be = phi i32 [ %.0110, %6 ], [ %.0110, %598 ], [ %.0110, %597 ], [ %.0110, %595 ], [ %.0110, %584 ], [ %.0110, %582 ], [ %.0110, %574 ], [ %.0110, %573 ], [ %.0110, %569 ], [ %.0110, %561 ], [ %.0110, %560 ], [ %.0110, %559 ], [ %.0110, %558 ], [ %.0110, %555 ], [ %.0110, %553 ], [ %.0110, %552 ], [ 1, %551 ], [ %.0110, %541 ], [ %.0110, %536 ], [ %.0110, %525 ], [ %.0110, %515 ], [ %.0110, %514 ], [ %.0110, %504 ], [ %.0110, %494 ], [ %.0110, %493 ], [ %.0110, %482 ], [ %.0110, %472 ], [ %.0110, %471 ], [ %.0110, %470 ], [ %.0110, %451 ], [ %.0110, %441 ], [ %.0110, %422 ], [ %.0110, %419 ], [ %.0110, %418 ], [ %.0110, %415 ], [ %.0110, %414 ], [ %.0110, %413 ], [ %.0110, %402 ], [ %.0110, %392 ], [ %.0110, %391 ], [ %.0110, %389 ], [ %.0110, %363 ], [ %.0110, %360 ], [ %.0110, %359 ], [ %.0110, %358 ], [ %.0110, %341 ], [ %.0110, %331 ], [ %.0110, %329 ], [ %.0110, %318 ], [ %.0110, %308 ], [ %.0110, %307 ], [ %.0110, %305 ], [ %.0110, %304 ], [ %.0110, %303 ], [ %.0110, %290 ], [ %.0110, %280 ], [ %.0110, %273 ], [ %.0110, %258 ], [ %.0110, %257 ], [ %.0110, %241 ], [ %.0110, %231 ], [ %.0110, %229 ], [ %.0110, %208 ], [ %.0110, %198 ], [ %.0110, %197 ], [ %.0110, %187 ], [ %.0110, %177 ], [ %.0110, %174 ], [ %.0110, %173 ], [ %.0110, %170 ], [ %.0110, %169 ], [ %.0110, %159 ], [ %.0110, %149 ], [ %.0110, %147 ], [ %.0110, %146 ], [ %.0110, %134 ], [ %.0110, %124 ], [ %.0110, %121 ], [ %.0110, %120 ], [ %.0110, %119 ], [ %.0110, %108 ], [ %.0110, %98 ], [ %.0110, %97 ], [ %.0110, %87 ], [ %.0110, %77 ], [ %76, %75 ], [ %.0110, %70 ], [ %.0110, %67 ], [ %.0110, %66 ], [ 1, %56 ], [ %.0110, %46 ], [ %.0110, %43 ], [ %.0110, %42 ], [ %.0110, %40 ], [ %.0110, %39 ], [ %.0110, %20 ], [ %.0110, %10 ], [ %.0110, %7 ]
  %.0108.be = phi i32 [ %.0108, %6 ], [ %.0108, %598 ], [ %.0108, %597 ], [ %.0108, %595 ], [ %.0108, %584 ], [ %.0108, %582 ], [ %.0108, %574 ], [ %.0108, %573 ], [ %.0108, %569 ], [ %.0108, %561 ], [ %.0108, %560 ], [ %.0108, %559 ], [ %.0108, %558 ], [ %.0108, %555 ], [ %.0108, %553 ], [ %.0108, %552 ], [ %.0108, %551 ], [ %.0108, %541 ], [ %.0108, %536 ], [ %.0108, %525 ], [ %.0108, %515 ], [ %.0108, %514 ], [ %.0108, %504 ], [ %.0108, %494 ], [ %.0108, %493 ], [ %.0108, %482 ], [ %.0108, %472 ], [ %.0108, %471 ], [ %.0108, %470 ], [ %.0108, %451 ], [ %.0108, %441 ], [ %.0108, %422 ], [ %.0108, %419 ], [ %.0108, %418 ], [ %.0108, %415 ], [ %.0108, %414 ], [ %.0108, %413 ], [ %.0108, %402 ], [ %.0108, %392 ], [ %.0108, %391 ], [ %.0108, %389 ], [ %.0108, %363 ], [ %.0108, %360 ], [ %.0108, %359 ], [ %.0108, %358 ], [ %.0108, %341 ], [ %.0108, %331 ], [ %.0108, %329 ], [ %.0108, %318 ], [ %.0108, %308 ], [ %.0108, %307 ], [ %.0108, %305 ], [ %.0108, %304 ], [ %.0108, %303 ], [ %.0108, %290 ], [ %.0108, %280 ], [ %.0108, %273 ], [ %.0108, %258 ], [ %.0108, %257 ], [ %.0108, %241 ], [ %.0108, %231 ], [ %.0108, %229 ], [ %.0108, %208 ], [ %.0108, %198 ], [ %.0108, %197 ], [ %.0108, %187 ], [ %.0108, %177 ], [ %.0108, %174 ], [ %.0108, %173 ], [ %.0108, %170 ], [ %.0108, %169 ], [ %.0108, %159 ], [ %.0108, %149 ], [ %148, %147 ], [ %.0108, %146 ], [ %.0108, %134 ], [ %.0108, %124 ], [ %.0108, %121 ], [ 1, %120 ], [ %.0108, %119 ], [ %.0108, %108 ], [ %.0108, %98 ], [ %.0108, %97 ], [ %.0108, %87 ], [ %.0108, %77 ], [ %.0108, %75 ], [ %.0108, %70 ], [ %.0108, %67 ], [ %.0108, %66 ], [ %.0108, %56 ], [ %.0108, %46 ], [ %.0108, %43 ], [ %.0108, %42 ], [ %.0108, %40 ], [ %.0108, %39 ], [ %.0108, %20 ], [ %.0108, %10 ], [ %.0108, %7 ]
  %.0106.be = phi i32 [ %.0106, %6 ], [ %.0106, %598 ], [ %.0106, %597 ], [ %.0106, %595 ], [ %.0106, %584 ], [ %.0106, %582 ], [ %576, %574 ], [ %.0106, %573 ], [ %570, %569 ], [ %563, %561 ], [ %.0106, %560 ], [ %.0106, %559 ], [ 0, %558 ], [ %.0106, %555 ], [ %.0106, %553 ], [ %.0106, %552 ], [ %.0106, %551 ], [ %.0106, %541 ], [ %.0106, %536 ], [ %.0106, %525 ], [ %.0106, %515 ], [ %.0106, %514 ], [ %.0106, %504 ], [ %.0106, %494 ], [ %.0106, %493 ], [ %.0106, %482 ], [ %.0106, %472 ], [ %.0106, %471 ], [ %.0106, %470 ], [ %.0106, %451 ], [ %.0106, %441 ], [ %.0106, %422 ], [ %.0106, %419 ], [ %.0106, %418 ], [ %.0106, %415 ], [ %.0106, %414 ], [ %.0106, %413 ], [ %.0106, %402 ], [ %.0106, %392 ], [ %.0106, %391 ], [ %.0106, %389 ], [ %.0106, %363 ], [ %.0106, %360 ], [ %.0106, %359 ], [ %.0106, %358 ], [ %343, %341 ], [ %.0106, %331 ], [ %.0106, %329 ], [ %.0106, %318 ], [ %.0106, %308 ], [ %.0106, %307 ], [ %.0106, %305 ], [ %.0106, %304 ], [ %.0106, %303 ], [ %291, %290 ], [ %.0106, %280 ], [ %.0106, %273 ], [ %.0106, %258 ], [ %.0106, %257 ], [ %.neg121, %241 ], [ %.0106, %231 ], [ %.0106, %229 ], [ %.0106, %208 ], [ %.0106, %198 ], [ %.0106, %197 ], [ %.0106, %187 ], [ %.0106, %177 ], [ %.0106, %174 ], [ %.0106, %173 ], [ %.0106, %170 ], [ %.0106, %169 ], [ 0, %159 ], [ %.0106, %149 ], [ %.0106, %147 ], [ %.0106, %146 ], [ %.0106, %134 ], [ %.0106, %124 ], [ %.0106, %121 ], [ %.0106, %120 ], [ %.0106, %119 ], [ %.0106, %108 ], [ %.0106, %98 ], [ %.0106, %97 ], [ %.0106, %87 ], [ %.0106, %77 ], [ %.0106, %75 ], [ %.0106, %70 ], [ %.0106, %67 ], [ %.0106, %66 ], [ %.0106, %56 ], [ %.0106, %46 ], [ %.0106, %43 ], [ %.0106, %42 ], [ %.0106, %40 ], [ %.0106, %39 ], [ %.0106, %20 ], [ %.0106, %10 ], [ %.0106, %7 ]
  %.0104.be = phi i32 [ %.0104, %6 ], [ %.0104, %598 ], [ %.0104, %597 ], [ %.0104, %595 ], [ %.0104, %584 ], [ %583, %582 ], [ %.0104, %574 ], [ %.0104, %573 ], [ %.0104, %569 ], [ %.0104, %561 ], [ %.0104, %560 ], [ %.0104, %559 ], [ 1, %558 ], [ %.0104, %555 ], [ %.0104, %553 ], [ %.0104, %552 ], [ %.0104, %551 ], [ %.0104, %541 ], [ %.0104, %536 ], [ %.0104, %525 ], [ %.0104, %515 ], [ %.0104, %514 ], [ %.0104, %504 ], [ %.0104, %494 ], [ %.0104, %493 ], [ %.0104, %482 ], [ %.0104, %472 ], [ %.0104, %471 ], [ %.0104, %470 ], [ %.0104, %451 ], [ %.0104, %441 ], [ %.0104, %422 ], [ %.0104, %419 ], [ %.0104, %418 ], [ %.0104, %415 ], [ %.0104, %414 ], [ %.0104, %413 ], [ %403, %402 ], [ %.0104, %392 ], [ %.0104, %391 ], [ %.0104, %389 ], [ %.0104, %363 ], [ %.0104, %360 ], [ %.0104, %359 ], [ %.0104, %358 ], [ %.0104, %341 ], [ %.0104, %331 ], [ %.0104, %329 ], [ %.0104, %318 ], [ %.0104, %308 ], [ %.0104, %307 ], [ %.0104, %305 ], [ %.0104, %304 ], [ %.0104, %303 ], [ %.0104, %290 ], [ %.0104, %280 ], [ %.0104, %273 ], [ %.0104, %258 ], [ %.0104, %257 ], [ %.0104, %241 ], [ %.0104, %231 ], [ %.0104, %229 ], [ %.0104, %208 ], [ %.0104, %198 ], [ %.0104, %197 ], [ %.0104, %187 ], [ %.0104, %177 ], [ %.0104, %174 ], [ %.0104, %173 ], [ %.0104, %170 ], [ %.0104, %169 ], [ 1, %159 ], [ %.0104, %149 ], [ %.0104, %147 ], [ %.0104, %146 ], [ %.0104, %134 ], [ %.0104, %124 ], [ %.0104, %121 ], [ %.0104, %120 ], [ %.0104, %119 ], [ %.0104, %108 ], [ %.0104, %98 ], [ %.0104, %97 ], [ %.0104, %87 ], [ %.0104, %77 ], [ %.0104, %75 ], [ %.0104, %70 ], [ %.0104, %67 ], [ %.0104, %66 ], [ %.0104, %56 ], [ %.0104, %46 ], [ %.0104, %43 ], [ %.0104, %42 ], [ %.0104, %40 ], [ %.0104, %39 ], [ %.0104, %20 ], [ %.0104, %10 ], [ %.0104, %7 ]
  %.0102.be = phi i32 [ %.0102, %6 ], [ %.0102, %598 ], [ %.0102, %597 ], [ %.0102, %595 ], [ %.0102, %584 ], [ %.0102, %582 ], [ %.0102, %574 ], [ %.0102, %573 ], [ %.0102, %569 ], [ %.0102, %561 ], [ %.0102, %560 ], [ %.0102, %559 ], [ %.0102, %558 ], [ %.0102, %555 ], [ %.0102, %553 ], [ %.0102, %552 ], [ %.0102, %551 ], [ %.0102, %541 ], [ %.0102, %536 ], [ %.0102, %525 ], [ %.0102, %515 ], [ %.0102, %514 ], [ %.0102, %504 ], [ %.0102, %494 ], [ %.0102, %493 ], [ %.0102, %482 ], [ %.0102, %472 ], [ %.0102, %471 ], [ %.0102, %470 ], [ %.0102, %451 ], [ %.0102, %441 ], [ %.0102, %422 ], [ %.0102, %419 ], [ %.0102, %418 ], [ %.0102, %415 ], [ %.0102, %414 ], [ %.0102, %413 ], [ %.0102, %402 ], [ %.0102, %392 ], [ %.0102, %391 ], [ %.0102, %389 ], [ %.0102, %363 ], [ %.0102, %360 ], [ %.0102, %359 ], [ %.0102, %358 ], [ %.0102, %341 ], [ %.0102, %331 ], [ %.0102, %329 ], [ %.0102, %318 ], [ %.0102, %308 ], [ %.0102, %307 ], [ %306, %305 ], [ %.0102, %304 ], [ %.0102, %303 ], [ %.0102, %290 ], [ %.0102, %280 ], [ %.0102, %273 ], [ %.0102, %258 ], [ %.0102, %257 ], [ %.0102, %241 ], [ %.0102, %231 ], [ %.0102, %229 ], [ %.0102, %208 ], [ %.0102, %198 ], [ %.0102, %197 ], [ %.0102, %187 ], [ %.0102, %177 ], [ %.0102, %174 ], [ 1, %173 ], [ %.0102, %170 ], [ %.0102, %169 ], [ %.0102, %159 ], [ %.0102, %149 ], [ %.0102, %147 ], [ %.0102, %146 ], [ %.0102, %134 ], [ %.0102, %124 ], [ %.0102, %121 ], [ %.0102, %120 ], [ %.0102, %119 ], [ %.0102, %108 ], [ %.0102, %98 ], [ %.0102, %97 ], [ %.0102, %87 ], [ %.0102, %77 ], [ %.0102, %75 ], [ %.0102, %70 ], [ %.0102, %67 ], [ %.0102, %66 ], [ %.0102, %56 ], [ %.0102, %46 ], [ %.0102, %43 ], [ %.0102, %42 ], [ %.0102, %40 ], [ %.0102, %39 ], [ %.0102, %20 ], [ %.0102, %10 ], [ %.0102, %7 ]
  %.0100.be = phi i32 [ %.0100, %6 ], [ %.0100, %598 ], [ %.0100, %597 ], [ %.0100, %595 ], [ %.0100, %584 ], [ %.0100, %582 ], [ %.0100, %574 ], [ %.0100, %573 ], [ %.0100, %569 ], [ %.0100, %561 ], [ %.0100, %560 ], [ %.0100, %559 ], [ %.0100, %558 ], [ %.0100, %555 ], [ %.0100, %553 ], [ %.0100, %552 ], [ %.0100, %551 ], [ %.0100, %541 ], [ %.0100, %536 ], [ %.0100, %525 ], [ %.0100, %515 ], [ %.0100, %514 ], [ %.0100, %504 ], [ %.0100, %494 ], [ %.0100, %493 ], [ %.0100, %482 ], [ %.0100, %472 ], [ %.0100, %471 ], [ %.0100, %470 ], [ %.0100, %451 ], [ %.0100, %441 ], [ %.0100, %422 ], [ %.0100, %419 ], [ %.0100, %418 ], [ %.0100, %415 ], [ %.0100, %414 ], [ %.0100, %413 ], [ %.0100, %402 ], [ %.0100, %392 ], [ %.0100, %391 ], [ %390, %389 ], [ %.0100, %363 ], [ %.0100, %360 ], [ 1, %359 ], [ %.0100, %358 ], [ %.0100, %341 ], [ %.0100, %331 ], [ %.0100, %329 ], [ %.0100, %318 ], [ %.0100, %308 ], [ %.0100, %307 ], [ %.0100, %305 ], [ %.0100, %304 ], [ %.0100, %303 ], [ %.0100, %290 ], [ %.0100, %280 ], [ %.0100, %273 ], [ %.0100, %258 ], [ %.0100, %257 ], [ %.0100, %241 ], [ %.0100, %231 ], [ %.0100, %229 ], [ %.0100, %208 ], [ %.0100, %198 ], [ %.0100, %197 ], [ %.0100, %187 ], [ %.0100, %177 ], [ %.0100, %174 ], [ %.0100, %173 ], [ %.0100, %170 ], [ %.0100, %169 ], [ %.0100, %159 ], [ %.0100, %149 ], [ %.0100, %147 ], [ %.0100, %146 ], [ %.0100, %134 ], [ %.0100, %124 ], [ %.0100, %121 ], [ %.0100, %120 ], [ %.0100, %119 ], [ %.0100, %108 ], [ %.0100, %98 ], [ %.0100, %97 ], [ %.0100, %87 ], [ %.0100, %77 ], [ %.0100, %75 ], [ %.0100, %70 ], [ %.0100, %67 ], [ %.0100, %66 ], [ %.0100, %56 ], [ %.0100, %46 ], [ %.0100, %43 ], [ %.0100, %42 ], [ %.0100, %40 ], [ %.0100, %39 ], [ %.0100, %20 ], [ %.0100, %10 ], [ %.0100, %7 ]
  %.098.be = phi i32 [ %.098, %6 ], [ %599, %598 ], [ %.098, %597 ], [ %.098, %595 ], [ %.098, %584 ], [ %.098, %582 ], [ %.098, %574 ], [ %.098, %573 ], [ %.098, %569 ], [ %.098, %561 ], [ %.098, %560 ], [ %.098, %559 ], [ %.098, %558 ], [ %.098, %555 ], [ %.098, %553 ], [ %.098, %552 ], [ %.098, %551 ], [ %.098, %541 ], [ %.098, %536 ], [ %526, %525 ], [ %.098, %515 ], [ %.098, %514 ], [ %.098, %504 ], [ %.098, %494 ], [ %.098, %493 ], [ %.098, %482 ], [ %.098, %472 ], [ %.098, %471 ], [ %.098, %470 ], [ %.098, %451 ], [ %.098, %441 ], [ %.098, %422 ], [ %.098, %419 ], [ %.098, %418 ], [ %.098, %415 ], [ 1, %414 ], [ %.098, %413 ], [ %.098, %402 ], [ %.098, %392 ], [ %.098, %391 ], [ %.098, %389 ], [ %.098, %363 ], [ %.098, %360 ], [ %.098, %359 ], [ %.098, %358 ], [ %.098, %341 ], [ %.098, %331 ], [ %.098, %329 ], [ %.098, %318 ], [ %.098, %308 ], [ %.098, %307 ], [ %.098, %305 ], [ %.098, %304 ], [ %.098, %303 ], [ %.098, %290 ], [ %.098, %280 ], [ %.098, %273 ], [ %.098, %258 ], [ %.098, %257 ], [ %.098, %241 ], [ %.098, %231 ], [ %.098, %229 ], [ %.098, %208 ], [ %.098, %198 ], [ %.098, %197 ], [ %.098, %187 ], [ %.098, %177 ], [ %.098, %174 ], [ %.098, %173 ], [ %.098, %170 ], [ %.098, %169 ], [ %.098, %159 ], [ %.098, %149 ], [ %.098, %147 ], [ %.098, %146 ], [ %.098, %134 ], [ %.098, %124 ], [ %.098, %121 ], [ %.098, %120 ], [ %.098, %119 ], [ %.098, %108 ], [ %.098, %98 ], [ %.098, %97 ], [ %.098, %87 ], [ %.098, %77 ], [ %.098, %75 ], [ %.098, %70 ], [ %.098, %67 ], [ %.098, %66 ], [ %.098, %56 ], [ %.098, %46 ], [ %.098, %43 ], [ %.098, %42 ], [ %.098, %40 ], [ %.098, %39 ], [ %.098, %20 ], [ %.098, %10 ], [ %.098, %7 ]
  %.096.be = phi i32 [ %.096, %6 ], [ %.096, %598 ], [ %.096, %597 ], [ %596, %595 ], [ %.096, %584 ], [ %.096, %582 ], [ %.096, %574 ], [ %.096, %573 ], [ %.096, %569 ], [ %.096, %561 ], [ %.096, %560 ], [ %.096, %559 ], [ %.096, %558 ], [ %.096, %555 ], [ %.096, %553 ], [ %.096, %552 ], [ %.096, %551 ], [ %.096, %541 ], [ %.096, %536 ], [ %.096, %525 ], [ %.096, %515 ], [ %.096, %514 ], [ %.096, %504 ], [ %.096, %494 ], [ %.096, %493 ], [ %483, %482 ], [ %.096, %472 ], [ %.096, %471 ], [ %.096, %470 ], [ %.096, %451 ], [ %.096, %441 ], [ %.096, %422 ], [ %.096, %419 ], [ 1, %418 ], [ %.096, %415 ], [ %.096, %414 ], [ %.096, %413 ], [ %.096, %402 ], [ %.096, %392 ], [ %.096, %391 ], [ %.096, %389 ], [ %.096, %363 ], [ %.096, %360 ], [ %.096, %359 ], [ %.096, %358 ], [ %.096, %341 ], [ %.096, %331 ], [ %.096, %329 ], [ %.096, %318 ], [ %.096, %308 ], [ %.096, %307 ], [ %.096, %305 ], [ %.096, %304 ], [ %.096, %303 ], [ %.096, %290 ], [ %.096, %280 ], [ %.096, %273 ], [ %.096, %258 ], [ %.096, %257 ], [ %.096, %241 ], [ %.096, %231 ], [ %.096, %229 ], [ %.096, %208 ], [ %.096, %198 ], [ %.096, %197 ], [ %.096, %187 ], [ %.096, %177 ], [ %.096, %174 ], [ %.096, %173 ], [ %.096, %170 ], [ %.096, %169 ], [ %.096, %159 ], [ %.096, %149 ], [ %.096, %147 ], [ %.096, %146 ], [ %.096, %134 ], [ %.096, %124 ], [ %.096, %121 ], [ %.096, %120 ], [ %.096, %119 ], [ %.096, %108 ], [ %.096, %98 ], [ %.096, %97 ], [ %.096, %87 ], [ %.096, %77 ], [ %.096, %75 ], [ %.096, %70 ], [ %.096, %67 ], [ %.096, %66 ], [ %.096, %56 ], [ %.096, %46 ], [ %.096, %43 ], [ %.096, %42 ], [ %.096, %40 ], [ %.096, %39 ], [ %.096, %20 ], [ %.096, %10 ], [ %.096, %7 ]
  %.0.be = phi i32 [ %.0, %6 ], [ 1404705364, %598 ], [ -786356106, %597 ], [ -1153744668, %595 ], [ -2040903876, %584 ], [ 212296528, %582 ], [ 473674158, %574 ], [ -1725514446, %573 ], [ -210583436, %569 ], [ -759070362, %561 ], [ -1599178725, %560 ], [ -1106631199, %559 ], [ -1465849080, %558 ], [ -1101919066, %555 ], [ 1512458954, %553 ], [ 1600422554, %552 ], [ 1609129053, %551 ], [ -1438922837, %541 ], [ -2120238608, %536 ], [ %535, %525 ], [ %524, %515 ], [ 1045951789, %514 ], [ %513, %504 ], [ %503, %494 ], [ -1485352522, %493 ], [ %492, %482 ], [ %481, %472 ], [ 1101027044, %471 ], [ 1815123700, %470 ], [ %469, %451 ], [ %450, %441 ], [ %440, %422 ], [ %421, %419 ], [ -1485352522, %418 ], [ %417, %415 ], [ -2120238608, %414 ], [ 1284811121, %413 ], [ %412, %402 ], [ %401, %392 ], [ 128327709, %391 ], [ -499216615, %389 ], [ -1241499707, %363 ], [ %362, %360 ], [ -499216615, %359 ], [ 1430666427, %358 ], [ %357, %341 ], [ %340, %331 ], [ %330, %329 ], [ %328, %318 ], [ %317, %308 ], [ 1430666427, %307 ], [ 824164759, %305 ], [ -1809434815, %304 ], [ -342271771, %303 ], [ %302, %290 ], [ %289, %280 ], [ -342271771, %273 ], [ %272, %258 ], [ 1125713979, %257 ], [ %256, %241 ], [ %240, %231 ], [ %230, %229 ], [ %228, %208 ], [ %207, %198 ], [ 1125713979, %197 ], [ %196, %187 ], [ %186, %177 ], [ %176, %174 ], [ 824164759, %173 ], [ %172, %170 ], [ 1284811121, %169 ], [ %168, %159 ], [ %158, %149 ], [ 393972485, %147 ], [ -65581176, %146 ], [ %145, %134 ], [ %133, %124 ], [ %123, %121 ], [ 393972485, %120 ], [ -1624629605, %119 ], [ %118, %108 ], [ %107, %98 ], [ -161924125, %97 ], [ %96, %87 ], [ %86, %77 ], [ -1520671233, %75 ], [ -1721069093, %70 ], [ %69, %67 ], [ -1520671233, %66 ], [ %65, %56 ], [ %55, %46 ], [ %45, %43 ], [ -1624629605, %42 ], [ 1183298442, %40 ], [ 1925699163, %39 ], [ %38, %20 ], [ %19, %10 ], [ %9, %7 ]
  br label %6

7:                                                ; preds = %6
  %8 = load i32, i32* @N, align 4
  %.not127 = icmp sgt i32 %.0114, %8
  %9 = select i1 %.not127, i32 1066417484, i32 1652416213
  br label %.backedge

10:                                               ; preds = %6
  %11 = load i32, i32* @x.1, align 4
  %12 = load i32, i32* @y.2, align 4
  %13 = add i32 %11, -1
  %14 = mul i32 %13, %11
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %17, %16
  %19 = select i1 %18, i32 -1438922837, i32 -1899254592
  br label %.backedge

20:                                               ; preds = %6
  %21 = call i32 @_Z2Rdv()
  %22 = sext i32 %21 to i64
  %23 = add i32 %.0114, -1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [5005 x i64], [5005 x i64]* @dis, i64 0, i64 %24
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, %22
  %28 = sext i32 %.0114 to i64
  %29 = getelementptr inbounds [5005 x i64], [5005 x i64]* @dis, i64 0, i64 %28
  store i64 %27, i64* %29, align 8
  %30 = load i32, i32* @x.1, align 4
  %31 = load i32, i32* @y.2, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -1114073275, i32 -1899254592
  br label %.backedge

39:                                               ; preds = %6
  br label %.backedge

40:                                               ; preds = %6
  %41 = add i32 %.0114, 1
  br label %.backedge

42:                                               ; preds = %6
  br label %.backedge

43:                                               ; preds = %6
  %44 = load i32, i32* @N, align 4
  %.not126 = icmp sgt i32 %.0112, %44
  %45 = select i1 %.not126, i32 1794837746, i32 1322829477
  br label %.backedge

46:                                               ; preds = %6
  %47 = load i32, i32* @x.1, align 4
  %48 = load i32, i32* @y.2, align 4
  %49 = add i32 %47, -1
  %50 = mul i32 %49, %47
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %53, %52
  %55 = select i1 %54, i32 1609129053, i32 188596671
  br label %.backedge

56:                                               ; preds = %6
  %57 = load i32, i32* @x.1, align 4
  %58 = load i32, i32* @y.2, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 -141537414, i32 188596671
  br label %.backedge

66:                                               ; preds = %6
  br label %.backedge

67:                                               ; preds = %6
  %68 = load i32, i32* @M, align 4
  %.not125 = icmp sgt i32 %.0110, %68
  %69 = select i1 %.not125, i32 -2126472350, i32 901742346
  br label %.backedge

70:                                               ; preds = %6
  %71 = call i32 @_Z2Rdv()
  %72 = sext i32 %.0112 to i64
  %73 = sext i32 %.0110 to i64
  %74 = getelementptr inbounds [5005 x [205 x i32]], [5005 x [205 x i32]]* @p, i64 0, i64 %72, i64 %73
  store i32 %71, i32* %74, align 4
  br label %.backedge

75:                                               ; preds = %6
  %76 = add i32 %.0110, 1
  br label %.backedge

77:                                               ; preds = %6
  %78 = load i32, i32* @x.1, align 4
  %79 = load i32, i32* @y.2, align 4
  %80 = add i32 %78, -1
  %81 = mul i32 %80, %78
  %82 = and i32 %81, 1
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %84, %83
  %86 = select i1 %85, i32 1600422554, i32 -458480409
  br label %.backedge

87:                                               ; preds = %6
  %88 = load i32, i32* @x.1, align 4
  %89 = load i32, i32* @y.2, align 4
  %90 = add i32 %88, -1
  %91 = mul i32 %90, %88
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %94, %93
  %96 = select i1 %95, i32 -1566610820, i32 -458480409
  br label %.backedge

97:                                               ; preds = %6
  br label %.backedge

98:                                               ; preds = %6
  %99 = load i32, i32* @x.1, align 4
  %100 = load i32, i32* @y.2, align 4
  %101 = add i32 %99, -1
  %102 = mul i32 %101, %99
  %103 = and i32 %102, 1
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %105, %104
  %107 = select i1 %106, i32 1512458954, i32 -1142195445
  br label %.backedge

108:                                              ; preds = %6
  %109 = add i32 %.0112, 1
  %110 = load i32, i32* @x.1, align 4
  %111 = load i32, i32* @y.2, align 4
  %112 = add i32 %110, -1
  %113 = mul i32 %112, %110
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %116, %115
  %118 = select i1 %117, i32 1509028895, i32 -1142195445
  br label %.backedge

119:                                              ; preds = %6
  br label %.backedge

120:                                              ; preds = %6
  br label %.backedge

121:                                              ; preds = %6
  %122 = load i32, i32* @M, align 4
  %.not124 = icmp sgt i32 %.0108, %122
  %123 = select i1 %.not124, i32 1753837249, i32 567636400
  br label %.backedge

124:                                              ; preds = %6
  %125 = load i32, i32* @x.1, align 4
  %126 = load i32, i32* @y.2, align 4
  %127 = add i32 %125, -1
  %128 = mul i32 %127, %125
  %129 = and i32 %128, 1
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %131, %130
  %133 = select i1 %132, i32 -1101919066, i32 1605546218
  br label %.backedge

134:                                              ; preds = %6
  %135 = sext i32 %.0108 to i64
  %136 = getelementptr inbounds [5005 x [205 x i32]], [5005 x [205 x i32]]* @p, i64 0, i64 0, i64 %135
  store i32 2147483647, i32* %136, align 4
  %137 = load i32, i32* @x.1, align 4
  %138 = load i32, i32* @y.2, align 4
  %139 = add i32 %137, -1
  %140 = mul i32 %139, %137
  %141 = and i32 %140, 1
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %143, %142
  %145 = select i1 %144, i32 1481174982, i32 1605546218
  br label %.backedge

146:                                              ; preds = %6
  br label %.backedge

147:                                              ; preds = %6
  %148 = add i32 %.0108, 1
  br label %.backedge

149:                                              ; preds = %6
  %150 = load i32, i32* @x.1, align 4
  %151 = load i32, i32* @y.2, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 -1465849080, i32 -1211556256
  br label %.backedge

159:                                              ; preds = %6
  %160 = load i32, i32* @x.1, align 4
  %161 = load i32, i32* @y.2, align 4
  %162 = add i32 %160, -1
  %163 = mul i32 %162, %160
  %164 = and i32 %163, 1
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %166, %165
  %168 = select i1 %167, i32 114383303, i32 -1211556256
  br label %.backedge

169:                                              ; preds = %6
  br label %.backedge

170:                                              ; preds = %6
  %171 = load i32, i32* @M, align 4
  %.not123 = icmp sgt i32 %.0104, %171
  %172 = select i1 %.not123, i32 -777433843, i32 -386360298
  br label %.backedge

173:                                              ; preds = %6
  br label %.backedge

174:                                              ; preds = %6
  %175 = load i32, i32* @N, align 4
  %.not122 = icmp sgt i32 %.0102, %175
  %176 = select i1 %.not122, i32 1304808046, i32 730048766
  br label %.backedge

177:                                              ; preds = %6
  %178 = load i32, i32* @x.1, align 4
  %179 = load i32, i32* @y.2, align 4
  %180 = add i32 %178, -1
  %181 = mul i32 %180, %178
  %182 = and i32 %181, 1
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %184, %183
  %186 = select i1 %185, i32 -1106631199, i32 902815401
  br label %.backedge

187:                                              ; preds = %6
  %188 = load i32, i32* @x.1, align 4
  %189 = load i32, i32* @y.2, align 4
  %190 = add i32 %188, -1
  %191 = mul i32 %190, %188
  %192 = and i32 %191, 1
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %194, %193
  %196 = select i1 %195, i32 431008045, i32 902815401
  br label %.backedge

197:                                              ; preds = %6
  br label %.backedge

198:                                              ; preds = %6
  %199 = load i32, i32* @x.1, align 4
  %200 = load i32, i32* @y.2, align 4
  %201 = add i32 %199, -1
  %202 = mul i32 %201, %199
  %203 = and i32 %202, 1
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %205, %204
  %207 = select i1 %206, i32 -1599178725, i32 1072792513
  br label %.backedge

208:                                              ; preds = %6
  %209 = sext i32 %.0102 to i64
  %210 = sext i32 %.0104 to i64
  %211 = getelementptr inbounds [5005 x [205 x i32]], [5005 x [205 x i32]]* @p, i64 0, i64 %209, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = sext i32 %.0106 to i64
  %214 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %213
  %215 = load i32, i32* %214, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [5005 x [205 x i32]], [5005 x [205 x i32]]* @p, i64 0, i64 %216, i64 %210
  %218 = load i32, i32* %217, align 4
  %219 = icmp sgt i32 %212, %218
  store i1 %219, i1* %2, align 1
  %220 = load i32, i32* @x.1, align 4
  %221 = load i32, i32* @y.2, align 4
  %222 = add i32 %220, -1
  %223 = mul i32 %222, %220
  %224 = and i32 %223, 1
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %226, %225
  %228 = select i1 %227, i32 -2086769836, i32 1072792513
  br label %.backedge

229:                                              ; preds = %6
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %230 = select i1 %.0..0..0., i32 -2018924906, i32 -646704092
  br label %.backedge

231:                                              ; preds = %6
  %232 = load i32, i32* @x.1, align 4
  %233 = load i32, i32* @y.2, align 4
  %234 = add i32 %232, -1
  %235 = mul i32 %234, %232
  %236 = and i32 %235, 1
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %238, %237
  %240 = select i1 %239, i32 -759070362, i32 1536069964
  br label %.backedge

241:                                              ; preds = %6
  %242 = add i32 %.0102, -1
  %.neg121 = add i32 %.0106, -1
  %243 = sext i32 %.0106 to i64
  %244 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %243
  %245 = load i32, i32* %244, align 4
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds [5005 x i32], [5005 x i32]* @rp, i64 0, i64 %246
  store i32 %242, i32* %247, align 4
  %248 = load i32, i32* @x.1, align 4
  %249 = load i32, i32* @y.2, align 4
  %250 = add i32 %248, -1
  %251 = mul i32 %250, %248
  %252 = and i32 %251, 1
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %254, %253
  %256 = select i1 %255, i32 111328861, i32 1536069964
  br label %.backedge

257:                                              ; preds = %6
  br label %.backedge

258:                                              ; preds = %6
  %259 = sext i32 %.0106 to i64
  %260 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %259
  %261 = load i32, i32* %260, align 4
  %262 = add i32 %261, 1
  %263 = sext i32 %.0102 to i64
  %264 = getelementptr inbounds [5005 x i32], [5005 x i32]* @lp, i64 0, i64 %263
  store i32 %262, i32* %264, align 4
  %265 = sext i32 %.0104 to i64
  %266 = getelementptr inbounds [5005 x [205 x i32]], [5005 x [205 x i32]]* @p, i64 0, i64 %263, i64 %265
  %267 = load i32, i32* %266, align 4
  %268 = sext i32 %261 to i64
  %269 = getelementptr inbounds [5005 x [205 x i32]], [5005 x [205 x i32]]* @p, i64 0, i64 %268, i64 %265
  %270 = load i32, i32* %269, align 4
  %271 = icmp eq i32 %267, %270
  %272 = select i1 %271, i32 -662891460, i32 876106236
  br label %.backedge

273:                                              ; preds = %6
  %274 = add i32 %.0102, -1
  %275 = sext i32 %.0106 to i64
  %276 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds [5005 x i32], [5005 x i32]* @rp, i64 0, i64 %278
  store i32 %274, i32* %279, align 4
  store i32 %.0102, i32* %276, align 4
  br label %.backedge

280:                                              ; preds = %6
  %281 = load i32, i32* @x.1, align 4
  %282 = load i32, i32* @y.2, align 4
  %283 = add i32 %281, -1
  %284 = mul i32 %283, %281
  %285 = and i32 %284, 1
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %287, %286
  %289 = select i1 %288, i32 -210583436, i32 1024814278
  br label %.backedge

290:                                              ; preds = %6
  %291 = add i32 %.0106, 1
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %292
  store i32 %.0102, i32* %293, align 4
  %294 = load i32, i32* @x.1, align 4
  %295 = load i32, i32* @y.2, align 4
  %296 = add i32 %294, -1
  %297 = mul i32 %296, %294
  %298 = and i32 %297, 1
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %300, %299
  %302 = select i1 %301, i32 -341652243, i32 1024814278
  br label %.backedge

303:                                              ; preds = %6
  br label %.backedge

304:                                              ; preds = %6
  br label %.backedge

305:                                              ; preds = %6
  %306 = add i32 %.0102, 1
  br label %.backedge

307:                                              ; preds = %6
  br label %.backedge

308:                                              ; preds = %6
  %309 = load i32, i32* @x.1, align 4
  %310 = load i32, i32* @y.2, align 4
  %311 = add i32 %309, -1
  %312 = mul i32 %311, %309
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %315, %314
  %317 = select i1 %316, i32 -1725514446, i32 472594936
  br label %.backedge

318:                                              ; preds = %6
  %319 = icmp ne i32 %.0106, 0
  store i1 %319, i1* %1, align 1
  %320 = load i32, i32* @x.1, align 4
  %321 = load i32, i32* @y.2, align 4
  %322 = add i32 %320, -1
  %323 = mul i32 %322, %320
  %324 = and i32 %323, 1
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %326, %325
  %328 = select i1 %327, i32 1907720426, i32 472594936
  br label %.backedge

329:                                              ; preds = %6
  %.0..0..0.95 = load volatile i1, i1* %1, align 1
  %330 = select i1 %.0..0..0.95, i32 -1049566752, i32 1907954475
  br label %.backedge

331:                                              ; preds = %6
  %332 = load i32, i32* @x.1, align 4
  %333 = load i32, i32* @y.2, align 4
  %334 = add i32 %332, -1
  %335 = mul i32 %334, %332
  %336 = and i32 %335, 1
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %338, %337
  %340 = select i1 %339, i32 473674158, i32 -1480254610
  br label %.backedge

341:                                              ; preds = %6
  %342 = load i32, i32* @N, align 4
  %343 = add i32 %.0106, -1
  %344 = sext i32 %.0106 to i64
  %345 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %344
  %346 = load i32, i32* %345, align 4
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds [5005 x i32], [5005 x i32]* @rp, i64 0, i64 %347
  store i32 %342, i32* %348, align 4
  %349 = load i32, i32* @x.1, align 4
  %350 = load i32, i32* @y.2, align 4
  %351 = add i32 %349, -1
  %352 = mul i32 %351, %349
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %355, %354
  %357 = select i1 %356, i32 798270247, i32 -1480254610
  br label %.backedge

358:                                              ; preds = %6
  br label %.backedge

359:                                              ; preds = %6
  br label %.backedge

360:                                              ; preds = %6
  %361 = load i32, i32* @N, align 4
  %.not120 = icmp sgt i32 %.0100, %361
  %362 = select i1 %.not120, i32 1834847184, i32 -23332927
  br label %.backedge

363:                                              ; preds = %6
  %364 = sext i32 %.0100 to i64
  %365 = sext i32 %.0104 to i64
  %366 = getelementptr inbounds [5005 x [205 x i32]], [5005 x [205 x i32]]* @p, i64 0, i64 %364, i64 %365
  %367 = load i32, i32* %366, align 4
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds [5005 x i32], [5005 x i32]* @lp, i64 0, i64 %364
  %370 = load i32, i32* %369, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %371, i64 %364
  %373 = load i64, i64* %372, align 8
  %374 = add i64 %373, %368
  store i64 %374, i64* %372, align 8
  %375 = add i32 %.0100, 1
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds [5005 x i32], [5005 x i32]* @rp, i64 0, i64 %364
  %378 = load i32, i32* %377, align 4
  %.neg119 = add i32 %378, 1
  %379 = sext i32 %.neg119 to i64
  %380 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %376, i64 %379
  %381 = load i64, i64* %380, align 8
  %382 = add i64 %381, %368
  store i64 %382, i64* %380, align 8
  %383 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %376, i64 %364
  %384 = load i64, i64* %383, align 8
  %385 = sub i64 %384, %368
  store i64 %385, i64* %383, align 8
  %386 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %371, i64 %379
  %387 = load i64, i64* %386, align 8
  %388 = sub i64 %387, %368
  store i64 %388, i64* %386, align 8
  br label %.backedge

389:                                              ; preds = %6
  %390 = add i32 %.0100, 1
  br label %.backedge

391:                                              ; preds = %6
  br label %.backedge

392:                                              ; preds = %6
  %393 = load i32, i32* @x.1, align 4
  %394 = load i32, i32* @y.2, align 4
  %395 = add i32 %393, -1
  %396 = mul i32 %395, %393
  %397 = and i32 %396, 1
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %399, %398
  %401 = select i1 %400, i32 212296528, i32 634874573
  br label %.backedge

402:                                              ; preds = %6
  %403 = add i32 %.0104, 1
  %404 = load i32, i32* @x.1, align 4
  %405 = load i32, i32* @y.2, align 4
  %406 = add i32 %404, -1
  %407 = mul i32 %406, %404
  %408 = and i32 %407, 1
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %410, %409
  %412 = select i1 %411, i32 -1735790065, i32 634874573
  br label %.backedge

413:                                              ; preds = %6
  br label %.backedge

414:                                              ; preds = %6
  store i64 0, i64* %3, align 8
  br label %.backedge

415:                                              ; preds = %6
  %416 = load i32, i32* @N, align 4
  %.not118 = icmp sgt i32 %.098, %416
  %417 = select i1 %.not118, i32 1201010959, i32 -1611687168
  br label %.backedge

418:                                              ; preds = %6
  br label %.backedge

419:                                              ; preds = %6
  %420 = load i32, i32* @N, align 4
  %.not117 = icmp sgt i32 %.096, %420
  %421 = select i1 %.not117, i32 -1544090502, i32 -1266241783
  br label %.backedge

422:                                              ; preds = %6
  %423 = add i32 %.098, -1
  %424 = sext i32 %423 to i64
  %425 = sext i32 %.096 to i64
  %426 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %424, i64 %425
  %427 = load i64, i64* %426, align 8
  %428 = sext i32 %.098 to i64
  %429 = add i32 %.096, -1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %428, i64 %430
  %432 = load i64, i64* %431, align 8
  %433 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %424, i64 %430
  %434 = load i64, i64* %433, align 8
  %435 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %428, i64 %425
  %436 = load i64, i64* %435, align 8
  %437 = add i64 %432, %427
  %438 = sub i64 %437, %434
  %439 = add i64 %438, %436
  store i64 %439, i64* %435, align 8
  %.not = icmp sgt i32 %.098, %.096
  %440 = select i1 %.not, i32 1815123700, i32 398410862
  br label %.backedge

441:                                              ; preds = %6
  %442 = load i32, i32* @x.1, align 4
  %443 = load i32, i32* @y.2, align 4
  %444 = add i32 %442, -1
  %445 = mul i32 %444, %442
  %446 = and i32 %445, 1
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %448, %447
  %450 = select i1 %449, i32 -2040903876, i32 332091880
  br label %.backedge

451:                                              ; preds = %6
  %452 = sext i32 %.098 to i64
  %453 = sext i32 %.096 to i64
  %454 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %452, i64 %453
  %455 = load i64, i64* %454, align 8
  %456 = getelementptr inbounds [5005 x i64], [5005 x i64]* @dis, i64 0, i64 %453
  %457 = load i64, i64* %456, align 8
  %458 = getelementptr inbounds [5005 x i64], [5005 x i64]* @dis, i64 0, i64 %452
  %459 = load i64, i64* %458, align 8
  %.neg116 = sub i64 %455, %457
  %460 = add i64 %.neg116, %459
  call void @_Z6ChkMaxRxx(i64* nonnull dereferenceable(8) %3, i64 %460)
  %461 = load i32, i32* @x.1, align 4
  %462 = load i32, i32* @y.2, align 4
  %463 = add i32 %461, -1
  %464 = mul i32 %463, %461
  %465 = and i32 %464, 1
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %467, %466
  %469 = select i1 %468, i32 -434118159, i32 332091880
  br label %.backedge

470:                                              ; preds = %6
  br label %.backedge

471:                                              ; preds = %6
  br label %.backedge

472:                                              ; preds = %6
  %473 = load i32, i32* @x.1, align 4
  %474 = load i32, i32* @y.2, align 4
  %475 = add i32 %473, -1
  %476 = mul i32 %475, %473
  %477 = and i32 %476, 1
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %479, %478
  %481 = select i1 %480, i32 -1153744668, i32 -248149985
  br label %.backedge

482:                                              ; preds = %6
  %483 = add i32 %.096, 1
  %484 = load i32, i32* @x.1, align 4
  %485 = load i32, i32* @y.2, align 4
  %486 = add i32 %484, -1
  %487 = mul i32 %486, %484
  %488 = and i32 %487, 1
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %490, %489
  %492 = select i1 %491, i32 -186614957, i32 -248149985
  br label %.backedge

493:                                              ; preds = %6
  br label %.backedge

494:                                              ; preds = %6
  %495 = load i32, i32* @x.1, align 4
  %496 = load i32, i32* @y.2, align 4
  %497 = add i32 %495, -1
  %498 = mul i32 %497, %495
  %499 = and i32 %498, 1
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %501, %500
  %503 = select i1 %502, i32 -786356106, i32 174725924
  br label %.backedge

504:                                              ; preds = %6
  %505 = load i32, i32* @x.1, align 4
  %506 = load i32, i32* @y.2, align 4
  %507 = add i32 %505, -1
  %508 = mul i32 %507, %505
  %509 = and i32 %508, 1
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %511, %510
  %513 = select i1 %512, i32 494228490, i32 174725924
  br label %.backedge

514:                                              ; preds = %6
  br label %.backedge

515:                                              ; preds = %6
  %516 = load i32, i32* @x.1, align 4
  %517 = load i32, i32* @y.2, align 4
  %518 = add i32 %516, -1
  %519 = mul i32 %518, %516
  %520 = and i32 %519, 1
  %521 = icmp eq i32 %520, 0
  %522 = icmp slt i32 %517, 10
  %523 = or i1 %522, %521
  %524 = select i1 %523, i32 1404705364, i32 -235095300
  br label %.backedge

525:                                              ; preds = %6
  %526 = add i32 %.098, 1
  %527 = load i32, i32* @x.1, align 4
  %528 = load i32, i32* @y.2, align 4
  %529 = add i32 %527, -1
  %530 = mul i32 %529, %527
  %531 = and i32 %530, 1
  %532 = icmp eq i32 %531, 0
  %533 = icmp slt i32 %528, 10
  %534 = or i1 %533, %532
  %535 = select i1 %534, i32 1983151218, i32 -235095300
  br label %.backedge

536:                                              ; preds = %6
  br label %.backedge

537:                                              ; preds = %6
  %538 = load i64, i64* %3, align 8
  %539 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %538)
  %540 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %539, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0

541:                                              ; preds = %6
  %542 = call i32 @_Z2Rdv()
  %543 = sext i32 %542 to i64
  %544 = add i32 %.0114, -1
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds [5005 x i64], [5005 x i64]* @dis, i64 0, i64 %545
  %547 = load i64, i64* %546, align 8
  %548 = add i64 %547, %543
  %549 = sext i32 %.0114 to i64
  %550 = getelementptr inbounds [5005 x i64], [5005 x i64]* @dis, i64 0, i64 %549
  store i64 %548, i64* %550, align 8
  br label %.backedge

551:                                              ; preds = %6
  br label %.backedge

552:                                              ; preds = %6
  br label %.backedge

553:                                              ; preds = %6
  %554 = add i32 %.0112, 1
  br label %.backedge

555:                                              ; preds = %6
  %556 = sext i32 %.0108 to i64
  %557 = getelementptr inbounds [5005 x [205 x i32]], [5005 x [205 x i32]]* @p, i64 0, i64 0, i64 %556
  store i32 2147483647, i32* %557, align 4
  br label %.backedge

558:                                              ; preds = %6
  br label %.backedge

559:                                              ; preds = %6
  br label %.backedge

560:                                              ; preds = %6
  br label %.backedge

561:                                              ; preds = %6
  %562 = add i32 %.0102, -1
  %563 = add i32 %.0106, -1
  %564 = sext i32 %.0106 to i64
  %565 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %564
  %566 = load i32, i32* %565, align 4
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds [5005 x i32], [5005 x i32]* @rp, i64 0, i64 %567
  store i32 %562, i32* %568, align 4
  br label %.backedge

569:                                              ; preds = %6
  %570 = add i32 %.0106, 1
  %571 = sext i32 %570 to i64
  %572 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %571
  store i32 %.0102, i32* %572, align 4
  br label %.backedge

573:                                              ; preds = %6
  br label %.backedge

574:                                              ; preds = %6
  %575 = load i32, i32* @N, align 4
  %576 = add i32 %.0106, -1
  %577 = sext i32 %.0106 to i64
  %578 = getelementptr inbounds [5005 x i32], [5005 x i32]* @stk, i64 0, i64 %577
  %579 = load i32, i32* %578, align 4
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds [5005 x i32], [5005 x i32]* @rp, i64 0, i64 %580
  store i32 %575, i32* %581, align 4
  br label %.backedge

582:                                              ; preds = %6
  %583 = add i32 %.0104, 1
  br label %.backedge

584:                                              ; preds = %6
  %585 = sext i32 %.098 to i64
  %586 = sext i32 %.096 to i64
  %587 = getelementptr inbounds [5005 x [5005 x i64]], [5005 x [5005 x i64]]* @f, i64 0, i64 %585, i64 %586
  %588 = load i64, i64* %587, align 8
  %589 = getelementptr inbounds [5005 x i64], [5005 x i64]* @dis, i64 0, i64 %586
  %590 = load i64, i64* %589, align 8
  %591 = getelementptr inbounds [5005 x i64], [5005 x i64]* @dis, i64 0, i64 %585
  %592 = load i64, i64* %591, align 8
  %593 = sub i64 %588, %590
  %594 = add i64 %593, %592
  call void @_Z6ChkMaxRxx(i64* nonnull dereferenceable(8) %3, i64 %594)
  br label %.backedge

595:                                              ; preds = %6
  %596 = add i32 %.096, 1
  br label %.backedge

597:                                              ; preds = %6
  br label %.backedge

598:                                              ; preds = %6
  %599 = add i32 %.098, 1
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z2Rdv() local_unnamed_addr #0 comdat {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i8*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.3, align 4
  %10 = load i32, i32* @y.4, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %0
  %.026 = phi i32 [ 808649925, %0 ], [ %.026.be, %.backedge ]
  %.024 = phi i1 [ undef, %0 ], [ %.024.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.026, label %.backedge [
    i32 808649925, label %17
    i32 -357803918, label %20
    i32 -271739908, label %34
    i32 621165724, label %35
    i32 -1051807820, label %45
    i32 1863277428, label %57
    i32 -246761318, label %59
    i32 -1419335690, label %69
    i32 -1936768879, label %81
    i32 -1285642526, label %82
    i32 -1474896389, label %84
    i32 -1203470568, label %94
    i32 -1450300975, label %106
    i32 -762673202, label %107
    i32 -1848424003, label %108
    i32 -546734949, label %118
    i32 2031928304, label %130
    i32 -115885333, label %132
    i32 -429618635, label %135
    i32 -1356695268, label %145
    i32 -1079970630, label %155
    i32 -391652450, label %157
    i32 -829406240, label %166
    i32 -1966779303, label %168
    i32 -1688978, label %170
    i32 -1498121063, label %171
    i32 -478718792, label %172
    i32 -1876212715, label %175
    i32 232901526, label %176
  ]

.backedge:                                        ; preds = %16, %176, %175, %172, %171, %170, %168, %157, %155, %145, %135, %132, %130, %118, %108, %107, %106, %94, %84, %82, %81, %69, %59, %57, %45, %35, %34, %20, %17
  %.026.be = phi i32 [ %.026, %16 ], [ -1356695268, %176 ], [ -546734949, %175 ], [ -1203470568, %172 ], [ -1419335690, %171 ], [ -1051807820, %170 ], [ -357803918, %168 ], [ -1848424003, %157 ], [ %156, %155 ], [ %154, %145 ], [ %144, %135 ], [ -429618635, %132 ], [ %131, %130 ], [ %129, %118 ], [ %117, %108 ], [ -1848424003, %107 ], [ 621165724, %106 ], [ %105, %94 ], [ %93, %84 ], [ %83, %82 ], [ -1285642526, %81 ], [ %80, %69 ], [ %68, %59 ], [ %58, %57 ], [ %56, %45 ], [ %44, %35 ], [ 621165724, %34 ], [ %33, %20 ], [ %19, %17 ]
  %.024.be = phi i1 [ %.024, %16 ], [ %.024, %176 ], [ %.024, %175 ], [ %.024, %172 ], [ %.024, %171 ], [ %.024, %170 ], [ %.024, %168 ], [ %.024, %157 ], [ %.024, %155 ], [ %.024, %145 ], [ %.024, %135 ], [ %.024, %132 ], [ %.024, %130 ], [ %.024, %118 ], [ %.024, %108 ], [ %.024, %107 ], [ %.024, %106 ], [ %.024, %94 ], [ %.024, %84 ], [ %.024, %82 ], [ %.0..0..0.21, %81 ], [ %.024, %69 ], [ %.024, %59 ], [ true, %57 ], [ %.024, %45 ], [ %.024, %35 ], [ %.024, %34 ], [ %.024, %20 ], [ %.024, %17 ]
  %.0.be = phi i1 [ %.0, %16 ], [ %.0, %176 ], [ %.0, %175 ], [ %.0, %172 ], [ %.0, %171 ], [ %.0, %170 ], [ %.0, %168 ], [ %.0, %157 ], [ %.0, %155 ], [ %.0, %145 ], [ %.0, %135 ], [ %134, %132 ], [ false, %130 ], [ %.0, %118 ], [ %.0, %108 ], [ %.0, %107 ], [ %.0, %106 ], [ %.0, %94 ], [ %.0, %84 ], [ %.0, %82 ], [ %.0, %81 ], [ %.0, %69 ], [ %.0, %59 ], [ %.0, %57 ], [ %.0, %45 ], [ %.0, %35 ], [ %.0, %34 ], [ %.0, %20 ], [ %.0, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0.2 = load volatile i1, i1* %8, align 1
  %.0..0..0.3 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0.2, %.0..0..0.3
  %19 = select i1 %18, i32 -357803918, i32 -1966779303
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i32, align 4
  store i32* %21, i32** %6, align 8
  %22 = alloca i8, align 1
  store i8* %22, i8** %5, align 8
  %.0..0..0.4 = load volatile i32*, i32** %6, align 8
  store i32 0, i32* %.0..0..0.4, align 4
  %23 = call i32 @getchar()
  %24 = trunc i32 %23 to i8
  %.0..0..0.8 = load volatile i8*, i8** %5, align 8
  store i8 %24, i8* %.0..0..0.8, align 1
  %25 = load i32, i32* @x.3, align 4
  %26 = load i32, i32* @y.4, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 -271739908, i32 -1966779303
  br label %.backedge

34:                                               ; preds = %16
  br label %.backedge

35:                                               ; preds = %16
  %36 = load i32, i32* @x.3, align 4
  %37 = load i32, i32* @y.4, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 -1051807820, i32 -1688978
  br label %.backedge

45:                                               ; preds = %16
  %.0..0..0.9 = load volatile i8*, i8** %5, align 8
  %46 = load i8, i8* %.0..0..0.9, align 1
  %47 = icmp slt i8 %46, 48
  store i1 %47, i1* %4, align 1
  %48 = load i32, i32* @x.3, align 4
  %49 = load i32, i32* @y.4, align 4
  %50 = add i32 %48, -1
  %51 = mul i32 %50, %48
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %54, %53
  %56 = select i1 %55, i32 1863277428, i32 -1688978
  br label %.backedge

57:                                               ; preds = %16
  %.0..0..0.20 = load volatile i1, i1* %4, align 1
  %58 = select i1 %.0..0..0.20, i32 -1285642526, i32 -246761318
  br label %.backedge

59:                                               ; preds = %16
  %60 = load i32, i32* @x.3, align 4
  %61 = load i32, i32* @y.4, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -1419335690, i32 -1498121063
  br label %.backedge

69:                                               ; preds = %16
  %.0..0..0.10 = load volatile i8*, i8** %5, align 8
  %70 = load i8, i8* %.0..0..0.10, align 1
  %71 = icmp sgt i8 %70, 57
  store i1 %71, i1* %3, align 1
  %72 = load i32, i32* @x.3, align 4
  %73 = load i32, i32* @y.4, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 -1936768879, i32 -1498121063
  br label %.backedge

81:                                               ; preds = %16
  %.0..0..0.21 = load volatile i1, i1* %3, align 1
  br label %.backedge

82:                                               ; preds = %16
  %83 = select i1 %.024, i32 -1474896389, i32 -762673202
  br label %.backedge

84:                                               ; preds = %16
  %85 = load i32, i32* @x.3, align 4
  %86 = load i32, i32* @y.4, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 -1203470568, i32 -478718792
  br label %.backedge

94:                                               ; preds = %16
  %95 = call i32 @getchar()
  %96 = trunc i32 %95 to i8
  %.0..0..0.11 = load volatile i8*, i8** %5, align 8
  store i8 %96, i8* %.0..0..0.11, align 1
  %97 = load i32, i32* @x.3, align 4
  %98 = load i32, i32* @y.4, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 -1450300975, i32 -478718792
  br label %.backedge

106:                                              ; preds = %16
  br label %.backedge

107:                                              ; preds = %16
  br label %.backedge

108:                                              ; preds = %16
  %109 = load i32, i32* @x.3, align 4
  %110 = load i32, i32* @y.4, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 -546734949, i32 -1876212715
  br label %.backedge

118:                                              ; preds = %16
  %.0..0..0.12 = load volatile i8*, i8** %5, align 8
  %119 = load i8, i8* %.0..0..0.12, align 1
  %120 = icmp sgt i8 %119, 47
  store i1 %120, i1* %2, align 1
  %121 = load i32, i32* @x.3, align 4
  %122 = load i32, i32* @y.4, align 4
  %123 = add i32 %121, -1
  %124 = mul i32 %123, %121
  %125 = and i32 %124, 1
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %127, %126
  %129 = select i1 %128, i32 2031928304, i32 -1876212715
  br label %.backedge

130:                                              ; preds = %16
  %.0..0..0.22 = load volatile i1, i1* %2, align 1
  %131 = select i1 %.0..0..0.22, i32 -115885333, i32 -429618635
  br label %.backedge

132:                                              ; preds = %16
  %.0..0..0.13 = load volatile i8*, i8** %5, align 8
  %133 = load i8, i8* %.0..0..0.13, align 1
  %134 = icmp slt i8 %133, 58
  br label %.backedge

135:                                              ; preds = %16
  store i1 %.0, i1* %1, align 1
  %136 = load i32, i32* @x.3, align 4
  %137 = load i32, i32* @y.4, align 4
  %138 = add i32 %136, -1
  %139 = mul i32 %138, %136
  %140 = and i32 %139, 1
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %142, %141
  %144 = select i1 %143, i32 -1356695268, i32 232901526
  br label %.backedge

145:                                              ; preds = %16
  %146 = load i32, i32* @x.3, align 4
  %147 = load i32, i32* @y.4, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 -1079970630, i32 232901526
  br label %.backedge

155:                                              ; preds = %16
  %.0..0..0.23 = load volatile i1, i1* %1, align 1
  %156 = select i1 %.0..0..0.23, i32 -391652450, i32 -829406240
  br label %.backedge

157:                                              ; preds = %16
  %.0..0..0.5 = load volatile i32*, i32** %6, align 8
  %158 = load i32, i32* %.0..0..0.5, align 4
  %159 = mul nsw i32 %158, 10
  %.0..0..0.14 = load volatile i8*, i8** %5, align 8
  %160 = load i8, i8* %.0..0..0.14, align 1
  %161 = sext i8 %160 to i32
  %162 = add i32 %159, -48
  %163 = add i32 %162, %161
  %.0..0..0.6 = load volatile i32*, i32** %6, align 8
  store i32 %163, i32* %.0..0..0.6, align 4
  %164 = call i32 @getchar()
  %165 = trunc i32 %164 to i8
  %.0..0..0.15 = load volatile i8*, i8** %5, align 8
  store i8 %165, i8* %.0..0..0.15, align 1
  br label %.backedge

166:                                              ; preds = %16
  %.0..0..0.7 = load volatile i32*, i32** %6, align 8
  %167 = load i32, i32* %.0..0..0.7, align 4
  ret i32 %167

168:                                              ; preds = %16
  %169 = call i32 @getchar()
  br label %.backedge

170:                                              ; preds = %16
  %.0..0..0.16 = load volatile i8*, i8** %5, align 8
  br label %.backedge

171:                                              ; preds = %16
  %.0..0..0.17 = load volatile i8*, i8** %5, align 8
  br label %.backedge

172:                                              ; preds = %16
  %173 = call i32 @getchar()
  %174 = trunc i32 %173 to i8
  %.0..0..0.18 = load volatile i8*, i8** %5, align 8
  store i8 %174, i8* %.0..0..0.18, align 1
  br label %.backedge

175:                                              ; preds = %16
  %.0..0..0.19 = load volatile i8*, i8** %5, align 8
  br label %.backedge

176:                                              ; preds = %16
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z6ChkMaxRxx(i64* dereferenceable(8) %0, i64 %1) local_unnamed_addr #5 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %0, align 8
  store i64 %5, i64* %4, align 8
  store i64 %1, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ 76661036, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %6

6:                                                ; preds = %.outer, %6
  switch i32 %.0.ph, label %6 [
    i32 76661036, label %7
    i32 1138823355, label %10
    i32 115792431, label %20
    i32 -1382307004, label %.outer.backedge
    i32 -1330261814, label %30
    i32 -533004412, label %31
  ]

7:                                                ; preds = %6
  %.0..0..0.6 = load volatile i64, i64* %4, align 8
  %.0..0..0.7 = load volatile i64, i64* %3, align 8
  %8 = icmp slt i64 %.0..0..0.6, %.0..0..0.7
  %9 = select i1 %8, i32 1138823355, i32 -1330261814
  br label %.outer.backedge

10:                                               ; preds = %6
  %11 = load i32, i32* @x.5, align 4
  %12 = load i32, i32* @y.6, align 4
  %13 = add i32 %11, -1
  %14 = mul i32 %13, %11
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %17, %16
  %19 = select i1 %18, i32 115792431, i32 -533004412
  br label %.outer.backedge

20:                                               ; preds = %6
  store i64 %1, i64* %0, align 8
  %21 = load i32, i32* @x.5, align 4
  %22 = load i32, i32* @y.6, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 -1382307004, i32 -533004412
  br label %.outer.backedge

30:                                               ; preds = %6
  ret void

31:                                               ; preds = %6
  store i64 %1, i64* %0, align 8
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %6, %31, %20, %10, %7
  %.0.ph.be = phi i32 [ %9, %7 ], [ %19, %10 ], [ %29, %20 ], [ 115792431, %31 ], [ -1330261814, %6 ]
  br label %.outer
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s725883248.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.7, align 4
  %4 = load i32, i32* @y.8, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1674801257, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1674801257, label %11
    i32 1982732468, label %14
    i32 -527148104, label %24
    i32 -917304199, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1982732468, i32 -917304199
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.7, align 4
  %16 = load i32, i32* @y.8, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -527148104, i32 -917304199
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 1982732468, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
