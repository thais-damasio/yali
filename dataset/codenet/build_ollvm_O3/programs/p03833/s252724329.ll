; ModuleID = 'build_ollvm/programs/p03833/s252724329.ll'
source_filename = "Project_CodeNet_C++1400/p03833/s252724329.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3maxIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@val = global [5011 x [211 x i64]] zeroinitializer, align 16
@Sum = local_unnamed_addr global [5011 x [5011 x i64]] zeroinitializer, align 16
@Stack = local_unnamed_addr global [5011 x i64] zeroinitializer, align 16
@L = local_unnamed_addr global [5011 x i64] zeroinitializer, align 16
@R = local_unnamed_addr global [5011 x i64] zeroinitializer, align 16
@top = local_unnamed_addr global i64 0, align 8
@dis = global [5011 x i64] zeroinitializer, align 16
@n = global i64 0, align 8
@m = global i64 0, align 8
@ans = global i64 0, align 8
@.str = private unnamed_addr constant [9 x i8] c"%lld%lld\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s252724329.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nosync nounwind uwtable
define void @_Z5solvex(i64 %0) local_unnamed_addr #4 {
  %2 = load i64, i64* @n, align 8
  %3 = load i32, i32* @x.2, align 4
  %4 = load i32, i32* @y.3, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %9, %8
  %11 = select i1 %10, i32 -727299861, i32 -922852061
  %12 = select i1 %10, i32 -813754901, i32 -922852061
  br label %13

13:                                               ; preds = %.backedge, %1
  %.032 = phi i64 [ 1, %1 ], [ %.032.be, %.backedge ]
  %.030 = phi i64 [ undef, %1 ], [ %.030.be, %.backedge ]
  %.028 = phi i32 [ -625050450, %1 ], [ %.028.be, %.backedge ]
  %.0 = phi i1 [ undef, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.028, label %.backedge [
    i32 -625050450, label %14
    i32 1565858061, label %16
    i32 -757834521, label %17
    i32 1888644216, label %20
    i32 1698697105, label %29
    i32 1125016647, label %31
    i32 -813754901, label %32
    i32 -727299861, label %39
    i32 1610579603, label %40
    i32 712214124, label %48
    i32 1203032893, label %50
    i32 -1436149695, label %51
    i32 848549035, label %54
    i32 -919752711, label %60
    i32 1299039125, label %61
    i32 -1045791870, label %63
    i32 1896663674, label %83
    i32 2000424378, label %84
    i32 -922852061, label %85
  ]

.backedge:                                        ; preds = %13, %85, %83, %63, %61, %60, %54, %51, %50, %48, %40, %39, %32, %31, %29, %20, %17, %16, %14
  %.032.be = phi i64 [ %.032, %13 ], [ %.032, %85 ], [ %.032, %83 ], [ %.032, %63 ], [ %.032, %61 ], [ %.032, %60 ], [ %.032, %54 ], [ %.032, %51 ], [ %.032, %50 ], [ %49, %48 ], [ %.032, %40 ], [ %.032, %39 ], [ %.032, %32 ], [ %.032, %31 ], [ %.032, %29 ], [ %.032, %20 ], [ %.032, %17 ], [ %.032, %16 ], [ %.032, %14 ]
  %.030.be = phi i64 [ %.030, %13 ], [ %.030, %85 ], [ %.neg, %83 ], [ %.030, %63 ], [ %.030, %61 ], [ 1, %60 ], [ %.030, %54 ], [ %.030, %51 ], [ %.030, %50 ], [ %.030, %48 ], [ %.030, %40 ], [ %.030, %39 ], [ %.030, %32 ], [ %.030, %31 ], [ %.030, %29 ], [ %.030, %20 ], [ %.030, %17 ], [ %.030, %16 ], [ %.030, %14 ]
  %.028.be = phi i32 [ %.028, %13 ], [ -813754901, %85 ], [ 1299039125, %83 ], [ 1896663674, %63 ], [ %62, %61 ], [ 1299039125, %60 ], [ -1436149695, %54 ], [ %53, %51 ], [ -1436149695, %50 ], [ -625050450, %48 ], [ 712214124, %40 ], [ -757834521, %39 ], [ %11, %32 ], [ %12, %31 ], [ %30, %29 ], [ 1698697105, %20 ], [ %19, %17 ], [ -757834521, %16 ], [ %15, %14 ]
  %.0.be = phi i1 [ %.0, %13 ], [ %.0, %85 ], [ %.0, %83 ], [ %.0, %63 ], [ %.0, %61 ], [ %.0, %60 ], [ %.0, %54 ], [ %.0, %51 ], [ %.0, %50 ], [ %.0, %48 ], [ %.0, %40 ], [ %.0, %39 ], [ %.0, %32 ], [ %.0, %31 ], [ %.0, %29 ], [ %28, %20 ], [ false, %17 ], [ %.0, %16 ], [ %.0, %14 ]
  br label %13

14:                                               ; preds = %13
  %.not37 = icmp sgt i64 %.032, %2
  %15 = select i1 %.not37, i32 1203032893, i32 1565858061
  br label %.backedge

16:                                               ; preds = %13
  br label %.backedge

17:                                               ; preds = %13
  %18 = load i64, i64* @top, align 8
  %.not36 = icmp eq i64 %18, 0
  %19 = select i1 %.not36, i32 1698697105, i32 1888644216
  br label %.backedge

20:                                               ; preds = %13
  %21 = load i64, i64* @top, align 8
  %22 = getelementptr inbounds [5011 x i64], [5011 x i64]* @Stack, i64 0, i64 %21
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds [5011 x [211 x i64]], [5011 x [211 x i64]]* @val, i64 0, i64 %23, i64 %0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds [5011 x [211 x i64]], [5011 x [211 x i64]]* @val, i64 0, i64 %.032, i64 %0
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %25, %27
  br label %.backedge

29:                                               ; preds = %13
  %30 = select i1 %.0, i32 1125016647, i32 1610579603
  br label %.backedge

31:                                               ; preds = %13
  br label %.backedge

32:                                               ; preds = %13
  %33 = add i64 %.032, -1
  %34 = load i64, i64* @top, align 8
  %35 = getelementptr inbounds [5011 x i64], [5011 x i64]* @Stack, i64 0, i64 %34
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds [5011 x i64], [5011 x i64]* @R, i64 0, i64 %36
  store i64 %33, i64* %37, align 8
  %38 = add i64 %34, -1
  store i64 %38, i64* @top, align 8
  br label %.backedge

39:                                               ; preds = %13
  br label %.backedge

40:                                               ; preds = %13
  %41 = load i64, i64* @top, align 8
  %42 = getelementptr inbounds [5011 x i64], [5011 x i64]* @Stack, i64 0, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %43, 1
  %45 = getelementptr inbounds [5011 x i64], [5011 x i64]* @L, i64 0, i64 %.032
  store i64 %44, i64* %45, align 8
  %46 = add i64 %41, 1
  store i64 %46, i64* @top, align 8
  %47 = getelementptr inbounds [5011 x i64], [5011 x i64]* @Stack, i64 0, i64 %46
  store i64 %.032, i64* %47, align 8
  br label %.backedge

48:                                               ; preds = %13
  %49 = add i64 %.032, 1
  br label %.backedge

50:                                               ; preds = %13
  br label %.backedge

51:                                               ; preds = %13
  %52 = load i64, i64* @top, align 8
  %.not35 = icmp eq i64 %52, 0
  %53 = select i1 %.not35, i32 -919752711, i32 848549035
  br label %.backedge

54:                                               ; preds = %13
  %55 = load i64, i64* @top, align 8
  %56 = getelementptr inbounds [5011 x i64], [5011 x i64]* @Stack, i64 0, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds [5011 x i64], [5011 x i64]* @R, i64 0, i64 %57
  store i64 %2, i64* %58, align 8
  %59 = add i64 %55, -1
  store i64 %59, i64* @top, align 8
  br label %.backedge

60:                                               ; preds = %13
  br label %.backedge

61:                                               ; preds = %13
  %.not = icmp sgt i64 %.030, %2
  %62 = select i1 %.not, i32 2000424378, i32 -1045791870
  br label %.backedge

63:                                               ; preds = %13
  %64 = getelementptr inbounds [5011 x [211 x i64]], [5011 x [211 x i64]]* @val, i64 0, i64 %.030, i64 %0
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds [5011 x i64], [5011 x i64]* @L, i64 0, i64 %.030
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %67, i64 %.030
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, %65
  store i64 %70, i64* %68, align 8
  %71 = getelementptr inbounds [5011 x i64], [5011 x i64]* @R, i64 0, i64 %.030
  %72 = load i64, i64* %71, align 8
  %.neg34 = add i64 %72, 1
  %73 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %67, i64 %.neg34
  %74 = load i64, i64* %73, align 8
  %75 = sub i64 %74, %65
  store i64 %75, i64* %73, align 8
  %76 = add i64 %.030, 1
  %77 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %76, i64 %.030
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %78, %65
  store i64 %79, i64* %77, align 8
  %80 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %76, i64 %.neg34
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, %65
  store i64 %82, i64* %80, align 8
  br label %.backedge

83:                                               ; preds = %13
  %.neg = add i64 %.030, 1
  br label %.backedge

84:                                               ; preds = %13
  ret void

85:                                               ; preds = %13
  %86 = add i64 %.032, -1
  %87 = load i64, i64* @top, align 8
  %88 = getelementptr inbounds [5011 x i64], [5011 x i64]* @Stack, i64 0, i64 %87
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds [5011 x i64], [5011 x i64]* @R, i64 0, i64 %89
  store i64 %86, i64* %90, align 8
  %91 = add i64 %87, -1
  store i64 %91, i64* @top, align 8
  br label %.backedge
}

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i64, align 8
  %4 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i64* nonnull @n, i64* nonnull @m)
  br label %5

5:                                                ; preds = %.backedge, %0
  %.065 = phi i64 [ 2, %0 ], [ %.065.be, %.backedge ]
  %.063 = phi i64 [ undef, %0 ], [ %.063.be, %.backedge ]
  %.061 = phi i64 [ undef, %0 ], [ %.061.be, %.backedge ]
  %.059 = phi i64 [ undef, %0 ], [ %.059.be, %.backedge ]
  %.057 = phi i64 [ undef, %0 ], [ %.057.be, %.backedge ]
  %.055 = phi i64 [ undef, %0 ], [ %.055.be, %.backedge ]
  %.053 = phi i64 [ undef, %0 ], [ %.053.be, %.backedge ]
  %.051 = phi i64 [ undef, %0 ], [ %.051.be, %.backedge ]
  %.049 = phi i64 [ undef, %0 ], [ %.049.be, %.backedge ]
  %.0 = phi i32 [ 1067842389, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1067842389, label %6
    i32 1065703892, label %16
    i32 -873624292, label %28
    i32 1711579895, label %30
    i32 -774451389, label %33
    i32 -473232279, label %43
    i32 1090996697, label %53
    i32 -1006449494, label %54
    i32 757103170, label %55
    i32 336235553, label %58
    i32 -487791747, label %68
    i32 1832163630, label %84
    i32 -1365114527, label %85
    i32 -928938294, label %95
    i32 1321339501, label %105
    i32 1156814519, label %106
    i32 652251932, label %107
    i32 -1882969031, label %110
    i32 -1695961184, label %120
    i32 -1140213782, label %130
    i32 -417674030, label %131
    i32 465965001, label %134
    i32 1319714283, label %137
    i32 1103020408, label %138
    i32 1737403440, label %148
    i32 1276144589, label %158
    i32 -985304403, label %159
    i32 1910809134, label %161
    i32 -1703295695, label %162
    i32 2032068813, label %165
    i32 -624663193, label %166
    i32 1471138180, label %167
    i32 -114436225, label %168
    i32 1879402072, label %178
    i32 932387503, label %190
    i32 -534283426, label %192
    i32 875193442, label %193
    i32 2117337757, label %196
    i32 -1754914007, label %210
    i32 1606194133, label %220
    i32 228586013, label %231
    i32 -2043970575, label %232
    i32 1496631334, label %233
    i32 -1007069946, label %243
    i32 -2088276923, label %253
    i32 1548384900, label %254
    i32 -524066735, label %264
    i32 861778778, label %274
    i32 971889512, label %275
    i32 -551762323, label %278
    i32 2112597579, label %279
    i32 -88440753, label %282
    i32 1463075647, label %293
    i32 -572290895, label %295
    i32 -1625310752, label %305
    i32 -442637318, label %315
    i32 1282945633, label %316
    i32 1581833870, label %318
    i32 527524734, label %328
    i32 963994286, label %340
    i32 1594483608, label %341
    i32 -992215861, label %342
    i32 -345737487, label %344
    i32 -809910053, label %351
    i32 381051065, label %353
    i32 -2015456987, label %354
    i32 519056117, label %355
    i32 -1263280434, label %356
    i32 1755883111, label %357
    i32 -929762688, label %359
    i32 1783916217, label %360
    i32 1848769676, label %361
  ]

.backedge:                                        ; preds = %5, %361, %360, %359, %357, %356, %355, %354, %353, %351, %344, %342, %341, %328, %318, %316, %315, %305, %295, %293, %282, %279, %278, %275, %274, %264, %254, %253, %243, %233, %232, %231, %220, %210, %196, %193, %192, %190, %178, %168, %167, %166, %165, %162, %161, %159, %158, %148, %138, %137, %134, %131, %130, %120, %110, %107, %106, %105, %95, %85, %84, %68, %58, %55, %54, %53, %43, %33, %30, %28, %16, %6
  %.065.be = phi i64 [ %.065, %5 ], [ %.065, %361 ], [ %.065, %360 ], [ %.065, %359 ], [ %.065, %357 ], [ %.065, %356 ], [ %.065, %355 ], [ %.065, %354 ], [ %.065, %353 ], [ %.065, %351 ], [ %.065, %344 ], [ %343, %342 ], [ %.065, %341 ], [ %.065, %328 ], [ %.065, %318 ], [ %.065, %316 ], [ %.065, %315 ], [ %.065, %305 ], [ %.065, %295 ], [ %.065, %293 ], [ %.065, %282 ], [ %.065, %279 ], [ %.065, %278 ], [ %.065, %275 ], [ %.065, %274 ], [ %.065, %264 ], [ %.065, %254 ], [ %.065, %253 ], [ %.065, %243 ], [ %.065, %233 ], [ %.065, %232 ], [ %.065, %231 ], [ %.065, %220 ], [ %.065, %210 ], [ %.065, %196 ], [ %.065, %193 ], [ %.065, %192 ], [ %.065, %190 ], [ %.065, %178 ], [ %.065, %168 ], [ %.065, %167 ], [ %.065, %166 ], [ %.065, %165 ], [ %.065, %162 ], [ %.065, %161 ], [ %.065, %159 ], [ %.065, %158 ], [ %.065, %148 ], [ %.065, %138 ], [ %.065, %137 ], [ %.065, %134 ], [ %.065, %131 ], [ %.065, %130 ], [ %.065, %120 ], [ %.065, %110 ], [ %.065, %107 ], [ %.065, %106 ], [ %.065, %105 ], [ %.065, %95 ], [ %.065, %85 ], [ %.065, %84 ], [ %.065, %68 ], [ %.065, %58 ], [ %.065, %55 ], [ %.065, %54 ], [ %.065, %53 ], [ %.neg79, %43 ], [ %.065, %33 ], [ %.065, %30 ], [ %.065, %28 ], [ %.065, %16 ], [ %.065, %6 ]
  %.063.be = phi i64 [ %.063, %5 ], [ %.063, %361 ], [ %.063, %360 ], [ %.063, %359 ], [ %.063, %357 ], [ %.063, %356 ], [ %.063, %355 ], [ %.063, %354 ], [ %.063, %353 ], [ %352, %351 ], [ %.063, %344 ], [ %.063, %342 ], [ %.063, %341 ], [ %.063, %328 ], [ %.063, %318 ], [ %.063, %316 ], [ %.063, %315 ], [ %.063, %305 ], [ %.063, %295 ], [ %.063, %293 ], [ %.063, %282 ], [ %.063, %279 ], [ %.063, %278 ], [ %.063, %275 ], [ %.063, %274 ], [ %.063, %264 ], [ %.063, %254 ], [ %.063, %253 ], [ %.063, %243 ], [ %.063, %233 ], [ %.063, %232 ], [ %.063, %231 ], [ %.063, %220 ], [ %.063, %210 ], [ %.063, %196 ], [ %.063, %193 ], [ %.063, %192 ], [ %.063, %190 ], [ %.063, %178 ], [ %.063, %168 ], [ %.063, %167 ], [ %.063, %166 ], [ %.063, %165 ], [ %.063, %162 ], [ %.063, %161 ], [ %.063, %159 ], [ %.063, %158 ], [ %.063, %148 ], [ %.063, %138 ], [ %.063, %137 ], [ %.063, %134 ], [ %.063, %131 ], [ %.063, %130 ], [ %.063, %120 ], [ %.063, %110 ], [ %.063, %107 ], [ %.063, %106 ], [ %.063, %105 ], [ %.neg77, %95 ], [ %.063, %85 ], [ %.063, %84 ], [ %.063, %68 ], [ %.063, %58 ], [ %.063, %55 ], [ 2, %54 ], [ %.063, %53 ], [ %.063, %43 ], [ %.063, %33 ], [ %.063, %30 ], [ %.063, %28 ], [ %.063, %16 ], [ %.063, %6 ]
  %.061.be = phi i64 [ %.061, %5 ], [ %.061, %361 ], [ %.061, %360 ], [ %.061, %359 ], [ %.061, %357 ], [ %.061, %356 ], [ %.061, %355 ], [ %.061, %354 ], [ %.061, %353 ], [ %.061, %351 ], [ %.061, %344 ], [ %.061, %342 ], [ %.061, %341 ], [ %.061, %328 ], [ %.061, %318 ], [ %.061, %316 ], [ %.061, %315 ], [ %.061, %305 ], [ %.061, %295 ], [ %.061, %293 ], [ %.061, %282 ], [ %.061, %279 ], [ %.061, %278 ], [ %.061, %275 ], [ %.061, %274 ], [ %.061, %264 ], [ %.061, %254 ], [ %.061, %253 ], [ %.061, %243 ], [ %.061, %233 ], [ %.061, %232 ], [ %.061, %231 ], [ %.061, %220 ], [ %.061, %210 ], [ %.061, %196 ], [ %.061, %193 ], [ %.061, %192 ], [ %.061, %190 ], [ %.061, %178 ], [ %.061, %168 ], [ %.061, %167 ], [ %.061, %166 ], [ %.061, %165 ], [ %.061, %162 ], [ %.061, %161 ], [ %160, %159 ], [ %.061, %158 ], [ %.061, %148 ], [ %.061, %138 ], [ %.061, %137 ], [ %.061, %134 ], [ %.061, %131 ], [ %.061, %130 ], [ %.061, %120 ], [ %.061, %110 ], [ %.061, %107 ], [ 1, %106 ], [ %.061, %105 ], [ %.061, %95 ], [ %.061, %85 ], [ %.061, %84 ], [ %.061, %68 ], [ %.061, %58 ], [ %.061, %55 ], [ %.061, %54 ], [ %.061, %53 ], [ %.061, %43 ], [ %.061, %33 ], [ %.061, %30 ], [ %.061, %28 ], [ %.061, %16 ], [ %.061, %6 ]
  %.059.be = phi i64 [ %.059, %5 ], [ %.059, %361 ], [ %.059, %360 ], [ %.059, %359 ], [ %.059, %357 ], [ %.059, %356 ], [ %.059, %355 ], [ %.059, %354 ], [ 1, %353 ], [ %.059, %351 ], [ %.059, %344 ], [ %.059, %342 ], [ %.059, %341 ], [ %.059, %328 ], [ %.059, %318 ], [ %.059, %316 ], [ %.059, %315 ], [ %.059, %305 ], [ %.059, %295 ], [ %.059, %293 ], [ %.059, %282 ], [ %.059, %279 ], [ %.059, %278 ], [ %.059, %275 ], [ %.059, %274 ], [ %.059, %264 ], [ %.059, %254 ], [ %.059, %253 ], [ %.059, %243 ], [ %.059, %233 ], [ %.059, %232 ], [ %.059, %231 ], [ %.059, %220 ], [ %.059, %210 ], [ %.059, %196 ], [ %.059, %193 ], [ %.059, %192 ], [ %.059, %190 ], [ %.059, %178 ], [ %.059, %168 ], [ %.059, %167 ], [ %.059, %166 ], [ %.059, %165 ], [ %.059, %162 ], [ %.059, %161 ], [ %.059, %159 ], [ %.059, %158 ], [ %.059, %148 ], [ %.059, %138 ], [ %.neg74, %137 ], [ %.059, %134 ], [ %.059, %131 ], [ %.059, %130 ], [ 1, %120 ], [ %.059, %110 ], [ %.059, %107 ], [ %.059, %106 ], [ %.059, %105 ], [ %.059, %95 ], [ %.059, %85 ], [ %.059, %84 ], [ %.059, %68 ], [ %.059, %58 ], [ %.059, %55 ], [ %.059, %54 ], [ %.059, %53 ], [ %.059, %43 ], [ %.059, %33 ], [ %.059, %30 ], [ %.059, %28 ], [ %.059, %16 ], [ %.059, %6 ]
  %.057.be = phi i64 [ %.057, %5 ], [ %.057, %361 ], [ %.057, %360 ], [ %.057, %359 ], [ %.057, %357 ], [ %.057, %356 ], [ %.057, %355 ], [ %.057, %354 ], [ %.057, %353 ], [ %.057, %351 ], [ %.057, %344 ], [ %.057, %342 ], [ %.057, %341 ], [ %.057, %328 ], [ %.057, %318 ], [ %.057, %316 ], [ %.057, %315 ], [ %.057, %305 ], [ %.057, %295 ], [ %.057, %293 ], [ %.057, %282 ], [ %.057, %279 ], [ %.057, %278 ], [ %.057, %275 ], [ %.057, %274 ], [ %.057, %264 ], [ %.057, %254 ], [ %.057, %253 ], [ %.057, %243 ], [ %.057, %233 ], [ %.057, %232 ], [ %.057, %231 ], [ %.057, %220 ], [ %.057, %210 ], [ %.057, %196 ], [ %.057, %193 ], [ %.057, %192 ], [ %.057, %190 ], [ %.057, %178 ], [ %.057, %168 ], [ %.057, %167 ], [ %.neg72, %166 ], [ %.057, %165 ], [ %.057, %162 ], [ 1, %161 ], [ %.057, %159 ], [ %.057, %158 ], [ %.057, %148 ], [ %.057, %138 ], [ %.057, %137 ], [ %.057, %134 ], [ %.057, %131 ], [ %.057, %130 ], [ %.057, %120 ], [ %.057, %110 ], [ %.057, %107 ], [ %.057, %106 ], [ %.057, %105 ], [ %.057, %95 ], [ %.057, %85 ], [ %.057, %84 ], [ %.057, %68 ], [ %.057, %58 ], [ %.057, %55 ], [ %.057, %54 ], [ %.057, %53 ], [ %.057, %43 ], [ %.057, %33 ], [ %.057, %30 ], [ %.057, %28 ], [ %.057, %16 ], [ %.057, %6 ]
  %.055.be = phi i64 [ %.055, %5 ], [ %.055, %361 ], [ %.055, %360 ], [ %.055, %359 ], [ %358, %357 ], [ %.055, %356 ], [ %.055, %355 ], [ %.055, %354 ], [ %.055, %353 ], [ %.055, %351 ], [ %.055, %344 ], [ %.055, %342 ], [ %.055, %341 ], [ %.055, %328 ], [ %.055, %318 ], [ %.055, %316 ], [ %.055, %315 ], [ %.055, %305 ], [ %.055, %295 ], [ %.055, %293 ], [ %.055, %282 ], [ %.055, %279 ], [ %.055, %278 ], [ %.055, %275 ], [ %.055, %274 ], [ %.055, %264 ], [ %.055, %254 ], [ %.055, %253 ], [ %.neg70, %243 ], [ %.055, %233 ], [ %.055, %232 ], [ %.055, %231 ], [ %.055, %220 ], [ %.055, %210 ], [ %.055, %196 ], [ %.055, %193 ], [ %.055, %192 ], [ %.055, %190 ], [ %.055, %178 ], [ %.055, %168 ], [ 1, %167 ], [ %.055, %166 ], [ %.055, %165 ], [ %.055, %162 ], [ %.055, %161 ], [ %.055, %159 ], [ %.055, %158 ], [ %.055, %148 ], [ %.055, %138 ], [ %.055, %137 ], [ %.055, %134 ], [ %.055, %131 ], [ %.055, %130 ], [ %.055, %120 ], [ %.055, %110 ], [ %.055, %107 ], [ %.055, %106 ], [ %.055, %105 ], [ %.055, %95 ], [ %.055, %85 ], [ %.055, %84 ], [ %.055, %68 ], [ %.055, %58 ], [ %.055, %55 ], [ %.055, %54 ], [ %.055, %53 ], [ %.055, %43 ], [ %.055, %33 ], [ %.055, %30 ], [ %.055, %28 ], [ %.055, %16 ], [ %.055, %6 ]
  %.053.be = phi i64 [ %.053, %5 ], [ %.053, %361 ], [ %.053, %360 ], [ %.053, %359 ], [ %.053, %357 ], [ %.neg, %356 ], [ %.053, %355 ], [ %.053, %354 ], [ %.053, %353 ], [ %.053, %351 ], [ %.053, %344 ], [ %.053, %342 ], [ %.053, %341 ], [ %.053, %328 ], [ %.053, %318 ], [ %.053, %316 ], [ %.053, %315 ], [ %.053, %305 ], [ %.053, %295 ], [ %.053, %293 ], [ %.053, %282 ], [ %.053, %279 ], [ %.053, %278 ], [ %.053, %275 ], [ %.053, %274 ], [ %.053, %264 ], [ %.053, %254 ], [ %.053, %253 ], [ %.053, %243 ], [ %.053, %233 ], [ %.053, %232 ], [ %.053, %231 ], [ %221, %220 ], [ %.053, %210 ], [ %.053, %196 ], [ %.053, %193 ], [ 1, %192 ], [ %.053, %190 ], [ %.053, %178 ], [ %.053, %168 ], [ %.053, %167 ], [ %.053, %166 ], [ %.053, %165 ], [ %.053, %162 ], [ %.053, %161 ], [ %.053, %159 ], [ %.053, %158 ], [ %.053, %148 ], [ %.053, %138 ], [ %.053, %137 ], [ %.053, %134 ], [ %.053, %131 ], [ %.053, %130 ], [ %.053, %120 ], [ %.053, %110 ], [ %.053, %107 ], [ %.053, %106 ], [ %.053, %105 ], [ %.053, %95 ], [ %.053, %85 ], [ %.053, %84 ], [ %.053, %68 ], [ %.053, %58 ], [ %.053, %55 ], [ %.053, %54 ], [ %.053, %53 ], [ %.053, %43 ], [ %.053, %33 ], [ %.053, %30 ], [ %.053, %28 ], [ %.053, %16 ], [ %.053, %6 ]
  %.051.be = phi i64 [ %.051, %5 ], [ %.051, %361 ], [ %.051, %360 ], [ 1, %359 ], [ %.051, %357 ], [ %.051, %356 ], [ %.051, %355 ], [ %.051, %354 ], [ %.051, %353 ], [ %.051, %351 ], [ %.051, %344 ], [ %.051, %342 ], [ %.051, %341 ], [ %.051, %328 ], [ %.051, %318 ], [ %317, %316 ], [ %.051, %315 ], [ %.051, %305 ], [ %.051, %295 ], [ %.051, %293 ], [ %.051, %282 ], [ %.051, %279 ], [ %.051, %278 ], [ %.051, %275 ], [ %.051, %274 ], [ 1, %264 ], [ %.051, %254 ], [ %.051, %253 ], [ %.051, %243 ], [ %.051, %233 ], [ %.051, %232 ], [ %.051, %231 ], [ %.051, %220 ], [ %.051, %210 ], [ %.051, %196 ], [ %.051, %193 ], [ %.051, %192 ], [ %.051, %190 ], [ %.051, %178 ], [ %.051, %168 ], [ %.051, %167 ], [ %.051, %166 ], [ %.051, %165 ], [ %.051, %162 ], [ %.051, %161 ], [ %.051, %159 ], [ %.051, %158 ], [ %.051, %148 ], [ %.051, %138 ], [ %.051, %137 ], [ %.051, %134 ], [ %.051, %131 ], [ %.051, %130 ], [ %.051, %120 ], [ %.051, %110 ], [ %.051, %107 ], [ %.051, %106 ], [ %.051, %105 ], [ %.051, %95 ], [ %.051, %85 ], [ %.051, %84 ], [ %.051, %68 ], [ %.051, %58 ], [ %.051, %55 ], [ %.051, %54 ], [ %.051, %53 ], [ %.051, %43 ], [ %.051, %33 ], [ %.051, %30 ], [ %.051, %28 ], [ %.051, %16 ], [ %.051, %6 ]
  %.049.be = phi i64 [ %.049, %5 ], [ %.049, %361 ], [ %.049, %360 ], [ %.049, %359 ], [ %.049, %357 ], [ %.049, %356 ], [ %.049, %355 ], [ %.049, %354 ], [ %.049, %353 ], [ %.049, %351 ], [ %.049, %344 ], [ %.049, %342 ], [ %.049, %341 ], [ %.049, %328 ], [ %.049, %318 ], [ %.049, %316 ], [ %.049, %315 ], [ %.049, %305 ], [ %.049, %295 ], [ %294, %293 ], [ %.049, %282 ], [ %.049, %279 ], [ %.051, %278 ], [ %.049, %275 ], [ %.049, %274 ], [ %.049, %264 ], [ %.049, %254 ], [ %.049, %253 ], [ %.049, %243 ], [ %.049, %233 ], [ %.049, %232 ], [ %.049, %231 ], [ %.049, %220 ], [ %.049, %210 ], [ %.049, %196 ], [ %.049, %193 ], [ %.049, %192 ], [ %.049, %190 ], [ %.049, %178 ], [ %.049, %168 ], [ %.049, %167 ], [ %.049, %166 ], [ %.049, %165 ], [ %.049, %162 ], [ %.049, %161 ], [ %.049, %159 ], [ %.049, %158 ], [ %.049, %148 ], [ %.049, %138 ], [ %.049, %137 ], [ %.049, %134 ], [ %.049, %131 ], [ %.049, %130 ], [ %.049, %120 ], [ %.049, %110 ], [ %.049, %107 ], [ %.049, %106 ], [ %.049, %105 ], [ %.049, %95 ], [ %.049, %85 ], [ %.049, %84 ], [ %.049, %68 ], [ %.049, %58 ], [ %.049, %55 ], [ %.049, %54 ], [ %.049, %53 ], [ %.049, %43 ], [ %.049, %33 ], [ %.049, %30 ], [ %.049, %28 ], [ %.049, %16 ], [ %.049, %6 ]
  %.0.be = phi i32 [ %.0, %5 ], [ 527524734, %361 ], [ -1625310752, %360 ], [ -524066735, %359 ], [ -1007069946, %357 ], [ 1606194133, %356 ], [ 1879402072, %355 ], [ 1737403440, %354 ], [ -1695961184, %353 ], [ -928938294, %351 ], [ -487791747, %344 ], [ -473232279, %342 ], [ 1065703892, %341 ], [ %339, %328 ], [ %327, %318 ], [ 971889512, %316 ], [ 1282945633, %315 ], [ %314, %305 ], [ %304, %295 ], [ 2112597579, %293 ], [ 1463075647, %282 ], [ %281, %279 ], [ 2112597579, %278 ], [ %277, %275 ], [ 971889512, %274 ], [ %273, %264 ], [ %263, %254 ], [ -114436225, %253 ], [ %252, %243 ], [ %242, %233 ], [ 1496631334, %232 ], [ 875193442, %231 ], [ %230, %220 ], [ %219, %210 ], [ -1754914007, %196 ], [ %195, %193 ], [ 875193442, %192 ], [ %191, %190 ], [ %189, %178 ], [ %177, %168 ], [ -114436225, %167 ], [ -1703295695, %166 ], [ -624663193, %165 ], [ %164, %162 ], [ -1703295695, %161 ], [ 652251932, %159 ], [ -985304403, %158 ], [ %157, %148 ], [ %147, %138 ], [ -417674030, %137 ], [ 1319714283, %134 ], [ %133, %131 ], [ -417674030, %130 ], [ %129, %120 ], [ %119, %110 ], [ %109, %107 ], [ 652251932, %106 ], [ 757103170, %105 ], [ %104, %95 ], [ %94, %85 ], [ -1365114527, %84 ], [ %83, %68 ], [ %67, %58 ], [ %57, %55 ], [ 757103170, %54 ], [ 1067842389, %53 ], [ %52, %43 ], [ %42, %33 ], [ -774451389, %30 ], [ %29, %28 ], [ %27, %16 ], [ %15, %6 ]
  br label %5

6:                                                ; preds = %5
  %7 = load i32, i32* @x.4, align 4
  %8 = load i32, i32* @y.5, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 1065703892, i32 1594483608
  br label %.backedge

16:                                               ; preds = %5
  %17 = load i64, i64* @n, align 8
  %18 = icmp sle i64 %.065, %17
  store i1 %18, i1* %2, align 1
  %19 = load i32, i32* @x.4, align 4
  %20 = load i32, i32* @y.5, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 -873624292, i32 1594483608
  br label %.backedge

28:                                               ; preds = %5
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %29 = select i1 %.0..0..0., i32 1711579895, i32 -1006449494
  br label %.backedge

30:                                               ; preds = %5
  %31 = getelementptr inbounds [5011 x i64], [5011 x i64]* @dis, i64 0, i64 %.065
  %32 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64* nonnull %31)
  br label %.backedge

33:                                               ; preds = %5
  %34 = load i32, i32* @x.4, align 4
  %35 = load i32, i32* @y.5, align 4
  %36 = add i32 %34, -1
  %37 = mul i32 %36, %34
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %40, %39
  %42 = select i1 %41, i32 -473232279, i32 -992215861
  br label %.backedge

43:                                               ; preds = %5
  %.neg79 = add i64 %.065, 1
  %44 = load i32, i32* @x.4, align 4
  %45 = load i32, i32* @y.5, align 4
  %46 = add i32 %44, -1
  %47 = mul i32 %46, %44
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %50, %49
  %52 = select i1 %51, i32 1090996697, i32 -992215861
  br label %.backedge

53:                                               ; preds = %5
  br label %.backedge

54:                                               ; preds = %5
  br label %.backedge

55:                                               ; preds = %5
  %56 = load i64, i64* @n, align 8
  %.not78 = icmp sgt i64 %.063, %56
  %57 = select i1 %.not78, i32 1156814519, i32 336235553
  br label %.backedge

58:                                               ; preds = %5
  %59 = load i32, i32* @x.4, align 4
  %60 = load i32, i32* @y.5, align 4
  %61 = add i32 %59, -1
  %62 = mul i32 %61, %59
  %63 = and i32 %62, 1
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %65, %64
  %67 = select i1 %66, i32 -487791747, i32 -345737487
  br label %.backedge

68:                                               ; preds = %5
  %69 = add i64 %.063, -1
  %70 = getelementptr inbounds [5011 x i64], [5011 x i64]* @dis, i64 0, i64 %69
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds [5011 x i64], [5011 x i64]* @dis, i64 0, i64 %.063
  %73 = load i64, i64* %72, align 8
  %74 = add i64 %73, %71
  store i64 %74, i64* %72, align 8
  %75 = load i32, i32* @x.4, align 4
  %76 = load i32, i32* @y.5, align 4
  %77 = add i32 %75, -1
  %78 = mul i32 %77, %75
  %79 = and i32 %78, 1
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %81, %80
  %83 = select i1 %82, i32 1832163630, i32 -345737487
  br label %.backedge

84:                                               ; preds = %5
  br label %.backedge

85:                                               ; preds = %5
  %86 = load i32, i32* @x.4, align 4
  %87 = load i32, i32* @y.5, align 4
  %88 = add i32 %86, -1
  %89 = mul i32 %88, %86
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %92, %91
  %94 = select i1 %93, i32 -928938294, i32 -809910053
  br label %.backedge

95:                                               ; preds = %5
  %.neg77 = add i64 %.063, 1
  %96 = load i32, i32* @x.4, align 4
  %97 = load i32, i32* @y.5, align 4
  %98 = add i32 %96, -1
  %99 = mul i32 %98, %96
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %102, %101
  %104 = select i1 %103, i32 1321339501, i32 -809910053
  br label %.backedge

105:                                              ; preds = %5
  br label %.backedge

106:                                              ; preds = %5
  br label %.backedge

107:                                              ; preds = %5
  %108 = load i64, i64* @n, align 8
  %.not76 = icmp sgt i64 %.061, %108
  %109 = select i1 %.not76, i32 1910809134, i32 -1882969031
  br label %.backedge

110:                                              ; preds = %5
  %111 = load i32, i32* @x.4, align 4
  %112 = load i32, i32* @y.5, align 4
  %113 = add i32 %111, -1
  %114 = mul i32 %113, %111
  %115 = and i32 %114, 1
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %117, %116
  %119 = select i1 %118, i32 -1695961184, i32 381051065
  br label %.backedge

120:                                              ; preds = %5
  %121 = load i32, i32* @x.4, align 4
  %122 = load i32, i32* @y.5, align 4
  %123 = add i32 %121, -1
  %124 = mul i32 %123, %121
  %125 = and i32 %124, 1
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %127, %126
  %129 = select i1 %128, i32 -1140213782, i32 381051065
  br label %.backedge

130:                                              ; preds = %5
  br label %.backedge

131:                                              ; preds = %5
  %132 = load i64, i64* @m, align 8
  %.not75 = icmp sgt i64 %.059, %132
  %133 = select i1 %.not75, i32 1103020408, i32 465965001
  br label %.backedge

134:                                              ; preds = %5
  %135 = getelementptr inbounds [5011 x [211 x i64]], [5011 x [211 x i64]]* @val, i64 0, i64 %.061, i64 %.059
  %136 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64* nonnull %135)
  br label %.backedge

137:                                              ; preds = %5
  %.neg74 = add i64 %.059, 1
  br label %.backedge

138:                                              ; preds = %5
  %139 = load i32, i32* @x.4, align 4
  %140 = load i32, i32* @y.5, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 1737403440, i32 -2015456987
  br label %.backedge

148:                                              ; preds = %5
  %149 = load i32, i32* @x.4, align 4
  %150 = load i32, i32* @y.5, align 4
  %151 = add i32 %149, -1
  %152 = mul i32 %151, %149
  %153 = and i32 %152, 1
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %155, %154
  %157 = select i1 %156, i32 1276144589, i32 -2015456987
  br label %.backedge

158:                                              ; preds = %5
  br label %.backedge

159:                                              ; preds = %5
  %160 = add i64 %.061, 1
  br label %.backedge

161:                                              ; preds = %5
  br label %.backedge

162:                                              ; preds = %5
  %163 = load i64, i64* @m, align 8
  %.not73 = icmp sgt i64 %.057, %163
  %164 = select i1 %.not73, i32 1471138180, i32 2032068813
  br label %.backedge

165:                                              ; preds = %5
  call void @_Z5solvex(i64 %.057)
  br label %.backedge

166:                                              ; preds = %5
  %.neg72 = add i64 %.057, 1
  br label %.backedge

167:                                              ; preds = %5
  br label %.backedge

168:                                              ; preds = %5
  %169 = load i32, i32* @x.4, align 4
  %170 = load i32, i32* @y.5, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 1879402072, i32 519056117
  br label %.backedge

178:                                              ; preds = %5
  %179 = load i64, i64* @n, align 8
  %180 = icmp sle i64 %.055, %179
  store i1 %180, i1* %1, align 1
  %181 = load i32, i32* @x.4, align 4
  %182 = load i32, i32* @y.5, align 4
  %183 = add i32 %181, -1
  %184 = mul i32 %183, %181
  %185 = and i32 %184, 1
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %187, %186
  %189 = select i1 %188, i32 932387503, i32 519056117
  br label %.backedge

190:                                              ; preds = %5
  %.0..0..0.48 = load volatile i1, i1* %1, align 1
  %191 = select i1 %.0..0..0.48, i32 -534283426, i32 1548384900
  br label %.backedge

192:                                              ; preds = %5
  br label %.backedge

193:                                              ; preds = %5
  %194 = load i64, i64* @n, align 8
  %.not71 = icmp sgt i64 %.053, %194
  %195 = select i1 %.not71, i32 -2043970575, i32 2117337757
  br label %.backedge

196:                                              ; preds = %5
  %197 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %.055, i64 %.053
  %198 = load i64, i64* %197, align 8
  %199 = add i64 %.055, -1
  %200 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %199, i64 %.053
  %201 = load i64, i64* %200, align 8
  %202 = add i64 %.053, -1
  %203 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %.055, i64 %202
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %199, i64 %202
  %206 = load i64, i64* %205, align 8
  %207 = add i64 %201, %198
  %208 = add i64 %207, %204
  %209 = sub i64 %208, %206
  store i64 %209, i64* %197, align 8
  br label %.backedge

210:                                              ; preds = %5
  %211 = load i32, i32* @x.4, align 4
  %212 = load i32, i32* @y.5, align 4
  %213 = add i32 %211, -1
  %214 = mul i32 %213, %211
  %215 = and i32 %214, 1
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %217, %216
  %219 = select i1 %218, i32 1606194133, i32 -1263280434
  br label %.backedge

220:                                              ; preds = %5
  %221 = add i64 %.053, 1
  %222 = load i32, i32* @x.4, align 4
  %223 = load i32, i32* @y.5, align 4
  %224 = add i32 %222, -1
  %225 = mul i32 %224, %222
  %226 = and i32 %225, 1
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %228, %227
  %230 = select i1 %229, i32 228586013, i32 -1263280434
  br label %.backedge

231:                                              ; preds = %5
  br label %.backedge

232:                                              ; preds = %5
  br label %.backedge

233:                                              ; preds = %5
  %234 = load i32, i32* @x.4, align 4
  %235 = load i32, i32* @y.5, align 4
  %236 = add i32 %234, -1
  %237 = mul i32 %236, %234
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %240, %239
  %242 = select i1 %241, i32 -1007069946, i32 1755883111
  br label %.backedge

243:                                              ; preds = %5
  %.neg70 = add i64 %.055, 1
  %244 = load i32, i32* @x.4, align 4
  %245 = load i32, i32* @y.5, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 -2088276923, i32 1755883111
  br label %.backedge

253:                                              ; preds = %5
  br label %.backedge

254:                                              ; preds = %5
  %255 = load i32, i32* @x.4, align 4
  %256 = load i32, i32* @y.5, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 -524066735, i32 -929762688
  br label %.backedge

264:                                              ; preds = %5
  %265 = load i32, i32* @x.4, align 4
  %266 = load i32, i32* @y.5, align 4
  %267 = add i32 %265, -1
  %268 = mul i32 %267, %265
  %269 = and i32 %268, 1
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %271, %270
  %273 = select i1 %272, i32 861778778, i32 -929762688
  br label %.backedge

274:                                              ; preds = %5
  br label %.backedge

275:                                              ; preds = %5
  %276 = load i64, i64* @n, align 8
  %.not69 = icmp sgt i64 %.051, %276
  %277 = select i1 %.not69, i32 1581833870, i32 -551762323
  br label %.backedge

278:                                              ; preds = %5
  br label %.backedge

279:                                              ; preds = %5
  %280 = load i64, i64* @n, align 8
  %.not = icmp sgt i64 %.049, %280
  %281 = select i1 %.not, i32 -572290895, i32 -88440753
  br label %.backedge

282:                                              ; preds = %5
  %283 = getelementptr inbounds [5011 x [5011 x i64]], [5011 x [5011 x i64]]* @Sum, i64 0, i64 %.051, i64 %.049
  %284 = load i64, i64* %283, align 8
  %285 = getelementptr inbounds [5011 x i64], [5011 x i64]* @dis, i64 0, i64 %.049
  %286 = load i64, i64* %285, align 8
  %287 = getelementptr inbounds [5011 x i64], [5011 x i64]* @dis, i64 0, i64 %.051
  %288 = load i64, i64* %287, align 8
  %289 = sub i64 %284, %286
  %290 = add i64 %289, %288
  store i64 %290, i64* %3, align 8
  %291 = call dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* nonnull dereferenceable(8) @ans, i64* nonnull dereferenceable(8) %3)
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* @ans, align 8
  br label %.backedge

293:                                              ; preds = %5
  %294 = add i64 %.049, 1
  br label %.backedge

295:                                              ; preds = %5
  %296 = load i32, i32* @x.4, align 4
  %297 = load i32, i32* @y.5, align 4
  %298 = add i32 %296, -1
  %299 = mul i32 %298, %296
  %300 = and i32 %299, 1
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %302, %301
  %304 = select i1 %303, i32 -1625310752, i32 1783916217
  br label %.backedge

305:                                              ; preds = %5
  %306 = load i32, i32* @x.4, align 4
  %307 = load i32, i32* @y.5, align 4
  %308 = add i32 %306, -1
  %309 = mul i32 %308, %306
  %310 = and i32 %309, 1
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %312, %311
  %314 = select i1 %313, i32 -442637318, i32 1783916217
  br label %.backedge

315:                                              ; preds = %5
  br label %.backedge

316:                                              ; preds = %5
  %317 = add i64 %.051, 1
  br label %.backedge

318:                                              ; preds = %5
  %319 = load i32, i32* @x.4, align 4
  %320 = load i32, i32* @y.5, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 527524734, i32 1848769676
  br label %.backedge

328:                                              ; preds = %5
  %329 = load i64, i64* @ans, align 8
  %330 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %329)
  %331 = load i32, i32* @x.4, align 4
  %332 = load i32, i32* @y.5, align 4
  %333 = add i32 %331, -1
  %334 = mul i32 %333, %331
  %335 = and i32 %334, 1
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %337, %336
  %339 = select i1 %338, i32 963994286, i32 1848769676
  br label %.backedge

340:                                              ; preds = %5
  ret i32 0

341:                                              ; preds = %5
  br label %.backedge

342:                                              ; preds = %5
  %343 = add i64 %.065, 1
  br label %.backedge

344:                                              ; preds = %5
  %345 = add i64 %.063, -1
  %346 = getelementptr inbounds [5011 x i64], [5011 x i64]* @dis, i64 0, i64 %345
  %347 = load i64, i64* %346, align 8
  %348 = getelementptr inbounds [5011 x i64], [5011 x i64]* @dis, i64 0, i64 %.063
  %349 = load i64, i64* %348, align 8
  %350 = add i64 %349, %347
  store i64 %350, i64* %348, align 8
  br label %.backedge

351:                                              ; preds = %5
  %352 = add i64 %.063, 1
  br label %.backedge

353:                                              ; preds = %5
  br label %.backedge

354:                                              ; preds = %5
  br label %.backedge

355:                                              ; preds = %5
  br label %.backedge

356:                                              ; preds = %5
  %.neg = add i64 %.053, 1
  br label %.backedge

357:                                              ; preds = %5
  %358 = add i64 %.055, 1
  br label %.backedge

359:                                              ; preds = %5
  br label %.backedge

360:                                              ; preds = %5
  br label %.backedge

361:                                              ; preds = %5
  %362 = load i64, i64* @ans, align 8
  %363 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 %362)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #7 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i64**, align 8
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = load i32, i32* @x.6, align 4
  %11 = load i32, i32* @y.7, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %9, align 1
  %16 = icmp slt i32 %11, 10
  store i1 %16, i1* %8, align 1
  br label %17

17:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ -150917835, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -150917835, label %18
    i32 -1045068214, label %21
    i32 -1525159232, label %39
    i32 -975475041, label %41
    i32 1356024257, label %43
    i32 1674597145, label %45
    i32 -443894325, label %55
    i32 -1881960015, label %66
    i32 -1791587723, label %67
    i32 152387054, label %68
  ]

.backedge:                                        ; preds = %17, %68, %67, %55, %45, %43, %41, %39, %21, %18
  %.0.be = phi i32 [ %.0, %17 ], [ -443894325, %68 ], [ -1045068214, %67 ], [ %65, %55 ], [ %54, %45 ], [ 1674597145, %43 ], [ 1674597145, %41 ], [ %40, %39 ], [ %38, %21 ], [ %20, %18 ]
  br label %17

18:                                               ; preds = %17
  %.0..0..0. = load volatile i1, i1* %9, align 1
  %.0..0..0.1 = load volatile i1, i1* %8, align 1
  %19 = or i1 %.0..0..0., %.0..0..0.1
  %20 = select i1 %19, i32 -1045068214, i32 -1791587723
  br label %.backedge

21:                                               ; preds = %17
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %7, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %6, align 8
  %24 = alloca i64*, align 8
  store i64** %24, i64*** %5, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %6, align 8
  store i64* %0, i64** %.0..0..0.6, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %5, align 8
  store i64* %1, i64** %.0..0..0.9, align 8
  %.0..0..0.7 = load volatile i64**, i64*** %6, align 8
  %25 = load i64*, i64** %.0..0..0.7, align 8
  %26 = load i64, i64* %25, align 8
  %.0..0..0.10 = load volatile i64**, i64*** %5, align 8
  %27 = load i64*, i64** %.0..0..0.10, align 8
  %28 = load i64, i64* %27, align 8
  %29 = icmp slt i64 %26, %28
  store i1 %29, i1* %4, align 1
  %30 = load i32, i32* @x.6, align 4
  %31 = load i32, i32* @y.7, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -1525159232, i32 -1791587723
  br label %.backedge

39:                                               ; preds = %17
  %.0..0..0.12 = load volatile i1, i1* %4, align 1
  %40 = select i1 %.0..0..0.12, i32 -975475041, i32 1356024257
  br label %.backedge

41:                                               ; preds = %17
  %.0..0..0.11 = load volatile i64**, i64*** %5, align 8
  %42 = load i64*, i64** %.0..0..0.11, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %7, align 8
  store i64* %42, i64** %.0..0..0.2, align 8
  br label %.backedge

43:                                               ; preds = %17
  %.0..0..0.8 = load volatile i64**, i64*** %6, align 8
  %44 = load i64*, i64** %.0..0..0.8, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %7, align 8
  store i64* %44, i64** %.0..0..0.3, align 8
  br label %.backedge

45:                                               ; preds = %17
  %46 = load i32, i32* @x.6, align 4
  %47 = load i32, i32* @y.7, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -443894325, i32 152387054
  br label %.backedge

55:                                               ; preds = %17
  %.0..0..0.4 = load volatile i64**, i64*** %7, align 8
  %56 = load i64*, i64** %.0..0..0.4, align 8
  store i64* %56, i64** %3, align 8
  %57 = load i32, i32* @x.6, align 4
  %58 = load i32, i32* @y.7, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 -1881960015, i32 152387054
  br label %.backedge

66:                                               ; preds = %17
  %.0..0..0.13 = load volatile i64*, i64** %3, align 8
  ret i64* %.0..0..0.13

67:                                               ; preds = %17
  br label %.backedge

68:                                               ; preds = %17
  %.0..0..0.5 = load volatile i64**, i64*** %7, align 8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s252724329.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nosync nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
