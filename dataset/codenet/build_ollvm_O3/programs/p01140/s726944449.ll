; ModuleID = 'build_ollvm/programs/p01140/s726944449.ll'
source_filename = "Project_CodeNet_C++1400/p01140/s726944449.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_ = comdat any

$_ZSt4fillIPxiEvT_S1_RKT0_ = comdat any

$_ZSt8__fill_aIPxiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_ = comdat any

$_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_ = comdat any

$_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@pie = local_unnamed_addr global double 0.000000e+00, align 8
@INF = local_unnamed_addr global i32 1000000007, align 4
@dx = local_unnamed_addr global [4 x i32] [i32 0, i32 -1, i32 0, i32 1], align 16
@dy = local_unnamed_addr global [4 x i32] [i32 -1, i32 0, i32 1, i32 0], align 16
@hsum2 = global [1500005 x i64] zeroinitializer, align 16
@wsum2 = global [1500005 x i64] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s726944449.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0
@x.14 = common local_unnamed_addr global i32 0
@y.15 = common local_unnamed_addr global i32 0
@x.16 = common local_unnamed_addr global i32 0
@y.17 = common local_unnamed_addr global i32 0
@x.18 = common local_unnamed_addr global i32 0
@y.19 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define zeroext i1 @_Z5valueiiii(i32 %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #4 {
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i1, align 1
  %12 = alloca i1, align 1
  %13 = load i32, i32* @x.2, align 4
  %14 = load i32, i32* @y.3, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  store i1 %18, i1* %12, align 1
  %19 = icmp slt i32 %14, 10
  store i1 %19, i1* %11, align 1
  br label %20

20:                                               ; preds = %.backedge, %4
  %21 = phi i32 [ %14, %4 ], [ %.be, %.backedge ]
  %22 = phi i32 [ %13, %4 ], [ %.be19, %.backedge ]
  %23 = phi i32 [ %14, %4 ], [ %.be20, %.backedge ]
  %24 = phi i32 [ %13, %4 ], [ %.be21, %.backedge ]
  %.017 = phi i32 [ 579898011, %4 ], [ %.017.be, %.backedge ]
  %.0 = phi i1 [ undef, %4 ], [ %.0.be, %.backedge ]
  switch i32 %.017, label %.backedge [
    i32 579898011, label %25
    i32 -104312253, label %28
    i32 2058561339, label %44
    i32 -1084961110, label %46
    i32 -1662323934, label %54
    i32 -488564513, label %65
    i32 -1108528686, label %67
    i32 2063933392, label %71
    i32 468405899, label %75
    i32 -152516973, label %76
    i32 2108566754, label %77
  ]

.backedge:                                        ; preds = %20, %77, %76, %71, %67, %65, %54, %46, %44, %28, %25
  %.be = phi i32 [ %21, %20 ], [ %21, %77 ], [ %21, %76 ], [ %21, %71 ], [ %21, %67 ], [ %21, %65 ], [ %21, %54 ], [ %21, %46 ], [ %21, %44 ], [ %36, %28 ], [ %21, %25 ]
  %.be19 = phi i32 [ %22, %20 ], [ %22, %77 ], [ %22, %76 ], [ %22, %71 ], [ %22, %67 ], [ %22, %65 ], [ %22, %54 ], [ %22, %46 ], [ %22, %44 ], [ %35, %28 ], [ %22, %25 ]
  %.be20 = phi i32 [ %23, %20 ], [ %23, %77 ], [ %23, %76 ], [ %23, %71 ], [ %23, %67 ], [ %23, %65 ], [ %23, %54 ], [ %21, %46 ], [ %23, %44 ], [ %36, %28 ], [ %23, %25 ]
  %.be21 = phi i32 [ %24, %20 ], [ %24, %77 ], [ %24, %76 ], [ %24, %71 ], [ %24, %67 ], [ %24, %65 ], [ %24, %54 ], [ %22, %46 ], [ %24, %44 ], [ %35, %28 ], [ %24, %25 ]
  %.017.be = phi i32 [ %.017, %20 ], [ -1662323934, %77 ], [ -104312253, %76 ], [ 468405899, %71 ], [ %70, %67 ], [ %66, %65 ], [ %64, %54 ], [ %53, %46 ], [ %45, %44 ], [ %43, %28 ], [ %27, %25 ]
  %.0.be = phi i1 [ %.0, %20 ], [ %.0, %77 ], [ %.0, %76 ], [ %74, %71 ], [ false, %67 ], [ false, %65 ], [ %.0, %54 ], [ %.0, %46 ], [ false, %44 ], [ %.0, %28 ], [ %.0, %25 ]
  br label %20

25:                                               ; preds = %20
  %.0..0..0.1 = load volatile i1, i1* %12, align 1
  %.0..0..0.2 = load volatile i1, i1* %11, align 1
  %26 = or i1 %.0..0..0.1, %.0..0..0.2
  %27 = select i1 %26, i32 -104312253, i32 -152516973
  br label %.backedge

28:                                               ; preds = %20
  %29 = alloca i32, align 4
  store i32* %29, i32** %10, align 8
  %30 = alloca i32, align 4
  store i32* %30, i32** %9, align 8
  %31 = alloca i32, align 4
  store i32* %31, i32** %8, align 8
  %32 = alloca i32, align 4
  store i32* %32, i32** %7, align 8
  %.0..0..0.3 = load volatile i32*, i32** %10, align 8
  store i32 %0, i32* %.0..0..0.3, align 4
  %.0..0..0.7 = load volatile i32*, i32** %9, align 8
  store i32 %1, i32* %.0..0..0.7, align 4
  %.0..0..0.10 = load volatile i32*, i32** %8, align 8
  store i32 %2, i32* %.0..0..0.10, align 4
  %.0..0..0.13 = load volatile i32*, i32** %7, align 8
  store i32 %3, i32* %.0..0..0.13, align 4
  %.0..0..0.4 = load volatile i32*, i32** %10, align 8
  %33 = load i32, i32* %.0..0..0.4, align 4
  %34 = icmp sgt i32 %33, -1
  store i1 %34, i1* %6, align 1
  %35 = load i32, i32* @x.2, align 4
  %36 = load i32, i32* @y.3, align 4
  %37 = add i32 %35, -1
  %38 = mul i32 %37, %35
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %41, %40
  %43 = select i1 %42, i32 2058561339, i32 -152516973
  br label %.backedge

44:                                               ; preds = %20
  %.0..0..0.15 = load volatile i1, i1* %6, align 1
  %45 = select i1 %.0..0..0.15, i32 -1084961110, i32 468405899
  br label %.backedge

46:                                               ; preds = %20
  %47 = add i32 %22, -1
  %48 = mul i32 %47, %22
  %49 = and i32 %48, 1
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %21, 10
  %52 = or i1 %51, %50
  %53 = select i1 %52, i32 -1662323934, i32 2108566754
  br label %.backedge

54:                                               ; preds = %20
  %.0..0..0.5 = load volatile i32*, i32** %10, align 8
  %55 = load i32, i32* %.0..0..0.5, align 4
  %.0..0..0.11 = load volatile i32*, i32** %8, align 8
  %56 = load i32, i32* %.0..0..0.11, align 4
  %57 = icmp slt i32 %55, %56
  store i1 %57, i1* %5, align 1
  %58 = add i32 %24, -1
  %59 = mul i32 %58, %24
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %23, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 -488564513, i32 2108566754
  br label %.backedge

65:                                               ; preds = %20
  %.0..0..0.16 = load volatile i1, i1* %5, align 1
  %66 = select i1 %.0..0..0.16, i32 -1108528686, i32 468405899
  br label %.backedge

67:                                               ; preds = %20
  %.0..0..0.8 = load volatile i32*, i32** %9, align 8
  %68 = load i32, i32* %.0..0..0.8, align 4
  %69 = icmp sgt i32 %68, -1
  %70 = select i1 %69, i32 2063933392, i32 468405899
  br label %.backedge

71:                                               ; preds = %20
  %.0..0..0.9 = load volatile i32*, i32** %9, align 8
  %72 = load i32, i32* %.0..0..0.9, align 4
  %.0..0..0.14 = load volatile i32*, i32** %7, align 8
  %73 = load i32, i32* %.0..0..0.14, align 4
  %74 = icmp slt i32 %72, %73
  br label %.backedge

75:                                               ; preds = %20
  ret i1 %.0

76:                                               ; preds = %20
  br label %.backedge

77:                                               ; preds = %20
  %.0..0..0.6 = load volatile i32*, i32** %10, align 8
  %.0..0..0.12 = load volatile i32*, i32** %8, align 8
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define internal fastcc void @__cxx_global_var_init.1() unnamed_addr #5 section ".text.startup" {
  %1 = tail call double @_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 -1)
  store double %1, double* @pie, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZSt4acosIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %0) local_unnamed_addr #5 comdat {
  %2 = alloca double, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.6, align 4
  %6 = load i32, i32* @y.7, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  %12 = sitofp i32 %0 to double
  %13 = or i1 %11, %10
  %14 = select i1 %13, i32 1060765646, i32 917776639
  br label %.outer

.outer:                                           ; preds = %19, %1
  %.ph = phi double [ %20, %19 ], [ undef, %1 ]
  %.0.ph = phi i32 [ %14, %19 ], [ -286737770, %1 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %15

15:                                               ; preds = %.outer3, %15
  switch i32 %.0.ph4, label %15 [
    i32 -286737770, label %16
    i32 -1040677869, label %19
    i32 1060765646, label %21
    i32 917776639, label %.outer3.backedge
  ]

16:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %17 = or i1 %.0..0..0., %.0..0..0.1
  %18 = select i1 %17, i32 -1040677869, i32 917776639
  br label %.outer3.backedge

19:                                               ; preds = %15
  %20 = tail call double @acos(double %12) #9
  br label %.outer

21:                                               ; preds = %15
  store double %.ph, double* %2, align 8
  %.0..0..0.2 = load volatile double, double* %2, align 8
  ret double %.0..0..0.2

.outer3.backedge:                                 ; preds = %15, %16
  %.0.ph4.be = phi i32 [ %18, %16 ], [ -1040677869, %15 ]
  br label %.outer3
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [1505 x i32], align 16
  %8 = alloca [1505 x i32], align 16
  %9 = alloca [1505 x i64], align 16
  %10 = alloca [1505 x i64], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  br label %13

13:                                               ; preds = %.backedge, %0
  %.079 = phi i64 [ 0, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i32 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i32 [ undef, %0 ], [ %.067.be, %.backedge ]
  %.065 = phi i32 [ undef, %0 ], [ %.065.be, %.backedge ]
  %.063 = phi i32 [ undef, %0 ], [ %.063.be, %.backedge ]
  %.0 = phi i32 [ -524914544, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -524914544, label %14
    i32 -1058384199, label %22
    i32 1829564117, label %23
    i32 1112716812, label %33
    i32 180459784, label %43
    i32 1153891976, label %44
    i32 434241455, label %54
    i32 -1833158471, label %65
    i32 1215655891, label %67
    i32 -1713766364, label %71
    i32 -1575293632, label %72
    i32 79642576, label %73
    i32 -809955795, label %77
    i32 1755478467, label %83
    i32 -1555361744, label %91
    i32 937362521, label %102
    i32 -35555298, label %112
    i32 320533521, label %122
    i32 692971278, label %123
    i32 -312567275, label %125
    i32 1699836897, label %126
    i32 -2005367169, label %130
    i32 1688576575, label %140
    i32 -1770666935, label %154
    i32 -1701349266, label %156
    i32 743866066, label %164
    i32 -1767714288, label %174
    i32 398206000, label %196
    i32 -873949855, label %197
    i32 -84563340, label %198
    i32 250555767, label %208
    i32 1331450627, label %219
    i32 -213917099, label %220
    i32 1719315553, label %230
    i32 -1697231670, label %240
    i32 1578383820, label %241
    i32 371784631, label %251
    i32 989256590, label %263
    i32 75687624, label %265
    i32 1090232244, label %272
    i32 153940842, label %276
    i32 -1490339447, label %286
    i32 1976371329, label %288
    i32 -1194889874, label %298
    i32 -982208277, label %308
    i32 1611014526, label %309
    i32 -520630298, label %311
    i32 1348239289, label %312
    i32 -1587482223, label %316
    i32 564444944, label %324
    i32 -1046680922, label %328
    i32 1858481933, label %339
    i32 2042480827, label %341
    i32 10485154, label %342
    i32 877507432, label %352
    i32 -1838635456, label %362
    i32 -588110395, label %363
    i32 -124828198, label %364
    i32 -1774604009, label %365
    i32 1511227352, label %375
    i32 1599737604, label %386
    i32 -553369069, label %388
    i32 -1168822666, label %398
    i32 742243273, label %415
    i32 -382058558, label %416
    i32 -1995122520, label %426
    i32 -1713032918, label %437
    i32 2059849907, label %438
    i32 1502440920, label %448
    i32 272913669, label %460
    i32 473402168, label %461
    i32 -960029939, label %462
    i32 118359405, label %463
    i32 -291363527, label %464
    i32 453619756, label %468
    i32 -724895658, label %481
    i32 599705522, label %483
    i32 -2121127566, label %484
    i32 795044620, label %485
    i32 -1365706234, label %486
    i32 1124035000, label %488
    i32 -824403229, label %489
    i32 1225017647, label %497
    i32 -1994821631, label %498
  ]

.backedge:                                        ; preds = %13, %498, %497, %489, %488, %486, %485, %484, %483, %481, %468, %464, %463, %462, %461, %460, %448, %438, %437, %426, %416, %415, %398, %388, %386, %375, %365, %364, %363, %362, %352, %342, %341, %339, %328, %324, %316, %312, %311, %309, %308, %298, %288, %286, %276, %272, %265, %263, %251, %241, %240, %230, %220, %219, %208, %198, %197, %196, %174, %164, %156, %154, %140, %130, %126, %125, %123, %122, %112, %102, %91, %83, %77, %73, %72, %71, %67, %65, %54, %44, %43, %33, %23, %14
  %.079.be = phi i64 [ %.079, %13 ], [ 0, %498 ], [ %.079, %497 ], [ %496, %489 ], [ %.079, %488 ], [ %.079, %486 ], [ %.079, %485 ], [ %.079, %484 ], [ %.079, %483 ], [ %.079, %481 ], [ %.079, %468 ], [ %.079, %464 ], [ %.079, %463 ], [ %.079, %462 ], [ %.079, %461 ], [ %.079, %460 ], [ 0, %448 ], [ %.079, %438 ], [ %.079, %437 ], [ %.079, %426 ], [ %.079, %416 ], [ %.079, %415 ], [ %405, %398 ], [ %.079, %388 ], [ %.079, %386 ], [ %.079, %375 ], [ %.079, %365 ], [ %.079, %364 ], [ %.079, %363 ], [ %.079, %362 ], [ %.079, %352 ], [ %.079, %342 ], [ %.079, %341 ], [ %.079, %339 ], [ %.079, %328 ], [ %.079, %324 ], [ %.079, %316 ], [ %.079, %312 ], [ %.079, %311 ], [ %.079, %309 ], [ %.079, %308 ], [ %.079, %298 ], [ %.079, %288 ], [ %.079, %286 ], [ %.079, %276 ], [ %.079, %272 ], [ %.079, %265 ], [ %.079, %263 ], [ %.079, %251 ], [ %.079, %241 ], [ %.079, %240 ], [ %.079, %230 ], [ %.079, %220 ], [ %.079, %219 ], [ %.079, %208 ], [ %.079, %198 ], [ %.079, %197 ], [ %.079, %196 ], [ %.079, %174 ], [ %.079, %164 ], [ %.079, %156 ], [ %.079, %154 ], [ %.079, %140 ], [ %.079, %130 ], [ %.079, %126 ], [ %.079, %125 ], [ %.079, %123 ], [ %.079, %122 ], [ %.079, %112 ], [ %.079, %102 ], [ %.079, %91 ], [ %.079, %83 ], [ %.079, %77 ], [ %.079, %73 ], [ %.079, %72 ], [ %.079, %71 ], [ %.079, %67 ], [ %.079, %65 ], [ %.079, %54 ], [ %.079, %44 ], [ %.079, %43 ], [ %.079, %33 ], [ %.079, %23 ], [ %.079, %14 ]
  %.077.be = phi i32 [ %.077, %13 ], [ %.077, %498 ], [ %.077, %497 ], [ %.077, %489 ], [ %.077, %488 ], [ %.077, %486 ], [ %.077, %485 ], [ %.077, %484 ], [ %.077, %483 ], [ %.077, %481 ], [ %.077, %468 ], [ %.077, %464 ], [ %.077, %463 ], [ %.077, %462 ], [ 0, %461 ], [ %.077, %460 ], [ %.077, %448 ], [ %.077, %438 ], [ %.077, %437 ], [ %.077, %426 ], [ %.077, %416 ], [ %.077, %415 ], [ %.077, %398 ], [ %.077, %388 ], [ %.077, %386 ], [ %.077, %375 ], [ %.077, %365 ], [ %.077, %364 ], [ %.077, %363 ], [ %.077, %362 ], [ %.077, %352 ], [ %.077, %342 ], [ %.077, %341 ], [ %.077, %339 ], [ %.077, %328 ], [ %.077, %324 ], [ %.077, %316 ], [ %.077, %312 ], [ %.077, %311 ], [ %.077, %309 ], [ %.077, %308 ], [ %.077, %298 ], [ %.077, %288 ], [ %.077, %286 ], [ %.077, %276 ], [ %.077, %272 ], [ %.077, %265 ], [ %.077, %263 ], [ %.077, %251 ], [ %.077, %241 ], [ %.077, %240 ], [ %.077, %230 ], [ %.077, %220 ], [ %.077, %219 ], [ %.077, %208 ], [ %.077, %198 ], [ %.077, %197 ], [ %.077, %196 ], [ %.077, %174 ], [ %.077, %164 ], [ %.077, %156 ], [ %.077, %154 ], [ %.077, %140 ], [ %.077, %130 ], [ %.077, %126 ], [ %.077, %125 ], [ %.077, %123 ], [ %.077, %122 ], [ %.077, %112 ], [ %.077, %102 ], [ %.077, %91 ], [ %.077, %83 ], [ %.077, %77 ], [ %.077, %73 ], [ %.077, %72 ], [ %.neg84, %71 ], [ %.077, %67 ], [ %.077, %65 ], [ %.077, %54 ], [ %.077, %44 ], [ %.077, %43 ], [ 0, %33 ], [ %.077, %23 ], [ %.077, %14 ]
  %.075.be = phi i32 [ %.075, %13 ], [ %.075, %498 ], [ %.075, %497 ], [ %.075, %489 ], [ %.075, %488 ], [ %.075, %486 ], [ %.075, %485 ], [ %.075, %484 ], [ %.075, %483 ], [ %.075, %481 ], [ %.075, %468 ], [ %.075, %464 ], [ %.075, %463 ], [ %.075, %462 ], [ %.075, %461 ], [ %.075, %460 ], [ %.075, %448 ], [ %.075, %438 ], [ %.075, %437 ], [ %.075, %426 ], [ %.075, %416 ], [ %.075, %415 ], [ %.075, %398 ], [ %.075, %388 ], [ %.075, %386 ], [ %.075, %375 ], [ %.075, %365 ], [ %.075, %364 ], [ %.075, %363 ], [ %.075, %362 ], [ %.075, %352 ], [ %.075, %342 ], [ %.075, %341 ], [ %.075, %339 ], [ %.075, %328 ], [ %.075, %324 ], [ %.075, %316 ], [ %.075, %312 ], [ %.075, %311 ], [ %.075, %309 ], [ %.075, %308 ], [ %.075, %298 ], [ %.075, %288 ], [ %.075, %286 ], [ %.075, %276 ], [ %.075, %272 ], [ %.075, %265 ], [ %.075, %263 ], [ %.075, %251 ], [ %.075, %241 ], [ %.075, %240 ], [ %.075, %230 ], [ %.075, %220 ], [ %.075, %219 ], [ %.075, %208 ], [ %.075, %198 ], [ %.075, %197 ], [ %.075, %196 ], [ %.075, %174 ], [ %.075, %164 ], [ %.075, %156 ], [ %.075, %154 ], [ %.075, %140 ], [ %.075, %130 ], [ %.075, %126 ], [ %.075, %125 ], [ %124, %123 ], [ %.075, %122 ], [ %.075, %112 ], [ %.075, %102 ], [ %.075, %91 ], [ %.075, %83 ], [ %.075, %77 ], [ %.075, %73 ], [ 0, %72 ], [ %.075, %71 ], [ %.075, %67 ], [ %.075, %65 ], [ %.075, %54 ], [ %.075, %44 ], [ %.075, %43 ], [ %.075, %33 ], [ %.075, %23 ], [ %.075, %14 ]
  %.073.be = phi i32 [ %.073, %13 ], [ %.073, %498 ], [ %.073, %497 ], [ %.073, %489 ], [ %.073, %488 ], [ %.073, %486 ], [ %.073, %485 ], [ %.073, %484 ], [ %.073, %483 ], [ %482, %481 ], [ %.073, %468 ], [ %.073, %464 ], [ %.073, %463 ], [ %.073, %462 ], [ %.073, %461 ], [ %.073, %460 ], [ %.073, %448 ], [ %.073, %438 ], [ %.073, %437 ], [ %.073, %426 ], [ %.073, %416 ], [ %.073, %415 ], [ %.073, %398 ], [ %.073, %388 ], [ %.073, %386 ], [ %.073, %375 ], [ %.073, %365 ], [ %.073, %364 ], [ %.073, %363 ], [ %.073, %362 ], [ %.073, %352 ], [ %.073, %342 ], [ %.073, %341 ], [ %.073, %339 ], [ %.073, %328 ], [ %.073, %324 ], [ %.073, %316 ], [ %.073, %312 ], [ %.073, %311 ], [ %.073, %309 ], [ %.073, %308 ], [ %.073, %298 ], [ %.073, %288 ], [ %.073, %286 ], [ %.073, %276 ], [ %.073, %272 ], [ %.073, %265 ], [ %.073, %263 ], [ %.073, %251 ], [ %.073, %241 ], [ %.073, %240 ], [ %.073, %230 ], [ %.073, %220 ], [ %.073, %219 ], [ %209, %208 ], [ %.073, %198 ], [ %.073, %197 ], [ %.073, %196 ], [ %.073, %174 ], [ %.073, %164 ], [ %.073, %156 ], [ %.073, %154 ], [ %.073, %140 ], [ %.073, %130 ], [ %.073, %126 ], [ 0, %125 ], [ %.073, %123 ], [ %.073, %122 ], [ %.073, %112 ], [ %.073, %102 ], [ %.073, %91 ], [ %.073, %83 ], [ %.073, %77 ], [ %.073, %73 ], [ %.073, %72 ], [ %.073, %71 ], [ %.073, %67 ], [ %.073, %65 ], [ %.073, %54 ], [ %.073, %44 ], [ %.073, %43 ], [ %.073, %33 ], [ %.073, %23 ], [ %.073, %14 ]
  %.071.be = phi i32 [ %.071, %13 ], [ %.071, %498 ], [ %.071, %497 ], [ %.071, %489 ], [ %.071, %488 ], [ %.071, %486 ], [ %.071, %485 ], [ %.071, %484 ], [ 0, %483 ], [ %.071, %481 ], [ %.071, %468 ], [ %.071, %464 ], [ %.071, %463 ], [ %.071, %462 ], [ %.071, %461 ], [ %.071, %460 ], [ %.071, %448 ], [ %.071, %438 ], [ %.071, %437 ], [ %.071, %426 ], [ %.071, %416 ], [ %.071, %415 ], [ %.071, %398 ], [ %.071, %388 ], [ %.071, %386 ], [ %.071, %375 ], [ %.071, %365 ], [ %.071, %364 ], [ %.071, %363 ], [ %.071, %362 ], [ %.071, %352 ], [ %.071, %342 ], [ %.071, %341 ], [ %.071, %339 ], [ %.071, %328 ], [ %.071, %324 ], [ %.071, %316 ], [ %.071, %312 ], [ %.071, %311 ], [ %310, %309 ], [ %.071, %308 ], [ %.071, %298 ], [ %.071, %288 ], [ %.071, %286 ], [ %.071, %276 ], [ %.071, %272 ], [ %.071, %265 ], [ %.071, %263 ], [ %.071, %251 ], [ %.071, %241 ], [ %.071, %240 ], [ 0, %230 ], [ %.071, %220 ], [ %.071, %219 ], [ %.071, %208 ], [ %.071, %198 ], [ %.071, %197 ], [ %.071, %196 ], [ %.071, %174 ], [ %.071, %164 ], [ %.071, %156 ], [ %.071, %154 ], [ %.071, %140 ], [ %.071, %130 ], [ %.071, %126 ], [ %.071, %125 ], [ %.071, %123 ], [ %.071, %122 ], [ %.071, %112 ], [ %.071, %102 ], [ %.071, %91 ], [ %.071, %83 ], [ %.071, %77 ], [ %.071, %73 ], [ %.071, %72 ], [ %.071, %71 ], [ %.071, %67 ], [ %.071, %65 ], [ %.071, %54 ], [ %.071, %44 ], [ %.071, %43 ], [ %.071, %33 ], [ %.071, %23 ], [ %.071, %14 ]
  %.069.be = phi i32 [ %.069, %13 ], [ %.069, %498 ], [ %.069, %497 ], [ %.069, %489 ], [ %.069, %488 ], [ %.069, %486 ], [ %.069, %485 ], [ %.069, %484 ], [ %.069, %483 ], [ %.069, %481 ], [ %.069, %468 ], [ %.069, %464 ], [ %.069, %463 ], [ %.069, %462 ], [ %.069, %461 ], [ %.069, %460 ], [ %.069, %448 ], [ %.069, %438 ], [ %.069, %437 ], [ %.069, %426 ], [ %.069, %416 ], [ %.069, %415 ], [ %.069, %398 ], [ %.069, %388 ], [ %.069, %386 ], [ %.069, %375 ], [ %.069, %365 ], [ %.069, %364 ], [ %.069, %363 ], [ %.069, %362 ], [ %.069, %352 ], [ %.069, %342 ], [ %.069, %341 ], [ %.069, %339 ], [ %.069, %328 ], [ %.069, %324 ], [ %.069, %316 ], [ %.069, %312 ], [ %.069, %311 ], [ %.069, %309 ], [ %.069, %308 ], [ %.069, %298 ], [ %.069, %288 ], [ %287, %286 ], [ %.069, %276 ], [ %.069, %272 ], [ %.neg83, %265 ], [ %.069, %263 ], [ %.069, %251 ], [ %.069, %241 ], [ %.069, %240 ], [ %.069, %230 ], [ %.069, %220 ], [ %.069, %219 ], [ %.069, %208 ], [ %.069, %198 ], [ %.069, %197 ], [ %.069, %196 ], [ %.069, %174 ], [ %.069, %164 ], [ %.069, %156 ], [ %.069, %154 ], [ %.069, %140 ], [ %.069, %130 ], [ %.069, %126 ], [ %.069, %125 ], [ %.069, %123 ], [ %.069, %122 ], [ %.069, %112 ], [ %.069, %102 ], [ %.069, %91 ], [ %.069, %83 ], [ %.069, %77 ], [ %.069, %73 ], [ %.069, %72 ], [ %.069, %71 ], [ %.069, %67 ], [ %.069, %65 ], [ %.069, %54 ], [ %.069, %44 ], [ %.069, %43 ], [ %.069, %33 ], [ %.069, %23 ], [ %.069, %14 ]
  %.067.be = phi i32 [ %.067, %13 ], [ %.067, %498 ], [ %.067, %497 ], [ %.067, %489 ], [ %.067, %488 ], [ %487, %486 ], [ %.067, %485 ], [ %.067, %484 ], [ %.067, %483 ], [ %.067, %481 ], [ %.067, %468 ], [ %.067, %464 ], [ %.067, %463 ], [ %.067, %462 ], [ %.067, %461 ], [ %.067, %460 ], [ %.067, %448 ], [ %.067, %438 ], [ %.067, %437 ], [ %.067, %426 ], [ %.067, %416 ], [ %.067, %415 ], [ %.067, %398 ], [ %.067, %388 ], [ %.067, %386 ], [ %.067, %375 ], [ %.067, %365 ], [ %.067, %364 ], [ %.067, %363 ], [ %.067, %362 ], [ %.neg81, %352 ], [ %.067, %342 ], [ %.067, %341 ], [ %.067, %339 ], [ %.067, %328 ], [ %.067, %324 ], [ %.067, %316 ], [ %.067, %312 ], [ 0, %311 ], [ %.067, %309 ], [ %.067, %308 ], [ %.067, %298 ], [ %.067, %288 ], [ %.067, %286 ], [ %.067, %276 ], [ %.067, %272 ], [ %.067, %265 ], [ %.067, %263 ], [ %.067, %251 ], [ %.067, %241 ], [ %.067, %240 ], [ %.067, %230 ], [ %.067, %220 ], [ %.067, %219 ], [ %.067, %208 ], [ %.067, %198 ], [ %.067, %197 ], [ %.067, %196 ], [ %.067, %174 ], [ %.067, %164 ], [ %.067, %156 ], [ %.067, %154 ], [ %.067, %140 ], [ %.067, %130 ], [ %.067, %126 ], [ %.067, %125 ], [ %.067, %123 ], [ %.067, %122 ], [ %.067, %112 ], [ %.067, %102 ], [ %.067, %91 ], [ %.067, %83 ], [ %.067, %77 ], [ %.067, %73 ], [ %.067, %72 ], [ %.067, %71 ], [ %.067, %67 ], [ %.067, %65 ], [ %.067, %54 ], [ %.067, %44 ], [ %.067, %43 ], [ %.067, %33 ], [ %.067, %23 ], [ %.067, %14 ]
  %.065.be = phi i32 [ %.065, %13 ], [ %.065, %498 ], [ %.065, %497 ], [ %.065, %489 ], [ %.065, %488 ], [ %.065, %486 ], [ %.065, %485 ], [ %.065, %484 ], [ %.065, %483 ], [ %.065, %481 ], [ %.065, %468 ], [ %.065, %464 ], [ %.065, %463 ], [ %.065, %462 ], [ %.065, %461 ], [ %.065, %460 ], [ %.065, %448 ], [ %.065, %438 ], [ %.065, %437 ], [ %.065, %426 ], [ %.065, %416 ], [ %.065, %415 ], [ %.065, %398 ], [ %.065, %388 ], [ %.065, %386 ], [ %.065, %375 ], [ %.065, %365 ], [ %.065, %364 ], [ %.065, %363 ], [ %.065, %362 ], [ %.065, %352 ], [ %.065, %342 ], [ %.065, %341 ], [ %340, %339 ], [ %.065, %328 ], [ %.065, %324 ], [ %323, %316 ], [ %.065, %312 ], [ %.065, %311 ], [ %.065, %309 ], [ %.065, %308 ], [ %.065, %298 ], [ %.065, %288 ], [ %.065, %286 ], [ %.065, %276 ], [ %.065, %272 ], [ %.065, %265 ], [ %.065, %263 ], [ %.065, %251 ], [ %.065, %241 ], [ %.065, %240 ], [ %.065, %230 ], [ %.065, %220 ], [ %.065, %219 ], [ %.065, %208 ], [ %.065, %198 ], [ %.065, %197 ], [ %.065, %196 ], [ %.065, %174 ], [ %.065, %164 ], [ %.065, %156 ], [ %.065, %154 ], [ %.065, %140 ], [ %.065, %130 ], [ %.065, %126 ], [ %.065, %125 ], [ %.065, %123 ], [ %.065, %122 ], [ %.065, %112 ], [ %.065, %102 ], [ %.065, %91 ], [ %.065, %83 ], [ %.065, %77 ], [ %.065, %73 ], [ %.065, %72 ], [ %.065, %71 ], [ %.065, %67 ], [ %.065, %65 ], [ %.065, %54 ], [ %.065, %44 ], [ %.065, %43 ], [ %.065, %33 ], [ %.065, %23 ], [ %.065, %14 ]
  %.063.be = phi i32 [ %.063, %13 ], [ %.063, %498 ], [ %.neg, %497 ], [ %.063, %489 ], [ %.063, %488 ], [ %.063, %486 ], [ %.063, %485 ], [ %.063, %484 ], [ %.063, %483 ], [ %.063, %481 ], [ %.063, %468 ], [ %.063, %464 ], [ %.063, %463 ], [ %.063, %462 ], [ %.063, %461 ], [ %.063, %460 ], [ %.063, %448 ], [ %.063, %438 ], [ %.063, %437 ], [ %427, %426 ], [ %.063, %416 ], [ %.063, %415 ], [ %.063, %398 ], [ %.063, %388 ], [ %.063, %386 ], [ %.063, %375 ], [ %.063, %365 ], [ 0, %364 ], [ %.063, %363 ], [ %.063, %362 ], [ %.063, %352 ], [ %.063, %342 ], [ %.063, %341 ], [ %.063, %339 ], [ %.063, %328 ], [ %.063, %324 ], [ %.063, %316 ], [ %.063, %312 ], [ %.063, %311 ], [ %.063, %309 ], [ %.063, %308 ], [ %.063, %298 ], [ %.063, %288 ], [ %.063, %286 ], [ %.063, %276 ], [ %.063, %272 ], [ %.063, %265 ], [ %.063, %263 ], [ %.063, %251 ], [ %.063, %241 ], [ %.063, %240 ], [ %.063, %230 ], [ %.063, %220 ], [ %.063, %219 ], [ %.063, %208 ], [ %.063, %198 ], [ %.063, %197 ], [ %.063, %196 ], [ %.063, %174 ], [ %.063, %164 ], [ %.063, %156 ], [ %.063, %154 ], [ %.063, %140 ], [ %.063, %130 ], [ %.063, %126 ], [ %.063, %125 ], [ %.063, %123 ], [ %.063, %122 ], [ %.063, %112 ], [ %.063, %102 ], [ %.063, %91 ], [ %.063, %83 ], [ %.063, %77 ], [ %.063, %73 ], [ %.063, %72 ], [ %.063, %71 ], [ %.063, %67 ], [ %.063, %65 ], [ %.063, %54 ], [ %.063, %44 ], [ %.063, %43 ], [ %.063, %33 ], [ %.063, %23 ], [ %.063, %14 ]
  %.0.be = phi i32 [ %.0, %13 ], [ 1502440920, %498 ], [ -1995122520, %497 ], [ -1168822666, %489 ], [ 1511227352, %488 ], [ 877507432, %486 ], [ -1194889874, %485 ], [ 371784631, %484 ], [ 1719315553, %483 ], [ 250555767, %481 ], [ -1767714288, %468 ], [ 1688576575, %464 ], [ -35555298, %463 ], [ 434241455, %462 ], [ 1112716812, %461 ], [ -524914544, %460 ], [ %459, %448 ], [ %447, %438 ], [ -1774604009, %437 ], [ %436, %426 ], [ %425, %416 ], [ -382058558, %415 ], [ %414, %398 ], [ %397, %388 ], [ %387, %386 ], [ %385, %375 ], [ %374, %365 ], [ -1774604009, %364 ], [ -124828198, %363 ], [ 1348239289, %362 ], [ %361, %352 ], [ %351, %342 ], [ 10485154, %341 ], [ 564444944, %339 ], [ 1858481933, %328 ], [ %327, %324 ], [ 564444944, %316 ], [ %315, %312 ], [ 1348239289, %311 ], [ 1578383820, %309 ], [ 1611014526, %308 ], [ %307, %298 ], [ %297, %288 ], [ 1090232244, %286 ], [ -1490339447, %276 ], [ %275, %272 ], [ 1090232244, %265 ], [ %264, %263 ], [ %262, %251 ], [ %250, %241 ], [ 1578383820, %240 ], [ %239, %230 ], [ %229, %220 ], [ 1699836897, %219 ], [ %218, %208 ], [ %207, %198 ], [ -84563340, %197 ], [ -873949855, %196 ], [ %195, %174 ], [ %173, %164 ], [ -873949855, %156 ], [ %155, %154 ], [ %153, %140 ], [ %139, %130 ], [ %129, %126 ], [ 1699836897, %125 ], [ 79642576, %123 ], [ 692971278, %122 ], [ %121, %112 ], [ %111, %102 ], [ 937362521, %91 ], [ 937362521, %83 ], [ %82, %77 ], [ %76, %73 ], [ 79642576, %72 ], [ 1153891976, %71 ], [ -1713766364, %67 ], [ %66, %65 ], [ %64, %54 ], [ %53, %44 ], [ 1153891976, %43 ], [ %42, %33 ], [ %32, %23 ], [ %21, %14 ]
  br label %13

14:                                               ; preds = %13
  %15 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %5)
  %16 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %15, i32* nonnull dereferenceable(4) %6)
  %17 = load i32, i32* %5, align 4
  %18 = load i32, i32* %6, align 4
  %19 = sub i32 0, %18
  %20 = icmp eq i32 %17, %19
  %21 = select i1 %20, i32 -1058384199, i32 1829564117
  br label %.backedge

22:                                               ; preds = %13
  ret i32 0

23:                                               ; preds = %13
  %24 = load i32, i32* @x.8, align 4
  %25 = load i32, i32* @y.9, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 1112716812, i32 473402168
  br label %.backedge

33:                                               ; preds = %13
  %34 = load i32, i32* @x.8, align 4
  %35 = load i32, i32* @y.9, align 4
  %36 = add i32 %34, -1
  %37 = mul i32 %36, %34
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %40, %39
  %42 = select i1 %41, i32 180459784, i32 473402168
  br label %.backedge

43:                                               ; preds = %13
  br label %.backedge

44:                                               ; preds = %13
  %45 = load i32, i32* @x.8, align 4
  %46 = load i32, i32* @y.9, align 4
  %47 = add i32 %45, -1
  %48 = mul i32 %47, %45
  %49 = and i32 %48, 1
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %51, %50
  %53 = select i1 %52, i32 434241455, i32 -960029939
  br label %.backedge

54:                                               ; preds = %13
  %55 = icmp slt i32 %.077, 1505
  store i1 %55, i1* %4, align 1
  %56 = load i32, i32* @x.8, align 4
  %57 = load i32, i32* @y.9, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 -1833158471, i32 -960029939
  br label %.backedge

65:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %66 = select i1 %.0..0..0., i32 1215655891, i32 -1575293632
  br label %.backedge

67:                                               ; preds = %13
  %68 = sext i32 %.077 to i64
  %69 = getelementptr inbounds [1505 x i64], [1505 x i64]* %9, i64 0, i64 %68
  store i64 0, i64* %69, align 8
  %70 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %68
  store i64 0, i64* %70, align 8
  br label %.backedge

71:                                               ; preds = %13
  %.neg84 = add i32 %.077, 1
  br label %.backedge

72:                                               ; preds = %13
  store i32 0, i32* %11, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1500005 x i64], [1500005 x i64]* @hsum2, i64 0, i64 0), i64* getelementptr inbounds ([1500005 x i64], [1500005 x i64]* @hsum2, i64 1, i64 0), i32* nonnull dereferenceable(4) %11)
  store i32 0, i32* %12, align 4
  call void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* getelementptr inbounds ([1500005 x i64], [1500005 x i64]* @wsum2, i64 0, i64 0), i64* getelementptr inbounds ([1500005 x i64], [1500005 x i64]* @wsum2, i64 1, i64 0), i32* nonnull dereferenceable(4) %12)
  br label %.backedge

73:                                               ; preds = %13
  %74 = load i32, i32* %5, align 4
  %75 = icmp slt i32 %.075, %74
  %76 = select i1 %75, i32 -809955795, i32 -312567275
  br label %.backedge

77:                                               ; preds = %13
  %78 = sext i32 %.075 to i64
  %79 = getelementptr inbounds [1505 x i32], [1505 x i32]* %7, i64 0, i64 %78
  %80 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %79)
  %81 = icmp eq i32 %.075, 0
  %82 = select i1 %81, i32 1755478467, i32 -1555361744
  br label %.backedge

83:                                               ; preds = %13
  %84 = sext i32 %.075 to i64
  %85 = getelementptr inbounds [1505 x i32], [1505 x i32]* %7, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [1505 x i64], [1505 x i64]* %9, i64 0, i64 %84
  %89 = load i64, i64* %88, align 8
  %90 = add i64 %89, %87
  store i64 %90, i64* %88, align 8
  br label %.backedge

91:                                               ; preds = %13
  %92 = add i32 %.075, -1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [1505 x i64], [1505 x i64]* %9, i64 0, i64 %93
  %95 = load i64, i64* %94, align 8
  %96 = sext i32 %.075 to i64
  %97 = getelementptr inbounds [1505 x i32], [1505 x i32]* %7, i64 0, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  %100 = add i64 %95, %99
  %101 = getelementptr inbounds [1505 x i64], [1505 x i64]* %9, i64 0, i64 %96
  store i64 %100, i64* %101, align 8
  br label %.backedge

102:                                              ; preds = %13
  %103 = load i32, i32* @x.8, align 4
  %104 = load i32, i32* @y.9, align 4
  %105 = add i32 %103, -1
  %106 = mul i32 %105, %103
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %109, %108
  %111 = select i1 %110, i32 -35555298, i32 118359405
  br label %.backedge

112:                                              ; preds = %13
  %113 = load i32, i32* @x.8, align 4
  %114 = load i32, i32* @y.9, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 320533521, i32 118359405
  br label %.backedge

122:                                              ; preds = %13
  br label %.backedge

123:                                              ; preds = %13
  %124 = add i32 %.075, 1
  br label %.backedge

125:                                              ; preds = %13
  br label %.backedge

126:                                              ; preds = %13
  %127 = load i32, i32* %6, align 4
  %128 = icmp slt i32 %.073, %127
  %129 = select i1 %128, i32 -2005367169, i32 -213917099
  br label %.backedge

130:                                              ; preds = %13
  %131 = load i32, i32* @x.8, align 4
  %132 = load i32, i32* @y.9, align 4
  %133 = add i32 %131, -1
  %134 = mul i32 %133, %131
  %135 = and i32 %134, 1
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %137, %136
  %139 = select i1 %138, i32 1688576575, i32 -291363527
  br label %.backedge

140:                                              ; preds = %13
  %141 = sext i32 %.073 to i64
  %142 = getelementptr inbounds [1505 x i32], [1505 x i32]* %8, i64 0, i64 %141
  %143 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %142)
  %144 = icmp eq i32 %.073, 0
  store i1 %144, i1* %3, align 1
  %145 = load i32, i32* @x.8, align 4
  %146 = load i32, i32* @y.9, align 4
  %147 = add i32 %145, -1
  %148 = mul i32 %147, %145
  %149 = and i32 %148, 1
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %151, %150
  %153 = select i1 %152, i32 -1770666935, i32 -291363527
  br label %.backedge

154:                                              ; preds = %13
  %.0..0..0.60 = load volatile i1, i1* %3, align 1
  %155 = select i1 %.0..0..0.60, i32 -1701349266, i32 743866066
  br label %.backedge

156:                                              ; preds = %13
  %157 = sext i32 %.073 to i64
  %158 = getelementptr inbounds [1505 x i32], [1505 x i32]* %8, i64 0, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %157
  %162 = load i64, i64* %161, align 8
  %163 = add i64 %162, %160
  store i64 %163, i64* %161, align 8
  br label %.backedge

164:                                              ; preds = %13
  %165 = load i32, i32* @x.8, align 4
  %166 = load i32, i32* @y.9, align 4
  %167 = add i32 %165, -1
  %168 = mul i32 %167, %165
  %169 = and i32 %168, 1
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %171, %170
  %173 = select i1 %172, i32 -1767714288, i32 453619756
  br label %.backedge

174:                                              ; preds = %13
  %175 = add i32 %.073, -1
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %176
  %178 = load i64, i64* %177, align 8
  %179 = sext i32 %.073 to i64
  %180 = getelementptr inbounds [1505 x i32], [1505 x i32]* %8, i64 0, i64 %179
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  %183 = add i64 %178, %182
  %184 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %179
  %185 = load i64, i64* %184, align 8
  %186 = add i64 %183, %185
  store i64 %186, i64* %184, align 8
  %187 = load i32, i32* @x.8, align 4
  %188 = load i32, i32* @y.9, align 4
  %189 = add i32 %187, -1
  %190 = mul i32 %189, %187
  %191 = and i32 %190, 1
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %193, %192
  %195 = select i1 %194, i32 398206000, i32 453619756
  br label %.backedge

196:                                              ; preds = %13
  br label %.backedge

197:                                              ; preds = %13
  br label %.backedge

198:                                              ; preds = %13
  %199 = load i32, i32* @x.8, align 4
  %200 = load i32, i32* @y.9, align 4
  %201 = add i32 %199, -1
  %202 = mul i32 %201, %199
  %203 = and i32 %202, 1
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %205, %204
  %207 = select i1 %206, i32 250555767, i32 -724895658
  br label %.backedge

208:                                              ; preds = %13
  %209 = add i32 %.073, 1
  %210 = load i32, i32* @x.8, align 4
  %211 = load i32, i32* @y.9, align 4
  %212 = add i32 %210, -1
  %213 = mul i32 %212, %210
  %214 = and i32 %213, 1
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %216, %215
  %218 = select i1 %217, i32 1331450627, i32 -724895658
  br label %.backedge

219:                                              ; preds = %13
  br label %.backedge

220:                                              ; preds = %13
  %221 = load i32, i32* @x.8, align 4
  %222 = load i32, i32* @y.9, align 4
  %223 = add i32 %221, -1
  %224 = mul i32 %223, %221
  %225 = and i32 %224, 1
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %227, %226
  %229 = select i1 %228, i32 1719315553, i32 599705522
  br label %.backedge

230:                                              ; preds = %13
  %231 = load i32, i32* @x.8, align 4
  %232 = load i32, i32* @y.9, align 4
  %233 = add i32 %231, -1
  %234 = mul i32 %233, %231
  %235 = and i32 %234, 1
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %237, %236
  %239 = select i1 %238, i32 -1697231670, i32 599705522
  br label %.backedge

240:                                              ; preds = %13
  br label %.backedge

241:                                              ; preds = %13
  %242 = load i32, i32* @x.8, align 4
  %243 = load i32, i32* @y.9, align 4
  %244 = add i32 %242, -1
  %245 = mul i32 %244, %242
  %246 = and i32 %245, 1
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %248, %247
  %250 = select i1 %249, i32 371784631, i32 -2121127566
  br label %.backedge

251:                                              ; preds = %13
  %252 = load i32, i32* %5, align 4
  %253 = icmp slt i32 %.071, %252
  store i1 %253, i1* %2, align 1
  %254 = load i32, i32* @x.8, align 4
  %255 = load i32, i32* @y.9, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 989256590, i32 -2121127566
  br label %.backedge

263:                                              ; preds = %13
  %.0..0..0.61 = load volatile i1, i1* %2, align 1
  %264 = select i1 %.0..0..0.61, i32 75687624, i32 -520630298
  br label %.backedge

265:                                              ; preds = %13
  %266 = sext i32 %.071 to i64
  %267 = getelementptr inbounds [1505 x i64], [1505 x i64]* %9, i64 0, i64 %266
  %268 = load i64, i64* %267, align 8
  %269 = getelementptr inbounds [1500005 x i64], [1500005 x i64]* @hsum2, i64 0, i64 %268
  %270 = load i64, i64* %269, align 8
  %271 = add i64 %270, 1
  store i64 %271, i64* %269, align 8
  %.neg83 = add i32 %.071, 1
  br label %.backedge

272:                                              ; preds = %13
  %273 = load i32, i32* %5, align 4
  %274 = icmp slt i32 %.069, %273
  %275 = select i1 %274, i32 153940842, i32 1976371329
  br label %.backedge

276:                                              ; preds = %13
  %277 = sext i32 %.069 to i64
  %278 = getelementptr inbounds [1505 x i64], [1505 x i64]* %9, i64 0, i64 %277
  %279 = load i64, i64* %278, align 8
  %280 = sext i32 %.071 to i64
  %281 = getelementptr inbounds [1505 x i64], [1505 x i64]* %9, i64 0, i64 %280
  %282 = load i64, i64* %281, align 8
  %283 = sub i64 %279, %282
  %284 = getelementptr inbounds [1500005 x i64], [1500005 x i64]* @hsum2, i64 0, i64 %283
  %285 = load i64, i64* %284, align 8
  %.neg82 = add i64 %285, 1
  store i64 %.neg82, i64* %284, align 8
  br label %.backedge

286:                                              ; preds = %13
  %287 = add i32 %.069, 1
  br label %.backedge

288:                                              ; preds = %13
  %289 = load i32, i32* @x.8, align 4
  %290 = load i32, i32* @y.9, align 4
  %291 = add i32 %289, -1
  %292 = mul i32 %291, %289
  %293 = and i32 %292, 1
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %295, %294
  %297 = select i1 %296, i32 -1194889874, i32 795044620
  br label %.backedge

298:                                              ; preds = %13
  %299 = load i32, i32* @x.8, align 4
  %300 = load i32, i32* @y.9, align 4
  %301 = add i32 %299, -1
  %302 = mul i32 %301, %299
  %303 = and i32 %302, 1
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %305, %304
  %307 = select i1 %306, i32 -982208277, i32 795044620
  br label %.backedge

308:                                              ; preds = %13
  br label %.backedge

309:                                              ; preds = %13
  %310 = add i32 %.071, 1
  br label %.backedge

311:                                              ; preds = %13
  br label %.backedge

312:                                              ; preds = %13
  %313 = load i32, i32* %6, align 4
  %314 = icmp slt i32 %.067, %313
  %315 = select i1 %314, i32 -1587482223, i32 -588110395
  br label %.backedge

316:                                              ; preds = %13
  %317 = sext i32 %.067 to i64
  %318 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %317
  %319 = load i64, i64* %318, align 8
  %320 = getelementptr inbounds [1500005 x i64], [1500005 x i64]* @wsum2, i64 0, i64 %319
  %321 = load i64, i64* %320, align 8
  %322 = add i64 %321, 1
  store i64 %322, i64* %320, align 8
  %323 = add i32 %.067, 1
  br label %.backedge

324:                                              ; preds = %13
  %325 = load i32, i32* %6, align 4
  %326 = icmp slt i32 %.065, %325
  %327 = select i1 %326, i32 -1046680922, i32 2042480827
  br label %.backedge

328:                                              ; preds = %13
  %329 = sext i32 %.065 to i64
  %330 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %329
  %331 = load i64, i64* %330, align 8
  %332 = sext i32 %.067 to i64
  %333 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %332
  %334 = load i64, i64* %333, align 8
  %335 = sub i64 %331, %334
  %336 = getelementptr inbounds [1500005 x i64], [1500005 x i64]* @wsum2, i64 0, i64 %335
  %337 = load i64, i64* %336, align 8
  %338 = add i64 %337, 1
  store i64 %338, i64* %336, align 8
  br label %.backedge

339:                                              ; preds = %13
  %340 = add i32 %.065, 1
  br label %.backedge

341:                                              ; preds = %13
  br label %.backedge

342:                                              ; preds = %13
  %343 = load i32, i32* @x.8, align 4
  %344 = load i32, i32* @y.9, align 4
  %345 = add i32 %343, -1
  %346 = mul i32 %345, %343
  %347 = and i32 %346, 1
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %349, %348
  %351 = select i1 %350, i32 877507432, i32 -1365706234
  br label %.backedge

352:                                              ; preds = %13
  %.neg81 = add i32 %.067, 1
  %353 = load i32, i32* @x.8, align 4
  %354 = load i32, i32* @y.9, align 4
  %355 = add i32 %353, -1
  %356 = mul i32 %355, %353
  %357 = and i32 %356, 1
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %359, %358
  %361 = select i1 %360, i32 -1838635456, i32 -1365706234
  br label %.backedge

362:                                              ; preds = %13
  br label %.backedge

363:                                              ; preds = %13
  br label %.backedge

364:                                              ; preds = %13
  br label %.backedge

365:                                              ; preds = %13
  %366 = load i32, i32* @x.8, align 4
  %367 = load i32, i32* @y.9, align 4
  %368 = add i32 %366, -1
  %369 = mul i32 %368, %366
  %370 = and i32 %369, 1
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %372, %371
  %374 = select i1 %373, i32 1511227352, i32 1124035000
  br label %.backedge

375:                                              ; preds = %13
  %376 = icmp slt i32 %.063, 1500005
  store i1 %376, i1* %1, align 1
  %377 = load i32, i32* @x.8, align 4
  %378 = load i32, i32* @y.9, align 4
  %379 = add i32 %377, -1
  %380 = mul i32 %379, %377
  %381 = and i32 %380, 1
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %383, %382
  %385 = select i1 %384, i32 1599737604, i32 1124035000
  br label %.backedge

386:                                              ; preds = %13
  %.0..0..0.62 = load volatile i1, i1* %1, align 1
  %387 = select i1 %.0..0..0.62, i32 -553369069, i32 2059849907
  br label %.backedge

388:                                              ; preds = %13
  %389 = load i32, i32* @x.8, align 4
  %390 = load i32, i32* @y.9, align 4
  %391 = add i32 %389, -1
  %392 = mul i32 %391, %389
  %393 = and i32 %392, 1
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %395, %394
  %397 = select i1 %396, i32 -1168822666, i32 -824403229
  br label %.backedge

398:                                              ; preds = %13
  %399 = sext i32 %.063 to i64
  %400 = getelementptr inbounds [1500005 x i64], [1500005 x i64]* @hsum2, i64 0, i64 %399
  %401 = load i64, i64* %400, align 8
  %402 = getelementptr inbounds [1500005 x i64], [1500005 x i64]* @wsum2, i64 0, i64 %399
  %403 = load i64, i64* %402, align 8
  %404 = mul nsw i64 %403, %401
  %405 = add i64 %404, %.079
  %406 = load i32, i32* @x.8, align 4
  %407 = load i32, i32* @y.9, align 4
  %408 = add i32 %406, -1
  %409 = mul i32 %408, %406
  %410 = and i32 %409, 1
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %412, %411
  %414 = select i1 %413, i32 742243273, i32 -824403229
  br label %.backedge

415:                                              ; preds = %13
  br label %.backedge

416:                                              ; preds = %13
  %417 = load i32, i32* @x.8, align 4
  %418 = load i32, i32* @y.9, align 4
  %419 = add i32 %417, -1
  %420 = mul i32 %419, %417
  %421 = and i32 %420, 1
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %423, %422
  %425 = select i1 %424, i32 -1995122520, i32 1225017647
  br label %.backedge

426:                                              ; preds = %13
  %427 = add i32 %.063, 1
  %428 = load i32, i32* @x.8, align 4
  %429 = load i32, i32* @y.9, align 4
  %430 = add i32 %428, -1
  %431 = mul i32 %430, %428
  %432 = and i32 %431, 1
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %434, %433
  %436 = select i1 %435, i32 -1713032918, i32 1225017647
  br label %.backedge

437:                                              ; preds = %13
  br label %.backedge

438:                                              ; preds = %13
  %439 = load i32, i32* @x.8, align 4
  %440 = load i32, i32* @y.9, align 4
  %441 = add i32 %439, -1
  %442 = mul i32 %441, %439
  %443 = and i32 %442, 1
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %445, %444
  %447 = select i1 %446, i32 1502440920, i32 -1994821631
  br label %.backedge

448:                                              ; preds = %13
  %449 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %.079)
  %450 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %449, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %451 = load i32, i32* @x.8, align 4
  %452 = load i32, i32* @y.9, align 4
  %453 = add i32 %451, -1
  %454 = mul i32 %453, %451
  %455 = and i32 %454, 1
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %457, %456
  %459 = select i1 %458, i32 272913669, i32 -1994821631
  br label %.backedge

460:                                              ; preds = %13
  br label %.backedge

461:                                              ; preds = %13
  br label %.backedge

462:                                              ; preds = %13
  br label %.backedge

463:                                              ; preds = %13
  br label %.backedge

464:                                              ; preds = %13
  %465 = sext i32 %.073 to i64
  %466 = getelementptr inbounds [1505 x i32], [1505 x i32]* %8, i64 0, i64 %465
  %467 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %466)
  br label %.backedge

468:                                              ; preds = %13
  %469 = add i32 %.073, -1
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %470
  %472 = load i64, i64* %471, align 8
  %473 = sext i32 %.073 to i64
  %474 = getelementptr inbounds [1505 x i32], [1505 x i32]* %8, i64 0, i64 %473
  %475 = load i32, i32* %474, align 4
  %476 = sext i32 %475 to i64
  %477 = add i64 %472, %476
  %478 = getelementptr inbounds [1505 x i64], [1505 x i64]* %10, i64 0, i64 %473
  %479 = load i64, i64* %478, align 8
  %480 = add i64 %477, %479
  store i64 %480, i64* %478, align 8
  br label %.backedge

481:                                              ; preds = %13
  %482 = add i32 %.073, 1
  br label %.backedge

483:                                              ; preds = %13
  br label %.backedge

484:                                              ; preds = %13
  br label %.backedge

485:                                              ; preds = %13
  br label %.backedge

486:                                              ; preds = %13
  %487 = add i32 %.067, 1
  br label %.backedge

488:                                              ; preds = %13
  br label %.backedge

489:                                              ; preds = %13
  %490 = sext i32 %.063 to i64
  %491 = getelementptr inbounds [1500005 x i64], [1500005 x i64]* @hsum2, i64 0, i64 %490
  %492 = load i64, i64* %491, align 8
  %493 = getelementptr inbounds [1500005 x i64], [1500005 x i64]* @wsum2, i64 0, i64 %490
  %494 = load i64, i64* %493, align 8
  %495 = mul nsw i64 %494, %492
  %496 = add i64 %495, %.079
  br label %.backedge

497:                                              ; preds = %13
  %.neg = add i32 %.063, 1
  br label %.backedge

498:                                              ; preds = %13
  %499 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %.079)
  %500 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %499, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt4fillIPxiEvT_S1_RKT0_(i64* %0, i64* %1, i32* dereferenceable(4) %2) local_unnamed_addr #0 comdat {
  %4 = tail call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %0)
  %5 = tail call i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %1)
  tail call void @_ZSt8__fill_aIPxiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i64* %4, i64* %5, i32* nonnull dereferenceable(4) %2)
  ret void
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare double @acos(double) local_unnamed_addr #7

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt8__fill_aIPxiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i64* %0, i64* %1, i32* dereferenceable(4) %2) local_unnamed_addr #5 comdat {
  %4 = alloca i32*, align 8
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.12, align 4
  %10 = load i32, i32* @y.13, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %3
  %.0 = phi i32 [ -534303093, %3 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -534303093, label %17
    i32 1857604604, label %20
    i32 -651555509, label %34
    i32 1876183840, label %35
    i32 -243457156, label %39
    i32 890975208, label %43
    i32 -370707786, label %46
    i32 -1477467502, label %47
  ]

.backedge:                                        ; preds = %16, %47, %43, %39, %35, %34, %20, %17
  %.0.be = phi i32 [ %.0, %16 ], [ 1857604604, %47 ], [ 1876183840, %43 ], [ 890975208, %39 ], [ %38, %35 ], [ 1876183840, %34 ], [ %33, %20 ], [ %19, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 1857604604, i32 -1477467502
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i64*, align 8
  store i64** %21, i64*** %6, align 8
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %5, align 8
  %23 = alloca i32, align 4
  store i32* %23, i32** %4, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %6, align 8
  store i64* %0, i64** %.0..0..0.2, align 8
  %.0..0..0.7 = load volatile i64**, i64*** %5, align 8
  store i64* %1, i64** %.0..0..0.7, align 8
  %24 = load i32, i32* %2, align 4
  %.0..0..0.9 = load volatile i32*, i32** %4, align 8
  store i32 %24, i32* %.0..0..0.9, align 4
  %25 = load i32, i32* @x.12, align 4
  %26 = load i32, i32* @y.13, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 -651555509, i32 -1477467502
  br label %.backedge

34:                                               ; preds = %16
  br label %.backedge

35:                                               ; preds = %16
  %.0..0..0.3 = load volatile i64**, i64*** %6, align 8
  %36 = load i64*, i64** %.0..0..0.3, align 8
  %.0..0..0.8 = load volatile i64**, i64*** %5, align 8
  %37 = load i64*, i64** %.0..0..0.8, align 8
  %.not = icmp eq i64* %36, %37
  %38 = select i1 %.not, i32 -370707786, i32 -243457156
  br label %.backedge

39:                                               ; preds = %16
  %.0..0..0.10 = load volatile i32*, i32** %4, align 8
  %40 = load i32, i32* %.0..0..0.10, align 4
  %41 = sext i32 %40 to i64
  %.0..0..0.4 = load volatile i64**, i64*** %6, align 8
  %42 = load i64*, i64** %.0..0..0.4, align 8
  store i64 %41, i64* %42, align 8
  br label %.backedge

43:                                               ; preds = %16
  %.0..0..0.5 = load volatile i64**, i64*** %6, align 8
  %44 = load i64*, i64** %.0..0..0.5, align 8
  %45 = getelementptr inbounds i64, i64* %44, i64 1
  %.0..0..0.6 = load volatile i64**, i64*** %6, align 8
  store i64* %45, i64** %.0..0..0.6, align 8
  br label %.backedge

46:                                               ; preds = %16
  ret void

47:                                               ; preds = %16
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt12__niter_baseIPxENSt11_Niter_baseIT_E13iterator_typeES2_(i64* %0) local_unnamed_addr #0 comdat {
  %2 = alloca i64*, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.14, align 4
  %6 = load i32, i32* @y.15, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  br label %.outer

.outer:                                           ; preds = %16, %1
  %.ph = phi i64* [ %17, %16 ], [ undef, %1 ]
  %.0.ph = phi i32 [ %26, %16 ], [ 1077997008, %1 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %12

12:                                               ; preds = %.outer3, %12
  switch i32 %.0.ph4, label %12 [
    i32 1077997008, label %13
    i32 1290716720, label %16
    i32 -1634824540, label %27
    i32 -1169300518, label %28
  ]

13:                                               ; preds = %12
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %14 = or i1 %.0..0..0., %.0..0..0.1
  %15 = select i1 %14, i32 1290716720, i32 -1169300518
  br label %.outer3.backedge

16:                                               ; preds = %12
  %17 = tail call i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %0)
  %18 = load i32, i32* @x.14, align 4
  %19 = load i32, i32* @y.15, align 4
  %20 = add i32 %18, -1
  %21 = mul i32 %20, %18
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %24, %23
  %26 = select i1 %25, i32 -1634824540, i32 -1169300518
  br label %.outer

27:                                               ; preds = %12
  store i64* %.ph, i64** %2, align 8
  %.0..0..0.2 = load volatile i64*, i64** %2, align 8
  ret i64* %.0..0..0.2

28:                                               ; preds = %12
  %29 = tail call i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %0)
  br label %.outer3.backedge

.outer3.backedge:                                 ; preds = %28, %13
  %.0.ph4.be = phi i32 [ %15, %13 ], [ 1290716720, %28 ]
  br label %.outer3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNSt10_Iter_baseIPxLb0EE7_S_baseES0_(i64* %0) local_unnamed_addr #5 comdat align 2 {
  %2 = alloca i64*, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.16, align 4
  %6 = load i32, i32* @y.17, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  %12 = or i1 %11, %10
  %13 = select i1 %12, i32 133422742, i32 -1018592419
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.0.ph = phi i32 [ 958913052, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %14

14:                                               ; preds = %.outer, %14
  switch i32 %.0.ph, label %14 [
    i32 958913052, label %15
    i32 -93492303, label %.outer.backedge
    i32 133422742, label %18
    i32 -1018592419, label %19
  ]

15:                                               ; preds = %14
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %16 = or i1 %.0..0..0., %.0..0..0.1
  %17 = select i1 %16, i32 -93492303, i32 -1018592419
  br label %.outer.backedge

18:                                               ; preds = %14
  store i64* %0, i64** %2, align 8
  %.0..0..0.2 = load volatile i64*, i64** %2, align 8
  ret i64* %.0..0..0.2

19:                                               ; preds = %14
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %14, %19, %15
  %.0.ph.be = phi i32 [ %17, %15 ], [ -93492303, %19 ], [ %13, %14 ]
  br label %.outer
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s726944449.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  tail call fastcc void @__cxx_global_var_init.1()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { mustprogress nofree nosync nounwind readnone willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
