; ModuleID = 'build_ollvm/programs/p01140/s649027393.ll'
source_filename = "Project_CodeNet_C++1400/p01140/s649027393.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@m = global i32 0, align 4
@h = global [1600 x i32] zeroinitializer, align 16
@w = global [1600 x i32] zeroinitializer, align 16
@mh = local_unnamed_addr global [1600000 x i32] zeroinitializer, align 16
@mw = local_unnamed_addr global [1600000 x i32] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s649027393.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 672801566, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 672801566, label %11
    i32 -405238315, label %14
    i32 -449826492, label %25
    i32 477571029, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -405238315, i32 477571029
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -449826492, i32 477571029
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -405238315, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind uwtable
define i64 @_Z3gcdxx(i64 %0, i64 %1) local_unnamed_addr #4 {
  %3 = alloca i64, align 8
  %4 = alloca i1, align 1
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.1, align 4
  %10 = load i32, i32* @y.2, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %2
  %.013 = phi i32 [ -1817551661, %2 ], [ %.013.be, %.backedge ]
  %.0 = phi i64 [ undef, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.013, label %.backedge [
    i32 -1817551661, label %17
    i32 657265265, label %20
    i32 1035578650, label %34
    i32 235688083, label %36
    i32 -369542260, label %42
    i32 353727851, label %52
    i32 -1885218633, label %63
    i32 1055727058, label %64
    i32 585576697, label %65
    i32 1179599946, label %66
  ]

.backedge:                                        ; preds = %16, %66, %65, %63, %52, %42, %36, %34, %20, %17
  %.013.be = phi i32 [ %.013, %16 ], [ 353727851, %66 ], [ 657265265, %65 ], [ 1055727058, %63 ], [ %62, %52 ], [ %51, %42 ], [ 1055727058, %36 ], [ %35, %34 ], [ %33, %20 ], [ %19, %17 ]
  %.0.be = phi i64 [ %.0, %16 ], [ %.0, %66 ], [ %.0, %65 ], [ %.0..0..0.12, %63 ], [ %.0, %52 ], [ %.0, %42 ], [ %41, %36 ], [ %.0, %34 ], [ %.0, %20 ], [ %.0, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.2 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.2
  %19 = select i1 %18, i32 657265265, i32 585576697
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i64, align 8
  store i64* %21, i64** %6, align 8
  %22 = alloca i64, align 8
  store i64* %22, i64** %5, align 8
  %.0..0..0.3 = load volatile i64*, i64** %6, align 8
  store i64 %0, i64* %.0..0..0.3, align 8
  %.0..0..0.7 = load volatile i64*, i64** %5, align 8
  store i64 %1, i64* %.0..0..0.7, align 8
  %.0..0..0.8 = load volatile i64*, i64** %5, align 8
  %23 = load i64, i64* %.0..0..0.8, align 8
  %24 = icmp ne i64 %23, 0
  store i1 %24, i1* %4, align 1
  %25 = load i32, i32* @x.1, align 4
  %26 = load i32, i32* @y.2, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 1035578650, i32 585576697
  br label %.backedge

34:                                               ; preds = %16
  %.0..0..0.11 = load volatile i1, i1* %4, align 1
  %35 = select i1 %.0..0..0.11, i32 235688083, i32 -369542260
  br label %.backedge

36:                                               ; preds = %16
  %.0..0..0.9 = load volatile i64*, i64** %5, align 8
  %37 = load i64, i64* %.0..0..0.9, align 8
  %.0..0..0.4 = load volatile i64*, i64** %6, align 8
  %38 = load i64, i64* %.0..0..0.4, align 8
  %.0..0..0.10 = load volatile i64*, i64** %5, align 8
  %39 = load i64, i64* %.0..0..0.10, align 8
  %40 = srem i64 %38, %39
  %41 = call i64 @_Z3gcdxx(i64 %37, i64 %40)
  br label %.backedge

42:                                               ; preds = %16
  %43 = load i32, i32* @x.1, align 4
  %44 = load i32, i32* @y.2, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 353727851, i32 1179599946
  br label %.backedge

52:                                               ; preds = %16
  %.0..0..0.5 = load volatile i64*, i64** %6, align 8
  %53 = load i64, i64* %.0..0..0.5, align 8
  store i64 %53, i64* %3, align 8
  %54 = load i32, i32* @x.1, align 4
  %55 = load i32, i32* @y.2, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 -1885218633, i32 1179599946
  br label %.backedge

63:                                               ; preds = %16
  %.0..0..0.12 = load volatile i64, i64* %3, align 8
  br label %.backedge

64:                                               ; preds = %16
  ret i64 %.0

65:                                               ; preds = %16
  br label %.backedge

66:                                               ; preds = %16
  %.0..0..0.6 = load volatile i64*, i64** %6, align 8
  br label %.backedge
}

; Function Attrs: nofree noinline nounwind uwtable
define i64 @_Z3lcmxx(i64 %0, i64 %1) local_unnamed_addr #4 {
  %3 = tail call i64 @_Z3gcdxx(i64 %0, i64 %1)
  %4 = sdiv i64 %0, %3
  %5 = mul nsw i64 %4, %1
  ret i64 %5
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  br label %3

3:                                                ; preds = %.backedge, %0
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i64 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i64 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i32 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i64 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.050 = phi i32 [ undef, %0 ], [ %.050.be, %.backedge ]
  %.0 = phi i32 [ -1517775403, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1517775403, label %4
    i32 -490759213, label %10
    i32 1846319724, label %14
    i32 -1290451612, label %15
    i32 -1227914720, label %16
    i32 1768563444, label %19
    i32 8830222, label %23
    i32 -605498749, label %24
    i32 1984415587, label %25
    i32 410299205, label %29
    i32 -1220975156, label %39
    i32 2061096619, label %52
    i32 1741972915, label %53
    i32 -561498907, label %55
    i32 -496395224, label %56
    i32 1326967773, label %60
    i32 -373706999, label %70
    i32 -1225154427, label %83
    i32 1098227143, label %84
    i32 1617082569, label %94
    i32 -1671180311, label %105
    i32 1666084742, label %106
    i32 329959496, label %116
    i32 1104989713, label %126
    i32 1541308626, label %127
    i32 501483931, label %137
    i32 329145684, label %149
    i32 -62355625, label %151
    i32 1195754338, label %159
    i32 -578764301, label %163
    i32 -1593987590, label %171
    i32 -878818891, label %181
    i32 -1521139804, label %192
    i32 -467157956, label %193
    i32 -2132326057, label %194
    i32 236496568, label %196
    i32 -475891233, label %197
    i32 -95856806, label %201
    i32 -2003189643, label %211
    i32 -1424860701, label %228
    i32 -697739759, label %229
    i32 -1362230039, label %233
    i32 186288639, label %241
    i32 -905441159, label %242
    i32 -493617944, label %252
    i32 1415652927, label %262
    i32 -1130293210, label %263
    i32 -216747728, label %273
    i32 159374187, label %284
    i32 1076474484, label %285
    i32 2108422280, label %295
    i32 -1200344899, label %305
    i32 -423615768, label %306
    i32 155632273, label %309
    i32 1786991548, label %318
    i32 1813532162, label %320
    i32 -249983310, label %330
    i32 165744455, label %342
    i32 -386506617, label %343
    i32 865750924, label %353
    i32 363098595, label %363
    i32 -664258648, label %364
    i32 1800471416, label %368
    i32 -135984050, label %372
    i32 -644225607, label %373
    i32 -1943388889, label %374
    i32 2028568931, label %375
    i32 1348141577, label %377
    i32 -1751678512, label %385
    i32 922688546, label %386
    i32 -265023911, label %388
    i32 751301675, label %389
    i32 730766142, label %392
  ]

.backedge:                                        ; preds = %3, %392, %389, %388, %386, %385, %377, %375, %374, %373, %372, %368, %364, %353, %343, %342, %330, %320, %318, %309, %306, %305, %295, %285, %284, %273, %263, %262, %252, %242, %241, %233, %229, %228, %211, %201, %197, %196, %194, %193, %192, %181, %171, %163, %159, %151, %149, %137, %127, %126, %116, %106, %105, %94, %84, %83, %70, %60, %56, %55, %53, %52, %39, %29, %25, %24, %23, %19, %16, %15, %14, %10, %4
  %.070.be = phi i32 [ %.070, %3 ], [ %.070, %392 ], [ %.070, %389 ], [ %.070, %388 ], [ %.070, %386 ], [ %.070, %385 ], [ %.070, %377 ], [ %.070, %375 ], [ %.070, %374 ], [ %.070, %373 ], [ %.070, %372 ], [ %.070, %368 ], [ %.070, %364 ], [ %.070, %353 ], [ %.070, %343 ], [ %.070, %342 ], [ %.070, %330 ], [ %.070, %320 ], [ %.070, %318 ], [ %.070, %309 ], [ %.070, %306 ], [ %.070, %305 ], [ %.070, %295 ], [ %.070, %285 ], [ %.070, %284 ], [ %.070, %273 ], [ %.070, %263 ], [ %.070, %262 ], [ %.070, %252 ], [ %.070, %242 ], [ %.070, %241 ], [ %.070, %233 ], [ %.070, %229 ], [ %.070, %228 ], [ %.070, %211 ], [ %.070, %201 ], [ %.070, %197 ], [ %.070, %196 ], [ %.070, %194 ], [ %.070, %193 ], [ %.070, %192 ], [ %.070, %181 ], [ %.070, %171 ], [ %.070, %163 ], [ %.070, %159 ], [ %.070, %151 ], [ %.070, %149 ], [ %.070, %137 ], [ %.070, %127 ], [ %.070, %126 ], [ %.070, %116 ], [ %.070, %106 ], [ %.070, %105 ], [ %.070, %94 ], [ %.070, %84 ], [ %.070, %83 ], [ %.070, %70 ], [ %.070, %60 ], [ %.070, %56 ], [ %.070, %55 ], [ %.070, %53 ], [ %.070, %52 ], [ %.070, %39 ], [ %.070, %29 ], [ %.070, %25 ], [ %.070, %24 ], [ %.neg78, %23 ], [ %.070, %19 ], [ %.070, %16 ], [ 0, %15 ], [ %.070, %14 ], [ %.070, %10 ], [ %.070, %4 ]
  %.068.be = phi i32 [ %.068, %3 ], [ %.068, %392 ], [ %.068, %389 ], [ %.068, %388 ], [ %.068, %386 ], [ %.068, %385 ], [ %.068, %377 ], [ %.068, %375 ], [ %.068, %374 ], [ %.068, %373 ], [ %.068, %372 ], [ %.068, %368 ], [ %.068, %364 ], [ %.068, %353 ], [ %.068, %343 ], [ %.068, %342 ], [ %.068, %330 ], [ %.068, %320 ], [ %.068, %318 ], [ %.068, %309 ], [ %.068, %306 ], [ %.068, %305 ], [ %.068, %295 ], [ %.068, %285 ], [ %.068, %284 ], [ %.068, %273 ], [ %.068, %263 ], [ %.068, %262 ], [ %.068, %252 ], [ %.068, %242 ], [ %.068, %241 ], [ %.068, %233 ], [ %.068, %229 ], [ %.068, %228 ], [ %.068, %211 ], [ %.068, %201 ], [ %.068, %197 ], [ %.068, %196 ], [ %.068, %194 ], [ %.068, %193 ], [ %.068, %192 ], [ %.068, %181 ], [ %.068, %171 ], [ %.068, %163 ], [ %.068, %159 ], [ %.068, %151 ], [ %.068, %149 ], [ %.068, %137 ], [ %.068, %127 ], [ %.068, %126 ], [ %.068, %116 ], [ %.068, %106 ], [ %.068, %105 ], [ %.068, %94 ], [ %.068, %84 ], [ %.068, %83 ], [ %.068, %70 ], [ %.068, %60 ], [ %.068, %56 ], [ %.068, %55 ], [ %54, %53 ], [ %.068, %52 ], [ %.068, %39 ], [ %.068, %29 ], [ %.068, %25 ], [ 0, %24 ], [ %.068, %23 ], [ %.068, %19 ], [ %.068, %16 ], [ %.068, %15 ], [ %.068, %14 ], [ %.068, %10 ], [ %.068, %4 ]
  %.066.be = phi i32 [ %.066, %3 ], [ %.066, %392 ], [ %.066, %389 ], [ %.066, %388 ], [ %.066, %386 ], [ %.066, %385 ], [ %.066, %377 ], [ %.066, %375 ], [ %.066, %374 ], [ %.066, %373 ], [ %.neg72, %372 ], [ %.066, %368 ], [ %.066, %364 ], [ %.066, %353 ], [ %.066, %343 ], [ %.066, %342 ], [ %.066, %330 ], [ %.066, %320 ], [ %.066, %318 ], [ %.066, %309 ], [ %.066, %306 ], [ %.066, %305 ], [ %.066, %295 ], [ %.066, %285 ], [ %.066, %284 ], [ %.066, %273 ], [ %.066, %263 ], [ %.066, %262 ], [ %.066, %252 ], [ %.066, %242 ], [ %.066, %241 ], [ %.066, %233 ], [ %.066, %229 ], [ %.066, %228 ], [ %.066, %211 ], [ %.066, %201 ], [ %.066, %197 ], [ %.066, %196 ], [ %.066, %194 ], [ %.066, %193 ], [ %.066, %192 ], [ %.066, %181 ], [ %.066, %171 ], [ %.066, %163 ], [ %.066, %159 ], [ %.066, %151 ], [ %.066, %149 ], [ %.066, %137 ], [ %.066, %127 ], [ %.066, %126 ], [ %.066, %116 ], [ %.066, %106 ], [ %.066, %105 ], [ %95, %94 ], [ %.066, %84 ], [ %.066, %83 ], [ %.066, %70 ], [ %.066, %60 ], [ %.066, %56 ], [ 0, %55 ], [ %.066, %53 ], [ %.066, %52 ], [ %.066, %39 ], [ %.066, %29 ], [ %.066, %25 ], [ %.066, %24 ], [ %.066, %23 ], [ %.066, %19 ], [ %.066, %16 ], [ %.066, %15 ], [ %.066, %14 ], [ %.066, %10 ], [ %.066, %4 ]
  %.064.be = phi i32 [ %.064, %3 ], [ %.064, %392 ], [ %.064, %389 ], [ %.064, %388 ], [ %.064, %386 ], [ %.064, %385 ], [ %.064, %377 ], [ %.064, %375 ], [ %.064, %374 ], [ 0, %373 ], [ %.064, %372 ], [ %.064, %368 ], [ %.064, %364 ], [ %.064, %353 ], [ %.064, %343 ], [ %.064, %342 ], [ %.064, %330 ], [ %.064, %320 ], [ %.064, %318 ], [ %.064, %309 ], [ %.064, %306 ], [ %.064, %305 ], [ %.064, %295 ], [ %.064, %285 ], [ %.064, %284 ], [ %.064, %273 ], [ %.064, %263 ], [ %.064, %262 ], [ %.064, %252 ], [ %.064, %242 ], [ %.064, %241 ], [ %.064, %233 ], [ %.064, %229 ], [ %.064, %228 ], [ %.064, %211 ], [ %.064, %201 ], [ %.064, %197 ], [ %.064, %196 ], [ %195, %194 ], [ %.064, %193 ], [ %.064, %192 ], [ %.064, %181 ], [ %.064, %171 ], [ %.064, %163 ], [ %.064, %159 ], [ %.064, %151 ], [ %.064, %149 ], [ %.064, %137 ], [ %.064, %127 ], [ %.064, %126 ], [ 0, %116 ], [ %.064, %106 ], [ %.064, %105 ], [ %.064, %94 ], [ %.064, %84 ], [ %.064, %83 ], [ %.064, %70 ], [ %.064, %60 ], [ %.064, %56 ], [ %.064, %55 ], [ %.064, %53 ], [ %.064, %52 ], [ %.064, %39 ], [ %.064, %29 ], [ %.064, %25 ], [ %.064, %24 ], [ %.064, %23 ], [ %.064, %19 ], [ %.064, %16 ], [ %.064, %15 ], [ %.064, %14 ], [ %.064, %10 ], [ %.064, %4 ]
  %.062.be = phi i64 [ %.062, %3 ], [ %.062, %392 ], [ %.062, %389 ], [ %.062, %388 ], [ %.062, %386 ], [ %.062, %385 ], [ %.062, %377 ], [ %.062, %375 ], [ %.062, %374 ], [ %.062, %373 ], [ %.062, %372 ], [ %.062, %368 ], [ %.062, %364 ], [ %.062, %353 ], [ %.062, %343 ], [ %.062, %342 ], [ %.062, %330 ], [ %.062, %320 ], [ %.062, %318 ], [ %.062, %309 ], [ %.062, %306 ], [ %.062, %305 ], [ %.062, %295 ], [ %.062, %285 ], [ %.062, %284 ], [ %.062, %273 ], [ %.062, %263 ], [ %.062, %262 ], [ %.062, %252 ], [ %.062, %242 ], [ %.062, %241 ], [ %.062, %233 ], [ %.062, %229 ], [ %.062, %228 ], [ %.062, %211 ], [ %.062, %201 ], [ %.062, %197 ], [ %.062, %196 ], [ %.062, %194 ], [ %.062, %193 ], [ %.062, %192 ], [ %.062, %181 ], [ %.062, %171 ], [ %168, %163 ], [ %.062, %159 ], [ %155, %151 ], [ %.062, %149 ], [ %.062, %137 ], [ %.062, %127 ], [ %.062, %126 ], [ %.062, %116 ], [ %.062, %106 ], [ %.062, %105 ], [ %.062, %94 ], [ %.062, %84 ], [ %.062, %83 ], [ %.062, %70 ], [ %.062, %60 ], [ %.062, %56 ], [ %.062, %55 ], [ %.062, %53 ], [ %.062, %52 ], [ %.062, %39 ], [ %.062, %29 ], [ %.062, %25 ], [ %.062, %24 ], [ %.062, %23 ], [ %.062, %19 ], [ %.062, %16 ], [ %.062, %15 ], [ %.062, %14 ], [ %.062, %10 ], [ %.062, %4 ]
  %.060.be = phi i32 [ %.060, %3 ], [ %.060, %392 ], [ %.060, %389 ], [ %.060, %388 ], [ %.060, %386 ], [ %.060, %385 ], [ %.060, %377 ], [ %376, %375 ], [ %.060, %374 ], [ %.060, %373 ], [ %.060, %372 ], [ %.060, %368 ], [ %.060, %364 ], [ %.060, %353 ], [ %.060, %343 ], [ %.060, %342 ], [ %.060, %330 ], [ %.060, %320 ], [ %.060, %318 ], [ %.060, %309 ], [ %.060, %306 ], [ %.060, %305 ], [ %.060, %295 ], [ %.060, %285 ], [ %.060, %284 ], [ %.060, %273 ], [ %.060, %263 ], [ %.060, %262 ], [ %.060, %252 ], [ %.060, %242 ], [ %.060, %241 ], [ %.060, %233 ], [ %.060, %229 ], [ %.060, %228 ], [ %.060, %211 ], [ %.060, %201 ], [ %.060, %197 ], [ %.060, %196 ], [ %.060, %194 ], [ %.060, %193 ], [ %.060, %192 ], [ %182, %181 ], [ %.060, %171 ], [ %.060, %163 ], [ %.060, %159 ], [ %158, %151 ], [ %.060, %149 ], [ %.060, %137 ], [ %.060, %127 ], [ %.060, %126 ], [ %.060, %116 ], [ %.060, %106 ], [ %.060, %105 ], [ %.060, %94 ], [ %.060, %84 ], [ %.060, %83 ], [ %.060, %70 ], [ %.060, %60 ], [ %.060, %56 ], [ %.060, %55 ], [ %.060, %53 ], [ %.060, %52 ], [ %.060, %39 ], [ %.060, %29 ], [ %.060, %25 ], [ %.060, %24 ], [ %.060, %23 ], [ %.060, %19 ], [ %.060, %16 ], [ %.060, %15 ], [ %.060, %14 ], [ %.060, %10 ], [ %.060, %4 ]
  %.058.be = phi i32 [ %.058, %3 ], [ %.058, %392 ], [ %.058, %389 ], [ %.058, %388 ], [ %387, %386 ], [ %.058, %385 ], [ %.058, %377 ], [ %.058, %375 ], [ %.058, %374 ], [ %.058, %373 ], [ %.058, %372 ], [ %.058, %368 ], [ %.058, %364 ], [ %.058, %353 ], [ %.058, %343 ], [ %.058, %342 ], [ %.058, %330 ], [ %.058, %320 ], [ %.058, %318 ], [ %.058, %309 ], [ %.058, %306 ], [ %.058, %305 ], [ %.058, %295 ], [ %.058, %285 ], [ %.058, %284 ], [ %274, %273 ], [ %.058, %263 ], [ %.058, %262 ], [ %.058, %252 ], [ %.058, %242 ], [ %.058, %241 ], [ %.058, %233 ], [ %.058, %229 ], [ %.058, %228 ], [ %.058, %211 ], [ %.058, %201 ], [ %.058, %197 ], [ 0, %196 ], [ %.058, %194 ], [ %.058, %193 ], [ %.058, %192 ], [ %.058, %181 ], [ %.058, %171 ], [ %.058, %163 ], [ %.058, %159 ], [ %.058, %151 ], [ %.058, %149 ], [ %.058, %137 ], [ %.058, %127 ], [ %.058, %126 ], [ %.058, %116 ], [ %.058, %106 ], [ %.058, %105 ], [ %.058, %94 ], [ %.058, %84 ], [ %.058, %83 ], [ %.058, %70 ], [ %.058, %60 ], [ %.058, %56 ], [ %.058, %55 ], [ %.058, %53 ], [ %.058, %52 ], [ %.058, %39 ], [ %.058, %29 ], [ %.058, %25 ], [ %.058, %24 ], [ %.058, %23 ], [ %.058, %19 ], [ %.058, %16 ], [ %.058, %15 ], [ %.058, %14 ], [ %.058, %10 ], [ %.058, %4 ]
  %.056.be = phi i64 [ %.056, %3 ], [ %.056, %392 ], [ %.056, %389 ], [ %.056, %388 ], [ %.056, %386 ], [ %.056, %385 ], [ %381, %377 ], [ %.056, %375 ], [ %.056, %374 ], [ %.056, %373 ], [ %.056, %372 ], [ %.056, %368 ], [ %.056, %364 ], [ %.056, %353 ], [ %.056, %343 ], [ %.056, %342 ], [ %.056, %330 ], [ %.056, %320 ], [ %.056, %318 ], [ %.056, %309 ], [ %.056, %306 ], [ %.056, %305 ], [ %.056, %295 ], [ %.056, %285 ], [ %.056, %284 ], [ %.056, %273 ], [ %.056, %263 ], [ %.056, %262 ], [ %.056, %252 ], [ %.056, %242 ], [ %.056, %241 ], [ %238, %233 ], [ %.056, %229 ], [ %.056, %228 ], [ %215, %211 ], [ %.056, %201 ], [ %.056, %197 ], [ %.056, %196 ], [ %.056, %194 ], [ %.056, %193 ], [ %.056, %192 ], [ %.056, %181 ], [ %.056, %171 ], [ %.056, %163 ], [ %.056, %159 ], [ %.056, %151 ], [ %.056, %149 ], [ %.056, %137 ], [ %.056, %127 ], [ %.056, %126 ], [ %.056, %116 ], [ %.056, %106 ], [ %.056, %105 ], [ %.056, %94 ], [ %.056, %84 ], [ %.056, %83 ], [ %.056, %70 ], [ %.056, %60 ], [ %.056, %56 ], [ %.056, %55 ], [ %.056, %53 ], [ %.056, %52 ], [ %.056, %39 ], [ %.056, %29 ], [ %.056, %25 ], [ %.056, %24 ], [ %.056, %23 ], [ %.056, %19 ], [ %.056, %16 ], [ %.056, %15 ], [ %.056, %14 ], [ %.056, %10 ], [ %.056, %4 ]
  %.054.be = phi i32 [ %.054, %3 ], [ %.054, %392 ], [ %.054, %389 ], [ %.054, %388 ], [ %.054, %386 ], [ %.054, %385 ], [ %.neg, %377 ], [ %.054, %375 ], [ %.054, %374 ], [ %.054, %373 ], [ %.054, %372 ], [ %.054, %368 ], [ %.054, %364 ], [ %.054, %353 ], [ %.054, %343 ], [ %.054, %342 ], [ %.054, %330 ], [ %.054, %320 ], [ %.054, %318 ], [ %.054, %309 ], [ %.054, %306 ], [ %.054, %305 ], [ %.054, %295 ], [ %.054, %285 ], [ %.054, %284 ], [ %.054, %273 ], [ %.054, %263 ], [ %.054, %262 ], [ %.054, %252 ], [ %.054, %242 ], [ %.neg73, %241 ], [ %.054, %233 ], [ %.054, %229 ], [ %.054, %228 ], [ %.neg75, %211 ], [ %.054, %201 ], [ %.054, %197 ], [ %.054, %196 ], [ %.054, %194 ], [ %.054, %193 ], [ %.054, %192 ], [ %.054, %181 ], [ %.054, %171 ], [ %.054, %163 ], [ %.054, %159 ], [ %.054, %151 ], [ %.054, %149 ], [ %.054, %137 ], [ %.054, %127 ], [ %.054, %126 ], [ %.054, %116 ], [ %.054, %106 ], [ %.054, %105 ], [ %.054, %94 ], [ %.054, %84 ], [ %.054, %83 ], [ %.054, %70 ], [ %.054, %60 ], [ %.054, %56 ], [ %.054, %55 ], [ %.054, %53 ], [ %.054, %52 ], [ %.054, %39 ], [ %.054, %29 ], [ %.054, %25 ], [ %.054, %24 ], [ %.054, %23 ], [ %.054, %19 ], [ %.054, %16 ], [ %.054, %15 ], [ %.054, %14 ], [ %.054, %10 ], [ %.054, %4 ]
  %.052.be = phi i64 [ %.052, %3 ], [ %.052, %392 ], [ %.052, %389 ], [ 0, %388 ], [ %.052, %386 ], [ %.052, %385 ], [ %.052, %377 ], [ %.052, %375 ], [ %.052, %374 ], [ %.052, %373 ], [ %.052, %372 ], [ %.052, %368 ], [ %.052, %364 ], [ %.052, %353 ], [ %.052, %343 ], [ %.052, %342 ], [ %.052, %330 ], [ %.052, %320 ], [ %.052, %318 ], [ %317, %309 ], [ %.052, %306 ], [ %.052, %305 ], [ 0, %295 ], [ %.052, %285 ], [ %.052, %284 ], [ %.052, %273 ], [ %.052, %263 ], [ %.052, %262 ], [ %.052, %252 ], [ %.052, %242 ], [ %.052, %241 ], [ %.052, %233 ], [ %.052, %229 ], [ %.052, %228 ], [ %.052, %211 ], [ %.052, %201 ], [ %.052, %197 ], [ %.052, %196 ], [ %.052, %194 ], [ %.052, %193 ], [ %.052, %192 ], [ %.052, %181 ], [ %.052, %171 ], [ %.052, %163 ], [ %.052, %159 ], [ %.052, %151 ], [ %.052, %149 ], [ %.052, %137 ], [ %.052, %127 ], [ %.052, %126 ], [ %.052, %116 ], [ %.052, %106 ], [ %.052, %105 ], [ %.052, %94 ], [ %.052, %84 ], [ %.052, %83 ], [ %.052, %70 ], [ %.052, %60 ], [ %.052, %56 ], [ %.052, %55 ], [ %.052, %53 ], [ %.052, %52 ], [ %.052, %39 ], [ %.052, %29 ], [ %.052, %25 ], [ %.052, %24 ], [ %.052, %23 ], [ %.052, %19 ], [ %.052, %16 ], [ %.052, %15 ], [ %.052, %14 ], [ %.052, %10 ], [ %.052, %4 ]
  %.050.be = phi i32 [ %.050, %3 ], [ %.050, %392 ], [ %.050, %389 ], [ 0, %388 ], [ %.050, %386 ], [ %.050, %385 ], [ %.050, %377 ], [ %.050, %375 ], [ %.050, %374 ], [ %.050, %373 ], [ %.050, %372 ], [ %.050, %368 ], [ %.050, %364 ], [ %.050, %353 ], [ %.050, %343 ], [ %.050, %342 ], [ %.050, %330 ], [ %.050, %320 ], [ %319, %318 ], [ %.050, %309 ], [ %.050, %306 ], [ %.050, %305 ], [ 0, %295 ], [ %.050, %285 ], [ %.050, %284 ], [ %.050, %273 ], [ %.050, %263 ], [ %.050, %262 ], [ %.050, %252 ], [ %.050, %242 ], [ %.050, %241 ], [ %.050, %233 ], [ %.050, %229 ], [ %.050, %228 ], [ %.050, %211 ], [ %.050, %201 ], [ %.050, %197 ], [ %.050, %196 ], [ %.050, %194 ], [ %.050, %193 ], [ %.050, %192 ], [ %.050, %181 ], [ %.050, %171 ], [ %.050, %163 ], [ %.050, %159 ], [ %.050, %151 ], [ %.050, %149 ], [ %.050, %137 ], [ %.050, %127 ], [ %.050, %126 ], [ %.050, %116 ], [ %.050, %106 ], [ %.050, %105 ], [ %.050, %94 ], [ %.050, %84 ], [ %.050, %83 ], [ %.050, %70 ], [ %.050, %60 ], [ %.050, %56 ], [ %.050, %55 ], [ %.050, %53 ], [ %.050, %52 ], [ %.050, %39 ], [ %.050, %29 ], [ %.050, %25 ], [ %.050, %24 ], [ %.050, %23 ], [ %.050, %19 ], [ %.050, %16 ], [ %.050, %15 ], [ %.050, %14 ], [ %.050, %10 ], [ %.050, %4 ]
  %.0.be = phi i32 [ %.0, %3 ], [ 865750924, %392 ], [ -249983310, %389 ], [ 2108422280, %388 ], [ -216747728, %386 ], [ -493617944, %385 ], [ -2003189643, %377 ], [ -878818891, %375 ], [ 501483931, %374 ], [ 329959496, %373 ], [ 1617082569, %372 ], [ -373706999, %368 ], [ -1220975156, %364 ], [ %362, %353 ], [ %352, %343 ], [ -1517775403, %342 ], [ %341, %330 ], [ %329, %320 ], [ -423615768, %318 ], [ 1786991548, %309 ], [ %308, %306 ], [ -423615768, %305 ], [ %304, %295 ], [ %294, %285 ], [ -475891233, %284 ], [ %283, %273 ], [ %272, %263 ], [ -1130293210, %262 ], [ %261, %252 ], [ %251, %242 ], [ -697739759, %241 ], [ 186288639, %233 ], [ %232, %229 ], [ -697739759, %228 ], [ %227, %211 ], [ %210, %201 ], [ %200, %197 ], [ -475891233, %196 ], [ 1541308626, %194 ], [ -2132326057, %193 ], [ 1195754338, %192 ], [ %191, %181 ], [ %180, %171 ], [ -1593987590, %163 ], [ %162, %159 ], [ 1195754338, %151 ], [ %150, %149 ], [ %148, %137 ], [ %136, %127 ], [ 1541308626, %126 ], [ %125, %116 ], [ %115, %106 ], [ -496395224, %105 ], [ %104, %94 ], [ %93, %84 ], [ 1098227143, %83 ], [ %82, %70 ], [ %69, %60 ], [ %59, %56 ], [ -496395224, %55 ], [ 1984415587, %53 ], [ 1741972915, %52 ], [ %51, %39 ], [ %38, %29 ], [ %28, %25 ], [ 1984415587, %24 ], [ -1227914720, %23 ], [ 8830222, %19 ], [ %18, %16 ], [ -1227914720, %15 ], [ -386506617, %14 ], [ %13, %10 ], [ %9, %4 ]
  br label %3

4:                                                ; preds = %3
  %5 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) @n)
  %6 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %5, i32* nonnull dereferenceable(4) @m)
  %7 = load i32, i32* @n, align 4
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 -490759213, i32 -1290451612
  br label %.backedge

10:                                               ; preds = %3
  %11 = load i32, i32* @m, align 4
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 1846319724, i32 -1290451612
  br label %.backedge

14:                                               ; preds = %3
  br label %.backedge

15:                                               ; preds = %3
  br label %.backedge

16:                                               ; preds = %3
  %17 = icmp slt i32 %.070, 1600000
  %18 = select i1 %17, i32 1768563444, i32 -605498749
  br label %.backedge

19:                                               ; preds = %3
  %20 = sext i32 %.070 to i64
  %21 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mh, i64 0, i64 %20
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mw, i64 0, i64 %20
  store i32 0, i32* %22, align 4
  br label %.backedge

23:                                               ; preds = %3
  %.neg78 = add i32 %.070, 1
  br label %.backedge

24:                                               ; preds = %3
  br label %.backedge

25:                                               ; preds = %3
  %26 = load i32, i32* @n, align 4
  %27 = icmp slt i32 %.068, %26
  %28 = select i1 %27, i32 410299205, i32 -561498907
  br label %.backedge

29:                                               ; preds = %3
  %30 = load i32, i32* @x.5, align 4
  %31 = load i32, i32* @y.6, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -1220975156, i32 -664258648
  br label %.backedge

39:                                               ; preds = %3
  %40 = sext i32 %.068 to i64
  %41 = getelementptr inbounds [1600 x i32], [1600 x i32]* @h, i64 0, i64 %40
  %42 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %41)
  %43 = load i32, i32* @x.5, align 4
  %44 = load i32, i32* @y.6, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 2061096619, i32 -664258648
  br label %.backedge

52:                                               ; preds = %3
  br label %.backedge

53:                                               ; preds = %3
  %54 = add i32 %.068, 1
  br label %.backedge

55:                                               ; preds = %3
  br label %.backedge

56:                                               ; preds = %3
  %57 = load i32, i32* @m, align 4
  %58 = icmp slt i32 %.066, %57
  %59 = select i1 %58, i32 1326967773, i32 1666084742
  br label %.backedge

60:                                               ; preds = %3
  %61 = load i32, i32* @x.5, align 4
  %62 = load i32, i32* @y.6, align 4
  %63 = add i32 %61, -1
  %64 = mul i32 %63, %61
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %67, %66
  %69 = select i1 %68, i32 -373706999, i32 1800471416
  br label %.backedge

70:                                               ; preds = %3
  %71 = sext i32 %.066 to i64
  %72 = getelementptr inbounds [1600 x i32], [1600 x i32]* @w, i64 0, i64 %71
  %73 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %72)
  %74 = load i32, i32* @x.5, align 4
  %75 = load i32, i32* @y.6, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 -1225154427, i32 1800471416
  br label %.backedge

83:                                               ; preds = %3
  br label %.backedge

84:                                               ; preds = %3
  %85 = load i32, i32* @x.5, align 4
  %86 = load i32, i32* @y.6, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 1617082569, i32 -135984050
  br label %.backedge

94:                                               ; preds = %3
  %95 = add i32 %.066, 1
  %96 = load i32, i32* @x.5, align 4
  %97 = load i32, i32* @y.6, align 4
  %98 = add i32 %96, -1
  %99 = mul i32 %98, %96
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %102, %101
  %104 = select i1 %103, i32 -1671180311, i32 -135984050
  br label %.backedge

105:                                              ; preds = %3
  br label %.backedge

106:                                              ; preds = %3
  %107 = load i32, i32* @x.5, align 4
  %108 = load i32, i32* @y.6, align 4
  %109 = add i32 %107, -1
  %110 = mul i32 %109, %107
  %111 = and i32 %110, 1
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %113, %112
  %115 = select i1 %114, i32 329959496, i32 -644225607
  br label %.backedge

116:                                              ; preds = %3
  %117 = load i32, i32* @x.5, align 4
  %118 = load i32, i32* @y.6, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 1104989713, i32 -644225607
  br label %.backedge

126:                                              ; preds = %3
  br label %.backedge

127:                                              ; preds = %3
  %128 = load i32, i32* @x.5, align 4
  %129 = load i32, i32* @y.6, align 4
  %130 = add i32 %128, -1
  %131 = mul i32 %130, %128
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %134, %133
  %136 = select i1 %135, i32 501483931, i32 -1943388889
  br label %.backedge

137:                                              ; preds = %3
  %138 = load i32, i32* @n, align 4
  %139 = icmp slt i32 %.064, %138
  store i1 %139, i1* %2, align 1
  %140 = load i32, i32* @x.5, align 4
  %141 = load i32, i32* @y.6, align 4
  %142 = add i32 %140, -1
  %143 = mul i32 %142, %140
  %144 = and i32 %143, 1
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %146, %145
  %148 = select i1 %147, i32 329145684, i32 -1943388889
  br label %.backedge

149:                                              ; preds = %3
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %150 = select i1 %.0..0..0., i32 -62355625, i32 236496568
  br label %.backedge

151:                                              ; preds = %3
  %152 = sext i32 %.064 to i64
  %153 = getelementptr inbounds [1600 x i32], [1600 x i32]* @h, i64 0, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mh, i64 0, i64 %155
  %157 = load i32, i32* %156, align 4
  %.neg77 = add i32 %157, 1
  store i32 %.neg77, i32* %156, align 4
  %158 = add i32 %.064, 1
  br label %.backedge

159:                                              ; preds = %3
  %160 = load i32, i32* @n, align 4
  %161 = icmp slt i32 %.060, %160
  %162 = select i1 %161, i32 -578764301, i32 -467157956
  br label %.backedge

163:                                              ; preds = %3
  %164 = sext i32 %.060 to i64
  %165 = getelementptr inbounds [1600 x i32], [1600 x i32]* @h, i64 0, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = sext i32 %166 to i64
  %168 = add i64 %.062, %167
  %169 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mh, i64 0, i64 %168
  %170 = load i32, i32* %169, align 4
  %.neg76 = add i32 %170, 1
  store i32 %.neg76, i32* %169, align 4
  br label %.backedge

171:                                              ; preds = %3
  %172 = load i32, i32* @x.5, align 4
  %173 = load i32, i32* @y.6, align 4
  %174 = add i32 %172, -1
  %175 = mul i32 %174, %172
  %176 = and i32 %175, 1
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %178, %177
  %180 = select i1 %179, i32 -878818891, i32 2028568931
  br label %.backedge

181:                                              ; preds = %3
  %182 = add i32 %.060, 1
  %183 = load i32, i32* @x.5, align 4
  %184 = load i32, i32* @y.6, align 4
  %185 = add i32 %183, -1
  %186 = mul i32 %185, %183
  %187 = and i32 %186, 1
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %189, %188
  %191 = select i1 %190, i32 -1521139804, i32 2028568931
  br label %.backedge

192:                                              ; preds = %3
  br label %.backedge

193:                                              ; preds = %3
  br label %.backedge

194:                                              ; preds = %3
  %195 = add i32 %.064, 1
  br label %.backedge

196:                                              ; preds = %3
  br label %.backedge

197:                                              ; preds = %3
  %198 = load i32, i32* @m, align 4
  %199 = icmp slt i32 %.058, %198
  %200 = select i1 %199, i32 -95856806, i32 1076474484
  br label %.backedge

201:                                              ; preds = %3
  %202 = load i32, i32* @x.5, align 4
  %203 = load i32, i32* @y.6, align 4
  %204 = add i32 %202, -1
  %205 = mul i32 %204, %202
  %206 = and i32 %205, 1
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %208, %207
  %210 = select i1 %209, i32 -2003189643, i32 1348141577
  br label %.backedge

211:                                              ; preds = %3
  %212 = sext i32 %.058 to i64
  %213 = getelementptr inbounds [1600 x i32], [1600 x i32]* @w, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mw, i64 0, i64 %215
  %217 = load i32, i32* %216, align 4
  %218 = add i32 %217, 1
  store i32 %218, i32* %216, align 4
  %.neg75 = add i32 %.058, 1
  %219 = load i32, i32* @x.5, align 4
  %220 = load i32, i32* @y.6, align 4
  %221 = add i32 %219, -1
  %222 = mul i32 %221, %219
  %223 = and i32 %222, 1
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %225, %224
  %227 = select i1 %226, i32 -1424860701, i32 1348141577
  br label %.backedge

228:                                              ; preds = %3
  br label %.backedge

229:                                              ; preds = %3
  %230 = load i32, i32* @m, align 4
  %231 = icmp slt i32 %.054, %230
  %232 = select i1 %231, i32 -1362230039, i32 -905441159
  br label %.backedge

233:                                              ; preds = %3
  %234 = sext i32 %.054 to i64
  %235 = getelementptr inbounds [1600 x i32], [1600 x i32]* @w, i64 0, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = sext i32 %236 to i64
  %238 = add i64 %.056, %237
  %239 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mw, i64 0, i64 %238
  %240 = load i32, i32* %239, align 4
  %.neg74 = add i32 %240, 1
  store i32 %.neg74, i32* %239, align 4
  br label %.backedge

241:                                              ; preds = %3
  %.neg73 = add i32 %.054, 1
  br label %.backedge

242:                                              ; preds = %3
  %243 = load i32, i32* @x.5, align 4
  %244 = load i32, i32* @y.6, align 4
  %245 = add i32 %243, -1
  %246 = mul i32 %245, %243
  %247 = and i32 %246, 1
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %249, %248
  %251 = select i1 %250, i32 -493617944, i32 -1751678512
  br label %.backedge

252:                                              ; preds = %3
  %253 = load i32, i32* @x.5, align 4
  %254 = load i32, i32* @y.6, align 4
  %255 = add i32 %253, -1
  %256 = mul i32 %255, %253
  %257 = and i32 %256, 1
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %259, %258
  %261 = select i1 %260, i32 1415652927, i32 -1751678512
  br label %.backedge

262:                                              ; preds = %3
  br label %.backedge

263:                                              ; preds = %3
  %264 = load i32, i32* @x.5, align 4
  %265 = load i32, i32* @y.6, align 4
  %266 = add i32 %264, -1
  %267 = mul i32 %266, %264
  %268 = and i32 %267, 1
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %270, %269
  %272 = select i1 %271, i32 -216747728, i32 922688546
  br label %.backedge

273:                                              ; preds = %3
  %274 = add i32 %.058, 1
  %275 = load i32, i32* @x.5, align 4
  %276 = load i32, i32* @y.6, align 4
  %277 = add i32 %275, -1
  %278 = mul i32 %277, %275
  %279 = and i32 %278, 1
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %281, %280
  %283 = select i1 %282, i32 159374187, i32 922688546
  br label %.backedge

284:                                              ; preds = %3
  br label %.backedge

285:                                              ; preds = %3
  %286 = load i32, i32* @x.5, align 4
  %287 = load i32, i32* @y.6, align 4
  %288 = add i32 %286, -1
  %289 = mul i32 %288, %286
  %290 = and i32 %289, 1
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %292, %291
  %294 = select i1 %293, i32 2108422280, i32 -265023911
  br label %.backedge

295:                                              ; preds = %3
  %296 = load i32, i32* @x.5, align 4
  %297 = load i32, i32* @y.6, align 4
  %298 = add i32 %296, -1
  %299 = mul i32 %298, %296
  %300 = and i32 %299, 1
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %302, %301
  %304 = select i1 %303, i32 -1200344899, i32 -265023911
  br label %.backedge

305:                                              ; preds = %3
  br label %.backedge

306:                                              ; preds = %3
  %307 = icmp slt i32 %.050, 1600000
  %308 = select i1 %307, i32 155632273, i32 1813532162
  br label %.backedge

309:                                              ; preds = %3
  %310 = sext i32 %.050 to i64
  %311 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mw, i64 0, i64 %310
  %312 = load i32, i32* %311, align 4
  %313 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mh, i64 0, i64 %310
  %314 = load i32, i32* %313, align 4
  %315 = mul nsw i32 %314, %312
  %316 = sext i32 %315 to i64
  %317 = add i64 %.052, %316
  br label %.backedge

318:                                              ; preds = %3
  %319 = add i32 %.050, 1
  br label %.backedge

320:                                              ; preds = %3
  %321 = load i32, i32* @x.5, align 4
  %322 = load i32, i32* @y.6, align 4
  %323 = add i32 %321, -1
  %324 = mul i32 %323, %321
  %325 = and i32 %324, 1
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %327, %326
  %329 = select i1 %328, i32 -249983310, i32 751301675
  br label %.backedge

330:                                              ; preds = %3
  %331 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %.052)
  %332 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %331, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %333 = load i32, i32* @x.5, align 4
  %334 = load i32, i32* @y.6, align 4
  %335 = add i32 %333, -1
  %336 = mul i32 %335, %333
  %337 = and i32 %336, 1
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %339, %338
  %341 = select i1 %340, i32 165744455, i32 751301675
  br label %.backedge

342:                                              ; preds = %3
  br label %.backedge

343:                                              ; preds = %3
  %344 = load i32, i32* @x.5, align 4
  %345 = load i32, i32* @y.6, align 4
  %346 = add i32 %344, -1
  %347 = mul i32 %346, %344
  %348 = and i32 %347, 1
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %350, %349
  %352 = select i1 %351, i32 865750924, i32 730766142
  br label %.backedge

353:                                              ; preds = %3
  %354 = load i32, i32* @x.5, align 4
  %355 = load i32, i32* @y.6, align 4
  %356 = add i32 %354, -1
  %357 = mul i32 %356, %354
  %358 = and i32 %357, 1
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %360, %359
  %362 = select i1 %361, i32 363098595, i32 730766142
  br label %.backedge

363:                                              ; preds = %3
  store i32 0, i32* %1, align 4
  %.0..0..0.49 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.49

364:                                              ; preds = %3
  %365 = sext i32 %.068 to i64
  %366 = getelementptr inbounds [1600 x i32], [1600 x i32]* @h, i64 0, i64 %365
  %367 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %366)
  br label %.backedge

368:                                              ; preds = %3
  %369 = sext i32 %.066 to i64
  %370 = getelementptr inbounds [1600 x i32], [1600 x i32]* @w, i64 0, i64 %369
  %371 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %370)
  br label %.backedge

372:                                              ; preds = %3
  %.neg72 = add i32 %.066, 1
  br label %.backedge

373:                                              ; preds = %3
  br label %.backedge

374:                                              ; preds = %3
  br label %.backedge

375:                                              ; preds = %3
  %376 = add i32 %.060, 1
  br label %.backedge

377:                                              ; preds = %3
  %378 = sext i32 %.058 to i64
  %379 = getelementptr inbounds [1600 x i32], [1600 x i32]* @w, i64 0, i64 %378
  %380 = load i32, i32* %379, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds [1600000 x i32], [1600000 x i32]* @mw, i64 0, i64 %381
  %383 = load i32, i32* %382, align 4
  %384 = add i32 %383, 1
  store i32 %384, i32* %382, align 4
  %.neg = add i32 %.058, 1
  br label %.backedge

385:                                              ; preds = %3
  br label %.backedge

386:                                              ; preds = %3
  %387 = add i32 %.058, 1
  br label %.backedge

388:                                              ; preds = %3
  br label %.backedge

389:                                              ; preds = %3
  %390 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %.052)
  %391 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %390, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge

392:                                              ; preds = %3
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s649027393.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
