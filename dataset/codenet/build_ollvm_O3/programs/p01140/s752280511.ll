; ModuleID = 'build_ollvm/programs/p01140/s752280511.ll'
source_filename = "Project_CodeNet_C++1400/p01140/s752280511.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@N = global i32 0, align 4
@M = global i32 0, align 4
@h = global [2000 x i32] zeroinitializer, align 16
@w = global [2000 x i32] zeroinitializer, align 16
@a = local_unnamed_addr global [1000000 x i32] zeroinitializer, align 16
@b = local_unnamed_addr global [1000000 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s752280511.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define void @_Z4initv() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = load i32, i32* @x.3, align 4
  %3 = load i32, i32* @y.4, align 4
  %4 = add i32 %2, -1
  %5 = mul i32 %4, %2
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %8, %7
  %10 = select i1 %9, i32 -983762610, i32 -1917758758
  %11 = select i1 %9, i32 -1660928133, i32 -1917758758
  %12 = select i1 %9, i32 -2139551783, i32 1367195134
  %13 = select i1 %9, i32 -1340322269, i32 1367195134
  br label %14

14:                                               ; preds = %.backedge, %0
  %.014 = phi i32 [ 0, %0 ], [ %.014.be, %.backedge ]
  %.012 = phi i32 [ undef, %0 ], [ %.012.be, %.backedge ]
  %.0 = phi i32 [ 1541593181, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1541593181, label %15
    i32 -612920478, label %18
    i32 -1340322269, label %19
    i32 -2139551783, label %23
    i32 1744208137, label %24
    i32 1201788535, label %26
    i32 -533575262, label %27
    i32 -1660928133, label %28
    i32 -983762610, label %30
    i32 1263470787, label %32
    i32 -1962056237, label %36
    i32 1664524040, label %38
    i32 1367195134, label %39
    i32 -1917758758, label %43
  ]

.backedge:                                        ; preds = %14, %43, %39, %36, %32, %30, %28, %27, %26, %24, %23, %19, %18, %15
  %.014.be = phi i32 [ %.014, %14 ], [ %.014, %43 ], [ %.014, %39 ], [ %.014, %36 ], [ %.014, %32 ], [ %.014, %30 ], [ %.014, %28 ], [ %.014, %27 ], [ %.014, %26 ], [ %25, %24 ], [ %.014, %23 ], [ %.014, %19 ], [ %.014, %18 ], [ %.014, %15 ]
  %.012.be = phi i32 [ %.012, %14 ], [ %.012, %43 ], [ %.012, %39 ], [ %37, %36 ], [ %.012, %32 ], [ %.012, %30 ], [ %.012, %28 ], [ %.012, %27 ], [ 0, %26 ], [ %.012, %24 ], [ %.012, %23 ], [ %.012, %19 ], [ %.012, %18 ], [ %.012, %15 ]
  %.0.be = phi i32 [ %.0, %14 ], [ -1660928133, %43 ], [ -1340322269, %39 ], [ -533575262, %36 ], [ -1962056237, %32 ], [ %31, %30 ], [ %10, %28 ], [ %11, %27 ], [ -533575262, %26 ], [ 1541593181, %24 ], [ 1744208137, %23 ], [ %12, %19 ], [ %13, %18 ], [ %17, %15 ]
  br label %14

15:                                               ; preds = %14
  %16 = icmp slt i32 %.014, 2000
  %17 = select i1 %16, i32 -612920478, i32 1201788535
  br label %.backedge

18:                                               ; preds = %14
  br label %.backedge

19:                                               ; preds = %14
  %20 = sext i32 %.014 to i64
  %21 = getelementptr inbounds [2000 x i32], [2000 x i32]* @h, i64 0, i64 %20
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds [2000 x i32], [2000 x i32]* @w, i64 0, i64 %20
  store i32 0, i32* %22, align 4
  br label %.backedge

23:                                               ; preds = %14
  br label %.backedge

24:                                               ; preds = %14
  %25 = add i32 %.014, 1
  br label %.backedge

26:                                               ; preds = %14
  br label %.backedge

27:                                               ; preds = %14
  br label %.backedge

28:                                               ; preds = %14
  %29 = icmp slt i32 %.012, 1000000
  store i1 %29, i1* %1, align 1
  br label %.backedge

30:                                               ; preds = %14
  %.0..0..0. = load volatile i1, i1* %1, align 1
  %31 = select i1 %.0..0..0., i32 1263470787, i32 1664524040
  br label %.backedge

32:                                               ; preds = %14
  %33 = sext i32 %.012 to i64
  %34 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @a, i64 0, i64 %33
  store i32 0, i32* %34, align 4
  %35 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @b, i64 0, i64 %33
  store i32 0, i32* %35, align 4
  br label %.backedge

36:                                               ; preds = %14
  %37 = add i32 %.012, 1
  br label %.backedge

38:                                               ; preds = %14
  ret void

39:                                               ; preds = %14
  %40 = sext i32 %.014 to i64
  %41 = getelementptr inbounds [2000 x i32], [2000 x i32]* @h, i64 0, i64 %40
  store i32 0, i32* %41, align 4
  %42 = getelementptr inbounds [2000 x i32], [2000 x i32]* @w, i64 0, i64 %40
  store i32 0, i32* %42, align 4
  br label %.backedge

43:                                               ; preds = %14
  br label %.backedge
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  br label %7

7:                                                ; preds = %.backedge, %0
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.0 = phi i32 [ -1909081447, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1909081447, label %8
    i32 -789370651, label %18
    i32 293424747, label %31
    i32 1746457880, label %33
    i32 724703303, label %43
    i32 -1605614239, label %55
    i32 1606374432, label %57
    i32 237442959, label %67
    i32 816674235, label %77
    i32 -235762564, label %78
    i32 1141317255, label %88
    i32 177627, label %98
    i32 -5634455, label %99
    i32 1006419130, label %103
    i32 -234990064, label %107
    i32 -218485563, label %117
    i32 -1030627047, label %128
    i32 -1546945016, label %129
    i32 -1428588780, label %130
    i32 1394703578, label %134
    i32 -1551346510, label %144
    i32 547231286, label %157
    i32 -1364502654, label %158
    i32 -760381564, label %168
    i32 -680883247, label %179
    i32 -247637642, label %180
    i32 1520625580, label %181
    i32 -912876161, label %184
    i32 -45512342, label %185
    i32 -892802776, label %188
    i32 756044874, label %190
    i32 2033863508, label %191
    i32 1141802649, label %194
    i32 214776446, label %204
    i32 -1896258684, label %218
    i32 -1601470086, label %219
    i32 1944383143, label %221
    i32 287629924, label %226
    i32 277788466, label %227
    i32 -531720673, label %229
    i32 -1117305080, label %230
    i32 1016221248, label %232
    i32 1642194774, label %233
    i32 1168643724, label %243
    i32 -824499998, label %255
    i32 2005339606, label %257
    i32 -1956467880, label %258
    i32 -196715185, label %268
    i32 -1922612905, label %280
    i32 -1599701418, label %282
    i32 -1892406310, label %292
    i32 -950663845, label %303
    i32 -1899267193, label %305
    i32 605646960, label %306
    i32 -500492203, label %316
    i32 -1195961008, label %327
    i32 2041294220, label %329
    i32 156846823, label %334
    i32 787060027, label %336
    i32 -1964283495, label %341
    i32 829081405, label %342
    i32 -993844755, label %344
    i32 -1525285507, label %345
    i32 -229501059, label %347
    i32 1202089640, label %348
    i32 -260547619, label %351
    i32 -724756985, label %356
    i32 1373322836, label %361
    i32 1448099701, label %369
    i32 -100675745, label %370
    i32 659484111, label %380
    i32 513922410, label %391
    i32 1656871236, label %392
    i32 -704706426, label %394
    i32 -641521823, label %395
    i32 -486293706, label %397
    i32 1245635560, label %398
    i32 -700485706, label %399
    i32 -1198756516, label %400
    i32 -1779535030, label %401
    i32 297824080, label %405
    i32 -481913807, label %407
    i32 -47935264, label %412
    i32 1047650443, label %413
    i32 -124688241, label %414
    i32 207997244, label %415
    i32 1918087903, label %416
  ]

.backedge:                                        ; preds = %7, %416, %415, %414, %413, %412, %407, %405, %401, %400, %399, %398, %397, %395, %392, %391, %380, %370, %369, %361, %356, %351, %348, %347, %345, %344, %342, %341, %336, %334, %329, %327, %316, %306, %305, %303, %292, %282, %280, %268, %258, %257, %255, %243, %233, %232, %230, %229, %227, %226, %221, %219, %218, %204, %194, %191, %190, %188, %185, %184, %181, %180, %179, %168, %158, %157, %144, %134, %130, %129, %128, %117, %107, %103, %99, %98, %88, %78, %77, %67, %57, %55, %43, %33, %31, %18, %8
  %.080.be = phi i32 [ %.080, %7 ], [ %.080, %416 ], [ %.080, %415 ], [ %.080, %414 ], [ %.080, %413 ], [ %.080, %412 ], [ %.080, %407 ], [ %.080, %405 ], [ %.080, %401 ], [ %.neg, %400 ], [ 0, %399 ], [ %.080, %398 ], [ %.080, %397 ], [ %.080, %395 ], [ %.080, %392 ], [ %.080, %391 ], [ %.080, %380 ], [ %.080, %370 ], [ %.080, %369 ], [ %.080, %361 ], [ %.080, %356 ], [ %.080, %351 ], [ %.080, %348 ], [ %.080, %347 ], [ %.080, %345 ], [ %.080, %344 ], [ %.080, %342 ], [ %.080, %341 ], [ %.080, %336 ], [ %.080, %334 ], [ %.080, %329 ], [ %.080, %327 ], [ %.080, %316 ], [ %.080, %306 ], [ %.080, %305 ], [ %.080, %303 ], [ %.080, %292 ], [ %.080, %282 ], [ %.080, %280 ], [ %.080, %268 ], [ %.080, %258 ], [ %.080, %257 ], [ %.080, %255 ], [ %.080, %243 ], [ %.080, %233 ], [ %.080, %232 ], [ %.080, %230 ], [ %.080, %229 ], [ %.080, %227 ], [ %.080, %226 ], [ %.080, %221 ], [ %.080, %219 ], [ %.080, %218 ], [ %.080, %204 ], [ %.080, %194 ], [ %.080, %191 ], [ %.080, %190 ], [ %.080, %188 ], [ %.080, %185 ], [ %.080, %184 ], [ %.080, %181 ], [ %.080, %180 ], [ %.080, %179 ], [ %.080, %168 ], [ %.080, %158 ], [ %.080, %157 ], [ %.080, %144 ], [ %.080, %134 ], [ %.080, %130 ], [ %.080, %129 ], [ %.080, %128 ], [ %118, %117 ], [ %.080, %107 ], [ %.080, %103 ], [ %.080, %99 ], [ %.080, %98 ], [ 0, %88 ], [ %.080, %78 ], [ %.080, %77 ], [ %.080, %67 ], [ %.080, %57 ], [ %.080, %55 ], [ %.080, %43 ], [ %.080, %33 ], [ %.080, %31 ], [ %.080, %18 ], [ %.080, %8 ]
  %.078.be = phi i32 [ %.078, %7 ], [ %.078, %416 ], [ %.078, %415 ], [ %.078, %414 ], [ %.078, %413 ], [ %.078, %412 ], [ %.078, %407 ], [ %406, %405 ], [ %.078, %401 ], [ %.078, %400 ], [ %.078, %399 ], [ %.078, %398 ], [ %.078, %397 ], [ %.078, %395 ], [ %.078, %392 ], [ %.078, %391 ], [ %.078, %380 ], [ %.078, %370 ], [ %.078, %369 ], [ %.078, %361 ], [ %.078, %356 ], [ %.078, %351 ], [ %.078, %348 ], [ %.078, %347 ], [ %.078, %345 ], [ %.078, %344 ], [ %.078, %342 ], [ %.078, %341 ], [ %.078, %336 ], [ %.078, %334 ], [ %.078, %329 ], [ %.078, %327 ], [ %.078, %316 ], [ %.078, %306 ], [ %.078, %305 ], [ %.078, %303 ], [ %.078, %292 ], [ %.078, %282 ], [ %.078, %280 ], [ %.078, %268 ], [ %.078, %258 ], [ %.078, %257 ], [ %.078, %255 ], [ %.078, %243 ], [ %.078, %233 ], [ %.078, %232 ], [ %.078, %230 ], [ %.078, %229 ], [ %.078, %227 ], [ %.078, %226 ], [ %.078, %221 ], [ %.078, %219 ], [ %.078, %218 ], [ %.078, %204 ], [ %.078, %194 ], [ %.078, %191 ], [ %.078, %190 ], [ %.078, %188 ], [ %.078, %185 ], [ %.078, %184 ], [ %.078, %181 ], [ %.078, %180 ], [ %.078, %179 ], [ %169, %168 ], [ %.078, %158 ], [ %.078, %157 ], [ %.078, %144 ], [ %.078, %134 ], [ %.078, %130 ], [ 0, %129 ], [ %.078, %128 ], [ %.078, %117 ], [ %.078, %107 ], [ %.078, %103 ], [ %.078, %99 ], [ %.078, %98 ], [ %.078, %88 ], [ %.078, %78 ], [ %.078, %77 ], [ %.078, %67 ], [ %.078, %57 ], [ %.078, %55 ], [ %.078, %43 ], [ %.078, %33 ], [ %.078, %31 ], [ %.078, %18 ], [ %.078, %8 ]
  %.076.be = phi i32 [ %.076, %7 ], [ %.076, %416 ], [ %.076, %415 ], [ %.076, %414 ], [ %.076, %413 ], [ %.076, %412 ], [ %.076, %407 ], [ %.076, %405 ], [ %.076, %401 ], [ %.076, %400 ], [ %.076, %399 ], [ %.076, %398 ], [ %.076, %397 ], [ %.076, %395 ], [ %.076, %392 ], [ %.076, %391 ], [ %.076, %380 ], [ %.076, %370 ], [ %.076, %369 ], [ %.076, %361 ], [ %.076, %356 ], [ %.076, %351 ], [ %.076, %348 ], [ %.076, %347 ], [ %.076, %345 ], [ %.076, %344 ], [ %.076, %342 ], [ %.076, %341 ], [ %.076, %336 ], [ %.076, %334 ], [ %.076, %329 ], [ %.076, %327 ], [ %.076, %316 ], [ %.076, %306 ], [ %.076, %305 ], [ %.076, %303 ], [ %.076, %292 ], [ %.076, %282 ], [ %.076, %280 ], [ %.076, %268 ], [ %.076, %258 ], [ %.076, %257 ], [ %.076, %255 ], [ %.076, %243 ], [ %.076, %233 ], [ %.076, %232 ], [ %231, %230 ], [ %.076, %229 ], [ %.076, %227 ], [ %.076, %226 ], [ %.076, %221 ], [ %.076, %219 ], [ %.076, %218 ], [ %.076, %204 ], [ %.076, %194 ], [ %.076, %191 ], [ %.076, %190 ], [ %.076, %188 ], [ %.076, %185 ], [ %.076, %184 ], [ %.076, %181 ], [ 0, %180 ], [ %.076, %179 ], [ %.076, %168 ], [ %.076, %158 ], [ %.076, %157 ], [ %.076, %144 ], [ %.076, %134 ], [ %.076, %130 ], [ %.076, %129 ], [ %.076, %128 ], [ %.076, %117 ], [ %.076, %107 ], [ %.076, %103 ], [ %.076, %99 ], [ %.076, %98 ], [ %.076, %88 ], [ %.076, %78 ], [ %.076, %77 ], [ %.076, %67 ], [ %.076, %57 ], [ %.076, %55 ], [ %.076, %43 ], [ %.076, %33 ], [ %.076, %31 ], [ %.076, %18 ], [ %.076, %8 ]
  %.074.be = phi i32 [ %.074, %7 ], [ %.074, %416 ], [ %.074, %415 ], [ %.074, %414 ], [ %.074, %413 ], [ %.074, %412 ], [ %.074, %407 ], [ %.074, %405 ], [ %.074, %401 ], [ %.074, %400 ], [ %.074, %399 ], [ %.074, %398 ], [ %.074, %397 ], [ %.074, %395 ], [ %.074, %392 ], [ %.074, %391 ], [ %.074, %380 ], [ %.074, %370 ], [ %.074, %369 ], [ %.074, %361 ], [ %.074, %356 ], [ %.074, %351 ], [ %.074, %348 ], [ %.074, %347 ], [ %.074, %345 ], [ %.074, %344 ], [ %.074, %342 ], [ %.074, %341 ], [ %.074, %336 ], [ %.074, %334 ], [ %.074, %329 ], [ %.074, %327 ], [ %.074, %316 ], [ %.074, %306 ], [ %.074, %305 ], [ %.074, %303 ], [ %.074, %292 ], [ %.074, %282 ], [ %.074, %280 ], [ %.074, %268 ], [ %.074, %258 ], [ %.074, %257 ], [ %.074, %255 ], [ %.074, %243 ], [ %.074, %233 ], [ %.074, %232 ], [ %.074, %230 ], [ %.074, %229 ], [ %228, %227 ], [ %.074, %226 ], [ %.074, %221 ], [ %.074, %219 ], [ %.074, %218 ], [ %.074, %204 ], [ %.074, %194 ], [ %.074, %191 ], [ %.074, %190 ], [ %.074, %188 ], [ %.074, %185 ], [ 0, %184 ], [ %.074, %181 ], [ %.074, %180 ], [ %.074, %179 ], [ %.074, %168 ], [ %.074, %158 ], [ %.074, %157 ], [ %.074, %144 ], [ %.074, %134 ], [ %.074, %130 ], [ %.074, %129 ], [ %.074, %128 ], [ %.074, %117 ], [ %.074, %107 ], [ %.074, %103 ], [ %.074, %99 ], [ %.074, %98 ], [ %.074, %88 ], [ %.074, %78 ], [ %.074, %77 ], [ %.074, %67 ], [ %.074, %57 ], [ %.074, %55 ], [ %.074, %43 ], [ %.074, %33 ], [ %.074, %31 ], [ %.074, %18 ], [ %.074, %8 ]
  %.072.be = phi i32 [ %.072, %7 ], [ %.072, %416 ], [ %.072, %415 ], [ %.072, %414 ], [ %.072, %413 ], [ %.072, %412 ], [ %411, %407 ], [ %.072, %405 ], [ %.072, %401 ], [ %.072, %400 ], [ %.072, %399 ], [ %.072, %398 ], [ %.072, %397 ], [ %.072, %395 ], [ %.072, %392 ], [ %.072, %391 ], [ %.072, %380 ], [ %.072, %370 ], [ %.072, %369 ], [ %.072, %361 ], [ %.072, %356 ], [ %.072, %351 ], [ %.072, %348 ], [ %.072, %347 ], [ %.072, %345 ], [ %.072, %344 ], [ %.072, %342 ], [ %.072, %341 ], [ %.072, %336 ], [ %.072, %334 ], [ %.072, %329 ], [ %.072, %327 ], [ %.072, %316 ], [ %.072, %306 ], [ %.072, %305 ], [ %.072, %303 ], [ %.072, %292 ], [ %.072, %282 ], [ %.072, %280 ], [ %.072, %268 ], [ %.072, %258 ], [ %.072, %257 ], [ %.072, %255 ], [ %.072, %243 ], [ %.072, %233 ], [ %.072, %232 ], [ %.072, %230 ], [ %.072, %229 ], [ %.072, %227 ], [ %.072, %226 ], [ %.072, %221 ], [ %.072, %219 ], [ %.072, %218 ], [ %208, %204 ], [ %.072, %194 ], [ %.072, %191 ], [ 0, %190 ], [ %.072, %188 ], [ %.072, %185 ], [ %.072, %184 ], [ %.072, %181 ], [ %.072, %180 ], [ %.072, %179 ], [ %.072, %168 ], [ %.072, %158 ], [ %.072, %157 ], [ %.072, %144 ], [ %.072, %134 ], [ %.072, %130 ], [ %.072, %129 ], [ %.072, %128 ], [ %.072, %117 ], [ %.072, %107 ], [ %.072, %103 ], [ %.072, %99 ], [ %.072, %98 ], [ %.072, %88 ], [ %.072, %78 ], [ %.072, %77 ], [ %.072, %67 ], [ %.072, %57 ], [ %.072, %55 ], [ %.072, %43 ], [ %.072, %33 ], [ %.072, %31 ], [ %.072, %18 ], [ %.072, %8 ]
  %.070.be = phi i32 [ %.070, %7 ], [ %.070, %416 ], [ %.070, %415 ], [ %.070, %414 ], [ %.070, %413 ], [ %.070, %412 ], [ %.070, %407 ], [ %.070, %405 ], [ %.070, %401 ], [ %.070, %400 ], [ %.070, %399 ], [ %.070, %398 ], [ %.070, %397 ], [ %.070, %395 ], [ %.070, %392 ], [ %.070, %391 ], [ %.070, %380 ], [ %.070, %370 ], [ %.070, %369 ], [ %.070, %361 ], [ %.070, %356 ], [ %.070, %351 ], [ %.070, %348 ], [ %.070, %347 ], [ %.070, %345 ], [ %.070, %344 ], [ %.070, %342 ], [ %.070, %341 ], [ %.070, %336 ], [ %.070, %334 ], [ %.070, %329 ], [ %.070, %327 ], [ %.070, %316 ], [ %.070, %306 ], [ %.070, %305 ], [ %.070, %303 ], [ %.070, %292 ], [ %.070, %282 ], [ %.070, %280 ], [ %.070, %268 ], [ %.070, %258 ], [ %.070, %257 ], [ %.070, %255 ], [ %.070, %243 ], [ %.070, %233 ], [ %.070, %232 ], [ %.070, %230 ], [ %.070, %229 ], [ %.070, %227 ], [ %.070, %226 ], [ %.070, %221 ], [ %220, %219 ], [ %.070, %218 ], [ %.070, %204 ], [ %.070, %194 ], [ %.070, %191 ], [ %.076, %190 ], [ %.070, %188 ], [ %.070, %185 ], [ %.070, %184 ], [ %.070, %181 ], [ %.070, %180 ], [ %.070, %179 ], [ %.070, %168 ], [ %.070, %158 ], [ %.070, %157 ], [ %.070, %144 ], [ %.070, %134 ], [ %.070, %130 ], [ %.070, %129 ], [ %.070, %128 ], [ %.070, %117 ], [ %.070, %107 ], [ %.070, %103 ], [ %.070, %99 ], [ %.070, %98 ], [ %.070, %88 ], [ %.070, %78 ], [ %.070, %77 ], [ %.070, %67 ], [ %.070, %57 ], [ %.070, %55 ], [ %.070, %43 ], [ %.070, %33 ], [ %.070, %31 ], [ %.070, %18 ], [ %.070, %8 ]
  %.068.be = phi i32 [ %.068, %7 ], [ %.068, %416 ], [ %.068, %415 ], [ %.068, %414 ], [ %.068, %413 ], [ %.068, %412 ], [ %.068, %407 ], [ %.068, %405 ], [ %.068, %401 ], [ %.068, %400 ], [ %.068, %399 ], [ %.068, %398 ], [ %.068, %397 ], [ %.068, %395 ], [ %.068, %392 ], [ %.068, %391 ], [ %.068, %380 ], [ %.068, %370 ], [ %.068, %369 ], [ %.068, %361 ], [ %.068, %356 ], [ %.068, %351 ], [ %.068, %348 ], [ %.068, %347 ], [ %346, %345 ], [ %.068, %344 ], [ %.068, %342 ], [ %.068, %341 ], [ %.068, %336 ], [ %.068, %334 ], [ %.068, %329 ], [ %.068, %327 ], [ %.068, %316 ], [ %.068, %306 ], [ %.068, %305 ], [ %.068, %303 ], [ %.068, %292 ], [ %.068, %282 ], [ %.068, %280 ], [ %.068, %268 ], [ %.068, %258 ], [ %.068, %257 ], [ %.068, %255 ], [ %.068, %243 ], [ %.068, %233 ], [ 0, %232 ], [ %.068, %230 ], [ %.068, %229 ], [ %.068, %227 ], [ %.068, %226 ], [ %.068, %221 ], [ %.068, %219 ], [ %.068, %218 ], [ %.068, %204 ], [ %.068, %194 ], [ %.068, %191 ], [ %.068, %190 ], [ %.068, %188 ], [ %.068, %185 ], [ %.068, %184 ], [ %.068, %181 ], [ %.068, %180 ], [ %.068, %179 ], [ %.068, %168 ], [ %.068, %158 ], [ %.068, %157 ], [ %.068, %144 ], [ %.068, %134 ], [ %.068, %130 ], [ %.068, %129 ], [ %.068, %128 ], [ %.068, %117 ], [ %.068, %107 ], [ %.068, %103 ], [ %.068, %99 ], [ %.068, %98 ], [ %.068, %88 ], [ %.068, %78 ], [ %.068, %77 ], [ %.068, %67 ], [ %.068, %57 ], [ %.068, %55 ], [ %.068, %43 ], [ %.068, %33 ], [ %.068, %31 ], [ %.068, %18 ], [ %.068, %8 ]
  %.066.be = phi i32 [ %.066, %7 ], [ %.066, %416 ], [ %.066, %415 ], [ %.066, %414 ], [ %.066, %413 ], [ %.066, %412 ], [ %.066, %407 ], [ %.066, %405 ], [ %.066, %401 ], [ %.066, %400 ], [ %.066, %399 ], [ %.066, %398 ], [ %.066, %397 ], [ %.066, %395 ], [ %.066, %392 ], [ %.066, %391 ], [ %.066, %380 ], [ %.066, %370 ], [ %.066, %369 ], [ %.066, %361 ], [ %.066, %356 ], [ %.066, %351 ], [ %.066, %348 ], [ %.066, %347 ], [ %.066, %345 ], [ %.066, %344 ], [ %343, %342 ], [ %.066, %341 ], [ %.066, %336 ], [ %.066, %334 ], [ %.066, %329 ], [ %.066, %327 ], [ %.066, %316 ], [ %.066, %306 ], [ %.066, %305 ], [ %.066, %303 ], [ %.066, %292 ], [ %.066, %282 ], [ %.066, %280 ], [ %.066, %268 ], [ %.066, %258 ], [ 0, %257 ], [ %.066, %255 ], [ %.066, %243 ], [ %.066, %233 ], [ %.066, %232 ], [ %.066, %230 ], [ %.066, %229 ], [ %.066, %227 ], [ %.066, %226 ], [ %.066, %221 ], [ %.066, %219 ], [ %.066, %218 ], [ %.066, %204 ], [ %.066, %194 ], [ %.066, %191 ], [ %.066, %190 ], [ %.066, %188 ], [ %.066, %185 ], [ %.066, %184 ], [ %.066, %181 ], [ %.066, %180 ], [ %.066, %179 ], [ %.066, %168 ], [ %.066, %158 ], [ %.066, %157 ], [ %.066, %144 ], [ %.066, %134 ], [ %.066, %130 ], [ %.066, %129 ], [ %.066, %128 ], [ %.066, %117 ], [ %.066, %107 ], [ %.066, %103 ], [ %.066, %99 ], [ %.066, %98 ], [ %.066, %88 ], [ %.066, %78 ], [ %.066, %77 ], [ %.066, %67 ], [ %.066, %57 ], [ %.066, %55 ], [ %.066, %43 ], [ %.066, %33 ], [ %.066, %31 ], [ %.066, %18 ], [ %.066, %8 ]
  %.064.be = phi i32 [ %.064, %7 ], [ %.064, %416 ], [ %.064, %415 ], [ %.064, %414 ], [ %.064, %413 ], [ %.064, %412 ], [ %.064, %407 ], [ %.064, %405 ], [ %.064, %401 ], [ %.064, %400 ], [ %.064, %399 ], [ %.064, %398 ], [ %.064, %397 ], [ %.064, %395 ], [ %.064, %392 ], [ %.064, %391 ], [ %.064, %380 ], [ %.064, %370 ], [ %.064, %369 ], [ %.064, %361 ], [ %.064, %356 ], [ %.064, %351 ], [ %.064, %348 ], [ %.064, %347 ], [ %.064, %345 ], [ %.064, %344 ], [ %.064, %342 ], [ %.064, %341 ], [ %.064, %336 ], [ %.064, %334 ], [ %333, %329 ], [ %.064, %327 ], [ %.064, %316 ], [ %.064, %306 ], [ 0, %305 ], [ %.064, %303 ], [ %.064, %292 ], [ %.064, %282 ], [ %.064, %280 ], [ %.064, %268 ], [ %.064, %258 ], [ %.064, %257 ], [ %.064, %255 ], [ %.064, %243 ], [ %.064, %233 ], [ %.064, %232 ], [ %.064, %230 ], [ %.064, %229 ], [ %.064, %227 ], [ %.064, %226 ], [ %.064, %221 ], [ %.064, %219 ], [ %.064, %218 ], [ %.064, %204 ], [ %.064, %194 ], [ %.064, %191 ], [ %.064, %190 ], [ %.064, %188 ], [ %.064, %185 ], [ %.064, %184 ], [ %.064, %181 ], [ %.064, %180 ], [ %.064, %179 ], [ %.064, %168 ], [ %.064, %158 ], [ %.064, %157 ], [ %.064, %144 ], [ %.064, %134 ], [ %.064, %130 ], [ %.064, %129 ], [ %.064, %128 ], [ %.064, %117 ], [ %.064, %107 ], [ %.064, %103 ], [ %.064, %99 ], [ %.064, %98 ], [ %.064, %88 ], [ %.064, %78 ], [ %.064, %77 ], [ %.064, %67 ], [ %.064, %57 ], [ %.064, %55 ], [ %.064, %43 ], [ %.064, %33 ], [ %.064, %31 ], [ %.064, %18 ], [ %.064, %8 ]
  %.062.be = phi i32 [ %.062, %7 ], [ %.062, %416 ], [ %.062, %415 ], [ %.062, %414 ], [ %.062, %413 ], [ %.062, %412 ], [ %.062, %407 ], [ %.062, %405 ], [ %.062, %401 ], [ %.062, %400 ], [ %.062, %399 ], [ %.062, %398 ], [ %.062, %397 ], [ %.062, %395 ], [ %.062, %392 ], [ %.062, %391 ], [ %.062, %380 ], [ %.062, %370 ], [ %.062, %369 ], [ %.062, %361 ], [ %.062, %356 ], [ %.062, %351 ], [ %.062, %348 ], [ %.062, %347 ], [ %.062, %345 ], [ %.062, %344 ], [ %.062, %342 ], [ %.062, %341 ], [ %.062, %336 ], [ %335, %334 ], [ %.062, %329 ], [ %.062, %327 ], [ %.062, %316 ], [ %.062, %306 ], [ %.068, %305 ], [ %.062, %303 ], [ %.062, %292 ], [ %.062, %282 ], [ %.062, %280 ], [ %.062, %268 ], [ %.062, %258 ], [ %.062, %257 ], [ %.062, %255 ], [ %.062, %243 ], [ %.062, %233 ], [ %.062, %232 ], [ %.062, %230 ], [ %.062, %229 ], [ %.062, %227 ], [ %.062, %226 ], [ %.062, %221 ], [ %.062, %219 ], [ %.062, %218 ], [ %.062, %204 ], [ %.062, %194 ], [ %.062, %191 ], [ %.062, %190 ], [ %.062, %188 ], [ %.062, %185 ], [ %.062, %184 ], [ %.062, %181 ], [ %.062, %180 ], [ %.062, %179 ], [ %.062, %168 ], [ %.062, %158 ], [ %.062, %157 ], [ %.062, %144 ], [ %.062, %134 ], [ %.062, %130 ], [ %.062, %129 ], [ %.062, %128 ], [ %.062, %117 ], [ %.062, %107 ], [ %.062, %103 ], [ %.062, %99 ], [ %.062, %98 ], [ %.062, %88 ], [ %.062, %78 ], [ %.062, %77 ], [ %.062, %67 ], [ %.062, %57 ], [ %.062, %55 ], [ %.062, %43 ], [ %.062, %33 ], [ %.062, %31 ], [ %.062, %18 ], [ %.062, %8 ]
  %.060.be = phi i32 [ %.060, %7 ], [ %.060, %416 ], [ %.060, %415 ], [ %.060, %414 ], [ %.060, %413 ], [ %.060, %412 ], [ %.060, %407 ], [ %.060, %405 ], [ %.060, %401 ], [ %.060, %400 ], [ %.060, %399 ], [ %.060, %398 ], [ %.060, %397 ], [ %.060, %395 ], [ %.060, %392 ], [ %.060, %391 ], [ %.060, %380 ], [ %.060, %370 ], [ %.060, %369 ], [ %368, %361 ], [ %.060, %356 ], [ %.060, %351 ], [ %.060, %348 ], [ 0, %347 ], [ %.060, %345 ], [ %.060, %344 ], [ %.060, %342 ], [ %.060, %341 ], [ %.060, %336 ], [ %.060, %334 ], [ %.060, %329 ], [ %.060, %327 ], [ %.060, %316 ], [ %.060, %306 ], [ %.060, %305 ], [ %.060, %303 ], [ %.060, %292 ], [ %.060, %282 ], [ %.060, %280 ], [ %.060, %268 ], [ %.060, %258 ], [ %.060, %257 ], [ %.060, %255 ], [ %.060, %243 ], [ %.060, %233 ], [ %.060, %232 ], [ %.060, %230 ], [ %.060, %229 ], [ %.060, %227 ], [ %.060, %226 ], [ %.060, %221 ], [ %.060, %219 ], [ %.060, %218 ], [ %.060, %204 ], [ %.060, %194 ], [ %.060, %191 ], [ %.060, %190 ], [ %.060, %188 ], [ %.060, %185 ], [ %.060, %184 ], [ %.060, %181 ], [ %.060, %180 ], [ %.060, %179 ], [ %.060, %168 ], [ %.060, %158 ], [ %.060, %157 ], [ %.060, %144 ], [ %.060, %134 ], [ %.060, %130 ], [ %.060, %129 ], [ %.060, %128 ], [ %.060, %117 ], [ %.060, %107 ], [ %.060, %103 ], [ %.060, %99 ], [ %.060, %98 ], [ %.060, %88 ], [ %.060, %78 ], [ %.060, %77 ], [ %.060, %67 ], [ %.060, %57 ], [ %.060, %55 ], [ %.060, %43 ], [ %.060, %33 ], [ %.060, %31 ], [ %.060, %18 ], [ %.060, %8 ]
  %.058.be = phi i32 [ %.058, %7 ], [ %417, %416 ], [ %.058, %415 ], [ %.058, %414 ], [ %.058, %413 ], [ %.058, %412 ], [ %.058, %407 ], [ %.058, %405 ], [ %.058, %401 ], [ %.058, %400 ], [ %.058, %399 ], [ %.058, %398 ], [ %.058, %397 ], [ %.058, %395 ], [ %.058, %392 ], [ %.058, %391 ], [ %381, %380 ], [ %.058, %370 ], [ %.058, %369 ], [ %.058, %361 ], [ %.058, %356 ], [ %.058, %351 ], [ %.058, %348 ], [ 1, %347 ], [ %.058, %345 ], [ %.058, %344 ], [ %.058, %342 ], [ %.058, %341 ], [ %.058, %336 ], [ %.058, %334 ], [ %.058, %329 ], [ %.058, %327 ], [ %.058, %316 ], [ %.058, %306 ], [ %.058, %305 ], [ %.058, %303 ], [ %.058, %292 ], [ %.058, %282 ], [ %.058, %280 ], [ %.058, %268 ], [ %.058, %258 ], [ %.058, %257 ], [ %.058, %255 ], [ %.058, %243 ], [ %.058, %233 ], [ %.058, %232 ], [ %.058, %230 ], [ %.058, %229 ], [ %.058, %227 ], [ %.058, %226 ], [ %.058, %221 ], [ %.058, %219 ], [ %.058, %218 ], [ %.058, %204 ], [ %.058, %194 ], [ %.058, %191 ], [ %.058, %190 ], [ %.058, %188 ], [ %.058, %185 ], [ %.058, %184 ], [ %.058, %181 ], [ %.058, %180 ], [ %.058, %179 ], [ %.058, %168 ], [ %.058, %158 ], [ %.058, %157 ], [ %.058, %144 ], [ %.058, %134 ], [ %.058, %130 ], [ %.058, %129 ], [ %.058, %128 ], [ %.058, %117 ], [ %.058, %107 ], [ %.058, %103 ], [ %.058, %99 ], [ %.058, %98 ], [ %.058, %88 ], [ %.058, %78 ], [ %.058, %77 ], [ %.058, %67 ], [ %.058, %57 ], [ %.058, %55 ], [ %.058, %43 ], [ %.058, %33 ], [ %.058, %31 ], [ %.058, %18 ], [ %.058, %8 ]
  %.0.be = phi i32 [ %.0, %7 ], [ 659484111, %416 ], [ -500492203, %415 ], [ -1892406310, %414 ], [ -196715185, %413 ], [ 1168643724, %412 ], [ 214776446, %407 ], [ -760381564, %405 ], [ -1551346510, %401 ], [ -218485563, %400 ], [ 1141317255, %399 ], [ 237442959, %398 ], [ 724703303, %397 ], [ -789370651, %395 ], [ -1909081447, %392 ], [ 1202089640, %391 ], [ %390, %380 ], [ %379, %370 ], [ -100675745, %369 ], [ 1448099701, %361 ], [ %360, %356 ], [ %355, %351 ], [ %350, %348 ], [ 1202089640, %347 ], [ 1642194774, %345 ], [ -1525285507, %344 ], [ -1956467880, %342 ], [ 829081405, %341 ], [ -1964283495, %336 ], [ 605646960, %334 ], [ 156846823, %329 ], [ %328, %327 ], [ %326, %316 ], [ %315, %306 ], [ 605646960, %305 ], [ %304, %303 ], [ %302, %292 ], [ %291, %282 ], [ %281, %280 ], [ %279, %268 ], [ %267, %258 ], [ -1956467880, %257 ], [ %256, %255 ], [ %254, %243 ], [ %242, %233 ], [ 1642194774, %232 ], [ 1520625580, %230 ], [ -1117305080, %229 ], [ -45512342, %227 ], [ 277788466, %226 ], [ 287629924, %221 ], [ 2033863508, %219 ], [ -1601470086, %218 ], [ %217, %204 ], [ %203, %194 ], [ %193, %191 ], [ 2033863508, %190 ], [ %189, %188 ], [ %187, %185 ], [ -45512342, %184 ], [ %183, %181 ], [ 1520625580, %180 ], [ -1428588780, %179 ], [ %178, %168 ], [ %167, %158 ], [ -1364502654, %157 ], [ %156, %144 ], [ %143, %134 ], [ %133, %130 ], [ -1428588780, %129 ], [ -5634455, %128 ], [ %127, %117 ], [ %116, %107 ], [ -234990064, %103 ], [ %102, %99 ], [ -5634455, %98 ], [ %97, %88 ], [ %87, %78 ], [ -704706426, %77 ], [ %76, %67 ], [ %66, %57 ], [ %56, %55 ], [ %54, %43 ], [ %42, %33 ], [ %32, %31 ], [ %30, %18 ], [ %17, %8 ]
  br label %7

8:                                                ; preds = %7
  %9 = load i32, i32* @x.5, align 4
  %10 = load i32, i32* @y.6, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %15, %14
  %17 = select i1 %16, i32 -789370651, i32 -641521823
  br label %.backedge

18:                                               ; preds = %7
  tail call void @_Z4initv()
  %19 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull @N, i32* nonnull @M)
  %20 = load i32, i32* @N, align 4
  %21 = icmp eq i32 %20, 0
  store i1 %21, i1* %6, align 1
  %22 = load i32, i32* @x.5, align 4
  %23 = load i32, i32* @y.6, align 4
  %24 = add i32 %22, -1
  %25 = mul i32 %24, %22
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %28, %27
  %30 = select i1 %29, i32 293424747, i32 -641521823
  br label %.backedge

31:                                               ; preds = %7
  %.0..0..0. = load volatile i1, i1* %6, align 1
  %32 = select i1 %.0..0..0., i32 1746457880, i32 -235762564
  br label %.backedge

33:                                               ; preds = %7
  %34 = load i32, i32* @x.5, align 4
  %35 = load i32, i32* @y.6, align 4
  %36 = add i32 %34, -1
  %37 = mul i32 %36, %34
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %40, %39
  %42 = select i1 %41, i32 724703303, i32 -486293706
  br label %.backedge

43:                                               ; preds = %7
  %44 = load i32, i32* @M, align 4
  %45 = icmp eq i32 %44, 0
  store i1 %45, i1* %5, align 1
  %46 = load i32, i32* @x.5, align 4
  %47 = load i32, i32* @y.6, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -1605614239, i32 -486293706
  br label %.backedge

55:                                               ; preds = %7
  %.0..0..0.53 = load volatile i1, i1* %5, align 1
  %56 = select i1 %.0..0..0.53, i32 1606374432, i32 -235762564
  br label %.backedge

57:                                               ; preds = %7
  %58 = load i32, i32* @x.5, align 4
  %59 = load i32, i32* @y.6, align 4
  %60 = add i32 %58, -1
  %61 = mul i32 %60, %58
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %64, %63
  %66 = select i1 %65, i32 237442959, i32 1245635560
  br label %.backedge

67:                                               ; preds = %7
  %68 = load i32, i32* @x.5, align 4
  %69 = load i32, i32* @y.6, align 4
  %70 = add i32 %68, -1
  %71 = mul i32 %70, %68
  %72 = and i32 %71, 1
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %74, %73
  %76 = select i1 %75, i32 816674235, i32 1245635560
  br label %.backedge

77:                                               ; preds = %7
  br label %.backedge

78:                                               ; preds = %7
  %79 = load i32, i32* @x.5, align 4
  %80 = load i32, i32* @y.6, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 1141317255, i32 -700485706
  br label %.backedge

88:                                               ; preds = %7
  %89 = load i32, i32* @x.5, align 4
  %90 = load i32, i32* @y.6, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 177627, i32 -700485706
  br label %.backedge

98:                                               ; preds = %7
  br label %.backedge

99:                                               ; preds = %7
  %100 = load i32, i32* @N, align 4
  %101 = icmp slt i32 %.080, %100
  %102 = select i1 %101, i32 1006419130, i32 -1546945016
  br label %.backedge

103:                                              ; preds = %7
  %104 = sext i32 %.080 to i64
  %105 = getelementptr inbounds [2000 x i32], [2000 x i32]* @h, i64 0, i64 %104
  %106 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %105)
  br label %.backedge

107:                                              ; preds = %7
  %108 = load i32, i32* @x.5, align 4
  %109 = load i32, i32* @y.6, align 4
  %110 = add i32 %108, -1
  %111 = mul i32 %110, %108
  %112 = and i32 %111, 1
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %114, %113
  %116 = select i1 %115, i32 -218485563, i32 -1198756516
  br label %.backedge

117:                                              ; preds = %7
  %118 = add i32 %.080, 1
  %119 = load i32, i32* @x.5, align 4
  %120 = load i32, i32* @y.6, align 4
  %121 = add i32 %119, -1
  %122 = mul i32 %121, %119
  %123 = and i32 %122, 1
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %125, %124
  %127 = select i1 %126, i32 -1030627047, i32 -1198756516
  br label %.backedge

128:                                              ; preds = %7
  br label %.backedge

129:                                              ; preds = %7
  br label %.backedge

130:                                              ; preds = %7
  %131 = load i32, i32* @M, align 4
  %132 = icmp slt i32 %.078, %131
  %133 = select i1 %132, i32 1394703578, i32 -247637642
  br label %.backedge

134:                                              ; preds = %7
  %135 = load i32, i32* @x.5, align 4
  %136 = load i32, i32* @y.6, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 -1551346510, i32 -1779535030
  br label %.backedge

144:                                              ; preds = %7
  %145 = sext i32 %.078 to i64
  %146 = getelementptr inbounds [2000 x i32], [2000 x i32]* @w, i64 0, i64 %145
  %147 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %146)
  %148 = load i32, i32* @x.5, align 4
  %149 = load i32, i32* @y.6, align 4
  %150 = add i32 %148, -1
  %151 = mul i32 %150, %148
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 547231286, i32 -1779535030
  br label %.backedge

157:                                              ; preds = %7
  br label %.backedge

158:                                              ; preds = %7
  %159 = load i32, i32* @x.5, align 4
  %160 = load i32, i32* @y.6, align 4
  %161 = add i32 %159, -1
  %162 = mul i32 %161, %159
  %163 = and i32 %162, 1
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %165, %164
  %167 = select i1 %166, i32 -760381564, i32 297824080
  br label %.backedge

168:                                              ; preds = %7
  %169 = add i32 %.078, 1
  %170 = load i32, i32* @x.5, align 4
  %171 = load i32, i32* @y.6, align 4
  %172 = add i32 %170, -1
  %173 = mul i32 %172, %170
  %174 = and i32 %173, 1
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %176, %175
  %178 = select i1 %177, i32 -680883247, i32 297824080
  br label %.backedge

179:                                              ; preds = %7
  br label %.backedge

180:                                              ; preds = %7
  br label %.backedge

181:                                              ; preds = %7
  %182 = load i32, i32* @N, align 4
  %.not85 = icmp sgt i32 %.076, %182
  %183 = select i1 %.not85, i32 1016221248, i32 -912876161
  br label %.backedge

184:                                              ; preds = %7
  br label %.backedge

185:                                              ; preds = %7
  %186 = load i32, i32* @N, align 4
  %.not84 = icmp sgt i32 %.074, %186
  %187 = select i1 %.not84, i32 -531720673, i32 -892802776
  br label %.backedge

188:                                              ; preds = %7
  %.not83 = icmp eq i32 %.076, %.074
  %189 = select i1 %.not83, i32 287629924, i32 756044874
  br label %.backedge

190:                                              ; preds = %7
  br label %.backedge

191:                                              ; preds = %7
  %192 = icmp slt i32 %.070, %.074
  %193 = select i1 %192, i32 1141802649, i32 1944383143
  br label %.backedge

194:                                              ; preds = %7
  %195 = load i32, i32* @x.5, align 4
  %196 = load i32, i32* @y.6, align 4
  %197 = add i32 %195, -1
  %198 = mul i32 %197, %195
  %199 = and i32 %198, 1
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %201, %200
  %203 = select i1 %202, i32 214776446, i32 -481913807
  br label %.backedge

204:                                              ; preds = %7
  %205 = sext i32 %.070 to i64
  %206 = getelementptr inbounds [2000 x i32], [2000 x i32]* @h, i64 0, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = add i32 %207, %.072
  %209 = load i32, i32* @x.5, align 4
  %210 = load i32, i32* @y.6, align 4
  %211 = add i32 %209, -1
  %212 = mul i32 %211, %209
  %213 = and i32 %212, 1
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %215, %214
  %217 = select i1 %216, i32 -1896258684, i32 -481913807
  br label %.backedge

218:                                              ; preds = %7
  br label %.backedge

219:                                              ; preds = %7
  %220 = add i32 %.070, 1
  br label %.backedge

221:                                              ; preds = %7
  %222 = sext i32 %.072 to i64
  %223 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @a, i64 0, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = add i32 %224, 1
  store i32 %225, i32* %223, align 4
  br label %.backedge

226:                                              ; preds = %7
  br label %.backedge

227:                                              ; preds = %7
  %228 = add i32 %.074, 1
  br label %.backedge

229:                                              ; preds = %7
  br label %.backedge

230:                                              ; preds = %7
  %231 = add i32 %.076, 1
  br label %.backedge

232:                                              ; preds = %7
  br label %.backedge

233:                                              ; preds = %7
  %234 = load i32, i32* @x.5, align 4
  %235 = load i32, i32* @y.6, align 4
  %236 = add i32 %234, -1
  %237 = mul i32 %236, %234
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %240, %239
  %242 = select i1 %241, i32 1168643724, i32 -47935264
  br label %.backedge

243:                                              ; preds = %7
  %244 = load i32, i32* @M, align 4
  %245 = icmp sle i32 %.068, %244
  store i1 %245, i1* %4, align 1
  %246 = load i32, i32* @x.5, align 4
  %247 = load i32, i32* @y.6, align 4
  %248 = add i32 %246, -1
  %249 = mul i32 %248, %246
  %250 = and i32 %249, 1
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %252, %251
  %254 = select i1 %253, i32 -824499998, i32 -47935264
  br label %.backedge

255:                                              ; preds = %7
  %.0..0..0.54 = load volatile i1, i1* %4, align 1
  %256 = select i1 %.0..0..0.54, i32 2005339606, i32 -229501059
  br label %.backedge

257:                                              ; preds = %7
  br label %.backedge

258:                                              ; preds = %7
  %259 = load i32, i32* @x.5, align 4
  %260 = load i32, i32* @y.6, align 4
  %261 = add i32 %259, -1
  %262 = mul i32 %261, %259
  %263 = and i32 %262, 1
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %265, %264
  %267 = select i1 %266, i32 -196715185, i32 1047650443
  br label %.backedge

268:                                              ; preds = %7
  %269 = load i32, i32* @M, align 4
  %270 = icmp sle i32 %.066, %269
  store i1 %270, i1* %3, align 1
  %271 = load i32, i32* @x.5, align 4
  %272 = load i32, i32* @y.6, align 4
  %273 = add i32 %271, -1
  %274 = mul i32 %273, %271
  %275 = and i32 %274, 1
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %277, %276
  %279 = select i1 %278, i32 -1922612905, i32 1047650443
  br label %.backedge

280:                                              ; preds = %7
  %.0..0..0.55 = load volatile i1, i1* %3, align 1
  %281 = select i1 %.0..0..0.55, i32 -1599701418, i32 -993844755
  br label %.backedge

282:                                              ; preds = %7
  %283 = load i32, i32* @x.5, align 4
  %284 = load i32, i32* @y.6, align 4
  %285 = add i32 %283, -1
  %286 = mul i32 %285, %283
  %287 = and i32 %286, 1
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %289, %288
  %291 = select i1 %290, i32 -1892406310, i32 -124688241
  br label %.backedge

292:                                              ; preds = %7
  %293 = icmp ne i32 %.068, %.066
  store i1 %293, i1* %2, align 1
  %294 = load i32, i32* @x.5, align 4
  %295 = load i32, i32* @y.6, align 4
  %296 = add i32 %294, -1
  %297 = mul i32 %296, %294
  %298 = and i32 %297, 1
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %300, %299
  %302 = select i1 %301, i32 -950663845, i32 -124688241
  br label %.backedge

303:                                              ; preds = %7
  %.0..0..0.56 = load volatile i1, i1* %2, align 1
  %304 = select i1 %.0..0..0.56, i32 -1899267193, i32 -1964283495
  br label %.backedge

305:                                              ; preds = %7
  br label %.backedge

306:                                              ; preds = %7
  %307 = load i32, i32* @x.5, align 4
  %308 = load i32, i32* @y.6, align 4
  %309 = add i32 %307, -1
  %310 = mul i32 %309, %307
  %311 = and i32 %310, 1
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %313, %312
  %315 = select i1 %314, i32 -500492203, i32 207997244
  br label %.backedge

316:                                              ; preds = %7
  %317 = icmp slt i32 %.062, %.066
  store i1 %317, i1* %1, align 1
  %318 = load i32, i32* @x.5, align 4
  %319 = load i32, i32* @y.6, align 4
  %320 = add i32 %318, -1
  %321 = mul i32 %320, %318
  %322 = and i32 %321, 1
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %324, %323
  %326 = select i1 %325, i32 -1195961008, i32 207997244
  br label %.backedge

327:                                              ; preds = %7
  %.0..0..0.57 = load volatile i1, i1* %1, align 1
  %328 = select i1 %.0..0..0.57, i32 2041294220, i32 787060027
  br label %.backedge

329:                                              ; preds = %7
  %330 = sext i32 %.062 to i64
  %331 = getelementptr inbounds [2000 x i32], [2000 x i32]* @w, i64 0, i64 %330
  %332 = load i32, i32* %331, align 4
  %333 = add i32 %332, %.064
  br label %.backedge

334:                                              ; preds = %7
  %335 = add i32 %.062, 1
  br label %.backedge

336:                                              ; preds = %7
  %337 = sext i32 %.064 to i64
  %338 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @b, i64 0, i64 %337
  %339 = load i32, i32* %338, align 4
  %340 = add i32 %339, 1
  store i32 %340, i32* %338, align 4
  br label %.backedge

341:                                              ; preds = %7
  br label %.backedge

342:                                              ; preds = %7
  %343 = add i32 %.066, 1
  br label %.backedge

344:                                              ; preds = %7
  br label %.backedge

345:                                              ; preds = %7
  %346 = add i32 %.068, 1
  br label %.backedge

347:                                              ; preds = %7
  br label %.backedge

348:                                              ; preds = %7
  %349 = icmp slt i32 %.058, 1000000
  %350 = select i1 %349, i32 -260547619, i32 1656871236
  br label %.backedge

351:                                              ; preds = %7
  %352 = sext i32 %.058 to i64
  %353 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @a, i64 0, i64 %352
  %354 = load i32, i32* %353, align 4
  %.not82 = icmp eq i32 %354, 0
  %355 = select i1 %.not82, i32 1448099701, i32 -724756985
  br label %.backedge

356:                                              ; preds = %7
  %357 = sext i32 %.058 to i64
  %358 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @b, i64 0, i64 %357
  %359 = load i32, i32* %358, align 4
  %.not = icmp eq i32 %359, 0
  %360 = select i1 %.not, i32 1448099701, i32 1373322836
  br label %.backedge

361:                                              ; preds = %7
  %362 = sext i32 %.058 to i64
  %363 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @a, i64 0, i64 %362
  %364 = load i32, i32* %363, align 4
  %365 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @b, i64 0, i64 %362
  %366 = load i32, i32* %365, align 4
  %367 = mul nsw i32 %366, %364
  %368 = add i32 %367, %.060
  br label %.backedge

369:                                              ; preds = %7
  br label %.backedge

370:                                              ; preds = %7
  %371 = load i32, i32* @x.5, align 4
  %372 = load i32, i32* @y.6, align 4
  %373 = add i32 %371, -1
  %374 = mul i32 %373, %371
  %375 = and i32 %374, 1
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %377, %376
  %379 = select i1 %378, i32 659484111, i32 1918087903
  br label %.backedge

380:                                              ; preds = %7
  %381 = add i32 %.058, 1
  %382 = load i32, i32* @x.5, align 4
  %383 = load i32, i32* @y.6, align 4
  %384 = add i32 %382, -1
  %385 = mul i32 %384, %382
  %386 = and i32 %385, 1
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %388, %387
  %390 = select i1 %389, i32 513922410, i32 1918087903
  br label %.backedge

391:                                              ; preds = %7
  br label %.backedge

392:                                              ; preds = %7
  %393 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %.060)
  br label %.backedge

394:                                              ; preds = %7
  ret i32 0

395:                                              ; preds = %7
  tail call void @_Z4initv()
  %396 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull @N, i32* nonnull @M)
  br label %.backedge

397:                                              ; preds = %7
  br label %.backedge

398:                                              ; preds = %7
  br label %.backedge

399:                                              ; preds = %7
  br label %.backedge

400:                                              ; preds = %7
  %.neg = add i32 %.080, 1
  br label %.backedge

401:                                              ; preds = %7
  %402 = sext i32 %.078 to i64
  %403 = getelementptr inbounds [2000 x i32], [2000 x i32]* @w, i64 0, i64 %402
  %404 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %403)
  br label %.backedge

405:                                              ; preds = %7
  %406 = add i32 %.078, 1
  br label %.backedge

407:                                              ; preds = %7
  %408 = sext i32 %.070 to i64
  %409 = getelementptr inbounds [2000 x i32], [2000 x i32]* @h, i64 0, i64 %408
  %410 = load i32, i32* %409, align 4
  %411 = add i32 %410, %.072
  br label %.backedge

412:                                              ; preds = %7
  br label %.backedge

413:                                              ; preds = %7
  br label %.backedge

414:                                              ; preds = %7
  br label %.backedge

415:                                              ; preds = %7
  br label %.backedge

416:                                              ; preds = %7
  %417 = add i32 %.058, 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s752280511.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.7, align 4
  %4 = load i32, i32* @y.8, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -103031792, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -103031792, label %11
    i32 -910345349, label %14
    i32 2007536171, label %24
    i32 -1141921645, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -910345349, i32 -1141921645
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.7, align 4
  %16 = load i32, i32* @y.8, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 2007536171, i32 -1141921645
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -910345349, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
