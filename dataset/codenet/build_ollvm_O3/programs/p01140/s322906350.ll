; ModuleID = 'build_ollvm/programs/p01140/s322906350.ll'
source_filename = "Project_CodeNet_C++1400/p01140/s322906350.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s322906350.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i1, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1500001 x i32], align 16
  %11 = alloca [1500001 x i32], align 16
  %12 = bitcast [1500001 x i32]* %11 to i8*
  %13 = bitcast [1500001 x i32]* %10 to i8*
  br label %14

14:                                               ; preds = %.backedge, %0
  %.070 = phi i8* [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i32 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i32 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i32 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.050 = phi i32 [ undef, %0 ], [ %.050.be, %.backedge ]
  %.0 = phi i32 [ 441265398, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 441265398, label %15
    i32 1673493334, label %20
    i32 678458914, label %30
    i32 -1124395083, label %42
    i32 -1625170985, label %44
    i32 -1410037797, label %45
    i32 -1697611363, label %55
    i32 -1681252740, label %72
    i32 1079882236, label %73
    i32 2127358336, label %77
    i32 1658292851, label %81
    i32 -1095764432, label %91
    i32 -1610243505, label %102
    i32 383875798, label %103
    i32 444364494, label %113
    i32 -1914281093, label %123
    i32 -1428088767, label %124
    i32 2018696738, label %128
    i32 -1867107434, label %138
    i32 -774352135, label %151
    i32 976963599, label %152
    i32 -53788304, label %162
    i32 -1060059428, label %173
    i32 -371159908, label %174
    i32 141718602, label %175
    i32 -214369765, label %179
    i32 1289395234, label %180
    i32 1583105623, label %190
    i32 -1104800517, label %202
    i32 -1406379916, label %204
    i32 -1222100652, label %213
    i32 -800702557, label %223
    i32 -845040675, label %234
    i32 -856590105, label %235
    i32 -549809693, label %236
    i32 -1993467627, label %238
    i32 -1605053025, label %248
    i32 -876705224, label %258
    i32 -1200645967, label %259
    i32 1627527762, label %269
    i32 2143232559, label %281
    i32 381854004, label %283
    i32 -295807519, label %284
    i32 -1488419737, label %294
    i32 986258065, label %306
    i32 327331323, label %308
    i32 939581661, label %317
    i32 -1747699013, label %318
    i32 948516447, label %328
    i32 470334174, label %338
    i32 -1851625210, label %339
    i32 271110209, label %341
    i32 1985494727, label %342
    i32 466332075, label %352
    i32 1701116177, label %363
    i32 1079172634, label %365
    i32 296787306, label %375
    i32 1239985614, label %392
    i32 -1416687613, label %393
    i32 -886238445, label %395
    i32 -1613275194, label %398
    i32 1996074219, label %408
    i32 -1882981943, label %418
    i32 1551684110, label %419
    i32 -1986758893, label %420
    i32 -302142019, label %422
    i32 -2103024290, label %423
    i32 554413551, label %424
    i32 1770648937, label %428
    i32 -1106293514, label %430
    i32 -1441456736, label %431
    i32 -260209811, label %433
    i32 124902107, label %434
    i32 -1500388026, label %435
    i32 1634273038, label %436
    i32 -359029145, label %437
    i32 -1544770743, label %438
    i32 -924850830, label %446
  ]

.backedge:                                        ; preds = %14, %446, %438, %437, %436, %435, %434, %433, %431, %430, %428, %424, %423, %422, %420, %419, %408, %398, %395, %393, %392, %375, %365, %363, %352, %342, %341, %339, %338, %328, %318, %317, %308, %306, %294, %284, %283, %281, %269, %259, %258, %248, %238, %236, %235, %234, %223, %213, %204, %202, %190, %180, %179, %175, %174, %173, %162, %152, %151, %138, %128, %124, %123, %113, %103, %102, %91, %81, %77, %73, %72, %55, %45, %44, %42, %30, %20, %15
  %.070.be = phi i8* [ %.070, %14 ], [ %.070, %446 ], [ %.070, %438 ], [ %.070, %437 ], [ %.070, %436 ], [ %.070, %435 ], [ %.070, %434 ], [ %.070, %433 ], [ %.070, %431 ], [ %.070, %430 ], [ %.070, %428 ], [ %.070, %424 ], [ %.070, %423 ], [ %.070, %422 ], [ %421, %420 ], [ %.070, %419 ], [ %.070, %408 ], [ %.070, %398 ], [ %.070, %395 ], [ %.070, %393 ], [ %.070, %392 ], [ %.070, %375 ], [ %.070, %365 ], [ %.070, %363 ], [ %.070, %352 ], [ %.070, %342 ], [ %.070, %341 ], [ %.070, %339 ], [ %.070, %338 ], [ %.070, %328 ], [ %.070, %318 ], [ %.070, %317 ], [ %.070, %308 ], [ %.070, %306 ], [ %.070, %294 ], [ %.070, %284 ], [ %.070, %283 ], [ %.070, %281 ], [ %.070, %269 ], [ %.070, %259 ], [ %.070, %258 ], [ %.070, %248 ], [ %.070, %238 ], [ %.070, %236 ], [ %.070, %235 ], [ %.070, %234 ], [ %.070, %223 ], [ %.070, %213 ], [ %.070, %204 ], [ %.070, %202 ], [ %.070, %190 ], [ %.070, %180 ], [ %.070, %179 ], [ %.070, %175 ], [ %.070, %174 ], [ %.070, %173 ], [ %.070, %162 ], [ %.070, %152 ], [ %.070, %151 ], [ %.070, %138 ], [ %.070, %128 ], [ %.070, %124 ], [ %.070, %123 ], [ %.070, %113 ], [ %.070, %103 ], [ %.070, %102 ], [ %.070, %91 ], [ %.070, %81 ], [ %.070, %77 ], [ %.070, %73 ], [ %.070, %72 ], [ %58, %55 ], [ %.070, %45 ], [ %.070, %44 ], [ %.070, %42 ], [ %.070, %30 ], [ %.070, %20 ], [ %.070, %15 ]
  %.068.be = phi i32 [ %.068, %14 ], [ %.068, %446 ], [ %.068, %438 ], [ %.068, %437 ], [ %.068, %436 ], [ %.068, %435 ], [ %.068, %434 ], [ %.068, %433 ], [ %.068, %431 ], [ %.068, %430 ], [ %.068, %428 ], [ %.068, %424 ], [ %.068, %423 ], [ %.neg, %422 ], [ 0, %420 ], [ %.068, %419 ], [ %.068, %408 ], [ %.068, %398 ], [ %.068, %395 ], [ %.068, %393 ], [ %.068, %392 ], [ %.068, %375 ], [ %.068, %365 ], [ %.068, %363 ], [ %.068, %352 ], [ %.068, %342 ], [ %.068, %341 ], [ %.068, %339 ], [ %.068, %338 ], [ %.068, %328 ], [ %.068, %318 ], [ %.068, %317 ], [ %.068, %308 ], [ %.068, %306 ], [ %.068, %294 ], [ %.068, %284 ], [ %.068, %283 ], [ %.068, %281 ], [ %.068, %269 ], [ %.068, %259 ], [ %.068, %258 ], [ %.068, %248 ], [ %.068, %238 ], [ %.068, %236 ], [ %.068, %235 ], [ %.068, %234 ], [ %.068, %223 ], [ %.068, %213 ], [ %.068, %204 ], [ %.068, %202 ], [ %.068, %190 ], [ %.068, %180 ], [ %.068, %179 ], [ %.068, %175 ], [ %.068, %174 ], [ %.068, %173 ], [ %.068, %162 ], [ %.068, %152 ], [ %.068, %151 ], [ %.068, %138 ], [ %.068, %128 ], [ %.068, %124 ], [ %.068, %123 ], [ %.068, %113 ], [ %.068, %103 ], [ %.068, %102 ], [ %92, %91 ], [ %.068, %81 ], [ %.068, %77 ], [ %.068, %73 ], [ %.068, %72 ], [ 0, %55 ], [ %.068, %45 ], [ %.068, %44 ], [ %.068, %42 ], [ %.068, %30 ], [ %.068, %20 ], [ %.068, %15 ]
  %.066.be = phi i32 [ %.066, %14 ], [ %.066, %446 ], [ %.066, %438 ], [ %.066, %437 ], [ %.066, %436 ], [ %.066, %435 ], [ %.066, %434 ], [ %.066, %433 ], [ %.066, %431 ], [ %.066, %430 ], [ %429, %428 ], [ %.066, %424 ], [ 0, %423 ], [ %.066, %422 ], [ %.066, %420 ], [ %.066, %419 ], [ %.066, %408 ], [ %.066, %398 ], [ %.066, %395 ], [ %.066, %393 ], [ %.066, %392 ], [ %.066, %375 ], [ %.066, %365 ], [ %.066, %363 ], [ %.066, %352 ], [ %.066, %342 ], [ %.066, %341 ], [ %.066, %339 ], [ %.066, %338 ], [ %.066, %328 ], [ %.066, %318 ], [ %.066, %317 ], [ %.066, %308 ], [ %.066, %306 ], [ %.066, %294 ], [ %.066, %284 ], [ %.066, %283 ], [ %.066, %281 ], [ %.066, %269 ], [ %.066, %259 ], [ %.066, %258 ], [ %.066, %248 ], [ %.066, %238 ], [ %.066, %236 ], [ %.066, %235 ], [ %.066, %234 ], [ %.066, %223 ], [ %.066, %213 ], [ %.066, %204 ], [ %.066, %202 ], [ %.066, %190 ], [ %.066, %180 ], [ %.066, %179 ], [ %.066, %175 ], [ %.066, %174 ], [ %.066, %173 ], [ %163, %162 ], [ %.066, %152 ], [ %.066, %151 ], [ %.066, %138 ], [ %.066, %128 ], [ %.066, %124 ], [ %.066, %123 ], [ 0, %113 ], [ %.066, %103 ], [ %.066, %102 ], [ %.066, %91 ], [ %.066, %81 ], [ %.066, %77 ], [ %.066, %73 ], [ %.066, %72 ], [ %.066, %55 ], [ %.066, %45 ], [ %.066, %44 ], [ %.066, %42 ], [ %.066, %30 ], [ %.066, %20 ], [ %.066, %15 ]
  %.064.be = phi i32 [ %.064, %14 ], [ %.064, %446 ], [ %.064, %438 ], [ %.064, %437 ], [ %.064, %436 ], [ %.064, %435 ], [ %.064, %434 ], [ %.064, %433 ], [ %.064, %431 ], [ %.064, %430 ], [ %.064, %428 ], [ %.064, %424 ], [ %.064, %423 ], [ %.064, %422 ], [ %.064, %420 ], [ %.064, %419 ], [ %.064, %408 ], [ %.064, %398 ], [ %.064, %395 ], [ %.064, %393 ], [ %.064, %392 ], [ %.064, %375 ], [ %.064, %365 ], [ %.064, %363 ], [ %.064, %352 ], [ %.064, %342 ], [ %.064, %341 ], [ %.064, %339 ], [ %.064, %338 ], [ %.064, %328 ], [ %.064, %318 ], [ %.064, %317 ], [ %.064, %308 ], [ %.064, %306 ], [ %.064, %294 ], [ %.064, %284 ], [ %.064, %283 ], [ %.064, %281 ], [ %.064, %269 ], [ %.064, %259 ], [ %.064, %258 ], [ %.064, %248 ], [ %.064, %238 ], [ %237, %236 ], [ %.064, %235 ], [ %.064, %234 ], [ %.064, %223 ], [ %.064, %213 ], [ %.064, %204 ], [ %.064, %202 ], [ %.064, %190 ], [ %.064, %180 ], [ %.064, %179 ], [ %.064, %175 ], [ 0, %174 ], [ %.064, %173 ], [ %.064, %162 ], [ %.064, %152 ], [ %.064, %151 ], [ %.064, %138 ], [ %.064, %128 ], [ %.064, %124 ], [ %.064, %123 ], [ %.064, %113 ], [ %.064, %103 ], [ %.064, %102 ], [ %.064, %91 ], [ %.064, %81 ], [ %.064, %77 ], [ %.064, %73 ], [ %.064, %72 ], [ %.064, %55 ], [ %.064, %45 ], [ %.064, %44 ], [ %.064, %42 ], [ %.064, %30 ], [ %.064, %20 ], [ %.064, %15 ]
  %.062.be = phi i32 [ %.062, %14 ], [ %.062, %446 ], [ %.062, %438 ], [ %.062, %437 ], [ %.062, %436 ], [ %.062, %435 ], [ %.062, %434 ], [ %.062, %433 ], [ %.062, %431 ], [ %.062, %430 ], [ %.062, %428 ], [ %.062, %424 ], [ %.062, %423 ], [ %.062, %422 ], [ %.062, %420 ], [ %.062, %419 ], [ %.062, %408 ], [ %.062, %398 ], [ %.062, %395 ], [ %.062, %393 ], [ %.062, %392 ], [ %.062, %375 ], [ %.062, %365 ], [ %.062, %363 ], [ %.062, %352 ], [ %.062, %342 ], [ %.062, %341 ], [ %.062, %339 ], [ %.062, %338 ], [ %.062, %328 ], [ %.062, %318 ], [ %.062, %317 ], [ %.062, %308 ], [ %.062, %306 ], [ %.062, %294 ], [ %.062, %284 ], [ %.062, %283 ], [ %.062, %281 ], [ %.062, %269 ], [ %.062, %259 ], [ %.062, %258 ], [ %.062, %248 ], [ %.062, %238 ], [ %.062, %236 ], [ %.062, %235 ], [ %.062, %234 ], [ %.062, %223 ], [ %.062, %213 ], [ %208, %204 ], [ %.062, %202 ], [ %.062, %190 ], [ %.062, %180 ], [ 0, %179 ], [ %.062, %175 ], [ %.062, %174 ], [ %.062, %173 ], [ %.062, %162 ], [ %.062, %152 ], [ %.062, %151 ], [ %.062, %138 ], [ %.062, %128 ], [ %.062, %124 ], [ %.062, %123 ], [ %.062, %113 ], [ %.062, %103 ], [ %.062, %102 ], [ %.062, %91 ], [ %.062, %81 ], [ %.062, %77 ], [ %.062, %73 ], [ %.062, %72 ], [ %.062, %55 ], [ %.062, %45 ], [ %.062, %44 ], [ %.062, %42 ], [ %.062, %30 ], [ %.062, %20 ], [ %.062, %15 ]
  %.060.be = phi i32 [ %.060, %14 ], [ %.060, %446 ], [ %.060, %438 ], [ %.060, %437 ], [ %.060, %436 ], [ %.060, %435 ], [ %.060, %434 ], [ %.060, %433 ], [ %432, %431 ], [ %.060, %430 ], [ %.060, %428 ], [ %.060, %424 ], [ %.060, %423 ], [ %.060, %422 ], [ %.060, %420 ], [ %.060, %419 ], [ %.060, %408 ], [ %.060, %398 ], [ %.060, %395 ], [ %.060, %393 ], [ %.060, %392 ], [ %.060, %375 ], [ %.060, %365 ], [ %.060, %363 ], [ %.060, %352 ], [ %.060, %342 ], [ %.060, %341 ], [ %.060, %339 ], [ %.060, %338 ], [ %.060, %328 ], [ %.060, %318 ], [ %.060, %317 ], [ %.060, %308 ], [ %.060, %306 ], [ %.060, %294 ], [ %.060, %284 ], [ %.060, %283 ], [ %.060, %281 ], [ %.060, %269 ], [ %.060, %259 ], [ %.060, %258 ], [ %.060, %248 ], [ %.060, %238 ], [ %.060, %236 ], [ %.060, %235 ], [ %.060, %234 ], [ %224, %223 ], [ %.060, %213 ], [ %.060, %204 ], [ %.060, %202 ], [ %.060, %190 ], [ %.060, %180 ], [ %.064, %179 ], [ %.060, %175 ], [ %.060, %174 ], [ %.060, %173 ], [ %.060, %162 ], [ %.060, %152 ], [ %.060, %151 ], [ %.060, %138 ], [ %.060, %128 ], [ %.060, %124 ], [ %.060, %123 ], [ %.060, %113 ], [ %.060, %103 ], [ %.060, %102 ], [ %.060, %91 ], [ %.060, %81 ], [ %.060, %77 ], [ %.060, %73 ], [ %.060, %72 ], [ %.060, %55 ], [ %.060, %45 ], [ %.060, %44 ], [ %.060, %42 ], [ %.060, %30 ], [ %.060, %20 ], [ %.060, %15 ]
  %.058.be = phi i32 [ %.058, %14 ], [ %.058, %446 ], [ %.058, %438 ], [ %.058, %437 ], [ %.058, %436 ], [ %.058, %435 ], [ %.058, %434 ], [ 0, %433 ], [ %.058, %431 ], [ %.058, %430 ], [ %.058, %428 ], [ %.058, %424 ], [ %.058, %423 ], [ %.058, %422 ], [ %.058, %420 ], [ %.058, %419 ], [ %.058, %408 ], [ %.058, %398 ], [ %.058, %395 ], [ %.058, %393 ], [ %.058, %392 ], [ %.058, %375 ], [ %.058, %365 ], [ %.058, %363 ], [ %.058, %352 ], [ %.058, %342 ], [ %.058, %341 ], [ %340, %339 ], [ %.058, %338 ], [ %.058, %328 ], [ %.058, %318 ], [ %.058, %317 ], [ %.058, %308 ], [ %.058, %306 ], [ %.058, %294 ], [ %.058, %284 ], [ %.058, %283 ], [ %.058, %281 ], [ %.058, %269 ], [ %.058, %259 ], [ %.058, %258 ], [ 0, %248 ], [ %.058, %238 ], [ %.058, %236 ], [ %.058, %235 ], [ %.058, %234 ], [ %.058, %223 ], [ %.058, %213 ], [ %.058, %204 ], [ %.058, %202 ], [ %.058, %190 ], [ %.058, %180 ], [ %.058, %179 ], [ %.058, %175 ], [ %.058, %174 ], [ %.058, %173 ], [ %.058, %162 ], [ %.058, %152 ], [ %.058, %151 ], [ %.058, %138 ], [ %.058, %128 ], [ %.058, %124 ], [ %.058, %123 ], [ %.058, %113 ], [ %.058, %103 ], [ %.058, %102 ], [ %.058, %91 ], [ %.058, %81 ], [ %.058, %77 ], [ %.058, %73 ], [ %.058, %72 ], [ %.058, %55 ], [ %.058, %45 ], [ %.058, %44 ], [ %.058, %42 ], [ %.058, %30 ], [ %.058, %20 ], [ %.058, %15 ]
  %.056.be = phi i32 [ %.056, %14 ], [ %.056, %446 ], [ %.056, %438 ], [ %.056, %437 ], [ %.056, %436 ], [ %.056, %435 ], [ %.056, %434 ], [ %.056, %433 ], [ %.056, %431 ], [ %.056, %430 ], [ %.056, %428 ], [ %.056, %424 ], [ %.056, %423 ], [ %.056, %422 ], [ %.056, %420 ], [ %.056, %419 ], [ %.056, %408 ], [ %.056, %398 ], [ %.056, %395 ], [ %.056, %393 ], [ %.056, %392 ], [ %.056, %375 ], [ %.056, %365 ], [ %.056, %363 ], [ %.056, %352 ], [ %.056, %342 ], [ %.056, %341 ], [ %.056, %339 ], [ %.056, %338 ], [ %.056, %328 ], [ %.056, %318 ], [ %.056, %317 ], [ %312, %308 ], [ %.056, %306 ], [ %.056, %294 ], [ %.056, %284 ], [ 0, %283 ], [ %.056, %281 ], [ %.056, %269 ], [ %.056, %259 ], [ %.056, %258 ], [ %.056, %248 ], [ %.056, %238 ], [ %.056, %236 ], [ %.056, %235 ], [ %.056, %234 ], [ %.056, %223 ], [ %.056, %213 ], [ %.056, %204 ], [ %.056, %202 ], [ %.056, %190 ], [ %.056, %180 ], [ %.056, %179 ], [ %.056, %175 ], [ %.056, %174 ], [ %.056, %173 ], [ %.056, %162 ], [ %.056, %152 ], [ %.056, %151 ], [ %.056, %138 ], [ %.056, %128 ], [ %.056, %124 ], [ %.056, %123 ], [ %.056, %113 ], [ %.056, %103 ], [ %.056, %102 ], [ %.056, %91 ], [ %.056, %81 ], [ %.056, %77 ], [ %.056, %73 ], [ %.056, %72 ], [ %.056, %55 ], [ %.056, %45 ], [ %.056, %44 ], [ %.056, %42 ], [ %.056, %30 ], [ %.056, %20 ], [ %.056, %15 ]
  %.054.be = phi i32 [ %.054, %14 ], [ %.054, %446 ], [ %.054, %438 ], [ %.054, %437 ], [ %.054, %436 ], [ %.054, %435 ], [ %.054, %434 ], [ %.054, %433 ], [ %.054, %431 ], [ %.054, %430 ], [ %.054, %428 ], [ %.054, %424 ], [ %.054, %423 ], [ %.054, %422 ], [ %.054, %420 ], [ %.054, %419 ], [ %.054, %408 ], [ %.054, %398 ], [ %.054, %395 ], [ %.054, %393 ], [ %.054, %392 ], [ %.054, %375 ], [ %.054, %365 ], [ %.054, %363 ], [ %.054, %352 ], [ %.054, %342 ], [ %.054, %341 ], [ %.054, %339 ], [ %.054, %338 ], [ %.054, %328 ], [ %.054, %318 ], [ %.neg72, %317 ], [ %.054, %308 ], [ %.054, %306 ], [ %.054, %294 ], [ %.054, %284 ], [ %.058, %283 ], [ %.054, %281 ], [ %.054, %269 ], [ %.054, %259 ], [ %.054, %258 ], [ %.054, %248 ], [ %.054, %238 ], [ %.054, %236 ], [ %.054, %235 ], [ %.054, %234 ], [ %.054, %223 ], [ %.054, %213 ], [ %.054, %204 ], [ %.054, %202 ], [ %.054, %190 ], [ %.054, %180 ], [ %.054, %179 ], [ %.054, %175 ], [ %.054, %174 ], [ %.054, %173 ], [ %.054, %162 ], [ %.054, %152 ], [ %.054, %151 ], [ %.054, %138 ], [ %.054, %128 ], [ %.054, %124 ], [ %.054, %123 ], [ %.054, %113 ], [ %.054, %103 ], [ %.054, %102 ], [ %.054, %91 ], [ %.054, %81 ], [ %.054, %77 ], [ %.054, %73 ], [ %.054, %72 ], [ %.054, %55 ], [ %.054, %45 ], [ %.054, %44 ], [ %.054, %42 ], [ %.054, %30 ], [ %.054, %20 ], [ %.054, %15 ]
  %.052.be = phi i32 [ %.052, %14 ], [ %.052, %446 ], [ %445, %438 ], [ %.052, %437 ], [ %.052, %436 ], [ %.052, %435 ], [ %.052, %434 ], [ %.052, %433 ], [ %.052, %431 ], [ %.052, %430 ], [ %.052, %428 ], [ %.052, %424 ], [ %.052, %423 ], [ %.052, %422 ], [ %.052, %420 ], [ %.052, %419 ], [ %.052, %408 ], [ %.052, %398 ], [ %.052, %395 ], [ %.052, %393 ], [ %.052, %392 ], [ %382, %375 ], [ %.052, %365 ], [ %.052, %363 ], [ %.052, %352 ], [ %.052, %342 ], [ 0, %341 ], [ %.052, %339 ], [ %.052, %338 ], [ %.052, %328 ], [ %.052, %318 ], [ %.052, %317 ], [ %.052, %308 ], [ %.052, %306 ], [ %.052, %294 ], [ %.052, %284 ], [ %.052, %283 ], [ %.052, %281 ], [ %.052, %269 ], [ %.052, %259 ], [ %.052, %258 ], [ %.052, %248 ], [ %.052, %238 ], [ %.052, %236 ], [ %.052, %235 ], [ %.052, %234 ], [ %.052, %223 ], [ %.052, %213 ], [ %.052, %204 ], [ %.052, %202 ], [ %.052, %190 ], [ %.052, %180 ], [ %.052, %179 ], [ %.052, %175 ], [ %.052, %174 ], [ %.052, %173 ], [ %.052, %162 ], [ %.052, %152 ], [ %.052, %151 ], [ %.052, %138 ], [ %.052, %128 ], [ %.052, %124 ], [ %.052, %123 ], [ %.052, %113 ], [ %.052, %103 ], [ %.052, %102 ], [ %.052, %91 ], [ %.052, %81 ], [ %.052, %77 ], [ %.052, %73 ], [ %.052, %72 ], [ %.052, %55 ], [ %.052, %45 ], [ %.052, %44 ], [ %.052, %42 ], [ %.052, %30 ], [ %.052, %20 ], [ %.052, %15 ]
  %.050.be = phi i32 [ %.050, %14 ], [ %.050, %446 ], [ %.050, %438 ], [ %.050, %437 ], [ %.050, %436 ], [ %.050, %435 ], [ %.050, %434 ], [ %.050, %433 ], [ %.050, %431 ], [ %.050, %430 ], [ %.050, %428 ], [ %.050, %424 ], [ %.050, %423 ], [ %.050, %422 ], [ %.050, %420 ], [ %.050, %419 ], [ %.050, %408 ], [ %.050, %398 ], [ %.050, %395 ], [ %394, %393 ], [ %.050, %392 ], [ %.050, %375 ], [ %.050, %365 ], [ %.050, %363 ], [ %.050, %352 ], [ %.050, %342 ], [ 0, %341 ], [ %.050, %339 ], [ %.050, %338 ], [ %.050, %328 ], [ %.050, %318 ], [ %.050, %317 ], [ %.050, %308 ], [ %.050, %306 ], [ %.050, %294 ], [ %.050, %284 ], [ %.050, %283 ], [ %.050, %281 ], [ %.050, %269 ], [ %.050, %259 ], [ %.050, %258 ], [ %.050, %248 ], [ %.050, %238 ], [ %.050, %236 ], [ %.050, %235 ], [ %.050, %234 ], [ %.050, %223 ], [ %.050, %213 ], [ %.050, %204 ], [ %.050, %202 ], [ %.050, %190 ], [ %.050, %180 ], [ %.050, %179 ], [ %.050, %175 ], [ %.050, %174 ], [ %.050, %173 ], [ %.050, %162 ], [ %.050, %152 ], [ %.050, %151 ], [ %.050, %138 ], [ %.050, %128 ], [ %.050, %124 ], [ %.050, %123 ], [ %.050, %113 ], [ %.050, %103 ], [ %.050, %102 ], [ %.050, %91 ], [ %.050, %81 ], [ %.050, %77 ], [ %.050, %73 ], [ %.050, %72 ], [ %.050, %55 ], [ %.050, %45 ], [ %.050, %44 ], [ %.050, %42 ], [ %.050, %30 ], [ %.050, %20 ], [ %.050, %15 ]
  %.0.be = phi i32 [ %.0, %14 ], [ 1996074219, %446 ], [ 296787306, %438 ], [ 466332075, %437 ], [ 948516447, %436 ], [ -1488419737, %435 ], [ 1627527762, %434 ], [ -1605053025, %433 ], [ -800702557, %431 ], [ 1583105623, %430 ], [ -53788304, %428 ], [ -1867107434, %424 ], [ 444364494, %423 ], [ -1095764432, %422 ], [ -1697611363, %420 ], [ 678458914, %419 ], [ %417, %408 ], [ %407, %398 ], [ 441265398, %395 ], [ 1985494727, %393 ], [ -1416687613, %392 ], [ %391, %375 ], [ %374, %365 ], [ %364, %363 ], [ %362, %352 ], [ %351, %342 ], [ 1985494727, %341 ], [ -1200645967, %339 ], [ -1851625210, %338 ], [ %337, %328 ], [ %327, %318 ], [ -295807519, %317 ], [ 939581661, %308 ], [ %307, %306 ], [ %305, %294 ], [ %293, %284 ], [ -295807519, %283 ], [ %282, %281 ], [ %280, %269 ], [ %268, %259 ], [ -1200645967, %258 ], [ %257, %248 ], [ %247, %238 ], [ 141718602, %236 ], [ -549809693, %235 ], [ 1289395234, %234 ], [ %233, %223 ], [ %222, %213 ], [ -1222100652, %204 ], [ %203, %202 ], [ %201, %190 ], [ %189, %180 ], [ 1289395234, %179 ], [ %178, %175 ], [ 141718602, %174 ], [ -1428088767, %173 ], [ %172, %162 ], [ %161, %152 ], [ 976963599, %151 ], [ %150, %138 ], [ %137, %128 ], [ %127, %124 ], [ -1428088767, %123 ], [ %122, %113 ], [ %112, %103 ], [ 1079882236, %102 ], [ %101, %91 ], [ %90, %81 ], [ 1658292851, %77 ], [ %76, %73 ], [ 1079882236, %72 ], [ %71, %55 ], [ %54, %45 ], [ -1613275194, %44 ], [ %43, %42 ], [ %41, %30 ], [ %29, %20 ], [ %19, %15 ]
  br label %14

15:                                               ; preds = %14
  %16 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %8)
  %17 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %16, i32* nonnull dereferenceable(4) %9)
  %18 = load i32, i32* %8, align 4
  %.not = icmp eq i32 %18, 0
  %19 = select i1 %.not, i32 1673493334, i32 -1410037797
  br label %.backedge

20:                                               ; preds = %14
  %21 = load i32, i32* @x.1, align 4
  %22 = load i32, i32* @y.2, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 678458914, i32 1551684110
  br label %.backedge

30:                                               ; preds = %14
  %31 = load i32, i32* %9, align 4
  %32 = icmp ne i32 %31, 0
  store i1 %32, i1* %7, align 1
  %33 = load i32, i32* @x.1, align 4
  %34 = load i32, i32* @y.2, align 4
  %35 = add i32 %33, -1
  %36 = mul i32 %35, %33
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %39, %38
  %41 = select i1 %40, i32 -1124395083, i32 1551684110
  br label %.backedge

42:                                               ; preds = %14
  %.0..0..0.40 = load volatile i1, i1* %7, align 1
  %43 = select i1 %.0..0..0.40, i32 -1410037797, i32 -1625170985
  br label %.backedge

44:                                               ; preds = %14
  br label %.backedge

45:                                               ; preds = %14
  %46 = load i32, i32* @x.1, align 4
  %47 = load i32, i32* @y.2, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -1697611363, i32 -1986758893
  br label %.backedge

55:                                               ; preds = %14
  %56 = load i32, i32* %8, align 4
  %57 = zext i32 %56 to i64
  %58 = call i8* @llvm.stacksave()
  %59 = alloca i32, i64 %57, align 16
  store i32* %59, i32** %6, align 8
  %60 = load i32, i32* %9, align 4
  %61 = zext i32 %60 to i64
  %62 = alloca i32, i64 %61, align 16
  store i32* %62, i32** %5, align 8
  %63 = load i32, i32* @x.1, align 4
  %64 = load i32, i32* @y.2, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 -1681252740, i32 -1986758893
  br label %.backedge

72:                                               ; preds = %14
  br label %.backedge

73:                                               ; preds = %14
  %74 = load i32, i32* %8, align 4
  %75 = icmp slt i32 %.068, %74
  %76 = select i1 %75, i32 2127358336, i32 383875798
  br label %.backedge

77:                                               ; preds = %14
  %78 = sext i32 %.068 to i64
  %.0..0..0.41 = load volatile i32*, i32** %6, align 8
  %79 = getelementptr inbounds i32, i32* %.0..0..0.41, i64 %78
  %80 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* dereferenceable(4) %79)
  br label %.backedge

81:                                               ; preds = %14
  %82 = load i32, i32* @x.1, align 4
  %83 = load i32, i32* @y.2, align 4
  %84 = add i32 %82, -1
  %85 = mul i32 %84, %82
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %88, %87
  %90 = select i1 %89, i32 -1095764432, i32 -302142019
  br label %.backedge

91:                                               ; preds = %14
  %92 = add i32 %.068, 1
  %93 = load i32, i32* @x.1, align 4
  %94 = load i32, i32* @y.2, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 -1610243505, i32 -302142019
  br label %.backedge

102:                                              ; preds = %14
  br label %.backedge

103:                                              ; preds = %14
  %104 = load i32, i32* @x.1, align 4
  %105 = load i32, i32* @y.2, align 4
  %106 = add i32 %104, -1
  %107 = mul i32 %106, %104
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %110, %109
  %112 = select i1 %111, i32 444364494, i32 -2103024290
  br label %.backedge

113:                                              ; preds = %14
  %114 = load i32, i32* @x.1, align 4
  %115 = load i32, i32* @y.2, align 4
  %116 = add i32 %114, -1
  %117 = mul i32 %116, %114
  %118 = and i32 %117, 1
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %120, %119
  %122 = select i1 %121, i32 -1914281093, i32 -2103024290
  br label %.backedge

123:                                              ; preds = %14
  br label %.backedge

124:                                              ; preds = %14
  %125 = load i32, i32* %9, align 4
  %126 = icmp slt i32 %.066, %125
  %127 = select i1 %126, i32 2018696738, i32 -371159908
  br label %.backedge

128:                                              ; preds = %14
  %129 = load i32, i32* @x.1, align 4
  %130 = load i32, i32* @y.2, align 4
  %131 = add i32 %129, -1
  %132 = mul i32 %131, %129
  %133 = and i32 %132, 1
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %135, %134
  %137 = select i1 %136, i32 -1867107434, i32 554413551
  br label %.backedge

138:                                              ; preds = %14
  %139 = sext i32 %.066 to i64
  %.0..0..0.43 = load volatile i32*, i32** %5, align 8
  %140 = getelementptr inbounds i32, i32* %.0..0..0.43, i64 %139
  %141 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* dereferenceable(4) %140)
  %142 = load i32, i32* @x.1, align 4
  %143 = load i32, i32* @y.2, align 4
  %144 = add i32 %142, -1
  %145 = mul i32 %144, %142
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %148, %147
  %150 = select i1 %149, i32 -774352135, i32 554413551
  br label %.backedge

151:                                              ; preds = %14
  br label %.backedge

152:                                              ; preds = %14
  %153 = load i32, i32* @x.1, align 4
  %154 = load i32, i32* @y.2, align 4
  %155 = add i32 %153, -1
  %156 = mul i32 %155, %153
  %157 = and i32 %156, 1
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %159, %158
  %161 = select i1 %160, i32 -53788304, i32 1770648937
  br label %.backedge

162:                                              ; preds = %14
  %163 = add i32 %.066, 1
  %164 = load i32, i32* @x.1, align 4
  %165 = load i32, i32* @y.2, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 -1060059428, i32 1770648937
  br label %.backedge

173:                                              ; preds = %14
  br label %.backedge

174:                                              ; preds = %14
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(6000004) %13, i8 0, i64 6000004, i1 false)
  br label %.backedge

175:                                              ; preds = %14
  %176 = load i32, i32* %8, align 4
  %177 = icmp slt i32 %.064, %176
  %178 = select i1 %177, i32 -214369765, i32 -1993467627
  br label %.backedge

179:                                              ; preds = %14
  br label %.backedge

180:                                              ; preds = %14
  %181 = load i32, i32* @x.1, align 4
  %182 = load i32, i32* @y.2, align 4
  %183 = add i32 %181, -1
  %184 = mul i32 %183, %181
  %185 = and i32 %184, 1
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %187, %186
  %189 = select i1 %188, i32 1583105623, i32 -1106293514
  br label %.backedge

190:                                              ; preds = %14
  %191 = load i32, i32* %8, align 4
  %192 = icmp slt i32 %.060, %191
  store i1 %192, i1* %4, align 1
  %193 = load i32, i32* @x.1, align 4
  %194 = load i32, i32* @y.2, align 4
  %195 = add i32 %193, -1
  %196 = mul i32 %195, %193
  %197 = and i32 %196, 1
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %199, %198
  %201 = select i1 %200, i32 -1104800517, i32 -1106293514
  br label %.backedge

202:                                              ; preds = %14
  %.0..0..0.46 = load volatile i1, i1* %4, align 1
  %203 = select i1 %.0..0..0.46, i32 -1406379916, i32 -856590105
  br label %.backedge

204:                                              ; preds = %14
  %205 = sext i32 %.060 to i64
  %.0..0..0.42 = load volatile i32*, i32** %6, align 8
  %206 = getelementptr inbounds i32, i32* %.0..0..0.42, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = add i32 %207, %.062
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds [1500001 x i32], [1500001 x i32]* %10, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = add i32 %211, 1
  store i32 %212, i32* %210, align 4
  br label %.backedge

213:                                              ; preds = %14
  %214 = load i32, i32* @x.1, align 4
  %215 = load i32, i32* @y.2, align 4
  %216 = add i32 %214, -1
  %217 = mul i32 %216, %214
  %218 = and i32 %217, 1
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %220, %219
  %222 = select i1 %221, i32 -800702557, i32 -1441456736
  br label %.backedge

223:                                              ; preds = %14
  %224 = add i32 %.060, 1
  %225 = load i32, i32* @x.1, align 4
  %226 = load i32, i32* @y.2, align 4
  %227 = add i32 %225, -1
  %228 = mul i32 %227, %225
  %229 = and i32 %228, 1
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %231, %230
  %233 = select i1 %232, i32 -845040675, i32 -1441456736
  br label %.backedge

234:                                              ; preds = %14
  br label %.backedge

235:                                              ; preds = %14
  br label %.backedge

236:                                              ; preds = %14
  %237 = add i32 %.064, 1
  br label %.backedge

238:                                              ; preds = %14
  %239 = load i32, i32* @x.1, align 4
  %240 = load i32, i32* @y.2, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 -1605053025, i32 -260209811
  br label %.backedge

248:                                              ; preds = %14
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(6000004) %12, i8 0, i64 6000004, i1 false)
  %249 = load i32, i32* @x.1, align 4
  %250 = load i32, i32* @y.2, align 4
  %251 = add i32 %249, -1
  %252 = mul i32 %251, %249
  %253 = and i32 %252, 1
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %255, %254
  %257 = select i1 %256, i32 -876705224, i32 -260209811
  br label %.backedge

258:                                              ; preds = %14
  br label %.backedge

259:                                              ; preds = %14
  %260 = load i32, i32* @x.1, align 4
  %261 = load i32, i32* @y.2, align 4
  %262 = add i32 %260, -1
  %263 = mul i32 %262, %260
  %264 = and i32 %263, 1
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %266, %265
  %268 = select i1 %267, i32 1627527762, i32 124902107
  br label %.backedge

269:                                              ; preds = %14
  %270 = load i32, i32* %9, align 4
  %271 = icmp slt i32 %.058, %270
  store i1 %271, i1* %3, align 1
  %272 = load i32, i32* @x.1, align 4
  %273 = load i32, i32* @y.2, align 4
  %274 = add i32 %272, -1
  %275 = mul i32 %274, %272
  %276 = and i32 %275, 1
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %278, %277
  %280 = select i1 %279, i32 2143232559, i32 124902107
  br label %.backedge

281:                                              ; preds = %14
  %.0..0..0.47 = load volatile i1, i1* %3, align 1
  %282 = select i1 %.0..0..0.47, i32 381854004, i32 271110209
  br label %.backedge

283:                                              ; preds = %14
  br label %.backedge

284:                                              ; preds = %14
  %285 = load i32, i32* @x.1, align 4
  %286 = load i32, i32* @y.2, align 4
  %287 = add i32 %285, -1
  %288 = mul i32 %287, %285
  %289 = and i32 %288, 1
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %291, %290
  %293 = select i1 %292, i32 -1488419737, i32 -1500388026
  br label %.backedge

294:                                              ; preds = %14
  %295 = load i32, i32* %9, align 4
  %296 = icmp slt i32 %.054, %295
  store i1 %296, i1* %2, align 1
  %297 = load i32, i32* @x.1, align 4
  %298 = load i32, i32* @y.2, align 4
  %299 = add i32 %297, -1
  %300 = mul i32 %299, %297
  %301 = and i32 %300, 1
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %303, %302
  %305 = select i1 %304, i32 986258065, i32 -1500388026
  br label %.backedge

306:                                              ; preds = %14
  %.0..0..0.48 = load volatile i1, i1* %2, align 1
  %307 = select i1 %.0..0..0.48, i32 327331323, i32 -1747699013
  br label %.backedge

308:                                              ; preds = %14
  %309 = sext i32 %.054 to i64
  %.0..0..0.44 = load volatile i32*, i32** %5, align 8
  %310 = getelementptr inbounds i32, i32* %.0..0..0.44, i64 %309
  %311 = load i32, i32* %310, align 4
  %312 = add i32 %311, %.056
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds [1500001 x i32], [1500001 x i32]* %11, i64 0, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = add i32 %315, 1
  store i32 %316, i32* %314, align 4
  br label %.backedge

317:                                              ; preds = %14
  %.neg72 = add i32 %.054, 1
  br label %.backedge

318:                                              ; preds = %14
  %319 = load i32, i32* @x.1, align 4
  %320 = load i32, i32* @y.2, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 948516447, i32 1634273038
  br label %.backedge

328:                                              ; preds = %14
  %329 = load i32, i32* @x.1, align 4
  %330 = load i32, i32* @y.2, align 4
  %331 = add i32 %329, -1
  %332 = mul i32 %331, %329
  %333 = and i32 %332, 1
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %335, %334
  %337 = select i1 %336, i32 470334174, i32 1634273038
  br label %.backedge

338:                                              ; preds = %14
  br label %.backedge

339:                                              ; preds = %14
  %340 = add i32 %.058, 1
  br label %.backedge

341:                                              ; preds = %14
  br label %.backedge

342:                                              ; preds = %14
  %343 = load i32, i32* @x.1, align 4
  %344 = load i32, i32* @y.2, align 4
  %345 = add i32 %343, -1
  %346 = mul i32 %345, %343
  %347 = and i32 %346, 1
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %349, %348
  %351 = select i1 %350, i32 466332075, i32 -359029145
  br label %.backedge

352:                                              ; preds = %14
  %353 = icmp slt i32 %.050, 1500001
  store i1 %353, i1* %1, align 1
  %354 = load i32, i32* @x.1, align 4
  %355 = load i32, i32* @y.2, align 4
  %356 = add i32 %354, -1
  %357 = mul i32 %356, %354
  %358 = and i32 %357, 1
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %360, %359
  %362 = select i1 %361, i32 1701116177, i32 -359029145
  br label %.backedge

363:                                              ; preds = %14
  %.0..0..0.49 = load volatile i1, i1* %1, align 1
  %364 = select i1 %.0..0..0.49, i32 1079172634, i32 -886238445
  br label %.backedge

365:                                              ; preds = %14
  %366 = load i32, i32* @x.1, align 4
  %367 = load i32, i32* @y.2, align 4
  %368 = add i32 %366, -1
  %369 = mul i32 %368, %366
  %370 = and i32 %369, 1
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %372, %371
  %374 = select i1 %373, i32 296787306, i32 -1544770743
  br label %.backedge

375:                                              ; preds = %14
  %376 = sext i32 %.050 to i64
  %377 = getelementptr inbounds [1500001 x i32], [1500001 x i32]* %10, i64 0, i64 %376
  %378 = load i32, i32* %377, align 4
  %379 = getelementptr inbounds [1500001 x i32], [1500001 x i32]* %11, i64 0, i64 %376
  %380 = load i32, i32* %379, align 4
  %381 = mul nsw i32 %380, %378
  %382 = add i32 %381, %.052
  %383 = load i32, i32* @x.1, align 4
  %384 = load i32, i32* @y.2, align 4
  %385 = add i32 %383, -1
  %386 = mul i32 %385, %383
  %387 = and i32 %386, 1
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %389, %388
  %391 = select i1 %390, i32 1239985614, i32 -1544770743
  br label %.backedge

392:                                              ; preds = %14
  br label %.backedge

393:                                              ; preds = %14
  %394 = add i32 %.050, 1
  br label %.backedge

395:                                              ; preds = %14
  %396 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 %.052)
  %397 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %396, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  call void @llvm.stackrestore(i8* %.070)
  br label %.backedge

398:                                              ; preds = %14
  %399 = load i32, i32* @x.1, align 4
  %400 = load i32, i32* @y.2, align 4
  %401 = add i32 %399, -1
  %402 = mul i32 %401, %399
  %403 = and i32 %402, 1
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %405, %404
  %407 = select i1 %406, i32 1996074219, i32 -924850830
  br label %.backedge

408:                                              ; preds = %14
  %409 = load i32, i32* @x.1, align 4
  %410 = load i32, i32* @y.2, align 4
  %411 = add i32 %409, -1
  %412 = mul i32 %411, %409
  %413 = and i32 %412, 1
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %415, %414
  %417 = select i1 %416, i32 -1882981943, i32 -924850830
  br label %.backedge

418:                                              ; preds = %14
  ret i32 0

419:                                              ; preds = %14
  br label %.backedge

420:                                              ; preds = %14
  %421 = call i8* @llvm.stacksave()
  br label %.backedge

422:                                              ; preds = %14
  %.neg = add i32 %.068, 1
  br label %.backedge

423:                                              ; preds = %14
  br label %.backedge

424:                                              ; preds = %14
  %425 = sext i32 %.066 to i64
  %.0..0..0.45 = load volatile i32*, i32** %5, align 8
  %426 = getelementptr inbounds i32, i32* %.0..0..0.45, i64 %425
  %427 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* dereferenceable(4) %426)
  br label %.backedge

428:                                              ; preds = %14
  %429 = add i32 %.066, 1
  br label %.backedge

430:                                              ; preds = %14
  br label %.backedge

431:                                              ; preds = %14
  %432 = add i32 %.060, 1
  br label %.backedge

433:                                              ; preds = %14
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(6000004) %12, i8 0, i64 6000004, i1 false)
  br label %.backedge

434:                                              ; preds = %14
  br label %.backedge

435:                                              ; preds = %14
  br label %.backedge

436:                                              ; preds = %14
  br label %.backedge

437:                                              ; preds = %14
  br label %.backedge

438:                                              ; preds = %14
  %439 = sext i32 %.050 to i64
  %440 = getelementptr inbounds [1500001 x i32], [1500001 x i32]* %10, i64 0, i64 %439
  %441 = load i32, i32* %440, align 4
  %442 = getelementptr inbounds [1500001 x i32], [1500001 x i32]* %11, i64 0, i64 %439
  %443 = load i32, i32* %442, align 4
  %444 = mul nsw i32 %443, %441
  %445 = add i32 %444, %.052
  br label %.backedge

446:                                              ; preds = %14
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #5

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"*, i32) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s322906350.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.3, align 4
  %4 = load i32, i32* @y.4, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1836011357, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1836011357, label %11
    i32 722786065, label %14
    i32 -433523217, label %24
    i32 -1266836487, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 722786065, i32 -1266836487
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.3, align 4
  %16 = load i32, i32* @y.4, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -433523217, i32 -1266836487
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 722786065, %25 ]
  br label %.outer
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nofree nosync nounwind willreturn }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
