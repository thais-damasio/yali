; ModuleID = 'build_ollvm/programs/p01140/s875172227.ll'
source_filename = "Project_CodeNet_C++1400/p01140/s875172227.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@p = local_unnamed_addr global [1500000 x i32] zeroinitializer, align 16
@q = local_unnamed_addr global [1500000 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1500 x i32], align 16
  %9 = alloca [1500 x i32], align 16
  br label %10

10:                                               ; preds = %.backedge, %0
  %.066 = phi i64 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i64 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i64 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i32 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i32 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i32 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.050 = phi i32 [ undef, %0 ], [ %.050.be, %.backedge ]
  %.048 = phi i32 [ undef, %0 ], [ %.048.be, %.backedge ]
  %.0 = phi i32 [ -958368865, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -958368865, label %11
    i32 186554543, label %16
    i32 528771860, label %26
    i32 589263407, label %38
    i32 455015203, label %40
    i32 1048809618, label %41
    i32 2006756194, label %51
    i32 1909245718, label %61
    i32 1325983749, label %62
    i32 -67246440, label %66
    i32 -782158444, label %70
    i32 -582190592, label %80
    i32 1414011899, label %91
    i32 2045861506, label %92
    i32 -1274588139, label %93
    i32 315053741, label %103
    i32 1889476713, label %115
    i32 1652532155, label %117
    i32 -1423537915, label %127
    i32 239313883, label %140
    i32 -206482148, label %141
    i32 -1549859049, label %143
    i32 2064007719, label %144
    i32 294580085, label %148
    i32 -1890635749, label %149
    i32 1158928345, label %159
    i32 149938521, label %171
    i32 -1399750945, label %173
    i32 -1527944094, label %183
    i32 -1366121488, label %201
    i32 -1856065542, label %202
    i32 1659115772, label %203
    i32 1121876761, label %204
    i32 989092474, label %214
    i32 -1946770844, label %225
    i32 -480022837, label %226
    i32 -1296234197, label %227
    i32 736412672, label %237
    i32 227107231, label %249
    i32 826751455, label %251
    i32 -1766920269, label %252
    i32 1423388215, label %256
    i32 -597441545, label %266
    i32 592843836, label %276
    i32 -1842082124, label %287
    i32 -1457362361, label %288
    i32 -183998814, label %298
    i32 -1344027615, label %308
    i32 1264725230, label %309
    i32 -382107953, label %311
    i32 2042730731, label %312
    i32 1760578894, label %322
    i32 747533152, label %333
    i32 -1403347911, label %335
    i32 -727219706, label %345
    i32 -1531756279, label %363
    i32 1978975369, label %364
    i32 761531158, label %374
    i32 384909028, label %385
    i32 637986978, label %386
    i32 87784821, label %388
    i32 -1581901125, label %389
    i32 52436416, label %390
    i32 -767709209, label %392
    i32 -718310626, label %393
    i32 1428561367, label %397
    i32 -1736593236, label %398
    i32 -1235868791, label %408
    i32 -535100875, label %410
    i32 1185549878, label %411
    i32 -1068281262, label %413
    i32 -1550729855, label %414
    i32 -995848206, label %415
    i32 -1999587861, label %424
  ]

.backedge:                                        ; preds = %10, %424, %415, %414, %413, %411, %410, %408, %398, %397, %393, %392, %390, %389, %388, %386, %385, %374, %364, %363, %345, %335, %333, %322, %312, %311, %309, %308, %298, %288, %287, %276, %266, %256, %252, %251, %249, %237, %227, %226, %225, %214, %204, %203, %202, %201, %183, %173, %171, %159, %149, %148, %144, %143, %141, %140, %127, %117, %115, %103, %93, %92, %91, %80, %70, %66, %62, %61, %51, %41, %38, %26, %16, %11
  %.066.be = phi i64 [ %.066, %10 ], [ %.066, %424 ], [ %.066, %415 ], [ %.066, %414 ], [ %.066, %413 ], [ %.066, %411 ], [ %.066, %410 ], [ %.066, %408 ], [ %403, %398 ], [ %.066, %397 ], [ %.066, %393 ], [ %.066, %392 ], [ %.066, %390 ], [ %.066, %389 ], [ %.066, %388 ], [ %.066, %386 ], [ %.066, %385 ], [ %.066, %374 ], [ %.066, %364 ], [ %.066, %363 ], [ %.066, %345 ], [ %.066, %335 ], [ %.066, %333 ], [ %.066, %322 ], [ %.066, %312 ], [ %.066, %311 ], [ %.066, %309 ], [ %.066, %308 ], [ %.066, %298 ], [ %.066, %288 ], [ %.066, %287 ], [ %.066, %276 ], [ %.066, %266 ], [ %.066, %256 ], [ %.066, %252 ], [ %.066, %251 ], [ %.066, %249 ], [ %.066, %237 ], [ %.066, %227 ], [ %.066, %226 ], [ %.066, %225 ], [ %.066, %214 ], [ %.066, %204 ], [ 0, %203 ], [ %.066, %202 ], [ %.066, %201 ], [ %188, %183 ], [ %.066, %173 ], [ %.066, %171 ], [ %.066, %159 ], [ %.066, %149 ], [ %.066, %148 ], [ %.066, %144 ], [ %.066, %143 ], [ %.066, %141 ], [ %.066, %140 ], [ %.066, %127 ], [ %.066, %117 ], [ %.066, %115 ], [ %.066, %103 ], [ %.066, %93 ], [ %.066, %92 ], [ %.066, %91 ], [ %.066, %80 ], [ %.066, %70 ], [ %.066, %66 ], [ %.066, %62 ], [ %.066, %61 ], [ %.066, %51 ], [ %.066, %41 ], [ %.066, %38 ], [ %.066, %26 ], [ %.066, %16 ], [ 0, %11 ]
  %.064.be = phi i64 [ %.064, %10 ], [ %.064, %424 ], [ %.064, %415 ], [ %.064, %414 ], [ 0, %413 ], [ %.064, %411 ], [ %.064, %410 ], [ %.064, %408 ], [ %.064, %398 ], [ %.064, %397 ], [ %.064, %393 ], [ %.064, %392 ], [ %.064, %390 ], [ %.064, %389 ], [ %.064, %388 ], [ %.064, %386 ], [ %.064, %385 ], [ %.064, %374 ], [ %.064, %364 ], [ %.064, %363 ], [ %.064, %345 ], [ %.064, %335 ], [ %.064, %333 ], [ %.064, %322 ], [ %.064, %312 ], [ %.064, %311 ], [ %.064, %309 ], [ %.064, %308 ], [ 0, %298 ], [ %.064, %288 ], [ %.064, %287 ], [ %.064, %276 ], [ %.064, %266 ], [ %261, %256 ], [ %.064, %252 ], [ %.064, %251 ], [ %.064, %249 ], [ %.064, %237 ], [ %.064, %227 ], [ %.064, %226 ], [ %.064, %225 ], [ %.064, %214 ], [ %.064, %204 ], [ %.064, %203 ], [ %.064, %202 ], [ %.064, %201 ], [ %.064, %183 ], [ %.064, %173 ], [ %.064, %171 ], [ %.064, %159 ], [ %.064, %149 ], [ %.064, %148 ], [ %.064, %144 ], [ %.064, %143 ], [ %.064, %141 ], [ %.064, %140 ], [ %.064, %127 ], [ %.064, %117 ], [ %.064, %115 ], [ %.064, %103 ], [ %.064, %93 ], [ %.064, %92 ], [ %.064, %91 ], [ %.064, %80 ], [ %.064, %70 ], [ %.064, %66 ], [ %.064, %62 ], [ %.064, %61 ], [ %.064, %51 ], [ %.064, %41 ], [ %.064, %38 ], [ %.064, %26 ], [ %.064, %16 ], [ 0, %11 ]
  %.062.be = phi i64 [ %.062, %10 ], [ %.062, %424 ], [ %423, %415 ], [ %.062, %414 ], [ %.062, %413 ], [ %.062, %411 ], [ %.062, %410 ], [ %.062, %408 ], [ %.062, %398 ], [ %.062, %397 ], [ %.062, %393 ], [ %.062, %392 ], [ %.062, %390 ], [ %.062, %389 ], [ %.062, %388 ], [ %.062, %386 ], [ %.062, %385 ], [ %.062, %374 ], [ %.062, %364 ], [ %.062, %363 ], [ %353, %345 ], [ %.062, %335 ], [ %.062, %333 ], [ %.062, %322 ], [ %.062, %312 ], [ %.062, %311 ], [ %.062, %309 ], [ %.062, %308 ], [ %.062, %298 ], [ %.062, %288 ], [ %.062, %287 ], [ %.062, %276 ], [ %.062, %266 ], [ %.062, %256 ], [ %.062, %252 ], [ %.062, %251 ], [ %.062, %249 ], [ %.062, %237 ], [ %.062, %227 ], [ %.062, %226 ], [ %.062, %225 ], [ %.062, %214 ], [ %.062, %204 ], [ %.062, %203 ], [ %.062, %202 ], [ %.062, %201 ], [ %.062, %183 ], [ %.062, %173 ], [ %.062, %171 ], [ %.062, %159 ], [ %.062, %149 ], [ %.062, %148 ], [ %.062, %144 ], [ %.062, %143 ], [ %.062, %141 ], [ %.062, %140 ], [ %.062, %127 ], [ %.062, %117 ], [ %.062, %115 ], [ %.062, %103 ], [ %.062, %93 ], [ %.062, %92 ], [ %.062, %91 ], [ %.062, %80 ], [ %.062, %70 ], [ %.062, %66 ], [ %.062, %62 ], [ %.062, %61 ], [ %.062, %51 ], [ %.062, %41 ], [ %.062, %38 ], [ %.062, %26 ], [ %.062, %16 ], [ 0, %11 ]
  %.060.be = phi i32 [ %.060, %10 ], [ %.060, %424 ], [ %.060, %415 ], [ %.060, %414 ], [ %.060, %413 ], [ %.060, %411 ], [ %.060, %410 ], [ %.060, %408 ], [ %.060, %398 ], [ %.060, %397 ], [ %.060, %393 ], [ %.060, %392 ], [ %391, %390 ], [ 0, %389 ], [ %.060, %388 ], [ %.060, %386 ], [ %.060, %385 ], [ %.060, %374 ], [ %.060, %364 ], [ %.060, %363 ], [ %.060, %345 ], [ %.060, %335 ], [ %.060, %333 ], [ %.060, %322 ], [ %.060, %312 ], [ %.060, %311 ], [ %.060, %309 ], [ %.060, %308 ], [ %.060, %298 ], [ %.060, %288 ], [ %.060, %287 ], [ %.060, %276 ], [ %.060, %266 ], [ %.060, %256 ], [ %.060, %252 ], [ %.060, %251 ], [ %.060, %249 ], [ %.060, %237 ], [ %.060, %227 ], [ %.060, %226 ], [ %.060, %225 ], [ %.060, %214 ], [ %.060, %204 ], [ %.060, %203 ], [ %.060, %202 ], [ %.060, %201 ], [ %.060, %183 ], [ %.060, %173 ], [ %.060, %171 ], [ %.060, %159 ], [ %.060, %149 ], [ %.060, %148 ], [ %.060, %144 ], [ %.060, %143 ], [ %.060, %141 ], [ %.060, %140 ], [ %.060, %127 ], [ %.060, %117 ], [ %.060, %115 ], [ %.060, %103 ], [ %.060, %93 ], [ %.060, %92 ], [ %.060, %91 ], [ %81, %80 ], [ %.060, %70 ], [ %.060, %66 ], [ %.060, %62 ], [ %.060, %61 ], [ 0, %51 ], [ %.060, %41 ], [ %.060, %38 ], [ %.060, %26 ], [ %.060, %16 ], [ %.060, %11 ]
  %.058.be = phi i32 [ %.058, %10 ], [ %.058, %424 ], [ %.058, %415 ], [ %.058, %414 ], [ %.058, %413 ], [ %.058, %411 ], [ %.058, %410 ], [ %.058, %408 ], [ %.058, %398 ], [ %.058, %397 ], [ %.058, %393 ], [ %.058, %392 ], [ %.058, %390 ], [ %.058, %389 ], [ %.058, %388 ], [ %.058, %386 ], [ %.058, %385 ], [ %.058, %374 ], [ %.058, %364 ], [ %.058, %363 ], [ %.058, %345 ], [ %.058, %335 ], [ %.058, %333 ], [ %.058, %322 ], [ %.058, %312 ], [ %.058, %311 ], [ %.058, %309 ], [ %.058, %308 ], [ %.058, %298 ], [ %.058, %288 ], [ %.058, %287 ], [ %.058, %276 ], [ %.058, %266 ], [ %.058, %256 ], [ %.058, %252 ], [ %.058, %251 ], [ %.058, %249 ], [ %.058, %237 ], [ %.058, %227 ], [ %.058, %226 ], [ %.058, %225 ], [ %.058, %214 ], [ %.058, %204 ], [ %.058, %203 ], [ %.058, %202 ], [ %.058, %201 ], [ %.058, %183 ], [ %.058, %173 ], [ %.058, %171 ], [ %.058, %159 ], [ %.058, %149 ], [ %.058, %148 ], [ %.058, %144 ], [ %.058, %143 ], [ %142, %141 ], [ %.058, %140 ], [ %.058, %127 ], [ %.058, %117 ], [ %.058, %115 ], [ %.058, %103 ], [ %.058, %93 ], [ 0, %92 ], [ %.058, %91 ], [ %.058, %80 ], [ %.058, %70 ], [ %.058, %66 ], [ %.058, %62 ], [ %.058, %61 ], [ %.058, %51 ], [ %.058, %41 ], [ %.058, %38 ], [ %.058, %26 ], [ %.058, %16 ], [ %.058, %11 ]
  %.056.be = phi i32 [ %.056, %10 ], [ %.056, %424 ], [ %.056, %415 ], [ %.056, %414 ], [ %.056, %413 ], [ %.056, %411 ], [ %.056, %410 ], [ %409, %408 ], [ %.056, %398 ], [ %.056, %397 ], [ %.056, %393 ], [ %.056, %392 ], [ %.056, %390 ], [ %.056, %389 ], [ %.056, %388 ], [ %.056, %386 ], [ %.056, %385 ], [ %.056, %374 ], [ %.056, %364 ], [ %.056, %363 ], [ %.056, %345 ], [ %.056, %335 ], [ %.056, %333 ], [ %.056, %322 ], [ %.056, %312 ], [ %.056, %311 ], [ %.056, %309 ], [ %.056, %308 ], [ %.056, %298 ], [ %.056, %288 ], [ %.056, %287 ], [ %.056, %276 ], [ %.056, %266 ], [ %.056, %256 ], [ %.056, %252 ], [ %.056, %251 ], [ %.056, %249 ], [ %.056, %237 ], [ %.056, %227 ], [ %.056, %226 ], [ %.056, %225 ], [ %215, %214 ], [ %.056, %204 ], [ %.056, %203 ], [ %.056, %202 ], [ %.056, %201 ], [ %.056, %183 ], [ %.056, %173 ], [ %.056, %171 ], [ %.056, %159 ], [ %.056, %149 ], [ %.056, %148 ], [ %.056, %144 ], [ 0, %143 ], [ %.056, %141 ], [ %.056, %140 ], [ %.056, %127 ], [ %.056, %117 ], [ %.056, %115 ], [ %.056, %103 ], [ %.056, %93 ], [ %.056, %92 ], [ %.056, %91 ], [ %.056, %80 ], [ %.056, %70 ], [ %.056, %66 ], [ %.056, %62 ], [ %.056, %61 ], [ %.056, %51 ], [ %.056, %41 ], [ %.056, %38 ], [ %.056, %26 ], [ %.056, %16 ], [ %.056, %11 ]
  %.054.be = phi i32 [ %.054, %10 ], [ %.054, %424 ], [ %.054, %415 ], [ %.054, %414 ], [ %.054, %413 ], [ %.054, %411 ], [ %.054, %410 ], [ %.054, %408 ], [ %.054, %398 ], [ %.054, %397 ], [ %.054, %393 ], [ %.054, %392 ], [ %.054, %390 ], [ %.054, %389 ], [ %.054, %388 ], [ %.054, %386 ], [ %.054, %385 ], [ %.054, %374 ], [ %.054, %364 ], [ %.054, %363 ], [ %.054, %345 ], [ %.054, %335 ], [ %.054, %333 ], [ %.054, %322 ], [ %.054, %312 ], [ %.054, %311 ], [ %.054, %309 ], [ %.054, %308 ], [ %.054, %298 ], [ %.054, %288 ], [ %.054, %287 ], [ %.054, %276 ], [ %.054, %266 ], [ %.054, %256 ], [ %.054, %252 ], [ %.054, %251 ], [ %.054, %249 ], [ %.054, %237 ], [ %.054, %227 ], [ %.054, %226 ], [ %.054, %225 ], [ %.054, %214 ], [ %.054, %204 ], [ %.054, %203 ], [ %.neg, %202 ], [ %.054, %201 ], [ %.054, %183 ], [ %.054, %173 ], [ %.054, %171 ], [ %.054, %159 ], [ %.054, %149 ], [ %.056, %148 ], [ %.054, %144 ], [ %.054, %143 ], [ %.054, %141 ], [ %.054, %140 ], [ %.054, %127 ], [ %.054, %117 ], [ %.054, %115 ], [ %.054, %103 ], [ %.054, %93 ], [ %.054, %92 ], [ %.054, %91 ], [ %.054, %80 ], [ %.054, %70 ], [ %.054, %66 ], [ %.054, %62 ], [ %.054, %61 ], [ %.054, %51 ], [ %.054, %41 ], [ %.054, %38 ], [ %.054, %26 ], [ %.054, %16 ], [ %.054, %11 ]
  %.052.be = phi i32 [ %.052, %10 ], [ %.052, %424 ], [ %.052, %415 ], [ %.052, %414 ], [ %.052, %413 ], [ %.052, %411 ], [ %.052, %410 ], [ %.052, %408 ], [ %.052, %398 ], [ %.052, %397 ], [ %.052, %393 ], [ %.052, %392 ], [ %.052, %390 ], [ %.052, %389 ], [ %.052, %388 ], [ %.052, %386 ], [ %.052, %385 ], [ %.052, %374 ], [ %.052, %364 ], [ %.052, %363 ], [ %.052, %345 ], [ %.052, %335 ], [ %.052, %333 ], [ %.052, %322 ], [ %.052, %312 ], [ %.052, %311 ], [ %310, %309 ], [ %.052, %308 ], [ %.052, %298 ], [ %.052, %288 ], [ %.052, %287 ], [ %.052, %276 ], [ %.052, %266 ], [ %.052, %256 ], [ %.052, %252 ], [ %.052, %251 ], [ %.052, %249 ], [ %.052, %237 ], [ %.052, %227 ], [ 0, %226 ], [ %.052, %225 ], [ %.052, %214 ], [ %.052, %204 ], [ %.052, %203 ], [ %.052, %202 ], [ %.052, %201 ], [ %.052, %183 ], [ %.052, %173 ], [ %.052, %171 ], [ %.052, %159 ], [ %.052, %149 ], [ %.052, %148 ], [ %.052, %144 ], [ %.052, %143 ], [ %.052, %141 ], [ %.052, %140 ], [ %.052, %127 ], [ %.052, %117 ], [ %.052, %115 ], [ %.052, %103 ], [ %.052, %93 ], [ %.052, %92 ], [ %.052, %91 ], [ %.052, %80 ], [ %.052, %70 ], [ %.052, %66 ], [ %.052, %62 ], [ %.052, %61 ], [ %.052, %51 ], [ %.052, %41 ], [ %.052, %38 ], [ %.052, %26 ], [ %.052, %16 ], [ %.052, %11 ]
  %.050.be = phi i32 [ %.050, %10 ], [ %.050, %424 ], [ %.050, %415 ], [ %.050, %414 ], [ %.050, %413 ], [ %412, %411 ], [ %.050, %410 ], [ %.050, %408 ], [ %.050, %398 ], [ %.050, %397 ], [ %.050, %393 ], [ %.050, %392 ], [ %.050, %390 ], [ %.050, %389 ], [ %.050, %388 ], [ %.050, %386 ], [ %.050, %385 ], [ %.050, %374 ], [ %.050, %364 ], [ %.050, %363 ], [ %.050, %345 ], [ %.050, %335 ], [ %.050, %333 ], [ %.050, %322 ], [ %.050, %312 ], [ %.050, %311 ], [ %.050, %309 ], [ %.050, %308 ], [ %.050, %298 ], [ %.050, %288 ], [ %.050, %287 ], [ %277, %276 ], [ %.050, %266 ], [ %.050, %256 ], [ %.050, %252 ], [ %.052, %251 ], [ %.050, %249 ], [ %.050, %237 ], [ %.050, %227 ], [ %.050, %226 ], [ %.050, %225 ], [ %.050, %214 ], [ %.050, %204 ], [ %.050, %203 ], [ %.050, %202 ], [ %.050, %201 ], [ %.050, %183 ], [ %.050, %173 ], [ %.050, %171 ], [ %.050, %159 ], [ %.050, %149 ], [ %.050, %148 ], [ %.050, %144 ], [ %.050, %143 ], [ %.050, %141 ], [ %.050, %140 ], [ %.050, %127 ], [ %.050, %117 ], [ %.050, %115 ], [ %.050, %103 ], [ %.050, %93 ], [ %.050, %92 ], [ %.050, %91 ], [ %.050, %80 ], [ %.050, %70 ], [ %.050, %66 ], [ %.050, %62 ], [ %.050, %61 ], [ %.050, %51 ], [ %.050, %41 ], [ %.050, %38 ], [ %.050, %26 ], [ %.050, %16 ], [ %.050, %11 ]
  %.048.be = phi i32 [ %.048, %10 ], [ %425, %424 ], [ %.048, %415 ], [ %.048, %414 ], [ %.048, %413 ], [ %.048, %411 ], [ %.048, %410 ], [ %.048, %408 ], [ %.048, %398 ], [ %.048, %397 ], [ %.048, %393 ], [ %.048, %392 ], [ %.048, %390 ], [ %.048, %389 ], [ %.048, %388 ], [ %.048, %386 ], [ %.048, %385 ], [ %375, %374 ], [ %.048, %364 ], [ %.048, %363 ], [ %.048, %345 ], [ %.048, %335 ], [ %.048, %333 ], [ %.048, %322 ], [ %.048, %312 ], [ 0, %311 ], [ %.048, %309 ], [ %.048, %308 ], [ %.048, %298 ], [ %.048, %288 ], [ %.048, %287 ], [ %.048, %276 ], [ %.048, %266 ], [ %.048, %256 ], [ %.048, %252 ], [ %.048, %251 ], [ %.048, %249 ], [ %.048, %237 ], [ %.048, %227 ], [ %.048, %226 ], [ %.048, %225 ], [ %.048, %214 ], [ %.048, %204 ], [ %.048, %203 ], [ %.048, %202 ], [ %.048, %201 ], [ %.048, %183 ], [ %.048, %173 ], [ %.048, %171 ], [ %.048, %159 ], [ %.048, %149 ], [ %.048, %148 ], [ %.048, %144 ], [ %.048, %143 ], [ %.048, %141 ], [ %.048, %140 ], [ %.048, %127 ], [ %.048, %117 ], [ %.048, %115 ], [ %.048, %103 ], [ %.048, %93 ], [ %.048, %92 ], [ %.048, %91 ], [ %.048, %80 ], [ %.048, %70 ], [ %.048, %66 ], [ %.048, %62 ], [ %.048, %61 ], [ %.048, %51 ], [ %.048, %41 ], [ %.048, %38 ], [ %.048, %26 ], [ %.048, %16 ], [ %.048, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ 761531158, %424 ], [ -727219706, %415 ], [ 1760578894, %414 ], [ -183998814, %413 ], [ 592843836, %411 ], [ 736412672, %410 ], [ 989092474, %408 ], [ -1527944094, %398 ], [ 1158928345, %397 ], [ -1423537915, %393 ], [ 315053741, %392 ], [ -582190592, %390 ], [ 2006756194, %389 ], [ 528771860, %388 ], [ -958368865, %386 ], [ 2042730731, %385 ], [ %384, %374 ], [ %373, %364 ], [ 1978975369, %363 ], [ %362, %345 ], [ %344, %335 ], [ %334, %333 ], [ %332, %322 ], [ %321, %312 ], [ 2042730731, %311 ], [ -1296234197, %309 ], [ 1264725230, %308 ], [ %307, %298 ], [ %297, %288 ], [ -1766920269, %287 ], [ %286, %276 ], [ %275, %266 ], [ -597441545, %256 ], [ %255, %252 ], [ -1766920269, %251 ], [ %250, %249 ], [ %248, %237 ], [ %236, %227 ], [ -1296234197, %226 ], [ 2064007719, %225 ], [ %224, %214 ], [ %213, %204 ], [ 1121876761, %203 ], [ -1890635749, %202 ], [ -1856065542, %201 ], [ %200, %183 ], [ %182, %173 ], [ %172, %171 ], [ %170, %159 ], [ %158, %149 ], [ -1890635749, %148 ], [ %147, %144 ], [ 2064007719, %143 ], [ -1274588139, %141 ], [ -206482148, %140 ], [ %139, %127 ], [ %126, %117 ], [ %116, %115 ], [ %114, %103 ], [ %102, %93 ], [ -1274588139, %92 ], [ 1325983749, %91 ], [ %90, %80 ], [ %79, %70 ], [ -782158444, %66 ], [ %65, %62 ], [ 1325983749, %61 ], [ %60, %51 ], [ %50, %41 ], [ %39, %38 ], [ %37, %26 ], [ %25, %16 ], [ %15, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* nonnull %6, i32* nonnull %7)
  %13 = load i32, i32* %6, align 4
  %14 = icmp eq i32 %13, 0
  %15 = select i1 %14, i32 186554543, i32 1048809618
  br label %.backedge

16:                                               ; preds = %10
  %17 = load i32, i32* @x, align 4
  %18 = load i32, i32* @y, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 528771860, i32 87784821
  br label %.backedge

26:                                               ; preds = %10
  %27 = load i32, i32* %7, align 4
  %28 = icmp eq i32 %27, 0
  store i1 %28, i1* %5, align 1
  %29 = load i32, i32* @x, align 4
  %30 = load i32, i32* @y, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 589263407, i32 87784821
  br label %.backedge

38:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %39 = select i1 %.0..0..0., i32 455015203, i32 1048809618
  br label %.backedge

40:                                               ; preds = %10
  ret i32 0

41:                                               ; preds = %10
  %42 = load i32, i32* @x, align 4
  %43 = load i32, i32* @y, align 4
  %44 = add i32 %42, -1
  %45 = mul i32 %44, %42
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %48, %47
  %50 = select i1 %49, i32 2006756194, i32 -1581901125
  br label %.backedge

51:                                               ; preds = %10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(6000000) bitcast ([1500000 x i32]* @p to i8*), i8 0, i64 6000000, i1 false)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(6000000) bitcast ([1500000 x i32]* @q to i8*), i8 0, i64 6000000, i1 false)
  %52 = load i32, i32* @x, align 4
  %53 = load i32, i32* @y, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 1909245718, i32 -1581901125
  br label %.backedge

61:                                               ; preds = %10
  br label %.backedge

62:                                               ; preds = %10
  %63 = load i32, i32* %6, align 4
  %64 = icmp slt i32 %.060, %63
  %65 = select i1 %64, i32 -67246440, i32 2045861506
  br label %.backedge

66:                                               ; preds = %10
  %67 = sext i32 %.060 to i64
  %68 = getelementptr inbounds [1500 x i32], [1500 x i32]* %9, i64 0, i64 %67
  %69 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %68)
  br label %.backedge

70:                                               ; preds = %10
  %71 = load i32, i32* @x, align 4
  %72 = load i32, i32* @y, align 4
  %73 = add i32 %71, -1
  %74 = mul i32 %73, %71
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %77, %76
  %79 = select i1 %78, i32 -582190592, i32 52436416
  br label %.backedge

80:                                               ; preds = %10
  %81 = add i32 %.060, 1
  %82 = load i32, i32* @x, align 4
  %83 = load i32, i32* @y, align 4
  %84 = add i32 %82, -1
  %85 = mul i32 %84, %82
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %88, %87
  %90 = select i1 %89, i32 1414011899, i32 52436416
  br label %.backedge

91:                                               ; preds = %10
  br label %.backedge

92:                                               ; preds = %10
  br label %.backedge

93:                                               ; preds = %10
  %94 = load i32, i32* @x, align 4
  %95 = load i32, i32* @y, align 4
  %96 = add i32 %94, -1
  %97 = mul i32 %96, %94
  %98 = and i32 %97, 1
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %100, %99
  %102 = select i1 %101, i32 315053741, i32 -767709209
  br label %.backedge

103:                                              ; preds = %10
  %104 = load i32, i32* %7, align 4
  %105 = icmp slt i32 %.058, %104
  store i1 %105, i1* %4, align 1
  %106 = load i32, i32* @x, align 4
  %107 = load i32, i32* @y, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 1889476713, i32 -767709209
  br label %.backedge

115:                                              ; preds = %10
  %.0..0..0.44 = load volatile i1, i1* %4, align 1
  %116 = select i1 %.0..0..0.44, i32 1652532155, i32 -1549859049
  br label %.backedge

117:                                              ; preds = %10
  %118 = load i32, i32* @x, align 4
  %119 = load i32, i32* @y, align 4
  %120 = add i32 %118, -1
  %121 = mul i32 %120, %118
  %122 = and i32 %121, 1
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %124, %123
  %126 = select i1 %125, i32 -1423537915, i32 -718310626
  br label %.backedge

127:                                              ; preds = %10
  %128 = sext i32 %.058 to i64
  %129 = getelementptr inbounds [1500 x i32], [1500 x i32]* %8, i64 0, i64 %128
  %130 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %129)
  %131 = load i32, i32* @x, align 4
  %132 = load i32, i32* @y, align 4
  %133 = add i32 %131, -1
  %134 = mul i32 %133, %131
  %135 = and i32 %134, 1
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %137, %136
  %139 = select i1 %138, i32 239313883, i32 -718310626
  br label %.backedge

140:                                              ; preds = %10
  br label %.backedge

141:                                              ; preds = %10
  %142 = add i32 %.058, 1
  br label %.backedge

143:                                              ; preds = %10
  br label %.backedge

144:                                              ; preds = %10
  %145 = load i32, i32* %6, align 4
  %146 = icmp slt i32 %.056, %145
  %147 = select i1 %146, i32 294580085, i32 -480022837
  br label %.backedge

148:                                              ; preds = %10
  br label %.backedge

149:                                              ; preds = %10
  %150 = load i32, i32* @x, align 4
  %151 = load i32, i32* @y, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 1158928345, i32 1428561367
  br label %.backedge

159:                                              ; preds = %10
  %160 = load i32, i32* %6, align 4
  %161 = icmp slt i32 %.054, %160
  store i1 %161, i1* %3, align 1
  %162 = load i32, i32* @x, align 4
  %163 = load i32, i32* @y, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 149938521, i32 1428561367
  br label %.backedge

171:                                              ; preds = %10
  %.0..0..0.45 = load volatile i1, i1* %3, align 1
  %172 = select i1 %.0..0..0.45, i32 -1399750945, i32 1659115772
  br label %.backedge

173:                                              ; preds = %10
  %174 = load i32, i32* @x, align 4
  %175 = load i32, i32* @y, align 4
  %176 = add i32 %174, -1
  %177 = mul i32 %176, %174
  %178 = and i32 %177, 1
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %180, %179
  %182 = select i1 %181, i32 -1527944094, i32 -1736593236
  br label %.backedge

183:                                              ; preds = %10
  %184 = sext i32 %.054 to i64
  %185 = getelementptr inbounds [1500 x i32], [1500 x i32]* %9, i64 0, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = sext i32 %186 to i64
  %188 = add i64 %.066, %187
  %189 = add i64 %188, -1
  %190 = getelementptr inbounds [1500000 x i32], [1500000 x i32]* @p, i64 0, i64 %189
  %191 = load i32, i32* %190, align 4
  %.neg68 = add i32 %191, 1
  store i32 %.neg68, i32* %190, align 4
  %192 = load i32, i32* @x, align 4
  %193 = load i32, i32* @y, align 4
  %194 = add i32 %192, -1
  %195 = mul i32 %194, %192
  %196 = and i32 %195, 1
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %198, %197
  %200 = select i1 %199, i32 -1366121488, i32 -1736593236
  br label %.backedge

201:                                              ; preds = %10
  br label %.backedge

202:                                              ; preds = %10
  %.neg = add i32 %.054, 1
  br label %.backedge

203:                                              ; preds = %10
  br label %.backedge

204:                                              ; preds = %10
  %205 = load i32, i32* @x, align 4
  %206 = load i32, i32* @y, align 4
  %207 = add i32 %205, -1
  %208 = mul i32 %207, %205
  %209 = and i32 %208, 1
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %211, %210
  %213 = select i1 %212, i32 989092474, i32 -1235868791
  br label %.backedge

214:                                              ; preds = %10
  %215 = add i32 %.056, 1
  %216 = load i32, i32* @x, align 4
  %217 = load i32, i32* @y, align 4
  %218 = add i32 %216, -1
  %219 = mul i32 %218, %216
  %220 = and i32 %219, 1
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %222, %221
  %224 = select i1 %223, i32 -1946770844, i32 -1235868791
  br label %.backedge

225:                                              ; preds = %10
  br label %.backedge

226:                                              ; preds = %10
  br label %.backedge

227:                                              ; preds = %10
  %228 = load i32, i32* @x, align 4
  %229 = load i32, i32* @y, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 736412672, i32 -535100875
  br label %.backedge

237:                                              ; preds = %10
  %238 = load i32, i32* %7, align 4
  %239 = icmp slt i32 %.052, %238
  store i1 %239, i1* %2, align 1
  %240 = load i32, i32* @x, align 4
  %241 = load i32, i32* @y, align 4
  %242 = add i32 %240, -1
  %243 = mul i32 %242, %240
  %244 = and i32 %243, 1
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %246, %245
  %248 = select i1 %247, i32 227107231, i32 -535100875
  br label %.backedge

249:                                              ; preds = %10
  %.0..0..0.46 = load volatile i1, i1* %2, align 1
  %250 = select i1 %.0..0..0.46, i32 826751455, i32 -382107953
  br label %.backedge

251:                                              ; preds = %10
  br label %.backedge

252:                                              ; preds = %10
  %253 = load i32, i32* %7, align 4
  %254 = icmp slt i32 %.050, %253
  %255 = select i1 %254, i32 1423388215, i32 -1457362361
  br label %.backedge

256:                                              ; preds = %10
  %257 = sext i32 %.050 to i64
  %258 = getelementptr inbounds [1500 x i32], [1500 x i32]* %8, i64 0, i64 %257
  %259 = load i32, i32* %258, align 4
  %260 = sext i32 %259 to i64
  %261 = add i64 %.064, %260
  %262 = add i64 %261, -1
  %263 = getelementptr inbounds [1500000 x i32], [1500000 x i32]* @q, i64 0, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = add i32 %264, 1
  store i32 %265, i32* %263, align 4
  br label %.backedge

266:                                              ; preds = %10
  %267 = load i32, i32* @x, align 4
  %268 = load i32, i32* @y, align 4
  %269 = add i32 %267, -1
  %270 = mul i32 %269, %267
  %271 = and i32 %270, 1
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %273, %272
  %275 = select i1 %274, i32 592843836, i32 1185549878
  br label %.backedge

276:                                              ; preds = %10
  %277 = add i32 %.050, 1
  %278 = load i32, i32* @x, align 4
  %279 = load i32, i32* @y, align 4
  %280 = add i32 %278, -1
  %281 = mul i32 %280, %278
  %282 = and i32 %281, 1
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %284, %283
  %286 = select i1 %285, i32 -1842082124, i32 1185549878
  br label %.backedge

287:                                              ; preds = %10
  br label %.backedge

288:                                              ; preds = %10
  %289 = load i32, i32* @x, align 4
  %290 = load i32, i32* @y, align 4
  %291 = add i32 %289, -1
  %292 = mul i32 %291, %289
  %293 = and i32 %292, 1
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %295, %294
  %297 = select i1 %296, i32 -183998814, i32 -1068281262
  br label %.backedge

298:                                              ; preds = %10
  %299 = load i32, i32* @x, align 4
  %300 = load i32, i32* @y, align 4
  %301 = add i32 %299, -1
  %302 = mul i32 %301, %299
  %303 = and i32 %302, 1
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %305, %304
  %307 = select i1 %306, i32 -1344027615, i32 -1068281262
  br label %.backedge

308:                                              ; preds = %10
  br label %.backedge

309:                                              ; preds = %10
  %310 = add i32 %.052, 1
  br label %.backedge

311:                                              ; preds = %10
  br label %.backedge

312:                                              ; preds = %10
  %313 = load i32, i32* @x, align 4
  %314 = load i32, i32* @y, align 4
  %315 = add i32 %313, -1
  %316 = mul i32 %315, %313
  %317 = and i32 %316, 1
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %319, %318
  %321 = select i1 %320, i32 1760578894, i32 -1550729855
  br label %.backedge

322:                                              ; preds = %10
  %323 = icmp slt i32 %.048, 1500000
  store i1 %323, i1* %1, align 1
  %324 = load i32, i32* @x, align 4
  %325 = load i32, i32* @y, align 4
  %326 = add i32 %324, -1
  %327 = mul i32 %326, %324
  %328 = and i32 %327, 1
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %330, %329
  %332 = select i1 %331, i32 747533152, i32 -1550729855
  br label %.backedge

333:                                              ; preds = %10
  %.0..0..0.47 = load volatile i1, i1* %1, align 1
  %334 = select i1 %.0..0..0.47, i32 -1403347911, i32 637986978
  br label %.backedge

335:                                              ; preds = %10
  %336 = load i32, i32* @x, align 4
  %337 = load i32, i32* @y, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 -727219706, i32 -995848206
  br label %.backedge

345:                                              ; preds = %10
  %346 = sext i32 %.048 to i64
  %347 = getelementptr inbounds [1500000 x i32], [1500000 x i32]* @p, i64 0, i64 %346
  %348 = load i32, i32* %347, align 4
  %349 = getelementptr inbounds [1500000 x i32], [1500000 x i32]* @q, i64 0, i64 %346
  %350 = load i32, i32* %349, align 4
  %351 = mul nsw i32 %350, %348
  %352 = sext i32 %351 to i64
  %353 = add i64 %.062, %352
  %354 = load i32, i32* @x, align 4
  %355 = load i32, i32* @y, align 4
  %356 = add i32 %354, -1
  %357 = mul i32 %356, %354
  %358 = and i32 %357, 1
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %360, %359
  %362 = select i1 %361, i32 -1531756279, i32 -995848206
  br label %.backedge

363:                                              ; preds = %10
  br label %.backedge

364:                                              ; preds = %10
  %365 = load i32, i32* @x, align 4
  %366 = load i32, i32* @y, align 4
  %367 = add i32 %365, -1
  %368 = mul i32 %367, %365
  %369 = and i32 %368, 1
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %371, %370
  %373 = select i1 %372, i32 761531158, i32 -1999587861
  br label %.backedge

374:                                              ; preds = %10
  %375 = add i32 %.048, 1
  %376 = load i32, i32* @x, align 4
  %377 = load i32, i32* @y, align 4
  %378 = add i32 %376, -1
  %379 = mul i32 %378, %376
  %380 = and i32 %379, 1
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %382, %381
  %384 = select i1 %383, i32 384909028, i32 -1999587861
  br label %.backedge

385:                                              ; preds = %10
  br label %.backedge

386:                                              ; preds = %10
  %387 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i64 %.062)
  br label %.backedge

388:                                              ; preds = %10
  br label %.backedge

389:                                              ; preds = %10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(6000000) bitcast ([1500000 x i32]* @p to i8*), i8 0, i64 6000000, i1 false)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(6000000) bitcast ([1500000 x i32]* @q to i8*), i8 0, i64 6000000, i1 false)
  br label %.backedge

390:                                              ; preds = %10
  %391 = add i32 %.060, 1
  br label %.backedge

392:                                              ; preds = %10
  br label %.backedge

393:                                              ; preds = %10
  %394 = sext i32 %.058 to i64
  %395 = getelementptr inbounds [1500 x i32], [1500 x i32]* %8, i64 0, i64 %394
  %396 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %395)
  br label %.backedge

397:                                              ; preds = %10
  br label %.backedge

398:                                              ; preds = %10
  %399 = sext i32 %.054 to i64
  %400 = getelementptr inbounds [1500 x i32], [1500 x i32]* %9, i64 0, i64 %399
  %401 = load i32, i32* %400, align 4
  %402 = sext i32 %401 to i64
  %403 = add i64 %.066, %402
  %404 = add i64 %403, -1
  %405 = getelementptr inbounds [1500000 x i32], [1500000 x i32]* @p, i64 0, i64 %404
  %406 = load i32, i32* %405, align 4
  %407 = add i32 %406, 1
  store i32 %407, i32* %405, align 4
  br label %.backedge

408:                                              ; preds = %10
  %409 = add i32 %.056, 1
  br label %.backedge

410:                                              ; preds = %10
  br label %.backedge

411:                                              ; preds = %10
  %412 = add i32 %.050, 1
  br label %.backedge

413:                                              ; preds = %10
  br label %.backedge

414:                                              ; preds = %10
  br label %.backedge

415:                                              ; preds = %10
  %416 = sext i32 %.048 to i64
  %417 = getelementptr inbounds [1500000 x i32], [1500000 x i32]* @p, i64 0, i64 %416
  %418 = load i32, i32* %417, align 4
  %419 = getelementptr inbounds [1500000 x i32], [1500000 x i32]* @q, i64 0, i64 %416
  %420 = load i32, i32* %419, align 4
  %421 = mul nsw i32 %420, %418
  %422 = sext i32 %421 to i64
  %423 = add i64 %.062, %422
  br label %.backedge

424:                                              ; preds = %10
  %425 = add i32 %.048, 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
