; ModuleID = 'build_ollvm/programs/p03503/s196333269.ll'
source_filename = "Project_CodeNet_C++1400/p03503/s196333269.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3maxIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s196333269.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i32*, align 8
  %3 = alloca i1, align 1
  %4 = alloca [11 x i64]*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %5)
  %9 = load i32, i32* %5, align 4
  %10 = zext i32 %9 to i64
  %11 = alloca [10 x i8], i64 %10, align 16
  br label %12

12:                                               ; preds = %.backedge, %0
  %.068 = phi i64 [ 0, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i64 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i64 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i64 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i64 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i8* [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i64 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i64 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i64 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.050 = phi i64 [ undef, %0 ], [ %.050.be, %.backedge ]
  %.0 = phi i32 [ -239017955, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -239017955, label %13
    i32 -1344721342, label %18
    i32 -2105076692, label %19
    i32 555021177, label %22
    i32 534820956, label %25
    i32 -975248302, label %27
    i32 -900803601, label %28
    i32 -1875455473, label %29
    i32 1217719110, label %39
    i32 2078530287, label %52
    i32 199301674, label %53
    i32 -1225025400, label %63
    i32 -743165353, label %76
    i32 -53142534, label %78
    i32 -977189777, label %88
    i32 -842147672, label %98
    i32 2003828210, label %99
    i32 440331264, label %102
    i32 1954358735, label %105
    i32 1709527933, label %107
    i32 -292302205, label %108
    i32 -61837543, label %118
    i32 -266248499, label %129
    i32 -2063391545, label %130
    i32 1428419508, label %131
    i32 674599369, label %134
    i32 666097147, label %138
    i32 594924330, label %148
    i32 -1515933202, label %158
    i32 -412426084, label %159
    i32 1517392970, label %164
    i32 1130606629, label %169
    i32 -1376391006, label %179
    i32 -89881073, label %190
    i32 -1955695812, label %191
    i32 109911706, label %201
    i32 523510016, label %212
    i32 22720234, label %213
    i32 862373295, label %223
    i32 -1581949096, label %233
    i32 1531495470, label %234
    i32 200558806, label %237
    i32 1178277964, label %247
    i32 1456482240, label %262
    i32 436567675, label %264
    i32 -1749554899, label %265
    i32 1261893231, label %270
    i32 1343123289, label %275
    i32 -116882408, label %279
    i32 748602150, label %280
    i32 -401537217, label %281
    i32 -634591573, label %282
    i32 819664006, label %283
    i32 -1926930236, label %293
    i32 -2098426673, label %304
    i32 -1798881033, label %305
    i32 -1241682986, label %306
    i32 1476748308, label %311
    i32 -1084089510, label %319
    i32 1455246925, label %321
    i32 -479684684, label %324
    i32 314958548, label %334
    i32 -1671261522, label %345
    i32 -2010397123, label %346
    i32 271357591, label %350
    i32 -1567521388, label %351
    i32 1952986104, label %352
    i32 2052505348, label %353
    i32 -110650617, label %355
    i32 989749457, label %356
    i32 925371606, label %358
    i32 554377516, label %359
    i32 -1209310038, label %360
    i32 599320362, label %361
    i32 -1081445259, label %363
  ]

.backedge:                                        ; preds = %12, %363, %361, %360, %359, %358, %356, %355, %353, %352, %351, %350, %345, %334, %324, %321, %319, %311, %306, %305, %304, %293, %283, %282, %281, %280, %279, %275, %270, %265, %264, %262, %247, %237, %234, %233, %223, %213, %212, %201, %191, %190, %179, %169, %164, %159, %158, %148, %138, %134, %131, %130, %129, %118, %108, %107, %105, %102, %99, %98, %88, %78, %76, %63, %53, %52, %39, %29, %28, %27, %25, %22, %19, %18, %13
  %.068.be = phi i64 [ %.068, %12 ], [ %.068, %363 ], [ %.068, %361 ], [ %.068, %360 ], [ %.068, %359 ], [ %.068, %358 ], [ %.068, %356 ], [ %.068, %355 ], [ %.068, %353 ], [ %.068, %352 ], [ %.068, %351 ], [ %.068, %350 ], [ %.068, %345 ], [ %.068, %334 ], [ %.068, %324 ], [ %.068, %321 ], [ %.068, %319 ], [ %.068, %311 ], [ %.068, %306 ], [ %.068, %305 ], [ %.068, %304 ], [ %.068, %293 ], [ %.068, %283 ], [ %.068, %282 ], [ %.068, %281 ], [ %.068, %280 ], [ %.068, %279 ], [ %.068, %275 ], [ %.068, %270 ], [ %.068, %265 ], [ %.068, %264 ], [ %.068, %262 ], [ %.068, %247 ], [ %.068, %237 ], [ %.068, %234 ], [ %.068, %233 ], [ %.068, %223 ], [ %.068, %213 ], [ %.068, %212 ], [ %.068, %201 ], [ %.068, %191 ], [ %.068, %190 ], [ %.068, %179 ], [ %.068, %169 ], [ %.068, %164 ], [ %.068, %159 ], [ %.068, %158 ], [ %.068, %148 ], [ %.068, %138 ], [ %.068, %134 ], [ %.068, %131 ], [ %.068, %130 ], [ %.068, %129 ], [ %.068, %118 ], [ %.068, %108 ], [ %.068, %107 ], [ %.068, %105 ], [ %.068, %102 ], [ %.068, %99 ], [ %.068, %98 ], [ %.068, %88 ], [ %.068, %78 ], [ %.068, %76 ], [ %.068, %63 ], [ %.068, %53 ], [ %.068, %52 ], [ %.068, %39 ], [ %.068, %29 ], [ %.neg71, %28 ], [ %.068, %27 ], [ %.068, %25 ], [ %.068, %22 ], [ %.068, %19 ], [ %.068, %18 ], [ %.068, %13 ]
  %.066.be = phi i64 [ %.066, %12 ], [ %.066, %363 ], [ %.066, %361 ], [ %.066, %360 ], [ %.066, %359 ], [ %.066, %358 ], [ %.066, %356 ], [ %.066, %355 ], [ %.066, %353 ], [ %.066, %352 ], [ %.066, %351 ], [ %.066, %350 ], [ %.066, %345 ], [ %.066, %334 ], [ %.066, %324 ], [ %.066, %321 ], [ %.066, %319 ], [ %.066, %311 ], [ %.066, %306 ], [ %.066, %305 ], [ %.066, %304 ], [ %.066, %293 ], [ %.066, %283 ], [ %.066, %282 ], [ %.066, %281 ], [ %.066, %280 ], [ %.066, %279 ], [ %.066, %275 ], [ %.066, %270 ], [ %.066, %265 ], [ %.066, %264 ], [ %.066, %262 ], [ %.066, %247 ], [ %.066, %237 ], [ %.066, %234 ], [ %.066, %233 ], [ %.066, %223 ], [ %.066, %213 ], [ %.066, %212 ], [ %.066, %201 ], [ %.066, %191 ], [ %.066, %190 ], [ %.066, %179 ], [ %.066, %169 ], [ %.066, %164 ], [ %.066, %159 ], [ %.066, %158 ], [ %.066, %148 ], [ %.066, %138 ], [ %.066, %134 ], [ %.066, %131 ], [ %.066, %130 ], [ %.066, %129 ], [ %.066, %118 ], [ %.066, %108 ], [ %.066, %107 ], [ %.066, %105 ], [ %.066, %102 ], [ %.066, %99 ], [ %.066, %98 ], [ %.066, %88 ], [ %.066, %78 ], [ %.066, %76 ], [ %.066, %63 ], [ %.066, %53 ], [ %.066, %52 ], [ %.066, %39 ], [ %.066, %29 ], [ %.066, %28 ], [ %.066, %27 ], [ %26, %25 ], [ %.066, %22 ], [ %.066, %19 ], [ 0, %18 ], [ %.066, %13 ]
  %.064.be = phi i64 [ %.064, %12 ], [ %.064, %363 ], [ %.064, %361 ], [ %.064, %360 ], [ %.064, %359 ], [ %.064, %358 ], [ %.064, %356 ], [ %.064, %355 ], [ %354, %353 ], [ %.064, %352 ], [ %.064, %351 ], [ 0, %350 ], [ %.064, %345 ], [ %.064, %334 ], [ %.064, %324 ], [ %.064, %321 ], [ %.064, %319 ], [ %.064, %311 ], [ %.064, %306 ], [ %.064, %305 ], [ %.064, %304 ], [ %.064, %293 ], [ %.064, %283 ], [ %.064, %282 ], [ %.064, %281 ], [ %.064, %280 ], [ %.064, %279 ], [ %.064, %275 ], [ %.064, %270 ], [ %.064, %265 ], [ %.064, %264 ], [ %.064, %262 ], [ %.064, %247 ], [ %.064, %237 ], [ %.064, %234 ], [ %.064, %233 ], [ %.064, %223 ], [ %.064, %213 ], [ %.064, %212 ], [ %.064, %201 ], [ %.064, %191 ], [ %.064, %190 ], [ %.064, %179 ], [ %.064, %169 ], [ %.064, %164 ], [ %.064, %159 ], [ %.064, %158 ], [ %.064, %148 ], [ %.064, %138 ], [ %.064, %134 ], [ %.064, %131 ], [ %.064, %130 ], [ %.064, %129 ], [ %119, %118 ], [ %.064, %108 ], [ %.064, %107 ], [ %.064, %105 ], [ %.064, %102 ], [ %.064, %99 ], [ %.064, %98 ], [ %.064, %88 ], [ %.064, %78 ], [ %.064, %76 ], [ %.064, %63 ], [ %.064, %53 ], [ %.064, %52 ], [ 0, %39 ], [ %.064, %29 ], [ %.064, %28 ], [ %.064, %27 ], [ %.064, %25 ], [ %.064, %22 ], [ %.064, %19 ], [ %.064, %18 ], [ %.064, %13 ]
  %.062.be = phi i64 [ %.062, %12 ], [ %.062, %363 ], [ %.062, %361 ], [ %.062, %360 ], [ %.062, %359 ], [ %.062, %358 ], [ %.062, %356 ], [ %.062, %355 ], [ %.062, %353 ], [ 0, %352 ], [ %.062, %351 ], [ %.062, %350 ], [ %.062, %345 ], [ %.062, %334 ], [ %.062, %324 ], [ %.062, %321 ], [ %.062, %319 ], [ %.062, %311 ], [ %.062, %306 ], [ %.062, %305 ], [ %.062, %304 ], [ %.062, %293 ], [ %.062, %283 ], [ %.062, %282 ], [ %.062, %281 ], [ %.062, %280 ], [ %.062, %279 ], [ %.062, %275 ], [ %.062, %270 ], [ %.062, %265 ], [ %.062, %264 ], [ %.062, %262 ], [ %.062, %247 ], [ %.062, %237 ], [ %.062, %234 ], [ %.062, %233 ], [ %.062, %223 ], [ %.062, %213 ], [ %.062, %212 ], [ %.062, %201 ], [ %.062, %191 ], [ %.062, %190 ], [ %.062, %179 ], [ %.062, %169 ], [ %.062, %164 ], [ %.062, %159 ], [ %.062, %158 ], [ %.062, %148 ], [ %.062, %138 ], [ %.062, %134 ], [ %.062, %131 ], [ %.062, %130 ], [ %.062, %129 ], [ %.062, %118 ], [ %.062, %108 ], [ %.062, %107 ], [ %106, %105 ], [ %.062, %102 ], [ %.062, %99 ], [ %.062, %98 ], [ 0, %88 ], [ %.062, %78 ], [ %.062, %76 ], [ %.062, %63 ], [ %.062, %53 ], [ %.062, %52 ], [ %.062, %39 ], [ %.062, %29 ], [ %.062, %28 ], [ %.062, %27 ], [ %.062, %25 ], [ %.062, %22 ], [ %.062, %19 ], [ %.062, %18 ], [ %.062, %13 ]
  %.060.be = phi i64 [ %.060, %12 ], [ %364, %363 ], [ %.060, %361 ], [ %.060, %360 ], [ %.060, %359 ], [ %.060, %358 ], [ %.060, %356 ], [ %.060, %355 ], [ %.060, %353 ], [ %.060, %352 ], [ %.060, %351 ], [ %.060, %350 ], [ %.060, %345 ], [ %335, %334 ], [ %.060, %324 ], [ %.060, %321 ], [ %.060, %319 ], [ %.060, %311 ], [ %.060, %306 ], [ %.060, %305 ], [ %.060, %304 ], [ %.060, %293 ], [ %.060, %283 ], [ %.060, %282 ], [ %.060, %281 ], [ %.060, %280 ], [ %.060, %279 ], [ %.060, %275 ], [ %.060, %270 ], [ %.060, %265 ], [ %.060, %264 ], [ %.060, %262 ], [ %.060, %247 ], [ %.060, %237 ], [ %.060, %234 ], [ %.060, %233 ], [ %.060, %223 ], [ %.060, %213 ], [ %.060, %212 ], [ %.060, %201 ], [ %.060, %191 ], [ %.060, %190 ], [ %.060, %179 ], [ %.060, %169 ], [ %.060, %164 ], [ %.060, %159 ], [ %.060, %158 ], [ %.060, %148 ], [ %.060, %138 ], [ %.060, %134 ], [ %.060, %131 ], [ 0, %130 ], [ %.060, %129 ], [ %.060, %118 ], [ %.060, %108 ], [ %.060, %107 ], [ %.060, %105 ], [ %.060, %102 ], [ %.060, %99 ], [ %.060, %98 ], [ %.060, %88 ], [ %.060, %78 ], [ %.060, %76 ], [ %.060, %63 ], [ %.060, %53 ], [ %.060, %52 ], [ %.060, %39 ], [ %.060, %29 ], [ %.060, %28 ], [ %.060, %27 ], [ %.060, %25 ], [ %.060, %22 ], [ %.060, %19 ], [ %.060, %18 ], [ %.060, %13 ]
  %.058.be = phi i8* [ %.058, %12 ], [ %.058, %363 ], [ %.058, %361 ], [ %.058, %360 ], [ %.058, %359 ], [ %.058, %358 ], [ %.058, %356 ], [ %.058, %355 ], [ %.058, %353 ], [ %.058, %352 ], [ %.058, %351 ], [ %.058, %350 ], [ %.058, %345 ], [ %.058, %334 ], [ %.058, %324 ], [ %.058, %321 ], [ %.058, %319 ], [ %.058, %311 ], [ %.058, %306 ], [ %.058, %305 ], [ %.058, %304 ], [ %.058, %293 ], [ %.058, %283 ], [ %.058, %282 ], [ %.058, %281 ], [ %.058, %280 ], [ %.058, %279 ], [ %.058, %275 ], [ %.058, %270 ], [ %.058, %265 ], [ %.058, %264 ], [ %.058, %262 ], [ %.058, %247 ], [ %.058, %237 ], [ %.058, %234 ], [ %.058, %233 ], [ %.058, %223 ], [ %.058, %213 ], [ %.058, %212 ], [ %.058, %201 ], [ %.058, %191 ], [ %.058, %190 ], [ %.058, %179 ], [ %.058, %169 ], [ %.058, %164 ], [ %162, %159 ], [ %.058, %158 ], [ %.058, %148 ], [ %.058, %138 ], [ %.058, %134 ], [ %.058, %131 ], [ %.058, %130 ], [ %.058, %129 ], [ %.058, %118 ], [ %.058, %108 ], [ %.058, %107 ], [ %.058, %105 ], [ %.058, %102 ], [ %.058, %99 ], [ %.058, %98 ], [ %.058, %88 ], [ %.058, %78 ], [ %.058, %76 ], [ %.058, %63 ], [ %.058, %53 ], [ %.058, %52 ], [ %.058, %39 ], [ %.058, %29 ], [ %.058, %28 ], [ %.058, %27 ], [ %.058, %25 ], [ %.058, %22 ], [ %.058, %19 ], [ %.058, %18 ], [ %.058, %13 ]
  %.056.be = phi i64 [ %.056, %12 ], [ %.056, %363 ], [ %.056, %361 ], [ %.056, %360 ], [ %.056, %359 ], [ %.neg, %358 ], [ %.056, %356 ], [ %.056, %355 ], [ %.056, %353 ], [ %.056, %352 ], [ %.056, %351 ], [ %.056, %350 ], [ %.056, %345 ], [ %.056, %334 ], [ %.056, %324 ], [ %.056, %321 ], [ %.056, %319 ], [ %.056, %311 ], [ %.056, %306 ], [ %.056, %305 ], [ %.056, %304 ], [ %.056, %293 ], [ %.056, %283 ], [ %.056, %282 ], [ %.056, %281 ], [ %.056, %280 ], [ %.056, %279 ], [ %.056, %275 ], [ %.056, %270 ], [ %.056, %265 ], [ %.056, %264 ], [ %.056, %262 ], [ %.056, %247 ], [ %.056, %237 ], [ %.056, %234 ], [ %.056, %233 ], [ %.056, %223 ], [ %.056, %213 ], [ %.056, %212 ], [ %202, %201 ], [ %.056, %191 ], [ %.056, %190 ], [ %.056, %179 ], [ %.056, %169 ], [ %.056, %164 ], [ 0, %159 ], [ %.056, %158 ], [ %.056, %148 ], [ %.056, %138 ], [ %.056, %134 ], [ %.056, %131 ], [ %.056, %130 ], [ %.056, %129 ], [ %.056, %118 ], [ %.056, %108 ], [ %.056, %107 ], [ %.056, %105 ], [ %.056, %102 ], [ %.056, %99 ], [ %.056, %98 ], [ %.056, %88 ], [ %.056, %78 ], [ %.056, %76 ], [ %.056, %63 ], [ %.056, %53 ], [ %.056, %52 ], [ %.056, %39 ], [ %.056, %29 ], [ %.056, %28 ], [ %.056, %27 ], [ %.056, %25 ], [ %.056, %22 ], [ %.056, %19 ], [ %.056, %18 ], [ %.056, %13 ]
  %.054.be = phi i64 [ %.054, %12 ], [ %.054, %363 ], [ %362, %361 ], [ %.054, %360 ], [ 0, %359 ], [ %.054, %358 ], [ %.054, %356 ], [ %.054, %355 ], [ %.054, %353 ], [ %.054, %352 ], [ %.054, %351 ], [ %.054, %350 ], [ %.054, %345 ], [ %.054, %334 ], [ %.054, %324 ], [ %.054, %321 ], [ %.054, %319 ], [ %.054, %311 ], [ %.054, %306 ], [ %.054, %305 ], [ %.054, %304 ], [ %294, %293 ], [ %.054, %283 ], [ %.054, %282 ], [ %.054, %281 ], [ %.054, %280 ], [ %.054, %279 ], [ %.054, %275 ], [ %.054, %270 ], [ %.054, %265 ], [ %.054, %264 ], [ %.054, %262 ], [ %.054, %247 ], [ %.054, %237 ], [ %.054, %234 ], [ %.054, %233 ], [ 0, %223 ], [ %.054, %213 ], [ %.054, %212 ], [ %.054, %201 ], [ %.054, %191 ], [ %.054, %190 ], [ %.054, %179 ], [ %.054, %169 ], [ %.054, %164 ], [ %.054, %159 ], [ %.054, %158 ], [ %.054, %148 ], [ %.054, %138 ], [ %.054, %134 ], [ %.054, %131 ], [ %.054, %130 ], [ %.054, %129 ], [ %.054, %118 ], [ %.054, %108 ], [ %.054, %107 ], [ %.054, %105 ], [ %.054, %102 ], [ %.054, %99 ], [ %.054, %98 ], [ %.054, %88 ], [ %.054, %78 ], [ %.054, %76 ], [ %.054, %63 ], [ %.054, %53 ], [ %.054, %52 ], [ %.054, %39 ], [ %.054, %29 ], [ %.054, %28 ], [ %.054, %27 ], [ %.054, %25 ], [ %.054, %22 ], [ %.054, %19 ], [ %.054, %18 ], [ %.054, %13 ]
  %.052.be = phi i64 [ %.052, %12 ], [ %.052, %363 ], [ %.052, %361 ], [ %.052, %360 ], [ %.052, %359 ], [ %.052, %358 ], [ %.052, %356 ], [ %.052, %355 ], [ %.052, %353 ], [ %.052, %352 ], [ %.052, %351 ], [ %.052, %350 ], [ %.052, %345 ], [ %.052, %334 ], [ %.052, %324 ], [ %.052, %321 ], [ %.052, %319 ], [ %.052, %311 ], [ %.052, %306 ], [ %.052, %305 ], [ %.052, %304 ], [ %.052, %293 ], [ %.052, %283 ], [ %.052, %282 ], [ %.052, %281 ], [ %.neg70, %280 ], [ %.052, %279 ], [ %.052, %275 ], [ %.052, %270 ], [ %.052, %265 ], [ 0, %264 ], [ %.052, %262 ], [ %.052, %247 ], [ %.052, %237 ], [ %.052, %234 ], [ %.052, %233 ], [ %.052, %223 ], [ %.052, %213 ], [ %.052, %212 ], [ %.052, %201 ], [ %.052, %191 ], [ %.052, %190 ], [ %.052, %179 ], [ %.052, %169 ], [ %.052, %164 ], [ %.052, %159 ], [ %.052, %158 ], [ %.052, %148 ], [ %.052, %138 ], [ %.052, %134 ], [ %.052, %131 ], [ %.052, %130 ], [ %.052, %129 ], [ %.052, %118 ], [ %.052, %108 ], [ %.052, %107 ], [ %.052, %105 ], [ %.052, %102 ], [ %.052, %99 ], [ %.052, %98 ], [ %.052, %88 ], [ %.052, %78 ], [ %.052, %76 ], [ %.052, %63 ], [ %.052, %53 ], [ %.052, %52 ], [ %.052, %39 ], [ %.052, %29 ], [ %.052, %28 ], [ %.052, %27 ], [ %.052, %25 ], [ %.052, %22 ], [ %.052, %19 ], [ %.052, %18 ], [ %.052, %13 ]
  %.050.be = phi i64 [ %.050, %12 ], [ %.050, %363 ], [ %.050, %361 ], [ %.050, %360 ], [ %.050, %359 ], [ %.050, %358 ], [ %.050, %356 ], [ %.050, %355 ], [ %.050, %353 ], [ %.050, %352 ], [ %.050, %351 ], [ %.050, %350 ], [ %.050, %345 ], [ %.050, %334 ], [ %.050, %324 ], [ %.050, %321 ], [ %320, %319 ], [ %.050, %311 ], [ %.050, %306 ], [ 0, %305 ], [ %.050, %304 ], [ %.050, %293 ], [ %.050, %283 ], [ %.050, %282 ], [ %.050, %281 ], [ %.050, %280 ], [ %.050, %279 ], [ %.050, %275 ], [ %.050, %270 ], [ %.050, %265 ], [ %.050, %264 ], [ %.050, %262 ], [ %.050, %247 ], [ %.050, %237 ], [ %.050, %234 ], [ %.050, %233 ], [ %.050, %223 ], [ %.050, %213 ], [ %.050, %212 ], [ %.050, %201 ], [ %.050, %191 ], [ %.050, %190 ], [ %.050, %179 ], [ %.050, %169 ], [ %.050, %164 ], [ %.050, %159 ], [ %.050, %158 ], [ %.050, %148 ], [ %.050, %138 ], [ %.050, %134 ], [ %.050, %131 ], [ %.050, %130 ], [ %.050, %129 ], [ %.050, %118 ], [ %.050, %108 ], [ %.050, %107 ], [ %.050, %105 ], [ %.050, %102 ], [ %.050, %99 ], [ %.050, %98 ], [ %.050, %88 ], [ %.050, %78 ], [ %.050, %76 ], [ %.050, %63 ], [ %.050, %53 ], [ %.050, %52 ], [ %.050, %39 ], [ %.050, %29 ], [ %.050, %28 ], [ %.050, %27 ], [ %.050, %25 ], [ %.050, %22 ], [ %.050, %19 ], [ %.050, %18 ], [ %.050, %13 ]
  %.0.be = phi i32 [ %.0, %12 ], [ 314958548, %363 ], [ -1926930236, %361 ], [ 1178277964, %360 ], [ 862373295, %359 ], [ 109911706, %358 ], [ -1376391006, %356 ], [ 594924330, %355 ], [ -61837543, %353 ], [ -977189777, %352 ], [ -1225025400, %351 ], [ 1217719110, %350 ], [ 1428419508, %345 ], [ %344, %334 ], [ %333, %324 ], [ -479684684, %321 ], [ -1241682986, %319 ], [ -1084089510, %311 ], [ %310, %306 ], [ -1241682986, %305 ], [ 1531495470, %304 ], [ %303, %293 ], [ %292, %283 ], [ 819664006, %282 ], [ -634591573, %281 ], [ -1749554899, %280 ], [ 748602150, %279 ], [ -116882408, %275 ], [ %274, %270 ], [ %269, %265 ], [ -1749554899, %264 ], [ %263, %262 ], [ %261, %247 ], [ %246, %237 ], [ %236, %234 ], [ 1531495470, %233 ], [ %232, %223 ], [ %222, %213 ], [ 1517392970, %212 ], [ %211, %201 ], [ %200, %191 ], [ -1955695812, %190 ], [ %189, %179 ], [ %178, %169 ], [ %168, %164 ], [ 1517392970, %159 ], [ -479684684, %158 ], [ %157, %148 ], [ %147, %138 ], [ %137, %134 ], [ %133, %131 ], [ 1428419508, %130 ], [ 199301674, %129 ], [ %128, %118 ], [ %117, %108 ], [ -292302205, %107 ], [ 2003828210, %105 ], [ 1954358735, %102 ], [ %101, %99 ], [ 2003828210, %98 ], [ %97, %88 ], [ %87, %78 ], [ %77, %76 ], [ %75, %63 ], [ %62, %53 ], [ 199301674, %52 ], [ %51, %39 ], [ %38, %29 ], [ -239017955, %28 ], [ -900803601, %27 ], [ -2105076692, %25 ], [ 534820956, %22 ], [ %21, %19 ], [ -2105076692, %18 ], [ %17, %13 ]
  br label %12

13:                                               ; preds = %12
  %14 = load i32, i32* %5, align 4
  %15 = sext i32 %14 to i64
  %16 = icmp slt i64 %.068, %15
  %17 = select i1 %16, i32 -1344721342, i32 -1875455473
  br label %.backedge

18:                                               ; preds = %12
  br label %.backedge

19:                                               ; preds = %12
  %20 = icmp slt i64 %.066, 10
  %21 = select i1 %20, i32 555021177, i32 -975248302
  br label %.backedge

22:                                               ; preds = %12
  %23 = getelementptr inbounds [10 x i8], [10 x i8]* %11, i64 %.068, i64 %.066
  %24 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERb(%"class.std::basic_istream"* nonnull @_ZSt3cin, i8* nonnull dereferenceable(1) %23)
  br label %.backedge

25:                                               ; preds = %12
  %26 = add i64 %.066, 1
  br label %.backedge

27:                                               ; preds = %12
  br label %.backedge

28:                                               ; preds = %12
  %.neg71 = add i64 %.068, 1
  br label %.backedge

29:                                               ; preds = %12
  %30 = load i32, i32* @x.1, align 4
  %31 = load i32, i32* @y.2, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 1217719110, i32 271357591
  br label %.backedge

39:                                               ; preds = %12
  %40 = load i32, i32* %5, align 4
  %41 = zext i32 %40 to i64
  %42 = alloca [11 x i64], i64 %41, align 16
  store [11 x i64]* %42, [11 x i64]** %4, align 8
  %43 = load i32, i32* @x.1, align 4
  %44 = load i32, i32* @y.2, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 2078530287, i32 271357591
  br label %.backedge

52:                                               ; preds = %12
  br label %.backedge

53:                                               ; preds = %12
  %54 = load i32, i32* @x.1, align 4
  %55 = load i32, i32* @y.2, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 -1225025400, i32 -1567521388
  br label %.backedge

63:                                               ; preds = %12
  %64 = load i32, i32* %5, align 4
  %65 = sext i32 %64 to i64
  %66 = icmp slt i64 %.064, %65
  store i1 %66, i1* %3, align 1
  %67 = load i32, i32* @x.1, align 4
  %68 = load i32, i32* @y.2, align 4
  %69 = add i32 %67, -1
  %70 = mul i32 %69, %67
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %73, %72
  %75 = select i1 %74, i32 -743165353, i32 -1567521388
  br label %.backedge

76:                                               ; preds = %12
  %.0..0..0.44 = load volatile i1, i1* %3, align 1
  %77 = select i1 %.0..0..0.44, i32 -53142534, i32 -2063391545
  br label %.backedge

78:                                               ; preds = %12
  %79 = load i32, i32* @x.1, align 4
  %80 = load i32, i32* @y.2, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 -977189777, i32 1952986104
  br label %.backedge

88:                                               ; preds = %12
  %89 = load i32, i32* @x.1, align 4
  %90 = load i32, i32* @y.2, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 -842147672, i32 1952986104
  br label %.backedge

98:                                               ; preds = %12
  br label %.backedge

99:                                               ; preds = %12
  %100 = icmp slt i64 %.062, 11
  %101 = select i1 %100, i32 440331264, i32 1709527933
  br label %.backedge

102:                                              ; preds = %12
  %.0..0..0.42 = load volatile [11 x i64]*, [11 x i64]** %4, align 8
  %103 = getelementptr inbounds [11 x i64], [11 x i64]* %.0..0..0.42, i64 %.064, i64 %.062
  %104 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* dereferenceable(8) %103)
  br label %.backedge

105:                                              ; preds = %12
  %106 = add i64 %.062, 1
  br label %.backedge

107:                                              ; preds = %12
  br label %.backedge

108:                                              ; preds = %12
  %109 = load i32, i32* @x.1, align 4
  %110 = load i32, i32* @y.2, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 -61837543, i32 2052505348
  br label %.backedge

118:                                              ; preds = %12
  %119 = add i64 %.064, 1
  %120 = load i32, i32* @x.1, align 4
  %121 = load i32, i32* @y.2, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 -266248499, i32 2052505348
  br label %.backedge

129:                                              ; preds = %12
  br label %.backedge

130:                                              ; preds = %12
  store i64 -1000000000, i64* %6, align 8
  br label %.backedge

131:                                              ; preds = %12
  %132 = icmp slt i64 %.060, 1024
  %133 = select i1 %132, i32 674599369, i32 -2010397123
  br label %.backedge

134:                                              ; preds = %12
  %135 = trunc i64 %.060 to i32
  %136 = icmp eq i32 %135, 0
  %137 = select i1 %136, i32 666097147, i32 -412426084
  br label %.backedge

138:                                              ; preds = %12
  %139 = load i32, i32* @x.1, align 4
  %140 = load i32, i32* @y.2, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 594924330, i32 -110650617
  br label %.backedge

148:                                              ; preds = %12
  %149 = load i32, i32* @x.1, align 4
  %150 = load i32, i32* @y.2, align 4
  %151 = add i32 %149, -1
  %152 = mul i32 %151, %149
  %153 = and i32 %152, 1
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %155, %154
  %157 = select i1 %156, i32 -1515933202, i32 -110650617
  br label %.backedge

158:                                              ; preds = %12
  br label %.backedge

159:                                              ; preds = %12
  %160 = load i32, i32* %5, align 4
  %161 = zext i32 %160 to i64
  %162 = call i8* @llvm.stacksave()
  %163 = alloca i32, i64 %161, align 16
  store i32* %163, i32** %2, align 8
  br label %.backedge

164:                                              ; preds = %12
  %165 = load i32, i32* %5, align 4
  %166 = sext i32 %165 to i64
  %167 = icmp slt i64 %.056, %166
  %168 = select i1 %167, i32 1130606629, i32 22720234
  br label %.backedge

169:                                              ; preds = %12
  %170 = load i32, i32* @x.1, align 4
  %171 = load i32, i32* @y.2, align 4
  %172 = add i32 %170, -1
  %173 = mul i32 %172, %170
  %174 = and i32 %173, 1
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %176, %175
  %178 = select i1 %177, i32 -1376391006, i32 989749457
  br label %.backedge

179:                                              ; preds = %12
  %.0..0..0.45 = load volatile i32*, i32** %2, align 8
  %180 = getelementptr inbounds i32, i32* %.0..0..0.45, i64 %.056
  store i32 0, i32* %180, align 4
  %181 = load i32, i32* @x.1, align 4
  %182 = load i32, i32* @y.2, align 4
  %183 = add i32 %181, -1
  %184 = mul i32 %183, %181
  %185 = and i32 %184, 1
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %187, %186
  %189 = select i1 %188, i32 -89881073, i32 989749457
  br label %.backedge

190:                                              ; preds = %12
  br label %.backedge

191:                                              ; preds = %12
  %192 = load i32, i32* @x.1, align 4
  %193 = load i32, i32* @y.2, align 4
  %194 = add i32 %192, -1
  %195 = mul i32 %194, %192
  %196 = and i32 %195, 1
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %198, %197
  %200 = select i1 %199, i32 109911706, i32 925371606
  br label %.backedge

201:                                              ; preds = %12
  %202 = add i64 %.056, 1
  %203 = load i32, i32* @x.1, align 4
  %204 = load i32, i32* @y.2, align 4
  %205 = add i32 %203, -1
  %206 = mul i32 %205, %203
  %207 = and i32 %206, 1
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %209, %208
  %211 = select i1 %210, i32 523510016, i32 925371606
  br label %.backedge

212:                                              ; preds = %12
  br label %.backedge

213:                                              ; preds = %12
  %214 = load i32, i32* @x.1, align 4
  %215 = load i32, i32* @y.2, align 4
  %216 = add i32 %214, -1
  %217 = mul i32 %216, %214
  %218 = and i32 %217, 1
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %220, %219
  %222 = select i1 %221, i32 862373295, i32 554377516
  br label %.backedge

223:                                              ; preds = %12
  %224 = load i32, i32* @x.1, align 4
  %225 = load i32, i32* @y.2, align 4
  %226 = add i32 %224, -1
  %227 = mul i32 %226, %224
  %228 = and i32 %227, 1
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %230, %229
  %232 = select i1 %231, i32 -1581949096, i32 554377516
  br label %.backedge

233:                                              ; preds = %12
  br label %.backedge

234:                                              ; preds = %12
  %235 = icmp slt i64 %.054, 10
  %236 = select i1 %235, i32 200558806, i32 -1798881033
  br label %.backedge

237:                                              ; preds = %12
  %238 = load i32, i32* @x.1, align 4
  %239 = load i32, i32* @y.2, align 4
  %240 = add i32 %238, -1
  %241 = mul i32 %240, %238
  %242 = and i32 %241, 1
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %244, %243
  %246 = select i1 %245, i32 1178277964, i32 -1209310038
  br label %.backedge

247:                                              ; preds = %12
  %248 = trunc i64 %.054 to i32
  %249 = shl nuw i32 1, %248
  %250 = sext i32 %249 to i64
  %251 = and i64 %.060, %250
  %252 = icmp ne i64 %251, 0
  store i1 %252, i1* %1, align 1
  %253 = load i32, i32* @x.1, align 4
  %254 = load i32, i32* @y.2, align 4
  %255 = add i32 %253, -1
  %256 = mul i32 %255, %253
  %257 = and i32 %256, 1
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %259, %258
  %261 = select i1 %260, i32 1456482240, i32 -1209310038
  br label %.backedge

262:                                              ; preds = %12
  %.0..0..0.49 = load volatile i1, i1* %1, align 1
  %263 = select i1 %.0..0..0.49, i32 436567675, i32 -634591573
  br label %.backedge

264:                                              ; preds = %12
  br label %.backedge

265:                                              ; preds = %12
  %266 = load i32, i32* %5, align 4
  %267 = sext i32 %266 to i64
  %268 = icmp slt i64 %.052, %267
  %269 = select i1 %268, i32 1261893231, i32 -401537217
  br label %.backedge

270:                                              ; preds = %12
  %271 = getelementptr inbounds [10 x i8], [10 x i8]* %11, i64 %.052, i64 %.054
  %272 = load i8, i8* %271, align 1
  %273 = and i8 %272, 1
  %.not = icmp eq i8 %273, 0
  %274 = select i1 %.not, i32 -116882408, i32 1343123289
  br label %.backedge

275:                                              ; preds = %12
  %.0..0..0.46 = load volatile i32*, i32** %2, align 8
  %276 = getelementptr inbounds i32, i32* %.0..0..0.46, i64 %.052
  %277 = load i32, i32* %276, align 4
  %278 = add i32 %277, 1
  store i32 %278, i32* %276, align 4
  br label %.backedge

279:                                              ; preds = %12
  br label %.backedge

280:                                              ; preds = %12
  %.neg70 = add i64 %.052, 1
  br label %.backedge

281:                                              ; preds = %12
  br label %.backedge

282:                                              ; preds = %12
  br label %.backedge

283:                                              ; preds = %12
  %284 = load i32, i32* @x.1, align 4
  %285 = load i32, i32* @y.2, align 4
  %286 = add i32 %284, -1
  %287 = mul i32 %286, %284
  %288 = and i32 %287, 1
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %290, %289
  %292 = select i1 %291, i32 -1926930236, i32 599320362
  br label %.backedge

293:                                              ; preds = %12
  %294 = add i64 %.054, 1
  %295 = load i32, i32* @x.1, align 4
  %296 = load i32, i32* @y.2, align 4
  %297 = add i32 %295, -1
  %298 = mul i32 %297, %295
  %299 = and i32 %298, 1
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %301, %300
  %303 = select i1 %302, i32 -2098426673, i32 599320362
  br label %.backedge

304:                                              ; preds = %12
  br label %.backedge

305:                                              ; preds = %12
  store i64 0, i64* %7, align 8
  br label %.backedge

306:                                              ; preds = %12
  %307 = load i32, i32* %5, align 4
  %308 = sext i32 %307 to i64
  %309 = icmp slt i64 %.050, %308
  %310 = select i1 %309, i32 1476748308, i32 1455246925
  br label %.backedge

311:                                              ; preds = %12
  %.0..0..0.43 = load volatile [11 x i64]*, [11 x i64]** %4, align 8
  %.0..0..0.47 = load volatile i32*, i32** %2, align 8
  %312 = getelementptr inbounds i32, i32* %.0..0..0.47, i64 %.050
  %313 = load i32, i32* %312, align 4
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds [11 x i64], [11 x i64]* %.0..0..0.43, i64 %.050, i64 %314
  %316 = load i64, i64* %315, align 8
  %317 = load i64, i64* %7, align 8
  %318 = add i64 %317, %316
  store i64 %318, i64* %7, align 8
  br label %.backedge

319:                                              ; preds = %12
  %320 = add i64 %.050, 1
  br label %.backedge

321:                                              ; preds = %12
  %322 = call dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %6, i64* nonnull dereferenceable(8) %7)
  %323 = load i64, i64* %322, align 8
  store i64 %323, i64* %6, align 8
  call void @llvm.stackrestore(i8* %.058)
  br label %.backedge

324:                                              ; preds = %12
  %325 = load i32, i32* @x.1, align 4
  %326 = load i32, i32* @y.2, align 4
  %327 = add i32 %325, -1
  %328 = mul i32 %327, %325
  %329 = and i32 %328, 1
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %331, %330
  %333 = select i1 %332, i32 314958548, i32 -1081445259
  br label %.backedge

334:                                              ; preds = %12
  %335 = add i64 %.060, 1
  %336 = load i32, i32* @x.1, align 4
  %337 = load i32, i32* @y.2, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 -1671261522, i32 -1081445259
  br label %.backedge

345:                                              ; preds = %12
  br label %.backedge

346:                                              ; preds = %12
  %347 = load i64, i64* %6, align 8
  %348 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %347)
  %349 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %348, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0

350:                                              ; preds = %12
  br label %.backedge

351:                                              ; preds = %12
  br label %.backedge

352:                                              ; preds = %12
  br label %.backedge

353:                                              ; preds = %12
  %354 = add i64 %.064, 1
  br label %.backedge

355:                                              ; preds = %12
  br label %.backedge

356:                                              ; preds = %12
  %.0..0..0.48 = load volatile i32*, i32** %2, align 8
  %357 = getelementptr inbounds i32, i32* %.0..0..0.48, i64 %.056
  store i32 0, i32* %357, align 4
  br label %.backedge

358:                                              ; preds = %12
  %.neg = add i64 %.056, 1
  br label %.backedge

359:                                              ; preds = %12
  br label %.backedge

360:                                              ; preds = %12
  br label %.backedge

361:                                              ; preds = %12
  %362 = add i64 %.054, 1
  br label %.backedge

363:                                              ; preds = %12
  %364 = add i64 %.060, 1
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #5

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERb(%"class.std::basic_istream"*, i8* dereferenceable(1)) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3maxIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64**, align 8
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.3, align 4
  %10 = load i32, i32* @y.4, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ 35368266, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %16

16:                                               ; preds = %.outer, %16
  switch i32 %.0.ph, label %16 [
    i32 35368266, label %17
    i32 1401623920, label %20
    i32 -729546677, label %38
    i32 -1225130047, label %40
    i32 -1022060255, label %42
    i32 972787489, label %44
    i32 -685144835, label %.outer.backedge
  ]

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 1401623920, i32 -685144835
  br label %.outer.backedge

20:                                               ; preds = %16
  %21 = alloca i64*, align 8
  store i64** %21, i64*** %6, align 8
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %5, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %4, align 8
  %.0..0..0.5 = load volatile i64**, i64*** %5, align 8
  store i64* %0, i64** %.0..0..0.5, align 8
  %.0..0..0.8 = load volatile i64**, i64*** %4, align 8
  store i64* %1, i64** %.0..0..0.8, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %5, align 8
  %24 = load i64*, i64** %.0..0..0.6, align 8
  %25 = load i64, i64* %24, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %4, align 8
  %26 = load i64*, i64** %.0..0..0.9, align 8
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %25, %27
  store i1 %28, i1* %3, align 1
  %29 = load i32, i32* @x.3, align 4
  %30 = load i32, i32* @y.4, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -729546677, i32 -685144835
  br label %.outer.backedge

38:                                               ; preds = %16
  %.0..0..0.11 = load volatile i1, i1* %3, align 1
  %39 = select i1 %.0..0..0.11, i32 -1225130047, i32 -1022060255
  br label %.outer.backedge

40:                                               ; preds = %16
  %.0..0..0.10 = load volatile i64**, i64*** %4, align 8
  %41 = load i64*, i64** %.0..0..0.10, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %6, align 8
  store i64* %41, i64** %.0..0..0.2, align 8
  br label %.outer.backedge

42:                                               ; preds = %16
  %.0..0..0.7 = load volatile i64**, i64*** %5, align 8
  %43 = load i64*, i64** %.0..0..0.7, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %6, align 8
  store i64* %43, i64** %.0..0..0.3, align 8
  br label %.outer.backedge

44:                                               ; preds = %16
  %.0..0..0.4 = load volatile i64**, i64*** %6, align 8
  %45 = load i64*, i64** %.0..0..0.4, align 8
  ret i64* %45

.outer.backedge:                                  ; preds = %16, %42, %40, %38, %20, %17
  %.0.ph.be = phi i32 [ %19, %17 ], [ %37, %20 ], [ %39, %38 ], [ 972787489, %40 ], [ 972787489, %42 ], [ 1401623920, %16 ]
  br label %.outer
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #5

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s196333269.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.5, align 4
  %4 = load i32, i32* @y.6, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 569133375, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 569133375, label %11
    i32 -60754829, label %14
    i32 1878050794, label %24
    i32 -964432124, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -60754829, i32 -964432124
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.5, align 4
  %16 = load i32, i32* @y.6, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 1878050794, i32 -964432124
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -60754829, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nofree nosync nounwind willreturn }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
