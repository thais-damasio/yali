; ModuleID = 'build_ollvm/programs/p02855/s807526838.ll'
source_filename = "Project_CodeNet_C++1400/p02855/s807526838.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z4readv = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@tot = local_unnamed_addr global i32 0, align 4
@n = local_unnamed_addr global i32 0, align 4
@m = local_unnamed_addr global i32 0, align 4
@ans = local_unnamed_addr global [333 x [333 x i32]] zeroinitializer, align 16
@mp = global [333 x [333 x i8]] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s807526838.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1628916015, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1628916015, label %11
    i32 -675049527, label %14
    i32 1320738646, label %25
    i32 537694728, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -675049527, i32 537694728
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 1320738646, i32 537694728
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -675049527, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = tail call i32 @_Z4readv()
  store i32 %5, i32* @n, align 4
  %6 = tail call i32 @_Z4readv()
  store i32 %6, i32* @m, align 4
  %7 = tail call i32 @_Z4readv()
  store i32 %7, i32* @tot, align 4
  br label %8

8:                                                ; preds = %.backedge, %0
  %.078 = phi i32 [ 1, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i8 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.0 = phi i32 [ 1492442115, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1492442115, label %9
    i32 616165222, label %12
    i32 1459273162, label %22
    i32 -1908529413, label %35
    i32 93542665, label %36
    i32 272069542, label %38
    i32 2052325673, label %39
    i32 -1805434490, label %42
    i32 1794377589, label %43
    i32 -1934942273, label %53
    i32 1726973673, label %65
    i32 998715204, label %67
    i32 1171809219, label %74
    i32 -2113861184, label %84
    i32 -1348900332, label %94
    i32 -751459477, label %95
    i32 -816603744, label %96
    i32 -2012639360, label %98
    i32 -1349680513, label %101
    i32 526115313, label %103
    i32 -2002950641, label %111
    i32 -1211721247, label %112
    i32 -921771375, label %114
    i32 -929199215, label %115
    i32 -723312514, label %116
    i32 942506644, label %119
    i32 909049438, label %129
    i32 -932967322, label %144
    i32 -923139411, label %146
    i32 -974158585, label %156
    i32 -1479253327, label %167
    i32 266524994, label %169
    i32 1805022496, label %170
    i32 -1728872377, label %175
    i32 2107605044, label %183
    i32 1598767415, label %184
    i32 -1946933931, label %185
    i32 -1597956833, label %187
    i32 -889770035, label %190
    i32 1162752144, label %197
    i32 -309882491, label %199
    i32 -1987979648, label %200
    i32 -2024418776, label %201
    i32 -1744155228, label %203
    i32 2071649231, label %205
    i32 -83936438, label %215
    i32 -1348911533, label %226
    i32 -548715641, label %228
    i32 -1940965924, label %238
    i32 517196519, label %254
    i32 -83220790, label %255
    i32 -1338589587, label %257
    i32 2057636732, label %267
    i32 422786460, label %277
    i32 -1680860705, label %278
    i32 1120277748, label %281
    i32 -940145059, label %282
    i32 1648207904, label %285
    i32 -972084419, label %291
    i32 -629268192, label %301
    i32 -1243382967, label %312
    i32 1354527239, label %313
    i32 876865337, label %323
    i32 -1811255962, label %333
    i32 -556111800, label %334
    i32 -224673686, label %336
    i32 -1585164875, label %346
    i32 -2118092014, label %356
    i32 465668876, label %357
    i32 1911997863, label %361
    i32 1021912854, label %362
    i32 -495328979, label %363
    i32 1673457712, label %364
    i32 -239387980, label %365
    i32 954450592, label %366
    i32 -530869529, label %373
    i32 -466350730, label %374
    i32 -2011483730, label %376
    i32 -77001319, label %377
  ]

.backedge:                                        ; preds = %8, %377, %376, %374, %373, %366, %365, %364, %363, %362, %361, %357, %346, %336, %334, %333, %323, %313, %312, %301, %291, %285, %282, %281, %278, %277, %267, %257, %255, %254, %238, %228, %226, %215, %205, %203, %201, %200, %199, %197, %190, %187, %185, %184, %183, %175, %170, %169, %167, %156, %146, %144, %129, %119, %116, %115, %114, %112, %111, %103, %101, %98, %96, %95, %94, %84, %74, %67, %65, %53, %43, %42, %39, %38, %36, %35, %22, %12, %9
  %.078.be = phi i32 [ %.078, %8 ], [ %.078, %377 ], [ %.078, %376 ], [ %.078, %374 ], [ %.078, %373 ], [ %.078, %366 ], [ %.078, %365 ], [ %.078, %364 ], [ %.078, %363 ], [ %.078, %362 ], [ %.078, %361 ], [ %.078, %357 ], [ %.078, %346 ], [ %.078, %336 ], [ %.078, %334 ], [ %.078, %333 ], [ %.078, %323 ], [ %.078, %313 ], [ %.078, %312 ], [ %.078, %301 ], [ %.078, %291 ], [ %.078, %285 ], [ %.078, %282 ], [ %.078, %281 ], [ %.078, %278 ], [ %.078, %277 ], [ %.078, %267 ], [ %.078, %257 ], [ %.078, %255 ], [ %.078, %254 ], [ %.078, %238 ], [ %.078, %228 ], [ %.078, %226 ], [ %.078, %215 ], [ %.078, %205 ], [ %.078, %203 ], [ %.078, %201 ], [ %.078, %200 ], [ %.078, %199 ], [ %.078, %197 ], [ %.078, %190 ], [ %.078, %187 ], [ %.078, %185 ], [ %.078, %184 ], [ %.078, %183 ], [ %.078, %175 ], [ %.078, %170 ], [ %.078, %169 ], [ %.078, %167 ], [ %.078, %156 ], [ %.078, %146 ], [ %.078, %144 ], [ %.078, %129 ], [ %.078, %119 ], [ %.078, %116 ], [ %.078, %115 ], [ %.078, %114 ], [ %.078, %112 ], [ %.078, %111 ], [ %.078, %103 ], [ %.078, %101 ], [ %.078, %98 ], [ %.078, %96 ], [ %.078, %95 ], [ %.078, %94 ], [ %.078, %84 ], [ %.078, %74 ], [ %.078, %67 ], [ %.078, %65 ], [ %.078, %53 ], [ %.078, %43 ], [ %.078, %42 ], [ %.078, %39 ], [ %.078, %38 ], [ %37, %36 ], [ %.078, %35 ], [ %.078, %22 ], [ %.078, %12 ], [ %.078, %9 ]
  %.076.be = phi i32 [ %.076, %8 ], [ %.076, %377 ], [ %.076, %376 ], [ %.076, %374 ], [ %.076, %373 ], [ %.076, %366 ], [ %.076, %365 ], [ %.076, %364 ], [ %.076, %363 ], [ %.076, %362 ], [ %.076, %361 ], [ %.076, %357 ], [ %.076, %346 ], [ %.076, %336 ], [ %.076, %334 ], [ %.076, %333 ], [ %.076, %323 ], [ %.076, %313 ], [ %.076, %312 ], [ %.076, %301 ], [ %.076, %291 ], [ %.076, %285 ], [ %.076, %282 ], [ %.076, %281 ], [ %.076, %278 ], [ %.076, %277 ], [ %.076, %267 ], [ %.076, %257 ], [ %.076, %255 ], [ %.076, %254 ], [ %.076, %238 ], [ %.076, %228 ], [ %.076, %226 ], [ %.076, %215 ], [ %.076, %205 ], [ %.076, %203 ], [ %.076, %201 ], [ %.076, %200 ], [ %.076, %199 ], [ %.076, %197 ], [ %.076, %190 ], [ %.076, %187 ], [ %.076, %185 ], [ %.076, %184 ], [ %.076, %183 ], [ %.076, %175 ], [ %.076, %170 ], [ %.076, %169 ], [ %.076, %167 ], [ %.076, %156 ], [ %.076, %146 ], [ %.076, %144 ], [ %.076, %129 ], [ %.076, %119 ], [ %.076, %116 ], [ %.076, %115 ], [ %.074, %114 ], [ %.076, %112 ], [ %.076, %111 ], [ %.076, %103 ], [ %.076, %101 ], [ %.076, %98 ], [ %.076, %96 ], [ %.076, %95 ], [ %.076, %94 ], [ %.076, %84 ], [ %.076, %74 ], [ %.076, %67 ], [ %.076, %65 ], [ %.076, %53 ], [ %.076, %43 ], [ %.076, %42 ], [ %.076, %39 ], [ 0, %38 ], [ %.076, %36 ], [ %.076, %35 ], [ %.076, %22 ], [ %.076, %12 ], [ %.076, %9 ]
  %.074.be = phi i32 [ %.074, %8 ], [ %.074, %377 ], [ %.074, %376 ], [ %.074, %374 ], [ %.074, %373 ], [ %.074, %366 ], [ %.074, %365 ], [ %.074, %364 ], [ %.074, %363 ], [ %.074, %362 ], [ %.074, %361 ], [ %.074, %357 ], [ %.074, %346 ], [ %.074, %336 ], [ %.074, %334 ], [ %.074, %333 ], [ %.074, %323 ], [ %.074, %313 ], [ %.074, %312 ], [ %.074, %301 ], [ %.074, %291 ], [ %.074, %285 ], [ %.074, %282 ], [ %.074, %281 ], [ %.074, %278 ], [ %.074, %277 ], [ %.074, %267 ], [ %.074, %257 ], [ %.074, %255 ], [ %.074, %254 ], [ %.074, %238 ], [ %.074, %228 ], [ %.074, %226 ], [ %.074, %215 ], [ %.074, %205 ], [ %.074, %203 ], [ %202, %201 ], [ %.074, %200 ], [ %.074, %199 ], [ %.074, %197 ], [ %.074, %190 ], [ %.074, %187 ], [ %.074, %185 ], [ %.074, %184 ], [ %.074, %183 ], [ %.074, %175 ], [ %.074, %170 ], [ %.074, %169 ], [ %.074, %167 ], [ %.074, %156 ], [ %.074, %146 ], [ %.074, %144 ], [ %.074, %129 ], [ %.074, %119 ], [ %.074, %116 ], [ %.074, %115 ], [ %.074, %114 ], [ %.074, %112 ], [ %.074, %111 ], [ %.074, %103 ], [ %.074, %101 ], [ %.074, %98 ], [ %.074, %96 ], [ %.074, %95 ], [ %.074, %94 ], [ %.074, %84 ], [ %.074, %74 ], [ %.074, %67 ], [ %.074, %65 ], [ %.074, %53 ], [ %.074, %43 ], [ %.074, %42 ], [ %.074, %39 ], [ 1, %38 ], [ %.074, %36 ], [ %.074, %35 ], [ %.074, %22 ], [ %.074, %12 ], [ %.074, %9 ]
  %.072.be = phi i8 [ %.072, %8 ], [ %.072, %377 ], [ %.072, %376 ], [ %.072, %374 ], [ %.072, %373 ], [ %.072, %366 ], [ %.072, %365 ], [ %.072, %364 ], [ %.072, %363 ], [ 1, %362 ], [ %.072, %361 ], [ %.072, %357 ], [ %.072, %346 ], [ %.072, %336 ], [ %.072, %334 ], [ %.072, %333 ], [ %.072, %323 ], [ %.072, %313 ], [ %.072, %312 ], [ %.072, %301 ], [ %.072, %291 ], [ %.072, %285 ], [ %.072, %282 ], [ %.072, %281 ], [ %.072, %278 ], [ %.072, %277 ], [ %.072, %267 ], [ %.072, %257 ], [ %.072, %255 ], [ %.072, %254 ], [ %.072, %238 ], [ %.072, %228 ], [ %.072, %226 ], [ %.072, %215 ], [ %.072, %205 ], [ %.072, %203 ], [ %.072, %201 ], [ %.072, %200 ], [ %.072, %199 ], [ %.072, %197 ], [ %.072, %190 ], [ %.072, %187 ], [ %.072, %185 ], [ %.072, %184 ], [ %.072, %183 ], [ %.072, %175 ], [ %.072, %170 ], [ %.072, %169 ], [ %.072, %167 ], [ %.072, %156 ], [ %.072, %146 ], [ %.072, %144 ], [ %.072, %129 ], [ %.072, %119 ], [ %.072, %116 ], [ %.072, %115 ], [ %.072, %114 ], [ %.072, %112 ], [ %.072, %111 ], [ %.072, %103 ], [ %.072, %101 ], [ %.072, %98 ], [ %.072, %96 ], [ %.072, %95 ], [ %.072, %94 ], [ 1, %84 ], [ %.072, %74 ], [ %.072, %67 ], [ %.072, %65 ], [ %.072, %53 ], [ %.072, %43 ], [ 0, %42 ], [ %.072, %39 ], [ %.072, %38 ], [ %.072, %36 ], [ %.072, %35 ], [ %.072, %22 ], [ %.072, %12 ], [ %.072, %9 ]
  %.070.be = phi i32 [ %.070, %8 ], [ %.070, %377 ], [ %.070, %376 ], [ %.070, %374 ], [ %.070, %373 ], [ %.070, %366 ], [ %.070, %365 ], [ %.070, %364 ], [ %.070, %363 ], [ %.070, %362 ], [ %.070, %361 ], [ %.070, %357 ], [ %.070, %346 ], [ %.070, %336 ], [ %.070, %334 ], [ %.070, %333 ], [ %.070, %323 ], [ %.070, %313 ], [ %.070, %312 ], [ %.070, %301 ], [ %.070, %291 ], [ %.070, %285 ], [ %.070, %282 ], [ %.070, %281 ], [ %.070, %278 ], [ %.070, %277 ], [ %.070, %267 ], [ %.070, %257 ], [ %.070, %255 ], [ %.070, %254 ], [ %.070, %238 ], [ %.070, %228 ], [ %.070, %226 ], [ %.070, %215 ], [ %.070, %205 ], [ %.070, %203 ], [ %.070, %201 ], [ %.070, %200 ], [ %.070, %199 ], [ %.070, %197 ], [ %.070, %190 ], [ %.070, %187 ], [ %.070, %185 ], [ %.070, %184 ], [ %.070, %183 ], [ %.070, %175 ], [ %.070, %170 ], [ %.070, %169 ], [ %.070, %167 ], [ %.070, %156 ], [ %.070, %146 ], [ %.070, %144 ], [ %.070, %129 ], [ %.070, %119 ], [ %.070, %116 ], [ %.070, %115 ], [ %.070, %114 ], [ %.070, %112 ], [ %.070, %111 ], [ %.070, %103 ], [ %.070, %101 ], [ %.070, %98 ], [ %97, %96 ], [ %.070, %95 ], [ %.070, %94 ], [ %.070, %84 ], [ %.070, %74 ], [ %.070, %67 ], [ %.070, %65 ], [ %.070, %53 ], [ %.070, %43 ], [ 1, %42 ], [ %.070, %39 ], [ %.070, %38 ], [ %.070, %36 ], [ %.070, %35 ], [ %.070, %22 ], [ %.070, %12 ], [ %.070, %9 ]
  %.068.be = phi i32 [ %.068, %8 ], [ %.068, %377 ], [ %.068, %376 ], [ %.068, %374 ], [ %.068, %373 ], [ %.068, %366 ], [ %.068, %365 ], [ %.068, %364 ], [ %.068, %363 ], [ %.068, %362 ], [ %.068, %361 ], [ %.068, %357 ], [ %.068, %346 ], [ %.068, %336 ], [ %.068, %334 ], [ %.068, %333 ], [ %.068, %323 ], [ %.068, %313 ], [ %.068, %312 ], [ %.068, %301 ], [ %.068, %291 ], [ %.068, %285 ], [ %.068, %282 ], [ %.068, %281 ], [ %.068, %278 ], [ %.068, %277 ], [ %.068, %267 ], [ %.068, %257 ], [ %.068, %255 ], [ %.068, %254 ], [ %.068, %238 ], [ %.068, %228 ], [ %.068, %226 ], [ %.068, %215 ], [ %.068, %205 ], [ %.068, %203 ], [ %.068, %201 ], [ %.068, %200 ], [ %.068, %199 ], [ %.068, %197 ], [ %.068, %190 ], [ %.068, %187 ], [ %.068, %185 ], [ %.068, %184 ], [ %.068, %183 ], [ %.068, %175 ], [ %.068, %170 ], [ %.066, %169 ], [ %.068, %167 ], [ %.068, %156 ], [ %.068, %146 ], [ %.068, %144 ], [ %.068, %129 ], [ %.068, %119 ], [ %.068, %116 ], [ 0, %115 ], [ %.068, %114 ], [ %.068, %112 ], [ %.068, %111 ], [ %.068, %103 ], [ %.068, %101 ], [ %.068, %98 ], [ %.068, %96 ], [ %.068, %95 ], [ %.068, %94 ], [ %.068, %84 ], [ %.068, %74 ], [ %.068, %67 ], [ %.068, %65 ], [ %.068, %53 ], [ %.068, %43 ], [ %.068, %42 ], [ %.068, %39 ], [ %.068, %38 ], [ %.068, %36 ], [ %.068, %35 ], [ %.068, %22 ], [ %.068, %12 ], [ %.068, %9 ]
  %.066.be = phi i32 [ %.066, %8 ], [ %.066, %377 ], [ %.066, %376 ], [ %.066, %374 ], [ %.066, %373 ], [ %.066, %366 ], [ %.066, %365 ], [ %.066, %364 ], [ %.066, %363 ], [ %.066, %362 ], [ %.066, %361 ], [ %.066, %357 ], [ %.066, %346 ], [ %.066, %336 ], [ %.066, %334 ], [ %.066, %333 ], [ %.066, %323 ], [ %.066, %313 ], [ %.066, %312 ], [ %.066, %301 ], [ %.066, %291 ], [ %.066, %285 ], [ %.066, %282 ], [ %.066, %281 ], [ %.066, %278 ], [ %.066, %277 ], [ %.066, %267 ], [ %.066, %257 ], [ %.066, %255 ], [ %.066, %254 ], [ %.066, %238 ], [ %.066, %228 ], [ %.066, %226 ], [ %.066, %215 ], [ %.066, %205 ], [ %.066, %203 ], [ %.066, %201 ], [ %.066, %200 ], [ %.066, %199 ], [ %.066, %197 ], [ %.066, %190 ], [ %.066, %187 ], [ %.066, %185 ], [ %.neg, %184 ], [ %.066, %183 ], [ %.066, %175 ], [ %.066, %170 ], [ %.066, %169 ], [ %.066, %167 ], [ %.066, %156 ], [ %.066, %146 ], [ %.066, %144 ], [ %.066, %129 ], [ %.066, %119 ], [ %.066, %116 ], [ 1, %115 ], [ %.066, %114 ], [ %.066, %112 ], [ %.066, %111 ], [ %.066, %103 ], [ %.066, %101 ], [ %.066, %98 ], [ %.066, %96 ], [ %.066, %95 ], [ %.066, %94 ], [ %.066, %84 ], [ %.066, %74 ], [ %.066, %67 ], [ %.066, %65 ], [ %.066, %53 ], [ %.066, %43 ], [ %.066, %42 ], [ %.066, %39 ], [ %.066, %38 ], [ %.066, %36 ], [ %.066, %35 ], [ %.066, %22 ], [ %.066, %12 ], [ %.066, %9 ]
  %.064.be = phi i32 [ %.064, %8 ], [ %.064, %377 ], [ %.064, %376 ], [ %.064, %374 ], [ %.064, %373 ], [ %.064, %366 ], [ %.064, %365 ], [ %.064, %364 ], [ %.064, %363 ], [ %.064, %362 ], [ %.064, %361 ], [ %.064, %357 ], [ %.064, %346 ], [ %.064, %336 ], [ %.064, %334 ], [ %.064, %333 ], [ %.064, %323 ], [ %.064, %313 ], [ %.064, %312 ], [ %.064, %301 ], [ %.064, %291 ], [ %.064, %285 ], [ %.064, %282 ], [ %.064, %281 ], [ %.064, %278 ], [ %.064, %277 ], [ %.064, %267 ], [ %.064, %257 ], [ %.064, %255 ], [ %.064, %254 ], [ %.064, %238 ], [ %.064, %228 ], [ %.064, %226 ], [ %.064, %215 ], [ %.064, %205 ], [ %.064, %203 ], [ %.064, %201 ], [ %.064, %200 ], [ %.064, %199 ], [ %198, %197 ], [ %.064, %190 ], [ %.064, %187 ], [ %186, %185 ], [ %.064, %184 ], [ %.064, %183 ], [ %.064, %175 ], [ %.064, %170 ], [ %.064, %169 ], [ %.064, %167 ], [ %.064, %156 ], [ %.064, %146 ], [ %.064, %144 ], [ %.064, %129 ], [ %.064, %119 ], [ %.064, %116 ], [ %.064, %115 ], [ %.064, %114 ], [ %.064, %112 ], [ %.064, %111 ], [ %.064, %103 ], [ %.064, %101 ], [ %.064, %98 ], [ %.064, %96 ], [ %.064, %95 ], [ %.064, %94 ], [ %.064, %84 ], [ %.064, %74 ], [ %.064, %67 ], [ %.064, %65 ], [ %.064, %53 ], [ %.064, %43 ], [ %.064, %42 ], [ %.064, %39 ], [ %.064, %38 ], [ %.064, %36 ], [ %.064, %35 ], [ %.064, %22 ], [ %.064, %12 ], [ %.064, %9 ]
  %.062.be = phi i32 [ %.062, %8 ], [ %.062, %377 ], [ %.062, %376 ], [ %.062, %374 ], [ %.062, %373 ], [ %.062, %366 ], [ %.062, %365 ], [ %.062, %364 ], [ %.062, %363 ], [ %.062, %362 ], [ %.062, %361 ], [ %.062, %357 ], [ %.062, %346 ], [ %.062, %336 ], [ %.062, %334 ], [ %.062, %333 ], [ %.062, %323 ], [ %.062, %313 ], [ %.062, %312 ], [ %.062, %301 ], [ %.062, %291 ], [ %.062, %285 ], [ %.062, %282 ], [ %.062, %281 ], [ %.062, %278 ], [ %.062, %277 ], [ %.062, %267 ], [ %.062, %257 ], [ %256, %255 ], [ %.062, %254 ], [ %.062, %238 ], [ %.062, %228 ], [ %.062, %226 ], [ %.062, %215 ], [ %.062, %205 ], [ %204, %203 ], [ %.062, %201 ], [ %.062, %200 ], [ %.062, %199 ], [ %.062, %197 ], [ %.062, %190 ], [ %.062, %187 ], [ %.062, %185 ], [ %.062, %184 ], [ %.062, %183 ], [ %.062, %175 ], [ %.062, %170 ], [ %.062, %169 ], [ %.062, %167 ], [ %.062, %156 ], [ %.062, %146 ], [ %.062, %144 ], [ %.062, %129 ], [ %.062, %119 ], [ %.062, %116 ], [ %.062, %115 ], [ %.062, %114 ], [ %.062, %112 ], [ %.062, %111 ], [ %.062, %103 ], [ %.062, %101 ], [ %.062, %98 ], [ %.062, %96 ], [ %.062, %95 ], [ %.062, %94 ], [ %.062, %84 ], [ %.062, %74 ], [ %.062, %67 ], [ %.062, %65 ], [ %.062, %53 ], [ %.062, %43 ], [ %.062, %42 ], [ %.062, %39 ], [ %.062, %38 ], [ %.062, %36 ], [ %.062, %35 ], [ %.062, %22 ], [ %.062, %12 ], [ %.062, %9 ]
  %.060.be = phi i32 [ %.060, %8 ], [ %.060, %377 ], [ %.060, %376 ], [ %.060, %374 ], [ 1, %373 ], [ %.060, %366 ], [ %.060, %365 ], [ %.060, %364 ], [ %.060, %363 ], [ %.060, %362 ], [ %.060, %361 ], [ %.060, %357 ], [ %.060, %346 ], [ %.060, %336 ], [ %335, %334 ], [ %.060, %333 ], [ %.060, %323 ], [ %.060, %313 ], [ %.060, %312 ], [ %.060, %301 ], [ %.060, %291 ], [ %.060, %285 ], [ %.060, %282 ], [ %.060, %281 ], [ %.060, %278 ], [ %.060, %277 ], [ 1, %267 ], [ %.060, %257 ], [ %.060, %255 ], [ %.060, %254 ], [ %.060, %238 ], [ %.060, %228 ], [ %.060, %226 ], [ %.060, %215 ], [ %.060, %205 ], [ %.060, %203 ], [ %.060, %201 ], [ %.060, %200 ], [ %.060, %199 ], [ %.060, %197 ], [ %.060, %190 ], [ %.060, %187 ], [ %.060, %185 ], [ %.060, %184 ], [ %.060, %183 ], [ %.060, %175 ], [ %.060, %170 ], [ %.060, %169 ], [ %.060, %167 ], [ %.060, %156 ], [ %.060, %146 ], [ %.060, %144 ], [ %.060, %129 ], [ %.060, %119 ], [ %.060, %116 ], [ %.060, %115 ], [ %.060, %114 ], [ %.060, %112 ], [ %.060, %111 ], [ %.060, %103 ], [ %.060, %101 ], [ %.060, %98 ], [ %.060, %96 ], [ %.060, %95 ], [ %.060, %94 ], [ %.060, %84 ], [ %.060, %74 ], [ %.060, %67 ], [ %.060, %65 ], [ %.060, %53 ], [ %.060, %43 ], [ %.060, %42 ], [ %.060, %39 ], [ %.060, %38 ], [ %.060, %36 ], [ %.060, %35 ], [ %.060, %22 ], [ %.060, %12 ], [ %.060, %9 ]
  %.058.be = phi i32 [ %.058, %8 ], [ %.058, %377 ], [ %.058, %376 ], [ %375, %374 ], [ %.058, %373 ], [ %.058, %366 ], [ %.058, %365 ], [ %.058, %364 ], [ %.058, %363 ], [ %.058, %362 ], [ %.058, %361 ], [ %.058, %357 ], [ %.058, %346 ], [ %.058, %336 ], [ %.058, %334 ], [ %.058, %333 ], [ %.058, %323 ], [ %.058, %313 ], [ %.058, %312 ], [ %302, %301 ], [ %.058, %291 ], [ %.058, %285 ], [ %.058, %282 ], [ 1, %281 ], [ %.058, %278 ], [ %.058, %277 ], [ %.058, %267 ], [ %.058, %257 ], [ %.058, %255 ], [ %.058, %254 ], [ %.058, %238 ], [ %.058, %228 ], [ %.058, %226 ], [ %.058, %215 ], [ %.058, %205 ], [ %.058, %203 ], [ %.058, %201 ], [ %.058, %200 ], [ %.058, %199 ], [ %.058, %197 ], [ %.058, %190 ], [ %.058, %187 ], [ %.058, %185 ], [ %.058, %184 ], [ %.058, %183 ], [ %.058, %175 ], [ %.058, %170 ], [ %.058, %169 ], [ %.058, %167 ], [ %.058, %156 ], [ %.058, %146 ], [ %.058, %144 ], [ %.058, %129 ], [ %.058, %119 ], [ %.058, %116 ], [ %.058, %115 ], [ %.058, %114 ], [ %.058, %112 ], [ %.058, %111 ], [ %.058, %103 ], [ %.058, %101 ], [ %.058, %98 ], [ %.058, %96 ], [ %.058, %95 ], [ %.058, %94 ], [ %.058, %84 ], [ %.058, %74 ], [ %.058, %67 ], [ %.058, %65 ], [ %.058, %53 ], [ %.058, %43 ], [ %.058, %42 ], [ %.058, %39 ], [ %.058, %38 ], [ %.058, %36 ], [ %.058, %35 ], [ %.058, %22 ], [ %.058, %12 ], [ %.058, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ -1585164875, %377 ], [ 876865337, %376 ], [ -629268192, %374 ], [ 2057636732, %373 ], [ -1940965924, %366 ], [ -83936438, %365 ], [ -974158585, %364 ], [ 909049438, %363 ], [ -2113861184, %362 ], [ -1934942273, %361 ], [ 1459273162, %357 ], [ %355, %346 ], [ %345, %336 ], [ -1680860705, %334 ], [ -556111800, %333 ], [ %332, %323 ], [ %322, %313 ], [ -940145059, %312 ], [ %311, %301 ], [ %300, %291 ], [ -972084419, %285 ], [ %284, %282 ], [ -940145059, %281 ], [ %280, %278 ], [ -1680860705, %277 ], [ %276, %267 ], [ %266, %257 ], [ 2071649231, %255 ], [ -83220790, %254 ], [ %253, %238 ], [ %237, %228 ], [ %227, %226 ], [ %225, %215 ], [ %214, %205 ], [ 2071649231, %203 ], [ 2052325673, %201 ], [ -2024418776, %200 ], [ -1987979648, %199 ], [ -1597956833, %197 ], [ 1162752144, %190 ], [ %189, %187 ], [ -1597956833, %185 ], [ -723312514, %184 ], [ 1598767415, %183 ], [ 2107605044, %175 ], [ 2107605044, %170 ], [ 1805022496, %169 ], [ %168, %167 ], [ %166, %156 ], [ %155, %146 ], [ %145, %144 ], [ %143, %129 ], [ %128, %119 ], [ %118, %116 ], [ -723312514, %115 ], [ -929199215, %114 ], [ %113, %112 ], [ -1987979648, %111 ], [ -2002950641, %103 ], [ %102, %101 ], [ %100, %98 ], [ 1794377589, %96 ], [ -816603744, %95 ], [ -2012639360, %94 ], [ %93, %84 ], [ %83, %74 ], [ %73, %67 ], [ %66, %65 ], [ %64, %53 ], [ %52, %43 ], [ 1794377589, %42 ], [ %41, %39 ], [ 2052325673, %38 ], [ 1492442115, %36 ], [ 93542665, %35 ], [ %34, %22 ], [ %21, %12 ], [ %11, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i32, i32* @n, align 4
  %.not88 = icmp sgt i32 %.078, %10
  %11 = select i1 %.not88, i32 272069542, i32 616165222
  br label %.backedge

12:                                               ; preds = %8
  %13 = load i32, i32* @x.3, align 4
  %14 = load i32, i32* @y.4, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 1459273162, i32 465668876
  br label %.backedge

22:                                               ; preds = %8
  %23 = sext i32 %.078 to i64
  %24 = getelementptr inbounds [333 x [333 x i8]], [333 x [333 x i8]]* @mp, i64 0, i64 %23, i64 1
  %25 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* nonnull %24)
  %26 = load i32, i32* @x.3, align 4
  %27 = load i32, i32* @y.4, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 -1908529413, i32 465668876
  br label %.backedge

35:                                               ; preds = %8
  br label %.backedge

36:                                               ; preds = %8
  %37 = add i32 %.078, 1
  br label %.backedge

38:                                               ; preds = %8
  br label %.backedge

39:                                               ; preds = %8
  %40 = load i32, i32* @n, align 4
  %.not87 = icmp sgt i32 %.074, %40
  %41 = select i1 %.not87, i32 -1744155228, i32 -1805434490
  br label %.backedge

42:                                               ; preds = %8
  br label %.backedge

43:                                               ; preds = %8
  %44 = load i32, i32* @x.3, align 4
  %45 = load i32, i32* @y.4, align 4
  %46 = add i32 %44, -1
  %47 = mul i32 %46, %44
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %50, %49
  %52 = select i1 %51, i32 -1934942273, i32 1911997863
  br label %.backedge

53:                                               ; preds = %8
  %54 = load i32, i32* @m, align 4
  %55 = icmp sle i32 %.070, %54
  store i1 %55, i1* %4, align 1
  %56 = load i32, i32* @x.3, align 4
  %57 = load i32, i32* @y.4, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 1726973673, i32 1911997863
  br label %.backedge

65:                                               ; preds = %8
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %66 = select i1 %.0..0..0., i32 998715204, i32 -2012639360
  br label %.backedge

67:                                               ; preds = %8
  %68 = sext i32 %.074 to i64
  %69 = sext i32 %.070 to i64
  %70 = getelementptr inbounds [333 x [333 x i8]], [333 x [333 x i8]]* @mp, i64 0, i64 %68, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 35
  %73 = select i1 %72, i32 1171809219, i32 -751459477
  br label %.backedge

74:                                               ; preds = %8
  %75 = load i32, i32* @x.3, align 4
  %76 = load i32, i32* @y.4, align 4
  %77 = add i32 %75, -1
  %78 = mul i32 %77, %75
  %79 = and i32 %78, 1
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %81, %80
  %83 = select i1 %82, i32 -2113861184, i32 1021912854
  br label %.backedge

84:                                               ; preds = %8
  %85 = load i32, i32* @x.3, align 4
  %86 = load i32, i32* @y.4, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 -1348900332, i32 1021912854
  br label %.backedge

94:                                               ; preds = %8
  br label %.backedge

95:                                               ; preds = %8
  br label %.backedge

96:                                               ; preds = %8
  %97 = add i32 %.070, 1
  br label %.backedge

98:                                               ; preds = %8
  %99 = and i8 %.072, 1
  %.not86 = icmp eq i8 %99, 0
  %100 = select i1 %.not86, i32 -1349680513, i32 -1211721247
  br label %.backedge

101:                                              ; preds = %8
  %.not85 = icmp eq i32 %.076, 0
  %102 = select i1 %.not85, i32 -2002950641, i32 526115313
  br label %.backedge

103:                                              ; preds = %8
  %104 = sext i32 %.074 to i64
  %105 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %104, i64 0
  %106 = bitcast i32* %105 to i8*
  %107 = add i32 %.074, -1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %108, i64 0
  %110 = bitcast i32* %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(1332) %106, i8* noundef nonnull align 4 dereferenceable(1332) %110, i64 1332, i1 false)
  br label %.backedge

111:                                              ; preds = %8
  br label %.backedge

112:                                              ; preds = %8
  %.not84 = icmp eq i32 %.076, 0
  %113 = select i1 %.not84, i32 -921771375, i32 -929199215
  br label %.backedge

114:                                              ; preds = %8
  br label %.backedge

115:                                              ; preds = %8
  br label %.backedge

116:                                              ; preds = %8
  %117 = load i32, i32* @m, align 4
  %.not83 = icmp sgt i32 %.066, %117
  %118 = select i1 %.not83, i32 -1946933931, i32 942506644
  br label %.backedge

119:                                              ; preds = %8
  %120 = load i32, i32* @x.3, align 4
  %121 = load i32, i32* @y.4, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 909049438, i32 -495328979
  br label %.backedge

129:                                              ; preds = %8
  %130 = sext i32 %.074 to i64
  %131 = sext i32 %.066 to i64
  %132 = getelementptr inbounds [333 x [333 x i8]], [333 x [333 x i8]]* @mp, i64 0, i64 %130, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = icmp eq i8 %133, 35
  store i1 %134, i1* %3, align 1
  %135 = load i32, i32* @x.3, align 4
  %136 = load i32, i32* @y.4, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 -932967322, i32 -495328979
  br label %.backedge

144:                                              ; preds = %8
  %.0..0..0.55 = load volatile i1, i1* %3, align 1
  %145 = select i1 %.0..0..0.55, i32 -923139411, i32 -1728872377
  br label %.backedge

146:                                              ; preds = %8
  %147 = load i32, i32* @x.3, align 4
  %148 = load i32, i32* @y.4, align 4
  %149 = add i32 %147, -1
  %150 = mul i32 %149, %147
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 -974158585, i32 1673457712
  br label %.backedge

156:                                              ; preds = %8
  %157 = icmp ne i32 %.068, 0
  store i1 %157, i1* %2, align 1
  %158 = load i32, i32* @x.3, align 4
  %159 = load i32, i32* @y.4, align 4
  %160 = add i32 %158, -1
  %161 = mul i32 %160, %158
  %162 = and i32 %161, 1
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %164, %163
  %166 = select i1 %165, i32 -1479253327, i32 1673457712
  br label %.backedge

167:                                              ; preds = %8
  %.0..0..0.56 = load volatile i1, i1* %2, align 1
  %168 = select i1 %.0..0..0.56, i32 1805022496, i32 266524994
  br label %.backedge

169:                                              ; preds = %8
  br label %.backedge

170:                                              ; preds = %8
  %171 = load i32, i32* @tot, align 4
  %.neg82 = add i32 %171, -1
  store i32 %.neg82, i32* @tot, align 4
  %172 = sext i32 %.074 to i64
  %173 = sext i32 %.066 to i64
  %174 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %172, i64 %173
  store i32 %171, i32* %174, align 4
  br label %.backedge

175:                                              ; preds = %8
  %176 = sext i32 %.074 to i64
  %177 = add i32 %.066, -1
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %176, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %.066 to i64
  %182 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %176, i64 %181
  store i32 %180, i32* %182, align 4
  br label %.backedge

183:                                              ; preds = %8
  br label %.backedge

184:                                              ; preds = %8
  %.neg = add i32 %.066, 1
  br label %.backedge

185:                                              ; preds = %8
  %186 = add i32 %.068, -1
  br label %.backedge

187:                                              ; preds = %8
  %188 = icmp sgt i32 %.064, 0
  %189 = select i1 %188, i32 -889770035, i32 -309882491
  br label %.backedge

190:                                              ; preds = %8
  %191 = sext i32 %.074 to i64
  %192 = sext i32 %.068 to i64
  %193 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %191, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = sext i32 %.064 to i64
  %196 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %191, i64 %195
  store i32 %194, i32* %196, align 4
  br label %.backedge

197:                                              ; preds = %8
  %198 = add i32 %.064, -1
  br label %.backedge

199:                                              ; preds = %8
  br label %.backedge

200:                                              ; preds = %8
  br label %.backedge

201:                                              ; preds = %8
  %202 = add i32 %.074, 1
  br label %.backedge

203:                                              ; preds = %8
  %204 = add i32 %.076, -1
  br label %.backedge

205:                                              ; preds = %8
  %206 = load i32, i32* @x.3, align 4
  %207 = load i32, i32* @y.4, align 4
  %208 = add i32 %206, -1
  %209 = mul i32 %208, %206
  %210 = and i32 %209, 1
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %212, %211
  %214 = select i1 %213, i32 -83936438, i32 -239387980
  br label %.backedge

215:                                              ; preds = %8
  %216 = icmp sgt i32 %.062, 0
  store i1 %216, i1* %1, align 1
  %217 = load i32, i32* @x.3, align 4
  %218 = load i32, i32* @y.4, align 4
  %219 = add i32 %217, -1
  %220 = mul i32 %219, %217
  %221 = and i32 %220, 1
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %223, %222
  %225 = select i1 %224, i32 -1348911533, i32 -239387980
  br label %.backedge

226:                                              ; preds = %8
  %.0..0..0.57 = load volatile i1, i1* %1, align 1
  %227 = select i1 %.0..0..0.57, i32 -548715641, i32 -1338589587
  br label %.backedge

228:                                              ; preds = %8
  %229 = load i32, i32* @x.3, align 4
  %230 = load i32, i32* @y.4, align 4
  %231 = add i32 %229, -1
  %232 = mul i32 %231, %229
  %233 = and i32 %232, 1
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %235, %234
  %237 = select i1 %236, i32 -1940965924, i32 954450592
  br label %.backedge

238:                                              ; preds = %8
  %239 = sext i32 %.062 to i64
  %240 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %239, i64 0
  %241 = bitcast i32* %240 to i8*
  %242 = sext i32 %.076 to i64
  %243 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %242, i64 0
  %244 = bitcast i32* %243 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(1332) %241, i8* noundef nonnull align 4 dereferenceable(1332) %244, i64 1332, i1 false)
  %245 = load i32, i32* @x.3, align 4
  %246 = load i32, i32* @y.4, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 517196519, i32 954450592
  br label %.backedge

254:                                              ; preds = %8
  br label %.backedge

255:                                              ; preds = %8
  %256 = add i32 %.062, -1
  br label %.backedge

257:                                              ; preds = %8
  %258 = load i32, i32* @x.3, align 4
  %259 = load i32, i32* @y.4, align 4
  %260 = add i32 %258, -1
  %261 = mul i32 %260, %258
  %262 = and i32 %261, 1
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %264, %263
  %266 = select i1 %265, i32 2057636732, i32 -530869529
  br label %.backedge

267:                                              ; preds = %8
  %268 = load i32, i32* @x.3, align 4
  %269 = load i32, i32* @y.4, align 4
  %270 = add i32 %268, -1
  %271 = mul i32 %270, %268
  %272 = and i32 %271, 1
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %274, %273
  %276 = select i1 %275, i32 422786460, i32 -530869529
  br label %.backedge

277:                                              ; preds = %8
  br label %.backedge

278:                                              ; preds = %8
  %279 = load i32, i32* @n, align 4
  %.not81 = icmp sgt i32 %.060, %279
  %280 = select i1 %.not81, i32 -224673686, i32 1120277748
  br label %.backedge

281:                                              ; preds = %8
  br label %.backedge

282:                                              ; preds = %8
  %283 = load i32, i32* @m, align 4
  %.not = icmp sgt i32 %.058, %283
  %284 = select i1 %.not, i32 1354527239, i32 1648207904
  br label %.backedge

285:                                              ; preds = %8
  %286 = sext i32 %.060 to i64
  %287 = sext i32 %.058 to i64
  %288 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %286, i64 %287
  %289 = load i32, i32* %288, align 4
  %290 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %289)
  br label %.backedge

291:                                              ; preds = %8
  %292 = load i32, i32* @x.3, align 4
  %293 = load i32, i32* @y.4, align 4
  %294 = add i32 %292, -1
  %295 = mul i32 %294, %292
  %296 = and i32 %295, 1
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %298, %297
  %300 = select i1 %299, i32 -629268192, i32 -466350730
  br label %.backedge

301:                                              ; preds = %8
  %302 = add i32 %.058, 1
  %303 = load i32, i32* @x.3, align 4
  %304 = load i32, i32* @y.4, align 4
  %305 = add i32 %303, -1
  %306 = mul i32 %305, %303
  %307 = and i32 %306, 1
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %309, %308
  %311 = select i1 %310, i32 -1243382967, i32 -466350730
  br label %.backedge

312:                                              ; preds = %8
  br label %.backedge

313:                                              ; preds = %8
  %314 = load i32, i32* @x.3, align 4
  %315 = load i32, i32* @y.4, align 4
  %316 = add i32 %314, -1
  %317 = mul i32 %316, %314
  %318 = and i32 %317, 1
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %320, %319
  %322 = select i1 %321, i32 876865337, i32 -2011483730
  br label %.backedge

323:                                              ; preds = %8
  %putchar80 = tail call i32 @putchar(i32 10)
  %324 = load i32, i32* @x.3, align 4
  %325 = load i32, i32* @y.4, align 4
  %326 = add i32 %324, -1
  %327 = mul i32 %326, %324
  %328 = and i32 %327, 1
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %330, %329
  %332 = select i1 %331, i32 -1811255962, i32 -2011483730
  br label %.backedge

333:                                              ; preds = %8
  br label %.backedge

334:                                              ; preds = %8
  %335 = add i32 %.060, 1
  br label %.backedge

336:                                              ; preds = %8
  %337 = load i32, i32* @x.3, align 4
  %338 = load i32, i32* @y.4, align 4
  %339 = add i32 %337, -1
  %340 = mul i32 %339, %337
  %341 = and i32 %340, 1
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %343, %342
  %345 = select i1 %344, i32 -1585164875, i32 -77001319
  br label %.backedge

346:                                              ; preds = %8
  %347 = load i32, i32* @x.3, align 4
  %348 = load i32, i32* @y.4, align 4
  %349 = add i32 %347, -1
  %350 = mul i32 %349, %347
  %351 = and i32 %350, 1
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %353, %352
  %355 = select i1 %354, i32 -2118092014, i32 -77001319
  br label %.backedge

356:                                              ; preds = %8
  ret i32 0

357:                                              ; preds = %8
  %358 = sext i32 %.078 to i64
  %359 = getelementptr inbounds [333 x [333 x i8]], [333 x [333 x i8]]* @mp, i64 0, i64 %358, i64 1
  %360 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* nonnull %359)
  br label %.backedge

361:                                              ; preds = %8
  br label %.backedge

362:                                              ; preds = %8
  br label %.backedge

363:                                              ; preds = %8
  br label %.backedge

364:                                              ; preds = %8
  br label %.backedge

365:                                              ; preds = %8
  br label %.backedge

366:                                              ; preds = %8
  %367 = sext i32 %.062 to i64
  %368 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %367, i64 0
  %369 = bitcast i32* %368 to i8*
  %370 = sext i32 %.076 to i64
  %371 = getelementptr inbounds [333 x [333 x i32]], [333 x [333 x i32]]* @ans, i64 0, i64 %370, i64 0
  %372 = bitcast i32* %371 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(1332) %369, i8* noundef nonnull align 4 dereferenceable(1332) %372, i64 1332, i1 false)
  br label %.backedge

373:                                              ; preds = %8
  br label %.backedge

374:                                              ; preds = %8
  %375 = add i32 %.058, 1
  br label %.backedge

376:                                              ; preds = %8
  %putchar = tail call i32 @putchar(i32 10)
  br label %.backedge

377:                                              ; preds = %8
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z4readv() local_unnamed_addr #0 comdat {
  %1 = alloca i1, align 1
  %2 = alloca i32, align 4
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = tail call i32 @getchar()
  %6 = trunc i32 %5 to i8
  br label %7

7:                                                ; preds = %.backedge, %0
  %8 = phi i32 [ undef, %0 ], [ %.be, %.backedge ]
  %.031 = phi i32 [ 0, %0 ], [ %.031.be, %.backedge ]
  %.029 = phi i32 [ 1, %0 ], [ %.029.be, %.backedge ]
  %.027 = phi i8 [ %6, %0 ], [ %.027.be, %.backedge ]
  %.025 = phi i32 [ 1705101116, %0 ], [ %.025.be, %.backedge ]
  %.023 = phi i1 [ undef, %0 ], [ %.023.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.025, label %.backedge [
    i32 1705101116, label %9
    i32 -1038773711, label %12
    i32 -831384517, label %22
    i32 1926395900, label %33
    i32 -1802768687, label %34
    i32 -776495786, label %36
    i32 -720585677, label %39
    i32 -1932749327, label %40
    i32 -31382592, label %50
    i32 1386327872, label %62
    i32 2143785142, label %63
    i32 -1907845134, label %73
    i32 -294400843, label %83
    i32 -115914854, label %84
    i32 228759123, label %94
    i32 943437065, label %105
    i32 339810456, label %107
    i32 266013701, label %109
    i32 -154689963, label %119
    i32 -1417441286, label %129
    i32 868571636, label %131
    i32 270993580, label %141
    i32 29868980, label %156
    i32 -614378293, label %157
    i32 244823817, label %167
    i32 429861863, label %178
    i32 643465511, label %179
    i32 1771828802, label %180
    i32 -2112295682, label %183
    i32 74852557, label %184
    i32 1610461862, label %185
    i32 223940800, label %186
    i32 -63904776, label %192
  ]

.backedge:                                        ; preds = %7, %192, %186, %185, %184, %183, %180, %179, %167, %157, %156, %141, %131, %129, %119, %109, %107, %105, %94, %84, %83, %73, %63, %62, %50, %40, %39, %36, %34, %33, %22, %12, %9
  %.be = phi i32 [ %8, %7 ], [ %8, %192 ], [ %8, %186 ], [ %8, %185 ], [ %8, %184 ], [ %8, %183 ], [ %8, %180 ], [ %8, %179 ], [ %168, %167 ], [ %8, %157 ], [ %8, %156 ], [ %8, %141 ], [ %8, %131 ], [ %8, %129 ], [ %8, %119 ], [ %8, %109 ], [ %8, %107 ], [ %8, %105 ], [ %8, %94 ], [ %8, %84 ], [ %8, %83 ], [ %8, %73 ], [ %8, %63 ], [ %8, %62 ], [ %8, %50 ], [ %8, %40 ], [ %8, %39 ], [ %8, %36 ], [ %8, %34 ], [ %8, %33 ], [ %8, %22 ], [ %8, %12 ], [ %8, %9 ]
  %.031.be = phi i32 [ %.031, %7 ], [ %.031, %192 ], [ %189, %186 ], [ %.031, %185 ], [ %.031, %184 ], [ %.031, %183 ], [ %.031, %180 ], [ %.031, %179 ], [ %.031, %167 ], [ %.031, %157 ], [ %.031, %156 ], [ %144, %141 ], [ %.031, %131 ], [ %.031, %129 ], [ %.031, %119 ], [ %.031, %109 ], [ %.031, %107 ], [ %.031, %105 ], [ %.031, %94 ], [ %.031, %84 ], [ %.031, %83 ], [ %.031, %73 ], [ %.031, %63 ], [ %.031, %62 ], [ %.031, %50 ], [ %.031, %40 ], [ %.031, %39 ], [ %.031, %36 ], [ %.031, %34 ], [ %.031, %33 ], [ %.031, %22 ], [ %.031, %12 ], [ %.031, %9 ]
  %.029.be = phi i32 [ %.029, %7 ], [ %.029, %192 ], [ %.029, %186 ], [ %.029, %185 ], [ %.029, %184 ], [ %.029, %183 ], [ %.029, %180 ], [ %.029, %179 ], [ %.029, %167 ], [ %.029, %157 ], [ %.029, %156 ], [ %.029, %141 ], [ %.029, %131 ], [ %.029, %129 ], [ %.029, %119 ], [ %.029, %109 ], [ %.029, %107 ], [ %.029, %105 ], [ %.029, %94 ], [ %.029, %84 ], [ %.029, %83 ], [ %.029, %73 ], [ %.029, %63 ], [ %.029, %62 ], [ %.029, %50 ], [ %.029, %40 ], [ -1, %39 ], [ %.029, %36 ], [ %.029, %34 ], [ %.029, %33 ], [ %.029, %22 ], [ %.029, %12 ], [ %.029, %9 ]
  %.027.be = phi i8 [ %.027, %7 ], [ %.027, %192 ], [ %191, %186 ], [ %.027, %185 ], [ %.027, %184 ], [ %.027, %183 ], [ %182, %180 ], [ %.027, %179 ], [ %.027, %167 ], [ %.027, %157 ], [ %.027, %156 ], [ %146, %141 ], [ %.027, %131 ], [ %.027, %129 ], [ %.027, %119 ], [ %.027, %109 ], [ %.027, %107 ], [ %.027, %105 ], [ %.027, %94 ], [ %.027, %84 ], [ %.027, %83 ], [ %.027, %73 ], [ %.027, %63 ], [ %.027, %62 ], [ %52, %50 ], [ %.027, %40 ], [ %.027, %39 ], [ %.027, %36 ], [ %.027, %34 ], [ %.027, %33 ], [ %.027, %22 ], [ %.027, %12 ], [ %.027, %9 ]
  %.025.be = phi i32 [ %.025, %7 ], [ 244823817, %192 ], [ 270993580, %186 ], [ -154689963, %185 ], [ 228759123, %184 ], [ -1907845134, %183 ], [ -31382592, %180 ], [ -831384517, %179 ], [ %177, %167 ], [ %166, %157 ], [ -115914854, %156 ], [ %155, %141 ], [ %140, %131 ], [ %130, %129 ], [ %128, %119 ], [ %118, %109 ], [ 266013701, %107 ], [ %106, %105 ], [ %104, %94 ], [ %93, %84 ], [ -115914854, %83 ], [ %82, %73 ], [ %72, %63 ], [ 1705101116, %62 ], [ %61, %50 ], [ %49, %40 ], [ -1932749327, %39 ], [ %38, %36 ], [ %35, %34 ], [ -1802768687, %33 ], [ %32, %22 ], [ %21, %12 ], [ %11, %9 ]
  %.023.be = phi i1 [ %.023, %7 ], [ %.023, %192 ], [ %.023, %186 ], [ %.023, %185 ], [ %.023, %184 ], [ %.023, %183 ], [ %.023, %180 ], [ %.023, %179 ], [ %.023, %167 ], [ %.023, %157 ], [ %.023, %156 ], [ %.023, %141 ], [ %.023, %131 ], [ %.023, %129 ], [ %.023, %119 ], [ %.023, %109 ], [ %.023, %107 ], [ %.023, %105 ], [ %.023, %94 ], [ %.023, %84 ], [ %.023, %83 ], [ %.023, %73 ], [ %.023, %63 ], [ %.023, %62 ], [ %.023, %50 ], [ %.023, %40 ], [ %.023, %39 ], [ %.023, %36 ], [ %.023, %34 ], [ %.0..0..0.19, %33 ], [ %.023, %22 ], [ %.023, %12 ], [ true, %9 ]
  %.0.be = phi i1 [ %.0, %7 ], [ %.0, %192 ], [ %.0, %186 ], [ %.0, %185 ], [ %.0, %184 ], [ %.0, %183 ], [ %.0, %180 ], [ %.0, %179 ], [ %.0, %167 ], [ %.0, %157 ], [ %.0, %156 ], [ %.0, %141 ], [ %.0, %131 ], [ %.0, %129 ], [ %.0, %119 ], [ %.0, %109 ], [ %108, %107 ], [ false, %105 ], [ %.0, %94 ], [ %.0, %84 ], [ %.0, %83 ], [ %.0, %73 ], [ %.0, %63 ], [ %.0, %62 ], [ %.0, %50 ], [ %.0, %40 ], [ %.0, %39 ], [ %.0, %36 ], [ %.0, %34 ], [ %.0, %33 ], [ %.0, %22 ], [ %.0, %12 ], [ %.0, %9 ]
  br label %7

9:                                                ; preds = %7
  %10 = icmp slt i8 %.027, 48
  %11 = select i1 %10, i32 -1802768687, i32 -1038773711
  br label %.backedge

12:                                               ; preds = %7
  %13 = load i32, i32* @x.5, align 4
  %14 = load i32, i32* @y.6, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 -831384517, i32 643465511
  br label %.backedge

22:                                               ; preds = %7
  %23 = icmp sgt i8 %.027, 57
  store i1 %23, i1* %4, align 1
  %24 = load i32, i32* @x.5, align 4
  %25 = load i32, i32* @y.6, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 1926395900, i32 643465511
  br label %.backedge

33:                                               ; preds = %7
  %.0..0..0.19 = load volatile i1, i1* %4, align 1
  br label %.backedge

34:                                               ; preds = %7
  %35 = select i1 %.023, i32 -776495786, i32 2143785142
  br label %.backedge

36:                                               ; preds = %7
  %37 = icmp eq i8 %.027, 45
  %38 = select i1 %37, i32 -720585677, i32 -1932749327
  br label %.backedge

39:                                               ; preds = %7
  br label %.backedge

40:                                               ; preds = %7
  %41 = load i32, i32* @x.5, align 4
  %42 = load i32, i32* @y.6, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 -31382592, i32 1771828802
  br label %.backedge

50:                                               ; preds = %7
  %51 = tail call i32 @getchar()
  %52 = trunc i32 %51 to i8
  %53 = load i32, i32* @x.5, align 4
  %54 = load i32, i32* @y.6, align 4
  %55 = add i32 %53, -1
  %56 = mul i32 %55, %53
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %59, %58
  %61 = select i1 %60, i32 1386327872, i32 1771828802
  br label %.backedge

62:                                               ; preds = %7
  br label %.backedge

63:                                               ; preds = %7
  %64 = load i32, i32* @x.5, align 4
  %65 = load i32, i32* @y.6, align 4
  %66 = add i32 %64, -1
  %67 = mul i32 %66, %64
  %68 = and i32 %67, 1
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %70, %69
  %72 = select i1 %71, i32 -1907845134, i32 -2112295682
  br label %.backedge

73:                                               ; preds = %7
  %74 = load i32, i32* @x.5, align 4
  %75 = load i32, i32* @y.6, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 -294400843, i32 -2112295682
  br label %.backedge

83:                                               ; preds = %7
  br label %.backedge

84:                                               ; preds = %7
  %85 = load i32, i32* @x.5, align 4
  %86 = load i32, i32* @y.6, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 228759123, i32 74852557
  br label %.backedge

94:                                               ; preds = %7
  %95 = icmp sgt i8 %.027, 47
  store i1 %95, i1* %3, align 1
  %96 = load i32, i32* @x.5, align 4
  %97 = load i32, i32* @y.6, align 4
  %98 = add i32 %96, -1
  %99 = mul i32 %98, %96
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %102, %101
  %104 = select i1 %103, i32 943437065, i32 74852557
  br label %.backedge

105:                                              ; preds = %7
  %.0..0..0.20 = load volatile i1, i1* %3, align 1
  %106 = select i1 %.0..0..0.20, i32 339810456, i32 266013701
  br label %.backedge

107:                                              ; preds = %7
  %108 = icmp slt i8 %.027, 58
  br label %.backedge

109:                                              ; preds = %7
  store i1 %.0, i1* %1, align 1
  %110 = load i32, i32* @x.5, align 4
  %111 = load i32, i32* @y.6, align 4
  %112 = add i32 %110, -1
  %113 = mul i32 %112, %110
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %116, %115
  %118 = select i1 %117, i32 -154689963, i32 1610461862
  br label %.backedge

119:                                              ; preds = %7
  %120 = load i32, i32* @x.5, align 4
  %121 = load i32, i32* @y.6, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 -1417441286, i32 1610461862
  br label %.backedge

129:                                              ; preds = %7
  %.0..0..0.22 = load volatile i1, i1* %1, align 1
  %130 = select i1 %.0..0..0.22, i32 868571636, i32 -614378293
  br label %.backedge

131:                                              ; preds = %7
  %132 = load i32, i32* @x.5, align 4
  %133 = load i32, i32* @y.6, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 270993580, i32 223940800
  br label %.backedge

141:                                              ; preds = %7
  %.neg36 = mul i32 %.031, 10
  %142 = sext i8 %.027 to i32
  %143 = add i32 %.neg36, -48
  %144 = add i32 %143, %142
  %145 = tail call i32 @getchar()
  %146 = trunc i32 %145 to i8
  %147 = load i32, i32* @x.5, align 4
  %148 = load i32, i32* @y.6, align 4
  %149 = add i32 %147, -1
  %150 = mul i32 %149, %147
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 29868980, i32 223940800
  br label %.backedge

156:                                              ; preds = %7
  br label %.backedge

157:                                              ; preds = %7
  %158 = load i32, i32* @x.5, align 4
  %159 = load i32, i32* @y.6, align 4
  %160 = add i32 %158, -1
  %161 = mul i32 %160, %158
  %162 = and i32 %161, 1
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %164, %163
  %166 = select i1 %165, i32 244823817, i32 -63904776
  br label %.backedge

167:                                              ; preds = %7
  %168 = mul nsw i32 %.029, %.031
  %169 = load i32, i32* @x.5, align 4
  %170 = load i32, i32* @y.6, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 429861863, i32 -63904776
  br label %.backedge

178:                                              ; preds = %7
  store i32 %8, i32* %2, align 4
  %.0..0..0.21 = load volatile i32, i32* %2, align 4
  ret i32 %.0..0..0.21

179:                                              ; preds = %7
  br label %.backedge

180:                                              ; preds = %7
  %181 = tail call i32 @getchar()
  %182 = trunc i32 %181 to i8
  br label %.backedge

183:                                              ; preds = %7
  br label %.backedge

184:                                              ; preds = %7
  br label %.backedge

185:                                              ; preds = %7
  br label %.backedge

186:                                              ; preds = %7
  %.neg = mul i32 %.031, 10
  %187 = sext i8 %.027 to i32
  %188 = add i32 %.neg, -48
  %189 = add i32 %188, %187
  %190 = tail call i32 @getchar()
  %191 = trunc i32 %190 to i8
  br label %.backedge

192:                                              ; preds = %7
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s807526838.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.7, align 4
  %4 = load i32, i32* @y.8, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1429033818, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1429033818, label %11
    i32 780512348, label %14
    i32 602857990, label %24
    i32 1646750375, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 780512348, i32 1646750375
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.7, align 4
  %16 = load i32, i32* @y.8, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 602857990, i32 1646750375
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 780512348, %25 ]
  br label %.outer
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
