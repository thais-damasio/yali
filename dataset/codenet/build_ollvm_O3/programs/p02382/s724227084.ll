; ModuleID = 'build_ollvm/programs/p02382/s724227084.ll'
source_filename = "Project_CodeNet_C++1400/p02382/s724227084.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt5fixedRSt8ios_base = comdat any

$_ZSt12setprecisioni = comdat any

$_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_ = comdat any

$_ZStaNRSt13_Ios_FmtflagsS_ = comdat any

$_ZStcoSt13_Ios_Fmtflags = comdat any

$_ZStoRRSt13_Ios_FmtflagsS_ = comdat any

$_ZStanSt13_Ios_FmtflagsS_ = comdat any

$_ZStorSt13_Ios_FmtflagsS_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s724227084.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0
@x.15 = common local_unnamed_addr global i32 0
@y.16 = common local_unnamed_addr global i32 0
@x.17 = common local_unnamed_addr global i32 0
@y.18 = common local_unnamed_addr global i32 0
@x.19 = common local_unnamed_addr global i32 0
@y.20 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %6 = getelementptr i8, i8* %5, i64 -24
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %8
  %10 = bitcast i8* %9 to %"class.std::basic_ios"*
  %11 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %10, %"class.std::basic_ostream"* null)
  %12 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %13 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %4)
  %14 = load i32, i32* %4, align 4
  %15 = sext i32 %14 to i64
  %16 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %15, i64 4)
  %17 = extractvalue { i64, i1 } %16, 1
  %18 = extractvalue { i64, i1 } %16, 0
  %19 = select i1 %17, i64 -1, i64 %18
  %20 = call i8* @_Znam(i64 %19) #10
  %21 = bitcast i8* %20 to i32*
  %22 = call i8* @_Znam(i64 %19) #10
  %23 = bitcast i8* %22 to i32*
  br label %24

24:                                               ; preds = %.backedge, %0
  %.0105 = phi i32 [ 0, %0 ], [ %.0105.be, %.backedge ]
  %.0103 = phi i32 [ undef, %0 ], [ %.0103.be, %.backedge ]
  %.0101 = phi double [ undef, %0 ], [ %.0101.be, %.backedge ]
  %.099 = phi i32 [ undef, %0 ], [ %.099.be, %.backedge ]
  %.097 = phi double [ undef, %0 ], [ %.097.be, %.backedge ]
  %.095 = phi i32 [ undef, %0 ], [ %.095.be, %.backedge ]
  %.093 = phi i32 [ undef, %0 ], [ %.093.be, %.backedge ]
  %.091 = phi double [ undef, %0 ], [ %.091.be, %.backedge ]
  %.089 = phi i32 [ undef, %0 ], [ %.089.be, %.backedge ]
  %.087 = phi double [ undef, %0 ], [ %.087.be, %.backedge ]
  %.0 = phi i32 [ 506940642, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 506940642, label %25
    i32 -370569707, label %29
    i32 -805621936, label %33
    i32 261626799, label %35
    i32 1372619688, label %45
    i32 -1268350273, label %55
    i32 -800861625, label %56
    i32 2084414067, label %60
    i32 969435154, label %64
    i32 -2078512616, label %74
    i32 530831073, label %85
    i32 1066301505, label %86
    i32 -727321409, label %96
    i32 1491884789, label %106
    i32 -2044027603, label %107
    i32 -291390621, label %111
    i32 -1397008200, label %121
    i32 -118278756, label %123
    i32 1096036815, label %133
    i32 -2063037307, label %144
    i32 -1936056451, label %145
    i32 1186230135, label %155
    i32 -596787450, label %166
    i32 1238096187, label %167
    i32 954207747, label %177
    i32 -183568199, label %192
    i32 1278848492, label %193
    i32 -972466696, label %203
    i32 1336696091, label %215
    i32 19010341, label %217
    i32 698585359, label %227
    i32 1579776199, label %246
    i32 113946157, label %247
    i32 2058002197, label %257
    i32 261505798, label %268
    i32 -1425645316, label %269
    i32 -839933954, label %273
    i32 1706766920, label %283
    i32 -1850219494, label %295
    i32 -1998641796, label %297
    i32 -835730499, label %307
    i32 -1470951463, label %317
    i32 35819967, label %328
    i32 1805822611, label %329
    i32 -1017111874, label %339
    i32 37583471, label %352
    i32 -754334731, label %353
    i32 -1890890037, label %355
    i32 1524010605, label %359
    i32 830299934, label %363
    i32 -357807661, label %373
    i32 -1221797350, label %383
    i32 -554165407, label %394
    i32 -576547199, label %395
    i32 963723051, label %398
    i32 1780072150, label %399
    i32 -1284776018, label %400
    i32 -213893133, label %410
    i32 421737831, label %420
    i32 711624564, label %421
    i32 -1553099798, label %431
    i32 1338243222, label %443
    i32 -1034691958, label %444
    i32 523764942, label %445
    i32 2063269426, label %447
    i32 1564854822, label %448
    i32 864558042, label %450
    i32 1739927212, label %451
    i32 -303522731, label %457
    i32 -255706914, label %458
    i32 -1774154498, label %468
    i32 87656734, label %470
    i32 415892800, label %471
    i32 -1747606517, label %473
    i32 -2112403999, label %477
    i32 -1131845501, label %479
    i32 -812443452, label %481
  ]

.backedge:                                        ; preds = %24, %481, %479, %477, %473, %471, %470, %468, %458, %457, %451, %450, %448, %447, %445, %444, %431, %421, %420, %410, %400, %399, %398, %395, %394, %383, %373, %363, %359, %355, %353, %352, %339, %329, %328, %317, %307, %297, %295, %283, %273, %269, %268, %257, %247, %246, %227, %217, %215, %203, %193, %192, %177, %167, %166, %155, %145, %144, %133, %123, %121, %111, %107, %106, %96, %86, %85, %74, %64, %60, %56, %55, %45, %35, %33, %29, %25
  %.0105.be = phi i32 [ %.0105, %24 ], [ %.0105, %481 ], [ %.0105, %479 ], [ %.0105, %477 ], [ %.0105, %473 ], [ %.0105, %471 ], [ %.0105, %470 ], [ %.0105, %468 ], [ %.0105, %458 ], [ %.0105, %457 ], [ %.0105, %451 ], [ %.0105, %450 ], [ %.0105, %448 ], [ %.0105, %447 ], [ %.0105, %445 ], [ %.0105, %444 ], [ %.0105, %431 ], [ %.0105, %421 ], [ %.0105, %420 ], [ %.0105, %410 ], [ %.0105, %400 ], [ %.0105, %399 ], [ %.0105, %398 ], [ %.0105, %395 ], [ %.0105, %394 ], [ %.0105, %383 ], [ %.0105, %373 ], [ %.0105, %363 ], [ %.0105, %359 ], [ %.0105, %355 ], [ %.0105, %353 ], [ %.0105, %352 ], [ %.0105, %339 ], [ %.0105, %329 ], [ %.0105, %328 ], [ %.0105, %317 ], [ %.0105, %307 ], [ %.0105, %297 ], [ %.0105, %295 ], [ %.0105, %283 ], [ %.0105, %273 ], [ %.0105, %269 ], [ %.0105, %268 ], [ %.0105, %257 ], [ %.0105, %247 ], [ %.0105, %246 ], [ %.0105, %227 ], [ %.0105, %217 ], [ %.0105, %215 ], [ %.0105, %203 ], [ %.0105, %193 ], [ %.0105, %192 ], [ %.0105, %177 ], [ %.0105, %167 ], [ %.0105, %166 ], [ %.0105, %155 ], [ %.0105, %145 ], [ %.0105, %144 ], [ %.0105, %133 ], [ %.0105, %123 ], [ %.0105, %121 ], [ %.0105, %111 ], [ %.0105, %107 ], [ %.0105, %106 ], [ %.0105, %96 ], [ %.0105, %86 ], [ %.0105, %85 ], [ %.0105, %74 ], [ %.0105, %64 ], [ %.0105, %60 ], [ %.0105, %56 ], [ %.0105, %55 ], [ %.0105, %45 ], [ %.0105, %35 ], [ %34, %33 ], [ %.0105, %29 ], [ %.0105, %25 ]
  %.0103.be = phi i32 [ %.0103, %24 ], [ %.0103, %481 ], [ %.0103, %479 ], [ %.0103, %477 ], [ %.0103, %473 ], [ %.0103, %471 ], [ %.0103, %470 ], [ %.0103, %468 ], [ %.0103, %458 ], [ %.0103, %457 ], [ %.0103, %451 ], [ %.0103, %450 ], [ %.0103, %448 ], [ %.0103, %447 ], [ %446, %445 ], [ 0, %444 ], [ %.0103, %431 ], [ %.0103, %421 ], [ %.0103, %420 ], [ %.0103, %410 ], [ %.0103, %400 ], [ %.0103, %399 ], [ %.0103, %398 ], [ %.0103, %395 ], [ %.0103, %394 ], [ %.0103, %383 ], [ %.0103, %373 ], [ %.0103, %363 ], [ %.0103, %359 ], [ %.0103, %355 ], [ %.0103, %353 ], [ %.0103, %352 ], [ %.0103, %339 ], [ %.0103, %329 ], [ %.0103, %328 ], [ %.0103, %317 ], [ %.0103, %307 ], [ %.0103, %297 ], [ %.0103, %295 ], [ %.0103, %283 ], [ %.0103, %273 ], [ %.0103, %269 ], [ %.0103, %268 ], [ %.0103, %257 ], [ %.0103, %247 ], [ %.0103, %246 ], [ %.0103, %227 ], [ %.0103, %217 ], [ %.0103, %215 ], [ %.0103, %203 ], [ %.0103, %193 ], [ %.0103, %192 ], [ %.0103, %177 ], [ %.0103, %167 ], [ %.0103, %166 ], [ %.0103, %155 ], [ %.0103, %145 ], [ %.0103, %144 ], [ %.0103, %133 ], [ %.0103, %123 ], [ %.0103, %121 ], [ %.0103, %111 ], [ %.0103, %107 ], [ %.0103, %106 ], [ %.0103, %96 ], [ %.0103, %86 ], [ %.0103, %85 ], [ %75, %74 ], [ %.0103, %64 ], [ %.0103, %60 ], [ %.0103, %56 ], [ %.0103, %55 ], [ 0, %45 ], [ %.0103, %35 ], [ %.0103, %33 ], [ %.0103, %29 ], [ %.0103, %25 ]
  %.0101.be = phi double [ %.0101, %24 ], [ %.0101, %481 ], [ %.0101, %479 ], [ %.0101, %477 ], [ %476, %473 ], [ %.0101, %471 ], [ %.0101, %470 ], [ %.0101, %468 ], [ %467, %458 ], [ %.0101, %457 ], [ 0.000000e+00, %451 ], [ %.0101, %450 ], [ %449, %448 ], [ %.0101, %447 ], [ %.0101, %445 ], [ %.0101, %444 ], [ %.0101, %431 ], [ %.0101, %421 ], [ %.0101, %420 ], [ %.0101, %410 ], [ %.0101, %400 ], [ %.0101, %399 ], [ %.087, %398 ], [ %.0101, %395 ], [ %.0101, %394 ], [ %.0101, %383 ], [ %.0101, %373 ], [ %.0101, %363 ], [ %.0101, %359 ], [ 0.000000e+00, %355 ], [ %.0101, %353 ], [ %.0101, %352 ], [ %342, %339 ], [ %.0101, %329 ], [ %.0101, %328 ], [ %.0101, %317 ], [ %.0101, %307 ], [ %.0101, %297 ], [ %.0101, %295 ], [ %.0101, %283 ], [ %.0101, %273 ], [ 0.000000e+00, %269 ], [ %.0101, %268 ], [ %.0101, %257 ], [ %.0101, %247 ], [ %.0101, %246 ], [ %236, %227 ], [ %.0101, %217 ], [ %.0101, %215 ], [ %.0101, %203 ], [ %.0101, %193 ], [ %.0101, %192 ], [ 0.000000e+00, %177 ], [ %.0101, %167 ], [ %.0101, %166 ], [ %.0101, %155 ], [ %.0101, %145 ], [ %.0101, %144 ], [ %134, %133 ], [ %.0101, %123 ], [ %.0101, %121 ], [ %.0101, %111 ], [ %.0101, %107 ], [ %.0101, %106 ], [ %.0101, %96 ], [ %.0101, %86 ], [ %.0101, %85 ], [ %.0101, %74 ], [ %.0101, %64 ], [ %.0101, %60 ], [ %.0101, %56 ], [ %.0101, %55 ], [ %.0101, %45 ], [ %.0101, %35 ], [ %.0101, %33 ], [ %.0101, %29 ], [ %.0101, %25 ]
  %.099.be = phi i32 [ %.099, %24 ], [ %.099, %481 ], [ %.099, %479 ], [ %.099, %477 ], [ %.099, %473 ], [ %.099, %471 ], [ %.099, %470 ], [ %.099, %468 ], [ %.099, %458 ], [ %.099, %457 ], [ %.099, %451 ], [ %.neg, %450 ], [ %.099, %448 ], [ 0, %447 ], [ %.099, %445 ], [ %.099, %444 ], [ %.099, %431 ], [ %.099, %421 ], [ %.099, %420 ], [ %.099, %410 ], [ %.099, %400 ], [ %.099, %399 ], [ %.099, %398 ], [ %.099, %395 ], [ %.099, %394 ], [ %.099, %383 ], [ %.099, %373 ], [ %.099, %363 ], [ %.099, %359 ], [ %.099, %355 ], [ %.099, %353 ], [ %.099, %352 ], [ %.099, %339 ], [ %.099, %329 ], [ %.099, %328 ], [ %.099, %317 ], [ %.099, %307 ], [ %.099, %297 ], [ %.099, %295 ], [ %.099, %283 ], [ %.099, %273 ], [ %.099, %269 ], [ %.099, %268 ], [ %.099, %257 ], [ %.099, %247 ], [ %.099, %246 ], [ %.099, %227 ], [ %.099, %217 ], [ %.099, %215 ], [ %.099, %203 ], [ %.099, %193 ], [ %.099, %192 ], [ %.099, %177 ], [ %.099, %167 ], [ %.099, %166 ], [ %156, %155 ], [ %.099, %145 ], [ %.099, %144 ], [ %.099, %133 ], [ %.099, %123 ], [ %.099, %121 ], [ %.099, %111 ], [ %.099, %107 ], [ %.099, %106 ], [ 0, %96 ], [ %.099, %86 ], [ %.099, %85 ], [ %.099, %74 ], [ %.099, %64 ], [ %.099, %60 ], [ %.099, %56 ], [ %.099, %55 ], [ %.099, %45 ], [ %.099, %35 ], [ %.099, %33 ], [ %.099, %29 ], [ %.099, %25 ]
  %.097.be = phi double [ %.097, %24 ], [ %.097, %481 ], [ %.097, %479 ], [ %.097, %477 ], [ %.097, %473 ], [ %.097, %471 ], [ %.097, %470 ], [ %.097, %468 ], [ %.097, %458 ], [ %.097, %457 ], [ %.097, %451 ], [ %.097, %450 ], [ %.097, %448 ], [ %.097, %447 ], [ %.097, %445 ], [ %.097, %444 ], [ %.097, %431 ], [ %.097, %421 ], [ %.097, %420 ], [ %.097, %410 ], [ %.097, %400 ], [ %.097, %399 ], [ %.097, %398 ], [ %.097, %395 ], [ %.097, %394 ], [ %.097, %383 ], [ %.097, %373 ], [ %.097, %363 ], [ %.097, %359 ], [ %.097, %355 ], [ %.097, %353 ], [ %.097, %352 ], [ %.097, %339 ], [ %.097, %329 ], [ %.097, %328 ], [ %.097, %317 ], [ %.097, %307 ], [ %.097, %297 ], [ %.097, %295 ], [ %.097, %283 ], [ %.097, %273 ], [ %.097, %269 ], [ %.097, %268 ], [ %.097, %257 ], [ %.097, %247 ], [ %.097, %246 ], [ %.097, %227 ], [ %.097, %217 ], [ %.097, %215 ], [ %.097, %203 ], [ %.097, %193 ], [ %.097, %192 ], [ %.097, %177 ], [ %.097, %167 ], [ %.097, %166 ], [ %.097, %155 ], [ %.097, %145 ], [ %.097, %144 ], [ %.097, %133 ], [ %.097, %123 ], [ %122, %121 ], [ %118, %111 ], [ %.097, %107 ], [ %.097, %106 ], [ %.097, %96 ], [ %.097, %86 ], [ %.097, %85 ], [ %.097, %74 ], [ %.097, %64 ], [ %.097, %60 ], [ %.097, %56 ], [ %.097, %55 ], [ %.097, %45 ], [ %.097, %35 ], [ %.097, %33 ], [ %.097, %29 ], [ %.097, %25 ]
  %.095.be = phi i32 [ %.095, %24 ], [ %.095, %481 ], [ %.095, %479 ], [ %.095, %477 ], [ %.095, %473 ], [ %.095, %471 ], [ %.095, %470 ], [ %469, %468 ], [ %.095, %458 ], [ %.095, %457 ], [ 0, %451 ], [ %.095, %450 ], [ %.095, %448 ], [ %.095, %447 ], [ %.095, %445 ], [ %.095, %444 ], [ %.095, %431 ], [ %.095, %421 ], [ %.095, %420 ], [ %.095, %410 ], [ %.095, %400 ], [ %.095, %399 ], [ %.095, %398 ], [ %.095, %395 ], [ %.095, %394 ], [ %.095, %383 ], [ %.095, %373 ], [ %.095, %363 ], [ %.095, %359 ], [ %.095, %355 ], [ %.095, %353 ], [ %.095, %352 ], [ %.095, %339 ], [ %.095, %329 ], [ %.095, %328 ], [ %.095, %317 ], [ %.095, %307 ], [ %.095, %297 ], [ %.095, %295 ], [ %.095, %283 ], [ %.095, %273 ], [ %.095, %269 ], [ %.095, %268 ], [ %258, %257 ], [ %.095, %247 ], [ %.095, %246 ], [ %.095, %227 ], [ %.095, %217 ], [ %.095, %215 ], [ %.095, %203 ], [ %.095, %193 ], [ %.095, %192 ], [ 0, %177 ], [ %.095, %167 ], [ %.095, %166 ], [ %.095, %155 ], [ %.095, %145 ], [ %.095, %144 ], [ %.095, %133 ], [ %.095, %123 ], [ %.095, %121 ], [ %.095, %111 ], [ %.095, %107 ], [ %.095, %106 ], [ %.095, %96 ], [ %.095, %86 ], [ %.095, %85 ], [ %.095, %74 ], [ %.095, %64 ], [ %.095, %60 ], [ %.095, %56 ], [ %.095, %55 ], [ %.095, %45 ], [ %.095, %35 ], [ %.095, %33 ], [ %.095, %29 ], [ %.095, %25 ]
  %.093.be = phi i32 [ %.093, %24 ], [ %.093, %481 ], [ %.093, %479 ], [ %.093, %477 ], [ %.093, %473 ], [ %.093, %471 ], [ %.093, %470 ], [ %.093, %468 ], [ %.093, %458 ], [ %.093, %457 ], [ %.093, %451 ], [ %.093, %450 ], [ %.093, %448 ], [ %.093, %447 ], [ %.093, %445 ], [ %.093, %444 ], [ %.093, %431 ], [ %.093, %421 ], [ %.093, %420 ], [ %.093, %410 ], [ %.093, %400 ], [ %.093, %399 ], [ %.093, %398 ], [ %.093, %395 ], [ %.093, %394 ], [ %.093, %383 ], [ %.093, %373 ], [ %.093, %363 ], [ %.093, %359 ], [ %.093, %355 ], [ %354, %353 ], [ %.093, %352 ], [ %.093, %339 ], [ %.093, %329 ], [ %.093, %328 ], [ %.093, %317 ], [ %.093, %307 ], [ %.093, %297 ], [ %.093, %295 ], [ %.093, %283 ], [ %.093, %273 ], [ 0, %269 ], [ %.093, %268 ], [ %.093, %257 ], [ %.093, %247 ], [ %.093, %246 ], [ %.093, %227 ], [ %.093, %217 ], [ %.093, %215 ], [ %.093, %203 ], [ %.093, %193 ], [ %.093, %192 ], [ %.093, %177 ], [ %.093, %167 ], [ %.093, %166 ], [ %.093, %155 ], [ %.093, %145 ], [ %.093, %144 ], [ %.093, %133 ], [ %.093, %123 ], [ %.093, %121 ], [ %.093, %111 ], [ %.093, %107 ], [ %.093, %106 ], [ %.093, %96 ], [ %.093, %86 ], [ %.093, %85 ], [ %.093, %74 ], [ %.093, %64 ], [ %.093, %60 ], [ %.093, %56 ], [ %.093, %55 ], [ %.093, %45 ], [ %.093, %35 ], [ %.093, %33 ], [ %.093, %29 ], [ %.093, %25 ]
  %.091.be = phi double [ %.091, %24 ], [ %.091, %481 ], [ %.091, %479 ], [ %.091, %477 ], [ %.091, %473 ], [ %472, %471 ], [ %.091, %470 ], [ %.091, %468 ], [ %.091, %458 ], [ %.091, %457 ], [ %.091, %451 ], [ %.091, %450 ], [ %.091, %448 ], [ %.091, %447 ], [ %.091, %445 ], [ %.091, %444 ], [ %.091, %431 ], [ %.091, %421 ], [ %.091, %420 ], [ %.091, %410 ], [ %.091, %400 ], [ %.091, %399 ], [ %.091, %398 ], [ %.091, %395 ], [ %.091, %394 ], [ %.091, %383 ], [ %.091, %373 ], [ %.091, %363 ], [ %.091, %359 ], [ %.091, %355 ], [ %.091, %353 ], [ %.091, %352 ], [ %.091, %339 ], [ %.091, %329 ], [ %.091, %328 ], [ %318, %317 ], [ %.091, %307 ], [ %304, %297 ], [ %.091, %295 ], [ %.091, %283 ], [ %.091, %273 ], [ %.091, %269 ], [ %.091, %268 ], [ %.091, %257 ], [ %.091, %247 ], [ %.091, %246 ], [ %.091, %227 ], [ %.091, %217 ], [ %.091, %215 ], [ %.091, %203 ], [ %.091, %193 ], [ %.091, %192 ], [ %.091, %177 ], [ %.091, %167 ], [ %.091, %166 ], [ %.091, %155 ], [ %.091, %145 ], [ %.091, %144 ], [ %.091, %133 ], [ %.091, %123 ], [ %.091, %121 ], [ %.091, %111 ], [ %.091, %107 ], [ %.091, %106 ], [ %.091, %96 ], [ %.091, %86 ], [ %.091, %85 ], [ %.091, %74 ], [ %.091, %64 ], [ %.091, %60 ], [ %.091, %56 ], [ %.091, %55 ], [ %.091, %45 ], [ %.091, %35 ], [ %.091, %33 ], [ %.091, %29 ], [ %.091, %25 ]
  %.089.be = phi i32 [ %.089, %24 ], [ %.089, %481 ], [ %480, %479 ], [ %.089, %477 ], [ %.089, %473 ], [ %.089, %471 ], [ %.089, %470 ], [ %.089, %468 ], [ %.089, %458 ], [ %.089, %457 ], [ %.089, %451 ], [ %.089, %450 ], [ %.089, %448 ], [ %.089, %447 ], [ %.089, %445 ], [ %.089, %444 ], [ %.089, %431 ], [ %.089, %421 ], [ %.089, %420 ], [ %.neg107, %410 ], [ %.089, %400 ], [ %.089, %399 ], [ %.089, %398 ], [ %.089, %395 ], [ %.089, %394 ], [ %.089, %383 ], [ %.089, %373 ], [ %.089, %363 ], [ %.089, %359 ], [ 0, %355 ], [ %.089, %353 ], [ %.089, %352 ], [ %.089, %339 ], [ %.089, %329 ], [ %.089, %328 ], [ %.089, %317 ], [ %.089, %307 ], [ %.089, %297 ], [ %.089, %295 ], [ %.089, %283 ], [ %.089, %273 ], [ %.089, %269 ], [ %.089, %268 ], [ %.089, %257 ], [ %.089, %247 ], [ %.089, %246 ], [ %.089, %227 ], [ %.089, %217 ], [ %.089, %215 ], [ %.089, %203 ], [ %.089, %193 ], [ %.089, %192 ], [ %.089, %177 ], [ %.089, %167 ], [ %.089, %166 ], [ %.089, %155 ], [ %.089, %145 ], [ %.089, %144 ], [ %.089, %133 ], [ %.089, %123 ], [ %.089, %121 ], [ %.089, %111 ], [ %.089, %107 ], [ %.089, %106 ], [ %.089, %96 ], [ %.089, %86 ], [ %.089, %85 ], [ %.089, %74 ], [ %.089, %64 ], [ %.089, %60 ], [ %.089, %56 ], [ %.089, %55 ], [ %.089, %45 ], [ %.089, %35 ], [ %.089, %33 ], [ %.089, %29 ], [ %.089, %25 ]
  %.087.be = phi double [ %.087, %24 ], [ %.087, %481 ], [ %.087, %479 ], [ %478, %477 ], [ %.087, %473 ], [ %.087, %471 ], [ %.087, %470 ], [ %.087, %468 ], [ %.087, %458 ], [ %.087, %457 ], [ %.087, %451 ], [ %.087, %450 ], [ %.087, %448 ], [ %.087, %447 ], [ %.087, %445 ], [ %.087, %444 ], [ %.087, %431 ], [ %.087, %421 ], [ %.087, %420 ], [ %.087, %410 ], [ %.087, %400 ], [ %.087, %399 ], [ %.087, %398 ], [ %.087, %395 ], [ %.087, %394 ], [ %384, %383 ], [ %.087, %373 ], [ %370, %363 ], [ %.087, %359 ], [ %.087, %355 ], [ %.087, %353 ], [ %.087, %352 ], [ %.087, %339 ], [ %.087, %329 ], [ %.087, %328 ], [ %.087, %317 ], [ %.087, %307 ], [ %.087, %297 ], [ %.087, %295 ], [ %.087, %283 ], [ %.087, %273 ], [ %.087, %269 ], [ %.087, %268 ], [ %.087, %257 ], [ %.087, %247 ], [ %.087, %246 ], [ %.087, %227 ], [ %.087, %217 ], [ %.087, %215 ], [ %.087, %203 ], [ %.087, %193 ], [ %.087, %192 ], [ %.087, %177 ], [ %.087, %167 ], [ %.087, %166 ], [ %.087, %155 ], [ %.087, %145 ], [ %.087, %144 ], [ %.087, %133 ], [ %.087, %123 ], [ %.087, %121 ], [ %.087, %111 ], [ %.087, %107 ], [ %.087, %106 ], [ %.087, %96 ], [ %.087, %86 ], [ %.087, %85 ], [ %.087, %74 ], [ %.087, %64 ], [ %.087, %60 ], [ %.087, %56 ], [ %.087, %55 ], [ %.087, %45 ], [ %.087, %35 ], [ %.087, %33 ], [ %.087, %29 ], [ %.087, %25 ]
  %.0.be = phi i32 [ %.0, %24 ], [ -1553099798, %481 ], [ -213893133, %479 ], [ -1221797350, %477 ], [ -1017111874, %473 ], [ -1470951463, %471 ], [ 1706766920, %470 ], [ 2058002197, %468 ], [ 698585359, %458 ], [ -972466696, %457 ], [ 954207747, %451 ], [ 1186230135, %450 ], [ 1096036815, %448 ], [ -727321409, %447 ], [ -2078512616, %445 ], [ 1372619688, %444 ], [ %442, %431 ], [ %430, %421 ], [ 1524010605, %420 ], [ %419, %410 ], [ %409, %400 ], [ -1284776018, %399 ], [ 1780072150, %398 ], [ %397, %395 ], [ -576547199, %394 ], [ %393, %383 ], [ %382, %373 ], [ %372, %363 ], [ %362, %359 ], [ 1524010605, %355 ], [ -839933954, %353 ], [ -754334731, %352 ], [ %351, %339 ], [ %338, %329 ], [ 1805822611, %328 ], [ %327, %317 ], [ %316, %307 ], [ %306, %297 ], [ %296, %295 ], [ %294, %283 ], [ %282, %273 ], [ -839933954, %269 ], [ 1278848492, %268 ], [ %267, %257 ], [ %256, %247 ], [ 113946157, %246 ], [ %245, %227 ], [ %226, %217 ], [ %216, %215 ], [ %214, %203 ], [ %202, %193 ], [ 1278848492, %192 ], [ %191, %177 ], [ %176, %167 ], [ -2044027603, %166 ], [ %165, %155 ], [ %154, %145 ], [ -1936056451, %144 ], [ %143, %133 ], [ %132, %123 ], [ -118278756, %121 ], [ %120, %111 ], [ %110, %107 ], [ -2044027603, %106 ], [ %105, %96 ], [ %95, %86 ], [ -800861625, %85 ], [ %84, %74 ], [ %73, %64 ], [ 969435154, %60 ], [ %59, %56 ], [ -800861625, %55 ], [ %54, %45 ], [ %44, %35 ], [ 506940642, %33 ], [ -805621936, %29 ], [ %28, %25 ]
  br label %24

25:                                               ; preds = %24
  %26 = load i32, i32* %4, align 4
  %27 = icmp slt i32 %.0105, %26
  %28 = select i1 %27, i32 -370569707, i32 261626799
  br label %.backedge

29:                                               ; preds = %24
  %30 = sext i32 %.0105 to i64
  %31 = getelementptr inbounds i32, i32* %21, i64 %30
  %32 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* dereferenceable(4) %31)
  br label %.backedge

33:                                               ; preds = %24
  %34 = add i32 %.0105, 1
  br label %.backedge

35:                                               ; preds = %24
  %36 = load i32, i32* @x.1, align 4
  %37 = load i32, i32* @y.2, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 1372619688, i32 -1034691958
  br label %.backedge

45:                                               ; preds = %24
  %46 = load i32, i32* @x.1, align 4
  %47 = load i32, i32* @y.2, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -1268350273, i32 -1034691958
  br label %.backedge

55:                                               ; preds = %24
  br label %.backedge

56:                                               ; preds = %24
  %57 = load i32, i32* %4, align 4
  %58 = icmp slt i32 %.0103, %57
  %59 = select i1 %58, i32 2084414067, i32 1066301505
  br label %.backedge

60:                                               ; preds = %24
  %61 = sext i32 %.0103 to i64
  %62 = getelementptr inbounds i32, i32* %23, i64 %61
  %63 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* dereferenceable(4) %62)
  br label %.backedge

64:                                               ; preds = %24
  %65 = load i32, i32* @x.1, align 4
  %66 = load i32, i32* @y.2, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 -2078512616, i32 523764942
  br label %.backedge

74:                                               ; preds = %24
  %75 = add i32 %.0103, 1
  %76 = load i32, i32* @x.1, align 4
  %77 = load i32, i32* @y.2, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 530831073, i32 523764942
  br label %.backedge

85:                                               ; preds = %24
  br label %.backedge

86:                                               ; preds = %24
  %87 = load i32, i32* @x.1, align 4
  %88 = load i32, i32* @y.2, align 4
  %89 = add i32 %87, -1
  %90 = mul i32 %89, %87
  %91 = and i32 %90, 1
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %93, %92
  %95 = select i1 %94, i32 -727321409, i32 2063269426
  br label %.backedge

96:                                               ; preds = %24
  %97 = load i32, i32* @x.1, align 4
  %98 = load i32, i32* @y.2, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 1491884789, i32 2063269426
  br label %.backedge

106:                                              ; preds = %24
  br label %.backedge

107:                                              ; preds = %24
  %108 = load i32, i32* %4, align 4
  %109 = icmp slt i32 %.099, %108
  %110 = select i1 %109, i32 -291390621, i32 1238096187
  br label %.backedge

111:                                              ; preds = %24
  %112 = sext i32 %.099 to i64
  %113 = getelementptr inbounds i32, i32* %21, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds i32, i32* %23, i64 %112
  %116 = load i32, i32* %115, align 4
  %117 = sub i32 %114, %116
  %118 = sitofp i32 %117 to double
  %119 = icmp slt i32 %117, 0
  %120 = select i1 %119, i32 -1397008200, i32 -118278756
  br label %.backedge

121:                                              ; preds = %24
  %122 = fneg double %.097
  br label %.backedge

123:                                              ; preds = %24
  %124 = load i32, i32* @x.1, align 4
  %125 = load i32, i32* @y.2, align 4
  %126 = add i32 %124, -1
  %127 = mul i32 %126, %124
  %128 = and i32 %127, 1
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %130, %129
  %132 = select i1 %131, i32 1096036815, i32 1564854822
  br label %.backedge

133:                                              ; preds = %24
  %134 = fadd double %.0101, %.097
  %135 = load i32, i32* @x.1, align 4
  %136 = load i32, i32* @y.2, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 -2063037307, i32 1564854822
  br label %.backedge

144:                                              ; preds = %24
  br label %.backedge

145:                                              ; preds = %24
  %146 = load i32, i32* @x.1, align 4
  %147 = load i32, i32* @y.2, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 1186230135, i32 864558042
  br label %.backedge

155:                                              ; preds = %24
  %156 = add i32 %.099, 1
  %157 = load i32, i32* @x.1, align 4
  %158 = load i32, i32* @y.2, align 4
  %159 = add i32 %157, -1
  %160 = mul i32 %159, %157
  %161 = and i32 %160, 1
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %163, %162
  %165 = select i1 %164, i32 -596787450, i32 864558042
  br label %.backedge

166:                                              ; preds = %24
  br label %.backedge

167:                                              ; preds = %24
  %168 = load i32, i32* @x.1, align 4
  %169 = load i32, i32* @y.2, align 4
  %170 = add i32 %168, -1
  %171 = mul i32 %170, %168
  %172 = and i32 %171, 1
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %174, %173
  %176 = select i1 %175, i32 954207747, i32 1739927212
  br label %.backedge

177:                                              ; preds = %24
  %178 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSt8ios_baseS0_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::ios_base"* (%"class.std::ios_base"*)* nonnull @_ZSt5fixedRSt8ios_base)
  %179 = call i32 @_ZSt12setprecisioni(i32 6)
  %180 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St13_Setprecision(%"class.std::basic_ostream"* nonnull dereferenceable(272) %178, i32 %179)
  %181 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull %180, double %.0101)
  %182 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %181, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %183 = load i32, i32* @x.1, align 4
  %184 = load i32, i32* @y.2, align 4
  %185 = add i32 %183, -1
  %186 = mul i32 %185, %183
  %187 = and i32 %186, 1
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %189, %188
  %191 = select i1 %190, i32 -183568199, i32 1739927212
  br label %.backedge

192:                                              ; preds = %24
  br label %.backedge

193:                                              ; preds = %24
  %194 = load i32, i32* @x.1, align 4
  %195 = load i32, i32* @y.2, align 4
  %196 = add i32 %194, -1
  %197 = mul i32 %196, %194
  %198 = and i32 %197, 1
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %200, %199
  %202 = select i1 %201, i32 -972466696, i32 -303522731
  br label %.backedge

203:                                              ; preds = %24
  %204 = load i32, i32* %4, align 4
  %205 = icmp slt i32 %.095, %204
  store i1 %205, i1* %3, align 1
  %206 = load i32, i32* @x.1, align 4
  %207 = load i32, i32* @y.2, align 4
  %208 = add i32 %206, -1
  %209 = mul i32 %208, %206
  %210 = and i32 %209, 1
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %212, %211
  %214 = select i1 %213, i32 1336696091, i32 -303522731
  br label %.backedge

215:                                              ; preds = %24
  %.0..0..0.84 = load volatile i1, i1* %3, align 1
  %216 = select i1 %.0..0..0.84, i32 19010341, i32 -1425645316
  br label %.backedge

217:                                              ; preds = %24
  %218 = load i32, i32* @x.1, align 4
  %219 = load i32, i32* @y.2, align 4
  %220 = add i32 %218, -1
  %221 = mul i32 %220, %218
  %222 = and i32 %221, 1
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %224, %223
  %226 = select i1 %225, i32 698585359, i32 -255706914
  br label %.backedge

227:                                              ; preds = %24
  %228 = sext i32 %.095 to i64
  %229 = getelementptr inbounds i32, i32* %21, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds i32, i32* %23, i64 %228
  %232 = load i32, i32* %231, align 4
  %233 = sub i32 %230, %232
  %234 = mul nsw i32 %233, %233
  %235 = sitofp i32 %234 to double
  %236 = fadd double %.0101, %235
  %237 = load i32, i32* @x.1, align 4
  %238 = load i32, i32* @y.2, align 4
  %239 = add i32 %237, -1
  %240 = mul i32 %239, %237
  %241 = and i32 %240, 1
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %243, %242
  %245 = select i1 %244, i32 1579776199, i32 -255706914
  br label %.backedge

246:                                              ; preds = %24
  br label %.backedge

247:                                              ; preds = %24
  %248 = load i32, i32* @x.1, align 4
  %249 = load i32, i32* @y.2, align 4
  %250 = add i32 %248, -1
  %251 = mul i32 %250, %248
  %252 = and i32 %251, 1
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %254, %253
  %256 = select i1 %255, i32 2058002197, i32 -1774154498
  br label %.backedge

257:                                              ; preds = %24
  %258 = add i32 %.095, 1
  %259 = load i32, i32* @x.1, align 4
  %260 = load i32, i32* @y.2, align 4
  %261 = add i32 %259, -1
  %262 = mul i32 %261, %259
  %263 = and i32 %262, 1
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %265, %264
  %267 = select i1 %266, i32 261505798, i32 -1774154498
  br label %.backedge

268:                                              ; preds = %24
  br label %.backedge

269:                                              ; preds = %24
  %270 = call double @sqrt(double %.0101) #9
  %271 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %270)
  %272 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %271, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

273:                                              ; preds = %24
  %274 = load i32, i32* @x.1, align 4
  %275 = load i32, i32* @y.2, align 4
  %276 = add i32 %274, -1
  %277 = mul i32 %276, %274
  %278 = and i32 %277, 1
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %280, %279
  %282 = select i1 %281, i32 1706766920, i32 87656734
  br label %.backedge

283:                                              ; preds = %24
  %284 = load i32, i32* %4, align 4
  %285 = icmp slt i32 %.093, %284
  store i1 %285, i1* %2, align 1
  %286 = load i32, i32* @x.1, align 4
  %287 = load i32, i32* @y.2, align 4
  %288 = add i32 %286, -1
  %289 = mul i32 %288, %286
  %290 = and i32 %289, 1
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %292, %291
  %294 = select i1 %293, i32 -1850219494, i32 87656734
  br label %.backedge

295:                                              ; preds = %24
  %.0..0..0.85 = load volatile i1, i1* %2, align 1
  %296 = select i1 %.0..0..0.85, i32 -1998641796, i32 -1890890037
  br label %.backedge

297:                                              ; preds = %24
  %298 = sext i32 %.093 to i64
  %299 = getelementptr inbounds i32, i32* %21, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = getelementptr inbounds i32, i32* %23, i64 %298
  %302 = load i32, i32* %301, align 4
  %303 = sub i32 %300, %302
  %304 = sitofp i32 %303 to double
  %305 = icmp slt i32 %303, 0
  %306 = select i1 %305, i32 -835730499, i32 1805822611
  br label %.backedge

307:                                              ; preds = %24
  %308 = load i32, i32* @x.1, align 4
  %309 = load i32, i32* @y.2, align 4
  %310 = add i32 %308, -1
  %311 = mul i32 %310, %308
  %312 = and i32 %311, 1
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %314, %313
  %316 = select i1 %315, i32 -1470951463, i32 415892800
  br label %.backedge

317:                                              ; preds = %24
  %318 = fneg double %.091
  %319 = load i32, i32* @x.1, align 4
  %320 = load i32, i32* @y.2, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 35819967, i32 415892800
  br label %.backedge

328:                                              ; preds = %24
  br label %.backedge

329:                                              ; preds = %24
  %330 = load i32, i32* @x.1, align 4
  %331 = load i32, i32* @y.2, align 4
  %332 = add i32 %330, -1
  %333 = mul i32 %332, %330
  %334 = and i32 %333, 1
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %336, %335
  %338 = select i1 %337, i32 -1017111874, i32 -1747606517
  br label %.backedge

339:                                              ; preds = %24
  %340 = fmul double %.091, %.091
  %341 = fmul double %.091, %340
  %342 = fadd double %.0101, %341
  %343 = load i32, i32* @x.1, align 4
  %344 = load i32, i32* @y.2, align 4
  %345 = add i32 %343, -1
  %346 = mul i32 %345, %343
  %347 = and i32 %346, 1
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %349, %348
  %351 = select i1 %350, i32 37583471, i32 -1747606517
  br label %.backedge

352:                                              ; preds = %24
  br label %.backedge

353:                                              ; preds = %24
  %354 = add i32 %.093, 1
  br label %.backedge

355:                                              ; preds = %24
  %356 = call double @cbrt(double %.0101) #9
  %357 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %356)
  %358 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %357, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

359:                                              ; preds = %24
  %360 = load i32, i32* %4, align 4
  %361 = icmp slt i32 %.089, %360
  %362 = select i1 %361, i32 830299934, i32 711624564
  br label %.backedge

363:                                              ; preds = %24
  %364 = sext i32 %.089 to i64
  %365 = getelementptr inbounds i32, i32* %21, i64 %364
  %366 = load i32, i32* %365, align 4
  %367 = getelementptr inbounds i32, i32* %23, i64 %364
  %368 = load i32, i32* %367, align 4
  %369 = sub i32 %366, %368
  %370 = sitofp i32 %369 to double
  %371 = icmp slt i32 %369, 0
  %372 = select i1 %371, i32 -357807661, i32 -576547199
  br label %.backedge

373:                                              ; preds = %24
  %374 = load i32, i32* @x.1, align 4
  %375 = load i32, i32* @y.2, align 4
  %376 = add i32 %374, -1
  %377 = mul i32 %376, %374
  %378 = and i32 %377, 1
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %380, %379
  %382 = select i1 %381, i32 -1221797350, i32 -2112403999
  br label %.backedge

383:                                              ; preds = %24
  %384 = fneg double %.087
  %385 = load i32, i32* @x.1, align 4
  %386 = load i32, i32* @y.2, align 4
  %387 = add i32 %385, -1
  %388 = mul i32 %387, %385
  %389 = and i32 %388, 1
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %391, %390
  %393 = select i1 %392, i32 -554165407, i32 -2112403999
  br label %.backedge

394:                                              ; preds = %24
  br label %.backedge

395:                                              ; preds = %24
  %396 = fcmp olt double %.0101, %.087
  %397 = select i1 %396, i32 963723051, i32 1780072150
  br label %.backedge

398:                                              ; preds = %24
  br label %.backedge

399:                                              ; preds = %24
  br label %.backedge

400:                                              ; preds = %24
  %401 = load i32, i32* @x.1, align 4
  %402 = load i32, i32* @y.2, align 4
  %403 = add i32 %401, -1
  %404 = mul i32 %403, %401
  %405 = and i32 %404, 1
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %407, %406
  %409 = select i1 %408, i32 -213893133, i32 -1131845501
  br label %.backedge

410:                                              ; preds = %24
  %.neg107 = add i32 %.089, 1
  %411 = load i32, i32* @x.1, align 4
  %412 = load i32, i32* @y.2, align 4
  %413 = add i32 %411, -1
  %414 = mul i32 %413, %411
  %415 = and i32 %414, 1
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %417, %416
  %419 = select i1 %418, i32 421737831, i32 -1131845501
  br label %.backedge

420:                                              ; preds = %24
  br label %.backedge

421:                                              ; preds = %24
  %422 = load i32, i32* @x.1, align 4
  %423 = load i32, i32* @y.2, align 4
  %424 = add i32 %422, -1
  %425 = mul i32 %424, %422
  %426 = and i32 %425, 1
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %428, %427
  %430 = select i1 %429, i32 -1553099798, i32 -812443452
  br label %.backedge

431:                                              ; preds = %24
  %432 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %.0101)
  %433 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %432, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  %434 = load i32, i32* @x.1, align 4
  %435 = load i32, i32* @y.2, align 4
  %436 = add i32 %434, -1
  %437 = mul i32 %436, %434
  %438 = and i32 %437, 1
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %440, %439
  %442 = select i1 %441, i32 1338243222, i32 -812443452
  br label %.backedge

443:                                              ; preds = %24
  %.0..0..0.86 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.86

444:                                              ; preds = %24
  br label %.backedge

445:                                              ; preds = %24
  %446 = add i32 %.0103, 1
  br label %.backedge

447:                                              ; preds = %24
  br label %.backedge

448:                                              ; preds = %24
  %449 = fadd double %.0101, %.097
  br label %.backedge

450:                                              ; preds = %24
  %.neg = add i32 %.099, 1
  br label %.backedge

451:                                              ; preds = %24
  %452 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSt8ios_baseS0_E(%"class.std::basic_ostream"* nonnull @_ZSt4cout, %"class.std::ios_base"* (%"class.std::ios_base"*)* nonnull @_ZSt5fixedRSt8ios_base)
  %453 = call i32 @_ZSt12setprecisioni(i32 6)
  %454 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St13_Setprecision(%"class.std::basic_ostream"* nonnull dereferenceable(272) %452, i32 %453)
  %455 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull %454, double %.0101)
  %456 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %455, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

457:                                              ; preds = %24
  br label %.backedge

458:                                              ; preds = %24
  %459 = sext i32 %.095 to i64
  %460 = getelementptr inbounds i32, i32* %21, i64 %459
  %461 = load i32, i32* %460, align 4
  %462 = getelementptr inbounds i32, i32* %23, i64 %459
  %463 = load i32, i32* %462, align 4
  %464 = sub i32 %461, %463
  %465 = mul nsw i32 %464, %464
  %466 = sitofp i32 %465 to double
  %467 = fadd double %.0101, %466
  br label %.backedge

468:                                              ; preds = %24
  %469 = add i32 %.095, 1
  br label %.backedge

470:                                              ; preds = %24
  br label %.backedge

471:                                              ; preds = %24
  %472 = fneg double %.091
  br label %.backedge

473:                                              ; preds = %24
  %474 = fmul double %.091, %.091
  %475 = fmul double %.091, %474
  %476 = fadd double %.0101, %475
  br label %.backedge

477:                                              ; preds = %24
  %478 = fneg double %.087
  br label %.backedge

479:                                              ; preds = %24
  %480 = add i32 %.089, 1
  br label %.backedge

481:                                              ; preds = %24
  %482 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %.0101)
  %483 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %482, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  br label %.backedge
}

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) local_unnamed_addr #1

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: nobuiltin
declare noalias i8* @_Znam(i64) local_unnamed_addr #6

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St13_Setprecision(%"class.std::basic_ostream"* dereferenceable(272), i32) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSt8ios_baseS0_E(%"class.std::basic_ostream"*, %"class.std::ios_base"* (%"class.std::ios_base"*)*) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(216) %"class.std::ios_base"* @_ZSt5fixedRSt8ios_base(%"class.std::ios_base"* dereferenceable(216) %0) #0 comdat {
  %2 = alloca %"class.std::ios_base"*, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.3, align 4
  %6 = load i32, i32* @y.4, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.0.ph = phi i32 [ 559873827, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %12

12:                                               ; preds = %.outer, %12
  switch i32 %.0.ph, label %12 [
    i32 559873827, label %13
    i32 -1938293166, label %16
    i32 1634704639, label %27
    i32 -2018032144, label %28
  ]

13:                                               ; preds = %12
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %14 = or i1 %.0..0..0., %.0..0..0.1
  %15 = select i1 %14, i32 -1938293166, i32 -2018032144
  br label %.outer.backedge

16:                                               ; preds = %12
  %17 = tail call i32 @_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_(%"class.std::ios_base"* nonnull %0, i32 4, i32 260)
  %18 = load i32, i32* @x.3, align 4
  %19 = load i32, i32* @y.4, align 4
  %20 = add i32 %18, -1
  %21 = mul i32 %20, %18
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %24, %23
  %26 = select i1 %25, i32 1634704639, i32 -2018032144
  br label %.outer.backedge

27:                                               ; preds = %12
  store %"class.std::ios_base"* %0, %"class.std::ios_base"** %2, align 8
  %.0..0..0.2 = load volatile %"class.std::ios_base"*, %"class.std::ios_base"** %2, align 8
  ret %"class.std::ios_base"* %.0..0..0.2

28:                                               ; preds = %12
  %29 = tail call i32 @_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_(%"class.std::ios_base"* nonnull %0, i32 4, i32 260)
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %28, %16, %13
  %.0.ph.be = phi i32 [ %15, %13 ], [ %26, %16 ], [ -1938293166, %28 ]
  br label %.outer
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZSt12setprecisioni(i32 %0) local_unnamed_addr #7 comdat {
  ret i32 %0
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"*, double) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @sqrt(double) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @cbrt(double) local_unnamed_addr #8

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_ZNSt8ios_base4setfESt13_Ios_FmtflagsS0_(%"class.std::ios_base"* %0, i32 %1, i32 %2) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = load i32, i32* @x.7, align 4
  %8 = load i32, i32* @y.8, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %6, align 1
  %13 = icmp slt i32 %8, 10
  store i1 %13, i1* %5, align 1
  %14 = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i64 0, i32 3
  br label %.outer

.outer:                                           ; preds = %19, %3
  %.ph = phi i32 [ %20, %19 ], [ undef, %3 ]
  %.0.ph = phi i32 [ %33, %19 ], [ 1903661645, %3 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %15

15:                                               ; preds = %.outer3, %15
  switch i32 %.0.ph4, label %15 [
    i32 1903661645, label %16
    i32 -849489590, label %19
    i32 201014090, label %34
    i32 -1229110753, label %35
  ]

16:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %6, align 1
  %.0..0..0.1 = load volatile i1, i1* %5, align 1
  %17 = or i1 %.0..0..0., %.0..0..0.1
  %18 = select i1 %17, i32 -849489590, i32 -1229110753
  br label %.outer3.backedge

19:                                               ; preds = %15
  %20 = load i32, i32* %14, align 8
  %21 = tail call i32 @_ZStcoSt13_Ios_Fmtflags(i32 %2)
  %22 = tail call dereferenceable(4) i32* @_ZStaNRSt13_Ios_FmtflagsS_(i32* nonnull dereferenceable(4) %14, i32 %21)
  %23 = tail call i32 @_ZStanSt13_Ios_FmtflagsS_(i32 %1, i32 %2)
  %24 = tail call dereferenceable(4) i32* @_ZStoRRSt13_Ios_FmtflagsS_(i32* nonnull dereferenceable(4) %14, i32 %23)
  %25 = load i32, i32* @x.7, align 4
  %26 = load i32, i32* @y.8, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 201014090, i32 -1229110753
  br label %.outer

34:                                               ; preds = %15
  store i32 %.ph, i32* %4, align 4
  %.0..0..0.2 = load volatile i32, i32* %4, align 4
  ret i32 %.0..0..0.2

35:                                               ; preds = %15
  %36 = tail call i32 @_ZStcoSt13_Ios_Fmtflags(i32 %2)
  %37 = tail call dereferenceable(4) i32* @_ZStaNRSt13_Ios_FmtflagsS_(i32* nonnull dereferenceable(4) %14, i32 %36)
  %38 = tail call i32 @_ZStanSt13_Ios_FmtflagsS_(i32 %1, i32 %2)
  %39 = tail call dereferenceable(4) i32* @_ZStoRRSt13_Ios_FmtflagsS_(i32* nonnull dereferenceable(4) %14, i32 %38)
  br label %.outer3.backedge

.outer3.backedge:                                 ; preds = %35, %16
  %.0.ph4.be = phi i32 [ %18, %16 ], [ -849489590, %35 ]
  br label %.outer3
}

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(4) i32* @_ZStaNRSt13_Ios_FmtflagsS_(i32* dereferenceable(4) %0, i32 %1) local_unnamed_addr #0 comdat {
  %3 = alloca i32*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = load i32, i32* @x.9, align 4
  %7 = load i32, i32* @y.10, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %5, align 1
  %12 = icmp slt i32 %7, 10
  store i1 %12, i1* %4, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ 1023658292, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %13

13:                                               ; preds = %.outer, %13
  switch i32 %.0.ph, label %13 [
    i32 1023658292, label %14
    i32 -829477992, label %17
    i32 1841042442, label %29
    i32 -1106653628, label %30
  ]

14:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %.0..0..0.1 = load volatile i1, i1* %4, align 1
  %15 = or i1 %.0..0..0., %.0..0..0.1
  %16 = select i1 %15, i32 -829477992, i32 -1106653628
  br label %.outer.backedge

17:                                               ; preds = %13
  %18 = load i32, i32* %0, align 4
  %19 = tail call i32 @_ZStanSt13_Ios_FmtflagsS_(i32 %18, i32 %1)
  store i32* %0, i32** %3, align 8
  %.0..0..0.2 = load volatile i32*, i32** %3, align 8
  store i32 %19, i32* %.0..0..0.2, align 4
  %20 = load i32, i32* @x.9, align 4
  %21 = load i32, i32* @y.10, align 4
  %22 = add i32 %20, -1
  %23 = mul i32 %22, %20
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %26, %25
  %28 = select i1 %27, i32 1841042442, i32 -1106653628
  br label %.outer.backedge

29:                                               ; preds = %13
  %.0..0..0.3 = load volatile i32*, i32** %3, align 8
  ret i32* %.0..0..0.3

30:                                               ; preds = %13
  %31 = load i32, i32* %0, align 4
  %32 = tail call i32 @_ZStanSt13_Ios_FmtflagsS_(i32 %31, i32 %1)
  store i32 %32, i32* %0, align 4
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %30, %17, %14
  %.0.ph.be = phi i32 [ %16, %14 ], [ %28, %17 ], [ -829477992, %30 ]
  br label %.outer
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZStcoSt13_Ios_Fmtflags(i32 %0) local_unnamed_addr #7 comdat {
  %2 = xor i32 %0, -1
  ret i32 %2
}

; Function Attrs: noinline uwtable
define linkonce_odr dereferenceable(4) i32* @_ZStoRRSt13_Ios_FmtflagsS_(i32* dereferenceable(4) %0, i32 %1) local_unnamed_addr #0 comdat {
  %3 = alloca i32*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = load i32, i32* @x.13, align 4
  %7 = load i32, i32* @y.14, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %5, align 1
  %12 = icmp slt i32 %7, 10
  store i1 %12, i1* %4, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ -1799358709, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %13

13:                                               ; preds = %.outer, %13
  switch i32 %.0.ph, label %13 [
    i32 -1799358709, label %14
    i32 -901424636, label %17
    i32 1393334962, label %29
    i32 1498022175, label %30
  ]

14:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %.0..0..0.1 = load volatile i1, i1* %4, align 1
  %15 = or i1 %.0..0..0., %.0..0..0.1
  %16 = select i1 %15, i32 -901424636, i32 1498022175
  br label %.outer.backedge

17:                                               ; preds = %13
  %18 = load i32, i32* %0, align 4
  %19 = tail call i32 @_ZStorSt13_Ios_FmtflagsS_(i32 %18, i32 %1)
  store i32* %0, i32** %3, align 8
  %.0..0..0.2 = load volatile i32*, i32** %3, align 8
  store i32 %19, i32* %.0..0..0.2, align 4
  %20 = load i32, i32* @x.13, align 4
  %21 = load i32, i32* @y.14, align 4
  %22 = add i32 %20, -1
  %23 = mul i32 %22, %20
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %26, %25
  %28 = select i1 %27, i32 1393334962, i32 1498022175
  br label %.outer.backedge

29:                                               ; preds = %13
  %.0..0..0.3 = load volatile i32*, i32** %3, align 8
  ret i32* %.0..0..0.3

30:                                               ; preds = %13
  %31 = load i32, i32* %0, align 4
  %32 = tail call i32 @_ZStorSt13_Ios_FmtflagsS_(i32 %31, i32 %1)
  store i32 %32, i32* %0, align 4
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %30, %17, %14
  %.0.ph.be = phi i32 [ %16, %14 ], [ %28, %17 ], [ -901424636, %30 ]
  br label %.outer
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZStanSt13_Ios_FmtflagsS_(i32 %0, i32 %1) local_unnamed_addr #7 comdat {
  %.demorgan = and i32 %1, %0
  ret i32 %.demorgan
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZStorSt13_Ios_FmtflagsS_(i32 %0, i32 %1) local_unnamed_addr #7 comdat {
  %3 = alloca i32, align 4
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = load i32, i32* @x.17, align 4
  %7 = load i32, i32* @y.18, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %5, align 1
  %12 = icmp slt i32 %7, 10
  store i1 %12, i1* %4, align 1
  %13 = or i1 %12, %11
  %14 = select i1 %13, i32 1610888688, i32 -131449816
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ 599730530, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %15

15:                                               ; preds = %.outer, %15
  switch i32 %.0.ph, label %15 [
    i32 599730530, label %16
    i32 600461835, label %.outer.backedge
    i32 1610888688, label %19
    i32 -131449816, label %21
  ]

16:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %.0..0..0.1 = load volatile i1, i1* %4, align 1
  %17 = or i1 %.0..0..0., %.0..0..0.1
  %18 = select i1 %17, i32 600461835, i32 -131449816
  br label %.outer.backedge

19:                                               ; preds = %15
  %20 = or i32 %1, %0
  store i32 %20, i32* %3, align 4
  %.0..0..0.2 = load volatile i32, i32* %3, align 4
  ret i32 %.0..0..0.2

21:                                               ; preds = %15
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %15, %21, %16
  %.0.ph.be = phi i32 [ %18, %16 ], [ 600461835, %21 ], [ %14, %15 ]
  br label %.outer
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s724227084.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #6 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { mustprogress nofree nounwind willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
