; ModuleID = 'build_ollvm/programs/p02382/s579395783.ll'
source_filename = "Project_CodeNet_C++1400/p02382/s579395783.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@.str = private unnamed_addr constant [21 x i8] c"%5lf\0A%5lf\0A%5lf\0A%5lf\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s579395783.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %4)
  %6 = load i32, i32* %4, align 4
  %7 = zext i32 %6 to i64
  %8 = alloca i32, i64 %7, align 16
  %9 = alloca i32, i64 %7, align 16
  br label %10

10:                                               ; preds = %.backedge, %0
  %.093 = phi double [ 0.000000e+00, %0 ], [ %.093.be, %.backedge ]
  %.091 = phi double [ 0.000000e+00, %0 ], [ %.091.be, %.backedge ]
  %.089 = phi double [ 0.000000e+00, %0 ], [ %.089.be, %.backedge ]
  %.087 = phi double [ 0.000000e+00, %0 ], [ %.087.be, %.backedge ]
  %.085 = phi i32 [ 0, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i32 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i32 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i32 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i32 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.0 = phi i32 [ -459914624, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -459914624, label %11
    i32 1253985794, label %21
    i32 -205076497, label %33
    i32 157942574, label %35
    i32 379808330, label %39
    i32 606225136, label %49
    i32 2073251747, label %59
    i32 1654189110, label %60
    i32 534443915, label %61
    i32 1016181419, label %65
    i32 -1949881149, label %69
    i32 -991806473, label %71
    i32 -1979423559, label %72
    i32 361771869, label %76
    i32 2092095114, label %85
    i32 -551797544, label %94
    i32 2018865763, label %103
    i32 -449440308, label %104
    i32 -1520762214, label %106
    i32 958217997, label %107
    i32 -1739793992, label %111
    i32 -264126184, label %121
    i32 1881088227, label %131
    i32 1353486803, label %141
    i32 -420345002, label %142
    i32 1280550819, label %152
    i32 -1623682032, label %163
    i32 -1137497320, label %164
    i32 -753195275, label %168
    i32 -862630922, label %178
    i32 628119719, label %195
    i32 -1401235625, label %197
    i32 -1857033751, label %206
    i32 -1150242059, label %216
    i32 -1328355037, label %234
    i32 -300879253, label %235
    i32 -1086625115, label %236
    i32 -884934611, label %238
    i32 -446948409, label %248
    i32 -1658151493, label %259
    i32 -1222262690, label %260
    i32 -496536539, label %264
    i32 -1274409235, label %274
    i32 -1490703968, label %291
    i32 -365413321, label %293
    i32 1640212472, label %303
    i32 -1392679866, label %313
    i32 -1947456083, label %330
    i32 -597425783, label %331
    i32 -15608051, label %332
    i32 2053792921, label %342
    i32 927785484, label %352
    i32 -407335471, label %369
    i32 -1296782155, label %370
    i32 -105169758, label %371
    i32 661178600, label %381
    i32 355940953, label %391
    i32 536897713, label %392
    i32 629639148, label %402
    i32 -222097385, label %413
    i32 1244203882, label %414
    i32 1140654438, label %416
    i32 1283493802, label %417
    i32 1094378661, label %419
    i32 -1728394783, label %421
    i32 -1208030251, label %423
    i32 -449174874, label %424
    i32 -159113438, label %433
    i32 657586006, label %435
    i32 -473641833, label %436
    i32 41583437, label %444
    i32 753312980, label %452
    i32 1714185584, label %453
  ]

.backedge:                                        ; preds = %10, %453, %452, %444, %436, %435, %433, %424, %423, %421, %419, %417, %416, %413, %402, %392, %391, %381, %371, %370, %369, %352, %342, %332, %331, %330, %313, %303, %293, %291, %274, %264, %260, %259, %248, %238, %236, %235, %234, %216, %206, %197, %195, %178, %168, %164, %163, %152, %142, %141, %131, %121, %111, %107, %106, %104, %103, %94, %85, %76, %72, %71, %69, %65, %61, %60, %59, %49, %39, %35, %33, %21, %11
  %.093.be = phi double [ %.093, %10 ], [ %.093, %453 ], [ %.093, %452 ], [ %.093, %444 ], [ %.093, %436 ], [ %.093, %435 ], [ %.093, %433 ], [ %.093, %424 ], [ %.093, %423 ], [ %.093, %421 ], [ %.093, %419 ], [ %.093, %417 ], [ %.093, %416 ], [ %.093, %413 ], [ %.093, %402 ], [ %.093, %392 ], [ %.093, %391 ], [ %.093, %381 ], [ %.093, %371 ], [ %.093, %370 ], [ %.093, %369 ], [ %.093, %352 ], [ %.093, %342 ], [ %.093, %332 ], [ %.093, %331 ], [ %.093, %330 ], [ %.093, %313 ], [ %.093, %303 ], [ %.093, %293 ], [ %.093, %291 ], [ %.093, %274 ], [ %.093, %264 ], [ %.093, %260 ], [ %.093, %259 ], [ %.093, %248 ], [ %.093, %238 ], [ %.093, %236 ], [ %.093, %235 ], [ %.093, %234 ], [ %.093, %216 ], [ %.093, %206 ], [ %.093, %197 ], [ %.093, %195 ], [ %.093, %178 ], [ %.093, %168 ], [ %.093, %164 ], [ %.093, %163 ], [ %.093, %152 ], [ %.093, %142 ], [ %.093, %141 ], [ %.093, %131 ], [ %.093, %121 ], [ %.093, %111 ], [ %.093, %107 ], [ %.093, %106 ], [ %.093, %104 ], [ %.093, %103 ], [ %102, %94 ], [ %93, %85 ], [ %.093, %76 ], [ %.093, %72 ], [ %.093, %71 ], [ %.093, %69 ], [ %.093, %65 ], [ %.093, %61 ], [ %.093, %60 ], [ %.093, %59 ], [ %.093, %49 ], [ %.093, %39 ], [ %.093, %35 ], [ %.093, %33 ], [ %.093, %21 ], [ %.093, %11 ]
  %.091.be = phi double [ %.091, %10 ], [ %.091, %453 ], [ %.091, %452 ], [ %.091, %444 ], [ %.091, %436 ], [ %.091, %435 ], [ %.091, %433 ], [ %.091, %424 ], [ %.091, %423 ], [ %422, %421 ], [ %.091, %419 ], [ %.091, %417 ], [ %.091, %416 ], [ %.091, %413 ], [ %.091, %402 ], [ %.091, %392 ], [ %.091, %391 ], [ %.091, %381 ], [ %.091, %371 ], [ %.091, %370 ], [ %.091, %369 ], [ %.091, %352 ], [ %.091, %342 ], [ %.091, %332 ], [ %.091, %331 ], [ %.091, %330 ], [ %.091, %313 ], [ %.091, %303 ], [ %.091, %293 ], [ %.091, %291 ], [ %.091, %274 ], [ %.091, %264 ], [ %.091, %260 ], [ %.091, %259 ], [ %.091, %248 ], [ %.091, %238 ], [ %.091, %236 ], [ %.091, %235 ], [ %.091, %234 ], [ %.091, %216 ], [ %.091, %206 ], [ %.091, %197 ], [ %.091, %195 ], [ %.091, %178 ], [ %.091, %168 ], [ %.091, %164 ], [ %.091, %163 ], [ %153, %152 ], [ %.091, %142 ], [ %.091, %141 ], [ %.091, %131 ], [ %.091, %121 ], [ %120, %111 ], [ %.091, %107 ], [ %.091, %106 ], [ %.091, %104 ], [ %.091, %103 ], [ %.091, %94 ], [ %.091, %85 ], [ %.091, %76 ], [ %.091, %72 ], [ %.091, %71 ], [ %.091, %69 ], [ %.091, %65 ], [ %.091, %61 ], [ %.091, %60 ], [ %.091, %59 ], [ %.091, %49 ], [ %.091, %39 ], [ %.091, %35 ], [ %.091, %33 ], [ %.091, %21 ], [ %.091, %11 ]
  %.089.be = phi double [ %.089, %10 ], [ %.089, %453 ], [ %.089, %452 ], [ %.089, %444 ], [ %.089, %436 ], [ %.089, %435 ], [ %434, %433 ], [ %432, %424 ], [ %.089, %423 ], [ %.089, %421 ], [ %.089, %419 ], [ %.089, %417 ], [ %.089, %416 ], [ %.089, %413 ], [ %.089, %402 ], [ %.089, %392 ], [ %.089, %391 ], [ %.089, %381 ], [ %.089, %371 ], [ %.089, %370 ], [ %.089, %369 ], [ %.089, %352 ], [ %.089, %342 ], [ %.089, %332 ], [ %.089, %331 ], [ %.089, %330 ], [ %.089, %313 ], [ %.089, %303 ], [ %.089, %293 ], [ %.089, %291 ], [ %.089, %274 ], [ %.089, %264 ], [ %.089, %260 ], [ %.089, %259 ], [ %249, %248 ], [ %.089, %238 ], [ %.089, %236 ], [ %.089, %235 ], [ %.089, %234 ], [ %224, %216 ], [ %.089, %206 ], [ %205, %197 ], [ %.089, %195 ], [ %.089, %178 ], [ %.089, %168 ], [ %.089, %164 ], [ %.089, %163 ], [ %.089, %152 ], [ %.089, %142 ], [ %.089, %141 ], [ %.089, %131 ], [ %.089, %121 ], [ %.089, %111 ], [ %.089, %107 ], [ %.089, %106 ], [ %.089, %104 ], [ %.089, %103 ], [ %.089, %94 ], [ %.089, %85 ], [ %.089, %76 ], [ %.089, %72 ], [ %.089, %71 ], [ %.089, %69 ], [ %.089, %65 ], [ %.089, %61 ], [ %.089, %60 ], [ %.089, %59 ], [ %.089, %49 ], [ %.089, %39 ], [ %.089, %35 ], [ %.089, %33 ], [ %.089, %21 ], [ %.089, %11 ]
  %.087.be = phi double [ %.087, %10 ], [ %.087, %453 ], [ %.087, %452 ], [ %451, %444 ], [ %443, %436 ], [ %.087, %435 ], [ %.087, %433 ], [ %.087, %424 ], [ %.087, %423 ], [ %.087, %421 ], [ %.087, %419 ], [ %.087, %417 ], [ %.087, %416 ], [ %.087, %413 ], [ %.087, %402 ], [ %.087, %392 ], [ %.087, %391 ], [ %.087, %381 ], [ %.087, %371 ], [ %.087, %370 ], [ %.087, %369 ], [ %359, %352 ], [ %.087, %342 ], [ %.087, %332 ], [ %.087, %331 ], [ %.087, %330 ], [ %320, %313 ], [ %.087, %303 ], [ %.087, %293 ], [ %.087, %291 ], [ %.087, %274 ], [ %.087, %264 ], [ %.087, %260 ], [ %.087, %259 ], [ %.087, %248 ], [ %.087, %238 ], [ %.087, %236 ], [ %.087, %235 ], [ %.087, %234 ], [ %.087, %216 ], [ %.087, %206 ], [ %.087, %197 ], [ %.087, %195 ], [ %.087, %178 ], [ %.087, %168 ], [ %.087, %164 ], [ %.087, %163 ], [ %.087, %152 ], [ %.087, %142 ], [ %.087, %141 ], [ %.087, %131 ], [ %.087, %121 ], [ %.087, %111 ], [ %.087, %107 ], [ %.087, %106 ], [ %.087, %104 ], [ %.087, %103 ], [ %.087, %94 ], [ %.087, %85 ], [ %.087, %76 ], [ %.087, %72 ], [ %.087, %71 ], [ %.087, %69 ], [ %.087, %65 ], [ %.087, %61 ], [ %.087, %60 ], [ %.087, %59 ], [ %.087, %49 ], [ %.087, %39 ], [ %.087, %35 ], [ %.087, %33 ], [ %.087, %21 ], [ %.087, %11 ]
  %.085.be = phi i32 [ %.085, %10 ], [ %.085, %453 ], [ %.085, %452 ], [ %.085, %444 ], [ %.085, %436 ], [ %.085, %435 ], [ %.085, %433 ], [ %.085, %424 ], [ %.085, %423 ], [ %.085, %421 ], [ %.085, %419 ], [ %418, %417 ], [ %.085, %416 ], [ %.085, %413 ], [ %.085, %402 ], [ %.085, %392 ], [ %.085, %391 ], [ %.085, %381 ], [ %.085, %371 ], [ %.085, %370 ], [ %.085, %369 ], [ %.085, %352 ], [ %.085, %342 ], [ %.085, %332 ], [ %.085, %331 ], [ %.085, %330 ], [ %.085, %313 ], [ %.085, %303 ], [ %.085, %293 ], [ %.085, %291 ], [ %.085, %274 ], [ %.085, %264 ], [ %.085, %260 ], [ %.085, %259 ], [ %.085, %248 ], [ %.085, %238 ], [ %.085, %236 ], [ %.085, %235 ], [ %.085, %234 ], [ %.085, %216 ], [ %.085, %206 ], [ %.085, %197 ], [ %.085, %195 ], [ %.085, %178 ], [ %.085, %168 ], [ %.085, %164 ], [ %.085, %163 ], [ %.085, %152 ], [ %.085, %142 ], [ %.085, %141 ], [ %.085, %131 ], [ %.085, %121 ], [ %.085, %111 ], [ %.085, %107 ], [ %.085, %106 ], [ %.085, %104 ], [ %.085, %103 ], [ %.085, %94 ], [ %.085, %85 ], [ %.085, %76 ], [ %.085, %72 ], [ %.085, %71 ], [ %.085, %69 ], [ %.085, %65 ], [ %.085, %61 ], [ %.085, %60 ], [ %.085, %59 ], [ %.neg96, %49 ], [ %.085, %39 ], [ %.085, %35 ], [ %.085, %33 ], [ %.085, %21 ], [ %.085, %11 ]
  %.083.be = phi i32 [ %.083, %10 ], [ %.083, %453 ], [ %.083, %452 ], [ %.083, %444 ], [ %.083, %436 ], [ %.083, %435 ], [ %.083, %433 ], [ %.083, %424 ], [ %.083, %423 ], [ %.083, %421 ], [ %.083, %419 ], [ %.083, %417 ], [ %.083, %416 ], [ %.083, %413 ], [ %.083, %402 ], [ %.083, %392 ], [ %.083, %391 ], [ %.083, %381 ], [ %.083, %371 ], [ %.083, %370 ], [ %.083, %369 ], [ %.083, %352 ], [ %.083, %342 ], [ %.083, %332 ], [ %.083, %331 ], [ %.083, %330 ], [ %.083, %313 ], [ %.083, %303 ], [ %.083, %293 ], [ %.083, %291 ], [ %.083, %274 ], [ %.083, %264 ], [ %.083, %260 ], [ %.083, %259 ], [ %.083, %248 ], [ %.083, %238 ], [ %.083, %236 ], [ %.083, %235 ], [ %.083, %234 ], [ %.083, %216 ], [ %.083, %206 ], [ %.083, %197 ], [ %.083, %195 ], [ %.083, %178 ], [ %.083, %168 ], [ %.083, %164 ], [ %.083, %163 ], [ %.083, %152 ], [ %.083, %142 ], [ %.083, %141 ], [ %.083, %131 ], [ %.083, %121 ], [ %.083, %111 ], [ %.083, %107 ], [ %.083, %106 ], [ %.083, %104 ], [ %.083, %103 ], [ %.083, %94 ], [ %.083, %85 ], [ %.083, %76 ], [ %.083, %72 ], [ %.083, %71 ], [ %70, %69 ], [ %.083, %65 ], [ %.083, %61 ], [ 0, %60 ], [ %.083, %59 ], [ %.083, %49 ], [ %.083, %39 ], [ %.083, %35 ], [ %.083, %33 ], [ %.083, %21 ], [ %.083, %11 ]
  %.081.be = phi i32 [ %.081, %10 ], [ %.081, %453 ], [ %.081, %452 ], [ %.081, %444 ], [ %.081, %436 ], [ %.081, %435 ], [ %.081, %433 ], [ %.081, %424 ], [ %.081, %423 ], [ %.081, %421 ], [ %.081, %419 ], [ %.081, %417 ], [ %.081, %416 ], [ %.081, %413 ], [ %.081, %402 ], [ %.081, %392 ], [ %.081, %391 ], [ %.081, %381 ], [ %.081, %371 ], [ %.081, %370 ], [ %.081, %369 ], [ %.081, %352 ], [ %.081, %342 ], [ %.081, %332 ], [ %.081, %331 ], [ %.081, %330 ], [ %.081, %313 ], [ %.081, %303 ], [ %.081, %293 ], [ %.081, %291 ], [ %.081, %274 ], [ %.081, %264 ], [ %.081, %260 ], [ %.081, %259 ], [ %.081, %248 ], [ %.081, %238 ], [ %.081, %236 ], [ %.081, %235 ], [ %.081, %234 ], [ %.081, %216 ], [ %.081, %206 ], [ %.081, %197 ], [ %.081, %195 ], [ %.081, %178 ], [ %.081, %168 ], [ %.081, %164 ], [ %.081, %163 ], [ %.081, %152 ], [ %.081, %142 ], [ %.081, %141 ], [ %.081, %131 ], [ %.081, %121 ], [ %.081, %111 ], [ %.081, %107 ], [ %.081, %106 ], [ %105, %104 ], [ %.081, %103 ], [ %.081, %94 ], [ %.081, %85 ], [ %.081, %76 ], [ %.081, %72 ], [ 0, %71 ], [ %.081, %69 ], [ %.081, %65 ], [ %.081, %61 ], [ %.081, %60 ], [ %.081, %59 ], [ %.081, %49 ], [ %.081, %39 ], [ %.081, %35 ], [ %.081, %33 ], [ %.081, %21 ], [ %.081, %11 ]
  %.079.be = phi i32 [ %.079, %10 ], [ %.079, %453 ], [ %.079, %452 ], [ %.079, %444 ], [ %.079, %436 ], [ %.079, %435 ], [ %.079, %433 ], [ %.079, %424 ], [ %.079, %423 ], [ %.079, %421 ], [ %420, %419 ], [ %.079, %417 ], [ %.079, %416 ], [ %.079, %413 ], [ %.079, %402 ], [ %.079, %392 ], [ %.079, %391 ], [ %.079, %381 ], [ %.079, %371 ], [ %.079, %370 ], [ %.079, %369 ], [ %.079, %352 ], [ %.079, %342 ], [ %.079, %332 ], [ %.079, %331 ], [ %.079, %330 ], [ %.079, %313 ], [ %.079, %303 ], [ %.079, %293 ], [ %.079, %291 ], [ %.079, %274 ], [ %.079, %264 ], [ %.079, %260 ], [ %.079, %259 ], [ %.079, %248 ], [ %.079, %238 ], [ %.079, %236 ], [ %.079, %235 ], [ %.079, %234 ], [ %.079, %216 ], [ %.079, %206 ], [ %.079, %197 ], [ %.079, %195 ], [ %.079, %178 ], [ %.079, %168 ], [ %.079, %164 ], [ %.079, %163 ], [ %.079, %152 ], [ %.079, %142 ], [ %.079, %141 ], [ %.neg95, %131 ], [ %.079, %121 ], [ %.079, %111 ], [ %.079, %107 ], [ 0, %106 ], [ %.079, %104 ], [ %.079, %103 ], [ %.079, %94 ], [ %.079, %85 ], [ %.079, %76 ], [ %.079, %72 ], [ %.079, %71 ], [ %.079, %69 ], [ %.079, %65 ], [ %.079, %61 ], [ %.079, %60 ], [ %.079, %59 ], [ %.079, %49 ], [ %.079, %39 ], [ %.079, %35 ], [ %.079, %33 ], [ %.079, %21 ], [ %.079, %11 ]
  %.077.be = phi i32 [ %.077, %10 ], [ %.077, %453 ], [ %.077, %452 ], [ %.077, %444 ], [ %.077, %436 ], [ %.077, %435 ], [ %.077, %433 ], [ %.077, %424 ], [ %.077, %423 ], [ 0, %421 ], [ %.077, %419 ], [ %.077, %417 ], [ %.077, %416 ], [ %.077, %413 ], [ %.077, %402 ], [ %.077, %392 ], [ %.077, %391 ], [ %.077, %381 ], [ %.077, %371 ], [ %.077, %370 ], [ %.077, %369 ], [ %.077, %352 ], [ %.077, %342 ], [ %.077, %332 ], [ %.077, %331 ], [ %.077, %330 ], [ %.077, %313 ], [ %.077, %303 ], [ %.077, %293 ], [ %.077, %291 ], [ %.077, %274 ], [ %.077, %264 ], [ %.077, %260 ], [ %.077, %259 ], [ %.077, %248 ], [ %.077, %238 ], [ %237, %236 ], [ %.077, %235 ], [ %.077, %234 ], [ %.077, %216 ], [ %.077, %206 ], [ %.077, %197 ], [ %.077, %195 ], [ %.077, %178 ], [ %.077, %168 ], [ %.077, %164 ], [ %.077, %163 ], [ 0, %152 ], [ %.077, %142 ], [ %.077, %141 ], [ %.077, %131 ], [ %.077, %121 ], [ %.077, %111 ], [ %.077, %107 ], [ %.077, %106 ], [ %.077, %104 ], [ %.077, %103 ], [ %.077, %94 ], [ %.077, %85 ], [ %.077, %76 ], [ %.077, %72 ], [ %.077, %71 ], [ %.077, %69 ], [ %.077, %65 ], [ %.077, %61 ], [ %.077, %60 ], [ %.077, %59 ], [ %.077, %49 ], [ %.077, %39 ], [ %.077, %35 ], [ %.077, %33 ], [ %.077, %21 ], [ %.077, %11 ]
  %.075.be = phi i32 [ %.075, %10 ], [ %.neg, %453 ], [ %.075, %452 ], [ %.075, %444 ], [ %.075, %436 ], [ %.075, %435 ], [ 0, %433 ], [ %.075, %424 ], [ %.075, %423 ], [ %.075, %421 ], [ %.075, %419 ], [ %.075, %417 ], [ %.075, %416 ], [ %.075, %413 ], [ %403, %402 ], [ %.075, %392 ], [ %.075, %391 ], [ %.075, %381 ], [ %.075, %371 ], [ %.075, %370 ], [ %.075, %369 ], [ %.075, %352 ], [ %.075, %342 ], [ %.075, %332 ], [ %.075, %331 ], [ %.075, %330 ], [ %.075, %313 ], [ %.075, %303 ], [ %.075, %293 ], [ %.075, %291 ], [ %.075, %274 ], [ %.075, %264 ], [ %.075, %260 ], [ %.075, %259 ], [ 0, %248 ], [ %.075, %238 ], [ %.075, %236 ], [ %.075, %235 ], [ %.075, %234 ], [ %.075, %216 ], [ %.075, %206 ], [ %.075, %197 ], [ %.075, %195 ], [ %.075, %178 ], [ %.075, %168 ], [ %.075, %164 ], [ %.075, %163 ], [ %.075, %152 ], [ %.075, %142 ], [ %.075, %141 ], [ %.075, %131 ], [ %.075, %121 ], [ %.075, %111 ], [ %.075, %107 ], [ %.075, %106 ], [ %.075, %104 ], [ %.075, %103 ], [ %.075, %94 ], [ %.075, %85 ], [ %.075, %76 ], [ %.075, %72 ], [ %.075, %71 ], [ %.075, %69 ], [ %.075, %65 ], [ %.075, %61 ], [ %.075, %60 ], [ %.075, %59 ], [ %.075, %49 ], [ %.075, %39 ], [ %.075, %35 ], [ %.075, %33 ], [ %.075, %21 ], [ %.075, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ 629639148, %453 ], [ 661178600, %452 ], [ 927785484, %444 ], [ -1392679866, %436 ], [ -1274409235, %435 ], [ -446948409, %433 ], [ -1150242059, %424 ], [ -862630922, %423 ], [ 1280550819, %421 ], [ 1881088227, %419 ], [ 606225136, %417 ], [ 1253985794, %416 ], [ -1222262690, %413 ], [ %412, %402 ], [ %401, %392 ], [ 536897713, %391 ], [ %390, %381 ], [ %380, %371 ], [ -105169758, %370 ], [ -1296782155, %369 ], [ %368, %352 ], [ %351, %342 ], [ %341, %332 ], [ -105169758, %331 ], [ -597425783, %330 ], [ %329, %313 ], [ %312, %303 ], [ %302, %293 ], [ %292, %291 ], [ %290, %274 ], [ %273, %264 ], [ %263, %260 ], [ -1222262690, %259 ], [ %258, %248 ], [ %247, %238 ], [ -1137497320, %236 ], [ -1086625115, %235 ], [ -300879253, %234 ], [ %233, %216 ], [ %215, %206 ], [ -300879253, %197 ], [ %196, %195 ], [ %194, %178 ], [ %177, %168 ], [ %167, %164 ], [ -1137497320, %163 ], [ %162, %152 ], [ %151, %142 ], [ 958217997, %141 ], [ %140, %131 ], [ %130, %121 ], [ -264126184, %111 ], [ %110, %107 ], [ 958217997, %106 ], [ -1979423559, %104 ], [ -449440308, %103 ], [ 2018865763, %94 ], [ 2018865763, %85 ], [ %84, %76 ], [ %75, %72 ], [ -1979423559, %71 ], [ 534443915, %69 ], [ -1949881149, %65 ], [ %64, %61 ], [ 534443915, %60 ], [ -459914624, %59 ], [ %58, %49 ], [ %48, %39 ], [ 379808330, %35 ], [ %34, %33 ], [ %32, %21 ], [ %20, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = load i32, i32* @x.1, align 4
  %13 = load i32, i32* @y.2, align 4
  %14 = add i32 %12, -1
  %15 = mul i32 %14, %12
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %18, %17
  %20 = select i1 %19, i32 1253985794, i32 1140654438
  br label %.backedge

21:                                               ; preds = %10
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %.085, %22
  store i1 %23, i1* %3, align 1
  %24 = load i32, i32* @x.1, align 4
  %25 = load i32, i32* @y.2, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 -205076497, i32 1140654438
  br label %.backedge

33:                                               ; preds = %10
  %.0..0..0.72 = load volatile i1, i1* %3, align 1
  %34 = select i1 %.0..0..0.72, i32 157942574, i32 1654189110
  br label %.backedge

35:                                               ; preds = %10
  %36 = sext i32 %.085 to i64
  %37 = getelementptr inbounds i32, i32* %8, i64 %36
  %38 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %37)
  br label %.backedge

39:                                               ; preds = %10
  %40 = load i32, i32* @x.1, align 4
  %41 = load i32, i32* @y.2, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 606225136, i32 1283493802
  br label %.backedge

49:                                               ; preds = %10
  %.neg96 = add i32 %.085, 1
  %50 = load i32, i32* @x.1, align 4
  %51 = load i32, i32* @y.2, align 4
  %52 = add i32 %50, -1
  %53 = mul i32 %52, %50
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %56, %55
  %58 = select i1 %57, i32 2073251747, i32 1283493802
  br label %.backedge

59:                                               ; preds = %10
  br label %.backedge

60:                                               ; preds = %10
  br label %.backedge

61:                                               ; preds = %10
  %62 = load i32, i32* %4, align 4
  %63 = icmp slt i32 %.083, %62
  %64 = select i1 %63, i32 1016181419, i32 -991806473
  br label %.backedge

65:                                               ; preds = %10
  %66 = sext i32 %.083 to i64
  %67 = getelementptr inbounds i32, i32* %9, i64 %66
  %68 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %67)
  br label %.backedge

69:                                               ; preds = %10
  %70 = add i32 %.083, 1
  br label %.backedge

71:                                               ; preds = %10
  br label %.backedge

72:                                               ; preds = %10
  %73 = load i32, i32* %4, align 4
  %74 = icmp slt i32 %.081, %73
  %75 = select i1 %74, i32 361771869, i32 -1520762214
  br label %.backedge

76:                                               ; preds = %10
  %77 = sext i32 %.081 to i64
  %78 = getelementptr inbounds i32, i32* %8, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds i32, i32* %9, i64 %77
  %81 = load i32, i32* %80, align 4
  %82 = sub i32 %79, %81
  %83 = icmp slt i32 %82, 0
  %84 = select i1 %83, i32 2092095114, i32 -551797544
  br label %.backedge

85:                                               ; preds = %10
  %86 = sext i32 %.081 to i64
  %87 = getelementptr inbounds i32, i32* %9, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds i32, i32* %8, i64 %86
  %90 = load i32, i32* %89, align 4
  %91 = sub i32 %88, %90
  %92 = sitofp i32 %91 to double
  %93 = fadd double %.093, %92
  br label %.backedge

94:                                               ; preds = %10
  %95 = sext i32 %.081 to i64
  %96 = getelementptr inbounds i32, i32* %8, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds i32, i32* %9, i64 %95
  %99 = load i32, i32* %98, align 4
  %100 = sub i32 %97, %99
  %101 = sitofp i32 %100 to double
  %102 = fadd double %.093, %101
  br label %.backedge

103:                                              ; preds = %10
  br label %.backedge

104:                                              ; preds = %10
  %105 = add i32 %.081, 1
  br label %.backedge

106:                                              ; preds = %10
  br label %.backedge

107:                                              ; preds = %10
  %108 = load i32, i32* %4, align 4
  %109 = icmp slt i32 %.079, %108
  %110 = select i1 %109, i32 -1739793992, i32 -420345002
  br label %.backedge

111:                                              ; preds = %10
  %112 = sext i32 %.079 to i64
  %113 = getelementptr inbounds i32, i32* %8, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds i32, i32* %9, i64 %112
  %116 = load i32, i32* %115, align 4
  %117 = sub i32 %114, %116
  %118 = mul nsw i32 %117, %117
  %119 = sitofp i32 %118 to double
  %120 = fadd double %.091, %119
  br label %.backedge

121:                                              ; preds = %10
  %122 = load i32, i32* @x.1, align 4
  %123 = load i32, i32* @y.2, align 4
  %124 = add i32 %122, -1
  %125 = mul i32 %124, %122
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %128, %127
  %130 = select i1 %129, i32 1881088227, i32 1094378661
  br label %.backedge

131:                                              ; preds = %10
  %.neg95 = add i32 %.079, 1
  %132 = load i32, i32* @x.1, align 4
  %133 = load i32, i32* @y.2, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 1353486803, i32 1094378661
  br label %.backedge

141:                                              ; preds = %10
  br label %.backedge

142:                                              ; preds = %10
  %143 = load i32, i32* @x.1, align 4
  %144 = load i32, i32* @y.2, align 4
  %145 = add i32 %143, -1
  %146 = mul i32 %145, %143
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %149, %148
  %151 = select i1 %150, i32 1280550819, i32 -1728394783
  br label %.backedge

152:                                              ; preds = %10
  %153 = call double @sqrt(double %.091) #8
  %154 = load i32, i32* @x.1, align 4
  %155 = load i32, i32* @y.2, align 4
  %156 = add i32 %154, -1
  %157 = mul i32 %156, %154
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %160, %159
  %162 = select i1 %161, i32 -1623682032, i32 -1728394783
  br label %.backedge

163:                                              ; preds = %10
  br label %.backedge

164:                                              ; preds = %10
  %165 = load i32, i32* %4, align 4
  %166 = icmp slt i32 %.077, %165
  %167 = select i1 %166, i32 -753195275, i32 -884934611
  br label %.backedge

168:                                              ; preds = %10
  %169 = load i32, i32* @x.1, align 4
  %170 = load i32, i32* @y.2, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 -862630922, i32 -1208030251
  br label %.backedge

178:                                              ; preds = %10
  %179 = sext i32 %.077 to i64
  %180 = getelementptr inbounds i32, i32* %8, i64 %179
  %181 = load i32, i32* %180, align 4
  %182 = getelementptr inbounds i32, i32* %9, i64 %179
  %183 = load i32, i32* %182, align 4
  %184 = sub i32 %181, %183
  %185 = icmp slt i32 %184, 0
  store i1 %185, i1* %2, align 1
  %186 = load i32, i32* @x.1, align 4
  %187 = load i32, i32* @y.2, align 4
  %188 = add i32 %186, -1
  %189 = mul i32 %188, %186
  %190 = and i32 %189, 1
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %192, %191
  %194 = select i1 %193, i32 628119719, i32 -1208030251
  br label %.backedge

195:                                              ; preds = %10
  %.0..0..0.73 = load volatile i1, i1* %2, align 1
  %196 = select i1 %.0..0..0.73, i32 -1401235625, i32 -1857033751
  br label %.backedge

197:                                              ; preds = %10
  %198 = sext i32 %.077 to i64
  %199 = getelementptr inbounds i32, i32* %9, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = getelementptr inbounds i32, i32* %8, i64 %198
  %202 = load i32, i32* %201, align 4
  %203 = sub i32 %200, %202
  %204 = call double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32 %203, i32 3)
  %205 = fadd double %.089, %204
  br label %.backedge

206:                                              ; preds = %10
  %207 = load i32, i32* @x.1, align 4
  %208 = load i32, i32* @y.2, align 4
  %209 = add i32 %207, -1
  %210 = mul i32 %209, %207
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %213, %212
  %215 = select i1 %214, i32 -1150242059, i32 -449174874
  br label %.backedge

216:                                              ; preds = %10
  %217 = sext i32 %.077 to i64
  %218 = getelementptr inbounds i32, i32* %8, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = getelementptr inbounds i32, i32* %9, i64 %217
  %221 = load i32, i32* %220, align 4
  %222 = sub i32 %219, %221
  %223 = call double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32 %222, i32 3)
  %224 = fadd double %.089, %223
  %225 = load i32, i32* @x.1, align 4
  %226 = load i32, i32* @y.2, align 4
  %227 = add i32 %225, -1
  %228 = mul i32 %227, %225
  %229 = and i32 %228, 1
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %231, %230
  %233 = select i1 %232, i32 -1328355037, i32 -449174874
  br label %.backedge

234:                                              ; preds = %10
  br label %.backedge

235:                                              ; preds = %10
  br label %.backedge

236:                                              ; preds = %10
  %237 = add i32 %.077, 1
  br label %.backedge

238:                                              ; preds = %10
  %239 = load i32, i32* @x.1, align 4
  %240 = load i32, i32* @y.2, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 -446948409, i32 -159113438
  br label %.backedge

248:                                              ; preds = %10
  %249 = call double @pow(double %.089, double 0x3FD5555555555555) #8
  %250 = load i32, i32* @x.1, align 4
  %251 = load i32, i32* @y.2, align 4
  %252 = add i32 %250, -1
  %253 = mul i32 %252, %250
  %254 = and i32 %253, 1
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %256, %255
  %258 = select i1 %257, i32 -1658151493, i32 -159113438
  br label %.backedge

259:                                              ; preds = %10
  br label %.backedge

260:                                              ; preds = %10
  %261 = load i32, i32* %4, align 4
  %262 = icmp slt i32 %.075, %261
  %263 = select i1 %262, i32 -496536539, i32 1244203882
  br label %.backedge

264:                                              ; preds = %10
  %265 = load i32, i32* @x.1, align 4
  %266 = load i32, i32* @y.2, align 4
  %267 = add i32 %265, -1
  %268 = mul i32 %267, %265
  %269 = and i32 %268, 1
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %271, %270
  %273 = select i1 %272, i32 -1274409235, i32 657586006
  br label %.backedge

274:                                              ; preds = %10
  %275 = sext i32 %.075 to i64
  %276 = getelementptr inbounds i32, i32* %8, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = getelementptr inbounds i32, i32* %9, i64 %275
  %279 = load i32, i32* %278, align 4
  %280 = sub i32 %277, %279
  %281 = icmp slt i32 %280, 0
  store i1 %281, i1* %1, align 1
  %282 = load i32, i32* @x.1, align 4
  %283 = load i32, i32* @y.2, align 4
  %284 = add i32 %282, -1
  %285 = mul i32 %284, %282
  %286 = and i32 %285, 1
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %288, %287
  %290 = select i1 %289, i32 -1490703968, i32 657586006
  br label %.backedge

291:                                              ; preds = %10
  %.0..0..0.74 = load volatile i1, i1* %1, align 1
  %292 = select i1 %.0..0..0.74, i32 -365413321, i32 -15608051
  br label %.backedge

293:                                              ; preds = %10
  %294 = sext i32 %.075 to i64
  %295 = getelementptr inbounds i32, i32* %9, i64 %294
  %296 = load i32, i32* %295, align 4
  %297 = getelementptr inbounds i32, i32* %8, i64 %294
  %298 = load i32, i32* %297, align 4
  %299 = sub i32 %296, %298
  %300 = sitofp i32 %299 to double
  %301 = fcmp olt double %.087, %300
  %302 = select i1 %301, i32 1640212472, i32 -597425783
  br label %.backedge

303:                                              ; preds = %10
  %304 = load i32, i32* @x.1, align 4
  %305 = load i32, i32* @y.2, align 4
  %306 = add i32 %304, -1
  %307 = mul i32 %306, %304
  %308 = and i32 %307, 1
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %310, %309
  %312 = select i1 %311, i32 -1392679866, i32 -473641833
  br label %.backedge

313:                                              ; preds = %10
  %314 = sext i32 %.075 to i64
  %315 = getelementptr inbounds i32, i32* %9, i64 %314
  %316 = load i32, i32* %315, align 4
  %317 = getelementptr inbounds i32, i32* %8, i64 %314
  %318 = load i32, i32* %317, align 4
  %319 = sub i32 %316, %318
  %320 = sitofp i32 %319 to double
  %321 = load i32, i32* @x.1, align 4
  %322 = load i32, i32* @y.2, align 4
  %323 = add i32 %321, -1
  %324 = mul i32 %323, %321
  %325 = and i32 %324, 1
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %327, %326
  %329 = select i1 %328, i32 -1947456083, i32 -473641833
  br label %.backedge

330:                                              ; preds = %10
  br label %.backedge

331:                                              ; preds = %10
  br label %.backedge

332:                                              ; preds = %10
  %333 = sext i32 %.075 to i64
  %334 = getelementptr inbounds i32, i32* %8, i64 %333
  %335 = load i32, i32* %334, align 4
  %336 = getelementptr inbounds i32, i32* %9, i64 %333
  %337 = load i32, i32* %336, align 4
  %338 = sub i32 %335, %337
  %339 = sitofp i32 %338 to double
  %340 = fcmp olt double %.087, %339
  %341 = select i1 %340, i32 2053792921, i32 -1296782155
  br label %.backedge

342:                                              ; preds = %10
  %343 = load i32, i32* @x.1, align 4
  %344 = load i32, i32* @y.2, align 4
  %345 = add i32 %343, -1
  %346 = mul i32 %345, %343
  %347 = and i32 %346, 1
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %349, %348
  %351 = select i1 %350, i32 927785484, i32 41583437
  br label %.backedge

352:                                              ; preds = %10
  %353 = sext i32 %.075 to i64
  %354 = getelementptr inbounds i32, i32* %8, i64 %353
  %355 = load i32, i32* %354, align 4
  %356 = getelementptr inbounds i32, i32* %9, i64 %353
  %357 = load i32, i32* %356, align 4
  %358 = sub i32 %355, %357
  %359 = sitofp i32 %358 to double
  %360 = load i32, i32* @x.1, align 4
  %361 = load i32, i32* @y.2, align 4
  %362 = add i32 %360, -1
  %363 = mul i32 %362, %360
  %364 = and i32 %363, 1
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %366, %365
  %368 = select i1 %367, i32 -407335471, i32 41583437
  br label %.backedge

369:                                              ; preds = %10
  br label %.backedge

370:                                              ; preds = %10
  br label %.backedge

371:                                              ; preds = %10
  %372 = load i32, i32* @x.1, align 4
  %373 = load i32, i32* @y.2, align 4
  %374 = add i32 %372, -1
  %375 = mul i32 %374, %372
  %376 = and i32 %375, 1
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %378, %377
  %380 = select i1 %379, i32 661178600, i32 753312980
  br label %.backedge

381:                                              ; preds = %10
  %382 = load i32, i32* @x.1, align 4
  %383 = load i32, i32* @y.2, align 4
  %384 = add i32 %382, -1
  %385 = mul i32 %384, %382
  %386 = and i32 %385, 1
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %388, %387
  %390 = select i1 %389, i32 355940953, i32 753312980
  br label %.backedge

391:                                              ; preds = %10
  br label %.backedge

392:                                              ; preds = %10
  %393 = load i32, i32* @x.1, align 4
  %394 = load i32, i32* @y.2, align 4
  %395 = add i32 %393, -1
  %396 = mul i32 %395, %393
  %397 = and i32 %396, 1
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %399, %398
  %401 = select i1 %400, i32 629639148, i32 1714185584
  br label %.backedge

402:                                              ; preds = %10
  %403 = add i32 %.075, 1
  %404 = load i32, i32* @x.1, align 4
  %405 = load i32, i32* @y.2, align 4
  %406 = add i32 %404, -1
  %407 = mul i32 %406, %404
  %408 = and i32 %407, 1
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %410, %409
  %412 = select i1 %411, i32 -222097385, i32 1714185584
  br label %.backedge

413:                                              ; preds = %10
  br label %.backedge

414:                                              ; preds = %10
  %415 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), double %.093, double %.091, double %.089, double %.087)
  ret i32 0

416:                                              ; preds = %10
  br label %.backedge

417:                                              ; preds = %10
  %418 = add i32 %.085, 1
  br label %.backedge

419:                                              ; preds = %10
  %420 = add i32 %.079, 1
  br label %.backedge

421:                                              ; preds = %10
  %422 = call double @sqrt(double %.091) #8
  br label %.backedge

423:                                              ; preds = %10
  br label %.backedge

424:                                              ; preds = %10
  %425 = sext i32 %.077 to i64
  %426 = getelementptr inbounds i32, i32* %8, i64 %425
  %427 = load i32, i32* %426, align 4
  %428 = getelementptr inbounds i32, i32* %9, i64 %425
  %429 = load i32, i32* %428, align 4
  %430 = sub i32 %427, %429
  %431 = call double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32 %430, i32 3)
  %432 = fadd double %.089, %431
  br label %.backedge

433:                                              ; preds = %10
  %434 = call double @pow(double %.089, double 0x3FD5555555555555) #8
  br label %.backedge

435:                                              ; preds = %10
  br label %.backedge

436:                                              ; preds = %10
  %437 = sext i32 %.075 to i64
  %438 = getelementptr inbounds i32, i32* %9, i64 %437
  %439 = load i32, i32* %438, align 4
  %440 = getelementptr inbounds i32, i32* %8, i64 %437
  %441 = load i32, i32* %440, align 4
  %442 = sub i32 %439, %441
  %443 = sitofp i32 %442 to double
  br label %.backedge

444:                                              ; preds = %10
  %445 = sext i32 %.075 to i64
  %446 = getelementptr inbounds i32, i32* %8, i64 %445
  %447 = load i32, i32* %446, align 4
  %448 = getelementptr inbounds i32, i32* %9, i64 %445
  %449 = load i32, i32* %448, align 4
  %450 = sub i32 %447, %449
  %451 = sitofp i32 %450 to double
  br label %.backedge

452:                                              ; preds = %10
  br label %.backedge

453:                                              ; preds = %10
  %.neg = add i32 %.075, 1
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_(i32 %0, i32 %1) local_unnamed_addr #6 comdat {
  %3 = sitofp i32 %0 to double
  %4 = sitofp i32 %1 to double
  %5 = tail call double @pow(double %3, double %4) #8
  ret double %5
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare double @pow(double, double) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #7

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s579395783.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nofree nounwind willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
