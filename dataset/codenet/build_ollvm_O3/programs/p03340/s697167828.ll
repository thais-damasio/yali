; ModuleID = 'build_ollvm/programs/p03340/s697167828.ll'
source_filename = "Project_CodeNet_C++1400/p03340/s697167828.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@a = global [200005 x i64] zeroinitializer, align 16
@b = local_unnamed_addr global [200005 x [22 x i64]] zeroinitializer, align 16
@c = local_unnamed_addr global [22 x i64] zeroinitializer, align 16
@n = global i64 0, align 8
@ans = local_unnamed_addr global i64 0, align 8
@.str = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s697167828.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64* nonnull @n)
  br label %3

3:                                                ; preds = %.backedge, %0
  %.089 = phi i32 [ 1, %0 ], [ %.089.be, %.backedge ]
  %.087 = phi i64 [ undef, %0 ], [ %.087.be, %.backedge ]
  %.085 = phi i64 [ undef, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i64 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i64 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i32 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i32 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.0 = phi i32 [ 1070144880, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1070144880, label %4
    i32 2042057111, label %8
    i32 1066243629, label %13
    i32 -820401729, label %16
    i32 941167872, label %26
    i32 -69583545, label %40
    i32 1325400465, label %41
    i32 1243265691, label %42
    i32 -928986148, label %43
    i32 -501636168, label %47
    i32 950057137, label %49
    i32 -471086043, label %50
    i32 229031647, label %53
    i32 -1835493640, label %63
    i32 -1886526633, label %79
    i32 1647001158, label %80
    i32 2010643549, label %82
    i32 1819637924, label %83
    i32 2113988272, label %86
    i32 738170285, label %87
    i32 1070805840, label %92
    i32 -1171814154, label %102
    i32 -547727703, label %112
    i32 1101605830, label %113
    i32 1756179885, label %123
    i32 -891459234, label %133
    i32 -161308619, label %134
    i32 255691143, label %137
    i32 -1761593656, label %146
    i32 -1515644284, label %147
    i32 -126559452, label %148
    i32 -57272490, label %150
    i32 -338776152, label %153
    i32 1431987677, label %157
    i32 -425424840, label %158
    i32 2035274726, label %168
    i32 2072141193, label %178
    i32 -968748982, label %179
    i32 1231070531, label %182
    i32 -1673107629, label %191
    i32 266926308, label %198
    i32 480163725, label %200
    i32 185485131, label %203
    i32 -629917705, label %204
    i32 1136185357, label %207
    i32 -1269400749, label %217
    i32 -1003001391, label %227
    i32 1913185075, label %237
    i32 -645908166, label %238
    i32 -1178330596, label %239
    i32 -324118412, label %241
    i32 897676090, label %244
    i32 -560257258, label %246
    i32 -621643445, label %247
    i32 322624526, label %251
    i32 -37156831, label %260
    i32 1540778344, label %270
    i32 714672230, label %286
    i32 881532121, label %287
    i32 1038203545, label %297
    i32 -92613428, label %307
    i32 -1334089262, label %308
    i32 -704440134, label %311
    i32 808279415, label %321
    i32 1241307258, label %331
    i32 -582496539, label %332
    i32 -1299146442, label %337
    i32 732591483, label %344
    i32 -463791582, label %345
    i32 1285859203, label %346
    i32 -1863436127, label %347
    i32 758607806, label %348
    i32 1541373362, label %355
    i32 1905275656, label %356
  ]

.backedge:                                        ; preds = %3, %356, %355, %348, %347, %346, %345, %344, %337, %332, %321, %311, %308, %307, %297, %287, %286, %270, %260, %251, %247, %246, %244, %241, %239, %238, %237, %227, %217, %207, %204, %203, %200, %198, %191, %182, %179, %178, %168, %158, %157, %153, %150, %148, %147, %146, %137, %134, %133, %123, %113, %112, %102, %92, %87, %86, %83, %82, %80, %79, %63, %53, %50, %49, %47, %43, %42, %41, %40, %26, %16, %13, %8, %4
  %.089.be = phi i32 [ %.089, %3 ], [ %.089, %356 ], [ %.089, %355 ], [ %.089, %348 ], [ %.089, %347 ], [ %.089, %346 ], [ %.089, %345 ], [ %.089, %344 ], [ %.089, %337 ], [ %.089, %332 ], [ %.089, %321 ], [ %.089, %311 ], [ %.089, %308 ], [ %.089, %307 ], [ %.089, %297 ], [ %.089, %287 ], [ %.089, %286 ], [ %.089, %270 ], [ %.089, %260 ], [ %.089, %251 ], [ %.089, %247 ], [ %.089, %246 ], [ %.089, %244 ], [ %.089, %241 ], [ %.089, %239 ], [ %.089, %238 ], [ %.089, %237 ], [ %.089, %227 ], [ %.089, %217 ], [ %.089, %207 ], [ %.089, %204 ], [ %.089, %203 ], [ %.089, %200 ], [ %.089, %198 ], [ %.089, %191 ], [ %.089, %182 ], [ %.089, %179 ], [ %.089, %178 ], [ %.089, %168 ], [ %.089, %158 ], [ %.089, %157 ], [ %.089, %153 ], [ %.089, %150 ], [ %.089, %148 ], [ %.089, %147 ], [ %.089, %146 ], [ %.089, %137 ], [ %.089, %134 ], [ %.089, %133 ], [ %.089, %123 ], [ %.089, %113 ], [ %.089, %112 ], [ %.089, %102 ], [ %.089, %92 ], [ %.089, %87 ], [ %.089, %86 ], [ %.089, %83 ], [ %.089, %82 ], [ %.089, %80 ], [ %.089, %79 ], [ %.089, %63 ], [ %.089, %53 ], [ %.089, %50 ], [ %.089, %49 ], [ %.089, %47 ], [ %.089, %43 ], [ %.neg100, %42 ], [ %.089, %41 ], [ %.089, %40 ], [ %.089, %26 ], [ %.089, %16 ], [ %.089, %13 ], [ %.089, %8 ], [ %.089, %4 ]
  %.087.be = phi i64 [ %.087, %3 ], [ %.087, %356 ], [ %.087, %355 ], [ %.087, %348 ], [ %.087, %347 ], [ %.087, %346 ], [ %.087, %345 ], [ %.087, %344 ], [ %.087, %337 ], [ %336, %332 ], [ %.087, %321 ], [ %.087, %311 ], [ %.087, %308 ], [ %.087, %307 ], [ %.087, %297 ], [ %.087, %287 ], [ %.087, %286 ], [ %.087, %270 ], [ %.087, %260 ], [ %.087, %251 ], [ %.087, %247 ], [ %.087, %246 ], [ %.087, %244 ], [ %.087, %241 ], [ %.087, %239 ], [ %.087, %238 ], [ %.087, %237 ], [ %.087, %227 ], [ %.087, %217 ], [ %.087, %207 ], [ %.087, %204 ], [ %.087, %203 ], [ %.087, %200 ], [ %.087, %198 ], [ %.087, %191 ], [ %.087, %182 ], [ %.087, %179 ], [ %.087, %178 ], [ %.087, %168 ], [ %.087, %158 ], [ %.087, %157 ], [ %.087, %153 ], [ %.087, %150 ], [ %.087, %148 ], [ %.087, %147 ], [ %.087, %146 ], [ %.087, %137 ], [ %.087, %134 ], [ %.087, %133 ], [ %.087, %123 ], [ %.087, %113 ], [ %.087, %112 ], [ %.087, %102 ], [ %.087, %92 ], [ %.087, %87 ], [ %.087, %86 ], [ %.087, %83 ], [ %.087, %82 ], [ %.087, %80 ], [ %.087, %79 ], [ %.087, %63 ], [ %.087, %53 ], [ %.087, %50 ], [ %.087, %49 ], [ %.087, %47 ], [ %.087, %43 ], [ %.087, %42 ], [ %.087, %41 ], [ %.087, %40 ], [ %30, %26 ], [ %.087, %16 ], [ %.087, %13 ], [ %12, %8 ], [ %.087, %4 ]
  %.085.be = phi i64 [ %.085, %3 ], [ %.085, %356 ], [ %.085, %355 ], [ %.085, %348 ], [ %.085, %347 ], [ %.085, %346 ], [ %.085, %345 ], [ %.085, %344 ], [ %.085, %337 ], [ %.neg93, %332 ], [ %.085, %321 ], [ %.085, %311 ], [ %.085, %308 ], [ %.085, %307 ], [ %.085, %297 ], [ %.085, %287 ], [ %.085, %286 ], [ %.085, %270 ], [ %.085, %260 ], [ %.085, %251 ], [ %.085, %247 ], [ %.085, %246 ], [ %.085, %244 ], [ %.085, %241 ], [ %.085, %239 ], [ %.085, %238 ], [ %.085, %237 ], [ %.085, %227 ], [ %.085, %217 ], [ %.085, %207 ], [ %.085, %204 ], [ %.085, %203 ], [ %.085, %200 ], [ %.085, %198 ], [ %.085, %191 ], [ %.085, %182 ], [ %.085, %179 ], [ %.085, %178 ], [ %.085, %168 ], [ %.085, %158 ], [ %.085, %157 ], [ %.085, %153 ], [ %.085, %150 ], [ %.085, %148 ], [ %.085, %147 ], [ %.085, %146 ], [ %.085, %137 ], [ %.085, %134 ], [ %.085, %133 ], [ %.085, %123 ], [ %.085, %113 ], [ %.085, %112 ], [ %.085, %102 ], [ %.085, %92 ], [ %.085, %87 ], [ %.085, %86 ], [ %.085, %83 ], [ %.085, %82 ], [ %.085, %80 ], [ %.085, %79 ], [ %.085, %63 ], [ %.085, %53 ], [ %.085, %50 ], [ %.085, %49 ], [ %.085, %47 ], [ %.085, %43 ], [ %.085, %42 ], [ %.085, %41 ], [ %.085, %40 ], [ %.neg101, %26 ], [ %.085, %16 ], [ %.085, %13 ], [ 0, %8 ], [ %.085, %4 ]
  %.083.be = phi i64 [ %.083, %3 ], [ %.083, %356 ], [ %.083, %355 ], [ %.083, %348 ], [ %.083, %347 ], [ %.083, %346 ], [ %.083, %345 ], [ %.083, %344 ], [ %.083, %337 ], [ %.083, %332 ], [ %.083, %321 ], [ %.083, %311 ], [ %.083, %308 ], [ %.083, %307 ], [ %.083, %297 ], [ %.083, %287 ], [ %.083, %286 ], [ %.083, %270 ], [ %.083, %260 ], [ %.083, %251 ], [ %.083, %247 ], [ %.083, %246 ], [ %245, %244 ], [ %.083, %241 ], [ %.083, %239 ], [ %.083, %238 ], [ %.083, %237 ], [ %.083, %227 ], [ %.083, %217 ], [ %.083, %207 ], [ %.083, %204 ], [ %.083, %203 ], [ %.083, %200 ], [ %199, %198 ], [ %.083, %191 ], [ %.083, %182 ], [ %.083, %179 ], [ %.083, %178 ], [ %.083, %168 ], [ %.083, %158 ], [ %.083, %157 ], [ %.083, %153 ], [ %.083, %150 ], [ %.083, %148 ], [ %.083, %147 ], [ %.083, %146 ], [ %.083, %137 ], [ %.083, %134 ], [ %.083, %133 ], [ %.083, %123 ], [ %.083, %113 ], [ %.083, %112 ], [ %.083, %102 ], [ %.083, %92 ], [ %.083, %87 ], [ %.083, %86 ], [ %.083, %83 ], [ %.083, %82 ], [ %.083, %80 ], [ %.083, %79 ], [ %.083, %63 ], [ %.083, %53 ], [ %.083, %50 ], [ %.083, %49 ], [ %.083, %47 ], [ 1, %43 ], [ %.083, %42 ], [ %.083, %41 ], [ %.083, %40 ], [ %.083, %26 ], [ %.083, %16 ], [ %.083, %13 ], [ %.083, %8 ], [ %.083, %4 ]
  %.081.be = phi i64 [ %.081, %3 ], [ %.081, %356 ], [ %.081, %355 ], [ %.081, %348 ], [ %.081, %347 ], [ %.081, %346 ], [ %.081, %345 ], [ %.081, %344 ], [ %.081, %337 ], [ %.081, %332 ], [ %.081, %321 ], [ %.081, %311 ], [ %.081, %308 ], [ %.081, %307 ], [ %.081, %297 ], [ %.081, %287 ], [ %.081, %286 ], [ %.081, %270 ], [ %.081, %260 ], [ %.081, %251 ], [ %.081, %247 ], [ %.081, %246 ], [ %.081, %244 ], [ %.081, %241 ], [ %.081, %239 ], [ %.081, %238 ], [ %.081, %237 ], [ %.081, %227 ], [ %.081, %217 ], [ %.081, %207 ], [ %.081, %204 ], [ %.081, %203 ], [ %.081, %200 ], [ %.081, %198 ], [ %.081, %191 ], [ %.081, %182 ], [ %.081, %179 ], [ %.081, %178 ], [ %.081, %168 ], [ %.081, %158 ], [ %.081, %157 ], [ %.081, %153 ], [ %.081, %150 ], [ %.081, %148 ], [ %.081, %147 ], [ %.081, %146 ], [ %.081, %137 ], [ %.081, %134 ], [ %.081, %133 ], [ %.081, %123 ], [ %.081, %113 ], [ %.081, %112 ], [ %.081, %102 ], [ %.081, %92 ], [ %88, %87 ], [ %.081, %86 ], [ %.081, %83 ], [ %.081, %82 ], [ %.081, %80 ], [ %.081, %79 ], [ %.081, %63 ], [ %.081, %53 ], [ %.081, %50 ], [ %.081, %49 ], [ %.081, %47 ], [ 1, %43 ], [ %.081, %42 ], [ %.081, %41 ], [ %.081, %40 ], [ %.081, %26 ], [ %.081, %16 ], [ %.081, %13 ], [ %.081, %8 ], [ %.081, %4 ]
  %.079.be = phi i32 [ %.079, %3 ], [ %.079, %356 ], [ %.079, %355 ], [ %.079, %348 ], [ %.079, %347 ], [ %.079, %346 ], [ %.079, %345 ], [ %.079, %344 ], [ %.079, %337 ], [ %.079, %332 ], [ %.079, %321 ], [ %.079, %311 ], [ %.079, %308 ], [ %.079, %307 ], [ %.079, %297 ], [ %.079, %287 ], [ %.079, %286 ], [ %.079, %270 ], [ %.079, %260 ], [ %.079, %251 ], [ %.079, %247 ], [ %.079, %246 ], [ %.079, %244 ], [ %.079, %241 ], [ %.079, %239 ], [ %.079, %238 ], [ %.079, %237 ], [ %.079, %227 ], [ %.079, %217 ], [ %.079, %207 ], [ %.079, %204 ], [ %.079, %203 ], [ %.079, %200 ], [ %.079, %198 ], [ %.079, %191 ], [ %.079, %182 ], [ %.079, %179 ], [ %.079, %178 ], [ %.079, %168 ], [ %.079, %158 ], [ %.079, %157 ], [ %.079, %153 ], [ %.079, %150 ], [ %.079, %148 ], [ %.079, %147 ], [ %.079, %146 ], [ %.079, %137 ], [ %.079, %134 ], [ %.079, %133 ], [ %.079, %123 ], [ %.079, %113 ], [ %.079, %112 ], [ %.079, %102 ], [ %.079, %92 ], [ %.079, %87 ], [ %.079, %86 ], [ %.079, %83 ], [ %.079, %82 ], [ %81, %80 ], [ %.079, %79 ], [ %.079, %63 ], [ %.079, %53 ], [ %.079, %50 ], [ 0, %49 ], [ %.079, %47 ], [ %.079, %43 ], [ %.079, %42 ], [ %.079, %41 ], [ %.079, %40 ], [ %.079, %26 ], [ %.079, %16 ], [ %.079, %13 ], [ %.079, %8 ], [ %.079, %4 ]
  %.077.be = phi i32 [ %.077, %3 ], [ %.077, %356 ], [ %.077, %355 ], [ %.077, %348 ], [ %.077, %347 ], [ %.077, %346 ], [ %.077, %345 ], [ %.077, %344 ], [ %.077, %337 ], [ %.077, %332 ], [ %.077, %321 ], [ %.077, %311 ], [ %.077, %308 ], [ %.077, %307 ], [ %.077, %297 ], [ %.077, %287 ], [ %.077, %286 ], [ %.077, %270 ], [ %.077, %260 ], [ %.077, %251 ], [ %.077, %247 ], [ %.077, %246 ], [ %.077, %244 ], [ %.077, %241 ], [ %.077, %239 ], [ %.077, %238 ], [ %.077, %237 ], [ %.077, %227 ], [ %.077, %217 ], [ %.077, %207 ], [ %.077, %204 ], [ %.077, %203 ], [ %.077, %200 ], [ %.077, %198 ], [ %.077, %191 ], [ %.077, %182 ], [ %.077, %179 ], [ %.077, %178 ], [ %.077, %168 ], [ %.077, %158 ], [ %.077, %157 ], [ %.077, %153 ], [ %.077, %150 ], [ %.077, %148 ], [ %.077, %147 ], [ 0, %146 ], [ %.077, %137 ], [ %.077, %134 ], [ %.077, %133 ], [ %.077, %123 ], [ %.077, %113 ], [ %.077, %112 ], [ %.077, %102 ], [ %.077, %92 ], [ %.077, %87 ], [ 1, %86 ], [ %.077, %83 ], [ %.077, %82 ], [ %.077, %80 ], [ %.077, %79 ], [ %.077, %63 ], [ %.077, %53 ], [ %.077, %50 ], [ %.077, %49 ], [ %.077, %47 ], [ %.077, %43 ], [ %.077, %42 ], [ %.077, %41 ], [ %.077, %40 ], [ %.077, %26 ], [ %.077, %16 ], [ %.077, %13 ], [ %.077, %8 ], [ %.077, %4 ]
  %.075.be = phi i32 [ %.075, %3 ], [ %.075, %356 ], [ %.075, %355 ], [ %.075, %348 ], [ 0, %347 ], [ %.075, %346 ], [ %.075, %345 ], [ %.075, %344 ], [ %.075, %337 ], [ %.075, %332 ], [ %.075, %321 ], [ %.075, %311 ], [ %.075, %308 ], [ %.075, %307 ], [ %.075, %297 ], [ %.075, %287 ], [ %.075, %286 ], [ %.075, %270 ], [ %.075, %260 ], [ %.075, %251 ], [ %.075, %247 ], [ %.075, %246 ], [ %.075, %244 ], [ %.075, %241 ], [ %.075, %239 ], [ %.075, %238 ], [ %.075, %237 ], [ 0, %227 ], [ %.075, %217 ], [ %.075, %207 ], [ %.075, %204 ], [ 1, %203 ], [ %.075, %200 ], [ %.075, %198 ], [ %.075, %191 ], [ %.075, %182 ], [ %.075, %179 ], [ %.075, %178 ], [ %.075, %168 ], [ %.075, %158 ], [ %.075, %157 ], [ %.075, %153 ], [ %.075, %150 ], [ %.075, %148 ], [ %.075, %147 ], [ %.075, %146 ], [ %.075, %137 ], [ %.075, %134 ], [ %.075, %133 ], [ %.075, %123 ], [ %.075, %113 ], [ %.075, %112 ], [ %.075, %102 ], [ %.075, %92 ], [ %.075, %87 ], [ %.075, %86 ], [ %.075, %83 ], [ %.075, %82 ], [ %.075, %80 ], [ %.075, %79 ], [ %.075, %63 ], [ %.075, %53 ], [ %.075, %50 ], [ %.075, %49 ], [ %.075, %47 ], [ %.075, %43 ], [ %.075, %42 ], [ %.075, %41 ], [ %.075, %40 ], [ %.075, %26 ], [ %.075, %16 ], [ %.075, %13 ], [ %.075, %8 ], [ %.075, %4 ]
  %.073.be = phi i32 [ %.073, %3 ], [ %.073, %356 ], [ %.073, %355 ], [ %.073, %348 ], [ %.073, %347 ], [ %.073, %346 ], [ 0, %345 ], [ %.073, %344 ], [ %.073, %337 ], [ %.073, %332 ], [ %.073, %321 ], [ %.073, %311 ], [ %.073, %308 ], [ %.073, %307 ], [ %.073, %297 ], [ %.073, %287 ], [ %.073, %286 ], [ %.073, %270 ], [ %.073, %260 ], [ %.073, %251 ], [ %.073, %247 ], [ %.073, %246 ], [ %.073, %244 ], [ %.073, %241 ], [ %.073, %239 ], [ %.073, %238 ], [ %.073, %237 ], [ %.073, %227 ], [ %.073, %217 ], [ %.073, %207 ], [ %.073, %204 ], [ %.073, %203 ], [ %.073, %200 ], [ %.073, %198 ], [ %.073, %191 ], [ %.073, %182 ], [ %.073, %179 ], [ %.073, %178 ], [ %.073, %168 ], [ %.073, %158 ], [ %.073, %157 ], [ %.073, %153 ], [ %.073, %150 ], [ %149, %148 ], [ %.073, %147 ], [ %.073, %146 ], [ %.073, %137 ], [ %.073, %134 ], [ %.073, %133 ], [ 0, %123 ], [ %.073, %113 ], [ %.073, %112 ], [ %.073, %102 ], [ %.073, %92 ], [ %.073, %87 ], [ %.073, %86 ], [ %.073, %83 ], [ %.073, %82 ], [ %.073, %80 ], [ %.073, %79 ], [ %.073, %63 ], [ %.073, %53 ], [ %.073, %50 ], [ %.073, %49 ], [ %.073, %47 ], [ %.073, %43 ], [ %.073, %42 ], [ %.073, %41 ], [ %.073, %40 ], [ %.073, %26 ], [ %.073, %16 ], [ %.073, %13 ], [ %.073, %8 ], [ %.073, %4 ]
  %.071.be = phi i32 [ %.071, %3 ], [ %.071, %356 ], [ %.071, %355 ], [ %.071, %348 ], [ %.071, %347 ], [ %.071, %346 ], [ %.071, %345 ], [ %.071, %344 ], [ %.071, %337 ], [ %.071, %332 ], [ %.071, %321 ], [ %.071, %311 ], [ %.071, %308 ], [ %.071, %307 ], [ %.071, %297 ], [ %.071, %287 ], [ %.071, %286 ], [ %.071, %270 ], [ %.071, %260 ], [ %.071, %251 ], [ %.071, %247 ], [ %.071, %246 ], [ %.071, %244 ], [ %.071, %241 ], [ %240, %239 ], [ %.071, %238 ], [ %.071, %237 ], [ %.071, %227 ], [ %.071, %217 ], [ %.071, %207 ], [ %.071, %204 ], [ 0, %203 ], [ %.071, %200 ], [ %.071, %198 ], [ %.071, %191 ], [ %.071, %182 ], [ %.071, %179 ], [ %.071, %178 ], [ %.071, %168 ], [ %.071, %158 ], [ %.071, %157 ], [ %.071, %153 ], [ %.071, %150 ], [ %.071, %148 ], [ %.071, %147 ], [ %.071, %146 ], [ %.071, %137 ], [ %.071, %134 ], [ %.071, %133 ], [ %.071, %123 ], [ %.071, %113 ], [ %.071, %112 ], [ %.071, %102 ], [ %.071, %92 ], [ %.071, %87 ], [ %.071, %86 ], [ %.071, %83 ], [ %.071, %82 ], [ %.071, %80 ], [ %.071, %79 ], [ %.071, %63 ], [ %.071, %53 ], [ %.071, %50 ], [ %.071, %49 ], [ %.071, %47 ], [ %.071, %43 ], [ %.071, %42 ], [ %.071, %41 ], [ %.071, %40 ], [ %.071, %26 ], [ %.071, %16 ], [ %.071, %13 ], [ %.071, %8 ], [ %.071, %4 ]
  %.0.be = phi i32 [ %.0, %3 ], [ 808279415, %356 ], [ 1038203545, %355 ], [ 1540778344, %348 ], [ -1003001391, %347 ], [ 2035274726, %346 ], [ 1756179885, %345 ], [ -1171814154, %344 ], [ -1835493640, %337 ], [ 941167872, %332 ], [ %330, %321 ], [ %320, %311 ], [ -704440134, %308 ], [ 1819637924, %307 ], [ %306, %297 ], [ %296, %287 ], [ 881532121, %286 ], [ %285, %270 ], [ %269, %260 ], [ -1334089262, %251 ], [ %250, %247 ], [ -621643445, %246 ], [ 480163725, %244 ], [ %243, %241 ], [ -629917705, %239 ], [ -1178330596, %238 ], [ -645908166, %237 ], [ %236, %227 ], [ %226, %217 ], [ %216, %207 ], [ %206, %204 ], [ -629917705, %203 ], [ %202, %200 ], [ 480163725, %198 ], [ 266926308, %191 ], [ -1334089262, %182 ], [ %181, %179 ], [ 738170285, %178 ], [ %177, %168 ], [ %167, %158 ], [ -968748982, %157 ], [ %156, %153 ], [ %152, %150 ], [ -161308619, %148 ], [ -126559452, %147 ], [ -1515644284, %146 ], [ %145, %137 ], [ %136, %134 ], [ -161308619, %133 ], [ %132, %123 ], [ %122, %113 ], [ -968748982, %112 ], [ %111, %102 ], [ %101, %92 ], [ %91, %87 ], [ 738170285, %86 ], [ %85, %83 ], [ 1819637924, %82 ], [ -471086043, %80 ], [ 1647001158, %79 ], [ %78, %63 ], [ %62, %53 ], [ %52, %50 ], [ -471086043, %49 ], [ -704440134, %47 ], [ %46, %43 ], [ 1070144880, %42 ], [ 1243265691, %41 ], [ 1066243629, %40 ], [ %39, %26 ], [ %25, %16 ], [ %15, %13 ], [ 1066243629, %8 ], [ %7, %4 ]
  br label %3

4:                                                ; preds = %3
  %5 = sext i32 %.089 to i64
  %6 = load i64, i64* @n, align 8
  %.not102 = icmp slt i64 %6, %5
  %7 = select i1 %.not102, i32 -928986148, i32 2042057111
  br label %.backedge

8:                                                ; preds = %3
  %9 = sext i32 %.089 to i64
  %10 = getelementptr inbounds [200005 x i64], [200005 x i64]* @a, i64 0, i64 %9
  %11 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64* nonnull %10)
  %12 = load i64, i64* %10, align 8
  br label %.backedge

13:                                               ; preds = %3
  %14 = icmp sgt i64 %.087, 0
  %15 = select i1 %14, i32 -820401729, i32 1325400465
  br label %.backedge

16:                                               ; preds = %3
  %17 = load i32, i32* @x.1, align 4
  %18 = load i32, i32* @y.2, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 941167872, i32 -582496539
  br label %.backedge

26:                                               ; preds = %3
  %27 = srem i64 %.087, 2
  %28 = sext i32 %.089 to i64
  %29 = getelementptr inbounds [200005 x [22 x i64]], [200005 x [22 x i64]]* @b, i64 0, i64 %28, i64 %.085
  store i64 %27, i64* %29, align 8
  %.neg101 = add i64 %.085, 1
  %30 = sdiv i64 %.087, 2
  %31 = load i32, i32* @x.1, align 4
  %32 = load i32, i32* @y.2, align 4
  %33 = add i32 %31, -1
  %34 = mul i32 %33, %31
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %37, %36
  %39 = select i1 %38, i32 -69583545, i32 -582496539
  br label %.backedge

40:                                               ; preds = %3
  br label %.backedge

41:                                               ; preds = %3
  br label %.backedge

42:                                               ; preds = %3
  %.neg100 = add i32 %.089, 1
  br label %.backedge

43:                                               ; preds = %3
  %44 = load i64, i64* @n, align 8
  %45 = icmp eq i64 %44, 1
  %46 = select i1 %45, i32 -501636168, i32 950057137
  br label %.backedge

47:                                               ; preds = %3
  %48 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 1)
  br label %.backedge

49:                                               ; preds = %3
  br label %.backedge

50:                                               ; preds = %3
  %51 = icmp slt i32 %.079, 22
  %52 = select i1 %51, i32 229031647, i32 2010643549
  br label %.backedge

53:                                               ; preds = %3
  %54 = load i32, i32* @x.1, align 4
  %55 = load i32, i32* @y.2, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 -1835493640, i32 -1299146442
  br label %.backedge

63:                                               ; preds = %3
  %64 = sext i32 %.079 to i64
  %65 = getelementptr inbounds [200005 x [22 x i64]], [200005 x [22 x i64]]* @b, i64 0, i64 1, i64 %64
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds [22 x i64], [22 x i64]* @c, i64 0, i64 %64
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, %66
  store i64 %69, i64* %67, align 8
  %70 = load i32, i32* @x.1, align 4
  %71 = load i32, i32* @y.2, align 4
  %72 = add i32 %70, -1
  %73 = mul i32 %72, %70
  %74 = and i32 %73, 1
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %76, %75
  %78 = select i1 %77, i32 -1886526633, i32 -1299146442
  br label %.backedge

79:                                               ; preds = %3
  br label %.backedge

80:                                               ; preds = %3
  %81 = add i32 %.079, 1
  br label %.backedge

82:                                               ; preds = %3
  br label %.backedge

83:                                               ; preds = %3
  %84 = load i64, i64* @n, align 8
  %.not99 = icmp sgt i64 %.083, %84
  %85 = select i1 %.not99, i32 -1334089262, i32 2113988272
  br label %.backedge

86:                                               ; preds = %3
  br label %.backedge

87:                                               ; preds = %3
  %88 = add i64 %.081, 1
  %89 = load i64, i64* @n, align 8
  %90 = icmp sgt i64 %88, %89
  %91 = select i1 %90, i32 1070805840, i32 1101605830
  br label %.backedge

92:                                               ; preds = %3
  %93 = load i32, i32* @x.1, align 4
  %94 = load i32, i32* @y.2, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 -1171814154, i32 732591483
  br label %.backedge

102:                                              ; preds = %3
  %103 = load i32, i32* @x.1, align 4
  %104 = load i32, i32* @y.2, align 4
  %105 = add i32 %103, -1
  %106 = mul i32 %105, %103
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %109, %108
  %111 = select i1 %110, i32 -547727703, i32 732591483
  br label %.backedge

112:                                              ; preds = %3
  br label %.backedge

113:                                              ; preds = %3
  %114 = load i32, i32* @x.1, align 4
  %115 = load i32, i32* @y.2, align 4
  %116 = add i32 %114, -1
  %117 = mul i32 %116, %114
  %118 = and i32 %117, 1
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %120, %119
  %122 = select i1 %121, i32 1756179885, i32 -463791582
  br label %.backedge

123:                                              ; preds = %3
  %124 = load i32, i32* @x.1, align 4
  %125 = load i32, i32* @y.2, align 4
  %126 = add i32 %124, -1
  %127 = mul i32 %126, %124
  %128 = and i32 %127, 1
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %130, %129
  %132 = select i1 %131, i32 -891459234, i32 -463791582
  br label %.backedge

133:                                              ; preds = %3
  br label %.backedge

134:                                              ; preds = %3
  %135 = icmp slt i32 %.073, 22
  %136 = select i1 %135, i32 255691143, i32 -57272490
  br label %.backedge

137:                                              ; preds = %3
  %138 = sext i32 %.073 to i64
  %139 = getelementptr inbounds [200005 x [22 x i64]], [200005 x [22 x i64]]* @b, i64 0, i64 %.081, i64 %138
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds [22 x i64], [22 x i64]* @c, i64 0, i64 %138
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %142, %140
  store i64 %143, i64* %141, align 8
  %144 = icmp sgt i64 %143, 1
  %145 = select i1 %144, i32 -1761593656, i32 -1515644284
  br label %.backedge

146:                                              ; preds = %3
  br label %.backedge

147:                                              ; preds = %3
  br label %.backedge

148:                                              ; preds = %3
  %149 = add i32 %.073, 1
  br label %.backedge

150:                                              ; preds = %3
  %151 = icmp eq i32 %.077, 0
  %152 = select i1 %151, i32 1431987677, i32 -338776152
  br label %.backedge

153:                                              ; preds = %3
  %154 = load i64, i64* @n, align 8
  %155 = icmp eq i64 %.081, %154
  %156 = select i1 %155, i32 1431987677, i32 -425424840
  br label %.backedge

157:                                              ; preds = %3
  br label %.backedge

158:                                              ; preds = %3
  %159 = load i32, i32* @x.1, align 4
  %160 = load i32, i32* @y.2, align 4
  %161 = add i32 %159, -1
  %162 = mul i32 %161, %159
  %163 = and i32 %162, 1
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %165, %164
  %167 = select i1 %166, i32 2035274726, i32 1285859203
  br label %.backedge

168:                                              ; preds = %3
  %169 = load i32, i32* @x.1, align 4
  %170 = load i32, i32* @y.2, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 2072141193, i32 1285859203
  br label %.backedge

178:                                              ; preds = %3
  br label %.backedge

179:                                              ; preds = %3
  %180 = icmp eq i32 %.077, 1
  %181 = select i1 %180, i32 1231070531, i32 -1673107629
  br label %.backedge

182:                                              ; preds = %3
  %183 = sub i64 1, %.083
  %184 = add i64 %183, %.081
  %185 = sub i64 2, %.083
  %186 = add i64 %185, %.081
  %187 = mul nsw i64 %184, %186
  %188 = sdiv i64 %187, 2
  %189 = load i64, i64* @ans, align 8
  %190 = add i64 %189, %188
  store i64 %190, i64* @ans, align 8
  br label %.backedge

191:                                              ; preds = %3
  %192 = sub i64 %.081, %.083
  %.neg98.neg = sub i64 1, %.083
  %193 = add i64 %.neg98.neg, %.081
  %194 = mul nsw i64 %192, %193
  %195 = sdiv i64 %194, 2
  %196 = load i64, i64* @ans, align 8
  %197 = add i64 %196, %195
  store i64 %197, i64* @ans, align 8
  br label %.backedge

198:                                              ; preds = %3
  %199 = add i64 %.083, 1
  br label %.backedge

200:                                              ; preds = %3
  %201 = load i64, i64* @n, align 8
  %.not = icmp sgt i64 %.083, %201
  %202 = select i1 %.not, i32 -621643445, i32 185485131
  br label %.backedge

203:                                              ; preds = %3
  br label %.backedge

204:                                              ; preds = %3
  %205 = icmp slt i32 %.071, 22
  %206 = select i1 %205, i32 1136185357, i32 -324118412
  br label %.backedge

207:                                              ; preds = %3
  %208 = add i64 %.083, -1
  %209 = sext i32 %.071 to i64
  %210 = getelementptr inbounds [200005 x [22 x i64]], [200005 x [22 x i64]]* @b, i64 0, i64 %208, i64 %209
  %211 = load i64, i64* %210, align 8
  %212 = getelementptr inbounds [22 x i64], [22 x i64]* @c, i64 0, i64 %209
  %213 = load i64, i64* %212, align 8
  %214 = sub i64 %213, %211
  store i64 %214, i64* %212, align 8
  %215 = icmp sgt i64 %214, 1
  %216 = select i1 %215, i32 -1269400749, i32 -645908166
  br label %.backedge

217:                                              ; preds = %3
  %218 = load i32, i32* @x.1, align 4
  %219 = load i32, i32* @y.2, align 4
  %220 = add i32 %218, -1
  %221 = mul i32 %220, %218
  %222 = and i32 %221, 1
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %224, %223
  %226 = select i1 %225, i32 -1003001391, i32 -1863436127
  br label %.backedge

227:                                              ; preds = %3
  %228 = load i32, i32* @x.1, align 4
  %229 = load i32, i32* @y.2, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 1913185075, i32 -1863436127
  br label %.backedge

237:                                              ; preds = %3
  br label %.backedge

238:                                              ; preds = %3
  br label %.backedge

239:                                              ; preds = %3
  %240 = add i32 %.071, 1
  br label %.backedge

241:                                              ; preds = %3
  %242 = icmp eq i32 %.075, 0
  %243 = select i1 %242, i32 897676090, i32 -560257258
  br label %.backedge

244:                                              ; preds = %3
  %245 = add i64 %.083, 1
  br label %.backedge

246:                                              ; preds = %3
  br label %.backedge

247:                                              ; preds = %3
  %248 = load i64, i64* @n, align 8
  %249 = icmp eq i64 %.081, %248
  %250 = select i1 %249, i32 322624526, i32 -37156831
  br label %.backedge

251:                                              ; preds = %3
  %252 = sub i64 %.081, %.083
  %.neg95.neg = sub i64 1, %.083
  %253 = add i64 %.neg95.neg, %.081
  %254 = mul nsw i64 %252, %253
  %.neg96 = sdiv i64 %254, -2
  %255 = load i64, i64* @ans, align 8
  %256 = add i64 %252, 2
  %257 = mul nsw i64 %256, %253
  %.neg97.neg = sdiv i64 %257, 2
  %258 = add nsw i64 %.neg97.neg, %.neg96
  %259 = add i64 %258, %255
  store i64 %259, i64* @ans, align 8
  br label %.backedge

260:                                              ; preds = %3
  %261 = load i32, i32* @x.1, align 4
  %262 = load i32, i32* @y.2, align 4
  %263 = add i32 %261, -1
  %264 = mul i32 %263, %261
  %265 = and i32 %264, 1
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %267, %266
  %269 = select i1 %268, i32 1540778344, i32 758607806
  br label %.backedge

270:                                              ; preds = %3
  %271 = sub i64 %.081, %.083
  %272 = sub i64 1, %.083
  %273 = add i64 %272, %.081
  %274 = mul nsw i64 %271, %273
  %.neg94 = sdiv i64 %274, -2
  %275 = load i64, i64* @ans, align 8
  %276 = add i64 %275, %.neg94
  store i64 %276, i64* @ans, align 8
  %277 = load i32, i32* @x.1, align 4
  %278 = load i32, i32* @y.2, align 4
  %279 = add i32 %277, -1
  %280 = mul i32 %279, %277
  %281 = and i32 %280, 1
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %283, %282
  %285 = select i1 %284, i32 714672230, i32 758607806
  br label %.backedge

286:                                              ; preds = %3
  br label %.backedge

287:                                              ; preds = %3
  %288 = load i32, i32* @x.1, align 4
  %289 = load i32, i32* @y.2, align 4
  %290 = add i32 %288, -1
  %291 = mul i32 %290, %288
  %292 = and i32 %291, 1
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %294, %293
  %296 = select i1 %295, i32 1038203545, i32 1541373362
  br label %.backedge

297:                                              ; preds = %3
  %298 = load i32, i32* @x.1, align 4
  %299 = load i32, i32* @y.2, align 4
  %300 = add i32 %298, -1
  %301 = mul i32 %300, %298
  %302 = and i32 %301, 1
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %304, %303
  %306 = select i1 %305, i32 -92613428, i32 1541373362
  br label %.backedge

307:                                              ; preds = %3
  br label %.backedge

308:                                              ; preds = %3
  %309 = load i64, i64* @ans, align 8
  %310 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %309)
  br label %.backedge

311:                                              ; preds = %3
  %312 = load i32, i32* @x.1, align 4
  %313 = load i32, i32* @y.2, align 4
  %314 = add i32 %312, -1
  %315 = mul i32 %314, %312
  %316 = and i32 %315, 1
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %318, %317
  %320 = select i1 %319, i32 808279415, i32 1905275656
  br label %.backedge

321:                                              ; preds = %3
  %322 = load i32, i32* @x.1, align 4
  %323 = load i32, i32* @y.2, align 4
  %324 = add i32 %322, -1
  %325 = mul i32 %324, %322
  %326 = and i32 %325, 1
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %328, %327
  %330 = select i1 %329, i32 1241307258, i32 1905275656
  br label %.backedge

331:                                              ; preds = %3
  store i32 0, i32* %1, align 4
  %.0..0..0. = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.

332:                                              ; preds = %3
  %333 = srem i64 %.087, 2
  %334 = sext i32 %.089 to i64
  %335 = getelementptr inbounds [200005 x [22 x i64]], [200005 x [22 x i64]]* @b, i64 0, i64 %334, i64 %.085
  store i64 %333, i64* %335, align 8
  %.neg93 = add i64 %.085, 1
  %336 = sdiv i64 %.087, 2
  br label %.backedge

337:                                              ; preds = %3
  %338 = sext i32 %.079 to i64
  %339 = getelementptr inbounds [200005 x [22 x i64]], [200005 x [22 x i64]]* @b, i64 0, i64 1, i64 %338
  %340 = load i64, i64* %339, align 8
  %341 = getelementptr inbounds [22 x i64], [22 x i64]* @c, i64 0, i64 %338
  %342 = load i64, i64* %341, align 8
  %343 = add i64 %342, %340
  store i64 %343, i64* %341, align 8
  br label %.backedge

344:                                              ; preds = %3
  br label %.backedge

345:                                              ; preds = %3
  br label %.backedge

346:                                              ; preds = %3
  br label %.backedge

347:                                              ; preds = %3
  br label %.backedge

348:                                              ; preds = %3
  %349 = sub i64 %.081, %.083
  %350 = sub i64 1, %.083
  %351 = add i64 %350, %.081
  %352 = mul nsw i64 %349, %351
  %.neg = sdiv i64 %352, -2
  %353 = load i64, i64* @ans, align 8
  %354 = add i64 %353, %.neg
  store i64 %354, i64* @ans, align 8
  br label %.backedge

355:                                              ; preds = %3
  br label %.backedge

356:                                              ; preds = %3
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"*, i32) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s697167828.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
