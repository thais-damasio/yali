; ModuleID = 'build_ollvm/programs/p03340/s982450022.ll'
source_filename = "Project_CodeNet_C++1400/p03340/s982450022.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@arr = global [1000000 x i32] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s982450022.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #5
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i32, align 4
  %9 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %10 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %11 = getelementptr i8, i8* %10, i64 -24
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %13
  %15 = bitcast i8* %14 to %"class.std::basic_ios"*
  %16 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %15, %"class.std::basic_ostream"* null)
  %17 = load i8*, i8** bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8**), align 8
  %18 = getelementptr i8, i8* %17, i64 -24
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_ostream"* @_ZSt4cout to i8*), i64 %20
  %22 = bitcast i8* %21 to %"class.std::basic_ios"*
  %23 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %22, %"class.std::basic_ostream"* null)
  %24 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %8)
  br label %25

25:                                               ; preds = %.backedge, %0
  %.0106 = phi i64 [ 0, %0 ], [ %.0106.be, %.backedge ]
  %.0104 = phi i64 [ 0, %0 ], [ %.0104.be, %.backedge ]
  %.0102 = phi i64 [ 0, %0 ], [ %.0102.be, %.backedge ]
  %.0100 = phi i64 [ 0, %0 ], [ %.0100.be, %.backedge ]
  %.098 = phi i32 [ 0, %0 ], [ %.098.be, %.backedge ]
  %.096 = phi i32 [ undef, %0 ], [ %.096.be, %.backedge ]
  %.094 = phi i32 [ undef, %0 ], [ %.094.be, %.backedge ]
  %.092 = phi i64 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i32 [ undef, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i32 [ 783962205, %0 ], [ %.088.be, %.backedge ]
  %.086 = phi i1 [ undef, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i1 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i1 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i1 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.088, label %.backedge [
    i32 783962205, label %26
    i32 623595175, label %30
    i32 1028670600, label %34
    i32 358655652, label %35
    i32 354743917, label %45
    i32 -767856324, label %55
    i32 -1408308430, label %56
    i32 1345195251, label %66
    i32 -2114858078, label %78
    i32 -2035124480, label %80
    i32 -1007622418, label %87
    i32 147451020, label %88
    i32 -60121387, label %98
    i32 621811073, label %110
    i32 -1849885949, label %112
    i32 1639904457, label %117
    i32 1620488664, label %127
    i32 -2039161543, label %137
    i32 -873281374, label %139
    i32 -1236353370, label %142
    i32 -1870438689, label %143
    i32 -1938555652, label %147
    i32 561890875, label %157
    i32 2129712146, label %171
    i32 2000750343, label %173
    i32 -1767943961, label %177
    i32 966630261, label %185
    i32 -783077723, label %195
    i32 1034937990, label %205
    i32 1135395002, label %206
    i32 960546619, label %208
    i32 -1208160282, label %217
    i32 -1251790833, label %227
    i32 1712876853, label %240
    i32 -1495575694, label %241
    i32 -1043105492, label %242
    i32 971496944, label %252
    i32 91883202, label %264
    i32 1880941281, label %266
    i32 -989833628, label %272
    i32 916717054, label %282
    i32 -1166069211, label %294
    i32 1461623900, label %296
    i32 274223532, label %304
    i32 -1726445454, label %305
    i32 1677640053, label %307
    i32 -1750949485, label %317
    i32 -2046130776, label %333
    i32 -1014275418, label %334
    i32 -2026004238, label %336
    i32 -478473197, label %337
    i32 835855455, label %347
    i32 856001777, label %358
    i32 1445919644, label %359
    i32 1321655949, label %362
    i32 239564897, label %363
    i32 614731904, label %364
    i32 249134316, label %365
    i32 1575934657, label %366
    i32 321441871, label %367
    i32 1427177100, label %368
    i32 -687240722, label %372
    i32 96073699, label %373
    i32 -1140398854, label %374
    i32 1634917312, label %383
  ]

.backedge:                                        ; preds = %25, %383, %374, %373, %372, %368, %367, %366, %365, %364, %363, %362, %358, %347, %337, %336, %334, %333, %317, %307, %305, %304, %296, %294, %282, %272, %266, %264, %252, %242, %241, %240, %227, %217, %208, %206, %205, %195, %185, %177, %173, %171, %157, %147, %143, %142, %139, %137, %127, %117, %112, %110, %98, %88, %87, %80, %78, %66, %56, %55, %45, %35, %34, %30, %26
  %.0106.be = phi i64 [ %.0106, %25 ], [ %.0106, %383 ], [ %.0106, %374 ], [ %.0106, %373 ], [ %.0106, %372 ], [ %.neg110, %368 ], [ %.0106, %367 ], [ %.0106, %366 ], [ %.0106, %365 ], [ %.0106, %364 ], [ %.0106, %363 ], [ %.0106, %362 ], [ %.0106, %358 ], [ %.0106, %347 ], [ %.0106, %337 ], [ %.0106, %336 ], [ %335, %334 ], [ %.0106, %333 ], [ %.0106, %317 ], [ %.0106, %307 ], [ %.0106, %305 ], [ %.0106, %304 ], [ %.0106, %296 ], [ %.0106, %294 ], [ %.0106, %282 ], [ %.0106, %272 ], [ %.0106, %266 ], [ %.0106, %264 ], [ %.0106, %252 ], [ %.0106, %242 ], [ %.0106, %241 ], [ %.0106, %240 ], [ %230, %227 ], [ %.0106, %217 ], [ %.0106, %208 ], [ %.0106, %206 ], [ %.0106, %205 ], [ %.0106, %195 ], [ %.0106, %185 ], [ %.0106, %177 ], [ %.0106, %173 ], [ %.0106, %171 ], [ %.0106, %157 ], [ %.0106, %147 ], [ %.0106, %143 ], [ %.0106, %142 ], [ %.0106, %139 ], [ %.0106, %137 ], [ %.0106, %127 ], [ %.0106, %117 ], [ %.0106, %112 ], [ %.0106, %110 ], [ %.0106, %98 ], [ %.0106, %88 ], [ %.0106, %87 ], [ %.0106, %80 ], [ %.0106, %78 ], [ %.0106, %66 ], [ %.0106, %56 ], [ %.0106, %55 ], [ %.0106, %45 ], [ %.0106, %35 ], [ %.0106, %34 ], [ %.0106, %30 ], [ %.0106, %26 ]
  %.0104.be = phi i64 [ %.0104, %25 ], [ %.0104, %383 ], [ %375, %374 ], [ %.0104, %373 ], [ %.0104, %372 ], [ %.0104, %368 ], [ %.0104, %367 ], [ %.0104, %366 ], [ %.0104, %365 ], [ %.0104, %364 ], [ %.0104, %363 ], [ %.0104, %362 ], [ %.0104, %358 ], [ %.0104, %347 ], [ %.0104, %337 ], [ %.0104, %336 ], [ %.0104, %334 ], [ %.0104, %333 ], [ %.neg111, %317 ], [ %.0104, %307 ], [ %.0104, %305 ], [ %.0104, %304 ], [ %.0104, %296 ], [ %.0104, %294 ], [ %.0104, %282 ], [ %.0104, %272 ], [ %.0104, %266 ], [ %.0104, %264 ], [ %.0104, %252 ], [ %.0104, %242 ], [ %.0104, %241 ], [ %.0104, %240 ], [ %.0104, %227 ], [ %.0104, %217 ], [ %209, %208 ], [ %.0104, %206 ], [ %.0104, %205 ], [ %.0104, %195 ], [ %.0104, %185 ], [ %.0104, %177 ], [ %.0104, %173 ], [ %.0104, %171 ], [ %.0104, %157 ], [ %.0104, %147 ], [ %.0104, %143 ], [ 0, %142 ], [ %.0104, %139 ], [ %.0104, %137 ], [ %.0104, %127 ], [ %.0104, %117 ], [ %.0104, %112 ], [ %.0104, %110 ], [ %.0104, %98 ], [ %.0104, %88 ], [ %.0104, %87 ], [ 1, %80 ], [ %.0104, %78 ], [ %.0104, %66 ], [ %.0104, %56 ], [ %.0104, %55 ], [ %.0104, %45 ], [ %.0104, %35 ], [ %.0104, %34 ], [ %.0104, %30 ], [ %.0104, %26 ]
  %.0102.be = phi i64 [ %.0102, %25 ], [ %.0102, %383 ], [ %380, %374 ], [ %.0102, %373 ], [ %.0102, %372 ], [ %.0102, %368 ], [ %.0102, %367 ], [ %.0102, %366 ], [ %.0102, %365 ], [ %.0102, %364 ], [ %.0102, %363 ], [ %.0102, %362 ], [ %.0102, %358 ], [ %.0102, %347 ], [ %.0102, %337 ], [ %.0102, %336 ], [ %.0102, %334 ], [ %.0102, %333 ], [ %322, %317 ], [ %.0102, %307 ], [ %.0102, %305 ], [ %.0102, %304 ], [ %.0102, %296 ], [ %.0102, %294 ], [ %.0102, %282 ], [ %.0102, %272 ], [ %.0102, %266 ], [ %.0102, %264 ], [ %.0102, %252 ], [ %.0102, %242 ], [ %.0102, %241 ], [ %.0102, %240 ], [ %.0102, %227 ], [ %.0102, %217 ], [ %214, %208 ], [ %.0102, %206 ], [ %.0102, %205 ], [ %.0102, %195 ], [ %.0102, %185 ], [ %.0102, %177 ], [ %.0102, %173 ], [ %.0102, %171 ], [ %.0102, %157 ], [ %.0102, %147 ], [ %.0102, %143 ], [ %.0102, %142 ], [ %.0102, %139 ], [ %.0102, %137 ], [ %.0102, %127 ], [ %.0102, %117 ], [ %.0102, %112 ], [ %.0102, %110 ], [ %.0102, %98 ], [ %.0102, %88 ], [ %.0102, %87 ], [ %84, %80 ], [ %.0102, %78 ], [ %.0102, %66 ], [ %.0102, %56 ], [ %.0102, %55 ], [ %.0102, %45 ], [ %.0102, %35 ], [ %.0102, %34 ], [ %.0102, %30 ], [ %.0102, %26 ]
  %.0100.be = phi i64 [ %.0100, %25 ], [ %.0100, %383 ], [ %381, %374 ], [ %.0100, %373 ], [ %.0100, %372 ], [ %.0100, %368 ], [ %.0100, %367 ], [ %.0100, %366 ], [ %.0100, %365 ], [ %.0100, %364 ], [ %.0100, %363 ], [ %.0100, %362 ], [ %.0100, %358 ], [ %.0100, %347 ], [ %.0100, %337 ], [ %.0100, %336 ], [ %.0100, %334 ], [ %.0100, %333 ], [ %323, %317 ], [ %.0100, %307 ], [ %.0100, %305 ], [ %.0100, %304 ], [ %.0100, %296 ], [ %.0100, %294 ], [ %.0100, %282 ], [ %.0100, %272 ], [ %.0100, %266 ], [ %.0100, %264 ], [ %.0100, %252 ], [ %.0100, %242 ], [ %.0100, %241 ], [ %.0100, %240 ], [ %.0100, %227 ], [ %.0100, %217 ], [ %215, %208 ], [ %.0100, %206 ], [ %.0100, %205 ], [ %.0100, %195 ], [ %.0100, %185 ], [ %.0100, %177 ], [ %.0100, %173 ], [ %.0100, %171 ], [ %.0100, %157 ], [ %.0100, %147 ], [ %.0100, %143 ], [ %.0100, %142 ], [ %.0100, %139 ], [ %.0100, %137 ], [ %.0100, %127 ], [ %.0100, %117 ], [ %.0100, %112 ], [ %.0100, %110 ], [ %.0100, %98 ], [ %.0100, %88 ], [ %.0100, %87 ], [ %84, %80 ], [ %.0100, %78 ], [ %.0100, %66 ], [ %.0100, %56 ], [ %.0100, %55 ], [ %.0100, %45 ], [ %.0100, %35 ], [ %.0100, %34 ], [ %.0100, %30 ], [ %.0100, %26 ]
  %.098.be = phi i32 [ %.098, %25 ], [ %.098, %383 ], [ %.098, %374 ], [ %.098, %373 ], [ %.098, %372 ], [ %.098, %368 ], [ %.098, %367 ], [ %.098, %366 ], [ %.098, %365 ], [ %.098, %364 ], [ %.098, %363 ], [ %.098, %362 ], [ %.098, %358 ], [ %.098, %347 ], [ %.098, %337 ], [ %.098, %336 ], [ %.098, %334 ], [ %.098, %333 ], [ %.098, %317 ], [ %.098, %307 ], [ %.098, %305 ], [ %.098, %304 ], [ %.098, %296 ], [ %.098, %294 ], [ %.098, %282 ], [ %.098, %272 ], [ %.098, %266 ], [ %.098, %264 ], [ %.098, %252 ], [ %.098, %242 ], [ %.098, %241 ], [ %.098, %240 ], [ %.098, %227 ], [ %.098, %217 ], [ %.098, %208 ], [ %.098, %206 ], [ %.098, %205 ], [ %.098, %195 ], [ %.098, %185 ], [ %.098, %177 ], [ %.098, %173 ], [ %.098, %171 ], [ %.098, %157 ], [ %.098, %147 ], [ %.098, %143 ], [ %.098, %142 ], [ %.098, %139 ], [ %.098, %137 ], [ %.098, %127 ], [ %.098, %117 ], [ %.098, %112 ], [ %.098, %110 ], [ %.098, %98 ], [ %.098, %88 ], [ %.098, %87 ], [ %.098, %80 ], [ %.098, %78 ], [ %.098, %66 ], [ %.098, %56 ], [ %.098, %55 ], [ %.098, %45 ], [ %.098, %35 ], [ %.neg117, %34 ], [ %.098, %30 ], [ %.098, %26 ]
  %.096.be = phi i32 [ %.096, %25 ], [ %384, %383 ], [ %.096, %374 ], [ %.096, %373 ], [ %.096, %372 ], [ %.090, %368 ], [ %.096, %367 ], [ %.096, %366 ], [ %.096, %365 ], [ %.096, %364 ], [ %.096, %363 ], [ 0, %362 ], [ %.096, %358 ], [ %348, %347 ], [ %.096, %337 ], [ %.096, %336 ], [ %.096, %334 ], [ %.096, %333 ], [ %.096, %317 ], [ %.096, %307 ], [ %.096, %305 ], [ %.096, %304 ], [ %.096, %296 ], [ %.096, %294 ], [ %.096, %282 ], [ %.096, %272 ], [ %.096, %266 ], [ %.096, %264 ], [ %.096, %252 ], [ %.096, %242 ], [ %.096, %241 ], [ %.096, %240 ], [ %.090, %227 ], [ %.096, %217 ], [ %.096, %208 ], [ %.096, %206 ], [ %.096, %205 ], [ %.096, %195 ], [ %.096, %185 ], [ %.096, %177 ], [ %.096, %173 ], [ %.096, %171 ], [ %.096, %157 ], [ %.096, %147 ], [ %.096, %143 ], [ %.096, %142 ], [ %.096, %139 ], [ %.096, %137 ], [ %.096, %127 ], [ %.096, %117 ], [ %.096, %112 ], [ %.096, %110 ], [ %.096, %98 ], [ %.096, %88 ], [ %.096, %87 ], [ %.096, %80 ], [ %.096, %78 ], [ %.096, %66 ], [ %.096, %56 ], [ %.096, %55 ], [ 0, %45 ], [ %.096, %35 ], [ %.096, %34 ], [ %.096, %30 ], [ %.096, %26 ]
  %.094.be = phi i32 [ %.094, %25 ], [ %.094, %383 ], [ %382, %374 ], [ %.094, %373 ], [ %.094, %372 ], [ %.094, %368 ], [ %.094, %367 ], [ %.094, %366 ], [ %.094, %365 ], [ %.094, %364 ], [ %.094, %363 ], [ %.094, %362 ], [ %.094, %358 ], [ %.094, %347 ], [ %.094, %337 ], [ %.094, %336 ], [ %.094, %334 ], [ %.094, %333 ], [ %.neg112, %317 ], [ %.094, %307 ], [ %.094, %305 ], [ %.094, %304 ], [ %.094, %296 ], [ %.094, %294 ], [ %.094, %282 ], [ %.094, %272 ], [ %.094, %266 ], [ %.094, %264 ], [ %.094, %252 ], [ %.094, %242 ], [ %.094, %241 ], [ %.094, %240 ], [ %.094, %227 ], [ %.094, %217 ], [ %216, %208 ], [ %.094, %206 ], [ %.094, %205 ], [ %.094, %195 ], [ %.094, %185 ], [ %.094, %177 ], [ %.094, %173 ], [ %.094, %171 ], [ %.094, %157 ], [ %.094, %147 ], [ %.094, %143 ], [ %.094, %142 ], [ %141, %139 ], [ %.094, %137 ], [ %.094, %127 ], [ %.094, %117 ], [ %.094, %112 ], [ %.094, %110 ], [ %.094, %98 ], [ %.094, %88 ], [ %.094, %87 ], [ %.neg116, %80 ], [ %.094, %78 ], [ %.094, %66 ], [ %.094, %56 ], [ %.094, %55 ], [ %.094, %45 ], [ %.094, %35 ], [ %.094, %34 ], [ %.094, %30 ], [ %.094, %26 ]
  %.092.be = phi i64 [ %.092, %25 ], [ %.092, %383 ], [ %.092, %374 ], [ %.092, %373 ], [ %.092, %372 ], [ %.092, %368 ], [ %.092, %367 ], [ %.092, %366 ], [ %.092, %365 ], [ %.092, %364 ], [ %.092, %363 ], [ %.092, %362 ], [ %.092, %358 ], [ %.092, %347 ], [ %.092, %337 ], [ %.092, %336 ], [ %.092, %334 ], [ %.092, %333 ], [ %.092, %317 ], [ %.092, %307 ], [ %.092, %305 ], [ %.092, %304 ], [ %.092, %296 ], [ %.092, %294 ], [ %.092, %282 ], [ %.092, %272 ], [ %.092, %266 ], [ %.092, %264 ], [ %.092, %252 ], [ %.092, %242 ], [ %.092, %241 ], [ %.092, %240 ], [ %.092, %227 ], [ %.092, %217 ], [ %.092, %208 ], [ %.092, %206 ], [ %.092, %205 ], [ %.092, %195 ], [ %.092, %185 ], [ %.092, %177 ], [ %.092, %173 ], [ %.092, %171 ], [ %.092, %157 ], [ %.092, %147 ], [ %.092, %143 ], [ %.092, %142 ], [ %140, %139 ], [ %.092, %137 ], [ %.092, %127 ], [ %.092, %117 ], [ %.092, %112 ], [ %.092, %110 ], [ %.092, %98 ], [ %.092, %88 ], [ 1, %87 ], [ %.092, %80 ], [ %.092, %78 ], [ %.092, %66 ], [ %.092, %56 ], [ %.092, %55 ], [ %.092, %45 ], [ %.092, %35 ], [ %.092, %34 ], [ %.092, %30 ], [ %.092, %26 ]
  %.090.be = phi i32 [ %.090, %25 ], [ %.090, %383 ], [ %.090, %374 ], [ %.090, %373 ], [ %.090, %372 ], [ %.090, %368 ], [ %.090, %367 ], [ %.090, %366 ], [ %.090, %365 ], [ %.090, %364 ], [ %.090, %363 ], [ %.090, %362 ], [ %.090, %358 ], [ %.090, %347 ], [ %.090, %337 ], [ %.090, %336 ], [ %.090, %334 ], [ %.090, %333 ], [ %.090, %317 ], [ %.090, %307 ], [ %.090, %305 ], [ %.090, %304 ], [ %.090, %296 ], [ %.090, %294 ], [ %.090, %282 ], [ %.090, %272 ], [ %.090, %266 ], [ %.090, %264 ], [ %.090, %252 ], [ %.090, %242 ], [ %.090, %241 ], [ %.090, %240 ], [ %.090, %227 ], [ %.090, %217 ], [ %.090, %208 ], [ %.090, %206 ], [ %.090, %205 ], [ %.090, %195 ], [ %.090, %185 ], [ %.090, %177 ], [ %.090, %173 ], [ %.090, %171 ], [ %.090, %157 ], [ %.090, %147 ], [ %.090, %143 ], [ %.090, %142 ], [ %.094, %139 ], [ %.090, %137 ], [ %.090, %127 ], [ %.090, %117 ], [ %.090, %112 ], [ %.090, %110 ], [ %.090, %98 ], [ %.090, %88 ], [ %.096, %87 ], [ %.090, %80 ], [ %.090, %78 ], [ %.090, %66 ], [ %.090, %56 ], [ %.090, %55 ], [ %.090, %45 ], [ %.090, %35 ], [ %.090, %34 ], [ %.090, %30 ], [ %.090, %26 ]
  %.088.be = phi i32 [ %.088, %25 ], [ 835855455, %383 ], [ -1750949485, %374 ], [ 916717054, %373 ], [ 971496944, %372 ], [ -1251790833, %368 ], [ -783077723, %367 ], [ 561890875, %366 ], [ 1620488664, %365 ], [ -60121387, %364 ], [ 1345195251, %363 ], [ 354743917, %362 ], [ -1408308430, %358 ], [ %357, %347 ], [ %346, %337 ], [ -478473197, %336 ], [ -2026004238, %334 ], [ -1043105492, %333 ], [ %332, %317 ], [ %316, %307 ], [ %306, %305 ], [ -1726445454, %304 ], [ 274223532, %296 ], [ %295, %294 ], [ %293, %282 ], [ %281, %272 ], [ %271, %266 ], [ %265, %264 ], [ %263, %252 ], [ %251, %242 ], [ -1043105492, %241 ], [ -2026004238, %240 ], [ %239, %227 ], [ %226, %217 ], [ -1870438689, %208 ], [ %207, %206 ], [ 1135395002, %205 ], [ %204, %195 ], [ %194, %185 ], [ 966630261, %177 ], [ %176, %173 ], [ %172, %171 ], [ %170, %157 ], [ %156, %147 ], [ %146, %143 ], [ -1870438689, %142 ], [ 147451020, %139 ], [ %138, %137 ], [ %136, %127 ], [ %126, %117 ], [ 1639904457, %112 ], [ %111, %110 ], [ %109, %98 ], [ %97, %88 ], [ 147451020, %87 ], [ %86, %80 ], [ %79, %78 ], [ %77, %66 ], [ %65, %56 ], [ -1408308430, %55 ], [ %54, %45 ], [ %44, %35 ], [ 783962205, %34 ], [ 1028670600, %30 ], [ %29, %26 ]
  %.086.be = phi i1 [ %.086, %25 ], [ %.086, %383 ], [ %.086, %374 ], [ %.086, %373 ], [ %.086, %372 ], [ %.086, %368 ], [ %.086, %367 ], [ %.086, %366 ], [ %.086, %365 ], [ %.086, %364 ], [ %.086, %363 ], [ %.086, %362 ], [ %.086, %358 ], [ %.086, %347 ], [ %.086, %337 ], [ %.086, %336 ], [ %.086, %334 ], [ %.086, %333 ], [ %.086, %317 ], [ %.086, %307 ], [ %.086, %305 ], [ %.086, %304 ], [ %.086, %296 ], [ %.086, %294 ], [ %.086, %282 ], [ %.086, %272 ], [ %.086, %266 ], [ %.086, %264 ], [ %.086, %252 ], [ %.086, %242 ], [ %.086, %241 ], [ %.086, %240 ], [ %.086, %227 ], [ %.086, %217 ], [ %.086, %208 ], [ %.086, %206 ], [ %.086, %205 ], [ %.086, %195 ], [ %.086, %185 ], [ %.086, %177 ], [ %.086, %173 ], [ %.086, %171 ], [ %.086, %157 ], [ %.086, %147 ], [ %.086, %143 ], [ %.086, %142 ], [ %.086, %139 ], [ %.086, %137 ], [ %.086, %127 ], [ %.086, %117 ], [ %116, %112 ], [ false, %110 ], [ %.086, %98 ], [ %.086, %88 ], [ %.086, %87 ], [ %.086, %80 ], [ %.086, %78 ], [ %.086, %66 ], [ %.086, %56 ], [ %.086, %55 ], [ %.086, %45 ], [ %.086, %35 ], [ %.086, %34 ], [ %.086, %30 ], [ %.086, %26 ]
  %.084.be = phi i1 [ %.084, %25 ], [ %.084, %383 ], [ %.084, %374 ], [ %.084, %373 ], [ %.084, %372 ], [ %.084, %368 ], [ %.084, %367 ], [ %.084, %366 ], [ %.084, %365 ], [ %.084, %364 ], [ %.084, %363 ], [ %.084, %362 ], [ %.084, %358 ], [ %.084, %347 ], [ %.084, %337 ], [ %.084, %336 ], [ %.084, %334 ], [ %.084, %333 ], [ %.084, %317 ], [ %.084, %307 ], [ %.084, %305 ], [ %.084, %304 ], [ %.084, %296 ], [ %.084, %294 ], [ %.084, %282 ], [ %.084, %272 ], [ %.084, %266 ], [ %.084, %264 ], [ %.084, %252 ], [ %.084, %242 ], [ %.084, %241 ], [ %.084, %240 ], [ %.084, %227 ], [ %.084, %217 ], [ %.084, %208 ], [ %.084, %206 ], [ %.084, %205 ], [ %.084, %195 ], [ %.084, %185 ], [ %184, %177 ], [ false, %173 ], [ %.084, %171 ], [ %.084, %157 ], [ %.084, %147 ], [ %.084, %143 ], [ %.084, %142 ], [ %.084, %139 ], [ %.084, %137 ], [ %.084, %127 ], [ %.084, %117 ], [ %.084, %112 ], [ %.084, %110 ], [ %.084, %98 ], [ %.084, %88 ], [ %.084, %87 ], [ %.084, %80 ], [ %.084, %78 ], [ %.084, %66 ], [ %.084, %56 ], [ %.084, %55 ], [ %.084, %45 ], [ %.084, %35 ], [ %.084, %34 ], [ %.084, %30 ], [ %.084, %26 ]
  %.082.be = phi i1 [ %.082, %25 ], [ %.082, %383 ], [ %.082, %374 ], [ %.082, %373 ], [ %.082, %372 ], [ %.082, %368 ], [ %.082, %367 ], [ %.082, %366 ], [ %.082, %365 ], [ %.082, %364 ], [ %.082, %363 ], [ %.082, %362 ], [ %.082, %358 ], [ %.082, %347 ], [ %.082, %337 ], [ %.082, %336 ], [ %.082, %334 ], [ %.082, %333 ], [ %.082, %317 ], [ %.082, %307 ], [ %.082, %305 ], [ %.082, %304 ], [ %.082, %296 ], [ %.082, %294 ], [ %.082, %282 ], [ %.082, %272 ], [ %.082, %266 ], [ %.082, %264 ], [ %.082, %252 ], [ %.082, %242 ], [ %.082, %241 ], [ %.082, %240 ], [ %.082, %227 ], [ %.082, %217 ], [ %.082, %208 ], [ %.082, %206 ], [ %.0..0..0.79, %205 ], [ %.082, %195 ], [ %.082, %185 ], [ %.082, %177 ], [ %.082, %173 ], [ true, %171 ], [ %.082, %157 ], [ %.082, %147 ], [ %.082, %143 ], [ %.082, %142 ], [ %.082, %139 ], [ %.082, %137 ], [ %.082, %127 ], [ %.082, %117 ], [ %.082, %112 ], [ %.082, %110 ], [ %.082, %98 ], [ %.082, %88 ], [ %.082, %87 ], [ %.082, %80 ], [ %.082, %78 ], [ %.082, %66 ], [ %.082, %56 ], [ %.082, %55 ], [ %.082, %45 ], [ %.082, %35 ], [ %.082, %34 ], [ %.082, %30 ], [ %.082, %26 ]
  %.080.be = phi i1 [ %.080, %25 ], [ %.080, %383 ], [ %.080, %374 ], [ %.080, %373 ], [ %.080, %372 ], [ %.080, %368 ], [ %.080, %367 ], [ %.080, %366 ], [ %.080, %365 ], [ %.080, %364 ], [ %.080, %363 ], [ %.080, %362 ], [ %.080, %358 ], [ %.080, %347 ], [ %.080, %337 ], [ %.080, %336 ], [ %.080, %334 ], [ %.080, %333 ], [ %.080, %317 ], [ %.080, %307 ], [ %.080, %305 ], [ %.080, %304 ], [ %303, %296 ], [ false, %294 ], [ %.080, %282 ], [ %.080, %272 ], [ %.080, %266 ], [ %.080, %264 ], [ %.080, %252 ], [ %.080, %242 ], [ %.080, %241 ], [ %.080, %240 ], [ %.080, %227 ], [ %.080, %217 ], [ %.080, %208 ], [ %.080, %206 ], [ %.080, %205 ], [ %.080, %195 ], [ %.080, %185 ], [ %.080, %177 ], [ %.080, %173 ], [ %.080, %171 ], [ %.080, %157 ], [ %.080, %147 ], [ %.080, %143 ], [ %.080, %142 ], [ %.080, %139 ], [ %.080, %137 ], [ %.080, %127 ], [ %.080, %117 ], [ %.080, %112 ], [ %.080, %110 ], [ %.080, %98 ], [ %.080, %88 ], [ %.080, %87 ], [ %.080, %80 ], [ %.080, %78 ], [ %.080, %66 ], [ %.080, %56 ], [ %.080, %55 ], [ %.080, %45 ], [ %.080, %35 ], [ %.080, %34 ], [ %.080, %30 ], [ %.080, %26 ]
  %.0.be = phi i1 [ %.0, %25 ], [ %.0, %383 ], [ %.0, %374 ], [ %.0, %373 ], [ %.0, %372 ], [ %.0, %368 ], [ %.0, %367 ], [ %.0, %366 ], [ %.0, %365 ], [ %.0, %364 ], [ %.0, %363 ], [ %.0, %362 ], [ %.0, %358 ], [ %.0, %347 ], [ %.0, %337 ], [ %.0, %336 ], [ %.0, %334 ], [ %.0, %333 ], [ %.0, %317 ], [ %.0, %307 ], [ %.0, %305 ], [ %.080, %304 ], [ %.0, %296 ], [ %.0, %294 ], [ %.0, %282 ], [ %.0, %272 ], [ true, %266 ], [ %.0, %264 ], [ %.0, %252 ], [ %.0, %242 ], [ %.0, %241 ], [ %.0, %240 ], [ %.0, %227 ], [ %.0, %217 ], [ %.0, %208 ], [ %.0, %206 ], [ %.0, %205 ], [ %.0, %195 ], [ %.0, %185 ], [ %.0, %177 ], [ %.0, %173 ], [ %.0, %171 ], [ %.0, %157 ], [ %.0, %147 ], [ %.0, %143 ], [ %.0, %142 ], [ %.0, %139 ], [ %.0, %137 ], [ %.0, %127 ], [ %.0, %117 ], [ %.0, %112 ], [ %.0, %110 ], [ %.0, %98 ], [ %.0, %88 ], [ %.0, %87 ], [ %.0, %80 ], [ %.0, %78 ], [ %.0, %66 ], [ %.0, %56 ], [ %.0, %55 ], [ %.0, %45 ], [ %.0, %35 ], [ %.0, %34 ], [ %.0, %30 ], [ %.0, %26 ]
  br label %25

26:                                               ; preds = %25
  %27 = load i32, i32* %8, align 4
  %28 = icmp slt i32 %.098, %27
  %29 = select i1 %28, i32 623595175, i32 358655652
  br label %.backedge

30:                                               ; preds = %25
  %31 = sext i32 %.098 to i64
  %32 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %31
  %33 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %32)
  br label %.backedge

34:                                               ; preds = %25
  %.neg117 = add i32 %.098, 1
  br label %.backedge

35:                                               ; preds = %25
  %36 = load i32, i32* @x.1, align 4
  %37 = load i32, i32* @y.2, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 354743917, i32 1321655949
  br label %.backedge

45:                                               ; preds = %25
  %46 = load i32, i32* @x.1, align 4
  %47 = load i32, i32* @y.2, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -767856324, i32 1321655949
  br label %.backedge

55:                                               ; preds = %25
  br label %.backedge

56:                                               ; preds = %25
  %57 = load i32, i32* @x.1, align 4
  %58 = load i32, i32* @y.2, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 1345195251, i32 239564897
  br label %.backedge

66:                                               ; preds = %25
  %67 = load i32, i32* %8, align 4
  %68 = icmp slt i32 %.096, %67
  store i1 %68, i1* %7, align 1
  %69 = load i32, i32* @x.1, align 4
  %70 = load i32, i32* @y.2, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 -2114858078, i32 239564897
  br label %.backedge

78:                                               ; preds = %25
  %.0..0..0.73 = load volatile i1, i1* %7, align 1
  %79 = select i1 %.0..0..0.73, i32 -2035124480, i32 1445919644
  br label %.backedge

80:                                               ; preds = %25
  %.neg116 = add i32 %.096, 1
  %81 = sext i32 %.096 to i64
  %82 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = sext i32 %83 to i64
  %85 = icmp eq i32 %83, 0
  %86 = select i1 %85, i32 -1007622418, i32 -1495575694
  br label %.backedge

87:                                               ; preds = %25
  br label %.backedge

88:                                               ; preds = %25
  %89 = load i32, i32* @x.1, align 4
  %90 = load i32, i32* @y.2, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 -60121387, i32 614731904
  br label %.backedge

98:                                               ; preds = %25
  %99 = load i32, i32* %8, align 4
  %100 = icmp slt i32 %.094, %99
  store i1 %100, i1* %6, align 1
  %101 = load i32, i32* @x.1, align 4
  %102 = load i32, i32* @y.2, align 4
  %103 = add i32 %101, -1
  %104 = mul i32 %103, %101
  %105 = and i32 %104, 1
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %107, %106
  %109 = select i1 %108, i32 621811073, i32 614731904
  br label %.backedge

110:                                              ; preds = %25
  %.0..0..0.74 = load volatile i1, i1* %6, align 1
  %111 = select i1 %.0..0..0.74, i32 -1849885949, i32 1639904457
  br label %.backedge

112:                                              ; preds = %25
  %113 = sext i32 %.094 to i64
  %114 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, 0
  br label %.backedge

117:                                              ; preds = %25
  store i1 %.086, i1* %2, align 1
  %118 = load i32, i32* @x.1, align 4
  %119 = load i32, i32* @y.2, align 4
  %120 = add i32 %118, -1
  %121 = mul i32 %120, %118
  %122 = and i32 %121, 1
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %124, %123
  %126 = select i1 %125, i32 1620488664, i32 249134316
  br label %.backedge

127:                                              ; preds = %25
  %128 = load i32, i32* @x.1, align 4
  %129 = load i32, i32* @y.2, align 4
  %130 = add i32 %128, -1
  %131 = mul i32 %130, %128
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %134, %133
  %136 = select i1 %135, i32 -2039161543, i32 249134316
  br label %.backedge

137:                                              ; preds = %25
  %.0..0..0.78 = load volatile i1, i1* %2, align 1
  %138 = select i1 %.0..0..0.78, i32 -873281374, i32 -1236353370
  br label %.backedge

139:                                              ; preds = %25
  %140 = add i64 %.092, 1
  %141 = add i32 %.094, 1
  br label %.backedge

142:                                              ; preds = %25
  br label %.backedge

143:                                              ; preds = %25
  %144 = load i32, i32* %8, align 4
  %145 = icmp slt i32 %.094, %144
  %146 = select i1 %145, i32 -1938555652, i32 2000750343
  br label %.backedge

147:                                              ; preds = %25
  %148 = load i32, i32* @x.1, align 4
  %149 = load i32, i32* @y.2, align 4
  %150 = add i32 %148, -1
  %151 = mul i32 %150, %148
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 561890875, i32 1575934657
  br label %.backedge

157:                                              ; preds = %25
  %158 = sext i32 %.094 to i64
  %159 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %160, 0
  store i1 %161, i1* %5, align 1
  %162 = load i32, i32* @x.1, align 4
  %163 = load i32, i32* @y.2, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 2129712146, i32 1575934657
  br label %.backedge

171:                                              ; preds = %25
  %.0..0..0.75 = load volatile i1, i1* %5, align 1
  %172 = select i1 %.0..0..0.75, i32 1135395002, i32 2000750343
  br label %.backedge

173:                                              ; preds = %25
  %174 = load i32, i32* %8, align 4
  %175 = icmp slt i32 %.094, %174
  %176 = select i1 %175, i32 -1767943961, i32 966630261
  br label %.backedge

177:                                              ; preds = %25
  %178 = sext i32 %.094 to i64
  %179 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = sext i32 %180 to i64
  %182 = add i64 %.0102, %181
  %183 = xor i64 %.0100, %181
  %184 = icmp eq i64 %182, %183
  br label %.backedge

185:                                              ; preds = %25
  store i1 %.084, i1* %1, align 1
  %186 = load i32, i32* @x.1, align 4
  %187 = load i32, i32* @y.2, align 4
  %188 = add i32 %186, -1
  %189 = mul i32 %188, %186
  %190 = and i32 %189, 1
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %192, %191
  %194 = select i1 %193, i32 -783077723, i32 321441871
  br label %.backedge

195:                                              ; preds = %25
  %196 = load i32, i32* @x.1, align 4
  %197 = load i32, i32* @y.2, align 4
  %198 = add i32 %196, -1
  %199 = mul i32 %198, %196
  %200 = and i32 %199, 1
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %202, %201
  %204 = select i1 %203, i32 1034937990, i32 321441871
  br label %.backedge

205:                                              ; preds = %25
  %.0..0..0.79 = load volatile i1, i1* %1, align 1
  br label %.backedge

206:                                              ; preds = %25
  %207 = select i1 %.082, i32 960546619, i32 -1208160282
  br label %.backedge

208:                                              ; preds = %25
  %209 = add i64 %.0104, 1
  %210 = sext i32 %.094 to i64
  %211 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = sext i32 %212 to i64
  %214 = add i64 %.0102, %213
  %215 = xor i64 %.0100, %213
  %216 = add i32 %.094, 1
  br label %.backedge

217:                                              ; preds = %25
  %218 = load i32, i32* @x.1, align 4
  %219 = load i32, i32* @y.2, align 4
  %220 = add i32 %218, -1
  %221 = mul i32 %220, %218
  %222 = and i32 %221, 1
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %224, %223
  %226 = select i1 %225, i32 -1251790833, i32 1427177100
  br label %.backedge

227:                                              ; preds = %25
  %.neg113 = add i64 %.092, 1
  %228 = mul nsw i64 %.neg113, %.092
  %.neg114.neg = sdiv i64 %228, 2
  %229 = mul nsw i64 %.092, %.0104
  %.neg115.neg = add i64 %229, %.0106
  %230 = add i64 %.neg115.neg, %.neg114.neg
  %231 = load i32, i32* @x.1, align 4
  %232 = load i32, i32* @y.2, align 4
  %233 = add i32 %231, -1
  %234 = mul i32 %233, %231
  %235 = and i32 %234, 1
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %237, %236
  %239 = select i1 %238, i32 1712876853, i32 1427177100
  br label %.backedge

240:                                              ; preds = %25
  br label %.backedge

241:                                              ; preds = %25
  br label %.backedge

242:                                              ; preds = %25
  %243 = load i32, i32* @x.1, align 4
  %244 = load i32, i32* @y.2, align 4
  %245 = add i32 %243, -1
  %246 = mul i32 %245, %243
  %247 = and i32 %246, 1
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %249, %248
  %251 = select i1 %250, i32 971496944, i32 -687240722
  br label %.backedge

252:                                              ; preds = %25
  %253 = load i32, i32* %8, align 4
  %254 = icmp slt i32 %.094, %253
  store i1 %254, i1* %4, align 1
  %255 = load i32, i32* @x.1, align 4
  %256 = load i32, i32* @y.2, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 91883202, i32 -687240722
  br label %.backedge

264:                                              ; preds = %25
  %.0..0..0.76 = load volatile i1, i1* %4, align 1
  %265 = select i1 %.0..0..0.76, i32 1880941281, i32 -989833628
  br label %.backedge

266:                                              ; preds = %25
  %267 = sext i32 %.094 to i64
  %268 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = icmp eq i32 %269, 0
  %271 = select i1 %270, i32 -1726445454, i32 -989833628
  br label %.backedge

272:                                              ; preds = %25
  %273 = load i32, i32* @x.1, align 4
  %274 = load i32, i32* @y.2, align 4
  %275 = add i32 %273, -1
  %276 = mul i32 %275, %273
  %277 = and i32 %276, 1
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %279, %278
  %281 = select i1 %280, i32 916717054, i32 96073699
  br label %.backedge

282:                                              ; preds = %25
  %283 = load i32, i32* %8, align 4
  %284 = icmp slt i32 %.094, %283
  store i1 %284, i1* %3, align 1
  %285 = load i32, i32* @x.1, align 4
  %286 = load i32, i32* @y.2, align 4
  %287 = add i32 %285, -1
  %288 = mul i32 %287, %285
  %289 = and i32 %288, 1
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %291, %290
  %293 = select i1 %292, i32 -1166069211, i32 96073699
  br label %.backedge

294:                                              ; preds = %25
  %.0..0..0.77 = load volatile i1, i1* %3, align 1
  %295 = select i1 %.0..0..0.77, i32 1461623900, i32 274223532
  br label %.backedge

296:                                              ; preds = %25
  %297 = sext i32 %.094 to i64
  %298 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %297
  %299 = load i32, i32* %298, align 4
  %300 = sext i32 %299 to i64
  %301 = add i64 %.0102, %300
  %302 = xor i64 %.0100, %300
  %303 = icmp eq i64 %301, %302
  br label %.backedge

304:                                              ; preds = %25
  br label %.backedge

305:                                              ; preds = %25
  %306 = select i1 %.0, i32 1677640053, i32 -1014275418
  br label %.backedge

307:                                              ; preds = %25
  %308 = load i32, i32* @x.1, align 4
  %309 = load i32, i32* @y.2, align 4
  %310 = add i32 %308, -1
  %311 = mul i32 %310, %308
  %312 = and i32 %311, 1
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %314, %313
  %316 = select i1 %315, i32 -1750949485, i32 -1140398854
  br label %.backedge

317:                                              ; preds = %25
  %.neg111 = add i64 %.0104, 1
  %318 = sext i32 %.094 to i64
  %319 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = sext i32 %320 to i64
  %322 = add i64 %.0102, %321
  %323 = xor i64 %.0100, %321
  %.neg112 = add i32 %.094, 1
  %324 = load i32, i32* @x.1, align 4
  %325 = load i32, i32* @y.2, align 4
  %326 = add i32 %324, -1
  %327 = mul i32 %326, %324
  %328 = and i32 %327, 1
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %330, %329
  %332 = select i1 %331, i32 -2046130776, i32 -1140398854
  br label %.backedge

333:                                              ; preds = %25
  br label %.backedge

334:                                              ; preds = %25
  %335 = add i64 %.0104, %.0106
  br label %.backedge

336:                                              ; preds = %25
  br label %.backedge

337:                                              ; preds = %25
  %338 = load i32, i32* @x.1, align 4
  %339 = load i32, i32* @y.2, align 4
  %340 = add i32 %338, -1
  %341 = mul i32 %340, %338
  %342 = and i32 %341, 1
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %344, %343
  %346 = select i1 %345, i32 835855455, i32 1634917312
  br label %.backedge

347:                                              ; preds = %25
  %348 = add i32 %.096, 1
  %349 = load i32, i32* @x.1, align 4
  %350 = load i32, i32* @y.2, align 4
  %351 = add i32 %349, -1
  %352 = mul i32 %351, %349
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %355, %354
  %357 = select i1 %356, i32 856001777, i32 1634917312
  br label %.backedge

358:                                              ; preds = %25
  br label %.backedge

359:                                              ; preds = %25
  %360 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %.0106)
  %361 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %360, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0

362:                                              ; preds = %25
  br label %.backedge

363:                                              ; preds = %25
  br label %.backedge

364:                                              ; preds = %25
  br label %.backedge

365:                                              ; preds = %25
  br label %.backedge

366:                                              ; preds = %25
  br label %.backedge

367:                                              ; preds = %25
  br label %.backedge

368:                                              ; preds = %25
  %.neg = add i64 %.092, 1
  %369 = mul nsw i64 %.neg, %.092
  %.neg108.neg = sdiv i64 %369, 2
  %370 = mul nsw i64 %.092, %.0104
  %371 = add i64 %370, %.0106
  %.neg110 = add i64 %371, %.neg108.neg
  br label %.backedge

372:                                              ; preds = %25
  br label %.backedge

373:                                              ; preds = %25
  br label %.backedge

374:                                              ; preds = %25
  %375 = add i64 %.0104, 1
  %376 = sext i32 %.094 to i64
  %377 = getelementptr inbounds [1000000 x i32], [1000000 x i32]* @arr, i64 0, i64 %376
  %378 = load i32, i32* %377, align 4
  %379 = sext i32 %378 to i64
  %380 = add i64 %.0102, %379
  %381 = xor i64 %.0100, %379
  %382 = add i32 %.094, 1
  br label %.backedge

383:                                              ; preds = %25
  %384 = add i32 %.096, 1
  br label %.backedge
}

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s982450022.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
