; ModuleID = 'build_ollvm/programs/p03837/s327880281.ll'
source_filename = "Project_CodeNet_C++1400/p03837/s327880281.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt4fillIPiiEvT_S1_RKT0_ = comdat any

$_ZSt10accumulateIPbiET0_T_S2_S1_ = comdat any

$_ZSt8__fill_aIPiiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_ = comdat any

$_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_ = comdat any

$_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@.str = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@_ZL3inf = internal constant i32 1001001001, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s327880281.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0
@x.15 = common local_unnamed_addr global i32 0
@y.16 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1141012415, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1141012415, label %11
    i32 -778465023, label %14
    i32 1584249446, label %25
    i32 377066990, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -778465023, i32 377066990
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 1584249446, i32 377066990
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ -778465023, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i32*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32* nonnull %9, i32* nonnull %10)
  %16 = load i32, i32* %9, align 4
  %17 = zext i32 %16 to i64
  store i64 %17, i64* %8, align 8
  %18 = call i8* @llvm.stacksave()
  %.0..0..0.81 = load volatile i64, i64* %8, align 8
  %19 = mul nuw i64 %.0..0..0.81, %17
  %20 = alloca i32, i64 %19, align 16
  %21 = load i32, i32* %9, align 4
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %7, align 8
  %.0..0..0.93 = load volatile i64, i64* %7, align 8
  %23 = mul nuw i64 %.0..0..0.93, %22
  %24 = alloca i8, i64 %23, align 16
  %.0..0..0.94 = load volatile i64, i64* %7, align 8
  %25 = mul nuw i64 %.0..0..0.94, %22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 0, i64 %25, i1 false)
  br label %26

26:                                               ; preds = %.backedge, %0
  %.0167 = phi i32 [ undef, %0 ], [ %.0167.be, %.backedge ]
  %.0165 = phi i32 [ undef, %0 ], [ %.0165.be, %.backedge ]
  %.0163 = phi i32 [ 0, %0 ], [ %.0163.be, %.backedge ]
  %.0161 = phi i32 [ undef, %0 ], [ %.0161.be, %.backedge ]
  %.0159 = phi i32 [ undef, %0 ], [ %.0159.be, %.backedge ]
  %.0157 = phi i32 [ undef, %0 ], [ %.0157.be, %.backedge ]
  %.0 = phi i32 [ -185069573, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -185069573, label %27
    i32 -287099676, label %31
    i32 -2097927359, label %41
    i32 -756918319, label %51
    i32 -806189692, label %62
    i32 -920157952, label %63
    i32 -730413429, label %73
    i32 -630450175, label %83
    i32 1768818132, label %84
    i32 320754016, label %88
    i32 1951870651, label %105
    i32 373390897, label %107
    i32 -1850115526, label %112
    i32 1610433513, label %116
    i32 548652310, label %126
    i32 1998674402, label %143
    i32 1888379052, label %144
    i32 810519571, label %154
    i32 -1010849862, label %165
    i32 -1530709881, label %166
    i32 -1488130615, label %167
    i32 1689692056, label %171
    i32 -366576966, label %181
    i32 569079934, label %191
    i32 -1576801953, label %192
    i32 1768672143, label %202
    i32 -868927509, label %214
    i32 385435482, label %216
    i32 985284485, label %224
    i32 -669781467, label %229
    i32 2110844617, label %230
    i32 1924685516, label %232
    i32 -143059670, label %233
    i32 -758064044, label %235
    i32 -1894549155, label %236
    i32 1614204727, label %240
    i32 -1227165910, label %241
    i32 -1643348458, label %245
    i32 409501252, label %246
    i32 -145151079, label %250
    i32 1793347840, label %266
    i32 1889281967, label %284
    i32 1541024942, label %294
    i32 -205099952, label %304
    i32 676321793, label %305
    i32 -404833306, label %307
    i32 758467880, label %308
    i32 84796772, label %310
    i32 574621361, label %311
    i32 -224654715, label %312
    i32 2110871782, label %313
    i32 -488850369, label %317
    i32 -1367928168, label %327
    i32 528419020, label %337
    i32 1328258270, label %338
    i32 -1463470962, label %348
    i32 1936233843, label %360
    i32 1385409912, label %362
    i32 282582099, label %372
    i32 218656104, label %387
    i32 -1689900975, label %388
    i32 1124969798, label %390
    i32 -1272399599, label %399
    i32 712275544, label %400
    i32 -1265193351, label %410
    i32 -1723714395, label %421
    i32 1171974054, label %422
    i32 1442290267, label %423
    i32 -194388304, label %425
    i32 -876845018, label %435
    i32 447431089, label %445
    i32 554391330, label %446
    i32 -904776091, label %456
    i32 -410546454, label %468
    i32 -1705578224, label %470
    i32 -1529392037, label %480
    i32 778918739, label %499
    i32 -409932452, label %500
    i32 1978714729, label %502
    i32 -194202444, label %512
    i32 -463515311, label %524
    i32 -447096602, label %525
    i32 -1624628960, label %527
    i32 1549101163, label %528
    i32 -274217031, label %536
    i32 -573947436, label %538
    i32 -2084842100, label %539
    i32 2090049775, label %540
    i32 -1809188112, label %541
    i32 2017910275, label %542
    i32 694131935, label %543
    i32 313696021, label %549
    i32 -795183519, label %551
    i32 -691101910, label %552
    i32 534816538, label %553
    i32 -1903325435, label %563
  ]

.backedge:                                        ; preds = %26, %563, %553, %552, %551, %549, %543, %542, %541, %540, %539, %538, %536, %528, %527, %525, %512, %502, %500, %499, %480, %470, %468, %456, %446, %445, %435, %425, %423, %422, %421, %410, %400, %399, %390, %388, %387, %372, %362, %360, %348, %338, %337, %327, %317, %313, %312, %311, %310, %308, %307, %305, %304, %294, %284, %266, %250, %246, %245, %241, %240, %236, %235, %233, %232, %230, %229, %224, %216, %214, %202, %192, %191, %181, %171, %167, %166, %165, %154, %144, %143, %126, %116, %112, %107, %105, %88, %84, %83, %73, %63, %62, %51, %41, %31, %27
  %.0167.be = phi i32 [ %.0167, %26 ], [ %.0167, %563 ], [ %.0167, %553 ], [ %.0167, %552 ], [ %.0167, %551 ], [ %550, %549 ], [ %.0167, %543 ], [ %.0167, %542 ], [ 0, %541 ], [ %.0167, %540 ], [ %.0167, %539 ], [ 0, %538 ], [ %.0167, %536 ], [ %.0167, %528 ], [ %.0167, %527 ], [ %.0167, %525 ], [ %.0167, %512 ], [ %.0167, %502 ], [ %.0167, %500 ], [ %.0167, %499 ], [ %.0167, %480 ], [ %.0167, %470 ], [ %.0167, %468 ], [ %.0167, %456 ], [ %.0167, %446 ], [ %.0167, %445 ], [ %.0167, %435 ], [ %.0167, %425 ], [ %.0167, %423 ], [ %.0167, %422 ], [ %.0167, %421 ], [ %411, %410 ], [ %.0167, %400 ], [ %.0167, %399 ], [ %.0167, %390 ], [ %.0167, %388 ], [ %.0167, %387 ], [ %.0167, %372 ], [ %.0167, %362 ], [ %.0167, %360 ], [ %.0167, %348 ], [ %.0167, %338 ], [ %.0167, %337 ], [ 0, %327 ], [ %.0167, %317 ], [ %.0167, %313 ], [ %.0167, %312 ], [ %.0167, %311 ], [ %.0167, %310 ], [ %.0167, %308 ], [ %.0167, %307 ], [ %306, %305 ], [ %.0167, %304 ], [ %.0167, %294 ], [ %.0167, %284 ], [ %.0167, %266 ], [ %.0167, %250 ], [ %.0167, %246 ], [ 0, %245 ], [ %.0167, %241 ], [ %.0167, %240 ], [ %.0167, %236 ], [ %.0167, %235 ], [ %.0167, %233 ], [ %.0167, %232 ], [ %231, %230 ], [ %.0167, %229 ], [ %.0167, %224 ], [ %.0167, %216 ], [ %.0167, %214 ], [ %.0167, %202 ], [ %.0167, %192 ], [ %.0167, %191 ], [ 0, %181 ], [ %.0167, %171 ], [ %.0167, %167 ], [ %.0167, %166 ], [ %.0167, %165 ], [ %.0167, %154 ], [ %.0167, %144 ], [ %.0167, %143 ], [ %.0167, %126 ], [ %.0167, %116 ], [ %.0167, %112 ], [ %.0167, %107 ], [ %.0167, %105 ], [ %.0167, %88 ], [ %.0167, %84 ], [ %.0167, %83 ], [ %.0167, %73 ], [ %.0167, %63 ], [ %.0167, %62 ], [ %.0167, %51 ], [ %.0167, %41 ], [ %.0167, %31 ], [ %.0167, %27 ]
  %.0165.be = phi i32 [ %.0165, %26 ], [ %.0165, %563 ], [ %.0165, %553 ], [ %.0165, %552 ], [ %.0165, %551 ], [ %.0165, %549 ], [ %.0165, %543 ], [ %.0165, %542 ], [ %.0165, %541 ], [ %.0165, %540 ], [ %.0165, %539 ], [ %.0165, %538 ], [ %.0165, %536 ], [ %.0165, %528 ], [ %.0165, %527 ], [ %.0165, %525 ], [ %.0165, %512 ], [ %.0165, %502 ], [ %.0165, %500 ], [ %.0165, %499 ], [ %.0165, %480 ], [ %.0165, %470 ], [ %.0165, %468 ], [ %.0165, %456 ], [ %.0165, %446 ], [ %.0165, %445 ], [ %.0165, %435 ], [ %.0165, %425 ], [ %.0165, %423 ], [ %.0165, %422 ], [ %.0165, %421 ], [ %.0165, %410 ], [ %.0165, %400 ], [ %.0165, %399 ], [ %.0165, %390 ], [ %.0165, %388 ], [ %.0165, %387 ], [ %.0165, %372 ], [ %.0165, %362 ], [ %.0165, %360 ], [ %.0165, %348 ], [ %.0165, %338 ], [ %.0165, %337 ], [ %.0165, %327 ], [ %.0165, %317 ], [ %.0165, %313 ], [ %.0165, %312 ], [ %.neg, %311 ], [ %.0165, %310 ], [ %.0165, %308 ], [ %.0165, %307 ], [ %.0165, %305 ], [ %.0165, %304 ], [ %.0165, %294 ], [ %.0165, %284 ], [ %.0165, %266 ], [ %.0165, %250 ], [ %.0165, %246 ], [ %.0165, %245 ], [ %.0165, %241 ], [ %.0165, %240 ], [ %.0165, %236 ], [ 0, %235 ], [ %.0165, %233 ], [ %.0165, %232 ], [ %.0165, %230 ], [ %.0165, %229 ], [ %.0165, %224 ], [ %.0165, %216 ], [ %.0165, %214 ], [ %.0165, %202 ], [ %.0165, %192 ], [ %.0165, %191 ], [ %.0165, %181 ], [ %.0165, %171 ], [ %.0165, %167 ], [ %.0165, %166 ], [ %.0165, %165 ], [ %.0165, %154 ], [ %.0165, %144 ], [ %.0165, %143 ], [ %.0165, %126 ], [ %.0165, %116 ], [ %.0165, %112 ], [ %.0165, %107 ], [ %.0165, %105 ], [ %.0165, %88 ], [ %.0165, %84 ], [ %.0165, %83 ], [ %.0165, %73 ], [ %.0165, %63 ], [ %.0165, %62 ], [ %.0165, %51 ], [ %.0165, %41 ], [ %.0165, %31 ], [ %.0165, %27 ]
  %.0163.be = phi i32 [ %.0163, %26 ], [ %.0163, %563 ], [ %.0163, %553 ], [ %.0163, %552 ], [ 0, %551 ], [ %.0163, %549 ], [ %.0163, %543 ], [ %.0163, %542 ], [ %.0163, %541 ], [ %.0163, %540 ], [ %.0163, %539 ], [ %.0163, %538 ], [ %537, %536 ], [ %.0163, %528 ], [ 0, %527 ], [ %526, %525 ], [ %.0163, %512 ], [ %.0163, %502 ], [ %501, %500 ], [ %.0163, %499 ], [ %.0163, %480 ], [ %.0163, %470 ], [ %.0163, %468 ], [ %.0163, %456 ], [ %.0163, %446 ], [ %.0163, %445 ], [ 0, %435 ], [ %.0163, %425 ], [ %424, %423 ], [ %.0163, %422 ], [ %.0163, %421 ], [ %.0163, %410 ], [ %.0163, %400 ], [ %.0163, %399 ], [ %.0163, %390 ], [ %.0163, %388 ], [ %.0163, %387 ], [ %.0163, %372 ], [ %.0163, %362 ], [ %.0163, %360 ], [ %.0163, %348 ], [ %.0163, %338 ], [ %.0163, %337 ], [ %.0163, %327 ], [ %.0163, %317 ], [ %.0163, %313 ], [ 0, %312 ], [ %.0163, %311 ], [ %.0163, %310 ], [ %309, %308 ], [ %.0163, %307 ], [ %.0163, %305 ], [ %.0163, %304 ], [ %.0163, %294 ], [ %.0163, %284 ], [ %.0163, %266 ], [ %.0163, %250 ], [ %.0163, %246 ], [ %.0163, %245 ], [ %.0163, %241 ], [ 0, %240 ], [ %.0163, %236 ], [ %.0163, %235 ], [ %234, %233 ], [ %.0163, %232 ], [ %.0163, %230 ], [ %.0163, %229 ], [ %.0163, %224 ], [ %.0163, %216 ], [ %.0163, %214 ], [ %.0163, %202 ], [ %.0163, %192 ], [ %.0163, %191 ], [ %.0163, %181 ], [ %.0163, %171 ], [ %.0163, %167 ], [ 0, %166 ], [ %.0163, %165 ], [ %155, %154 ], [ %.0163, %144 ], [ %.0163, %143 ], [ %.0163, %126 ], [ %.0163, %116 ], [ %.0163, %112 ], [ 0, %107 ], [ %106, %105 ], [ %.0163, %88 ], [ %.0163, %84 ], [ %.0163, %83 ], [ 0, %73 ], [ %.0163, %63 ], [ %.0163, %62 ], [ %52, %51 ], [ %.0163, %41 ], [ %.0163, %31 ], [ %.0163, %27 ]
  %.0161.be = phi i32 [ %.0161, %26 ], [ %.0161, %563 ], [ %.0161, %553 ], [ %.0161, %552 ], [ %.0161, %551 ], [ %.0161, %549 ], [ %548, %543 ], [ %.0161, %542 ], [ %.0161, %541 ], [ %.0161, %540 ], [ %.0161, %539 ], [ %.0161, %538 ], [ %.0161, %536 ], [ %.0161, %528 ], [ %.0161, %527 ], [ %.0161, %525 ], [ %.0161, %512 ], [ %.0161, %502 ], [ %.0161, %500 ], [ %.0161, %499 ], [ %.0161, %480 ], [ %.0161, %470 ], [ %.0161, %468 ], [ %.0161, %456 ], [ %.0161, %446 ], [ %.0161, %445 ], [ %.0161, %435 ], [ %.0161, %425 ], [ %.0161, %423 ], [ %.0161, %422 ], [ %.0161, %421 ], [ %.0161, %410 ], [ %.0161, %400 ], [ %.0161, %399 ], [ %398, %390 ], [ %.0161, %388 ], [ %.0161, %387 ], [ %377, %372 ], [ %.0161, %362 ], [ %.0161, %360 ], [ %.0161, %348 ], [ %.0161, %338 ], [ %.0161, %337 ], [ %.0161, %327 ], [ %.0161, %317 ], [ %.0161, %313 ], [ %.0161, %312 ], [ %.0161, %311 ], [ %.0161, %310 ], [ %.0161, %308 ], [ %.0161, %307 ], [ %.0161, %305 ], [ %.0161, %304 ], [ %.0161, %294 ], [ %.0161, %284 ], [ %.0161, %266 ], [ %.0161, %250 ], [ %.0161, %246 ], [ %.0161, %245 ], [ %.0161, %241 ], [ %.0161, %240 ], [ %.0161, %236 ], [ %.0161, %235 ], [ %.0161, %233 ], [ %.0161, %232 ], [ %.0161, %230 ], [ %.0161, %229 ], [ %.0161, %224 ], [ %.0161, %216 ], [ %.0161, %214 ], [ %.0161, %202 ], [ %.0161, %192 ], [ %.0161, %191 ], [ %.0161, %181 ], [ %.0161, %171 ], [ %.0161, %167 ], [ %.0161, %166 ], [ %.0161, %165 ], [ %.0161, %154 ], [ %.0161, %144 ], [ %.0161, %143 ], [ %.0161, %126 ], [ %.0161, %116 ], [ %.0161, %112 ], [ %.0161, %107 ], [ %.0161, %105 ], [ %.0161, %88 ], [ %.0161, %84 ], [ %.0161, %83 ], [ %.0161, %73 ], [ %.0161, %63 ], [ %.0161, %62 ], [ %.0161, %51 ], [ %.0161, %41 ], [ %.0161, %31 ], [ %.0161, %27 ]
  %.0159.be = phi i32 [ %.0159, %26 ], [ %.0159, %563 ], [ %.0159, %553 ], [ %.0159, %552 ], [ %.0159, %551 ], [ %.0159, %549 ], [ %.0167, %543 ], [ %.0159, %542 ], [ %.0159, %541 ], [ %.0159, %540 ], [ %.0159, %539 ], [ %.0159, %538 ], [ %.0159, %536 ], [ %.0159, %528 ], [ %.0159, %527 ], [ %.0159, %525 ], [ %.0159, %512 ], [ %.0159, %502 ], [ %.0159, %500 ], [ %.0159, %499 ], [ %.0159, %480 ], [ %.0159, %470 ], [ %.0159, %468 ], [ %.0159, %456 ], [ %.0159, %446 ], [ %.0159, %445 ], [ %.0159, %435 ], [ %.0159, %425 ], [ %.0159, %423 ], [ %.0159, %422 ], [ %.0159, %421 ], [ %.0159, %410 ], [ %.0159, %400 ], [ %.0159, %399 ], [ %.0161, %390 ], [ %.0159, %388 ], [ %.0159, %387 ], [ %.0167, %372 ], [ %.0159, %362 ], [ %.0159, %360 ], [ %.0159, %348 ], [ %.0159, %338 ], [ %.0159, %337 ], [ %.0159, %327 ], [ %.0159, %317 ], [ %.0159, %313 ], [ %.0159, %312 ], [ %.0159, %311 ], [ %.0159, %310 ], [ %.0159, %308 ], [ %.0159, %307 ], [ %.0159, %305 ], [ %.0159, %304 ], [ %.0159, %294 ], [ %.0159, %284 ], [ %.0159, %266 ], [ %.0159, %250 ], [ %.0159, %246 ], [ %.0159, %245 ], [ %.0159, %241 ], [ %.0159, %240 ], [ %.0159, %236 ], [ %.0159, %235 ], [ %.0159, %233 ], [ %.0159, %232 ], [ %.0159, %230 ], [ %.0159, %229 ], [ %.0159, %224 ], [ %.0159, %216 ], [ %.0159, %214 ], [ %.0159, %202 ], [ %.0159, %192 ], [ %.0159, %191 ], [ %.0159, %181 ], [ %.0159, %171 ], [ %.0159, %167 ], [ %.0159, %166 ], [ %.0159, %165 ], [ %.0159, %154 ], [ %.0159, %144 ], [ %.0159, %143 ], [ %.0159, %126 ], [ %.0159, %116 ], [ %.0159, %112 ], [ %.0159, %107 ], [ %.0159, %105 ], [ %.0159, %88 ], [ %.0159, %84 ], [ %.0159, %83 ], [ %.0159, %73 ], [ %.0159, %63 ], [ %.0159, %62 ], [ %.0159, %51 ], [ %.0159, %41 ], [ %.0159, %31 ], [ %.0159, %27 ]
  %.0157.be = phi i32 [ %.0157, %26 ], [ %.0157, %563 ], [ %562, %553 ], [ %.0157, %552 ], [ %.0157, %551 ], [ %.0157, %549 ], [ %.0157, %543 ], [ %.0157, %542 ], [ %.0157, %541 ], [ %.0157, %540 ], [ %.0157, %539 ], [ %.0157, %538 ], [ %.0157, %536 ], [ %.0157, %528 ], [ %.0157, %527 ], [ %.0157, %525 ], [ %.0157, %512 ], [ %.0157, %502 ], [ %.0157, %500 ], [ %.0157, %499 ], [ %489, %480 ], [ %.0157, %470 ], [ %.0157, %468 ], [ %.0157, %456 ], [ %.0157, %446 ], [ %.0157, %445 ], [ %.0157, %435 ], [ %.0157, %425 ], [ %.0157, %423 ], [ %.0157, %422 ], [ %.0157, %421 ], [ %.0157, %410 ], [ %.0157, %400 ], [ %.0157, %399 ], [ %.0157, %390 ], [ %.0157, %388 ], [ %.0157, %387 ], [ %.0157, %372 ], [ %.0157, %362 ], [ %.0157, %360 ], [ %.0157, %348 ], [ %.0157, %338 ], [ %.0157, %337 ], [ %.0157, %327 ], [ %.0157, %317 ], [ %.0157, %313 ], [ 0, %312 ], [ %.0157, %311 ], [ %.0157, %310 ], [ %.0157, %308 ], [ %.0157, %307 ], [ %.0157, %305 ], [ %.0157, %304 ], [ %.0157, %294 ], [ %.0157, %284 ], [ %.0157, %266 ], [ %.0157, %250 ], [ %.0157, %246 ], [ %.0157, %245 ], [ %.0157, %241 ], [ %.0157, %240 ], [ %.0157, %236 ], [ %.0157, %235 ], [ %.0157, %233 ], [ %.0157, %232 ], [ %.0157, %230 ], [ %.0157, %229 ], [ %.0157, %224 ], [ %.0157, %216 ], [ %.0157, %214 ], [ %.0157, %202 ], [ %.0157, %192 ], [ %.0157, %191 ], [ %.0157, %181 ], [ %.0157, %171 ], [ %.0157, %167 ], [ %.0157, %166 ], [ %.0157, %165 ], [ %.0157, %154 ], [ %.0157, %144 ], [ %.0157, %143 ], [ %.0157, %126 ], [ %.0157, %116 ], [ %.0157, %112 ], [ %.0157, %107 ], [ %.0157, %105 ], [ %.0157, %88 ], [ %.0157, %84 ], [ %.0157, %83 ], [ %.0157, %73 ], [ %.0157, %63 ], [ %.0157, %62 ], [ %.0157, %51 ], [ %.0157, %41 ], [ %.0157, %31 ], [ %.0157, %27 ]
  %.0.be = phi i32 [ %.0, %26 ], [ -194202444, %563 ], [ -1529392037, %553 ], [ -904776091, %552 ], [ -876845018, %551 ], [ -1265193351, %549 ], [ 282582099, %543 ], [ -1463470962, %542 ], [ -1367928168, %541 ], [ 1541024942, %540 ], [ 1768672143, %539 ], [ -366576966, %538 ], [ 810519571, %536 ], [ 548652310, %528 ], [ -730413429, %527 ], [ -756918319, %525 ], [ %523, %512 ], [ %511, %502 ], [ 554391330, %500 ], [ -409932452, %499 ], [ %498, %480 ], [ %479, %470 ], [ %469, %468 ], [ %467, %456 ], [ %455, %446 ], [ 554391330, %445 ], [ %444, %435 ], [ %434, %425 ], [ 2110871782, %423 ], [ 1442290267, %422 ], [ 1328258270, %421 ], [ %420, %410 ], [ %409, %400 ], [ 712275544, %399 ], [ -1689900975, %390 ], [ %389, %388 ], [ -1689900975, %387 ], [ %386, %372 ], [ %371, %362 ], [ %361, %360 ], [ %359, %348 ], [ %347, %338 ], [ 1328258270, %337 ], [ %336, %327 ], [ %326, %317 ], [ %316, %313 ], [ 2110871782, %312 ], [ -1894549155, %311 ], [ 574621361, %310 ], [ -1227165910, %308 ], [ 758467880, %307 ], [ 409501252, %305 ], [ 676321793, %304 ], [ %303, %294 ], [ %293, %284 ], [ 1889281967, %266 ], [ %265, %250 ], [ %249, %246 ], [ 409501252, %245 ], [ %244, %241 ], [ -1227165910, %240 ], [ %239, %236 ], [ -1894549155, %235 ], [ -1488130615, %233 ], [ -143059670, %232 ], [ -1576801953, %230 ], [ 2110844617, %229 ], [ -669781467, %224 ], [ %223, %216 ], [ %215, %214 ], [ %213, %202 ], [ %201, %192 ], [ -1576801953, %191 ], [ %190, %181 ], [ %180, %171 ], [ %170, %167 ], [ -1488130615, %166 ], [ -1850115526, %165 ], [ %164, %154 ], [ %153, %144 ], [ 1888379052, %143 ], [ %142, %126 ], [ %125, %116 ], [ %115, %112 ], [ -1850115526, %107 ], [ 1768818132, %105 ], [ 1951870651, %88 ], [ %87, %84 ], [ 1768818132, %83 ], [ %82, %73 ], [ %72, %63 ], [ -185069573, %62 ], [ %61, %51 ], [ %50, %41 ], [ -2097927359, %31 ], [ %30, %27 ]
  br label %26

27:                                               ; preds = %26
  %28 = load i32, i32* %9, align 4
  %29 = icmp slt i32 %.0163, %28
  %30 = select i1 %29, i32 -287099676, i32 -920157952
  br label %.backedge

31:                                               ; preds = %26
  %32 = sext i32 %.0163 to i64
  %.0..0..0.82 = load volatile i64, i64* %8, align 8
  %33 = mul nsw i64 %.0..0..0.82, %32
  %34 = getelementptr inbounds i32, i32* %20, i64 %33
  %.0..0..0.83 = load volatile i64, i64* %8, align 8
  %35 = mul nsw i64 %.0..0..0.83, %32
  %36 = load i32, i32* %9, align 4
  %37 = sext i32 %36 to i64
  %.idx191 = add nsw i64 %35, %37
  %38 = getelementptr inbounds i32, i32* %20, i64 %.idx191
  call void @_ZSt4fillIPiiEvT_S1_RKT0_(i32* nonnull %34, i32* nonnull %38, i32* nonnull dereferenceable(4) @_ZL3inf)
  %.0..0..0.84 = load volatile i64, i64* %8, align 8
  %39 = mul nsw i64 %.0..0..0.84, %32
  %.idx192 = add nsw i64 %39, %32
  %40 = getelementptr inbounds i32, i32* %20, i64 %.idx192
  store i32 0, i32* %40, align 4
  br label %.backedge

41:                                               ; preds = %26
  %42 = load i32, i32* @x.3, align 4
  %43 = load i32, i32* @y.4, align 4
  %44 = add i32 %42, -1
  %45 = mul i32 %44, %42
  %46 = and i32 %45, 1
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %48, %47
  %50 = select i1 %49, i32 -756918319, i32 -447096602
  br label %.backedge

51:                                               ; preds = %26
  %52 = add i32 %.0163, 1
  %53 = load i32, i32* @x.3, align 4
  %54 = load i32, i32* @y.4, align 4
  %55 = add i32 %53, -1
  %56 = mul i32 %55, %53
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %59, %58
  %61 = select i1 %60, i32 -806189692, i32 -447096602
  br label %.backedge

62:                                               ; preds = %26
  br label %.backedge

63:                                               ; preds = %26
  %64 = load i32, i32* @x.3, align 4
  %65 = load i32, i32* @y.4, align 4
  %66 = add i32 %64, -1
  %67 = mul i32 %66, %64
  %68 = and i32 %67, 1
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %70, %69
  %72 = select i1 %71, i32 -730413429, i32 -1624628960
  br label %.backedge

73:                                               ; preds = %26
  %74 = load i32, i32* @x.3, align 4
  %75 = load i32, i32* @y.4, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 -630450175, i32 -1624628960
  br label %.backedge

83:                                               ; preds = %26
  br label %.backedge

84:                                               ; preds = %26
  %85 = load i32, i32* %10, align 4
  %86 = icmp slt i32 %.0163, %85
  %87 = select i1 %86, i32 320754016, i32 373390897
  br label %.backedge

88:                                               ; preds = %26
  %89 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %11, i32* nonnull %12, i32* nonnull %13)
  %90 = load i32, i32* %11, align 4
  %91 = add i32 %90, -1
  store i32 %91, i32* %11, align 4
  %92 = load i32, i32* %12, align 4
  %93 = add i32 %92, -1
  store i32 %93, i32* %12, align 4
  %94 = load i32, i32* %13, align 4
  %95 = sext i32 %93 to i64
  %.0..0..0.85 = load volatile i64, i64* %8, align 8
  %96 = mul nsw i64 %.0..0..0.85, %95
  %97 = sext i32 %91 to i64
  %.idx187 = add nsw i64 %96, %97
  %98 = getelementptr inbounds i32, i32* %20, i64 %.idx187
  store i32 %94, i32* %98, align 4
  %.0..0..0.86 = load volatile i64, i64* %8, align 8
  %99 = mul nsw i64 %.0..0..0.86, %97
  %.idx188 = add nsw i64 %99, %95
  %100 = getelementptr inbounds i32, i32* %20, i64 %.idx188
  store i32 %94, i32* %100, align 4
  %.0..0..0.95 = load volatile i64, i64* %7, align 8
  %101 = mul nsw i64 %.0..0..0.95, %95
  %.idx189 = add nsw i64 %101, %97
  %102 = getelementptr inbounds i8, i8* %24, i64 %.idx189
  store i8 1, i8* %102, align 1
  %.0..0..0.96 = load volatile i64, i64* %7, align 8
  %103 = mul nsw i64 %.0..0..0.96, %97
  %.idx190 = add nsw i64 %103, %95
  %104 = getelementptr inbounds i8, i8* %24, i64 %.idx190
  store i8 1, i8* %104, align 1
  br label %.backedge

105:                                              ; preds = %26
  %106 = add i32 %.0163, 1
  br label %.backedge

107:                                              ; preds = %26
  %108 = load i32, i32* %9, align 4
  %109 = zext i32 %108 to i64
  store i64 %109, i64* %6, align 8
  %.0..0..0.109 = load volatile i64, i64* %6, align 8
  %110 = mul nuw i64 %.0..0..0.109, %109
  %111 = alloca i32, i64 %110, align 16
  store i32* %111, i32** %5, align 8
  br label %.backedge

112:                                              ; preds = %26
  %113 = load i32, i32* %9, align 4
  %114 = icmp slt i32 %.0163, %113
  %115 = select i1 %114, i32 1610433513, i32 -1530709881
  br label %.backedge

116:                                              ; preds = %26
  %117 = load i32, i32* @x.3, align 4
  %118 = load i32, i32* @y.4, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 548652310, i32 1549101163
  br label %.backedge

126:                                              ; preds = %26
  %127 = sext i32 %.0163 to i64
  %.0..0..0.110 = load volatile i64, i64* %6, align 8
  %128 = mul nsw i64 %.0..0..0.110, %127
  %.0..0..0.143 = load volatile i32*, i32** %5, align 8
  %129 = getelementptr inbounds i32, i32* %.0..0..0.143, i64 %128
  %.0..0..0.111 = load volatile i64, i64* %6, align 8
  %130 = mul nsw i64 %.0..0..0.111, %127
  %.0..0..0.144 = load volatile i32*, i32** %5, align 8
  %131 = load i32, i32* %9, align 4
  %132 = sext i32 %131 to i64
  %.idx186 = add nsw i64 %130, %132
  %133 = getelementptr inbounds i32, i32* %.0..0..0.144, i64 %.idx186
  store i32 -1, i32* %14, align 4
  call void @_ZSt4fillIPiiEvT_S1_RKT0_(i32* %129, i32* %133, i32* nonnull dereferenceable(4) %14)
  %134 = load i32, i32* @x.3, align 4
  %135 = load i32, i32* @y.4, align 4
  %136 = add i32 %134, -1
  %137 = mul i32 %136, %134
  %138 = and i32 %137, 1
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %140, %139
  %142 = select i1 %141, i32 1998674402, i32 1549101163
  br label %.backedge

143:                                              ; preds = %26
  br label %.backedge

144:                                              ; preds = %26
  %145 = load i32, i32* @x.3, align 4
  %146 = load i32, i32* @y.4, align 4
  %147 = add i32 %145, -1
  %148 = mul i32 %147, %145
  %149 = and i32 %148, 1
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %151, %150
  %153 = select i1 %152, i32 810519571, i32 -274217031
  br label %.backedge

154:                                              ; preds = %26
  %155 = add i32 %.0163, 1
  %156 = load i32, i32* @x.3, align 4
  %157 = load i32, i32* @y.4, align 4
  %158 = add i32 %156, -1
  %159 = mul i32 %158, %156
  %160 = and i32 %159, 1
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %162, %161
  %164 = select i1 %163, i32 -1010849862, i32 -274217031
  br label %.backedge

165:                                              ; preds = %26
  br label %.backedge

166:                                              ; preds = %26
  br label %.backedge

167:                                              ; preds = %26
  %168 = load i32, i32* %9, align 4
  %169 = icmp slt i32 %.0163, %168
  %170 = select i1 %169, i32 1689692056, i32 -758064044
  br label %.backedge

171:                                              ; preds = %26
  %172 = load i32, i32* @x.3, align 4
  %173 = load i32, i32* @y.4, align 4
  %174 = add i32 %172, -1
  %175 = mul i32 %174, %172
  %176 = and i32 %175, 1
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %178, %177
  %180 = select i1 %179, i32 -366576966, i32 -573947436
  br label %.backedge

181:                                              ; preds = %26
  %182 = load i32, i32* @x.3, align 4
  %183 = load i32, i32* @y.4, align 4
  %184 = add i32 %182, -1
  %185 = mul i32 %184, %182
  %186 = and i32 %185, 1
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %188, %187
  %190 = select i1 %189, i32 569079934, i32 -573947436
  br label %.backedge

191:                                              ; preds = %26
  br label %.backedge

192:                                              ; preds = %26
  %193 = load i32, i32* @x.3, align 4
  %194 = load i32, i32* @y.4, align 4
  %195 = add i32 %193, -1
  %196 = mul i32 %195, %193
  %197 = and i32 %196, 1
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %199, %198
  %201 = select i1 %200, i32 1768672143, i32 -2084842100
  br label %.backedge

202:                                              ; preds = %26
  %203 = load i32, i32* %9, align 4
  %204 = icmp slt i32 %.0167, %203
  store i1 %204, i1* %4, align 1
  %205 = load i32, i32* @x.3, align 4
  %206 = load i32, i32* @y.4, align 4
  %207 = add i32 %205, -1
  %208 = mul i32 %207, %205
  %209 = and i32 %208, 1
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %211, %210
  %213 = select i1 %212, i32 -868927509, i32 -2084842100
  br label %.backedge

214:                                              ; preds = %26
  %.0..0..0.153 = load volatile i1, i1* %4, align 1
  %215 = select i1 %.0..0..0.153, i32 385435482, i32 1924685516
  br label %.backedge

216:                                              ; preds = %26
  %217 = sext i32 %.0163 to i64
  %.0..0..0.97 = load volatile i64, i64* %7, align 8
  %218 = mul nsw i64 %.0..0..0.97, %217
  %219 = sext i32 %.0167 to i64
  %.idx184 = add nsw i64 %218, %219
  %220 = getelementptr inbounds i8, i8* %24, i64 %.idx184
  %221 = load i8, i8* %220, align 1
  %222 = and i8 %221, 1
  %.not185 = icmp eq i8 %222, 0
  %223 = select i1 %.not185, i32 -669781467, i32 985284485
  br label %.backedge

224:                                              ; preds = %26
  %225 = sext i32 %.0163 to i64
  %.0..0..0.112 = load volatile i64, i64* %6, align 8
  %226 = mul nsw i64 %.0..0..0.112, %225
  %.0..0..0.145 = load volatile i32*, i32** %5, align 8
  %227 = sext i32 %.0167 to i64
  %.idx183 = add nsw i64 %226, %227
  %228 = getelementptr inbounds i32, i32* %.0..0..0.145, i64 %.idx183
  store i32 %.0163, i32* %228, align 4
  br label %.backedge

229:                                              ; preds = %26
  br label %.backedge

230:                                              ; preds = %26
  %231 = add i32 %.0167, 1
  br label %.backedge

232:                                              ; preds = %26
  br label %.backedge

233:                                              ; preds = %26
  %234 = add i32 %.0163, 1
  br label %.backedge

235:                                              ; preds = %26
  br label %.backedge

236:                                              ; preds = %26
  %237 = load i32, i32* %9, align 4
  %238 = icmp slt i32 %.0165, %237
  %239 = select i1 %238, i32 1614204727, i32 -224654715
  br label %.backedge

240:                                              ; preds = %26
  br label %.backedge

241:                                              ; preds = %26
  %242 = load i32, i32* %9, align 4
  %243 = icmp slt i32 %.0163, %242
  %244 = select i1 %243, i32 -1643348458, i32 84796772
  br label %.backedge

245:                                              ; preds = %26
  br label %.backedge

246:                                              ; preds = %26
  %247 = load i32, i32* %9, align 4
  %248 = icmp slt i32 %.0167, %247
  %249 = select i1 %248, i32 -145151079, i32 -404833306
  br label %.backedge

250:                                              ; preds = %26
  %251 = sext i32 %.0163 to i64
  %.0..0..0.87 = load volatile i64, i64* %8, align 8
  %252 = mul nsw i64 %.0..0..0.87, %251
  %253 = sext i32 %.0167 to i64
  %.idx180 = add nsw i64 %252, %253
  %254 = getelementptr inbounds i32, i32* %20, i64 %.idx180
  %255 = load i32, i32* %254, align 4
  %.0..0..0.88 = load volatile i64, i64* %8, align 8
  %256 = mul nsw i64 %.0..0..0.88, %251
  %257 = sext i32 %.0165 to i64
  %.idx181 = add nsw i64 %256, %257
  %258 = getelementptr inbounds i32, i32* %20, i64 %.idx181
  %259 = load i32, i32* %258, align 4
  %.0..0..0.89 = load volatile i64, i64* %8, align 8
  %260 = mul nsw i64 %.0..0..0.89, %257
  %.idx182 = add nsw i64 %260, %253
  %261 = getelementptr inbounds i32, i32* %20, i64 %.idx182
  %262 = load i32, i32* %261, align 4
  %263 = add i32 %262, %259
  %264 = icmp sgt i32 %255, %263
  %265 = select i1 %264, i32 1793347840, i32 1889281967
  br label %.backedge

266:                                              ; preds = %26
  %267 = sext i32 %.0163 to i64
  %.0..0..0.90 = load volatile i64, i64* %8, align 8
  %268 = mul nsw i64 %.0..0..0.90, %267
  %269 = sext i32 %.0165 to i64
  %.idx175 = add nsw i64 %268, %269
  %270 = getelementptr inbounds i32, i32* %20, i64 %.idx175
  %271 = load i32, i32* %270, align 4
  %.0..0..0.91 = load volatile i64, i64* %8, align 8
  %272 = mul nsw i64 %.0..0..0.91, %269
  %273 = sext i32 %.0167 to i64
  %.idx176 = add nsw i64 %272, %273
  %274 = getelementptr inbounds i32, i32* %20, i64 %.idx176
  %275 = load i32, i32* %274, align 4
  %276 = add i32 %275, %271
  %.0..0..0.92 = load volatile i64, i64* %8, align 8
  %277 = mul nsw i64 %.0..0..0.92, %267
  %.idx177 = add nsw i64 %277, %273
  %278 = getelementptr inbounds i32, i32* %20, i64 %.idx177
  store i32 %276, i32* %278, align 4
  %.0..0..0.113 = load volatile i64, i64* %6, align 8
  %279 = mul nsw i64 %.0..0..0.113, %269
  %.0..0..0.146 = load volatile i32*, i32** %5, align 8
  %.idx178 = add nsw i64 %279, %273
  %280 = getelementptr inbounds i32, i32* %.0..0..0.146, i64 %.idx178
  %281 = load i32, i32* %280, align 4
  %.0..0..0.114 = load volatile i64, i64* %6, align 8
  %282 = mul nsw i64 %.0..0..0.114, %267
  %.0..0..0.147 = load volatile i32*, i32** %5, align 8
  %.idx179 = add nsw i64 %282, %273
  %283 = getelementptr inbounds i32, i32* %.0..0..0.147, i64 %.idx179
  store i32 %281, i32* %283, align 4
  br label %.backedge

284:                                              ; preds = %26
  %285 = load i32, i32* @x.3, align 4
  %286 = load i32, i32* @y.4, align 4
  %287 = add i32 %285, -1
  %288 = mul i32 %287, %285
  %289 = and i32 %288, 1
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %291, %290
  %293 = select i1 %292, i32 1541024942, i32 2090049775
  br label %.backedge

294:                                              ; preds = %26
  %295 = load i32, i32* @x.3, align 4
  %296 = load i32, i32* @y.4, align 4
  %297 = add i32 %295, -1
  %298 = mul i32 %297, %295
  %299 = and i32 %298, 1
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %301, %300
  %303 = select i1 %302, i32 -205099952, i32 2090049775
  br label %.backedge

304:                                              ; preds = %26
  br label %.backedge

305:                                              ; preds = %26
  %306 = add i32 %.0167, 1
  br label %.backedge

307:                                              ; preds = %26
  br label %.backedge

308:                                              ; preds = %26
  %309 = add i32 %.0163, 1
  br label %.backedge

310:                                              ; preds = %26
  br label %.backedge

311:                                              ; preds = %26
  %.neg = add i32 %.0165, 1
  br label %.backedge

312:                                              ; preds = %26
  br label %.backedge

313:                                              ; preds = %26
  %314 = load i32, i32* %9, align 4
  %315 = icmp slt i32 %.0163, %314
  %316 = select i1 %315, i32 -488850369, i32 -194388304
  br label %.backedge

317:                                              ; preds = %26
  %318 = load i32, i32* @x.3, align 4
  %319 = load i32, i32* @y.4, align 4
  %320 = add i32 %318, -1
  %321 = mul i32 %320, %318
  %322 = and i32 %321, 1
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %324, %323
  %326 = select i1 %325, i32 -1367928168, i32 -1809188112
  br label %.backedge

327:                                              ; preds = %26
  %328 = load i32, i32* @x.3, align 4
  %329 = load i32, i32* @y.4, align 4
  %330 = add i32 %328, -1
  %331 = mul i32 %330, %328
  %332 = and i32 %331, 1
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %334, %333
  %336 = select i1 %335, i32 528419020, i32 -1809188112
  br label %.backedge

337:                                              ; preds = %26
  br label %.backedge

338:                                              ; preds = %26
  %339 = load i32, i32* @x.3, align 4
  %340 = load i32, i32* @y.4, align 4
  %341 = add i32 %339, -1
  %342 = mul i32 %341, %339
  %343 = and i32 %342, 1
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %345, %344
  %347 = select i1 %346, i32 -1463470962, i32 2017910275
  br label %.backedge

348:                                              ; preds = %26
  %349 = load i32, i32* %9, align 4
  %350 = icmp slt i32 %.0167, %349
  store i1 %350, i1* %3, align 1
  %351 = load i32, i32* @x.3, align 4
  %352 = load i32, i32* @y.4, align 4
  %353 = add i32 %351, -1
  %354 = mul i32 %353, %351
  %355 = and i32 %354, 1
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %357, %356
  %359 = select i1 %358, i32 1936233843, i32 2017910275
  br label %.backedge

360:                                              ; preds = %26
  %.0..0..0.154 = load volatile i1, i1* %3, align 1
  %361 = select i1 %.0..0..0.154, i32 1385409912, i32 1171974054
  br label %.backedge

362:                                              ; preds = %26
  %363 = load i32, i32* @x.3, align 4
  %364 = load i32, i32* @y.4, align 4
  %365 = add i32 %363, -1
  %366 = mul i32 %365, %363
  %367 = and i32 %366, 1
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %369, %368
  %371 = select i1 %370, i32 282582099, i32 694131935
  br label %.backedge

372:                                              ; preds = %26
  %373 = sext i32 %.0163 to i64
  %.0..0..0.115 = load volatile i64, i64* %6, align 8
  %374 = mul nsw i64 %.0..0..0.115, %373
  %.0..0..0.148 = load volatile i32*, i32** %5, align 8
  %375 = sext i32 %.0167 to i64
  %.idx174 = add nsw i64 %374, %375
  %376 = getelementptr inbounds i32, i32* %.0..0..0.148, i64 %.idx174
  %377 = load i32, i32* %376, align 4
  %378 = load i32, i32* @x.3, align 4
  %379 = load i32, i32* @y.4, align 4
  %380 = add i32 %378, -1
  %381 = mul i32 %380, %378
  %382 = and i32 %381, 1
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %384, %383
  %386 = select i1 %385, i32 218656104, i32 694131935
  br label %.backedge

387:                                              ; preds = %26
  br label %.backedge

388:                                              ; preds = %26
  %.not = icmp eq i32 %.0161, -1
  %389 = select i1 %.not, i32 -1272399599, i32 1124969798
  br label %.backedge

390:                                              ; preds = %26
  %391 = sext i32 %.0161 to i64
  %.0..0..0.98 = load volatile i64, i64* %7, align 8
  %392 = mul nsw i64 %.0..0..0.98, %391
  %393 = sext i32 %.0159 to i64
  %.idx172 = add nsw i64 %392, %393
  %394 = getelementptr inbounds i8, i8* %24, i64 %.idx172
  store i8 0, i8* %394, align 1
  %395 = sext i32 %.0163 to i64
  %.0..0..0.116 = load volatile i64, i64* %6, align 8
  %396 = mul nsw i64 %.0..0..0.116, %395
  %.0..0..0.149 = load volatile i32*, i32** %5, align 8
  %.idx173 = add nsw i64 %396, %391
  %397 = getelementptr inbounds i32, i32* %.0..0..0.149, i64 %.idx173
  %398 = load i32, i32* %397, align 4
  br label %.backedge

399:                                              ; preds = %26
  br label %.backedge

400:                                              ; preds = %26
  %401 = load i32, i32* @x.3, align 4
  %402 = load i32, i32* @y.4, align 4
  %403 = add i32 %401, -1
  %404 = mul i32 %403, %401
  %405 = and i32 %404, 1
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %407, %406
  %409 = select i1 %408, i32 -1265193351, i32 313696021
  br label %.backedge

410:                                              ; preds = %26
  %411 = add i32 %.0167, 1
  %412 = load i32, i32* @x.3, align 4
  %413 = load i32, i32* @y.4, align 4
  %414 = add i32 %412, -1
  %415 = mul i32 %414, %412
  %416 = and i32 %415, 1
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %418, %417
  %420 = select i1 %419, i32 -1723714395, i32 313696021
  br label %.backedge

421:                                              ; preds = %26
  br label %.backedge

422:                                              ; preds = %26
  br label %.backedge

423:                                              ; preds = %26
  %424 = add i32 %.0163, 1
  br label %.backedge

425:                                              ; preds = %26
  %426 = load i32, i32* @x.3, align 4
  %427 = load i32, i32* @y.4, align 4
  %428 = add i32 %426, -1
  %429 = mul i32 %428, %426
  %430 = and i32 %429, 1
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %432, %431
  %434 = select i1 %433, i32 -876845018, i32 -795183519
  br label %.backedge

435:                                              ; preds = %26
  %436 = load i32, i32* @x.3, align 4
  %437 = load i32, i32* @y.4, align 4
  %438 = add i32 %436, -1
  %439 = mul i32 %438, %436
  %440 = and i32 %439, 1
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %442, %441
  %444 = select i1 %443, i32 447431089, i32 -795183519
  br label %.backedge

445:                                              ; preds = %26
  br label %.backedge

446:                                              ; preds = %26
  %447 = load i32, i32* @x.3, align 4
  %448 = load i32, i32* @y.4, align 4
  %449 = add i32 %447, -1
  %450 = mul i32 %449, %447
  %451 = and i32 %450, 1
  %452 = icmp eq i32 %451, 0
  %453 = icmp slt i32 %448, 10
  %454 = or i1 %453, %452
  %455 = select i1 %454, i32 -904776091, i32 -691101910
  br label %.backedge

456:                                              ; preds = %26
  %457 = load i32, i32* %9, align 4
  %458 = icmp slt i32 %.0163, %457
  store i1 %458, i1* %2, align 1
  %459 = load i32, i32* @x.3, align 4
  %460 = load i32, i32* @y.4, align 4
  %461 = add i32 %459, -1
  %462 = mul i32 %461, %459
  %463 = and i32 %462, 1
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %465, %464
  %467 = select i1 %466, i32 -410546454, i32 -691101910
  br label %.backedge

468:                                              ; preds = %26
  %.0..0..0.155 = load volatile i1, i1* %2, align 1
  %469 = select i1 %.0..0..0.155, i32 -1705578224, i32 1978714729
  br label %.backedge

470:                                              ; preds = %26
  %471 = load i32, i32* @x.3, align 4
  %472 = load i32, i32* @y.4, align 4
  %473 = add i32 %471, -1
  %474 = mul i32 %473, %471
  %475 = and i32 %474, 1
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %477, %476
  %479 = select i1 %478, i32 -1529392037, i32 534816538
  br label %.backedge

480:                                              ; preds = %26
  %481 = sext i32 %.0163 to i64
  %.0..0..0.99 = load volatile i64, i64* %7, align 8
  %482 = mul nsw i64 %.0..0..0.99, %481
  %483 = getelementptr inbounds i8, i8* %24, i64 %482
  %.0..0..0.100 = load volatile i64, i64* %7, align 8
  %484 = mul nsw i64 %.0..0..0.100, %481
  %485 = load i32, i32* %9, align 4
  %486 = sext i32 %485 to i64
  %.idx171 = add nsw i64 %484, %486
  %487 = getelementptr inbounds i8, i8* %24, i64 %.idx171
  %488 = call i32 @_ZSt10accumulateIPbiET0_T_S2_S1_(i8* nonnull %483, i8* nonnull %487, i32 0)
  %489 = add i32 %488, %.0157
  %490 = load i32, i32* @x.3, align 4
  %491 = load i32, i32* @y.4, align 4
  %492 = add i32 %490, -1
  %493 = mul i32 %492, %490
  %494 = and i32 %493, 1
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %496, %495
  %498 = select i1 %497, i32 778918739, i32 534816538
  br label %.backedge

499:                                              ; preds = %26
  br label %.backedge

500:                                              ; preds = %26
  %501 = add i32 %.0163, 1
  br label %.backedge

502:                                              ; preds = %26
  %503 = load i32, i32* @x.3, align 4
  %504 = load i32, i32* @y.4, align 4
  %505 = add i32 %503, -1
  %506 = mul i32 %505, %503
  %507 = and i32 %506, 1
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %509, %508
  %511 = select i1 %510, i32 -194202444, i32 -1903325435
  br label %.backedge

512:                                              ; preds = %26
  %513 = sdiv i32 %.0157, 2
  %514 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %513)
  call void @llvm.stackrestore(i8* %18)
  store i32 0, i32* %1, align 4
  %515 = load i32, i32* @x.3, align 4
  %516 = load i32, i32* @y.4, align 4
  %517 = add i32 %515, -1
  %518 = mul i32 %517, %515
  %519 = and i32 %518, 1
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %521, %520
  %523 = select i1 %522, i32 -463515311, i32 -1903325435
  br label %.backedge

524:                                              ; preds = %26
  %.0..0..0.156 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.156

525:                                              ; preds = %26
  %526 = add i32 %.0163, 1
  br label %.backedge

527:                                              ; preds = %26
  br label %.backedge

528:                                              ; preds = %26
  %529 = sext i32 %.0163 to i64
  %.0..0..0.117 = load volatile i64, i64* %6, align 8
  %.0..0..0.118 = load volatile i64, i64* %6, align 8
  %.0..0..0.119 = load volatile i64, i64* %6, align 8
  %.0..0..0.120 = load volatile i64, i64* %6, align 8
  %.0..0..0.121 = load volatile i64, i64* %6, align 8
  %.0..0..0.122 = load volatile i64, i64* %6, align 8
  %.0..0..0.123 = load volatile i64, i64* %6, align 8
  %530 = mul nsw i64 %.0..0..0.123, %529
  %.0..0..0.150 = load volatile i32*, i32** %5, align 8
  %531 = getelementptr inbounds i32, i32* %.0..0..0.150, i64 %530
  %.0..0..0.124 = load volatile i64, i64* %6, align 8
  %.0..0..0.125 = load volatile i64, i64* %6, align 8
  %.0..0..0.126 = load volatile i64, i64* %6, align 8
  %.0..0..0.127 = load volatile i64, i64* %6, align 8
  %.0..0..0.128 = load volatile i64, i64* %6, align 8
  %.0..0..0.129 = load volatile i64, i64* %6, align 8
  %.0..0..0.130 = load volatile i64, i64* %6, align 8
  %.0..0..0.131 = load volatile i64, i64* %6, align 8
  %.0..0..0.132 = load volatile i64, i64* %6, align 8
  %.0..0..0.133 = load volatile i64, i64* %6, align 8
  %.0..0..0.134 = load volatile i64, i64* %6, align 8
  %.0..0..0.135 = load volatile i64, i64* %6, align 8
  %532 = mul nsw i64 %.0..0..0.135, %529
  %.0..0..0.151 = load volatile i32*, i32** %5, align 8
  %533 = load i32, i32* %9, align 4
  %534 = sext i32 %533 to i64
  %.idx170 = add nsw i64 %532, %534
  %535 = getelementptr inbounds i32, i32* %.0..0..0.151, i64 %.idx170
  store i32 -1, i32* %14, align 4
  call void @_ZSt4fillIPiiEvT_S1_RKT0_(i32* %531, i32* %535, i32* nonnull dereferenceable(4) %14)
  br label %.backedge

536:                                              ; preds = %26
  %537 = add i32 %.0163, 1
  br label %.backedge

538:                                              ; preds = %26
  br label %.backedge

539:                                              ; preds = %26
  br label %.backedge

540:                                              ; preds = %26
  br label %.backedge

541:                                              ; preds = %26
  br label %.backedge

542:                                              ; preds = %26
  br label %.backedge

543:                                              ; preds = %26
  %544 = sext i32 %.0163 to i64
  %.0..0..0.136 = load volatile i64, i64* %6, align 8
  %.0..0..0.137 = load volatile i64, i64* %6, align 8
  %.0..0..0.138 = load volatile i64, i64* %6, align 8
  %.0..0..0.139 = load volatile i64, i64* %6, align 8
  %.0..0..0.140 = load volatile i64, i64* %6, align 8
  %.0..0..0.141 = load volatile i64, i64* %6, align 8
  %.0..0..0.142 = load volatile i64, i64* %6, align 8
  %545 = mul nsw i64 %.0..0..0.142, %544
  %.0..0..0.152 = load volatile i32*, i32** %5, align 8
  %546 = sext i32 %.0167 to i64
  %.idx169 = add nsw i64 %545, %546
  %547 = getelementptr inbounds i32, i32* %.0..0..0.152, i64 %.idx169
  %548 = load i32, i32* %547, align 4
  br label %.backedge

549:                                              ; preds = %26
  %550 = add i32 %.0167, 1
  br label %.backedge

551:                                              ; preds = %26
  br label %.backedge

552:                                              ; preds = %26
  br label %.backedge

553:                                              ; preds = %26
  %554 = sext i32 %.0163 to i64
  %.0..0..0.101 = load volatile i64, i64* %7, align 8
  %.0..0..0.102 = load volatile i64, i64* %7, align 8
  %.0..0..0.103 = load volatile i64, i64* %7, align 8
  %.0..0..0.104 = load volatile i64, i64* %7, align 8
  %.0..0..0.105 = load volatile i64, i64* %7, align 8
  %.0..0..0.106 = load volatile i64, i64* %7, align 8
  %555 = mul nsw i64 %.0..0..0.106, %554
  %556 = getelementptr inbounds i8, i8* %24, i64 %555
  %.0..0..0.107 = load volatile i64, i64* %7, align 8
  %.0..0..0.108 = load volatile i64, i64* %7, align 8
  %557 = mul nsw i64 %.0..0..0.108, %554
  %558 = load i32, i32* %9, align 4
  %559 = sext i32 %558 to i64
  %.idx = add nsw i64 %557, %559
  %560 = getelementptr inbounds i8, i8* %24, i64 %.idx
  %561 = call i32 @_ZSt10accumulateIPbiET0_T_S2_S1_(i8* nonnull %556, i8* nonnull %560, i32 0)
  %562 = add i32 %561, %.0157
  br label %.backedge

563:                                              ; preds = %26
  %564 = sdiv i32 %.0157, 2
  %565 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %564)
  call void @llvm.stackrestore(i8* %18)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #6

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt4fillIPiiEvT_S1_RKT0_(i32* %0, i32* %1, i32* dereferenceable(4) %2) local_unnamed_addr #0 comdat {
  %4 = tail call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %0)
  %5 = tail call i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %1)
  tail call void @_ZSt8__fill_aIPiiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i32* %4, i32* %5, i32* nonnull dereferenceable(4) %2)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32 @_ZSt10accumulateIPbiET0_T_S2_S1_(i8* %0, i8* %1, i32 %2) local_unnamed_addr #7 comdat {
  %4 = alloca i1, align 1
  %5 = alloca i32*, align 8
  %6 = alloca i8**, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i1, align 1
  %9 = alloca i1, align 1
  %10 = load i32, i32* @x.7, align 4
  %11 = load i32, i32* @y.8, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  store i1 %15, i1* %9, align 1
  %16 = icmp slt i32 %11, 10
  store i1 %16, i1* %8, align 1
  br label %17

17:                                               ; preds = %.backedge, %3
  %.0 = phi i32 [ -1250679414, %3 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1250679414, label %18
    i32 205934714, label %21
    i32 952364950, label %34
    i32 2034535956, label %35
    i32 -1209077205, label %45
    i32 -995491340, label %58
    i32 420825736, label %60
    i32 -135077523, label %70
    i32 2078377868, label %86
    i32 1187632872, label %87
    i32 -493240388, label %90
    i32 -1866431007, label %92
    i32 -1637457563, label %93
    i32 320587738, label %94
  ]

.backedge:                                        ; preds = %17, %94, %93, %92, %87, %86, %70, %60, %58, %45, %35, %34, %21, %18
  %.0.be = phi i32 [ %.0, %17 ], [ -135077523, %94 ], [ -1209077205, %93 ], [ 205934714, %92 ], [ 2034535956, %87 ], [ 1187632872, %86 ], [ %85, %70 ], [ %69, %60 ], [ %59, %58 ], [ %57, %45 ], [ %44, %35 ], [ 2034535956, %34 ], [ %33, %21 ], [ %20, %18 ]
  br label %17

18:                                               ; preds = %17
  %.0..0..0. = load volatile i1, i1* %9, align 1
  %.0..0..0.1 = load volatile i1, i1* %8, align 1
  %19 = or i1 %.0..0..0., %.0..0..0.1
  %20 = select i1 %19, i32 205934714, i32 -1866431007
  br label %.backedge

21:                                               ; preds = %17
  %22 = alloca i8*, align 8
  store i8** %22, i8*** %7, align 8
  %23 = alloca i8*, align 8
  store i8** %23, i8*** %6, align 8
  %24 = alloca i32, align 4
  store i32* %24, i32** %5, align 8
  %.0..0..0.2 = load volatile i8**, i8*** %7, align 8
  store i8* %0, i8** %.0..0..0.2, align 8
  %.0..0..0.9 = load volatile i8**, i8*** %6, align 8
  store i8* %1, i8** %.0..0..0.9, align 8
  %.0..0..0.12 = load volatile i32*, i32** %5, align 8
  store i32 %2, i32* %.0..0..0.12, align 4
  %25 = load i32, i32* @x.7, align 4
  %26 = load i32, i32* @y.8, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 952364950, i32 -1866431007
  br label %.backedge

34:                                               ; preds = %17
  br label %.backedge

35:                                               ; preds = %17
  %36 = load i32, i32* @x.7, align 4
  %37 = load i32, i32* @y.8, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 -1209077205, i32 -1637457563
  br label %.backedge

45:                                               ; preds = %17
  %.0..0..0.3 = load volatile i8**, i8*** %7, align 8
  %46 = load i8*, i8** %.0..0..0.3, align 8
  %.0..0..0.10 = load volatile i8**, i8*** %6, align 8
  %47 = load i8*, i8** %.0..0..0.10, align 8
  %48 = icmp ne i8* %46, %47
  store i1 %48, i1* %4, align 1
  %49 = load i32, i32* @x.7, align 4
  %50 = load i32, i32* @y.8, align 4
  %51 = add i32 %49, -1
  %52 = mul i32 %51, %49
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %55, %54
  %57 = select i1 %56, i32 -995491340, i32 -1637457563
  br label %.backedge

58:                                               ; preds = %17
  %.0..0..0.18 = load volatile i1, i1* %4, align 1
  %59 = select i1 %.0..0..0.18, i32 420825736, i32 -493240388
  br label %.backedge

60:                                               ; preds = %17
  %61 = load i32, i32* @x.7, align 4
  %62 = load i32, i32* @y.8, align 4
  %63 = add i32 %61, -1
  %64 = mul i32 %63, %61
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %67, %66
  %69 = select i1 %68, i32 -135077523, i32 320587738
  br label %.backedge

70:                                               ; preds = %17
  %.0..0..0.13 = load volatile i32*, i32** %5, align 8
  %71 = load i32, i32* %.0..0..0.13, align 4
  %.0..0..0.4 = load volatile i8**, i8*** %7, align 8
  %72 = load i8*, i8** %.0..0..0.4, align 8
  %73 = load i8, i8* %72, align 1
  %74 = and i8 %73, 1
  %75 = zext i8 %74 to i32
  %76 = add i32 %71, %75
  %.0..0..0.14 = load volatile i32*, i32** %5, align 8
  store i32 %76, i32* %.0..0..0.14, align 4
  %77 = load i32, i32* @x.7, align 4
  %78 = load i32, i32* @y.8, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 2078377868, i32 320587738
  br label %.backedge

86:                                               ; preds = %17
  br label %.backedge

87:                                               ; preds = %17
  %.0..0..0.5 = load volatile i8**, i8*** %7, align 8
  %88 = load i8*, i8** %.0..0..0.5, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 1
  %.0..0..0.6 = load volatile i8**, i8*** %7, align 8
  store i8* %89, i8** %.0..0..0.6, align 8
  br label %.backedge

90:                                               ; preds = %17
  %.0..0..0.15 = load volatile i32*, i32** %5, align 8
  %91 = load i32, i32* %.0..0..0.15, align 4
  ret i32 %91

92:                                               ; preds = %17
  br label %.backedge

93:                                               ; preds = %17
  %.0..0..0.7 = load volatile i8**, i8*** %7, align 8
  %.0..0..0.11 = load volatile i8**, i8*** %6, align 8
  br label %.backedge

94:                                               ; preds = %17
  %.0..0..0.16 = load volatile i32*, i32** %5, align 8
  %95 = load i32, i32* %.0..0..0.16, align 4
  %.0..0..0.8 = load volatile i8**, i8*** %7, align 8
  %96 = load i8*, i8** %.0..0..0.8, align 8
  %97 = load i8, i8* %96, align 1
  %98 = and i8 %97, 1
  %99 = zext i8 %98 to i32
  %100 = add i32 %95, %99
  %.0..0..0.17 = load volatile i32*, i32** %5, align 8
  store i32 %100, i32* %.0..0..0.17, align 4
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt8__fill_aIPiiEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(i32* %0, i32* %1, i32* dereferenceable(4) %2) local_unnamed_addr #7 comdat {
  %4 = load i32, i32* %2, align 4
  br label %.outer

.outer:                                           ; preds = %8, %3
  %.06.ph = phi i32* [ %9, %8 ], [ %0, %3 ]
  %.not = icmp eq i32* %.06.ph, %1
  %5 = select i1 %.not, i32 179294752, i32 1978413406
  br label %.outer8

.outer8:                                          ; preds = %.outer8.backedge, %.outer
  %.0.ph = phi i32 [ 595739320, %.outer ], [ %.0.ph.be, %.outer8.backedge ]
  br label %6

6:                                                ; preds = %.outer8, %6
  switch i32 %.0.ph, label %6 [
    i32 595739320, label %.outer8.backedge
    i32 1978413406, label %7
    i32 1817811324, label %8
    i32 179294752, label %10
    i32 -1856846282, label %20
    i32 -81918844, label %30
    i32 496943309, label %31
  ]

7:                                                ; preds = %6
  store i32 %4, i32* %.06.ph, align 4
  br label %.outer8.backedge

8:                                                ; preds = %6
  %9 = getelementptr inbounds i32, i32* %.06.ph, i64 1
  br label %.outer

10:                                               ; preds = %6
  %11 = load i32, i32* @x.9, align 4
  %12 = load i32, i32* @y.10, align 4
  %13 = add i32 %11, -1
  %14 = mul i32 %13, %11
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %17, %16
  %19 = select i1 %18, i32 -1856846282, i32 496943309
  br label %.outer8.backedge

20:                                               ; preds = %6
  %21 = load i32, i32* @x.9, align 4
  %22 = load i32, i32* @y.10, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 -81918844, i32 496943309
  br label %.outer8.backedge

30:                                               ; preds = %6
  ret void

31:                                               ; preds = %6
  br label %.outer8.backedge

.outer8.backedge:                                 ; preds = %6, %31, %20, %10, %7
  %.0.ph.be = phi i32 [ 1817811324, %7 ], [ %19, %10 ], [ %29, %20 ], [ -1856846282, %31 ], [ %5, %6 ]
  br label %.outer8
}

; Function Attrs: noinline uwtable
define linkonce_odr i32* @_ZSt12__niter_baseIPiENSt11_Niter_baseIT_E13iterator_typeES2_(i32* %0) local_unnamed_addr #0 comdat {
  %2 = alloca i32*, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.11, align 4
  %6 = load i32, i32* @y.12, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  br label %.outer

.outer:                                           ; preds = %16, %1
  %.ph = phi i32* [ %17, %16 ], [ undef, %1 ]
  %.0.ph = phi i32 [ %26, %16 ], [ -840073355, %1 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %12

12:                                               ; preds = %.outer3, %12
  switch i32 %.0.ph4, label %12 [
    i32 -840073355, label %13
    i32 -183873010, label %16
    i32 -377567576, label %27
    i32 -2085636003, label %28
  ]

13:                                               ; preds = %12
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %14 = or i1 %.0..0..0., %.0..0..0.1
  %15 = select i1 %14, i32 -183873010, i32 -2085636003
  br label %.outer3.backedge

16:                                               ; preds = %12
  %17 = tail call i32* @_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_(i32* %0)
  %18 = load i32, i32* @x.11, align 4
  %19 = load i32, i32* @y.12, align 4
  %20 = add i32 %18, -1
  %21 = mul i32 %20, %18
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %24, %23
  %26 = select i1 %25, i32 -377567576, i32 -2085636003
  br label %.outer

27:                                               ; preds = %12
  store i32* %.ph, i32** %2, align 8
  %.0..0..0.2 = load volatile i32*, i32** %2, align 8
  ret i32* %.0..0..0.2

28:                                               ; preds = %12
  %29 = tail call i32* @_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_(i32* %0)
  br label %.outer3.backedge

.outer3.backedge:                                 ; preds = %28, %13
  %.0.ph4.be = phi i32 [ %15, %13 ], [ -183873010, %28 ]
  br label %.outer3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i32* @_ZNSt10_Iter_baseIPiLb0EE7_S_baseES0_(i32* %0) local_unnamed_addr #7 comdat align 2 {
  ret i32* %0
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s327880281.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { mustprogress nofree nosync nounwind willreturn }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #9 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
