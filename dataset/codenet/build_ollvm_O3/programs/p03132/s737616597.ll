; ModuleID = 'build_ollvm/programs/p03132/s737616597.ll'
source_filename = "Project_CodeNet_C++1400/p03132/s737616597.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

$_Z5printIRxJEEvOT_DpOT0_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@dp = global [200010 x [5 x i64]] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s737616597.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn
define void @_Z5printv() local_unnamed_addr #4 {
  ret void
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i64, align 8
  %4 = alloca [200010 x i64], align 16
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %8 = getelementptr i8, i8* %7, i64 -24
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %10
  %12 = bitcast i8* %11 to %"class.std::basic_ios"*
  %13 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %12, %"class.std::basic_ostream"* null)
  %14 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %15 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %3)
  br label %16

16:                                               ; preds = %.backedge, %0
  %.064 = phi i64 [ 0, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i64 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i64 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i64 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i64 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i64 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i64 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.050 = phi i64 [ undef, %0 ], [ %.050.be, %.backedge ]
  %.0 = phi i32 [ -591418511, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -591418511, label %17
    i32 893474201, label %21
    i32 527320401, label %24
    i32 -1756934667, label %34
    i32 -919233101, label %44
    i32 -349524979, label %45
    i32 -990841265, label %55
    i32 -899120408, label %65
    i32 -1341480079, label %66
    i32 -1236694812, label %71
    i32 -667842433, label %72
    i32 1923438755, label %75
    i32 -769099563, label %78
    i32 1756264965, label %88
    i32 -1642511954, label %99
    i32 1141501398, label %100
    i32 -684099882, label %102
    i32 -65427113, label %112
    i32 -1008733976, label %122
    i32 1856380047, label %123
    i32 1560546513, label %133
    i32 1743673016, label %144
    i32 1179178032, label %145
    i32 719031042, label %155
    i32 1293394651, label %165
    i32 1548231052, label %166
    i32 1860575800, label %168
    i32 330869858, label %169
    i32 -406687751, label %173
    i32 -421924732, label %183
    i32 -2101521241, label %193
    i32 -428627710, label %194
    i32 -982931659, label %204
    i32 289532138, label %215
    i32 -1793648688, label %217
    i32 417266705, label %227
    i32 -1192946996, label %237
    i32 508158954, label %238
    i32 -186898837, label %242
    i32 -254210610, label %245
    i32 2043755866, label %248
    i32 -1063135583, label %251
    i32 -949248737, label %254
    i32 254117763, label %264
    i32 -1650625411, label %275
    i32 1860037410, label %277
    i32 -270183462, label %283
    i32 500751953, label %293
    i32 -6209929, label %304
    i32 1601359920, label %305
    i32 150668178, label %315
    i32 -1524368106, label %325
    i32 -725674486, label %326
    i32 172488550, label %336
    i32 -491389647, label %349
    i32 -1474473317, label %350
    i32 -1609960541, label %351
    i32 -1174151000, label %359
    i32 1743851876, label %369
    i32 752085342, label %380
    i32 -709484513, label %381
    i32 638848295, label %391
    i32 -1301339404, label %401
    i32 1444167714, label %402
    i32 1574524596, label %404
    i32 -265916652, label %405
    i32 -313222700, label %407
    i32 1167075780, label %408
    i32 -276059920, label %411
    i32 1169310588, label %416
    i32 2002514954, label %418
    i32 1498315402, label %419
    i32 -908285796, label %421
    i32 1496974183, label %422
    i32 -1672814196, label %424
    i32 426040119, label %425
    i32 1753723925, label %427
    i32 808089193, label %428
    i32 322730154, label %429
    i32 -940159206, label %430
    i32 1852274251, label %431
    i32 1137496859, label %432
    i32 -372200479, label %434
    i32 518769110, label %435
    i32 -1658589412, label %440
    i32 2101610797, label %442
  ]

.backedge:                                        ; preds = %16, %442, %440, %435, %434, %432, %431, %430, %429, %428, %427, %425, %424, %422, %421, %419, %416, %411, %408, %407, %405, %404, %402, %401, %391, %381, %380, %369, %359, %351, %350, %349, %336, %326, %325, %315, %305, %304, %293, %283, %277, %275, %264, %254, %251, %248, %245, %242, %238, %237, %227, %217, %215, %204, %194, %193, %183, %173, %169, %168, %166, %165, %155, %145, %144, %133, %123, %122, %112, %102, %100, %99, %88, %78, %75, %72, %71, %66, %65, %55, %45, %44, %34, %24, %21, %17
  %.064.be = phi i64 [ %.064, %16 ], [ %.064, %442 ], [ %.064, %440 ], [ %.064, %435 ], [ %.064, %434 ], [ %.064, %432 ], [ %.064, %431 ], [ %.064, %430 ], [ %.064, %429 ], [ %.064, %428 ], [ %.064, %427 ], [ %.064, %425 ], [ %.064, %424 ], [ %.064, %422 ], [ %.064, %421 ], [ %420, %419 ], [ %.064, %416 ], [ %.064, %411 ], [ %.064, %408 ], [ %.064, %407 ], [ %.064, %405 ], [ %.064, %404 ], [ %.064, %402 ], [ %.064, %401 ], [ %.064, %391 ], [ %.064, %381 ], [ %.064, %380 ], [ %.064, %369 ], [ %.064, %359 ], [ %.064, %351 ], [ %.064, %350 ], [ %.064, %349 ], [ %.064, %336 ], [ %.064, %326 ], [ %.064, %325 ], [ %.064, %315 ], [ %.064, %305 ], [ %.064, %304 ], [ %.064, %293 ], [ %.064, %283 ], [ %.064, %277 ], [ %.064, %275 ], [ %.064, %264 ], [ %.064, %254 ], [ %.064, %251 ], [ %.064, %248 ], [ %.064, %245 ], [ %.064, %242 ], [ %.064, %238 ], [ %.064, %237 ], [ %.064, %227 ], [ %.064, %217 ], [ %.064, %215 ], [ %.064, %204 ], [ %.064, %194 ], [ %.064, %193 ], [ %.064, %183 ], [ %.064, %173 ], [ %.064, %169 ], [ %.064, %168 ], [ %.064, %166 ], [ %.064, %165 ], [ %.064, %155 ], [ %.064, %145 ], [ %.064, %144 ], [ %.064, %133 ], [ %.064, %123 ], [ %.064, %122 ], [ %.064, %112 ], [ %.064, %102 ], [ %.064, %100 ], [ %.064, %99 ], [ %.064, %88 ], [ %.064, %78 ], [ %.064, %75 ], [ %.064, %72 ], [ %.064, %71 ], [ %.064, %66 ], [ %.064, %65 ], [ %.064, %55 ], [ %.064, %45 ], [ %.064, %44 ], [ %.neg66, %34 ], [ %.064, %24 ], [ %.064, %21 ], [ %.064, %17 ]
  %.062.be = phi i64 [ %.062, %16 ], [ %.062, %442 ], [ %.062, %440 ], [ %.062, %435 ], [ %.062, %434 ], [ %.062, %432 ], [ %.062, %431 ], [ %.062, %430 ], [ %.062, %429 ], [ %.062, %428 ], [ %.062, %427 ], [ %.062, %425 ], [ %.062, %424 ], [ %.062, %422 ], [ 0, %421 ], [ %.062, %419 ], [ %.062, %416 ], [ %.062, %411 ], [ %.062, %408 ], [ %.062, %407 ], [ %.062, %405 ], [ %.062, %404 ], [ %.062, %402 ], [ %.062, %401 ], [ %.062, %391 ], [ %.062, %381 ], [ %.062, %380 ], [ %.062, %369 ], [ %.062, %359 ], [ %.062, %351 ], [ %.062, %350 ], [ %.062, %349 ], [ %.062, %336 ], [ %.062, %326 ], [ %.062, %325 ], [ %.062, %315 ], [ %.062, %305 ], [ %.062, %304 ], [ %.062, %293 ], [ %.062, %283 ], [ %.062, %277 ], [ %.062, %275 ], [ %.062, %264 ], [ %.062, %254 ], [ %.062, %251 ], [ %.062, %248 ], [ %.062, %245 ], [ %.062, %242 ], [ %.062, %238 ], [ %.062, %237 ], [ %.062, %227 ], [ %.062, %217 ], [ %.062, %215 ], [ %.062, %204 ], [ %.062, %194 ], [ %.062, %193 ], [ %.062, %183 ], [ %.062, %173 ], [ %.062, %169 ], [ %.062, %168 ], [ %167, %166 ], [ %.062, %165 ], [ %.062, %155 ], [ %.062, %145 ], [ %.062, %144 ], [ %.062, %133 ], [ %.062, %123 ], [ %.062, %122 ], [ %.062, %112 ], [ %.062, %102 ], [ %.062, %100 ], [ %.062, %99 ], [ %.062, %88 ], [ %.062, %78 ], [ %.062, %75 ], [ %.062, %72 ], [ %.062, %71 ], [ %.062, %66 ], [ %.062, %65 ], [ 0, %55 ], [ %.062, %45 ], [ %.062, %44 ], [ %.062, %34 ], [ %.062, %24 ], [ %.062, %21 ], [ %.062, %17 ]
  %.060.be = phi i64 [ %.060, %16 ], [ %.060, %442 ], [ %.060, %440 ], [ %.060, %435 ], [ %.060, %434 ], [ %.060, %432 ], [ %.060, %431 ], [ %.060, %430 ], [ %.060, %429 ], [ %.060, %428 ], [ %.060, %427 ], [ %426, %425 ], [ %.060, %424 ], [ %.060, %422 ], [ %.060, %421 ], [ %.060, %419 ], [ %.060, %416 ], [ %.060, %411 ], [ %.060, %408 ], [ %.060, %407 ], [ %.060, %405 ], [ %.060, %404 ], [ %.060, %402 ], [ %.060, %401 ], [ %.060, %391 ], [ %.060, %381 ], [ %.060, %380 ], [ %.060, %369 ], [ %.060, %359 ], [ %.060, %351 ], [ %.060, %350 ], [ %.060, %349 ], [ %.060, %336 ], [ %.060, %326 ], [ %.060, %325 ], [ %.060, %315 ], [ %.060, %305 ], [ %.060, %304 ], [ %.060, %293 ], [ %.060, %283 ], [ %.060, %277 ], [ %.060, %275 ], [ %.060, %264 ], [ %.060, %254 ], [ %.060, %251 ], [ %.060, %248 ], [ %.060, %245 ], [ %.060, %242 ], [ %.060, %238 ], [ %.060, %237 ], [ %.060, %227 ], [ %.060, %217 ], [ %.060, %215 ], [ %.060, %204 ], [ %.060, %194 ], [ %.060, %193 ], [ %.060, %183 ], [ %.060, %173 ], [ %.060, %169 ], [ %.060, %168 ], [ %.060, %166 ], [ %.060, %165 ], [ %.060, %155 ], [ %.060, %145 ], [ %.060, %144 ], [ %134, %133 ], [ %.060, %123 ], [ %.060, %122 ], [ %.060, %112 ], [ %.060, %102 ], [ %.060, %100 ], [ %.060, %99 ], [ %.060, %88 ], [ %.060, %78 ], [ %.060, %75 ], [ %.060, %72 ], [ 0, %71 ], [ %.060, %66 ], [ %.060, %65 ], [ %.060, %55 ], [ %.060, %45 ], [ %.060, %44 ], [ %.060, %34 ], [ %.060, %24 ], [ %.060, %21 ], [ %.060, %17 ]
  %.058.be = phi i64 [ %.058, %16 ], [ %.058, %442 ], [ %.058, %440 ], [ %.058, %435 ], [ %.058, %434 ], [ %.058, %432 ], [ %.058, %431 ], [ %.058, %430 ], [ %.058, %429 ], [ %.058, %428 ], [ %.058, %427 ], [ %.058, %425 ], [ %.058, %424 ], [ %.058, %422 ], [ %.058, %421 ], [ %.058, %419 ], [ %.058, %416 ], [ %.058, %411 ], [ %.058, %408 ], [ %.058, %407 ], [ %406, %405 ], [ %.058, %404 ], [ %.058, %402 ], [ %.058, %401 ], [ %.058, %391 ], [ %.058, %381 ], [ %.058, %380 ], [ %.058, %369 ], [ %.058, %359 ], [ %.058, %351 ], [ %.058, %350 ], [ %.058, %349 ], [ %.058, %336 ], [ %.058, %326 ], [ %.058, %325 ], [ %.058, %315 ], [ %.058, %305 ], [ %.058, %304 ], [ %.058, %293 ], [ %.058, %283 ], [ %.058, %277 ], [ %.058, %275 ], [ %.058, %264 ], [ %.058, %254 ], [ %.058, %251 ], [ %.058, %248 ], [ %.058, %245 ], [ %.058, %242 ], [ %.058, %238 ], [ %.058, %237 ], [ %.058, %227 ], [ %.058, %217 ], [ %.058, %215 ], [ %.058, %204 ], [ %.058, %194 ], [ %.058, %193 ], [ %.058, %183 ], [ %.058, %173 ], [ %.058, %169 ], [ 0, %168 ], [ %.058, %166 ], [ %.058, %165 ], [ %.058, %155 ], [ %.058, %145 ], [ %.058, %144 ], [ %.058, %133 ], [ %.058, %123 ], [ %.058, %122 ], [ %.058, %112 ], [ %.058, %102 ], [ %.058, %100 ], [ %.058, %99 ], [ %.058, %88 ], [ %.058, %78 ], [ %.058, %75 ], [ %.058, %72 ], [ %.058, %71 ], [ %.058, %66 ], [ %.058, %65 ], [ %.058, %55 ], [ %.058, %45 ], [ %.058, %44 ], [ %.058, %34 ], [ %.058, %24 ], [ %.058, %21 ], [ %.058, %17 ]
  %.056.be = phi i64 [ %.056, %16 ], [ %.056, %442 ], [ %.056, %440 ], [ %.056, %435 ], [ %.056, %434 ], [ %.056, %432 ], [ %.056, %431 ], [ %.056, %430 ], [ %.056, %429 ], [ 0, %428 ], [ %.056, %427 ], [ %.056, %425 ], [ %.056, %424 ], [ %.056, %422 ], [ %.056, %421 ], [ %.056, %419 ], [ %.056, %416 ], [ %.056, %411 ], [ %.056, %408 ], [ %.056, %407 ], [ %.056, %405 ], [ %.056, %404 ], [ %403, %402 ], [ %.056, %401 ], [ %.056, %391 ], [ %.056, %381 ], [ %.056, %380 ], [ %.056, %369 ], [ %.056, %359 ], [ %.056, %351 ], [ %.056, %350 ], [ %.056, %349 ], [ %.056, %336 ], [ %.056, %326 ], [ %.056, %325 ], [ %.056, %315 ], [ %.056, %305 ], [ %.056, %304 ], [ %.056, %293 ], [ %.056, %283 ], [ %.056, %277 ], [ %.056, %275 ], [ %.056, %264 ], [ %.056, %254 ], [ %.056, %251 ], [ %.056, %248 ], [ %.056, %245 ], [ %.056, %242 ], [ %.056, %238 ], [ %.056, %237 ], [ %.056, %227 ], [ %.056, %217 ], [ %.056, %215 ], [ %.056, %204 ], [ %.056, %194 ], [ %.056, %193 ], [ 0, %183 ], [ %.056, %173 ], [ %.056, %169 ], [ %.056, %168 ], [ %.056, %166 ], [ %.056, %165 ], [ %.056, %155 ], [ %.056, %145 ], [ %.056, %144 ], [ %.056, %133 ], [ %.056, %123 ], [ %.056, %122 ], [ %.056, %112 ], [ %.056, %102 ], [ %.056, %100 ], [ %.056, %99 ], [ %.056, %88 ], [ %.056, %78 ], [ %.056, %75 ], [ %.056, %72 ], [ %.056, %71 ], [ %.056, %66 ], [ %.056, %65 ], [ %.056, %55 ], [ %.056, %45 ], [ %.056, %44 ], [ %.056, %34 ], [ %.056, %24 ], [ %.056, %21 ], [ %.056, %17 ]
  %.054.be = phi i64 [ %.054, %16 ], [ %.054, %442 ], [ %441, %440 ], [ %.054, %435 ], [ %.054, %434 ], [ %.054, %432 ], [ %.054, %431 ], [ 0, %430 ], [ %.054, %429 ], [ %.054, %428 ], [ %.054, %427 ], [ %.054, %425 ], [ %.054, %424 ], [ %.054, %422 ], [ %.054, %421 ], [ %.054, %419 ], [ %.054, %416 ], [ %.054, %411 ], [ %.054, %408 ], [ %.054, %407 ], [ %.054, %405 ], [ %.054, %404 ], [ %.054, %402 ], [ %.054, %401 ], [ %.054, %391 ], [ %.054, %381 ], [ %.054, %380 ], [ %370, %369 ], [ %.054, %359 ], [ %.054, %351 ], [ %.054, %350 ], [ %.054, %349 ], [ %.054, %336 ], [ %.054, %326 ], [ %.054, %325 ], [ %.054, %315 ], [ %.054, %305 ], [ %.054, %304 ], [ %.054, %293 ], [ %.054, %283 ], [ %.054, %277 ], [ %.054, %275 ], [ %.054, %264 ], [ %.054, %254 ], [ %.054, %251 ], [ %.054, %248 ], [ %.054, %245 ], [ %.054, %242 ], [ %.054, %238 ], [ %.054, %237 ], [ 0, %227 ], [ %.054, %217 ], [ %.054, %215 ], [ %.054, %204 ], [ %.054, %194 ], [ %.054, %193 ], [ %.054, %183 ], [ %.054, %173 ], [ %.054, %169 ], [ %.054, %168 ], [ %.054, %166 ], [ %.054, %165 ], [ %.054, %155 ], [ %.054, %145 ], [ %.054, %144 ], [ %.054, %133 ], [ %.054, %123 ], [ %.054, %122 ], [ %.054, %112 ], [ %.054, %102 ], [ %.054, %100 ], [ %.054, %99 ], [ %.054, %88 ], [ %.054, %78 ], [ %.054, %75 ], [ %.054, %72 ], [ %.054, %71 ], [ %.054, %66 ], [ %.054, %65 ], [ %.054, %55 ], [ %.054, %45 ], [ %.054, %44 ], [ %.054, %34 ], [ %.054, %24 ], [ %.054, %21 ], [ %.054, %17 ]
  %.052.be = phi i64 [ %.052, %16 ], [ %.052, %442 ], [ %.052, %440 ], [ %439, %435 ], [ %.052, %434 ], [ %433, %432 ], [ %.052, %431 ], [ %.052, %430 ], [ %.052, %429 ], [ %.052, %428 ], [ %.052, %427 ], [ %.052, %425 ], [ %.052, %424 ], [ %.052, %422 ], [ %.052, %421 ], [ %.052, %419 ], [ %.052, %416 ], [ %.052, %411 ], [ %.052, %408 ], [ %.052, %407 ], [ %.052, %405 ], [ %.052, %404 ], [ %.052, %402 ], [ %.052, %401 ], [ %.052, %391 ], [ %.052, %381 ], [ %.052, %380 ], [ %.052, %369 ], [ %.052, %359 ], [ %.052, %351 ], [ %.052, %350 ], [ %.052, %349 ], [ %339, %336 ], [ %.052, %326 ], [ %.052, %325 ], [ %.052, %315 ], [ %.052, %305 ], [ %.052, %304 ], [ %294, %293 ], [ %.052, %283 ], [ %280, %277 ], [ %.052, %275 ], [ %.052, %264 ], [ %.052, %254 ], [ %.052, %251 ], [ %250, %248 ], [ %.052, %245 ], [ 0, %242 ], [ %.052, %238 ], [ %.052, %237 ], [ %.052, %227 ], [ %.052, %217 ], [ %.052, %215 ], [ %.052, %204 ], [ %.052, %194 ], [ %.052, %193 ], [ %.052, %183 ], [ %.052, %173 ], [ %.052, %169 ], [ %.052, %168 ], [ %.052, %166 ], [ %.052, %165 ], [ %.052, %155 ], [ %.052, %145 ], [ %.052, %144 ], [ %.052, %133 ], [ %.052, %123 ], [ %.052, %122 ], [ %.052, %112 ], [ %.052, %102 ], [ %.052, %100 ], [ %.052, %99 ], [ %.052, %88 ], [ %.052, %78 ], [ %.052, %75 ], [ %.052, %72 ], [ %.052, %71 ], [ %.052, %66 ], [ %.052, %65 ], [ %.052, %55 ], [ %.052, %45 ], [ %.052, %44 ], [ %.052, %34 ], [ %.052, %24 ], [ %.052, %21 ], [ %.052, %17 ]
  %.050.be = phi i64 [ %.050, %16 ], [ %.050, %442 ], [ %.050, %440 ], [ %.050, %435 ], [ %.050, %434 ], [ %.050, %432 ], [ %.050, %431 ], [ %.050, %430 ], [ %.050, %429 ], [ %.050, %428 ], [ %.050, %427 ], [ %.050, %425 ], [ %.050, %424 ], [ %.050, %422 ], [ %.050, %421 ], [ %.050, %419 ], [ %417, %416 ], [ %.050, %411 ], [ %.050, %408 ], [ 0, %407 ], [ %.050, %405 ], [ %.050, %404 ], [ %.050, %402 ], [ %.050, %401 ], [ %.050, %391 ], [ %.050, %381 ], [ %.050, %380 ], [ %.050, %369 ], [ %.050, %359 ], [ %.050, %351 ], [ %.050, %350 ], [ %.050, %349 ], [ %.050, %336 ], [ %.050, %326 ], [ %.050, %325 ], [ %.050, %315 ], [ %.050, %305 ], [ %.050, %304 ], [ %.050, %293 ], [ %.050, %283 ], [ %.050, %277 ], [ %.050, %275 ], [ %.050, %264 ], [ %.050, %254 ], [ %.050, %251 ], [ %.050, %248 ], [ %.050, %245 ], [ %.050, %242 ], [ %.050, %238 ], [ %.050, %237 ], [ %.050, %227 ], [ %.050, %217 ], [ %.050, %215 ], [ %.050, %204 ], [ %.050, %194 ], [ %.050, %193 ], [ %.050, %183 ], [ %.050, %173 ], [ %.050, %169 ], [ %.050, %168 ], [ %.050, %166 ], [ %.050, %165 ], [ %.050, %155 ], [ %.050, %145 ], [ %.050, %144 ], [ %.050, %133 ], [ %.050, %123 ], [ %.050, %122 ], [ %.050, %112 ], [ %.050, %102 ], [ %.050, %100 ], [ %.050, %99 ], [ %.050, %88 ], [ %.050, %78 ], [ %.050, %75 ], [ %.050, %72 ], [ %.050, %71 ], [ %.050, %66 ], [ %.050, %65 ], [ %.050, %55 ], [ %.050, %45 ], [ %.050, %44 ], [ %.050, %34 ], [ %.050, %24 ], [ %.050, %21 ], [ %.050, %17 ]
  %.0.be = phi i32 [ %.0, %16 ], [ 638848295, %442 ], [ 1743851876, %440 ], [ 172488550, %435 ], [ 150668178, %434 ], [ 500751953, %432 ], [ 254117763, %431 ], [ 417266705, %430 ], [ -982931659, %429 ], [ -421924732, %428 ], [ 719031042, %427 ], [ 1560546513, %425 ], [ -65427113, %424 ], [ 1756264965, %422 ], [ -990841265, %421 ], [ -1756934667, %419 ], [ 1167075780, %416 ], [ 1169310588, %411 ], [ %410, %408 ], [ 1167075780, %407 ], [ 330869858, %405 ], [ -265916652, %404 ], [ -428627710, %402 ], [ 1444167714, %401 ], [ %400, %391 ], [ %390, %381 ], [ 508158954, %380 ], [ %379, %369 ], [ %368, %359 ], [ -1174151000, %351 ], [ -1609960541, %350 ], [ -1474473317, %349 ], [ %348, %336 ], [ %335, %326 ], [ -1474473317, %325 ], [ %324, %315 ], [ %314, %305 ], [ 1601359920, %304 ], [ %303, %293 ], [ %292, %283 ], [ %282, %277 ], [ %276, %275 ], [ %274, %264 ], [ %263, %254 ], [ %253, %251 ], [ -1609960541, %248 ], [ %247, %245 ], [ %244, %242 ], [ %241, %238 ], [ 508158954, %237 ], [ %236, %227 ], [ %226, %217 ], [ %216, %215 ], [ %214, %204 ], [ %203, %194 ], [ -428627710, %193 ], [ %192, %183 ], [ %182, %173 ], [ %172, %169 ], [ 330869858, %168 ], [ -1341480079, %166 ], [ 1548231052, %165 ], [ %164, %155 ], [ %154, %145 ], [ -667842433, %144 ], [ %143, %133 ], [ %132, %123 ], [ 1856380047, %122 ], [ %121, %112 ], [ %111, %102 ], [ -684099882, %100 ], [ -684099882, %99 ], [ %98, %88 ], [ %87, %78 ], [ %77, %75 ], [ %74, %72 ], [ -667842433, %71 ], [ %70, %66 ], [ -1341480079, %65 ], [ %64, %55 ], [ %54, %45 ], [ -591418511, %44 ], [ %43, %34 ], [ %33, %24 ], [ 527320401, %21 ], [ %20, %17 ]
  br label %16

17:                                               ; preds = %16
  %18 = load i64, i64* %3, align 8
  %19 = icmp slt i64 %.064, %18
  %20 = select i1 %19, i32 893474201, i32 -349524979
  br label %.backedge

21:                                               ; preds = %16
  %22 = getelementptr inbounds [200010 x i64], [200010 x i64]* %4, i64 0, i64 %.064
  %23 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %22)
  br label %.backedge

24:                                               ; preds = %16
  %25 = load i32, i32* @x.3, align 4
  %26 = load i32, i32* @y.4, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 -1756934667, i32 1498315402
  br label %.backedge

34:                                               ; preds = %16
  %.neg66 = add i64 %.064, 1
  %35 = load i32, i32* @x.3, align 4
  %36 = load i32, i32* @y.4, align 4
  %37 = add i32 %35, -1
  %38 = mul i32 %37, %35
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %41, %40
  %43 = select i1 %42, i32 -919233101, i32 1498315402
  br label %.backedge

44:                                               ; preds = %16
  br label %.backedge

45:                                               ; preds = %16
  %46 = load i32, i32* @x.3, align 4
  %47 = load i32, i32* @y.4, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -990841265, i32 -908285796
  br label %.backedge

55:                                               ; preds = %16
  %56 = load i32, i32* @x.3, align 4
  %57 = load i32, i32* @y.4, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 -899120408, i32 -908285796
  br label %.backedge

65:                                               ; preds = %16
  br label %.backedge

66:                                               ; preds = %16
  %67 = load i64, i64* %3, align 8
  %68 = add i64 %67, 1
  %69 = icmp slt i64 %.062, %68
  %70 = select i1 %69, i32 -1236694812, i32 1860575800
  br label %.backedge

71:                                               ; preds = %16
  br label %.backedge

72:                                               ; preds = %16
  %73 = icmp slt i64 %.060, 5
  %74 = select i1 %73, i32 1923438755, i32 1179178032
  br label %.backedge

75:                                               ; preds = %16
  %76 = icmp eq i64 %.062, 0
  %77 = select i1 %76, i32 -769099563, i32 1141501398
  br label %.backedge

78:                                               ; preds = %16
  %79 = load i32, i32* @x.3, align 4
  %80 = load i32, i32* @y.4, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 1756264965, i32 1496974183
  br label %.backedge

88:                                               ; preds = %16
  %89 = getelementptr inbounds [200010 x [5 x i64]], [200010 x [5 x i64]]* @dp, i64 0, i64 %.062, i64 %.060
  store i64 0, i64* %89, align 8
  %90 = load i32, i32* @x.3, align 4
  %91 = load i32, i32* @y.4, align 4
  %92 = add i32 %90, -1
  %93 = mul i32 %92, %90
  %94 = and i32 %93, 1
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %96, %95
  %98 = select i1 %97, i32 -1642511954, i32 1496974183
  br label %.backedge

99:                                               ; preds = %16
  br label %.backedge

100:                                              ; preds = %16
  %101 = getelementptr inbounds [200010 x [5 x i64]], [200010 x [5 x i64]]* @dp, i64 0, i64 %.062, i64 %.060
  store i64 1000000000000000000, i64* %101, align 8
  br label %.backedge

102:                                              ; preds = %16
  %103 = load i32, i32* @x.3, align 4
  %104 = load i32, i32* @y.4, align 4
  %105 = add i32 %103, -1
  %106 = mul i32 %105, %103
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %109, %108
  %111 = select i1 %110, i32 -65427113, i32 -1672814196
  br label %.backedge

112:                                              ; preds = %16
  %113 = load i32, i32* @x.3, align 4
  %114 = load i32, i32* @y.4, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 -1008733976, i32 -1672814196
  br label %.backedge

122:                                              ; preds = %16
  br label %.backedge

123:                                              ; preds = %16
  %124 = load i32, i32* @x.3, align 4
  %125 = load i32, i32* @y.4, align 4
  %126 = add i32 %124, -1
  %127 = mul i32 %126, %124
  %128 = and i32 %127, 1
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %130, %129
  %132 = select i1 %131, i32 1560546513, i32 426040119
  br label %.backedge

133:                                              ; preds = %16
  %134 = add i64 %.060, 1
  %135 = load i32, i32* @x.3, align 4
  %136 = load i32, i32* @y.4, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 1743673016, i32 426040119
  br label %.backedge

144:                                              ; preds = %16
  br label %.backedge

145:                                              ; preds = %16
  %146 = load i32, i32* @x.3, align 4
  %147 = load i32, i32* @y.4, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 719031042, i32 1753723925
  br label %.backedge

155:                                              ; preds = %16
  %156 = load i32, i32* @x.3, align 4
  %157 = load i32, i32* @y.4, align 4
  %158 = add i32 %156, -1
  %159 = mul i32 %158, %156
  %160 = and i32 %159, 1
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %162, %161
  %164 = select i1 %163, i32 1293394651, i32 1753723925
  br label %.backedge

165:                                              ; preds = %16
  br label %.backedge

166:                                              ; preds = %16
  %167 = add i64 %.062, 1
  br label %.backedge

168:                                              ; preds = %16
  br label %.backedge

169:                                              ; preds = %16
  %170 = load i64, i64* %3, align 8
  %171 = icmp slt i64 %.058, %170
  %172 = select i1 %171, i32 -406687751, i32 -313222700
  br label %.backedge

173:                                              ; preds = %16
  %174 = load i32, i32* @x.3, align 4
  %175 = load i32, i32* @y.4, align 4
  %176 = add i32 %174, -1
  %177 = mul i32 %176, %174
  %178 = and i32 %177, 1
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %180, %179
  %182 = select i1 %181, i32 -421924732, i32 808089193
  br label %.backedge

183:                                              ; preds = %16
  %184 = load i32, i32* @x.3, align 4
  %185 = load i32, i32* @y.4, align 4
  %186 = add i32 %184, -1
  %187 = mul i32 %186, %184
  %188 = and i32 %187, 1
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %190, %189
  %192 = select i1 %191, i32 -2101521241, i32 808089193
  br label %.backedge

193:                                              ; preds = %16
  br label %.backedge

194:                                              ; preds = %16
  %195 = load i32, i32* @x.3, align 4
  %196 = load i32, i32* @y.4, align 4
  %197 = add i32 %195, -1
  %198 = mul i32 %197, %195
  %199 = and i32 %198, 1
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %201, %200
  %203 = select i1 %202, i32 -982931659, i32 322730154
  br label %.backedge

204:                                              ; preds = %16
  %205 = icmp slt i64 %.056, 5
  store i1 %205, i1* %2, align 1
  %206 = load i32, i32* @x.3, align 4
  %207 = load i32, i32* @y.4, align 4
  %208 = add i32 %206, -1
  %209 = mul i32 %208, %206
  %210 = and i32 %209, 1
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %212, %211
  %214 = select i1 %213, i32 289532138, i32 322730154
  br label %.backedge

215:                                              ; preds = %16
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %216 = select i1 %.0..0..0., i32 -1793648688, i32 1574524596
  br label %.backedge

217:                                              ; preds = %16
  %218 = load i32, i32* @x.3, align 4
  %219 = load i32, i32* @y.4, align 4
  %220 = add i32 %218, -1
  %221 = mul i32 %220, %218
  %222 = and i32 %221, 1
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %224, %223
  %226 = select i1 %225, i32 417266705, i32 -940159206
  br label %.backedge

227:                                              ; preds = %16
  %228 = load i32, i32* @x.3, align 4
  %229 = load i32, i32* @y.4, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 -1192946996, i32 -940159206
  br label %.backedge

237:                                              ; preds = %16
  br label %.backedge

238:                                              ; preds = %16
  %239 = add i64 %.056, 1
  %240 = icmp slt i64 %.054, %239
  %241 = select i1 %240, i32 -186898837, i32 -709484513
  br label %.backedge

242:                                              ; preds = %16
  %243 = icmp eq i64 %.056, 0
  %244 = select i1 %243, i32 2043755866, i32 -254210610
  br label %.backedge

245:                                              ; preds = %16
  %246 = icmp eq i64 %.056, 4
  %247 = select i1 %246, i32 2043755866, i32 -1063135583
  br label %.backedge

248:                                              ; preds = %16
  %249 = getelementptr inbounds [200010 x i64], [200010 x i64]* %4, i64 0, i64 %.058
  %250 = load i64, i64* %249, align 8
  br label %.backedge

251:                                              ; preds = %16
  %252 = icmp eq i64 %.056, 1
  %253 = select i1 %252, i32 1860037410, i32 -949248737
  br label %.backedge

254:                                              ; preds = %16
  %255 = load i32, i32* @x.3, align 4
  %256 = load i32, i32* @y.4, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 254117763, i32 1852274251
  br label %.backedge

264:                                              ; preds = %16
  %265 = icmp eq i64 %.056, 3
  store i1 %265, i1* %1, align 1
  %266 = load i32, i32* @x.3, align 4
  %267 = load i32, i32* @y.4, align 4
  %268 = add i32 %266, -1
  %269 = mul i32 %268, %266
  %270 = and i32 %269, 1
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %272, %271
  %274 = select i1 %273, i32 -1650625411, i32 1852274251
  br label %.backedge

275:                                              ; preds = %16
  %.0..0..0.49 = load volatile i1, i1* %1, align 1
  %276 = select i1 %.0..0..0.49, i32 1860037410, i32 -725674486
  br label %.backedge

277:                                              ; preds = %16
  %278 = getelementptr inbounds [200010 x i64], [200010 x i64]* %4, i64 0, i64 %.058
  %279 = load i64, i64* %278, align 8
  %280 = srem i64 %279, 2
  %281 = icmp eq i64 %279, 0
  %282 = select i1 %281, i32 -270183462, i32 1601359920
  br label %.backedge

283:                                              ; preds = %16
  %284 = load i32, i32* @x.3, align 4
  %285 = load i32, i32* @y.4, align 4
  %286 = add i32 %284, -1
  %287 = mul i32 %286, %284
  %288 = and i32 %287, 1
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %290, %289
  %292 = select i1 %291, i32 500751953, i32 1137496859
  br label %.backedge

293:                                              ; preds = %16
  %294 = add i64 %.052, 2
  %295 = load i32, i32* @x.3, align 4
  %296 = load i32, i32* @y.4, align 4
  %297 = add i32 %295, -1
  %298 = mul i32 %297, %295
  %299 = and i32 %298, 1
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %301, %300
  %303 = select i1 %302, i32 -6209929, i32 1137496859
  br label %.backedge

304:                                              ; preds = %16
  br label %.backedge

305:                                              ; preds = %16
  %306 = load i32, i32* @x.3, align 4
  %307 = load i32, i32* @y.4, align 4
  %308 = add i32 %306, -1
  %309 = mul i32 %308, %306
  %310 = and i32 %309, 1
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %312, %311
  %314 = select i1 %313, i32 150668178, i32 -372200479
  br label %.backedge

315:                                              ; preds = %16
  %316 = load i32, i32* @x.3, align 4
  %317 = load i32, i32* @y.4, align 4
  %318 = add i32 %316, -1
  %319 = mul i32 %318, %316
  %320 = and i32 %319, 1
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %322, %321
  %324 = select i1 %323, i32 -1524368106, i32 -372200479
  br label %.backedge

325:                                              ; preds = %16
  br label %.backedge

326:                                              ; preds = %16
  %327 = load i32, i32* @x.3, align 4
  %328 = load i32, i32* @y.4, align 4
  %329 = add i32 %327, -1
  %330 = mul i32 %329, %327
  %331 = and i32 %330, 1
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %333, %332
  %335 = select i1 %334, i32 172488550, i32 518769110
  br label %.backedge

336:                                              ; preds = %16
  %337 = getelementptr inbounds [200010 x i64], [200010 x i64]* %4, i64 0, i64 %.058
  %338 = load i64, i64* %337, align 8
  %.neg = add i64 %338, 1
  %339 = srem i64 %.neg, 2
  %340 = load i32, i32* @x.3, align 4
  %341 = load i32, i32* @y.4, align 4
  %342 = add i32 %340, -1
  %343 = mul i32 %342, %340
  %344 = and i32 %343, 1
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %346, %345
  %348 = select i1 %347, i32 -491389647, i32 518769110
  br label %.backedge

349:                                              ; preds = %16
  br label %.backedge

350:                                              ; preds = %16
  br label %.backedge

351:                                              ; preds = %16
  %352 = add i64 %.058, 1
  %353 = getelementptr inbounds [200010 x [5 x i64]], [200010 x [5 x i64]]* @dp, i64 0, i64 %352, i64 %.056
  %354 = getelementptr inbounds [200010 x [5 x i64]], [200010 x [5 x i64]]* @dp, i64 0, i64 %.058, i64 %.054
  %355 = load i64, i64* %354, align 8
  %356 = add i64 %355, %.052
  store i64 %356, i64* %5, align 8
  %357 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %353, i64* nonnull dereferenceable(8) %5)
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %353, align 8
  br label %.backedge

359:                                              ; preds = %16
  %360 = load i32, i32* @x.3, align 4
  %361 = load i32, i32* @y.4, align 4
  %362 = add i32 %360, -1
  %363 = mul i32 %362, %360
  %364 = and i32 %363, 1
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %366, %365
  %368 = select i1 %367, i32 1743851876, i32 -1658589412
  br label %.backedge

369:                                              ; preds = %16
  %370 = add i64 %.054, 1
  %371 = load i32, i32* @x.3, align 4
  %372 = load i32, i32* @y.4, align 4
  %373 = add i32 %371, -1
  %374 = mul i32 %373, %371
  %375 = and i32 %374, 1
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %377, %376
  %379 = select i1 %378, i32 752085342, i32 -1658589412
  br label %.backedge

380:                                              ; preds = %16
  br label %.backedge

381:                                              ; preds = %16
  %382 = load i32, i32* @x.3, align 4
  %383 = load i32, i32* @y.4, align 4
  %384 = add i32 %382, -1
  %385 = mul i32 %384, %382
  %386 = and i32 %385, 1
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %388, %387
  %390 = select i1 %389, i32 638848295, i32 2101610797
  br label %.backedge

391:                                              ; preds = %16
  %392 = load i32, i32* @x.3, align 4
  %393 = load i32, i32* @y.4, align 4
  %394 = add i32 %392, -1
  %395 = mul i32 %394, %392
  %396 = and i32 %395, 1
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %398, %397
  %400 = select i1 %399, i32 -1301339404, i32 2101610797
  br label %.backedge

401:                                              ; preds = %16
  br label %.backedge

402:                                              ; preds = %16
  %403 = add i64 %.056, 1
  br label %.backedge

404:                                              ; preds = %16
  br label %.backedge

405:                                              ; preds = %16
  %406 = add i64 %.058, 1
  br label %.backedge

407:                                              ; preds = %16
  store i64 1000000000000000000, i64* %6, align 8
  br label %.backedge

408:                                              ; preds = %16
  %409 = icmp slt i64 %.050, 5
  %410 = select i1 %409, i32 -276059920, i32 2002514954
  br label %.backedge

411:                                              ; preds = %16
  %412 = load i64, i64* %3, align 8
  %413 = getelementptr inbounds [200010 x [5 x i64]], [200010 x [5 x i64]]* @dp, i64 0, i64 %412, i64 %.050
  %414 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %6, i64* nonnull dereferenceable(8) %413)
  %415 = load i64, i64* %414, align 8
  store i64 %415, i64* %6, align 8
  br label %.backedge

416:                                              ; preds = %16
  %417 = add i64 %.050, 1
  br label %.backedge

418:                                              ; preds = %16
  call void @_Z5printIRxJEEvOT_DpOT0_(i64* nonnull dereferenceable(8) %6)
  ret i32 0

419:                                              ; preds = %16
  %420 = add i64 %.064, 1
  br label %.backedge

421:                                              ; preds = %16
  br label %.backedge

422:                                              ; preds = %16
  %423 = getelementptr inbounds [200010 x [5 x i64]], [200010 x [5 x i64]]* @dp, i64 0, i64 %.062, i64 %.060
  store i64 0, i64* %423, align 8
  br label %.backedge

424:                                              ; preds = %16
  br label %.backedge

425:                                              ; preds = %16
  %426 = add i64 %.060, 1
  br label %.backedge

427:                                              ; preds = %16
  br label %.backedge

428:                                              ; preds = %16
  br label %.backedge

429:                                              ; preds = %16
  br label %.backedge

430:                                              ; preds = %16
  br label %.backedge

431:                                              ; preds = %16
  br label %.backedge

432:                                              ; preds = %16
  %433 = add i64 %.052, 2
  br label %.backedge

434:                                              ; preds = %16
  br label %.backedge

435:                                              ; preds = %16
  %436 = getelementptr inbounds [200010 x i64], [200010 x i64]* %4, i64 0, i64 %.058
  %437 = load i64, i64* %436, align 8
  %438 = add i64 %437, 1
  %439 = srem i64 %438, 2
  br label %.backedge

440:                                              ; preds = %16
  %441 = add i64 %.054, 1
  br label %.backedge

442:                                              ; preds = %16
  br label %.backedge
}

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) local_unnamed_addr #1

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #6 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %1, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.07.ph = phi i64* [ undef, %2 ], [ %.07.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ 1973614765, %2 ], [ -1166729727, %.outer.backedge ]
  br label %.outer9

.outer9:                                          ; preds = %.outer, %8
  %.0.ph10 = phi i32 [ %.0.ph, %.outer ], [ %10, %8 ]
  br label %7

7:                                                ; preds = %.outer9, %7
  switch i32 %.0.ph10, label %7 [
    i32 1973614765, label %8
    i32 -1862611965, label %.outer.backedge
    i32 1193679740, label %11
    i32 -1166729727, label %12
  ]

8:                                                ; preds = %7
  %.0..0..0.5 = load volatile i64, i64* %4, align 8
  %.0..0..0.6 = load volatile i64, i64* %3, align 8
  %9 = icmp slt i64 %.0..0..0.5, %.0..0..0.6
  %10 = select i1 %9, i32 -1862611965, i32 1193679740
  br label %.outer9

11:                                               ; preds = %7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %7, %11
  %.07.ph.be = phi i64* [ %0, %11 ], [ %1, %7 ]
  br label %.outer

12:                                               ; preds = %7
  ret i64* %.07.ph
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z5printIRxJEEvOT_DpOT0_(i64* dereferenceable(8) %0) local_unnamed_addr #0 comdat {
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = load i32, i32* @x.7, align 4
  %5 = load i32, i32* @y.8, align 4
  %6 = add i32 %4, -1
  %7 = mul i32 %6, %4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  store i1 %9, i1* %3, align 1
  %10 = icmp slt i32 %5, 10
  store i1 %10, i1* %2, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.0.ph = phi i32 [ 1934993066, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %11

11:                                               ; preds = %.outer, %11
  switch i32 %.0.ph, label %11 [
    i32 1934993066, label %12
    i32 2026988525, label %15
    i32 524351169, label %28
    i32 -837217122, label %29
  ]

12:                                               ; preds = %11
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %.0..0..0.1 = load volatile i1, i1* %2, align 1
  %13 = or i1 %.0..0..0., %.0..0..0.1
  %14 = select i1 %13, i32 2026988525, i32 -837217122
  br label %.outer.backedge

15:                                               ; preds = %11
  %16 = load i64, i64* %0, align 8
  %17 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %16)
  %18 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %17, i8 signext 10)
  %19 = load i32, i32* @x.7, align 4
  %20 = load i32, i32* @y.8, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 524351169, i32 -837217122
  br label %.outer.backedge

28:                                               ; preds = %11
  ret void

29:                                               ; preds = %11
  %30 = load i64, i64* %0, align 8
  %31 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %30)
  %32 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %31, i8 signext 10)
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %29, %15, %12
  %.0.ph.be = phi i32 [ %14, %12 ], [ %27, %15 ], [ 2026988525, %29 ]
  br label %.outer
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* dereferenceable(272), i8 signext) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s737616597.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
