; ModuleID = 'build_ollvm/programs/p03132/s502852909.ll'
source_filename = "Project_CodeNet_C++1400/p03132/s502852909.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::initializer_list" = type { i64*, i64 }
%"struct.__gnu_cxx::__ops::_Iter_less_iter" = type { i8 }

$_Z5chminIxEbRT_S0_ = comdat any

$_ZSt3minIxET_St16initializer_listIS0_E = comdat any

$_ZSt11min_elementIPKxET_S2_S2_ = comdat any

$_ZNKSt16initializer_listIxE5beginEv = comdat any

$_ZNKSt16initializer_listIxE3endEv = comdat any

$_ZSt13__min_elementIPKxN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_ = comdat any

$_ZN9__gnu_cxx5__ops16__iter_less_iterEv = comdat any

$_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKxS4_EEbT_T0_ = comdat any

$_ZNKSt16initializer_listIxE4sizeEv = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s502852909.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0
@x.14 = common local_unnamed_addr global i32 0
@y.15 = common local_unnamed_addr global i32 0
@x.16 = common local_unnamed_addr global i32 0
@y.17 = common local_unnamed_addr global i32 0
@x.18 = common local_unnamed_addr global i32 0
@y.19 = common local_unnamed_addr global i32 0
@x.20 = common local_unnamed_addr global i32 0
@y.21 = common local_unnamed_addr global i32 0
@x.22 = common local_unnamed_addr global i32 0
@y.23 = common local_unnamed_addr global i32 0
@x.24 = common local_unnamed_addr global i32 0
@y.25 = common local_unnamed_addr global i32 0
@x.26 = common local_unnamed_addr global i32 0
@y.27 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -289758889, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -289758889, label %11
    i32 279057236, label %14
    i32 -1653061429, label %25
    i32 -1985964495, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 279057236, i32 -1985964495
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -1653061429, i32 -1985964495
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 279057236, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline uwtable
define void @_Z5solvev() local_unnamed_addr #0 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i64, align 8
  %9 = alloca [200200 x i64], align 16
  %10 = alloca [200200 x [6 x i64]], align 16
  %11 = alloca [200200 x [20 x i64]], align 16
  %12 = alloca [5 x i64], align 16
  %13 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %8)
  %14 = getelementptr inbounds [5 x i64], [5 x i64]* %12, i64 0, i64 0
  %15 = getelementptr inbounds [5 x i64], [5 x i64]* %12, i64 0, i64 2
  %16 = getelementptr inbounds [5 x i64], [5 x i64]* %12, i64 0, i64 4
  %17 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 0, i64 0
  %18 = bitcast [5 x i64]* %12 to <2 x i64>*
  %19 = bitcast i64* %15 to <2 x i64>*
  %20 = bitcast [5 x i64]* %12 to <2 x i64>*
  %21 = bitcast i64* %15 to <2 x i64>*
  br label %22

22:                                               ; preds = %.backedge, %0
  %.0107 = phi i64 [ 0, %0 ], [ %.0107.be, %.backedge ]
  %.0105 = phi i64 [ undef, %0 ], [ %.0105.be, %.backedge ]
  %.0103 = phi i64 [ undef, %0 ], [ %.0103.be, %.backedge ]
  %.0101 = phi i64 [ undef, %0 ], [ %.0101.be, %.backedge ]
  %.099 = phi i64 [ undef, %0 ], [ %.099.be, %.backedge ]
  %.097 = phi i64 [ undef, %0 ], [ %.097.be, %.backedge ]
  %.0 = phi i32 [ -906192354, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -906192354, label %23
    i32 -1801283620, label %33
    i32 -629784967, label %45
    i32 1513049582, label %47
    i32 -991421953, label %50
    i32 -1860493048, label %53
    i32 -176283881, label %63
    i32 -2005764257, label %74
    i32 1236463436, label %76
    i32 -573937010, label %86
    i32 40740615, label %97
    i32 -924520079, label %99
    i32 -1658929590, label %109
    i32 79997129, label %122
    i32 -1951808958, label %123
    i32 -488291906, label %126
    i32 806576485, label %129
    i32 2142078350, label %134
    i32 1024633049, label %144
    i32 1607408387, label %155
    i32 1091545426, label %156
    i32 -537458256, label %162
    i32 937363960, label %164
    i32 395618691, label %166
    i32 939274219, label %176
    i32 1130481981, label %186
    i32 -1984086948, label %187
    i32 1509979142, label %188
    i32 -462503253, label %198
    i32 623359797, label %212
    i32 1117907603, label %214
    i32 452355358, label %216
    i32 210559143, label %218
    i32 472955844, label %219
    i32 -1324868358, label %220
    i32 1631512538, label %230
    i32 1684910150, label %240
    i32 -155973648, label %241
    i32 886592891, label %243
    i32 1836073412, label %253
    i32 294769989, label %263
    i32 2021559148, label %264
    i32 -367945575, label %266
    i32 58333690, label %267
    i32 -647407070, label %272
    i32 -495326788, label %273
    i32 1842959182, label %276
    i32 1078452380, label %278
    i32 -1839243698, label %288
    i32 -2117816283, label %299
    i32 22534843, label %300
    i32 -454446326, label %301
    i32 -1150264123, label %303
    i32 1125171152, label %304
    i32 -1519176639, label %308
    i32 1054925314, label %318
    i32 1572045991, label %328
    i32 90314203, label %329
    i32 -1775607059, label %339
    i32 456728854, label %350
    i32 1702630211, label %352
    i32 525331865, label %362
    i32 -83803988, label %381
    i32 -1074956262, label %383
    i32 -729245869, label %393
    i32 -723939071, label %403
    i32 810049669, label %415
    i32 2008575369, label %417
    i32 1117974567, label %427
    i32 -535129558, label %446
    i32 967452549, label %447
    i32 -1540038818, label %450
    i32 -1545461595, label %460
    i32 2099596260, label %461
    i32 510433171, label %471
    i32 -1280085398, label %482
    i32 1166322170, label %483
    i32 1586751070, label %484
    i32 -1606607905, label %486
    i32 1681749730, label %496
    i32 -1201082169, label %518
    i32 -1761833231, label %519
    i32 -863689181, label %520
    i32 -462022997, label %521
    i32 1149825266, label %522
    i32 393604060, label %526
    i32 -1018909971, label %528
    i32 757727017, label %529
    i32 -171992967, label %530
    i32 -1614579616, label %531
    i32 824410173, label %532
    i32 -728831859, label %534
    i32 -599652189, label %535
    i32 1792455922, label %536
    i32 -1253896884, label %545
    i32 -620352564, label %546
    i32 -1695405579, label %556
    i32 268954046, label %558
  ]

.backedge:                                        ; preds = %22, %558, %556, %546, %545, %536, %535, %534, %532, %531, %530, %529, %528, %526, %522, %521, %520, %519, %496, %486, %484, %483, %482, %471, %461, %460, %450, %447, %446, %427, %417, %415, %403, %393, %383, %381, %362, %352, %350, %339, %329, %328, %318, %308, %304, %303, %301, %300, %299, %288, %278, %276, %273, %272, %267, %266, %264, %263, %253, %243, %241, %240, %230, %220, %219, %218, %216, %214, %212, %198, %188, %187, %186, %176, %166, %164, %162, %156, %155, %144, %134, %129, %126, %123, %122, %109, %99, %97, %86, %76, %74, %63, %53, %50, %47, %45, %33, %23
  %.0107.be = phi i64 [ %.0107, %22 ], [ %.0107, %558 ], [ %.0107, %556 ], [ %.0107, %546 ], [ %.0107, %545 ], [ %.0107, %536 ], [ %.0107, %535 ], [ %.0107, %534 ], [ %.0107, %532 ], [ %.0107, %531 ], [ %.0107, %530 ], [ %.0107, %529 ], [ %.0107, %528 ], [ %.0107, %526 ], [ %.0107, %522 ], [ %.0107, %521 ], [ %.0107, %520 ], [ %.0107, %519 ], [ %.0107, %496 ], [ %.0107, %486 ], [ %.0107, %484 ], [ %.0107, %483 ], [ %.0107, %482 ], [ %.0107, %471 ], [ %.0107, %461 ], [ %.0107, %460 ], [ %.0107, %450 ], [ %.0107, %447 ], [ %.0107, %446 ], [ %.0107, %427 ], [ %.0107, %417 ], [ %.0107, %415 ], [ %.0107, %403 ], [ %.0107, %393 ], [ %.0107, %383 ], [ %.0107, %381 ], [ %.0107, %362 ], [ %.0107, %352 ], [ %.0107, %350 ], [ %.0107, %339 ], [ %.0107, %329 ], [ %.0107, %328 ], [ %.0107, %318 ], [ %.0107, %308 ], [ %.0107, %304 ], [ %.0107, %303 ], [ %.0107, %301 ], [ %.0107, %300 ], [ %.0107, %299 ], [ %.0107, %288 ], [ %.0107, %278 ], [ %.0107, %276 ], [ %.0107, %273 ], [ %.0107, %272 ], [ %.0107, %267 ], [ %.0107, %266 ], [ %265, %264 ], [ %.0107, %263 ], [ %.0107, %253 ], [ %.0107, %243 ], [ %.0107, %241 ], [ %.0107, %240 ], [ %.0107, %230 ], [ %.0107, %220 ], [ %.0107, %219 ], [ %.0107, %218 ], [ %.0107, %216 ], [ %.0107, %214 ], [ %.0107, %212 ], [ %.0107, %198 ], [ %.0107, %188 ], [ %.0107, %187 ], [ %.0107, %186 ], [ %.0107, %176 ], [ %.0107, %166 ], [ %.0107, %164 ], [ %.0107, %162 ], [ %.0107, %156 ], [ %.0107, %155 ], [ %.0107, %144 ], [ %.0107, %134 ], [ %.0107, %129 ], [ %.0107, %126 ], [ %.0107, %123 ], [ %.0107, %122 ], [ %.0107, %109 ], [ %.0107, %99 ], [ %.0107, %97 ], [ %.0107, %86 ], [ %.0107, %76 ], [ %.0107, %74 ], [ %.0107, %63 ], [ %.0107, %53 ], [ %.0107, %50 ], [ %.0107, %47 ], [ %.0107, %45 ], [ %.0107, %33 ], [ %.0107, %23 ]
  %.0105.be = phi i64 [ %.0105, %22 ], [ %.0105, %558 ], [ %.0105, %556 ], [ %.0105, %546 ], [ %.0105, %545 ], [ %.0105, %536 ], [ %.0105, %535 ], [ %.0105, %534 ], [ %.0105, %532 ], [ %.0105, %531 ], [ %.0105, %530 ], [ %.0105, %529 ], [ %.0105, %528 ], [ %.0105, %526 ], [ %.0105, %522 ], [ %.0105, %521 ], [ %.0105, %520 ], [ %.0105, %519 ], [ %.0105, %496 ], [ %.0105, %486 ], [ %.0105, %484 ], [ %.0105, %483 ], [ %.0105, %482 ], [ %.0105, %471 ], [ %.0105, %461 ], [ %.0105, %460 ], [ %.0105, %450 ], [ %.0105, %447 ], [ %.0105, %446 ], [ %.0105, %427 ], [ %.0105, %417 ], [ %.0105, %415 ], [ %.0105, %403 ], [ %.0105, %393 ], [ %.0105, %383 ], [ %.0105, %381 ], [ %.0105, %362 ], [ %.0105, %352 ], [ %.0105, %350 ], [ %.0105, %339 ], [ %.0105, %329 ], [ %.0105, %328 ], [ %.0105, %318 ], [ %.0105, %308 ], [ %.0105, %304 ], [ %.0105, %303 ], [ %.0105, %301 ], [ %.0105, %300 ], [ %.0105, %299 ], [ %.0105, %288 ], [ %.0105, %278 ], [ %.0105, %276 ], [ %.0105, %273 ], [ %.0105, %272 ], [ %.0105, %267 ], [ %.0105, %266 ], [ %.0105, %264 ], [ %.0105, %263 ], [ %.0105, %253 ], [ %.0105, %243 ], [ %242, %241 ], [ %.0105, %240 ], [ %.0105, %230 ], [ %.0105, %220 ], [ %.0105, %219 ], [ %.0105, %218 ], [ %.0105, %216 ], [ %.0105, %214 ], [ %.0105, %212 ], [ %.0105, %198 ], [ %.0105, %188 ], [ %.0105, %187 ], [ %.0105, %186 ], [ %.0105, %176 ], [ %.0105, %166 ], [ %.0105, %164 ], [ %.0105, %162 ], [ %.0105, %156 ], [ %.0105, %155 ], [ %.0105, %144 ], [ %.0105, %134 ], [ %.0105, %129 ], [ %.0105, %126 ], [ %.0105, %123 ], [ %.0105, %122 ], [ %.0105, %109 ], [ %.0105, %99 ], [ %.0105, %97 ], [ %.0105, %86 ], [ %.0105, %76 ], [ %.0105, %74 ], [ %.0105, %63 ], [ %.0105, %53 ], [ %.0105, %50 ], [ 0, %47 ], [ %.0105, %45 ], [ %.0105, %33 ], [ %.0105, %23 ]
  %.0103.be = phi i64 [ %.0103, %22 ], [ %.0103, %558 ], [ %.0103, %556 ], [ %.0103, %546 ], [ %.0103, %545 ], [ %.0103, %536 ], [ %.0103, %535 ], [ %.0103, %534 ], [ %.0103, %532 ], [ %.0103, %531 ], [ %.0103, %530 ], [ %.0103, %529 ], [ %.0103, %528 ], [ %.0103, %526 ], [ %.0103, %522 ], [ %.0103, %521 ], [ %.0103, %520 ], [ %.0103, %519 ], [ %.0103, %496 ], [ %.0103, %486 ], [ %.0103, %484 ], [ %.0103, %483 ], [ %.0103, %482 ], [ %.0103, %471 ], [ %.0103, %461 ], [ %.0103, %460 ], [ %.0103, %450 ], [ %.0103, %447 ], [ %.0103, %446 ], [ %.0103, %427 ], [ %.0103, %417 ], [ %.0103, %415 ], [ %.0103, %403 ], [ %.0103, %393 ], [ %.0103, %383 ], [ %.0103, %381 ], [ %.0103, %362 ], [ %.0103, %352 ], [ %.0103, %350 ], [ %.0103, %339 ], [ %.0103, %329 ], [ %.0103, %328 ], [ %.0103, %318 ], [ %.0103, %308 ], [ %.0103, %304 ], [ %.0103, %303 ], [ %302, %301 ], [ %.0103, %300 ], [ %.0103, %299 ], [ %.0103, %288 ], [ %.0103, %278 ], [ %.0103, %276 ], [ %.0103, %273 ], [ %.0103, %272 ], [ %.0103, %267 ], [ 0, %266 ], [ %.0103, %264 ], [ %.0103, %263 ], [ %.0103, %253 ], [ %.0103, %243 ], [ %.0103, %241 ], [ %.0103, %240 ], [ %.0103, %230 ], [ %.0103, %220 ], [ %.0103, %219 ], [ %.0103, %218 ], [ %.0103, %216 ], [ %.0103, %214 ], [ %.0103, %212 ], [ %.0103, %198 ], [ %.0103, %188 ], [ %.0103, %187 ], [ %.0103, %186 ], [ %.0103, %176 ], [ %.0103, %166 ], [ %.0103, %164 ], [ %.0103, %162 ], [ %.0103, %156 ], [ %.0103, %155 ], [ %.0103, %144 ], [ %.0103, %134 ], [ %.0103, %129 ], [ %.0103, %126 ], [ %.0103, %123 ], [ %.0103, %122 ], [ %.0103, %109 ], [ %.0103, %99 ], [ %.0103, %97 ], [ %.0103, %86 ], [ %.0103, %76 ], [ %.0103, %74 ], [ %.0103, %63 ], [ %.0103, %53 ], [ %.0103, %50 ], [ %.0103, %47 ], [ %.0103, %45 ], [ %.0103, %33 ], [ %.0103, %23 ]
  %.0101.be = phi i64 [ %.0101, %22 ], [ %.0101, %558 ], [ %.0101, %556 ], [ %.0101, %546 ], [ %.0101, %545 ], [ %.0101, %536 ], [ %.0101, %535 ], [ %.0101, %534 ], [ %533, %532 ], [ %.0101, %531 ], [ %.0101, %530 ], [ %.0101, %529 ], [ %.0101, %528 ], [ %.0101, %526 ], [ %.0101, %522 ], [ %.0101, %521 ], [ %.0101, %520 ], [ %.0101, %519 ], [ %.0101, %496 ], [ %.0101, %486 ], [ %.0101, %484 ], [ %.0101, %483 ], [ %.0101, %482 ], [ %.0101, %471 ], [ %.0101, %461 ], [ %.0101, %460 ], [ %.0101, %450 ], [ %.0101, %447 ], [ %.0101, %446 ], [ %.0101, %427 ], [ %.0101, %417 ], [ %.0101, %415 ], [ %.0101, %403 ], [ %.0101, %393 ], [ %.0101, %383 ], [ %.0101, %381 ], [ %.0101, %362 ], [ %.0101, %352 ], [ %.0101, %350 ], [ %.0101, %339 ], [ %.0101, %329 ], [ %.0101, %328 ], [ %.0101, %318 ], [ %.0101, %308 ], [ %.0101, %304 ], [ %.0101, %303 ], [ %.0101, %301 ], [ %.0101, %300 ], [ %.0101, %299 ], [ %289, %288 ], [ %.0101, %278 ], [ %.0101, %276 ], [ %.0101, %273 ], [ 0, %272 ], [ %.0101, %267 ], [ %.0101, %266 ], [ %.0101, %264 ], [ %.0101, %263 ], [ %.0101, %253 ], [ %.0101, %243 ], [ %.0101, %241 ], [ %.0101, %240 ], [ %.0101, %230 ], [ %.0101, %220 ], [ %.0101, %219 ], [ %.0101, %218 ], [ %.0101, %216 ], [ %.0101, %214 ], [ %.0101, %212 ], [ %.0101, %198 ], [ %.0101, %188 ], [ %.0101, %187 ], [ %.0101, %186 ], [ %.0101, %176 ], [ %.0101, %166 ], [ %.0101, %164 ], [ %.0101, %162 ], [ %.0101, %156 ], [ %.0101, %155 ], [ %.0101, %144 ], [ %.0101, %134 ], [ %.0101, %129 ], [ %.0101, %126 ], [ %.0101, %123 ], [ %.0101, %122 ], [ %.0101, %109 ], [ %.0101, %99 ], [ %.0101, %97 ], [ %.0101, %86 ], [ %.0101, %76 ], [ %.0101, %74 ], [ %.0101, %63 ], [ %.0101, %53 ], [ %.0101, %50 ], [ %.0101, %47 ], [ %.0101, %45 ], [ %.0101, %33 ], [ %.0101, %23 ]
  %.099.be = phi i64 [ %.099, %22 ], [ %.099, %558 ], [ %.099, %556 ], [ %.099, %546 ], [ %.099, %545 ], [ %.099, %536 ], [ %.099, %535 ], [ %.099, %534 ], [ %.099, %532 ], [ %.099, %531 ], [ %.099, %530 ], [ %.099, %529 ], [ %.099, %528 ], [ %.099, %526 ], [ %.099, %522 ], [ %.099, %521 ], [ %.099, %520 ], [ %.099, %519 ], [ %.099, %496 ], [ %.099, %486 ], [ %485, %484 ], [ %.099, %483 ], [ %.099, %482 ], [ %.099, %471 ], [ %.099, %461 ], [ %.099, %460 ], [ %.099, %450 ], [ %.099, %447 ], [ %.099, %446 ], [ %.099, %427 ], [ %.099, %417 ], [ %.099, %415 ], [ %.099, %403 ], [ %.099, %393 ], [ %.099, %383 ], [ %.099, %381 ], [ %.099, %362 ], [ %.099, %352 ], [ %.099, %350 ], [ %.099, %339 ], [ %.099, %329 ], [ %.099, %328 ], [ %.099, %318 ], [ %.099, %308 ], [ %.099, %304 ], [ 0, %303 ], [ %.099, %301 ], [ %.099, %300 ], [ %.099, %299 ], [ %.099, %288 ], [ %.099, %278 ], [ %.099, %276 ], [ %.099, %273 ], [ %.099, %272 ], [ %.099, %267 ], [ %.099, %266 ], [ %.099, %264 ], [ %.099, %263 ], [ %.099, %253 ], [ %.099, %243 ], [ %.099, %241 ], [ %.099, %240 ], [ %.099, %230 ], [ %.099, %220 ], [ %.099, %219 ], [ %.099, %218 ], [ %.099, %216 ], [ %.099, %214 ], [ %.099, %212 ], [ %.099, %198 ], [ %.099, %188 ], [ %.099, %187 ], [ %.099, %186 ], [ %.099, %176 ], [ %.099, %166 ], [ %.099, %164 ], [ %.099, %162 ], [ %.099, %156 ], [ %.099, %155 ], [ %.099, %144 ], [ %.099, %134 ], [ %.099, %129 ], [ %.099, %126 ], [ %.099, %123 ], [ %.099, %122 ], [ %.099, %109 ], [ %.099, %99 ], [ %.099, %97 ], [ %.099, %86 ], [ %.099, %76 ], [ %.099, %74 ], [ %.099, %63 ], [ %.099, %53 ], [ %.099, %50 ], [ %.099, %47 ], [ %.099, %45 ], [ %.099, %33 ], [ %.099, %23 ]
  %.097.be = phi i64 [ %.097, %22 ], [ %.097, %558 ], [ %557, %556 ], [ %.097, %546 ], [ %.097, %545 ], [ %.097, %536 ], [ %.097, %535 ], [ 0, %534 ], [ %.097, %532 ], [ %.097, %531 ], [ %.097, %530 ], [ %.097, %529 ], [ %.097, %528 ], [ %.097, %526 ], [ %.097, %522 ], [ %.097, %521 ], [ %.097, %520 ], [ %.097, %519 ], [ %.097, %496 ], [ %.097, %486 ], [ %.097, %484 ], [ %.097, %483 ], [ %.097, %482 ], [ %472, %471 ], [ %.097, %461 ], [ %.097, %460 ], [ %.097, %450 ], [ %.097, %447 ], [ %.097, %446 ], [ %.097, %427 ], [ %.097, %417 ], [ %.097, %415 ], [ %.097, %403 ], [ %.097, %393 ], [ %.097, %383 ], [ %.097, %381 ], [ %.097, %362 ], [ %.097, %352 ], [ %.097, %350 ], [ %.097, %339 ], [ %.097, %329 ], [ %.097, %328 ], [ 0, %318 ], [ %.097, %308 ], [ %.097, %304 ], [ %.097, %303 ], [ %.097, %301 ], [ %.097, %300 ], [ %.097, %299 ], [ %.097, %288 ], [ %.097, %278 ], [ %.097, %276 ], [ %.097, %273 ], [ %.097, %272 ], [ %.097, %267 ], [ %.097, %266 ], [ %.097, %264 ], [ %.097, %263 ], [ %.097, %253 ], [ %.097, %243 ], [ %.097, %241 ], [ %.097, %240 ], [ %.097, %230 ], [ %.097, %220 ], [ %.097, %219 ], [ %.097, %218 ], [ %.097, %216 ], [ %.097, %214 ], [ %.097, %212 ], [ %.097, %198 ], [ %.097, %188 ], [ %.097, %187 ], [ %.097, %186 ], [ %.097, %176 ], [ %.097, %166 ], [ %.097, %164 ], [ %.097, %162 ], [ %.097, %156 ], [ %.097, %155 ], [ %.097, %144 ], [ %.097, %134 ], [ %.097, %129 ], [ %.097, %126 ], [ %.097, %123 ], [ %.097, %122 ], [ %.097, %109 ], [ %.097, %99 ], [ %.097, %97 ], [ %.097, %86 ], [ %.097, %76 ], [ %.097, %74 ], [ %.097, %63 ], [ %.097, %53 ], [ %.097, %50 ], [ %.097, %47 ], [ %.097, %45 ], [ %.097, %33 ], [ %.097, %23 ]
  %.0.be = phi i32 [ %.0, %22 ], [ 1681749730, %558 ], [ 510433171, %556 ], [ 1117974567, %546 ], [ -723939071, %545 ], [ 525331865, %536 ], [ -1775607059, %535 ], [ 1054925314, %534 ], [ -1839243698, %532 ], [ 1836073412, %531 ], [ 1631512538, %530 ], [ -462503253, %529 ], [ 939274219, %528 ], [ 1024633049, %526 ], [ -1658929590, %522 ], [ -573937010, %521 ], [ -176283881, %520 ], [ -1801283620, %519 ], [ %517, %496 ], [ %495, %486 ], [ 1125171152, %484 ], [ 1586751070, %483 ], [ 90314203, %482 ], [ %481, %471 ], [ %470, %461 ], [ 2099596260, %460 ], [ -1545461595, %450 ], [ %449, %447 ], [ 967452549, %446 ], [ %445, %427 ], [ %426, %417 ], [ %416, %415 ], [ %414, %403 ], [ %402, %393 ], [ -729245869, %383 ], [ %382, %381 ], [ %380, %362 ], [ %361, %352 ], [ %351, %350 ], [ %349, %339 ], [ %338, %329 ], [ 90314203, %328 ], [ %327, %318 ], [ %317, %308 ], [ %307, %304 ], [ 1125171152, %303 ], [ 58333690, %301 ], [ -454446326, %300 ], [ -495326788, %299 ], [ %298, %288 ], [ %287, %278 ], [ 1078452380, %276 ], [ %275, %273 ], [ -495326788, %272 ], [ %271, %267 ], [ 58333690, %266 ], [ -906192354, %264 ], [ 2021559148, %263 ], [ %262, %253 ], [ %252, %243 ], [ -991421953, %241 ], [ -155973648, %240 ], [ %239, %230 ], [ %229, %220 ], [ -1324868358, %219 ], [ 472955844, %218 ], [ 210559143, %216 ], [ 210559143, %214 ], [ %213, %212 ], [ %211, %198 ], [ %197, %188 ], [ 472955844, %187 ], [ -1984086948, %186 ], [ %185, %176 ], [ %175, %166 ], [ 395618691, %164 ], [ 395618691, %162 ], [ %161, %156 ], [ -1984086948, %155 ], [ %154, %144 ], [ %143, %134 ], [ %133, %129 ], [ %128, %126 ], [ %125, %123 ], [ -1324868358, %122 ], [ %121, %109 ], [ %108, %99 ], [ %98, %97 ], [ %96, %86 ], [ %85, %76 ], [ %75, %74 ], [ %73, %63 ], [ %62, %53 ], [ %52, %50 ], [ -991421953, %47 ], [ %46, %45 ], [ %44, %33 ], [ %32, %23 ]
  br label %22

23:                                               ; preds = %22
  %24 = load i32, i32* @x.4, align 4
  %25 = load i32, i32* @y.5, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 -1801283620, i32 -1761833231
  br label %.backedge

33:                                               ; preds = %22
  %34 = load i64, i64* %8, align 8
  %35 = icmp slt i64 %.0107, %34
  store i1 %35, i1* %7, align 1
  %36 = load i32, i32* @x.4, align 4
  %37 = load i32, i32* @y.5, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 -629784967, i32 -1761833231
  br label %.backedge

45:                                               ; preds = %22
  %.0..0..0. = load volatile i1, i1* %7, align 1
  %46 = select i1 %.0..0..0., i32 1513049582, i32 -367945575
  br label %.backedge

47:                                               ; preds = %22
  %48 = getelementptr inbounds [200200 x i64], [200200 x i64]* %9, i64 0, i64 %.0107
  %49 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %48)
  br label %.backedge

50:                                               ; preds = %22
  %51 = icmp slt i64 %.0105, 5
  %52 = select i1 %51, i32 -1860493048, i32 886592891
  br label %.backedge

53:                                               ; preds = %22
  %54 = load i32, i32* @x.4, align 4
  %55 = load i32, i32* @y.5, align 4
  %56 = add i32 %54, -1
  %57 = mul i32 %56, %54
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %60, %59
  %62 = select i1 %61, i32 -176283881, i32 -863689181
  br label %.backedge

63:                                               ; preds = %22
  %64 = icmp eq i64 %.0105, 0
  store i1 %64, i1* %6, align 1
  %65 = load i32, i32* @x.4, align 4
  %66 = load i32, i32* @y.5, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 -2005764257, i32 -863689181
  br label %.backedge

74:                                               ; preds = %22
  %.0..0..0.91 = load volatile i1, i1* %6, align 1
  %75 = select i1 %.0..0..0.91, i32 -924520079, i32 1236463436
  br label %.backedge

76:                                               ; preds = %22
  %77 = load i32, i32* @x.4, align 4
  %78 = load i32, i32* @y.5, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 -573937010, i32 -462022997
  br label %.backedge

86:                                               ; preds = %22
  %87 = icmp eq i64 %.0105, 4
  store i1 %87, i1* %5, align 1
  %88 = load i32, i32* @x.4, align 4
  %89 = load i32, i32* @y.5, align 4
  %90 = add i32 %88, -1
  %91 = mul i32 %90, %88
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %94, %93
  %96 = select i1 %95, i32 40740615, i32 -462022997
  br label %.backedge

97:                                               ; preds = %22
  %.0..0..0.92 = load volatile i1, i1* %5, align 1
  %98 = select i1 %.0..0..0.92, i32 -924520079, i32 -1951808958
  br label %.backedge

99:                                               ; preds = %22
  %100 = load i32, i32* @x.4, align 4
  %101 = load i32, i32* @y.5, align 4
  %102 = add i32 %100, -1
  %103 = mul i32 %102, %100
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %106, %105
  %108 = select i1 %107, i32 -1658929590, i32 1149825266
  br label %.backedge

109:                                              ; preds = %22
  %110 = getelementptr inbounds [200200 x i64], [200200 x i64]* %9, i64 0, i64 %.0107
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.0107, i64 %.0105
  store i64 %111, i64* %112, align 8
  %113 = load i32, i32* @x.4, align 4
  %114 = load i32, i32* @y.5, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 79997129, i32 1149825266
  br label %.backedge

122:                                              ; preds = %22
  br label %.backedge

123:                                              ; preds = %22
  %124 = icmp eq i64 %.0105, 1
  %125 = select i1 %124, i32 806576485, i32 -488291906
  br label %.backedge

126:                                              ; preds = %22
  %127 = icmp eq i64 %.0105, 3
  %128 = select i1 %127, i32 806576485, i32 1509979142
  br label %.backedge

129:                                              ; preds = %22
  %130 = getelementptr inbounds [200200 x i64], [200200 x i64]* %9, i64 0, i64 %.0107
  %131 = load i64, i64* %130, align 8
  %132 = icmp eq i64 %131, 0
  %133 = select i1 %132, i32 2142078350, i32 1091545426
  br label %.backedge

134:                                              ; preds = %22
  %135 = load i32, i32* @x.4, align 4
  %136 = load i32, i32* @y.5, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 1024633049, i32 393604060
  br label %.backedge

144:                                              ; preds = %22
  %145 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.0107, i64 %.0105
  store i64 2, i64* %145, align 8
  %146 = load i32, i32* @x.4, align 4
  %147 = load i32, i32* @y.5, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 1607408387, i32 393604060
  br label %.backedge

155:                                              ; preds = %22
  br label %.backedge

156:                                              ; preds = %22
  %157 = getelementptr inbounds [200200 x i64], [200200 x i64]* %9, i64 0, i64 %.0107
  %158 = load i64, i64* %157, align 8
  %159 = srem i64 %158, 2
  %160 = icmp eq i64 %159, 1
  %161 = select i1 %160, i32 -537458256, i32 937363960
  br label %.backedge

162:                                              ; preds = %22
  %163 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.0107, i64 %.0105
  store i64 1, i64* %163, align 8
  br label %.backedge

164:                                              ; preds = %22
  %165 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.0107, i64 %.0105
  store i64 0, i64* %165, align 8
  br label %.backedge

166:                                              ; preds = %22
  %167 = load i32, i32* @x.4, align 4
  %168 = load i32, i32* @y.5, align 4
  %169 = add i32 %167, -1
  %170 = mul i32 %169, %167
  %171 = and i32 %170, 1
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %173, %172
  %175 = select i1 %174, i32 939274219, i32 -1018909971
  br label %.backedge

176:                                              ; preds = %22
  %177 = load i32, i32* @x.4, align 4
  %178 = load i32, i32* @y.5, align 4
  %179 = add i32 %177, -1
  %180 = mul i32 %179, %177
  %181 = and i32 %180, 1
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %183, %182
  %185 = select i1 %184, i32 1130481981, i32 -1018909971
  br label %.backedge

186:                                              ; preds = %22
  br label %.backedge

187:                                              ; preds = %22
  br label %.backedge

188:                                              ; preds = %22
  %189 = load i32, i32* @x.4, align 4
  %190 = load i32, i32* @y.5, align 4
  %191 = add i32 %189, -1
  %192 = mul i32 %191, %189
  %193 = and i32 %192, 1
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %195, %194
  %197 = select i1 %196, i32 -462503253, i32 757727017
  br label %.backedge

198:                                              ; preds = %22
  %199 = getelementptr inbounds [200200 x i64], [200200 x i64]* %9, i64 0, i64 %.0107
  %200 = load i64, i64* %199, align 8
  %201 = srem i64 %200, 2
  %202 = icmp eq i64 %201, 1
  store i1 %202, i1* %4, align 1
  %203 = load i32, i32* @x.4, align 4
  %204 = load i32, i32* @y.5, align 4
  %205 = add i32 %203, -1
  %206 = mul i32 %205, %203
  %207 = and i32 %206, 1
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %209, %208
  %211 = select i1 %210, i32 623359797, i32 757727017
  br label %.backedge

212:                                              ; preds = %22
  %.0..0..0.93 = load volatile i1, i1* %4, align 1
  %213 = select i1 %.0..0..0.93, i32 1117907603, i32 452355358
  br label %.backedge

214:                                              ; preds = %22
  %215 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.0107, i64 %.0105
  store i64 0, i64* %215, align 8
  br label %.backedge

216:                                              ; preds = %22
  %217 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.0107, i64 %.0105
  store i64 1, i64* %217, align 8
  br label %.backedge

218:                                              ; preds = %22
  br label %.backedge

219:                                              ; preds = %22
  br label %.backedge

220:                                              ; preds = %22
  %221 = load i32, i32* @x.4, align 4
  %222 = load i32, i32* @y.5, align 4
  %223 = add i32 %221, -1
  %224 = mul i32 %223, %221
  %225 = and i32 %224, 1
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %227, %226
  %229 = select i1 %228, i32 1631512538, i32 -171992967
  br label %.backedge

230:                                              ; preds = %22
  %231 = load i32, i32* @x.4, align 4
  %232 = load i32, i32* @y.5, align 4
  %233 = add i32 %231, -1
  %234 = mul i32 %233, %231
  %235 = and i32 %234, 1
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %237, %236
  %239 = select i1 %238, i32 1684910150, i32 -171992967
  br label %.backedge

240:                                              ; preds = %22
  br label %.backedge

241:                                              ; preds = %22
  %242 = add i64 %.0105, 1
  br label %.backedge

243:                                              ; preds = %22
  %244 = load i32, i32* @x.4, align 4
  %245 = load i32, i32* @y.5, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 1836073412, i32 -1614579616
  br label %.backedge

253:                                              ; preds = %22
  %254 = load i32, i32* @x.4, align 4
  %255 = load i32, i32* @y.5, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 294769989, i32 -1614579616
  br label %.backedge

263:                                              ; preds = %22
  br label %.backedge

264:                                              ; preds = %22
  %265 = add i64 %.0107, 1
  br label %.backedge

266:                                              ; preds = %22
  br label %.backedge

267:                                              ; preds = %22
  %268 = load i64, i64* %8, align 8
  %269 = add i64 %268, 1
  %270 = icmp slt i64 %.0103, %269
  %271 = select i1 %270, i32 -647407070, i32 -1150264123
  br label %.backedge

272:                                              ; preds = %22
  br label %.backedge

273:                                              ; preds = %22
  %274 = icmp slt i64 %.0101, 5
  %275 = select i1 %274, i32 1842959182, i32 22534843
  br label %.backedge

276:                                              ; preds = %22
  %277 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %.0103, i64 %.0101
  store i64 1000000014000000049, i64* %277, align 8
  br label %.backedge

278:                                              ; preds = %22
  %279 = load i32, i32* @x.4, align 4
  %280 = load i32, i32* @y.5, align 4
  %281 = add i32 %279, -1
  %282 = mul i32 %281, %279
  %283 = and i32 %282, 1
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %285, %284
  %287 = select i1 %286, i32 -1839243698, i32 824410173
  br label %.backedge

288:                                              ; preds = %22
  %289 = add i64 %.0101, 1
  %290 = load i32, i32* @x.4, align 4
  %291 = load i32, i32* @y.5, align 4
  %292 = add i32 %290, -1
  %293 = mul i32 %292, %290
  %294 = and i32 %293, 1
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %296, %295
  %298 = select i1 %297, i32 -2117816283, i32 824410173
  br label %.backedge

299:                                              ; preds = %22
  br label %.backedge

300:                                              ; preds = %22
  br label %.backedge

301:                                              ; preds = %22
  %302 = add i64 %.0103, 1
  br label %.backedge

303:                                              ; preds = %22
  store i64 0, i64* %17, align 16
  br label %.backedge

304:                                              ; preds = %22
  %305 = load i64, i64* %8, align 8
  %306 = icmp slt i64 %.099, %305
  %307 = select i1 %306, i32 -1519176639, i32 -1606607905
  br label %.backedge

308:                                              ; preds = %22
  %309 = load i32, i32* @x.4, align 4
  %310 = load i32, i32* @y.5, align 4
  %311 = add i32 %309, -1
  %312 = mul i32 %311, %309
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %315, %314
  %317 = select i1 %316, i32 1054925314, i32 -728831859
  br label %.backedge

318:                                              ; preds = %22
  %319 = load i32, i32* @x.4, align 4
  %320 = load i32, i32* @y.5, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 1572045991, i32 -728831859
  br label %.backedge

328:                                              ; preds = %22
  br label %.backedge

329:                                              ; preds = %22
  %330 = load i32, i32* @x.4, align 4
  %331 = load i32, i32* @y.5, align 4
  %332 = add i32 %330, -1
  %333 = mul i32 %332, %330
  %334 = and i32 %333, 1
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %336, %335
  %338 = select i1 %337, i32 -1775607059, i32 -599652189
  br label %.backedge

339:                                              ; preds = %22
  %340 = icmp slt i64 %.097, 5
  store i1 %340, i1* %3, align 1
  %341 = load i32, i32* @x.4, align 4
  %342 = load i32, i32* @y.5, align 4
  %343 = add i32 %341, -1
  %344 = mul i32 %343, %341
  %345 = and i32 %344, 1
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %347, %346
  %349 = select i1 %348, i32 456728854, i32 -599652189
  br label %.backedge

350:                                              ; preds = %22
  %.0..0..0.94 = load volatile i1, i1* %3, align 1
  %351 = select i1 %.0..0..0.94, i32 1702630211, i32 1166322170
  br label %.backedge

352:                                              ; preds = %22
  %353 = load i32, i32* @x.4, align 4
  %354 = load i32, i32* @y.5, align 4
  %355 = add i32 %353, -1
  %356 = mul i32 %355, %353
  %357 = and i32 %356, 1
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %359, %358
  %361 = select i1 %360, i32 525331865, i32 1792455922
  br label %.backedge

362:                                              ; preds = %22
  %363 = add i64 %.099, 1
  %364 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %363, i64 %.097
  %365 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %.099, i64 %.097
  %366 = load i64, i64* %365, align 8
  %367 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.099, i64 %.097
  %368 = load i64, i64* %367, align 8
  %369 = add i64 %368, %366
  %370 = call zeroext i1 @_Z5chminIxEbRT_S0_(i64* nonnull dereferenceable(8) %364, i64 %369)
  %.neg110 = add i64 %.097, 1
  %371 = icmp slt i64 %.neg110, 5
  store i1 %371, i1* %2, align 1
  %372 = load i32, i32* @x.4, align 4
  %373 = load i32, i32* @y.5, align 4
  %374 = add i32 %372, -1
  %375 = mul i32 %374, %372
  %376 = and i32 %375, 1
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %378, %377
  %380 = select i1 %379, i32 -83803988, i32 1792455922
  br label %.backedge

381:                                              ; preds = %22
  %.0..0..0.95 = load volatile i1, i1* %2, align 1
  %382 = select i1 %.0..0..0.95, i32 -1074956262, i32 -729245869
  br label %.backedge

383:                                              ; preds = %22
  %384 = add i64 %.099, 1
  %385 = add i64 %.097, 1
  %386 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %384, i64 %385
  %387 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %.099, i64 %.097
  %388 = load i64, i64* %387, align 8
  %389 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.099, i64 %385
  %390 = load i64, i64* %389, align 8
  %391 = add i64 %390, %388
  %392 = call zeroext i1 @_Z5chminIxEbRT_S0_(i64* nonnull dereferenceable(8) %386, i64 %391)
  br label %.backedge

393:                                              ; preds = %22
  %394 = load i32, i32* @x.4, align 4
  %395 = load i32, i32* @y.5, align 4
  %396 = add i32 %394, -1
  %397 = mul i32 %396, %394
  %398 = and i32 %397, 1
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %400, %399
  %402 = select i1 %401, i32 -723939071, i32 -1253896884
  br label %.backedge

403:                                              ; preds = %22
  %404 = add i64 %.097, 2
  %405 = icmp slt i64 %404, 5
  store i1 %405, i1* %1, align 1
  %406 = load i32, i32* @x.4, align 4
  %407 = load i32, i32* @y.5, align 4
  %408 = add i32 %406, -1
  %409 = mul i32 %408, %406
  %410 = and i32 %409, 1
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %412, %411
  %414 = select i1 %413, i32 810049669, i32 -1253896884
  br label %.backedge

415:                                              ; preds = %22
  %.0..0..0.96 = load volatile i1, i1* %1, align 1
  %416 = select i1 %.0..0..0.96, i32 2008575369, i32 967452549
  br label %.backedge

417:                                              ; preds = %22
  %418 = load i32, i32* @x.4, align 4
  %419 = load i32, i32* @y.5, align 4
  %420 = add i32 %418, -1
  %421 = mul i32 %420, %418
  %422 = and i32 %421, 1
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %424, %423
  %426 = select i1 %425, i32 1117974567, i32 -620352564
  br label %.backedge

427:                                              ; preds = %22
  %428 = add i64 %.099, 1
  %429 = add i64 %.097, 2
  %430 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %428, i64 %429
  %431 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %.099, i64 %.097
  %432 = load i64, i64* %431, align 8
  %433 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.099, i64 %429
  %434 = load i64, i64* %433, align 8
  %435 = add i64 %434, %432
  %436 = call zeroext i1 @_Z5chminIxEbRT_S0_(i64* nonnull dereferenceable(8) %430, i64 %435)
  %437 = load i32, i32* @x.4, align 4
  %438 = load i32, i32* @y.5, align 4
  %439 = add i32 %437, -1
  %440 = mul i32 %439, %437
  %441 = and i32 %440, 1
  %442 = icmp eq i32 %441, 0
  %443 = icmp slt i32 %438, 10
  %444 = or i1 %443, %442
  %445 = select i1 %444, i32 -535129558, i32 -620352564
  br label %.backedge

446:                                              ; preds = %22
  br label %.backedge

447:                                              ; preds = %22
  %.neg = add i64 %.097, 3
  %448 = icmp slt i64 %.neg, 5
  %449 = select i1 %448, i32 -1540038818, i32 -1545461595
  br label %.backedge

450:                                              ; preds = %22
  %451 = add i64 %.099, 1
  %452 = add i64 %.097, 3
  %453 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %451, i64 %452
  %454 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %.099, i64 %.097
  %455 = load i64, i64* %454, align 8
  %456 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.099, i64 %452
  %457 = load i64, i64* %456, align 8
  %458 = add i64 %457, %455
  %459 = call zeroext i1 @_Z5chminIxEbRT_S0_(i64* nonnull dereferenceable(8) %453, i64 %458)
  br label %.backedge

460:                                              ; preds = %22
  br label %.backedge

461:                                              ; preds = %22
  %462 = load i32, i32* @x.4, align 4
  %463 = load i32, i32* @y.5, align 4
  %464 = add i32 %462, -1
  %465 = mul i32 %464, %462
  %466 = and i32 %465, 1
  %467 = icmp eq i32 %466, 0
  %468 = icmp slt i32 %463, 10
  %469 = or i1 %468, %467
  %470 = select i1 %469, i32 510433171, i32 -1695405579
  br label %.backedge

471:                                              ; preds = %22
  %472 = add i64 %.097, 1
  %473 = load i32, i32* @x.4, align 4
  %474 = load i32, i32* @y.5, align 4
  %475 = add i32 %473, -1
  %476 = mul i32 %475, %473
  %477 = and i32 %476, 1
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %479, %478
  %481 = select i1 %480, i32 -1280085398, i32 -1695405579
  br label %.backedge

482:                                              ; preds = %22
  br label %.backedge

483:                                              ; preds = %22
  br label %.backedge

484:                                              ; preds = %22
  %485 = add i64 %.099, 1
  br label %.backedge

486:                                              ; preds = %22
  %487 = load i32, i32* @x.4, align 4
  %488 = load i32, i32* @y.5, align 4
  %489 = add i32 %487, -1
  %490 = mul i32 %489, %487
  %491 = and i32 %490, 1
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %493, %492
  %495 = select i1 %494, i32 1681749730, i32 268954046
  br label %.backedge

496:                                              ; preds = %22
  %497 = load i64, i64* %8, align 8
  %498 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %497, i64 0
  %499 = bitcast i64* %498 to <2 x i64>*
  %500 = load <2 x i64>, <2 x i64>* %499, align 16
  store <2 x i64> %500, <2 x i64>* %20, align 16
  %501 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %497, i64 2
  %502 = bitcast i64* %501 to <2 x i64>*
  %503 = load <2 x i64>, <2 x i64>* %502, align 16
  store <2 x i64> %503, <2 x i64>* %21, align 16
  %504 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %497, i64 4
  %505 = load i64, i64* %504, align 16
  store i64 %505, i64* %16, align 16
  %506 = call i64 @_ZSt3minIxET_St16initializer_listIS0_E(i64* nonnull %14, i64 5)
  %507 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %506)
  %508 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %507, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %509 = load i32, i32* @x.4, align 4
  %510 = load i32, i32* @y.5, align 4
  %511 = add i32 %509, -1
  %512 = mul i32 %511, %509
  %513 = and i32 %512, 1
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %515, %514
  %517 = select i1 %516, i32 -1201082169, i32 268954046
  br label %.backedge

518:                                              ; preds = %22
  ret void

519:                                              ; preds = %22
  br label %.backedge

520:                                              ; preds = %22
  br label %.backedge

521:                                              ; preds = %22
  br label %.backedge

522:                                              ; preds = %22
  %523 = getelementptr inbounds [200200 x i64], [200200 x i64]* %9, i64 0, i64 %.0107
  %524 = load i64, i64* %523, align 8
  %525 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.0107, i64 %.0105
  store i64 %524, i64* %525, align 8
  br label %.backedge

526:                                              ; preds = %22
  %527 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.0107, i64 %.0105
  store i64 2, i64* %527, align 8
  br label %.backedge

528:                                              ; preds = %22
  br label %.backedge

529:                                              ; preds = %22
  br label %.backedge

530:                                              ; preds = %22
  br label %.backedge

531:                                              ; preds = %22
  br label %.backedge

532:                                              ; preds = %22
  %533 = add i64 %.0101, 1
  br label %.backedge

534:                                              ; preds = %22
  br label %.backedge

535:                                              ; preds = %22
  br label %.backedge

536:                                              ; preds = %22
  %537 = add i64 %.099, 1
  %538 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %537, i64 %.097
  %539 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %.099, i64 %.097
  %540 = load i64, i64* %539, align 8
  %541 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.099, i64 %.097
  %542 = load i64, i64* %541, align 8
  %543 = add i64 %542, %540
  %544 = call zeroext i1 @_Z5chminIxEbRT_S0_(i64* nonnull dereferenceable(8) %538, i64 %543)
  br label %.backedge

545:                                              ; preds = %22
  br label %.backedge

546:                                              ; preds = %22
  %547 = add i64 %.099, 1
  %548 = add i64 %.097, 2
  %549 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %547, i64 %548
  %550 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %.099, i64 %.097
  %551 = load i64, i64* %550, align 8
  %552 = getelementptr inbounds [200200 x [6 x i64]], [200200 x [6 x i64]]* %10, i64 0, i64 %.099, i64 %548
  %553 = load i64, i64* %552, align 8
  %554 = add i64 %553, %551
  %555 = call zeroext i1 @_Z5chminIxEbRT_S0_(i64* nonnull dereferenceable(8) %549, i64 %554)
  br label %.backedge

556:                                              ; preds = %22
  %557 = add i64 %.097, 1
  br label %.backedge

558:                                              ; preds = %22
  %559 = load i64, i64* %8, align 8
  %560 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %559, i64 0
  %561 = bitcast i64* %560 to <2 x i64>*
  %562 = load <2 x i64>, <2 x i64>* %561, align 16
  store <2 x i64> %562, <2 x i64>* %18, align 16
  %563 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %559, i64 2
  %564 = bitcast i64* %563 to <2 x i64>*
  %565 = load <2 x i64>, <2 x i64>* %564, align 16
  store <2 x i64> %565, <2 x i64>* %19, align 16
  %566 = getelementptr inbounds [200200 x [20 x i64]], [200200 x [20 x i64]]* %11, i64 0, i64 %559, i64 4
  %567 = load i64, i64* %566, align 16
  store i64 %567, i64* %16, align 16
  %568 = call i64 @_ZSt3minIxET_St16initializer_listIS0_E(i64* nonnull %14, i64 5)
  %569 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %568)
  %570 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %569, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_Z5chminIxEbRT_S0_(i64* dereferenceable(8) %0, i64 %1) local_unnamed_addr #4 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %0, align 8
  store i64 %5, i64* %4, align 8
  store i64 %1, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.07.ph = phi i1 [ undef, %2 ], [ %.07.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ 1491490657, %2 ], [ %.0.ph.be, %.outer.backedge ]
  %6 = load i32, i32* @x.6, align 4
  %7 = load i32, i32* @y.7, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %12, %11
  %14 = select i1 %13, i32 -378554517, i32 -1382481128
  br label %.outer9

.outer9:                                          ; preds = %.outer9.backedge, %.outer
  %.0.ph10 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph10.be, %.outer9.backedge ]
  br label %15

15:                                               ; preds = %.outer9, %15
  switch i32 %.0.ph10, label %15 [
    i32 1491490657, label %16
    i32 -2014146329, label %19
    i32 -760714785, label %.outer9.backedge
    i32 -378554517, label %20
    i32 1016921078, label %30
    i32 -439351022, label %31
    i32 -1382481128, label %.outer.backedge
  ]

16:                                               ; preds = %15
  %.0..0..0.5 = load volatile i64, i64* %4, align 8
  %.0..0..0.6 = load volatile i64, i64* %3, align 8
  %17 = icmp sgt i64 %.0..0..0.5, %.0..0..0.6
  %18 = select i1 %17, i32 -2014146329, i32 -760714785
  br label %.outer9.backedge

19:                                               ; preds = %15
  store i64 %1, i64* %0, align 8
  br label %.outer.backedge

20:                                               ; preds = %15
  %21 = load i32, i32* @x.6, align 4
  %22 = load i32, i32* @y.7, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 1016921078, i32 -1382481128
  br label %.outer.backedge

30:                                               ; preds = %15
  br label %.outer9.backedge

.outer9.backedge:                                 ; preds = %15, %30, %16
  %.0.ph10.be = phi i32 [ %18, %16 ], [ -439351022, %30 ], [ %14, %15 ]
  br label %.outer9

31:                                               ; preds = %15
  ret i1 %.07.ph

.outer.backedge:                                  ; preds = %15, %20, %19
  %.07.ph.be = phi i1 [ true, %19 ], [ false, %20 ], [ false, %15 ]
  %.0.ph.be = phi i32 [ -439351022, %19 ], [ %29, %20 ], [ -378554517, %15 ]
  br label %.outer
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_ZSt3minIxET_St16initializer_listIS0_E(i64* %0, i64 %1) local_unnamed_addr #0 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = load i32, i32* @x.8, align 4
  %7 = load i32, i32* @y.9, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %5, align 1
  %12 = icmp slt i32 %7, 10
  store i1 %12, i1* %4, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ 1534026028, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %13

13:                                               ; preds = %.outer, %13
  switch i32 %.0.ph, label %13 [
    i32 1534026028, label %14
    i32 315701933, label %17
    i32 -1201580388, label %34
    i32 2064218358, label %35
  ]

14:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %.0..0..0.1 = load volatile i1, i1* %4, align 1
  %15 = or i1 %.0..0..0., %.0..0..0.1
  %16 = select i1 %15, i32 315701933, i32 2064218358
  br label %.outer.backedge

17:                                               ; preds = %13
  %18 = alloca %"class.std::initializer_list", align 8
  %19 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %18, i64 0, i32 0
  store i64* %0, i64** %19, align 8
  %20 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %18, i64 0, i32 1
  store i64 %1, i64* %20, align 8
  %21 = call i64* @_ZNKSt16initializer_listIxE5beginEv(%"class.std::initializer_list"* nonnull %18) #6
  %22 = call i64* @_ZNKSt16initializer_listIxE3endEv(%"class.std::initializer_list"* nonnull %18) #6
  %23 = call i64* @_ZSt11min_elementIPKxET_S2_S2_(i64* %21, i64* %22)
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %3, align 8
  %25 = load i32, i32* @x.8, align 4
  %26 = load i32, i32* @y.9, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 -1201580388, i32 2064218358
  br label %.outer.backedge

34:                                               ; preds = %13
  %.0..0..0.2 = load volatile i64, i64* %3, align 8
  ret i64 %.0..0..0.2

35:                                               ; preds = %13
  %36 = alloca %"class.std::initializer_list", align 8
  %37 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %36, i64 0, i32 0
  store i64* %0, i64** %37, align 8
  %38 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %36, i64 0, i32 1
  store i64 %1, i64* %38, align 8
  %39 = call i64* @_ZNKSt16initializer_listIxE5beginEv(%"class.std::initializer_list"* nonnull %36) #6
  %40 = call i64* @_ZNKSt16initializer_listIxE3endEv(%"class.std::initializer_list"* nonnull %36) #6
  %41 = call i64* @_ZSt11min_elementIPKxET_S2_S2_(i64* %39, i64* %40)
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %35, %17, %14
  %.0.ph.be = phi i32 [ %16, %14 ], [ %33, %17 ], [ 315701933, %35 ]
  br label %.outer
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %2 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %3 = getelementptr i8, i8* %2, i64 -24
  %4 = bitcast i8* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %5
  %7 = bitcast i8* %6 to %"class.std::basic_ios"*
  %8 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %7, %"class.std::basic_ostream"* null)
  tail call void @_Z5solvev()
  ret i32 0
}

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt11min_elementIPKxET_S2_S2_(i64* %0, i64* %1) local_unnamed_addr #0 comdat {
  tail call void @_ZN9__gnu_cxx5__ops16__iter_less_iterEv()
  %3 = tail call i64* @_ZSt13__min_elementIPKxN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_(i64* %0, i64* %1)
  ret i64* %3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNKSt16initializer_listIxE5beginEv(%"class.std::initializer_list"* %0) local_unnamed_addr #4 comdat align 2 {
  %2 = alloca i64*, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.14, align 4
  %6 = load i32, i32* @y.15, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  %12 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %0, i64 0, i32 0
  %13 = or i1 %11, %10
  %14 = select i1 %13, i32 -1375109418, i32 597410161
  br label %.outer

.outer:                                           ; preds = %19, %1
  %.ph = phi i64* [ %20, %19 ], [ undef, %1 ]
  %.0.ph = phi i32 [ %14, %19 ], [ 890368762, %1 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %15

15:                                               ; preds = %.outer3, %15
  switch i32 %.0.ph4, label %15 [
    i32 890368762, label %16
    i32 -1937275532, label %19
    i32 -1375109418, label %21
    i32 597410161, label %.outer3.backedge
  ]

16:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %17 = or i1 %.0..0..0., %.0..0..0.1
  %18 = select i1 %17, i32 -1937275532, i32 597410161
  br label %.outer3.backedge

19:                                               ; preds = %15
  %20 = load i64*, i64** %12, align 8
  br label %.outer

21:                                               ; preds = %15
  store i64* %.ph, i64** %2, align 8
  %.0..0..0.2 = load volatile i64*, i64** %2, align 8
  ret i64* %.0..0..0.2

.outer3.backedge:                                 ; preds = %15, %16
  %.0.ph4.be = phi i32 [ %18, %16 ], [ -1937275532, %15 ]
  br label %.outer3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64* @_ZNKSt16initializer_listIxE3endEv(%"class.std::initializer_list"* %0) local_unnamed_addr #4 comdat align 2 {
  %2 = tail call i64* @_ZNKSt16initializer_listIxE5beginEv(%"class.std::initializer_list"* %0) #6
  %3 = tail call i64 @_ZNKSt16initializer_listIxE4sizeEv(%"class.std::initializer_list"* %0) #6
  %4 = getelementptr inbounds i64, i64* %2, i64 %3
  ret i64* %4
}

; Function Attrs: noinline uwtable
define linkonce_odr i64* @_ZSt13__min_elementIPKxN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_(i64* %0, i64* %1) local_unnamed_addr #0 comdat {
  %3 = alloca i64*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  store i64* %0, i64** %6, align 8
  store i64* %1, i64** %5, align 8
  br label %8

8:                                                ; preds = %.backedge, %2
  %.024 = phi i64* [ %0, %2 ], [ %.024.be, %.backedge ]
  %.022 = phi i64* [ undef, %2 ], [ %.022.be, %.backedge ]
  %.020 = phi i64* [ undef, %2 ], [ %.020.be, %.backedge ]
  %.0 = phi i32 [ 345165910, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 345165910, label %9
    i32 -569253392, label %12
    i32 -1597594340, label %22
    i32 535921947, label %32
    i32 761930025, label %33
    i32 706626826, label %34
    i32 -2112011398, label %44
    i32 -100428859, label %56
    i32 -1621902014, label %58
    i32 1805769423, label %61
    i32 -1027334884, label %62
    i32 -250472287, label %72
    i32 -1357100926, label %82
    i32 -1056499278, label %83
    i32 1910936833, label %93
    i32 -463665077, label %103
    i32 -1521897350, label %104
    i32 -263359328, label %114
    i32 247866056, label %124
    i32 -1716640328, label %125
    i32 -1379325689, label %126
    i32 -792380978, label %128
    i32 1474525444, label %129
    i32 -1474380270, label %130
  ]

.backedge:                                        ; preds = %8, %130, %129, %128, %126, %125, %114, %104, %103, %93, %83, %82, %72, %62, %61, %58, %56, %44, %34, %33, %32, %22, %12, %9
  %.024.be = phi i64* [ %.024, %8 ], [ %.024, %130 ], [ %.024, %129 ], [ %.024, %128 ], [ %127, %126 ], [ %.024, %125 ], [ %.024, %114 ], [ %.024, %104 ], [ %.024, %103 ], [ %.024, %93 ], [ %.024, %83 ], [ %.024, %82 ], [ %.024, %72 ], [ %.024, %62 ], [ %.024, %61 ], [ %.024, %58 ], [ %.024, %56 ], [ %45, %44 ], [ %.024, %34 ], [ %.024, %33 ], [ %.024, %32 ], [ %.024, %22 ], [ %.024, %12 ], [ %.024, %9 ]
  %.022.be = phi i64* [ %.022, %8 ], [ %.022, %130 ], [ %.020, %129 ], [ %.022, %128 ], [ %.022, %126 ], [ %.024, %125 ], [ %.022, %114 ], [ %.022, %104 ], [ %.022, %103 ], [ %.020, %93 ], [ %.022, %83 ], [ %.022, %82 ], [ %.022, %72 ], [ %.022, %62 ], [ %.022, %61 ], [ %.022, %58 ], [ %.022, %56 ], [ %.022, %44 ], [ %.022, %34 ], [ %.022, %33 ], [ %.022, %32 ], [ %.024, %22 ], [ %.022, %12 ], [ %.022, %9 ]
  %.020.be = phi i64* [ %.020, %8 ], [ %.020, %130 ], [ %.020, %129 ], [ %.020, %128 ], [ %.020, %126 ], [ %.020, %125 ], [ %.020, %114 ], [ %.020, %104 ], [ %.020, %103 ], [ %.020, %93 ], [ %.020, %83 ], [ %.020, %82 ], [ %.020, %72 ], [ %.020, %62 ], [ %.024, %61 ], [ %.020, %58 ], [ %.020, %56 ], [ %.020, %44 ], [ %.020, %34 ], [ %.024, %33 ], [ %.020, %32 ], [ %.020, %22 ], [ %.020, %12 ], [ %.020, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ -263359328, %130 ], [ 1910936833, %129 ], [ -250472287, %128 ], [ -2112011398, %126 ], [ -1597594340, %125 ], [ %123, %114 ], [ %113, %104 ], [ -1521897350, %103 ], [ %102, %93 ], [ %92, %83 ], [ 706626826, %82 ], [ %81, %72 ], [ %71, %62 ], [ -1027334884, %61 ], [ %60, %58 ], [ %57, %56 ], [ %55, %44 ], [ %43, %34 ], [ 706626826, %33 ], [ -1521897350, %32 ], [ %31, %22 ], [ %21, %12 ], [ %11, %9 ]
  br label %8

9:                                                ; preds = %8
  %.0..0..0.16 = load volatile i64*, i64** %6, align 8
  %.0..0..0.17 = load volatile i64*, i64** %5, align 8
  %10 = icmp eq i64* %.0..0..0.16, %.0..0..0.17
  %11 = select i1 %10, i32 -569253392, i32 761930025
  br label %.backedge

12:                                               ; preds = %8
  %13 = load i32, i32* @x.18, align 4
  %14 = load i32, i32* @y.19, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 -1597594340, i32 -1716640328
  br label %.backedge

22:                                               ; preds = %8
  %23 = load i32, i32* @x.18, align 4
  %24 = load i32, i32* @y.19, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 535921947, i32 -1716640328
  br label %.backedge

32:                                               ; preds = %8
  br label %.backedge

33:                                               ; preds = %8
  br label %.backedge

34:                                               ; preds = %8
  %35 = load i32, i32* @x.18, align 4
  %36 = load i32, i32* @y.19, align 4
  %37 = add i32 %35, -1
  %38 = mul i32 %37, %35
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %41, %40
  %43 = select i1 %42, i32 -2112011398, i32 -1379325689
  br label %.backedge

44:                                               ; preds = %8
  %45 = getelementptr inbounds i64, i64* %.024, i64 1
  %46 = icmp ne i64* %45, %1
  store i1 %46, i1* %4, align 1
  %47 = load i32, i32* @x.18, align 4
  %48 = load i32, i32* @y.19, align 4
  %49 = add i32 %47, -1
  %50 = mul i32 %49, %47
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %53, %52
  %55 = select i1 %54, i32 -100428859, i32 -1379325689
  br label %.backedge

56:                                               ; preds = %8
  %.0..0..0.18 = load volatile i1, i1* %4, align 1
  %57 = select i1 %.0..0..0.18, i32 -1621902014, i32 -1056499278
  br label %.backedge

58:                                               ; preds = %8
  %59 = call zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKxS4_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* nonnull %7, i64* %.024, i64* %.020)
  %60 = select i1 %59, i32 1805769423, i32 -1027334884
  br label %.backedge

61:                                               ; preds = %8
  br label %.backedge

62:                                               ; preds = %8
  %63 = load i32, i32* @x.18, align 4
  %64 = load i32, i32* @y.19, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 -250472287, i32 -792380978
  br label %.backedge

72:                                               ; preds = %8
  %73 = load i32, i32* @x.18, align 4
  %74 = load i32, i32* @y.19, align 4
  %75 = add i32 %73, -1
  %76 = mul i32 %75, %73
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %79, %78
  %81 = select i1 %80, i32 -1357100926, i32 -792380978
  br label %.backedge

82:                                               ; preds = %8
  br label %.backedge

83:                                               ; preds = %8
  %84 = load i32, i32* @x.18, align 4
  %85 = load i32, i32* @y.19, align 4
  %86 = add i32 %84, -1
  %87 = mul i32 %86, %84
  %88 = and i32 %87, 1
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %90, %89
  %92 = select i1 %91, i32 1910936833, i32 1474525444
  br label %.backedge

93:                                               ; preds = %8
  %94 = load i32, i32* @x.18, align 4
  %95 = load i32, i32* @y.19, align 4
  %96 = add i32 %94, -1
  %97 = mul i32 %96, %94
  %98 = and i32 %97, 1
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %100, %99
  %102 = select i1 %101, i32 -463665077, i32 1474525444
  br label %.backedge

103:                                              ; preds = %8
  br label %.backedge

104:                                              ; preds = %8
  %105 = load i32, i32* @x.18, align 4
  %106 = load i32, i32* @y.19, align 4
  %107 = add i32 %105, -1
  %108 = mul i32 %107, %105
  %109 = and i32 %108, 1
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %111, %110
  %113 = select i1 %112, i32 -263359328, i32 -1474380270
  br label %.backedge

114:                                              ; preds = %8
  store i64* %.022, i64** %3, align 8
  %115 = load i32, i32* @x.18, align 4
  %116 = load i32, i32* @y.19, align 4
  %117 = add i32 %115, -1
  %118 = mul i32 %117, %115
  %119 = and i32 %118, 1
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %121, %120
  %123 = select i1 %122, i32 247866056, i32 -1474380270
  br label %.backedge

124:                                              ; preds = %8
  %.0..0..0.19 = load volatile i64*, i64** %3, align 8
  ret i64* %.0..0..0.19

125:                                              ; preds = %8
  br label %.backedge

126:                                              ; preds = %8
  %127 = getelementptr inbounds i64, i64* %.024, i64 1
  br label %.backedge

128:                                              ; preds = %8
  br label %.backedge

129:                                              ; preds = %8
  br label %.backedge

130:                                              ; preds = %8
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN9__gnu_cxx5__ops16__iter_less_iterEv() local_unnamed_addr #4 comdat {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr zeroext i1 @_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKxS4_EEbT_T0_(%"struct.__gnu_cxx::__ops::_Iter_less_iter"* %0, i64* %1, i64* %2) local_unnamed_addr #4 comdat align 2 {
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = load i32, i32* @x.22, align 4
  %8 = load i32, i32* @y.23, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %6, align 1
  %13 = icmp slt i32 %8, 10
  store i1 %13, i1* %5, align 1
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 1038781697, i32 -1685041990
  br label %.outer

.outer:                                           ; preds = %20, %3
  %.ph = phi i1 [ %23, %20 ], [ undef, %3 ]
  %.0.ph = phi i32 [ %15, %20 ], [ 187919184, %3 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %16

16:                                               ; preds = %.outer3, %16
  switch i32 %.0.ph4, label %16 [
    i32 187919184, label %17
    i32 -187141843, label %20
    i32 1038781697, label %24
    i32 -1685041990, label %.outer3.backedge
  ]

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %6, align 1
  %.0..0..0.1 = load volatile i1, i1* %5, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 -187141843, i32 -1685041990
  br label %.outer3.backedge

20:                                               ; preds = %16
  %21 = load i64, i64* %1, align 8
  %22 = load i64, i64* %2, align 8
  %23 = icmp slt i64 %21, %22
  br label %.outer

24:                                               ; preds = %16
  store i1 %.ph, i1* %4, align 1
  %.0..0..0.2 = load volatile i1, i1* %4, align 1
  ret i1 %.0..0..0.2

.outer3.backedge:                                 ; preds = %16, %17
  %.0.ph4.be = phi i32 [ %19, %17 ], [ -187141843, %16 ]
  br label %.outer3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZNKSt16initializer_listIxE4sizeEv(%"class.std::initializer_list"* %0) local_unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::initializer_list", %"class.std::initializer_list"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s502852909.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
