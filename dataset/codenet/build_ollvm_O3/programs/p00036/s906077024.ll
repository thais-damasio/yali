; ModuleID = 'build_ollvm/programs/p00036/s906077024.ll'
source_filename = "Project_CodeNet_C++1400/p00036/s906077024.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZZ4mainE2dx = private unnamed_addr constant [7 x [3 x i32]] [[3 x i32] [i32 1, i32 0, i32 1], [3 x i32] zeroinitializer, [3 x i32] [i32 1, i32 2, i32 3], [3 x i32] [i32 -1, i32 0, i32 -1], [3 x i32] [i32 1, i32 1, i32 2], [3 x i32] [i32 0, i32 1, i32 1], [3 x i32] [i32 1, i32 -1, i32 0]], align 16
@_ZZ4mainE2dy = private unnamed_addr constant [7 x [3 x i32]] [[3 x i32] [i32 0, i32 1, i32 1], [3 x i32] [i32 1, i32 2, i32 3], [3 x i32] zeroinitializer, [3 x i32] [i32 1, i32 1, i32 2], [3 x i32] [i32 0, i32 1, i32 1], [3 x i32] [i32 1, i32 1, i32 2], [3 x i32] [i32 0, i32 1, i32 1]], align 16
@stdin = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s906077024.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #6
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca [256 x i8], align 16
  %6 = alloca [8 x [8 x i8]], align 16
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  br label %8

8:                                                ; preds = %.backedge, %0
  %.066 = phi i8* [ inttoptr (i64 1 to i8*), %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i8 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i32 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i32 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.050 = phi i32 [ undef, %0 ], [ %.050.be, %.backedge ]
  %.0 = phi i32 [ 1220714556, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1220714556, label %9
    i32 1610215259, label %19
    i32 719372058, label %30
    i32 72379697, label %32
    i32 1146736505, label %33
    i32 491990572, label %36
    i32 -1231061834, label %41
    i32 1257286646, label %42
    i32 655563701, label %43
    i32 -1174332526, label %46
    i32 -1759011690, label %56
    i32 -1153554141, label %71
    i32 -1540963350, label %72
    i32 1463477350, label %82
    i32 2084135809, label %93
    i32 695206141, label %94
    i32 -710311349, label %104
    i32 1249493762, label %114
    i32 195916188, label %115
    i32 -2041660352, label %116
    i32 -995220976, label %126
    i32 -1396588552, label %139
    i32 1510758065, label %141
    i32 -1056305332, label %142
    i32 2003137017, label %152
    i32 -1010923633, label %162
    i32 -1079676588, label %163
    i32 742256669, label %166
    i32 -1144795952, label %167
    i32 -148770902, label %170
    i32 975249416, label %180
    i32 1900757791, label %195
    i32 -177818354, label %197
    i32 771678922, label %198
    i32 -1988767775, label %199
    i32 -1954248313, label %209
    i32 40324547, label %220
    i32 -1239910229, label %221
    i32 -2065075791, label %224
    i32 402975982, label %225
    i32 -1714555832, label %226
    i32 1209322650, label %228
    i32 372098060, label %238
    i32 1348984547, label %248
    i32 3272206, label %249
    i32 2032674885, label %252
    i32 845982847, label %262
    i32 -1162886164, label %272
    i32 672878286, label %273
    i32 84811189, label %276
    i32 -473401199, label %287
    i32 530772224, label %290
    i32 -483475604, label %293
    i32 2118769621, label %296
    i32 2036733596, label %303
    i32 1476141221, label %313
    i32 -606045080, label %323
    i32 1963671659, label %324
    i32 -116515844, label %325
    i32 -851364733, label %335
    i32 43767683, label %345
    i32 -2014813840, label %346
    i32 -1642997990, label %356
    i32 923064305, label %367
    i32 1258487383, label %369
    i32 -1870657897, label %371
    i32 -2111030080, label %372
    i32 459368752, label %382
    i32 -293316841, label %393
    i32 -1737798845, label %394
    i32 1447200597, label %395
    i32 1976667724, label %405
    i32 961588045, label %415
    i32 1239604500, label %416
    i32 -1377414041, label %417
    i32 219573381, label %423
    i32 -1824450883, label %425
    i32 1952648166, label %426
    i32 603050709, label %429
    i32 1389516067, label %430
    i32 68963595, label %431
    i32 -869270292, label %433
    i32 480495150, label %434
    i32 2065075666, label %435
    i32 890853882, label %436
    i32 -1318329075, label %438
    i32 -1898022951, label %439
    i32 -2074266698, label %440
  ]

.backedge:                                        ; preds = %8, %440, %439, %438, %436, %435, %434, %433, %431, %430, %429, %426, %425, %423, %417, %416, %405, %395, %394, %393, %382, %372, %371, %369, %367, %356, %346, %345, %335, %325, %324, %323, %313, %303, %296, %293, %290, %287, %276, %273, %272, %262, %252, %249, %248, %238, %228, %226, %225, %224, %221, %220, %209, %199, %198, %197, %195, %180, %170, %167, %166, %163, %162, %152, %142, %141, %139, %126, %116, %115, %114, %104, %94, %93, %82, %72, %71, %56, %46, %43, %42, %41, %36, %33, %32, %30, %19, %9
  %.066.be = phi i8* [ %.066, %8 ], [ %.066, %440 ], [ %.066, %439 ], [ %.066, %438 ], [ %.066, %436 ], [ %.066, %435 ], [ %.066, %434 ], [ %.066, %433 ], [ %.066, %431 ], [ %.066, %430 ], [ %.066, %429 ], [ %428, %426 ], [ %.066, %425 ], [ %.066, %423 ], [ %.066, %417 ], [ %.066, %416 ], [ %.066, %405 ], [ %.066, %395 ], [ %.066, %394 ], [ %.066, %393 ], [ %.066, %382 ], [ %.066, %372 ], [ %.066, %371 ], [ %.066, %369 ], [ %.066, %367 ], [ %.066, %356 ], [ %.066, %346 ], [ %.066, %345 ], [ %.066, %335 ], [ %.066, %325 ], [ %.066, %324 ], [ %.066, %323 ], [ %.066, %313 ], [ %.066, %303 ], [ %.066, %296 ], [ %.066, %293 ], [ %.066, %290 ], [ %.066, %287 ], [ %.066, %276 ], [ %.066, %273 ], [ %.066, %272 ], [ %.066, %262 ], [ %.066, %252 ], [ %.066, %249 ], [ %.066, %248 ], [ %.066, %238 ], [ %.066, %228 ], [ %.066, %226 ], [ %.066, %225 ], [ %.066, %224 ], [ %.066, %221 ], [ %.066, %220 ], [ %.066, %209 ], [ %.066, %199 ], [ %.066, %198 ], [ %.066, %197 ], [ %.066, %195 ], [ %.066, %180 ], [ %.066, %170 ], [ %.066, %167 ], [ %.066, %166 ], [ %.066, %163 ], [ %.066, %162 ], [ %.066, %152 ], [ %.066, %142 ], [ %.066, %141 ], [ %.066, %139 ], [ %128, %126 ], [ %.066, %116 ], [ %.066, %115 ], [ %.066, %114 ], [ %.066, %104 ], [ %.066, %94 ], [ %.066, %93 ], [ %.066, %82 ], [ %.066, %72 ], [ %.066, %71 ], [ %.066, %56 ], [ %.066, %46 ], [ %.066, %43 ], [ %.066, %42 ], [ %.066, %41 ], [ %.066, %36 ], [ %.066, %33 ], [ %.066, %32 ], [ %.066, %30 ], [ %.066, %19 ], [ %.066, %9 ]
  %.064.be = phi i32 [ %.064, %8 ], [ %.064, %440 ], [ %.neg, %439 ], [ %.064, %438 ], [ %.064, %436 ], [ %.064, %435 ], [ %.064, %434 ], [ 0, %433 ], [ %.064, %431 ], [ %.064, %430 ], [ %.064, %429 ], [ %.064, %426 ], [ %.064, %425 ], [ %.064, %423 ], [ %.064, %417 ], [ %.064, %416 ], [ %.064, %405 ], [ %.064, %395 ], [ %.064, %394 ], [ %.064, %393 ], [ %383, %382 ], [ %.064, %372 ], [ %.064, %371 ], [ %.064, %369 ], [ %.064, %367 ], [ %.064, %356 ], [ %.064, %346 ], [ %.064, %345 ], [ %.064, %335 ], [ %.064, %325 ], [ %.064, %324 ], [ %.064, %323 ], [ %.064, %313 ], [ %.064, %303 ], [ %.064, %296 ], [ %.064, %293 ], [ %.064, %290 ], [ %.064, %287 ], [ %.064, %276 ], [ %.064, %273 ], [ %.064, %272 ], [ %.064, %262 ], [ %.064, %252 ], [ %.064, %249 ], [ %.064, %248 ], [ 0, %238 ], [ %.064, %228 ], [ %.064, %226 ], [ %.064, %225 ], [ %.064, %224 ], [ %.064, %221 ], [ %.064, %220 ], [ %.064, %209 ], [ %.064, %199 ], [ %.064, %198 ], [ %.064, %197 ], [ %.064, %195 ], [ %.064, %180 ], [ %.064, %170 ], [ %.064, %167 ], [ %.064, %166 ], [ %.064, %163 ], [ %.064, %162 ], [ %.064, %152 ], [ %.064, %142 ], [ %.064, %141 ], [ %.064, %139 ], [ %.064, %126 ], [ %.064, %116 ], [ %.neg70, %115 ], [ %.064, %114 ], [ %.064, %104 ], [ %.064, %94 ], [ %.064, %93 ], [ %.064, %82 ], [ %.064, %72 ], [ %.064, %71 ], [ %.064, %56 ], [ %.064, %46 ], [ %.064, %43 ], [ %.064, %42 ], [ %.064, %41 ], [ %.064, %36 ], [ %.064, %33 ], [ 0, %32 ], [ %.064, %30 ], [ %.064, %19 ], [ %.064, %9 ]
  %.062.be = phi i32 [ %.062, %8 ], [ %.062, %440 ], [ %.062, %439 ], [ %.062, %438 ], [ %.062, %436 ], [ %.062, %435 ], [ %.062, %434 ], [ %.062, %433 ], [ %.062, %431 ], [ %.062, %430 ], [ %.062, %429 ], [ %.062, %426 ], [ %.062, %425 ], [ %424, %423 ], [ %.062, %417 ], [ %.062, %416 ], [ %.062, %405 ], [ %.062, %395 ], [ %.062, %394 ], [ %.062, %393 ], [ %.062, %382 ], [ %.062, %372 ], [ %.062, %371 ], [ %.062, %369 ], [ %.062, %367 ], [ %.062, %356 ], [ %.062, %346 ], [ %.062, %345 ], [ %.062, %335 ], [ %.062, %325 ], [ %.062, %324 ], [ %.062, %323 ], [ %.062, %313 ], [ %.062, %303 ], [ %.062, %296 ], [ %.062, %293 ], [ %.062, %290 ], [ %.062, %287 ], [ %.062, %276 ], [ %.062, %273 ], [ %.062, %272 ], [ %.062, %262 ], [ %.062, %252 ], [ %.062, %249 ], [ %.062, %248 ], [ %.062, %238 ], [ %.062, %228 ], [ %.062, %226 ], [ %.062, %225 ], [ %.062, %224 ], [ %.062, %221 ], [ %.062, %220 ], [ %.062, %209 ], [ %.062, %199 ], [ %.062, %198 ], [ %.062, %197 ], [ %.062, %195 ], [ %.062, %180 ], [ %.062, %170 ], [ %.062, %167 ], [ %.062, %166 ], [ %.062, %163 ], [ %.062, %162 ], [ %.062, %152 ], [ %.062, %142 ], [ %.062, %141 ], [ %.062, %139 ], [ %.062, %126 ], [ %.062, %116 ], [ %.062, %115 ], [ %.062, %114 ], [ %.062, %104 ], [ %.062, %94 ], [ %.062, %93 ], [ %83, %82 ], [ %.062, %72 ], [ %.062, %71 ], [ %.062, %56 ], [ %.062, %46 ], [ %.062, %43 ], [ 0, %42 ], [ %.062, %41 ], [ %.062, %36 ], [ %.062, %33 ], [ %.062, %32 ], [ %.062, %30 ], [ %.062, %19 ], [ %.062, %9 ]
  %.060.be = phi i32 [ %.060, %8 ], [ %.060, %440 ], [ %.060, %439 ], [ %.060, %438 ], [ %.060, %436 ], [ %.060, %435 ], [ %.060, %434 ], [ %.060, %433 ], [ %432, %431 ], [ %.060, %430 ], [ %.060, %429 ], [ %.060, %426 ], [ %.060, %425 ], [ %.060, %423 ], [ %.060, %417 ], [ %.060, %416 ], [ %.060, %405 ], [ %.060, %395 ], [ %.060, %394 ], [ %.060, %393 ], [ %.060, %382 ], [ %.060, %372 ], [ %.060, %371 ], [ %.060, %369 ], [ %.060, %367 ], [ %.060, %356 ], [ %.060, %346 ], [ %.060, %345 ], [ %.060, %335 ], [ %.060, %325 ], [ %.060, %324 ], [ %.060, %323 ], [ %.060, %313 ], [ %.060, %303 ], [ %.060, %296 ], [ %.060, %293 ], [ %.060, %290 ], [ %.060, %287 ], [ %.060, %276 ], [ %.060, %273 ], [ %.060, %272 ], [ %.060, %262 ], [ %.060, %252 ], [ %.060, %249 ], [ %.060, %248 ], [ %.060, %238 ], [ %.060, %228 ], [ %.060, %226 ], [ %.060, %225 ], [ %.060, %224 ], [ %.060, %221 ], [ %.060, %220 ], [ %210, %209 ], [ %.060, %199 ], [ %.060, %198 ], [ %.060, %197 ], [ %.060, %195 ], [ %.060, %180 ], [ %.060, %170 ], [ %.060, %167 ], [ 0, %166 ], [ %.060, %163 ], [ %.060, %162 ], [ %.060, %152 ], [ %.060, %142 ], [ %.060, %141 ], [ %.060, %139 ], [ %.060, %126 ], [ %.060, %116 ], [ %.060, %115 ], [ %.060, %114 ], [ %.060, %104 ], [ %.060, %94 ], [ %.060, %93 ], [ %.060, %82 ], [ %.060, %72 ], [ %.060, %71 ], [ %.060, %56 ], [ %.060, %46 ], [ %.060, %43 ], [ %.060, %42 ], [ %.060, %41 ], [ %.060, %36 ], [ %.060, %33 ], [ %.060, %32 ], [ %.060, %30 ], [ %.060, %19 ], [ %.060, %9 ]
  %.058.be = phi i32 [ %.058, %8 ], [ %.058, %440 ], [ %.058, %439 ], [ %.058, %438 ], [ %.058, %436 ], [ %.058, %435 ], [ %.058, %434 ], [ %.058, %433 ], [ %.058, %431 ], [ %.058, %430 ], [ 0, %429 ], [ %.058, %426 ], [ %.058, %425 ], [ %.058, %423 ], [ %.058, %417 ], [ %.058, %416 ], [ %.058, %405 ], [ %.058, %395 ], [ %.058, %394 ], [ %.058, %393 ], [ %.058, %382 ], [ %.058, %372 ], [ %.058, %371 ], [ %.058, %369 ], [ %.058, %367 ], [ %.058, %356 ], [ %.058, %346 ], [ %.058, %345 ], [ %.058, %335 ], [ %.058, %325 ], [ %.058, %324 ], [ %.058, %323 ], [ %.058, %313 ], [ %.058, %303 ], [ %.058, %296 ], [ %.058, %293 ], [ %.058, %290 ], [ %.058, %287 ], [ %.058, %276 ], [ %.058, %273 ], [ %.058, %272 ], [ %.058, %262 ], [ %.058, %252 ], [ %.058, %249 ], [ %.058, %248 ], [ %.058, %238 ], [ %.058, %228 ], [ %227, %226 ], [ %.058, %225 ], [ %.058, %224 ], [ %.058, %221 ], [ %.058, %220 ], [ %.058, %209 ], [ %.058, %199 ], [ %.058, %198 ], [ %.058, %197 ], [ %.058, %195 ], [ %.058, %180 ], [ %.058, %170 ], [ %.058, %167 ], [ %.058, %166 ], [ %.058, %163 ], [ %.058, %162 ], [ 0, %152 ], [ %.058, %142 ], [ %.058, %141 ], [ %.058, %139 ], [ %.058, %126 ], [ %.058, %116 ], [ %.058, %115 ], [ %.058, %114 ], [ %.058, %104 ], [ %.058, %94 ], [ %.058, %93 ], [ %.058, %82 ], [ %.058, %72 ], [ %.058, %71 ], [ %.058, %56 ], [ %.058, %46 ], [ %.058, %43 ], [ %.058, %42 ], [ %.058, %41 ], [ %.058, %36 ], [ %.058, %33 ], [ %.058, %32 ], [ %.058, %30 ], [ %.058, %19 ], [ %.058, %9 ]
  %.056.be = phi i8 [ %.056, %8 ], [ %.056, %440 ], [ %.056, %439 ], [ %.056, %438 ], [ %.056, %436 ], [ %.056, %435 ], [ %.056, %434 ], [ %.056, %433 ], [ %.056, %431 ], [ %.056, %430 ], [ %.056, %429 ], [ %.056, %426 ], [ %.056, %425 ], [ %.056, %423 ], [ %.056, %417 ], [ %.056, %416 ], [ %.056, %405 ], [ %.056, %395 ], [ %.056, %394 ], [ %.056, %393 ], [ %.056, %382 ], [ %.056, %372 ], [ %.056, %371 ], [ %.056, %369 ], [ %.056, %367 ], [ %.056, %356 ], [ %.056, %346 ], [ %.056, %345 ], [ %.056, %335 ], [ %.056, %325 ], [ %.056, %324 ], [ %.056, %323 ], [ %.056, %313 ], [ %.056, %303 ], [ %.056, %296 ], [ %.056, %293 ], [ %.056, %290 ], [ %.056, %287 ], [ %.056, %276 ], [ %.056, %273 ], [ %.056, %272 ], [ %.056, %262 ], [ %.056, %252 ], [ %.056, %249 ], [ %.056, %248 ], [ %.056, %238 ], [ %.056, %228 ], [ %.056, %226 ], [ %.056, %225 ], [ %.056, %224 ], [ %.056, %221 ], [ %.056, %220 ], [ %.056, %209 ], [ %.056, %199 ], [ %.056, %198 ], [ 1, %197 ], [ %.056, %195 ], [ %.056, %180 ], [ %.056, %170 ], [ %.056, %167 ], [ 0, %166 ], [ %.056, %163 ], [ %.056, %162 ], [ %.056, %152 ], [ %.056, %142 ], [ %.056, %141 ], [ %.056, %139 ], [ %.056, %126 ], [ %.056, %116 ], [ %.056, %115 ], [ %.056, %114 ], [ %.056, %104 ], [ %.056, %94 ], [ %.056, %93 ], [ %.056, %82 ], [ %.056, %72 ], [ %.056, %71 ], [ %.056, %56 ], [ %.056, %46 ], [ %.056, %43 ], [ %.056, %42 ], [ %.056, %41 ], [ %.056, %36 ], [ %.056, %33 ], [ %.056, %32 ], [ %.056, %30 ], [ %.056, %19 ], [ %.056, %9 ]
  %.054.be = phi i32 [ %.054, %8 ], [ %.054, %440 ], [ %.054, %439 ], [ %.054, %438 ], [ %437, %436 ], [ %.054, %435 ], [ 0, %434 ], [ %.054, %433 ], [ %.054, %431 ], [ %.054, %430 ], [ %.054, %429 ], [ %.054, %426 ], [ %.054, %425 ], [ %.054, %423 ], [ %.054, %417 ], [ %.054, %416 ], [ %.054, %405 ], [ %.054, %395 ], [ %.054, %394 ], [ %.054, %393 ], [ %.054, %382 ], [ %.054, %372 ], [ %.054, %371 ], [ %.054, %369 ], [ %.054, %367 ], [ %.054, %356 ], [ %.054, %346 ], [ %.054, %345 ], [ %.neg69, %335 ], [ %.054, %325 ], [ %.054, %324 ], [ %.054, %323 ], [ %.054, %313 ], [ %.054, %303 ], [ %.054, %296 ], [ %.054, %293 ], [ %.054, %290 ], [ %.054, %287 ], [ %.054, %276 ], [ %.054, %273 ], [ %.054, %272 ], [ 0, %262 ], [ %.054, %252 ], [ %.054, %249 ], [ %.054, %248 ], [ %.054, %238 ], [ %.054, %228 ], [ %.054, %226 ], [ %.054, %225 ], [ %.054, %224 ], [ %.054, %221 ], [ %.054, %220 ], [ %.054, %209 ], [ %.054, %199 ], [ %.054, %198 ], [ %.054, %197 ], [ %.054, %195 ], [ %.054, %180 ], [ %.054, %170 ], [ %.054, %167 ], [ %.054, %166 ], [ %.054, %163 ], [ %.054, %162 ], [ %.054, %152 ], [ %.054, %142 ], [ %.054, %141 ], [ %.054, %139 ], [ %.054, %126 ], [ %.054, %116 ], [ %.054, %115 ], [ %.054, %114 ], [ %.054, %104 ], [ %.054, %94 ], [ %.054, %93 ], [ %.054, %82 ], [ %.054, %72 ], [ %.054, %71 ], [ %.054, %56 ], [ %.054, %46 ], [ %.054, %43 ], [ %.054, %42 ], [ %.054, %41 ], [ %.054, %36 ], [ %.054, %33 ], [ %.054, %32 ], [ %.054, %30 ], [ %.054, %19 ], [ %.054, %9 ]
  %.052.be = phi i32 [ %.052, %8 ], [ %.052, %440 ], [ %.052, %439 ], [ %.052, %438 ], [ %.052, %436 ], [ %.052, %435 ], [ %.052, %434 ], [ %.052, %433 ], [ %.052, %431 ], [ %.052, %430 ], [ %.052, %429 ], [ %.052, %426 ], [ %.052, %425 ], [ %.052, %423 ], [ %.052, %417 ], [ %.052, %416 ], [ %.052, %405 ], [ %.052, %395 ], [ %.052, %394 ], [ %.052, %393 ], [ %.052, %382 ], [ %.052, %372 ], [ %.052, %371 ], [ %.052, %369 ], [ %.052, %367 ], [ %.052, %356 ], [ %.052, %346 ], [ %.052, %345 ], [ %.052, %335 ], [ %.052, %325 ], [ %.052, %324 ], [ %.052, %323 ], [ %.052, %313 ], [ %.052, %303 ], [ %.052, %296 ], [ %.052, %293 ], [ %.052, %290 ], [ %.052, %287 ], [ %281, %276 ], [ %.052, %273 ], [ %.052, %272 ], [ %.052, %262 ], [ %.052, %252 ], [ %.052, %249 ], [ %.052, %248 ], [ %.052, %238 ], [ %.052, %228 ], [ %.052, %226 ], [ %.052, %225 ], [ %.052, %224 ], [ %.052, %221 ], [ %.052, %220 ], [ %.052, %209 ], [ %.052, %199 ], [ %.052, %198 ], [ %.052, %197 ], [ %.052, %195 ], [ %.052, %180 ], [ %.052, %170 ], [ %.052, %167 ], [ %.052, %166 ], [ %.052, %163 ], [ %.052, %162 ], [ %.052, %152 ], [ %.052, %142 ], [ %.052, %141 ], [ %.052, %139 ], [ %.052, %126 ], [ %.052, %116 ], [ %.052, %115 ], [ %.052, %114 ], [ %.052, %104 ], [ %.052, %94 ], [ %.052, %93 ], [ %.052, %82 ], [ %.052, %72 ], [ %.052, %71 ], [ %.052, %56 ], [ %.052, %46 ], [ %.052, %43 ], [ %.052, %42 ], [ %.052, %41 ], [ %.052, %36 ], [ %.052, %33 ], [ %.052, %32 ], [ %.052, %30 ], [ %.052, %19 ], [ %.052, %9 ]
  %.050.be = phi i32 [ %.050, %8 ], [ %.050, %440 ], [ %.050, %439 ], [ %.050, %438 ], [ %.050, %436 ], [ %.050, %435 ], [ %.050, %434 ], [ %.050, %433 ], [ %.050, %431 ], [ %.050, %430 ], [ %.050, %429 ], [ %.050, %426 ], [ %.050, %425 ], [ %.050, %423 ], [ %.050, %417 ], [ %.050, %416 ], [ %.050, %405 ], [ %.050, %395 ], [ %.050, %394 ], [ %.050, %393 ], [ %.050, %382 ], [ %.050, %372 ], [ %.050, %371 ], [ %.050, %369 ], [ %.050, %367 ], [ %.050, %356 ], [ %.050, %346 ], [ %.050, %345 ], [ %.050, %335 ], [ %.050, %325 ], [ %.050, %324 ], [ %.050, %323 ], [ %.050, %313 ], [ %.050, %303 ], [ %.050, %296 ], [ %.050, %293 ], [ %.050, %290 ], [ %.050, %287 ], [ %284, %276 ], [ %.050, %273 ], [ %.050, %272 ], [ %.050, %262 ], [ %.050, %252 ], [ %.050, %249 ], [ %.050, %248 ], [ %.050, %238 ], [ %.050, %228 ], [ %.050, %226 ], [ %.050, %225 ], [ %.050, %224 ], [ %.050, %221 ], [ %.050, %220 ], [ %.050, %209 ], [ %.050, %199 ], [ %.050, %198 ], [ %.050, %197 ], [ %.050, %195 ], [ %.050, %180 ], [ %.050, %170 ], [ %.050, %167 ], [ %.050, %166 ], [ %.050, %163 ], [ %.050, %162 ], [ %.050, %152 ], [ %.050, %142 ], [ %.050, %141 ], [ %.050, %139 ], [ %.050, %126 ], [ %.050, %116 ], [ %.050, %115 ], [ %.050, %114 ], [ %.050, %104 ], [ %.050, %94 ], [ %.050, %93 ], [ %.050, %82 ], [ %.050, %72 ], [ %.050, %71 ], [ %.050, %56 ], [ %.050, %46 ], [ %.050, %43 ], [ %.050, %42 ], [ %.050, %41 ], [ %.050, %36 ], [ %.050, %33 ], [ %.050, %32 ], [ %.050, %30 ], [ %.050, %19 ], [ %.050, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ 1976667724, %440 ], [ 459368752, %439 ], [ -1642997990, %438 ], [ -851364733, %436 ], [ 1476141221, %435 ], [ 845982847, %434 ], [ 372098060, %433 ], [ -1954248313, %431 ], [ 975249416, %430 ], [ 2003137017, %429 ], [ -995220976, %426 ], [ -710311349, %425 ], [ 1463477350, %423 ], [ -1759011690, %417 ], [ 1610215259, %416 ], [ %414, %405 ], [ %404, %395 ], [ 1220714556, %394 ], [ 3272206, %393 ], [ %392, %382 ], [ %381, %372 ], [ -2111030080, %371 ], [ -1737798845, %369 ], [ %368, %367 ], [ %366, %356 ], [ %355, %346 ], [ 672878286, %345 ], [ %344, %335 ], [ %334, %325 ], [ -116515844, %324 ], [ -2014813840, %323 ], [ %322, %313 ], [ %312, %303 ], [ %302, %296 ], [ %295, %293 ], [ %292, %290 ], [ %289, %287 ], [ %286, %276 ], [ %275, %273 ], [ 672878286, %272 ], [ %271, %262 ], [ %261, %252 ], [ %251, %249 ], [ 3272206, %248 ], [ %247, %238 ], [ %237, %228 ], [ -1079676588, %226 ], [ -1714555832, %225 ], [ 1209322650, %224 ], [ %223, %221 ], [ -1144795952, %220 ], [ %219, %209 ], [ %208, %199 ], [ -1988767775, %198 ], [ -1239910229, %197 ], [ %196, %195 ], [ %194, %180 ], [ %179, %170 ], [ %169, %167 ], [ -1144795952, %166 ], [ %165, %163 ], [ -1079676588, %162 ], [ %161, %152 ], [ %151, %142 ], [ 1447200597, %141 ], [ %140, %139 ], [ %138, %126 ], [ %125, %116 ], [ 1146736505, %115 ], [ 195916188, %114 ], [ %113, %104 ], [ %103, %94 ], [ 655563701, %93 ], [ %92, %82 ], [ %81, %72 ], [ -1540963350, %71 ], [ %70, %56 ], [ %55, %46 ], [ %45, %43 ], [ 655563701, %42 ], [ -2041660352, %41 ], [ %40, %36 ], [ %35, %33 ], [ 1146736505, %32 ], [ %31, %30 ], [ %29, %19 ], [ %18, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i32, i32* @x.1, align 4
  %11 = load i32, i32* @y.2, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %16, %15
  %18 = select i1 %17, i32 1610215259, i32 1239604500
  br label %.backedge

19:                                               ; preds = %8
  %20 = icmp ne i8* %.066, null
  store i1 %20, i1* %4, align 1
  %21 = load i32, i32* @x.1, align 4
  %22 = load i32, i32* @y.2, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 719372058, i32 1239604500
  br label %.backedge

30:                                               ; preds = %8
  %.0..0..0.46 = load volatile i1, i1* %4, align 1
  %31 = select i1 %.0..0..0.46, i32 72379697, i32 1447200597
  br label %.backedge

32:                                               ; preds = %8
  br label %.backedge

33:                                               ; preds = %8
  %34 = icmp slt i32 %.064, 8
  %35 = select i1 %34, i32 491990572, i32 -2041660352
  br label %.backedge

36:                                               ; preds = %8
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %38 = call i8* @fgets(i8* nonnull %7, i32 256, %struct._IO_FILE* %37)
  %39 = icmp eq i8* %38, null
  %40 = select i1 %39, i32 -1231061834, i32 1257286646
  br label %.backedge

41:                                               ; preds = %8
  br label %.backedge

42:                                               ; preds = %8
  br label %.backedge

43:                                               ; preds = %8
  %44 = icmp slt i32 %.062, 8
  %45 = select i1 %44, i32 -1174332526, i32 695206141
  br label %.backedge

46:                                               ; preds = %8
  %47 = load i32, i32* @x.1, align 4
  %48 = load i32, i32* @y.2, align 4
  %49 = add i32 %47, -1
  %50 = mul i32 %49, %47
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %53, %52
  %55 = select i1 %54, i32 -1759011690, i32 -1377414041
  br label %.backedge

56:                                               ; preds = %8
  %57 = sext i32 %.062 to i64
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = sext i32 %.064 to i64
  %61 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %6, i64 0, i64 %60, i64 %57
  store i8 %59, i8* %61, align 1
  %62 = load i32, i32* @x.1, align 4
  %63 = load i32, i32* @y.2, align 4
  %64 = add i32 %62, -1
  %65 = mul i32 %64, %62
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %68, %67
  %70 = select i1 %69, i32 -1153554141, i32 -1377414041
  br label %.backedge

71:                                               ; preds = %8
  br label %.backedge

72:                                               ; preds = %8
  %73 = load i32, i32* @x.1, align 4
  %74 = load i32, i32* @y.2, align 4
  %75 = add i32 %73, -1
  %76 = mul i32 %75, %73
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %79, %78
  %81 = select i1 %80, i32 1463477350, i32 219573381
  br label %.backedge

82:                                               ; preds = %8
  %83 = add i32 %.062, 1
  %84 = load i32, i32* @x.1, align 4
  %85 = load i32, i32* @y.2, align 4
  %86 = add i32 %84, -1
  %87 = mul i32 %86, %84
  %88 = and i32 %87, 1
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %90, %89
  %92 = select i1 %91, i32 2084135809, i32 219573381
  br label %.backedge

93:                                               ; preds = %8
  br label %.backedge

94:                                               ; preds = %8
  %95 = load i32, i32* @x.1, align 4
  %96 = load i32, i32* @y.2, align 4
  %97 = add i32 %95, -1
  %98 = mul i32 %97, %95
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %101, %100
  %103 = select i1 %102, i32 -710311349, i32 -1824450883
  br label %.backedge

104:                                              ; preds = %8
  %105 = load i32, i32* @x.1, align 4
  %106 = load i32, i32* @y.2, align 4
  %107 = add i32 %105, -1
  %108 = mul i32 %107, %105
  %109 = and i32 %108, 1
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %111, %110
  %113 = select i1 %112, i32 1249493762, i32 -1824450883
  br label %.backedge

114:                                              ; preds = %8
  br label %.backedge

115:                                              ; preds = %8
  %.neg70 = add i32 %.064, 1
  br label %.backedge

116:                                              ; preds = %8
  %117 = load i32, i32* @x.1, align 4
  %118 = load i32, i32* @y.2, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 -995220976, i32 1952648166
  br label %.backedge

126:                                              ; preds = %8
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %128 = call i8* @fgets(i8* nonnull %7, i32 256, %struct._IO_FILE* %127)
  %129 = icmp ne i32 %.064, 8
  store i1 %129, i1* %3, align 1
  %130 = load i32, i32* @x.1, align 4
  %131 = load i32, i32* @y.2, align 4
  %132 = add i32 %130, -1
  %133 = mul i32 %132, %130
  %134 = and i32 %133, 1
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %136, %135
  %138 = select i1 %137, i32 -1396588552, i32 1952648166
  br label %.backedge

139:                                              ; preds = %8
  %.0..0..0.47 = load volatile i1, i1* %3, align 1
  %140 = select i1 %.0..0..0.47, i32 1510758065, i32 -1056305332
  br label %.backedge

141:                                              ; preds = %8
  br label %.backedge

142:                                              ; preds = %8
  %143 = load i32, i32* @x.1, align 4
  %144 = load i32, i32* @y.2, align 4
  %145 = add i32 %143, -1
  %146 = mul i32 %145, %143
  %147 = and i32 %146, 1
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %149, %148
  %151 = select i1 %150, i32 2003137017, i32 603050709
  br label %.backedge

152:                                              ; preds = %8
  %153 = load i32, i32* @x.1, align 4
  %154 = load i32, i32* @y.2, align 4
  %155 = add i32 %153, -1
  %156 = mul i32 %155, %153
  %157 = and i32 %156, 1
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %159, %158
  %161 = select i1 %160, i32 -1010923633, i32 603050709
  br label %.backedge

162:                                              ; preds = %8
  br label %.backedge

163:                                              ; preds = %8
  %164 = icmp slt i32 %.058, 8
  %165 = select i1 %164, i32 742256669, i32 1209322650
  br label %.backedge

166:                                              ; preds = %8
  br label %.backedge

167:                                              ; preds = %8
  %168 = icmp slt i32 %.060, 8
  %169 = select i1 %168, i32 -148770902, i32 -1239910229
  br label %.backedge

170:                                              ; preds = %8
  %171 = load i32, i32* @x.1, align 4
  %172 = load i32, i32* @y.2, align 4
  %173 = add i32 %171, -1
  %174 = mul i32 %173, %171
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %177, %176
  %179 = select i1 %178, i32 975249416, i32 1389516067
  br label %.backedge

180:                                              ; preds = %8
  %181 = sext i32 %.058 to i64
  %182 = sext i32 %.060 to i64
  %183 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %6, i64 0, i64 %181, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = icmp eq i8 %184, 49
  store i1 %185, i1* %2, align 1
  %186 = load i32, i32* @x.1, align 4
  %187 = load i32, i32* @y.2, align 4
  %188 = add i32 %186, -1
  %189 = mul i32 %188, %186
  %190 = and i32 %189, 1
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %192, %191
  %194 = select i1 %193, i32 1900757791, i32 1389516067
  br label %.backedge

195:                                              ; preds = %8
  %.0..0..0.48 = load volatile i1, i1* %2, align 1
  %196 = select i1 %.0..0..0.48, i32 -177818354, i32 771678922
  br label %.backedge

197:                                              ; preds = %8
  br label %.backedge

198:                                              ; preds = %8
  br label %.backedge

199:                                              ; preds = %8
  %200 = load i32, i32* @x.1, align 4
  %201 = load i32, i32* @y.2, align 4
  %202 = add i32 %200, -1
  %203 = mul i32 %202, %200
  %204 = and i32 %203, 1
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %206, %205
  %208 = select i1 %207, i32 -1954248313, i32 68963595
  br label %.backedge

209:                                              ; preds = %8
  %210 = add i32 %.060, 1
  %211 = load i32, i32* @x.1, align 4
  %212 = load i32, i32* @y.2, align 4
  %213 = add i32 %211, -1
  %214 = mul i32 %213, %211
  %215 = and i32 %214, 1
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %217, %216
  %219 = select i1 %218, i32 40324547, i32 68963595
  br label %.backedge

220:                                              ; preds = %8
  br label %.backedge

221:                                              ; preds = %8
  %222 = and i8 %.056, 1
  %.not = icmp eq i8 %222, 0
  %223 = select i1 %.not, i32 402975982, i32 -2065075791
  br label %.backedge

224:                                              ; preds = %8
  br label %.backedge

225:                                              ; preds = %8
  br label %.backedge

226:                                              ; preds = %8
  %227 = add i32 %.058, 1
  br label %.backedge

228:                                              ; preds = %8
  %229 = load i32, i32* @x.1, align 4
  %230 = load i32, i32* @y.2, align 4
  %231 = add i32 %229, -1
  %232 = mul i32 %231, %229
  %233 = and i32 %232, 1
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %235, %234
  %237 = select i1 %236, i32 372098060, i32 -869270292
  br label %.backedge

238:                                              ; preds = %8
  %239 = load i32, i32* @x.1, align 4
  %240 = load i32, i32* @y.2, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 1348984547, i32 -869270292
  br label %.backedge

248:                                              ; preds = %8
  br label %.backedge

249:                                              ; preds = %8
  %250 = icmp slt i32 %.064, 7
  %251 = select i1 %250, i32 2032674885, i32 -1737798845
  br label %.backedge

252:                                              ; preds = %8
  %253 = load i32, i32* @x.1, align 4
  %254 = load i32, i32* @y.2, align 4
  %255 = add i32 %253, -1
  %256 = mul i32 %255, %253
  %257 = and i32 %256, 1
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %259, %258
  %261 = select i1 %260, i32 845982847, i32 480495150
  br label %.backedge

262:                                              ; preds = %8
  %263 = load i32, i32* @x.1, align 4
  %264 = load i32, i32* @y.2, align 4
  %265 = add i32 %263, -1
  %266 = mul i32 %265, %263
  %267 = and i32 %266, 1
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %269, %268
  %271 = select i1 %270, i32 -1162886164, i32 480495150
  br label %.backedge

272:                                              ; preds = %8
  br label %.backedge

273:                                              ; preds = %8
  %274 = icmp slt i32 %.054, 3
  %275 = select i1 %274, i32 84811189, i32 -2014813840
  br label %.backedge

276:                                              ; preds = %8
  %277 = sext i32 %.064 to i64
  %278 = sext i32 %.054 to i64
  %279 = getelementptr inbounds [7 x [3 x i32]], [7 x [3 x i32]]* @_ZZ4mainE2dx, i64 0, i64 %277, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = add i32 %280, %.060
  %282 = getelementptr inbounds [7 x [3 x i32]], [7 x [3 x i32]]* @_ZZ4mainE2dy, i64 0, i64 %277, i64 %278
  %283 = load i32, i32* %282, align 4
  %284 = add i32 %283, %.058
  %285 = icmp slt i32 %281, 0
  %286 = select i1 %285, i32 2036733596, i32 -473401199
  br label %.backedge

287:                                              ; preds = %8
  %288 = icmp slt i32 %.050, 0
  %289 = select i1 %288, i32 2036733596, i32 530772224
  br label %.backedge

290:                                              ; preds = %8
  %291 = icmp sgt i32 %.052, 7
  %292 = select i1 %291, i32 2036733596, i32 -483475604
  br label %.backedge

293:                                              ; preds = %8
  %294 = icmp sgt i32 %.050, 7
  %295 = select i1 %294, i32 2036733596, i32 2118769621
  br label %.backedge

296:                                              ; preds = %8
  %297 = sext i32 %.050 to i64
  %298 = sext i32 %.052 to i64
  %299 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %6, i64 0, i64 %297, i64 %298
  %300 = load i8, i8* %299, align 1
  %301 = icmp eq i8 %300, 48
  %302 = select i1 %301, i32 2036733596, i32 1963671659
  br label %.backedge

303:                                              ; preds = %8
  %304 = load i32, i32* @x.1, align 4
  %305 = load i32, i32* @y.2, align 4
  %306 = add i32 %304, -1
  %307 = mul i32 %306, %304
  %308 = and i32 %307, 1
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %310, %309
  %312 = select i1 %311, i32 1476141221, i32 2065075666
  br label %.backedge

313:                                              ; preds = %8
  %314 = load i32, i32* @x.1, align 4
  %315 = load i32, i32* @y.2, align 4
  %316 = add i32 %314, -1
  %317 = mul i32 %316, %314
  %318 = and i32 %317, 1
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %320, %319
  %322 = select i1 %321, i32 -606045080, i32 2065075666
  br label %.backedge

323:                                              ; preds = %8
  br label %.backedge

324:                                              ; preds = %8
  br label %.backedge

325:                                              ; preds = %8
  %326 = load i32, i32* @x.1, align 4
  %327 = load i32, i32* @y.2, align 4
  %328 = add i32 %326, -1
  %329 = mul i32 %328, %326
  %330 = and i32 %329, 1
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %332, %331
  %334 = select i1 %333, i32 -851364733, i32 890853882
  br label %.backedge

335:                                              ; preds = %8
  %.neg69 = add i32 %.054, 1
  %336 = load i32, i32* @x.1, align 4
  %337 = load i32, i32* @y.2, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 43767683, i32 890853882
  br label %.backedge

345:                                              ; preds = %8
  br label %.backedge

346:                                              ; preds = %8
  %347 = load i32, i32* @x.1, align 4
  %348 = load i32, i32* @y.2, align 4
  %349 = add i32 %347, -1
  %350 = mul i32 %349, %347
  %351 = and i32 %350, 1
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %353, %352
  %355 = select i1 %354, i32 -1642997990, i32 -1318329075
  br label %.backedge

356:                                              ; preds = %8
  %357 = icmp eq i32 %.054, 3
  store i1 %357, i1* %1, align 1
  %358 = load i32, i32* @x.1, align 4
  %359 = load i32, i32* @y.2, align 4
  %360 = add i32 %358, -1
  %361 = mul i32 %360, %358
  %362 = and i32 %361, 1
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %364, %363
  %366 = select i1 %365, i32 923064305, i32 -1318329075
  br label %.backedge

367:                                              ; preds = %8
  %.0..0..0.49 = load volatile i1, i1* %1, align 1
  %368 = select i1 %.0..0..0.49, i32 1258487383, i32 -1870657897
  br label %.backedge

369:                                              ; preds = %8
  %.neg68 = add i32 %.064, 65
  %370 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %.neg68)
  br label %.backedge

371:                                              ; preds = %8
  br label %.backedge

372:                                              ; preds = %8
  %373 = load i32, i32* @x.1, align 4
  %374 = load i32, i32* @y.2, align 4
  %375 = add i32 %373, -1
  %376 = mul i32 %375, %373
  %377 = and i32 %376, 1
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %379, %378
  %381 = select i1 %380, i32 459368752, i32 -1898022951
  br label %.backedge

382:                                              ; preds = %8
  %383 = add i32 %.064, 1
  %384 = load i32, i32* @x.1, align 4
  %385 = load i32, i32* @y.2, align 4
  %386 = add i32 %384, -1
  %387 = mul i32 %386, %384
  %388 = and i32 %387, 1
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %390, %389
  %392 = select i1 %391, i32 -293316841, i32 -1898022951
  br label %.backedge

393:                                              ; preds = %8
  br label %.backedge

394:                                              ; preds = %8
  br label %.backedge

395:                                              ; preds = %8
  %396 = load i32, i32* @x.1, align 4
  %397 = load i32, i32* @y.2, align 4
  %398 = add i32 %396, -1
  %399 = mul i32 %398, %396
  %400 = and i32 %399, 1
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %402, %401
  %404 = select i1 %403, i32 1976667724, i32 -2074266698
  br label %.backedge

405:                                              ; preds = %8
  %406 = load i32, i32* @x.1, align 4
  %407 = load i32, i32* @y.2, align 4
  %408 = add i32 %406, -1
  %409 = mul i32 %408, %406
  %410 = and i32 %409, 1
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %412, %411
  %414 = select i1 %413, i32 961588045, i32 -2074266698
  br label %.backedge

415:                                              ; preds = %8
  ret i32 0

416:                                              ; preds = %8
  br label %.backedge

417:                                              ; preds = %8
  %418 = sext i32 %.062 to i64
  %419 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %418
  %420 = load i8, i8* %419, align 1
  %421 = sext i32 %.064 to i64
  %422 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %6, i64 0, i64 %421, i64 %418
  store i8 %420, i8* %422, align 1
  br label %.backedge

423:                                              ; preds = %8
  %424 = add i32 %.062, 1
  br label %.backedge

425:                                              ; preds = %8
  br label %.backedge

426:                                              ; preds = %8
  %427 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %428 = call i8* @fgets(i8* nonnull %7, i32 256, %struct._IO_FILE* %427)
  br label %.backedge

429:                                              ; preds = %8
  br label %.backedge

430:                                              ; preds = %8
  br label %.backedge

431:                                              ; preds = %8
  %432 = add i32 %.060, 1
  br label %.backedge

433:                                              ; preds = %8
  br label %.backedge

434:                                              ; preds = %8
  br label %.backedge

435:                                              ; preds = %8
  br label %.backedge

436:                                              ; preds = %8
  %437 = add i32 %.054, 1
  br label %.backedge

438:                                              ; preds = %8
  br label %.backedge

439:                                              ; preds = %8
  %.neg = add i32 %.064, 1
  br label %.backedge

440:                                              ; preds = %8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i8* @fgets(i8* noundef, i32 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s906077024.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
