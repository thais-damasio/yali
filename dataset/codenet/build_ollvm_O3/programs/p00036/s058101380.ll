; ModuleID = 'build_ollvm/programs/p00036/s058101380.ll'
source_filename = "Project_CodeNet_C++1400/p00036/s058101380.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt4fillIPccEvT_S1_RKT0_ = comdat any

$_ZSt8__fill_aIcEN9__gnu_cxx11__enable_ifIXsr9__is_byteIT_EE7__valueEvE6__typeEPS2_S5_RKS2_ = comdat any

$_ZSt12__niter_baseIPcENSt11_Niter_baseIT_E13iterator_typeES2_ = comdat any

$_ZNSt10_Iter_baseIPcLb0EE7_S_baseES0_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@dx = local_unnamed_addr global [7 x [3 x i32]] [[3 x i32] [i32 1, i32 1, i32 0], [3 x i32] zeroinitializer, [3 x i32] [i32 1, i32 2, i32 3], [3 x i32] [i32 0, i32 -1, i32 -1], [3 x i32] [i32 1, i32 1, i32 2], [3 x i32] [i32 0, i32 1, i32 1], [3 x i32] [i32 1, i32 0, i32 -1]], align 16
@dy = local_unnamed_addr global [7 x [3 x i32]] [[3 x i32] [i32 0, i32 -1, i32 -1], [3 x i32] [i32 -1, i32 -2, i32 -3], [3 x i32] zeroinitializer, [3 x i32] [i32 -1, i32 -1, i32 -2], [3 x i32] [i32 0, i32 -1, i32 -1], [3 x i32] [i32 -1, i32 -1, i32 -2], [3 x i32] [i32 0, i32 -1, i32 -1]], align 16
@field = global [10 x [10 x i8]] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c"%c \00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s058101380.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i8, align 1
  br label %5

5:                                                ; preds = %.backedge, %0
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i32 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.054 = phi i32 [ undef, %0 ], [ %.054.be, %.backedge ]
  %.052 = phi i32 [ undef, %0 ], [ %.052.be, %.backedge ]
  %.050 = phi i32 [ undef, %0 ], [ %.050.be, %.backedge ]
  %.048 = phi i32 [ undef, %0 ], [ %.048.be, %.backedge ]
  %.046 = phi i32 [ undef, %0 ], [ %.046.be, %.backedge ]
  %.044 = phi i32 [ undef, %0 ], [ %.044.be, %.backedge ]
  %.0 = phi i32 [ 645312096, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 645312096, label %6
    i32 1279544096, label %7
    i32 2026016373, label %10
    i32 1902301201, label %14
    i32 1238694890, label %16
    i32 -1284201605, label %19
    i32 615232342, label %29
    i32 1538002951, label %39
    i32 184714579, label %40
    i32 -1609979062, label %50
    i32 -516773614, label %60
    i32 1261958416, label %61
    i32 -253500832, label %71
    i32 1068604877, label %82
    i32 -1341406403, label %84
    i32 -2077657232, label %94
    i32 1904265964, label %107
    i32 -605396229, label %108
    i32 -1736941587, label %118
    i32 387771960, label %129
    i32 812930062, label %130
    i32 1694193511, label %131
    i32 1966253035, label %134
    i32 -1181229403, label %135
    i32 1362348539, label %138
    i32 39394768, label %143
    i32 -245887139, label %145
    i32 -219055961, label %155
    i32 -2078112332, label %165
    i32 1586751185, label %166
    i32 -774610017, label %168
    i32 1821116674, label %178
    i32 -204997894, label %188
    i32 -1953301299, label %189
    i32 -1784765420, label %192
    i32 -811424122, label %202
    i32 479866051, label %212
    i32 1567907483, label %213
    i32 -405964802, label %216
    i32 -27764371, label %226
    i32 1768350551, label %241
    i32 437815015, label %243
    i32 -1437148301, label %244
    i32 -2105046151, label %247
    i32 -338110469, label %257
    i32 -145353967, label %267
    i32 891234017, label %268
    i32 -642283822, label %271
    i32 784786282, label %286
    i32 -1332958140, label %287
    i32 -1788756111, label %288
    i32 -2007142618, label %298
    i32 -2085425723, label %309
    i32 -1620400711, label %310
    i32 1764138185, label %320
    i32 -766812475, label %332
    i32 -1993334527, label %333
    i32 758386460, label %343
    i32 2122908215, label %353
    i32 -143014112, label %354
    i32 1065445729, label %364
    i32 -1329953148, label %375
    i32 -1467020585, label %376
    i32 -646470424, label %377
    i32 -2049446118, label %387
    i32 231514565, label %397
    i32 705655848, label %398
    i32 859151335, label %408
    i32 1393528777, label %419
    i32 -1252188470, label %420
    i32 212495732, label %430
    i32 -661119470, label %440
    i32 1769669136, label %441
    i32 827624882, label %443
    i32 -1125035789, label %453
    i32 709953861, label %463
    i32 1884485137, label %464
    i32 1468091037, label %465
    i32 -1581682483, label %475
    i32 -538819323, label %485
    i32 331744900, label %486
    i32 1803856320, label %487
    i32 -1384523527, label %488
    i32 1428880420, label %489
    i32 -1447955257, label %493
    i32 -1230502533, label %495
    i32 235047713, label %496
    i32 607088269, label %497
    i32 -944561561, label %498
    i32 -281762114, label %499
    i32 -2023188630, label %500
    i32 -285054274, label %502
    i32 380346208, label %505
    i32 752134514, label %506
    i32 -938759289, label %508
    i32 -1935663509, label %509
    i32 -613449532, label %511
    i32 -1168664090, label %512
    i32 -300517222, label %513
  ]

.backedge:                                        ; preds = %5, %513, %512, %511, %509, %508, %506, %505, %502, %500, %499, %498, %497, %496, %495, %493, %489, %488, %487, %486, %475, %465, %464, %463, %453, %443, %441, %440, %430, %420, %419, %408, %398, %397, %387, %377, %376, %375, %364, %354, %353, %343, %333, %332, %320, %310, %309, %298, %288, %287, %286, %271, %268, %267, %257, %247, %244, %243, %241, %226, %216, %213, %212, %202, %192, %189, %188, %178, %168, %166, %165, %155, %145, %143, %138, %135, %134, %131, %130, %129, %118, %108, %107, %94, %84, %82, %71, %61, %60, %50, %40, %39, %29, %19, %16, %14, %10, %7, %6
  %.058.be = phi i32 [ %.058, %5 ], [ %.058, %513 ], [ %.058, %512 ], [ %.058, %511 ], [ %.058, %509 ], [ %.058, %508 ], [ %.058, %506 ], [ %.058, %505 ], [ %.058, %502 ], [ %.058, %500 ], [ %.058, %499 ], [ %.058, %498 ], [ %.058, %497 ], [ %.058, %496 ], [ %.058, %495 ], [ %.058, %493 ], [ %.058, %489 ], [ %.058, %488 ], [ %.058, %487 ], [ %.058, %486 ], [ %.058, %475 ], [ %.058, %465 ], [ %.058, %464 ], [ %.058, %463 ], [ %.058, %453 ], [ %.058, %443 ], [ %.058, %441 ], [ %.058, %440 ], [ %.058, %430 ], [ %.058, %420 ], [ %.058, %419 ], [ %.058, %408 ], [ %.058, %398 ], [ %.058, %397 ], [ %.058, %387 ], [ %.058, %377 ], [ %.058, %376 ], [ %.058, %375 ], [ %.058, %364 ], [ %.058, %354 ], [ %.058, %353 ], [ %.058, %343 ], [ %.058, %333 ], [ %.058, %332 ], [ %.058, %320 ], [ %.058, %310 ], [ %.058, %309 ], [ %.058, %298 ], [ %.058, %288 ], [ %.058, %287 ], [ %.058, %286 ], [ %.058, %271 ], [ %.058, %268 ], [ %.058, %267 ], [ %.058, %257 ], [ %.058, %247 ], [ %.058, %244 ], [ %.058, %243 ], [ %.058, %241 ], [ %.058, %226 ], [ %.058, %216 ], [ %.058, %213 ], [ %.058, %212 ], [ %.058, %202 ], [ %.058, %192 ], [ %.058, %189 ], [ %.058, %188 ], [ %.058, %178 ], [ %.058, %168 ], [ %.058, %166 ], [ %.058, %165 ], [ %.058, %155 ], [ %.058, %145 ], [ %.058, %143 ], [ %.058, %138 ], [ %.058, %135 ], [ %.058, %134 ], [ %.058, %131 ], [ %.058, %130 ], [ %.058, %129 ], [ %.058, %118 ], [ %.058, %108 ], [ %.058, %107 ], [ %.058, %94 ], [ %.058, %84 ], [ %.058, %82 ], [ %.058, %71 ], [ %.058, %61 ], [ %.058, %60 ], [ %.058, %50 ], [ %.058, %40 ], [ %.058, %39 ], [ %.058, %29 ], [ %.058, %19 ], [ %.058, %16 ], [ %15, %14 ], [ %.058, %10 ], [ %.058, %7 ], [ 0, %6 ]
  %.056.be = phi i32 [ %.056, %5 ], [ %.056, %513 ], [ %.056, %512 ], [ %.056, %511 ], [ %.056, %509 ], [ %.056, %508 ], [ %.056, %506 ], [ %.056, %505 ], [ %.056, %502 ], [ %.056, %500 ], [ %.056, %499 ], [ %.056, %498 ], [ %.056, %497 ], [ %.056, %496 ], [ %.056, %495 ], [ %494, %493 ], [ %.056, %489 ], [ %.056, %488 ], [ 2, %487 ], [ %.056, %486 ], [ %.056, %475 ], [ %.056, %465 ], [ %.056, %464 ], [ %.056, %463 ], [ %.056, %453 ], [ %.056, %443 ], [ %.056, %441 ], [ %.056, %440 ], [ %.056, %430 ], [ %.056, %420 ], [ %.056, %419 ], [ %.056, %408 ], [ %.056, %398 ], [ %.056, %397 ], [ %.056, %387 ], [ %.056, %377 ], [ %.056, %376 ], [ %.056, %375 ], [ %.056, %364 ], [ %.056, %354 ], [ %.056, %353 ], [ %.056, %343 ], [ %.056, %333 ], [ %.056, %332 ], [ %.056, %320 ], [ %.056, %310 ], [ %.056, %309 ], [ %.056, %298 ], [ %.056, %288 ], [ %.056, %287 ], [ %.056, %286 ], [ %.056, %271 ], [ %.056, %268 ], [ %.056, %267 ], [ %.056, %257 ], [ %.056, %247 ], [ %.056, %244 ], [ %.056, %243 ], [ %.056, %241 ], [ %.056, %226 ], [ %.056, %216 ], [ %.056, %213 ], [ %.056, %212 ], [ %.056, %202 ], [ %.056, %192 ], [ %.056, %189 ], [ %.056, %188 ], [ %.056, %178 ], [ %.056, %168 ], [ %.056, %166 ], [ %.056, %165 ], [ %.056, %155 ], [ %.056, %145 ], [ %.056, %143 ], [ %.056, %138 ], [ %.056, %135 ], [ %.056, %134 ], [ %.056, %131 ], [ %.056, %130 ], [ %.056, %129 ], [ %119, %118 ], [ %.056, %108 ], [ %.056, %107 ], [ %.056, %94 ], [ %.056, %84 ], [ %.056, %82 ], [ %.056, %71 ], [ %.056, %61 ], [ %.056, %60 ], [ 2, %50 ], [ %.056, %40 ], [ %.056, %39 ], [ %.056, %29 ], [ %.056, %19 ], [ %.056, %16 ], [ %.056, %14 ], [ %.056, %10 ], [ %.056, %7 ], [ %.056, %6 ]
  %.054.be = phi i32 [ %.054, %5 ], [ %.054, %513 ], [ %.054, %512 ], [ %.054, %511 ], [ %.054, %509 ], [ %.054, %508 ], [ %.054, %506 ], [ %.054, %505 ], [ %.054, %502 ], [ %.054, %500 ], [ %.054, %499 ], [ %.054, %498 ], [ %.054, %497 ], [ %.054, %496 ], [ %.054, %495 ], [ %.054, %493 ], [ %.054, %489 ], [ %.054, %488 ], [ %.054, %487 ], [ %.054, %486 ], [ %.054, %475 ], [ %.054, %465 ], [ %.054, %464 ], [ %.054, %463 ], [ %.054, %453 ], [ %.054, %443 ], [ %.054, %441 ], [ %.054, %440 ], [ %.054, %430 ], [ %.054, %420 ], [ %.054, %419 ], [ %.054, %408 ], [ %.054, %398 ], [ %.054, %397 ], [ %.054, %387 ], [ %.054, %377 ], [ %.054, %376 ], [ %.054, %375 ], [ %.054, %364 ], [ %.054, %354 ], [ %.054, %353 ], [ %.054, %343 ], [ %.054, %333 ], [ %.054, %332 ], [ %.054, %320 ], [ %.054, %310 ], [ %.054, %309 ], [ %.054, %298 ], [ %.054, %288 ], [ %.054, %287 ], [ %.054, %286 ], [ %.054, %271 ], [ %.054, %268 ], [ %.054, %267 ], [ %.054, %257 ], [ %.054, %247 ], [ %.054, %244 ], [ %.054, %243 ], [ %.054, %241 ], [ %.054, %226 ], [ %.054, %216 ], [ %.054, %213 ], [ %.054, %212 ], [ %.054, %202 ], [ %.054, %192 ], [ %.054, %189 ], [ %.054, %188 ], [ %.054, %178 ], [ %.054, %168 ], [ %167, %166 ], [ %.054, %165 ], [ %.054, %155 ], [ %.054, %145 ], [ %.054, %143 ], [ %.054, %138 ], [ %.054, %135 ], [ %.054, %134 ], [ %.054, %131 ], [ 2, %130 ], [ %.054, %129 ], [ %.054, %118 ], [ %.054, %108 ], [ %.054, %107 ], [ %.054, %94 ], [ %.054, %84 ], [ %.054, %82 ], [ %.054, %71 ], [ %.054, %61 ], [ %.054, %60 ], [ %.054, %50 ], [ %.054, %40 ], [ %.054, %39 ], [ %.054, %29 ], [ %.054, %19 ], [ %.054, %16 ], [ %.054, %14 ], [ %.054, %10 ], [ %.054, %7 ], [ %.054, %6 ]
  %.052.be = phi i32 [ %.052, %5 ], [ %.052, %513 ], [ %.052, %512 ], [ %.052, %511 ], [ %.052, %509 ], [ %.052, %508 ], [ %.052, %506 ], [ %.052, %505 ], [ %.052, %502 ], [ %.052, %500 ], [ %.052, %499 ], [ %.052, %498 ], [ %.052, %497 ], [ %.052, %496 ], [ %.052, %495 ], [ %.052, %493 ], [ %.052, %489 ], [ %.052, %488 ], [ %.052, %487 ], [ %.052, %486 ], [ %.052, %475 ], [ %.052, %465 ], [ %.052, %464 ], [ %.052, %463 ], [ %.052, %453 ], [ %.052, %443 ], [ %.052, %441 ], [ %.052, %440 ], [ %.052, %430 ], [ %.052, %420 ], [ %.052, %419 ], [ %.052, %408 ], [ %.052, %398 ], [ %.052, %397 ], [ %.052, %387 ], [ %.052, %377 ], [ %.052, %376 ], [ %.052, %375 ], [ %.052, %364 ], [ %.052, %354 ], [ %.052, %353 ], [ %.052, %343 ], [ %.052, %333 ], [ %.052, %332 ], [ %.052, %320 ], [ %.052, %310 ], [ %.052, %309 ], [ %.052, %298 ], [ %.052, %288 ], [ %.052, %287 ], [ %.052, %286 ], [ %.052, %271 ], [ %.052, %268 ], [ %.052, %267 ], [ %.052, %257 ], [ %.052, %247 ], [ %.052, %244 ], [ %.052, %243 ], [ %.052, %241 ], [ %.052, %226 ], [ %.052, %216 ], [ %.052, %213 ], [ %.052, %212 ], [ %.052, %202 ], [ %.052, %192 ], [ %.052, %189 ], [ %.052, %188 ], [ %.052, %178 ], [ %.052, %168 ], [ %.052, %166 ], [ %.052, %165 ], [ %.052, %155 ], [ %.052, %145 ], [ %144, %143 ], [ %.052, %138 ], [ %.052, %135 ], [ 1, %134 ], [ %.052, %131 ], [ %.052, %130 ], [ %.052, %129 ], [ %.052, %118 ], [ %.052, %108 ], [ %.052, %107 ], [ %.052, %94 ], [ %.052, %84 ], [ %.052, %82 ], [ %.052, %71 ], [ %.052, %61 ], [ %.052, %60 ], [ %.052, %50 ], [ %.052, %40 ], [ %.052, %39 ], [ %.052, %29 ], [ %.052, %19 ], [ %.052, %16 ], [ %.052, %14 ], [ %.052, %10 ], [ %.052, %7 ], [ %.052, %6 ]
  %.050.be = phi i32 [ %.050, %5 ], [ %.050, %513 ], [ %.050, %512 ], [ %.050, %511 ], [ %.050, %509 ], [ %.050, %508 ], [ %.050, %506 ], [ %.050, %505 ], [ %.050, %502 ], [ %.050, %500 ], [ %.050, %499 ], [ %.050, %498 ], [ %.050, %497 ], [ 1, %496 ], [ %.050, %495 ], [ %.050, %493 ], [ %.050, %489 ], [ %.050, %488 ], [ %.050, %487 ], [ %.050, %486 ], [ %.050, %475 ], [ %.050, %465 ], [ %.050, %464 ], [ %.050, %463 ], [ %.050, %453 ], [ %.050, %443 ], [ %442, %441 ], [ %.050, %440 ], [ %.050, %430 ], [ %.050, %420 ], [ %.050, %419 ], [ %.050, %408 ], [ %.050, %398 ], [ %.050, %397 ], [ %.050, %387 ], [ %.050, %377 ], [ %.050, %376 ], [ %.050, %375 ], [ %.050, %364 ], [ %.050, %354 ], [ %.050, %353 ], [ %.050, %343 ], [ %.050, %333 ], [ %.050, %332 ], [ %.050, %320 ], [ %.050, %310 ], [ %.050, %309 ], [ %.050, %298 ], [ %.050, %288 ], [ %.050, %287 ], [ %.050, %286 ], [ %.050, %271 ], [ %.050, %268 ], [ %.050, %267 ], [ %.050, %257 ], [ %.050, %247 ], [ %.050, %244 ], [ %.050, %243 ], [ %.050, %241 ], [ %.050, %226 ], [ %.050, %216 ], [ %.050, %213 ], [ %.050, %212 ], [ %.050, %202 ], [ %.050, %192 ], [ %.050, %189 ], [ %.050, %188 ], [ 1, %178 ], [ %.050, %168 ], [ %.050, %166 ], [ %.050, %165 ], [ %.050, %155 ], [ %.050, %145 ], [ %.050, %143 ], [ %.050, %138 ], [ %.050, %135 ], [ %.050, %134 ], [ %.050, %131 ], [ %.050, %130 ], [ %.050, %129 ], [ %.050, %118 ], [ %.050, %108 ], [ %.050, %107 ], [ %.050, %94 ], [ %.050, %84 ], [ %.050, %82 ], [ %.050, %71 ], [ %.050, %61 ], [ %.050, %60 ], [ %.050, %50 ], [ %.050, %40 ], [ %.050, %39 ], [ %.050, %29 ], [ %.050, %19 ], [ %.050, %16 ], [ %.050, %14 ], [ %.050, %10 ], [ %.050, %7 ], [ %.050, %6 ]
  %.048.be = phi i32 [ %.048, %5 ], [ %.048, %513 ], [ %.048, %512 ], [ %.048, %511 ], [ %510, %509 ], [ %.048, %508 ], [ %.048, %506 ], [ %.048, %505 ], [ %.048, %502 ], [ %.048, %500 ], [ %.048, %499 ], [ %.048, %498 ], [ 1, %497 ], [ %.048, %496 ], [ %.048, %495 ], [ %.048, %493 ], [ %.048, %489 ], [ %.048, %488 ], [ %.048, %487 ], [ %.048, %486 ], [ %.048, %475 ], [ %.048, %465 ], [ %.048, %464 ], [ %.048, %463 ], [ %.048, %453 ], [ %.048, %443 ], [ %.048, %441 ], [ %.048, %440 ], [ %.048, %430 ], [ %.048, %420 ], [ %.048, %419 ], [ %409, %408 ], [ %.048, %398 ], [ %.048, %397 ], [ %.048, %387 ], [ %.048, %377 ], [ %.048, %376 ], [ %.048, %375 ], [ %.048, %364 ], [ %.048, %354 ], [ %.048, %353 ], [ %.048, %343 ], [ %.048, %333 ], [ %.048, %332 ], [ %.048, %320 ], [ %.048, %310 ], [ %.048, %309 ], [ %.048, %298 ], [ %.048, %288 ], [ %.048, %287 ], [ %.048, %286 ], [ %.048, %271 ], [ %.048, %268 ], [ %.048, %267 ], [ %.048, %257 ], [ %.048, %247 ], [ %.048, %244 ], [ %.048, %243 ], [ %.048, %241 ], [ %.048, %226 ], [ %.048, %216 ], [ %.048, %213 ], [ %.048, %212 ], [ 1, %202 ], [ %.048, %192 ], [ %.048, %189 ], [ %.048, %188 ], [ %.048, %178 ], [ %.048, %168 ], [ %.048, %166 ], [ %.048, %165 ], [ %.048, %155 ], [ %.048, %145 ], [ %.048, %143 ], [ %.048, %138 ], [ %.048, %135 ], [ %.048, %134 ], [ %.048, %131 ], [ %.048, %130 ], [ %.048, %129 ], [ %.048, %118 ], [ %.048, %108 ], [ %.048, %107 ], [ %.048, %94 ], [ %.048, %84 ], [ %.048, %82 ], [ %.048, %71 ], [ %.048, %61 ], [ %.048, %60 ], [ %.048, %50 ], [ %.048, %40 ], [ %.048, %39 ], [ %.048, %29 ], [ %.048, %19 ], [ %.048, %16 ], [ %.048, %14 ], [ %.048, %10 ], [ %.048, %7 ], [ %.048, %6 ]
  %.046.be = phi i32 [ %.046, %5 ], [ %.046, %513 ], [ %.046, %512 ], [ %.046, %511 ], [ %.046, %509 ], [ %.046, %508 ], [ %507, %506 ], [ %.046, %505 ], [ %.046, %502 ], [ %.046, %500 ], [ %.046, %499 ], [ %.046, %498 ], [ %.046, %497 ], [ %.046, %496 ], [ %.046, %495 ], [ %.046, %493 ], [ %.046, %489 ], [ %.046, %488 ], [ %.046, %487 ], [ %.046, %486 ], [ %.046, %475 ], [ %.046, %465 ], [ %.046, %464 ], [ %.046, %463 ], [ %.046, %453 ], [ %.046, %443 ], [ %.046, %441 ], [ %.046, %440 ], [ %.046, %430 ], [ %.046, %420 ], [ %.046, %419 ], [ %.046, %408 ], [ %.046, %398 ], [ %.046, %397 ], [ %.046, %387 ], [ %.046, %377 ], [ %.046, %376 ], [ %.046, %375 ], [ %365, %364 ], [ %.046, %354 ], [ %.046, %353 ], [ %.046, %343 ], [ %.046, %333 ], [ %.046, %332 ], [ %.046, %320 ], [ %.046, %310 ], [ %.046, %309 ], [ %.046, %298 ], [ %.046, %288 ], [ %.046, %287 ], [ %.046, %286 ], [ %.046, %271 ], [ %.046, %268 ], [ %.046, %267 ], [ %.046, %257 ], [ %.046, %247 ], [ %.046, %244 ], [ 0, %243 ], [ %.046, %241 ], [ %.046, %226 ], [ %.046, %216 ], [ %.046, %213 ], [ %.046, %212 ], [ %.046, %202 ], [ %.046, %192 ], [ %.046, %189 ], [ %.046, %188 ], [ %.046, %178 ], [ %.046, %168 ], [ %.046, %166 ], [ %.046, %165 ], [ %.046, %155 ], [ %.046, %145 ], [ %.046, %143 ], [ %.046, %138 ], [ %.046, %135 ], [ %.046, %134 ], [ %.046, %131 ], [ %.046, %130 ], [ %.046, %129 ], [ %.046, %118 ], [ %.046, %108 ], [ %.046, %107 ], [ %.046, %94 ], [ %.046, %84 ], [ %.046, %82 ], [ %.046, %71 ], [ %.046, %61 ], [ %.046, %60 ], [ %.046, %50 ], [ %.046, %40 ], [ %.046, %39 ], [ %.046, %29 ], [ %.046, %19 ], [ %.046, %16 ], [ %.046, %14 ], [ %.046, %10 ], [ %.046, %7 ], [ %.046, %6 ]
  %.044.be = phi i32 [ %.044, %5 ], [ %.044, %513 ], [ %.044, %512 ], [ %.044, %511 ], [ %.044, %509 ], [ %.044, %508 ], [ %.044, %506 ], [ %.044, %505 ], [ %.044, %502 ], [ %501, %500 ], [ 0, %499 ], [ %.044, %498 ], [ %.044, %497 ], [ %.044, %496 ], [ %.044, %495 ], [ %.044, %493 ], [ %.044, %489 ], [ %.044, %488 ], [ %.044, %487 ], [ %.044, %486 ], [ %.044, %475 ], [ %.044, %465 ], [ %.044, %464 ], [ %.044, %463 ], [ %.044, %453 ], [ %.044, %443 ], [ %.044, %441 ], [ %.044, %440 ], [ %.044, %430 ], [ %.044, %420 ], [ %.044, %419 ], [ %.044, %408 ], [ %.044, %398 ], [ %.044, %397 ], [ %.044, %387 ], [ %.044, %377 ], [ %.044, %376 ], [ %.044, %375 ], [ %.044, %364 ], [ %.044, %354 ], [ %.044, %353 ], [ %.044, %343 ], [ %.044, %333 ], [ %.044, %332 ], [ %.044, %320 ], [ %.044, %310 ], [ %.044, %309 ], [ %299, %298 ], [ %.044, %288 ], [ %.044, %287 ], [ %.044, %286 ], [ %.044, %271 ], [ %.044, %268 ], [ %.044, %267 ], [ 0, %257 ], [ %.044, %247 ], [ %.044, %244 ], [ %.044, %243 ], [ %.044, %241 ], [ %.044, %226 ], [ %.044, %216 ], [ %.044, %213 ], [ %.044, %212 ], [ %.044, %202 ], [ %.044, %192 ], [ %.044, %189 ], [ %.044, %188 ], [ %.044, %178 ], [ %.044, %168 ], [ %.044, %166 ], [ %.044, %165 ], [ %.044, %155 ], [ %.044, %145 ], [ %.044, %143 ], [ %.044, %138 ], [ %.044, %135 ], [ %.044, %134 ], [ %.044, %131 ], [ %.044, %130 ], [ %.044, %129 ], [ %.044, %118 ], [ %.044, %108 ], [ %.044, %107 ], [ %.044, %94 ], [ %.044, %84 ], [ %.044, %82 ], [ %.044, %71 ], [ %.044, %61 ], [ %.044, %60 ], [ %.044, %50 ], [ %.044, %40 ], [ %.044, %39 ], [ %.044, %29 ], [ %.044, %19 ], [ %.044, %16 ], [ %.044, %14 ], [ %.044, %10 ], [ %.044, %7 ], [ %.044, %6 ]
  %.0.be = phi i32 [ %.0, %5 ], [ -1581682483, %513 ], [ -1125035789, %512 ], [ 212495732, %511 ], [ 859151335, %509 ], [ -2049446118, %508 ], [ 1065445729, %506 ], [ 758386460, %505 ], [ 1764138185, %502 ], [ -2007142618, %500 ], [ -338110469, %499 ], [ -27764371, %498 ], [ -811424122, %497 ], [ 1821116674, %496 ], [ -219055961, %495 ], [ -1736941587, %493 ], [ -2077657232, %489 ], [ -253500832, %488 ], [ -1609979062, %487 ], [ 615232342, %486 ], [ %484, %475 ], [ %474, %465 ], [ 645312096, %464 ], [ 1884485137, %463 ], [ %462, %453 ], [ %452, %443 ], [ -1953301299, %441 ], [ 1769669136, %440 ], [ %439, %430 ], [ %429, %420 ], [ 1567907483, %419 ], [ %418, %408 ], [ %407, %398 ], [ 705655848, %397 ], [ %396, %387 ], [ %386, %377 ], [ -646470424, %376 ], [ -1437148301, %375 ], [ %374, %364 ], [ %363, %354 ], [ -143014112, %353 ], [ %352, %343 ], [ %342, %333 ], [ 1884485137, %332 ], [ %331, %320 ], [ %319, %310 ], [ 891234017, %309 ], [ %308, %298 ], [ %297, %288 ], [ -1788756111, %287 ], [ -1993334527, %286 ], [ %285, %271 ], [ %270, %268 ], [ 891234017, %267 ], [ %266, %257 ], [ %256, %247 ], [ %246, %244 ], [ -1437148301, %243 ], [ %242, %241 ], [ %240, %226 ], [ %225, %216 ], [ %215, %213 ], [ 1567907483, %212 ], [ %211, %202 ], [ %201, %192 ], [ %191, %189 ], [ -1953301299, %188 ], [ %187, %178 ], [ %177, %168 ], [ 1694193511, %166 ], [ 1586751185, %165 ], [ %164, %155 ], [ %154, %145 ], [ -1181229403, %143 ], [ 39394768, %138 ], [ %137, %135 ], [ -1181229403, %134 ], [ %133, %131 ], [ 1694193511, %130 ], [ 1261958416, %129 ], [ %128, %118 ], [ %117, %108 ], [ -605396229, %107 ], [ %106, %94 ], [ %93, %84 ], [ %83, %82 ], [ %81, %71 ], [ %70, %61 ], [ 1261958416, %60 ], [ %59, %50 ], [ %49, %40 ], [ 1468091037, %39 ], [ %38, %29 ], [ %28, %19 ], [ %18, %16 ], [ 1279544096, %14 ], [ 1902301201, %10 ], [ %9, %7 ], [ 1279544096, %6 ]
  br label %5

6:                                                ; preds = %5
  br label %.backedge

7:                                                ; preds = %5
  %8 = icmp slt i32 %.058, 10
  %9 = select i1 %8, i32 2026016373, i32 1238694890
  br label %.backedge

10:                                               ; preds = %5
  %11 = sext i32 %.058 to i64
  %12 = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @field, i64 0, i64 %11, i64 0
  %13 = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @field, i64 0, i64 %11, i64 10
  store i8 48, i8* %4, align 1
  call void @_ZSt4fillIPccEvT_S1_RKT0_(i8* nonnull %12, i8* nonnull %13, i8* nonnull dereferenceable(1) %4)
  br label %.backedge

14:                                               ; preds = %5
  %15 = add i32 %.058, 1
  br label %.backedge

16:                                               ; preds = %5
  %17 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([10 x [10 x i8]], [10 x [10 x i8]]* @field, i64 0, i64 1, i64 1))
  %.not = icmp eq i32 %17, 1
  %18 = select i1 %.not, i32 184714579, i32 -1284201605
  br label %.backedge

19:                                               ; preds = %5
  %20 = load i32, i32* @x.2, align 4
  %21 = load i32, i32* @y.3, align 4
  %22 = add i32 %20, -1
  %23 = mul i32 %22, %20
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %26, %25
  %28 = select i1 %27, i32 615232342, i32 331744900
  br label %.backedge

29:                                               ; preds = %5
  %30 = load i32, i32* @x.2, align 4
  %31 = load i32, i32* @y.3, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 1538002951, i32 331744900
  br label %.backedge

39:                                               ; preds = %5
  br label %.backedge

40:                                               ; preds = %5
  %41 = load i32, i32* @x.2, align 4
  %42 = load i32, i32* @y.3, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 -1609979062, i32 1803856320
  br label %.backedge

50:                                               ; preds = %5
  %51 = load i32, i32* @x.2, align 4
  %52 = load i32, i32* @y.3, align 4
  %53 = add i32 %51, -1
  %54 = mul i32 %53, %51
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %57, %56
  %59 = select i1 %58, i32 -516773614, i32 1803856320
  br label %.backedge

60:                                               ; preds = %5
  br label %.backedge

61:                                               ; preds = %5
  %62 = load i32, i32* @x.2, align 4
  %63 = load i32, i32* @y.3, align 4
  %64 = add i32 %62, -1
  %65 = mul i32 %64, %62
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %68, %67
  %70 = select i1 %69, i32 -253500832, i32 -1384523527
  br label %.backedge

71:                                               ; preds = %5
  %72 = icmp slt i32 %.056, 9
  store i1 %72, i1* %3, align 1
  %73 = load i32, i32* @x.2, align 4
  %74 = load i32, i32* @y.3, align 4
  %75 = add i32 %73, -1
  %76 = mul i32 %75, %73
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %79, %78
  %81 = select i1 %80, i32 1068604877, i32 -1384523527
  br label %.backedge

82:                                               ; preds = %5
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %83 = select i1 %.0..0..0., i32 -1341406403, i32 812930062
  br label %.backedge

84:                                               ; preds = %5
  %85 = load i32, i32* @x.2, align 4
  %86 = load i32, i32* @y.3, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 -2077657232, i32 1428880420
  br label %.backedge

94:                                               ; preds = %5
  %95 = sext i32 %.056 to i64
  %96 = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @field, i64 0, i64 1, i64 %95
  %97 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* nonnull %96)
  %98 = load i32, i32* @x.2, align 4
  %99 = load i32, i32* @y.3, align 4
  %100 = add i32 %98, -1
  %101 = mul i32 %100, %98
  %102 = and i32 %101, 1
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %104, %103
  %106 = select i1 %105, i32 1904265964, i32 1428880420
  br label %.backedge

107:                                              ; preds = %5
  br label %.backedge

108:                                              ; preds = %5
  %109 = load i32, i32* @x.2, align 4
  %110 = load i32, i32* @y.3, align 4
  %111 = add i32 %109, -1
  %112 = mul i32 %111, %109
  %113 = and i32 %112, 1
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %115, %114
  %117 = select i1 %116, i32 -1736941587, i32 -1447955257
  br label %.backedge

118:                                              ; preds = %5
  %119 = add i32 %.056, 1
  %120 = load i32, i32* @x.2, align 4
  %121 = load i32, i32* @y.3, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 387771960, i32 -1447955257
  br label %.backedge

129:                                              ; preds = %5
  br label %.backedge

130:                                              ; preds = %5
  br label %.backedge

131:                                              ; preds = %5
  %132 = icmp slt i32 %.054, 9
  %133 = select i1 %132, i32 1966253035, i32 -774610017
  br label %.backedge

134:                                              ; preds = %5
  br label %.backedge

135:                                              ; preds = %5
  %136 = icmp slt i32 %.052, 9
  %137 = select i1 %136, i32 1362348539, i32 -245887139
  br label %.backedge

138:                                              ; preds = %5
  %139 = sext i32 %.054 to i64
  %140 = sext i32 %.052 to i64
  %141 = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @field, i64 0, i64 %139, i64 %140
  %142 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* nonnull %141)
  br label %.backedge

143:                                              ; preds = %5
  %144 = add i32 %.052, 1
  br label %.backedge

145:                                              ; preds = %5
  %146 = load i32, i32* @x.2, align 4
  %147 = load i32, i32* @y.3, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 -219055961, i32 -1230502533
  br label %.backedge

155:                                              ; preds = %5
  %156 = load i32, i32* @x.2, align 4
  %157 = load i32, i32* @y.3, align 4
  %158 = add i32 %156, -1
  %159 = mul i32 %158, %156
  %160 = and i32 %159, 1
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %162, %161
  %164 = select i1 %163, i32 -2078112332, i32 -1230502533
  br label %.backedge

165:                                              ; preds = %5
  br label %.backedge

166:                                              ; preds = %5
  %167 = add i32 %.054, 1
  br label %.backedge

168:                                              ; preds = %5
  %169 = load i32, i32* @x.2, align 4
  %170 = load i32, i32* @y.3, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 1821116674, i32 235047713
  br label %.backedge

178:                                              ; preds = %5
  %179 = load i32, i32* @x.2, align 4
  %180 = load i32, i32* @y.3, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 -204997894, i32 235047713
  br label %.backedge

188:                                              ; preds = %5
  br label %.backedge

189:                                              ; preds = %5
  %190 = icmp slt i32 %.050, 9
  %191 = select i1 %190, i32 -1784765420, i32 827624882
  br label %.backedge

192:                                              ; preds = %5
  %193 = load i32, i32* @x.2, align 4
  %194 = load i32, i32* @y.3, align 4
  %195 = add i32 %193, -1
  %196 = mul i32 %195, %193
  %197 = and i32 %196, 1
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %199, %198
  %201 = select i1 %200, i32 -811424122, i32 607088269
  br label %.backedge

202:                                              ; preds = %5
  %203 = load i32, i32* @x.2, align 4
  %204 = load i32, i32* @y.3, align 4
  %205 = add i32 %203, -1
  %206 = mul i32 %205, %203
  %207 = and i32 %206, 1
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %209, %208
  %211 = select i1 %210, i32 479866051, i32 607088269
  br label %.backedge

212:                                              ; preds = %5
  br label %.backedge

213:                                              ; preds = %5
  %214 = icmp slt i32 %.048, 9
  %215 = select i1 %214, i32 -405964802, i32 -1252188470
  br label %.backedge

216:                                              ; preds = %5
  %217 = load i32, i32* @x.2, align 4
  %218 = load i32, i32* @y.3, align 4
  %219 = add i32 %217, -1
  %220 = mul i32 %219, %217
  %221 = and i32 %220, 1
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %223, %222
  %225 = select i1 %224, i32 -27764371, i32 -944561561
  br label %.backedge

226:                                              ; preds = %5
  %227 = sext i32 %.050 to i64
  %228 = sext i32 %.048 to i64
  %229 = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @field, i64 0, i64 %227, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = icmp eq i8 %230, 49
  store i1 %231, i1* %2, align 1
  %232 = load i32, i32* @x.2, align 4
  %233 = load i32, i32* @y.3, align 4
  %234 = add i32 %232, -1
  %235 = mul i32 %234, %232
  %236 = and i32 %235, 1
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %238, %237
  %240 = select i1 %239, i32 1768350551, i32 -944561561
  br label %.backedge

241:                                              ; preds = %5
  %.0..0..0.42 = load volatile i1, i1* %2, align 1
  %242 = select i1 %.0..0..0.42, i32 437815015, i32 -646470424
  br label %.backedge

243:                                              ; preds = %5
  br label %.backedge

244:                                              ; preds = %5
  %245 = icmp slt i32 %.046, 7
  %246 = select i1 %245, i32 -2105046151, i32 -1467020585
  br label %.backedge

247:                                              ; preds = %5
  %248 = load i32, i32* @x.2, align 4
  %249 = load i32, i32* @y.3, align 4
  %250 = add i32 %248, -1
  %251 = mul i32 %250, %248
  %252 = and i32 %251, 1
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %254, %253
  %256 = select i1 %255, i32 -338110469, i32 -281762114
  br label %.backedge

257:                                              ; preds = %5
  %258 = load i32, i32* @x.2, align 4
  %259 = load i32, i32* @y.3, align 4
  %260 = add i32 %258, -1
  %261 = mul i32 %260, %258
  %262 = and i32 %261, 1
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %264, %263
  %266 = select i1 %265, i32 -145353967, i32 -281762114
  br label %.backedge

267:                                              ; preds = %5
  br label %.backedge

268:                                              ; preds = %5
  %269 = icmp slt i32 %.044, 3
  %270 = select i1 %269, i32 -642283822, i32 -1620400711
  br label %.backedge

271:                                              ; preds = %5
  %272 = sext i32 %.046 to i64
  %273 = sext i32 %.044 to i64
  %274 = getelementptr inbounds [7 x [3 x i32]], [7 x [3 x i32]]* @dy, i64 0, i64 %272, i64 %273
  %275 = load i32, i32* %274, align 4
  %276 = sub i32 %.050, %275
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds [7 x [3 x i32]], [7 x [3 x i32]]* @dx, i64 0, i64 %272, i64 %273
  %279 = load i32, i32* %278, align 4
  %280 = add i32 %279, %.048
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @field, i64 0, i64 %277, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = icmp eq i8 %283, 48
  %285 = select i1 %284, i32 784786282, i32 -1332958140
  br label %.backedge

286:                                              ; preds = %5
  br label %.backedge

287:                                              ; preds = %5
  br label %.backedge

288:                                              ; preds = %5
  %289 = load i32, i32* @x.2, align 4
  %290 = load i32, i32* @y.3, align 4
  %291 = add i32 %289, -1
  %292 = mul i32 %291, %289
  %293 = and i32 %292, 1
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %295, %294
  %297 = select i1 %296, i32 -2007142618, i32 -2023188630
  br label %.backedge

298:                                              ; preds = %5
  %299 = add i32 %.044, 1
  %300 = load i32, i32* @x.2, align 4
  %301 = load i32, i32* @y.3, align 4
  %302 = add i32 %300, -1
  %303 = mul i32 %302, %300
  %304 = and i32 %303, 1
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %306, %305
  %308 = select i1 %307, i32 -2085425723, i32 -2023188630
  br label %.backedge

309:                                              ; preds = %5
  br label %.backedge

310:                                              ; preds = %5
  %311 = load i32, i32* @x.2, align 4
  %312 = load i32, i32* @y.3, align 4
  %313 = add i32 %311, -1
  %314 = mul i32 %313, %311
  %315 = and i32 %314, 1
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %317, %316
  %319 = select i1 %318, i32 1764138185, i32 -285054274
  br label %.backedge

320:                                              ; preds = %5
  %321 = add i32 %.046, 65
  %322 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %321)
  %323 = load i32, i32* @x.2, align 4
  %324 = load i32, i32* @y.3, align 4
  %325 = add i32 %323, -1
  %326 = mul i32 %325, %323
  %327 = and i32 %326, 1
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %329, %328
  %331 = select i1 %330, i32 -766812475, i32 -285054274
  br label %.backedge

332:                                              ; preds = %5
  br label %.backedge

333:                                              ; preds = %5
  %334 = load i32, i32* @x.2, align 4
  %335 = load i32, i32* @y.3, align 4
  %336 = add i32 %334, -1
  %337 = mul i32 %336, %334
  %338 = and i32 %337, 1
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %340, %339
  %342 = select i1 %341, i32 758386460, i32 380346208
  br label %.backedge

343:                                              ; preds = %5
  %344 = load i32, i32* @x.2, align 4
  %345 = load i32, i32* @y.3, align 4
  %346 = add i32 %344, -1
  %347 = mul i32 %346, %344
  %348 = and i32 %347, 1
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %350, %349
  %352 = select i1 %351, i32 2122908215, i32 380346208
  br label %.backedge

353:                                              ; preds = %5
  br label %.backedge

354:                                              ; preds = %5
  %355 = load i32, i32* @x.2, align 4
  %356 = load i32, i32* @y.3, align 4
  %357 = add i32 %355, -1
  %358 = mul i32 %357, %355
  %359 = and i32 %358, 1
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %361, %360
  %363 = select i1 %362, i32 1065445729, i32 752134514
  br label %.backedge

364:                                              ; preds = %5
  %365 = add i32 %.046, 1
  %366 = load i32, i32* @x.2, align 4
  %367 = load i32, i32* @y.3, align 4
  %368 = add i32 %366, -1
  %369 = mul i32 %368, %366
  %370 = and i32 %369, 1
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %372, %371
  %374 = select i1 %373, i32 -1329953148, i32 752134514
  br label %.backedge

375:                                              ; preds = %5
  br label %.backedge

376:                                              ; preds = %5
  br label %.backedge

377:                                              ; preds = %5
  %378 = load i32, i32* @x.2, align 4
  %379 = load i32, i32* @y.3, align 4
  %380 = add i32 %378, -1
  %381 = mul i32 %380, %378
  %382 = and i32 %381, 1
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %384, %383
  %386 = select i1 %385, i32 -2049446118, i32 -938759289
  br label %.backedge

387:                                              ; preds = %5
  %388 = load i32, i32* @x.2, align 4
  %389 = load i32, i32* @y.3, align 4
  %390 = add i32 %388, -1
  %391 = mul i32 %390, %388
  %392 = and i32 %391, 1
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %394, %393
  %396 = select i1 %395, i32 231514565, i32 -938759289
  br label %.backedge

397:                                              ; preds = %5
  br label %.backedge

398:                                              ; preds = %5
  %399 = load i32, i32* @x.2, align 4
  %400 = load i32, i32* @y.3, align 4
  %401 = add i32 %399, -1
  %402 = mul i32 %401, %399
  %403 = and i32 %402, 1
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %405, %404
  %407 = select i1 %406, i32 859151335, i32 -1935663509
  br label %.backedge

408:                                              ; preds = %5
  %409 = add i32 %.048, 1
  %410 = load i32, i32* @x.2, align 4
  %411 = load i32, i32* @y.3, align 4
  %412 = add i32 %410, -1
  %413 = mul i32 %412, %410
  %414 = and i32 %413, 1
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %416, %415
  %418 = select i1 %417, i32 1393528777, i32 -1935663509
  br label %.backedge

419:                                              ; preds = %5
  br label %.backedge

420:                                              ; preds = %5
  %421 = load i32, i32* @x.2, align 4
  %422 = load i32, i32* @y.3, align 4
  %423 = add i32 %421, -1
  %424 = mul i32 %423, %421
  %425 = and i32 %424, 1
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %427, %426
  %429 = select i1 %428, i32 212495732, i32 -613449532
  br label %.backedge

430:                                              ; preds = %5
  %431 = load i32, i32* @x.2, align 4
  %432 = load i32, i32* @y.3, align 4
  %433 = add i32 %431, -1
  %434 = mul i32 %433, %431
  %435 = and i32 %434, 1
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %437, %436
  %439 = select i1 %438, i32 -661119470, i32 -613449532
  br label %.backedge

440:                                              ; preds = %5
  br label %.backedge

441:                                              ; preds = %5
  %442 = add i32 %.050, 1
  br label %.backedge

443:                                              ; preds = %5
  %444 = load i32, i32* @x.2, align 4
  %445 = load i32, i32* @y.3, align 4
  %446 = add i32 %444, -1
  %447 = mul i32 %446, %444
  %448 = and i32 %447, 1
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %450, %449
  %452 = select i1 %451, i32 -1125035789, i32 -1168664090
  br label %.backedge

453:                                              ; preds = %5
  %454 = load i32, i32* @x.2, align 4
  %455 = load i32, i32* @y.3, align 4
  %456 = add i32 %454, -1
  %457 = mul i32 %456, %454
  %458 = and i32 %457, 1
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %460, %459
  %462 = select i1 %461, i32 709953861, i32 -1168664090
  br label %.backedge

463:                                              ; preds = %5
  br label %.backedge

464:                                              ; preds = %5
  br label %.backedge

465:                                              ; preds = %5
  %466 = load i32, i32* @x.2, align 4
  %467 = load i32, i32* @y.3, align 4
  %468 = add i32 %466, -1
  %469 = mul i32 %468, %466
  %470 = and i32 %469, 1
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %472, %471
  %474 = select i1 %473, i32 -1581682483, i32 -300517222
  br label %.backedge

475:                                              ; preds = %5
  store i32 0, i32* %1, align 4
  %476 = load i32, i32* @x.2, align 4
  %477 = load i32, i32* @y.3, align 4
  %478 = add i32 %476, -1
  %479 = mul i32 %478, %476
  %480 = and i32 %479, 1
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %482, %481
  %484 = select i1 %483, i32 -538819323, i32 -300517222
  br label %.backedge

485:                                              ; preds = %5
  %.0..0..0.43 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.43

486:                                              ; preds = %5
  br label %.backedge

487:                                              ; preds = %5
  br label %.backedge

488:                                              ; preds = %5
  br label %.backedge

489:                                              ; preds = %5
  %490 = sext i32 %.056 to i64
  %491 = getelementptr inbounds [10 x [10 x i8]], [10 x [10 x i8]]* @field, i64 0, i64 1, i64 %490
  %492 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* nonnull %491)
  br label %.backedge

493:                                              ; preds = %5
  %494 = add i32 %.056, 1
  br label %.backedge

495:                                              ; preds = %5
  br label %.backedge

496:                                              ; preds = %5
  br label %.backedge

497:                                              ; preds = %5
  br label %.backedge

498:                                              ; preds = %5
  br label %.backedge

499:                                              ; preds = %5
  br label %.backedge

500:                                              ; preds = %5
  %501 = add i32 %.044, 1
  br label %.backedge

502:                                              ; preds = %5
  %503 = add i32 %.046, 65
  %504 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %503)
  br label %.backedge

505:                                              ; preds = %5
  br label %.backedge

506:                                              ; preds = %5
  %507 = add i32 %.046, 1
  br label %.backedge

508:                                              ; preds = %5
  br label %.backedge

509:                                              ; preds = %5
  %510 = add i32 %.048, 1
  br label %.backedge

511:                                              ; preds = %5
  br label %.backedge

512:                                              ; preds = %5
  br label %.backedge

513:                                              ; preds = %5
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt4fillIPccEvT_S1_RKT0_(i8* %0, i8* %1, i8* dereferenceable(1) %2) local_unnamed_addr #0 comdat {
  %4 = tail call i8* @_ZSt12__niter_baseIPcENSt11_Niter_baseIT_E13iterator_typeES2_(i8* %0)
  %5 = tail call i8* @_ZSt12__niter_baseIPcENSt11_Niter_baseIT_E13iterator_typeES2_(i8* %1)
  tail call void @_ZSt8__fill_aIcEN9__gnu_cxx11__enable_ifIXsr9__is_byteIT_EE7__valueEvE6__typeEPS2_S5_RKS2_(i8* %4, i8* %5, i8* nonnull dereferenceable(1) %2)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt8__fill_aIcEN9__gnu_cxx11__enable_ifIXsr9__is_byteIT_EE7__valueEvE6__typeEPS2_S5_RKS2_(i8* %0, i8* %1, i8* dereferenceable(1) %2) local_unnamed_addr #6 comdat {
  %4 = alloca i64, align 8
  %5 = load i8, i8* %2, align 1
  %6 = ptrtoint i8* %1 to i64
  %7 = ptrtoint i8* %0 to i64
  %8 = sub i64 %6, %7
  store i64 %8, i64* %4, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %3
  %.0.ph = phi i32 [ 1323698128, %3 ], [ %.0.ph.be, %.outer.backedge ]
  br label %9

9:                                                ; preds = %.outer, %9
  switch i32 %.0.ph, label %9 [
    i32 1323698128, label %10
    i32 1359413339, label %12
    i32 1413448788, label %13
  ]

10:                                               ; preds = %9
  %.0..0..0.7 = load volatile i64, i64* %4, align 8
  %.not = icmp eq i64 %.0..0..0.7, 0
  %11 = select i1 %.not, i32 1413448788, i32 1359413339
  br label %.outer.backedge

12:                                               ; preds = %9
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %5, i64 %8, i1 false)
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %12, %10
  %.0.ph.be = phi i32 [ %11, %10 ], [ 1413448788, %12 ]
  br label %.outer

13:                                               ; preds = %9
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr i8* @_ZSt12__niter_baseIPcENSt11_Niter_baseIT_E13iterator_typeES2_(i8* %0) local_unnamed_addr #0 comdat {
  %2 = alloca i8*, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.8, align 4
  %6 = load i32, i32* @y.9, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  br label %.outer

.outer:                                           ; preds = %16, %1
  %.ph = phi i8* [ %17, %16 ], [ undef, %1 ]
  %.0.ph = phi i32 [ %26, %16 ], [ -1451575043, %1 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %12

12:                                               ; preds = %.outer3, %12
  switch i32 %.0.ph4, label %12 [
    i32 -1451575043, label %13
    i32 635021145, label %16
    i32 369814837, label %27
    i32 1681737620, label %28
  ]

13:                                               ; preds = %12
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %14 = or i1 %.0..0..0., %.0..0..0.1
  %15 = select i1 %14, i32 635021145, i32 1681737620
  br label %.outer3.backedge

16:                                               ; preds = %12
  %17 = tail call i8* @_ZNSt10_Iter_baseIPcLb0EE7_S_baseES0_(i8* %0)
  %18 = load i32, i32* @x.8, align 4
  %19 = load i32, i32* @y.9, align 4
  %20 = add i32 %18, -1
  %21 = mul i32 %20, %18
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %24, %23
  %26 = select i1 %25, i32 369814837, i32 1681737620
  br label %.outer

27:                                               ; preds = %12
  store i8* %.ph, i8** %2, align 8
  %.0..0..0.2 = load volatile i8*, i8** %2, align 8
  ret i8* %.0..0..0.2

28:                                               ; preds = %12
  %29 = tail call i8* @_ZNSt10_Iter_baseIPcLb0EE7_S_baseES0_(i8* %0)
  br label %.outer3.backedge

.outer3.backedge:                                 ; preds = %28, %13
  %.0.ph4.be = phi i32 [ %15, %13 ], [ 635021145, %28 ]
  br label %.outer3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i8* @_ZNSt10_Iter_baseIPcLb0EE7_S_baseES0_(i8* %0) local_unnamed_addr #6 comdat align 2 {
  ret i8* %0
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s058101380.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.12, align 4
  %4 = load i32, i32* @y.13, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 988312421, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 988312421, label %11
    i32 1576157812, label %14
    i32 -2080983382, label %24
    i32 -1247786003, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1576157812, i32 -1247786003
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.12, align 4
  %16 = load i32, i32* @y.13, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -2080983382, i32 -1247786003
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 1576157812, %25 ]
  br label %.outer
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
