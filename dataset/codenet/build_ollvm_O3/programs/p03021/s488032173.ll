; ModuleID = 'build_ollvm/programs/p03021/s488032173.ll'
source_filename = "Project_CodeNet_C++1400/p03021/s488032173.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct.Edge = type { i32, i32 }

$_Z4readv = comdat any

$_Z8add_edgeii = comdat any

$_ZSt3minIiERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = local_unnamed_addr global i32 0, align 4
@ecnt = local_unnamed_addr global i32 0, align 4
@head = local_unnamed_addr global [2005 x i32] zeroinitializer, align 16
@s = global [2005 x i8] zeroinitializer, align 16
@e = local_unnamed_addr global [4010 x %struct.Edge] zeroinitializer, align 16
@root = local_unnamed_addr global i32 0, align 4
@f = local_unnamed_addr global [2005 x i32] zeroinitializer, align 16
@g = local_unnamed_addr global [2005 x i32] zeroinitializer, align 16
@h = local_unnamed_addr global [2005 x i32] zeroinitializer, align 16
@flag = local_unnamed_addr global i8 0, align 1
@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s488032173.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 159595021, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 159595021, label %11
    i32 467694931, label %14
    i32 -960260115, label %25
    i32 -2092114705, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 467694931, i32 -2092114705
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -960260115, i32 -2092114705
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 467694931, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind uwtable
define void @_Z3dfsii(i32 %0, i32 %1) local_unnamed_addr #4 {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = sext i32 %0 to i64
  %10 = getelementptr inbounds [2005 x i32], [2005 x i32]* @g, i64 0, i64 %9
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds [2005 x i32], [2005 x i32]* @f, i64 0, i64 %9
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds [2005 x i8], [2005 x i8]* @s, i64 0, i64 %9
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 49
  %15 = zext i1 %14 to i32
  %16 = getelementptr inbounds [2005 x i32], [2005 x i32]* @h, i64 0, i64 %9
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds [2005 x i32], [2005 x i32]* @head, i64 0, i64 %9
  %18 = load i32, i32* %17, align 4
  br label %19

19:                                               ; preds = %.backedge, %2
  %20 = phi i32 [ 0, %2 ], [ %.be, %.backedge ]
  %21 = phi i32 [ 0, %2 ], [ %.be117, %.backedge ]
  %22 = phi i32 [ 0, %2 ], [ %.be118, %.backedge ]
  %23 = phi i32 [ 0, %2 ], [ %.be119, %.backedge ]
  %.0108 = phi i32 [ %18, %2 ], [ %.0108.be, %.backedge ]
  %.0106 = phi i32 [ undef, %2 ], [ %.0106.be, %.backedge ]
  %.0104 = phi i32 [ undef, %2 ], [ %.0104.be, %.backedge ]
  %.0102 = phi i32 [ undef, %2 ], [ %.0102.be, %.backedge ]
  %.0100 = phi i32 [ undef, %2 ], [ %.0100.be, %.backedge ]
  %.098 = phi i32 [ undef, %2 ], [ %.098.be, %.backedge ]
  %.096 = phi i32 [ undef, %2 ], [ %.096.be, %.backedge ]
  %.094 = phi i32 [ undef, %2 ], [ %.094.be, %.backedge ]
  %.092 = phi i32 [ undef, %2 ], [ %.092.be, %.backedge ]
  %.090 = phi i32 [ undef, %2 ], [ %.090.be, %.backedge ]
  %.088 = phi i32 [ undef, %2 ], [ %.088.be, %.backedge ]
  %.0 = phi i32 [ -2095948932, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -2095948932, label %24
    i32 -1723716251, label %26
    i32 668369433, label %36
    i32 1965252900, label %50
    i32 1454222567, label %52
    i32 -657109490, label %53
    i32 -1206410469, label %69
    i32 -452402664, label %73
    i32 1764691514, label %77
    i32 229546374, label %80
    i32 91889226, label %90
    i32 -1552890434, label %100
    i32 -985407428, label %101
    i32 1127301575, label %111
    i32 480834286, label %122
    i32 -50915635, label %123
    i32 1568509145, label %133
    i32 -1603919676, label %144
    i32 -126536958, label %146
    i32 126372520, label %156
    i32 297894065, label %170
    i32 -856564546, label %172
    i32 455118891, label %182
    i32 600701371, label %192
    i32 -464296514, label %193
    i32 991423935, label %203
    i32 1982684284, label %204
    i32 225438834, label %205
    i32 1309185143, label %209
    i32 -426143279, label %212
    i32 -934427442, label %222
    i32 1127766505, label %232
    i32 -1378630073, label %233
    i32 985801897, label %243
    i32 -552769947, label %254
    i32 145294058, label %255
    i32 -150899324, label %265
    i32 130109167, label %276
    i32 -2141750552, label %278
    i32 212433435, label %284
    i32 579041510, label %287
    i32 847052656, label %297
    i32 1301196903, label %307
    i32 627510241, label %308
    i32 1439193187, label %316
    i32 -16667331, label %320
    i32 -221496351, label %330
    i32 -698687470, label %347
    i32 1167252757, label %349
    i32 -616053537, label %350
    i32 506343637, label %351
    i32 -1102805693, label %352
    i32 719563567, label %354
    i32 -452926102, label %364
    i32 -1638281321, label %375
    i32 139116603, label %377
    i32 -546379876, label %383
    i32 -1167600767, label %384
    i32 1004359186, label %394
    i32 799926215, label %401
    i32 -1945494613, label %402
    i32 1418863981, label %406
    i32 -886431170, label %409
    i32 696851063, label %411
    i32 -756361360, label %421
    i32 1000251707, label %432
    i32 -706201585, label %433
    i32 -146453977, label %434
    i32 115591218, label %435
    i32 1981762570, label %439
    i32 -980199045, label %440
    i32 510601944, label %442
    i32 500101702, label %443
    i32 -1020098294, label %447
    i32 187686369, label %448
    i32 2109454824, label %449
    i32 1673892505, label %451
    i32 1491027226, label %452
    i32 2057849432, label %453
    i32 1885183653, label %454
    i32 1980613639, label %455
  ]

.backedge:                                        ; preds = %19, %455, %454, %453, %452, %451, %449, %448, %447, %443, %442, %440, %439, %435, %433, %432, %421, %411, %409, %406, %402, %401, %394, %384, %383, %377, %375, %364, %354, %352, %351, %350, %349, %347, %330, %320, %316, %308, %307, %297, %287, %284, %278, %276, %265, %255, %254, %243, %233, %232, %222, %212, %209, %205, %204, %203, %193, %192, %182, %172, %170, %156, %146, %144, %133, %123, %122, %111, %101, %100, %90, %80, %77, %73, %69, %53, %52, %50, %36, %26, %24
  %.be = phi i32 [ %20, %19 ], [ %456, %455 ], [ %20, %454 ], [ %20, %453 ], [ %20, %452 ], [ %20, %451 ], [ %20, %449 ], [ %20, %448 ], [ %20, %447 ], [ %20, %443 ], [ %20, %442 ], [ %20, %440 ], [ %20, %439 ], [ %20, %435 ], [ %20, %433 ], [ %20, %432 ], [ %422, %421 ], [ %20, %411 ], [ %410, %409 ], [ %20, %406 ], [ %20, %402 ], [ %20, %401 ], [ %20, %394 ], [ %20, %384 ], [ %20, %383 ], [ %20, %377 ], [ %20, %375 ], [ %20, %364 ], [ %20, %354 ], [ %20, %352 ], [ %20, %351 ], [ %20, %350 ], [ %20, %349 ], [ %20, %347 ], [ %20, %330 ], [ %20, %320 ], [ %20, %316 ], [ %20, %308 ], [ %20, %307 ], [ %20, %297 ], [ %20, %287 ], [ %20, %284 ], [ %20, %278 ], [ %20, %276 ], [ %20, %265 ], [ %20, %255 ], [ %20, %254 ], [ %20, %243 ], [ %20, %233 ], [ %20, %232 ], [ %20, %222 ], [ %20, %212 ], [ %20, %209 ], [ %20, %205 ], [ %20, %204 ], [ %20, %203 ], [ %20, %193 ], [ %20, %192 ], [ %20, %182 ], [ %20, %172 ], [ %20, %170 ], [ %20, %156 ], [ %20, %146 ], [ %20, %144 ], [ %20, %133 ], [ %20, %123 ], [ %20, %122 ], [ %20, %111 ], [ %20, %101 ], [ %20, %100 ], [ %20, %90 ], [ %20, %80 ], [ %20, %77 ], [ %20, %73 ], [ %20, %69 ], [ %61, %53 ], [ %20, %52 ], [ %20, %50 ], [ %20, %36 ], [ %20, %26 ], [ %20, %24 ]
  %.be117 = phi i32 [ %21, %19 ], [ %456, %455 ], [ %21, %454 ], [ %21, %453 ], [ %21, %452 ], [ %21, %451 ], [ %21, %449 ], [ %21, %448 ], [ %21, %447 ], [ %21, %443 ], [ %21, %442 ], [ %21, %440 ], [ %21, %439 ], [ %21, %435 ], [ %21, %433 ], [ %21, %432 ], [ %422, %421 ], [ %21, %411 ], [ %410, %409 ], [ %21, %406 ], [ %21, %402 ], [ %21, %401 ], [ %21, %394 ], [ %21, %384 ], [ %21, %383 ], [ %21, %377 ], [ %21, %375 ], [ %21, %364 ], [ %21, %354 ], [ %21, %352 ], [ %21, %351 ], [ %21, %350 ], [ %21, %349 ], [ %21, %347 ], [ %21, %330 ], [ %21, %320 ], [ %21, %316 ], [ %21, %308 ], [ %21, %307 ], [ %21, %297 ], [ %21, %287 ], [ %21, %284 ], [ %21, %278 ], [ %21, %276 ], [ %21, %265 ], [ %21, %255 ], [ %21, %254 ], [ %21, %243 ], [ %21, %233 ], [ %21, %232 ], [ %21, %222 ], [ %21, %212 ], [ %21, %209 ], [ %21, %205 ], [ %21, %204 ], [ %21, %203 ], [ %21, %193 ], [ %21, %192 ], [ %21, %182 ], [ %21, %172 ], [ %21, %170 ], [ %21, %156 ], [ %21, %146 ], [ %21, %144 ], [ %21, %133 ], [ %21, %123 ], [ %21, %122 ], [ %21, %111 ], [ %21, %101 ], [ %21, %100 ], [ %21, %90 ], [ %21, %80 ], [ %20, %77 ], [ %21, %73 ], [ %21, %69 ], [ %61, %53 ], [ %21, %52 ], [ %21, %50 ], [ %21, %36 ], [ %21, %26 ], [ %21, %24 ]
  %.be118 = phi i32 [ %22, %19 ], [ %456, %455 ], [ %22, %454 ], [ %22, %453 ], [ %22, %452 ], [ %22, %451 ], [ %22, %449 ], [ %22, %448 ], [ %22, %447 ], [ %22, %443 ], [ %22, %442 ], [ %22, %440 ], [ %22, %439 ], [ %22, %435 ], [ %22, %433 ], [ %22, %432 ], [ %422, %421 ], [ %22, %411 ], [ %410, %409 ], [ %22, %406 ], [ %22, %402 ], [ %22, %401 ], [ %22, %394 ], [ %22, %384 ], [ %22, %383 ], [ %22, %377 ], [ %22, %375 ], [ %22, %364 ], [ %22, %354 ], [ %22, %352 ], [ %22, %351 ], [ %22, %350 ], [ %22, %349 ], [ %22, %347 ], [ %22, %330 ], [ %22, %320 ], [ %22, %316 ], [ %22, %308 ], [ %22, %307 ], [ %22, %297 ], [ %22, %287 ], [ %22, %284 ], [ %22, %278 ], [ %22, %276 ], [ %22, %265 ], [ %22, %255 ], [ %22, %254 ], [ %22, %243 ], [ %22, %233 ], [ %22, %232 ], [ %22, %222 ], [ %22, %212 ], [ %22, %209 ], [ %22, %205 ], [ %22, %204 ], [ %22, %203 ], [ %21, %193 ], [ %22, %192 ], [ %22, %182 ], [ %22, %172 ], [ %22, %170 ], [ %22, %156 ], [ %22, %146 ], [ %22, %144 ], [ %22, %133 ], [ %22, %123 ], [ %22, %122 ], [ %22, %111 ], [ %22, %101 ], [ %22, %100 ], [ %22, %90 ], [ %22, %80 ], [ %20, %77 ], [ %22, %73 ], [ %22, %69 ], [ %61, %53 ], [ %22, %52 ], [ %22, %50 ], [ %22, %36 ], [ %22, %26 ], [ %22, %24 ]
  %.be119 = phi i32 [ %23, %19 ], [ %456, %455 ], [ %23, %454 ], [ %23, %453 ], [ %23, %452 ], [ %23, %451 ], [ %23, %449 ], [ %23, %448 ], [ %23, %447 ], [ %23, %443 ], [ %23, %442 ], [ %23, %440 ], [ %23, %439 ], [ %23, %435 ], [ %23, %433 ], [ %23, %432 ], [ %422, %421 ], [ %23, %411 ], [ %410, %409 ], [ %23, %406 ], [ %23, %402 ], [ %23, %401 ], [ %23, %394 ], [ %22, %384 ], [ %23, %383 ], [ %23, %377 ], [ %23, %375 ], [ %23, %364 ], [ %23, %354 ], [ %23, %352 ], [ %23, %351 ], [ %23, %350 ], [ %23, %349 ], [ %23, %347 ], [ %23, %330 ], [ %23, %320 ], [ %23, %316 ], [ %23, %308 ], [ %23, %307 ], [ %23, %297 ], [ %23, %287 ], [ %23, %284 ], [ %23, %278 ], [ %23, %276 ], [ %23, %265 ], [ %23, %255 ], [ %23, %254 ], [ %23, %243 ], [ %23, %233 ], [ %23, %232 ], [ %23, %222 ], [ %23, %212 ], [ %23, %209 ], [ %23, %205 ], [ %23, %204 ], [ %23, %203 ], [ %21, %193 ], [ %23, %192 ], [ %23, %182 ], [ %23, %172 ], [ %23, %170 ], [ %23, %156 ], [ %23, %146 ], [ %23, %144 ], [ %23, %133 ], [ %23, %123 ], [ %23, %122 ], [ %23, %111 ], [ %23, %101 ], [ %23, %100 ], [ %23, %90 ], [ %23, %80 ], [ %20, %77 ], [ %23, %73 ], [ %23, %69 ], [ %61, %53 ], [ %23, %52 ], [ %23, %50 ], [ %23, %36 ], [ %23, %26 ], [ %23, %24 ]
  %.0108.be = phi i32 [ %.0108, %19 ], [ %.0108, %455 ], [ %.0108, %454 ], [ %.0108, %453 ], [ %.0108, %452 ], [ %.0108, %451 ], [ %.0108, %449 ], [ %.0108, %448 ], [ %.0108, %447 ], [ %.0108, %443 ], [ %.0108, %442 ], [ %.0108, %440 ], [ %.0108, %439 ], [ %.0108, %435 ], [ %.0108, %433 ], [ %.0108, %432 ], [ %.0108, %421 ], [ %.0108, %411 ], [ %.0108, %409 ], [ %.0108, %406 ], [ %.0108, %402 ], [ %.0108, %401 ], [ %.0108, %394 ], [ %.0108, %384 ], [ %.0108, %383 ], [ %.0108, %377 ], [ %.0108, %375 ], [ %.0108, %364 ], [ %.0108, %354 ], [ %.0108, %352 ], [ %.0108, %351 ], [ %.0108, %350 ], [ %.0108, %349 ], [ %.0108, %347 ], [ %.0108, %330 ], [ %.0108, %320 ], [ %.0108, %316 ], [ %.0108, %308 ], [ %.0108, %307 ], [ %.0108, %297 ], [ %.0108, %287 ], [ %.0108, %284 ], [ %.0108, %278 ], [ %.0108, %276 ], [ %.0108, %265 ], [ %.0108, %255 ], [ %.0108, %254 ], [ %.0108, %243 ], [ %.0108, %233 ], [ %.0108, %232 ], [ %.0108, %222 ], [ %.0108, %212 ], [ %.0108, %209 ], [ %.0108, %205 ], [ %.0108, %204 ], [ %.0108, %203 ], [ %.0108, %193 ], [ %.0108, %192 ], [ %.0108, %182 ], [ %.0108, %172 ], [ %.0108, %170 ], [ %.0108, %156 ], [ %.0108, %146 ], [ %.0108, %144 ], [ %.0108, %133 ], [ %.0108, %123 ], [ %.0108, %122 ], [ %.0108, %111 ], [ %.0108, %101 ], [ %.0108, %100 ], [ %.0108, %90 ], [ %.0108, %80 ], [ %.0108, %77 ], [ %.0108, %73 ], [ %72, %69 ], [ %.0108, %53 ], [ %.0108, %52 ], [ %.0108, %50 ], [ %.0108, %36 ], [ %.0108, %26 ], [ %.0108, %24 ]
  %.0106.be = phi i32 [ %.0106, %19 ], [ %.0106, %455 ], [ %.0106, %454 ], [ %.0106, %453 ], [ %.0106, %452 ], [ %.0106, %451 ], [ %.0106, %449 ], [ %.0106, %448 ], [ %.0106, %447 ], [ %.0106, %443 ], [ %.0106, %442 ], [ %.0106, %440 ], [ %.0106, %439 ], [ %438, %435 ], [ %.0106, %433 ], [ %.0106, %432 ], [ %.0106, %421 ], [ %.0106, %411 ], [ %.0106, %409 ], [ %.0106, %406 ], [ %.0106, %402 ], [ %.0106, %401 ], [ %.0106, %394 ], [ %.0106, %384 ], [ %.0106, %383 ], [ %.0106, %377 ], [ %.0106, %375 ], [ %.0106, %364 ], [ %.0106, %354 ], [ %.0106, %352 ], [ %.0106, %351 ], [ %.0106, %350 ], [ %.0106, %349 ], [ %.0106, %347 ], [ %.0106, %330 ], [ %.0106, %320 ], [ %.0106, %316 ], [ %.0106, %308 ], [ %.0106, %307 ], [ %.0106, %297 ], [ %.0106, %287 ], [ %.0106, %284 ], [ %.0106, %278 ], [ %.0106, %276 ], [ %.0106, %265 ], [ %.0106, %255 ], [ %.0106, %254 ], [ %.0106, %243 ], [ %.0106, %233 ], [ %.0106, %232 ], [ %.0106, %222 ], [ %.0106, %212 ], [ %.0106, %209 ], [ %.0106, %205 ], [ %.0106, %204 ], [ %.0106, %203 ], [ %.0106, %193 ], [ %.0106, %192 ], [ %.0106, %182 ], [ %.0106, %172 ], [ %.0106, %170 ], [ %.0106, %156 ], [ %.0106, %146 ], [ %.0106, %144 ], [ %.0106, %133 ], [ %.0106, %123 ], [ %.0106, %122 ], [ %.0106, %111 ], [ %.0106, %101 ], [ %.0106, %100 ], [ %.0106, %90 ], [ %.0106, %80 ], [ %.0106, %77 ], [ %.0106, %73 ], [ %.0106, %69 ], [ %.0106, %53 ], [ %.0106, %52 ], [ %.0106, %50 ], [ %39, %36 ], [ %.0106, %26 ], [ %.0106, %24 ]
  %.0104.be = phi i32 [ %.0104, %19 ], [ %.0104, %455 ], [ %.0104, %454 ], [ %.0104, %453 ], [ %.0104, %452 ], [ %.0104, %451 ], [ %.0104, %449 ], [ %.0104, %448 ], [ %.0104, %447 ], [ %.0104, %443 ], [ %.0104, %442 ], [ -1, %440 ], [ %.0104, %439 ], [ %.0104, %435 ], [ %.0104, %433 ], [ %.0104, %432 ], [ %.0104, %421 ], [ %.0104, %411 ], [ %.0104, %409 ], [ %.0104, %406 ], [ %.0104, %402 ], [ %.0104, %401 ], [ %.0104, %394 ], [ %.0104, %384 ], [ %.0104, %383 ], [ %.0104, %377 ], [ %.0104, %375 ], [ %.0104, %364 ], [ %.0104, %354 ], [ %.0104, %352 ], [ %.0104, %351 ], [ %.0104, %350 ], [ %.0104, %349 ], [ %.0104, %347 ], [ %.0104, %330 ], [ %.0104, %320 ], [ %.0104, %316 ], [ %.0104, %308 ], [ %.0104, %307 ], [ %.0104, %297 ], [ %.0104, %287 ], [ %.0104, %284 ], [ %.0104, %278 ], [ %.0104, %276 ], [ %.0104, %265 ], [ %.0104, %255 ], [ %.0104, %254 ], [ %.0104, %243 ], [ %.0104, %233 ], [ %.0104, %232 ], [ %.0104, %222 ], [ %.0104, %212 ], [ %.0104, %209 ], [ %.0104, %205 ], [ %.0104, %204 ], [ %.098, %203 ], [ %.0104, %193 ], [ %.0104, %192 ], [ %.0104, %182 ], [ %.0104, %172 ], [ %.0104, %170 ], [ %.0104, %156 ], [ %.0104, %146 ], [ %.0104, %144 ], [ %.0104, %133 ], [ %.0104, %123 ], [ %.0104, %122 ], [ -1, %111 ], [ %.0104, %101 ], [ %.0104, %100 ], [ %.0104, %90 ], [ %.0104, %80 ], [ %.0104, %77 ], [ %.0104, %73 ], [ %.0104, %69 ], [ %.0104, %53 ], [ %.0104, %52 ], [ %.0104, %50 ], [ %.0104, %36 ], [ %.0104, %26 ], [ %.0104, %24 ]
  %.0102.be = phi i32 [ %.0102, %19 ], [ %.0102, %455 ], [ %.0102, %454 ], [ %.0102, %453 ], [ %.0102, %452 ], [ %.0102, %451 ], [ %.0102, %449 ], [ %.0102, %448 ], [ %.0102, %447 ], [ %.0102, %443 ], [ %.0102, %442 ], [ 0, %440 ], [ %.0102, %439 ], [ %.0102, %435 ], [ %.0102, %433 ], [ %.0102, %432 ], [ %.0102, %421 ], [ %.0102, %411 ], [ %.0102, %409 ], [ %.0102, %406 ], [ %.0102, %402 ], [ %.0102, %401 ], [ %.0102, %394 ], [ %.0102, %384 ], [ %.0102, %383 ], [ %.0102, %377 ], [ %.0102, %375 ], [ %.0102, %364 ], [ %.0102, %354 ], [ %.0102, %352 ], [ %.0102, %351 ], [ %.0102, %350 ], [ %.0102, %349 ], [ %.0102, %347 ], [ %.0102, %330 ], [ %.0102, %320 ], [ %.0102, %316 ], [ %315, %308 ], [ %.0102, %307 ], [ %.0102, %297 ], [ %.0102, %287 ], [ %.0102, %284 ], [ %.0102, %278 ], [ %.0102, %276 ], [ %.0102, %265 ], [ %.0102, %255 ], [ %.0102, %254 ], [ %.0102, %243 ], [ %.0102, %233 ], [ %.0102, %232 ], [ %.0102, %222 ], [ %.0102, %212 ], [ %.0102, %209 ], [ %.0102, %205 ], [ %.0102, %204 ], [ %.0102, %203 ], [ %.0102, %193 ], [ %.0102, %192 ], [ %.0102, %182 ], [ %.0102, %172 ], [ %.0102, %170 ], [ %.0102, %156 ], [ %.0102, %146 ], [ %.0102, %144 ], [ %.0102, %133 ], [ %.0102, %123 ], [ %.0102, %122 ], [ 0, %111 ], [ %.0102, %101 ], [ %.0102, %100 ], [ %.0102, %90 ], [ %.0102, %80 ], [ %.0102, %77 ], [ %.0102, %73 ], [ %.0102, %69 ], [ %.0102, %53 ], [ %.0102, %52 ], [ %.0102, %50 ], [ %.0102, %36 ], [ %.0102, %26 ], [ %.0102, %24 ]
  %.0100.be = phi i32 [ %.0100, %19 ], [ %.0100, %455 ], [ %.0100, %454 ], [ %.0100, %453 ], [ %.0100, %452 ], [ %.0100, %451 ], [ %.0100, %449 ], [ %.0100, %448 ], [ %.0100, %447 ], [ %.0100, %443 ], [ %.0100, %442 ], [ %441, %440 ], [ %.0100, %439 ], [ %.0100, %435 ], [ %.0100, %433 ], [ %.0100, %432 ], [ %.0100, %421 ], [ %.0100, %411 ], [ %.0100, %409 ], [ %.0100, %406 ], [ %.0100, %402 ], [ %.0100, %401 ], [ %.0100, %394 ], [ %.0100, %384 ], [ %.0100, %383 ], [ %.0100, %377 ], [ %.0100, %375 ], [ %.0100, %364 ], [ %.0100, %354 ], [ %.0100, %352 ], [ %.0100, %351 ], [ %.0100, %350 ], [ %.0100, %349 ], [ %.0100, %347 ], [ %.0100, %330 ], [ %.0100, %320 ], [ %.0100, %316 ], [ %.0100, %308 ], [ %.0100, %307 ], [ %.0100, %297 ], [ %.0100, %287 ], [ %.0100, %284 ], [ %.0100, %278 ], [ %.0100, %276 ], [ %.0100, %265 ], [ %.0100, %255 ], [ %.0100, %254 ], [ %.0100, %243 ], [ %.0100, %233 ], [ %.0100, %232 ], [ %.0100, %222 ], [ %.0100, %212 ], [ %.0100, %209 ], [ %208, %205 ], [ %.0100, %204 ], [ %.0100, %203 ], [ %.0100, %193 ], [ %.0100, %192 ], [ %.0100, %182 ], [ %.0100, %172 ], [ %.0100, %170 ], [ %.0100, %156 ], [ %.0100, %146 ], [ %.0100, %144 ], [ %.0100, %133 ], [ %.0100, %123 ], [ %.0100, %122 ], [ %112, %111 ], [ %.0100, %101 ], [ %.0100, %100 ], [ %.0100, %90 ], [ %.0100, %80 ], [ %.0100, %77 ], [ %.0100, %73 ], [ %.0100, %69 ], [ %.0100, %53 ], [ %.0100, %52 ], [ %.0100, %50 ], [ %.0100, %36 ], [ %.0100, %26 ], [ %.0100, %24 ]
  %.098.be = phi i32 [ %.098, %19 ], [ %.098, %455 ], [ %.098, %454 ], [ %.098, %453 ], [ %.098, %452 ], [ %.098, %451 ], [ %.098, %449 ], [ %.098, %448 ], [ %.098, %447 ], [ %446, %443 ], [ %.098, %442 ], [ %.098, %440 ], [ %.098, %439 ], [ %.098, %435 ], [ %.098, %433 ], [ %.098, %432 ], [ %.098, %421 ], [ %.098, %411 ], [ %.098, %409 ], [ %.098, %406 ], [ %.098, %402 ], [ %.098, %401 ], [ %.098, %394 ], [ %.098, %384 ], [ %.098, %383 ], [ %.098, %377 ], [ %.098, %375 ], [ %.098, %364 ], [ %.098, %354 ], [ %.098, %352 ], [ %.098, %351 ], [ %.098, %350 ], [ %.098, %349 ], [ %.098, %347 ], [ %.098, %330 ], [ %.098, %320 ], [ %.098, %316 ], [ %.098, %308 ], [ %.098, %307 ], [ %.098, %297 ], [ %.098, %287 ], [ %.098, %284 ], [ %.098, %278 ], [ %.098, %276 ], [ %.098, %265 ], [ %.098, %255 ], [ %.098, %254 ], [ %.098, %243 ], [ %.098, %233 ], [ %.098, %232 ], [ %.098, %222 ], [ %.098, %212 ], [ %.098, %209 ], [ %.098, %205 ], [ %.098, %204 ], [ %.098, %203 ], [ %.098, %193 ], [ %.098, %192 ], [ %.098, %182 ], [ %.098, %172 ], [ %.098, %170 ], [ %159, %156 ], [ %.098, %146 ], [ %.098, %144 ], [ %.098, %133 ], [ %.098, %123 ], [ %.098, %122 ], [ %.098, %111 ], [ %.098, %101 ], [ %.098, %100 ], [ %.098, %90 ], [ %.098, %80 ], [ %.098, %77 ], [ %.098, %73 ], [ %.098, %69 ], [ %.098, %53 ], [ %.098, %52 ], [ %.098, %50 ], [ %.098, %36 ], [ %.098, %26 ], [ %.098, %24 ]
  %.096.be = phi i32 [ %.096, %19 ], [ %.096, %455 ], [ %.096, %454 ], [ %.096, %453 ], [ %.096, %452 ], [ %.096, %451 ], [ %450, %449 ], [ %.096, %448 ], [ %.096, %447 ], [ %.096, %443 ], [ %.096, %442 ], [ %.096, %440 ], [ %.096, %439 ], [ %.096, %435 ], [ %.096, %433 ], [ %.096, %432 ], [ %.096, %421 ], [ %.096, %411 ], [ %.096, %409 ], [ %.096, %406 ], [ %.096, %402 ], [ %.096, %401 ], [ %.096, %394 ], [ %.096, %384 ], [ %.096, %383 ], [ %.096, %377 ], [ %.096, %375 ], [ %.096, %364 ], [ %.096, %354 ], [ %.096, %352 ], [ %.096, %351 ], [ %.096, %350 ], [ %.096, %349 ], [ %.096, %347 ], [ %.096, %330 ], [ %.096, %320 ], [ %319, %316 ], [ %.096, %308 ], [ %.096, %307 ], [ %.096, %297 ], [ %.096, %287 ], [ %.096, %284 ], [ %.096, %278 ], [ %.096, %276 ], [ %.096, %265 ], [ %.096, %255 ], [ %.096, %254 ], [ %244, %243 ], [ %.096, %233 ], [ %.096, %232 ], [ %.096, %222 ], [ %.096, %212 ], [ %.096, %209 ], [ %.096, %205 ], [ %.096, %204 ], [ %.096, %203 ], [ %.096, %193 ], [ %.096, %192 ], [ %.096, %182 ], [ %.096, %172 ], [ %.096, %170 ], [ %.096, %156 ], [ %.096, %146 ], [ %.096, %144 ], [ %.096, %133 ], [ %.096, %123 ], [ %.096, %122 ], [ %.096, %111 ], [ %.096, %101 ], [ %.096, %100 ], [ %.096, %90 ], [ %.096, %80 ], [ %.096, %77 ], [ %.096, %73 ], [ %.096, %69 ], [ %.096, %53 ], [ %.096, %52 ], [ %.096, %50 ], [ %.096, %36 ], [ %.096, %26 ], [ %.096, %24 ]
  %.094.be = phi i32 [ %.094, %19 ], [ %.094, %455 ], [ %.094, %454 ], [ %.094, %453 ], [ %.094, %452 ], [ %.094, %451 ], [ %.094, %449 ], [ %.094, %448 ], [ %.094, %447 ], [ %.094, %443 ], [ %.094, %442 ], [ %.094, %440 ], [ %.094, %439 ], [ %.094, %435 ], [ %.094, %433 ], [ %.094, %432 ], [ %.094, %421 ], [ %.094, %411 ], [ %.094, %409 ], [ %.094, %406 ], [ %.094, %402 ], [ %.094, %401 ], [ %.094, %394 ], [ %.094, %384 ], [ %.094, %383 ], [ %.094, %377 ], [ %.094, %375 ], [ %.094, %364 ], [ %.094, %354 ], [ %.094, %352 ], [ %.094, %351 ], [ %.094, %350 ], [ %.094, %349 ], [ %.094, %347 ], [ %.094, %330 ], [ %.094, %320 ], [ %.094, %316 ], [ %.094, %308 ], [ %.094, %307 ], [ %.094, %297 ], [ %.094, %287 ], [ %.094, %284 ], [ %281, %278 ], [ %.094, %276 ], [ %.094, %265 ], [ %.094, %255 ], [ %.094, %254 ], [ %.094, %243 ], [ %.094, %233 ], [ %.094, %232 ], [ %.094, %222 ], [ %.094, %212 ], [ %.094, %209 ], [ %.094, %205 ], [ %.094, %204 ], [ %.094, %203 ], [ %.094, %193 ], [ %.094, %192 ], [ %.094, %182 ], [ %.094, %172 ], [ %.094, %170 ], [ %.094, %156 ], [ %.094, %146 ], [ %.094, %144 ], [ %.094, %133 ], [ %.094, %123 ], [ %.094, %122 ], [ %.094, %111 ], [ %.094, %101 ], [ %.094, %100 ], [ %.094, %90 ], [ %.094, %80 ], [ %.094, %77 ], [ %.094, %73 ], [ %.094, %69 ], [ %.094, %53 ], [ %.094, %52 ], [ %.094, %50 ], [ %.094, %36 ], [ %.094, %26 ], [ %.094, %24 ]
  %.092.be = phi i32 [ %.092, %19 ], [ %.092, %455 ], [ %.092, %454 ], [ %.092, %453 ], [ %.092, %452 ], [ %.092, %451 ], [ %.092, %449 ], [ %.092, %448 ], [ %.092, %447 ], [ %.092, %443 ], [ %.092, %442 ], [ %.092, %440 ], [ %.092, %439 ], [ %.092, %435 ], [ %.092, %433 ], [ %.092, %432 ], [ %.092, %421 ], [ %.092, %411 ], [ %.092, %409 ], [ %.092, %406 ], [ %.092, %402 ], [ %.092, %401 ], [ %400, %394 ], [ %.092, %384 ], [ %.092, %383 ], [ %.092, %377 ], [ %.092, %375 ], [ %.092, %364 ], [ %.092, %354 ], [ -1, %352 ], [ %.092, %351 ], [ %.092, %350 ], [ %.092, %349 ], [ %.092, %347 ], [ %.092, %330 ], [ %.092, %320 ], [ %.092, %316 ], [ %.092, %308 ], [ %.092, %307 ], [ %.092, %297 ], [ %.092, %287 ], [ %.092, %284 ], [ %.092, %278 ], [ %.092, %276 ], [ %.092, %265 ], [ %.092, %255 ], [ %.092, %254 ], [ %.092, %243 ], [ %.092, %233 ], [ %.092, %232 ], [ %.092, %222 ], [ %.092, %212 ], [ %.092, %209 ], [ %.092, %205 ], [ %.092, %204 ], [ %.092, %203 ], [ %.092, %193 ], [ %.092, %192 ], [ %.092, %182 ], [ %.092, %172 ], [ %.092, %170 ], [ %.092, %156 ], [ %.092, %146 ], [ %.092, %144 ], [ %.092, %133 ], [ %.092, %123 ], [ %.092, %122 ], [ %.092, %111 ], [ %.092, %101 ], [ %.092, %100 ], [ %.092, %90 ], [ %.092, %80 ], [ %.092, %77 ], [ %.092, %73 ], [ %.092, %69 ], [ %.092, %53 ], [ %.092, %52 ], [ %.092, %50 ], [ %.092, %36 ], [ %.092, %26 ], [ %.092, %24 ]
  %.090.be = phi i32 [ %.090, %19 ], [ %.090, %455 ], [ %.090, %454 ], [ %.090, %453 ], [ %.090, %452 ], [ %.090, %451 ], [ %.090, %449 ], [ %.090, %448 ], [ %.090, %447 ], [ %.090, %443 ], [ %.090, %442 ], [ %.090, %440 ], [ %.090, %439 ], [ %.090, %435 ], [ %.090, %433 ], [ %.090, %432 ], [ %.090, %421 ], [ %.090, %411 ], [ %.090, %409 ], [ %.090, %406 ], [ %405, %402 ], [ %.090, %401 ], [ %.090, %394 ], [ %.090, %384 ], [ %.090, %383 ], [ %.090, %377 ], [ %.090, %375 ], [ %.090, %364 ], [ %.090, %354 ], [ %353, %352 ], [ %.090, %351 ], [ %.090, %350 ], [ %.090, %349 ], [ %.090, %347 ], [ %.090, %330 ], [ %.090, %320 ], [ %.090, %316 ], [ %.090, %308 ], [ %.090, %307 ], [ %.090, %297 ], [ %.090, %287 ], [ %.090, %284 ], [ %.090, %278 ], [ %.090, %276 ], [ %.090, %265 ], [ %.090, %255 ], [ %.090, %254 ], [ %.090, %243 ], [ %.090, %233 ], [ %.090, %232 ], [ %.090, %222 ], [ %.090, %212 ], [ %.090, %209 ], [ %.090, %205 ], [ %.090, %204 ], [ %.090, %203 ], [ %.090, %193 ], [ %.090, %192 ], [ %.090, %182 ], [ %.090, %172 ], [ %.090, %170 ], [ %.090, %156 ], [ %.090, %146 ], [ %.090, %144 ], [ %.090, %133 ], [ %.090, %123 ], [ %.090, %122 ], [ %.090, %111 ], [ %.090, %101 ], [ %.090, %100 ], [ %.090, %90 ], [ %.090, %80 ], [ %.090, %77 ], [ %.090, %73 ], [ %.090, %69 ], [ %.090, %53 ], [ %.090, %52 ], [ %.090, %50 ], [ %.090, %36 ], [ %.090, %26 ], [ %.090, %24 ]
  %.088.be = phi i32 [ %.088, %19 ], [ %.088, %455 ], [ %.088, %454 ], [ %.088, %453 ], [ %.088, %452 ], [ %.088, %451 ], [ %.088, %449 ], [ %.088, %448 ], [ %.088, %447 ], [ %.088, %443 ], [ %.088, %442 ], [ %.088, %440 ], [ %.088, %439 ], [ %.088, %435 ], [ %.088, %433 ], [ %.088, %432 ], [ %.088, %421 ], [ %.088, %411 ], [ %.088, %409 ], [ %.088, %406 ], [ %.088, %402 ], [ %.088, %401 ], [ %.088, %394 ], [ %.088, %384 ], [ %.088, %383 ], [ %380, %377 ], [ %.088, %375 ], [ %.088, %364 ], [ %.088, %354 ], [ %.088, %352 ], [ %.088, %351 ], [ %.088, %350 ], [ %.088, %349 ], [ %.088, %347 ], [ %.088, %330 ], [ %.088, %320 ], [ %.088, %316 ], [ %.088, %308 ], [ %.088, %307 ], [ %.088, %297 ], [ %.088, %287 ], [ %.088, %284 ], [ %.088, %278 ], [ %.088, %276 ], [ %.088, %265 ], [ %.088, %255 ], [ %.088, %254 ], [ %.088, %243 ], [ %.088, %233 ], [ %.088, %232 ], [ %.088, %222 ], [ %.088, %212 ], [ %.088, %209 ], [ %.088, %205 ], [ %.088, %204 ], [ %.088, %203 ], [ %.088, %193 ], [ %.088, %192 ], [ %.088, %182 ], [ %.088, %172 ], [ %.088, %170 ], [ %.088, %156 ], [ %.088, %146 ], [ %.088, %144 ], [ %.088, %133 ], [ %.088, %123 ], [ %.088, %122 ], [ %.088, %111 ], [ %.088, %101 ], [ %.088, %100 ], [ %.088, %90 ], [ %.088, %80 ], [ %.088, %77 ], [ %.088, %73 ], [ %.088, %69 ], [ %.088, %53 ], [ %.088, %52 ], [ %.088, %50 ], [ %.088, %36 ], [ %.088, %26 ], [ %.088, %24 ]
  %.0.be = phi i32 [ %.0, %19 ], [ -756361360, %455 ], [ -452926102, %454 ], [ -221496351, %453 ], [ 847052656, %452 ], [ -150899324, %451 ], [ 985801897, %449 ], [ -934427442, %448 ], [ 455118891, %447 ], [ 126372520, %443 ], [ 1568509145, %442 ], [ 1127301575, %440 ], [ 91889226, %439 ], [ 668369433, %435 ], [ -146453977, %433 ], [ -706201585, %432 ], [ %431, %421 ], [ %420, %411 ], [ -706201585, %409 ], [ %408, %406 ], [ 719563567, %402 ], [ -1945494613, %401 ], [ 799926215, %394 ], [ %393, %384 ], [ -1945494613, %383 ], [ %382, %377 ], [ %376, %375 ], [ %374, %364 ], [ %363, %354 ], [ 719563567, %352 ], [ -146453977, %351 ], [ 506343637, %350 ], [ -616053537, %349 ], [ %348, %347 ], [ %346, %330 ], [ %329, %320 ], [ 145294058, %316 ], [ 1439193187, %308 ], [ 1439193187, %307 ], [ %306, %297 ], [ %296, %287 ], [ %286, %284 ], [ %283, %278 ], [ %277, %276 ], [ %275, %265 ], [ %264, %255 ], [ 145294058, %254 ], [ %253, %243 ], [ %242, %233 ], [ -146453977, %232 ], [ %231, %222 ], [ %221, %212 ], [ %211, %209 ], [ -50915635, %205 ], [ 225438834, %204 ], [ 1982684284, %203 ], [ %202, %193 ], [ 225438834, %192 ], [ %191, %182 ], [ %181, %172 ], [ %171, %170 ], [ %169, %156 ], [ %155, %146 ], [ %145, %144 ], [ %143, %133 ], [ %132, %123 ], [ -50915635, %122 ], [ %121, %111 ], [ %110, %101 ], [ 506343637, %100 ], [ %99, %90 ], [ %89, %80 ], [ %79, %77 ], [ %76, %73 ], [ -2095948932, %69 ], [ -1206410469, %53 ], [ -1206410469, %52 ], [ %51, %50 ], [ %49, %36 ], [ %35, %26 ], [ %25, %24 ]
  br label %19

24:                                               ; preds = %19
  %.not112 = icmp eq i32 %.0108, 0
  %25 = select i1 %.not112, i32 -452402664, i32 -1723716251
  br label %.backedge

26:                                               ; preds = %19
  %27 = load i32, i32* @x.2, align 4
  %28 = load i32, i32* @y.3, align 4
  %29 = add i32 %27, -1
  %30 = mul i32 %29, %27
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %33, %32
  %35 = select i1 %34, i32 668369433, i32 115591218
  br label %.backedge

36:                                               ; preds = %19
  %37 = sext i32 %.0108 to i64
  %38 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %37, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, %1
  store i1 %40, i1* %8, align 1
  %41 = load i32, i32* @x.2, align 4
  %42 = load i32, i32* @y.3, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 1965252900, i32 115591218
  br label %.backedge

50:                                               ; preds = %19
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %51 = select i1 %.0..0..0., i32 1454222567, i32 -657109490
  br label %.backedge

52:                                               ; preds = %19
  br label %.backedge

53:                                               ; preds = %19
  tail call void @_Z3dfsii(i32 %.0106, i32 %0)
  %54 = sext i32 %.0106 to i64
  %55 = getelementptr inbounds [2005 x i32], [2005 x i32]* @f, i64 0, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds [2005 x i32], [2005 x i32]* @h, i64 0, i64 %54
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, %56
  %60 = load i32, i32* %11, align 4
  %61 = add i32 %59, %60
  store i32 %61, i32* %11, align 4
  %62 = getelementptr inbounds [2005 x i32], [2005 x i32]* @g, i64 0, i64 %54
  %63 = load i32, i32* %62, align 4
  %64 = add i32 %63, %58
  %65 = load i32, i32* %10, align 4
  %66 = add i32 %64, %65
  store i32 %66, i32* %10, align 4
  %67 = load i32, i32* %16, align 4
  %68 = add i32 %67, %58
  store i32 %68, i32* %16, align 4
  br label %.backedge

69:                                               ; preds = %19
  %70 = sext i32 %.0108 to i64
  %71 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %70, i32 1
  %72 = load i32, i32* %71, align 4
  br label %.backedge

73:                                               ; preds = %19
  %74 = load i32, i32* @root, align 4
  %75 = icmp eq i32 %74, %0
  %76 = select i1 %75, i32 1764691514, i32 -1102805693
  br label %.backedge

77:                                               ; preds = %19
  %78 = and i32 %20, 1
  %.not = icmp eq i32 %78, 0
  %79 = select i1 %.not, i32 -985407428, i32 229546374
  br label %.backedge

80:                                               ; preds = %19
  %81 = load i32, i32* @x.2, align 4
  %82 = load i32, i32* @y.3, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 91889226, i32 1981762570
  br label %.backedge

90:                                               ; preds = %19
  store i8 0, i8* @flag, align 1
  %91 = load i32, i32* @x.2, align 4
  %92 = load i32, i32* @y.3, align 4
  %93 = add i32 %91, -1
  %94 = mul i32 %93, %91
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %97, %96
  %99 = select i1 %98, i32 -1552890434, i32 1981762570
  br label %.backedge

100:                                              ; preds = %19
  br label %.backedge

101:                                              ; preds = %19
  %102 = load i32, i32* @x.2, align 4
  %103 = load i32, i32* @y.3, align 4
  %104 = add i32 %102, -1
  %105 = mul i32 %104, %102
  %106 = and i32 %105, 1
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %108, %107
  %110 = select i1 %109, i32 1127301575, i32 -980199045
  br label %.backedge

111:                                              ; preds = %19
  %112 = load i32, i32* %17, align 4
  %113 = load i32, i32* @x.2, align 4
  %114 = load i32, i32* @y.3, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 480834286, i32 -980199045
  br label %.backedge

122:                                              ; preds = %19
  br label %.backedge

123:                                              ; preds = %19
  %124 = load i32, i32* @x.2, align 4
  %125 = load i32, i32* @y.3, align 4
  %126 = add i32 %124, -1
  %127 = mul i32 %126, %124
  %128 = and i32 %127, 1
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %130, %129
  %132 = select i1 %131, i32 1568509145, i32 510601944
  br label %.backedge

133:                                              ; preds = %19
  %134 = icmp ne i32 %.0100, 0
  store i1 %134, i1* %7, align 1
  %135 = load i32, i32* @x.2, align 4
  %136 = load i32, i32* @y.3, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 -1603919676, i32 510601944
  br label %.backedge

144:                                              ; preds = %19
  %.0..0..0.83 = load volatile i1, i1* %7, align 1
  %145 = select i1 %.0..0..0.83, i32 -126536958, i32 1309185143
  br label %.backedge

146:                                              ; preds = %19
  %147 = load i32, i32* @x.2, align 4
  %148 = load i32, i32* @y.3, align 4
  %149 = add i32 %147, -1
  %150 = mul i32 %149, %147
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 126372520, i32 500101702
  br label %.backedge

156:                                              ; preds = %19
  %157 = sext i32 %.0100 to i64
  %158 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %157, i32 0
  %159 = load i32, i32* %158, align 8
  %160 = icmp eq i32 %159, %1
  store i1 %160, i1* %6, align 1
  %161 = load i32, i32* @x.2, align 4
  %162 = load i32, i32* @y.3, align 4
  %163 = add i32 %161, -1
  %164 = mul i32 %163, %161
  %165 = and i32 %164, 1
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %167, %166
  %169 = select i1 %168, i32 297894065, i32 500101702
  br label %.backedge

170:                                              ; preds = %19
  %.0..0..0.84 = load volatile i1, i1* %6, align 1
  %171 = select i1 %.0..0..0.84, i32 -856564546, i32 -464296514
  br label %.backedge

172:                                              ; preds = %19
  %173 = load i32, i32* @x.2, align 4
  %174 = load i32, i32* @y.3, align 4
  %175 = add i32 %173, -1
  %176 = mul i32 %175, %173
  %177 = and i32 %176, 1
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %179, %178
  %181 = select i1 %180, i32 455118891, i32 -1020098294
  br label %.backedge

182:                                              ; preds = %19
  %183 = load i32, i32* @x.2, align 4
  %184 = load i32, i32* @y.3, align 4
  %185 = add i32 %183, -1
  %186 = mul i32 %185, %183
  %187 = and i32 %186, 1
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %189, %188
  %191 = select i1 %190, i32 600701371, i32 -1020098294
  br label %.backedge

192:                                              ; preds = %19
  br label %.backedge

193:                                              ; preds = %19
  %194 = sext i32 %.098 to i64
  %195 = getelementptr inbounds [2005 x i32], [2005 x i32]* @f, i64 0, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds [2005 x i32], [2005 x i32]* @h, i64 0, i64 %194
  %198 = load i32, i32* %197, align 4
  %199 = add i32 %198, %196
  %200 = ashr i32 %21, 1
  %201 = icmp sgt i32 %199, %200
  %202 = select i1 %201, i32 991423935, i32 1982684284
  br label %.backedge

203:                                              ; preds = %19
  br label %.backedge

204:                                              ; preds = %19
  br label %.backedge

205:                                              ; preds = %19
  %206 = sext i32 %.0100 to i64
  %207 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %206, i32 1
  %208 = load i32, i32* %207, align 4
  br label %.backedge

209:                                              ; preds = %19
  %210 = icmp eq i32 %.0104, -1
  %211 = select i1 %210, i32 -426143279, i32 -1378630073
  br label %.backedge

212:                                              ; preds = %19
  %213 = load i32, i32* @x.2, align 4
  %214 = load i32, i32* @y.3, align 4
  %215 = add i32 %213, -1
  %216 = mul i32 %215, %213
  %217 = and i32 %216, 1
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %219, %218
  %221 = select i1 %220, i32 -934427442, i32 187686369
  br label %.backedge

222:                                              ; preds = %19
  %223 = load i32, i32* @x.2, align 4
  %224 = load i32, i32* @y.3, align 4
  %225 = add i32 %223, -1
  %226 = mul i32 %225, %223
  %227 = and i32 %226, 1
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %229, %228
  %231 = select i1 %230, i32 1127766505, i32 187686369
  br label %.backedge

232:                                              ; preds = %19
  br label %.backedge

233:                                              ; preds = %19
  %234 = load i32, i32* @x.2, align 4
  %235 = load i32, i32* @y.3, align 4
  %236 = add i32 %234, -1
  %237 = mul i32 %236, %234
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %240, %239
  %242 = select i1 %241, i32 985801897, i32 2109454824
  br label %.backedge

243:                                              ; preds = %19
  %244 = load i32, i32* %17, align 4
  %245 = load i32, i32* @x.2, align 4
  %246 = load i32, i32* @y.3, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 -552769947, i32 2109454824
  br label %.backedge

254:                                              ; preds = %19
  br label %.backedge

255:                                              ; preds = %19
  %256 = load i32, i32* @x.2, align 4
  %257 = load i32, i32* @y.3, align 4
  %258 = add i32 %256, -1
  %259 = mul i32 %258, %256
  %260 = and i32 %259, 1
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %262, %261
  %264 = select i1 %263, i32 -150899324, i32 1673892505
  br label %.backedge

265:                                              ; preds = %19
  %266 = icmp ne i32 %.096, 0
  store i1 %266, i1* %5, align 1
  %267 = load i32, i32* @x.2, align 4
  %268 = load i32, i32* @y.3, align 4
  %269 = add i32 %267, -1
  %270 = mul i32 %269, %267
  %271 = and i32 %270, 1
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %273, %272
  %275 = select i1 %274, i32 130109167, i32 1673892505
  br label %.backedge

276:                                              ; preds = %19
  %.0..0..0.85 = load volatile i1, i1* %5, align 1
  %277 = select i1 %.0..0..0.85, i32 -2141750552, i32 -16667331
  br label %.backedge

278:                                              ; preds = %19
  %279 = sext i32 %.096 to i64
  %280 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %279, i32 0
  %281 = load i32, i32* %280, align 8
  %282 = icmp eq i32 %281, %1
  %283 = select i1 %282, i32 579041510, i32 212433435
  br label %.backedge

284:                                              ; preds = %19
  %285 = icmp eq i32 %.094, %.0104
  %286 = select i1 %285, i32 579041510, i32 627510241
  br label %.backedge

287:                                              ; preds = %19
  %288 = load i32, i32* @x.2, align 4
  %289 = load i32, i32* @y.3, align 4
  %290 = add i32 %288, -1
  %291 = mul i32 %290, %288
  %292 = and i32 %291, 1
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %294, %293
  %296 = select i1 %295, i32 847052656, i32 1491027226
  br label %.backedge

297:                                              ; preds = %19
  %298 = load i32, i32* @x.2, align 4
  %299 = load i32, i32* @y.3, align 4
  %300 = add i32 %298, -1
  %301 = mul i32 %300, %298
  %302 = and i32 %301, 1
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %304, %303
  %306 = select i1 %305, i32 1301196903, i32 1491027226
  br label %.backedge

307:                                              ; preds = %19
  br label %.backedge

308:                                              ; preds = %19
  %309 = sext i32 %.094 to i64
  %310 = getelementptr inbounds [2005 x i32], [2005 x i32]* @g, i64 0, i64 %309
  %311 = load i32, i32* %310, align 4
  %312 = getelementptr inbounds [2005 x i32], [2005 x i32]* @h, i64 0, i64 %309
  %313 = load i32, i32* %312, align 4
  %314 = add i32 %311, %.0102
  %315 = add i32 %314, %313
  br label %.backedge

316:                                              ; preds = %19
  %317 = sext i32 %.096 to i64
  %318 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %317, i32 1
  %319 = load i32, i32* %318, align 4
  br label %.backedge

320:                                              ; preds = %19
  %321 = load i32, i32* @x.2, align 4
  %322 = load i32, i32* @y.3, align 4
  %323 = add i32 %321, -1
  %324 = mul i32 %323, %321
  %325 = and i32 %324, 1
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %327, %326
  %329 = select i1 %328, i32 -221496351, i32 2057849432
  br label %.backedge

330:                                              ; preds = %19
  %331 = sext i32 %.0104 to i64
  %332 = getelementptr inbounds [2005 x i32], [2005 x i32]* @f, i64 0, i64 %331
  %333 = load i32, i32* %332, align 4
  %334 = getelementptr inbounds [2005 x i32], [2005 x i32]* @h, i64 0, i64 %331
  %335 = load i32, i32* %334, align 4
  %336 = add i32 %335, %333
  %337 = icmp slt i32 %.0102, %336
  store i1 %337, i1* %4, align 1
  %338 = load i32, i32* @x.2, align 4
  %339 = load i32, i32* @y.3, align 4
  %340 = add i32 %338, -1
  %341 = mul i32 %340, %338
  %342 = and i32 %341, 1
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %344, %343
  %346 = select i1 %345, i32 -698687470, i32 2057849432
  br label %.backedge

347:                                              ; preds = %19
  %.0..0..0.86 = load volatile i1, i1* %4, align 1
  %348 = select i1 %.0..0..0.86, i32 1167252757, i32 -616053537
  br label %.backedge

349:                                              ; preds = %19
  store i8 0, i8* @flag, align 1
  br label %.backedge

350:                                              ; preds = %19
  br label %.backedge

351:                                              ; preds = %19
  br label %.backedge

352:                                              ; preds = %19
  %353 = load i32, i32* %17, align 4
  br label %.backedge

354:                                              ; preds = %19
  %355 = load i32, i32* @x.2, align 4
  %356 = load i32, i32* @y.3, align 4
  %357 = add i32 %355, -1
  %358 = mul i32 %357, %355
  %359 = and i32 %358, 1
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %361, %360
  %363 = select i1 %362, i32 -452926102, i32 1885183653
  br label %.backedge

364:                                              ; preds = %19
  %365 = icmp ne i32 %.090, 0
  store i1 %365, i1* %3, align 1
  %366 = load i32, i32* @x.2, align 4
  %367 = load i32, i32* @y.3, align 4
  %368 = add i32 %366, -1
  %369 = mul i32 %368, %366
  %370 = and i32 %369, 1
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %372, %371
  %374 = select i1 %373, i32 -1638281321, i32 1885183653
  br label %.backedge

375:                                              ; preds = %19
  %.0..0..0.87 = load volatile i1, i1* %3, align 1
  %376 = select i1 %.0..0..0.87, i32 139116603, i32 1418863981
  br label %.backedge

377:                                              ; preds = %19
  %378 = sext i32 %.090 to i64
  %379 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %378, i32 0
  %380 = load i32, i32* %379, align 8
  %381 = icmp eq i32 %380, %1
  %382 = select i1 %381, i32 -546379876, i32 -1167600767
  br label %.backedge

383:                                              ; preds = %19
  br label %.backedge

384:                                              ; preds = %19
  %385 = sext i32 %.088 to i64
  %386 = getelementptr inbounds [2005 x i32], [2005 x i32]* @f, i64 0, i64 %385
  %387 = load i32, i32* %386, align 4
  %388 = getelementptr inbounds [2005 x i32], [2005 x i32]* @h, i64 0, i64 %385
  %389 = load i32, i32* %388, align 4
  %390 = add i32 %389, %387
  %391 = ashr i32 %22, 1
  %392 = icmp sgt i32 %390, %391
  %393 = select i1 %392, i32 1004359186, i32 799926215
  br label %.backedge

394:                                              ; preds = %19
  %395 = sext i32 %.088 to i64
  %396 = getelementptr inbounds [2005 x i32], [2005 x i32]* @f, i64 0, i64 %395
  %397 = load i32, i32* %396, align 4
  %398 = getelementptr inbounds [2005 x i32], [2005 x i32]* @h, i64 0, i64 %395
  %399 = load i32, i32* %398, align 4
  %400 = add i32 %399, %397
  br label %.backedge

401:                                              ; preds = %19
  br label %.backedge

402:                                              ; preds = %19
  %403 = sext i32 %.090 to i64
  %404 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %403, i32 1
  %405 = load i32, i32* %404, align 4
  br label %.backedge

406:                                              ; preds = %19
  %407 = icmp eq i32 %.092, -1
  %408 = select i1 %407, i32 -886431170, i32 696851063
  br label %.backedge

409:                                              ; preds = %19
  %410 = and i32 %23, 1
  store i32 %410, i32* %11, align 4
  br label %.backedge

411:                                              ; preds = %19
  %412 = load i32, i32* @x.2, align 4
  %413 = load i32, i32* @y.3, align 4
  %414 = add i32 %412, -1
  %415 = mul i32 %414, %412
  %416 = and i32 %415, 1
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %418, %417
  %420 = select i1 %419, i32 -756361360, i32 1980613639
  br label %.backedge

421:                                              ; preds = %19
  %factor116 = shl i32 %.092, 1
  %422 = sub i32 %factor116, %23
  store i32 %422, i32* %11, align 4
  %423 = load i32, i32* @x.2, align 4
  %424 = load i32, i32* @y.3, align 4
  %425 = add i32 %423, -1
  %426 = mul i32 %425, %423
  %427 = and i32 %426, 1
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %429, %428
  %431 = select i1 %430, i32 1000251707, i32 1980613639
  br label %.backedge

432:                                              ; preds = %19
  br label %.backedge

433:                                              ; preds = %19
  br label %.backedge

434:                                              ; preds = %19
  ret void

435:                                              ; preds = %19
  %436 = sext i32 %.0108 to i64
  %437 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %436, i32 0
  %438 = load i32, i32* %437, align 8
  br label %.backedge

439:                                              ; preds = %19
  store i8 0, i8* @flag, align 1
  br label %.backedge

440:                                              ; preds = %19
  %441 = load i32, i32* %17, align 4
  br label %.backedge

442:                                              ; preds = %19
  br label %.backedge

443:                                              ; preds = %19
  %444 = sext i32 %.0100 to i64
  %445 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %444, i32 0
  %446 = load i32, i32* %445, align 8
  br label %.backedge

447:                                              ; preds = %19
  br label %.backedge

448:                                              ; preds = %19
  br label %.backedge

449:                                              ; preds = %19
  %450 = load i32, i32* %17, align 4
  br label %.backedge

451:                                              ; preds = %19
  br label %.backedge

452:                                              ; preds = %19
  br label %.backedge

453:                                              ; preds = %19
  br label %.backedge

454:                                              ; preds = %19
  br label %.backedge

455:                                              ; preds = %19
  %factor = shl i32 %.092, 1
  %456 = sub i32 %factor, %23
  store i32 %456, i32* %11, align 4
  br label %.backedge
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = tail call i32 @_Z4readv()
  store i32 %6, i32* @n, align 4
  %7 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2005 x i8], [2005 x i8]* @s, i64 0, i64 1))
  br label %8

8:                                                ; preds = %.backedge, %0
  %.023 = phi i32 [ 2, %0 ], [ %.023.be, %.backedge ]
  %.021 = phi i32 [ undef, %0 ], [ %.021.be, %.backedge ]
  %.019 = phi i32 [ -1671098826, %0 ], [ %.019.be, %.backedge ]
  %.0 = phi i32 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.019, label %.backedge [
    i32 -1671098826, label %9
    i32 1264933446, label %12
    i32 -487742307, label %15
    i32 -1912262988, label %25
    i32 -1010358479, label %36
    i32 -1469687341, label %37
    i32 -1951014141, label %38
    i32 -1636108153, label %48
    i32 -1037415179, label %60
    i32 -889703808, label %62
    i32 1562744316, label %72
    i32 -1304598544, label %85
    i32 -1895915148, label %87
    i32 1516651884, label %94
    i32 1198294015, label %95
    i32 1580046521, label %97
    i32 1617708158, label %101
    i32 -402186272, label %111
    i32 615990138, label %122
    i32 175240201, label %123
    i32 -65082563, label %124
    i32 -973103757, label %126
    i32 -867257973, label %127
    i32 387405445, label %128
    i32 1914453658, label %129
  ]

.backedge:                                        ; preds = %8, %129, %128, %127, %126, %123, %122, %111, %101, %97, %95, %94, %87, %85, %72, %62, %60, %48, %38, %37, %36, %25, %15, %12, %9
  %.023.be = phi i32 [ %.023, %8 ], [ %.023, %129 ], [ %.023, %128 ], [ %.023, %127 ], [ %.neg, %126 ], [ %.023, %123 ], [ %.023, %122 ], [ %.023, %111 ], [ %.023, %101 ], [ %.023, %97 ], [ %.023, %95 ], [ %.023, %94 ], [ %.023, %87 ], [ %.023, %85 ], [ %.023, %72 ], [ %.023, %62 ], [ %.023, %60 ], [ %.023, %48 ], [ %.023, %38 ], [ %.023, %37 ], [ %.023, %36 ], [ %26, %25 ], [ %.023, %15 ], [ %.023, %12 ], [ %.023, %9 ]
  %.021.be = phi i32 [ %.021, %8 ], [ %.021, %129 ], [ %.021, %128 ], [ %.021, %127 ], [ %.021, %126 ], [ %.021, %123 ], [ %.021, %122 ], [ %.021, %111 ], [ %.021, %101 ], [ %.021, %97 ], [ %96, %95 ], [ %.021, %94 ], [ %.021, %87 ], [ %.021, %85 ], [ %.021, %72 ], [ %.021, %62 ], [ %.021, %60 ], [ %.021, %48 ], [ %.021, %38 ], [ 1, %37 ], [ %.021, %36 ], [ %.021, %25 ], [ %.021, %15 ], [ %.021, %12 ], [ %.021, %9 ]
  %.019.be = phi i32 [ %.019, %8 ], [ -402186272, %129 ], [ 1562744316, %128 ], [ -1636108153, %127 ], [ -1912262988, %126 ], [ -65082563, %123 ], [ -65082563, %122 ], [ %121, %111 ], [ %110, %101 ], [ %100, %97 ], [ -1951014141, %95 ], [ 1198294015, %94 ], [ 1516651884, %87 ], [ %86, %85 ], [ %84, %72 ], [ %71, %62 ], [ %61, %60 ], [ %59, %48 ], [ %47, %38 ], [ -1951014141, %37 ], [ -1671098826, %36 ], [ %35, %25 ], [ %24, %15 ], [ -487742307, %12 ], [ %11, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ %.0, %129 ], [ %.0, %128 ], [ %.0, %127 ], [ %.0, %126 ], [ -1, %123 ], [ %.0..0..0.18, %122 ], [ %.0, %111 ], [ %.0, %101 ], [ %.0, %97 ], [ %.0, %95 ], [ %.0, %94 ], [ %.0, %87 ], [ %.0, %85 ], [ %.0, %72 ], [ %.0, %62 ], [ %.0, %60 ], [ %.0, %48 ], [ %.0, %38 ], [ %.0, %37 ], [ %.0, %36 ], [ %.0, %25 ], [ %.0, %15 ], [ %.0, %12 ], [ %.0, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.023, %10
  %11 = select i1 %.not, i32 -1469687341, i32 1264933446
  br label %.backedge

12:                                               ; preds = %8
  %13 = call i32 @_Z4readv()
  %14 = call i32 @_Z4readv()
  call void @_Z8add_edgeii(i32 %13, i32 %14)
  call void @_Z8add_edgeii(i32 %14, i32 %13)
  br label %.backedge

15:                                               ; preds = %8
  %16 = load i32, i32* @x.4, align 4
  %17 = load i32, i32* @y.5, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -1912262988, i32 -973103757
  br label %.backedge

25:                                               ; preds = %8
  %26 = add i32 %.023, 1
  %27 = load i32, i32* @x.4, align 4
  %28 = load i32, i32* @y.5, align 4
  %29 = add i32 %27, -1
  %30 = mul i32 %29, %27
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %33, %32
  %35 = select i1 %34, i32 -1010358479, i32 -973103757
  br label %.backedge

36:                                               ; preds = %8
  br label %.backedge

37:                                               ; preds = %8
  store i32 1000000000, i32* %4, align 4
  br label %.backedge

38:                                               ; preds = %8
  %39 = load i32, i32* @x.4, align 4
  %40 = load i32, i32* @y.5, align 4
  %41 = add i32 %39, -1
  %42 = mul i32 %41, %39
  %43 = and i32 %42, 1
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %45, %44
  %47 = select i1 %46, i32 -1636108153, i32 -867257973
  br label %.backedge

48:                                               ; preds = %8
  %49 = load i32, i32* @n, align 4
  %50 = icmp sle i32 %.021, %49
  store i1 %50, i1* %3, align 1
  %51 = load i32, i32* @x.4, align 4
  %52 = load i32, i32* @y.5, align 4
  %53 = add i32 %51, -1
  %54 = mul i32 %53, %51
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %57, %56
  %59 = select i1 %58, i32 -1037415179, i32 -867257973
  br label %.backedge

60:                                               ; preds = %8
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %61 = select i1 %.0..0..0., i32 -889703808, i32 1580046521
  br label %.backedge

62:                                               ; preds = %8
  %63 = load i32, i32* @x.4, align 4
  %64 = load i32, i32* @y.5, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 1562744316, i32 387405445
  br label %.backedge

72:                                               ; preds = %8
  store i32 %.021, i32* @root, align 4
  store i8 1, i8* @flag, align 1
  call void @_Z3dfsii(i32 %.021, i32 0)
  %73 = load i8, i8* @flag, align 1
  %74 = and i8 %73, 1
  %75 = icmp ne i8 %74, 0
  store i1 %75, i1* %2, align 1
  %76 = load i32, i32* @x.4, align 4
  %77 = load i32, i32* @y.5, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 -1304598544, i32 387405445
  br label %.backedge

85:                                               ; preds = %8
  %.0..0..0.17 = load volatile i1, i1* %2, align 1
  %86 = select i1 %.0..0..0.17, i32 -1895915148, i32 1516651884
  br label %.backedge

87:                                               ; preds = %8
  %88 = sext i32 %.021 to i64
  %89 = getelementptr inbounds [2005 x i32], [2005 x i32]* @g, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = ashr i32 %90, 1
  store i32 %91, i32* %5, align 4
  %92 = call dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* nonnull dereferenceable(4) %4, i32* nonnull dereferenceable(4) %5)
  %93 = load i32, i32* %92, align 4
  store i32 %93, i32* %4, align 4
  br label %.backedge

94:                                               ; preds = %8
  br label %.backedge

95:                                               ; preds = %8
  %96 = add i32 %.021, 1
  br label %.backedge

97:                                               ; preds = %8
  %98 = load i32, i32* %4, align 4
  %99 = icmp slt i32 %98, 1000000000
  %100 = select i1 %99, i32 1617708158, i32 175240201
  br label %.backedge

101:                                              ; preds = %8
  %102 = load i32, i32* @x.4, align 4
  %103 = load i32, i32* @y.5, align 4
  %104 = add i32 %102, -1
  %105 = mul i32 %104, %102
  %106 = and i32 %105, 1
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %108, %107
  %110 = select i1 %109, i32 -402186272, i32 1914453658
  br label %.backedge

111:                                              ; preds = %8
  %112 = load i32, i32* %4, align 4
  store i32 %112, i32* %1, align 4
  %113 = load i32, i32* @x.4, align 4
  %114 = load i32, i32* @y.5, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 615990138, i32 1914453658
  br label %.backedge

122:                                              ; preds = %8
  %.0..0..0.18 = load volatile i32, i32* %1, align 4
  br label %.backedge

123:                                              ; preds = %8
  br label %.backedge

124:                                              ; preds = %8
  %125 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %.0)
  ret i32 0

126:                                              ; preds = %8
  %.neg = add i32 %.023, 1
  br label %.backedge

127:                                              ; preds = %8
  br label %.backedge

128:                                              ; preds = %8
  store i32 %.021, i32* @root, align 4
  store i8 1, i8* @flag, align 1
  call void @_Z3dfsii(i32 %.021, i32 0)
  br label %.backedge

129:                                              ; preds = %8
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z4readv() local_unnamed_addr #0 comdat {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = tail call i32 @getchar()
  %4 = trunc i32 %3 to i8
  br label %5

5:                                                ; preds = %.backedge, %0
  %.017 = phi i32 [ 0, %0 ], [ %.017.be, %.backedge ]
  %.015 = phi i32 [ 1, %0 ], [ %.015.be, %.backedge ]
  %.013 = phi i8 [ %4, %0 ], [ %.013.be, %.backedge ]
  %.0 = phi i32 [ 1306818305, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1306818305, label %6
    i32 853611892, label %16
    i32 -982501128, label %27
    i32 1982056772, label %29
    i32 1796350207, label %39
    i32 -642035271, label %50
    i32 -1778421837, label %52
    i32 1262904651, label %62
    i32 377712483, label %72
    i32 1400185476, label %73
    i32 713719283, label %83
    i32 -1705229554, label %95
    i32 -454180258, label %96
    i32 -2095077529, label %97
    i32 2130193664, label %100
    i32 432939090, label %110
    i32 -1597397789, label %126
    i32 -1668894257, label %127
    i32 1289922440, label %129
    i32 -270332117, label %130
    i32 -1799063659, label %131
    i32 1027170610, label %132
    i32 -1384857791, label %135
  ]

.backedge:                                        ; preds = %5, %135, %132, %131, %130, %129, %126, %110, %100, %97, %96, %95, %83, %73, %72, %62, %52, %50, %39, %29, %27, %16, %6
  %.017.be = phi i32 [ %.017, %5 ], [ %139, %135 ], [ %.017, %132 ], [ %.017, %131 ], [ %.017, %130 ], [ %.017, %129 ], [ %.017, %126 ], [ %114, %110 ], [ %.017, %100 ], [ %.017, %97 ], [ %.017, %96 ], [ %.017, %95 ], [ %.017, %83 ], [ %.017, %73 ], [ %.017, %72 ], [ %.017, %62 ], [ %.017, %52 ], [ %.017, %50 ], [ %.017, %39 ], [ %.017, %29 ], [ %.017, %27 ], [ %.017, %16 ], [ %.017, %6 ]
  %.015.be = phi i32 [ %.015, %5 ], [ %.015, %135 ], [ %.015, %132 ], [ -1, %131 ], [ %.015, %130 ], [ %.015, %129 ], [ %.015, %126 ], [ %.015, %110 ], [ %.015, %100 ], [ %.015, %97 ], [ %.015, %96 ], [ %.015, %95 ], [ %.015, %83 ], [ %.015, %73 ], [ %.015, %72 ], [ -1, %62 ], [ %.015, %52 ], [ %.015, %50 ], [ %.015, %39 ], [ %.015, %29 ], [ %.015, %27 ], [ %.015, %16 ], [ %.015, %6 ]
  %.013.be = phi i8 [ %.013, %5 ], [ %141, %135 ], [ %134, %132 ], [ %.013, %131 ], [ %.013, %130 ], [ %.013, %129 ], [ %.013, %126 ], [ %116, %110 ], [ %.013, %100 ], [ %.013, %97 ], [ %.013, %96 ], [ %.013, %95 ], [ %85, %83 ], [ %.013, %73 ], [ %.013, %72 ], [ %.013, %62 ], [ %.013, %52 ], [ %.013, %50 ], [ %.013, %39 ], [ %.013, %29 ], [ %.013, %27 ], [ %.013, %16 ], [ %.013, %6 ]
  %.0.be = phi i32 [ %.0, %5 ], [ 432939090, %135 ], [ 713719283, %132 ], [ 1262904651, %131 ], [ 1796350207, %130 ], [ 853611892, %129 ], [ -2095077529, %126 ], [ %125, %110 ], [ %109, %100 ], [ %99, %97 ], [ -2095077529, %96 ], [ 1306818305, %95 ], [ %94, %83 ], [ %82, %73 ], [ 1400185476, %72 ], [ %71, %62 ], [ %61, %52 ], [ %51, %50 ], [ %49, %39 ], [ %38, %29 ], [ %28, %27 ], [ %26, %16 ], [ %15, %6 ]
  br label %5

6:                                                ; preds = %5
  %7 = load i32, i32* @x.6, align 4
  %8 = load i32, i32* @y.7, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 853611892, i32 1289922440
  br label %.backedge

16:                                               ; preds = %5
  %17 = sext i8 %.013 to i32
  %isdigittmp19 = add nsw i32 %17, -48
  %isdigit20 = icmp ugt i32 %isdigittmp19, 9
  store i1 %isdigit20, i1* %2, align 1
  %18 = load i32, i32* @x.6, align 4
  %19 = load i32, i32* @y.7, align 4
  %20 = add i32 %18, -1
  %21 = mul i32 %20, %18
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %24, %23
  %26 = select i1 %25, i32 -982501128, i32 1289922440
  br label %.backedge

27:                                               ; preds = %5
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %28 = select i1 %.0..0..0., i32 1982056772, i32 -454180258
  br label %.backedge

29:                                               ; preds = %5
  %30 = load i32, i32* @x.6, align 4
  %31 = load i32, i32* @y.7, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 1796350207, i32 -270332117
  br label %.backedge

39:                                               ; preds = %5
  %40 = icmp eq i8 %.013, 45
  store i1 %40, i1* %1, align 1
  %41 = load i32, i32* @x.6, align 4
  %42 = load i32, i32* @y.7, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 -642035271, i32 -270332117
  br label %.backedge

50:                                               ; preds = %5
  %.0..0..0.12 = load volatile i1, i1* %1, align 1
  %51 = select i1 %.0..0..0.12, i32 -1778421837, i32 1400185476
  br label %.backedge

52:                                               ; preds = %5
  %53 = load i32, i32* @x.6, align 4
  %54 = load i32, i32* @y.7, align 4
  %55 = add i32 %53, -1
  %56 = mul i32 %55, %53
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %59, %58
  %61 = select i1 %60, i32 1262904651, i32 -1799063659
  br label %.backedge

62:                                               ; preds = %5
  %63 = load i32, i32* @x.6, align 4
  %64 = load i32, i32* @y.7, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 377712483, i32 -1799063659
  br label %.backedge

72:                                               ; preds = %5
  br label %.backedge

73:                                               ; preds = %5
  %74 = load i32, i32* @x.6, align 4
  %75 = load i32, i32* @y.7, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 713719283, i32 1027170610
  br label %.backedge

83:                                               ; preds = %5
  %84 = tail call i32 @getchar()
  %85 = trunc i32 %84 to i8
  %86 = load i32, i32* @x.6, align 4
  %87 = load i32, i32* @y.7, align 4
  %88 = add i32 %86, -1
  %89 = mul i32 %88, %86
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %92, %91
  %94 = select i1 %93, i32 -1705229554, i32 1027170610
  br label %.backedge

95:                                               ; preds = %5
  br label %.backedge

96:                                               ; preds = %5
  br label %.backedge

97:                                               ; preds = %5
  %98 = sext i8 %.013 to i32
  %isdigittmp = add nsw i32 %98, -48
  %isdigit = icmp ult i32 %isdigittmp, 10
  %99 = select i1 %isdigit, i32 2130193664, i32 -1668894257
  br label %.backedge

100:                                              ; preds = %5
  %101 = load i32, i32* @x.6, align 4
  %102 = load i32, i32* @y.7, align 4
  %103 = add i32 %101, -1
  %104 = mul i32 %103, %101
  %105 = and i32 %104, 1
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %107, %106
  %109 = select i1 %108, i32 432939090, i32 -1384857791
  br label %.backedge

110:                                              ; preds = %5
  %111 = mul nsw i32 %.017, 10
  %112 = sext i8 %.013 to i32
  %113 = add i32 %111, -48
  %114 = add i32 %113, %112
  %115 = tail call i32 @getchar()
  %116 = trunc i32 %115 to i8
  %117 = load i32, i32* @x.6, align 4
  %118 = load i32, i32* @y.7, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 -1597397789, i32 -1384857791
  br label %.backedge

126:                                              ; preds = %5
  br label %.backedge

127:                                              ; preds = %5
  %128 = mul nsw i32 %.015, %.017
  ret i32 %128

129:                                              ; preds = %5
  br label %.backedge

130:                                              ; preds = %5
  br label %.backedge

131:                                              ; preds = %5
  br label %.backedge

132:                                              ; preds = %5
  %133 = tail call i32 @getchar()
  %134 = trunc i32 %133 to i8
  br label %.backedge

135:                                              ; preds = %5
  %136 = mul nsw i32 %.017, 10
  %137 = sext i8 %.013 to i32
  %138 = add i32 %136, -48
  %139 = add i32 %138, %137
  %140 = tail call i32 @getchar()
  %141 = trunc i32 %140 to i8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_Z8add_edgeii(i32 %0, i32 %1) local_unnamed_addr #7 comdat {
  %3 = load i32, i32* @ecnt, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* @ecnt, align 4
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %5, i32 0
  store i32 %1, i32* %6, align 8
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds [2005 x i32], [2005 x i32]* @head, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds [4010 x %struct.Edge], [4010 x %struct.Edge]* @e, i64 0, i64 %5, i32 1
  store i32 %9, i32* %10, align 4
  store i32 %4, i32* %8, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* dereferenceable(4) %0, i32* dereferenceable(4) %1) local_unnamed_addr #7 comdat {
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* %1, align 4
  store i32 %6, i32* %5, align 4
  %7 = load i32, i32* %0, align 4
  store i32 %7, i32* %4, align 4
  %8 = load i32, i32* @x.10, align 4
  %9 = load i32, i32* @y.11, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 71265990, i32 -32623548
  %17 = select i1 %15, i32 -443114099, i32 -32623548
  br label %.outer

.outer:                                           ; preds = %18, %2
  %.09.ph = phi i32* [ undef, %2 ], [ %.09.ph14, %18 ]
  %.0.ph = phi i32 [ 1039441641, %2 ], [ %16, %18 ]
  br label %.outer13

.outer13:                                         ; preds = %.outer13.backedge, %.outer
  %.09.ph14 = phi i32* [ %.09.ph, %.outer ], [ %.09.ph14.be, %.outer13.backedge ]
  %.0.ph15 = phi i32 [ %.0.ph, %.outer ], [ -739233741, %.outer13.backedge ]
  br label %.outer16

.outer16:                                         ; preds = %.outer16.backedge, %.outer13
  %.0.ph17 = phi i32 [ %.0.ph15, %.outer13 ], [ %.0.ph17.be, %.outer16.backedge ]
  br label %18

18:                                               ; preds = %.outer16, %18
  switch i32 %.0.ph17, label %18 [
    i32 1039441641, label %19
    i32 2095883093, label %.outer13.backedge
    i32 -1905347627, label %22
    i32 -739233741, label %.outer16.backedge
    i32 -443114099, label %.outer
    i32 71265990, label %23
    i32 -32623548, label %24
  ]

19:                                               ; preds = %18
  %.0..0..0.6 = load volatile i32, i32* %5, align 4
  %.0..0..0.7 = load volatile i32, i32* %4, align 4
  %20 = icmp slt i32 %.0..0..0.6, %.0..0..0.7
  %21 = select i1 %20, i32 2095883093, i32 -1905347627
  br label %.outer16.backedge

22:                                               ; preds = %18
  br label %.outer13.backedge

.outer13.backedge:                                ; preds = %18, %22
  %.09.ph14.be = phi i32* [ %0, %22 ], [ %1, %18 ]
  br label %.outer13

23:                                               ; preds = %18
  store i32* %.09.ph, i32** %3, align 8
  %.0..0..0.8 = load volatile i32*, i32** %3, align 8
  ret i32* %.0..0..0.8

24:                                               ; preds = %18
  br label %.outer16.backedge

.outer16.backedge:                                ; preds = %18, %24, %19
  %.0.ph17.be = phi i32 [ %21, %19 ], [ -443114099, %24 ], [ %17, %18 ]
  br label %.outer16
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s488032173.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.12, align 4
  %4 = load i32, i32* @y.13, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -270059418, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -270059418, label %11
    i32 1750686158, label %14
    i32 -1995726748, label %24
    i32 1253417280, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1750686158, i32 1253417280
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.12, align 4
  %16 = load i32, i32* @y.13, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -1995726748, i32 1253417280
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 1750686158, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
