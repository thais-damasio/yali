; ModuleID = 'build_ollvm/programs/p03247/s951688654.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s951688654.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3absx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i64 0, align 8
@x = global [10005 x i64] zeroinitializer, align 16
@y = global [10005 x i64] zeroinitializer, align 16
@d = local_unnamed_addr global [1000 x i64] zeroinitializer, align 16
@flag = local_unnamed_addr global i8 0, align 1
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"31\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"32\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%lld \00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s951688654.cpp, i8* null }]
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.5, align 4
  %4 = load i32, i32* @y.6, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1074446565, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1074446565, label %11
    i32 1789212789, label %14
    i32 445188590, label %25
    i32 -1213950764, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1789212789, i32 -1213950764
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  %16 = load i32, i32* @x.5, align 4
  %17 = load i32, i32* @y.6, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 445188590, i32 -1213950764
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 1789212789, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline nounwind uwtable
define i64 @_Z3disxxxx(i64 %0, i64 %1, i64 %2, i64 %3) local_unnamed_addr #4 {
  %5 = sub i64 %0, %2
  %6 = tail call i64 @_ZSt3absx(i64 %5)
  %7 = sub i64 %1, %3
  %8 = tail call i64 @_ZSt3absx(i64 %7)
  %9 = add i64 %8, %6
  ret i64 %9
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt3absx(i64 %0) local_unnamed_addr #4 comdat {
  %2 = tail call i64 @llvm.abs.i64(i64 %0, i1 false)
  ret i64 %2
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %8 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) @n)
  br label %9

9:                                                ; preds = %.backedge, %0
  %.0127 = phi i32 [ 0, %0 ], [ %.0127.be, %.backedge ]
  %.0125 = phi i64 [ 1, %0 ], [ %.0125.be, %.backedge ]
  %.0123 = phi i64 [ undef, %0 ], [ %.0123.be, %.backedge ]
  %.0121 = phi i64 [ undef, %0 ], [ %.0121.be, %.backedge ]
  %.0119 = phi i64 [ undef, %0 ], [ %.0119.be, %.backedge ]
  %.0117 = phi i64 [ undef, %0 ], [ %.0117.be, %.backedge ]
  %.0115 = phi i64 [ undef, %0 ], [ %.0115.be, %.backedge ]
  %.0113 = phi i64 [ undef, %0 ], [ %.0113.be, %.backedge ]
  %.0111 = phi i8 [ undef, %0 ], [ %.0111.be, %.backedge ]
  %.0109 = phi i64 [ undef, %0 ], [ %.0109.be, %.backedge ]
  %.0107 = phi i32 [ -463679765, %0 ], [ %.0107.be, %.backedge ]
  %.0 = phi [3 x i8]* [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0107, label %.backedge [
    i32 -463679765, label %10
    i32 -1741451291, label %13
    i32 1120504997, label %23
    i32 -281100241, label %37
    i32 1408001980, label %38
    i32 601735797, label %39
    i32 1459404816, label %46
    i32 1877956155, label %49
    i32 -235098738, label %61
    i32 153617129, label %63
    i32 -953985414, label %64
    i32 1362321992, label %74
    i32 -1854279898, label %85
    i32 -2049509916, label %86
    i32 -244252105, label %90
    i32 794709810, label %91
    i32 708067930, label %92
    i32 229067973, label %95
    i32 -1378799274, label %105
    i32 -1598903909, label %116
    i32 -550586449, label %118
    i32 139848235, label %128
    i32 1603963550, label %143
    i32 1719760090, label %144
    i32 -569690037, label %145
    i32 2076477692, label %155
    i32 1157217548, label %168
    i32 -2084399362, label %170
    i32 -1843992131, label %172
    i32 730978739, label %174
    i32 997245746, label %175
    i32 67198028, label %185
    i32 -803795188, label %197
    i32 -995439256, label %199
    i32 1363367090, label %203
    i32 -1728910657, label %204
    i32 1211699575, label %214
    i32 -1572946436, label %224
    i32 -443921536, label %225
    i32 -545994363, label %228
    i32 -1123245301, label %238
    i32 1254868137, label %247
    i32 -1664604932, label %258
    i32 446244180, label %267
    i32 -58801513, label %278
    i32 -2040363647, label %288
    i32 -1903304661, label %306
    i32 -1020248455, label %307
    i32 771756729, label %317
    i32 191511944, label %336
    i32 1113174824, label %338
    i32 914324231, label %347
    i32 -1788945106, label %357
    i32 -1465574575, label %368
    i32 1644722444, label %370
    i32 1516922419, label %374
    i32 -2114807833, label %377
    i32 189426840, label %381
    i32 1218823697, label %384
    i32 1151620493, label %388
    i32 -1403289027, label %398
    i32 1232021669, label %409
    i32 -671640375, label %411
    i32 406014742, label %421
    i32 52853691, label %434
    i32 1948560326, label %435
    i32 1279685701, label %438
    i32 -907037836, label %440
    i32 -2020315290, label %444
    i32 908730441, label %448
    i32 -171895158, label %458
    i32 -359627631, label %468
    i32 1248109176, label %469
    i32 2003527818, label %473
    i32 -1201746507, label %483
    i32 826170313, label %494
    i32 -1291955621, label %495
    i32 535905342, label %505
    i32 -1874039993, label %516
    i32 -1492502365, label %517
    i32 925887224, label %519
    i32 1239647670, label %520
    i32 -341094779, label %521
    i32 725159451, label %526
    i32 -1510895495, label %528
    i32 -488689420, label %529
    i32 -647635236, label %535
    i32 -577871004, label %536
    i32 -686515133, label %537
    i32 417352730, label %538
    i32 -1313580661, label %547
    i32 -1115586455, label %556
    i32 -2116451676, label %557
    i32 1596925232, label %558
    i32 1662637293, label %562
    i32 -1812769571, label %563
    i32 1340493551, label %565
  ]

.backedge:                                        ; preds = %9, %565, %563, %562, %558, %557, %556, %547, %538, %537, %536, %535, %529, %528, %526, %521, %519, %517, %516, %505, %495, %494, %483, %473, %469, %468, %458, %448, %444, %440, %438, %435, %434, %421, %411, %409, %398, %388, %384, %381, %377, %374, %370, %368, %357, %347, %338, %336, %317, %307, %306, %288, %278, %267, %258, %247, %238, %228, %225, %224, %214, %204, %203, %199, %197, %185, %175, %174, %172, %170, %168, %155, %145, %144, %143, %128, %118, %116, %105, %95, %92, %91, %90, %86, %85, %74, %64, %63, %61, %49, %46, %39, %38, %37, %23, %13, %10
  %.0127.be = phi i32 [ %.0127, %9 ], [ %.0127, %565 ], [ %.0127, %563 ], [ 1, %562 ], [ %.0127, %558 ], [ %.0127, %557 ], [ %.0127, %556 ], [ %.0127, %547 ], [ %.0127, %538 ], [ %.0127, %537 ], [ %.0127, %536 ], [ %.0127, %535 ], [ %.0127, %529 ], [ %.0127, %528 ], [ %.0127, %526 ], [ %.0127, %521 ], [ 0, %519 ], [ %.0127, %517 ], [ %.0127, %516 ], [ %.0127, %505 ], [ %.0127, %495 ], [ %.0127, %494 ], [ %.0127, %483 ], [ %.0127, %473 ], [ %.0127, %469 ], [ %.0127, %468 ], [ 1, %458 ], [ %.0127, %448 ], [ %.0127, %444 ], [ %.0127, %440 ], [ %.0127, %438 ], [ %.0127, %435 ], [ %.0127, %434 ], [ %.0127, %421 ], [ %.0127, %411 ], [ %.0127, %409 ], [ %.0127, %398 ], [ %.0127, %388 ], [ %.0127, %384 ], [ %.0127, %381 ], [ %.0127, %377 ], [ %.0127, %374 ], [ %.0127, %370 ], [ %.0127, %368 ], [ %.0127, %357 ], [ %.0127, %347 ], [ %.0127, %338 ], [ %.0127, %336 ], [ %.0127, %317 ], [ %.0127, %307 ], [ %.0127, %306 ], [ %.0127, %288 ], [ %.0127, %278 ], [ %.0127, %267 ], [ %.0127, %258 ], [ %.0127, %247 ], [ %.0127, %238 ], [ %.0127, %228 ], [ %.0127, %225 ], [ %.0127, %224 ], [ %.0127, %214 ], [ %.0127, %204 ], [ %.0127, %203 ], [ %.0127, %199 ], [ %.0127, %197 ], [ %.0127, %185 ], [ %.0127, %175 ], [ %.0127, %174 ], [ %.0127, %172 ], [ %.0127, %170 ], [ %.0127, %168 ], [ %.0127, %155 ], [ %.0127, %145 ], [ %.0127, %144 ], [ %.0127, %143 ], [ %.0127, %128 ], [ %.0127, %118 ], [ %.0127, %116 ], [ %.0127, %105 ], [ %.0127, %95 ], [ %.0127, %92 ], [ %.0127, %91 ], [ %.0127, %90 ], [ %.0127, %86 ], [ %.0127, %85 ], [ %.0127, %74 ], [ %.0127, %64 ], [ %.0127, %63 ], [ 0, %61 ], [ %.0127, %49 ], [ %.0127, %46 ], [ %.0127, %39 ], [ %.0127, %38 ], [ %.0127, %37 ], [ %.0127, %23 ], [ %.0127, %13 ], [ %.0127, %10 ]
  %.0125.be = phi i64 [ %.0125, %9 ], [ %.0125, %565 ], [ %.0125, %563 ], [ %.0125, %562 ], [ %.0125, %558 ], [ %.0125, %557 ], [ %.0125, %556 ], [ %.0125, %547 ], [ %.0125, %538 ], [ %.0125, %537 ], [ %.0125, %536 ], [ %.0125, %535 ], [ %.0125, %529 ], [ %.0125, %528 ], [ %.0125, %526 ], [ %.0125, %521 ], [ %.0125, %519 ], [ %.0125, %517 ], [ %.0125, %516 ], [ %.0125, %505 ], [ %.0125, %495 ], [ %.0125, %494 ], [ %.0125, %483 ], [ %.0125, %473 ], [ %.0125, %469 ], [ %.0125, %468 ], [ %.0125, %458 ], [ %.0125, %448 ], [ %.0125, %444 ], [ %.0125, %440 ], [ %.0125, %438 ], [ %.0125, %435 ], [ %.0125, %434 ], [ %.0125, %421 ], [ %.0125, %411 ], [ %.0125, %409 ], [ %.0125, %398 ], [ %.0125, %388 ], [ %.0125, %384 ], [ %.0125, %381 ], [ %.0125, %377 ], [ %.0125, %374 ], [ %.0125, %370 ], [ %.0125, %368 ], [ %.0125, %357 ], [ %.0125, %347 ], [ %.0125, %338 ], [ %.0125, %336 ], [ %.0125, %317 ], [ %.0125, %307 ], [ %.0125, %306 ], [ %.0125, %288 ], [ %.0125, %278 ], [ %.0125, %267 ], [ %.0125, %258 ], [ %.0125, %247 ], [ %.0125, %238 ], [ %.0125, %228 ], [ %.0125, %225 ], [ %.0125, %224 ], [ %.0125, %214 ], [ %.0125, %204 ], [ %.0125, %203 ], [ %.0125, %199 ], [ %.0125, %197 ], [ %.0125, %185 ], [ %.0125, %175 ], [ %.0125, %174 ], [ %.0125, %172 ], [ %.0125, %170 ], [ %.0125, %168 ], [ %.0125, %155 ], [ %.0125, %145 ], [ %.0125, %144 ], [ %.0125, %143 ], [ %.0125, %128 ], [ %.0125, %118 ], [ %.0125, %116 ], [ %.0125, %105 ], [ %.0125, %95 ], [ %.0125, %92 ], [ %.0125, %91 ], [ %.0125, %90 ], [ %.0125, %86 ], [ %.0125, %85 ], [ %.0125, %74 ], [ %.0125, %64 ], [ %.0125, %63 ], [ %.0125, %61 ], [ %.0125, %49 ], [ %.0125, %46 ], [ %.0125, %39 ], [ %.neg137, %38 ], [ %.0125, %37 ], [ %.0125, %23 ], [ %.0125, %13 ], [ %.0125, %10 ]
  %.0123.be = phi i64 [ %.0123, %9 ], [ %.0123, %565 ], [ %.0123, %563 ], [ %.0123, %562 ], [ %.0123, %558 ], [ %.0123, %557 ], [ %.0123, %556 ], [ %.0123, %547 ], [ %.0123, %538 ], [ %.0123, %537 ], [ %.0123, %536 ], [ %.0123, %535 ], [ %.0123, %529 ], [ %.0123, %528 ], [ %527, %526 ], [ %.0123, %521 ], [ %.0123, %519 ], [ %.0123, %517 ], [ %.0123, %516 ], [ %.0123, %505 ], [ %.0123, %495 ], [ %.0123, %494 ], [ %.0123, %483 ], [ %.0123, %473 ], [ %.0123, %469 ], [ %.0123, %468 ], [ %.0123, %458 ], [ %.0123, %448 ], [ %.0123, %444 ], [ %.0123, %440 ], [ %.0123, %438 ], [ %.0123, %435 ], [ %.0123, %434 ], [ %.0123, %421 ], [ %.0123, %411 ], [ %.0123, %409 ], [ %.0123, %398 ], [ %.0123, %388 ], [ %.0123, %384 ], [ %.0123, %381 ], [ %.0123, %377 ], [ %.0123, %374 ], [ %.0123, %370 ], [ %.0123, %368 ], [ %.0123, %357 ], [ %.0123, %347 ], [ %.0123, %338 ], [ %.0123, %336 ], [ %.0123, %317 ], [ %.0123, %307 ], [ %.0123, %306 ], [ %.0123, %288 ], [ %.0123, %278 ], [ %.0123, %267 ], [ %.0123, %258 ], [ %.0123, %247 ], [ %.0123, %238 ], [ %.0123, %228 ], [ %.0123, %225 ], [ %.0123, %224 ], [ %.0123, %214 ], [ %.0123, %204 ], [ %.0123, %203 ], [ %.0123, %199 ], [ %.0123, %197 ], [ %.0123, %185 ], [ %.0123, %175 ], [ %.0123, %174 ], [ %.0123, %172 ], [ %.0123, %170 ], [ %.0123, %168 ], [ %.0123, %155 ], [ %.0123, %145 ], [ %.0123, %144 ], [ %.0123, %143 ], [ %.0123, %128 ], [ %.0123, %118 ], [ %.0123, %116 ], [ %.0123, %105 ], [ %.0123, %95 ], [ %.0123, %92 ], [ %.0123, %91 ], [ %.0123, %90 ], [ %.0123, %86 ], [ %.0123, %85 ], [ %75, %74 ], [ %.0123, %64 ], [ %.0123, %63 ], [ %.0123, %61 ], [ %.0123, %49 ], [ %.0123, %46 ], [ 1, %39 ], [ %.0123, %38 ], [ %.0123, %37 ], [ %.0123, %23 ], [ %.0123, %13 ], [ %.0123, %10 ]
  %.0121.be = phi i64 [ %.0121, %9 ], [ %.0121, %565 ], [ %.0121, %563 ], [ %.0121, %562 ], [ %.0121, %558 ], [ %.0121, %557 ], [ %.0121, %556 ], [ %.0121, %547 ], [ %.0121, %538 ], [ %.0121, %537 ], [ %.0121, %536 ], [ %.0121, %535 ], [ %.0121, %529 ], [ %.0121, %528 ], [ %.0121, %526 ], [ %.0121, %521 ], [ %.0121, %519 ], [ %.0121, %517 ], [ %.0121, %516 ], [ %.0121, %505 ], [ %.0121, %495 ], [ %.0121, %494 ], [ %.0121, %483 ], [ %.0121, %473 ], [ %.0121, %469 ], [ %.0121, %468 ], [ %.0121, %458 ], [ %.0121, %448 ], [ %.0121, %444 ], [ %.0121, %440 ], [ %.0121, %438 ], [ %.0121, %435 ], [ %.0121, %434 ], [ %.0121, %421 ], [ %.0121, %411 ], [ %.0121, %409 ], [ %.0121, %398 ], [ %.0121, %388 ], [ %.0121, %384 ], [ %.0121, %381 ], [ %.0121, %377 ], [ %.0121, %374 ], [ %.0121, %370 ], [ %.0121, %368 ], [ %.0121, %357 ], [ %.0121, %347 ], [ %.0121, %338 ], [ %.0121, %336 ], [ %.0121, %317 ], [ %.0121, %307 ], [ %.0121, %306 ], [ %.0121, %288 ], [ %.0121, %278 ], [ %.0121, %267 ], [ %.0121, %258 ], [ %.0121, %247 ], [ %.0121, %238 ], [ %.0121, %228 ], [ %.0121, %225 ], [ %.0121, %224 ], [ %.0121, %214 ], [ %.0121, %204 ], [ %.0121, %203 ], [ %.0121, %199 ], [ %.0121, %197 ], [ %.0121, %185 ], [ %.0121, %175 ], [ %.0121, %174 ], [ %.0121, %172 ], [ %.0121, %170 ], [ %.0121, %168 ], [ %.0121, %155 ], [ %.0121, %145 ], [ %.neg, %144 ], [ %.0121, %143 ], [ %.0121, %128 ], [ %.0121, %118 ], [ %.0121, %116 ], [ %.0121, %105 ], [ %.0121, %95 ], [ 1, %92 ], [ %.0121, %91 ], [ %.0121, %90 ], [ %.0121, %86 ], [ %.0121, %85 ], [ %.0121, %74 ], [ %.0121, %64 ], [ %.0121, %63 ], [ %.0121, %61 ], [ %.0121, %49 ], [ %.0121, %46 ], [ %.0121, %39 ], [ %.0121, %38 ], [ %.0121, %37 ], [ %.0121, %23 ], [ %.0121, %13 ], [ %.0121, %10 ]
  %.0119.be = phi i64 [ %.0119, %9 ], [ %.0119, %565 ], [ %.0119, %563 ], [ %.0119, %562 ], [ %.0119, %558 ], [ %.0119, %557 ], [ %.0119, %556 ], [ %.0119, %547 ], [ %.0119, %538 ], [ %.0119, %537 ], [ %.0119, %536 ], [ %.0119, %535 ], [ %.0119, %529 ], [ %.0119, %528 ], [ %.0119, %526 ], [ %.0119, %521 ], [ %.0119, %519 ], [ %518, %517 ], [ %.0119, %516 ], [ %.0119, %505 ], [ %.0119, %495 ], [ %.0119, %494 ], [ %.0119, %483 ], [ %.0119, %473 ], [ %.0119, %469 ], [ %.0119, %468 ], [ %.0119, %458 ], [ %.0119, %448 ], [ %.0119, %444 ], [ %.0119, %440 ], [ %.0119, %438 ], [ %.0119, %435 ], [ %.0119, %434 ], [ %.0119, %421 ], [ %.0119, %411 ], [ %.0119, %409 ], [ %.0119, %398 ], [ %.0119, %388 ], [ %.0119, %384 ], [ %.0119, %381 ], [ %.0119, %377 ], [ %.0119, %374 ], [ %.0119, %370 ], [ %.0119, %368 ], [ %.0119, %357 ], [ %.0119, %347 ], [ %.0119, %338 ], [ %.0119, %336 ], [ %.0119, %317 ], [ %.0119, %307 ], [ %.0119, %306 ], [ %.0119, %288 ], [ %.0119, %278 ], [ %.0119, %267 ], [ %.0119, %258 ], [ %.0119, %247 ], [ %.0119, %238 ], [ %.0119, %228 ], [ %.0119, %225 ], [ %.0119, %224 ], [ %.0119, %214 ], [ %.0119, %204 ], [ %.0119, %203 ], [ %.0119, %199 ], [ %.0119, %197 ], [ %.0119, %185 ], [ %.0119, %175 ], [ 1, %174 ], [ %.0119, %172 ], [ %.0119, %170 ], [ %.0119, %168 ], [ %.0119, %155 ], [ %.0119, %145 ], [ %.0119, %144 ], [ %.0119, %143 ], [ %.0119, %128 ], [ %.0119, %118 ], [ %.0119, %116 ], [ %.0119, %105 ], [ %.0119, %95 ], [ %.0119, %92 ], [ %.0119, %91 ], [ %.0119, %90 ], [ %.0119, %86 ], [ %.0119, %85 ], [ %.0119, %74 ], [ %.0119, %64 ], [ %.0119, %63 ], [ %.0119, %61 ], [ %.0119, %49 ], [ %.0119, %46 ], [ %.0119, %39 ], [ %.0119, %38 ], [ %.0119, %37 ], [ %.0119, %23 ], [ %.0119, %13 ], [ %.0119, %10 ]
  %.0117.be = phi i64 [ %.0117, %9 ], [ %.0117, %565 ], [ %.0117, %563 ], [ %.0117, %562 ], [ %.0117, %558 ], [ %.0117, %557 ], [ %.0117, %556 ], [ %.0117, %547 ], [ %.0117, %538 ], [ %.0117, %537 ], [ %.0117, %536 ], [ %.0117, %535 ], [ %.0117, %529 ], [ %.0117, %528 ], [ %.0117, %526 ], [ %.0117, %521 ], [ %.0117, %519 ], [ %.0117, %517 ], [ %.0117, %516 ], [ %.0117, %505 ], [ %.0117, %495 ], [ %.0117, %494 ], [ %.0117, %483 ], [ %.0117, %473 ], [ %.0117, %469 ], [ %.0117, %468 ], [ %.0117, %458 ], [ %.0117, %448 ], [ %.0117, %444 ], [ %.0117, %440 ], [ %.0117, %438 ], [ %.0117, %435 ], [ %.0117, %434 ], [ %.0117, %421 ], [ %.0117, %411 ], [ %.0117, %409 ], [ %.0117, %398 ], [ %.0117, %388 ], [ %.0117, %384 ], [ %.0117, %381 ], [ %380, %377 ], [ %.0117, %374 ], [ %373, %370 ], [ %.0117, %368 ], [ %.0117, %357 ], [ %.0117, %347 ], [ %.0117, %338 ], [ %.0117, %336 ], [ %.0117, %317 ], [ %.0117, %307 ], [ %.0117, %306 ], [ %.0117, %288 ], [ %.0117, %278 ], [ %.0117, %267 ], [ %.0117, %258 ], [ %.0117, %247 ], [ %.0117, %238 ], [ %.0117, %228 ], [ %.0117, %225 ], [ %.0117, %224 ], [ %.0117, %214 ], [ %.0117, %204 ], [ 1, %203 ], [ 0, %199 ], [ %.0117, %197 ], [ %.0117, %185 ], [ %.0117, %175 ], [ %.0117, %174 ], [ %.0117, %172 ], [ %.0117, %170 ], [ %.0117, %168 ], [ %.0117, %155 ], [ %.0117, %145 ], [ %.0117, %144 ], [ %.0117, %143 ], [ %.0117, %128 ], [ %.0117, %118 ], [ %.0117, %116 ], [ %.0117, %105 ], [ %.0117, %95 ], [ %.0117, %92 ], [ %.0117, %91 ], [ %.0117, %90 ], [ %.0117, %86 ], [ %.0117, %85 ], [ %.0117, %74 ], [ %.0117, %64 ], [ %.0117, %63 ], [ %.0117, %61 ], [ %.0117, %49 ], [ %.0117, %46 ], [ %.0117, %39 ], [ %.0117, %38 ], [ %.0117, %37 ], [ %.0117, %23 ], [ %.0117, %13 ], [ %.0117, %10 ]
  %.0115.be = phi i64 [ %.0115, %9 ], [ %.0115, %565 ], [ %.0115, %563 ], [ %.0115, %562 ], [ %561, %558 ], [ %.0115, %557 ], [ %.0115, %556 ], [ %.0115, %547 ], [ %.0115, %538 ], [ %.0115, %537 ], [ %.0115, %536 ], [ %.0115, %535 ], [ %.0115, %529 ], [ %.0115, %528 ], [ %.0115, %526 ], [ %.0115, %521 ], [ %.0115, %519 ], [ %.0115, %517 ], [ %.0115, %516 ], [ %.0115, %505 ], [ %.0115, %495 ], [ %.0115, %494 ], [ %.0115, %483 ], [ %.0115, %473 ], [ %.0115, %469 ], [ %.0115, %468 ], [ %.0115, %458 ], [ %.0115, %448 ], [ %.0115, %444 ], [ %.0115, %440 ], [ %.0115, %438 ], [ %.0115, %435 ], [ %.0115, %434 ], [ %424, %421 ], [ %.0115, %411 ], [ %.0115, %409 ], [ %.0115, %398 ], [ %.0115, %388 ], [ %387, %384 ], [ %.0115, %381 ], [ %.0115, %377 ], [ %.0115, %374 ], [ %.0115, %370 ], [ %.0115, %368 ], [ %.0115, %357 ], [ %.0115, %347 ], [ %.0115, %338 ], [ %.0115, %336 ], [ %.0115, %317 ], [ %.0115, %307 ], [ %.0115, %306 ], [ %.0115, %288 ], [ %.0115, %278 ], [ %.0115, %267 ], [ %.0115, %258 ], [ %.0115, %247 ], [ %.0115, %238 ], [ %.0115, %228 ], [ %.0115, %225 ], [ %.0115, %224 ], [ %.0115, %214 ], [ %.0115, %204 ], [ %.0115, %203 ], [ 0, %199 ], [ %.0115, %197 ], [ %.0115, %185 ], [ %.0115, %175 ], [ %.0115, %174 ], [ %.0115, %172 ], [ %.0115, %170 ], [ %.0115, %168 ], [ %.0115, %155 ], [ %.0115, %145 ], [ %.0115, %144 ], [ %.0115, %143 ], [ %.0115, %128 ], [ %.0115, %118 ], [ %.0115, %116 ], [ %.0115, %105 ], [ %.0115, %95 ], [ %.0115, %92 ], [ %.0115, %91 ], [ %.0115, %90 ], [ %.0115, %86 ], [ %.0115, %85 ], [ %.0115, %74 ], [ %.0115, %64 ], [ %.0115, %63 ], [ %.0115, %61 ], [ %.0115, %49 ], [ %.0115, %46 ], [ %.0115, %39 ], [ %.0115, %38 ], [ %.0115, %37 ], [ %.0115, %23 ], [ %.0115, %13 ], [ %.0115, %10 ]
  %.0113.be = phi i64 [ %.0113, %9 ], [ %.0113, %565 ], [ %.0113, %563 ], [ %.0113, %562 ], [ %.0113, %558 ], [ %.0113, %557 ], [ %.0113, %556 ], [ %.0113, %547 ], [ %.0113, %538 ], [ 1, %537 ], [ %.0113, %536 ], [ %.0113, %535 ], [ %.0113, %529 ], [ %.0113, %528 ], [ %.0113, %526 ], [ %.0113, %521 ], [ %.0113, %519 ], [ %.0113, %517 ], [ %.0113, %516 ], [ %.0113, %505 ], [ %.0113, %495 ], [ %.0113, %494 ], [ %.0113, %483 ], [ %.0113, %473 ], [ %.0113, %469 ], [ %.0113, %468 ], [ %.0113, %458 ], [ %.0113, %448 ], [ %.0113, %444 ], [ %.0113, %440 ], [ %439, %438 ], [ %.0113, %435 ], [ %.0113, %434 ], [ %.0113, %421 ], [ %.0113, %411 ], [ %.0113, %409 ], [ %.0113, %398 ], [ %.0113, %388 ], [ %.0113, %384 ], [ %.0113, %381 ], [ %.0113, %377 ], [ %.0113, %374 ], [ %.0113, %370 ], [ %.0113, %368 ], [ %.0113, %357 ], [ %.0113, %347 ], [ %.0113, %338 ], [ %.0113, %336 ], [ %.0113, %317 ], [ %.0113, %307 ], [ %.0113, %306 ], [ %.0113, %288 ], [ %.0113, %278 ], [ %.0113, %267 ], [ %.0113, %258 ], [ %.0113, %247 ], [ %.0113, %238 ], [ %.0113, %228 ], [ %.0113, %225 ], [ %.0113, %224 ], [ 1, %214 ], [ %.0113, %204 ], [ %.0113, %203 ], [ %.0113, %199 ], [ %.0113, %197 ], [ %.0113, %185 ], [ %.0113, %175 ], [ %.0113, %174 ], [ %.0113, %172 ], [ %.0113, %170 ], [ %.0113, %168 ], [ %.0113, %155 ], [ %.0113, %145 ], [ %.0113, %144 ], [ %.0113, %143 ], [ %.0113, %128 ], [ %.0113, %118 ], [ %.0113, %116 ], [ %.0113, %105 ], [ %.0113, %95 ], [ %.0113, %92 ], [ %.0113, %91 ], [ %.0113, %90 ], [ %.0113, %86 ], [ %.0113, %85 ], [ %.0113, %74 ], [ %.0113, %64 ], [ %.0113, %63 ], [ %.0113, %61 ], [ %.0113, %49 ], [ %.0113, %46 ], [ %.0113, %39 ], [ %.0113, %38 ], [ %.0113, %37 ], [ %.0113, %23 ], [ %.0113, %13 ], [ %.0113, %10 ]
  %.0111.be = phi i8 [ %.0111, %9 ], [ %.0111, %565 ], [ %.0111, %563 ], [ %.0111, %562 ], [ %.0111, %558 ], [ %.0111, %557 ], [ %.0111, %556 ], [ %.0111, %547 ], [ 85, %538 ], [ %.0111, %537 ], [ %.0111, %536 ], [ %.0111, %535 ], [ %.0111, %529 ], [ %.0111, %528 ], [ %.0111, %526 ], [ %.0111, %521 ], [ %.0111, %519 ], [ %.0111, %517 ], [ %.0111, %516 ], [ %.0111, %505 ], [ %.0111, %495 ], [ %.0111, %494 ], [ %.0111, %483 ], [ %.0111, %473 ], [ %.0111, %469 ], [ %.0111, %468 ], [ %.0111, %458 ], [ %.0111, %448 ], [ %.0111, %444 ], [ %.0111, %440 ], [ %.0111, %438 ], [ %.0111, %435 ], [ %.0111, %434 ], [ %.0111, %421 ], [ %.0111, %411 ], [ %.0111, %409 ], [ %.0111, %398 ], [ %.0111, %388 ], [ %.0111, %384 ], [ %.0111, %381 ], [ %.0111, %377 ], [ %.0111, %374 ], [ %.0111, %370 ], [ %.0111, %368 ], [ %.0111, %357 ], [ %.0111, %347 ], [ 68, %338 ], [ %.0111, %336 ], [ %.0111, %317 ], [ %.0111, %307 ], [ %.0111, %306 ], [ 85, %288 ], [ %.0111, %278 ], [ %.0111, %267 ], [ 76, %258 ], [ %.0111, %247 ], [ 82, %238 ], [ %.0111, %228 ], [ %.0111, %225 ], [ %.0111, %224 ], [ %.0111, %214 ], [ %.0111, %204 ], [ %.0111, %203 ], [ %.0111, %199 ], [ %.0111, %197 ], [ %.0111, %185 ], [ %.0111, %175 ], [ %.0111, %174 ], [ %.0111, %172 ], [ %.0111, %170 ], [ %.0111, %168 ], [ %.0111, %155 ], [ %.0111, %145 ], [ %.0111, %144 ], [ %.0111, %143 ], [ %.0111, %128 ], [ %.0111, %118 ], [ %.0111, %116 ], [ %.0111, %105 ], [ %.0111, %95 ], [ %.0111, %92 ], [ %.0111, %91 ], [ %.0111, %90 ], [ %.0111, %86 ], [ %.0111, %85 ], [ %.0111, %74 ], [ %.0111, %64 ], [ %.0111, %63 ], [ %.0111, %61 ], [ %.0111, %49 ], [ %.0111, %46 ], [ %.0111, %39 ], [ %.0111, %38 ], [ %.0111, %37 ], [ %.0111, %23 ], [ %.0111, %13 ], [ %.0111, %10 ]
  %.0109.be = phi i64 [ %.0109, %9 ], [ %.0109, %565 ], [ %.0109, %563 ], [ %.0109, %562 ], [ %.0109, %558 ], [ %.0109, %557 ], [ %.0109, %556 ], [ %.0109, %547 ], [ %546, %538 ], [ %.0109, %537 ], [ %.0109, %536 ], [ %.0109, %535 ], [ %.0109, %529 ], [ %.0109, %528 ], [ %.0109, %526 ], [ %.0109, %521 ], [ %.0109, %519 ], [ %.0109, %517 ], [ %.0109, %516 ], [ %.0109, %505 ], [ %.0109, %495 ], [ %.0109, %494 ], [ %.0109, %483 ], [ %.0109, %473 ], [ %.0109, %469 ], [ %.0109, %468 ], [ %.0109, %458 ], [ %.0109, %448 ], [ %.0109, %444 ], [ %.0109, %440 ], [ %.0109, %438 ], [ %.0109, %435 ], [ %.0109, %434 ], [ %.0109, %421 ], [ %.0109, %411 ], [ %.0109, %409 ], [ %.0109, %398 ], [ %.0109, %388 ], [ %.0109, %384 ], [ %.0109, %381 ], [ %.0109, %377 ], [ %.0109, %374 ], [ %.0109, %370 ], [ %.0109, %368 ], [ %.0109, %357 ], [ %.0109, %347 ], [ %346, %338 ], [ %.0109, %336 ], [ %.0109, %317 ], [ %.0109, %307 ], [ %.0109, %306 ], [ %296, %288 ], [ %.0109, %278 ], [ %.0109, %267 ], [ %266, %258 ], [ %.0109, %247 ], [ %246, %238 ], [ 9223372036854775807, %228 ], [ %.0109, %225 ], [ %.0109, %224 ], [ %.0109, %214 ], [ %.0109, %204 ], [ %.0109, %203 ], [ %.0109, %199 ], [ %.0109, %197 ], [ %.0109, %185 ], [ %.0109, %175 ], [ %.0109, %174 ], [ %.0109, %172 ], [ %.0109, %170 ], [ %.0109, %168 ], [ %.0109, %155 ], [ %.0109, %145 ], [ %.0109, %144 ], [ %.0109, %143 ], [ %.0109, %128 ], [ %.0109, %118 ], [ %.0109, %116 ], [ %.0109, %105 ], [ %.0109, %95 ], [ %.0109, %92 ], [ %.0109, %91 ], [ %.0109, %90 ], [ %.0109, %86 ], [ %.0109, %85 ], [ %.0109, %74 ], [ %.0109, %64 ], [ %.0109, %63 ], [ %.0109, %61 ], [ %.0109, %49 ], [ %.0109, %46 ], [ %.0109, %39 ], [ %.0109, %38 ], [ %.0109, %37 ], [ %.0109, %23 ], [ %.0109, %13 ], [ %.0109, %10 ]
  %.0107.be = phi i32 [ %.0107, %9 ], [ 535905342, %565 ], [ -1201746507, %563 ], [ -171895158, %562 ], [ 406014742, %558 ], [ -1403289027, %557 ], [ -1788945106, %556 ], [ 771756729, %547 ], [ -2040363647, %538 ], [ 1211699575, %537 ], [ 67198028, %536 ], [ 2076477692, %535 ], [ 139848235, %529 ], [ -1378799274, %528 ], [ 1362321992, %526 ], [ 1120504997, %521 ], [ 1239647670, %519 ], [ 997245746, %517 ], [ -1492502365, %516 ], [ %515, %505 ], [ %504, %495 ], [ -1291955621, %494 ], [ %493, %483 ], [ %482, %473 ], [ %472, %469 ], [ 1239647670, %468 ], [ %467, %458 ], [ %457, %448 ], [ %447, %444 ], [ %443, %440 ], [ -443921536, %438 ], [ 1279685701, %435 ], [ 1948560326, %434 ], [ %433, %421 ], [ %420, %411 ], [ %410, %409 ], [ %408, %398 ], [ %397, %388 ], [ 1151620493, %384 ], [ %383, %381 ], [ 189426840, %377 ], [ %376, %374 ], [ 1516922419, %370 ], [ %369, %368 ], [ %367, %357 ], [ %356, %347 ], [ 914324231, %338 ], [ %337, %336 ], [ %335, %317 ], [ %316, %307 ], [ -1020248455, %306 ], [ %305, %288 ], [ %287, %278 ], [ %277, %267 ], [ 446244180, %258 ], [ %257, %247 ], [ 1254868137, %238 ], [ %237, %228 ], [ %227, %225 ], [ -443921536, %224 ], [ %223, %214 ], [ %213, %204 ], [ -1728910657, %203 ], [ %202, %199 ], [ %198, %197 ], [ %196, %185 ], [ %184, %175 ], [ 997245746, %174 ], [ 730978739, %172 ], [ 730978739, %170 ], [ %169, %168 ], [ %167, %155 ], [ %154, %145 ], [ 229067973, %144 ], [ 1719760090, %143 ], [ %142, %128 ], [ %127, %118 ], [ %117, %116 ], [ %115, %105 ], [ %104, %95 ], [ 229067973, %92 ], [ 708067930, %91 ], [ 708067930, %90 ], [ %89, %86 ], [ 1459404816, %85 ], [ %84, %74 ], [ %73, %64 ], [ -953985414, %63 ], [ 1239647670, %61 ], [ %60, %49 ], [ %48, %46 ], [ 1459404816, %39 ], [ -463679765, %38 ], [ 1408001980, %37 ], [ %36, %23 ], [ %22, %13 ], [ %12, %10 ]
  %.0.be = phi [3 x i8]* [ %.0, %9 ], [ %.0, %565 ], [ %.0, %563 ], [ %.0, %562 ], [ %.0, %558 ], [ %.0, %557 ], [ %.0, %556 ], [ %.0, %547 ], [ %.0, %538 ], [ %.0, %537 ], [ %.0, %536 ], [ %.0, %535 ], [ %.0, %529 ], [ %.0, %528 ], [ %.0, %526 ], [ %.0, %521 ], [ %.0, %519 ], [ %.0, %517 ], [ %.0, %516 ], [ %.0, %505 ], [ %.0, %495 ], [ %.0, %494 ], [ %.0, %483 ], [ %.0, %473 ], [ %.0, %469 ], [ %.0, %468 ], [ %.0, %458 ], [ %.0, %448 ], [ %.0, %444 ], [ %.0, %440 ], [ %.0, %438 ], [ %.0, %435 ], [ %.0, %434 ], [ %.0, %421 ], [ %.0, %411 ], [ %.0, %409 ], [ %.0, %398 ], [ %.0, %388 ], [ %.0, %384 ], [ %.0, %381 ], [ %.0, %377 ], [ %.0, %374 ], [ %.0, %370 ], [ %.0, %368 ], [ %.0, %357 ], [ %.0, %347 ], [ %.0, %338 ], [ %.0, %336 ], [ %.0, %317 ], [ %.0, %307 ], [ %.0, %306 ], [ %.0, %288 ], [ %.0, %278 ], [ %.0, %267 ], [ %.0, %258 ], [ %.0, %247 ], [ %.0, %238 ], [ %.0, %228 ], [ %.0, %225 ], [ %.0, %224 ], [ %.0, %214 ], [ %.0, %204 ], [ %.0, %203 ], [ %.0, %199 ], [ %.0, %197 ], [ %.0, %185 ], [ %.0, %175 ], [ %.0, %174 ], [ %.0, %172 ], [ %.0, %170 ], [ %.0, %168 ], [ %.0, %155 ], [ %.0, %145 ], [ %.0, %144 ], [ %.0, %143 ], [ %.0, %128 ], [ %.0, %118 ], [ %.0, %116 ], [ %.0, %105 ], [ %.0, %95 ], [ %.0, %92 ], [ @.str.2, %91 ], [ @.str.1, %90 ], [ %.0, %86 ], [ %.0, %85 ], [ %.0, %74 ], [ %.0, %64 ], [ %.0, %63 ], [ %.0, %61 ], [ %.0, %49 ], [ %.0, %46 ], [ %.0, %39 ], [ %.0, %38 ], [ %.0, %37 ], [ %.0, %23 ], [ %.0, %13 ], [ %.0, %10 ]
  br label %9

10:                                               ; preds = %9
  %11 = load i64, i64* @n, align 8
  %.not138 = icmp sgt i64 %.0125, %11
  %12 = select i1 %.not138, i32 601735797, i32 -1741451291
  br label %.backedge

13:                                               ; preds = %9
  %14 = load i32, i32* @x.11, align 4
  %15 = load i32, i32* @y.12, align 4
  %16 = add i32 %14, -1
  %17 = mul i32 %16, %14
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %20, %19
  %22 = select i1 %21, i32 1120504997, i32 -341094779
  br label %.backedge

23:                                               ; preds = %9
  %24 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0125
  %25 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %24)
  %26 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0125
  %27 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %25, i64* nonnull dereferenceable(8) %26)
  %28 = load i32, i32* @x.11, align 4
  %29 = load i32, i32* @y.12, align 4
  %30 = add i32 %28, -1
  %31 = mul i32 %30, %28
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %34, %33
  %36 = select i1 %35, i32 -281100241, i32 -341094779
  br label %.backedge

37:                                               ; preds = %9
  br label %.backedge

38:                                               ; preds = %9
  %.neg137 = add i64 %.0125, 1
  br label %.backedge

39:                                               ; preds = %9
  %40 = load i64, i64* getelementptr inbounds ([10005 x i64], [10005 x i64]* @x, i64 0, i64 1), align 8
  %41 = load i64, i64* getelementptr inbounds ([10005 x i64], [10005 x i64]* @y, i64 0, i64 1), align 8
  %42 = add i64 %41, %40
  %43 = tail call i64 @_ZSt3absx(i64 %42)
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  store i8 %45, i8* @flag, align 1
  br label %.backedge

46:                                               ; preds = %9
  %47 = load i64, i64* @n, align 8
  %.not135 = icmp sgt i64 %.0123, %47
  %48 = select i1 %.not135, i32 -2049509916, i32 1877956155
  br label %.backedge

49:                                               ; preds = %9
  %50 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0123
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0123
  %53 = load i64, i64* %52, align 8
  %54 = add i64 %53, %51
  %55 = tail call i64 @_ZSt3absx(i64 %54)
  %56 = and i64 %55, 1
  %57 = load i8, i8* @flag, align 1
  %58 = and i8 %57, 1
  %59 = zext i8 %58 to i64
  %.not134 = icmp eq i64 %56, %59
  %60 = select i1 %.not134, i32 153617129, i32 -235098738
  br label %.backedge

61:                                               ; preds = %9
  %62 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

63:                                               ; preds = %9
  br label %.backedge

64:                                               ; preds = %9
  %65 = load i32, i32* @x.11, align 4
  %66 = load i32, i32* @y.12, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 1362321992, i32 725159451
  br label %.backedge

74:                                               ; preds = %9
  %75 = add i64 %.0123, 1
  %76 = load i32, i32* @x.11, align 4
  %77 = load i32, i32* @y.12, align 4
  %78 = add i32 %76, -1
  %79 = mul i32 %78, %76
  %80 = and i32 %79, 1
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %82, %81
  %84 = select i1 %83, i32 -1854279898, i32 725159451
  br label %.backedge

85:                                               ; preds = %9
  br label %.backedge

86:                                               ; preds = %9
  %87 = load i8, i8* @flag, align 1
  %88 = and i8 %87, 1
  %.not133 = icmp eq i8 %88, 0
  %89 = select i1 %.not133, i32 794709810, i32 -244252105
  br label %.backedge

90:                                               ; preds = %9
  br label %.backedge

91:                                               ; preds = %9
  br label %.backedge

92:                                               ; preds = %9
  %93 = getelementptr inbounds [3 x i8], [3 x i8]* %.0, i64 0, i64 0
  %94 = tail call i32 @puts(i8* nonnull dereferenceable(1) %93)
  br label %.backedge

95:                                               ; preds = %9
  %96 = load i32, i32* @x.11, align 4
  %97 = load i32, i32* @y.12, align 4
  %98 = add i32 %96, -1
  %99 = mul i32 %98, %96
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %102, %101
  %104 = select i1 %103, i32 -1378799274, i32 -1510895495
  br label %.backedge

105:                                              ; preds = %9
  %106 = icmp slt i64 %.0121, 32
  store i1 %106, i1* %6, align 1
  %107 = load i32, i32* @x.11, align 4
  %108 = load i32, i32* @y.12, align 4
  %109 = add i32 %107, -1
  %110 = mul i32 %109, %107
  %111 = and i32 %110, 1
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %113, %112
  %115 = select i1 %114, i32 -1598903909, i32 -1510895495
  br label %.backedge

116:                                              ; preds = %9
  %.0..0..0.101 = load volatile i1, i1* %6, align 1
  %117 = select i1 %.0..0..0.101, i32 -550586449, i32 -569690037
  br label %.backedge

118:                                              ; preds = %9
  %119 = load i32, i32* @x.11, align 4
  %120 = load i32, i32* @y.12, align 4
  %121 = add i32 %119, -1
  %122 = mul i32 %121, %119
  %123 = and i32 %122, 1
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %125, %124
  %127 = select i1 %126, i32 139848235, i32 -488689420
  br label %.backedge

128:                                              ; preds = %9
  %129 = trunc i64 %.0121 to i32
  %130 = lshr i32 -2147483648, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0121
  store i64 %131, i64* %132, align 8
  %133 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 %131)
  %134 = load i32, i32* @x.11, align 4
  %135 = load i32, i32* @y.12, align 4
  %136 = add i32 %134, -1
  %137 = mul i32 %136, %134
  %138 = and i32 %137, 1
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %140, %139
  %142 = select i1 %141, i32 1603963550, i32 -488689420
  br label %.backedge

143:                                              ; preds = %9
  br label %.backedge

144:                                              ; preds = %9
  %.neg = add i64 %.0121, 1
  br label %.backedge

145:                                              ; preds = %9
  %146 = load i32, i32* @x.11, align 4
  %147 = load i32, i32* @y.12, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 2076477692, i32 -647635236
  br label %.backedge

155:                                              ; preds = %9
  %156 = load i8, i8* @flag, align 1
  %157 = and i8 %156, 1
  %158 = icmp ne i8 %157, 0
  store i1 %158, i1* %5, align 1
  %159 = load i32, i32* @x.11, align 4
  %160 = load i32, i32* @y.12, align 4
  %161 = add i32 %159, -1
  %162 = mul i32 %161, %159
  %163 = and i32 %162, 1
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %165, %164
  %167 = select i1 %166, i32 1157217548, i32 -647635236
  br label %.backedge

168:                                              ; preds = %9
  %.0..0..0.102 = load volatile i1, i1* %5, align 1
  %169 = select i1 %.0..0..0.102, i32 -1843992131, i32 -2084399362
  br label %.backedge

170:                                              ; preds = %9
  store i64 1, i64* getelementptr inbounds ([1000 x i64], [1000 x i64]* @d, i64 0, i64 32), align 16
  %171 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 1)
  br label %.backedge

172:                                              ; preds = %9
  %173 = tail call i32 @putchar(i32 10)
  br label %.backedge

174:                                              ; preds = %9
  br label %.backedge

175:                                              ; preds = %9
  %176 = load i32, i32* @x.11, align 4
  %177 = load i32, i32* @y.12, align 4
  %178 = add i32 %176, -1
  %179 = mul i32 %178, %176
  %180 = and i32 %179, 1
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %182, %181
  %184 = select i1 %183, i32 67198028, i32 -577871004
  br label %.backedge

185:                                              ; preds = %9
  %186 = load i64, i64* @n, align 8
  %187 = icmp sle i64 %.0119, %186
  store i1 %187, i1* %4, align 1
  %188 = load i32, i32* @x.11, align 4
  %189 = load i32, i32* @y.12, align 4
  %190 = add i32 %188, -1
  %191 = mul i32 %190, %188
  %192 = and i32 %191, 1
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %194, %193
  %196 = select i1 %195, i32 -803795188, i32 -577871004
  br label %.backedge

197:                                              ; preds = %9
  %.0..0..0.103 = load volatile i1, i1* %4, align 1
  %198 = select i1 %.0..0..0.103, i32 -995439256, i32 925887224
  br label %.backedge

199:                                              ; preds = %9
  %200 = load i8, i8* @flag, align 1
  %201 = and i8 %200, 1
  %.not132 = icmp eq i8 %201, 0
  %202 = select i1 %.not132, i32 1363367090, i32 -1728910657
  br label %.backedge

203:                                              ; preds = %9
  br label %.backedge

204:                                              ; preds = %9
  %205 = load i32, i32* @x.11, align 4
  %206 = load i32, i32* @y.12, align 4
  %207 = add i32 %205, -1
  %208 = mul i32 %207, %205
  %209 = and i32 %208, 1
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %211, %210
  %213 = select i1 %212, i32 1211699575, i32 -686515133
  br label %.backedge

214:                                              ; preds = %9
  %215 = load i32, i32* @x.11, align 4
  %216 = load i32, i32* @y.12, align 4
  %217 = add i32 %215, -1
  %218 = mul i32 %217, %215
  %219 = and i32 %218, 1
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %221, %220
  %223 = select i1 %222, i32 -1572946436, i32 -686515133
  br label %.backedge

224:                                              ; preds = %9
  br label %.backedge

225:                                              ; preds = %9
  %226 = icmp slt i64 %.0113, 32
  %227 = select i1 %226, i32 -545994363, i32 -907037836
  br label %.backedge

228:                                              ; preds = %9
  %229 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %230 = load i64, i64* %229, align 8
  %231 = add i64 %230, %.0117
  %232 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %233 = load i64, i64* %232, align 8
  %234 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %235 = load i64, i64* %234, align 8
  %236 = tail call i64 @_Z3disxxxx(i64 %231, i64 %.0115, i64 %233, i64 %235)
  %.not131 = icmp eq i64 %236, 9223372036854775807
  %237 = select i1 %.not131, i32 1254868137, i32 -1123245301
  br label %.backedge

238:                                              ; preds = %9
  %239 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %240 = load i64, i64* %239, align 8
  %241 = add i64 %240, %.0117
  %242 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %243 = load i64, i64* %242, align 8
  %244 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %245 = load i64, i64* %244, align 8
  %246 = tail call i64 @_Z3disxxxx(i64 %241, i64 %.0115, i64 %243, i64 %245)
  br label %.backedge

247:                                              ; preds = %9
  %248 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %249 = load i64, i64* %248, align 8
  %250 = sub i64 %.0117, %249
  %251 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %252 = load i64, i64* %251, align 8
  %253 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %254 = load i64, i64* %253, align 8
  %255 = tail call i64 @_Z3disxxxx(i64 %250, i64 %.0115, i64 %252, i64 %254)
  %256 = icmp slt i64 %255, %.0109
  %257 = select i1 %256, i32 -1664604932, i32 446244180
  br label %.backedge

258:                                              ; preds = %9
  %259 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %260 = load i64, i64* %259, align 8
  %261 = sub i64 %.0117, %260
  %262 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %263 = load i64, i64* %262, align 8
  %264 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %265 = load i64, i64* %264, align 8
  %266 = tail call i64 @_Z3disxxxx(i64 %261, i64 %.0115, i64 %263, i64 %265)
  br label %.backedge

267:                                              ; preds = %9
  %268 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %269 = load i64, i64* %268, align 8
  %270 = add i64 %269, %.0115
  %271 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %272 = load i64, i64* %271, align 8
  %273 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %274 = load i64, i64* %273, align 8
  %275 = tail call i64 @_Z3disxxxx(i64 %.0117, i64 %270, i64 %272, i64 %274)
  %276 = icmp slt i64 %275, %.0109
  %277 = select i1 %276, i32 -58801513, i32 -1020248455
  br label %.backedge

278:                                              ; preds = %9
  %279 = load i32, i32* @x.11, align 4
  %280 = load i32, i32* @y.12, align 4
  %281 = add i32 %279, -1
  %282 = mul i32 %281, %279
  %283 = and i32 %282, 1
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %285, %284
  %287 = select i1 %286, i32 -2040363647, i32 417352730
  br label %.backedge

288:                                              ; preds = %9
  %289 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %290 = load i64, i64* %289, align 8
  %291 = add i64 %290, %.0115
  %292 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %295 = load i64, i64* %294, align 8
  %296 = tail call i64 @_Z3disxxxx(i64 %.0117, i64 %291, i64 %293, i64 %295)
  %297 = load i32, i32* @x.11, align 4
  %298 = load i32, i32* @y.12, align 4
  %299 = add i32 %297, -1
  %300 = mul i32 %299, %297
  %301 = and i32 %300, 1
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %303, %302
  %305 = select i1 %304, i32 -1903304661, i32 417352730
  br label %.backedge

306:                                              ; preds = %9
  br label %.backedge

307:                                              ; preds = %9
  %308 = load i32, i32* @x.11, align 4
  %309 = load i32, i32* @y.12, align 4
  %310 = add i32 %308, -1
  %311 = mul i32 %310, %308
  %312 = and i32 %311, 1
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %314, %313
  %316 = select i1 %315, i32 771756729, i32 -1313580661
  br label %.backedge

317:                                              ; preds = %9
  %318 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %319 = load i64, i64* %318, align 8
  %320 = sub i64 %.0115, %319
  %321 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %322 = load i64, i64* %321, align 8
  %323 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %324 = load i64, i64* %323, align 8
  %325 = tail call i64 @_Z3disxxxx(i64 %.0117, i64 %320, i64 %322, i64 %324)
  %326 = icmp slt i64 %325, %.0109
  store i1 %326, i1* %3, align 1
  %327 = load i32, i32* @x.11, align 4
  %328 = load i32, i32* @y.12, align 4
  %329 = add i32 %327, -1
  %330 = mul i32 %329, %327
  %331 = and i32 %330, 1
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %333, %332
  %335 = select i1 %334, i32 191511944, i32 -1313580661
  br label %.backedge

336:                                              ; preds = %9
  %.0..0..0.104 = load volatile i1, i1* %3, align 1
  %337 = select i1 %.0..0..0.104, i32 1113174824, i32 914324231
  br label %.backedge

338:                                              ; preds = %9
  %339 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %340 = load i64, i64* %339, align 8
  %341 = sub i64 %.0115, %340
  %342 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %343 = load i64, i64* %342, align 8
  %344 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %345 = load i64, i64* %344, align 8
  %346 = tail call i64 @_Z3disxxxx(i64 %.0117, i64 %341, i64 %343, i64 %345)
  br label %.backedge

347:                                              ; preds = %9
  %348 = load i32, i32* @x.11, align 4
  %349 = load i32, i32* @y.12, align 4
  %350 = add i32 %348, -1
  %351 = mul i32 %350, %348
  %352 = and i32 %351, 1
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %354, %353
  %356 = select i1 %355, i32 -1788945106, i32 -1115586455
  br label %.backedge

357:                                              ; preds = %9
  %358 = icmp eq i8 %.0111, 82
  store i1 %358, i1* %2, align 1
  %359 = load i32, i32* @x.11, align 4
  %360 = load i32, i32* @y.12, align 4
  %361 = add i32 %359, -1
  %362 = mul i32 %361, %359
  %363 = and i32 %362, 1
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %365, %364
  %367 = select i1 %366, i32 -1465574575, i32 -1115586455
  br label %.backedge

368:                                              ; preds = %9
  %.0..0..0.105 = load volatile i1, i1* %2, align 1
  %369 = select i1 %.0..0..0.105, i32 1644722444, i32 1516922419
  br label %.backedge

370:                                              ; preds = %9
  %371 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %372 = load i64, i64* %371, align 8
  %373 = add i64 %372, %.0117
  br label %.backedge

374:                                              ; preds = %9
  %375 = icmp eq i8 %.0111, 76
  %376 = select i1 %375, i32 -2114807833, i32 189426840
  br label %.backedge

377:                                              ; preds = %9
  %378 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %379 = load i64, i64* %378, align 8
  %380 = sub i64 %.0117, %379
  br label %.backedge

381:                                              ; preds = %9
  %382 = icmp eq i8 %.0111, 85
  %383 = select i1 %382, i32 1218823697, i32 1151620493
  br label %.backedge

384:                                              ; preds = %9
  %385 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %386 = load i64, i64* %385, align 8
  %387 = add i64 %386, %.0115
  br label %.backedge

388:                                              ; preds = %9
  %389 = load i32, i32* @x.11, align 4
  %390 = load i32, i32* @y.12, align 4
  %391 = add i32 %389, -1
  %392 = mul i32 %391, %389
  %393 = and i32 %392, 1
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %395, %394
  %397 = select i1 %396, i32 -1403289027, i32 -2116451676
  br label %.backedge

398:                                              ; preds = %9
  %399 = icmp eq i8 %.0111, 68
  store i1 %399, i1* %1, align 1
  %400 = load i32, i32* @x.11, align 4
  %401 = load i32, i32* @y.12, align 4
  %402 = add i32 %400, -1
  %403 = mul i32 %402, %400
  %404 = and i32 %403, 1
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %406, %405
  %408 = select i1 %407, i32 1232021669, i32 -2116451676
  br label %.backedge

409:                                              ; preds = %9
  %.0..0..0.106 = load volatile i1, i1* %1, align 1
  %410 = select i1 %.0..0..0.106, i32 -671640375, i32 1948560326
  br label %.backedge

411:                                              ; preds = %9
  %412 = load i32, i32* @x.11, align 4
  %413 = load i32, i32* @y.12, align 4
  %414 = add i32 %412, -1
  %415 = mul i32 %414, %412
  %416 = and i32 %415, 1
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %418, %417
  %420 = select i1 %419, i32 406014742, i32 1596925232
  br label %.backedge

421:                                              ; preds = %9
  %422 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %423 = load i64, i64* %422, align 8
  %424 = sub i64 %.0115, %423
  %425 = load i32, i32* @x.11, align 4
  %426 = load i32, i32* @y.12, align 4
  %427 = add i32 %425, -1
  %428 = mul i32 %427, %425
  %429 = and i32 %428, 1
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %431, %430
  %433 = select i1 %432, i32 52853691, i32 1596925232
  br label %.backedge

434:                                              ; preds = %9
  br label %.backedge

435:                                              ; preds = %9
  %436 = sext i8 %.0111 to i32
  %437 = tail call i32 @putchar(i32 %436)
  br label %.backedge

438:                                              ; preds = %9
  %439 = add i64 %.0113, 1
  br label %.backedge

440:                                              ; preds = %9
  %441 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %442 = load i64, i64* %441, align 8
  %.not130 = icmp eq i64 %.0117, %442
  %443 = select i1 %.not130, i32 -2020315290, i32 908730441
  br label %.backedge

444:                                              ; preds = %9
  %445 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %446 = load i64, i64* %445, align 8
  %.not129 = icmp eq i64 %.0115, %446
  %447 = select i1 %.not129, i32 1248109176, i32 908730441
  br label %.backedge

448:                                              ; preds = %9
  %449 = load i32, i32* @x.11, align 4
  %450 = load i32, i32* @y.12, align 4
  %451 = add i32 %449, -1
  %452 = mul i32 %451, %449
  %453 = and i32 %452, 1
  %454 = icmp eq i32 %453, 0
  %455 = icmp slt i32 %450, 10
  %456 = or i1 %455, %454
  %457 = select i1 %456, i32 -171895158, i32 1662637293
  br label %.backedge

458:                                              ; preds = %9
  %459 = load i32, i32* @x.11, align 4
  %460 = load i32, i32* @y.12, align 4
  %461 = add i32 %459, -1
  %462 = mul i32 %461, %459
  %463 = and i32 %462, 1
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %465, %464
  %467 = select i1 %466, i32 -359627631, i32 1662637293
  br label %.backedge

468:                                              ; preds = %9
  br label %.backedge

469:                                              ; preds = %9
  %470 = load i8, i8* @flag, align 1
  %471 = and i8 %470, 1
  %.not = icmp eq i8 %471, 0
  %472 = select i1 %.not, i32 2003527818, i32 -1291955621
  br label %.backedge

473:                                              ; preds = %9
  %474 = load i32, i32* @x.11, align 4
  %475 = load i32, i32* @y.12, align 4
  %476 = add i32 %474, -1
  %477 = mul i32 %476, %474
  %478 = and i32 %477, 1
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %480, %479
  %482 = select i1 %481, i32 -1201746507, i32 -1812769571
  br label %.backedge

483:                                              ; preds = %9
  %484 = tail call i32 @putchar(i32 82)
  %485 = load i32, i32* @x.11, align 4
  %486 = load i32, i32* @y.12, align 4
  %487 = add i32 %485, -1
  %488 = mul i32 %487, %485
  %489 = and i32 %488, 1
  %490 = icmp eq i32 %489, 0
  %491 = icmp slt i32 %486, 10
  %492 = or i1 %491, %490
  %493 = select i1 %492, i32 826170313, i32 -1812769571
  br label %.backedge

494:                                              ; preds = %9
  br label %.backedge

495:                                              ; preds = %9
  %496 = load i32, i32* @x.11, align 4
  %497 = load i32, i32* @y.12, align 4
  %498 = add i32 %496, -1
  %499 = mul i32 %498, %496
  %500 = and i32 %499, 1
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %502, %501
  %504 = select i1 %503, i32 535905342, i32 1340493551
  br label %.backedge

505:                                              ; preds = %9
  %506 = tail call i32 @putchar(i32 10)
  %507 = load i32, i32* @x.11, align 4
  %508 = load i32, i32* @y.12, align 4
  %509 = add i32 %507, -1
  %510 = mul i32 %509, %507
  %511 = and i32 %510, 1
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %513, %512
  %515 = select i1 %514, i32 -1874039993, i32 1340493551
  br label %.backedge

516:                                              ; preds = %9
  br label %.backedge

517:                                              ; preds = %9
  %518 = add i64 %.0119, 1
  br label %.backedge

519:                                              ; preds = %9
  br label %.backedge

520:                                              ; preds = %9
  ret i32 %.0127

521:                                              ; preds = %9
  %522 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0125
  %523 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %522)
  %524 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0125
  %525 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %523, i64* nonnull dereferenceable(8) %524)
  br label %.backedge

526:                                              ; preds = %9
  %527 = add i64 %.0123, 1
  br label %.backedge

528:                                              ; preds = %9
  br label %.backedge

529:                                              ; preds = %9
  %530 = trunc i64 %.0121 to i32
  %531 = lshr i32 -2147483648, %530
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0121
  store i64 %532, i64* %533, align 8
  %534 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 %532)
  br label %.backedge

535:                                              ; preds = %9
  br label %.backedge

536:                                              ; preds = %9
  br label %.backedge

537:                                              ; preds = %9
  br label %.backedge

538:                                              ; preds = %9
  %539 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %540 = load i64, i64* %539, align 8
  %541 = add i64 %540, %.0115
  %542 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %543 = load i64, i64* %542, align 8
  %544 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %545 = load i64, i64* %544, align 8
  %546 = tail call i64 @_Z3disxxxx(i64 %.0117, i64 %541, i64 %543, i64 %545)
  br label %.backedge

547:                                              ; preds = %9
  %548 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %549 = load i64, i64* %548, align 8
  %550 = sub i64 %.0115, %549
  %551 = getelementptr inbounds [10005 x i64], [10005 x i64]* @x, i64 0, i64 %.0119
  %552 = load i64, i64* %551, align 8
  %553 = getelementptr inbounds [10005 x i64], [10005 x i64]* @y, i64 0, i64 %.0119
  %554 = load i64, i64* %553, align 8
  %555 = tail call i64 @_Z3disxxxx(i64 %.0117, i64 %550, i64 %552, i64 %554)
  br label %.backedge

556:                                              ; preds = %9
  br label %.backedge

557:                                              ; preds = %9
  br label %.backedge

558:                                              ; preds = %9
  %559 = getelementptr inbounds [1000 x i64], [1000 x i64]* @d, i64 0, i64 %.0113
  %560 = load i64, i64* %559, align 8
  %561 = sub i64 %.0115, %560
  br label %.backedge

562:                                              ; preds = %9
  br label %.backedge

563:                                              ; preds = %9
  %564 = tail call i32 @putchar(i32 82)
  br label %.backedge

565:                                              ; preds = %9
  %566 = tail call i32 @putchar(i32 10)
  br label %.backedge
}

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s951688654.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #7

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
