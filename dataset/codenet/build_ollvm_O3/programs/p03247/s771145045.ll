; ModuleID = 'build_ollvm/programs/p03247/s771145045.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s771145045.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3absx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = local_unnamed_addr global i32 0, align 4
@x = local_unnamed_addr global [1005 x i32] zeroinitializer, align 16
@y = local_unnamed_addr global [1005 x i32] zeroinitializer, align 16
@bin = local_unnamed_addr global [35 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"32\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"1 \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"31\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s771145045.cpp, i8* null }]
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0
@x.15 = common local_unnamed_addr global i32 0
@y.16 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.5, align 4
  %4 = load i32, i32* @y.6, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1247486053, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1247486053, label %11
    i32 654809412, label %14
    i32 -375692728, label %25
    i32 -657948322, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 654809412, i32 -657948322
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  %16 = load i32, i32* @x.5, align 4
  %17 = load i32, i32* @y.6, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -375692728, i32 -657948322
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 654809412, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind uwtable
define signext i8 @_Z2ncv() local_unnamed_addr #4 {
  %1 = tail call i32 @getchar()
  %2 = trunc i32 %1 to i8
  ret i8 %2
}

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: nofree noinline nounwind uwtable
define i32 @_Z4readv() local_unnamed_addr #4 {
  %1 = tail call signext i8 @_Z2ncv()
  br label %2

2:                                                ; preds = %.backedge, %0
  %.016 = phi i32 [ 0, %0 ], [ %.016.be, %.backedge ]
  %.014 = phi i32 [ 1, %0 ], [ %.014.be, %.backedge ]
  %.012 = phi i8 [ %1, %0 ], [ %.012.be, %.backedge ]
  %.0 = phi i32 [ 1710016734, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1710016734, label %3
    i32 -2040520839, label %6
    i32 -1841419498, label %9
    i32 -1737894184, label %10
    i32 1106179242, label %12
    i32 103332952, label %13
    i32 -478115196, label %16
    i32 -1352763362, label %26
    i32 -278843954, label %39
    i32 -465295099, label %40
    i32 -963421754, label %42
  ]

.backedge:                                        ; preds = %2, %42, %39, %26, %16, %13, %12, %10, %9, %6, %3
  %.016.be = phi i32 [ %.016, %2 ], [ %.neg, %42 ], [ %.016, %39 ], [ %.neg22, %26 ], [ %.016, %16 ], [ %.016, %13 ], [ %.016, %12 ], [ %.016, %10 ], [ %.016, %9 ], [ %.016, %6 ], [ %.016, %3 ]
  %.014.be = phi i32 [ %.014, %2 ], [ %.014, %42 ], [ %.014, %39 ], [ %.014, %26 ], [ %.014, %16 ], [ %.014, %13 ], [ %.014, %12 ], [ %.014, %10 ], [ -1, %9 ], [ %.014, %6 ], [ %.014, %3 ]
  %.012.be = phi i8 [ %.012, %2 ], [ %45, %42 ], [ %.012, %39 ], [ %29, %26 ], [ %.012, %16 ], [ %.012, %13 ], [ %.012, %12 ], [ %11, %10 ], [ %.012, %9 ], [ %.012, %6 ], [ %.012, %3 ]
  %.0.be = phi i32 [ %.0, %2 ], [ -1352763362, %42 ], [ 103332952, %39 ], [ %38, %26 ], [ %25, %16 ], [ %15, %13 ], [ 103332952, %12 ], [ 1710016734, %10 ], [ -1737894184, %9 ], [ %8, %6 ], [ %5, %3 ]
  br label %2

3:                                                ; preds = %2
  %4 = sext i8 %.012 to i32
  %isdigittmp24 = add nsw i32 %4, -48
  %isdigit25 = icmp ugt i32 %isdigittmp24, 9
  %5 = select i1 %isdigit25, i32 -2040520839, i32 1106179242
  br label %.backedge

6:                                                ; preds = %2
  %7 = icmp eq i8 %.012, 45
  %8 = select i1 %7, i32 -1841419498, i32 -1737894184
  br label %.backedge

9:                                                ; preds = %2
  br label %.backedge

10:                                               ; preds = %2
  %11 = tail call signext i8 @_Z2ncv()
  br label %.backedge

12:                                               ; preds = %2
  br label %.backedge

13:                                               ; preds = %2
  %14 = sext i8 %.012 to i32
  %isdigittmp = add nsw i32 %14, -48
  %isdigit = icmp ult i32 %isdigittmp, 10
  %15 = select i1 %isdigit, i32 -478115196, i32 -465295099
  br label %.backedge

16:                                               ; preds = %2
  %17 = load i32, i32* @x.9, align 4
  %18 = load i32, i32* @y.10, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 -1352763362, i32 -963421754
  br label %.backedge

26:                                               ; preds = %2
  %.neg23 = mul i32 %.016, 10
  %27 = xor i8 %.012, 48
  %28 = sext i8 %27 to i32
  %.neg22 = add i32 %.neg23, %28
  %29 = tail call signext i8 @_Z2ncv()
  %30 = load i32, i32* @x.9, align 4
  %31 = load i32, i32* @y.10, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -278843954, i32 -963421754
  br label %.backedge

39:                                               ; preds = %2
  br label %.backedge

40:                                               ; preds = %2
  %41 = mul nsw i32 %.014, %.016
  ret i32 %41

42:                                               ; preds = %2
  %.neg19 = mul i32 %.016, 10
  %43 = xor i8 %.012, 48
  %44 = sext i8 %43 to i32
  %.neg = add i32 %.neg19, %44
  %45 = tail call signext i8 @_Z2ncv()
  br label %.backedge
}

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = tail call i32 @_Z4readv()
  store i32 %3, i32* @n, align 4
  br label %4

4:                                                ; preds = %.backedge, %0
  %.071 = phi i32 [ 1, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i32 [ undef, %0 ], [ %.067.be, %.backedge ]
  %.065 = phi i32 [ undef, %0 ], [ %.065.be, %.backedge ]
  %.063 = phi i32 [ undef, %0 ], [ %.063.be, %.backedge ]
  %.061 = phi i32 [ undef, %0 ], [ %.061.be, %.backedge ]
  %.059 = phi i64 [ undef, %0 ], [ %.059.be, %.backedge ]
  %.057 = phi i64 [ undef, %0 ], [ %.057.be, %.backedge ]
  %.055 = phi i32 [ undef, %0 ], [ %.055.be, %.backedge ]
  %.053 = phi i64 [ undef, %0 ], [ %.053.be, %.backedge ]
  %.051 = phi i64 [ undef, %0 ], [ %.051.be, %.backedge ]
  %.0 = phi i32 [ 1379519390, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1379519390, label %5
    i32 728161984, label %8
    i32 -659329909, label %14
    i32 -171058171, label %16
    i32 -371774767, label %21
    i32 1448541033, label %24
    i32 -287865446, label %33
    i32 -23513414, label %35
    i32 611914877, label %36
    i32 -2053484648, label %38
    i32 -1336951255, label %39
    i32 -223355956, label %42
    i32 -1933730904, label %52
    i32 -837677992, label %69
    i32 -399605657, label %70
    i32 -1405754117, label %80
    i32 207013413, label %90
    i32 873883759, label %91
    i32 -749116576, label %93
    i32 -728416495, label %96
    i32 -774235816, label %106
    i32 -940842009, label %117
    i32 1713861476, label %118
    i32 1042870475, label %119
    i32 1050920482, label %122
    i32 376564114, label %132
    i32 2070264830, label %146
    i32 614067054, label %147
    i32 1290374226, label %148
    i32 -1923429160, label %150
    i32 -366977582, label %153
    i32 -2060097201, label %155
    i32 -1813228332, label %158
    i32 1199208361, label %159
    i32 -1703969498, label %169
    i32 -876692893, label %180
    i32 620842597, label %182
    i32 2110604386, label %196
    i32 1239090327, label %206
    i32 1961838752, label %217
    i32 304691007, label %219
    i32 -1320858902, label %226
    i32 1253675138, label %233
    i32 -1752641757, label %243
    i32 290421126, label %253
    i32 365401546, label %254
    i32 1010606328, label %257
    i32 -2099284627, label %267
    i32 2022267336, label %283
    i32 -1030053923, label %284
    i32 -218267022, label %291
    i32 -1984267504, label %292
    i32 1007907705, label %293
    i32 70291086, label %295
    i32 -1669036742, label %297
    i32 1495333124, label %307
    i32 1159864905, label %318
    i32 -939634545, label %319
    i32 -2007088532, label %329
    i32 -74852185, label %339
    i32 1827366887, label %340
    i32 -1741872109, label %341
    i32 -1073055636, label %349
    i32 1197543683, label %351
    i32 -659802743, label %353
    i32 242818864, label %358
    i32 2049178758, label %359
    i32 -509759050, label %360
    i32 -568698018, label %361
    i32 -119268017, label %368
    i32 1936118835, label %370
  ]

.backedge:                                        ; preds = %4, %370, %368, %361, %360, %359, %358, %353, %351, %349, %341, %339, %329, %319, %318, %307, %297, %295, %293, %292, %291, %284, %283, %267, %257, %254, %253, %243, %233, %226, %219, %217, %206, %196, %182, %180, %169, %159, %158, %155, %153, %150, %148, %147, %146, %132, %122, %119, %118, %117, %106, %96, %93, %91, %90, %80, %70, %69, %52, %42, %39, %38, %36, %35, %33, %24, %21, %16, %14, %8, %5
  %.071.be = phi i32 [ %.071, %4 ], [ %.071, %370 ], [ %.071, %368 ], [ %.071, %361 ], [ %.071, %360 ], [ %.071, %359 ], [ %.071, %358 ], [ %.071, %353 ], [ %.071, %351 ], [ %.071, %349 ], [ %.071, %341 ], [ %.071, %339 ], [ %.071, %329 ], [ %.071, %319 ], [ %.071, %318 ], [ %.071, %307 ], [ %.071, %297 ], [ %.071, %295 ], [ %.071, %293 ], [ %.071, %292 ], [ %.071, %291 ], [ %.071, %284 ], [ %.071, %283 ], [ %.071, %267 ], [ %.071, %257 ], [ %.071, %254 ], [ %.071, %253 ], [ %.071, %243 ], [ %.071, %233 ], [ %.071, %226 ], [ %.071, %219 ], [ %.071, %217 ], [ %.071, %206 ], [ %.071, %196 ], [ %.071, %182 ], [ %.071, %180 ], [ %.071, %169 ], [ %.071, %159 ], [ %.071, %158 ], [ %.071, %155 ], [ %.071, %153 ], [ %.071, %150 ], [ %.071, %148 ], [ %.071, %147 ], [ %.071, %146 ], [ %.071, %132 ], [ %.071, %122 ], [ %.071, %119 ], [ %.071, %118 ], [ %.071, %117 ], [ %.071, %106 ], [ %.071, %96 ], [ %.071, %93 ], [ %.071, %91 ], [ %.071, %90 ], [ %.071, %80 ], [ %.071, %70 ], [ %.071, %69 ], [ %.071, %52 ], [ %.071, %42 ], [ %.071, %39 ], [ %.071, %38 ], [ %.071, %36 ], [ %.071, %35 ], [ %.071, %33 ], [ %.071, %24 ], [ %.071, %21 ], [ %.071, %16 ], [ %15, %14 ], [ %.071, %8 ], [ %.071, %5 ]
  %.069.be = phi i32 [ %.069, %4 ], [ %.069, %370 ], [ %.069, %368 ], [ %.069, %361 ], [ %.069, %360 ], [ %.069, %359 ], [ %.069, %358 ], [ %.069, %353 ], [ %.069, %351 ], [ %.069, %349 ], [ %.069, %341 ], [ %.069, %339 ], [ %.069, %329 ], [ %.069, %319 ], [ %.069, %318 ], [ %.069, %307 ], [ %.069, %297 ], [ %.069, %295 ], [ %.069, %293 ], [ %.069, %292 ], [ %.069, %291 ], [ %.069, %284 ], [ %.069, %283 ], [ %.069, %267 ], [ %.069, %257 ], [ %.069, %254 ], [ %.069, %253 ], [ %.069, %243 ], [ %.069, %233 ], [ %.069, %226 ], [ %.069, %219 ], [ %.069, %217 ], [ %.069, %206 ], [ %.069, %196 ], [ %.069, %182 ], [ %.069, %180 ], [ %.069, %169 ], [ %.069, %159 ], [ %.069, %158 ], [ %.069, %155 ], [ %.069, %153 ], [ %.069, %150 ], [ %.069, %148 ], [ %.069, %147 ], [ %.069, %146 ], [ %.069, %132 ], [ %.069, %122 ], [ %.069, %119 ], [ %.069, %118 ], [ %.069, %117 ], [ %.069, %106 ], [ %.069, %96 ], [ %.069, %93 ], [ %.069, %91 ], [ %.069, %90 ], [ %.069, %80 ], [ %.069, %70 ], [ %.069, %69 ], [ %.069, %52 ], [ %.069, %42 ], [ %.069, %39 ], [ %.069, %38 ], [ %.069, %36 ], [ %.069, %35 ], [ %.069, %33 ], [ %.069, %24 ], [ %.069, %21 ], [ %20, %16 ], [ %.069, %14 ], [ %.069, %8 ], [ %.069, %5 ]
  %.067.be = phi i32 [ %.067, %4 ], [ %.067, %370 ], [ %.067, %368 ], [ %.067, %361 ], [ %.067, %360 ], [ %.067, %359 ], [ %.067, %358 ], [ %.067, %353 ], [ %.067, %351 ], [ %.067, %349 ], [ %.067, %341 ], [ %.067, %339 ], [ %.067, %329 ], [ %.067, %319 ], [ %.067, %318 ], [ %.067, %307 ], [ %.067, %297 ], [ %.067, %295 ], [ %.067, %293 ], [ %.067, %292 ], [ %.067, %291 ], [ %.067, %284 ], [ %.067, %283 ], [ %.067, %267 ], [ %.067, %257 ], [ %.067, %254 ], [ %.067, %253 ], [ %.067, %243 ], [ %.067, %233 ], [ %.067, %226 ], [ %.067, %219 ], [ %.067, %217 ], [ %.067, %206 ], [ %.067, %196 ], [ %.067, %182 ], [ %.067, %180 ], [ %.067, %169 ], [ %.067, %159 ], [ %.067, %158 ], [ %.067, %155 ], [ %.067, %153 ], [ %.067, %150 ], [ %.067, %148 ], [ %.067, %147 ], [ %.067, %146 ], [ %.067, %132 ], [ %.067, %122 ], [ %.067, %119 ], [ %.067, %118 ], [ %.067, %117 ], [ %.067, %106 ], [ %.067, %96 ], [ %.067, %93 ], [ %.067, %91 ], [ %.067, %90 ], [ %.067, %80 ], [ %.067, %70 ], [ %.067, %69 ], [ %.067, %52 ], [ %.067, %42 ], [ %.067, %39 ], [ %.067, %38 ], [ %37, %36 ], [ %.067, %35 ], [ %.067, %33 ], [ %.067, %24 ], [ %.067, %21 ], [ 2, %16 ], [ %.067, %14 ], [ %.067, %8 ], [ %.067, %5 ]
  %.065.be = phi i32 [ %.065, %4 ], [ %.065, %370 ], [ %.065, %368 ], [ %.065, %361 ], [ %.065, %360 ], [ %.065, %359 ], [ %.065, %358 ], [ %.065, %353 ], [ %.065, %351 ], [ %350, %349 ], [ %.065, %341 ], [ %.065, %339 ], [ %.065, %329 ], [ %.065, %319 ], [ %.065, %318 ], [ %.065, %307 ], [ %.065, %297 ], [ %.065, %295 ], [ %.065, %293 ], [ %.065, %292 ], [ %.065, %291 ], [ %.065, %284 ], [ %.065, %283 ], [ %.065, %267 ], [ %.065, %257 ], [ %.065, %254 ], [ %.065, %253 ], [ %.065, %243 ], [ %.065, %233 ], [ %.065, %226 ], [ %.065, %219 ], [ %.065, %217 ], [ %.065, %206 ], [ %.065, %196 ], [ %.065, %182 ], [ %.065, %180 ], [ %.065, %169 ], [ %.065, %159 ], [ %.065, %158 ], [ %.065, %155 ], [ %.065, %153 ], [ %.065, %150 ], [ %.065, %148 ], [ %.065, %147 ], [ %.065, %146 ], [ %.065, %132 ], [ %.065, %122 ], [ %.065, %119 ], [ %.065, %118 ], [ %.065, %117 ], [ %.065, %106 ], [ %.065, %96 ], [ %.065, %93 ], [ %.065, %91 ], [ %.065, %90 ], [ %.neg77, %80 ], [ %.065, %70 ], [ %.065, %69 ], [ %.065, %52 ], [ %.065, %42 ], [ %.065, %39 ], [ 1, %38 ], [ %.065, %36 ], [ %.065, %35 ], [ %.065, %33 ], [ %.065, %24 ], [ %.065, %21 ], [ %.065, %16 ], [ %.065, %14 ], [ %.065, %8 ], [ %.065, %5 ]
  %.063.be = phi i32 [ %.063, %4 ], [ %.063, %370 ], [ %.063, %368 ], [ %.063, %361 ], [ %.063, %360 ], [ %.063, %359 ], [ %.063, %358 ], [ %.063, %353 ], [ %.063, %351 ], [ %.063, %349 ], [ %.063, %341 ], [ %.063, %339 ], [ %.063, %329 ], [ %.063, %319 ], [ %.063, %318 ], [ %.063, %307 ], [ %.063, %297 ], [ %.063, %295 ], [ %.063, %293 ], [ %.063, %292 ], [ %.063, %291 ], [ %.063, %284 ], [ %.063, %283 ], [ %.063, %267 ], [ %.063, %257 ], [ %.063, %254 ], [ %.063, %253 ], [ %.063, %243 ], [ %.063, %233 ], [ %.063, %226 ], [ %.063, %219 ], [ %.063, %217 ], [ %.063, %206 ], [ %.063, %196 ], [ %.063, %182 ], [ %.063, %180 ], [ %.063, %169 ], [ %.063, %159 ], [ %.063, %158 ], [ %.063, %155 ], [ %.063, %153 ], [ %.063, %150 ], [ %.063, %148 ], [ %.neg, %147 ], [ %.063, %146 ], [ %.063, %132 ], [ %.063, %122 ], [ %.063, %119 ], [ 30, %118 ], [ %.063, %117 ], [ %.063, %106 ], [ %.063, %96 ], [ %.063, %93 ], [ %.063, %91 ], [ %.063, %90 ], [ %.063, %80 ], [ %.063, %70 ], [ %.063, %69 ], [ %.063, %52 ], [ %.063, %42 ], [ %.063, %39 ], [ %.063, %38 ], [ %.063, %36 ], [ %.063, %35 ], [ %.063, %33 ], [ %.063, %24 ], [ %.063, %21 ], [ %.063, %16 ], [ %.063, %14 ], [ %.063, %8 ], [ %.063, %5 ]
  %.061.be = phi i32 [ %.061, %4 ], [ %.061, %370 ], [ %369, %368 ], [ %.061, %361 ], [ %.061, %360 ], [ %.061, %359 ], [ %.061, %358 ], [ %.061, %353 ], [ %.061, %351 ], [ %.061, %349 ], [ %.061, %341 ], [ %.061, %339 ], [ %.061, %329 ], [ %.061, %319 ], [ %.061, %318 ], [ %308, %307 ], [ %.061, %297 ], [ %.061, %295 ], [ %.061, %293 ], [ %.061, %292 ], [ %.061, %291 ], [ %.061, %284 ], [ %.061, %283 ], [ %.061, %267 ], [ %.061, %257 ], [ %.061, %254 ], [ %.061, %253 ], [ %.061, %243 ], [ %.061, %233 ], [ %.061, %226 ], [ %.061, %219 ], [ %.061, %217 ], [ %.061, %206 ], [ %.061, %196 ], [ %.061, %182 ], [ %.061, %180 ], [ %.061, %169 ], [ %.061, %159 ], [ %.061, %158 ], [ %.061, %155 ], [ %.061, %153 ], [ %.061, %150 ], [ 1, %148 ], [ %.061, %147 ], [ %.061, %146 ], [ %.061, %132 ], [ %.061, %122 ], [ %.061, %119 ], [ %.061, %118 ], [ %.061, %117 ], [ %.061, %106 ], [ %.061, %96 ], [ %.061, %93 ], [ %.061, %91 ], [ %.061, %90 ], [ %.061, %80 ], [ %.061, %70 ], [ %.061, %69 ], [ %.061, %52 ], [ %.061, %42 ], [ %.061, %39 ], [ %.061, %38 ], [ %.061, %36 ], [ %.061, %35 ], [ %.061, %33 ], [ %.061, %24 ], [ %.061, %21 ], [ %.061, %16 ], [ %.061, %14 ], [ %.061, %8 ], [ %.061, %5 ]
  %.059.be = phi i64 [ %.059, %4 ], [ %.059, %370 ], [ %.059, %368 ], [ %.059, %361 ], [ %.059, %360 ], [ %.059, %359 ], [ %.059, %358 ], [ %.059, %353 ], [ %.059, %351 ], [ %.059, %349 ], [ %.059, %341 ], [ %.059, %339 ], [ %.059, %329 ], [ %.059, %319 ], [ %.059, %318 ], [ %.059, %307 ], [ %.059, %297 ], [ %.059, %295 ], [ %.059, %293 ], [ %.059, %292 ], [ %.059, %291 ], [ %.059, %284 ], [ %.059, %283 ], [ %.059, %267 ], [ %.059, %257 ], [ %.059, %254 ], [ %.059, %253 ], [ %.059, %243 ], [ %.059, %233 ], [ %231, %226 ], [ %224, %219 ], [ %.059, %217 ], [ %.059, %206 ], [ %.059, %196 ], [ %.059, %182 ], [ %.059, %180 ], [ %.059, %169 ], [ %.059, %159 ], [ %.059, %158 ], [ %156, %155 ], [ 0, %153 ], [ %.059, %150 ], [ %.059, %148 ], [ %.059, %147 ], [ %.059, %146 ], [ %.059, %132 ], [ %.059, %122 ], [ %.059, %119 ], [ %.059, %118 ], [ %.059, %117 ], [ %.059, %106 ], [ %.059, %96 ], [ %.059, %93 ], [ %.059, %91 ], [ %.059, %90 ], [ %.059, %80 ], [ %.059, %70 ], [ %.059, %69 ], [ %.059, %52 ], [ %.059, %42 ], [ %.059, %39 ], [ %.059, %38 ], [ %.059, %36 ], [ %.059, %35 ], [ %.059, %33 ], [ %.059, %24 ], [ %.059, %21 ], [ %.059, %16 ], [ %.059, %14 ], [ %.059, %8 ], [ %.059, %5 ]
  %.057.be = phi i64 [ %.057, %4 ], [ %.057, %370 ], [ %.057, %368 ], [ %366, %361 ], [ %.057, %360 ], [ %.057, %359 ], [ %.057, %358 ], [ %.057, %353 ], [ %.057, %351 ], [ %.057, %349 ], [ %.057, %341 ], [ %.057, %339 ], [ %.057, %329 ], [ %.057, %319 ], [ %.057, %318 ], [ %.057, %307 ], [ %.057, %297 ], [ %.057, %295 ], [ %.057, %293 ], [ %.057, %292 ], [ %.057, %291 ], [ %289, %284 ], [ %.057, %283 ], [ %272, %267 ], [ %.057, %257 ], [ %.057, %254 ], [ %.057, %253 ], [ %.057, %243 ], [ %.057, %233 ], [ %.057, %226 ], [ %.057, %219 ], [ %.057, %217 ], [ %.057, %206 ], [ %.057, %196 ], [ %.057, %182 ], [ %.057, %180 ], [ %.057, %169 ], [ %.057, %159 ], [ %.057, %158 ], [ %.057, %155 ], [ 0, %153 ], [ %.057, %150 ], [ %.057, %148 ], [ %.057, %147 ], [ %.057, %146 ], [ %.057, %132 ], [ %.057, %122 ], [ %.057, %119 ], [ %.057, %118 ], [ %.057, %117 ], [ %.057, %106 ], [ %.057, %96 ], [ %.057, %93 ], [ %.057, %91 ], [ %.057, %90 ], [ %.057, %80 ], [ %.057, %70 ], [ %.057, %69 ], [ %.057, %52 ], [ %.057, %42 ], [ %.057, %39 ], [ %.057, %38 ], [ %.057, %36 ], [ %.057, %35 ], [ %.057, %33 ], [ %.057, %24 ], [ %.057, %21 ], [ %.057, %16 ], [ %.057, %14 ], [ %.057, %8 ], [ %.057, %5 ]
  %.055.be = phi i32 [ %.055, %4 ], [ %.055, %370 ], [ %.055, %368 ], [ %.055, %361 ], [ %.055, %360 ], [ %.055, %359 ], [ %.055, %358 ], [ %.055, %353 ], [ %.055, %351 ], [ %.055, %349 ], [ %.055, %341 ], [ %.055, %339 ], [ %.055, %329 ], [ %.055, %319 ], [ %.055, %318 ], [ %.055, %307 ], [ %.055, %297 ], [ %.055, %295 ], [ %294, %293 ], [ %.055, %292 ], [ %.055, %291 ], [ %.055, %284 ], [ %.055, %283 ], [ %.055, %267 ], [ %.055, %257 ], [ %.055, %254 ], [ %.055, %253 ], [ %.055, %243 ], [ %.055, %233 ], [ %.055, %226 ], [ %.055, %219 ], [ %.055, %217 ], [ %.055, %206 ], [ %.055, %196 ], [ %.055, %182 ], [ %.055, %180 ], [ %.055, %169 ], [ %.055, %159 ], [ 30, %158 ], [ %.055, %155 ], [ %.055, %153 ], [ %.055, %150 ], [ %.055, %148 ], [ %.055, %147 ], [ %.055, %146 ], [ %.055, %132 ], [ %.055, %122 ], [ %.055, %119 ], [ %.055, %118 ], [ %.055, %117 ], [ %.055, %106 ], [ %.055, %96 ], [ %.055, %93 ], [ %.055, %91 ], [ %.055, %90 ], [ %.055, %80 ], [ %.055, %70 ], [ %.055, %69 ], [ %.055, %52 ], [ %.055, %42 ], [ %.055, %39 ], [ %.055, %38 ], [ %.055, %36 ], [ %.055, %35 ], [ %.055, %33 ], [ %.055, %24 ], [ %.055, %21 ], [ %.055, %16 ], [ %.055, %14 ], [ %.055, %8 ], [ %.055, %5 ]
  %.053.be = phi i64 [ %.053, %4 ], [ %.053, %370 ], [ %.053, %368 ], [ %.053, %361 ], [ %.053, %360 ], [ %.053, %359 ], [ %.053, %358 ], [ %.053, %353 ], [ %.053, %351 ], [ %.053, %349 ], [ %.053, %341 ], [ %.053, %339 ], [ %.053, %329 ], [ %.053, %319 ], [ %.053, %318 ], [ %.053, %307 ], [ %.053, %297 ], [ %.053, %295 ], [ %.053, %293 ], [ %.053, %292 ], [ %.053, %291 ], [ %.053, %284 ], [ %.053, %283 ], [ %.053, %267 ], [ %.053, %257 ], [ %.053, %254 ], [ %.053, %253 ], [ %.053, %243 ], [ %.053, %233 ], [ %.053, %226 ], [ %.053, %219 ], [ %.053, %217 ], [ %.053, %206 ], [ %.053, %196 ], [ %187, %182 ], [ %.053, %180 ], [ %.053, %169 ], [ %.053, %159 ], [ %.053, %158 ], [ %.053, %155 ], [ %.053, %153 ], [ %.053, %150 ], [ %.053, %148 ], [ %.053, %147 ], [ %.053, %146 ], [ %.053, %132 ], [ %.053, %122 ], [ %.053, %119 ], [ %.053, %118 ], [ %.053, %117 ], [ %.053, %106 ], [ %.053, %96 ], [ %.053, %93 ], [ %.053, %91 ], [ %.053, %90 ], [ %.053, %80 ], [ %.053, %70 ], [ %.053, %69 ], [ %.053, %52 ], [ %.053, %42 ], [ %.053, %39 ], [ %.053, %38 ], [ %.053, %36 ], [ %.053, %35 ], [ %.053, %33 ], [ %.053, %24 ], [ %.053, %21 ], [ %.053, %16 ], [ %.053, %14 ], [ %.053, %8 ], [ %.053, %5 ]
  %.051.be = phi i64 [ %.051, %4 ], [ %.051, %370 ], [ %.051, %368 ], [ %.051, %361 ], [ %.051, %360 ], [ %.051, %359 ], [ %.051, %358 ], [ %.051, %353 ], [ %.051, %351 ], [ %.051, %349 ], [ %.051, %341 ], [ %.051, %339 ], [ %.051, %329 ], [ %.051, %319 ], [ %.051, %318 ], [ %.051, %307 ], [ %.051, %297 ], [ %.051, %295 ], [ %.051, %293 ], [ %.051, %292 ], [ %.051, %291 ], [ %.051, %284 ], [ %.051, %283 ], [ %.051, %267 ], [ %.051, %257 ], [ %.051, %254 ], [ %.051, %253 ], [ %.051, %243 ], [ %.051, %233 ], [ %.051, %226 ], [ %.051, %219 ], [ %.051, %217 ], [ %.051, %206 ], [ %.051, %196 ], [ %191, %182 ], [ %.051, %180 ], [ %.051, %169 ], [ %.051, %159 ], [ %.051, %158 ], [ %.051, %155 ], [ %.051, %153 ], [ %.051, %150 ], [ %.051, %148 ], [ %.051, %147 ], [ %.051, %146 ], [ %.051, %132 ], [ %.051, %122 ], [ %.051, %119 ], [ %.051, %118 ], [ %.051, %117 ], [ %.051, %106 ], [ %.051, %96 ], [ %.051, %93 ], [ %.051, %91 ], [ %.051, %90 ], [ %.051, %80 ], [ %.051, %70 ], [ %.051, %69 ], [ %.051, %52 ], [ %.051, %42 ], [ %.051, %39 ], [ %.051, %38 ], [ %.051, %36 ], [ %.051, %35 ], [ %.051, %33 ], [ %.051, %24 ], [ %.051, %21 ], [ %.051, %16 ], [ %.051, %14 ], [ %.051, %8 ], [ %.051, %5 ]
  %.0.be = phi i32 [ %.0, %4 ], [ -2007088532, %370 ], [ 1495333124, %368 ], [ -2099284627, %361 ], [ -1752641757, %360 ], [ 1239090327, %359 ], [ -1703969498, %358 ], [ 376564114, %353 ], [ -774235816, %351 ], [ -1405754117, %349 ], [ -1933730904, %341 ], [ 1827366887, %339 ], [ %338, %329 ], [ %328, %319 ], [ -1923429160, %318 ], [ %317, %307 ], [ %306, %297 ], [ -1669036742, %295 ], [ 1199208361, %293 ], [ 1007907705, %292 ], [ -1984267504, %291 ], [ -218267022, %284 ], [ -218267022, %283 ], [ %282, %267 ], [ %266, %257 ], [ %256, %254 ], [ -1984267504, %253 ], [ %252, %243 ], [ %242, %233 ], [ 1253675138, %226 ], [ 1253675138, %219 ], [ %218, %217 ], [ %216, %206 ], [ %205, %196 ], [ %195, %182 ], [ %181, %180 ], [ %179, %169 ], [ %168, %159 ], [ 1199208361, %158 ], [ -1813228332, %155 ], [ %154, %153 ], [ %152, %150 ], [ -1923429160, %148 ], [ 1042870475, %147 ], [ 614067054, %146 ], [ %145, %132 ], [ %131, %122 ], [ %121, %119 ], [ 1042870475, %118 ], [ 1713861476, %117 ], [ %116, %106 ], [ %105, %96 ], [ 1713861476, %93 ], [ %92, %91 ], [ -1336951255, %90 ], [ %89, %80 ], [ %79, %70 ], [ -399605657, %69 ], [ %68, %52 ], [ %51, %42 ], [ %41, %39 ], [ -1336951255, %38 ], [ -371774767, %36 ], [ 611914877, %35 ], [ 1827366887, %33 ], [ %32, %24 ], [ %23, %21 ], [ -371774767, %16 ], [ 1379519390, %14 ], [ -659329909, %8 ], [ %7, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = load i32, i32* @n, align 4
  %.not81 = icmp sgt i32 %.071, %6
  %7 = select i1 %.not81, i32 -171058171, i32 728161984
  br label %.backedge

8:                                                ; preds = %4
  %9 = tail call i32 @_Z4readv()
  %10 = sext i32 %.071 to i64
  %11 = getelementptr inbounds [1005 x i32], [1005 x i32]* @x, i64 0, i64 %10
  store i32 %9, i32* %11, align 4
  %12 = tail call i32 @_Z4readv()
  %13 = getelementptr inbounds [1005 x i32], [1005 x i32]* @y, i64 0, i64 %10
  store i32 %12, i32* %13, align 4
  br label %.backedge

14:                                               ; preds = %4
  %15 = add i32 %.071, 1
  br label %.backedge

16:                                               ; preds = %4
  %17 = load i32, i32* getelementptr inbounds ([1005 x i32], [1005 x i32]* @x, i64 0, i64 1), align 4
  %18 = load i32, i32* getelementptr inbounds ([1005 x i32], [1005 x i32]* @y, i64 0, i64 1), align 4
  %19 = add i32 %18, %17
  %20 = and i32 %19, 1
  br label %.backedge

21:                                               ; preds = %4
  %22 = load i32, i32* @n, align 4
  %.not79 = icmp sgt i32 %.067, %22
  %23 = select i1 %.not79, i32 -2053484648, i32 1448541033
  br label %.backedge

24:                                               ; preds = %4
  %25 = sext i32 %.067 to i64
  %26 = getelementptr inbounds [1005 x i32], [1005 x i32]* @x, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds [1005 x i32], [1005 x i32]* @y, i64 0, i64 %25
  %29 = load i32, i32* %28, align 4
  %30 = add i32 %29, %27
  %31 = and i32 %30, 1
  %.not78 = icmp eq i32 %31, %.069
  %32 = select i1 %.not78, i32 -23513414, i32 -287865446
  br label %.backedge

33:                                               ; preds = %4
  %34 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

35:                                               ; preds = %4
  br label %.backedge

36:                                               ; preds = %4
  %37 = add i32 %.067, 1
  br label %.backedge

38:                                               ; preds = %4
  store i32 1, i32* getelementptr inbounds ([35 x i32], [35 x i32]* @bin, i64 0, i64 0), align 16
  br label %.backedge

39:                                               ; preds = %4
  %40 = icmp slt i32 %.065, 31
  %41 = select i1 %40, i32 -223355956, i32 873883759
  br label %.backedge

42:                                               ; preds = %4
  %43 = load i32, i32* @x.11, align 4
  %44 = load i32, i32* @y.12, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 -1933730904, i32 -1741872109
  br label %.backedge

52:                                               ; preds = %4
  %53 = add i32 %.065, -1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = shl i32 %56, 1
  %58 = sext i32 %.065 to i64
  %59 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %58
  store i32 %57, i32* %59, align 4
  %60 = load i32, i32* @x.11, align 4
  %61 = load i32, i32* @y.12, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -837677992, i32 -1741872109
  br label %.backedge

69:                                               ; preds = %4
  br label %.backedge

70:                                               ; preds = %4
  %71 = load i32, i32* @x.11, align 4
  %72 = load i32, i32* @y.12, align 4
  %73 = add i32 %71, -1
  %74 = mul i32 %73, %71
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %77, %76
  %79 = select i1 %78, i32 -1405754117, i32 -1073055636
  br label %.backedge

80:                                               ; preds = %4
  %.neg77 = add i32 %.065, 1
  %81 = load i32, i32* @x.11, align 4
  %82 = load i32, i32* @y.12, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 207013413, i32 -1073055636
  br label %.backedge

90:                                               ; preds = %4
  br label %.backedge

91:                                               ; preds = %4
  %.not76 = icmp eq i32 %.069, 0
  %92 = select i1 %.not76, i32 -749116576, i32 -728416495
  br label %.backedge

93:                                               ; preds = %4
  %94 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %95 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  br label %.backedge

96:                                               ; preds = %4
  %97 = load i32, i32* @x.11, align 4
  %98 = load i32, i32* @y.12, align 4
  %99 = add i32 %97, -1
  %100 = mul i32 %99, %97
  %101 = and i32 %100, 1
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %103, %102
  %105 = select i1 %104, i32 -774235816, i32 1197543683
  br label %.backedge

106:                                              ; preds = %4
  %107 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  %108 = load i32, i32* @x.11, align 4
  %109 = load i32, i32* @y.12, align 4
  %110 = add i32 %108, -1
  %111 = mul i32 %110, %108
  %112 = and i32 %111, 1
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %114, %113
  %116 = select i1 %115, i32 -940842009, i32 1197543683
  br label %.backedge

117:                                              ; preds = %4
  br label %.backedge

118:                                              ; preds = %4
  br label %.backedge

119:                                              ; preds = %4
  %120 = icmp sgt i32 %.063, -1
  %121 = select i1 %120, i32 1050920482, i32 1290374226
  br label %.backedge

122:                                              ; preds = %4
  %123 = load i32, i32* @x.11, align 4
  %124 = load i32, i32* @y.12, align 4
  %125 = add i32 %123, -1
  %126 = mul i32 %125, %123
  %127 = and i32 %126, 1
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %129, %128
  %131 = select i1 %130, i32 376564114, i32 -659802743
  br label %.backedge

132:                                              ; preds = %4
  %133 = sext i32 %.063 to i64
  %134 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 %135)
  %137 = load i32, i32* @x.11, align 4
  %138 = load i32, i32* @y.12, align 4
  %139 = add i32 %137, -1
  %140 = mul i32 %139, %137
  %141 = and i32 %140, 1
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %143, %142
  %145 = select i1 %144, i32 2070264830, i32 -659802743
  br label %.backedge

146:                                              ; preds = %4
  br label %.backedge

147:                                              ; preds = %4
  %.neg = add i32 %.063, -1
  br label %.backedge

148:                                              ; preds = %4
  %149 = tail call i32 @putchar(i32 10)
  br label %.backedge

150:                                              ; preds = %4
  %151 = load i32, i32* @n, align 4
  %.not75 = icmp sgt i32 %.061, %151
  %152 = select i1 %.not75, i32 -939634545, i32 -366977582
  br label %.backedge

153:                                              ; preds = %4
  %.not = icmp eq i32 %.069, 0
  %154 = select i1 %.not, i32 -2060097201, i32 -1813228332
  br label %.backedge

155:                                              ; preds = %4
  %156 = add i64 %.059, 1
  %157 = tail call i32 @putchar(i32 82)
  br label %.backedge

158:                                              ; preds = %4
  br label %.backedge

159:                                              ; preds = %4
  %160 = load i32, i32* @x.11, align 4
  %161 = load i32, i32* @y.12, align 4
  %162 = add i32 %160, -1
  %163 = mul i32 %162, %160
  %164 = and i32 %163, 1
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %166, %165
  %168 = select i1 %167, i32 -1703969498, i32 242818864
  br label %.backedge

169:                                              ; preds = %4
  %170 = icmp sgt i32 %.055, -1
  store i1 %170, i1* %2, align 1
  %171 = load i32, i32* @x.11, align 4
  %172 = load i32, i32* @y.12, align 4
  %173 = add i32 %171, -1
  %174 = mul i32 %173, %171
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %177, %176
  %179 = select i1 %178, i32 -876692893, i32 242818864
  br label %.backedge

180:                                              ; preds = %4
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %181 = select i1 %.0..0..0., i32 620842597, i32 70291086
  br label %.backedge

182:                                              ; preds = %4
  %183 = sext i32 %.061 to i64
  %184 = getelementptr inbounds [1005 x i32], [1005 x i32]* @x, i64 0, i64 %183
  %185 = load i32, i32* %184, align 4
  %186 = sext i32 %185 to i64
  %187 = sub i64 %186, %.059
  %188 = getelementptr inbounds [1005 x i32], [1005 x i32]* @y, i64 0, i64 %183
  %189 = load i32, i32* %188, align 4
  %190 = sext i32 %189 to i64
  %191 = sub i64 %190, %.057
  %192 = tail call i64 @_ZSt3absx(i64 %187)
  %193 = tail call i64 @_ZSt3absx(i64 %191)
  %194 = icmp sgt i64 %192, %193
  %195 = select i1 %194, i32 2110604386, i32 365401546
  br label %.backedge

196:                                              ; preds = %4
  %197 = load i32, i32* @x.11, align 4
  %198 = load i32, i32* @y.12, align 4
  %199 = add i32 %197, -1
  %200 = mul i32 %199, %197
  %201 = and i32 %200, 1
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %203, %202
  %205 = select i1 %204, i32 1239090327, i32 2049178758
  br label %.backedge

206:                                              ; preds = %4
  %207 = icmp sgt i64 %.053, 0
  store i1 %207, i1* %1, align 1
  %208 = load i32, i32* @x.11, align 4
  %209 = load i32, i32* @y.12, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 1961838752, i32 2049178758
  br label %.backedge

217:                                              ; preds = %4
  %.0..0..0.50 = load volatile i1, i1* %1, align 1
  %218 = select i1 %.0..0..0.50, i32 304691007, i32 -1320858902
  br label %.backedge

219:                                              ; preds = %4
  %220 = sext i32 %.055 to i64
  %221 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = sext i32 %222 to i64
  %224 = add i64 %.059, %223
  %225 = tail call i32 @putchar(i32 82)
  br label %.backedge

226:                                              ; preds = %4
  %227 = sext i32 %.055 to i64
  %228 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = sext i32 %229 to i64
  %231 = sub i64 %.059, %230
  %232 = tail call i32 @putchar(i32 76)
  br label %.backedge

233:                                              ; preds = %4
  %234 = load i32, i32* @x.11, align 4
  %235 = load i32, i32* @y.12, align 4
  %236 = add i32 %234, -1
  %237 = mul i32 %236, %234
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %240, %239
  %242 = select i1 %241, i32 -1752641757, i32 -509759050
  br label %.backedge

243:                                              ; preds = %4
  %244 = load i32, i32* @x.11, align 4
  %245 = load i32, i32* @y.12, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 290421126, i32 -509759050
  br label %.backedge

253:                                              ; preds = %4
  br label %.backedge

254:                                              ; preds = %4
  %255 = icmp sgt i64 %.051, 0
  %256 = select i1 %255, i32 1010606328, i32 -1030053923
  br label %.backedge

257:                                              ; preds = %4
  %258 = load i32, i32* @x.11, align 4
  %259 = load i32, i32* @y.12, align 4
  %260 = add i32 %258, -1
  %261 = mul i32 %260, %258
  %262 = and i32 %261, 1
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %264, %263
  %266 = select i1 %265, i32 -2099284627, i32 -568698018
  br label %.backedge

267:                                              ; preds = %4
  %268 = sext i32 %.055 to i64
  %269 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %268
  %270 = load i32, i32* %269, align 4
  %271 = sext i32 %270 to i64
  %272 = add i64 %.057, %271
  %273 = tail call i32 @putchar(i32 85)
  %274 = load i32, i32* @x.11, align 4
  %275 = load i32, i32* @y.12, align 4
  %276 = add i32 %274, -1
  %277 = mul i32 %276, %274
  %278 = and i32 %277, 1
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %280, %279
  %282 = select i1 %281, i32 2022267336, i32 -568698018
  br label %.backedge

283:                                              ; preds = %4
  br label %.backedge

284:                                              ; preds = %4
  %285 = sext i32 %.055 to i64
  %286 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %285
  %287 = load i32, i32* %286, align 4
  %288 = sext i32 %287 to i64
  %289 = sub i64 %.057, %288
  %290 = tail call i32 @putchar(i32 68)
  br label %.backedge

291:                                              ; preds = %4
  br label %.backedge

292:                                              ; preds = %4
  br label %.backedge

293:                                              ; preds = %4
  %294 = add i32 %.055, -1
  br label %.backedge

295:                                              ; preds = %4
  %296 = tail call i32 @putchar(i32 10)
  br label %.backedge

297:                                              ; preds = %4
  %298 = load i32, i32* @x.11, align 4
  %299 = load i32, i32* @y.12, align 4
  %300 = add i32 %298, -1
  %301 = mul i32 %300, %298
  %302 = and i32 %301, 1
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %304, %303
  %306 = select i1 %305, i32 1495333124, i32 -119268017
  br label %.backedge

307:                                              ; preds = %4
  %308 = add i32 %.061, 1
  %309 = load i32, i32* @x.11, align 4
  %310 = load i32, i32* @y.12, align 4
  %311 = add i32 %309, -1
  %312 = mul i32 %311, %309
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %315, %314
  %317 = select i1 %316, i32 1159864905, i32 -119268017
  br label %.backedge

318:                                              ; preds = %4
  br label %.backedge

319:                                              ; preds = %4
  %320 = load i32, i32* @x.11, align 4
  %321 = load i32, i32* @y.12, align 4
  %322 = add i32 %320, -1
  %323 = mul i32 %322, %320
  %324 = and i32 %323, 1
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %326, %325
  %328 = select i1 %327, i32 -2007088532, i32 1936118835
  br label %.backedge

329:                                              ; preds = %4
  %330 = load i32, i32* @x.11, align 4
  %331 = load i32, i32* @y.12, align 4
  %332 = add i32 %330, -1
  %333 = mul i32 %332, %330
  %334 = and i32 %333, 1
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %336, %335
  %338 = select i1 %337, i32 -74852185, i32 1936118835
  br label %.backedge

339:                                              ; preds = %4
  br label %.backedge

340:                                              ; preds = %4
  ret i32 0

341:                                              ; preds = %4
  %342 = add i32 %.065, -1
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %343
  %345 = load i32, i32* %344, align 4
  %346 = shl i32 %345, 1
  %347 = sext i32 %.065 to i64
  %348 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %347
  store i32 %346, i32* %348, align 4
  br label %.backedge

349:                                              ; preds = %4
  %350 = add i32 %.065, 1
  br label %.backedge

351:                                              ; preds = %4
  %352 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  br label %.backedge

353:                                              ; preds = %4
  %354 = sext i32 %.063 to i64
  %355 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %354
  %356 = load i32, i32* %355, align 4
  %357 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 %356)
  br label %.backedge

358:                                              ; preds = %4
  br label %.backedge

359:                                              ; preds = %4
  br label %.backedge

360:                                              ; preds = %4
  br label %.backedge

361:                                              ; preds = %4
  %362 = sext i32 %.055 to i64
  %363 = getelementptr inbounds [35 x i32], [35 x i32]* @bin, i64 0, i64 %362
  %364 = load i32, i32* %363, align 4
  %365 = sext i32 %364 to i64
  %366 = add i64 %.057, %365
  %367 = tail call i32 @putchar(i32 85)
  br label %.backedge

368:                                              ; preds = %4
  %369 = add i32 %.061, 1
  br label %.backedge

370:                                              ; preds = %4
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt3absx(i64 %0) local_unnamed_addr #7 comdat {
  %2 = tail call i64 @llvm.abs.i64(i64 %0, i1 false)
  ret i64 %2
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s771145045.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #8

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
