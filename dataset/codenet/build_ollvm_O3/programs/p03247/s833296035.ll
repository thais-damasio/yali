; ModuleID = 'build_ollvm/programs/p03247/s833296035.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s833296035.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

$_Z4readv = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = local_unnamed_addr global i64 0, align 8
@X = local_unnamed_addr global [1005 x i64] zeroinitializer, align 16
@Y = local_unnamed_addr global [1005 x i64] zeroinitializer, align 16
@len = local_unnamed_addr global [50 x i64] zeroinitializer, align 16
@ans = global [50 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%lld \00", align 1
@stdin = external local_unnamed_addr global %struct._IO_FILE*, align 8
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s833296035.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1764067583, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1764067583, label %11
    i32 1327851106, label %14
    i32 630366504, label %25
    i32 1931060653, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1327851106, i32 1931060653
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 630366504, i32 1931060653
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 1327851106, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i64 @_Z3Absx(i64 %0) local_unnamed_addr #4 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = sub i64 0, %0
  br label %.outer.outer

.outer.outer:                                     ; preds = %.outer.outer.backedge, %1
  %.05.ph.ph = phi i32 [ 721989220, %1 ], [ -696940386, %.outer.outer.backedge ]
  %.0.ph.ph = phi i64 [ undef, %1 ], [ %.0.ph.ph.be, %.outer.outer.backedge ]
  br label %.outer

.outer:                                           ; preds = %.outer.outer, %5
  %.05.ph = phi i32 [ %7, %5 ], [ %.05.ph.ph, %.outer.outer ]
  br label %4

4:                                                ; preds = %.outer, %4
  switch i32 %.05.ph, label %4 [
    i32 721989220, label %5
    i32 1139205261, label %.outer.outer.backedge
    i32 1649405072, label %8
    i32 -696940386, label %9
  ]

5:                                                ; preds = %4
  %.0..0..0. = load volatile i64, i64* %2, align 8
  %6 = icmp sgt i64 %.0..0..0., -1
  %7 = select i1 %6, i32 1139205261, i32 1649405072
  br label %.outer

.outer.outer.backedge:                            ; preds = %4, %8
  %.0.ph.ph.be = phi i64 [ %3, %8 ], [ %0, %4 ]
  br label %.outer.outer

8:                                                ; preds = %4
  br label %.outer.outer.backedge

9:                                                ; preds = %4
  ret i64 %.0.ph.ph
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = tail call i64 @_Z4readv()
  store i64 %6, i64* @n, align 8
  br label %7

7:                                                ; preds = %.backedge, %0
  %.098 = phi i64 [ 1, %0 ], [ %.098.be, %.backedge ]
  %.096 = phi i64 [ undef, %0 ], [ %.096.be, %.backedge ]
  %.094 = phi i64 [ undef, %0 ], [ %.094.be, %.backedge ]
  %.092 = phi i64 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i64 [ undef, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i64 [ undef, %0 ], [ %.088.be, %.backedge ]
  %.086 = phi i64 [ undef, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i64 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i64 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i64 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i64 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i64 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i64 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.0 = phi i32 [ -1695027366, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1695027366, label %8
    i32 293206928, label %11
    i32 -1848571027, label %16
    i32 842097800, label %18
    i32 1020565845, label %28
    i32 2115023861, label %43
    i32 -777378598, label %44
    i32 -21907424, label %54
    i32 903156848, label %66
    i32 2099673652, label %68
    i32 2030077588, label %77
    i32 734008139, label %79
    i32 2054236025, label %80
    i32 -956090606, label %82
    i32 -1038559075, label %86
    i32 2052122017, label %87
    i32 -702679112, label %90
    i32 1227423663, label %96
    i32 1689575461, label %98
    i32 810672409, label %99
    i32 1900974162, label %100
    i32 -1535943443, label %110
    i32 1450143096, label %121
    i32 -1860986031, label %123
    i32 -1987060371, label %133
    i32 636114414, label %148
    i32 -1536820999, label %149
    i32 -143625377, label %159
    i32 1792594765, label %170
    i32 665126089, label %171
    i32 1446251458, label %172
    i32 -204101357, label %182
    i32 -1117787740, label %192
    i32 1189636155, label %193
    i32 170038840, label %196
    i32 1451431508, label %206
    i32 42414741, label %219
    i32 1662419965, label %220
    i32 -1496364278, label %222
    i32 -387237285, label %223
    i32 -1648245328, label %226
    i32 -64717450, label %227
    i32 759557777, label %237
    i32 -606581767, label %248
    i32 728921958, label %250
    i32 -51800245, label %260
    i32 932763221, label %279
    i32 1759465819, label %281
    i32 -422544235, label %291
    i32 -1813875306, label %302
    i32 2043839560, label %304
    i32 -599216693, label %314
    i32 -1240492809, label %328
    i32 1334759051, label %329
    i32 1373917825, label %339
    i32 1481478146, label %353
    i32 -676427632, label %354
    i32 -671144841, label %355
    i32 1493096914, label %358
    i32 746127162, label %363
    i32 2010014169, label %368
    i32 899463902, label %369
    i32 1475219628, label %370
    i32 -2071952779, label %372
    i32 -894441847, label %373
    i32 -280204214, label %375
    i32 421654359, label %380
    i32 386455435, label %381
    i32 1608469163, label %387
    i32 1045696451, label %388
    i32 -59743532, label %389
    i32 1084064370, label %395
    i32 45619401, label %397
    i32 -1452882173, label %398
    i32 1308811465, label %402
    i32 1400048539, label %403
    i32 -232990862, label %412
    i32 673571791, label %413
    i32 432729877, label %418
  ]

.backedge:                                        ; preds = %7, %418, %413, %412, %403, %402, %398, %397, %395, %389, %388, %387, %381, %375, %373, %372, %370, %369, %368, %363, %358, %355, %354, %353, %339, %329, %328, %314, %304, %302, %291, %281, %279, %260, %250, %248, %237, %227, %226, %223, %222, %220, %219, %206, %196, %193, %192, %182, %172, %171, %170, %159, %149, %148, %133, %123, %121, %110, %100, %99, %98, %96, %90, %87, %86, %82, %80, %79, %77, %68, %66, %54, %44, %43, %28, %18, %16, %11, %8
  %.098.be = phi i64 [ %.098, %7 ], [ %.098, %418 ], [ %.098, %413 ], [ %.098, %412 ], [ %.098, %403 ], [ %.098, %402 ], [ %.098, %398 ], [ %.098, %397 ], [ %.098, %395 ], [ %.098, %389 ], [ %.098, %388 ], [ %.098, %387 ], [ %.098, %381 ], [ %.098, %375 ], [ %.098, %373 ], [ %.098, %372 ], [ %.098, %370 ], [ %.098, %369 ], [ %.098, %368 ], [ %.098, %363 ], [ %.098, %358 ], [ %.098, %355 ], [ %.098, %354 ], [ %.098, %353 ], [ %.098, %339 ], [ %.098, %329 ], [ %.098, %328 ], [ %.098, %314 ], [ %.098, %304 ], [ %.098, %302 ], [ %.098, %291 ], [ %.098, %281 ], [ %.098, %279 ], [ %.098, %260 ], [ %.098, %250 ], [ %.098, %248 ], [ %.098, %237 ], [ %.098, %227 ], [ %.098, %226 ], [ %.098, %223 ], [ %.098, %222 ], [ %.098, %220 ], [ %.098, %219 ], [ %.098, %206 ], [ %.098, %196 ], [ %.098, %193 ], [ %.098, %192 ], [ %.098, %182 ], [ %.098, %172 ], [ %.098, %171 ], [ %.098, %170 ], [ %.098, %159 ], [ %.098, %149 ], [ %.098, %148 ], [ %.098, %133 ], [ %.098, %123 ], [ %.098, %121 ], [ %.098, %110 ], [ %.098, %100 ], [ %.098, %99 ], [ %.098, %98 ], [ %.098, %96 ], [ %.098, %90 ], [ %.098, %87 ], [ %.098, %86 ], [ %.098, %82 ], [ %.098, %80 ], [ %.098, %79 ], [ %.098, %77 ], [ %.098, %68 ], [ %.098, %66 ], [ %.098, %54 ], [ %.098, %44 ], [ %.098, %43 ], [ %.098, %28 ], [ %.098, %18 ], [ %17, %16 ], [ %.098, %11 ], [ %.098, %8 ]
  %.096.be = phi i64 [ %.096, %7 ], [ %.096, %418 ], [ %.096, %413 ], [ %.096, %412 ], [ %.096, %403 ], [ %.096, %402 ], [ %.096, %398 ], [ %.096, %397 ], [ %.096, %395 ], [ %.096, %389 ], [ %.096, %388 ], [ %.096, %387 ], [ %386, %381 ], [ %.096, %375 ], [ %.096, %373 ], [ %.096, %372 ], [ %.096, %370 ], [ %.096, %369 ], [ %.096, %368 ], [ %.096, %363 ], [ %.096, %358 ], [ %.096, %355 ], [ %.096, %354 ], [ %.096, %353 ], [ %.096, %339 ], [ %.096, %329 ], [ %.096, %328 ], [ %.096, %314 ], [ %.096, %304 ], [ %.096, %302 ], [ %.096, %291 ], [ %.096, %281 ], [ %.096, %279 ], [ %.096, %260 ], [ %.096, %250 ], [ %.096, %248 ], [ %.096, %237 ], [ %.096, %227 ], [ %.096, %226 ], [ %.096, %223 ], [ %.096, %222 ], [ %.096, %220 ], [ %.096, %219 ], [ %.096, %206 ], [ %.096, %196 ], [ %.096, %193 ], [ %.096, %192 ], [ %.096, %182 ], [ %.096, %172 ], [ %.096, %171 ], [ %.096, %170 ], [ %.096, %159 ], [ %.096, %149 ], [ %.096, %148 ], [ %.096, %133 ], [ %.096, %123 ], [ %.096, %121 ], [ %.096, %110 ], [ %.096, %100 ], [ %.096, %99 ], [ %.096, %98 ], [ %.096, %96 ], [ %.096, %90 ], [ %.096, %87 ], [ %.096, %86 ], [ %.096, %82 ], [ %.096, %80 ], [ %.096, %79 ], [ %.096, %77 ], [ %.096, %68 ], [ %.096, %66 ], [ %.096, %54 ], [ %.096, %44 ], [ %.096, %43 ], [ %33, %28 ], [ %.096, %18 ], [ %.096, %16 ], [ %.096, %11 ], [ %.096, %8 ]
  %.094.be = phi i64 [ %.094, %7 ], [ %.094, %418 ], [ %.094, %413 ], [ %.094, %412 ], [ %.094, %403 ], [ %.094, %402 ], [ %.094, %398 ], [ %.094, %397 ], [ %.094, %395 ], [ %.094, %389 ], [ %.094, %388 ], [ %.094, %387 ], [ 1, %381 ], [ %.094, %375 ], [ %.094, %373 ], [ %.094, %372 ], [ %.094, %370 ], [ %.094, %369 ], [ %.094, %368 ], [ %.094, %363 ], [ %.094, %358 ], [ %.094, %355 ], [ %.094, %354 ], [ %.094, %353 ], [ %.094, %339 ], [ %.094, %329 ], [ %.094, %328 ], [ %.094, %314 ], [ %.094, %304 ], [ %.094, %302 ], [ %.094, %291 ], [ %.094, %281 ], [ %.094, %279 ], [ %.094, %260 ], [ %.094, %250 ], [ %.094, %248 ], [ %.094, %237 ], [ %.094, %227 ], [ %.094, %226 ], [ %.094, %223 ], [ %.094, %222 ], [ %.094, %220 ], [ %.094, %219 ], [ %.094, %206 ], [ %.094, %196 ], [ %.094, %193 ], [ %.094, %192 ], [ %.094, %182 ], [ %.094, %172 ], [ %.094, %171 ], [ %.094, %170 ], [ %.094, %159 ], [ %.094, %149 ], [ %.094, %148 ], [ %.094, %133 ], [ %.094, %123 ], [ %.094, %121 ], [ %.094, %110 ], [ %.094, %100 ], [ %.094, %99 ], [ %.094, %98 ], [ %.094, %96 ], [ %.094, %90 ], [ %.094, %87 ], [ %.094, %86 ], [ %.094, %82 ], [ %81, %80 ], [ %.094, %79 ], [ %.094, %77 ], [ %.094, %68 ], [ %.094, %66 ], [ %.094, %54 ], [ %.094, %44 ], [ %.094, %43 ], [ 1, %28 ], [ %.094, %18 ], [ %.094, %16 ], [ %.094, %11 ], [ %.094, %8 ]
  %.092.be = phi i64 [ %.092, %7 ], [ %.092, %418 ], [ %.092, %413 ], [ %.092, %412 ], [ %.092, %403 ], [ %.092, %402 ], [ %.092, %398 ], [ %.092, %397 ], [ %.092, %395 ], [ %393, %389 ], [ %.092, %388 ], [ %.092, %387 ], [ %.092, %381 ], [ %.092, %375 ], [ %.092, %373 ], [ %.092, %372 ], [ %.092, %370 ], [ %.092, %369 ], [ %.092, %368 ], [ %.092, %363 ], [ %.092, %358 ], [ %.092, %355 ], [ %.092, %354 ], [ %.092, %353 ], [ %.092, %339 ], [ %.092, %329 ], [ %.092, %328 ], [ %.092, %314 ], [ %.092, %304 ], [ %.092, %302 ], [ %.092, %291 ], [ %.092, %281 ], [ %.092, %279 ], [ %.092, %260 ], [ %.092, %250 ], [ %.092, %248 ], [ %.092, %237 ], [ %.092, %227 ], [ %.092, %226 ], [ %.092, %223 ], [ %.092, %222 ], [ %.092, %220 ], [ %.092, %219 ], [ %.092, %206 ], [ %.092, %196 ], [ %.092, %193 ], [ %.092, %192 ], [ %.092, %182 ], [ %.092, %172 ], [ %.092, %171 ], [ %.092, %170 ], [ %.092, %159 ], [ %.092, %149 ], [ %.092, %148 ], [ %137, %133 ], [ %.092, %123 ], [ %.092, %121 ], [ %.092, %110 ], [ %.092, %100 ], [ %.092, %99 ], [ %.092, %98 ], [ %.092, %96 ], [ %94, %90 ], [ %.092, %87 ], [ %.092, %86 ], [ 1, %82 ], [ %.092, %80 ], [ %.092, %79 ], [ %.092, %77 ], [ %.092, %68 ], [ %.092, %66 ], [ %.092, %54 ], [ %.092, %44 ], [ %.092, %43 ], [ %.092, %28 ], [ %.092, %18 ], [ %.092, %16 ], [ %.092, %11 ], [ %.092, %8 ]
  %.090.be = phi i64 [ %.090, %7 ], [ %.090, %418 ], [ %.090, %413 ], [ %.090, %412 ], [ %.090, %403 ], [ %.090, %402 ], [ %.090, %398 ], [ %.090, %397 ], [ %.090, %395 ], [ %.090, %389 ], [ %.090, %388 ], [ %.090, %387 ], [ %.090, %381 ], [ %.090, %375 ], [ %.090, %373 ], [ %.090, %372 ], [ %.090, %370 ], [ %.090, %369 ], [ %.090, %368 ], [ %.090, %363 ], [ %.090, %358 ], [ %.090, %355 ], [ %.090, %354 ], [ %.090, %353 ], [ %.090, %339 ], [ %.090, %329 ], [ %.090, %328 ], [ %.090, %314 ], [ %.090, %304 ], [ %.090, %302 ], [ %.090, %291 ], [ %.090, %281 ], [ %.090, %279 ], [ %.090, %260 ], [ %.090, %250 ], [ %.090, %248 ], [ %.090, %237 ], [ %.090, %227 ], [ %.090, %226 ], [ %.090, %223 ], [ %.090, %222 ], [ %.090, %220 ], [ %.090, %219 ], [ %.090, %206 ], [ %.090, %196 ], [ %.090, %193 ], [ %.090, %192 ], [ %.090, %182 ], [ %.090, %172 ], [ %.090, %171 ], [ %.090, %170 ], [ %.090, %159 ], [ %.090, %149 ], [ %.090, %148 ], [ %.090, %133 ], [ %.090, %123 ], [ %.090, %121 ], [ %.090, %110 ], [ %.090, %100 ], [ %.090, %99 ], [ %.090, %98 ], [ %97, %96 ], [ %.090, %90 ], [ %.090, %87 ], [ 1, %86 ], [ %.090, %82 ], [ %.090, %80 ], [ %.090, %79 ], [ %.090, %77 ], [ %.090, %68 ], [ %.090, %66 ], [ %.090, %54 ], [ %.090, %44 ], [ %.090, %43 ], [ %.090, %28 ], [ %.090, %18 ], [ %.090, %16 ], [ %.090, %11 ], [ %.090, %8 ]
  %.088.be = phi i64 [ %.088, %7 ], [ %.088, %418 ], [ %.088, %413 ], [ %.088, %412 ], [ %.088, %403 ], [ %.088, %402 ], [ %.088, %398 ], [ %.088, %397 ], [ %396, %395 ], [ %.088, %389 ], [ %.088, %388 ], [ %.088, %387 ], [ %.088, %381 ], [ %.088, %375 ], [ %.088, %373 ], [ %.088, %372 ], [ %.088, %370 ], [ %.088, %369 ], [ %.088, %368 ], [ %.088, %363 ], [ %.088, %358 ], [ %.088, %355 ], [ %.088, %354 ], [ %.088, %353 ], [ %.088, %339 ], [ %.088, %329 ], [ %.088, %328 ], [ %.088, %314 ], [ %.088, %304 ], [ %.088, %302 ], [ %.088, %291 ], [ %.088, %281 ], [ %.088, %279 ], [ %.088, %260 ], [ %.088, %250 ], [ %.088, %248 ], [ %.088, %237 ], [ %.088, %227 ], [ %.088, %226 ], [ %.088, %223 ], [ %.088, %222 ], [ %.088, %220 ], [ %.088, %219 ], [ %.088, %206 ], [ %.088, %196 ], [ %.088, %193 ], [ %.088, %192 ], [ %.088, %182 ], [ %.088, %172 ], [ %.088, %171 ], [ %.088, %170 ], [ %160, %159 ], [ %.088, %149 ], [ %.088, %148 ], [ %.088, %133 ], [ %.088, %123 ], [ %.088, %121 ], [ %.088, %110 ], [ %.088, %100 ], [ 0, %99 ], [ %.088, %98 ], [ %.088, %96 ], [ %.088, %90 ], [ %.088, %87 ], [ %.088, %86 ], [ %.088, %82 ], [ %.088, %80 ], [ %.088, %79 ], [ %.088, %77 ], [ %.088, %68 ], [ %.088, %66 ], [ %.088, %54 ], [ %.088, %44 ], [ %.088, %43 ], [ %.088, %28 ], [ %.088, %18 ], [ %.088, %16 ], [ %.088, %11 ], [ %.088, %8 ]
  %.086.be = phi i64 [ %.086, %7 ], [ %.086, %418 ], [ %.086, %413 ], [ %.086, %412 ], [ %.086, %403 ], [ %.086, %402 ], [ %.086, %398 ], [ 1, %397 ], [ %.086, %395 ], [ %.086, %389 ], [ %.086, %388 ], [ %.086, %387 ], [ %.086, %381 ], [ %.086, %375 ], [ %.086, %373 ], [ %.086, %372 ], [ %.086, %370 ], [ %.086, %369 ], [ %.086, %368 ], [ %.086, %363 ], [ %.086, %358 ], [ %.086, %355 ], [ %.086, %354 ], [ %.086, %353 ], [ %.086, %339 ], [ %.086, %329 ], [ %.086, %328 ], [ %.086, %314 ], [ %.086, %304 ], [ %.086, %302 ], [ %.086, %291 ], [ %.086, %281 ], [ %.086, %279 ], [ %.086, %260 ], [ %.086, %250 ], [ %.086, %248 ], [ %.086, %237 ], [ %.086, %227 ], [ %.086, %226 ], [ %.086, %223 ], [ %.086, %222 ], [ %221, %220 ], [ %.086, %219 ], [ %.086, %206 ], [ %.086, %196 ], [ %.086, %193 ], [ %.086, %192 ], [ 1, %182 ], [ %.086, %172 ], [ %.086, %171 ], [ %.086, %170 ], [ %.086, %159 ], [ %.086, %149 ], [ %.086, %148 ], [ %.086, %133 ], [ %.086, %123 ], [ %.086, %121 ], [ %.086, %110 ], [ %.086, %100 ], [ %.086, %99 ], [ %.086, %98 ], [ %.086, %96 ], [ %.086, %90 ], [ %.086, %87 ], [ %.086, %86 ], [ %.086, %82 ], [ %.086, %80 ], [ %.086, %79 ], [ %.086, %77 ], [ %.086, %68 ], [ %.086, %66 ], [ %.086, %54 ], [ %.086, %44 ], [ %.086, %43 ], [ %.086, %28 ], [ %.086, %18 ], [ %.086, %16 ], [ %.086, %11 ], [ %.086, %8 ]
  %.084.be = phi i64 [ %.084, %7 ], [ %.084, %418 ], [ %.084, %413 ], [ %.084, %412 ], [ %.084, %403 ], [ %.084, %402 ], [ %.084, %398 ], [ %.084, %397 ], [ %.084, %395 ], [ %.084, %389 ], [ %.084, %388 ], [ %.084, %387 ], [ %.084, %381 ], [ %.084, %375 ], [ %374, %373 ], [ %.084, %372 ], [ %.084, %370 ], [ %.084, %369 ], [ %.084, %368 ], [ %.084, %363 ], [ %.084, %358 ], [ %.084, %355 ], [ %.084, %354 ], [ %.084, %353 ], [ %.084, %339 ], [ %.084, %329 ], [ %.084, %328 ], [ %.084, %314 ], [ %.084, %304 ], [ %.084, %302 ], [ %.084, %291 ], [ %.084, %281 ], [ %.084, %279 ], [ %.084, %260 ], [ %.084, %250 ], [ %.084, %248 ], [ %.084, %237 ], [ %.084, %227 ], [ %.084, %226 ], [ %.084, %223 ], [ 1, %222 ], [ %.084, %220 ], [ %.084, %219 ], [ %.084, %206 ], [ %.084, %196 ], [ %.084, %193 ], [ %.084, %192 ], [ %.084, %182 ], [ %.084, %172 ], [ %.084, %171 ], [ %.084, %170 ], [ %.084, %159 ], [ %.084, %149 ], [ %.084, %148 ], [ %.084, %133 ], [ %.084, %123 ], [ %.084, %121 ], [ %.084, %110 ], [ %.084, %100 ], [ %.084, %99 ], [ %.084, %98 ], [ %.084, %96 ], [ %.084, %90 ], [ %.084, %87 ], [ %.084, %86 ], [ %.084, %82 ], [ %.084, %80 ], [ %.084, %79 ], [ %.084, %77 ], [ %.084, %68 ], [ %.084, %66 ], [ %.084, %54 ], [ %.084, %44 ], [ %.084, %43 ], [ %.084, %28 ], [ %.084, %18 ], [ %.084, %16 ], [ %.084, %11 ], [ %.084, %8 ]
  %.082.be = phi i64 [ %.082, %7 ], [ %421, %418 ], [ %416, %413 ], [ %.082, %412 ], [ %.082, %403 ], [ %.082, %402 ], [ %.082, %398 ], [ %.082, %397 ], [ %.082, %395 ], [ %.082, %389 ], [ %.082, %388 ], [ %.082, %387 ], [ %.082, %381 ], [ %.082, %375 ], [ %.082, %373 ], [ %.082, %372 ], [ %.082, %370 ], [ %.082, %369 ], [ %.082, %368 ], [ %.082, %363 ], [ %.082, %358 ], [ %.082, %355 ], [ %.082, %354 ], [ %.082, %353 ], [ %342, %339 ], [ %.082, %329 ], [ %.082, %328 ], [ %317, %314 ], [ %.082, %304 ], [ %.082, %302 ], [ %.082, %291 ], [ %.082, %281 ], [ %.082, %279 ], [ %.082, %260 ], [ %.082, %250 ], [ %.082, %248 ], [ %.082, %237 ], [ %.082, %227 ], [ 0, %226 ], [ %.082, %223 ], [ %.082, %222 ], [ %.082, %220 ], [ %.082, %219 ], [ %.082, %206 ], [ %.082, %196 ], [ %.082, %193 ], [ %.082, %192 ], [ %.082, %182 ], [ %.082, %172 ], [ %.082, %171 ], [ %.082, %170 ], [ %.082, %159 ], [ %.082, %149 ], [ %.082, %148 ], [ %.082, %133 ], [ %.082, %123 ], [ %.082, %121 ], [ %.082, %110 ], [ %.082, %100 ], [ %.082, %99 ], [ %.082, %98 ], [ %.082, %96 ], [ %.082, %90 ], [ %.082, %87 ], [ %.082, %86 ], [ %.082, %82 ], [ %.082, %80 ], [ %.082, %79 ], [ %.082, %77 ], [ %.082, %68 ], [ %.082, %66 ], [ %.082, %54 ], [ %.082, %44 ], [ %.082, %43 ], [ %.082, %28 ], [ %.082, %18 ], [ %.082, %16 ], [ %.082, %11 ], [ %.082, %8 ]
  %.080.be = phi i64 [ %.080, %7 ], [ %.080, %418 ], [ %.080, %413 ], [ %.080, %412 ], [ %.080, %403 ], [ %.080, %402 ], [ %.080, %398 ], [ %.080, %397 ], [ %.080, %395 ], [ %.080, %389 ], [ %.080, %388 ], [ %.080, %387 ], [ %.080, %381 ], [ %.080, %375 ], [ %.080, %373 ], [ %.080, %372 ], [ %.080, %370 ], [ %.080, %369 ], [ %.080, %368 ], [ %366, %363 ], [ %361, %358 ], [ %.080, %355 ], [ %.080, %354 ], [ %.080, %353 ], [ %.080, %339 ], [ %.080, %329 ], [ %.080, %328 ], [ %.080, %314 ], [ %.080, %304 ], [ %.080, %302 ], [ %.080, %291 ], [ %.080, %281 ], [ %.080, %279 ], [ %.080, %260 ], [ %.080, %250 ], [ %.080, %248 ], [ %.080, %237 ], [ %.080, %227 ], [ 0, %226 ], [ %.080, %223 ], [ %.080, %222 ], [ %.080, %220 ], [ %.080, %219 ], [ %.080, %206 ], [ %.080, %196 ], [ %.080, %193 ], [ %.080, %192 ], [ %.080, %182 ], [ %.080, %172 ], [ %.080, %171 ], [ %.080, %170 ], [ %.080, %159 ], [ %.080, %149 ], [ %.080, %148 ], [ %.080, %133 ], [ %.080, %123 ], [ %.080, %121 ], [ %.080, %110 ], [ %.080, %100 ], [ %.080, %99 ], [ %.080, %98 ], [ %.080, %96 ], [ %.080, %90 ], [ %.080, %87 ], [ %.080, %86 ], [ %.080, %82 ], [ %.080, %80 ], [ %.080, %79 ], [ %.080, %77 ], [ %.080, %68 ], [ %.080, %66 ], [ %.080, %54 ], [ %.080, %44 ], [ %.080, %43 ], [ %.080, %28 ], [ %.080, %18 ], [ %.080, %16 ], [ %.080, %11 ], [ %.080, %8 ]
  %.078.be = phi i64 [ %.078, %7 ], [ %.078, %418 ], [ %.078, %413 ], [ %.078, %412 ], [ %.078, %403 ], [ %.078, %402 ], [ %.078, %398 ], [ %.078, %397 ], [ %.078, %395 ], [ %.078, %389 ], [ %.078, %388 ], [ %.078, %387 ], [ %.078, %381 ], [ %.078, %375 ], [ %.078, %373 ], [ %.078, %372 ], [ %371, %370 ], [ %.078, %369 ], [ %.078, %368 ], [ %.078, %363 ], [ %.078, %358 ], [ %.078, %355 ], [ %.078, %354 ], [ %.078, %353 ], [ %.078, %339 ], [ %.078, %329 ], [ %.078, %328 ], [ %.078, %314 ], [ %.078, %304 ], [ %.078, %302 ], [ %.078, %291 ], [ %.078, %281 ], [ %.078, %279 ], [ %.078, %260 ], [ %.078, %250 ], [ %.078, %248 ], [ %.078, %237 ], [ %.078, %227 ], [ %.092, %226 ], [ %.078, %223 ], [ %.078, %222 ], [ %.078, %220 ], [ %.078, %219 ], [ %.078, %206 ], [ %.078, %196 ], [ %.078, %193 ], [ %.078, %192 ], [ %.078, %182 ], [ %.078, %172 ], [ %.078, %171 ], [ %.078, %170 ], [ %.078, %159 ], [ %.078, %149 ], [ %.078, %148 ], [ %.078, %133 ], [ %.078, %123 ], [ %.078, %121 ], [ %.078, %110 ], [ %.078, %100 ], [ %.078, %99 ], [ %.078, %98 ], [ %.078, %96 ], [ %.078, %90 ], [ %.078, %87 ], [ %.078, %86 ], [ %.078, %82 ], [ %.078, %80 ], [ %.078, %79 ], [ %.078, %77 ], [ %.078, %68 ], [ %.078, %66 ], [ %.078, %54 ], [ %.078, %44 ], [ %.078, %43 ], [ %.078, %28 ], [ %.078, %18 ], [ %.078, %16 ], [ %.078, %11 ], [ %.078, %8 ]
  %.076.be = phi i64 [ %.076, %7 ], [ %.076, %418 ], [ %.076, %413 ], [ %.076, %412 ], [ %406, %403 ], [ %.076, %402 ], [ %.076, %398 ], [ %.076, %397 ], [ %.076, %395 ], [ %.076, %389 ], [ %.076, %388 ], [ %.076, %387 ], [ %.076, %381 ], [ %.076, %375 ], [ %.076, %373 ], [ %.076, %372 ], [ %.076, %370 ], [ %.076, %369 ], [ %.076, %368 ], [ %.076, %363 ], [ %.076, %358 ], [ %.076, %355 ], [ %.076, %354 ], [ %.076, %353 ], [ %.076, %339 ], [ %.076, %329 ], [ %.076, %328 ], [ %.076, %314 ], [ %.076, %304 ], [ %.076, %302 ], [ %.076, %291 ], [ %.076, %281 ], [ %.076, %279 ], [ %263, %260 ], [ %.076, %250 ], [ %.076, %248 ], [ %.076, %237 ], [ %.076, %227 ], [ %.076, %226 ], [ %.076, %223 ], [ %.076, %222 ], [ %.076, %220 ], [ %.076, %219 ], [ %.076, %206 ], [ %.076, %196 ], [ %.076, %193 ], [ %.076, %192 ], [ %.076, %182 ], [ %.076, %172 ], [ %.076, %171 ], [ %.076, %170 ], [ %.076, %159 ], [ %.076, %149 ], [ %.076, %148 ], [ %.076, %133 ], [ %.076, %123 ], [ %.076, %121 ], [ %.076, %110 ], [ %.076, %100 ], [ %.076, %99 ], [ %.076, %98 ], [ %.076, %96 ], [ %.076, %90 ], [ %.076, %87 ], [ %.076, %86 ], [ %.076, %82 ], [ %.076, %80 ], [ %.076, %79 ], [ %.076, %77 ], [ %.076, %68 ], [ %.076, %66 ], [ %.076, %54 ], [ %.076, %44 ], [ %.076, %43 ], [ %.076, %28 ], [ %.076, %18 ], [ %.076, %16 ], [ %.076, %11 ], [ %.076, %8 ]
  %.074.be = phi i64 [ %.074, %7 ], [ %.074, %418 ], [ %.074, %413 ], [ %.074, %412 ], [ %409, %403 ], [ %.074, %402 ], [ %.074, %398 ], [ %.074, %397 ], [ %.074, %395 ], [ %.074, %389 ], [ %.074, %388 ], [ %.074, %387 ], [ %.074, %381 ], [ %.074, %375 ], [ %.074, %373 ], [ %.074, %372 ], [ %.074, %370 ], [ %.074, %369 ], [ %.074, %368 ], [ %.074, %363 ], [ %.074, %358 ], [ %.074, %355 ], [ %.074, %354 ], [ %.074, %353 ], [ %.074, %339 ], [ %.074, %329 ], [ %.074, %328 ], [ %.074, %314 ], [ %.074, %304 ], [ %.074, %302 ], [ %.074, %291 ], [ %.074, %281 ], [ %.074, %279 ], [ %266, %260 ], [ %.074, %250 ], [ %.074, %248 ], [ %.074, %237 ], [ %.074, %227 ], [ %.074, %226 ], [ %.074, %223 ], [ %.074, %222 ], [ %.074, %220 ], [ %.074, %219 ], [ %.074, %206 ], [ %.074, %196 ], [ %.074, %193 ], [ %.074, %192 ], [ %.074, %182 ], [ %.074, %172 ], [ %.074, %171 ], [ %.074, %170 ], [ %.074, %159 ], [ %.074, %149 ], [ %.074, %148 ], [ %.074, %133 ], [ %.074, %123 ], [ %.074, %121 ], [ %.074, %110 ], [ %.074, %100 ], [ %.074, %99 ], [ %.074, %98 ], [ %.074, %96 ], [ %.074, %90 ], [ %.074, %87 ], [ %.074, %86 ], [ %.074, %82 ], [ %.074, %80 ], [ %.074, %79 ], [ %.074, %77 ], [ %.074, %68 ], [ %.074, %66 ], [ %.074, %54 ], [ %.074, %44 ], [ %.074, %43 ], [ %.074, %28 ], [ %.074, %18 ], [ %.074, %16 ], [ %.074, %11 ], [ %.074, %8 ]
  %.0.be = phi i32 [ %.0, %7 ], [ 1373917825, %418 ], [ -599216693, %413 ], [ -422544235, %412 ], [ -51800245, %403 ], [ 759557777, %402 ], [ 1451431508, %398 ], [ -204101357, %397 ], [ -143625377, %395 ], [ -1987060371, %389 ], [ -1535943443, %388 ], [ -21907424, %387 ], [ 1020565845, %381 ], [ 421654359, %375 ], [ -387237285, %373 ], [ -894441847, %372 ], [ -64717450, %370 ], [ 1475219628, %369 ], [ 899463902, %368 ], [ 2010014169, %363 ], [ 2010014169, %358 ], [ %357, %355 ], [ 899463902, %354 ], [ -676427632, %353 ], [ %352, %339 ], [ %338, %329 ], [ -676427632, %328 ], [ %327, %314 ], [ %313, %304 ], [ %303, %302 ], [ %301, %291 ], [ %290, %281 ], [ %280, %279 ], [ %278, %260 ], [ %259, %250 ], [ %249, %248 ], [ %247, %237 ], [ %236, %227 ], [ -64717450, %226 ], [ %225, %223 ], [ -387237285, %222 ], [ 1189636155, %220 ], [ 1662419965, %219 ], [ %218, %206 ], [ %205, %196 ], [ %195, %193 ], [ 1189636155, %192 ], [ %191, %182 ], [ %181, %172 ], [ 1446251458, %171 ], [ 1900974162, %170 ], [ %169, %159 ], [ %158, %149 ], [ -1536820999, %148 ], [ %147, %133 ], [ %132, %123 ], [ %122, %121 ], [ %120, %110 ], [ %109, %100 ], [ 1900974162, %99 ], [ 1446251458, %98 ], [ 2052122017, %96 ], [ 1227423663, %90 ], [ %89, %87 ], [ 2052122017, %86 ], [ %85, %82 ], [ -777378598, %80 ], [ 2054236025, %79 ], [ 421654359, %77 ], [ %76, %68 ], [ %67, %66 ], [ %65, %54 ], [ %53, %44 ], [ -777378598, %43 ], [ %42, %28 ], [ %27, %18 ], [ -1695027366, %16 ], [ -1848571027, %11 ], [ %10, %8 ]
  br label %7

8:                                                ; preds = %7
  %9 = load i64, i64* @n, align 8
  %.not106 = icmp sgt i64 %.098, %9
  %10 = select i1 %.not106, i32 842097800, i32 293206928
  br label %.backedge

11:                                               ; preds = %7
  %12 = tail call i64 @_Z4readv()
  %13 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %.098
  store i64 %12, i64* %13, align 8
  %14 = tail call i64 @_Z4readv()
  %15 = getelementptr inbounds [1005 x i64], [1005 x i64]* @Y, i64 0, i64 %.098
  store i64 %14, i64* %15, align 8
  br label %.backedge

16:                                               ; preds = %7
  %17 = add i64 %.098, 1
  br label %.backedge

18:                                               ; preds = %7
  %19 = load i32, i32* @x.7, align 4
  %20 = load i32, i32* @y.8, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 1020565845, i32 386455435
  br label %.backedge

28:                                               ; preds = %7
  %29 = load i64, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @X, i64 0, i64 1), align 8
  %30 = load i64, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @Y, i64 0, i64 1), align 8
  %31 = add i64 %30, %29
  %32 = tail call i64 @_Z3Absx(i64 %31)
  %33 = and i64 %32, 1
  %34 = load i32, i32* @x.7, align 4
  %35 = load i32, i32* @y.8, align 4
  %36 = add i32 %34, -1
  %37 = mul i32 %36, %34
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %40, %39
  %42 = select i1 %41, i32 2115023861, i32 386455435
  br label %.backedge

43:                                               ; preds = %7
  br label %.backedge

44:                                               ; preds = %7
  %45 = load i32, i32* @x.7, align 4
  %46 = load i32, i32* @y.8, align 4
  %47 = add i32 %45, -1
  %48 = mul i32 %47, %45
  %49 = and i32 %48, 1
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %51, %50
  %53 = select i1 %52, i32 -21907424, i32 1608469163
  br label %.backedge

54:                                               ; preds = %7
  %55 = load i64, i64* @n, align 8
  %56 = icmp sle i64 %.094, %55
  store i1 %56, i1* %5, align 1
  %57 = load i32, i32* @x.7, align 4
  %58 = load i32, i32* @y.8, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 903156848, i32 1608469163
  br label %.backedge

66:                                               ; preds = %7
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %67 = select i1 %.0..0..0., i32 2099673652, i32 -956090606
  br label %.backedge

68:                                               ; preds = %7
  %69 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %.094
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds [1005 x i64], [1005 x i64]* @Y, i64 0, i64 %.094
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, %70
  %74 = tail call i64 @_Z3Absx(i64 %73)
  %75 = and i64 %74, 1
  %.not104 = icmp eq i64 %75, %.096
  %76 = select i1 %.not104, i32 734008139, i32 2030077588
  br label %.backedge

77:                                               ; preds = %7
  %78 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

79:                                               ; preds = %7
  br label %.backedge

80:                                               ; preds = %7
  %81 = add i64 %.094, 1
  br label %.backedge

82:                                               ; preds = %7
  %83 = sub i64 32, %.096
  %84 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 %83)
  store i64 1, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @len, i64 0, i64 1), align 8
  %.not103 = icmp eq i64 %.096, 0
  %85 = select i1 %.not103, i32 810672409, i32 -1038559075
  br label %.backedge

86:                                               ; preds = %7
  br label %.backedge

87:                                               ; preds = %7
  %88 = icmp slt i64 %.090, 31
  %89 = select i1 %88, i32 -702679112, i32 1689575461
  br label %.backedge

90:                                               ; preds = %7
  %91 = trunc i64 %.090 to i32
  %92 = shl nuw i32 1, %91
  %93 = sext i32 %92 to i64
  %94 = add i64 %.092, 1
  %95 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %94
  store i64 %93, i64* %95, align 8
  br label %.backedge

96:                                               ; preds = %7
  %97 = add i64 %.090, 1
  br label %.backedge

98:                                               ; preds = %7
  br label %.backedge

99:                                               ; preds = %7
  br label %.backedge

100:                                              ; preds = %7
  %101 = load i32, i32* @x.7, align 4
  %102 = load i32, i32* @y.8, align 4
  %103 = add i32 %101, -1
  %104 = mul i32 %103, %101
  %105 = and i32 %104, 1
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %107, %106
  %109 = select i1 %108, i32 -1535943443, i32 1045696451
  br label %.backedge

110:                                              ; preds = %7
  %111 = icmp slt i64 %.088, 31
  store i1 %111, i1* %4, align 1
  %112 = load i32, i32* @x.7, align 4
  %113 = load i32, i32* @y.8, align 4
  %114 = add i32 %112, -1
  %115 = mul i32 %114, %112
  %116 = and i32 %115, 1
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %118, %117
  %120 = select i1 %119, i32 1450143096, i32 1045696451
  br label %.backedge

121:                                              ; preds = %7
  %.0..0..0.70 = load volatile i1, i1* %4, align 1
  %122 = select i1 %.0..0..0.70, i32 -1860986031, i32 665126089
  br label %.backedge

123:                                              ; preds = %7
  %124 = load i32, i32* @x.7, align 4
  %125 = load i32, i32* @y.8, align 4
  %126 = add i32 %124, -1
  %127 = mul i32 %126, %124
  %128 = and i32 %127, 1
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %130, %129
  %132 = select i1 %131, i32 -1987060371, i32 -59743532
  br label %.backedge

133:                                              ; preds = %7
  %134 = trunc i64 %.088 to i32
  %135 = shl nuw i32 1, %134
  %136 = sext i32 %135 to i64
  %137 = add i64 %.092, 1
  %138 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %137
  store i64 %136, i64* %138, align 8
  %139 = load i32, i32* @x.7, align 4
  %140 = load i32, i32* @y.8, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 636114414, i32 -59743532
  br label %.backedge

148:                                              ; preds = %7
  br label %.backedge

149:                                              ; preds = %7
  %150 = load i32, i32* @x.7, align 4
  %151 = load i32, i32* @y.8, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 -143625377, i32 1084064370
  br label %.backedge

159:                                              ; preds = %7
  %160 = add i64 %.088, 1
  %161 = load i32, i32* @x.7, align 4
  %162 = load i32, i32* @y.8, align 4
  %163 = add i32 %161, -1
  %164 = mul i32 %163, %161
  %165 = and i32 %164, 1
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %167, %166
  %169 = select i1 %168, i32 1792594765, i32 1084064370
  br label %.backedge

170:                                              ; preds = %7
  br label %.backedge

171:                                              ; preds = %7
  br label %.backedge

172:                                              ; preds = %7
  %173 = load i32, i32* @x.7, align 4
  %174 = load i32, i32* @y.8, align 4
  %175 = add i32 %173, -1
  %176 = mul i32 %175, %173
  %177 = and i32 %176, 1
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %179, %178
  %181 = select i1 %180, i32 -204101357, i32 45619401
  br label %.backedge

182:                                              ; preds = %7
  %183 = load i32, i32* @x.7, align 4
  %184 = load i32, i32* @y.8, align 4
  %185 = add i32 %183, -1
  %186 = mul i32 %185, %183
  %187 = and i32 %186, 1
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %189, %188
  %191 = select i1 %190, i32 -1117787740, i32 45619401
  br label %.backedge

192:                                              ; preds = %7
  br label %.backedge

193:                                              ; preds = %7
  %194 = sub i64 32, %.096
  %.not102 = icmp sgt i64 %.086, %194
  %195 = select i1 %.not102, i32 -1496364278, i32 170038840
  br label %.backedge

196:                                              ; preds = %7
  %197 = load i32, i32* @x.7, align 4
  %198 = load i32, i32* @y.8, align 4
  %199 = add i32 %197, -1
  %200 = mul i32 %199, %197
  %201 = and i32 %200, 1
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %203, %202
  %205 = select i1 %204, i32 1451431508, i32 -1452882173
  br label %.backedge

206:                                              ; preds = %7
  %207 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.086
  %208 = load i64, i64* %207, align 8
  %209 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 %208)
  %210 = load i32, i32* @x.7, align 4
  %211 = load i32, i32* @y.8, align 4
  %212 = add i32 %210, -1
  %213 = mul i32 %212, %210
  %214 = and i32 %213, 1
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %216, %215
  %218 = select i1 %217, i32 42414741, i32 -1452882173
  br label %.backedge

219:                                              ; preds = %7
  br label %.backedge

220:                                              ; preds = %7
  %221 = add i64 %.086, 1
  br label %.backedge

222:                                              ; preds = %7
  %putchar = tail call i32 @putchar(i32 10)
  br label %.backedge

223:                                              ; preds = %7
  %224 = load i64, i64* @n, align 8
  %.not = icmp sgt i64 %.084, %224
  %225 = select i1 %.not, i32 -280204214, i32 -1648245328
  br label %.backedge

226:                                              ; preds = %7
  br label %.backedge

227:                                              ; preds = %7
  %228 = load i32, i32* @x.7, align 4
  %229 = load i32, i32* @y.8, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 759557777, i32 1308811465
  br label %.backedge

237:                                              ; preds = %7
  %238 = icmp sgt i64 %.078, 0
  store i1 %238, i1* %3, align 1
  %239 = load i32, i32* @x.7, align 4
  %240 = load i32, i32* @y.8, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 -606581767, i32 1308811465
  br label %.backedge

248:                                              ; preds = %7
  %.0..0..0.71 = load volatile i1, i1* %3, align 1
  %249 = select i1 %.0..0..0.71, i32 728921958, i32 -2071952779
  br label %.backedge

250:                                              ; preds = %7
  %251 = load i32, i32* @x.7, align 4
  %252 = load i32, i32* @y.8, align 4
  %253 = add i32 %251, -1
  %254 = mul i32 %253, %251
  %255 = and i32 %254, 1
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %257, %256
  %259 = select i1 %258, i32 -51800245, i32 1400048539
  br label %.backedge

260:                                              ; preds = %7
  %261 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %.084
  %262 = load i64, i64* %261, align 8
  %263 = sub i64 %262, %.082
  %264 = getelementptr inbounds [1005 x i64], [1005 x i64]* @Y, i64 0, i64 %.084
  %265 = load i64, i64* %264, align 8
  %266 = sub i64 %265, %.080
  %267 = tail call i64 @_Z3Absx(i64 %263)
  %268 = tail call i64 @_Z3Absx(i64 %266)
  %269 = icmp sgt i64 %267, %268
  store i1 %269, i1* %2, align 1
  %270 = load i32, i32* @x.7, align 4
  %271 = load i32, i32* @y.8, align 4
  %272 = add i32 %270, -1
  %273 = mul i32 %272, %270
  %274 = and i32 %273, 1
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %276, %275
  %278 = select i1 %277, i32 932763221, i32 1400048539
  br label %.backedge

279:                                              ; preds = %7
  %.0..0..0.72 = load volatile i1, i1* %2, align 1
  %280 = select i1 %.0..0..0.72, i32 1759465819, i32 -671144841
  br label %.backedge

281:                                              ; preds = %7
  %282 = load i32, i32* @x.7, align 4
  %283 = load i32, i32* @y.8, align 4
  %284 = add i32 %282, -1
  %285 = mul i32 %284, %282
  %286 = and i32 %285, 1
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %288, %287
  %290 = select i1 %289, i32 -422544235, i32 -232990862
  br label %.backedge

291:                                              ; preds = %7
  %292 = icmp sgt i64 %.076, 0
  store i1 %292, i1* %1, align 1
  %293 = load i32, i32* @x.7, align 4
  %294 = load i32, i32* @y.8, align 4
  %295 = add i32 %293, -1
  %296 = mul i32 %295, %293
  %297 = and i32 %296, 1
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %299, %298
  %301 = select i1 %300, i32 -1813875306, i32 -232990862
  br label %.backedge

302:                                              ; preds = %7
  %.0..0..0.73 = load volatile i1, i1* %1, align 1
  %303 = select i1 %.0..0..0.73, i32 2043839560, i32 1334759051
  br label %.backedge

304:                                              ; preds = %7
  %305 = load i32, i32* @x.7, align 4
  %306 = load i32, i32* @y.8, align 4
  %307 = add i32 %305, -1
  %308 = mul i32 %307, %305
  %309 = and i32 %308, 1
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %311, %310
  %313 = select i1 %312, i32 -599216693, i32 673571791
  br label %.backedge

314:                                              ; preds = %7
  %315 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.078
  %316 = load i64, i64* %315, align 8
  %317 = add i64 %316, %.082
  %318 = getelementptr inbounds [50 x i8], [50 x i8]* @ans, i64 0, i64 %.078
  store i8 82, i8* %318, align 1
  %319 = load i32, i32* @x.7, align 4
  %320 = load i32, i32* @y.8, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 -1240492809, i32 673571791
  br label %.backedge

328:                                              ; preds = %7
  br label %.backedge

329:                                              ; preds = %7
  %330 = load i32, i32* @x.7, align 4
  %331 = load i32, i32* @y.8, align 4
  %332 = add i32 %330, -1
  %333 = mul i32 %332, %330
  %334 = and i32 %333, 1
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %336, %335
  %338 = select i1 %337, i32 1373917825, i32 432729877
  br label %.backedge

339:                                              ; preds = %7
  %340 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.078
  %341 = load i64, i64* %340, align 8
  %342 = sub i64 %.082, %341
  %343 = getelementptr inbounds [50 x i8], [50 x i8]* @ans, i64 0, i64 %.078
  store i8 76, i8* %343, align 1
  %344 = load i32, i32* @x.7, align 4
  %345 = load i32, i32* @y.8, align 4
  %346 = add i32 %344, -1
  %347 = mul i32 %346, %344
  %348 = and i32 %347, 1
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %350, %349
  %352 = select i1 %351, i32 1481478146, i32 432729877
  br label %.backedge

353:                                              ; preds = %7
  br label %.backedge

354:                                              ; preds = %7
  br label %.backedge

355:                                              ; preds = %7
  %356 = icmp sgt i64 %.074, 0
  %357 = select i1 %356, i32 1493096914, i32 746127162
  br label %.backedge

358:                                              ; preds = %7
  %359 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.078
  %360 = load i64, i64* %359, align 8
  %361 = add i64 %360, %.080
  %362 = getelementptr inbounds [50 x i8], [50 x i8]* @ans, i64 0, i64 %.078
  store i8 85, i8* %362, align 1
  br label %.backedge

363:                                              ; preds = %7
  %364 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.078
  %365 = load i64, i64* %364, align 8
  %366 = sub i64 %.080, %365
  %367 = getelementptr inbounds [50 x i8], [50 x i8]* @ans, i64 0, i64 %.078
  store i8 68, i8* %367, align 1
  br label %.backedge

368:                                              ; preds = %7
  br label %.backedge

369:                                              ; preds = %7
  br label %.backedge

370:                                              ; preds = %7
  %371 = add i64 %.078, -1
  br label %.backedge

372:                                              ; preds = %7
  %puts = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([50 x i8], [50 x i8]* @ans, i64 0, i64 1))
  br label %.backedge

373:                                              ; preds = %7
  %374 = add i64 %.084, 1
  br label %.backedge

375:                                              ; preds = %7
  %376 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %377 = tail call i32 @fclose(%struct._IO_FILE* %376)
  %378 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %379 = tail call i32 @fclose(%struct._IO_FILE* %378)
  br label %.backedge

380:                                              ; preds = %7
  ret i32 0

381:                                              ; preds = %7
  %382 = load i64, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @X, i64 0, i64 1), align 8
  %383 = load i64, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @Y, i64 0, i64 1), align 8
  %384 = add i64 %383, %382
  %385 = tail call i64 @_Z3Absx(i64 %384)
  %386 = and i64 %385, 1
  br label %.backedge

387:                                              ; preds = %7
  br label %.backedge

388:                                              ; preds = %7
  br label %.backedge

389:                                              ; preds = %7
  %390 = trunc i64 %.088 to i32
  %391 = shl nuw i32 1, %390
  %392 = sext i32 %391 to i64
  %393 = add i64 %.092, 1
  %394 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %393
  store i64 %392, i64* %394, align 8
  br label %.backedge

395:                                              ; preds = %7
  %396 = add i64 %.088, 1
  br label %.backedge

397:                                              ; preds = %7
  br label %.backedge

398:                                              ; preds = %7
  %399 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.086
  %400 = load i64, i64* %399, align 8
  %401 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 %400)
  br label %.backedge

402:                                              ; preds = %7
  br label %.backedge

403:                                              ; preds = %7
  %404 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %.084
  %405 = load i64, i64* %404, align 8
  %406 = sub i64 %405, %.082
  %407 = getelementptr inbounds [1005 x i64], [1005 x i64]* @Y, i64 0, i64 %.084
  %408 = load i64, i64* %407, align 8
  %409 = sub i64 %408, %.080
  %410 = tail call i64 @_Z3Absx(i64 %406)
  %411 = tail call i64 @_Z3Absx(i64 %409)
  br label %.backedge

412:                                              ; preds = %7
  br label %.backedge

413:                                              ; preds = %7
  %414 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.078
  %415 = load i64, i64* %414, align 8
  %416 = add i64 %415, %.082
  %417 = getelementptr inbounds [50 x i8], [50 x i8]* @ans, i64 0, i64 %.078
  store i8 82, i8* %417, align 1
  br label %.backedge

418:                                              ; preds = %7
  %419 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.078
  %420 = load i64, i64* %419, align 8
  %421 = sub i64 %.082, %420
  %422 = getelementptr inbounds [50 x i8], [50 x i8]* @ans, i64 0, i64 %.078
  store i8 76, i8* %422, align 1
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_Z4readv() local_unnamed_addr #0 comdat {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = tail call i32 @getchar()
  %5 = trunc i32 %4 to i8
  br label %6

6:                                                ; preds = %.backedge, %0
  %.028 = phi i64 [ 0, %0 ], [ %.028.be, %.backedge ]
  %.026 = phi i64 [ 1, %0 ], [ %.026.be, %.backedge ]
  %.024 = phi i8 [ %5, %0 ], [ %.024.be, %.backedge ]
  %.022 = phi i32 [ 1001047576, %0 ], [ %.022.be, %.backedge ]
  %.020 = phi i1 [ undef, %0 ], [ %.020.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.022, label %.backedge [
    i32 1001047576, label %7
    i32 -1016643747, label %10
    i32 -2139979801, label %12
    i32 587780075, label %14
    i32 1859580774, label %17
    i32 -253683805, label %18
    i32 900378265, label %21
    i32 1641484398, label %22
    i32 -77297867, label %32
    i32 923661414, label %43
    i32 -1966947359, label %45
    i32 -1017248013, label %55
    i32 -1813863005, label %66
    i32 1429987390, label %67
    i32 -382226756, label %77
    i32 647379460, label %87
    i32 1503108204, label %89
    i32 2093285849, label %99
    i32 -274010239, label %113
    i32 1777659693, label %114
    i32 380573316, label %116
    i32 -70252027, label %117
    i32 1956447481, label %118
    i32 1963173475, label %119
  ]

.backedge:                                        ; preds = %6, %119, %118, %117, %116, %113, %99, %89, %87, %77, %67, %66, %55, %45, %43, %32, %22, %21, %18, %17, %14, %12, %10, %7
  %.028.be = phi i64 [ %.028, %6 ], [ %123, %119 ], [ %.028, %118 ], [ %.028, %117 ], [ %.028, %116 ], [ %.028, %113 ], [ %.neg30, %99 ], [ %.028, %89 ], [ %.028, %87 ], [ %.028, %77 ], [ %.028, %67 ], [ %.028, %66 ], [ %.028, %55 ], [ %.028, %45 ], [ %.028, %43 ], [ %.028, %32 ], [ %.028, %22 ], [ %.028, %21 ], [ %.028, %18 ], [ %.028, %17 ], [ %.028, %14 ], [ %.028, %12 ], [ %.028, %10 ], [ %.028, %7 ]
  %.026.be = phi i64 [ %.026, %6 ], [ %.026, %119 ], [ %.026, %118 ], [ %.026, %117 ], [ %.026, %116 ], [ %.026, %113 ], [ %.026, %99 ], [ %.026, %89 ], [ %.026, %87 ], [ %.026, %77 ], [ %.026, %67 ], [ %.026, %66 ], [ %.026, %55 ], [ %.026, %45 ], [ %.026, %43 ], [ %.026, %32 ], [ %.026, %22 ], [ %.026, %21 ], [ %.026, %18 ], [ -1, %17 ], [ %.026, %14 ], [ %.026, %12 ], [ %.026, %10 ], [ %.026, %7 ]
  %.024.be = phi i8 [ %.024, %6 ], [ %125, %119 ], [ %.024, %118 ], [ %.024, %117 ], [ %.024, %116 ], [ %.024, %113 ], [ %103, %99 ], [ %.024, %89 ], [ %.024, %87 ], [ %.024, %77 ], [ %.024, %67 ], [ %.024, %66 ], [ %.024, %55 ], [ %.024, %45 ], [ %.024, %43 ], [ %.024, %32 ], [ %.024, %22 ], [ %.024, %21 ], [ %20, %18 ], [ %.024, %17 ], [ %.024, %14 ], [ %.024, %12 ], [ %.024, %10 ], [ %.024, %7 ]
  %.022.be = phi i32 [ %.022, %6 ], [ 2093285849, %119 ], [ -382226756, %118 ], [ -1017248013, %117 ], [ -77297867, %116 ], [ 1641484398, %113 ], [ %112, %99 ], [ %98, %89 ], [ %88, %87 ], [ %86, %77 ], [ %76, %67 ], [ 1429987390, %66 ], [ %65, %55 ], [ %54, %45 ], [ %44, %43 ], [ %42, %32 ], [ %31, %22 ], [ 1641484398, %21 ], [ 1001047576, %18 ], [ -253683805, %17 ], [ %16, %14 ], [ %13, %12 ], [ -2139979801, %10 ], [ %9, %7 ]
  %.020.be = phi i1 [ %.020, %6 ], [ %.020, %119 ], [ %.020, %118 ], [ %.020, %117 ], [ %.020, %116 ], [ %.020, %113 ], [ %.020, %99 ], [ %.020, %89 ], [ %.020, %87 ], [ %.020, %77 ], [ %.020, %67 ], [ %.020, %66 ], [ %.020, %55 ], [ %.020, %45 ], [ %.020, %43 ], [ %.020, %32 ], [ %.020, %22 ], [ %.020, %21 ], [ %.020, %18 ], [ %.020, %17 ], [ %.020, %14 ], [ %.020, %12 ], [ %11, %10 ], [ true, %7 ]
  %.0.be = phi i1 [ %.0, %6 ], [ %.0, %119 ], [ %.0, %118 ], [ %.0, %117 ], [ %.0, %116 ], [ %.0, %113 ], [ %.0, %99 ], [ %.0, %89 ], [ %.0, %87 ], [ %.0, %77 ], [ %.0, %67 ], [ %.0..0..0.18, %66 ], [ %.0, %55 ], [ %.0, %45 ], [ false, %43 ], [ %.0, %32 ], [ %.0, %22 ], [ %.0, %21 ], [ %.0, %18 ], [ %.0, %17 ], [ %.0, %14 ], [ %.0, %12 ], [ %.0, %10 ], [ %.0, %7 ]
  br label %6

7:                                                ; preds = %6
  %8 = icmp slt i8 %.024, 48
  %9 = select i1 %8, i32 -2139979801, i32 -1016643747
  br label %.backedge

10:                                               ; preds = %6
  %11 = icmp sgt i8 %.024, 57
  br label %.backedge

12:                                               ; preds = %6
  %13 = select i1 %.020, i32 587780075, i32 900378265
  br label %.backedge

14:                                               ; preds = %6
  %15 = icmp eq i8 %.024, 45
  %16 = select i1 %15, i32 1859580774, i32 -253683805
  br label %.backedge

17:                                               ; preds = %6
  br label %.backedge

18:                                               ; preds = %6
  %19 = tail call i32 @getchar()
  %20 = trunc i32 %19 to i8
  br label %.backedge

21:                                               ; preds = %6
  br label %.backedge

22:                                               ; preds = %6
  %23 = load i32, i32* @x.9, align 4
  %24 = load i32, i32* @y.10, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 -77297867, i32 380573316
  br label %.backedge

32:                                               ; preds = %6
  %33 = icmp sgt i8 %.024, 47
  store i1 %33, i1* %3, align 1
  %34 = load i32, i32* @x.9, align 4
  %35 = load i32, i32* @y.10, align 4
  %36 = add i32 %34, -1
  %37 = mul i32 %36, %34
  %38 = and i32 %37, 1
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %40, %39
  %42 = select i1 %41, i32 923661414, i32 380573316
  br label %.backedge

43:                                               ; preds = %6
  %.0..0..0.17 = load volatile i1, i1* %3, align 1
  %44 = select i1 %.0..0..0.17, i32 -1966947359, i32 1429987390
  br label %.backedge

45:                                               ; preds = %6
  %46 = load i32, i32* @x.9, align 4
  %47 = load i32, i32* @y.10, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -1017248013, i32 -70252027
  br label %.backedge

55:                                               ; preds = %6
  %56 = icmp slt i8 %.024, 58
  store i1 %56, i1* %2, align 1
  %57 = load i32, i32* @x.9, align 4
  %58 = load i32, i32* @y.10, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 -1813863005, i32 -70252027
  br label %.backedge

66:                                               ; preds = %6
  %.0..0..0.18 = load volatile i1, i1* %2, align 1
  br label %.backedge

67:                                               ; preds = %6
  store i1 %.0, i1* %1, align 1
  %68 = load i32, i32* @x.9, align 4
  %69 = load i32, i32* @y.10, align 4
  %70 = add i32 %68, -1
  %71 = mul i32 %70, %68
  %72 = and i32 %71, 1
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %74, %73
  %76 = select i1 %75, i32 -382226756, i32 1956447481
  br label %.backedge

77:                                               ; preds = %6
  %78 = load i32, i32* @x.9, align 4
  %79 = load i32, i32* @y.10, align 4
  %80 = add i32 %78, -1
  %81 = mul i32 %80, %78
  %82 = and i32 %81, 1
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %84, %83
  %86 = select i1 %85, i32 647379460, i32 1956447481
  br label %.backedge

87:                                               ; preds = %6
  %.0..0..0.19 = load volatile i1, i1* %1, align 1
  %88 = select i1 %.0..0..0.19, i32 1503108204, i32 1777659693
  br label %.backedge

89:                                               ; preds = %6
  %90 = load i32, i32* @x.9, align 4
  %91 = load i32, i32* @y.10, align 4
  %92 = add i32 %90, -1
  %93 = mul i32 %92, %90
  %94 = and i32 %93, 1
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %96, %95
  %98 = select i1 %97, i32 2093285849, i32 1963173475
  br label %.backedge

99:                                               ; preds = %6
  %.neg.neg = mul i64 %.028, 10
  %100 = xor i8 %.024, 48
  %101 = sext i8 %100 to i64
  %.neg30 = add i64 %.neg.neg, %101
  %102 = tail call i32 @getchar()
  %103 = trunc i32 %102 to i8
  %104 = load i32, i32* @x.9, align 4
  %105 = load i32, i32* @y.10, align 4
  %106 = add i32 %104, -1
  %107 = mul i32 %106, %104
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %110, %109
  %112 = select i1 %111, i32 -274010239, i32 1963173475
  br label %.backedge

113:                                              ; preds = %6
  br label %.backedge

114:                                              ; preds = %6
  %115 = mul nsw i64 %.026, %.028
  ret i64 %115

116:                                              ; preds = %6
  br label %.backedge

117:                                              ; preds = %6
  br label %.backedge

118:                                              ; preds = %6
  br label %.backedge

119:                                              ; preds = %6
  %120 = mul i64 %.028, 10
  %121 = xor i8 %.024, 48
  %122 = sext i8 %121 to i64
  %123 = add i64 %120, %122
  %124 = tail call i32 @getchar()
  %125 = trunc i32 %124 to i8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @fclose(%struct._IO_FILE* nocapture noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s833296035.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.11, align 4
  %4 = load i32, i32* @y.12, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 577902812, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 577902812, label %11
    i32 -205467636, label %14
    i32 798118282, label %24
    i32 2076258004, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -205467636, i32 2076258004
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.11, align 4
  %16 = load i32, i32* @y.12, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 798118282, i32 2076258004
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -205467636, %25 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
