; ModuleID = 'build_ollvm/programs/p03247/s743804118.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s743804118.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }

$_ZSt3absx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@X = global [1005 x i64] zeroinitializer, align 16
@Y = global [1005 x i64] zeroinitializer, align 16
@pot = local_unnamed_addr global [1005 x i64] zeroinitializer, align 16
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@_ZL2dx = internal unnamed_addr constant [4 x i32] [i32 1, i32 0, i32 -1, i32 0], align 16
@_ZL2dy = internal unnamed_addr constant [4 x i32] [i32 0, i32 1, i32 0, i32 -1], align 16
@_ZL5smjer = internal unnamed_addr constant [4 x i8] c"RULD", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s743804118.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline noreturn uwtable
define void @_Z4donev() local_unnamed_addr #4 {
  %1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 -1)
  tail call void @exit(i32 0) #10
  unreachable
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"*, i32) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #5

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %6 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %7 = getelementptr i8, i8* %6, i64 -24
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %9
  %11 = bitcast i8* %10 to %"class.std::basic_ios"*
  %12 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %11, %"class.std::basic_ostream"* null)
  store i64 1, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @pot, i64 0, i64 0), align 16
  br label %13

13:                                               ; preds = %.backedge, %0
  %.082 = phi i32 [ 1, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i64 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i64 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.0 = phi i32 [ 1875206098, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1875206098, label %14
    i32 -1041387047, label %24
    i32 949247189, label %35
    i32 689573236, label %37
    i32 1530725524, label %47
    i32 352415283, label %64
    i32 -207503414, label %65
    i32 -1880771611, label %67
    i32 -162118140, label %77
    i32 126299306, label %88
    i32 744233821, label %89
    i32 -1292041882, label %93
    i32 -1652784553, label %99
    i32 18854908, label %101
    i32 883478658, label %111
    i32 1867584683, label %128
    i32 1358399186, label %129
    i32 -302524818, label %139
    i32 305713029, label %151
    i32 -1801959613, label %153
    i32 -1849206959, label %165
    i32 1020147484, label %175
    i32 1229668937, label %176
    i32 -1356506309, label %177
    i32 1583620908, label %178
    i32 -449278805, label %179
    i32 916610020, label %182
    i32 917856960, label %183
    i32 -890257147, label %193
    i32 73929334, label %205
    i32 1494826039, label %207
    i32 -934183094, label %217
    i32 -599070195, label %231
    i32 1386829990, label %232
    i32 -1022706833, label %234
    i32 -1977500501, label %244
    i32 657485167, label %254
    i32 -947957883, label %255
    i32 -1695047443, label %259
    i32 -446218279, label %269
    i32 1259759763, label %280
    i32 1344037424, label %282
    i32 -1489866989, label %292
    i32 -443679156, label %307
    i32 1716169139, label %308
    i32 21640793, label %310
    i32 -765504873, label %312
    i32 1406790122, label %322
    i32 -503809066, label %333
    i32 1855212323, label %334
    i32 1163594032, label %336
    i32 479350779, label %340
    i32 -1013539786, label %350
    i32 -1745023750, label %360
    i32 -28632715, label %361
    i32 -1996654572, label %364
    i32 -732609705, label %365
    i32 -433582946, label %368
    i32 1856342686, label %398
    i32 -650036028, label %405
    i32 -62883288, label %406
    i32 305706443, label %416
    i32 -554315898, label %427
    i32 28226833, label %428
    i32 580637911, label %429
    i32 -229168006, label %431
    i32 -128869486, label %433
    i32 1396508924, label %435
    i32 -1453565365, label %445
    i32 1484778972, label %456
    i32 267383182, label %457
    i32 1264851853, label %459
    i32 -1767115763, label %460
    i32 -1974901572, label %461
    i32 -242193077, label %469
    i32 -19879604, label %471
    i32 -1029292609, label %479
    i32 -1502587831, label %480
    i32 484072438, label %481
    i32 -576795718, label %482
    i32 2117090554, label %487
    i32 922548730, label %488
    i32 1187928499, label %489
    i32 -1682633638, label %495
    i32 -320792532, label %497
    i32 504007199, label %498
    i32 873547608, label %500
  ]

.backedge:                                        ; preds = %13, %500, %498, %497, %495, %489, %488, %487, %482, %481, %479, %471, %469, %461, %460, %457, %456, %445, %435, %433, %431, %429, %428, %427, %416, %406, %405, %398, %368, %365, %364, %361, %360, %350, %340, %336, %334, %333, %322, %312, %310, %308, %307, %292, %282, %280, %269, %259, %255, %254, %244, %234, %232, %231, %217, %207, %205, %193, %183, %182, %179, %178, %177, %176, %165, %153, %151, %139, %129, %128, %111, %101, %99, %93, %89, %88, %77, %67, %65, %64, %47, %37, %35, %24, %14
  %.082.be = phi i32 [ %.082, %13 ], [ %.082, %500 ], [ %.082, %498 ], [ %.082, %497 ], [ %.082, %495 ], [ %.082, %489 ], [ %.082, %488 ], [ %.082, %487 ], [ %.082, %482 ], [ %.082, %481 ], [ %.082, %479 ], [ %.082, %471 ], [ %.082, %469 ], [ %.082, %461 ], [ %.082, %460 ], [ %.082, %457 ], [ %.082, %456 ], [ %.082, %445 ], [ %.082, %435 ], [ %.082, %433 ], [ %.082, %431 ], [ %.082, %429 ], [ %.082, %428 ], [ %.082, %427 ], [ %.082, %416 ], [ %.082, %406 ], [ %.082, %405 ], [ %.082, %398 ], [ %.082, %368 ], [ %.082, %365 ], [ %.082, %364 ], [ %.082, %361 ], [ %.082, %360 ], [ %.082, %350 ], [ %.082, %340 ], [ %.082, %336 ], [ %.082, %334 ], [ %.082, %333 ], [ %.082, %322 ], [ %.082, %312 ], [ %.082, %310 ], [ %.082, %308 ], [ %.082, %307 ], [ %.082, %292 ], [ %.082, %282 ], [ %.082, %280 ], [ %.082, %269 ], [ %.082, %259 ], [ %.082, %255 ], [ %.082, %254 ], [ %.082, %244 ], [ %.082, %234 ], [ %.082, %232 ], [ %.082, %231 ], [ %.082, %217 ], [ %.082, %207 ], [ %.082, %205 ], [ %.082, %193 ], [ %.082, %183 ], [ %.082, %182 ], [ %.082, %179 ], [ %.082, %178 ], [ %.082, %177 ], [ %.082, %176 ], [ %.082, %165 ], [ %.082, %153 ], [ %.082, %151 ], [ %.082, %139 ], [ %.082, %129 ], [ %.082, %128 ], [ %.082, %111 ], [ %.082, %101 ], [ %.082, %99 ], [ %.082, %93 ], [ %.082, %89 ], [ %.082, %88 ], [ %.082, %77 ], [ %.082, %67 ], [ %66, %65 ], [ %.082, %64 ], [ %.082, %47 ], [ %.082, %37 ], [ %.082, %35 ], [ %.082, %24 ], [ %.082, %14 ]
  %.080.be = phi i32 [ %.080, %13 ], [ %.080, %500 ], [ %.080, %498 ], [ %.080, %497 ], [ %.080, %495 ], [ %.080, %489 ], [ %.080, %488 ], [ %.080, %487 ], [ %.080, %482 ], [ %.080, %481 ], [ %.080, %479 ], [ %.080, %471 ], [ 0, %469 ], [ %.080, %461 ], [ %.080, %460 ], [ %.080, %457 ], [ %.080, %456 ], [ %.080, %445 ], [ %.080, %435 ], [ %.080, %433 ], [ %.080, %431 ], [ %.080, %429 ], [ %.080, %428 ], [ %.080, %427 ], [ %.080, %416 ], [ %.080, %406 ], [ %.080, %405 ], [ %.080, %398 ], [ %.080, %368 ], [ %.080, %365 ], [ %.080, %364 ], [ %.080, %361 ], [ %.080, %360 ], [ %.080, %350 ], [ %.080, %340 ], [ %.080, %336 ], [ %.080, %334 ], [ %.080, %333 ], [ %.080, %322 ], [ %.080, %312 ], [ %.080, %310 ], [ %.080, %308 ], [ %.080, %307 ], [ %.080, %292 ], [ %.080, %282 ], [ %.080, %280 ], [ %.080, %269 ], [ %.080, %259 ], [ %.080, %255 ], [ %.080, %254 ], [ %.080, %244 ], [ %.080, %234 ], [ %.080, %232 ], [ %.080, %231 ], [ %.080, %217 ], [ %.080, %207 ], [ %.080, %205 ], [ %.080, %193 ], [ %.080, %183 ], [ %.080, %182 ], [ %.080, %179 ], [ %.080, %178 ], [ %.080, %177 ], [ %.080, %176 ], [ %.080, %165 ], [ %.080, %153 ], [ %.080, %151 ], [ %.080, %139 ], [ %.080, %129 ], [ %.080, %128 ], [ %.080, %111 ], [ %.080, %101 ], [ %100, %99 ], [ %.080, %93 ], [ %.080, %89 ], [ %.080, %88 ], [ 0, %77 ], [ %.080, %67 ], [ %.080, %65 ], [ %.080, %64 ], [ %.080, %47 ], [ %.080, %37 ], [ %.080, %35 ], [ %.080, %24 ], [ %.080, %14 ]
  %.078.be = phi i32 [ %.078, %13 ], [ %.078, %500 ], [ %.078, %498 ], [ %.078, %497 ], [ %.078, %495 ], [ %.078, %489 ], [ %.078, %488 ], [ %.078, %487 ], [ %.078, %482 ], [ %.078, %481 ], [ %.078, %479 ], [ %478, %471 ], [ %.078, %469 ], [ %.078, %461 ], [ %.078, %460 ], [ %.078, %457 ], [ %.078, %456 ], [ %.078, %445 ], [ %.078, %435 ], [ %.078, %433 ], [ %.078, %431 ], [ %.078, %429 ], [ %.078, %428 ], [ %.078, %427 ], [ %.078, %416 ], [ %.078, %406 ], [ %.078, %405 ], [ %.078, %398 ], [ %.078, %368 ], [ %.078, %365 ], [ %.078, %364 ], [ %.078, %361 ], [ %.078, %360 ], [ %.078, %350 ], [ %.078, %340 ], [ %.078, %336 ], [ %.078, %334 ], [ %.078, %333 ], [ %.078, %322 ], [ %.078, %312 ], [ %.078, %310 ], [ %.078, %308 ], [ %.078, %307 ], [ %.078, %292 ], [ %.078, %282 ], [ %.078, %280 ], [ %.078, %269 ], [ %.078, %259 ], [ %256, %255 ], [ %.078, %254 ], [ %.078, %244 ], [ %.078, %234 ], [ %.078, %232 ], [ %.078, %231 ], [ %.078, %217 ], [ %.078, %207 ], [ %.078, %205 ], [ %.078, %193 ], [ %.078, %183 ], [ %.078, %182 ], [ %.078, %179 ], [ %.078, %178 ], [ %.078, %177 ], [ %.078, %176 ], [ %.078, %165 ], [ %.078, %153 ], [ %.078, %151 ], [ %.078, %139 ], [ %.078, %129 ], [ %.078, %128 ], [ %118, %111 ], [ %.078, %101 ], [ %.078, %99 ], [ %.078, %93 ], [ %.078, %89 ], [ %.078, %88 ], [ %.078, %77 ], [ %.078, %67 ], [ %.078, %65 ], [ %.078, %64 ], [ %.078, %47 ], [ %.078, %37 ], [ %.078, %35 ], [ %.078, %24 ], [ %.078, %14 ]
  %.076.be = phi i32 [ %.076, %13 ], [ %.076, %500 ], [ %.076, %498 ], [ %.076, %497 ], [ %.076, %495 ], [ %.076, %489 ], [ %.076, %488 ], [ %.076, %487 ], [ %.076, %482 ], [ %.076, %481 ], [ %.076, %479 ], [ 1, %471 ], [ %.076, %469 ], [ %.076, %461 ], [ %.076, %460 ], [ %.076, %457 ], [ %.076, %456 ], [ %.076, %445 ], [ %.076, %435 ], [ %.076, %433 ], [ %.076, %431 ], [ %.076, %429 ], [ %.076, %428 ], [ %.076, %427 ], [ %.076, %416 ], [ %.076, %406 ], [ %.076, %405 ], [ %.076, %398 ], [ %.076, %368 ], [ %.076, %365 ], [ %.076, %364 ], [ %.076, %361 ], [ %.076, %360 ], [ %.076, %350 ], [ %.076, %340 ], [ %.076, %336 ], [ %.076, %334 ], [ %.076, %333 ], [ %.076, %322 ], [ %.076, %312 ], [ %.076, %310 ], [ %.076, %308 ], [ %.076, %307 ], [ %.076, %292 ], [ %.076, %282 ], [ %.076, %280 ], [ %.076, %269 ], [ %.076, %259 ], [ %.076, %255 ], [ %.076, %254 ], [ %.076, %244 ], [ %.076, %234 ], [ %.076, %232 ], [ %.076, %231 ], [ %.076, %217 ], [ %.076, %207 ], [ %.076, %205 ], [ %.076, %193 ], [ %.076, %183 ], [ %.076, %182 ], [ %.076, %179 ], [ %.neg86, %178 ], [ %.076, %177 ], [ %.076, %176 ], [ %.076, %165 ], [ %.076, %153 ], [ %.076, %151 ], [ %.076, %139 ], [ %.076, %129 ], [ %.076, %128 ], [ 1, %111 ], [ %.076, %101 ], [ %.076, %99 ], [ %.076, %93 ], [ %.076, %89 ], [ %.076, %88 ], [ %.076, %77 ], [ %.076, %67 ], [ %.076, %65 ], [ %.076, %64 ], [ %.076, %47 ], [ %.076, %37 ], [ %.076, %35 ], [ %.076, %24 ], [ %.076, %14 ]
  %.074.be = phi i32 [ %.074, %13 ], [ %.074, %500 ], [ %.074, %498 ], [ %.074, %497 ], [ %.074, %495 ], [ %.074, %489 ], [ %.074, %488 ], [ %.074, %487 ], [ %.074, %482 ], [ %.074, %481 ], [ %.074, %479 ], [ %.074, %471 ], [ %.074, %469 ], [ %.074, %461 ], [ %.074, %460 ], [ %.074, %457 ], [ %.074, %456 ], [ %.074, %445 ], [ %.074, %435 ], [ %.074, %433 ], [ %.074, %431 ], [ %.074, %429 ], [ %.074, %428 ], [ %.074, %427 ], [ %.074, %416 ], [ %.074, %406 ], [ %.074, %405 ], [ %.074, %398 ], [ %.074, %368 ], [ %.074, %365 ], [ %.074, %364 ], [ %.074, %361 ], [ %.074, %360 ], [ %.074, %350 ], [ %.074, %340 ], [ %.074, %336 ], [ %.074, %334 ], [ %.074, %333 ], [ %.074, %322 ], [ %.074, %312 ], [ %.074, %310 ], [ %.074, %308 ], [ %.074, %307 ], [ %.074, %292 ], [ %.074, %282 ], [ %.074, %280 ], [ %.074, %269 ], [ %.074, %259 ], [ %.074, %255 ], [ %.074, %254 ], [ %.074, %244 ], [ %.074, %234 ], [ %233, %232 ], [ %.074, %231 ], [ %.074, %217 ], [ %.074, %207 ], [ %.074, %205 ], [ %.074, %193 ], [ %.074, %183 ], [ 0, %182 ], [ %.074, %179 ], [ %.074, %178 ], [ %.074, %177 ], [ %.074, %176 ], [ %.074, %165 ], [ %.074, %153 ], [ %.074, %151 ], [ %.074, %139 ], [ %.074, %129 ], [ %.074, %128 ], [ %.074, %111 ], [ %.074, %101 ], [ %.074, %99 ], [ %.074, %93 ], [ %.074, %89 ], [ %.074, %88 ], [ %.074, %77 ], [ %.074, %67 ], [ %.074, %65 ], [ %.074, %64 ], [ %.074, %47 ], [ %.074, %37 ], [ %.074, %35 ], [ %.074, %24 ], [ %.074, %14 ]
  %.072.be = phi i32 [ %.072, %13 ], [ %.072, %500 ], [ %.072, %498 ], [ %.072, %497 ], [ %.072, %495 ], [ %.072, %489 ], [ %.072, %488 ], [ %.072, %487 ], [ %.072, %482 ], [ %.072, %481 ], [ %.072, %479 ], [ %.072, %471 ], [ %.072, %469 ], [ %.072, %461 ], [ %.072, %460 ], [ %.072, %457 ], [ %.072, %456 ], [ %.072, %445 ], [ %.072, %435 ], [ %.072, %433 ], [ %.072, %431 ], [ %.072, %429 ], [ %.072, %428 ], [ %.072, %427 ], [ %.072, %416 ], [ %.072, %406 ], [ %.072, %405 ], [ %.072, %398 ], [ %.072, %368 ], [ %.072, %365 ], [ %.072, %364 ], [ %.072, %361 ], [ %.072, %360 ], [ %.072, %350 ], [ %.072, %340 ], [ %.072, %336 ], [ %.072, %334 ], [ %.072, %333 ], [ %.072, %322 ], [ %.072, %312 ], [ %.072, %310 ], [ %309, %308 ], [ %.072, %307 ], [ %.072, %292 ], [ %.072, %282 ], [ %.072, %280 ], [ %.072, %269 ], [ %.072, %259 ], [ 30, %255 ], [ %.072, %254 ], [ %.072, %244 ], [ %.072, %234 ], [ %.072, %232 ], [ %.072, %231 ], [ %.072, %217 ], [ %.072, %207 ], [ %.072, %205 ], [ %.072, %193 ], [ %.072, %183 ], [ %.072, %182 ], [ %.072, %179 ], [ %.072, %178 ], [ %.072, %177 ], [ %.072, %176 ], [ %.072, %165 ], [ %.072, %153 ], [ %.072, %151 ], [ %.072, %139 ], [ %.072, %129 ], [ %.072, %128 ], [ %.072, %111 ], [ %.072, %101 ], [ %.072, %99 ], [ %.072, %93 ], [ %.072, %89 ], [ %.072, %88 ], [ %.072, %77 ], [ %.072, %67 ], [ %.072, %65 ], [ %.072, %64 ], [ %.072, %47 ], [ %.072, %37 ], [ %.072, %35 ], [ %.072, %24 ], [ %.072, %14 ]
  %.070.be = phi i32 [ %.070, %13 ], [ %.070, %500 ], [ %.070, %498 ], [ %.070, %497 ], [ %.070, %495 ], [ %.070, %489 ], [ %.070, %488 ], [ %.070, %487 ], [ %.070, %482 ], [ %.070, %481 ], [ %.070, %479 ], [ %.070, %471 ], [ %.070, %469 ], [ %.070, %461 ], [ %.070, %460 ], [ %458, %457 ], [ %.070, %456 ], [ %.070, %445 ], [ %.070, %435 ], [ %.070, %433 ], [ %.070, %431 ], [ %.070, %429 ], [ %.070, %428 ], [ %.070, %427 ], [ %.070, %416 ], [ %.070, %406 ], [ %.070, %405 ], [ %.070, %398 ], [ %.070, %368 ], [ %.070, %365 ], [ %.070, %364 ], [ %.070, %361 ], [ %.070, %360 ], [ %.070, %350 ], [ %.070, %340 ], [ %.070, %336 ], [ 0, %334 ], [ %.070, %333 ], [ %.070, %322 ], [ %.070, %312 ], [ %.070, %310 ], [ %.070, %308 ], [ %.070, %307 ], [ %.070, %292 ], [ %.070, %282 ], [ %.070, %280 ], [ %.070, %269 ], [ %.070, %259 ], [ %.070, %255 ], [ %.070, %254 ], [ %.070, %244 ], [ %.070, %234 ], [ %.070, %232 ], [ %.070, %231 ], [ %.070, %217 ], [ %.070, %207 ], [ %.070, %205 ], [ %.070, %193 ], [ %.070, %183 ], [ %.070, %182 ], [ %.070, %179 ], [ %.070, %178 ], [ %.070, %177 ], [ %.070, %176 ], [ %.070, %165 ], [ %.070, %153 ], [ %.070, %151 ], [ %.070, %139 ], [ %.070, %129 ], [ %.070, %128 ], [ %.070, %111 ], [ %.070, %101 ], [ %.070, %99 ], [ %.070, %93 ], [ %.070, %89 ], [ %.070, %88 ], [ %.070, %77 ], [ %.070, %67 ], [ %.070, %65 ], [ %.070, %64 ], [ %.070, %47 ], [ %.070, %37 ], [ %.070, %35 ], [ %.070, %24 ], [ %.070, %14 ]
  %.068.be = phi i32 [ %.068, %13 ], [ %.068, %500 ], [ %.068, %498 ], [ 0, %497 ], [ %.068, %495 ], [ %.068, %489 ], [ %.068, %488 ], [ %.068, %487 ], [ %.068, %482 ], [ %.068, %481 ], [ %.068, %479 ], [ %.068, %471 ], [ %.068, %469 ], [ %.068, %461 ], [ %.068, %460 ], [ %.068, %457 ], [ %.068, %456 ], [ %.068, %445 ], [ %.068, %435 ], [ %.068, %433 ], [ %.068, %431 ], [ %.068, %429 ], [ %.068, %428 ], [ %.068, %427 ], [ %.068, %416 ], [ %.068, %406 ], [ %.068, %405 ], [ %399, %398 ], [ %.068, %368 ], [ %.068, %365 ], [ %.068, %364 ], [ %.068, %361 ], [ %.068, %360 ], [ 0, %350 ], [ %.068, %340 ], [ %.068, %336 ], [ %.068, %334 ], [ %.068, %333 ], [ %.068, %322 ], [ %.068, %312 ], [ %.068, %310 ], [ %.068, %308 ], [ %.068, %307 ], [ %.068, %292 ], [ %.068, %282 ], [ %.068, %280 ], [ %.068, %269 ], [ %.068, %259 ], [ %.068, %255 ], [ %.068, %254 ], [ %.068, %244 ], [ %.068, %234 ], [ %.068, %232 ], [ %.068, %231 ], [ %.068, %217 ], [ %.068, %207 ], [ %.068, %205 ], [ %.068, %193 ], [ %.068, %183 ], [ %.068, %182 ], [ %.068, %179 ], [ %.068, %178 ], [ %.068, %177 ], [ %.068, %176 ], [ %.068, %165 ], [ %.068, %153 ], [ %.068, %151 ], [ %.068, %139 ], [ %.068, %129 ], [ %.068, %128 ], [ %.068, %111 ], [ %.068, %101 ], [ %.068, %99 ], [ %.068, %93 ], [ %.068, %89 ], [ %.068, %88 ], [ %.068, %77 ], [ %.068, %67 ], [ %.068, %65 ], [ %.068, %64 ], [ %.068, %47 ], [ %.068, %37 ], [ %.068, %35 ], [ %.068, %24 ], [ %.068, %14 ]
  %.066.be = phi i32 [ %.066, %13 ], [ %.066, %500 ], [ %.066, %498 ], [ 0, %497 ], [ %.066, %495 ], [ %.066, %489 ], [ %.066, %488 ], [ %.066, %487 ], [ %.066, %482 ], [ %.066, %481 ], [ %.066, %479 ], [ %.066, %471 ], [ %.066, %469 ], [ %.066, %461 ], [ %.066, %460 ], [ %.066, %457 ], [ %.066, %456 ], [ %.066, %445 ], [ %.066, %435 ], [ %.066, %433 ], [ %.066, %431 ], [ %.066, %429 ], [ %.066, %428 ], [ %.066, %427 ], [ %.066, %416 ], [ %.066, %406 ], [ %.066, %405 ], [ %400, %398 ], [ %.066, %368 ], [ %.066, %365 ], [ %.066, %364 ], [ %.066, %361 ], [ %.066, %360 ], [ 0, %350 ], [ %.066, %340 ], [ %.066, %336 ], [ %.066, %334 ], [ %.066, %333 ], [ %.066, %322 ], [ %.066, %312 ], [ %.066, %310 ], [ %.066, %308 ], [ %.066, %307 ], [ %.066, %292 ], [ %.066, %282 ], [ %.066, %280 ], [ %.066, %269 ], [ %.066, %259 ], [ %.066, %255 ], [ %.066, %254 ], [ %.066, %244 ], [ %.066, %234 ], [ %.066, %232 ], [ %.066, %231 ], [ %.066, %217 ], [ %.066, %207 ], [ %.066, %205 ], [ %.066, %193 ], [ %.066, %183 ], [ %.066, %182 ], [ %.066, %179 ], [ %.066, %178 ], [ %.066, %177 ], [ %.066, %176 ], [ %.066, %165 ], [ %.066, %153 ], [ %.066, %151 ], [ %.066, %139 ], [ %.066, %129 ], [ %.066, %128 ], [ %.066, %111 ], [ %.066, %101 ], [ %.066, %99 ], [ %.066, %93 ], [ %.066, %89 ], [ %.066, %88 ], [ %.066, %77 ], [ %.066, %67 ], [ %.066, %65 ], [ %.066, %64 ], [ %.066, %47 ], [ %.066, %37 ], [ %.066, %35 ], [ %.066, %24 ], [ %.066, %14 ]
  %.064.be = phi i32 [ %.064, %13 ], [ %.064, %500 ], [ %.064, %498 ], [ 30, %497 ], [ %.064, %495 ], [ %.064, %489 ], [ %.064, %488 ], [ %.064, %487 ], [ %.064, %482 ], [ %.064, %481 ], [ %.064, %479 ], [ %.064, %471 ], [ %.064, %469 ], [ %.064, %461 ], [ %.064, %460 ], [ %.064, %457 ], [ %.064, %456 ], [ %.064, %445 ], [ %.064, %435 ], [ %.064, %433 ], [ %.064, %431 ], [ %430, %429 ], [ %.064, %428 ], [ %.064, %427 ], [ %.064, %416 ], [ %.064, %406 ], [ %.064, %405 ], [ %.064, %398 ], [ %.064, %368 ], [ %.064, %365 ], [ %.064, %364 ], [ %.064, %361 ], [ %.064, %360 ], [ 30, %350 ], [ %.064, %340 ], [ %.064, %336 ], [ %.064, %334 ], [ %.064, %333 ], [ %.064, %322 ], [ %.064, %312 ], [ %.064, %310 ], [ %.064, %308 ], [ %.064, %307 ], [ %.064, %292 ], [ %.064, %282 ], [ %.064, %280 ], [ %.064, %269 ], [ %.064, %259 ], [ %.064, %255 ], [ %.064, %254 ], [ %.064, %244 ], [ %.064, %234 ], [ %.064, %232 ], [ %.064, %231 ], [ %.064, %217 ], [ %.064, %207 ], [ %.064, %205 ], [ %.064, %193 ], [ %.064, %183 ], [ %.064, %182 ], [ %.064, %179 ], [ %.064, %178 ], [ %.064, %177 ], [ %.064, %176 ], [ %.064, %165 ], [ %.064, %153 ], [ %.064, %151 ], [ %.064, %139 ], [ %.064, %129 ], [ %.064, %128 ], [ %.064, %111 ], [ %.064, %101 ], [ %.064, %99 ], [ %.064, %93 ], [ %.064, %89 ], [ %.064, %88 ], [ %.064, %77 ], [ %.064, %67 ], [ %.064, %65 ], [ %.064, %64 ], [ %.064, %47 ], [ %.064, %37 ], [ %.064, %35 ], [ %.064, %24 ], [ %.064, %14 ]
  %.062.be = phi i32 [ %.062, %13 ], [ %.062, %500 ], [ %499, %498 ], [ %.062, %497 ], [ %.062, %495 ], [ %.062, %489 ], [ %.062, %488 ], [ %.062, %487 ], [ %.062, %482 ], [ %.062, %481 ], [ %.062, %479 ], [ %.062, %471 ], [ %.062, %469 ], [ %.062, %461 ], [ %.062, %460 ], [ %.062, %457 ], [ %.062, %456 ], [ %.062, %445 ], [ %.062, %435 ], [ %.062, %433 ], [ %.062, %431 ], [ %.062, %429 ], [ %.062, %428 ], [ %.062, %427 ], [ %417, %416 ], [ %.062, %406 ], [ %.062, %405 ], [ %.062, %398 ], [ %.062, %368 ], [ %.062, %365 ], [ 0, %364 ], [ %.062, %361 ], [ %.062, %360 ], [ %.062, %350 ], [ %.062, %340 ], [ %.062, %336 ], [ %.062, %334 ], [ %.062, %333 ], [ %.062, %322 ], [ %.062, %312 ], [ %.062, %310 ], [ %.062, %308 ], [ %.062, %307 ], [ %.062, %292 ], [ %.062, %282 ], [ %.062, %280 ], [ %.062, %269 ], [ %.062, %259 ], [ %.062, %255 ], [ %.062, %254 ], [ %.062, %244 ], [ %.062, %234 ], [ %.062, %232 ], [ %.062, %231 ], [ %.062, %217 ], [ %.062, %207 ], [ %.062, %205 ], [ %.062, %193 ], [ %.062, %183 ], [ %.062, %182 ], [ %.062, %179 ], [ %.062, %178 ], [ %.062, %177 ], [ %.062, %176 ], [ %.062, %165 ], [ %.062, %153 ], [ %.062, %151 ], [ %.062, %139 ], [ %.062, %129 ], [ %.062, %128 ], [ %.062, %111 ], [ %.062, %101 ], [ %.062, %99 ], [ %.062, %93 ], [ %.062, %89 ], [ %.062, %88 ], [ %.062, %77 ], [ %.062, %67 ], [ %.062, %65 ], [ %.062, %64 ], [ %.062, %47 ], [ %.062, %37 ], [ %.062, %35 ], [ %.062, %24 ], [ %.062, %14 ]
  %.060.be = phi i64 [ %.060, %13 ], [ %.060, %500 ], [ %.060, %498 ], [ %.060, %497 ], [ %.060, %495 ], [ %.060, %489 ], [ %.060, %488 ], [ %.060, %487 ], [ %.060, %482 ], [ %.060, %481 ], [ %.060, %479 ], [ %.060, %471 ], [ %.060, %469 ], [ %.060, %461 ], [ %.060, %460 ], [ %.060, %457 ], [ %.060, %456 ], [ %.060, %445 ], [ %.060, %435 ], [ %.060, %433 ], [ %.060, %431 ], [ %.060, %429 ], [ %.060, %428 ], [ %.060, %427 ], [ %.060, %416 ], [ %.060, %406 ], [ %.060, %405 ], [ %.060, %398 ], [ %378, %368 ], [ %.060, %365 ], [ %.060, %364 ], [ %.060, %361 ], [ %.060, %360 ], [ %.060, %350 ], [ %.060, %340 ], [ %.060, %336 ], [ %.060, %334 ], [ %.060, %333 ], [ %.060, %322 ], [ %.060, %312 ], [ %.060, %310 ], [ %.060, %308 ], [ %.060, %307 ], [ %.060, %292 ], [ %.060, %282 ], [ %.060, %280 ], [ %.060, %269 ], [ %.060, %259 ], [ %.060, %255 ], [ %.060, %254 ], [ %.060, %244 ], [ %.060, %234 ], [ %.060, %232 ], [ %.060, %231 ], [ %.060, %217 ], [ %.060, %207 ], [ %.060, %205 ], [ %.060, %193 ], [ %.060, %183 ], [ %.060, %182 ], [ %.060, %179 ], [ %.060, %178 ], [ %.060, %177 ], [ %.060, %176 ], [ %.060, %165 ], [ %.060, %153 ], [ %.060, %151 ], [ %.060, %139 ], [ %.060, %129 ], [ %.060, %128 ], [ %.060, %111 ], [ %.060, %101 ], [ %.060, %99 ], [ %.060, %93 ], [ %.060, %89 ], [ %.060, %88 ], [ %.060, %77 ], [ %.060, %67 ], [ %.060, %65 ], [ %.060, %64 ], [ %.060, %47 ], [ %.060, %37 ], [ %.060, %35 ], [ %.060, %24 ], [ %.060, %14 ]
  %.058.be = phi i64 [ %.058, %13 ], [ %.058, %500 ], [ %.058, %498 ], [ %.058, %497 ], [ %.058, %495 ], [ %.058, %489 ], [ %.058, %488 ], [ %.058, %487 ], [ %.058, %482 ], [ %.058, %481 ], [ %.058, %479 ], [ %.058, %471 ], [ %.058, %469 ], [ %.058, %461 ], [ %.058, %460 ], [ %.058, %457 ], [ %.058, %456 ], [ %.058, %445 ], [ %.058, %435 ], [ %.058, %433 ], [ %.058, %431 ], [ %.058, %429 ], [ %.058, %428 ], [ %.058, %427 ], [ %.058, %416 ], [ %.058, %406 ], [ %.058, %405 ], [ %.058, %398 ], [ %384, %368 ], [ %.058, %365 ], [ %.058, %364 ], [ %.058, %361 ], [ %.058, %360 ], [ %.058, %350 ], [ %.058, %340 ], [ %.058, %336 ], [ %.058, %334 ], [ %.058, %333 ], [ %.058, %322 ], [ %.058, %312 ], [ %.058, %310 ], [ %.058, %308 ], [ %.058, %307 ], [ %.058, %292 ], [ %.058, %282 ], [ %.058, %280 ], [ %.058, %269 ], [ %.058, %259 ], [ %.058, %255 ], [ %.058, %254 ], [ %.058, %244 ], [ %.058, %234 ], [ %.058, %232 ], [ %.058, %231 ], [ %.058, %217 ], [ %.058, %207 ], [ %.058, %205 ], [ %.058, %193 ], [ %.058, %183 ], [ %.058, %182 ], [ %.058, %179 ], [ %.058, %178 ], [ %.058, %177 ], [ %.058, %176 ], [ %.058, %165 ], [ %.058, %153 ], [ %.058, %151 ], [ %.058, %139 ], [ %.058, %129 ], [ %.058, %128 ], [ %.058, %111 ], [ %.058, %101 ], [ %.058, %99 ], [ %.058, %93 ], [ %.058, %89 ], [ %.058, %88 ], [ %.058, %77 ], [ %.058, %67 ], [ %.058, %65 ], [ %.058, %64 ], [ %.058, %47 ], [ %.058, %37 ], [ %.058, %35 ], [ %.058, %24 ], [ %.058, %14 ]
  %.0.be = phi i32 [ %.0, %13 ], [ -1453565365, %500 ], [ 305706443, %498 ], [ -1013539786, %497 ], [ 1406790122, %495 ], [ -1489866989, %489 ], [ -446218279, %488 ], [ -1977500501, %487 ], [ -934183094, %482 ], [ -890257147, %481 ], [ -302524818, %479 ], [ 883478658, %471 ], [ -162118140, %469 ], [ 1530725524, %461 ], [ -1041387047, %460 ], [ 1163594032, %457 ], [ 267383182, %456 ], [ %455, %445 ], [ %444, %435 ], [ 1396508924, %433 ], [ %432, %431 ], [ -28632715, %429 ], [ 580637911, %428 ], [ -732609705, %427 ], [ %426, %416 ], [ %415, %406 ], [ -62883288, %405 ], [ 28226833, %398 ], [ %397, %368 ], [ %367, %365 ], [ -732609705, %364 ], [ %363, %361 ], [ -28632715, %360 ], [ %359, %350 ], [ %349, %340 ], [ %339, %336 ], [ 1163594032, %334 ], [ 1855212323, %333 ], [ %332, %322 ], [ %321, %312 ], [ %311, %310 ], [ -1695047443, %308 ], [ 1716169139, %307 ], [ %306, %292 ], [ %291, %282 ], [ %281, %280 ], [ %279, %269 ], [ %268, %259 ], [ -1695047443, %255 ], [ -947957883, %254 ], [ %253, %244 ], [ %243, %234 ], [ 917856960, %232 ], [ 1386829990, %231 ], [ %230, %217 ], [ %216, %207 ], [ %206, %205 ], [ %204, %193 ], [ %192, %183 ], [ 917856960, %182 ], [ %181, %179 ], [ 1358399186, %178 ], [ 1583620908, %177 ], [ -1356506309, %176 ], [ %174, %165 ], [ %164, %153 ], [ %152, %151 ], [ %150, %139 ], [ %138, %129 ], [ 1358399186, %128 ], [ %127, %111 ], [ %110, %101 ], [ 744233821, %99 ], [ -1652784553, %93 ], [ %92, %89 ], [ 744233821, %88 ], [ %87, %77 ], [ %76, %67 ], [ 1875206098, %65 ], [ -207503414, %64 ], [ %63, %47 ], [ %46, %37 ], [ %36, %35 ], [ %34, %24 ], [ %23, %14 ]
  br label %13

14:                                               ; preds = %13
  %15 = load i32, i32* @x.4, align 4
  %16 = load i32, i32* @y.5, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -1041387047, i32 -1767115763
  br label %.backedge

24:                                               ; preds = %13
  %25 = icmp slt i32 %.082, 35
  store i1 %25, i1* %4, align 1
  %26 = load i32, i32* @x.4, align 4
  %27 = load i32, i32* @y.5, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 949247189, i32 -1767115763
  br label %.backedge

35:                                               ; preds = %13
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %36 = select i1 %.0..0..0., i32 689573236, i32 -1880771611
  br label %.backedge

37:                                               ; preds = %13
  %38 = load i32, i32* @x.4, align 4
  %39 = load i32, i32* @y.5, align 4
  %40 = add i32 %38, -1
  %41 = mul i32 %40, %38
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %44, %43
  %46 = select i1 %45, i32 1530725524, i32 -1974901572
  br label %.backedge

47:                                               ; preds = %13
  %48 = add i32 %.082, -1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [1005 x i64], [1005 x i64]* @pot, i64 0, i64 %49
  %51 = load i64, i64* %50, align 8
  %52 = shl nsw i64 %51, 1
  %53 = sext i32 %.082 to i64
  %54 = getelementptr inbounds [1005 x i64], [1005 x i64]* @pot, i64 0, i64 %53
  store i64 %52, i64* %54, align 8
  %55 = load i32, i32* @x.4, align 4
  %56 = load i32, i32* @y.5, align 4
  %57 = add i32 %55, -1
  %58 = mul i32 %57, %55
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %61, %60
  %63 = select i1 %62, i32 352415283, i32 -1974901572
  br label %.backedge

64:                                               ; preds = %13
  br label %.backedge

65:                                               ; preds = %13
  %66 = add i32 %.082, 1
  br label %.backedge

67:                                               ; preds = %13
  %68 = load i32, i32* @x.4, align 4
  %69 = load i32, i32* @y.5, align 4
  %70 = add i32 %68, -1
  %71 = mul i32 %70, %68
  %72 = and i32 %71, 1
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %74, %73
  %76 = select i1 %75, i32 -162118140, i32 -242193077
  br label %.backedge

77:                                               ; preds = %13
  %78 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) @n)
  %79 = load i32, i32* @x.4, align 4
  %80 = load i32, i32* @y.5, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 126299306, i32 -242193077
  br label %.backedge

88:                                               ; preds = %13
  br label %.backedge

89:                                               ; preds = %13
  %90 = load i32, i32* @n, align 4
  %91 = icmp slt i32 %.080, %90
  %92 = select i1 %91, i32 -1292041882, i32 18854908
  br label %.backedge

93:                                               ; preds = %13
  %94 = sext i32 %.080 to i64
  %95 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %94
  %96 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %95)
  %97 = getelementptr inbounds [1005 x i64], [1005 x i64]* @Y, i64 0, i64 %94
  %98 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %96, i64* nonnull dereferenceable(8) %97)
  br label %.backedge

99:                                               ; preds = %13
  %100 = add i32 %.080, 1
  br label %.backedge

101:                                              ; preds = %13
  %102 = load i32, i32* @x.4, align 4
  %103 = load i32, i32* @y.5, align 4
  %104 = add i32 %102, -1
  %105 = mul i32 %104, %102
  %106 = and i32 %105, 1
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %108, %107
  %110 = select i1 %109, i32 883478658, i32 -19879604
  br label %.backedge

111:                                              ; preds = %13
  %112 = load i64, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @X, i64 0, i64 0), align 16
  %113 = tail call i64 @_ZSt3absx(i64 %112)
  %114 = load i64, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @Y, i64 0, i64 0), align 16
  %115 = tail call i64 @_ZSt3absx(i64 %114)
  %116 = add i64 %115, %113
  %117 = srem i64 %116, 2
  %118 = trunc i64 %117 to i32
  %119 = load i32, i32* @x.4, align 4
  %120 = load i32, i32* @y.5, align 4
  %121 = add i32 %119, -1
  %122 = mul i32 %121, %119
  %123 = and i32 %122, 1
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %125, %124
  %127 = select i1 %126, i32 1867584683, i32 -19879604
  br label %.backedge

128:                                              ; preds = %13
  br label %.backedge

129:                                              ; preds = %13
  %130 = load i32, i32* @x.4, align 4
  %131 = load i32, i32* @y.5, align 4
  %132 = add i32 %130, -1
  %133 = mul i32 %132, %130
  %134 = and i32 %133, 1
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %136, %135
  %138 = select i1 %137, i32 -302524818, i32 -1029292609
  br label %.backedge

139:                                              ; preds = %13
  %140 = load i32, i32* @n, align 4
  %141 = icmp slt i32 %.076, %140
  store i1 %141, i1* %3, align 1
  %142 = load i32, i32* @x.4, align 4
  %143 = load i32, i32* @y.5, align 4
  %144 = add i32 %142, -1
  %145 = mul i32 %144, %142
  %146 = and i32 %145, 1
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %148, %147
  %150 = select i1 %149, i32 305713029, i32 -1029292609
  br label %.backedge

151:                                              ; preds = %13
  %.0..0..0.55 = load volatile i1, i1* %3, align 1
  %152 = select i1 %.0..0..0.55, i32 -1801959613, i32 -449278805
  br label %.backedge

153:                                              ; preds = %13
  %154 = sext i32 %.076 to i64
  %155 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %154
  %156 = load i64, i64* %155, align 8
  %157 = tail call i64 @_ZSt3absx(i64 %156)
  %158 = getelementptr inbounds [1005 x i64], [1005 x i64]* @Y, i64 0, i64 %154
  %159 = load i64, i64* %158, align 8
  %160 = tail call i64 @_ZSt3absx(i64 %159)
  %161 = add i64 %160, %157
  %162 = srem i64 %161, 2
  %163 = sext i32 %.078 to i64
  %.not87 = icmp eq i64 %162, %163
  %164 = select i1 %.not87, i32 -1356506309, i32 -1849206959
  br label %.backedge

165:                                              ; preds = %13
  %166 = load i32, i32* @x.4, align 4
  %167 = load i32, i32* @y.5, align 4
  %168 = add i32 %166, -1
  %169 = mul i32 %168, %166
  %170 = and i32 %169, 1
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %172, %171
  %174 = select i1 %173, i32 1020147484, i32 -1502587831
  br label %.backedge

175:                                              ; preds = %13
  tail call void @_Z4donev()
  unreachable

176:                                              ; preds = %13
  br label %.backedge

177:                                              ; preds = %13
  br label %.backedge

178:                                              ; preds = %13
  %.neg86 = add i32 %.076, 1
  br label %.backedge

179:                                              ; preds = %13
  %180 = icmp eq i32 %.078, 0
  %181 = select i1 %180, i32 916610020, i32 -947957883
  br label %.backedge

182:                                              ; preds = %13
  br label %.backedge

183:                                              ; preds = %13
  %184 = load i32, i32* @x.4, align 4
  %185 = load i32, i32* @y.5, align 4
  %186 = add i32 %184, -1
  %187 = mul i32 %186, %184
  %188 = and i32 %187, 1
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %190, %189
  %192 = select i1 %191, i32 -890257147, i32 484072438
  br label %.backedge

193:                                              ; preds = %13
  %194 = load i32, i32* @n, align 4
  %195 = icmp slt i32 %.074, %194
  store i1 %195, i1* %2, align 1
  %196 = load i32, i32* @x.4, align 4
  %197 = load i32, i32* @y.5, align 4
  %198 = add i32 %196, -1
  %199 = mul i32 %198, %196
  %200 = and i32 %199, 1
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %202, %201
  %204 = select i1 %203, i32 73929334, i32 484072438
  br label %.backedge

205:                                              ; preds = %13
  %.0..0..0.56 = load volatile i1, i1* %2, align 1
  %206 = select i1 %.0..0..0.56, i32 1494826039, i32 -1022706833
  br label %.backedge

207:                                              ; preds = %13
  %208 = load i32, i32* @x.4, align 4
  %209 = load i32, i32* @y.5, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 -934183094, i32 -576795718
  br label %.backedge

217:                                              ; preds = %13
  %218 = sext i32 %.074 to i64
  %219 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %218
  %220 = load i64, i64* %219, align 8
  %221 = add i64 %220, 1
  store i64 %221, i64* %219, align 8
  %222 = load i32, i32* @x.4, align 4
  %223 = load i32, i32* @y.5, align 4
  %224 = add i32 %222, -1
  %225 = mul i32 %224, %222
  %226 = and i32 %225, 1
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %228, %227
  %230 = select i1 %229, i32 -599070195, i32 -576795718
  br label %.backedge

231:                                              ; preds = %13
  br label %.backedge

232:                                              ; preds = %13
  %233 = add i32 %.074, 1
  br label %.backedge

234:                                              ; preds = %13
  %235 = load i32, i32* @x.4, align 4
  %236 = load i32, i32* @y.5, align 4
  %237 = add i32 %235, -1
  %238 = mul i32 %237, %235
  %239 = and i32 %238, 1
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %241, %240
  %243 = select i1 %242, i32 -1977500501, i32 2117090554
  br label %.backedge

244:                                              ; preds = %13
  %245 = load i32, i32* @x.4, align 4
  %246 = load i32, i32* @y.5, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 657485167, i32 2117090554
  br label %.backedge

254:                                              ; preds = %13
  br label %.backedge

255:                                              ; preds = %13
  %.not85 = icmp eq i32 %.078, 0
  %256 = zext i1 %.not85 to i32
  %.neg = select i1 %.not85, i32 32, i32 31
  %257 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 %.neg)
  %258 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %257, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

259:                                              ; preds = %13
  %260 = load i32, i32* @x.4, align 4
  %261 = load i32, i32* @y.5, align 4
  %262 = add i32 %260, -1
  %263 = mul i32 %262, %260
  %264 = and i32 %263, 1
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %266, %265
  %268 = select i1 %267, i32 -446218279, i32 922548730
  br label %.backedge

269:                                              ; preds = %13
  %270 = icmp sgt i32 %.072, -1
  store i1 %270, i1* %1, align 1
  %271 = load i32, i32* @x.4, align 4
  %272 = load i32, i32* @y.5, align 4
  %273 = add i32 %271, -1
  %274 = mul i32 %273, %271
  %275 = and i32 %274, 1
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %277, %276
  %279 = select i1 %278, i32 1259759763, i32 922548730
  br label %.backedge

280:                                              ; preds = %13
  %.0..0..0.57 = load volatile i1, i1* %1, align 1
  %281 = select i1 %.0..0..0.57, i32 1344037424, i32 21640793
  br label %.backedge

282:                                              ; preds = %13
  %283 = load i32, i32* @x.4, align 4
  %284 = load i32, i32* @y.5, align 4
  %285 = add i32 %283, -1
  %286 = mul i32 %285, %283
  %287 = and i32 %286, 1
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %289, %288
  %291 = select i1 %290, i32 -1489866989, i32 1187928499
  br label %.backedge

292:                                              ; preds = %13
  %293 = sext i32 %.072 to i64
  %294 = getelementptr inbounds [1005 x i64], [1005 x i64]* @pot, i64 0, i64 %293
  %295 = load i64, i64* %294, align 8
  %296 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %295)
  %297 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %296, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %298 = load i32, i32* @x.4, align 4
  %299 = load i32, i32* @y.5, align 4
  %300 = add i32 %298, -1
  %301 = mul i32 %300, %298
  %302 = and i32 %301, 1
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %304, %303
  %306 = select i1 %305, i32 -443679156, i32 1187928499
  br label %.backedge

307:                                              ; preds = %13
  br label %.backedge

308:                                              ; preds = %13
  %309 = add i32 %.072, -1
  br label %.backedge

310:                                              ; preds = %13
  %.not84 = icmp eq i32 %.078, 0
  %311 = select i1 %.not84, i32 1855212323, i32 -765504873
  br label %.backedge

312:                                              ; preds = %13
  %313 = load i32, i32* @x.4, align 4
  %314 = load i32, i32* @y.5, align 4
  %315 = add i32 %313, -1
  %316 = mul i32 %315, %313
  %317 = and i32 %316, 1
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %319, %318
  %321 = select i1 %320, i32 1406790122, i32 -1682633638
  br label %.backedge

322:                                              ; preds = %13
  %323 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 1)
  %324 = load i32, i32* @x.4, align 4
  %325 = load i32, i32* @y.5, align 4
  %326 = add i32 %324, -1
  %327 = mul i32 %326, %324
  %328 = and i32 %327, 1
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %330, %329
  %332 = select i1 %331, i32 -503809066, i32 -1682633638
  br label %.backedge

333:                                              ; preds = %13
  br label %.backedge

334:                                              ; preds = %13
  %335 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

336:                                              ; preds = %13
  %337 = load i32, i32* @n, align 4
  %338 = icmp slt i32 %.070, %337
  %339 = select i1 %338, i32 479350779, i32 1264851853
  br label %.backedge

340:                                              ; preds = %13
  %341 = load i32, i32* @x.4, align 4
  %342 = load i32, i32* @y.5, align 4
  %343 = add i32 %341, -1
  %344 = mul i32 %343, %341
  %345 = and i32 %344, 1
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %347, %346
  %349 = select i1 %348, i32 -1013539786, i32 -320792532
  br label %.backedge

350:                                              ; preds = %13
  %351 = load i32, i32* @x.4, align 4
  %352 = load i32, i32* @y.5, align 4
  %353 = add i32 %351, -1
  %354 = mul i32 %353, %351
  %355 = and i32 %354, 1
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %357, %356
  %359 = select i1 %358, i32 -1745023750, i32 -320792532
  br label %.backedge

360:                                              ; preds = %13
  br label %.backedge

361:                                              ; preds = %13
  %362 = icmp sgt i32 %.064, -1
  %363 = select i1 %362, i32 -1996654572, i32 -229168006
  br label %.backedge

364:                                              ; preds = %13
  br label %.backedge

365:                                              ; preds = %13
  %366 = icmp slt i32 %.062, 4
  %367 = select i1 %366, i32 -433582946, i32 28226833
  br label %.backedge

368:                                              ; preds = %13
  %369 = sext i32 %.068 to i64
  %370 = sext i32 %.062 to i64
  %371 = getelementptr inbounds [4 x i32], [4 x i32]* @_ZL2dx, i64 0, i64 %370
  %372 = load i32, i32* %371, align 4
  %373 = sext i32 %372 to i64
  %374 = sext i32 %.064 to i64
  %375 = getelementptr inbounds [1005 x i64], [1005 x i64]* @pot, i64 0, i64 %374
  %376 = load i64, i64* %375, align 8
  %377 = mul nsw i64 %376, %373
  %378 = add i64 %377, %369
  %379 = sext i32 %.066 to i64
  %380 = getelementptr inbounds [4 x i32], [4 x i32]* @_ZL2dy, i64 0, i64 %370
  %381 = load i32, i32* %380, align 4
  %382 = sext i32 %381 to i64
  %383 = mul nsw i64 %376, %382
  %384 = add i64 %383, %379
  %385 = sext i32 %.070 to i64
  %386 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %385
  %387 = load i64, i64* %386, align 8
  %388 = sub i64 %378, %387
  %389 = tail call i64 @_ZSt3absx(i64 %388)
  %390 = getelementptr inbounds [1005 x i64], [1005 x i64]* @Y, i64 0, i64 %385
  %391 = load i64, i64* %390, align 8
  %392 = sub i64 %384, %391
  %393 = tail call i64 @_ZSt3absx(i64 %392)
  %394 = add i64 %393, %389
  %395 = load i64, i64* %375, align 8
  %396 = icmp slt i64 %394, %395
  %397 = select i1 %396, i32 1856342686, i32 -650036028
  br label %.backedge

398:                                              ; preds = %13
  %399 = trunc i64 %.060 to i32
  %400 = trunc i64 %.058 to i32
  %401 = sext i32 %.062 to i64
  %402 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZL5smjer, i64 0, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8 signext %403)
  br label %.backedge

405:                                              ; preds = %13
  br label %.backedge

406:                                              ; preds = %13
  %407 = load i32, i32* @x.4, align 4
  %408 = load i32, i32* @y.5, align 4
  %409 = add i32 %407, -1
  %410 = mul i32 %409, %407
  %411 = and i32 %410, 1
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %413, %412
  %415 = select i1 %414, i32 305706443, i32 504007199
  br label %.backedge

416:                                              ; preds = %13
  %417 = add i32 %.062, 1
  %418 = load i32, i32* @x.4, align 4
  %419 = load i32, i32* @y.5, align 4
  %420 = add i32 %418, -1
  %421 = mul i32 %420, %418
  %422 = and i32 %421, 1
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %424, %423
  %426 = select i1 %425, i32 -554315898, i32 504007199
  br label %.backedge

427:                                              ; preds = %13
  br label %.backedge

428:                                              ; preds = %13
  br label %.backedge

429:                                              ; preds = %13
  %430 = add i32 %.064, -1
  br label %.backedge

431:                                              ; preds = %13
  %.not = icmp eq i32 %.078, 0
  %432 = select i1 %.not, i32 1396508924, i32 -128869486
  br label %.backedge

433:                                              ; preds = %13
  %434 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8 signext 76)
  br label %.backedge

435:                                              ; preds = %13
  %436 = load i32, i32* @x.4, align 4
  %437 = load i32, i32* @y.5, align 4
  %438 = add i32 %436, -1
  %439 = mul i32 %438, %436
  %440 = and i32 %439, 1
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %442, %441
  %444 = select i1 %443, i32 -1453565365, i32 873547608
  br label %.backedge

445:                                              ; preds = %13
  %446 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %447 = load i32, i32* @x.4, align 4
  %448 = load i32, i32* @y.5, align 4
  %449 = add i32 %447, -1
  %450 = mul i32 %449, %447
  %451 = and i32 %450, 1
  %452 = icmp eq i32 %451, 0
  %453 = icmp slt i32 %448, 10
  %454 = or i1 %453, %452
  %455 = select i1 %454, i32 1484778972, i32 873547608
  br label %.backedge

456:                                              ; preds = %13
  br label %.backedge

457:                                              ; preds = %13
  %458 = add i32 %.070, 1
  br label %.backedge

459:                                              ; preds = %13
  ret i32 0

460:                                              ; preds = %13
  br label %.backedge

461:                                              ; preds = %13
  %462 = add i32 %.082, -1
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds [1005 x i64], [1005 x i64]* @pot, i64 0, i64 %463
  %465 = load i64, i64* %464, align 8
  %466 = shl nsw i64 %465, 1
  %467 = sext i32 %.082 to i64
  %468 = getelementptr inbounds [1005 x i64], [1005 x i64]* @pot, i64 0, i64 %467
  store i64 %466, i64* %468, align 8
  br label %.backedge

469:                                              ; preds = %13
  %470 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) @n)
  br label %.backedge

471:                                              ; preds = %13
  %472 = load i64, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @X, i64 0, i64 0), align 16
  %473 = tail call i64 @_ZSt3absx(i64 %472)
  %474 = load i64, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @Y, i64 0, i64 0), align 16
  %475 = tail call i64 @_ZSt3absx(i64 %474)
  %476 = add i64 %475, %473
  %477 = srem i64 %476, 2
  %478 = trunc i64 %477 to i32
  br label %.backedge

479:                                              ; preds = %13
  br label %.backedge

480:                                              ; preds = %13
  tail call void @_Z4donev()
  unreachable

481:                                              ; preds = %13
  br label %.backedge

482:                                              ; preds = %13
  %483 = sext i32 %.074 to i64
  %484 = getelementptr inbounds [1005 x i64], [1005 x i64]* @X, i64 0, i64 %483
  %485 = load i64, i64* %484, align 8
  %486 = add i64 %485, 1
  store i64 %486, i64* %484, align 8
  br label %.backedge

487:                                              ; preds = %13
  br label %.backedge

488:                                              ; preds = %13
  br label %.backedge

489:                                              ; preds = %13
  %490 = sext i32 %.072 to i64
  %491 = getelementptr inbounds [1005 x i64], [1005 x i64]* @pot, i64 0, i64 %490
  %492 = load i64, i64* %491, align 8
  %493 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %492)
  %494 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %493, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  br label %.backedge

495:                                              ; preds = %13
  %496 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 1)
  br label %.backedge

497:                                              ; preds = %13
  br label %.backedge

498:                                              ; preds = %13
  %499 = add i32 %.062, 1
  br label %.backedge

500:                                              ; preds = %13
  %501 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  br label %.backedge
}

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt3absx(i64 %0) local_unnamed_addr #7 comdat {
  %2 = tail call i64 @llvm.abs.i64(i64 %0, i1 false)
  ret i64 %2
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* dereferenceable(272), i8 signext) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s743804118.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #8

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline noreturn uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
