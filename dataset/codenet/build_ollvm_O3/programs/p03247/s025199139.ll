; ModuleID = 'build_ollvm/programs/p03247/s025199139.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s025199139.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@x = global [1024 x i32] zeroinitializer, align 16
@y = global [1024 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"36\0A1 \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@str = private unnamed_addr constant [3 x i8] c"35\00", align 1
@str.1 = private unnamed_addr constant [3 x i8] c"-1\00", align 1

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  %8 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %7)
  br label %9

9:                                                ; preds = %.backedge, %0
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ 0, %0 ], [ %.064.be, %.backedge ]
  %.060 = phi i64 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i64 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.056 = phi i32 [ undef, %0 ], [ %.056.be, %.backedge ]
  %.0 = phi i32 [ -570240746, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -570240746, label %10
    i32 -1730054638, label %14
    i32 -1564007081, label %19
    i32 1461865918, label %21
    i32 -999012474, label %27
    i32 -625422157, label %37
    i32 -1928833030, label %49
    i32 -72776402, label %51
    i32 1243053831, label %61
    i32 470474694, label %80
    i32 1122151279, label %82
    i32 -1081842615, label %83
    i32 1430468150, label %84
    i32 -1486981234, label %94
    i32 1877149812, label %104
    i32 -310285688, label %105
    i32 -2039775344, label %107
    i32 -896989227, label %109
    i32 -1158280564, label %110
    i32 998164917, label %111
    i32 -1224974437, label %114
    i32 -1346281893, label %120
    i32 991713047, label %122
    i32 299871094, label %124
    i32 -1556070421, label %134
    i32 -1109877124, label %144
    i32 -2046055204, label %145
    i32 645643329, label %155
    i32 1584362235, label %166
    i32 -633951779, label %167
    i32 -1517488306, label %168
    i32 -854181176, label %172
    i32 1818255817, label %182
    i32 850318307, label %193
    i32 2000885104, label %195
    i32 -846642882, label %197
    i32 -213779259, label %211
    i32 1673277760, label %214
    i32 -484915603, label %224
    i32 -370834209, label %238
    i32 -1827481618, label %240
    i32 -707906694, label %245
    i32 -1141058763, label %247
    i32 -434629763, label %257
    i32 818013437, label %271
    i32 -1254607700, label %273
    i32 2106268100, label %275
    i32 -2014150162, label %279
    i32 -1317363948, label %289
    i32 1821288219, label %300
    i32 2137039296, label %301
    i32 -1651637446, label %311
    i32 -1053416530, label %322
    i32 352634414, label %323
    i32 583073266, label %324
    i32 -1632189180, label %325
    i32 -293640334, label %326
    i32 -1723877712, label %328
    i32 736156592, label %330
    i32 -2141977970, label %332
    i32 1485266043, label %333
    i32 1291265096, label %343
    i32 1227886397, label %353
    i32 368609287, label %354
    i32 -356796890, label %355
    i32 -610439783, label %360
    i32 -451308332, label %362
    i32 -511013133, label %363
    i32 1134285650, label %364
    i32 -1326169910, label %365
    i32 248040376, label %366
    i32 -883279409, label %367
    i32 682991236, label %369
    i32 -895225961, label %371
  ]

.backedge:                                        ; preds = %9, %371, %369, %367, %366, %365, %364, %363, %362, %360, %355, %354, %343, %333, %332, %330, %328, %326, %325, %324, %323, %322, %311, %301, %300, %289, %279, %275, %273, %271, %257, %247, %245, %240, %238, %224, %214, %211, %197, %195, %193, %182, %172, %168, %167, %166, %155, %145, %144, %134, %124, %122, %120, %114, %111, %110, %109, %107, %105, %104, %94, %84, %83, %82, %80, %61, %51, %49, %37, %27, %21, %19, %14, %10
  %.072.be = phi i32 [ %.072, %9 ], [ %.072, %371 ], [ %.072, %369 ], [ %.072, %367 ], [ %.072, %366 ], [ %.072, %365 ], [ %.072, %364 ], [ %.072, %363 ], [ %.072, %362 ], [ %.072, %360 ], [ %.072, %355 ], [ %.072, %354 ], [ %.072, %343 ], [ %.072, %333 ], [ %.072, %332 ], [ %.072, %330 ], [ %.072, %328 ], [ %.072, %326 ], [ %.072, %325 ], [ %.072, %324 ], [ %.072, %323 ], [ %.072, %322 ], [ %.072, %311 ], [ %.072, %301 ], [ %.072, %300 ], [ %.072, %289 ], [ %.072, %279 ], [ %.072, %275 ], [ %.072, %273 ], [ %.072, %271 ], [ %.072, %257 ], [ %.072, %247 ], [ %.072, %245 ], [ %.072, %240 ], [ %.072, %238 ], [ %.072, %224 ], [ %.072, %214 ], [ %.072, %211 ], [ %.072, %197 ], [ %.072, %195 ], [ %.072, %193 ], [ %.072, %182 ], [ %.072, %172 ], [ %.072, %168 ], [ %.072, %167 ], [ %.072, %166 ], [ %.072, %155 ], [ %.072, %145 ], [ %.072, %144 ], [ %.072, %134 ], [ %.072, %124 ], [ %.072, %122 ], [ %.072, %120 ], [ %.072, %114 ], [ %.072, %111 ], [ %.072, %110 ], [ %.072, %109 ], [ %.072, %107 ], [ %.072, %105 ], [ %.072, %104 ], [ %.072, %94 ], [ %.072, %84 ], [ %.072, %83 ], [ %.072, %82 ], [ %.072, %80 ], [ %.072, %61 ], [ %.072, %51 ], [ %.072, %49 ], [ %.072, %37 ], [ %.072, %27 ], [ %26, %21 ], [ %.072, %19 ], [ %.072, %14 ], [ %.072, %10 ]
  %.070.be = phi i32 [ %.070, %9 ], [ %.070, %371 ], [ %.070, %369 ], [ %.070, %367 ], [ %.070, %366 ], [ %.070, %365 ], [ %.070, %364 ], [ %.070, %363 ], [ %.070, %362 ], [ %361, %360 ], [ %.070, %355 ], [ %.070, %354 ], [ %.070, %343 ], [ %.070, %333 ], [ %.070, %332 ], [ %.070, %330 ], [ %.070, %328 ], [ %.070, %326 ], [ %.070, %325 ], [ %.070, %324 ], [ %.070, %323 ], [ %.070, %322 ], [ %.070, %311 ], [ %.070, %301 ], [ %.070, %300 ], [ %.070, %289 ], [ %.070, %279 ], [ %.070, %275 ], [ %.070, %273 ], [ %.070, %271 ], [ %.070, %257 ], [ %.070, %247 ], [ %.070, %245 ], [ %.070, %240 ], [ %.070, %238 ], [ %.070, %224 ], [ %.070, %214 ], [ %.070, %211 ], [ %.070, %197 ], [ %.070, %195 ], [ %.070, %193 ], [ %.070, %182 ], [ %.070, %172 ], [ %.070, %168 ], [ %.070, %167 ], [ %.070, %166 ], [ %.070, %155 ], [ %.070, %145 ], [ %.070, %144 ], [ %.070, %134 ], [ %.070, %124 ], [ %.070, %122 ], [ %.070, %120 ], [ %.070, %114 ], [ %.070, %111 ], [ %.070, %110 ], [ %.070, %109 ], [ %.070, %107 ], [ %.070, %105 ], [ %.070, %104 ], [ %.neg78, %94 ], [ %.070, %84 ], [ %.070, %83 ], [ %.070, %82 ], [ %.070, %80 ], [ %.070, %61 ], [ %.070, %51 ], [ %.070, %49 ], [ %.070, %37 ], [ %.070, %27 ], [ 0, %21 ], [ %.070, %19 ], [ %.070, %14 ], [ %.070, %10 ]
  %.068.be = phi i32 [ %.068, %9 ], [ %.068, %371 ], [ %.068, %369 ], [ %.068, %367 ], [ %.068, %366 ], [ %.068, %365 ], [ %.068, %364 ], [ %.neg, %363 ], [ %.068, %362 ], [ %.068, %360 ], [ %.068, %355 ], [ %.068, %354 ], [ %.068, %343 ], [ %.068, %333 ], [ %.068, %332 ], [ %.068, %330 ], [ %.068, %328 ], [ %.068, %326 ], [ %.068, %325 ], [ %.068, %324 ], [ %.068, %323 ], [ %.068, %322 ], [ %.068, %311 ], [ %.068, %301 ], [ %.068, %300 ], [ %.068, %289 ], [ %.068, %279 ], [ %.068, %275 ], [ %.068, %273 ], [ %.068, %271 ], [ %.068, %257 ], [ %.068, %247 ], [ %.068, %245 ], [ %.068, %240 ], [ %.068, %238 ], [ %.068, %224 ], [ %.068, %214 ], [ %.068, %211 ], [ %.068, %197 ], [ %.068, %195 ], [ %.068, %193 ], [ %.068, %182 ], [ %.068, %172 ], [ %.068, %168 ], [ %.068, %167 ], [ %.068, %166 ], [ %156, %155 ], [ %.068, %145 ], [ %.068, %144 ], [ %.068, %134 ], [ %.068, %124 ], [ %.068, %122 ], [ %.068, %120 ], [ %.068, %114 ], [ %.068, %111 ], [ 0, %110 ], [ %.068, %109 ], [ %.068, %107 ], [ %.068, %105 ], [ %.068, %104 ], [ %.068, %94 ], [ %.068, %84 ], [ %.068, %83 ], [ %.068, %82 ], [ %.068, %80 ], [ %.068, %61 ], [ %.068, %51 ], [ %.068, %49 ], [ %.068, %37 ], [ %.068, %27 ], [ %.068, %21 ], [ %.068, %19 ], [ %.068, %14 ], [ %.068, %10 ]
  %.066.be = phi i32 [ %.066, %9 ], [ %.066, %371 ], [ %.066, %369 ], [ %.066, %367 ], [ %.066, %366 ], [ %.066, %365 ], [ %.066, %364 ], [ %.066, %363 ], [ %.066, %362 ], [ %.066, %360 ], [ %.066, %355 ], [ %.066, %354 ], [ %.066, %343 ], [ %.066, %333 ], [ %.066, %332 ], [ %331, %330 ], [ %.066, %328 ], [ %.066, %326 ], [ %.066, %325 ], [ %.066, %324 ], [ %.066, %323 ], [ %.066, %322 ], [ %.066, %311 ], [ %.066, %301 ], [ %.066, %300 ], [ %.066, %289 ], [ %.066, %279 ], [ %.066, %275 ], [ %.066, %273 ], [ %.066, %271 ], [ %.066, %257 ], [ %.066, %247 ], [ %.066, %245 ], [ %.066, %240 ], [ %.066, %238 ], [ %.066, %224 ], [ %.066, %214 ], [ %.066, %211 ], [ %.066, %197 ], [ %.066, %195 ], [ %.066, %193 ], [ %.066, %182 ], [ %.066, %172 ], [ %.066, %168 ], [ 0, %167 ], [ %.066, %166 ], [ %.066, %155 ], [ %.066, %145 ], [ %.066, %144 ], [ %.066, %134 ], [ %.066, %124 ], [ %.066, %122 ], [ %.066, %120 ], [ %.066, %114 ], [ %.066, %111 ], [ %.066, %110 ], [ %.066, %109 ], [ %.066, %107 ], [ %.066, %105 ], [ %.066, %104 ], [ %.066, %94 ], [ %.066, %84 ], [ %.066, %83 ], [ %.066, %82 ], [ %.066, %80 ], [ %.066, %61 ], [ %.066, %51 ], [ %.066, %49 ], [ %.066, %37 ], [ %.066, %27 ], [ %.066, %21 ], [ %.066, %19 ], [ %.066, %14 ], [ %.066, %10 ]
  %.064.be = phi i32 [ %.064, %9 ], [ %.064, %371 ], [ %.064, %369 ], [ %.064, %367 ], [ %.064, %366 ], [ %.064, %365 ], [ %.064, %364 ], [ %.064, %363 ], [ %.064, %362 ], [ %.064, %360 ], [ %.064, %355 ], [ %.064, %354 ], [ %.064, %343 ], [ %.064, %333 ], [ %.064, %332 ], [ %.064, %330 ], [ %.064, %328 ], [ %.064, %326 ], [ %.064, %325 ], [ %.064, %324 ], [ %.064, %323 ], [ %.064, %322 ], [ %.064, %311 ], [ %.064, %301 ], [ %.064, %300 ], [ %.064, %289 ], [ %.064, %279 ], [ %.064, %275 ], [ %.064, %273 ], [ %.064, %271 ], [ %.064, %257 ], [ %.064, %247 ], [ %.064, %245 ], [ %.064, %240 ], [ %.064, %238 ], [ %.064, %224 ], [ %.064, %214 ], [ %.064, %211 ], [ %.064, %197 ], [ %.064, %195 ], [ %.064, %193 ], [ %.064, %182 ], [ %.064, %172 ], [ %.064, %168 ], [ %.064, %167 ], [ %.064, %166 ], [ %.064, %155 ], [ %.064, %145 ], [ %.064, %144 ], [ %.064, %134 ], [ %.064, %124 ], [ %.064, %122 ], [ %.064, %120 ], [ %.064, %114 ], [ %.064, %111 ], [ %.064, %110 ], [ %.064, %109 ], [ %.064, %107 ], [ %.064, %105 ], [ %.064, %104 ], [ %.064, %94 ], [ %.064, %84 ], [ %.064, %83 ], [ %.064, %82 ], [ %.064, %80 ], [ %.064, %61 ], [ %.064, %51 ], [ %.064, %49 ], [ %.064, %37 ], [ %.064, %27 ], [ %.064, %21 ], [ %20, %19 ], [ %.064, %14 ], [ %.064, %10 ]
  %.060.be = phi i64 [ %.060, %9 ], [ %.060, %371 ], [ %.060, %369 ], [ %.060, %367 ], [ %.060, %366 ], [ %.060, %365 ], [ %.060, %364 ], [ %.060, %363 ], [ %.060, %362 ], [ %.060, %360 ], [ %.060, %355 ], [ %.060, %354 ], [ %.060, %343 ], [ %.060, %333 ], [ %.060, %332 ], [ %.060, %330 ], [ %.060, %328 ], [ %.060, %326 ], [ %.060, %325 ], [ %.060, %324 ], [ %.060, %323 ], [ %.060, %322 ], [ %.060, %311 ], [ %.060, %301 ], [ %.060, %300 ], [ %.060, %289 ], [ %.060, %279 ], [ %.060, %275 ], [ %.060, %273 ], [ %.060, %271 ], [ %.060, %257 ], [ %.060, %247 ], [ %.060, %245 ], [ %.060, %240 ], [ %.060, %238 ], [ %.060, %224 ], [ %.060, %214 ], [ %.060, %211 ], [ %207, %197 ], [ %.060, %195 ], [ %.060, %193 ], [ %.060, %182 ], [ %.060, %172 ], [ %.060, %168 ], [ %.060, %167 ], [ %.060, %166 ], [ %.060, %155 ], [ %.060, %145 ], [ %.060, %144 ], [ %.060, %134 ], [ %.060, %124 ], [ %.060, %122 ], [ %.060, %120 ], [ %.060, %114 ], [ %.060, %111 ], [ %.060, %110 ], [ %.060, %109 ], [ %.060, %107 ], [ %.060, %105 ], [ %.060, %104 ], [ %.060, %94 ], [ %.060, %84 ], [ %.060, %83 ], [ %.060, %82 ], [ %.060, %80 ], [ %.060, %61 ], [ %.060, %51 ], [ %.060, %49 ], [ %.060, %37 ], [ %.060, %27 ], [ %.060, %21 ], [ %.060, %19 ], [ %.060, %14 ], [ %.060, %10 ]
  %.058.be = phi i64 [ %.058, %9 ], [ %.058, %371 ], [ %.058, %369 ], [ %.058, %367 ], [ %.058, %366 ], [ %.058, %365 ], [ %.058, %364 ], [ %.058, %363 ], [ %.058, %362 ], [ %.058, %360 ], [ %.058, %355 ], [ %.058, %354 ], [ %.058, %343 ], [ %.058, %333 ], [ %.058, %332 ], [ %.058, %330 ], [ %.058, %328 ], [ %.058, %326 ], [ %.058, %325 ], [ %.058, %324 ], [ %.058, %323 ], [ %.058, %322 ], [ %.058, %311 ], [ %.058, %301 ], [ %.058, %300 ], [ %.058, %289 ], [ %.058, %279 ], [ %.058, %275 ], [ %.058, %273 ], [ %.058, %271 ], [ %.058, %257 ], [ %.058, %247 ], [ %.058, %245 ], [ %.058, %240 ], [ %.058, %238 ], [ %.058, %224 ], [ %.058, %214 ], [ %.058, %211 ], [ %210, %197 ], [ %.058, %195 ], [ %.058, %193 ], [ %.058, %182 ], [ %.058, %172 ], [ %.058, %168 ], [ %.058, %167 ], [ %.058, %166 ], [ %.058, %155 ], [ %.058, %145 ], [ %.058, %144 ], [ %.058, %134 ], [ %.058, %124 ], [ %.058, %122 ], [ %.058, %120 ], [ %.058, %114 ], [ %.058, %111 ], [ %.058, %110 ], [ %.058, %109 ], [ %.058, %107 ], [ %.058, %105 ], [ %.058, %104 ], [ %.058, %94 ], [ %.058, %84 ], [ %.058, %83 ], [ %.058, %82 ], [ %.058, %80 ], [ %.058, %61 ], [ %.058, %51 ], [ %.058, %49 ], [ %.058, %37 ], [ %.058, %27 ], [ %.058, %21 ], [ %.058, %19 ], [ %.058, %14 ], [ %.058, %10 ]
  %.056.be = phi i32 [ %.056, %9 ], [ %.056, %371 ], [ %.056, %369 ], [ %.056, %367 ], [ %.056, %366 ], [ %.056, %365 ], [ %.056, %364 ], [ %.056, %363 ], [ %.056, %362 ], [ %.056, %360 ], [ %.056, %355 ], [ %.056, %354 ], [ %.056, %343 ], [ %.056, %333 ], [ %.056, %332 ], [ %.056, %330 ], [ %.056, %328 ], [ %327, %326 ], [ %.056, %325 ], [ %.056, %324 ], [ %.056, %323 ], [ %.056, %322 ], [ %.056, %311 ], [ %.056, %301 ], [ %.056, %300 ], [ %.056, %289 ], [ %.056, %279 ], [ %.056, %275 ], [ %.056, %273 ], [ %.056, %271 ], [ %.056, %257 ], [ %.056, %247 ], [ %.056, %245 ], [ %.056, %240 ], [ %.056, %238 ], [ %.056, %224 ], [ %.056, %214 ], [ %.056, %211 ], [ 0, %197 ], [ %.056, %195 ], [ %.056, %193 ], [ %.056, %182 ], [ %.056, %172 ], [ %.056, %168 ], [ %.056, %167 ], [ %.056, %166 ], [ %.056, %155 ], [ %.056, %145 ], [ %.056, %144 ], [ %.056, %134 ], [ %.056, %124 ], [ %.056, %122 ], [ %.056, %120 ], [ %.056, %114 ], [ %.056, %111 ], [ %.056, %110 ], [ %.056, %109 ], [ %.056, %107 ], [ %.056, %105 ], [ %.056, %104 ], [ %.056, %94 ], [ %.056, %84 ], [ %.056, %83 ], [ %.056, %82 ], [ %.056, %80 ], [ %.056, %61 ], [ %.056, %51 ], [ %.056, %49 ], [ %.056, %37 ], [ %.056, %27 ], [ %.056, %21 ], [ %.056, %19 ], [ %.056, %14 ], [ %.056, %10 ]
  %.0.be = phi i32 [ %.0, %9 ], [ 1291265096, %371 ], [ -1651637446, %369 ], [ -1317363948, %367 ], [ -434629763, %366 ], [ -484915603, %365 ], [ 1818255817, %364 ], [ 645643329, %363 ], [ -1556070421, %362 ], [ -1486981234, %360 ], [ 1243053831, %355 ], [ -625422157, %354 ], [ %352, %343 ], [ %342, %333 ], [ 1485266043, %332 ], [ -1517488306, %330 ], [ 736156592, %328 ], [ -213779259, %326 ], [ -293640334, %325 ], [ -1632189180, %324 ], [ 583073266, %323 ], [ 352634414, %322 ], [ %321, %311 ], [ %310, %301 ], [ 352634414, %300 ], [ %299, %289 ], [ %288, %279 ], [ %278, %275 ], [ 583073266, %273 ], [ %272, %271 ], [ %270, %257 ], [ %256, %247 ], [ -1632189180, %245 ], [ %244, %240 ], [ %239, %238 ], [ %237, %224 ], [ %223, %214 ], [ %213, %211 ], [ -213779259, %197 ], [ -846642882, %195 ], [ %194, %193 ], [ %192, %182 ], [ %181, %172 ], [ %171, %168 ], [ -1517488306, %167 ], [ 998164917, %166 ], [ %165, %155 ], [ %154, %145 ], [ -2046055204, %144 ], [ %143, %134 ], [ %133, %124 ], [ 299871094, %122 ], [ 299871094, %120 ], [ %119, %114 ], [ %113, %111 ], [ 998164917, %110 ], [ -1158280564, %109 ], [ -1158280564, %107 ], [ %106, %105 ], [ -999012474, %104 ], [ %103, %94 ], [ %93, %84 ], [ 1430468150, %83 ], [ 1485266043, %82 ], [ %81, %80 ], [ %79, %61 ], [ %60, %51 ], [ %50, %49 ], [ %48, %37 ], [ %36, %27 ], [ -999012474, %21 ], [ -570240746, %19 ], [ -1564007081, %14 ], [ %13, %10 ]
  br label %9

10:                                               ; preds = %9
  %11 = load i32, i32* %7, align 4
  %12 = icmp slt i32 %.064, %11
  %13 = select i1 %12, i32 -1730054638, i32 1461865918
  br label %.backedge

14:                                               ; preds = %9
  %15 = sext i32 %.064 to i64
  %16 = getelementptr inbounds [1024 x i32], [1024 x i32]* @x, i64 0, i64 %15
  %17 = getelementptr inbounds [1024 x i32], [1024 x i32]* @y, i64 0, i64 %15
  %18 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %16, i32* nonnull %17)
  br label %.backedge

19:                                               ; preds = %9
  %20 = add i32 %.064, 1
  br label %.backedge

21:                                               ; preds = %9
  %22 = load i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @x, i64 0, i64 0), align 16
  %23 = load i32, i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @y, i64 0, i64 0), align 16
  %24 = add i32 %23, %22
  %25 = and i32 %24, 1
  %26 = xor i32 %25, 1
  br label %.backedge

27:                                               ; preds = %9
  %28 = load i32, i32* @x.6, align 4
  %29 = load i32, i32* @y.7, align 4
  %30 = add i32 %28, -1
  %31 = mul i32 %30, %28
  %32 = and i32 %31, 1
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %34, %33
  %36 = select i1 %35, i32 -625422157, i32 368609287
  br label %.backedge

37:                                               ; preds = %9
  %38 = load i32, i32* %7, align 4
  %39 = icmp slt i32 %.070, %38
  store i1 %39, i1* %6, align 1
  %40 = load i32, i32* @x.6, align 4
  %41 = load i32, i32* @y.7, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 -1928833030, i32 368609287
  br label %.backedge

49:                                               ; preds = %9
  %.0..0..0. = load volatile i1, i1* %6, align 1
  %50 = select i1 %.0..0..0., i32 -72776402, i32 -310285688
  br label %.backedge

51:                                               ; preds = %9
  %52 = load i32, i32* @x.6, align 4
  %53 = load i32, i32* @y.7, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 1243053831, i32 -356796890
  br label %.backedge

61:                                               ; preds = %9
  %62 = sext i32 %.070 to i64
  %63 = getelementptr inbounds [1024 x i32], [1024 x i32]* @x, i64 0, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = sub i32 %64, %.072
  store i32 %65, i32* %63, align 4
  %66 = getelementptr inbounds [1024 x i32], [1024 x i32]* @y, i64 0, i64 %62
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  store i1 %70, i1* %5, align 1
  %71 = load i32, i32* @x.6, align 4
  %72 = load i32, i32* @y.7, align 4
  %73 = add i32 %71, -1
  %74 = mul i32 %73, %71
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %77, %76
  %79 = select i1 %78, i32 470474694, i32 -356796890
  br label %.backedge

80:                                               ; preds = %9
  %.0..0..0.51 = load volatile i1, i1* %5, align 1
  %81 = select i1 %.0..0..0.51, i32 1122151279, i32 -1081842615
  br label %.backedge

82:                                               ; preds = %9
  %puts81 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @str.1, i64 0, i64 0))
  br label %.backedge

83:                                               ; preds = %9
  br label %.backedge

84:                                               ; preds = %9
  %85 = load i32, i32* @x.6, align 4
  %86 = load i32, i32* @y.7, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 -1486981234, i32 -610439783
  br label %.backedge

94:                                               ; preds = %9
  %.neg78 = add i32 %.070, 1
  %95 = load i32, i32* @x.6, align 4
  %96 = load i32, i32* @y.7, align 4
  %97 = add i32 %95, -1
  %98 = mul i32 %97, %95
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %101, %100
  %103 = select i1 %102, i32 1877149812, i32 -610439783
  br label %.backedge

104:                                              ; preds = %9
  br label %.backedge

105:                                              ; preds = %9
  %.not77 = icmp eq i32 %.072, 0
  %106 = select i1 %.not77, i32 -896989227, i32 -2039775344
  br label %.backedge

107:                                              ; preds = %9
  %108 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  br label %.backedge

109:                                              ; preds = %9
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @str, i64 0, i64 0))
  br label %.backedge

110:                                              ; preds = %9
  br label %.backedge

111:                                              ; preds = %9
  %112 = icmp slt i32 %.068, 35
  %113 = select i1 %112, i32 -1224974437, i32 -633951779
  br label %.backedge

114:                                              ; preds = %9
  %115 = zext i32 %.068 to i64
  %116 = shl nuw i64 1, %115
  %117 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i64 %116)
  %118 = icmp eq i32 %.068, 34
  %119 = select i1 %118, i32 -1346281893, i32 991713047
  br label %.backedge

120:                                              ; preds = %9
  %121 = call i32 @putchar(i32 10)
  br label %.backedge

122:                                              ; preds = %9
  %123 = call i32 @putchar(i32 32)
  br label %.backedge

124:                                              ; preds = %9
  %125 = load i32, i32* @x.6, align 4
  %126 = load i32, i32* @y.7, align 4
  %127 = add i32 %125, -1
  %128 = mul i32 %127, %125
  %129 = and i32 %128, 1
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %131, %130
  %133 = select i1 %132, i32 -1556070421, i32 -451308332
  br label %.backedge

134:                                              ; preds = %9
  %135 = load i32, i32* @x.6, align 4
  %136 = load i32, i32* @y.7, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 -1109877124, i32 -451308332
  br label %.backedge

144:                                              ; preds = %9
  br label %.backedge

145:                                              ; preds = %9
  %146 = load i32, i32* @x.6, align 4
  %147 = load i32, i32* @y.7, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 645643329, i32 -511013133
  br label %.backedge

155:                                              ; preds = %9
  %156 = add i32 %.068, 1
  %157 = load i32, i32* @x.6, align 4
  %158 = load i32, i32* @y.7, align 4
  %159 = add i32 %157, -1
  %160 = mul i32 %159, %157
  %161 = and i32 %160, 1
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %163, %162
  %165 = select i1 %164, i32 1584362235, i32 -511013133
  br label %.backedge

166:                                              ; preds = %9
  br label %.backedge

167:                                              ; preds = %9
  br label %.backedge

168:                                              ; preds = %9
  %169 = load i32, i32* %7, align 4
  %170 = icmp slt i32 %.066, %169
  %171 = select i1 %170, i32 -854181176, i32 -2141977970
  br label %.backedge

172:                                              ; preds = %9
  %173 = load i32, i32* @x.6, align 4
  %174 = load i32, i32* @y.7, align 4
  %175 = add i32 %173, -1
  %176 = mul i32 %175, %173
  %177 = and i32 %176, 1
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %179, %178
  %181 = select i1 %180, i32 1818255817, i32 1134285650
  br label %.backedge

182:                                              ; preds = %9
  %183 = icmp ne i32 %.072, 0
  store i1 %183, i1* %4, align 1
  %184 = load i32, i32* @x.6, align 4
  %185 = load i32, i32* @y.7, align 4
  %186 = add i32 %184, -1
  %187 = mul i32 %186, %184
  %188 = and i32 %187, 1
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %190, %189
  %192 = select i1 %191, i32 850318307, i32 1134285650
  br label %.backedge

193:                                              ; preds = %9
  %.0..0..0.52 = load volatile i1, i1* %4, align 1
  %194 = select i1 %.0..0..0.52, i32 2000885104, i32 -846642882
  br label %.backedge

195:                                              ; preds = %9
  %196 = call i32 @putchar(i32 82)
  br label %.backedge

197:                                              ; preds = %9
  %198 = sext i32 %.066 to i64
  %199 = getelementptr inbounds [1024 x i32], [1024 x i32]* @x, i64 0, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [1024 x i32], [1024 x i32]* @y, i64 0, i64 %198
  %203 = load i32, i32* %202, align 4
  %204 = sext i32 %203 to i64
  %205 = sub nsw i64 34359738367, %201
  %206 = add nsw i64 %205, %204
  %207 = lshr i64 %206, 1
  %208 = add nsw i64 %201, %204
  %209 = sub nsw i64 34359738367, %208
  %210 = lshr i64 %209, 1
  br label %.backedge

211:                                              ; preds = %9
  %212 = icmp slt i32 %.056, 35
  %213 = select i1 %212, i32 1673277760, i32 -1723877712
  br label %.backedge

214:                                              ; preds = %9
  %215 = load i32, i32* @x.6, align 4
  %216 = load i32, i32* @y.7, align 4
  %217 = add i32 %215, -1
  %218 = mul i32 %217, %215
  %219 = and i32 %218, 1
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %221, %220
  %223 = select i1 %222, i32 -484915603, i32 -1326169910
  br label %.backedge

224:                                              ; preds = %9
  %225 = zext i32 %.056 to i64
  %226 = shl nuw i64 1, %225
  %227 = and i64 %226, %.060
  %228 = icmp ne i64 %227, 0
  store i1 %228, i1* %3, align 1
  %229 = load i32, i32* @x.6, align 4
  %230 = load i32, i32* @y.7, align 4
  %231 = add i32 %229, -1
  %232 = mul i32 %231, %229
  %233 = and i32 %232, 1
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %235, %234
  %237 = select i1 %236, i32 -370834209, i32 -1326169910
  br label %.backedge

238:                                              ; preds = %9
  %.0..0..0.53 = load volatile i1, i1* %3, align 1
  %239 = select i1 %.0..0..0.53, i32 -1827481618, i32 -1141058763
  br label %.backedge

240:                                              ; preds = %9
  %241 = zext i32 %.056 to i64
  %242 = shl nuw i64 1, %241
  %243 = and i64 %242, %.058
  %.not74 = icmp eq i64 %243, 0
  %244 = select i1 %.not74, i32 -1141058763, i32 -707906694
  br label %.backedge

245:                                              ; preds = %9
  %246 = call i32 @putchar(i32 76)
  br label %.backedge

247:                                              ; preds = %9
  %248 = load i32, i32* @x.6, align 4
  %249 = load i32, i32* @y.7, align 4
  %250 = add i32 %248, -1
  %251 = mul i32 %250, %248
  %252 = and i32 %251, 1
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %254, %253
  %256 = select i1 %255, i32 -434629763, i32 248040376
  br label %.backedge

257:                                              ; preds = %9
  %258 = zext i32 %.056 to i64
  %259 = shl nuw i64 1, %258
  %260 = and i64 %259, %.060
  %261 = icmp ne i64 %260, 0
  store i1 %261, i1* %2, align 1
  %262 = load i32, i32* @x.6, align 4
  %263 = load i32, i32* @y.7, align 4
  %264 = add i32 %262, -1
  %265 = mul i32 %264, %262
  %266 = and i32 %265, 1
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %268, %267
  %270 = select i1 %269, i32 818013437, i32 248040376
  br label %.backedge

271:                                              ; preds = %9
  %.0..0..0.54 = load volatile i1, i1* %2, align 1
  %272 = select i1 %.0..0..0.54, i32 -1254607700, i32 2106268100
  br label %.backedge

273:                                              ; preds = %9
  %274 = call i32 @putchar(i32 85)
  br label %.backedge

275:                                              ; preds = %9
  %276 = zext i32 %.056 to i64
  %277 = shl nuw i64 1, %276
  %.demorgan = and i64 %277, %.058
  %.not = icmp eq i64 %.demorgan, 0
  %278 = select i1 %.not, i32 2137039296, i32 -2014150162
  br label %.backedge

279:                                              ; preds = %9
  %280 = load i32, i32* @x.6, align 4
  %281 = load i32, i32* @y.7, align 4
  %282 = add i32 %280, -1
  %283 = mul i32 %282, %280
  %284 = and i32 %283, 1
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %286, %285
  %288 = select i1 %287, i32 -1317363948, i32 -883279409
  br label %.backedge

289:                                              ; preds = %9
  %290 = call i32 @putchar(i32 68)
  %291 = load i32, i32* @x.6, align 4
  %292 = load i32, i32* @y.7, align 4
  %293 = add i32 %291, -1
  %294 = mul i32 %293, %291
  %295 = and i32 %294, 1
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %297, %296
  %299 = select i1 %298, i32 1821288219, i32 -883279409
  br label %.backedge

300:                                              ; preds = %9
  br label %.backedge

301:                                              ; preds = %9
  %302 = load i32, i32* @x.6, align 4
  %303 = load i32, i32* @y.7, align 4
  %304 = add i32 %302, -1
  %305 = mul i32 %304, %302
  %306 = and i32 %305, 1
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %308, %307
  %310 = select i1 %309, i32 -1651637446, i32 682991236
  br label %.backedge

311:                                              ; preds = %9
  %312 = call i32 @putchar(i32 82)
  %313 = load i32, i32* @x.6, align 4
  %314 = load i32, i32* @y.7, align 4
  %315 = add i32 %313, -1
  %316 = mul i32 %315, %313
  %317 = and i32 %316, 1
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %319, %318
  %321 = select i1 %320, i32 -1053416530, i32 682991236
  br label %.backedge

322:                                              ; preds = %9
  br label %.backedge

323:                                              ; preds = %9
  br label %.backedge

324:                                              ; preds = %9
  br label %.backedge

325:                                              ; preds = %9
  br label %.backedge

326:                                              ; preds = %9
  %327 = add i32 %.056, 1
  br label %.backedge

328:                                              ; preds = %9
  %329 = call i32 @putchar(i32 10)
  br label %.backedge

330:                                              ; preds = %9
  %331 = add i32 %.066, 1
  br label %.backedge

332:                                              ; preds = %9
  br label %.backedge

333:                                              ; preds = %9
  %334 = load i32, i32* @x.6, align 4
  %335 = load i32, i32* @y.7, align 4
  %336 = add i32 %334, -1
  %337 = mul i32 %336, %334
  %338 = and i32 %337, 1
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %340, %339
  %342 = select i1 %341, i32 1291265096, i32 -895225961
  br label %.backedge

343:                                              ; preds = %9
  store i32 0, i32* %1, align 4
  %344 = load i32, i32* @x.6, align 4
  %345 = load i32, i32* @y.7, align 4
  %346 = add i32 %344, -1
  %347 = mul i32 %346, %344
  %348 = and i32 %347, 1
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %350, %349
  %352 = select i1 %351, i32 1227886397, i32 -895225961
  br label %.backedge

353:                                              ; preds = %9
  %.0..0..0.55 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.55

354:                                              ; preds = %9
  br label %.backedge

355:                                              ; preds = %9
  %356 = sext i32 %.070 to i64
  %357 = getelementptr inbounds [1024 x i32], [1024 x i32]* @x, i64 0, i64 %356
  %358 = load i32, i32* %357, align 4
  %359 = sub i32 %358, %.072
  store i32 %359, i32* %357, align 4
  br label %.backedge

360:                                              ; preds = %9
  %361 = add i32 %.070, 1
  br label %.backedge

362:                                              ; preds = %9
  br label %.backedge

363:                                              ; preds = %9
  %.neg = add i32 %.068, 1
  br label %.backedge

364:                                              ; preds = %9
  br label %.backedge

365:                                              ; preds = %9
  br label %.backedge

366:                                              ; preds = %9
  br label %.backedge

367:                                              ; preds = %9
  %368 = call i32 @putchar(i32 68)
  br label %.backedge

369:                                              ; preds = %9
  %370 = call i32 @putchar(i32 82)
  br label %.backedge

371:                                              ; preds = %9
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #2

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
