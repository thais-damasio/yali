; ModuleID = 'build_ollvm/programs/p03247/s304578093.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s304578093.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

$_Z8read_intv = comdat any

$_ZSt3absx = comdat any

$_Z4readIiEvRT_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@ibuf = global [262144 x i8] zeroinitializer, align 16
@iS = local_unnamed_addr global i8* null, align 8
@iT = local_unnamed_addr global i8* null, align 8
@x = local_unnamed_addr global [1010 x i32] zeroinitializer, align 16
@y = local_unnamed_addr global [1010 x i32] zeroinitializer, align 16
@len = local_unnamed_addr global [33 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d\0A1\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@stdin = external local_unnamed_addr global %struct._IO_FILE*, align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s304578093.cpp, i8* null }]
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0
@x.15 = common local_unnamed_addr global i32 0
@y.16 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #9
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca [40 x i8], align 16
  %5 = tail call i32 @_Z8read_intv()
  %6 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i64 0, i64 1
  %7 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i64 0, i64 0
  br label %8

8:                                                ; preds = %.backedge, %0
  %.084 = phi i32 [ 1, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i32 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i64 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i64 [ undef, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i64 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i64 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.0 = phi i32 [ -881129488, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -881129488, label %9
    i32 -1144242473, label %19
    i32 -877494937, label %30
    i32 -1448142110, label %32
    i32 1979310645, label %38
    i32 1435613722, label %40
    i32 -1324152976, label %50
    i32 1865733251, label %64
    i32 1954509913, label %65
    i32 -613816567, label %67
    i32 1176766842, label %76
    i32 99011766, label %78
    i32 273153506, label %88
    i32 1657667734, label %98
    i32 -1892691442, label %99
    i32 -1742588659, label %101
    i32 -125563838, label %105
    i32 1394630712, label %106
    i32 -1716694639, label %116
    i32 1808420558, label %127
    i32 982535006, label %129
    i32 -1069821097, label %134
    i32 256622052, label %136
    i32 1421083688, label %137
    i32 484220250, label %147
    i32 1013290129, label %157
    i32 1670989044, label %158
    i32 -1376252335, label %161
    i32 -1649942982, label %167
    i32 -1152988302, label %169
    i32 1606944098, label %179
    i32 1064062072, label %189
    i32 -1043478285, label %190
    i32 575182813, label %191
    i32 -268366740, label %193
    i32 852683627, label %203
    i32 -356392878, label %213
    i32 -425397348, label %214
    i32 668574477, label %224
    i32 -1908481229, label %235
    i32 -413877013, label %237
    i32 2008751649, label %251
    i32 -195170083, label %254
    i32 651648345, label %261
    i32 1178139882, label %271
    i32 -584883698, label %287
    i32 2107549975, label %288
    i32 632877098, label %289
    i32 1404498091, label %292
    i32 965074290, label %302
    i32 -281125732, label %318
    i32 -1681132725, label %319
    i32 -1407607785, label %326
    i32 -1350898371, label %327
    i32 -1079186747, label %337
    i32 -1487547394, label %347
    i32 -2094595516, label %348
    i32 877915830, label %349
    i32 -2031488132, label %350
    i32 -1207181119, label %352
    i32 -703955790, label %362
    i32 1799648221, label %372
    i32 1954848884, label %373
    i32 1910061116, label %374
    i32 1087666875, label %375
    i32 52047481, label %380
    i32 -1903425436, label %381
    i32 -1846806287, label %382
    i32 282721470, label %383
    i32 197023990, label %384
    i32 555824284, label %385
    i32 -2017465233, label %386
    i32 2019900313, label %393
    i32 -313221042, label %400
    i32 -1031212964, label %401
  ]

.backedge:                                        ; preds = %8, %401, %400, %393, %386, %385, %384, %383, %382, %381, %380, %375, %374, %372, %362, %352, %350, %349, %348, %347, %337, %327, %326, %319, %318, %302, %292, %289, %288, %287, %271, %261, %254, %251, %237, %235, %224, %214, %213, %203, %193, %191, %190, %189, %179, %169, %167, %161, %158, %157, %147, %137, %136, %134, %129, %127, %116, %106, %105, %101, %99, %98, %88, %78, %76, %67, %65, %64, %50, %40, %38, %32, %30, %19, %9
  %.084.be = phi i32 [ %.084, %8 ], [ %.084, %401 ], [ %.084, %400 ], [ %.084, %393 ], [ %.084, %386 ], [ %.084, %385 ], [ %.084, %384 ], [ %.084, %383 ], [ %.084, %382 ], [ %.084, %381 ], [ %.084, %380 ], [ %.084, %375 ], [ %.084, %374 ], [ %.084, %372 ], [ %.084, %362 ], [ %.084, %352 ], [ %.084, %350 ], [ %.084, %349 ], [ %.084, %348 ], [ %.084, %347 ], [ %.084, %337 ], [ %.084, %327 ], [ %.084, %326 ], [ %.084, %319 ], [ %.084, %318 ], [ %.084, %302 ], [ %.084, %292 ], [ %.084, %289 ], [ %.084, %288 ], [ %.084, %287 ], [ %.084, %271 ], [ %.084, %261 ], [ %.084, %254 ], [ %.084, %251 ], [ %.084, %237 ], [ %.084, %235 ], [ %.084, %224 ], [ %.084, %214 ], [ %.084, %213 ], [ %.084, %203 ], [ %.084, %193 ], [ %.084, %191 ], [ %.084, %190 ], [ %.084, %189 ], [ %.084, %179 ], [ %.084, %169 ], [ %.084, %167 ], [ %.084, %161 ], [ %.084, %158 ], [ %.084, %157 ], [ %.084, %147 ], [ %.084, %137 ], [ %.084, %136 ], [ %.084, %134 ], [ %.084, %129 ], [ %.084, %127 ], [ %.084, %116 ], [ %.084, %106 ], [ %.084, %105 ], [ %.084, %101 ], [ %.084, %99 ], [ %.084, %98 ], [ %.084, %88 ], [ %.084, %78 ], [ %.084, %76 ], [ %.084, %67 ], [ %.084, %65 ], [ %.084, %64 ], [ %.084, %50 ], [ %.084, %40 ], [ %39, %38 ], [ %.084, %32 ], [ %.084, %30 ], [ %.084, %19 ], [ %.084, %9 ]
  %.082.be = phi i32 [ %.082, %8 ], [ %.082, %401 ], [ %.082, %400 ], [ %.082, %393 ], [ %.082, %386 ], [ %.082, %385 ], [ %.082, %384 ], [ %.082, %383 ], [ %.082, %382 ], [ %.082, %381 ], [ %.082, %380 ], [ %379, %375 ], [ %.082, %374 ], [ %.082, %372 ], [ %.082, %362 ], [ %.082, %352 ], [ %.082, %350 ], [ %.082, %349 ], [ %.082, %348 ], [ %.082, %347 ], [ %.082, %337 ], [ %.082, %327 ], [ %.082, %326 ], [ %.082, %319 ], [ %.082, %318 ], [ %.082, %302 ], [ %.082, %292 ], [ %.082, %289 ], [ %.082, %288 ], [ %.082, %287 ], [ %.082, %271 ], [ %.082, %261 ], [ %.082, %254 ], [ %.082, %251 ], [ %.082, %237 ], [ %.082, %235 ], [ %.082, %224 ], [ %.082, %214 ], [ %.082, %213 ], [ %.082, %203 ], [ %.082, %193 ], [ %.082, %191 ], [ %.082, %190 ], [ %.082, %189 ], [ %.082, %179 ], [ %.082, %169 ], [ %.082, %167 ], [ %.082, %161 ], [ %.082, %158 ], [ %.082, %157 ], [ %.082, %147 ], [ %.082, %137 ], [ %.082, %136 ], [ %.082, %134 ], [ %.082, %129 ], [ %.082, %127 ], [ %.082, %116 ], [ %.082, %106 ], [ %.082, %105 ], [ %.082, %101 ], [ %.082, %99 ], [ %.082, %98 ], [ %.082, %88 ], [ %.082, %78 ], [ %.082, %76 ], [ %.082, %67 ], [ %.082, %65 ], [ %.082, %64 ], [ %54, %50 ], [ %.082, %40 ], [ %.082, %38 ], [ %.082, %32 ], [ %.082, %30 ], [ %.082, %19 ], [ %.082, %9 ]
  %.080.be = phi i32 [ %.080, %8 ], [ %.080, %401 ], [ %.080, %400 ], [ %.080, %393 ], [ %.080, %386 ], [ %.080, %385 ], [ %.080, %384 ], [ %.080, %383 ], [ %.080, %382 ], [ %.080, %381 ], [ %.080, %380 ], [ 1, %375 ], [ %.080, %374 ], [ %.080, %372 ], [ %.080, %362 ], [ %.080, %352 ], [ %.080, %350 ], [ %.080, %349 ], [ %.080, %348 ], [ %.080, %347 ], [ %.080, %337 ], [ %.080, %327 ], [ %.080, %326 ], [ %.080, %319 ], [ %.080, %318 ], [ %.080, %302 ], [ %.080, %292 ], [ %.080, %289 ], [ %.080, %288 ], [ %.080, %287 ], [ %.080, %271 ], [ %.080, %261 ], [ %.080, %254 ], [ %.080, %251 ], [ %.080, %237 ], [ %.080, %235 ], [ %.080, %224 ], [ %.080, %214 ], [ %.080, %213 ], [ %.080, %203 ], [ %.080, %193 ], [ %.080, %191 ], [ %.080, %190 ], [ %.080, %189 ], [ %.080, %179 ], [ %.080, %169 ], [ %.080, %167 ], [ %.080, %161 ], [ %.080, %158 ], [ %.080, %157 ], [ %.080, %147 ], [ %.080, %137 ], [ %.080, %136 ], [ %.080, %134 ], [ %.080, %129 ], [ %.080, %127 ], [ %.080, %116 ], [ %.080, %106 ], [ %.080, %105 ], [ %.080, %101 ], [ %100, %99 ], [ %.080, %98 ], [ %.080, %88 ], [ %.080, %78 ], [ %.080, %76 ], [ %.080, %67 ], [ %.080, %65 ], [ %.080, %64 ], [ 1, %50 ], [ %.080, %40 ], [ %.080, %38 ], [ %.080, %32 ], [ %.080, %30 ], [ %.080, %19 ], [ %.080, %9 ]
  %.078.be = phi i32 [ %.078, %8 ], [ %.078, %401 ], [ %.078, %400 ], [ %.078, %393 ], [ %.078, %386 ], [ %.078, %385 ], [ %.078, %384 ], [ %.078, %383 ], [ %.078, %382 ], [ %.078, %381 ], [ %.078, %380 ], [ %.078, %375 ], [ %.078, %374 ], [ %.078, %372 ], [ %.078, %362 ], [ %.078, %352 ], [ %.078, %350 ], [ %.078, %349 ], [ %.078, %348 ], [ %.078, %347 ], [ %.078, %337 ], [ %.078, %327 ], [ %.078, %326 ], [ %.078, %319 ], [ %.078, %318 ], [ %.078, %302 ], [ %.078, %292 ], [ %.078, %289 ], [ %.078, %288 ], [ %.078, %287 ], [ %.078, %271 ], [ %.078, %261 ], [ %.078, %254 ], [ %.078, %251 ], [ %.078, %237 ], [ %.078, %235 ], [ %.078, %224 ], [ %.078, %214 ], [ %.078, %213 ], [ %.078, %203 ], [ %.078, %193 ], [ %.078, %191 ], [ %.078, %190 ], [ %.078, %189 ], [ %.078, %179 ], [ %.078, %169 ], [ %.078, %167 ], [ %163, %161 ], [ %.078, %158 ], [ %.078, %157 ], [ %.078, %147 ], [ %.078, %137 ], [ %.078, %136 ], [ %.078, %134 ], [ %.neg90, %129 ], [ %.078, %127 ], [ %.078, %116 ], [ %.078, %106 ], [ %.078, %105 ], [ 1, %101 ], [ %.078, %99 ], [ %.078, %98 ], [ %.078, %88 ], [ %.078, %78 ], [ %.078, %76 ], [ %.078, %67 ], [ %.078, %65 ], [ %.078, %64 ], [ %.078, %50 ], [ %.078, %40 ], [ %.078, %38 ], [ %.078, %32 ], [ %.078, %30 ], [ %.078, %19 ], [ %.078, %9 ]
  %.076.be = phi i32 [ %.076, %8 ], [ %.076, %401 ], [ %.076, %400 ], [ %.076, %393 ], [ %.076, %386 ], [ %.076, %385 ], [ %.076, %384 ], [ %.076, %383 ], [ %.076, %382 ], [ %.076, %381 ], [ %.076, %380 ], [ %.076, %375 ], [ %.076, %374 ], [ %.076, %372 ], [ %.076, %362 ], [ %.076, %352 ], [ %.076, %350 ], [ %.076, %349 ], [ %.076, %348 ], [ %.076, %347 ], [ %.076, %337 ], [ %.076, %327 ], [ %.076, %326 ], [ %.076, %319 ], [ %.076, %318 ], [ %.076, %302 ], [ %.076, %292 ], [ %.076, %289 ], [ %.076, %288 ], [ %.076, %287 ], [ %.076, %271 ], [ %.076, %261 ], [ %.076, %254 ], [ %.076, %251 ], [ %.076, %237 ], [ %.076, %235 ], [ %.076, %224 ], [ %.076, %214 ], [ %.076, %213 ], [ %.076, %203 ], [ %.076, %193 ], [ %.076, %191 ], [ %.076, %190 ], [ %.076, %189 ], [ %.076, %179 ], [ %.076, %169 ], [ %.076, %167 ], [ %.076, %161 ], [ %.076, %158 ], [ %.076, %157 ], [ %.076, %147 ], [ %.076, %137 ], [ %.076, %136 ], [ %135, %134 ], [ %.076, %129 ], [ %.076, %127 ], [ %.076, %116 ], [ %.076, %106 ], [ 1, %105 ], [ %.076, %101 ], [ %.076, %99 ], [ %.076, %98 ], [ %.076, %88 ], [ %.076, %78 ], [ %.076, %76 ], [ %.076, %67 ], [ %.076, %65 ], [ %.076, %64 ], [ %.076, %50 ], [ %.076, %40 ], [ %.076, %38 ], [ %.076, %32 ], [ %.076, %30 ], [ %.076, %19 ], [ %.076, %9 ]
  %.074.be = phi i32 [ %.074, %8 ], [ %.074, %401 ], [ %.074, %400 ], [ %.074, %393 ], [ %.074, %386 ], [ %.074, %385 ], [ %.074, %384 ], [ %.074, %383 ], [ 0, %382 ], [ %.074, %381 ], [ %.074, %380 ], [ %.074, %375 ], [ %.074, %374 ], [ %.074, %372 ], [ %.074, %362 ], [ %.074, %352 ], [ %.074, %350 ], [ %.074, %349 ], [ %.074, %348 ], [ %.074, %347 ], [ %.074, %337 ], [ %.074, %327 ], [ %.074, %326 ], [ %.074, %319 ], [ %.074, %318 ], [ %.074, %302 ], [ %.074, %292 ], [ %.074, %289 ], [ %.074, %288 ], [ %.074, %287 ], [ %.074, %271 ], [ %.074, %261 ], [ %.074, %254 ], [ %.074, %251 ], [ %.074, %237 ], [ %.074, %235 ], [ %.074, %224 ], [ %.074, %214 ], [ %.074, %213 ], [ %.074, %203 ], [ %.074, %193 ], [ %.074, %191 ], [ %.074, %190 ], [ %.074, %189 ], [ %.074, %179 ], [ %.074, %169 ], [ %168, %167 ], [ %.074, %161 ], [ %.074, %158 ], [ %.074, %157 ], [ 0, %147 ], [ %.074, %137 ], [ %.074, %136 ], [ %.074, %134 ], [ %.074, %129 ], [ %.074, %127 ], [ %.074, %116 ], [ %.074, %106 ], [ %.074, %105 ], [ %.074, %101 ], [ %.074, %99 ], [ %.074, %98 ], [ %.074, %88 ], [ %.074, %78 ], [ %.074, %76 ], [ %.074, %67 ], [ %.074, %65 ], [ %.074, %64 ], [ %.074, %50 ], [ %.074, %40 ], [ %.074, %38 ], [ %.074, %32 ], [ %.074, %30 ], [ %.074, %19 ], [ %.074, %9 ]
  %.072.be = phi i32 [ %.072, %8 ], [ %.072, %401 ], [ %.072, %400 ], [ %.072, %393 ], [ %.072, %386 ], [ %.072, %385 ], [ %.072, %384 ], [ %.072, %383 ], [ %.072, %382 ], [ %.072, %381 ], [ %.072, %380 ], [ %.072, %375 ], [ %.072, %374 ], [ %.072, %372 ], [ %.072, %362 ], [ %.072, %352 ], [ %351, %350 ], [ %.072, %349 ], [ %.072, %348 ], [ %.072, %347 ], [ %.072, %337 ], [ %.072, %327 ], [ %.072, %326 ], [ %.072, %319 ], [ %.072, %318 ], [ %.072, %302 ], [ %.072, %292 ], [ %.072, %289 ], [ %.072, %288 ], [ %.072, %287 ], [ %.072, %271 ], [ %.072, %261 ], [ %.072, %254 ], [ %.072, %251 ], [ %.072, %237 ], [ %.072, %235 ], [ %.072, %224 ], [ %.072, %214 ], [ %.072, %213 ], [ %.072, %203 ], [ %.072, %193 ], [ %.072, %191 ], [ 1, %190 ], [ %.072, %189 ], [ %.072, %179 ], [ %.072, %169 ], [ %.072, %167 ], [ %.072, %161 ], [ %.072, %158 ], [ %.072, %157 ], [ %.072, %147 ], [ %.072, %137 ], [ %.072, %136 ], [ %.072, %134 ], [ %.072, %129 ], [ %.072, %127 ], [ %.072, %116 ], [ %.072, %106 ], [ %.072, %105 ], [ %.072, %101 ], [ %.072, %99 ], [ %.072, %98 ], [ %.072, %88 ], [ %.072, %78 ], [ %.072, %76 ], [ %.072, %67 ], [ %.072, %65 ], [ %.072, %64 ], [ %.072, %50 ], [ %.072, %40 ], [ %.072, %38 ], [ %.072, %32 ], [ %.072, %30 ], [ %.072, %19 ], [ %.072, %9 ]
  %.070.be = phi i64 [ %.070, %8 ], [ %.070, %401 ], [ %.070, %400 ], [ %.070, %393 ], [ %391, %386 ], [ %.070, %385 ], [ 0, %384 ], [ %.070, %383 ], [ %.070, %382 ], [ %.070, %381 ], [ %.070, %380 ], [ %.070, %375 ], [ %.070, %374 ], [ %.070, %372 ], [ %.070, %362 ], [ %.070, %352 ], [ %.070, %350 ], [ %.070, %349 ], [ %.070, %348 ], [ %.070, %347 ], [ %.070, %337 ], [ %.070, %327 ], [ %.070, %326 ], [ %.070, %319 ], [ %.070, %318 ], [ %.070, %302 ], [ %.070, %292 ], [ %.070, %289 ], [ %.070, %288 ], [ %.070, %287 ], [ %276, %271 ], [ %.070, %261 ], [ %259, %254 ], [ %.070, %251 ], [ %.070, %237 ], [ %.070, %235 ], [ %.070, %224 ], [ %.070, %214 ], [ %.070, %213 ], [ 0, %203 ], [ %.070, %193 ], [ %.070, %191 ], [ %.070, %190 ], [ %.070, %189 ], [ %.070, %179 ], [ %.070, %169 ], [ %.070, %167 ], [ %.070, %161 ], [ %.070, %158 ], [ %.070, %157 ], [ %.070, %147 ], [ %.070, %137 ], [ %.070, %136 ], [ %.070, %134 ], [ %.070, %129 ], [ %.070, %127 ], [ %.070, %116 ], [ %.070, %106 ], [ %.070, %105 ], [ %.070, %101 ], [ %.070, %99 ], [ %.070, %98 ], [ %.070, %88 ], [ %.070, %78 ], [ %.070, %76 ], [ %.070, %67 ], [ %.070, %65 ], [ %.070, %64 ], [ %.070, %50 ], [ %.070, %40 ], [ %.070, %38 ], [ %.070, %32 ], [ %.070, %30 ], [ %.070, %19 ], [ %.070, %9 ]
  %.068.be = phi i64 [ %.068, %8 ], [ %.068, %401 ], [ %.068, %400 ], [ %398, %393 ], [ %.068, %386 ], [ %.068, %385 ], [ 0, %384 ], [ %.068, %383 ], [ %.068, %382 ], [ %.068, %381 ], [ %.068, %380 ], [ %.068, %375 ], [ %.068, %374 ], [ %.068, %372 ], [ %.068, %362 ], [ %.068, %352 ], [ %.068, %350 ], [ %.068, %349 ], [ %.068, %348 ], [ %.068, %347 ], [ %.068, %337 ], [ %.068, %327 ], [ %.068, %326 ], [ %324, %319 ], [ %.068, %318 ], [ %307, %302 ], [ %.068, %292 ], [ %.068, %289 ], [ %.068, %288 ], [ %.068, %287 ], [ %.068, %271 ], [ %.068, %261 ], [ %.068, %254 ], [ %.068, %251 ], [ %.068, %237 ], [ %.068, %235 ], [ %.068, %224 ], [ %.068, %214 ], [ %.068, %213 ], [ 0, %203 ], [ %.068, %193 ], [ %.068, %191 ], [ %.068, %190 ], [ %.068, %189 ], [ %.068, %179 ], [ %.068, %169 ], [ %.068, %167 ], [ %.068, %161 ], [ %.068, %158 ], [ %.068, %157 ], [ %.068, %147 ], [ %.068, %137 ], [ %.068, %136 ], [ %.068, %134 ], [ %.068, %129 ], [ %.068, %127 ], [ %.068, %116 ], [ %.068, %106 ], [ %.068, %105 ], [ %.068, %101 ], [ %.068, %99 ], [ %.068, %98 ], [ %.068, %88 ], [ %.068, %78 ], [ %.068, %76 ], [ %.068, %67 ], [ %.068, %65 ], [ %.068, %64 ], [ %.068, %50 ], [ %.068, %40 ], [ %.068, %38 ], [ %.068, %32 ], [ %.068, %30 ], [ %.068, %19 ], [ %.068, %9 ]
  %.066.be = phi i32 [ %.066, %8 ], [ %.066, %401 ], [ %.066, %400 ], [ %.066, %393 ], [ %.066, %386 ], [ %.066, %385 ], [ %.078, %384 ], [ %.066, %383 ], [ %.066, %382 ], [ %.066, %381 ], [ %.066, %380 ], [ %.066, %375 ], [ %.066, %374 ], [ %.066, %372 ], [ %.066, %362 ], [ %.066, %352 ], [ %.066, %350 ], [ %.066, %349 ], [ %.neg, %348 ], [ %.066, %347 ], [ %.066, %337 ], [ %.066, %327 ], [ %.066, %326 ], [ %.066, %319 ], [ %.066, %318 ], [ %.066, %302 ], [ %.066, %292 ], [ %.066, %289 ], [ %.066, %288 ], [ %.066, %287 ], [ %.066, %271 ], [ %.066, %261 ], [ %.066, %254 ], [ %.066, %251 ], [ %.066, %237 ], [ %.066, %235 ], [ %.066, %224 ], [ %.066, %214 ], [ %.066, %213 ], [ %.078, %203 ], [ %.066, %193 ], [ %.066, %191 ], [ %.066, %190 ], [ %.066, %189 ], [ %.066, %179 ], [ %.066, %169 ], [ %.066, %167 ], [ %.066, %161 ], [ %.066, %158 ], [ %.066, %157 ], [ %.066, %147 ], [ %.066, %137 ], [ %.066, %136 ], [ %.066, %134 ], [ %.066, %129 ], [ %.066, %127 ], [ %.066, %116 ], [ %.066, %106 ], [ %.066, %105 ], [ %.066, %101 ], [ %.066, %99 ], [ %.066, %98 ], [ %.066, %88 ], [ %.066, %78 ], [ %.066, %76 ], [ %.066, %67 ], [ %.066, %65 ], [ %.066, %64 ], [ %.066, %50 ], [ %.066, %40 ], [ %.066, %38 ], [ %.066, %32 ], [ %.066, %30 ], [ %.066, %19 ], [ %.066, %9 ]
  %.064.be = phi i64 [ %.064, %8 ], [ %.064, %401 ], [ %.064, %400 ], [ %.064, %393 ], [ %.064, %386 ], [ %.064, %385 ], [ %.064, %384 ], [ %.064, %383 ], [ %.064, %382 ], [ %.064, %381 ], [ %.064, %380 ], [ %.064, %375 ], [ %.064, %374 ], [ %.064, %372 ], [ %.064, %362 ], [ %.064, %352 ], [ %.064, %350 ], [ %.064, %349 ], [ %.064, %348 ], [ %.064, %347 ], [ %.064, %337 ], [ %.064, %327 ], [ %.064, %326 ], [ %.064, %319 ], [ %.064, %318 ], [ %.064, %302 ], [ %.064, %292 ], [ %.064, %289 ], [ %.064, %288 ], [ %.064, %287 ], [ %.064, %271 ], [ %.064, %261 ], [ %.064, %254 ], [ %.064, %251 ], [ %242, %237 ], [ %.064, %235 ], [ %.064, %224 ], [ %.064, %214 ], [ %.064, %213 ], [ %.064, %203 ], [ %.064, %193 ], [ %.064, %191 ], [ %.064, %190 ], [ %.064, %189 ], [ %.064, %179 ], [ %.064, %169 ], [ %.064, %167 ], [ %.064, %161 ], [ %.064, %158 ], [ %.064, %157 ], [ %.064, %147 ], [ %.064, %137 ], [ %.064, %136 ], [ %.064, %134 ], [ %.064, %129 ], [ %.064, %127 ], [ %.064, %116 ], [ %.064, %106 ], [ %.064, %105 ], [ %.064, %101 ], [ %.064, %99 ], [ %.064, %98 ], [ %.064, %88 ], [ %.064, %78 ], [ %.064, %76 ], [ %.064, %67 ], [ %.064, %65 ], [ %.064, %64 ], [ %.064, %50 ], [ %.064, %40 ], [ %.064, %38 ], [ %.064, %32 ], [ %.064, %30 ], [ %.064, %19 ], [ %.064, %9 ]
  %.062.be = phi i64 [ %.062, %8 ], [ %.062, %401 ], [ %.062, %400 ], [ %.062, %393 ], [ %.062, %386 ], [ %.062, %385 ], [ %.062, %384 ], [ %.062, %383 ], [ %.062, %382 ], [ %.062, %381 ], [ %.062, %380 ], [ %.062, %375 ], [ %.062, %374 ], [ %.062, %372 ], [ %.062, %362 ], [ %.062, %352 ], [ %.062, %350 ], [ %.062, %349 ], [ %.062, %348 ], [ %.062, %347 ], [ %.062, %337 ], [ %.062, %327 ], [ %.062, %326 ], [ %.062, %319 ], [ %.062, %318 ], [ %.062, %302 ], [ %.062, %292 ], [ %.062, %289 ], [ %.062, %288 ], [ %.062, %287 ], [ %.062, %271 ], [ %.062, %261 ], [ %.062, %254 ], [ %.062, %251 ], [ %246, %237 ], [ %.062, %235 ], [ %.062, %224 ], [ %.062, %214 ], [ %.062, %213 ], [ %.062, %203 ], [ %.062, %193 ], [ %.062, %191 ], [ %.062, %190 ], [ %.062, %189 ], [ %.062, %179 ], [ %.062, %169 ], [ %.062, %167 ], [ %.062, %161 ], [ %.062, %158 ], [ %.062, %157 ], [ %.062, %147 ], [ %.062, %137 ], [ %.062, %136 ], [ %.062, %134 ], [ %.062, %129 ], [ %.062, %127 ], [ %.062, %116 ], [ %.062, %106 ], [ %.062, %105 ], [ %.062, %101 ], [ %.062, %99 ], [ %.062, %98 ], [ %.062, %88 ], [ %.062, %78 ], [ %.062, %76 ], [ %.062, %67 ], [ %.062, %65 ], [ %.062, %64 ], [ %.062, %50 ], [ %.062, %40 ], [ %.062, %38 ], [ %.062, %32 ], [ %.062, %30 ], [ %.062, %19 ], [ %.062, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ -703955790, %401 ], [ -1079186747, %400 ], [ 965074290, %393 ], [ 1178139882, %386 ], [ 668574477, %385 ], [ 852683627, %384 ], [ 1606944098, %383 ], [ 484220250, %382 ], [ -1716694639, %381 ], [ 273153506, %380 ], [ -1324152976, %375 ], [ -1144242473, %374 ], [ 1954848884, %372 ], [ %371, %362 ], [ %361, %352 ], [ 575182813, %350 ], [ -2031488132, %349 ], [ -425397348, %348 ], [ -2094595516, %347 ], [ %346, %337 ], [ %336, %327 ], [ -1350898371, %326 ], [ -1407607785, %319 ], [ -1407607785, %318 ], [ %317, %302 ], [ %301, %292 ], [ %291, %289 ], [ -1350898371, %288 ], [ 2107549975, %287 ], [ %286, %271 ], [ %270, %261 ], [ 2107549975, %254 ], [ %253, %251 ], [ %250, %237 ], [ %236, %235 ], [ %234, %224 ], [ %223, %214 ], [ -425397348, %213 ], [ %212, %203 ], [ %202, %193 ], [ %192, %191 ], [ 575182813, %190 ], [ -1043478285, %189 ], [ %188, %179 ], [ %178, %169 ], [ 1670989044, %167 ], [ -1649942982, %161 ], [ %160, %158 ], [ 1670989044, %157 ], [ %156, %147 ], [ %146, %137 ], [ -1043478285, %136 ], [ 1394630712, %134 ], [ -1069821097, %129 ], [ %128, %127 ], [ %126, %116 ], [ %115, %106 ], [ 1394630712, %105 ], [ %104, %101 ], [ 1954509913, %99 ], [ -1892691442, %98 ], [ %97, %88 ], [ %87, %78 ], [ 1954848884, %76 ], [ %75, %67 ], [ %66, %65 ], [ 1954509913, %64 ], [ %63, %50 ], [ %49, %40 ], [ -881129488, %38 ], [ 1979310645, %32 ], [ %31, %30 ], [ %29, %19 ], [ %18, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i32, i32* @x.7, align 4
  %11 = load i32, i32* @y.8, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %16, %15
  %18 = select i1 %17, i32 -1144242473, i32 1910061116
  br label %.backedge

19:                                               ; preds = %8
  %20 = icmp sle i32 %.084, %5
  store i1 %20, i1* %3, align 1
  %21 = load i32, i32* @x.7, align 4
  %22 = load i32, i32* @y.8, align 4
  %23 = add i32 %21, -1
  %24 = mul i32 %23, %21
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %27, %26
  %29 = select i1 %28, i32 -877494937, i32 1910061116
  br label %.backedge

30:                                               ; preds = %8
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %31 = select i1 %.0..0..0., i32 -1448142110, i32 1435613722
  br label %.backedge

32:                                               ; preds = %8
  %33 = tail call i32 @_Z8read_intv()
  %34 = sext i32 %.084 to i64
  %35 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %34
  store i32 %33, i32* %35, align 4
  %36 = tail call i32 @_Z8read_intv()
  %37 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %34
  store i32 %36, i32* %37, align 4
  br label %.backedge

38:                                               ; preds = %8
  %39 = add i32 %.084, 1
  br label %.backedge

40:                                               ; preds = %8
  %41 = load i32, i32* @x.7, align 4
  %42 = load i32, i32* @y.8, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 -1324152976, i32 1087666875
  br label %.backedge

50:                                               ; preds = %8
  %51 = load i32, i32* getelementptr inbounds ([1010 x i32], [1010 x i32]* @x, i64 0, i64 1), align 4
  %52 = load i32, i32* getelementptr inbounds ([1010 x i32], [1010 x i32]* @y, i64 0, i64 1), align 4
  %53 = add i32 %52, %51
  %54 = and i32 %53, 1
  %55 = load i32, i32* @x.7, align 4
  %56 = load i32, i32* @y.8, align 4
  %57 = add i32 %55, -1
  %58 = mul i32 %57, %55
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %61, %60
  %63 = select i1 %62, i32 1865733251, i32 1087666875
  br label %.backedge

64:                                               ; preds = %8
  br label %.backedge

65:                                               ; preds = %8
  %.not93 = icmp sgt i32 %.080, %5
  %66 = select i1 %.not93, i32 -1742588659, i32 -613816567
  br label %.backedge

67:                                               ; preds = %8
  %68 = sext i32 %.080 to i64
  %69 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %68
  %72 = load i32, i32* %71, align 4
  %73 = add i32 %72, %70
  %74 = and i32 %73, 1
  %.not92 = icmp eq i32 %74, %.082
  %75 = select i1 %.not92, i32 99011766, i32 1176766842
  br label %.backedge

76:                                               ; preds = %8
  %77 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

78:                                               ; preds = %8
  %79 = load i32, i32* @x.7, align 4
  %80 = load i32, i32* @y.8, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 273153506, i32 52047481
  br label %.backedge

88:                                               ; preds = %8
  %89 = load i32, i32* @x.7, align 4
  %90 = load i32, i32* @y.8, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 1657667734, i32 52047481
  br label %.backedge

98:                                               ; preds = %8
  br label %.backedge

99:                                               ; preds = %8
  %100 = add i32 %.080, 1
  br label %.backedge

101:                                              ; preds = %8
  %102 = sub i32 32, %.082
  %103 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %102)
  store i32 1, i32* getelementptr inbounds ([33 x i32], [33 x i32]* @len, i64 0, i64 1), align 4
  %.not91 = icmp eq i32 %.082, 0
  %104 = select i1 %.not91, i32 1421083688, i32 -125563838
  br label %.backedge

105:                                              ; preds = %8
  br label %.backedge

106:                                              ; preds = %8
  %107 = load i32, i32* @x.7, align 4
  %108 = load i32, i32* @y.8, align 4
  %109 = add i32 %107, -1
  %110 = mul i32 %109, %107
  %111 = and i32 %110, 1
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %113, %112
  %115 = select i1 %114, i32 -1716694639, i32 -1903425436
  br label %.backedge

116:                                              ; preds = %8
  %117 = icmp slt i32 %.076, 31
  store i1 %117, i1* %2, align 1
  %118 = load i32, i32* @x.7, align 4
  %119 = load i32, i32* @y.8, align 4
  %120 = add i32 %118, -1
  %121 = mul i32 %120, %118
  %122 = and i32 %121, 1
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %124, %123
  %126 = select i1 %125, i32 1808420558, i32 -1903425436
  br label %.backedge

127:                                              ; preds = %8
  %.0..0..0.60 = load volatile i1, i1* %2, align 1
  %128 = select i1 %.0..0..0.60, i32 982535006, i32 256622052
  br label %.backedge

129:                                              ; preds = %8
  %130 = shl nuw i32 1, %.076
  %.neg90 = add i32 %.078, 1
  %131 = sext i32 %.neg90 to i64
  %132 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %131
  store i32 %130, i32* %132, align 4
  %133 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %130)
  br label %.backedge

134:                                              ; preds = %8
  %135 = add i32 %.076, 1
  br label %.backedge

136:                                              ; preds = %8
  %putchar89 = tail call i32 @putchar(i32 10)
  br label %.backedge

137:                                              ; preds = %8
  %138 = load i32, i32* @x.7, align 4
  %139 = load i32, i32* @y.8, align 4
  %140 = add i32 %138, -1
  %141 = mul i32 %140, %138
  %142 = and i32 %141, 1
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %144, %143
  %146 = select i1 %145, i32 484220250, i32 -1846806287
  br label %.backedge

147:                                              ; preds = %8
  %148 = load i32, i32* @x.7, align 4
  %149 = load i32, i32* @y.8, align 4
  %150 = add i32 %148, -1
  %151 = mul i32 %150, %148
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 1013290129, i32 -1846806287
  br label %.backedge

157:                                              ; preds = %8
  br label %.backedge

158:                                              ; preds = %8
  %159 = icmp slt i32 %.074, 31
  %160 = select i1 %159, i32 -1376252335, i32 -1152988302
  br label %.backedge

161:                                              ; preds = %8
  %162 = shl nuw i32 1, %.074
  %163 = add i32 %.078, 1
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %164
  store i32 %162, i32* %165, align 4
  %166 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %162)
  br label %.backedge

167:                                              ; preds = %8
  %168 = add i32 %.074, 1
  br label %.backedge

169:                                              ; preds = %8
  %170 = load i32, i32* @x.7, align 4
  %171 = load i32, i32* @y.8, align 4
  %172 = add i32 %170, -1
  %173 = mul i32 %172, %170
  %174 = and i32 %173, 1
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %176, %175
  %178 = select i1 %177, i32 1606944098, i32 282721470
  br label %.backedge

179:                                              ; preds = %8
  %putchar88 = tail call i32 @putchar(i32 10)
  %180 = load i32, i32* @x.7, align 4
  %181 = load i32, i32* @y.8, align 4
  %182 = add i32 %180, -1
  %183 = mul i32 %182, %180
  %184 = and i32 %183, 1
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %186, %185
  %188 = select i1 %187, i32 1064062072, i32 282721470
  br label %.backedge

189:                                              ; preds = %8
  br label %.backedge

190:                                              ; preds = %8
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(40) %7, i8 0, i64 40, i1 false)
  br label %.backedge

191:                                              ; preds = %8
  %.not = icmp sgt i32 %.072, %5
  %192 = select i1 %.not, i32 -1207181119, i32 -268366740
  br label %.backedge

193:                                              ; preds = %8
  %194 = load i32, i32* @x.7, align 4
  %195 = load i32, i32* @y.8, align 4
  %196 = add i32 %194, -1
  %197 = mul i32 %196, %194
  %198 = and i32 %197, 1
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %200, %199
  %202 = select i1 %201, i32 852683627, i32 197023990
  br label %.backedge

203:                                              ; preds = %8
  %204 = load i32, i32* @x.7, align 4
  %205 = load i32, i32* @y.8, align 4
  %206 = add i32 %204, -1
  %207 = mul i32 %206, %204
  %208 = and i32 %207, 1
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %210, %209
  %212 = select i1 %211, i32 -356392878, i32 197023990
  br label %.backedge

213:                                              ; preds = %8
  br label %.backedge

214:                                              ; preds = %8
  %215 = load i32, i32* @x.7, align 4
  %216 = load i32, i32* @y.8, align 4
  %217 = add i32 %215, -1
  %218 = mul i32 %217, %215
  %219 = and i32 %218, 1
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %221, %220
  %223 = select i1 %222, i32 668574477, i32 555824284
  br label %.backedge

224:                                              ; preds = %8
  %225 = icmp ne i32 %.066, 0
  store i1 %225, i1* %1, align 1
  %226 = load i32, i32* @x.7, align 4
  %227 = load i32, i32* @y.8, align 4
  %228 = add i32 %226, -1
  %229 = mul i32 %228, %226
  %230 = and i32 %229, 1
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %232, %231
  %234 = select i1 %233, i32 -1908481229, i32 555824284
  br label %.backedge

235:                                              ; preds = %8
  %.0..0..0.61 = load volatile i1, i1* %1, align 1
  %236 = select i1 %.0..0..0.61, i32 -413877013, i32 877915830
  br label %.backedge

237:                                              ; preds = %8
  %238 = sext i32 %.072 to i64
  %239 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = sext i32 %240 to i64
  %242 = sub i64 %241, %.070
  %243 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %238
  %244 = load i32, i32* %243, align 4
  %245 = sext i32 %244 to i64
  %246 = sub i64 %245, %.068
  %247 = tail call i64 @_ZSt3absx(i64 %242)
  %248 = tail call i64 @_ZSt3absx(i64 %246)
  %249 = icmp sgt i64 %247, %248
  %250 = select i1 %249, i32 2008751649, i32 632877098
  br label %.backedge

251:                                              ; preds = %8
  %252 = icmp sgt i64 %.064, 0
  %253 = select i1 %252, i32 -195170083, i32 651648345
  br label %.backedge

254:                                              ; preds = %8
  %255 = sext i32 %.066 to i64
  %256 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %255
  %257 = load i32, i32* %256, align 4
  %258 = sext i32 %257 to i64
  %259 = add i64 %.070, %258
  %260 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i64 0, i64 %255
  store i8 82, i8* %260, align 1
  br label %.backedge

261:                                              ; preds = %8
  %262 = load i32, i32* @x.7, align 4
  %263 = load i32, i32* @y.8, align 4
  %264 = add i32 %262, -1
  %265 = mul i32 %264, %262
  %266 = and i32 %265, 1
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %268, %267
  %270 = select i1 %269, i32 1178139882, i32 -2017465233
  br label %.backedge

271:                                              ; preds = %8
  %272 = sext i32 %.066 to i64
  %273 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %272
  %274 = load i32, i32* %273, align 4
  %275 = sext i32 %274 to i64
  %276 = sub i64 %.070, %275
  %277 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i64 0, i64 %272
  store i8 76, i8* %277, align 1
  %278 = load i32, i32* @x.7, align 4
  %279 = load i32, i32* @y.8, align 4
  %280 = add i32 %278, -1
  %281 = mul i32 %280, %278
  %282 = and i32 %281, 1
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %284, %283
  %286 = select i1 %285, i32 -584883698, i32 -2017465233
  br label %.backedge

287:                                              ; preds = %8
  br label %.backedge

288:                                              ; preds = %8
  br label %.backedge

289:                                              ; preds = %8
  %290 = icmp sgt i64 %.062, 0
  %291 = select i1 %290, i32 1404498091, i32 -1681132725
  br label %.backedge

292:                                              ; preds = %8
  %293 = load i32, i32* @x.7, align 4
  %294 = load i32, i32* @y.8, align 4
  %295 = add i32 %293, -1
  %296 = mul i32 %295, %293
  %297 = and i32 %296, 1
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %299, %298
  %301 = select i1 %300, i32 965074290, i32 2019900313
  br label %.backedge

302:                                              ; preds = %8
  %303 = sext i32 %.066 to i64
  %304 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = sext i32 %305 to i64
  %307 = add i64 %.068, %306
  %308 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i64 0, i64 %303
  store i8 85, i8* %308, align 1
  %309 = load i32, i32* @x.7, align 4
  %310 = load i32, i32* @y.8, align 4
  %311 = add i32 %309, -1
  %312 = mul i32 %311, %309
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %315, %314
  %317 = select i1 %316, i32 -281125732, i32 2019900313
  br label %.backedge

318:                                              ; preds = %8
  br label %.backedge

319:                                              ; preds = %8
  %320 = sext i32 %.066 to i64
  %321 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %320
  %322 = load i32, i32* %321, align 4
  %323 = sext i32 %322 to i64
  %324 = sub i64 %.068, %323
  %325 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i64 0, i64 %320
  store i8 68, i8* %325, align 1
  br label %.backedge

326:                                              ; preds = %8
  br label %.backedge

327:                                              ; preds = %8
  %328 = load i32, i32* @x.7, align 4
  %329 = load i32, i32* @y.8, align 4
  %330 = add i32 %328, -1
  %331 = mul i32 %330, %328
  %332 = and i32 %331, 1
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %334, %333
  %336 = select i1 %335, i32 -1079186747, i32 -313221042
  br label %.backedge

337:                                              ; preds = %8
  %338 = load i32, i32* @x.7, align 4
  %339 = load i32, i32* @y.8, align 4
  %340 = add i32 %338, -1
  %341 = mul i32 %340, %338
  %342 = and i32 %341, 1
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %344, %343
  %346 = select i1 %345, i32 -1487547394, i32 -313221042
  br label %.backedge

347:                                              ; preds = %8
  br label %.backedge

348:                                              ; preds = %8
  %.neg = add i32 %.066, -1
  br label %.backedge

349:                                              ; preds = %8
  %puts = call i32 @puts(i8* nonnull %6)
  br label %.backedge

350:                                              ; preds = %8
  %351 = add i32 %.072, 1
  br label %.backedge

352:                                              ; preds = %8
  %353 = load i32, i32* @x.7, align 4
  %354 = load i32, i32* @y.8, align 4
  %355 = add i32 %353, -1
  %356 = mul i32 %355, %353
  %357 = and i32 %356, 1
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %359, %358
  %361 = select i1 %360, i32 -703955790, i32 -1031212964
  br label %.backedge

362:                                              ; preds = %8
  %363 = load i32, i32* @x.7, align 4
  %364 = load i32, i32* @y.8, align 4
  %365 = add i32 %363, -1
  %366 = mul i32 %365, %363
  %367 = and i32 %366, 1
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %369, %368
  %371 = select i1 %370, i32 1799648221, i32 -1031212964
  br label %.backedge

372:                                              ; preds = %8
  br label %.backedge

373:                                              ; preds = %8
  ret i32 0

374:                                              ; preds = %8
  br label %.backedge

375:                                              ; preds = %8
  %376 = load i32, i32* getelementptr inbounds ([1010 x i32], [1010 x i32]* @x, i64 0, i64 1), align 4
  %377 = load i32, i32* getelementptr inbounds ([1010 x i32], [1010 x i32]* @y, i64 0, i64 1), align 4
  %378 = add i32 %377, %376
  %379 = and i32 %378, 1
  br label %.backedge

380:                                              ; preds = %8
  br label %.backedge

381:                                              ; preds = %8
  br label %.backedge

382:                                              ; preds = %8
  br label %.backedge

383:                                              ; preds = %8
  %putchar = tail call i32 @putchar(i32 10)
  br label %.backedge

384:                                              ; preds = %8
  br label %.backedge

385:                                              ; preds = %8
  br label %.backedge

386:                                              ; preds = %8
  %387 = sext i32 %.066 to i64
  %388 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %387
  %389 = load i32, i32* %388, align 4
  %390 = sext i32 %389 to i64
  %391 = sub i64 %.070, %390
  %392 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i64 0, i64 %387
  store i8 76, i8* %392, align 1
  br label %.backedge

393:                                              ; preds = %8
  %394 = sext i32 %.066 to i64
  %395 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %394
  %396 = load i32, i32* %395, align 4
  %397 = sext i32 %396 to i64
  %398 = add i64 %.068, %397
  %399 = getelementptr inbounds [40 x i8], [40 x i8]* %4, i64 0, i64 %394
  store i8 85, i8* %399, align 1
  br label %.backedge

400:                                              ; preds = %8
  br label %.backedge

401:                                              ; preds = %8
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z8read_intv() local_unnamed_addr #0 comdat {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = load i32, i32* @x.9, align 4
  %5 = load i32, i32* @y.10, align 4
  %6 = add i32 %4, -1
  %7 = mul i32 %6, %4
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  store i1 %9, i1* %3, align 1
  %10 = icmp slt i32 %5, 10
  store i1 %10, i1* %2, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1234106479, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %11

11:                                               ; preds = %.outer, %11
  switch i32 %.0.ph, label %11 [
    i32 -1234106479, label %12
    i32 1103338143, label %15
    i32 -702445906, label %27
    i32 -1793714833, label %28
  ]

12:                                               ; preds = %11
  %.0..0..0. = load volatile i1, i1* %3, align 1
  %.0..0..0.1 = load volatile i1, i1* %2, align 1
  %13 = or i1 %.0..0..0., %.0..0..0.1
  %14 = select i1 %13, i32 1103338143, i32 -1793714833
  br label %.outer.backedge

15:                                               ; preds = %11
  %16 = alloca i32, align 4
  call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) %16)
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %1, align 4
  %18 = load i32, i32* @x.9, align 4
  %19 = load i32, i32* @y.10, align 4
  %20 = add i32 %18, -1
  %21 = mul i32 %20, %18
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %24, %23
  %26 = select i1 %25, i32 -702445906, i32 -1793714833
  br label %.outer.backedge

27:                                               ; preds = %11
  %.0..0..0.2 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.2

28:                                               ; preds = %11
  %29 = alloca i32, align 4
  call void @_Z4readIiEvRT_(i32* nonnull dereferenceable(4) %29)
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %28, %15, %12
  %.0.ph.be = phi i32 [ %14, %12 ], [ %26, %15 ], [ 1103338143, %28 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt3absx(i64 %0) local_unnamed_addr #6 comdat {
  %2 = alloca i64, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.11, align 4
  %6 = load i32, i32* @y.12, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  %12 = or i1 %11, %10
  %13 = select i1 %12, i32 -653071704, i32 -1493447708
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.0.ph = phi i32 [ 80191941, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %14

14:                                               ; preds = %.outer, %14
  switch i32 %.0.ph, label %14 [
    i32 80191941, label %15
    i32 -1199156898, label %.outer.backedge
    i32 -653071704, label %18
    i32 -1493447708, label %20
  ]

15:                                               ; preds = %14
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %16 = or i1 %.0..0..0., %.0..0..0.1
  %17 = select i1 %16, i32 -1199156898, i32 -1493447708
  br label %.outer.backedge

18:                                               ; preds = %14
  %19 = tail call i64 @llvm.abs.i64(i64 %0, i1 false)
  store i64 %19, i64* %2, align 8
  %.0..0..0.2 = load volatile i64, i64* %2, align 8
  ret i64 %.0..0..0.2

20:                                               ; preds = %14
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %14, %20, %15
  %.0.ph.be = phi i32 [ %17, %15 ], [ -1199156898, %20 ], [ %13, %14 ]
  br label %.outer
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z4readIiEvRT_(i32* dereferenceable(4) %0) local_unnamed_addr #0 comdat {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  %8 = alloca i1, align 1
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32**, align 8
  %12 = alloca i1, align 1
  %13 = alloca i1, align 1
  %14 = load i32, i32* @x.13, align 4
  %15 = load i32, i32* @y.14, align 4
  %16 = add i32 %14, -1
  %17 = mul i32 %16, %14
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  store i1 %19, i1* %13, align 1
  %20 = icmp slt i32 %15, 10
  store i1 %20, i1* %12, align 1
  br label %21

21:                                               ; preds = %.backedge, %1
  %.044 = phi i32 [ 151790769, %1 ], [ %.044.be, %.backedge ]
  %.042 = phi i32 [ undef, %1 ], [ %.042.be, %.backedge ]
  %.040 = phi i32 [ undef, %1 ], [ %.040.be, %.backedge ]
  %.038 = phi i32 [ undef, %1 ], [ %.038.be, %.backedge ]
  %.036 = phi i32 [ undef, %1 ], [ %.036.be, %.backedge ]
  %.0 = phi i32 [ undef, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.044, label %.backedge [
    i32 151790769, label %22
    i32 -1056260272, label %25
    i32 -894587482, label %39
    i32 -1742023956, label %40
    i32 -1358616034, label %45
    i32 1738294721, label %55
    i32 -1557657055, label %70
    i32 -1356849642, label %72
    i32 -745660268, label %82
    i32 642820844, label %92
    i32 -2064272913, label %93
    i32 1157290599, label %98
    i32 658764997, label %99
    i32 -1246546845, label %109
    i32 1673264212, label %123
    i32 -1958750883, label %124
    i32 -927935000, label %128
    i32 2035408360, label %134
    i32 -2107451789, label %144
    i32 2104751107, label %154
    i32 1396223796, label %155
    i32 532902334, label %159
    i32 516118633, label %169
    i32 -3144440, label %190
    i32 -1130795864, label %192
    i32 -1652304072, label %202
    i32 -1912995482, label %217
    i32 249969816, label %219
    i32 1822123791, label %220
    i32 -1377894500, label %225
    i32 1844497853, label %235
    i32 2039666993, label %245
    i32 -677125064, label %246
    i32 30271589, label %251
    i32 -1662934664, label %253
    i32 388723694, label %256
    i32 113596214, label %260
    i32 -1883136286, label %270
    i32 -1248584785, label %282
    i32 1322434428, label %283
    i32 -1853233367, label %293
    i32 -1373117284, label %304
    i32 104370389, label %305
    i32 1523869585, label %306
    i32 135835886, label %310
    i32 -647003647, label %311
    i32 628717484, label %314
    i32 -1093713673, label %315
    i32 -1431165673, label %324
    i32 -950838509, label %328
    i32 -380444682, label %329
    i32 2021825246, label %330
  ]

.backedge:                                        ; preds = %21, %330, %329, %328, %324, %315, %314, %311, %310, %306, %305, %293, %283, %282, %270, %260, %256, %253, %251, %246, %245, %235, %225, %220, %219, %217, %202, %192, %190, %169, %159, %155, %154, %144, %134, %128, %124, %123, %109, %99, %98, %93, %92, %82, %72, %70, %55, %45, %40, %39, %25, %22
  %.044.be = phi i32 [ %.044, %21 ], [ -1853233367, %330 ], [ -1883136286, %329 ], [ 1844497853, %328 ], [ -1652304072, %324 ], [ 516118633, %315 ], [ -2107451789, %314 ], [ -1246546845, %311 ], [ -745660268, %310 ], [ 1738294721, %306 ], [ -1056260272, %305 ], [ %303, %293 ], [ %292, %283 ], [ 1322434428, %282 ], [ %281, %270 ], [ %269, %260 ], [ 1322434428, %256 ], [ %255, %253 ], [ 1396223796, %251 ], [ 30271589, %246 ], [ 30271589, %245 ], [ %244, %235 ], [ %234, %225 ], [ -1377894500, %220 ], [ -1377894500, %219 ], [ %218, %217 ], [ %216, %202 ], [ %201, %192 ], [ %191, %190 ], [ %189, %169 ], [ %168, %159 ], [ %158, %155 ], [ 1396223796, %154 ], [ %153, %144 ], [ %143, %134 ], [ -1742023956, %128 ], [ %127, %124 ], [ -1958750883, %123 ], [ %122, %109 ], [ %108, %99 ], [ -1958750883, %98 ], [ 1157290599, %93 ], [ 1157290599, %92 ], [ %91, %82 ], [ %81, %72 ], [ %71, %70 ], [ %69, %55 ], [ %54, %45 ], [ %44, %40 ], [ -1742023956, %39 ], [ %38, %25 ], [ %24, %22 ]
  %.042.be = phi i32 [ %.042, %21 ], [ %.042, %330 ], [ %.042, %329 ], [ %.042, %328 ], [ %.042, %324 ], [ %.042, %315 ], [ %.042, %314 ], [ %.042, %311 ], [ %.042, %310 ], [ %.042, %306 ], [ %.042, %305 ], [ %.042, %293 ], [ %.042, %283 ], [ %.042, %282 ], [ %.042, %270 ], [ %.042, %260 ], [ %.042, %256 ], [ %.042, %253 ], [ %.042, %251 ], [ %.042, %246 ], [ %.042, %245 ], [ %.042, %235 ], [ %.042, %225 ], [ %.042, %220 ], [ %.042, %219 ], [ %.042, %217 ], [ %.042, %202 ], [ %.042, %192 ], [ %.042, %190 ], [ %.042, %169 ], [ %.042, %159 ], [ %.042, %155 ], [ %.042, %154 ], [ %.042, %144 ], [ %.042, %134 ], [ %.042, %128 ], [ %.042, %124 ], [ %.042, %123 ], [ %.042, %109 ], [ %.042, %99 ], [ %.042, %98 ], [ %97, %93 ], [ -1, %92 ], [ %.042, %82 ], [ %.042, %72 ], [ %.042, %70 ], [ %.042, %55 ], [ %.042, %45 ], [ %.042, %40 ], [ %.042, %39 ], [ %.042, %25 ], [ %.042, %22 ]
  %.040.be = phi i32 [ %.040, %21 ], [ %.040, %330 ], [ %.040, %329 ], [ %.040, %328 ], [ %.040, %324 ], [ %.040, %315 ], [ %.040, %314 ], [ %.040, %311 ], [ %.040, %310 ], [ %.040, %306 ], [ %.040, %305 ], [ %.040, %293 ], [ %.040, %283 ], [ %.040, %282 ], [ %.040, %270 ], [ %.040, %260 ], [ %.040, %256 ], [ %.040, %253 ], [ %.040, %251 ], [ %.040, %246 ], [ %.040, %245 ], [ %.040, %235 ], [ %.040, %225 ], [ %.040, %220 ], [ %.040, %219 ], [ %.040, %217 ], [ %.040, %202 ], [ %.040, %192 ], [ %.040, %190 ], [ %.040, %169 ], [ %.040, %159 ], [ %.040, %155 ], [ %.040, %154 ], [ %.040, %144 ], [ %.040, %134 ], [ %.040, %128 ], [ %.040, %124 ], [ %.0..0..0.29, %123 ], [ %.040, %109 ], [ %.040, %99 ], [ %.042, %98 ], [ %.040, %93 ], [ %.040, %92 ], [ %.040, %82 ], [ %.040, %72 ], [ %.040, %70 ], [ %.040, %55 ], [ %.040, %45 ], [ %.040, %40 ], [ %.040, %39 ], [ %.040, %25 ], [ %.040, %22 ]
  %.038.be = phi i32 [ %.038, %21 ], [ %.038, %330 ], [ %.038, %329 ], [ %.038, %328 ], [ %.038, %324 ], [ %.038, %315 ], [ %.038, %314 ], [ %.038, %311 ], [ %.038, %310 ], [ %.038, %306 ], [ %.038, %305 ], [ %.038, %293 ], [ %.038, %283 ], [ %.038, %282 ], [ %.038, %270 ], [ %.038, %260 ], [ %.038, %256 ], [ %.038, %253 ], [ %.038, %251 ], [ %.038, %246 ], [ %.038, %245 ], [ %.038, %235 ], [ %.038, %225 ], [ %224, %220 ], [ -1, %219 ], [ %.038, %217 ], [ %.038, %202 ], [ %.038, %192 ], [ %.038, %190 ], [ %.038, %169 ], [ %.038, %159 ], [ %.038, %155 ], [ %.038, %154 ], [ %.038, %144 ], [ %.038, %134 ], [ %.038, %128 ], [ %.038, %124 ], [ %.038, %123 ], [ %.038, %109 ], [ %.038, %99 ], [ %.038, %98 ], [ %.038, %93 ], [ %.038, %92 ], [ %.038, %82 ], [ %.038, %72 ], [ %.038, %70 ], [ %.038, %55 ], [ %.038, %45 ], [ %.038, %40 ], [ %.038, %39 ], [ %.038, %25 ], [ %.038, %22 ]
  %.036.be = phi i32 [ %.036, %21 ], [ %.036, %330 ], [ %.036, %329 ], [ %.036, %328 ], [ %.036, %324 ], [ %.036, %315 ], [ %.036, %314 ], [ %.036, %311 ], [ %.036, %310 ], [ %.036, %306 ], [ %.036, %305 ], [ %.036, %293 ], [ %.036, %283 ], [ %.036, %282 ], [ %.036, %270 ], [ %.036, %260 ], [ %.036, %256 ], [ %.036, %253 ], [ %.036, %251 ], [ %250, %246 ], [ %.0..0..0.33, %245 ], [ %.036, %235 ], [ %.036, %225 ], [ %.036, %220 ], [ %.036, %219 ], [ %.036, %217 ], [ %.036, %202 ], [ %.036, %192 ], [ %.036, %190 ], [ %.036, %169 ], [ %.036, %159 ], [ %.036, %155 ], [ %.036, %154 ], [ %.036, %144 ], [ %.036, %134 ], [ %.036, %128 ], [ %.036, %124 ], [ %.036, %123 ], [ %.036, %109 ], [ %.036, %99 ], [ %.036, %98 ], [ %.036, %93 ], [ %.036, %92 ], [ %.036, %82 ], [ %.036, %72 ], [ %.036, %70 ], [ %.036, %55 ], [ %.036, %45 ], [ %.036, %40 ], [ %.036, %39 ], [ %.036, %25 ], [ %.036, %22 ]
  %.0.be = phi i32 [ %.0, %21 ], [ %.0, %330 ], [ %.0, %329 ], [ %.0, %328 ], [ %.0, %324 ], [ %.0, %315 ], [ %.0, %314 ], [ %.0, %311 ], [ %.0, %310 ], [ %.0, %306 ], [ %.0, %305 ], [ %.0, %293 ], [ %.0, %283 ], [ %.0..0..0.32, %282 ], [ %.0, %270 ], [ %.0, %260 ], [ %259, %256 ], [ %.0, %253 ], [ %.0, %251 ], [ %.0, %246 ], [ %.0, %245 ], [ %.0, %235 ], [ %.0, %225 ], [ %.0, %220 ], [ %.0, %219 ], [ %.0, %217 ], [ %.0, %202 ], [ %.0, %192 ], [ %.0, %190 ], [ %.0, %169 ], [ %.0, %159 ], [ %.0, %155 ], [ %.0, %154 ], [ %.0, %144 ], [ %.0, %134 ], [ %.0, %128 ], [ %.0, %124 ], [ %.0, %123 ], [ %.0, %109 ], [ %.0, %99 ], [ %.0, %98 ], [ %.0, %93 ], [ %.0, %92 ], [ %.0, %82 ], [ %.0, %72 ], [ %.0, %70 ], [ %.0, %55 ], [ %.0, %45 ], [ %.0, %40 ], [ %.0, %39 ], [ %.0, %25 ], [ %.0, %22 ]
  br label %21

22:                                               ; preds = %21
  %.0..0..0. = load volatile i1, i1* %13, align 1
  %.0..0..0.6 = load volatile i1, i1* %12, align 1
  %23 = or i1 %.0..0..0., %.0..0..0.6
  %24 = select i1 %23, i32 -1056260272, i32 104370389
  br label %.backedge

25:                                               ; preds = %21
  %26 = alloca i32*, align 8
  store i32** %26, i32*** %11, align 8
  %27 = alloca i8, align 1
  store i8* %27, i8** %10, align 8
  %28 = alloca i8, align 1
  store i8* %28, i8** %9, align 8
  %.0..0..0.7 = load volatile i32**, i32*** %11, align 8
  store i32* %0, i32** %.0..0..0.7, align 8
  %.0..0..0.24 = load volatile i8*, i8** %9, align 8
  store i8 0, i8* %.0..0..0.24, align 1
  %.0..0..0.8 = load volatile i32**, i32*** %11, align 8
  %29 = load i32*, i32** %.0..0..0.8, align 8
  store i32 0, i32* %29, align 4
  %30 = load i32, i32* @x.13, align 4
  %31 = load i32, i32* @y.14, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -894587482, i32 104370389
  br label %.backedge

39:                                               ; preds = %21
  br label %.backedge

40:                                               ; preds = %21
  %41 = load i8*, i8** @iS, align 8
  %42 = load i8*, i8** @iT, align 8
  %43 = icmp eq i8* %41, %42
  %44 = select i1 %43, i32 -1358616034, i32 658764997
  br label %.backedge

45:                                               ; preds = %21
  %46 = load i32, i32* @x.13, align 4
  %47 = load i32, i32* @y.14, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 1738294721, i32 1523869585
  br label %.backedge

55:                                               ; preds = %21
  store i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 0), i8** @iS, align 8
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %57 = call i64 @fread(i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 0), i64 1, i64 262144, %struct._IO_FILE* %56)
  %58 = getelementptr inbounds [262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 %57
  store i8* %58, i8** @iT, align 8
  %59 = load i8*, i8** @iS, align 8
  %60 = icmp eq i8* %59, %58
  store i1 %60, i1* %8, align 1
  %61 = load i32, i32* @x.13, align 4
  %62 = load i32, i32* @y.14, align 4
  %63 = add i32 %61, -1
  %64 = mul i32 %63, %61
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %67, %66
  %69 = select i1 %68, i32 -1557657055, i32 1523869585
  br label %.backedge

70:                                               ; preds = %21
  %.0..0..0.28 = load volatile i1, i1* %8, align 1
  %71 = select i1 %.0..0..0.28, i32 -1356849642, i32 -2064272913
  br label %.backedge

72:                                               ; preds = %21
  %73 = load i32, i32* @x.13, align 4
  %74 = load i32, i32* @y.14, align 4
  %75 = add i32 %73, -1
  %76 = mul i32 %75, %73
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %79, %78
  %81 = select i1 %80, i32 -745660268, i32 135835886
  br label %.backedge

82:                                               ; preds = %21
  %83 = load i32, i32* @x.13, align 4
  %84 = load i32, i32* @y.14, align 4
  %85 = add i32 %83, -1
  %86 = mul i32 %85, %83
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %89, %88
  %91 = select i1 %90, i32 642820844, i32 135835886
  br label %.backedge

92:                                               ; preds = %21
  br label %.backedge

93:                                               ; preds = %21
  %94 = load i8*, i8** @iS, align 8
  %95 = getelementptr inbounds i8, i8* %94, i64 1
  store i8* %95, i8** @iS, align 8
  %96 = load i8, i8* %94, align 1
  %97 = zext i8 %96 to i32
  br label %.backedge

98:                                               ; preds = %21
  br label %.backedge

99:                                               ; preds = %21
  %100 = load i32, i32* @x.13, align 4
  %101 = load i32, i32* @y.14, align 4
  %102 = add i32 %100, -1
  %103 = mul i32 %102, %100
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %106, %105
  %108 = select i1 %107, i32 -1246546845, i32 -647003647
  br label %.backedge

109:                                              ; preds = %21
  %110 = load i8*, i8** @iS, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** @iS, align 8
  %112 = load i8, i8* %110, align 1
  %113 = sext i8 %112 to i32
  store i32 %113, i32* %7, align 4
  %114 = load i32, i32* @x.13, align 4
  %115 = load i32, i32* @y.14, align 4
  %116 = add i32 %114, -1
  %117 = mul i32 %116, %114
  %118 = and i32 %117, 1
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %120, %119
  %122 = select i1 %121, i32 1673264212, i32 -647003647
  br label %.backedge

123:                                              ; preds = %21
  %.0..0..0.29 = load volatile i32, i32* %7, align 4
  br label %.backedge

124:                                              ; preds = %21
  %125 = trunc i32 %.040 to i8
  %.0..0..0.18 = load volatile i8*, i8** %10, align 8
  store i8 %125, i8* %.0..0..0.18, align 1
  %sext = shl i32 %.040, 24
  %126 = ashr exact i32 %sext, 24
  %isdigittmp46 = add nsw i32 %126, -48
  %isdigit47 = icmp ugt i32 %isdigittmp46, 9
  %127 = select i1 %isdigit47, i32 -927935000, i32 2035408360
  br label %.backedge

128:                                              ; preds = %21
  %.0..0..0.19 = load volatile i8*, i8** %10, align 8
  %129 = load i8, i8* %.0..0..0.19, align 1
  %130 = icmp eq i8 %129, 45
  %131 = zext i1 %130 to i8
  %.0..0..0.25 = load volatile i8*, i8** %9, align 8
  %132 = load i8, i8* %.0..0..0.25, align 1
  %133 = or i8 %132, %131
  %.0..0..0.26 = load volatile i8*, i8** %9, align 8
  store i8 %133, i8* %.0..0..0.26, align 1
  br label %.backedge

134:                                              ; preds = %21
  %135 = load i32, i32* @x.13, align 4
  %136 = load i32, i32* @y.14, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 -2107451789, i32 628717484
  br label %.backedge

144:                                              ; preds = %21
  %145 = load i32, i32* @x.13, align 4
  %146 = load i32, i32* @y.14, align 4
  %147 = add i32 %145, -1
  %148 = mul i32 %147, %145
  %149 = and i32 %148, 1
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %151, %150
  %153 = select i1 %152, i32 2104751107, i32 628717484
  br label %.backedge

154:                                              ; preds = %21
  br label %.backedge

155:                                              ; preds = %21
  %.0..0..0.20 = load volatile i8*, i8** %10, align 8
  %156 = load i8, i8* %.0..0..0.20, align 1
  %157 = sext i8 %156 to i32
  %isdigittmp = add nsw i32 %157, -48
  %isdigit = icmp ult i32 %isdigittmp, 10
  %158 = select i1 %isdigit, i32 532902334, i32 -1662934664
  br label %.backedge

159:                                              ; preds = %21
  %160 = load i32, i32* @x.13, align 4
  %161 = load i32, i32* @y.14, align 4
  %162 = add i32 %160, -1
  %163 = mul i32 %162, %160
  %164 = and i32 %163, 1
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %166, %165
  %168 = select i1 %167, i32 516118633, i32 -1093713673
  br label %.backedge

169:                                              ; preds = %21
  %.0..0..0.9 = load volatile i32**, i32*** %11, align 8
  %170 = load i32*, i32** %.0..0..0.9, align 8
  %171 = load i32, i32* %170, align 4
  %172 = mul nsw i32 %171, 10
  %.0..0..0.21 = load volatile i8*, i8** %10, align 8
  %173 = load i8, i8* %.0..0..0.21, align 1
  %174 = xor i8 %173, 48
  %175 = sext i8 %174 to i32
  %176 = add i32 %172, %175
  %.0..0..0.10 = load volatile i32**, i32*** %11, align 8
  %177 = load i32*, i32** %.0..0..0.10, align 8
  store i32 %176, i32* %177, align 4
  %178 = load i8*, i8** @iS, align 8
  %179 = load i8*, i8** @iT, align 8
  %180 = icmp eq i8* %178, %179
  store i1 %180, i1* %6, align 1
  %181 = load i32, i32* @x.13, align 4
  %182 = load i32, i32* @y.14, align 4
  %183 = add i32 %181, -1
  %184 = mul i32 %183, %181
  %185 = and i32 %184, 1
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %187, %186
  %189 = select i1 %188, i32 -3144440, i32 -1093713673
  br label %.backedge

190:                                              ; preds = %21
  %.0..0..0.30 = load volatile i1, i1* %6, align 1
  %191 = select i1 %.0..0..0.30, i32 -1130795864, i32 -677125064
  br label %.backedge

192:                                              ; preds = %21
  %193 = load i32, i32* @x.13, align 4
  %194 = load i32, i32* @y.14, align 4
  %195 = add i32 %193, -1
  %196 = mul i32 %195, %193
  %197 = and i32 %196, 1
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %199, %198
  %201 = select i1 %200, i32 -1652304072, i32 -1431165673
  br label %.backedge

202:                                              ; preds = %21
  store i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 0), i8** @iS, align 8
  %203 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %204 = call i64 @fread(i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 0), i64 1, i64 262144, %struct._IO_FILE* %203)
  %205 = getelementptr inbounds [262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 %204
  store i8* %205, i8** @iT, align 8
  %206 = load i8*, i8** @iS, align 8
  %207 = icmp eq i8* %206, %205
  store i1 %207, i1* %5, align 1
  %208 = load i32, i32* @x.13, align 4
  %209 = load i32, i32* @y.14, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 -1912995482, i32 -1431165673
  br label %.backedge

217:                                              ; preds = %21
  %.0..0..0.31 = load volatile i1, i1* %5, align 1
  %218 = select i1 %.0..0..0.31, i32 249969816, i32 1822123791
  br label %.backedge

219:                                              ; preds = %21
  br label %.backedge

220:                                              ; preds = %21
  %221 = load i8*, i8** @iS, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 1
  store i8* %222, i8** @iS, align 8
  %223 = load i8, i8* %221, align 1
  %224 = sext i8 %223 to i32
  br label %.backedge

225:                                              ; preds = %21
  store i32 %.038, i32* %3, align 4
  %226 = load i32, i32* @x.13, align 4
  %227 = load i32, i32* @y.14, align 4
  %228 = add i32 %226, -1
  %229 = mul i32 %228, %226
  %230 = and i32 %229, 1
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %232, %231
  %234 = select i1 %233, i32 1844497853, i32 -950838509
  br label %.backedge

235:                                              ; preds = %21
  %236 = load i32, i32* @x.13, align 4
  %237 = load i32, i32* @y.14, align 4
  %238 = add i32 %236, -1
  %239 = mul i32 %238, %236
  %240 = and i32 %239, 1
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %242, %241
  %244 = select i1 %243, i32 2039666993, i32 -950838509
  br label %.backedge

245:                                              ; preds = %21
  %.0..0..0.33 = load volatile i32, i32* %3, align 4
  br label %.backedge

246:                                              ; preds = %21
  %247 = load i8*, i8** @iS, align 8
  %248 = getelementptr inbounds i8, i8* %247, i64 1
  store i8* %248, i8** @iS, align 8
  %249 = load i8, i8* %247, align 1
  %250 = zext i8 %249 to i32
  br label %.backedge

251:                                              ; preds = %21
  %252 = trunc i32 %.036 to i8
  %.0..0..0.22 = load volatile i8*, i8** %10, align 8
  store i8 %252, i8* %.0..0..0.22, align 1
  br label %.backedge

253:                                              ; preds = %21
  %.0..0..0.27 = load volatile i8*, i8** %9, align 8
  %254 = load i8, i8* %.0..0..0.27, align 1
  %.not = icmp eq i8 %254, 0
  %255 = select i1 %.not, i32 113596214, i32 388723694
  br label %.backedge

256:                                              ; preds = %21
  %.0..0..0.11 = load volatile i32**, i32*** %11, align 8
  %257 = load i32*, i32** %.0..0..0.11, align 8
  %258 = load i32, i32* %257, align 4
  %259 = sub i32 0, %258
  br label %.backedge

260:                                              ; preds = %21
  %261 = load i32, i32* @x.13, align 4
  %262 = load i32, i32* @y.14, align 4
  %263 = add i32 %261, -1
  %264 = mul i32 %263, %261
  %265 = and i32 %264, 1
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %267, %266
  %269 = select i1 %268, i32 -1883136286, i32 -380444682
  br label %.backedge

270:                                              ; preds = %21
  %.0..0..0.12 = load volatile i32**, i32*** %11, align 8
  %271 = load i32*, i32** %.0..0..0.12, align 8
  %272 = load i32, i32* %271, align 4
  store i32 %272, i32* %4, align 4
  %273 = load i32, i32* @x.13, align 4
  %274 = load i32, i32* @y.14, align 4
  %275 = add i32 %273, -1
  %276 = mul i32 %275, %273
  %277 = and i32 %276, 1
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %279, %278
  %281 = select i1 %280, i32 -1248584785, i32 -380444682
  br label %.backedge

282:                                              ; preds = %21
  %.0..0..0.32 = load volatile i32, i32* %4, align 4
  br label %.backedge

283:                                              ; preds = %21
  store i32 %.0, i32* %2, align 4
  %284 = load i32, i32* @x.13, align 4
  %285 = load i32, i32* @y.14, align 4
  %286 = add i32 %284, -1
  %287 = mul i32 %286, %284
  %288 = and i32 %287, 1
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %290, %289
  %292 = select i1 %291, i32 -1853233367, i32 2021825246
  br label %.backedge

293:                                              ; preds = %21
  %.0..0..0.13 = load volatile i32**, i32*** %11, align 8
  %294 = load i32*, i32** %.0..0..0.13, align 8
  %.0..0..0.34 = load volatile i32, i32* %2, align 4
  store i32 %.0..0..0.34, i32* %294, align 4
  %295 = load i32, i32* @x.13, align 4
  %296 = load i32, i32* @y.14, align 4
  %297 = add i32 %295, -1
  %298 = mul i32 %297, %295
  %299 = and i32 %298, 1
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %301, %300
  %303 = select i1 %302, i32 -1373117284, i32 2021825246
  br label %.backedge

304:                                              ; preds = %21
  ret void

305:                                              ; preds = %21
  store i32 0, i32* %0, align 4
  br label %.backedge

306:                                              ; preds = %21
  store i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 0), i8** @iS, align 8
  %307 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %308 = call i64 @fread(i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 0), i64 1, i64 262144, %struct._IO_FILE* %307)
  %309 = getelementptr inbounds [262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 %308
  store i8* %309, i8** @iT, align 8
  br label %.backedge

310:                                              ; preds = %21
  br label %.backedge

311:                                              ; preds = %21
  %312 = load i8*, i8** @iS, align 8
  %313 = getelementptr inbounds i8, i8* %312, i64 1
  store i8* %313, i8** @iS, align 8
  br label %.backedge

314:                                              ; preds = %21
  br label %.backedge

315:                                              ; preds = %21
  %.0..0..0.14 = load volatile i32**, i32*** %11, align 8
  %316 = load i32*, i32** %.0..0..0.14, align 8
  %317 = load i32, i32* %316, align 4
  %318 = mul nsw i32 %317, 10
  %.0..0..0.23 = load volatile i8*, i8** %10, align 8
  %319 = load i8, i8* %.0..0..0.23, align 1
  %320 = xor i8 %319, 48
  %321 = sext i8 %320 to i32
  %322 = add i32 %318, %321
  %.0..0..0.15 = load volatile i32**, i32*** %11, align 8
  %323 = load i32*, i32** %.0..0..0.15, align 8
  store i32 %322, i32* %323, align 4
  br label %.backedge

324:                                              ; preds = %21
  store i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 0), i8** @iS, align 8
  %325 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %326 = call i64 @fread(i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 0), i64 1, i64 262144, %struct._IO_FILE* %325)
  %327 = getelementptr inbounds [262144 x i8], [262144 x i8]* @ibuf, i64 0, i64 %326
  store i8* %327, i8** @iT, align 8
  br label %.backedge

328:                                              ; preds = %21
  br label %.backedge

329:                                              ; preds = %21
  %.0..0..0.16 = load volatile i32**, i32*** %11, align 8
  br label %.backedge

330:                                              ; preds = %21
  %.0..0..0.17 = load volatile i32**, i32*** %11, align 8
  %331 = load i32*, i32** %.0..0..0.17, align 8
  %.0..0..0.35 = load volatile i32, i32* %2, align 4
  store i32 %.0..0..0.35, i32* %331, align 4
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i64 @fread(i8* nocapture noundef, i64 noundef, i64 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s304578093.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #8

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
