; ModuleID = 'build_ollvm/programs/p03247/s573248641.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s573248641.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z5checkxxx = comdat any

$_ZSt3absx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@ax = global [1005 x i32] zeroinitializer, align 16
@ay = global [1005 x i32] zeroinitializer, align 16
@p = local_unnamed_addr global [1005 x i64] zeroinitializer, align 16
@q = local_unnamed_addr global [1005 x i64] zeroinitializer, align 16
@ans = global [1005 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%lld \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s573248641.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i32, align 4
  %9 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %8)
  br label %10

10:                                               ; preds = %.backedge, %0
  %.0109 = phi i32 [ 1, %0 ], [ %.0109.be, %.backedge ]
  %.0107 = phi i32 [ undef, %0 ], [ %.0107.be, %.backedge ]
  %.0105 = phi i32 [ undef, %0 ], [ %.0105.be, %.backedge ]
  %.0103 = phi i32 [ undef, %0 ], [ %.0103.be, %.backedge ]
  %.0101 = phi i32 [ 0, %0 ], [ %.0101.be, %.backedge ]
  %.099 = phi i64 [ undef, %0 ], [ %.099.be, %.backedge ]
  %.097 = phi i64 [ undef, %0 ], [ %.097.be, %.backedge ]
  %.0 = phi i32 [ -820856271, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -820856271, label %11
    i32 842832988, label %14
    i32 1998230781, label %24
    i32 -1542262181, label %44
    i32 -1810520158, label %46
    i32 1815530252, label %56
    i32 1380181643, label %67
    i32 1056908281, label %68
    i32 -214521403, label %78
    i32 -1799316490, label %90
    i32 -475397603, label %92
    i32 8421481, label %94
    i32 530945920, label %95
    i32 -1202840837, label %105
    i32 418319723, label %115
    i32 1971488655, label %116
    i32 -128512721, label %126
    i32 2032471158, label %140
    i32 1363071870, label %142
    i32 -1613484909, label %143
    i32 -912723123, label %153
    i32 -640457883, label %163
    i32 2044158816, label %164
    i32 -1119208154, label %166
    i32 -626859893, label %168
    i32 1879239562, label %178
    i32 -1665638555, label %188
    i32 -2068625166, label %189
    i32 1216729547, label %199
    i32 -345677483, label %210
    i32 1862262303, label %212
    i32 -791084495, label %221
    i32 1160055041, label %231
    i32 614532329, label %242
    i32 742783103, label %243
    i32 -1438928900, label %244
    i32 -2013091549, label %254
    i32 1834434502, label %264
    i32 1429956569, label %265
    i32 -1795240241, label %275
    i32 -1559946954, label %287
    i32 1760346620, label %289
    i32 2033829547, label %299
    i32 933192002, label %309
    i32 1709815377, label %319
    i32 853469969, label %320
    i32 -1643078743, label %322
    i32 1220228156, label %332
    i32 807396491, label %343
    i32 -1620202701, label %344
    i32 -1756150537, label %346
    i32 1282773950, label %351
    i32 1275418802, label %361
    i32 426034177, label %371
    i32 914943449, label %372
    i32 -772430110, label %373
    i32 927571387, label %376
    i32 1585468341, label %384
    i32 -829451205, label %394
    i32 -1390106698, label %405
    i32 -2032437931, label %407
    i32 -775942940, label %417
    i32 -1878493790, label %436
    i32 969691270, label %438
    i32 310873264, label %444
    i32 1957180232, label %455
    i32 848891073, label %461
    i32 -1308906152, label %472
    i32 -1700696087, label %478
    i32 1790532190, label %484
    i32 13598709, label %485
    i32 -1040077863, label %486
    i32 -1274278695, label %487
    i32 938286694, label %489
    i32 465695691, label %493
    i32 1452819305, label %495
    i32 481530373, label %496
    i32 557228187, label %497
    i32 327991187, label %507
    i32 -1015290760, label %509
    i32 -1857678460, label %510
    i32 563859449, label %511
    i32 -1962228748, label %512
    i32 -593309443, label %513
    i32 1829988318, label %514
    i32 -2071012663, label %515
    i32 1837310361, label %517
    i32 1195926685, label %518
    i32 913409616, label %519
    i32 -145487992, label %520
    i32 -86744896, label %522
    i32 -1755940117, label %523
    i32 -740571364, label %524
  ]

.backedge:                                        ; preds = %10, %524, %523, %522, %520, %519, %518, %517, %515, %514, %513, %512, %511, %510, %509, %507, %497, %495, %493, %489, %487, %486, %485, %484, %478, %472, %461, %455, %444, %438, %436, %417, %407, %405, %394, %384, %376, %373, %372, %371, %361, %351, %346, %344, %343, %332, %322, %320, %319, %309, %299, %289, %287, %275, %265, %264, %254, %244, %243, %242, %231, %221, %212, %210, %199, %189, %188, %178, %168, %166, %164, %163, %153, %143, %142, %140, %126, %116, %115, %105, %95, %94, %92, %90, %78, %68, %67, %56, %46, %44, %24, %14, %11
  %.0109.be = phi i32 [ %.0109, %10 ], [ %.0109, %524 ], [ %.0109, %523 ], [ %.neg, %522 ], [ 1, %520 ], [ %.neg113, %519 ], [ %.0109, %518 ], [ 2, %517 ], [ %516, %515 ], [ %.0109, %514 ], [ 1, %513 ], [ %.0109, %512 ], [ %.0109, %511 ], [ %.0109, %510 ], [ %.0109, %509 ], [ %.0109, %507 ], [ %.0109, %497 ], [ %.0109, %495 ], [ %494, %493 ], [ %.0109, %489 ], [ %.0109, %487 ], [ %.0109, %486 ], [ %.0109, %485 ], [ %.0109, %484 ], [ %.0109, %478 ], [ %.0109, %472 ], [ %.0109, %461 ], [ %.0109, %455 ], [ %.0109, %444 ], [ %.0109, %438 ], [ %.0109, %436 ], [ %.0109, %417 ], [ %.0109, %407 ], [ %.0109, %405 ], [ %.0109, %394 ], [ %.0109, %384 ], [ %.0109, %376 ], [ %.0109, %373 ], [ 1, %372 ], [ %.0109, %371 ], [ %.neg114, %361 ], [ %.0109, %351 ], [ %.0109, %346 ], [ %.0109, %344 ], [ %.0109, %343 ], [ 1, %332 ], [ %.0109, %322 ], [ %.0109, %320 ], [ %.0109, %319 ], [ %.neg116, %309 ], [ %.0109, %299 ], [ %.0109, %289 ], [ %.0109, %287 ], [ %.0109, %275 ], [ %.0109, %265 ], [ %.0109, %264 ], [ 2, %254 ], [ %.0109, %244 ], [ %.0109, %243 ], [ %.0109, %242 ], [ %232, %231 ], [ %.0109, %221 ], [ %.0109, %212 ], [ %.0109, %210 ], [ %.0109, %199 ], [ %.0109, %189 ], [ %.0109, %188 ], [ 1, %178 ], [ %.0109, %168 ], [ %.0109, %166 ], [ %165, %164 ], [ %.0109, %163 ], [ %.0109, %153 ], [ %.0109, %143 ], [ %.0109, %142 ], [ %.0109, %140 ], [ %.0109, %126 ], [ %.0109, %116 ], [ %.0109, %115 ], [ %.0109, %105 ], [ %.0109, %95 ], [ %.0109, %94 ], [ %.0109, %92 ], [ %.0109, %90 ], [ %.0109, %78 ], [ %.0109, %68 ], [ %.0109, %67 ], [ %.0109, %56 ], [ %.0109, %46 ], [ %.0109, %44 ], [ %.0109, %24 ], [ %.0109, %14 ], [ %.0109, %11 ]
  %.0107.be = phi i32 [ %.0107, %10 ], [ %.0107, %524 ], [ %.0107, %523 ], [ %.0107, %522 ], [ %.0107, %520 ], [ %.0107, %519 ], [ %.0107, %518 ], [ %.0107, %517 ], [ %.0107, %515 ], [ %.0107, %514 ], [ %.0107, %513 ], [ %.0107, %512 ], [ %.0107, %511 ], [ %.0107, %510 ], [ %.0107, %509 ], [ %.0107, %507 ], [ %.0107, %497 ], [ %.0107, %495 ], [ %.0107, %493 ], [ %.0107, %489 ], [ %488, %487 ], [ %.0107, %486 ], [ %.0107, %485 ], [ %.0107, %484 ], [ %.0107, %478 ], [ %.0107, %472 ], [ %.0107, %461 ], [ %.0107, %455 ], [ %.0107, %444 ], [ %.0107, %438 ], [ %.0107, %436 ], [ %.0107, %417 ], [ %.0107, %407 ], [ %.0107, %405 ], [ %.0107, %394 ], [ %.0107, %384 ], [ %.0101, %376 ], [ %.0107, %373 ], [ %.0107, %372 ], [ %.0107, %371 ], [ %.0107, %361 ], [ %.0107, %351 ], [ %.0107, %346 ], [ %.0107, %344 ], [ %.0107, %343 ], [ %.0107, %332 ], [ %.0107, %322 ], [ %.0107, %320 ], [ %.0107, %319 ], [ %.0107, %309 ], [ %.0107, %299 ], [ %.0107, %289 ], [ %.0107, %287 ], [ %.0107, %275 ], [ %.0107, %265 ], [ %.0107, %264 ], [ %.0107, %254 ], [ %.0107, %244 ], [ %.0107, %243 ], [ %.0107, %242 ], [ %.0107, %231 ], [ %.0107, %221 ], [ %.0107, %212 ], [ %.0107, %210 ], [ %.0107, %199 ], [ %.0107, %189 ], [ %.0107, %188 ], [ %.0107, %178 ], [ %.0107, %168 ], [ %.0107, %166 ], [ %.0107, %164 ], [ %.0107, %163 ], [ %.0107, %153 ], [ %.0107, %143 ], [ %.0107, %142 ], [ %.0107, %140 ], [ %.0107, %126 ], [ %.0107, %116 ], [ %.0107, %115 ], [ %.0107, %105 ], [ %.0107, %95 ], [ %.0107, %94 ], [ %.0107, %92 ], [ %.0107, %90 ], [ %.0107, %78 ], [ %.0107, %68 ], [ %.0107, %67 ], [ %.0107, %56 ], [ %.0107, %46 ], [ %.0107, %44 ], [ %.0107, %24 ], [ %.0107, %14 ], [ %.0107, %11 ]
  %.0105.be = phi i32 [ %.0105, %10 ], [ %.0105, %524 ], [ %.0105, %523 ], [ %.0105, %522 ], [ %.0105, %520 ], [ %.0105, %519 ], [ %.0105, %518 ], [ %.0105, %517 ], [ %.0105, %515 ], [ %.0105, %514 ], [ %.0105, %513 ], [ %.0105, %512 ], [ %.0105, %511 ], [ %.0105, %510 ], [ %.0105, %509 ], [ %508, %507 ], [ %.0105, %497 ], [ %.0105, %495 ], [ %.0105, %493 ], [ %.0105, %489 ], [ %.0105, %487 ], [ %.0105, %486 ], [ %.0105, %485 ], [ %.0105, %484 ], [ %.0105, %478 ], [ %.0105, %472 ], [ %.0105, %461 ], [ %.0105, %455 ], [ %.0105, %444 ], [ %.0105, %438 ], [ %.0105, %436 ], [ %.0105, %417 ], [ %.0105, %407 ], [ %.0105, %405 ], [ %.0105, %394 ], [ %.0105, %384 ], [ %.0105, %376 ], [ %.0105, %373 ], [ %.0105, %372 ], [ %.0105, %371 ], [ %.0105, %361 ], [ %.0105, %351 ], [ %.0105, %346 ], [ %.0105, %344 ], [ %.0105, %343 ], [ %.0105, %332 ], [ %.0105, %322 ], [ %.0105, %320 ], [ %.0105, %319 ], [ %.0105, %309 ], [ %.0105, %299 ], [ %.0105, %289 ], [ %.0105, %287 ], [ %.0105, %275 ], [ %.0105, %265 ], [ %.0105, %264 ], [ %.0105, %254 ], [ %.0105, %244 ], [ %.0105, %243 ], [ %.0105, %242 ], [ %.0105, %231 ], [ %.0105, %221 ], [ %.0105, %212 ], [ %.0105, %210 ], [ %.0105, %199 ], [ %.0105, %189 ], [ %.0105, %188 ], [ %.0105, %178 ], [ %.0105, %168 ], [ %.0105, %166 ], [ %.0105, %164 ], [ %.0105, %163 ], [ %.0105, %153 ], [ %.0105, %143 ], [ %.0105, %142 ], [ %.0105, %140 ], [ %.0105, %126 ], [ %.0105, %116 ], [ %.0105, %115 ], [ %.0105, %105 ], [ %.0105, %95 ], [ %.0105, %94 ], [ %.0105, %92 ], [ %.0105, %90 ], [ %.0105, %78 ], [ %.0105, %68 ], [ %.0105, %67 ], [ %57, %56 ], [ %.0105, %46 ], [ %.0105, %44 ], [ %.0105, %24 ], [ %.0105, %14 ], [ %.0105, %11 ]
  %.0103.be = phi i32 [ %.0103, %10 ], [ %.0103, %524 ], [ %.0103, %523 ], [ %.0103, %522 ], [ %.0103, %520 ], [ %.0103, %519 ], [ %.0103, %518 ], [ %.0103, %517 ], [ %.0103, %515 ], [ %.0103, %514 ], [ %.0103, %513 ], [ %.0103, %512 ], [ %.0103, %511 ], [ %.0103, %510 ], [ %.0103, %509 ], [ %.0103, %507 ], [ %506, %497 ], [ %.0103, %495 ], [ %.0103, %493 ], [ %.0103, %489 ], [ %.0103, %487 ], [ %.0103, %486 ], [ %.0103, %485 ], [ %.0103, %484 ], [ %.0103, %478 ], [ %.0103, %472 ], [ %.0103, %461 ], [ %.0103, %455 ], [ %.0103, %444 ], [ %.0103, %438 ], [ %.0103, %436 ], [ %.0103, %417 ], [ %.0103, %407 ], [ %.0103, %405 ], [ %.0103, %394 ], [ %.0103, %384 ], [ %.0103, %376 ], [ %.0103, %373 ], [ %.0103, %372 ], [ %.0103, %371 ], [ %.0103, %361 ], [ %.0103, %351 ], [ %.0103, %346 ], [ %.0103, %344 ], [ %.0103, %343 ], [ %.0103, %332 ], [ %.0103, %322 ], [ %.0103, %320 ], [ %.0103, %319 ], [ %.0103, %309 ], [ %.0103, %299 ], [ %.0103, %289 ], [ %.0103, %287 ], [ %.0103, %275 ], [ %.0103, %265 ], [ %.0103, %264 ], [ %.0103, %254 ], [ %.0103, %244 ], [ %.0103, %243 ], [ %.0103, %242 ], [ %.0103, %231 ], [ %.0103, %221 ], [ %.0103, %212 ], [ %.0103, %210 ], [ %.0103, %199 ], [ %.0103, %189 ], [ %.0103, %188 ], [ %.0103, %178 ], [ %.0103, %168 ], [ %.0103, %166 ], [ %.0103, %164 ], [ %.0103, %163 ], [ %.0103, %153 ], [ %.0103, %143 ], [ %.0103, %142 ], [ %.0103, %140 ], [ %.0103, %126 ], [ %.0103, %116 ], [ %.0103, %115 ], [ %.0103, %105 ], [ %.0103, %95 ], [ %.0103, %94 ], [ %.0103, %92 ], [ %.0103, %90 ], [ %.0103, %78 ], [ %.0103, %68 ], [ %.0103, %67 ], [ %.0103, %56 ], [ %.0103, %46 ], [ %.0103, %44 ], [ %33, %24 ], [ %.0103, %14 ], [ %.0103, %11 ]
  %.0101.be = phi i32 [ %.0101, %10 ], [ %.0101, %524 ], [ %.0101, %523 ], [ %.0101, %522 ], [ %.0101, %520 ], [ %.0101, %519 ], [ %.0101, %518 ], [ %.0101, %517 ], [ %.0101, %515 ], [ %.0101, %514 ], [ %.0101, %513 ], [ %.0101, %512 ], [ %.0101, %511 ], [ %.0101, %510 ], [ %.0101, %509 ], [ %.0101, %507 ], [ %.0101, %497 ], [ %.0101, %495 ], [ %.0101, %493 ], [ %.0101, %489 ], [ %.0101, %487 ], [ %.0101, %486 ], [ %.0101, %485 ], [ %.0101, %484 ], [ %.0101, %478 ], [ %.0101, %472 ], [ %.0101, %461 ], [ %.0101, %455 ], [ %.0101, %444 ], [ %.0101, %438 ], [ %.0101, %436 ], [ %.0101, %417 ], [ %.0101, %407 ], [ %.0101, %405 ], [ %.0101, %394 ], [ %.0101, %384 ], [ %.0101, %376 ], [ %.0101, %373 ], [ %.0101, %372 ], [ %.0101, %371 ], [ %.0101, %361 ], [ %.0101, %351 ], [ %.0101, %346 ], [ %.0101, %344 ], [ %.0101, %343 ], [ %.0101, %332 ], [ %.0101, %322 ], [ %321, %320 ], [ %.0101, %319 ], [ %.0101, %309 ], [ %.0101, %299 ], [ %.0101, %289 ], [ %.0101, %287 ], [ %.0101, %275 ], [ %.0101, %265 ], [ %.0101, %264 ], [ %.0101, %254 ], [ %.0101, %244 ], [ %.0101, %243 ], [ %.0101, %242 ], [ %.0101, %231 ], [ %.0101, %221 ], [ %.0101, %212 ], [ %.0101, %210 ], [ %.0101, %199 ], [ %.0101, %189 ], [ %.0101, %188 ], [ %.0101, %178 ], [ %.0101, %168 ], [ %.0101, %166 ], [ %.0101, %164 ], [ %.0101, %163 ], [ %.0101, %153 ], [ %.0101, %143 ], [ %.neg118, %142 ], [ %.0101, %140 ], [ %.0101, %126 ], [ %.0101, %116 ], [ %.0101, %115 ], [ %.0101, %105 ], [ %.0101, %95 ], [ %.0101, %94 ], [ %.0101, %92 ], [ %.0101, %90 ], [ %.0101, %78 ], [ %.0101, %68 ], [ %.0101, %67 ], [ %.0101, %56 ], [ %.0101, %46 ], [ %.0101, %44 ], [ %.0101, %24 ], [ %.0101, %14 ], [ %.0101, %11 ]
  %.099.be = phi i64 [ %.099, %10 ], [ %.099, %524 ], [ %.099, %523 ], [ %.099, %522 ], [ %.099, %520 ], [ %.099, %519 ], [ %.099, %518 ], [ %.099, %517 ], [ %.099, %515 ], [ %.099, %514 ], [ %.099, %513 ], [ %.099, %512 ], [ %.099, %511 ], [ %.099, %510 ], [ %.099, %509 ], [ %.099, %507 ], [ %.099, %497 ], [ %.099, %495 ], [ %.099, %493 ], [ %.099, %489 ], [ %.099, %487 ], [ %.099, %486 ], [ %.099, %485 ], [ %.099, %484 ], [ %.099, %478 ], [ %.099, %472 ], [ %.099, %461 ], [ %459, %455 ], [ %.099, %444 ], [ %442, %438 ], [ %.099, %436 ], [ %.099, %417 ], [ %.099, %407 ], [ %.099, %405 ], [ %.099, %394 ], [ %.099, %384 ], [ %380, %376 ], [ %.099, %373 ], [ %.099, %372 ], [ %.099, %371 ], [ %.099, %361 ], [ %.099, %351 ], [ %.099, %346 ], [ %.099, %344 ], [ %.099, %343 ], [ %.099, %332 ], [ %.099, %322 ], [ %.099, %320 ], [ %.099, %319 ], [ %.099, %309 ], [ %.099, %299 ], [ %.099, %289 ], [ %.099, %287 ], [ %.099, %275 ], [ %.099, %265 ], [ %.099, %264 ], [ %.099, %254 ], [ %.099, %244 ], [ %.099, %243 ], [ %.099, %242 ], [ %.099, %231 ], [ %.099, %221 ], [ %.099, %212 ], [ %.099, %210 ], [ %.099, %199 ], [ %.099, %189 ], [ %.099, %188 ], [ %.099, %178 ], [ %.099, %168 ], [ %.099, %166 ], [ %.099, %164 ], [ %.099, %163 ], [ %.099, %153 ], [ %.099, %143 ], [ %.099, %142 ], [ %.099, %140 ], [ %.099, %126 ], [ %.099, %116 ], [ %.099, %115 ], [ %.099, %105 ], [ %.099, %95 ], [ %.099, %94 ], [ %.099, %92 ], [ %.099, %90 ], [ %.099, %78 ], [ %.099, %68 ], [ %.099, %67 ], [ %.099, %56 ], [ %.099, %46 ], [ %.099, %44 ], [ %.099, %24 ], [ %.099, %14 ], [ %.099, %11 ]
  %.097.be = phi i64 [ %.097, %10 ], [ %.097, %524 ], [ %.097, %523 ], [ %.097, %522 ], [ %.097, %520 ], [ %.097, %519 ], [ %.097, %518 ], [ %.097, %517 ], [ %.097, %515 ], [ %.097, %514 ], [ %.097, %513 ], [ %.097, %512 ], [ %.097, %511 ], [ %.097, %510 ], [ %.097, %509 ], [ %.097, %507 ], [ %.097, %497 ], [ %.097, %495 ], [ %.097, %493 ], [ %.097, %489 ], [ %.097, %487 ], [ %.097, %486 ], [ %.097, %485 ], [ %.097, %484 ], [ %482, %478 ], [ %476, %472 ], [ %.097, %461 ], [ %.097, %455 ], [ %.097, %444 ], [ %.097, %438 ], [ %.097, %436 ], [ %.097, %417 ], [ %.097, %407 ], [ %.097, %405 ], [ %.097, %394 ], [ %.097, %384 ], [ %383, %376 ], [ %.097, %373 ], [ %.097, %372 ], [ %.097, %371 ], [ %.097, %361 ], [ %.097, %351 ], [ %.097, %346 ], [ %.097, %344 ], [ %.097, %343 ], [ %.097, %332 ], [ %.097, %322 ], [ %.097, %320 ], [ %.097, %319 ], [ %.097, %309 ], [ %.097, %299 ], [ %.097, %289 ], [ %.097, %287 ], [ %.097, %275 ], [ %.097, %265 ], [ %.097, %264 ], [ %.097, %254 ], [ %.097, %244 ], [ %.097, %243 ], [ %.097, %242 ], [ %.097, %231 ], [ %.097, %221 ], [ %.097, %212 ], [ %.097, %210 ], [ %.097, %199 ], [ %.097, %189 ], [ %.097, %188 ], [ %.097, %178 ], [ %.097, %168 ], [ %.097, %166 ], [ %.097, %164 ], [ %.097, %163 ], [ %.097, %153 ], [ %.097, %143 ], [ %.097, %142 ], [ %.097, %140 ], [ %.097, %126 ], [ %.097, %116 ], [ %.097, %115 ], [ %.097, %105 ], [ %.097, %95 ], [ %.097, %94 ], [ %.097, %92 ], [ %.097, %90 ], [ %.097, %78 ], [ %.097, %68 ], [ %.097, %67 ], [ %.097, %56 ], [ %.097, %46 ], [ %.097, %44 ], [ %.097, %24 ], [ %.097, %14 ], [ %.097, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ -775942940, %524 ], [ -829451205, %523 ], [ 1275418802, %522 ], [ 1220228156, %520 ], [ 933192002, %519 ], [ -1795240241, %518 ], [ -2013091549, %517 ], [ 1160055041, %515 ], [ 1216729547, %514 ], [ 1879239562, %513 ], [ -912723123, %512 ], [ -128512721, %511 ], [ -1202840837, %510 ], [ -214521403, %509 ], [ 1815530252, %507 ], [ 1998230781, %497 ], [ 481530373, %495 ], [ -772430110, %493 ], [ 465695691, %489 ], [ 1585468341, %487 ], [ -1274278695, %486 ], [ -1040077863, %485 ], [ 13598709, %484 ], [ 1790532190, %478 ], [ 1790532190, %472 ], [ %471, %461 ], [ 13598709, %455 ], [ %454, %444 ], [ -1040077863, %438 ], [ %437, %436 ], [ %435, %417 ], [ %416, %407 ], [ %406, %405 ], [ %404, %394 ], [ %393, %384 ], [ 1585468341, %376 ], [ %375, %373 ], [ -772430110, %372 ], [ -1620202701, %371 ], [ %370, %361 ], [ %360, %351 ], [ 1282773950, %346 ], [ %345, %344 ], [ -1620202701, %343 ], [ %342, %332 ], [ %331, %322 ], [ -1643078743, %320 ], [ 1429956569, %319 ], [ %318, %309 ], [ %308, %299 ], [ 2033829547, %289 ], [ %288, %287 ], [ %286, %275 ], [ %274, %265 ], [ 1429956569, %264 ], [ %263, %254 ], [ %253, %244 ], [ -1643078743, %243 ], [ -2068625166, %242 ], [ %241, %231 ], [ %230, %221 ], [ -791084495, %212 ], [ %211, %210 ], [ %209, %199 ], [ %198, %189 ], [ -2068625166, %188 ], [ %187, %178 ], [ %177, %168 ], [ %167, %166 ], [ -820856271, %164 ], [ 2044158816, %163 ], [ %162, %153 ], [ %152, %143 ], [ 1971488655, %142 ], [ %141, %140 ], [ %139, %126 ], [ %125, %116 ], [ 1971488655, %115 ], [ %114, %105 ], [ %104, %95 ], [ 530945920, %94 ], [ 481530373, %92 ], [ %91, %90 ], [ %89, %78 ], [ %77, %68 ], [ 530945920, %67 ], [ %66, %56 ], [ %55, %46 ], [ %45, %44 ], [ %43, %24 ], [ %23, %14 ], [ %13, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = load i32, i32* %8, align 4
  %.not120 = icmp sgt i32 %.0109, %12
  %13 = select i1 %.not120, i32 -1119208154, i32 842832988
  br label %.backedge

14:                                               ; preds = %10
  %15 = load i32, i32* @x.7, align 4
  %16 = load i32, i32* @y.8, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 1998230781, i32 557228187
  br label %.backedge

24:                                               ; preds = %10
  %25 = sext i32 %.0109 to i64
  %26 = getelementptr inbounds [1005 x i32], [1005 x i32]* @ax, i64 0, i64 %25
  %27 = getelementptr inbounds [1005 x i32], [1005 x i32]* @ay, i64 0, i64 %25
  %28 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %26, i32* nonnull %27)
  %29 = load i32, i32* %26, align 4
  %30 = call i32 @llvm.abs.i32(i32 %29, i1 true)
  %31 = load i32, i32* %27, align 4
  %32 = call i32 @llvm.abs.i32(i32 %31, i1 true)
  %33 = add nuw i32 %32, %30
  %34 = icmp eq i32 %.0109, 1
  store i1 %34, i1* %7, align 1
  %35 = load i32, i32* @x.7, align 4
  %36 = load i32, i32* @y.8, align 4
  %37 = add i32 %35, -1
  %38 = mul i32 %37, %35
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %41, %40
  %43 = select i1 %42, i32 -1542262181, i32 557228187
  br label %.backedge

44:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %7, align 1
  %45 = select i1 %.0..0..0., i32 -1810520158, i32 1056908281
  br label %.backedge

46:                                               ; preds = %10
  %47 = load i32, i32* @x.7, align 4
  %48 = load i32, i32* @y.8, align 4
  %49 = add i32 %47, -1
  %50 = mul i32 %49, %47
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %53, %52
  %55 = select i1 %54, i32 1815530252, i32 327991187
  br label %.backedge

56:                                               ; preds = %10
  %57 = and i32 %.0103, 1
  %58 = load i32, i32* @x.7, align 4
  %59 = load i32, i32* @y.8, align 4
  %60 = add i32 %58, -1
  %61 = mul i32 %60, %58
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %64, %63
  %66 = select i1 %65, i32 1380181643, i32 327991187
  br label %.backedge

67:                                               ; preds = %10
  br label %.backedge

68:                                               ; preds = %10
  %69 = load i32, i32* @x.7, align 4
  %70 = load i32, i32* @y.8, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 -214521403, i32 -1015290760
  br label %.backedge

78:                                               ; preds = %10
  %79 = and i32 %.0103, 1
  %80 = icmp ne i32 %79, %.0105
  store i1 %80, i1* %6, align 1
  %81 = load i32, i32* @x.7, align 4
  %82 = load i32, i32* @y.8, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 -1799316490, i32 -1015290760
  br label %.backedge

90:                                               ; preds = %10
  %.0..0..0.91 = load volatile i1, i1* %6, align 1
  %91 = select i1 %.0..0..0.91, i32 -475397603, i32 8421481
  br label %.backedge

92:                                               ; preds = %10
  %93 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  br label %.backedge

94:                                               ; preds = %10
  br label %.backedge

95:                                               ; preds = %10
  %96 = load i32, i32* @x.7, align 4
  %97 = load i32, i32* @y.8, align 4
  %98 = add i32 %96, -1
  %99 = mul i32 %98, %96
  %100 = and i32 %99, 1
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %102, %101
  %104 = select i1 %103, i32 -1202840837, i32 -1857678460
  br label %.backedge

105:                                              ; preds = %10
  %106 = load i32, i32* @x.7, align 4
  %107 = load i32, i32* @y.8, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 418319723, i32 -1857678460
  br label %.backedge

115:                                              ; preds = %10
  br label %.backedge

116:                                              ; preds = %10
  %117 = load i32, i32* @x.7, align 4
  %118 = load i32, i32* @y.8, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 -128512721, i32 563859449
  br label %.backedge

126:                                              ; preds = %10
  %127 = sext i32 %.0103 to i64
  %128 = zext i32 %.0101 to i64
  %129 = shl nuw i64 1, %128
  %130 = icmp slt i64 %129, %127
  store i1 %130, i1* %5, align 1
  %131 = load i32, i32* @x.7, align 4
  %132 = load i32, i32* @y.8, align 4
  %133 = add i32 %131, -1
  %134 = mul i32 %133, %131
  %135 = and i32 %134, 1
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %137, %136
  %139 = select i1 %138, i32 2032471158, i32 563859449
  br label %.backedge

140:                                              ; preds = %10
  %.0..0..0.92 = load volatile i1, i1* %5, align 1
  %141 = select i1 %.0..0..0.92, i32 1363071870, i32 -1613484909
  br label %.backedge

142:                                              ; preds = %10
  %.neg118 = add i32 %.0101, 1
  br label %.backedge

143:                                              ; preds = %10
  %144 = load i32, i32* @x.7, align 4
  %145 = load i32, i32* @y.8, align 4
  %146 = add i32 %144, -1
  %147 = mul i32 %146, %144
  %148 = and i32 %147, 1
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %150, %149
  %152 = select i1 %151, i32 -912723123, i32 -1962228748
  br label %.backedge

153:                                              ; preds = %10
  %154 = load i32, i32* @x.7, align 4
  %155 = load i32, i32* @y.8, align 4
  %156 = add i32 %154, -1
  %157 = mul i32 %156, %154
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %160, %159
  %162 = select i1 %161, i32 -640457883, i32 -1962228748
  br label %.backedge

163:                                              ; preds = %10
  br label %.backedge

164:                                              ; preds = %10
  %165 = add i32 %.0109, 1
  br label %.backedge

166:                                              ; preds = %10
  %.not117 = icmp eq i32 %.0105, 0
  %167 = select i1 %.not117, i32 -1438928900, i32 -626859893
  br label %.backedge

168:                                              ; preds = %10
  %169 = load i32, i32* @x.7, align 4
  %170 = load i32, i32* @y.8, align 4
  %171 = add i32 %169, -1
  %172 = mul i32 %171, %169
  %173 = and i32 %172, 1
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %175, %174
  %177 = select i1 %176, i32 1879239562, i32 -593309443
  br label %.backedge

178:                                              ; preds = %10
  %179 = load i32, i32* @x.7, align 4
  %180 = load i32, i32* @y.8, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 -1665638555, i32 -593309443
  br label %.backedge

188:                                              ; preds = %10
  br label %.backedge

189:                                              ; preds = %10
  %190 = load i32, i32* @x.7, align 4
  %191 = load i32, i32* @y.8, align 4
  %192 = add i32 %190, -1
  %193 = mul i32 %192, %190
  %194 = and i32 %193, 1
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %196, %195
  %198 = select i1 %197, i32 1216729547, i32 1829988318
  br label %.backedge

199:                                              ; preds = %10
  %200 = icmp sle i32 %.0109, %.0101
  store i1 %200, i1* %4, align 1
  %201 = load i32, i32* @x.7, align 4
  %202 = load i32, i32* @y.8, align 4
  %203 = add i32 %201, -1
  %204 = mul i32 %203, %201
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %207, %206
  %209 = select i1 %208, i32 -345677483, i32 1829988318
  br label %.backedge

210:                                              ; preds = %10
  %.0..0..0.93 = load volatile i1, i1* %4, align 1
  %211 = select i1 %.0..0..0.93, i32 1862262303, i32 742783103
  br label %.backedge

212:                                              ; preds = %10
  %213 = add i32 %.0109, -1
  %214 = zext i32 %213 to i64
  %215 = shl nuw i64 1, %214
  %216 = sext i32 %.0109 to i64
  %217 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %216
  store i64 %215, i64* %217, align 8
  %218 = zext i32 %.0109 to i64
  %219 = shl nuw i64 1, %218
  %220 = getelementptr inbounds [1005 x i64], [1005 x i64]* @q, i64 0, i64 %216
  store i64 %219, i64* %220, align 8
  br label %.backedge

221:                                              ; preds = %10
  %222 = load i32, i32* @x.7, align 4
  %223 = load i32, i32* @y.8, align 4
  %224 = add i32 %222, -1
  %225 = mul i32 %224, %222
  %226 = and i32 %225, 1
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %228, %227
  %230 = select i1 %229, i32 1160055041, i32 -2071012663
  br label %.backedge

231:                                              ; preds = %10
  %232 = add i32 %.0109, 1
  %233 = load i32, i32* @x.7, align 4
  %234 = load i32, i32* @y.8, align 4
  %235 = add i32 %233, -1
  %236 = mul i32 %235, %233
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %239, %238
  %241 = select i1 %240, i32 614532329, i32 -2071012663
  br label %.backedge

242:                                              ; preds = %10
  br label %.backedge

243:                                              ; preds = %10
  br label %.backedge

244:                                              ; preds = %10
  %245 = load i32, i32* @x.7, align 4
  %246 = load i32, i32* @y.8, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 -2013091549, i32 1837310361
  br label %.backedge

254:                                              ; preds = %10
  store i64 1, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @p, i64 0, i64 1), align 8
  store i64 2, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @q, i64 0, i64 1), align 8
  %255 = load i32, i32* @x.7, align 4
  %256 = load i32, i32* @y.8, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 1834434502, i32 1837310361
  br label %.backedge

264:                                              ; preds = %10
  br label %.backedge

265:                                              ; preds = %10
  %266 = load i32, i32* @x.7, align 4
  %267 = load i32, i32* @y.8, align 4
  %268 = add i32 %266, -1
  %269 = mul i32 %268, %266
  %270 = and i32 %269, 1
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %272, %271
  %274 = select i1 %273, i32 -1795240241, i32 1195926685
  br label %.backedge

275:                                              ; preds = %10
  %276 = add i32 %.0101, 1
  %277 = icmp sle i32 %.0109, %276
  store i1 %277, i1* %3, align 1
  %278 = load i32, i32* @x.7, align 4
  %279 = load i32, i32* @y.8, align 4
  %280 = add i32 %278, -1
  %281 = mul i32 %280, %278
  %282 = and i32 %281, 1
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %284, %283
  %286 = select i1 %285, i32 -1559946954, i32 1195926685
  br label %.backedge

287:                                              ; preds = %10
  %.0..0..0.94 = load volatile i1, i1* %3, align 1
  %288 = select i1 %.0..0..0.94, i32 1760346620, i32 853469969
  br label %.backedge

289:                                              ; preds = %10
  %290 = add i32 %.0109, -2
  %291 = zext i32 %290 to i64
  %292 = shl nuw i64 1, %291
  %293 = sext i32 %.0109 to i64
  %294 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %293
  store i64 %292, i64* %294, align 8
  %295 = add i32 %.0109, -1
  %296 = zext i32 %295 to i64
  %297 = shl nuw i64 1, %296
  %298 = getelementptr inbounds [1005 x i64], [1005 x i64]* @q, i64 0, i64 %293
  store i64 %297, i64* %298, align 8
  br label %.backedge

299:                                              ; preds = %10
  %300 = load i32, i32* @x.7, align 4
  %301 = load i32, i32* @y.8, align 4
  %302 = add i32 %300, -1
  %303 = mul i32 %302, %300
  %304 = and i32 %303, 1
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %306, %305
  %308 = select i1 %307, i32 933192002, i32 913409616
  br label %.backedge

309:                                              ; preds = %10
  %.neg116 = add i32 %.0109, 1
  %310 = load i32, i32* @x.7, align 4
  %311 = load i32, i32* @y.8, align 4
  %312 = add i32 %310, -1
  %313 = mul i32 %312, %310
  %314 = and i32 %313, 1
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %316, %315
  %318 = select i1 %317, i32 1709815377, i32 913409616
  br label %.backedge

319:                                              ; preds = %10
  br label %.backedge

320:                                              ; preds = %10
  %321 = add i32 %.0101, 1
  br label %.backedge

322:                                              ; preds = %10
  %323 = load i32, i32* @x.7, align 4
  %324 = load i32, i32* @y.8, align 4
  %325 = add i32 %323, -1
  %326 = mul i32 %325, %323
  %327 = and i32 %326, 1
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %329, %328
  %331 = select i1 %330, i32 1220228156, i32 -145487992
  br label %.backedge

332:                                              ; preds = %10
  %333 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %.0101)
  %334 = load i32, i32* @x.7, align 4
  %335 = load i32, i32* @y.8, align 4
  %336 = add i32 %334, -1
  %337 = mul i32 %336, %334
  %338 = and i32 %337, 1
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %340, %339
  %342 = select i1 %341, i32 807396491, i32 -145487992
  br label %.backedge

343:                                              ; preds = %10
  br label %.backedge

344:                                              ; preds = %10
  %.not115 = icmp sgt i32 %.0109, %.0101
  %345 = select i1 %.not115, i32 914943449, i32 -1756150537
  br label %.backedge

346:                                              ; preds = %10
  %347 = sext i32 %.0109 to i64
  %348 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %347
  %349 = load i64, i64* %348, align 8
  %350 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 %349)
  br label %.backedge

351:                                              ; preds = %10
  %352 = load i32, i32* @x.7, align 4
  %353 = load i32, i32* @y.8, align 4
  %354 = add i32 %352, -1
  %355 = mul i32 %354, %352
  %356 = and i32 %355, 1
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %358, %357
  %360 = select i1 %359, i32 1275418802, i32 -86744896
  br label %.backedge

361:                                              ; preds = %10
  %.neg114 = add i32 %.0109, 1
  %362 = load i32, i32* @x.7, align 4
  %363 = load i32, i32* @y.8, align 4
  %364 = add i32 %362, -1
  %365 = mul i32 %364, %362
  %366 = and i32 %365, 1
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %368, %367
  %370 = select i1 %369, i32 426034177, i32 -86744896
  br label %.backedge

371:                                              ; preds = %10
  br label %.backedge

372:                                              ; preds = %10
  %putchar = call i32 @putchar(i32 10)
  br label %.backedge

373:                                              ; preds = %10
  %374 = load i32, i32* %8, align 4
  %.not = icmp sgt i32 %.0109, %374
  %375 = select i1 %.not, i32 1452819305, i32 927571387
  br label %.backedge

376:                                              ; preds = %10
  %377 = sext i32 %.0109 to i64
  %378 = getelementptr inbounds [1005 x i32], [1005 x i32]* @ax, i64 0, i64 %377
  %379 = load i32, i32* %378, align 4
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds [1005 x i32], [1005 x i32]* @ay, i64 0, i64 %377
  %382 = load i32, i32* %381, align 4
  %383 = sext i32 %382 to i64
  br label %.backedge

384:                                              ; preds = %10
  %385 = load i32, i32* @x.7, align 4
  %386 = load i32, i32* @y.8, align 4
  %387 = add i32 %385, -1
  %388 = mul i32 %387, %385
  %389 = and i32 %388, 1
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %391, %390
  %393 = select i1 %392, i32 -829451205, i32 -1755940117
  br label %.backedge

394:                                              ; preds = %10
  %395 = icmp ne i32 %.0107, 0
  store i1 %395, i1* %2, align 1
  %396 = load i32, i32* @x.7, align 4
  %397 = load i32, i32* @y.8, align 4
  %398 = add i32 %396, -1
  %399 = mul i32 %398, %396
  %400 = and i32 %399, 1
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %402, %401
  %404 = select i1 %403, i32 -1390106698, i32 -1755940117
  br label %.backedge

405:                                              ; preds = %10
  %.0..0..0.95 = load volatile i1, i1* %2, align 1
  %406 = select i1 %.0..0..0.95, i32 -2032437931, i32 938286694
  br label %.backedge

407:                                              ; preds = %10
  %408 = load i32, i32* @x.7, align 4
  %409 = load i32, i32* @y.8, align 4
  %410 = add i32 %408, -1
  %411 = mul i32 %410, %408
  %412 = and i32 %411, 1
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %414, %413
  %416 = select i1 %415, i32 -775942940, i32 -740571364
  br label %.backedge

417:                                              ; preds = %10
  %418 = sext i32 %.0107 to i64
  %419 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %418
  %420 = load i64, i64* %419, align 8
  %421 = sub i64 %.099, %420
  %422 = add i32 %.0107, -1
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds [1005 x i64], [1005 x i64]* @q, i64 0, i64 %423
  %425 = load i64, i64* %424, align 8
  %426 = call zeroext i1 @_Z5checkxxx(i64 %421, i64 %.097, i64 %425)
  store i1 %426, i1* %1, align 1
  %427 = load i32, i32* @x.7, align 4
  %428 = load i32, i32* @y.8, align 4
  %429 = add i32 %427, -1
  %430 = mul i32 %429, %427
  %431 = and i32 %430, 1
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %433, %432
  %435 = select i1 %434, i32 -1878493790, i32 -740571364
  br label %.backedge

436:                                              ; preds = %10
  %.0..0..0.96 = load volatile i1, i1* %1, align 1
  %437 = select i1 %.0..0..0.96, i32 969691270, i32 310873264
  br label %.backedge

438:                                              ; preds = %10
  %439 = sext i32 %.0107 to i64
  %440 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %439
  %441 = load i64, i64* %440, align 8
  %442 = sub i64 %.099, %441
  %443 = getelementptr inbounds [1005 x i8], [1005 x i8]* @ans, i64 0, i64 %439
  store i8 82, i8* %443, align 1
  br label %.backedge

444:                                              ; preds = %10
  %445 = sext i32 %.0107 to i64
  %446 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %445
  %447 = load i64, i64* %446, align 8
  %448 = add i64 %447, %.099
  %449 = add i32 %.0107, -1
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds [1005 x i64], [1005 x i64]* @q, i64 0, i64 %450
  %452 = load i64, i64* %451, align 8
  %453 = call zeroext i1 @_Z5checkxxx(i64 %448, i64 %.097, i64 %452)
  %454 = select i1 %453, i32 1957180232, i32 848891073
  br label %.backedge

455:                                              ; preds = %10
  %456 = sext i32 %.0107 to i64
  %457 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %456
  %458 = load i64, i64* %457, align 8
  %459 = add i64 %458, %.099
  %460 = getelementptr inbounds [1005 x i8], [1005 x i8]* @ans, i64 0, i64 %456
  store i8 76, i8* %460, align 1
  br label %.backedge

461:                                              ; preds = %10
  %462 = sext i32 %.0107 to i64
  %463 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %462
  %464 = load i64, i64* %463, align 8
  %465 = sub i64 %.097, %464
  %466 = add i32 %.0107, -1
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds [1005 x i64], [1005 x i64]* @q, i64 0, i64 %467
  %469 = load i64, i64* %468, align 8
  %470 = call zeroext i1 @_Z5checkxxx(i64 %.099, i64 %465, i64 %469)
  %471 = select i1 %470, i32 -1308906152, i32 -1700696087
  br label %.backedge

472:                                              ; preds = %10
  %473 = sext i32 %.0107 to i64
  %474 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %473
  %475 = load i64, i64* %474, align 8
  %476 = sub i64 %.097, %475
  %477 = getelementptr inbounds [1005 x i8], [1005 x i8]* @ans, i64 0, i64 %473
  store i8 85, i8* %477, align 1
  br label %.backedge

478:                                              ; preds = %10
  %479 = sext i32 %.0107 to i64
  %480 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %479
  %481 = load i64, i64* %480, align 8
  %482 = add i64 %481, %.097
  %483 = getelementptr inbounds [1005 x i8], [1005 x i8]* @ans, i64 0, i64 %479
  store i8 68, i8* %483, align 1
  br label %.backedge

484:                                              ; preds = %10
  br label %.backedge

485:                                              ; preds = %10
  br label %.backedge

486:                                              ; preds = %10
  br label %.backedge

487:                                              ; preds = %10
  %488 = add i32 %.0107, -1
  br label %.backedge

489:                                              ; preds = %10
  %490 = add i32 %.0101, 1
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds [1005 x i8], [1005 x i8]* @ans, i64 0, i64 %491
  store i8 0, i8* %492, align 1
  %puts = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([1005 x i8], [1005 x i8]* @ans, i64 0, i64 1))
  br label %.backedge

493:                                              ; preds = %10
  %494 = add i32 %.0109, 1
  br label %.backedge

495:                                              ; preds = %10
  br label %.backedge

496:                                              ; preds = %10
  ret i32 0

497:                                              ; preds = %10
  %498 = sext i32 %.0109 to i64
  %499 = getelementptr inbounds [1005 x i32], [1005 x i32]* @ax, i64 0, i64 %498
  %500 = getelementptr inbounds [1005 x i32], [1005 x i32]* @ay, i64 0, i64 %498
  %501 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %499, i32* nonnull %500)
  %502 = load i32, i32* %499, align 4
  %503 = call i32 @llvm.abs.i32(i32 %502, i1 true)
  %504 = load i32, i32* %500, align 4
  %505 = call i32 @llvm.abs.i32(i32 %504, i1 true)
  %506 = add nuw i32 %505, %503
  br label %.backedge

507:                                              ; preds = %10
  %508 = and i32 %.0103, 1
  br label %.backedge

509:                                              ; preds = %10
  br label %.backedge

510:                                              ; preds = %10
  br label %.backedge

511:                                              ; preds = %10
  br label %.backedge

512:                                              ; preds = %10
  br label %.backedge

513:                                              ; preds = %10
  br label %.backedge

514:                                              ; preds = %10
  br label %.backedge

515:                                              ; preds = %10
  %516 = add i32 %.0109, 1
  br label %.backedge

517:                                              ; preds = %10
  store i64 1, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @p, i64 0, i64 1), align 8
  store i64 2, i64* getelementptr inbounds ([1005 x i64], [1005 x i64]* @q, i64 0, i64 1), align 8
  br label %.backedge

518:                                              ; preds = %10
  br label %.backedge

519:                                              ; preds = %10
  %.neg113 = add i32 %.0109, 1
  br label %.backedge

520:                                              ; preds = %10
  %521 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %.0101)
  br label %.backedge

522:                                              ; preds = %10
  %.neg = add i32 %.0109, 1
  br label %.backedge

523:                                              ; preds = %10
  br label %.backedge

524:                                              ; preds = %10
  %525 = sext i32 %.0107 to i64
  %526 = getelementptr inbounds [1005 x i64], [1005 x i64]* @p, i64 0, i64 %525
  %527 = load i64, i64* %526, align 8
  %528 = sub i64 %.099, %527
  %529 = add i32 %.0107, -1
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds [1005 x i64], [1005 x i64]* @q, i64 0, i64 %530
  %532 = load i64, i64* %531, align 8
  %533 = call zeroext i1 @_Z5checkxxx(i64 %528, i64 %.097, i64 %532)
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define linkonce_odr zeroext i1 @_Z5checkxxx(i64 %0, i64 %1, i64 %2) local_unnamed_addr #0 comdat {
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = load i32, i32* @x.9, align 4
  %8 = load i32, i32* @y.10, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %6, align 1
  %13 = icmp slt i32 %8, 10
  store i1 %13, i1* %5, align 1
  br label %.outer

.outer:                                           ; preds = %18, %3
  %.ph = phi i1 [ %22, %18 ], [ undef, %3 ]
  %.0.ph = phi i32 [ %31, %18 ], [ 1877574822, %3 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %14

14:                                               ; preds = %.outer3, %14
  switch i32 %.0.ph4, label %14 [
    i32 1877574822, label %15
    i32 801164213, label %18
    i32 -310366686, label %32
    i32 -1294425475, label %33
  ]

15:                                               ; preds = %14
  %.0..0..0. = load volatile i1, i1* %6, align 1
  %.0..0..0.1 = load volatile i1, i1* %5, align 1
  %16 = or i1 %.0..0..0., %.0..0..0.1
  %17 = select i1 %16, i32 801164213, i32 -1294425475
  br label %.outer3.backedge

18:                                               ; preds = %14
  %19 = tail call i64 @_ZSt3absx(i64 %0)
  %20 = tail call i64 @_ZSt3absx(i64 %1)
  %21 = add i64 %20, %19
  %22 = icmp sle i64 %21, %2
  %23 = load i32, i32* @x.9, align 4
  %24 = load i32, i32* @y.10, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 -310366686, i32 -1294425475
  br label %.outer

32:                                               ; preds = %14
  store i1 %.ph, i1* %4, align 1
  %.0..0..0.2 = load volatile i1, i1* %4, align 1
  ret i1 %.0..0..0.2

33:                                               ; preds = %14
  %34 = tail call i64 @_ZSt3absx(i64 %0)
  %35 = tail call i64 @_ZSt3absx(i64 %1)
  br label %.outer3.backedge

.outer3.backedge:                                 ; preds = %33, %15
  %.0.ph4.be = phi i32 [ %17, %15 ], [ 801164213, %33 ]
  br label %.outer3
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt3absx(i64 %0) local_unnamed_addr #6 comdat {
  %2 = tail call i64 @llvm.abs.i64(i64 %0, i1 false)
  ret i64 %2
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s573248641.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #7

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #7

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
