; ModuleID = 'build_ollvm/programs/p03247/s755997758.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s755997758.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z4readIxEvRT_ = comdat any

$_Z4workxx = comdat any

$_Z1Fx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i64 0, align 8
@X = global [1234 x i64] zeroinitializer, align 16
@Y = global [1234 x i64] zeroinitializer, align 16
@d = local_unnamed_addr global [43 x i64] zeroinitializer, align 16
@dtot = local_unnamed_addr global i64 0, align 8
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"31\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"32\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s755997758.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0
@x.14 = common local_unnamed_addr global i32 0
@y.15 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  tail call void @_Z4readIxEvRT_(i64* nonnull dereferenceable(8) @n)
  br label %5

5:                                                ; preds = %.backedge, %0
  %.063 = phi i64 [ -1, %0 ], [ %.063.be, %.backedge ]
  %.061 = phi i64 [ 1, %0 ], [ %.061.be, %.backedge ]
  %.059 = phi i64 [ undef, %0 ], [ %.059.be, %.backedge ]
  %.057 = phi i64 [ undef, %0 ], [ %.057.be, %.backedge ]
  %.055 = phi i64 [ undef, %0 ], [ %.055.be, %.backedge ]
  %.053 = phi i64 [ undef, %0 ], [ %.053.be, %.backedge ]
  %.051 = phi i64 [ undef, %0 ], [ %.051.be, %.backedge ]
  %.049 = phi i64 [ undef, %0 ], [ %.049.be, %.backedge ]
  %.0 = phi i32 [ -940617213, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -940617213, label %6
    i32 -130811838, label %9
    i32 1555967658, label %18
    i32 859905438, label %19
    i32 727120484, label %22
    i32 1974840165, label %32
    i32 -1981111229, label %42
    i32 85579580, label %43
    i32 1718212841, label %45
    i32 369331770, label %47
    i32 1863282768, label %57
    i32 -914775520, label %67
    i32 -1993021072, label %68
    i32 -86767323, label %69
    i32 233880041, label %71
    i32 841994879, label %73
    i32 -499435657, label %83
    i32 -73001920, label %94
    i32 520912060, label %95
    i32 137194994, label %97
    i32 -775333015, label %98
    i32 -2027854737, label %108
    i32 -863956936, label %119
    i32 1995670286, label %121
    i32 1811150838, label %131
    i32 1755622333, label %144
    i32 721556135, label %145
    i32 -359359390, label %155
    i32 -1678401368, label %166
    i32 1442328924, label %167
    i32 -625036544, label %170
    i32 -2139681514, label %172
    i32 25440478, label %182
    i32 -1377962719, label %192
    i32 2037056778, label %193
    i32 -844187024, label %203
    i32 144477195, label %214
    i32 -1551649166, label %216
    i32 644898192, label %217
    i32 1993665770, label %227
    i32 -328545059, label %238
    i32 -655338352, label %240
    i32 -1347515667, label %250
    i32 -1350858543, label %267
    i32 -1511736978, label %268
    i32 -992854650, label %278
    i32 894541028, label %289
    i32 223434034, label %290
    i32 1158981531, label %294
    i32 -1495934403, label %304
    i32 2061960654, label %314
    i32 2057577841, label %315
    i32 -113177256, label %318
    i32 -1119055184, label %328
    i32 1901920047, label %345
    i32 863633816, label %346
    i32 1685222263, label %348
    i32 1687811773, label %358
    i32 -1301375842, label %368
    i32 -282735395, label %369
    i32 2065277671, label %370
    i32 -1201101984, label %380
    i32 1783794123, label %392
    i32 318381685, label %394
    i32 1934831786, label %404
    i32 1714259739, label %418
    i32 188564451, label %419
    i32 -612250464, label %429
    i32 932171587, label %440
    i32 943578197, label %441
    i32 953480959, label %442
    i32 -1492597303, label %443
    i32 -287760045, label %444
    i32 -765389705, label %446
    i32 898785956, label %447
    i32 -1374455921, label %451
    i32 -1724284585, label %453
    i32 -1476336069, label %454
    i32 -59003132, label %455
    i32 -978099181, label %456
    i32 -1964031692, label %464
    i32 1760068168, label %465
    i32 1124157076, label %466
    i32 -1716458981, label %473
    i32 -873387000, label %474
    i32 -712925921, label %475
    i32 400704155, label %480
  ]

.backedge:                                        ; preds = %5, %480, %475, %474, %473, %466, %465, %464, %456, %455, %454, %453, %451, %447, %446, %444, %443, %442, %440, %429, %419, %418, %404, %394, %392, %380, %370, %369, %368, %358, %348, %346, %345, %328, %318, %315, %314, %304, %294, %290, %289, %278, %268, %267, %250, %240, %238, %227, %217, %216, %214, %203, %193, %192, %182, %172, %170, %167, %166, %155, %145, %144, %131, %121, %119, %108, %98, %97, %95, %94, %83, %73, %71, %69, %68, %67, %57, %47, %43, %42, %32, %22, %19, %18, %9, %6
  %.063.be = phi i64 [ %.063, %5 ], [ %.063, %480 ], [ %.063, %475 ], [ %.063, %474 ], [ %.063, %473 ], [ %.063, %466 ], [ %.063, %465 ], [ %.063, %464 ], [ %.063, %456 ], [ %.063, %455 ], [ %.063, %454 ], [ %.063, %453 ], [ %.063, %451 ], [ %.063, %447 ], [ %.063, %446 ], [ %.063, %444 ], [ %.063, %443 ], [ %.059, %442 ], [ %.063, %440 ], [ %.063, %429 ], [ %.063, %419 ], [ %.063, %418 ], [ %.063, %404 ], [ %.063, %394 ], [ %.063, %392 ], [ %.063, %380 ], [ %.063, %370 ], [ %.063, %369 ], [ %.063, %368 ], [ %.063, %358 ], [ %.063, %348 ], [ %.063, %346 ], [ %.063, %345 ], [ %.063, %328 ], [ %.063, %318 ], [ %.063, %315 ], [ %.063, %314 ], [ %.063, %304 ], [ %.063, %294 ], [ %.063, %290 ], [ %.063, %289 ], [ %.063, %278 ], [ %.063, %268 ], [ %.063, %267 ], [ %.063, %250 ], [ %.063, %240 ], [ %.063, %238 ], [ %.063, %227 ], [ %.063, %217 ], [ %.063, %216 ], [ %.063, %214 ], [ %.063, %203 ], [ %.063, %193 ], [ %.063, %192 ], [ %.063, %182 ], [ %.063, %172 ], [ %.063, %170 ], [ %.063, %167 ], [ %.063, %166 ], [ %.063, %155 ], [ %.063, %145 ], [ %.063, %144 ], [ %.063, %131 ], [ %.063, %121 ], [ %.063, %119 ], [ %.063, %108 ], [ %.063, %98 ], [ %.063, %97 ], [ %.063, %95 ], [ %.063, %94 ], [ %.063, %83 ], [ %.063, %73 ], [ %.063, %71 ], [ %.063, %69 ], [ %.063, %68 ], [ %.063, %67 ], [ %.063, %57 ], [ %.063, %47 ], [ %.063, %43 ], [ %.063, %42 ], [ %.059, %32 ], [ %.063, %22 ], [ %.063, %19 ], [ %.063, %18 ], [ %.063, %9 ], [ %.063, %6 ]
  %.061.be = phi i64 [ %.061, %5 ], [ %.061, %480 ], [ %.061, %475 ], [ %.061, %474 ], [ %.061, %473 ], [ %.061, %466 ], [ %.061, %465 ], [ %.061, %464 ], [ %.061, %456 ], [ %.061, %455 ], [ %.061, %454 ], [ %.061, %453 ], [ %.061, %451 ], [ %.061, %447 ], [ %.061, %446 ], [ %.061, %444 ], [ %.061, %443 ], [ %.061, %442 ], [ %.061, %440 ], [ %.061, %429 ], [ %.061, %419 ], [ %.061, %418 ], [ %.061, %404 ], [ %.061, %394 ], [ %.061, %392 ], [ %.061, %380 ], [ %.061, %370 ], [ %.061, %369 ], [ %.061, %368 ], [ %.061, %358 ], [ %.061, %348 ], [ %.061, %346 ], [ %.061, %345 ], [ %.061, %328 ], [ %.061, %318 ], [ %.061, %315 ], [ %.061, %314 ], [ %.061, %304 ], [ %.061, %294 ], [ %.061, %290 ], [ %.061, %289 ], [ %.061, %278 ], [ %.061, %268 ], [ %.061, %267 ], [ %.061, %250 ], [ %.061, %240 ], [ %.061, %238 ], [ %.061, %227 ], [ %.061, %217 ], [ %.061, %216 ], [ %.061, %214 ], [ %.061, %203 ], [ %.061, %193 ], [ %.061, %192 ], [ %.061, %182 ], [ %.061, %172 ], [ %.061, %170 ], [ %.061, %167 ], [ %.061, %166 ], [ %.061, %155 ], [ %.061, %145 ], [ %.061, %144 ], [ %.061, %131 ], [ %.061, %121 ], [ %.061, %119 ], [ %.061, %108 ], [ %.061, %98 ], [ %.061, %97 ], [ %.061, %95 ], [ %.061, %94 ], [ %.061, %83 ], [ %.061, %73 ], [ %.061, %71 ], [ %70, %69 ], [ %.061, %68 ], [ %.061, %67 ], [ %.061, %57 ], [ %.061, %47 ], [ %.061, %43 ], [ %.061, %42 ], [ %.061, %32 ], [ %.061, %22 ], [ %.061, %19 ], [ %.061, %18 ], [ %.061, %9 ], [ %.061, %6 ]
  %.059.be = phi i64 [ %.059, %5 ], [ %.059, %480 ], [ %.059, %475 ], [ %.059, %474 ], [ %.059, %473 ], [ %.059, %466 ], [ %.059, %465 ], [ %.059, %464 ], [ %.059, %456 ], [ %.059, %455 ], [ %.059, %454 ], [ %.059, %453 ], [ %.059, %451 ], [ %.059, %447 ], [ %.059, %446 ], [ %.059, %444 ], [ %.059, %443 ], [ %.059, %442 ], [ %.059, %440 ], [ %.059, %429 ], [ %.059, %419 ], [ %.059, %418 ], [ %.059, %404 ], [ %.059, %394 ], [ %.059, %392 ], [ %.059, %380 ], [ %.059, %370 ], [ %.059, %369 ], [ %.059, %368 ], [ %.059, %358 ], [ %.059, %348 ], [ %.059, %346 ], [ %.059, %345 ], [ %.059, %328 ], [ %.059, %318 ], [ %.059, %315 ], [ %.059, %314 ], [ %.059, %304 ], [ %.059, %294 ], [ %.059, %290 ], [ %.059, %289 ], [ %.059, %278 ], [ %.059, %268 ], [ %.059, %267 ], [ %.059, %250 ], [ %.059, %240 ], [ %.059, %238 ], [ %.059, %227 ], [ %.059, %217 ], [ %.059, %216 ], [ %.059, %214 ], [ %.059, %203 ], [ %.059, %193 ], [ %.059, %192 ], [ %.059, %182 ], [ %.059, %172 ], [ %.059, %170 ], [ %.059, %167 ], [ %.059, %166 ], [ %.059, %155 ], [ %.059, %145 ], [ %.059, %144 ], [ %.059, %131 ], [ %.059, %121 ], [ %.059, %119 ], [ %.059, %108 ], [ %.059, %98 ], [ %.059, %97 ], [ %.059, %95 ], [ %.059, %94 ], [ %.059, %83 ], [ %.059, %73 ], [ %.059, %71 ], [ %.059, %69 ], [ %.059, %68 ], [ %.059, %67 ], [ %.059, %57 ], [ %.059, %47 ], [ %.059, %43 ], [ %.059, %42 ], [ %.059, %32 ], [ %.059, %22 ], [ %.059, %19 ], [ %.neg68, %18 ], [ %15, %9 ], [ %.059, %6 ]
  %.057.be = phi i64 [ %.057, %5 ], [ %.057, %480 ], [ %.057, %475 ], [ %.057, %474 ], [ %.057, %473 ], [ %.057, %466 ], [ %.057, %465 ], [ %.057, %464 ], [ %.057, %456 ], [ %.057, %455 ], [ %.057, %454 ], [ %.057, %453 ], [ %452, %451 ], [ %.057, %447 ], [ %.057, %446 ], [ %.057, %444 ], [ %.057, %443 ], [ %.057, %442 ], [ %.057, %440 ], [ %.057, %429 ], [ %.057, %419 ], [ %.057, %418 ], [ %.057, %404 ], [ %.057, %394 ], [ %.057, %392 ], [ %.057, %380 ], [ %.057, %370 ], [ %.057, %369 ], [ %.057, %368 ], [ %.057, %358 ], [ %.057, %348 ], [ %.057, %346 ], [ %.057, %345 ], [ %.057, %328 ], [ %.057, %318 ], [ %.057, %315 ], [ %.057, %314 ], [ %.057, %304 ], [ %.057, %294 ], [ %.057, %290 ], [ %.057, %289 ], [ %.057, %278 ], [ %.057, %268 ], [ %.057, %267 ], [ %.057, %250 ], [ %.057, %240 ], [ %.057, %238 ], [ %.057, %227 ], [ %.057, %217 ], [ %.057, %216 ], [ %.057, %214 ], [ %.057, %203 ], [ %.057, %193 ], [ %.057, %192 ], [ %.057, %182 ], [ %.057, %172 ], [ %.057, %170 ], [ %.057, %167 ], [ %.057, %166 ], [ %156, %155 ], [ %.057, %145 ], [ %.057, %144 ], [ %.057, %131 ], [ %.057, %121 ], [ %.057, %119 ], [ %.057, %108 ], [ %.057, %98 ], [ 30, %97 ], [ %.057, %95 ], [ %.057, %94 ], [ %.057, %83 ], [ %.057, %73 ], [ %.057, %71 ], [ %.057, %69 ], [ %.057, %68 ], [ %.057, %67 ], [ %.057, %57 ], [ %.057, %47 ], [ %.057, %43 ], [ %.057, %42 ], [ %.057, %32 ], [ %.057, %22 ], [ %.057, %19 ], [ %.057, %18 ], [ %.057, %9 ], [ %.057, %6 ]
  %.055.be = phi i64 [ %.055, %5 ], [ %.055, %480 ], [ %.055, %475 ], [ %.055, %474 ], [ %.055, %473 ], [ %472, %466 ], [ %.055, %465 ], [ %.055, %464 ], [ %463, %456 ], [ %.055, %455 ], [ 30, %454 ], [ %.055, %453 ], [ %.055, %451 ], [ %.055, %447 ], [ %.055, %446 ], [ %.055, %444 ], [ %.055, %443 ], [ %.055, %442 ], [ %.055, %440 ], [ %.055, %429 ], [ %.055, %419 ], [ %.055, %418 ], [ %.055, %404 ], [ %.055, %394 ], [ %.055, %392 ], [ %.055, %380 ], [ %.055, %370 ], [ %.055, %369 ], [ %.055, %368 ], [ %.055, %358 ], [ %.055, %348 ], [ %.055, %346 ], [ %.055, %345 ], [ %335, %328 ], [ %.055, %318 ], [ %.055, %315 ], [ %.055, %314 ], [ %.055, %304 ], [ %.055, %294 ], [ %.055, %290 ], [ %.055, %289 ], [ %.055, %278 ], [ %.055, %268 ], [ %.055, %267 ], [ %257, %250 ], [ %.055, %240 ], [ %.055, %238 ], [ %.055, %227 ], [ %.055, %217 ], [ %.055, %216 ], [ %.055, %214 ], [ 30, %203 ], [ %.055, %193 ], [ %.055, %192 ], [ %.055, %182 ], [ %.055, %172 ], [ %.055, %170 ], [ %.055, %167 ], [ %.055, %166 ], [ %.055, %155 ], [ %.055, %145 ], [ %.055, %144 ], [ %.055, %131 ], [ %.055, %121 ], [ %.055, %119 ], [ %.055, %108 ], [ %.055, %98 ], [ %.055, %97 ], [ %.055, %95 ], [ %.055, %94 ], [ %.055, %83 ], [ %.055, %73 ], [ %.055, %71 ], [ %.055, %69 ], [ %.055, %68 ], [ %.055, %67 ], [ %.055, %57 ], [ %.055, %47 ], [ %.055, %43 ], [ %.055, %42 ], [ %.055, %32 ], [ %.055, %22 ], [ %.055, %19 ], [ %.055, %18 ], [ %.055, %9 ], [ %.055, %6 ]
  %.053.be = phi i64 [ %.053, %5 ], [ %.053, %480 ], [ %.053, %475 ], [ %.053, %474 ], [ %.053, %473 ], [ %.053, %466 ], [ %.053, %465 ], [ %.neg65, %464 ], [ %.053, %456 ], [ %.053, %455 ], [ %.053, %454 ], [ %.053, %453 ], [ %.053, %451 ], [ %.053, %447 ], [ %.053, %446 ], [ %.053, %444 ], [ %.053, %443 ], [ %.053, %442 ], [ %.053, %440 ], [ %.053, %429 ], [ %.053, %419 ], [ %.053, %418 ], [ %.053, %404 ], [ %.053, %394 ], [ %.053, %392 ], [ %.053, %380 ], [ %.053, %370 ], [ %.053, %369 ], [ %.053, %368 ], [ %.053, %358 ], [ %.053, %348 ], [ %.053, %346 ], [ %.053, %345 ], [ %.053, %328 ], [ %.053, %318 ], [ %.053, %315 ], [ %.053, %314 ], [ %.053, %304 ], [ %.053, %294 ], [ %.053, %290 ], [ %.053, %289 ], [ %279, %278 ], [ %.053, %268 ], [ %.053, %267 ], [ %.053, %250 ], [ %.053, %240 ], [ %.053, %238 ], [ %.053, %227 ], [ %.053, %217 ], [ 0, %216 ], [ %.053, %214 ], [ %.053, %203 ], [ %.053, %193 ], [ %.053, %192 ], [ %.053, %182 ], [ %.053, %172 ], [ %.053, %170 ], [ %.053, %167 ], [ %.053, %166 ], [ %.053, %155 ], [ %.053, %145 ], [ %.053, %144 ], [ %.053, %131 ], [ %.053, %121 ], [ %.053, %119 ], [ %.053, %108 ], [ %.053, %98 ], [ %.053, %97 ], [ %.053, %95 ], [ %.053, %94 ], [ %.053, %83 ], [ %.053, %73 ], [ %.053, %71 ], [ %.053, %69 ], [ %.053, %68 ], [ %.053, %67 ], [ %.053, %57 ], [ %.053, %47 ], [ %.053, %43 ], [ %.053, %42 ], [ %.053, %32 ], [ %.053, %22 ], [ %.053, %19 ], [ %.053, %18 ], [ %.053, %9 ], [ %.053, %6 ]
  %.051.be = phi i64 [ %.051, %5 ], [ %.051, %480 ], [ %.051, %475 ], [ %.051, %474 ], [ %.051, %473 ], [ %.051, %466 ], [ 0, %465 ], [ %.051, %464 ], [ %.051, %456 ], [ %.051, %455 ], [ %.051, %454 ], [ %.051, %453 ], [ %.051, %451 ], [ %.051, %447 ], [ %.051, %446 ], [ %.051, %444 ], [ %.051, %443 ], [ %.051, %442 ], [ %.051, %440 ], [ %.051, %429 ], [ %.051, %419 ], [ %.051, %418 ], [ %.051, %404 ], [ %.051, %394 ], [ %.051, %392 ], [ %.051, %380 ], [ %.051, %370 ], [ %.051, %369 ], [ %.051, %368 ], [ %.051, %358 ], [ %.051, %348 ], [ %347, %346 ], [ %.051, %345 ], [ %.051, %328 ], [ %.051, %318 ], [ %.051, %315 ], [ %.051, %314 ], [ 0, %304 ], [ %.051, %294 ], [ %.051, %290 ], [ %.051, %289 ], [ %.051, %278 ], [ %.051, %268 ], [ %.051, %267 ], [ %.051, %250 ], [ %.051, %240 ], [ %.051, %238 ], [ %.051, %227 ], [ %.051, %217 ], [ %.051, %216 ], [ %.051, %214 ], [ %.051, %203 ], [ %.051, %193 ], [ %.051, %192 ], [ %.051, %182 ], [ %.051, %172 ], [ %.051, %170 ], [ %.051, %167 ], [ %.051, %166 ], [ %.051, %155 ], [ %.051, %145 ], [ %.051, %144 ], [ %.051, %131 ], [ %.051, %121 ], [ %.051, %119 ], [ %.051, %108 ], [ %.051, %98 ], [ %.051, %97 ], [ %.051, %95 ], [ %.051, %94 ], [ %.051, %83 ], [ %.051, %73 ], [ %.051, %71 ], [ %.051, %69 ], [ %.051, %68 ], [ %.051, %67 ], [ %.051, %57 ], [ %.051, %47 ], [ %.051, %43 ], [ %.051, %42 ], [ %.051, %32 ], [ %.051, %22 ], [ %.051, %19 ], [ %.051, %18 ], [ %.051, %9 ], [ %.051, %6 ]
  %.049.be = phi i64 [ %.049, %5 ], [ %481, %480 ], [ %.049, %475 ], [ %.049, %474 ], [ %.049, %473 ], [ %.049, %466 ], [ %.049, %465 ], [ %.049, %464 ], [ %.049, %456 ], [ %.049, %455 ], [ %.049, %454 ], [ %.049, %453 ], [ %.049, %451 ], [ %.049, %447 ], [ %.049, %446 ], [ %.049, %444 ], [ %.049, %443 ], [ %.049, %442 ], [ %.049, %440 ], [ %430, %429 ], [ %.049, %419 ], [ %.049, %418 ], [ %.049, %404 ], [ %.049, %394 ], [ %.049, %392 ], [ %.049, %380 ], [ %.049, %370 ], [ 1, %369 ], [ %.049, %368 ], [ %.049, %358 ], [ %.049, %348 ], [ %.049, %346 ], [ %.049, %345 ], [ %.049, %328 ], [ %.049, %318 ], [ %.049, %315 ], [ %.049, %314 ], [ %.049, %304 ], [ %.049, %294 ], [ %.049, %290 ], [ %.049, %289 ], [ %.049, %278 ], [ %.049, %268 ], [ %.049, %267 ], [ %.049, %250 ], [ %.049, %240 ], [ %.049, %238 ], [ %.049, %227 ], [ %.049, %217 ], [ %.049, %216 ], [ %.049, %214 ], [ %.049, %203 ], [ %.049, %193 ], [ %.049, %192 ], [ %.049, %182 ], [ %.049, %172 ], [ %.049, %170 ], [ %.049, %167 ], [ %.049, %166 ], [ %.049, %155 ], [ %.049, %145 ], [ %.049, %144 ], [ %.049, %131 ], [ %.049, %121 ], [ %.049, %119 ], [ %.049, %108 ], [ %.049, %98 ], [ %.049, %97 ], [ %.049, %95 ], [ %.049, %94 ], [ %.049, %83 ], [ %.049, %73 ], [ %.049, %71 ], [ %.049, %69 ], [ %.049, %68 ], [ %.049, %67 ], [ %.049, %57 ], [ %.049, %47 ], [ %.049, %43 ], [ %.049, %42 ], [ %.049, %32 ], [ %.049, %22 ], [ %.049, %19 ], [ %.049, %18 ], [ %.049, %9 ], [ %.049, %6 ]
  %.0.be = phi i32 [ %.0, %5 ], [ -612250464, %480 ], [ 1934831786, %475 ], [ -1201101984, %474 ], [ 1687811773, %473 ], [ -1119055184, %466 ], [ -1495934403, %465 ], [ -992854650, %464 ], [ -1347515667, %456 ], [ 1993665770, %455 ], [ -844187024, %454 ], [ 25440478, %453 ], [ -359359390, %451 ], [ 1811150838, %447 ], [ -2027854737, %446 ], [ -499435657, %444 ], [ 1863282768, %443 ], [ 1974840165, %442 ], [ 2065277671, %440 ], [ %439, %429 ], [ %428, %419 ], [ 188564451, %418 ], [ %417, %404 ], [ %403, %394 ], [ %393, %392 ], [ %391, %380 ], [ %379, %370 ], [ 2065277671, %369 ], [ -282735395, %368 ], [ %367, %358 ], [ %357, %348 ], [ 2057577841, %346 ], [ 863633816, %345 ], [ %344, %328 ], [ %327, %318 ], [ %317, %315 ], [ 2057577841, %314 ], [ %313, %304 ], [ %303, %294 ], [ -282735395, %290 ], [ 644898192, %289 ], [ %288, %278 ], [ %277, %268 ], [ -1511736978, %267 ], [ %266, %250 ], [ %249, %240 ], [ %239, %238 ], [ %237, %227 ], [ %226, %217 ], [ 644898192, %216 ], [ %215, %214 ], [ %213, %203 ], [ %202, %193 ], [ 2037056778, %192 ], [ %191, %182 ], [ %181, %172 ], [ 2037056778, %170 ], [ %169, %167 ], [ -775333015, %166 ], [ %165, %155 ], [ %154, %145 ], [ 721556135, %144 ], [ %143, %131 ], [ %130, %121 ], [ %120, %119 ], [ %118, %108 ], [ %107, %98 ], [ -775333015, %97 ], [ 137194994, %95 ], [ 137194994, %94 ], [ %93, %83 ], [ %82, %73 ], [ %72, %71 ], [ -940617213, %69 ], [ -86767323, %68 ], [ -1993021072, %67 ], [ %66, %57 ], [ %56, %47 ], [ %44, %43 ], [ -1993021072, %42 ], [ %41, %32 ], [ %31, %22 ], [ %21, %19 ], [ 859905438, %18 ], [ %17, %9 ], [ %8, %6 ]
  br label %5

6:                                                ; preds = %5
  %7 = load i64, i64* @n, align 8
  %.not69 = icmp sgt i64 %.061, %7
  %8 = select i1 %.not69, i32 233880041, i32 -130811838
  br label %.backedge

9:                                                ; preds = %5
  %10 = getelementptr inbounds [1234 x i64], [1234 x i64]* @X, i64 0, i64 %.061
  tail call void @_Z4readIxEvRT_(i64* nonnull dereferenceable(8) %10)
  %11 = getelementptr inbounds [1234 x i64], [1234 x i64]* @Y, i64 0, i64 %.061
  tail call void @_Z4readIxEvRT_(i64* nonnull dereferenceable(8) %11)
  %12 = load i64, i64* %10, align 8
  %13 = load i64, i64* %11, align 8
  %14 = add i64 %13, %12
  %15 = srem i64 %14, 2
  %16 = icmp slt i64 %15, 0
  %17 = select i1 %16, i32 1555967658, i32 859905438
  br label %.backedge

18:                                               ; preds = %5
  %.neg68 = add i64 %.059, 2
  br label %.backedge

19:                                               ; preds = %5
  %20 = icmp eq i64 %.063, -1
  %21 = select i1 %20, i32 727120484, i32 85579580
  br label %.backedge

22:                                               ; preds = %5
  %23 = load i32, i32* @x.6, align 4
  %24 = load i32, i32* @y.7, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 1974840165, i32 953480959
  br label %.backedge

32:                                               ; preds = %5
  %33 = load i32, i32* @x.6, align 4
  %34 = load i32, i32* @y.7, align 4
  %35 = add i32 %33, -1
  %36 = mul i32 %35, %33
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %39, %38
  %41 = select i1 %40, i32 -1981111229, i32 953480959
  br label %.backedge

42:                                               ; preds = %5
  br label %.backedge

43:                                               ; preds = %5
  %.not67 = icmp eq i64 %.063, %.059
  %44 = select i1 %.not67, i32 369331770, i32 1718212841
  br label %.backedge

45:                                               ; preds = %5
  %46 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  tail call void @exit(i32 0) #9
  unreachable

47:                                               ; preds = %5
  %48 = load i32, i32* @x.6, align 4
  %49 = load i32, i32* @y.7, align 4
  %50 = add i32 %48, -1
  %51 = mul i32 %50, %48
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %54, %53
  %56 = select i1 %55, i32 1863282768, i32 -1492597303
  br label %.backedge

57:                                               ; preds = %5
  %58 = load i32, i32* @x.6, align 4
  %59 = load i32, i32* @y.7, align 4
  %60 = add i32 %58, -1
  %61 = mul i32 %60, %58
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %64, %63
  %66 = select i1 %65, i32 -914775520, i32 -1492597303
  br label %.backedge

67:                                               ; preds = %5
  br label %.backedge

68:                                               ; preds = %5
  br label %.backedge

69:                                               ; preds = %5
  %70 = add i64 %.061, 1
  br label %.backedge

71:                                               ; preds = %5
  %.not = icmp eq i64 %.063, 0
  %72 = select i1 %.not, i32 520912060, i32 841994879
  br label %.backedge

73:                                               ; preds = %5
  %74 = load i32, i32* @x.6, align 4
  %75 = load i32, i32* @y.7, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 -499435657, i32 -287760045
  br label %.backedge

83:                                               ; preds = %5
  %84 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %85 = load i32, i32* @x.6, align 4
  %86 = load i32, i32* @y.7, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 -73001920, i32 -287760045
  br label %.backedge

94:                                               ; preds = %5
  br label %.backedge

95:                                               ; preds = %5
  %96 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  br label %.backedge

97:                                               ; preds = %5
  br label %.backedge

98:                                               ; preds = %5
  %99 = load i32, i32* @x.6, align 4
  %100 = load i32, i32* @y.7, align 4
  %101 = add i32 %99, -1
  %102 = mul i32 %101, %99
  %103 = and i32 %102, 1
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %105, %104
  %107 = select i1 %106, i32 -2027854737, i32 -765389705
  br label %.backedge

108:                                              ; preds = %5
  %109 = icmp ne i64 %.057, -1
  store i1 %109, i1* %4, align 1
  %110 = load i32, i32* @x.6, align 4
  %111 = load i32, i32* @y.7, align 4
  %112 = add i32 %110, -1
  %113 = mul i32 %112, %110
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %116, %115
  %118 = select i1 %117, i32 -863956936, i32 -765389705
  br label %.backedge

119:                                              ; preds = %5
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %120 = select i1 %.0..0..0., i32 1995670286, i32 1442328924
  br label %.backedge

121:                                              ; preds = %5
  %122 = load i32, i32* @x.6, align 4
  %123 = load i32, i32* @y.7, align 4
  %124 = add i32 %122, -1
  %125 = mul i32 %124, %122
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %128, %127
  %130 = select i1 %129, i32 1811150838, i32 898785956
  br label %.backedge

131:                                              ; preds = %5
  %132 = trunc i64 %.057 to i32
  %133 = shl nuw i32 1, %132
  %134 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %133)
  %135 = load i32, i32* @x.6, align 4
  %136 = load i32, i32* @y.7, align 4
  %137 = add i32 %135, -1
  %138 = mul i32 %137, %135
  %139 = and i32 %138, 1
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %141, %140
  %143 = select i1 %142, i32 1755622333, i32 898785956
  br label %.backedge

144:                                              ; preds = %5
  br label %.backedge

145:                                              ; preds = %5
  %146 = load i32, i32* @x.6, align 4
  %147 = load i32, i32* @y.7, align 4
  %148 = add i32 %146, -1
  %149 = mul i32 %148, %146
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %152, %151
  %154 = select i1 %153, i32 -359359390, i32 -1374455921
  br label %.backedge

155:                                              ; preds = %5
  %156 = add i64 %.057, -1
  %157 = load i32, i32* @x.6, align 4
  %158 = load i32, i32* @y.7, align 4
  %159 = add i32 %157, -1
  %160 = mul i32 %159, %157
  %161 = and i32 %160, 1
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %163, %162
  %165 = select i1 %164, i32 -1678401368, i32 -1374455921
  br label %.backedge

166:                                              ; preds = %5
  br label %.backedge

167:                                              ; preds = %5
  %168 = icmp eq i64 %.063, 0
  %169 = select i1 %168, i32 -625036544, i32 -2139681514
  br label %.backedge

170:                                              ; preds = %5
  %171 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  br label %.backedge

172:                                              ; preds = %5
  %173 = load i32, i32* @x.6, align 4
  %174 = load i32, i32* @y.7, align 4
  %175 = add i32 %173, -1
  %176 = mul i32 %175, %173
  %177 = and i32 %176, 1
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %179, %178
  %181 = select i1 %180, i32 25440478, i32 -1724284585
  br label %.backedge

182:                                              ; preds = %5
  %putchar66 = tail call i32 @putchar(i32 10)
  %183 = load i32, i32* @x.6, align 4
  %184 = load i32, i32* @y.7, align 4
  %185 = add i32 %183, -1
  %186 = mul i32 %185, %183
  %187 = and i32 %186, 1
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %189, %188
  %191 = select i1 %190, i32 -1377962719, i32 -1724284585
  br label %.backedge

192:                                              ; preds = %5
  br label %.backedge

193:                                              ; preds = %5
  %194 = load i32, i32* @x.6, align 4
  %195 = load i32, i32* @y.7, align 4
  %196 = add i32 %194, -1
  %197 = mul i32 %196, %194
  %198 = and i32 %197, 1
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %200, %199
  %202 = select i1 %201, i32 -844187024, i32 -1476336069
  br label %.backedge

203:                                              ; preds = %5
  %204 = icmp eq i64 %.063, 0
  store i1 %204, i1* %3, align 1
  %205 = load i32, i32* @x.6, align 4
  %206 = load i32, i32* @y.7, align 4
  %207 = add i32 %205, -1
  %208 = mul i32 %207, %205
  %209 = and i32 %208, 1
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %211, %210
  %213 = select i1 %212, i32 144477195, i32 -1476336069
  br label %.backedge

214:                                              ; preds = %5
  %.0..0..0.46 = load volatile i1, i1* %3, align 1
  %215 = select i1 %.0..0..0.46, i32 -1551649166, i32 1158981531
  br label %.backedge

216:                                              ; preds = %5
  br label %.backedge

217:                                              ; preds = %5
  %218 = load i32, i32* @x.6, align 4
  %219 = load i32, i32* @y.7, align 4
  %220 = add i32 %218, -1
  %221 = mul i32 %220, %218
  %222 = and i32 %221, 1
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %224, %223
  %226 = select i1 %225, i32 1993665770, i32 -59003132
  br label %.backedge

227:                                              ; preds = %5
  %228 = icmp slt i64 %.053, 31
  store i1 %228, i1* %2, align 1
  %229 = load i32, i32* @x.6, align 4
  %230 = load i32, i32* @y.7, align 4
  %231 = add i32 %229, -1
  %232 = mul i32 %231, %229
  %233 = and i32 %232, 1
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %235, %234
  %237 = select i1 %236, i32 -328545059, i32 -59003132
  br label %.backedge

238:                                              ; preds = %5
  %.0..0..0.47 = load volatile i1, i1* %2, align 1
  %239 = select i1 %.0..0..0.47, i32 -655338352, i32 223434034
  br label %.backedge

240:                                              ; preds = %5
  %241 = load i32, i32* @x.6, align 4
  %242 = load i32, i32* @y.7, align 4
  %243 = add i32 %241, -1
  %244 = mul i32 %243, %241
  %245 = and i32 %244, 1
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %247, %246
  %249 = select i1 %248, i32 -1347515667, i32 -978099181
  br label %.backedge

250:                                              ; preds = %5
  %251 = trunc i64 %.055 to i32
  %252 = shl nuw i32 1, %251
  %253 = sext i32 %252 to i64
  %254 = load i64, i64* @dtot, align 8
  %255 = add i64 %254, 1
  store i64 %255, i64* @dtot, align 8
  %256 = getelementptr inbounds [43 x i64], [43 x i64]* @d, i64 0, i64 %255
  store i64 %253, i64* %256, align 8
  %257 = add i64 %.055, -1
  %258 = load i32, i32* @x.6, align 4
  %259 = load i32, i32* @y.7, align 4
  %260 = add i32 %258, -1
  %261 = mul i32 %260, %258
  %262 = and i32 %261, 1
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %264, %263
  %266 = select i1 %265, i32 -1350858543, i32 -978099181
  br label %.backedge

267:                                              ; preds = %5
  br label %.backedge

268:                                              ; preds = %5
  %269 = load i32, i32* @x.6, align 4
  %270 = load i32, i32* @y.7, align 4
  %271 = add i32 %269, -1
  %272 = mul i32 %271, %269
  %273 = and i32 %272, 1
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %275, %274
  %277 = select i1 %276, i32 -992854650, i32 -1964031692
  br label %.backedge

278:                                              ; preds = %5
  %279 = add i64 %.053, 1
  %280 = load i32, i32* @x.6, align 4
  %281 = load i32, i32* @y.7, align 4
  %282 = add i32 %280, -1
  %283 = mul i32 %282, %280
  %284 = and i32 %283, 1
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %286, %285
  %288 = select i1 %287, i32 894541028, i32 -1964031692
  br label %.backedge

289:                                              ; preds = %5
  br label %.backedge

290:                                              ; preds = %5
  %291 = load i64, i64* @dtot, align 8
  %292 = add i64 %291, 1
  store i64 %292, i64* @dtot, align 8
  %293 = getelementptr inbounds [43 x i64], [43 x i64]* @d, i64 0, i64 %292
  store i64 1, i64* %293, align 8
  br label %.backedge

294:                                              ; preds = %5
  %295 = load i32, i32* @x.6, align 4
  %296 = load i32, i32* @y.7, align 4
  %297 = add i32 %295, -1
  %298 = mul i32 %297, %295
  %299 = and i32 %298, 1
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %301, %300
  %303 = select i1 %302, i32 -1495934403, i32 1760068168
  br label %.backedge

304:                                              ; preds = %5
  %305 = load i32, i32* @x.6, align 4
  %306 = load i32, i32* @y.7, align 4
  %307 = add i32 %305, -1
  %308 = mul i32 %307, %305
  %309 = and i32 %308, 1
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %311, %310
  %313 = select i1 %312, i32 2061960654, i32 1760068168
  br label %.backedge

314:                                              ; preds = %5
  br label %.backedge

315:                                              ; preds = %5
  %316 = icmp slt i64 %.051, 31
  %317 = select i1 %316, i32 -113177256, i32 1685222263
  br label %.backedge

318:                                              ; preds = %5
  %319 = load i32, i32* @x.6, align 4
  %320 = load i32, i32* @y.7, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 -1119055184, i32 1124157076
  br label %.backedge

328:                                              ; preds = %5
  %329 = trunc i64 %.055 to i32
  %330 = shl nuw i32 1, %329
  %331 = sext i32 %330 to i64
  %332 = load i64, i64* @dtot, align 8
  %333 = add i64 %332, 1
  store i64 %333, i64* @dtot, align 8
  %334 = getelementptr inbounds [43 x i64], [43 x i64]* @d, i64 0, i64 %333
  store i64 %331, i64* %334, align 8
  %335 = add i64 %.055, -1
  %336 = load i32, i32* @x.6, align 4
  %337 = load i32, i32* @y.7, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 1901920047, i32 1124157076
  br label %.backedge

345:                                              ; preds = %5
  br label %.backedge

346:                                              ; preds = %5
  %347 = add i64 %.051, 1
  br label %.backedge

348:                                              ; preds = %5
  %349 = load i32, i32* @x.6, align 4
  %350 = load i32, i32* @y.7, align 4
  %351 = add i32 %349, -1
  %352 = mul i32 %351, %349
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %355, %354
  %357 = select i1 %356, i32 1687811773, i32 -1716458981
  br label %.backedge

358:                                              ; preds = %5
  %359 = load i32, i32* @x.6, align 4
  %360 = load i32, i32* @y.7, align 4
  %361 = add i32 %359, -1
  %362 = mul i32 %361, %359
  %363 = and i32 %362, 1
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %365, %364
  %367 = select i1 %366, i32 -1301375842, i32 -1716458981
  br label %.backedge

368:                                              ; preds = %5
  br label %.backedge

369:                                              ; preds = %5
  br label %.backedge

370:                                              ; preds = %5
  %371 = load i32, i32* @x.6, align 4
  %372 = load i32, i32* @y.7, align 4
  %373 = add i32 %371, -1
  %374 = mul i32 %373, %371
  %375 = and i32 %374, 1
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %377, %376
  %379 = select i1 %378, i32 -1201101984, i32 -873387000
  br label %.backedge

380:                                              ; preds = %5
  %381 = load i64, i64* @n, align 8
  %382 = icmp sle i64 %.049, %381
  store i1 %382, i1* %1, align 1
  %383 = load i32, i32* @x.6, align 4
  %384 = load i32, i32* @y.7, align 4
  %385 = add i32 %383, -1
  %386 = mul i32 %385, %383
  %387 = and i32 %386, 1
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %389, %388
  %391 = select i1 %390, i32 1783794123, i32 -873387000
  br label %.backedge

392:                                              ; preds = %5
  %.0..0..0.48 = load volatile i1, i1* %1, align 1
  %393 = select i1 %.0..0..0.48, i32 318381685, i32 943578197
  br label %.backedge

394:                                              ; preds = %5
  %395 = load i32, i32* @x.6, align 4
  %396 = load i32, i32* @y.7, align 4
  %397 = add i32 %395, -1
  %398 = mul i32 %397, %395
  %399 = and i32 %398, 1
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %401, %400
  %403 = select i1 %402, i32 1934831786, i32 -712925921
  br label %.backedge

404:                                              ; preds = %5
  %405 = getelementptr inbounds [1234 x i64], [1234 x i64]* @X, i64 0, i64 %.049
  %406 = load i64, i64* %405, align 8
  %407 = getelementptr inbounds [1234 x i64], [1234 x i64]* @Y, i64 0, i64 %.049
  %408 = load i64, i64* %407, align 8
  tail call void @_Z4workxx(i64 %406, i64 %408)
  %409 = load i32, i32* @x.6, align 4
  %410 = load i32, i32* @y.7, align 4
  %411 = add i32 %409, -1
  %412 = mul i32 %411, %409
  %413 = and i32 %412, 1
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %415, %414
  %417 = select i1 %416, i32 1714259739, i32 -712925921
  br label %.backedge

418:                                              ; preds = %5
  br label %.backedge

419:                                              ; preds = %5
  %420 = load i32, i32* @x.6, align 4
  %421 = load i32, i32* @y.7, align 4
  %422 = add i32 %420, -1
  %423 = mul i32 %422, %420
  %424 = and i32 %423, 1
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %426, %425
  %428 = select i1 %427, i32 -612250464, i32 400704155
  br label %.backedge

429:                                              ; preds = %5
  %430 = add i64 %.049, 1
  %431 = load i32, i32* @x.6, align 4
  %432 = load i32, i32* @y.7, align 4
  %433 = add i32 %431, -1
  %434 = mul i32 %433, %431
  %435 = and i32 %434, 1
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %437, %436
  %439 = select i1 %438, i32 932171587, i32 400704155
  br label %.backedge

440:                                              ; preds = %5
  br label %.backedge

441:                                              ; preds = %5
  ret i32 0

442:                                              ; preds = %5
  br label %.backedge

443:                                              ; preds = %5
  br label %.backedge

444:                                              ; preds = %5
  %445 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  br label %.backedge

446:                                              ; preds = %5
  br label %.backedge

447:                                              ; preds = %5
  %448 = trunc i64 %.057 to i32
  %449 = shl nuw i32 1, %448
  %450 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %449)
  br label %.backedge

451:                                              ; preds = %5
  %452 = add i64 %.057, -1
  br label %.backedge

453:                                              ; preds = %5
  %putchar = tail call i32 @putchar(i32 10)
  br label %.backedge

454:                                              ; preds = %5
  br label %.backedge

455:                                              ; preds = %5
  br label %.backedge

456:                                              ; preds = %5
  %457 = trunc i64 %.055 to i32
  %458 = shl nuw i32 1, %457
  %459 = sext i32 %458 to i64
  %460 = load i64, i64* @dtot, align 8
  %461 = add i64 %460, 1
  store i64 %461, i64* @dtot, align 8
  %462 = getelementptr inbounds [43 x i64], [43 x i64]* @d, i64 0, i64 %461
  store i64 %459, i64* %462, align 8
  %463 = add i64 %.055, -1
  br label %.backedge

464:                                              ; preds = %5
  %.neg65 = add i64 %.053, 1
  br label %.backedge

465:                                              ; preds = %5
  br label %.backedge

466:                                              ; preds = %5
  %467 = trunc i64 %.055 to i32
  %468 = shl nuw i32 1, %467
  %469 = sext i32 %468 to i64
  %470 = load i64, i64* @dtot, align 8
  %.neg = add i64 %470, 1
  store i64 %.neg, i64* @dtot, align 8
  %471 = getelementptr inbounds [43 x i64], [43 x i64]* @d, i64 0, i64 %.neg
  store i64 %469, i64* %471, align 8
  %472 = add i64 %.055, -1
  br label %.backedge

473:                                              ; preds = %5
  br label %.backedge

474:                                              ; preds = %5
  br label %.backedge

475:                                              ; preds = %5
  %476 = getelementptr inbounds [1234 x i64], [1234 x i64]* @X, i64 0, i64 %.049
  %477 = load i64, i64* %476, align 8
  %478 = getelementptr inbounds [1234 x i64], [1234 x i64]* @Y, i64 0, i64 %.049
  %479 = load i64, i64* %478, align 8
  tail call void @_Z4workxx(i64 %477, i64 %479)
  br label %.backedge

480:                                              ; preds = %5
  %481 = add i64 %.049, 1
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z4readIxEvRT_(i64* dereferenceable(8) %0) local_unnamed_addr #0 comdat {
  %2 = alloca i1, align 1
  store i64 0, i64* %0, align 8
  %3 = tail call i32 @getchar()
  %4 = trunc i32 %3 to i8
  br label %5

5:                                                ; preds = %.backedge, %1
  %.015 = phi i8 [ %4, %1 ], [ %.015.be, %.backedge ]
  %.013 = phi i8 [ 0, %1 ], [ %.013.be, %.backedge ]
  %.0 = phi i32 [ -1237867849, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1237867849, label %6
    i32 829475139, label %9
    i32 -1113182801, label %12
    i32 1527880568, label %13
    i32 338824068, label %16
    i32 -306280826, label %17
    i32 1684795724, label %20
    i32 -1465213866, label %28
    i32 -1090987746, label %38
    i32 1662166880, label %49
    i32 1570632131, label %51
    i32 -1249188295, label %54
    i32 -417168098, label %55
  ]

.backedge:                                        ; preds = %5, %55, %51, %49, %38, %28, %20, %17, %16, %13, %12, %9, %6
  %.015.be = phi i8 [ %.015, %5 ], [ %.015, %55 ], [ %.015, %51 ], [ %.015, %49 ], [ %.015, %38 ], [ %.015, %28 ], [ %27, %20 ], [ %.015, %17 ], [ %.015, %16 ], [ %15, %13 ], [ %.015, %12 ], [ %.015, %9 ], [ %.015, %6 ]
  %.013.be = phi i8 [ %.013, %5 ], [ %.013, %55 ], [ %.013, %51 ], [ %.013, %49 ], [ %.013, %38 ], [ %.013, %28 ], [ %.013, %20 ], [ %.013, %17 ], [ %.013, %16 ], [ %.013, %13 ], [ 1, %12 ], [ %.013, %9 ], [ %.013, %6 ]
  %.0.be = phi i32 [ %.0, %5 ], [ -1090987746, %55 ], [ -1249188295, %51 ], [ %50, %49 ], [ %48, %38 ], [ %37, %28 ], [ -306280826, %20 ], [ %19, %17 ], [ -306280826, %16 ], [ -1237867849, %13 ], [ 1527880568, %12 ], [ %11, %9 ], [ %8, %6 ]
  br label %5

6:                                                ; preds = %5
  %7 = sext i8 %.015 to i32
  %isdigittmp17 = add nsw i32 %7, -48
  %isdigit18 = icmp ugt i32 %isdigittmp17, 9
  %8 = select i1 %isdigit18, i32 829475139, i32 338824068
  br label %.backedge

9:                                                ; preds = %5
  %10 = icmp eq i8 %.015, 45
  %11 = select i1 %10, i32 -1113182801, i32 1527880568
  br label %.backedge

12:                                               ; preds = %5
  br label %.backedge

13:                                               ; preds = %5
  %14 = tail call i32 @getchar()
  %15 = trunc i32 %14 to i8
  br label %.backedge

16:                                               ; preds = %5
  br label %.backedge

17:                                               ; preds = %5
  %18 = sext i8 %.015 to i32
  %isdigittmp = add nsw i32 %18, -48
  %isdigit = icmp ult i32 %isdigittmp, 10
  %19 = select i1 %isdigit, i32 1684795724, i32 -1465213866
  br label %.backedge

20:                                               ; preds = %5
  %21 = load i64, i64* %0, align 8
  %22 = mul i64 %21, 10
  %23 = xor i8 %.015, 48
  %24 = sext i8 %23 to i64
  %25 = add i64 %22, %24
  store i64 %25, i64* %0, align 8
  %26 = tail call i32 @getchar()
  %27 = trunc i32 %26 to i8
  br label %.backedge

28:                                               ; preds = %5
  %29 = load i32, i32* @x.8, align 4
  %30 = load i32, i32* @y.9, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -1090987746, i32 -417168098
  br label %.backedge

38:                                               ; preds = %5
  %39 = icmp ne i8 %.013, 0
  store i1 %39, i1* %2, align 1
  %40 = load i32, i32* @x.8, align 4
  %41 = load i32, i32* @y.9, align 4
  %42 = add i32 %40, -1
  %43 = mul i32 %42, %40
  %44 = and i32 %43, 1
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %46, %45
  %48 = select i1 %47, i32 1662166880, i32 -417168098
  br label %.backedge

49:                                               ; preds = %5
  %.0..0..0.12 = load volatile i1, i1* %2, align 1
  %50 = select i1 %.0..0..0.12, i32 1570632131, i32 -1249188295
  br label %.backedge

51:                                               ; preds = %5
  %52 = load i64, i64* %0, align 8
  %53 = sub i64 0, %52
  store i64 %53, i64* %0, align 8
  br label %.backedge

54:                                               ; preds = %5
  ret void

55:                                               ; preds = %5
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define linkonce_odr void @_Z4workxx(i64 %0, i64 %1) local_unnamed_addr #0 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i1, align 1
  %11 = alloca i1, align 1
  %12 = load i32, i32* @x.10, align 4
  %13 = load i32, i32* @y.11, align 4
  %14 = add i32 %12, -1
  %15 = mul i32 %14, %12
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  store i1 %17, i1* %11, align 1
  %18 = icmp slt i32 %13, 10
  store i1 %18, i1* %10, align 1
  br label %19

19:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ 2096578277, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 2096578277, label %20
    i32 -1197242850, label %23
    i32 -412038911, label %39
    i32 556370437, label %40
    i32 1934761129, label %44
    i32 -956922129, label %58
    i32 -524701007, label %68
    i32 770909839, label %81
    i32 792463615, label %83
    i32 -1564536123, label %88
    i32 365670264, label %98
    i32 1596479980, label %112
    i32 -187877631, label %113
    i32 184867331, label %123
    i32 5524055, label %133
    i32 -869392535, label %134
    i32 1065679204, label %139
    i32 -1811015516, label %149
    i32 -35292850, label %163
    i32 790033513, label %164
    i32 124661350, label %174
    i32 435826519, label %188
    i32 2045364112, label %189
    i32 -1351088524, label %190
    i32 -1759210443, label %200
    i32 1052781298, label %210
    i32 -1309839185, label %211
    i32 -1163898687, label %221
    i32 -2029973034, label %232
    i32 708256543, label %233
    i32 -1388059851, label %243
    i32 1242492, label %254
    i32 1370409288, label %255
    i32 461132738, label %256
    i32 1477450310, label %257
    i32 -601071394, label %262
    i32 584945188, label %263
    i32 1901950508, label %268
    i32 -2006959662, label %273
    i32 818316580, label %274
    i32 -1454753525, label %276
  ]

.backedge:                                        ; preds = %19, %276, %274, %273, %268, %263, %262, %257, %256, %255, %243, %233, %232, %221, %211, %210, %200, %190, %189, %188, %174, %164, %163, %149, %139, %134, %133, %123, %113, %112, %98, %88, %83, %81, %68, %58, %44, %40, %39, %23, %20
  %.0.be = phi i32 [ %.0, %19 ], [ -1388059851, %276 ], [ -1163898687, %274 ], [ -1759210443, %273 ], [ 124661350, %268 ], [ -1811015516, %263 ], [ 184867331, %262 ], [ 365670264, %257 ], [ -524701007, %256 ], [ -1197242850, %255 ], [ %253, %243 ], [ %242, %233 ], [ 556370437, %232 ], [ %231, %221 ], [ %220, %211 ], [ -1309839185, %210 ], [ %209, %200 ], [ %199, %190 ], [ -1351088524, %189 ], [ 2045364112, %188 ], [ %187, %174 ], [ %173, %164 ], [ 2045364112, %163 ], [ %162, %149 ], [ %148, %139 ], [ %138, %134 ], [ -1351088524, %133 ], [ %132, %123 ], [ %122, %113 ], [ -187877631, %112 ], [ %111, %98 ], [ %97, %88 ], [ -187877631, %83 ], [ %82, %81 ], [ %80, %68 ], [ %67, %58 ], [ %57, %44 ], [ %43, %40 ], [ 556370437, %39 ], [ %38, %23 ], [ %22, %20 ]
  br label %19

20:                                               ; preds = %19
  %.0..0..0. = load volatile i1, i1* %11, align 1
  %.0..0..0.1 = load volatile i1, i1* %10, align 1
  %21 = or i1 %.0..0..0., %.0..0..0.1
  %22 = select i1 %21, i32 -1197242850, i32 1370409288
  br label %.backedge

23:                                               ; preds = %19
  %24 = alloca i64, align 8
  store i64* %24, i64** %9, align 8
  %25 = alloca i64, align 8
  store i64* %25, i64** %8, align 8
  %26 = alloca i64, align 8
  store i64* %26, i64** %7, align 8
  %27 = alloca i64, align 8
  store i64* %27, i64** %6, align 8
  %28 = alloca i64, align 8
  store i64* %28, i64** %5, align 8
  %29 = alloca i64, align 8
  store i64* %29, i64** %4, align 8
  %.0..0..0.2 = load volatile i64*, i64** %9, align 8
  store i64 %0, i64* %.0..0..0.2, align 8
  %.0..0..0.6 = load volatile i64*, i64** %8, align 8
  store i64 %1, i64* %.0..0..0.6, align 8
  %.0..0..0.9 = load volatile i64*, i64** %7, align 8
  store i64 0, i64* %.0..0..0.9, align 8
  %.0..0..0.19 = load volatile i64*, i64** %6, align 8
  store i64 0, i64* %.0..0..0.19, align 8
  %.0..0..0.30 = load volatile i64*, i64** %5, align 8
  store i64 1, i64* %.0..0..0.30, align 8
  %30 = load i32, i32* @x.10, align 4
  %31 = load i32, i32* @y.11, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -412038911, i32 1370409288
  br label %.backedge

39:                                               ; preds = %19
  br label %.backedge

40:                                               ; preds = %19
  %.0..0..0.31 = load volatile i64*, i64** %5, align 8
  %41 = load i64, i64* %.0..0..0.31, align 8
  %42 = load i64, i64* @dtot, align 8
  %.not = icmp sgt i64 %41, %42
  %43 = select i1 %.not, i32 708256543, i32 1934761129
  br label %.backedge

44:                                               ; preds = %19
  %.0..0..0.32 = load volatile i64*, i64** %5, align 8
  %45 = load i64, i64* %.0..0..0.32, align 8
  %46 = getelementptr inbounds [43 x i64], [43 x i64]* @d, i64 0, i64 %45
  %47 = load i64, i64* %46, align 8
  %.0..0..0.37 = load volatile i64*, i64** %4, align 8
  store i64 %47, i64* %.0..0..0.37, align 8
  %.0..0..0.3 = load volatile i64*, i64** %9, align 8
  %48 = load i64, i64* %.0..0..0.3, align 8
  %.0..0..0.10 = load volatile i64*, i64** %7, align 8
  %49 = load i64, i64* %.0..0..0.10, align 8
  %50 = sub i64 %48, %49
  %51 = call i64 @_Z1Fx(i64 %50)
  %.0..0..0.7 = load volatile i64*, i64** %8, align 8
  %52 = load i64, i64* %.0..0..0.7, align 8
  %.0..0..0.20 = load volatile i64*, i64** %6, align 8
  %53 = load i64, i64* %.0..0..0.20, align 8
  %54 = sub i64 %52, %53
  %55 = call i64 @_Z1Fx(i64 %54)
  %56 = icmp sgt i64 %51, %55
  %57 = select i1 %56, i32 -956922129, i32 -869392535
  br label %.backedge

58:                                               ; preds = %19
  %59 = load i32, i32* @x.10, align 4
  %60 = load i32, i32* @y.11, align 4
  %61 = add i32 %59, -1
  %62 = mul i32 %61, %59
  %63 = and i32 %62, 1
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %65, %64
  %67 = select i1 %66, i32 -524701007, i32 461132738
  br label %.backedge

68:                                               ; preds = %19
  %.0..0..0.4 = load volatile i64*, i64** %9, align 8
  %69 = load i64, i64* %.0..0..0.4, align 8
  %.0..0..0.11 = load volatile i64*, i64** %7, align 8
  %70 = load i64, i64* %.0..0..0.11, align 8
  %71 = icmp slt i64 %69, %70
  store i1 %71, i1* %3, align 1
  %72 = load i32, i32* @x.10, align 4
  %73 = load i32, i32* @y.11, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 770909839, i32 461132738
  br label %.backedge

81:                                               ; preds = %19
  %.0..0..0.45 = load volatile i1, i1* %3, align 1
  %82 = select i1 %.0..0..0.45, i32 792463615, i32 -1564536123
  br label %.backedge

83:                                               ; preds = %19
  %84 = call i32 @putchar(i32 76)
  %.0..0..0.38 = load volatile i64*, i64** %4, align 8
  %85 = load i64, i64* %.0..0..0.38, align 8
  %.0..0..0.12 = load volatile i64*, i64** %7, align 8
  %86 = load i64, i64* %.0..0..0.12, align 8
  %87 = sub i64 %86, %85
  %.0..0..0.13 = load volatile i64*, i64** %7, align 8
  store i64 %87, i64* %.0..0..0.13, align 8
  br label %.backedge

88:                                               ; preds = %19
  %89 = load i32, i32* @x.10, align 4
  %90 = load i32, i32* @y.11, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 365670264, i32 1477450310
  br label %.backedge

98:                                               ; preds = %19
  %99 = call i32 @putchar(i32 82)
  %.0..0..0.39 = load volatile i64*, i64** %4, align 8
  %100 = load i64, i64* %.0..0..0.39, align 8
  %.0..0..0.14 = load volatile i64*, i64** %7, align 8
  %101 = load i64, i64* %.0..0..0.14, align 8
  %102 = add i64 %101, %100
  %.0..0..0.15 = load volatile i64*, i64** %7, align 8
  store i64 %102, i64* %.0..0..0.15, align 8
  %103 = load i32, i32* @x.10, align 4
  %104 = load i32, i32* @y.11, align 4
  %105 = add i32 %103, -1
  %106 = mul i32 %105, %103
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %109, %108
  %111 = select i1 %110, i32 1596479980, i32 1477450310
  br label %.backedge

112:                                              ; preds = %19
  br label %.backedge

113:                                              ; preds = %19
  %114 = load i32, i32* @x.10, align 4
  %115 = load i32, i32* @y.11, align 4
  %116 = add i32 %114, -1
  %117 = mul i32 %116, %114
  %118 = and i32 %117, 1
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %120, %119
  %122 = select i1 %121, i32 184867331, i32 -601071394
  br label %.backedge

123:                                              ; preds = %19
  %124 = load i32, i32* @x.10, align 4
  %125 = load i32, i32* @y.11, align 4
  %126 = add i32 %124, -1
  %127 = mul i32 %126, %124
  %128 = and i32 %127, 1
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %130, %129
  %132 = select i1 %131, i32 5524055, i32 -601071394
  br label %.backedge

133:                                              ; preds = %19
  br label %.backedge

134:                                              ; preds = %19
  %.0..0..0.8 = load volatile i64*, i64** %8, align 8
  %135 = load i64, i64* %.0..0..0.8, align 8
  %.0..0..0.21 = load volatile i64*, i64** %6, align 8
  %136 = load i64, i64* %.0..0..0.21, align 8
  %137 = icmp slt i64 %135, %136
  %138 = select i1 %137, i32 1065679204, i32 790033513
  br label %.backedge

139:                                              ; preds = %19
  %140 = load i32, i32* @x.10, align 4
  %141 = load i32, i32* @y.11, align 4
  %142 = add i32 %140, -1
  %143 = mul i32 %142, %140
  %144 = and i32 %143, 1
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %146, %145
  %148 = select i1 %147, i32 -1811015516, i32 584945188
  br label %.backedge

149:                                              ; preds = %19
  %150 = call i32 @putchar(i32 68)
  %.0..0..0.40 = load volatile i64*, i64** %4, align 8
  %151 = load i64, i64* %.0..0..0.40, align 8
  %.0..0..0.22 = load volatile i64*, i64** %6, align 8
  %152 = load i64, i64* %.0..0..0.22, align 8
  %153 = sub i64 %152, %151
  %.0..0..0.23 = load volatile i64*, i64** %6, align 8
  store i64 %153, i64* %.0..0..0.23, align 8
  %154 = load i32, i32* @x.10, align 4
  %155 = load i32, i32* @y.11, align 4
  %156 = add i32 %154, -1
  %157 = mul i32 %156, %154
  %158 = and i32 %157, 1
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %160, %159
  %162 = select i1 %161, i32 -35292850, i32 584945188
  br label %.backedge

163:                                              ; preds = %19
  br label %.backedge

164:                                              ; preds = %19
  %165 = load i32, i32* @x.10, align 4
  %166 = load i32, i32* @y.11, align 4
  %167 = add i32 %165, -1
  %168 = mul i32 %167, %165
  %169 = and i32 %168, 1
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %171, %170
  %173 = select i1 %172, i32 124661350, i32 1901950508
  br label %.backedge

174:                                              ; preds = %19
  %175 = call i32 @putchar(i32 85)
  %.0..0..0.41 = load volatile i64*, i64** %4, align 8
  %176 = load i64, i64* %.0..0..0.41, align 8
  %.0..0..0.24 = load volatile i64*, i64** %6, align 8
  %177 = load i64, i64* %.0..0..0.24, align 8
  %178 = add i64 %177, %176
  %.0..0..0.25 = load volatile i64*, i64** %6, align 8
  store i64 %178, i64* %.0..0..0.25, align 8
  %179 = load i32, i32* @x.10, align 4
  %180 = load i32, i32* @y.11, align 4
  %181 = add i32 %179, -1
  %182 = mul i32 %181, %179
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %185, %184
  %187 = select i1 %186, i32 435826519, i32 1901950508
  br label %.backedge

188:                                              ; preds = %19
  br label %.backedge

189:                                              ; preds = %19
  br label %.backedge

190:                                              ; preds = %19
  %191 = load i32, i32* @x.10, align 4
  %192 = load i32, i32* @y.11, align 4
  %193 = add i32 %191, -1
  %194 = mul i32 %193, %191
  %195 = and i32 %194, 1
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %197, %196
  %199 = select i1 %198, i32 -1759210443, i32 -2006959662
  br label %.backedge

200:                                              ; preds = %19
  %201 = load i32, i32* @x.10, align 4
  %202 = load i32, i32* @y.11, align 4
  %203 = add i32 %201, -1
  %204 = mul i32 %203, %201
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %207, %206
  %209 = select i1 %208, i32 1052781298, i32 -2006959662
  br label %.backedge

210:                                              ; preds = %19
  br label %.backedge

211:                                              ; preds = %19
  %212 = load i32, i32* @x.10, align 4
  %213 = load i32, i32* @y.11, align 4
  %214 = add i32 %212, -1
  %215 = mul i32 %214, %212
  %216 = and i32 %215, 1
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %218, %217
  %220 = select i1 %219, i32 -1163898687, i32 818316580
  br label %.backedge

221:                                              ; preds = %19
  %.0..0..0.33 = load volatile i64*, i64** %5, align 8
  %222 = load i64, i64* %.0..0..0.33, align 8
  %.neg46 = add i64 %222, 1
  %.0..0..0.34 = load volatile i64*, i64** %5, align 8
  store i64 %.neg46, i64* %.0..0..0.34, align 8
  %223 = load i32, i32* @x.10, align 4
  %224 = load i32, i32* @y.11, align 4
  %225 = add i32 %223, -1
  %226 = mul i32 %225, %223
  %227 = and i32 %226, 1
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %229, %228
  %231 = select i1 %230, i32 -2029973034, i32 818316580
  br label %.backedge

232:                                              ; preds = %19
  br label %.backedge

233:                                              ; preds = %19
  %234 = load i32, i32* @x.10, align 4
  %235 = load i32, i32* @y.11, align 4
  %236 = add i32 %234, -1
  %237 = mul i32 %236, %234
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %240, %239
  %242 = select i1 %241, i32 -1388059851, i32 -1454753525
  br label %.backedge

243:                                              ; preds = %19
  %244 = call i32 @putchar(i32 10)
  %245 = load i32, i32* @x.10, align 4
  %246 = load i32, i32* @y.11, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 1242492, i32 -1454753525
  br label %.backedge

254:                                              ; preds = %19
  ret void

255:                                              ; preds = %19
  br label %.backedge

256:                                              ; preds = %19
  %.0..0..0.5 = load volatile i64*, i64** %9, align 8
  %.0..0..0.16 = load volatile i64*, i64** %7, align 8
  br label %.backedge

257:                                              ; preds = %19
  %258 = call i32 @putchar(i32 82)
  %.0..0..0.42 = load volatile i64*, i64** %4, align 8
  %259 = load i64, i64* %.0..0..0.42, align 8
  %.0..0..0.17 = load volatile i64*, i64** %7, align 8
  %260 = load i64, i64* %.0..0..0.17, align 8
  %261 = add i64 %260, %259
  %.0..0..0.18 = load volatile i64*, i64** %7, align 8
  store i64 %261, i64* %.0..0..0.18, align 8
  br label %.backedge

262:                                              ; preds = %19
  br label %.backedge

263:                                              ; preds = %19
  %264 = call i32 @putchar(i32 68)
  %.0..0..0.43 = load volatile i64*, i64** %4, align 8
  %265 = load i64, i64* %.0..0..0.43, align 8
  %.0..0..0.26 = load volatile i64*, i64** %6, align 8
  %266 = load i64, i64* %.0..0..0.26, align 8
  %267 = sub i64 %266, %265
  %.0..0..0.27 = load volatile i64*, i64** %6, align 8
  store i64 %267, i64* %.0..0..0.27, align 8
  br label %.backedge

268:                                              ; preds = %19
  %269 = call i32 @putchar(i32 85)
  %.0..0..0.44 = load volatile i64*, i64** %4, align 8
  %270 = load i64, i64* %.0..0..0.44, align 8
  %.0..0..0.28 = load volatile i64*, i64** %6, align 8
  %271 = load i64, i64* %.0..0..0.28, align 8
  %272 = add i64 %271, %270
  %.0..0..0.29 = load volatile i64*, i64** %6, align 8
  store i64 %272, i64* %.0..0..0.29, align 8
  br label %.backedge

273:                                              ; preds = %19
  br label %.backedge

274:                                              ; preds = %19
  %.0..0..0.35 = load volatile i64*, i64** %5, align 8
  %275 = load i64, i64* %.0..0..0.35, align 8
  %.neg = add i64 %275, 1
  %.0..0..0.36 = load volatile i64*, i64** %5, align 8
  store i64 %.neg, i64* %.0..0..0.36, align 8
  br label %.backedge

276:                                              ; preds = %19
  %277 = call i32 @putchar(i32 10)
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_Z1Fx(i64 %0) local_unnamed_addr #7 comdat {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = sub i64 0, %0
  br label %.outer.outer

.outer.outer:                                     ; preds = %.outer.outer.backedge, %1
  %.05.ph.ph = phi i32 [ 308753847, %1 ], [ -1049123602, %.outer.outer.backedge ]
  %.0.ph.ph = phi i64 [ undef, %1 ], [ %.0.ph.ph.be, %.outer.outer.backedge ]
  br label %.outer

.outer:                                           ; preds = %.outer.outer, %5
  %.05.ph = phi i32 [ %7, %5 ], [ %.05.ph.ph, %.outer.outer ]
  br label %4

4:                                                ; preds = %.outer, %4
  switch i32 %.05.ph, label %4 [
    i32 308753847, label %5
    i32 780913467, label %.outer.outer.backedge
    i32 -1367269740, label %8
    i32 -1049123602, label %9
  ]

5:                                                ; preds = %4
  %.0..0..0. = load volatile i64, i64* %2, align 8
  %6 = icmp slt i64 %.0..0..0., 0
  %7 = select i1 %6, i32 780913467, i32 -1367269740
  br label %.outer

.outer.outer.backedge:                            ; preds = %4, %8
  %.0.ph.ph.be = phi i64 [ %0, %8 ], [ %3, %4 ]
  br label %.outer.outer

8:                                                ; preds = %4
  br label %.outer.outer.backedge

9:                                                ; preds = %4
  ret i64 %.0.ph.ph
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s755997758.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
