; ModuleID = 'build_ollvm/programs/p03247/s021963663.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s021963663.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_Z4readv = comdat any

$_Z3Absx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = local_unnamed_addr global i64 0, align 8
@x = local_unnamed_addr global [1010 x i64] zeroinitializer, align 16
@y = local_unnamed_addr global [1010 x i64] zeroinitializer, align 16
@len = local_unnamed_addr global [50 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s021963663.cpp, i8* null }]
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca [32 x i8], align 16
  %7 = tail call i64 @_Z4readv()
  store i64 %7, i64* @n, align 8
  br label %8

8:                                                ; preds = %.backedge, %0
  %.0100 = phi i64 [ 1, %0 ], [ %.0100.be, %.backedge ]
  %.098 = phi i64 [ undef, %0 ], [ %.098.be, %.backedge ]
  %.096 = phi i64 [ undef, %0 ], [ %.096.be, %.backedge ]
  %.094 = phi i64 [ undef, %0 ], [ %.094.be, %.backedge ]
  %.092 = phi i64 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i64 [ undef, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i64 [ undef, %0 ], [ %.088.be, %.backedge ]
  %.086 = phi i64 [ undef, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i64 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i64 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i64 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.0 = phi i32 [ -365042465, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -365042465, label %9
    i32 -416927896, label %12
    i32 942427683, label %22
    i32 -56239691, label %36
    i32 -1086529206, label %37
    i32 1055372596, label %39
    i32 1081816889, label %45
    i32 1385595995, label %48
    i32 -1974137396, label %57
    i32 2098827931, label %67
    i32 -553255617, label %78
    i32 1316069279, label %79
    i32 -2034159705, label %80
    i32 1285597660, label %81
    i32 -1148335567, label %91
    i32 -1152231535, label %107
    i32 -1938879502, label %109
    i32 820121003, label %119
    i32 1014871441, label %129
    i32 -544924050, label %130
    i32 -706078267, label %133
    i32 1143899110, label %141
    i32 382446756, label %143
    i32 32873965, label %144
    i32 -238480804, label %145
    i32 71278488, label %148
    i32 -1361204669, label %156
    i32 1859435406, label %166
    i32 1619412317, label %177
    i32 1892976843, label %178
    i32 -1298554617, label %179
    i32 -1367802866, label %181
    i32 1599245804, label %191
    i32 1473354480, label %203
    i32 123820573, label %205
    i32 -900443623, label %206
    i32 -263727597, label %209
    i32 -1733184672, label %219
    i32 -1313507558, label %238
    i32 269958780, label %240
    i32 1142626727, label %250
    i32 -1635276038, label %263
    i32 -1178560948, label %265
    i32 -246766572, label %270
    i32 92213503, label %280
    i32 2032061624, label %294
    i32 44901640, label %295
    i32 444423747, label %305
    i32 -1487023079, label %315
    i32 2146537967, label %316
    i32 2094811072, label %321
    i32 687466489, label %331
    i32 -2051390137, label %345
    i32 1314327494, label %346
    i32 -1123637957, label %351
    i32 922264682, label %352
    i32 1857798619, label %362
    i32 -154528268, label %372
    i32 -412664160, label %373
    i32 -1042593960, label %375
    i32 2006741682, label %376
    i32 -1993539820, label %386
    i32 1621153452, label %397
    i32 1779395987, label %399
    i32 -2070638175, label %404
    i32 160180701, label %406
    i32 -710851842, label %416
    i32 -1462828851, label %427
    i32 -842739224, label %428
    i32 -248713333, label %430
    i32 -1219399700, label %440
    i32 -1918597592, label %450
    i32 1947815591, label %451
    i32 -2051358050, label %452
    i32 -392159524, label %457
    i32 1546097036, label %459
    i32 -20915451, label %465
    i32 -1034513793, label %466
    i32 1196038641, label %468
    i32 -1522332466, label %469
    i32 -1939421800, label %478
    i32 921108948, label %479
    i32 -129573806, label %484
    i32 1396282944, label %485
    i32 1410734743, label %490
    i32 -1140548700, label %491
    i32 1864437555, label %492
    i32 -189216477, label %494
  ]

.backedge:                                        ; preds = %8, %494, %492, %491, %490, %485, %484, %479, %478, %469, %468, %466, %465, %459, %457, %452, %450, %440, %430, %428, %427, %416, %406, %404, %399, %397, %386, %376, %375, %373, %372, %362, %352, %351, %346, %345, %331, %321, %316, %315, %305, %295, %294, %280, %270, %265, %263, %250, %240, %238, %219, %209, %206, %205, %203, %191, %181, %179, %178, %177, %166, %156, %148, %145, %144, %143, %141, %133, %130, %129, %119, %109, %107, %91, %81, %80, %79, %78, %67, %57, %48, %45, %39, %37, %36, %22, %12, %9
  %.0100.be = phi i64 [ %.0100, %8 ], [ %.0100, %494 ], [ %.0100, %492 ], [ %.0100, %491 ], [ %.0100, %490 ], [ %.0100, %485 ], [ %.0100, %484 ], [ %.0100, %479 ], [ %.0100, %478 ], [ %.0100, %469 ], [ %.0100, %468 ], [ %.0100, %466 ], [ %.0100, %465 ], [ %.0100, %459 ], [ %.0100, %457 ], [ %.0100, %452 ], [ %.0100, %450 ], [ %.0100, %440 ], [ %.0100, %430 ], [ %.0100, %428 ], [ %.0100, %427 ], [ %.0100, %416 ], [ %.0100, %406 ], [ %.0100, %404 ], [ %.0100, %399 ], [ %.0100, %397 ], [ %.0100, %386 ], [ %.0100, %376 ], [ %.0100, %375 ], [ %.0100, %373 ], [ %.0100, %372 ], [ %.0100, %362 ], [ %.0100, %352 ], [ %.0100, %351 ], [ %.0100, %346 ], [ %.0100, %345 ], [ %.0100, %331 ], [ %.0100, %321 ], [ %.0100, %316 ], [ %.0100, %315 ], [ %.0100, %305 ], [ %.0100, %295 ], [ %.0100, %294 ], [ %.0100, %280 ], [ %.0100, %270 ], [ %.0100, %265 ], [ %.0100, %263 ], [ %.0100, %250 ], [ %.0100, %240 ], [ %.0100, %238 ], [ %.0100, %219 ], [ %.0100, %209 ], [ %.0100, %206 ], [ %.0100, %205 ], [ %.0100, %203 ], [ %.0100, %191 ], [ %.0100, %181 ], [ %.0100, %179 ], [ %.0100, %178 ], [ %.0100, %177 ], [ %.0100, %166 ], [ %.0100, %156 ], [ %.0100, %148 ], [ %.0100, %145 ], [ %.0100, %144 ], [ %.0100, %143 ], [ %.0100, %141 ], [ %.0100, %133 ], [ %.0100, %130 ], [ %.0100, %129 ], [ %.0100, %119 ], [ %.0100, %109 ], [ %.0100, %107 ], [ %.0100, %91 ], [ %.0100, %81 ], [ %.0100, %80 ], [ %.0100, %79 ], [ %.0100, %78 ], [ %.0100, %67 ], [ %.0100, %57 ], [ %.0100, %48 ], [ %.0100, %45 ], [ %.0100, %39 ], [ %38, %37 ], [ %.0100, %36 ], [ %.0100, %22 ], [ %.0100, %12 ], [ %.0100, %9 ]
  %.098.be = phi i64 [ %.098, %8 ], [ %.098, %494 ], [ %.098, %492 ], [ %.098, %491 ], [ %.098, %490 ], [ %.098, %485 ], [ %.098, %484 ], [ %.098, %479 ], [ %.098, %478 ], [ %.098, %469 ], [ %.098, %468 ], [ %.098, %466 ], [ %.098, %465 ], [ %.098, %459 ], [ %.098, %457 ], [ %.098, %452 ], [ %.098, %450 ], [ %.098, %440 ], [ %.098, %430 ], [ %.098, %428 ], [ %.098, %427 ], [ %.098, %416 ], [ %.098, %406 ], [ %.098, %404 ], [ %.098, %399 ], [ %.098, %397 ], [ %.098, %386 ], [ %.098, %376 ], [ %.098, %375 ], [ %.098, %373 ], [ %.098, %372 ], [ %.098, %362 ], [ %.098, %352 ], [ %.098, %351 ], [ %.098, %346 ], [ %.098, %345 ], [ %.098, %331 ], [ %.098, %321 ], [ %.098, %316 ], [ %.098, %315 ], [ %.098, %305 ], [ %.098, %295 ], [ %.098, %294 ], [ %.098, %280 ], [ %.098, %270 ], [ %.098, %265 ], [ %.098, %263 ], [ %.098, %250 ], [ %.098, %240 ], [ %.098, %238 ], [ %.098, %219 ], [ %.098, %209 ], [ %.098, %206 ], [ %.098, %205 ], [ %.098, %203 ], [ %.098, %191 ], [ %.098, %181 ], [ %.098, %179 ], [ %.098, %178 ], [ %.098, %177 ], [ %.098, %166 ], [ %.098, %156 ], [ %.098, %148 ], [ %.098, %145 ], [ %.098, %144 ], [ %.098, %143 ], [ %.098, %141 ], [ %.098, %133 ], [ %.098, %130 ], [ %.098, %129 ], [ %.098, %119 ], [ %.098, %109 ], [ %.098, %107 ], [ %.098, %91 ], [ %.098, %81 ], [ %.098, %80 ], [ %.098, %79 ], [ %.098, %78 ], [ %.098, %67 ], [ %.098, %57 ], [ %.098, %48 ], [ %.098, %45 ], [ %44, %39 ], [ %.098, %37 ], [ %.098, %36 ], [ %.098, %22 ], [ %.098, %12 ], [ %.098, %9 ]
  %.096.be = phi i64 [ %.096, %8 ], [ %.096, %494 ], [ %.096, %492 ], [ %.096, %491 ], [ %.096, %490 ], [ %.096, %485 ], [ %.096, %484 ], [ %.096, %479 ], [ %.096, %478 ], [ %.096, %469 ], [ %.096, %468 ], [ %.096, %466 ], [ %.096, %465 ], [ %.096, %459 ], [ %.096, %457 ], [ %.096, %452 ], [ %.096, %450 ], [ %.096, %440 ], [ %.096, %430 ], [ %.096, %428 ], [ %.096, %427 ], [ %.096, %416 ], [ %.096, %406 ], [ %.096, %404 ], [ %.096, %399 ], [ %.096, %397 ], [ %.096, %386 ], [ %.096, %376 ], [ %.096, %375 ], [ %.096, %373 ], [ %.096, %372 ], [ %.096, %362 ], [ %.096, %352 ], [ %.096, %351 ], [ %.096, %346 ], [ %.096, %345 ], [ %.096, %331 ], [ %.096, %321 ], [ %.096, %316 ], [ %.096, %315 ], [ %.096, %305 ], [ %.096, %295 ], [ %.096, %294 ], [ %.096, %280 ], [ %.096, %270 ], [ %.096, %265 ], [ %.096, %263 ], [ %.096, %250 ], [ %.096, %240 ], [ %.096, %238 ], [ %.096, %219 ], [ %.096, %209 ], [ %.096, %206 ], [ %.096, %205 ], [ %.096, %203 ], [ %.096, %191 ], [ %.096, %181 ], [ %.096, %179 ], [ %.096, %178 ], [ %.096, %177 ], [ %.096, %166 ], [ %.096, %156 ], [ %.096, %148 ], [ %.096, %145 ], [ %.096, %144 ], [ %.096, %143 ], [ %.096, %141 ], [ %.096, %133 ], [ %.096, %130 ], [ %.096, %129 ], [ %.096, %119 ], [ %.096, %109 ], [ %.096, %107 ], [ %.096, %91 ], [ %.096, %81 ], [ %.neg, %80 ], [ %.096, %79 ], [ %.096, %78 ], [ %.096, %67 ], [ %.096, %57 ], [ %.096, %48 ], [ %.096, %45 ], [ 2, %39 ], [ %.096, %37 ], [ %.096, %36 ], [ %.096, %22 ], [ %.096, %12 ], [ %.096, %9 ]
  %.094.be = phi i64 [ %.094, %8 ], [ %.094, %494 ], [ %.094, %492 ], [ %.094, %491 ], [ %.094, %490 ], [ %.094, %485 ], [ %.094, %484 ], [ %.094, %479 ], [ %.094, %478 ], [ %.094, %469 ], [ %.094, %468 ], [ %.094, %466 ], [ %.094, %465 ], [ 1, %459 ], [ %.094, %457 ], [ %.094, %452 ], [ %.094, %450 ], [ %.094, %440 ], [ %.094, %430 ], [ %.094, %428 ], [ %.094, %427 ], [ %.094, %416 ], [ %.094, %406 ], [ %.094, %404 ], [ %.094, %399 ], [ %.094, %397 ], [ %.094, %386 ], [ %.094, %376 ], [ %.094, %375 ], [ %.094, %373 ], [ %.094, %372 ], [ %.094, %362 ], [ %.094, %352 ], [ %.094, %351 ], [ %.094, %346 ], [ %.094, %345 ], [ %.094, %331 ], [ %.094, %321 ], [ %.094, %316 ], [ %.094, %315 ], [ %.094, %305 ], [ %.094, %295 ], [ %.094, %294 ], [ %.094, %280 ], [ %.094, %270 ], [ %.094, %265 ], [ %.094, %263 ], [ %.094, %250 ], [ %.094, %240 ], [ %.094, %238 ], [ %.094, %219 ], [ %.094, %209 ], [ %.094, %206 ], [ %.094, %205 ], [ %.094, %203 ], [ %.094, %191 ], [ %.094, %181 ], [ %.094, %179 ], [ %.094, %178 ], [ %.094, %177 ], [ %.094, %166 ], [ %.094, %156 ], [ %152, %148 ], [ %.094, %145 ], [ %.094, %144 ], [ %.094, %143 ], [ %.094, %141 ], [ %137, %133 ], [ %.094, %130 ], [ %.094, %129 ], [ %.094, %119 ], [ %.094, %109 ], [ %.094, %107 ], [ 1, %91 ], [ %.094, %81 ], [ %.094, %80 ], [ %.094, %79 ], [ %.094, %78 ], [ %.094, %67 ], [ %.094, %57 ], [ %.094, %48 ], [ %.094, %45 ], [ %.094, %39 ], [ %.094, %37 ], [ %.094, %36 ], [ %.094, %22 ], [ %.094, %12 ], [ %.094, %9 ]
  %.092.be = phi i64 [ %.092, %8 ], [ %.092, %494 ], [ %.092, %492 ], [ %.092, %491 ], [ %.092, %490 ], [ %.092, %485 ], [ %.092, %484 ], [ %.092, %479 ], [ %.092, %478 ], [ %.092, %469 ], [ %.092, %468 ], [ %.092, %466 ], [ 1, %465 ], [ %.092, %459 ], [ %.092, %457 ], [ %.092, %452 ], [ %.092, %450 ], [ %.092, %440 ], [ %.092, %430 ], [ %.092, %428 ], [ %.092, %427 ], [ %.092, %416 ], [ %.092, %406 ], [ %.092, %404 ], [ %.092, %399 ], [ %.092, %397 ], [ %.092, %386 ], [ %.092, %376 ], [ %.092, %375 ], [ %.092, %373 ], [ %.092, %372 ], [ %.092, %362 ], [ %.092, %352 ], [ %.092, %351 ], [ %.092, %346 ], [ %.092, %345 ], [ %.092, %331 ], [ %.092, %321 ], [ %.092, %316 ], [ %.092, %315 ], [ %.092, %305 ], [ %.092, %295 ], [ %.092, %294 ], [ %.092, %280 ], [ %.092, %270 ], [ %.092, %265 ], [ %.092, %263 ], [ %.092, %250 ], [ %.092, %240 ], [ %.092, %238 ], [ %.092, %219 ], [ %.092, %209 ], [ %.092, %206 ], [ %.092, %205 ], [ %.092, %203 ], [ %.092, %191 ], [ %.092, %181 ], [ %.092, %179 ], [ %.092, %178 ], [ %.092, %177 ], [ %.092, %166 ], [ %.092, %156 ], [ %.092, %148 ], [ %.092, %145 ], [ %.092, %144 ], [ %.092, %143 ], [ %142, %141 ], [ %.092, %133 ], [ %.092, %130 ], [ %.092, %129 ], [ 1, %119 ], [ %.092, %109 ], [ %.092, %107 ], [ %.092, %91 ], [ %.092, %81 ], [ %.092, %80 ], [ %.092, %79 ], [ %.092, %78 ], [ %.092, %67 ], [ %.092, %57 ], [ %.092, %48 ], [ %.092, %45 ], [ %.092, %39 ], [ %.092, %37 ], [ %.092, %36 ], [ %.092, %22 ], [ %.092, %12 ], [ %.092, %9 ]
  %.090.be = phi i64 [ %.090, %8 ], [ %.090, %494 ], [ %.090, %492 ], [ %.090, %491 ], [ %.090, %490 ], [ %.090, %485 ], [ %.090, %484 ], [ %.090, %479 ], [ %.090, %478 ], [ %.090, %469 ], [ %.090, %468 ], [ %467, %466 ], [ %.090, %465 ], [ %.090, %459 ], [ %.090, %457 ], [ %.090, %452 ], [ %.090, %450 ], [ %.090, %440 ], [ %.090, %430 ], [ %.090, %428 ], [ %.090, %427 ], [ %.090, %416 ], [ %.090, %406 ], [ %.090, %404 ], [ %.090, %399 ], [ %.090, %397 ], [ %.090, %386 ], [ %.090, %376 ], [ %.090, %375 ], [ %.090, %373 ], [ %.090, %372 ], [ %.090, %362 ], [ %.090, %352 ], [ %.090, %351 ], [ %.090, %346 ], [ %.090, %345 ], [ %.090, %331 ], [ %.090, %321 ], [ %.090, %316 ], [ %.090, %315 ], [ %.090, %305 ], [ %.090, %295 ], [ %.090, %294 ], [ %.090, %280 ], [ %.090, %270 ], [ %.090, %265 ], [ %.090, %263 ], [ %.090, %250 ], [ %.090, %240 ], [ %.090, %238 ], [ %.090, %219 ], [ %.090, %209 ], [ %.090, %206 ], [ %.090, %205 ], [ %.090, %203 ], [ %.090, %191 ], [ %.090, %181 ], [ %.090, %179 ], [ %.090, %178 ], [ %.090, %177 ], [ %167, %166 ], [ %.090, %156 ], [ %.090, %148 ], [ %.090, %145 ], [ 0, %144 ], [ %.090, %143 ], [ %.090, %141 ], [ %.090, %133 ], [ %.090, %130 ], [ %.090, %129 ], [ %.090, %119 ], [ %.090, %109 ], [ %.090, %107 ], [ %.090, %91 ], [ %.090, %81 ], [ %.090, %80 ], [ %.090, %79 ], [ %.090, %78 ], [ %.090, %67 ], [ %.090, %57 ], [ %.090, %48 ], [ %.090, %45 ], [ %.090, %39 ], [ %.090, %37 ], [ %.090, %36 ], [ %.090, %22 ], [ %.090, %12 ], [ %.090, %9 ]
  %.088.be = phi i64 [ %.088, %8 ], [ %.088, %494 ], [ %.088, %492 ], [ %.088, %491 ], [ %.088, %490 ], [ %.088, %485 ], [ %.088, %484 ], [ %.088, %479 ], [ %.088, %478 ], [ %.088, %469 ], [ %.088, %468 ], [ %.088, %466 ], [ %.088, %465 ], [ %.088, %459 ], [ %.088, %457 ], [ %.088, %452 ], [ %.088, %450 ], [ %.088, %440 ], [ %.088, %430 ], [ %429, %428 ], [ %.088, %427 ], [ %.088, %416 ], [ %.088, %406 ], [ %.088, %404 ], [ %.088, %399 ], [ %.088, %397 ], [ %.088, %386 ], [ %.088, %376 ], [ %.088, %375 ], [ %.088, %373 ], [ %.088, %372 ], [ %.088, %362 ], [ %.088, %352 ], [ %.088, %351 ], [ %.088, %346 ], [ %.088, %345 ], [ %.088, %331 ], [ %.088, %321 ], [ %.088, %316 ], [ %.088, %315 ], [ %.088, %305 ], [ %.088, %295 ], [ %.088, %294 ], [ %.088, %280 ], [ %.088, %270 ], [ %.088, %265 ], [ %.088, %263 ], [ %.088, %250 ], [ %.088, %240 ], [ %.088, %238 ], [ %.088, %219 ], [ %.088, %209 ], [ %.088, %206 ], [ %.088, %205 ], [ %.088, %203 ], [ %.088, %191 ], [ %.088, %181 ], [ 1, %179 ], [ %.088, %178 ], [ %.088, %177 ], [ %.088, %166 ], [ %.088, %156 ], [ %.088, %148 ], [ %.088, %145 ], [ %.088, %144 ], [ %.088, %143 ], [ %.088, %141 ], [ %.088, %133 ], [ %.088, %130 ], [ %.088, %129 ], [ %.088, %119 ], [ %.088, %109 ], [ %.088, %107 ], [ %.088, %91 ], [ %.088, %81 ], [ %.088, %80 ], [ %.088, %79 ], [ %.088, %78 ], [ %.088, %67 ], [ %.088, %57 ], [ %.088, %48 ], [ %.088, %45 ], [ %.088, %39 ], [ %.088, %37 ], [ %.088, %36 ], [ %.088, %22 ], [ %.088, %12 ], [ %.088, %9 ]
  %.086.be = phi i64 [ %.086, %8 ], [ %.086, %494 ], [ %.086, %492 ], [ %.086, %491 ], [ %.086, %490 ], [ %.086, %485 ], [ %.086, %484 ], [ %482, %479 ], [ %.086, %478 ], [ %.086, %469 ], [ %.086, %468 ], [ %.086, %466 ], [ %.086, %465 ], [ %.086, %459 ], [ %.086, %457 ], [ %.086, %452 ], [ %.086, %450 ], [ %.086, %440 ], [ %.086, %430 ], [ %.086, %428 ], [ %.086, %427 ], [ %.086, %416 ], [ %.086, %406 ], [ %.086, %404 ], [ %.086, %399 ], [ %.086, %397 ], [ %.086, %386 ], [ %.086, %376 ], [ %.086, %375 ], [ %.086, %373 ], [ %.086, %372 ], [ %.086, %362 ], [ %.086, %352 ], [ %.086, %351 ], [ %.086, %346 ], [ %.086, %345 ], [ %.086, %331 ], [ %.086, %321 ], [ %.086, %316 ], [ %.086, %315 ], [ %.086, %305 ], [ %.086, %295 ], [ %.086, %294 ], [ %283, %280 ], [ %.086, %270 ], [ %268, %265 ], [ %.086, %263 ], [ %.086, %250 ], [ %.086, %240 ], [ %.086, %238 ], [ %.086, %219 ], [ %.086, %209 ], [ %.086, %206 ], [ 0, %205 ], [ %.086, %203 ], [ %.086, %191 ], [ %.086, %181 ], [ %.086, %179 ], [ %.086, %178 ], [ %.086, %177 ], [ %.086, %166 ], [ %.086, %156 ], [ %.086, %148 ], [ %.086, %145 ], [ %.086, %144 ], [ %.086, %143 ], [ %.086, %141 ], [ %.086, %133 ], [ %.086, %130 ], [ %.086, %129 ], [ %.086, %119 ], [ %.086, %109 ], [ %.086, %107 ], [ %.086, %91 ], [ %.086, %81 ], [ %.086, %80 ], [ %.086, %79 ], [ %.086, %78 ], [ %.086, %67 ], [ %.086, %57 ], [ %.086, %48 ], [ %.086, %45 ], [ %.086, %39 ], [ %.086, %37 ], [ %.086, %36 ], [ %.086, %22 ], [ %.086, %12 ], [ %.086, %9 ]
  %.084.be = phi i64 [ %.084, %8 ], [ %.084, %494 ], [ %.084, %492 ], [ %.084, %491 ], [ %.084, %490 ], [ %488, %485 ], [ %.084, %484 ], [ %.084, %479 ], [ %.084, %478 ], [ %.084, %469 ], [ %.084, %468 ], [ %.084, %466 ], [ %.084, %465 ], [ %.084, %459 ], [ %.084, %457 ], [ %.084, %452 ], [ %.084, %450 ], [ %.084, %440 ], [ %.084, %430 ], [ %.084, %428 ], [ %.084, %427 ], [ %.084, %416 ], [ %.084, %406 ], [ %.084, %404 ], [ %.084, %399 ], [ %.084, %397 ], [ %.084, %386 ], [ %.084, %376 ], [ %.084, %375 ], [ %.084, %373 ], [ %.084, %372 ], [ %.084, %362 ], [ %.084, %352 ], [ %.084, %351 ], [ %349, %346 ], [ %.084, %345 ], [ %334, %331 ], [ %.084, %321 ], [ %.084, %316 ], [ %.084, %315 ], [ %.084, %305 ], [ %.084, %295 ], [ %.084, %294 ], [ %.084, %280 ], [ %.084, %270 ], [ %.084, %265 ], [ %.084, %263 ], [ %.084, %250 ], [ %.084, %240 ], [ %.084, %238 ], [ %.084, %219 ], [ %.084, %209 ], [ %.084, %206 ], [ 0, %205 ], [ %.084, %203 ], [ %.084, %191 ], [ %.084, %181 ], [ %.084, %179 ], [ %.084, %178 ], [ %.084, %177 ], [ %.084, %166 ], [ %.084, %156 ], [ %.084, %148 ], [ %.084, %145 ], [ %.084, %144 ], [ %.084, %143 ], [ %.084, %141 ], [ %.084, %133 ], [ %.084, %130 ], [ %.084, %129 ], [ %.084, %119 ], [ %.084, %109 ], [ %.084, %107 ], [ %.084, %91 ], [ %.084, %81 ], [ %.084, %80 ], [ %.084, %79 ], [ %.084, %78 ], [ %.084, %67 ], [ %.084, %57 ], [ %.084, %48 ], [ %.084, %45 ], [ %.084, %39 ], [ %.084, %37 ], [ %.084, %36 ], [ %.084, %22 ], [ %.084, %12 ], [ %.084, %9 ]
  %.082.be = phi i64 [ %.082, %8 ], [ %.082, %494 ], [ %.082, %492 ], [ %.082, %491 ], [ %.082, %490 ], [ %.082, %485 ], [ %.082, %484 ], [ %.082, %479 ], [ %.082, %478 ], [ %.082, %469 ], [ %.082, %468 ], [ %.082, %466 ], [ %.082, %465 ], [ %.082, %459 ], [ %.082, %457 ], [ %.082, %452 ], [ %.082, %450 ], [ %.082, %440 ], [ %.082, %430 ], [ %.082, %428 ], [ %.082, %427 ], [ %.082, %416 ], [ %.082, %406 ], [ %.082, %404 ], [ %.082, %399 ], [ %.082, %397 ], [ %.082, %386 ], [ %.082, %376 ], [ %.082, %375 ], [ %374, %373 ], [ %.082, %372 ], [ %.082, %362 ], [ %.082, %352 ], [ %.082, %351 ], [ %.082, %346 ], [ %.082, %345 ], [ %.082, %331 ], [ %.082, %321 ], [ %.082, %316 ], [ %.082, %315 ], [ %.082, %305 ], [ %.082, %295 ], [ %.082, %294 ], [ %.082, %280 ], [ %.082, %270 ], [ %.082, %265 ], [ %.082, %263 ], [ %.082, %250 ], [ %.082, %240 ], [ %.082, %238 ], [ %.082, %219 ], [ %.082, %209 ], [ %.082, %206 ], [ %.094, %205 ], [ %.082, %203 ], [ %.082, %191 ], [ %.082, %181 ], [ %.082, %179 ], [ %.082, %178 ], [ %.082, %177 ], [ %.082, %166 ], [ %.082, %156 ], [ %.082, %148 ], [ %.082, %145 ], [ %.082, %144 ], [ %.082, %143 ], [ %.082, %141 ], [ %.082, %133 ], [ %.082, %130 ], [ %.082, %129 ], [ %.082, %119 ], [ %.082, %109 ], [ %.082, %107 ], [ %.082, %91 ], [ %.082, %81 ], [ %.082, %80 ], [ %.082, %79 ], [ %.082, %78 ], [ %.082, %67 ], [ %.082, %57 ], [ %.082, %48 ], [ %.082, %45 ], [ %.082, %39 ], [ %.082, %37 ], [ %.082, %36 ], [ %.082, %22 ], [ %.082, %12 ], [ %.082, %9 ]
  %.080.be = phi i64 [ %.080, %8 ], [ %.080, %494 ], [ %.080, %492 ], [ %.080, %491 ], [ %.080, %490 ], [ %.080, %485 ], [ %.080, %484 ], [ %.080, %479 ], [ %.080, %478 ], [ %.080, %469 ], [ %.080, %468 ], [ %.080, %466 ], [ %.080, %465 ], [ %.080, %459 ], [ %.080, %457 ], [ %.080, %452 ], [ %.080, %450 ], [ %.080, %440 ], [ %.080, %430 ], [ %.080, %428 ], [ %.080, %427 ], [ %.080, %416 ], [ %.080, %406 ], [ %405, %404 ], [ %.080, %399 ], [ %.080, %397 ], [ %.080, %386 ], [ %.080, %376 ], [ 1, %375 ], [ %.080, %373 ], [ %.080, %372 ], [ %.080, %362 ], [ %.080, %352 ], [ %.080, %351 ], [ %.080, %346 ], [ %.080, %345 ], [ %.080, %331 ], [ %.080, %321 ], [ %.080, %316 ], [ %.080, %315 ], [ %.080, %305 ], [ %.080, %295 ], [ %.080, %294 ], [ %.080, %280 ], [ %.080, %270 ], [ %.080, %265 ], [ %.080, %263 ], [ %.080, %250 ], [ %.080, %240 ], [ %.080, %238 ], [ %.080, %219 ], [ %.080, %209 ], [ %.080, %206 ], [ %.080, %205 ], [ %.080, %203 ], [ %.080, %191 ], [ %.080, %181 ], [ %.080, %179 ], [ %.080, %178 ], [ %.080, %177 ], [ %.080, %166 ], [ %.080, %156 ], [ %.080, %148 ], [ %.080, %145 ], [ %.080, %144 ], [ %.080, %143 ], [ %.080, %141 ], [ %.080, %133 ], [ %.080, %130 ], [ %.080, %129 ], [ %.080, %119 ], [ %.080, %109 ], [ %.080, %107 ], [ %.080, %91 ], [ %.080, %81 ], [ %.080, %80 ], [ %.080, %79 ], [ %.080, %78 ], [ %.080, %67 ], [ %.080, %57 ], [ %.080, %48 ], [ %.080, %45 ], [ %.080, %39 ], [ %.080, %37 ], [ %.080, %36 ], [ %.080, %22 ], [ %.080, %12 ], [ %.080, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ -1219399700, %494 ], [ -710851842, %492 ], [ -1993539820, %491 ], [ 1857798619, %490 ], [ 687466489, %485 ], [ 444423747, %484 ], [ 92213503, %479 ], [ 1142626727, %478 ], [ -1733184672, %469 ], [ 1599245804, %468 ], [ 1859435406, %466 ], [ 820121003, %465 ], [ -1148335567, %459 ], [ 2098827931, %457 ], [ 942427683, %452 ], [ 1947815591, %450 ], [ %449, %440 ], [ %439, %430 ], [ -1367802866, %428 ], [ -842739224, %427 ], [ %426, %416 ], [ %415, %406 ], [ 2006741682, %404 ], [ -2070638175, %399 ], [ %398, %397 ], [ %396, %386 ], [ %385, %376 ], [ 2006741682, %375 ], [ -900443623, %373 ], [ -412664160, %372 ], [ %371, %362 ], [ %361, %352 ], [ 922264682, %351 ], [ -1123637957, %346 ], [ -1123637957, %345 ], [ %344, %331 ], [ %330, %321 ], [ %320, %316 ], [ 922264682, %315 ], [ %314, %305 ], [ %304, %295 ], [ 44901640, %294 ], [ %293, %280 ], [ %279, %270 ], [ 44901640, %265 ], [ %264, %263 ], [ %262, %250 ], [ %249, %240 ], [ %239, %238 ], [ %237, %219 ], [ %218, %209 ], [ %208, %206 ], [ -900443623, %205 ], [ %204, %203 ], [ %202, %191 ], [ %190, %181 ], [ -1367802866, %179 ], [ -1298554617, %178 ], [ -238480804, %177 ], [ %176, %166 ], [ %165, %156 ], [ -1361204669, %148 ], [ %147, %145 ], [ -238480804, %144 ], [ -1298554617, %143 ], [ -544924050, %141 ], [ 1143899110, %133 ], [ %132, %130 ], [ -544924050, %129 ], [ %128, %119 ], [ %118, %109 ], [ %108, %107 ], [ %106, %91 ], [ %90, %81 ], [ 1081816889, %80 ], [ -2034159705, %79 ], [ 1947815591, %78 ], [ %77, %67 ], [ %66, %57 ], [ %56, %48 ], [ %47, %45 ], [ 1081816889, %39 ], [ -365042465, %37 ], [ -1086529206, %36 ], [ %35, %22 ], [ %21, %12 ], [ %11, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i64, i64* @n, align 8
  %.not105 = icmp sgt i64 %.0100, %10
  %11 = select i1 %.not105, i32 1055372596, i32 -416927896
  br label %.backedge

12:                                               ; preds = %8
  %13 = load i32, i32* @x.3, align 4
  %14 = load i32, i32* @y.4, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 942427683, i32 -2051358050
  br label %.backedge

22:                                               ; preds = %8
  %23 = tail call i64 @_Z4readv()
  %24 = getelementptr inbounds [1010 x i64], [1010 x i64]* @x, i64 0, i64 %.0100
  store i64 %23, i64* %24, align 8
  %25 = tail call i64 @_Z4readv()
  %26 = getelementptr inbounds [1010 x i64], [1010 x i64]* @y, i64 0, i64 %.0100
  store i64 %25, i64* %26, align 8
  %27 = load i32, i32* @x.3, align 4
  %28 = load i32, i32* @y.4, align 4
  %29 = add i32 %27, -1
  %30 = mul i32 %29, %27
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %33, %32
  %35 = select i1 %34, i32 -56239691, i32 -2051358050
  br label %.backedge

36:                                               ; preds = %8
  br label %.backedge

37:                                               ; preds = %8
  %38 = add i64 %.0100, 1
  br label %.backedge

39:                                               ; preds = %8
  %40 = load i64, i64* getelementptr inbounds ([1010 x i64], [1010 x i64]* @x, i64 0, i64 1), align 8
  %41 = load i64, i64* getelementptr inbounds ([1010 x i64], [1010 x i64]* @y, i64 0, i64 1), align 8
  %42 = add i64 %41, %40
  %43 = tail call i64 @_Z3Absx(i64 %42)
  %44 = and i64 %43, 1
  br label %.backedge

45:                                               ; preds = %8
  %46 = load i64, i64* @n, align 8
  %.not104 = icmp sgt i64 %.096, %46
  %47 = select i1 %.not104, i32 1285597660, i32 1385595995
  br label %.backedge

48:                                               ; preds = %8
  %49 = getelementptr inbounds [1010 x i64], [1010 x i64]* @x, i64 0, i64 %.096
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds [1010 x i64], [1010 x i64]* @y, i64 0, i64 %.096
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, %50
  %54 = tail call i64 @_Z3Absx(i64 %53)
  %55 = and i64 %54, 1
  %.not = icmp eq i64 %55, %.098
  %56 = select i1 %.not, i32 1316069279, i32 -1974137396
  br label %.backedge

57:                                               ; preds = %8
  %58 = load i32, i32* @x.3, align 4
  %59 = load i32, i32* @y.4, align 4
  %60 = add i32 %58, -1
  %61 = mul i32 %60, %58
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %64, %63
  %66 = select i1 %65, i32 2098827931, i32 -392159524
  br label %.backedge

67:                                               ; preds = %8
  %68 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %69 = load i32, i32* @x.3, align 4
  %70 = load i32, i32* @y.4, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 -553255617, i32 -392159524
  br label %.backedge

78:                                               ; preds = %8
  br label %.backedge

79:                                               ; preds = %8
  br label %.backedge

80:                                               ; preds = %8
  %.neg = add i64 %.096, 1
  br label %.backedge

81:                                               ; preds = %8
  %82 = load i32, i32* @x.3, align 4
  %83 = load i32, i32* @y.4, align 4
  %84 = add i32 %82, -1
  %85 = mul i32 %84, %82
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %88, %87
  %90 = select i1 %89, i32 -1148335567, i32 1546097036
  br label %.backedge

91:                                               ; preds = %8
  %92 = sub i64 32, %.098
  %93 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %92)
  %94 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %93, i8 signext 10)
  store i64 1, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @len, i64 0, i64 1), align 8
  %95 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 1)
  %96 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %95, i8 signext 32)
  %97 = icmp ne i64 %.098, 0
  store i1 %97, i1* %5, align 1
  %98 = load i32, i32* @x.3, align 4
  %99 = load i32, i32* @y.4, align 4
  %100 = add i32 %98, -1
  %101 = mul i32 %100, %98
  %102 = and i32 %101, 1
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %104, %103
  %106 = select i1 %105, i32 -1152231535, i32 1546097036
  br label %.backedge

107:                                              ; preds = %8
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %108 = select i1 %.0..0..0., i32 -1938879502, i32 32873965
  br label %.backedge

109:                                              ; preds = %8
  %110 = load i32, i32* @x.3, align 4
  %111 = load i32, i32* @y.4, align 4
  %112 = add i32 %110, -1
  %113 = mul i32 %112, %110
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %116, %115
  %118 = select i1 %117, i32 820121003, i32 -20915451
  br label %.backedge

119:                                              ; preds = %8
  %120 = load i32, i32* @x.3, align 4
  %121 = load i32, i32* @y.4, align 4
  %122 = add i32 %120, -1
  %123 = mul i32 %122, %120
  %124 = and i32 %123, 1
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %126, %125
  %128 = select i1 %127, i32 1014871441, i32 -20915451
  br label %.backedge

129:                                              ; preds = %8
  br label %.backedge

130:                                              ; preds = %8
  %131 = icmp slt i64 %.092, 31
  %132 = select i1 %131, i32 -706078267, i32 382446756
  br label %.backedge

133:                                              ; preds = %8
  %134 = trunc i64 %.092 to i32
  %135 = shl nuw i32 1, %134
  %136 = sext i32 %135 to i64
  %137 = add i64 %.094, 1
  %138 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %137
  store i64 %136, i64* %138, align 8
  %139 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %136)
  %140 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %139, i8 signext 32)
  br label %.backedge

141:                                              ; preds = %8
  %142 = add i64 %.092, 1
  br label %.backedge

143:                                              ; preds = %8
  br label %.backedge

144:                                              ; preds = %8
  br label %.backedge

145:                                              ; preds = %8
  %146 = icmp slt i64 %.090, 31
  %147 = select i1 %146, i32 71278488, i32 1892976843
  br label %.backedge

148:                                              ; preds = %8
  %149 = trunc i64 %.090 to i32
  %150 = shl nuw i32 1, %149
  %151 = sext i32 %150 to i64
  %152 = add i64 %.094, 1
  %153 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %152
  store i64 %151, i64* %153, align 8
  %154 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %151)
  %155 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %154, i8 signext 32)
  br label %.backedge

156:                                              ; preds = %8
  %157 = load i32, i32* @x.3, align 4
  %158 = load i32, i32* @y.4, align 4
  %159 = add i32 %157, -1
  %160 = mul i32 %159, %157
  %161 = and i32 %160, 1
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %163, %162
  %165 = select i1 %164, i32 1859435406, i32 -1034513793
  br label %.backedge

166:                                              ; preds = %8
  %167 = add i64 %.090, 1
  %168 = load i32, i32* @x.3, align 4
  %169 = load i32, i32* @y.4, align 4
  %170 = add i32 %168, -1
  %171 = mul i32 %170, %168
  %172 = and i32 %171, 1
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %174, %173
  %176 = select i1 %175, i32 1619412317, i32 -1034513793
  br label %.backedge

177:                                              ; preds = %8
  br label %.backedge

178:                                              ; preds = %8
  br label %.backedge

179:                                              ; preds = %8
  %180 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8 signext 10)
  br label %.backedge

181:                                              ; preds = %8
  %182 = load i32, i32* @x.3, align 4
  %183 = load i32, i32* @y.4, align 4
  %184 = add i32 %182, -1
  %185 = mul i32 %184, %182
  %186 = and i32 %185, 1
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %188, %187
  %190 = select i1 %189, i32 1599245804, i32 1196038641
  br label %.backedge

191:                                              ; preds = %8
  %192 = load i64, i64* @n, align 8
  %193 = icmp sle i64 %.088, %192
  store i1 %193, i1* %4, align 1
  %194 = load i32, i32* @x.3, align 4
  %195 = load i32, i32* @y.4, align 4
  %196 = add i32 %194, -1
  %197 = mul i32 %196, %194
  %198 = and i32 %197, 1
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %200, %199
  %202 = select i1 %201, i32 1473354480, i32 1196038641
  br label %.backedge

203:                                              ; preds = %8
  %.0..0..0.76 = load volatile i1, i1* %4, align 1
  %204 = select i1 %.0..0..0.76, i32 123820573, i32 -248713333
  br label %.backedge

205:                                              ; preds = %8
  br label %.backedge

206:                                              ; preds = %8
  %207 = icmp sgt i64 %.082, 0
  %208 = select i1 %207, i32 -263727597, i32 -1042593960
  br label %.backedge

209:                                              ; preds = %8
  %210 = load i32, i32* @x.3, align 4
  %211 = load i32, i32* @y.4, align 4
  %212 = add i32 %210, -1
  %213 = mul i32 %212, %210
  %214 = and i32 %213, 1
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %216, %215
  %218 = select i1 %217, i32 -1733184672, i32 -1522332466
  br label %.backedge

219:                                              ; preds = %8
  %220 = getelementptr inbounds [1010 x i64], [1010 x i64]* @x, i64 0, i64 %.088
  %221 = load i64, i64* %220, align 8
  %222 = sub i64 %.086, %221
  %223 = tail call i64 @_Z3Absx(i64 %222)
  %224 = getelementptr inbounds [1010 x i64], [1010 x i64]* @y, i64 0, i64 %.088
  %225 = load i64, i64* %224, align 8
  %226 = sub i64 %.084, %225
  %227 = tail call i64 @_Z3Absx(i64 %226)
  %228 = icmp sgt i64 %223, %227
  store i1 %228, i1* %3, align 1
  %229 = load i32, i32* @x.3, align 4
  %230 = load i32, i32* @y.4, align 4
  %231 = add i32 %229, -1
  %232 = mul i32 %231, %229
  %233 = and i32 %232, 1
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %235, %234
  %237 = select i1 %236, i32 -1313507558, i32 -1522332466
  br label %.backedge

238:                                              ; preds = %8
  %.0..0..0.77 = load volatile i1, i1* %3, align 1
  %239 = select i1 %.0..0..0.77, i32 269958780, i32 2146537967
  br label %.backedge

240:                                              ; preds = %8
  %241 = load i32, i32* @x.3, align 4
  %242 = load i32, i32* @y.4, align 4
  %243 = add i32 %241, -1
  %244 = mul i32 %243, %241
  %245 = and i32 %244, 1
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %247, %246
  %249 = select i1 %248, i32 1142626727, i32 -1939421800
  br label %.backedge

250:                                              ; preds = %8
  %251 = getelementptr inbounds [1010 x i64], [1010 x i64]* @x, i64 0, i64 %.088
  %252 = load i64, i64* %251, align 8
  %253 = icmp slt i64 %.086, %252
  store i1 %253, i1* %2, align 1
  %254 = load i32, i32* @x.3, align 4
  %255 = load i32, i32* @y.4, align 4
  %256 = add i32 %254, -1
  %257 = mul i32 %256, %254
  %258 = and i32 %257, 1
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %260, %259
  %262 = select i1 %261, i32 -1635276038, i32 -1939421800
  br label %.backedge

263:                                              ; preds = %8
  %.0..0..0.78 = load volatile i1, i1* %2, align 1
  %264 = select i1 %.0..0..0.78, i32 -1178560948, i32 -246766572
  br label %.backedge

265:                                              ; preds = %8
  %266 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.082
  %267 = load i64, i64* %266, align 8
  %268 = add i64 %267, %.086
  %269 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %.082
  store i8 82, i8* %269, align 1
  br label %.backedge

270:                                              ; preds = %8
  %271 = load i32, i32* @x.3, align 4
  %272 = load i32, i32* @y.4, align 4
  %273 = add i32 %271, -1
  %274 = mul i32 %273, %271
  %275 = and i32 %274, 1
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %277, %276
  %279 = select i1 %278, i32 92213503, i32 921108948
  br label %.backedge

280:                                              ; preds = %8
  %281 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.082
  %282 = load i64, i64* %281, align 8
  %283 = sub i64 %.086, %282
  %284 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %.082
  store i8 76, i8* %284, align 1
  %285 = load i32, i32* @x.3, align 4
  %286 = load i32, i32* @y.4, align 4
  %287 = add i32 %285, -1
  %288 = mul i32 %287, %285
  %289 = and i32 %288, 1
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %291, %290
  %293 = select i1 %292, i32 2032061624, i32 921108948
  br label %.backedge

294:                                              ; preds = %8
  br label %.backedge

295:                                              ; preds = %8
  %296 = load i32, i32* @x.3, align 4
  %297 = load i32, i32* @y.4, align 4
  %298 = add i32 %296, -1
  %299 = mul i32 %298, %296
  %300 = and i32 %299, 1
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %302, %301
  %304 = select i1 %303, i32 444423747, i32 -129573806
  br label %.backedge

305:                                              ; preds = %8
  %306 = load i32, i32* @x.3, align 4
  %307 = load i32, i32* @y.4, align 4
  %308 = add i32 %306, -1
  %309 = mul i32 %308, %306
  %310 = and i32 %309, 1
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %312, %311
  %314 = select i1 %313, i32 -1487023079, i32 -129573806
  br label %.backedge

315:                                              ; preds = %8
  br label %.backedge

316:                                              ; preds = %8
  %317 = getelementptr inbounds [1010 x i64], [1010 x i64]* @y, i64 0, i64 %.088
  %318 = load i64, i64* %317, align 8
  %319 = icmp slt i64 %.084, %318
  %320 = select i1 %319, i32 2094811072, i32 1314327494
  br label %.backedge

321:                                              ; preds = %8
  %322 = load i32, i32* @x.3, align 4
  %323 = load i32, i32* @y.4, align 4
  %324 = add i32 %322, -1
  %325 = mul i32 %324, %322
  %326 = and i32 %325, 1
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %328, %327
  %330 = select i1 %329, i32 687466489, i32 1396282944
  br label %.backedge

331:                                              ; preds = %8
  %332 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.082
  %333 = load i64, i64* %332, align 8
  %334 = add i64 %333, %.084
  %335 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %.082
  store i8 85, i8* %335, align 1
  %336 = load i32, i32* @x.3, align 4
  %337 = load i32, i32* @y.4, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 -2051390137, i32 1396282944
  br label %.backedge

345:                                              ; preds = %8
  br label %.backedge

346:                                              ; preds = %8
  %347 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.082
  %348 = load i64, i64* %347, align 8
  %349 = sub i64 %.084, %348
  %350 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %.082
  store i8 68, i8* %350, align 1
  br label %.backedge

351:                                              ; preds = %8
  br label %.backedge

352:                                              ; preds = %8
  %353 = load i32, i32* @x.3, align 4
  %354 = load i32, i32* @y.4, align 4
  %355 = add i32 %353, -1
  %356 = mul i32 %355, %353
  %357 = and i32 %356, 1
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %359, %358
  %361 = select i1 %360, i32 1857798619, i32 1410734743
  br label %.backedge

362:                                              ; preds = %8
  %363 = load i32, i32* @x.3, align 4
  %364 = load i32, i32* @y.4, align 4
  %365 = add i32 %363, -1
  %366 = mul i32 %365, %363
  %367 = and i32 %366, 1
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %369, %368
  %371 = select i1 %370, i32 -154528268, i32 1410734743
  br label %.backedge

372:                                              ; preds = %8
  br label %.backedge

373:                                              ; preds = %8
  %374 = add i64 %.082, -1
  br label %.backedge

375:                                              ; preds = %8
  br label %.backedge

376:                                              ; preds = %8
  %377 = load i32, i32* @x.3, align 4
  %378 = load i32, i32* @y.4, align 4
  %379 = add i32 %377, -1
  %380 = mul i32 %379, %377
  %381 = and i32 %380, 1
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %383, %382
  %385 = select i1 %384, i32 -1993539820, i32 -1140548700
  br label %.backedge

386:                                              ; preds = %8
  %387 = icmp sle i64 %.080, %.094
  store i1 %387, i1* %1, align 1
  %388 = load i32, i32* @x.3, align 4
  %389 = load i32, i32* @y.4, align 4
  %390 = add i32 %388, -1
  %391 = mul i32 %390, %388
  %392 = and i32 %391, 1
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %394, %393
  %396 = select i1 %395, i32 1621153452, i32 -1140548700
  br label %.backedge

397:                                              ; preds = %8
  %.0..0..0.79 = load volatile i1, i1* %1, align 1
  %398 = select i1 %.0..0..0.79, i32 1779395987, i32 160180701
  br label %.backedge

399:                                              ; preds = %8
  %400 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %.080
  %401 = load i8, i8* %400, align 1
  %402 = sext i8 %401 to i32
  %403 = tail call i32 @putchar(i32 %402)
  br label %.backedge

404:                                              ; preds = %8
  %405 = add i64 %.080, 1
  br label %.backedge

406:                                              ; preds = %8
  %407 = load i32, i32* @x.3, align 4
  %408 = load i32, i32* @y.4, align 4
  %409 = add i32 %407, -1
  %410 = mul i32 %409, %407
  %411 = and i32 %410, 1
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %413, %412
  %415 = select i1 %414, i32 -710851842, i32 1864437555
  br label %.backedge

416:                                              ; preds = %8
  %417 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8 signext 10)
  %418 = load i32, i32* @x.3, align 4
  %419 = load i32, i32* @y.4, align 4
  %420 = add i32 %418, -1
  %421 = mul i32 %420, %418
  %422 = and i32 %421, 1
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %424, %423
  %426 = select i1 %425, i32 -1462828851, i32 1864437555
  br label %.backedge

427:                                              ; preds = %8
  br label %.backedge

428:                                              ; preds = %8
  %429 = add i64 %.088, 1
  br label %.backedge

430:                                              ; preds = %8
  %431 = load i32, i32* @x.3, align 4
  %432 = load i32, i32* @y.4, align 4
  %433 = add i32 %431, -1
  %434 = mul i32 %433, %431
  %435 = and i32 %434, 1
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %437, %436
  %439 = select i1 %438, i32 -1219399700, i32 -189216477
  br label %.backedge

440:                                              ; preds = %8
  %441 = load i32, i32* @x.3, align 4
  %442 = load i32, i32* @y.4, align 4
  %443 = add i32 %441, -1
  %444 = mul i32 %443, %441
  %445 = and i32 %444, 1
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %447, %446
  %449 = select i1 %448, i32 -1918597592, i32 -189216477
  br label %.backedge

450:                                              ; preds = %8
  br label %.backedge

451:                                              ; preds = %8
  ret i32 0

452:                                              ; preds = %8
  %453 = tail call i64 @_Z4readv()
  %454 = getelementptr inbounds [1010 x i64], [1010 x i64]* @x, i64 0, i64 %.0100
  store i64 %453, i64* %454, align 8
  %455 = tail call i64 @_Z4readv()
  %456 = getelementptr inbounds [1010 x i64], [1010 x i64]* @y, i64 0, i64 %.0100
  store i64 %455, i64* %456, align 8
  br label %.backedge

457:                                              ; preds = %8
  %458 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

459:                                              ; preds = %8
  %460 = sub i64 32, %.098
  %461 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %460)
  %462 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %461, i8 signext 10)
  store i64 1, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @len, i64 0, i64 1), align 8
  %463 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i32 1)
  %464 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %463, i8 signext 32)
  br label %.backedge

465:                                              ; preds = %8
  br label %.backedge

466:                                              ; preds = %8
  %467 = add i64 %.090, 1
  br label %.backedge

468:                                              ; preds = %8
  br label %.backedge

469:                                              ; preds = %8
  %470 = getelementptr inbounds [1010 x i64], [1010 x i64]* @x, i64 0, i64 %.088
  %471 = load i64, i64* %470, align 8
  %472 = sub i64 %.086, %471
  %473 = tail call i64 @_Z3Absx(i64 %472)
  %474 = getelementptr inbounds [1010 x i64], [1010 x i64]* @y, i64 0, i64 %.088
  %475 = load i64, i64* %474, align 8
  %476 = sub i64 %.084, %475
  %477 = tail call i64 @_Z3Absx(i64 %476)
  br label %.backedge

478:                                              ; preds = %8
  br label %.backedge

479:                                              ; preds = %8
  %480 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.082
  %481 = load i64, i64* %480, align 8
  %482 = sub i64 %.086, %481
  %483 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %.082
  store i8 76, i8* %483, align 1
  br label %.backedge

484:                                              ; preds = %8
  br label %.backedge

485:                                              ; preds = %8
  %486 = getelementptr inbounds [50 x i64], [50 x i64]* @len, i64 0, i64 %.082
  %487 = load i64, i64* %486, align 8
  %488 = add i64 %487, %.084
  %489 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %.082
  store i8 85, i8* %489, align 1
  br label %.backedge

490:                                              ; preds = %8
  br label %.backedge

491:                                              ; preds = %8
  br label %.backedge

492:                                              ; preds = %8
  %493 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8 signext 10)
  br label %.backedge

494:                                              ; preds = %8
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i64 @_Z4readv() local_unnamed_addr #0 comdat {
  %1 = alloca i64, align 8
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i8*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.5, align 4
  %10 = load i32, i32* @y.6, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %0
  %.034 = phi i32 [ 838142010, %0 ], [ %.034.be, %.backedge ]
  %.032 = phi i1 [ undef, %0 ], [ %.032.be, %.backedge ]
  %.030 = phi i1 [ undef, %0 ], [ %.030.be, %.backedge ]
  %.0 = phi i64 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.034, label %.backedge [
    i32 838142010, label %17
    i32 -956805832, label %20
    i32 -1646900519, label %35
    i32 -1658352921, label %36
    i32 115249467, label %40
    i32 740138115, label %50
    i32 -31425029, label %62
    i32 1719527752, label %63
    i32 -831032973, label %65
    i32 1798953096, label %73
    i32 -1886773691, label %74
    i32 1908019317, label %78
    i32 -950000564, label %81
    i32 -1905095245, label %83
    i32 1538065247, label %91
    i32 -2062736925, label %101
    i32 1136376470, label %113
    i32 -1120586511, label %115
    i32 -183633343, label %118
    i32 -689735561, label %128
    i32 -1141540509, label %139
    i32 -432228684, label %140
    i32 349704444, label %141
    i32 -1226657935, label %143
    i32 532929368, label %144
    i32 1395490709, label %145
  ]

.backedge:                                        ; preds = %16, %145, %144, %143, %141, %139, %128, %118, %115, %113, %101, %91, %83, %81, %78, %74, %73, %65, %63, %62, %50, %40, %36, %35, %20, %17
  %.034.be = phi i32 [ %.034, %16 ], [ -689735561, %145 ], [ -2062736925, %144 ], [ 740138115, %143 ], [ -956805832, %141 ], [ -432228684, %139 ], [ %138, %128 ], [ %127, %118 ], [ -432228684, %115 ], [ %114, %113 ], [ %112, %101 ], [ %100, %91 ], [ -1886773691, %83 ], [ %82, %81 ], [ -950000564, %78 ], [ %77, %74 ], [ -1886773691, %73 ], [ -1658352921, %65 ], [ %64, %63 ], [ 1719527752, %62 ], [ %61, %50 ], [ %49, %40 ], [ %39, %36 ], [ -1658352921, %35 ], [ %34, %20 ], [ %19, %17 ]
  %.032.be = phi i1 [ %.032, %16 ], [ %.032, %145 ], [ %.032, %144 ], [ %.032, %143 ], [ %.032, %141 ], [ %.032, %139 ], [ %.032, %128 ], [ %.032, %118 ], [ %.032, %115 ], [ %.032, %113 ], [ %.032, %101 ], [ %.032, %91 ], [ %.032, %83 ], [ %.032, %81 ], [ %.032, %78 ], [ %.032, %74 ], [ %.032, %73 ], [ %.032, %65 ], [ %.032, %63 ], [ %.0..0..0.27, %62 ], [ %.032, %50 ], [ %.032, %40 ], [ true, %36 ], [ %.032, %35 ], [ %.032, %20 ], [ %.032, %17 ]
  %.030.be = phi i1 [ %.030, %16 ], [ %.030, %145 ], [ %.030, %144 ], [ %.030, %143 ], [ %.030, %141 ], [ %.030, %139 ], [ %.030, %128 ], [ %.030, %118 ], [ %.030, %115 ], [ %.030, %113 ], [ %.030, %101 ], [ %.030, %91 ], [ %.030, %83 ], [ %.030, %81 ], [ %80, %78 ], [ false, %74 ], [ %.030, %73 ], [ %.030, %65 ], [ %.030, %63 ], [ %.030, %62 ], [ %.030, %50 ], [ %.030, %40 ], [ %.030, %36 ], [ %.030, %35 ], [ %.030, %20 ], [ %.030, %17 ]
  %.0.be = phi i64 [ %.0, %16 ], [ %.0, %145 ], [ %.0, %144 ], [ %.0, %143 ], [ %.0, %141 ], [ %.0..0..0.29, %139 ], [ %.0, %128 ], [ %.0, %118 ], [ %117, %115 ], [ %.0, %113 ], [ %.0, %101 ], [ %.0, %91 ], [ %.0, %83 ], [ %.0, %81 ], [ %.0, %78 ], [ %.0, %74 ], [ %.0, %73 ], [ %.0, %65 ], [ %.0, %63 ], [ %.0, %62 ], [ %.0, %50 ], [ %.0, %40 ], [ %.0, %36 ], [ %.0, %35 ], [ %.0, %20 ], [ %.0, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0.3 = load volatile i1, i1* %8, align 1
  %.0..0..0.4 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0.3, %.0..0..0.4
  %19 = select i1 %18, i32 -956805832, i32 349704444
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i64, align 8
  store i64* %21, i64** %6, align 8
  %22 = alloca i64, align 8
  store i64* %22, i64** %5, align 8
  %23 = alloca i8, align 1
  store i8* %23, i8** %4, align 8
  %.0..0..0.5 = load volatile i64*, i64** %6, align 8
  store i64 0, i64* %.0..0..0.5, align 8
  %.0..0..0.12 = load volatile i64*, i64** %5, align 8
  store i64 0, i64* %.0..0..0.12, align 8
  %24 = call i32 @getchar()
  %25 = trunc i32 %24 to i8
  %.0..0..0.17 = load volatile i8*, i8** %4, align 8
  store i8 %25, i8* %.0..0..0.17, align 1
  %26 = load i32, i32* @x.5, align 4
  %27 = load i32, i32* @y.6, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 -1646900519, i32 349704444
  br label %.backedge

35:                                               ; preds = %16
  br label %.backedge

36:                                               ; preds = %16
  %.0..0..0.18 = load volatile i8*, i8** %4, align 8
  %37 = load i8, i8* %.0..0..0.18, align 1
  %38 = icmp slt i8 %37, 48
  %39 = select i1 %38, i32 1719527752, i32 115249467
  br label %.backedge

40:                                               ; preds = %16
  %41 = load i32, i32* @x.5, align 4
  %42 = load i32, i32* @y.6, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 740138115, i32 -1226657935
  br label %.backedge

50:                                               ; preds = %16
  %.0..0..0.19 = load volatile i8*, i8** %4, align 8
  %51 = load i8, i8* %.0..0..0.19, align 1
  %52 = icmp sgt i8 %51, 57
  store i1 %52, i1* %3, align 1
  %53 = load i32, i32* @x.5, align 4
  %54 = load i32, i32* @y.6, align 4
  %55 = add i32 %53, -1
  %56 = mul i32 %55, %53
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %59, %58
  %61 = select i1 %60, i32 -31425029, i32 -1226657935
  br label %.backedge

62:                                               ; preds = %16
  %.0..0..0.27 = load volatile i1, i1* %3, align 1
  br label %.backedge

63:                                               ; preds = %16
  %64 = select i1 %.032, i32 -831032973, i32 1798953096
  br label %.backedge

65:                                               ; preds = %16
  %.0..0..0.20 = load volatile i8*, i8** %4, align 8
  %66 = load i8, i8* %.0..0..0.20, align 1
  %67 = icmp eq i8 %66, 45
  %68 = zext i1 %67 to i64
  %.0..0..0.13 = load volatile i64*, i64** %5, align 8
  %69 = load i64, i64* %.0..0..0.13, align 8
  %70 = or i64 %69, %68
  %.0..0..0.14 = load volatile i64*, i64** %5, align 8
  store i64 %70, i64* %.0..0..0.14, align 8
  %71 = call i32 @getchar()
  %72 = trunc i32 %71 to i8
  %.0..0..0.21 = load volatile i8*, i8** %4, align 8
  store i8 %72, i8* %.0..0..0.21, align 1
  br label %.backedge

73:                                               ; preds = %16
  br label %.backedge

74:                                               ; preds = %16
  %.0..0..0.22 = load volatile i8*, i8** %4, align 8
  %75 = load i8, i8* %.0..0..0.22, align 1
  %76 = icmp sgt i8 %75, 47
  %77 = select i1 %76, i32 1908019317, i32 -950000564
  br label %.backedge

78:                                               ; preds = %16
  %.0..0..0.23 = load volatile i8*, i8** %4, align 8
  %79 = load i8, i8* %.0..0..0.23, align 1
  %80 = icmp slt i8 %79, 58
  br label %.backedge

81:                                               ; preds = %16
  %82 = select i1 %.030, i32 -1905095245, i32 1538065247
  br label %.backedge

83:                                               ; preds = %16
  %.0..0..0.6 = load volatile i64*, i64** %6, align 8
  %84 = load i64, i64* %.0..0..0.6, align 8
  %.neg.neg = shl i64 %84, 3
  %.0..0..0.7 = load volatile i64*, i64** %6, align 8
  %85 = load i64, i64* %.0..0..0.7, align 8
  %.neg36.neg = shl i64 %85, 1
  %.0..0..0.24 = load volatile i8*, i8** %4, align 8
  %86 = load i8, i8* %.0..0..0.24, align 1
  %87 = sext i8 %86 to i64
  %.neg37.neg = add i64 %.neg.neg, -48
  %.neg38 = add i64 %.neg37.neg, %.neg36.neg
  %88 = add i64 %.neg38, %87
  %.0..0..0.8 = load volatile i64*, i64** %6, align 8
  store i64 %88, i64* %.0..0..0.8, align 8
  %89 = call i32 @getchar()
  %90 = trunc i32 %89 to i8
  %.0..0..0.25 = load volatile i8*, i8** %4, align 8
  store i8 %90, i8* %.0..0..0.25, align 1
  br label %.backedge

91:                                               ; preds = %16
  %92 = load i32, i32* @x.5, align 4
  %93 = load i32, i32* @y.6, align 4
  %94 = add i32 %92, -1
  %95 = mul i32 %94, %92
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %98, %97
  %100 = select i1 %99, i32 -2062736925, i32 532929368
  br label %.backedge

101:                                              ; preds = %16
  %.0..0..0.15 = load volatile i64*, i64** %5, align 8
  %102 = load i64, i64* %.0..0..0.15, align 8
  %103 = icmp ne i64 %102, 0
  store i1 %103, i1* %2, align 1
  %104 = load i32, i32* @x.5, align 4
  %105 = load i32, i32* @y.6, align 4
  %106 = add i32 %104, -1
  %107 = mul i32 %106, %104
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %110, %109
  %112 = select i1 %111, i32 1136376470, i32 532929368
  br label %.backedge

113:                                              ; preds = %16
  %.0..0..0.28 = load volatile i1, i1* %2, align 1
  %114 = select i1 %.0..0..0.28, i32 -1120586511, i32 -183633343
  br label %.backedge

115:                                              ; preds = %16
  %.0..0..0.9 = load volatile i64*, i64** %6, align 8
  %116 = load i64, i64* %.0..0..0.9, align 8
  %117 = sub i64 0, %116
  br label %.backedge

118:                                              ; preds = %16
  %119 = load i32, i32* @x.5, align 4
  %120 = load i32, i32* @y.6, align 4
  %121 = add i32 %119, -1
  %122 = mul i32 %121, %119
  %123 = and i32 %122, 1
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %125, %124
  %127 = select i1 %126, i32 -689735561, i32 1395490709
  br label %.backedge

128:                                              ; preds = %16
  %.0..0..0.10 = load volatile i64*, i64** %6, align 8
  %129 = load i64, i64* %.0..0..0.10, align 8
  store i64 %129, i64* %1, align 8
  %130 = load i32, i32* @x.5, align 4
  %131 = load i32, i32* @y.6, align 4
  %132 = add i32 %130, -1
  %133 = mul i32 %132, %130
  %134 = and i32 %133, 1
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %136, %135
  %138 = select i1 %137, i32 -1141540509, i32 1395490709
  br label %.backedge

139:                                              ; preds = %16
  %.0..0..0.29 = load volatile i64, i64* %1, align 8
  br label %.backedge

140:                                              ; preds = %16
  ret i64 %.0

141:                                              ; preds = %16
  %142 = call i32 @getchar()
  br label %.backedge

143:                                              ; preds = %16
  %.0..0..0.26 = load volatile i8*, i8** %4, align 8
  br label %.backedge

144:                                              ; preds = %16
  %.0..0..0.16 = load volatile i64*, i64** %5, align 8
  br label %.backedge

145:                                              ; preds = %16
  %.0..0..0.11 = load volatile i64*, i64** %6, align 8
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_Z3Absx(i64 %0) local_unnamed_addr #5 comdat {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  %6 = load i32, i32* @x.7, align 4
  %7 = load i32, i32* @y.8, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %12, %11
  %14 = select i1 %13, i32 -176826923, i32 1512557746
  %15 = select i1 %13, i32 -1701147100, i32 1512557746
  %16 = select i1 %13, i32 1963230965, i32 717890163
  %17 = select i1 %13, i32 -952390782, i32 717890163
  %18 = sub i64 0, %0
  %19 = select i1 %13, i32 1978838763, i32 -27196165
  %20 = select i1 %13, i32 43204551, i32 -27196165
  br label %21

21:                                               ; preds = %.backedge, %1
  %.013 = phi i64 [ undef, %1 ], [ %.013.be, %.backedge ]
  %.010 = phi i32 [ -187897040, %1 ], [ %.010.be, %.backedge ]
  %.0 = phi i64 [ undef, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.010, label %.backedge [
    i32 -187897040, label %22
    i32 -634309616, label %25
    i32 43204551, label %26
    i32 1978838763, label %27
    i32 53306762, label %28
    i32 -952390782, label %29
    i32 1963230965, label %30
    i32 1867685563, label %31
    i32 -1701147100, label %32
    i32 -176826923, label %33
    i32 -27196165, label %34
    i32 717890163, label %35
    i32 1512557746, label %36
  ]

.backedge:                                        ; preds = %21, %36, %35, %34, %32, %31, %30, %29, %28, %27, %26, %25, %22
  %.013.be = phi i64 [ %.013, %21 ], [ %.013, %36 ], [ %.013, %35 ], [ %.013, %34 ], [ %.013, %32 ], [ %.0, %31 ], [ %.013, %30 ], [ %.013, %29 ], [ %.013, %28 ], [ %.013, %27 ], [ %.013, %26 ], [ %.013, %25 ], [ %.013, %22 ]
  %.010.be = phi i32 [ %.010, %21 ], [ -1701147100, %36 ], [ -952390782, %35 ], [ 43204551, %34 ], [ %14, %32 ], [ %15, %31 ], [ 1867685563, %30 ], [ %16, %29 ], [ %17, %28 ], [ 1867685563, %27 ], [ %19, %26 ], [ %20, %25 ], [ %24, %22 ]
  %.0.be = phi i64 [ %.0, %21 ], [ %.0, %36 ], [ %.0, %35 ], [ %.0, %34 ], [ %.0, %32 ], [ %.0, %31 ], [ %.0..0..0.8, %30 ], [ %.0, %29 ], [ %.0, %28 ], [ %.0..0..0.7, %27 ], [ %.0, %26 ], [ %.0, %25 ], [ %.0, %22 ]
  br label %21

22:                                               ; preds = %21
  %.0..0..0. = load volatile i64, i64* %5, align 8
  %23 = icmp slt i64 %.0..0..0., 0
  %24 = select i1 %23, i32 -634309616, i32 53306762
  br label %.backedge

25:                                               ; preds = %21
  br label %.backedge

26:                                               ; preds = %21
  store i64 %18, i64* %4, align 8
  br label %.backedge

27:                                               ; preds = %21
  %.0..0..0.7 = load volatile i64, i64* %4, align 8
  br label %.backedge

28:                                               ; preds = %21
  br label %.backedge

29:                                               ; preds = %21
  store i64 %0, i64* %3, align 8
  br label %.backedge

30:                                               ; preds = %21
  %.0..0..0.8 = load volatile i64, i64* %3, align 8
  br label %.backedge

31:                                               ; preds = %21
  br label %.backedge

32:                                               ; preds = %21
  br label %.backedge

33:                                               ; preds = %21
  store i64 %.013, i64* %2, align 8
  %.0..0..0.9 = load volatile i64, i64* %2, align 8
  ret i64 %.0..0..0.9

34:                                               ; preds = %21
  br label %.backedge

35:                                               ; preds = %21
  br label %.backedge

36:                                               ; preds = %21
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #6

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* dereferenceable(272), i8 signext) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"*, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s021963663.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.9, align 4
  %4 = load i32, i32* @y.10, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -460146865, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -460146865, label %11
    i32 -1070484157, label %14
    i32 1393055627, label %24
    i32 1536616621, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 -1070484157, i32 1536616621
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.9, align 4
  %16 = load i32, i32* @y.10, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 1393055627, i32 1536616621
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ -1070484157, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
