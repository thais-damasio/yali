; ModuleID = 'build_ollvm/programs/p03247/s534694738.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s534694738.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_ZSt3maxIiERKT_S2_S2_ = comdat any

$_Z3Logi = comdat any

$_Z7get_disxxxx = comdat any

$_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_ = comdat any

$_ZSt4sqrtIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@x = global [1009 x i32] zeroinitializer, align 16
@y = global [1009 x i32] zeroinitializer, align 16
@vis = local_unnamed_addr global i32 -1, align 4
@maxn = global i32 0, align 4
@cnt = local_unnamed_addr global i32 0, align 4
@a = local_unnamed_addr global [45 x i64] zeroinitializer, align 16
@ans = local_unnamed_addr global [45 x i8] zeroinitializer, align 16
@dir = local_unnamed_addr global [4 x i8] c"LRDU", align 1
@dis = local_unnamed_addr global [4 x double] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%lld \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s534694738.cpp, i8* null }]
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0
@x.15 = common local_unnamed_addr global i32 0
@y.16 = common local_unnamed_addr global i32 0
@x.17 = common local_unnamed_addr global i32 0
@y.18 = common local_unnamed_addr global i32 0
@x.19 = common local_unnamed_addr global i32 0
@y.20 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.3, align 4
  %4 = load i32, i32* @y.4, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 21302299, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 21302299, label %11
    i32 2128953928, label %14
    i32 -41153217, label %25
    i32 -2093583646, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 2128953928, i32 -2093583646
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  %16 = load i32, i32* @x.3, align 4
  %17 = load i32, i32* @y.4, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 -41153217, i32 -2093583646
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #10
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 2128953928, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind uwtable
define void @_Z4readRi(i32* dereferenceable(4) %0) local_unnamed_addr #4 {
  %2 = alloca i32*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32**, align 8
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = load i32, i32* @x.5, align 4
  %8 = load i32, i32* @y.6, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  store i1 %12, i1* %6, align 1
  %13 = icmp slt i32 %8, 10
  store i1 %13, i1* %5, align 1
  br label %14

14:                                               ; preds = %.backedge, %1
  %.030 = phi i32 [ 676356644, %1 ], [ %.030.be, %.backedge ]
  %.028 = phi i1 [ undef, %1 ], [ %.028.be, %.backedge ]
  %.026 = phi i1 [ undef, %1 ], [ %.026.be, %.backedge ]
  %.0 = phi i32 [ undef, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.030, label %.backedge [
    i32 676356644, label %15
    i32 1040670156, label %18
    i32 -990876003, label %33
    i32 -952075708, label %34
    i32 -884819547, label %38
    i32 239906768, label %41
    i32 2058254081, label %43
    i32 -19509354, label %47
    i32 -1552740408, label %57
    i32 -421245414, label %67
    i32 -1024553888, label %68
    i32 -1437647213, label %78
    i32 -947859202, label %88
    i32 2081534718, label %89
    i32 -1120983700, label %92
    i32 356413488, label %93
    i32 -1294095918, label %97
    i32 -311103724, label %100
    i32 751088029, label %102
    i32 -165439450, label %112
    i32 1871413506, label %122
    i32 -2047461910, label %134
    i32 1571483053, label %135
    i32 222608689, label %138
    i32 772335901, label %141
    i32 -1249131374, label %145
    i32 -875606874, label %147
    i32 914590930, label %149
    i32 -2099868621, label %150
    i32 -1292881829, label %151
  ]

.backedge:                                        ; preds = %14, %151, %150, %149, %147, %141, %138, %135, %134, %122, %112, %102, %100, %97, %93, %92, %89, %88, %78, %68, %67, %57, %47, %43, %41, %38, %34, %33, %18, %15
  %.030.be = phi i32 [ %.030, %14 ], [ 1871413506, %151 ], [ -1437647213, %150 ], [ -1552740408, %149 ], [ 1040670156, %147 ], [ -1249131374, %141 ], [ -1249131374, %138 ], [ %137, %135 ], [ 356413488, %134 ], [ %133, %122 ], [ %121, %112 ], [ -165439450, %102 ], [ %101, %100 ], [ -311103724, %97 ], [ %96, %93 ], [ 356413488, %92 ], [ -952075708, %89 ], [ 2081534718, %88 ], [ %87, %78 ], [ %77, %68 ], [ -1024553888, %67 ], [ %66, %57 ], [ %56, %47 ], [ %46, %43 ], [ %42, %41 ], [ 239906768, %38 ], [ %37, %34 ], [ -952075708, %33 ], [ %32, %18 ], [ %17, %15 ]
  %.028.be = phi i1 [ %.028, %14 ], [ %.028, %151 ], [ %.028, %150 ], [ %.028, %149 ], [ %.028, %147 ], [ %.028, %141 ], [ %.028, %138 ], [ %.028, %135 ], [ %.028, %134 ], [ %.028, %122 ], [ %.028, %112 ], [ %.028, %102 ], [ %.028, %100 ], [ %.028, %97 ], [ %.028, %93 ], [ %.028, %92 ], [ %.028, %89 ], [ %.028, %88 ], [ %.028, %78 ], [ %.028, %68 ], [ %.028, %67 ], [ %.028, %57 ], [ %.028, %47 ], [ %.028, %43 ], [ %.028, %41 ], [ %40, %38 ], [ true, %34 ], [ %.028, %33 ], [ %.028, %18 ], [ %.028, %15 ]
  %.026.be = phi i1 [ %.026, %14 ], [ %.026, %151 ], [ %.026, %150 ], [ %.026, %149 ], [ %.026, %147 ], [ %.026, %141 ], [ %.026, %138 ], [ %.026, %135 ], [ %.026, %134 ], [ %.026, %122 ], [ %.026, %112 ], [ %.026, %102 ], [ %.026, %100 ], [ %99, %97 ], [ false, %93 ], [ %.026, %92 ], [ %.026, %89 ], [ %.026, %88 ], [ %.026, %78 ], [ %.026, %68 ], [ %.026, %67 ], [ %.026, %57 ], [ %.026, %47 ], [ %.026, %43 ], [ %.026, %41 ], [ %.026, %38 ], [ %.026, %34 ], [ %.026, %33 ], [ %.026, %18 ], [ %.026, %15 ]
  %.0.be = phi i32 [ %.0, %14 ], [ %.0, %151 ], [ %.0, %150 ], [ %.0, %149 ], [ %.0, %147 ], [ %144, %141 ], [ %140, %138 ], [ %.0, %135 ], [ %.0, %134 ], [ %.0, %122 ], [ %.0, %112 ], [ %.0, %102 ], [ %.0, %100 ], [ %.0, %97 ], [ %.0, %93 ], [ %.0, %92 ], [ %.0, %89 ], [ %.0, %88 ], [ %.0, %78 ], [ %.0, %68 ], [ %.0, %67 ], [ %.0, %57 ], [ %.0, %47 ], [ %.0, %43 ], [ %.0, %41 ], [ %.0, %38 ], [ %.0, %34 ], [ %.0, %33 ], [ %.0, %18 ], [ %.0, %15 ]
  br label %14

15:                                               ; preds = %14
  %.0..0..0.3 = load volatile i1, i1* %6, align 1
  %.0..0..0.4 = load volatile i1, i1* %5, align 1
  %16 = or i1 %.0..0..0.3, %.0..0..0.4
  %17 = select i1 %16, i32 1040670156, i32 -875606874
  br label %.backedge

18:                                               ; preds = %14
  %19 = alloca i32*, align 8
  store i32** %19, i32*** %4, align 8
  %20 = alloca i8, align 1
  store i8* %20, i8** %3, align 8
  %21 = alloca i32, align 4
  store i32* %21, i32** %2, align 8
  %.0..0..0.5 = load volatile i32**, i32*** %4, align 8
  store i32* %0, i32** %.0..0..0.5, align 8
  %.0..0..0.22 = load volatile i32*, i32** %2, align 8
  store i32 1, i32* %.0..0..0.22, align 4
  %22 = call i32 @getchar()
  %23 = trunc i32 %22 to i8
  %.0..0..0.12 = load volatile i8*, i8** %3, align 8
  store i8 %23, i8* %.0..0..0.12, align 1
  %24 = load i32, i32* @x.5, align 4
  %25 = load i32, i32* @y.6, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 -990876003, i32 -875606874
  br label %.backedge

33:                                               ; preds = %14
  br label %.backedge

34:                                               ; preds = %14
  %.0..0..0.13 = load volatile i8*, i8** %3, align 8
  %35 = load i8, i8* %.0..0..0.13, align 1
  %36 = icmp slt i8 %35, 48
  %37 = select i1 %36, i32 239906768, i32 -884819547
  br label %.backedge

38:                                               ; preds = %14
  %.0..0..0.14 = load volatile i8*, i8** %3, align 8
  %39 = load i8, i8* %.0..0..0.14, align 1
  %40 = icmp sgt i8 %39, 57
  br label %.backedge

41:                                               ; preds = %14
  %42 = select i1 %.028, i32 2058254081, i32 -1120983700
  br label %.backedge

43:                                               ; preds = %14
  %.0..0..0.15 = load volatile i8*, i8** %3, align 8
  %44 = load i8, i8* %.0..0..0.15, align 1
  %45 = icmp eq i8 %44, 45
  %46 = select i1 %45, i32 -19509354, i32 -1024553888
  br label %.backedge

47:                                               ; preds = %14
  %48 = load i32, i32* @x.5, align 4
  %49 = load i32, i32* @y.6, align 4
  %50 = add i32 %48, -1
  %51 = mul i32 %50, %48
  %52 = and i32 %51, 1
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %54, %53
  %56 = select i1 %55, i32 -1552740408, i32 914590930
  br label %.backedge

57:                                               ; preds = %14
  %.0..0..0.23 = load volatile i32*, i32** %2, align 8
  store i32 0, i32* %.0..0..0.23, align 4
  %58 = load i32, i32* @x.5, align 4
  %59 = load i32, i32* @y.6, align 4
  %60 = add i32 %58, -1
  %61 = mul i32 %60, %58
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %64, %63
  %66 = select i1 %65, i32 -421245414, i32 914590930
  br label %.backedge

67:                                               ; preds = %14
  br label %.backedge

68:                                               ; preds = %14
  %69 = load i32, i32* @x.5, align 4
  %70 = load i32, i32* @y.6, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 -1437647213, i32 -2099868621
  br label %.backedge

78:                                               ; preds = %14
  %79 = load i32, i32* @x.5, align 4
  %80 = load i32, i32* @y.6, align 4
  %81 = add i32 %79, -1
  %82 = mul i32 %81, %79
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %85, %84
  %87 = select i1 %86, i32 -947859202, i32 -2099868621
  br label %.backedge

88:                                               ; preds = %14
  br label %.backedge

89:                                               ; preds = %14
  %90 = call i32 @getchar()
  %91 = trunc i32 %90 to i8
  %.0..0..0.16 = load volatile i8*, i8** %3, align 8
  store i8 %91, i8* %.0..0..0.16, align 1
  br label %.backedge

92:                                               ; preds = %14
  br label %.backedge

93:                                               ; preds = %14
  %.0..0..0.17 = load volatile i8*, i8** %3, align 8
  %94 = load i8, i8* %.0..0..0.17, align 1
  %95 = icmp sgt i8 %94, 47
  %96 = select i1 %95, i32 -1294095918, i32 -311103724
  br label %.backedge

97:                                               ; preds = %14
  %.0..0..0.18 = load volatile i8*, i8** %3, align 8
  %98 = load i8, i8* %.0..0..0.18, align 1
  %99 = icmp slt i8 %98, 58
  br label %.backedge

100:                                              ; preds = %14
  %101 = select i1 %.026, i32 751088029, i32 1571483053
  br label %.backedge

102:                                              ; preds = %14
  %.0..0..0.6 = load volatile i32**, i32*** %4, align 8
  %103 = load i32*, i32** %.0..0..0.6, align 8
  %104 = load i32, i32* %103, align 4
  %.neg.neg = shl i32 %104, 3
  %.0..0..0.7 = load volatile i32**, i32*** %4, align 8
  %105 = load i32*, i32** %.0..0..0.7, align 8
  %106 = load i32, i32* %105, align 4
  %.neg32.neg = shl i32 %106, 1
  %.neg33 = add i32 %.neg32.neg, %.neg.neg
  %.0..0..0.19 = load volatile i8*, i8** %3, align 8
  %107 = load i8, i8* %.0..0..0.19, align 1
  %108 = xor i8 %107, 48
  %109 = sext i8 %108 to i32
  %110 = add i32 %.neg33, %109
  %.0..0..0.8 = load volatile i32**, i32*** %4, align 8
  %111 = load i32*, i32** %.0..0..0.8, align 8
  store i32 %110, i32* %111, align 4
  br label %.backedge

112:                                              ; preds = %14
  %113 = load i32, i32* @x.5, align 4
  %114 = load i32, i32* @y.6, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 1871413506, i32 -1292881829
  br label %.backedge

122:                                              ; preds = %14
  %123 = call i32 @getchar()
  %124 = trunc i32 %123 to i8
  %.0..0..0.20 = load volatile i8*, i8** %3, align 8
  store i8 %124, i8* %.0..0..0.20, align 1
  %125 = load i32, i32* @x.5, align 4
  %126 = load i32, i32* @y.6, align 4
  %127 = add i32 %125, -1
  %128 = mul i32 %127, %125
  %129 = and i32 %128, 1
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %131, %130
  %133 = select i1 %132, i32 -2047461910, i32 -1292881829
  br label %.backedge

134:                                              ; preds = %14
  br label %.backedge

135:                                              ; preds = %14
  %.0..0..0.24 = load volatile i32*, i32** %2, align 8
  %136 = load i32, i32* %.0..0..0.24, align 4
  %.not = icmp eq i32 %136, 0
  %137 = select i1 %.not, i32 772335901, i32 222608689
  br label %.backedge

138:                                              ; preds = %14
  %.0..0..0.9 = load volatile i32**, i32*** %4, align 8
  %139 = load i32*, i32** %.0..0..0.9, align 8
  %140 = load i32, i32* %139, align 4
  br label %.backedge

141:                                              ; preds = %14
  %.0..0..0.10 = load volatile i32**, i32*** %4, align 8
  %142 = load i32*, i32** %.0..0..0.10, align 8
  %143 = load i32, i32* %142, align 4
  %144 = sub i32 0, %143
  br label %.backedge

145:                                              ; preds = %14
  %.0..0..0.11 = load volatile i32**, i32*** %4, align 8
  %146 = load i32*, i32** %.0..0..0.11, align 8
  store i32 %.0, i32* %146, align 4
  ret void

147:                                              ; preds = %14
  %148 = call i32 @getchar()
  br label %.backedge

149:                                              ; preds = %14
  %.0..0..0.25 = load volatile i32*, i32** %2, align 8
  store i32 0, i32* %.0..0..0.25, align 4
  br label %.backedge

150:                                              ; preds = %14
  br label %.backedge

151:                                              ; preds = %14
  %152 = call i32 @getchar()
  %153 = trunc i32 %152 to i8
  %.0..0..0.21 = load volatile i8*, i8** %3, align 8
  store i8 %153, i8* %.0..0..0.21, align 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i32, align 4
  tail call void @_Z4readRi(i32* nonnull dereferenceable(4) @n)
  br label %8

8:                                                ; preds = %.backedge, %0
  %.0124 = phi i32 [ 1, %0 ], [ %.0124.be, %.backedge ]
  %.0122 = phi i32 [ undef, %0 ], [ %.0122.be, %.backedge ]
  %.0120 = phi i32 [ undef, %0 ], [ %.0120.be, %.backedge ]
  %.0118 = phi i32 [ undef, %0 ], [ %.0118.be, %.backedge ]
  %.0116 = phi i64 [ undef, %0 ], [ %.0116.be, %.backedge ]
  %.0114 = phi i64 [ undef, %0 ], [ %.0114.be, %.backedge ]
  %.0112 = phi i32 [ undef, %0 ], [ %.0112.be, %.backedge ]
  %.0110 = phi i32 [ undef, %0 ], [ %.0110.be, %.backedge ]
  %.0108 = phi i32 [ undef, %0 ], [ %.0108.be, %.backedge ]
  %.0106 = phi i32 [ undef, %0 ], [ %.0106.be, %.backedge ]
  %.0 = phi i32 [ -1355753787, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1355753787, label %9
    i32 -1276745777, label %12
    i32 341562641, label %22
    i32 -754727734, label %40
    i32 650465896, label %42
    i32 1049163908, label %52
    i32 995070535, label %64
    i32 69514862, label %66
    i32 970465584, label %76
    i32 1732240966, label %86
    i32 -214766537, label %98
    i32 -1585010820, label %100
    i32 114937493, label %110
    i32 44237599, label %121
    i32 844554323, label %122
    i32 -1148096640, label %135
    i32 -1354809349, label %136
    i32 1402201095, label %140
    i32 -1684221031, label %145
    i32 -187996997, label %146
    i32 244302675, label %150
    i32 -1376038052, label %158
    i32 1260401175, label %168
    i32 766425163, label %179
    i32 -368606378, label %180
    i32 812298662, label %183
    i32 -1342017735, label %186
    i32 446939763, label %191
    i32 343127304, label %201
    i32 968209585, label %211
    i32 -1477506774, label %212
    i32 587211992, label %214
    i32 -746943081, label %224
    i32 -86469227, label %236
    i32 1129428788, label %238
    i32 2011479969, label %240
    i32 1409692267, label %242
    i32 -1415612577, label %252
    i32 2104831177, label %295
    i32 709081713, label %296
    i32 963565974, label %299
    i32 -321649803, label %308
    i32 -1175824874, label %309
    i32 -1246395442, label %310
    i32 746806055, label %320
    i32 196951519, label %330
    i32 1081677041, label %331
    i32 -1591761554, label %334
    i32 1739557505, label %344
    i32 1560981068, label %358
    i32 1396419418, label %359
    i32 1580924734, label %362
    i32 -179744899, label %367
    i32 -1847713781, label %370
    i32 340695374, label %375
    i32 1786581293, label %378
    i32 -164468268, label %388
    i32 217188358, label %402
    i32 376106781, label %403
    i32 -1322017938, label %409
    i32 -1881661349, label %419
    i32 -729861936, label %430
    i32 882250767, label %431
    i32 -555000943, label %441
    i32 797033505, label %451
    i32 -1559493445, label %452
    i32 547563487, label %462
    i32 -2024013073, label %474
    i32 -450857679, label %476
    i32 -1465130161, label %482
    i32 -1313152595, label %484
    i32 2092021991, label %486
    i32 1742334420, label %488
    i32 -464500251, label %489
    i32 -1418566589, label %499
    i32 93022090, label %509
    i32 -37213661, label %510
    i32 -2113671300, label %514
    i32 281650680, label %515
    i32 -1283443054, label %516
    i32 -484016040, label %518
    i32 1432231003, label %520
    i32 -1622794972, label %522
    i32 -2061123535, label %523
    i32 -464731817, label %557
    i32 -1044374993, label %559
    i32 -1155981727, label %564
    i32 -1242753610, label %569
    i32 1245213993, label %571
    i32 683478695, label %572
    i32 96966242, label %573
  ]

.backedge:                                        ; preds = %8, %573, %572, %571, %569, %564, %559, %557, %523, %522, %520, %518, %516, %515, %514, %510, %499, %489, %488, %486, %484, %482, %476, %474, %462, %452, %451, %441, %431, %430, %419, %409, %403, %402, %388, %378, %375, %370, %367, %362, %359, %358, %344, %334, %331, %330, %320, %310, %309, %308, %299, %296, %295, %252, %242, %240, %238, %236, %224, %214, %212, %211, %201, %191, %186, %183, %180, %179, %168, %158, %150, %146, %145, %140, %136, %135, %122, %121, %110, %100, %98, %86, %76, %66, %64, %52, %42, %40, %22, %12, %9
  %.0124.be = phi i32 [ %.0124, %8 ], [ %.0124, %573 ], [ %.0124, %572 ], [ %.0124, %571 ], [ %.0124, %569 ], [ %.0124, %564 ], [ %.0124, %559 ], [ %.0124, %557 ], [ %.0124, %523 ], [ %.0124, %522 ], [ %.0124, %520 ], [ %.0124, %518 ], [ %.0124, %516 ], [ %.0124, %515 ], [ %.0124, %514 ], [ %.0124, %510 ], [ %.0124, %499 ], [ %.0124, %489 ], [ %.0124, %488 ], [ %.0124, %486 ], [ %.0124, %484 ], [ %.0124, %482 ], [ %.0124, %476 ], [ %.0124, %474 ], [ %.0124, %462 ], [ %.0124, %452 ], [ %.0124, %451 ], [ %.0124, %441 ], [ %.0124, %431 ], [ %.0124, %430 ], [ %.0124, %419 ], [ %.0124, %409 ], [ %.0124, %403 ], [ %.0124, %402 ], [ %.0124, %388 ], [ %.0124, %378 ], [ %.0124, %375 ], [ %.0124, %370 ], [ %.0124, %367 ], [ %.0124, %362 ], [ %.0124, %359 ], [ %.0124, %358 ], [ %.0124, %344 ], [ %.0124, %334 ], [ %.0124, %331 ], [ %.0124, %330 ], [ %.0124, %320 ], [ %.0124, %310 ], [ %.0124, %309 ], [ %.0124, %308 ], [ %.0124, %299 ], [ %.0124, %296 ], [ %.0124, %295 ], [ %.0124, %252 ], [ %.0124, %242 ], [ %.0124, %240 ], [ %.0124, %238 ], [ %.0124, %236 ], [ %.0124, %224 ], [ %.0124, %214 ], [ %.0124, %212 ], [ %.0124, %211 ], [ %.0124, %201 ], [ %.0124, %191 ], [ %.0124, %186 ], [ %.0124, %183 ], [ %.0124, %180 ], [ %.0124, %179 ], [ %.0124, %168 ], [ %.0124, %158 ], [ %.0124, %150 ], [ %.0124, %146 ], [ %.0124, %145 ], [ %.0124, %140 ], [ %.0124, %136 ], [ %.neg131, %135 ], [ %.0124, %122 ], [ %.0124, %121 ], [ %.0124, %110 ], [ %.0124, %100 ], [ %.0124, %98 ], [ %.0124, %86 ], [ %.0124, %76 ], [ %.0124, %66 ], [ %.0124, %64 ], [ %.0124, %52 ], [ %.0124, %42 ], [ %.0124, %40 ], [ %.0124, %22 ], [ %.0124, %12 ], [ %.0124, %9 ]
  %.0122.be = phi i32 [ %.0122, %8 ], [ %.0122, %573 ], [ %.0122, %572 ], [ %.0122, %571 ], [ %.0122, %569 ], [ %.0122, %564 ], [ %.0122, %559 ], [ %.0122, %557 ], [ %.0122, %523 ], [ %.0122, %522 ], [ %.0122, %520 ], [ %519, %518 ], [ %.0122, %516 ], [ %.0122, %515 ], [ %.0122, %514 ], [ %.0122, %510 ], [ %.0122, %499 ], [ %.0122, %489 ], [ %.0122, %488 ], [ %.0122, %486 ], [ %.0122, %484 ], [ %.0122, %482 ], [ %.0122, %476 ], [ %.0122, %474 ], [ %.0122, %462 ], [ %.0122, %452 ], [ %.0122, %451 ], [ %.0122, %441 ], [ %.0122, %431 ], [ %.0122, %430 ], [ %.0122, %419 ], [ %.0122, %409 ], [ %.0122, %403 ], [ %.0122, %402 ], [ %.0122, %388 ], [ %.0122, %378 ], [ %.0122, %375 ], [ %.0122, %370 ], [ %.0122, %367 ], [ %.0122, %362 ], [ %.0122, %359 ], [ %.0122, %358 ], [ %.0122, %344 ], [ %.0122, %334 ], [ %.0122, %331 ], [ %.0122, %330 ], [ %.0122, %320 ], [ %.0122, %310 ], [ %.0122, %309 ], [ %.0122, %308 ], [ %.0122, %299 ], [ %.0122, %296 ], [ %.0122, %295 ], [ %.0122, %252 ], [ %.0122, %242 ], [ %.0122, %240 ], [ %.0122, %238 ], [ %.0122, %236 ], [ %.0122, %224 ], [ %.0122, %214 ], [ %.0122, %212 ], [ %.0122, %211 ], [ %.0122, %201 ], [ %.0122, %191 ], [ %.0122, %186 ], [ %.0122, %183 ], [ %.0122, %180 ], [ %.0122, %179 ], [ %169, %168 ], [ %.0122, %158 ], [ %.0122, %150 ], [ %.0122, %146 ], [ 1, %145 ], [ %.0122, %140 ], [ %.0122, %136 ], [ %.0122, %135 ], [ %.0122, %122 ], [ %.0122, %121 ], [ %.0122, %110 ], [ %.0122, %100 ], [ %.0122, %98 ], [ %.0122, %86 ], [ %.0122, %76 ], [ %.0122, %66 ], [ %.0122, %64 ], [ %.0122, %52 ], [ %.0122, %42 ], [ %.0122, %40 ], [ %.0122, %22 ], [ %.0122, %12 ], [ %.0122, %9 ]
  %.0120.be = phi i32 [ %.0120, %8 ], [ %.0120, %573 ], [ %.0120, %572 ], [ %.0120, %571 ], [ %.0120, %569 ], [ %.0120, %564 ], [ %.0120, %559 ], [ %.0120, %557 ], [ %.0120, %523 ], [ %.0120, %522 ], [ %521, %520 ], [ %.0120, %518 ], [ %.0120, %516 ], [ %.0120, %515 ], [ %.0120, %514 ], [ %.0120, %510 ], [ %.0120, %499 ], [ %.0120, %489 ], [ %.0120, %488 ], [ %.0120, %486 ], [ %.0120, %484 ], [ %.0120, %482 ], [ %.0120, %476 ], [ %.0120, %474 ], [ %.0120, %462 ], [ %.0120, %452 ], [ %.0120, %451 ], [ %.0120, %441 ], [ %.0120, %431 ], [ %.0120, %430 ], [ %.0120, %419 ], [ %.0120, %409 ], [ %.0120, %403 ], [ %.0120, %402 ], [ %.0120, %388 ], [ %.0120, %378 ], [ %.0120, %375 ], [ %.0120, %370 ], [ %.0120, %367 ], [ %.0120, %362 ], [ %.0120, %359 ], [ %.0120, %358 ], [ %.0120, %344 ], [ %.0120, %334 ], [ %.0120, %331 ], [ %.0120, %330 ], [ %.0120, %320 ], [ %.0120, %310 ], [ %.0120, %309 ], [ %.0120, %308 ], [ %.0120, %299 ], [ %.0120, %296 ], [ %.0120, %295 ], [ %.0120, %252 ], [ %.0120, %242 ], [ %.0120, %240 ], [ %.0120, %238 ], [ %.0120, %236 ], [ %.0120, %224 ], [ %.0120, %214 ], [ %.0120, %212 ], [ %.0120, %211 ], [ %.neg128, %201 ], [ %.0120, %191 ], [ %.0120, %186 ], [ %.0120, %183 ], [ 1, %180 ], [ %.0120, %179 ], [ %.0120, %168 ], [ %.0120, %158 ], [ %.0120, %150 ], [ %.0120, %146 ], [ %.0120, %145 ], [ %.0120, %140 ], [ %.0120, %136 ], [ %.0120, %135 ], [ %.0120, %122 ], [ %.0120, %121 ], [ %.0120, %110 ], [ %.0120, %100 ], [ %.0120, %98 ], [ %.0120, %86 ], [ %.0120, %76 ], [ %.0120, %66 ], [ %.0120, %64 ], [ %.0120, %52 ], [ %.0120, %42 ], [ %.0120, %40 ], [ %.0120, %22 ], [ %.0120, %12 ], [ %.0120, %9 ]
  %.0118.be = phi i32 [ %.0118, %8 ], [ %.0118, %573 ], [ %.0118, %572 ], [ %.0118, %571 ], [ %.0118, %569 ], [ %.0118, %564 ], [ %.0118, %559 ], [ %.0118, %557 ], [ %.0118, %523 ], [ %.0118, %522 ], [ %.0118, %520 ], [ %.0118, %518 ], [ %.0118, %516 ], [ %.0118, %515 ], [ %.0118, %514 ], [ %.0118, %510 ], [ %.0118, %499 ], [ %.0118, %489 ], [ %.0118, %488 ], [ %487, %486 ], [ %.0118, %484 ], [ %.0118, %482 ], [ %.0118, %476 ], [ %.0118, %474 ], [ %.0118, %462 ], [ %.0118, %452 ], [ %.0118, %451 ], [ %.0118, %441 ], [ %.0118, %431 ], [ %.0118, %430 ], [ %.0118, %419 ], [ %.0118, %409 ], [ %.0118, %403 ], [ %.0118, %402 ], [ %.0118, %388 ], [ %.0118, %378 ], [ %.0118, %375 ], [ %.0118, %370 ], [ %.0118, %367 ], [ %.0118, %362 ], [ %.0118, %359 ], [ %.0118, %358 ], [ %.0118, %344 ], [ %.0118, %334 ], [ %.0118, %331 ], [ %.0118, %330 ], [ %.0118, %320 ], [ %.0118, %310 ], [ %.0118, %309 ], [ %.0118, %308 ], [ %.0118, %299 ], [ %.0118, %296 ], [ %.0118, %295 ], [ %.0118, %252 ], [ %.0118, %242 ], [ %.0118, %240 ], [ %.0118, %238 ], [ %.0118, %236 ], [ %.0118, %224 ], [ %.0118, %214 ], [ 1, %212 ], [ %.0118, %211 ], [ %.0118, %201 ], [ %.0118, %191 ], [ %.0118, %186 ], [ %.0118, %183 ], [ %.0118, %180 ], [ %.0118, %179 ], [ %.0118, %168 ], [ %.0118, %158 ], [ %.0118, %150 ], [ %.0118, %146 ], [ %.0118, %145 ], [ %.0118, %140 ], [ %.0118, %136 ], [ %.0118, %135 ], [ %.0118, %122 ], [ %.0118, %121 ], [ %.0118, %110 ], [ %.0118, %100 ], [ %.0118, %98 ], [ %.0118, %86 ], [ %.0118, %76 ], [ %.0118, %66 ], [ %.0118, %64 ], [ %.0118, %52 ], [ %.0118, %42 ], [ %.0118, %40 ], [ %.0118, %22 ], [ %.0118, %12 ], [ %.0118, %9 ]
  %.0116.be = phi i64 [ %.0116, %8 ], [ %.0116, %573 ], [ %.0116, %572 ], [ %.0116, %571 ], [ %.0116, %569 ], [ %.0116, %564 ], [ %563, %559 ], [ %.0116, %557 ], [ %.0116, %523 ], [ %.0116, %522 ], [ %.0116, %520 ], [ %.0116, %518 ], [ %.0116, %516 ], [ %.0116, %515 ], [ %.0116, %514 ], [ %.0116, %510 ], [ %.0116, %499 ], [ %.0116, %489 ], [ %.0116, %488 ], [ %.0116, %486 ], [ %.0116, %484 ], [ %.0116, %482 ], [ %.0116, %476 ], [ %.0116, %474 ], [ %.0116, %462 ], [ %.0116, %452 ], [ %.0116, %451 ], [ %.0116, %441 ], [ %.0116, %431 ], [ %.0116, %430 ], [ %.0116, %419 ], [ %.0116, %409 ], [ %.0116, %403 ], [ %.0116, %402 ], [ %.0116, %388 ], [ %.0116, %378 ], [ %.0116, %375 ], [ %.0116, %370 ], [ %.0116, %367 ], [ %366, %362 ], [ %.0116, %359 ], [ %.0116, %358 ], [ %348, %344 ], [ %.0116, %334 ], [ %.0116, %331 ], [ %.0116, %330 ], [ %.0116, %320 ], [ %.0116, %310 ], [ %.0116, %309 ], [ %.0116, %308 ], [ %.0116, %299 ], [ %.0116, %296 ], [ %.0116, %295 ], [ %.0116, %252 ], [ %.0116, %242 ], [ %.0116, %240 ], [ 0, %238 ], [ %.0116, %236 ], [ %.0116, %224 ], [ %.0116, %214 ], [ %.0116, %212 ], [ %.0116, %211 ], [ %.0116, %201 ], [ %.0116, %191 ], [ %.0116, %186 ], [ %.0116, %183 ], [ %.0116, %180 ], [ %.0116, %179 ], [ %.0116, %168 ], [ %.0116, %158 ], [ %.0116, %150 ], [ %.0116, %146 ], [ %.0116, %145 ], [ %.0116, %140 ], [ %.0116, %136 ], [ %.0116, %135 ], [ %.0116, %122 ], [ %.0116, %121 ], [ %.0116, %110 ], [ %.0116, %100 ], [ %.0116, %98 ], [ %.0116, %86 ], [ %.0116, %76 ], [ %.0116, %66 ], [ %.0116, %64 ], [ %.0116, %52 ], [ %.0116, %42 ], [ %.0116, %40 ], [ %.0116, %22 ], [ %.0116, %12 ], [ %.0116, %9 ]
  %.0114.be = phi i64 [ %.0114, %8 ], [ %.0114, %573 ], [ %.0114, %572 ], [ %.0114, %571 ], [ %.0114, %569 ], [ %568, %564 ], [ %.0114, %559 ], [ %.0114, %557 ], [ %.0114, %523 ], [ %.0114, %522 ], [ %.0114, %520 ], [ %.0114, %518 ], [ %.0114, %516 ], [ %.0114, %515 ], [ %.0114, %514 ], [ %.0114, %510 ], [ %.0114, %499 ], [ %.0114, %489 ], [ %.0114, %488 ], [ %.0114, %486 ], [ %.0114, %484 ], [ %.0114, %482 ], [ %.0114, %476 ], [ %.0114, %474 ], [ %.0114, %462 ], [ %.0114, %452 ], [ %.0114, %451 ], [ %.0114, %441 ], [ %.0114, %431 ], [ %.0114, %430 ], [ %.0114, %419 ], [ %.0114, %409 ], [ %.0114, %403 ], [ %.0114, %402 ], [ %392, %388 ], [ %.0114, %378 ], [ %.0114, %375 ], [ %374, %370 ], [ %.0114, %367 ], [ %.0114, %362 ], [ %.0114, %359 ], [ %.0114, %358 ], [ %.0114, %344 ], [ %.0114, %334 ], [ %.0114, %331 ], [ %.0114, %330 ], [ %.0114, %320 ], [ %.0114, %310 ], [ %.0114, %309 ], [ %.0114, %308 ], [ %.0114, %299 ], [ %.0114, %296 ], [ %.0114, %295 ], [ %.0114, %252 ], [ %.0114, %242 ], [ %.0114, %240 ], [ 0, %238 ], [ %.0114, %236 ], [ %.0114, %224 ], [ %.0114, %214 ], [ %.0114, %212 ], [ %.0114, %211 ], [ %.0114, %201 ], [ %.0114, %191 ], [ %.0114, %186 ], [ %.0114, %183 ], [ %.0114, %180 ], [ %.0114, %179 ], [ %.0114, %168 ], [ %.0114, %158 ], [ %.0114, %150 ], [ %.0114, %146 ], [ %.0114, %145 ], [ %.0114, %140 ], [ %.0114, %136 ], [ %.0114, %135 ], [ %.0114, %122 ], [ %.0114, %121 ], [ %.0114, %110 ], [ %.0114, %100 ], [ %.0114, %98 ], [ %.0114, %86 ], [ %.0114, %76 ], [ %.0114, %66 ], [ %.0114, %64 ], [ %.0114, %52 ], [ %.0114, %42 ], [ %.0114, %40 ], [ %.0114, %22 ], [ %.0114, %12 ], [ %.0114, %9 ]
  %.0112.be = phi i32 [ %.0112, %8 ], [ %.0112, %573 ], [ %.0112, %572 ], [ %.0112, %571 ], [ %570, %569 ], [ %.0112, %564 ], [ %.0112, %559 ], [ %.0112, %557 ], [ %.0112, %523 ], [ %.0112, %522 ], [ %.0112, %520 ], [ %.0112, %518 ], [ %.0112, %516 ], [ %.0112, %515 ], [ %.0112, %514 ], [ %.0112, %510 ], [ %.0112, %499 ], [ %.0112, %489 ], [ %.0112, %488 ], [ %.0112, %486 ], [ %.0112, %484 ], [ %.0112, %482 ], [ %.0112, %476 ], [ %.0112, %474 ], [ %.0112, %462 ], [ %.0112, %452 ], [ %.0112, %451 ], [ %.0112, %441 ], [ %.0112, %431 ], [ %.0112, %430 ], [ %420, %419 ], [ %.0112, %409 ], [ %.0112, %403 ], [ %.0112, %402 ], [ %.0112, %388 ], [ %.0112, %378 ], [ %.0112, %375 ], [ %.0112, %370 ], [ %.0112, %367 ], [ %.0112, %362 ], [ %.0112, %359 ], [ %.0112, %358 ], [ %.0112, %344 ], [ %.0112, %334 ], [ %.0112, %331 ], [ %.0112, %330 ], [ %.0112, %320 ], [ %.0112, %310 ], [ %.0112, %309 ], [ %.0112, %308 ], [ %.0112, %299 ], [ %.0112, %296 ], [ %.0112, %295 ], [ %.0112, %252 ], [ %.0112, %242 ], [ %.0112, %240 ], [ %239, %238 ], [ %.0112, %236 ], [ %.0112, %224 ], [ %.0112, %214 ], [ %.0112, %212 ], [ %.0112, %211 ], [ %.0112, %201 ], [ %.0112, %191 ], [ %.0112, %186 ], [ %.0112, %183 ], [ %.0112, %180 ], [ %.0112, %179 ], [ %.0112, %168 ], [ %.0112, %158 ], [ %.0112, %150 ], [ %.0112, %146 ], [ %.0112, %145 ], [ %.0112, %140 ], [ %.0112, %136 ], [ %.0112, %135 ], [ %.0112, %122 ], [ %.0112, %121 ], [ %.0112, %110 ], [ %.0112, %100 ], [ %.0112, %98 ], [ %.0112, %86 ], [ %.0112, %76 ], [ %.0112, %66 ], [ %.0112, %64 ], [ %.0112, %52 ], [ %.0112, %42 ], [ %.0112, %40 ], [ %.0112, %22 ], [ %.0112, %12 ], [ %.0112, %9 ]
  %.0110.be = phi i32 [ %.0110, %8 ], [ %.0110, %573 ], [ %.0110, %572 ], [ %.0110, %571 ], [ %.0110, %569 ], [ %.0110, %564 ], [ %.0110, %559 ], [ %.0110, %557 ], [ 0, %523 ], [ %.0110, %522 ], [ %.0110, %520 ], [ %.0110, %518 ], [ %.0110, %516 ], [ %.0110, %515 ], [ %.0110, %514 ], [ %.0110, %510 ], [ %.0110, %499 ], [ %.0110, %489 ], [ %.0110, %488 ], [ %.0110, %486 ], [ %.0110, %484 ], [ %.0110, %482 ], [ %.0110, %476 ], [ %.0110, %474 ], [ %.0110, %462 ], [ %.0110, %452 ], [ %.0110, %451 ], [ %.0110, %441 ], [ %.0110, %431 ], [ %.0110, %430 ], [ %.0110, %419 ], [ %.0110, %409 ], [ %.0110, %403 ], [ %.0110, %402 ], [ %.0110, %388 ], [ %.0110, %378 ], [ %.0110, %375 ], [ %.0110, %370 ], [ %.0110, %367 ], [ %.0110, %362 ], [ %.0110, %359 ], [ %.0110, %358 ], [ %.0110, %344 ], [ %.0110, %334 ], [ %.0110, %331 ], [ %.0110, %330 ], [ %.0110, %320 ], [ %.0110, %310 ], [ %.0110, %309 ], [ %.0108, %308 ], [ %.0110, %299 ], [ %.0110, %296 ], [ %.0110, %295 ], [ 0, %252 ], [ %.0110, %242 ], [ %.0110, %240 ], [ %.0110, %238 ], [ %.0110, %236 ], [ %.0110, %224 ], [ %.0110, %214 ], [ %.0110, %212 ], [ %.0110, %211 ], [ %.0110, %201 ], [ %.0110, %191 ], [ %.0110, %186 ], [ %.0110, %183 ], [ %.0110, %180 ], [ %.0110, %179 ], [ %.0110, %168 ], [ %.0110, %158 ], [ %.0110, %150 ], [ %.0110, %146 ], [ %.0110, %145 ], [ %.0110, %140 ], [ %.0110, %136 ], [ %.0110, %135 ], [ %.0110, %122 ], [ %.0110, %121 ], [ %.0110, %110 ], [ %.0110, %100 ], [ %.0110, %98 ], [ %.0110, %86 ], [ %.0110, %76 ], [ %.0110, %66 ], [ %.0110, %64 ], [ %.0110, %52 ], [ %.0110, %42 ], [ %.0110, %40 ], [ %.0110, %22 ], [ %.0110, %12 ], [ %.0110, %9 ]
  %.0108.be = phi i32 [ %.0108, %8 ], [ %.0108, %573 ], [ %.0108, %572 ], [ %.0108, %571 ], [ %.0108, %569 ], [ %.0108, %564 ], [ %.0108, %559 ], [ %558, %557 ], [ 0, %523 ], [ %.0108, %522 ], [ %.0108, %520 ], [ %.0108, %518 ], [ %.0108, %516 ], [ %.0108, %515 ], [ %.0108, %514 ], [ %.0108, %510 ], [ %.0108, %499 ], [ %.0108, %489 ], [ %.0108, %488 ], [ %.0108, %486 ], [ %.0108, %484 ], [ %.0108, %482 ], [ %.0108, %476 ], [ %.0108, %474 ], [ %.0108, %462 ], [ %.0108, %452 ], [ %.0108, %451 ], [ %.0108, %441 ], [ %.0108, %431 ], [ %.0108, %430 ], [ %.0108, %419 ], [ %.0108, %409 ], [ %.0108, %403 ], [ %.0108, %402 ], [ %.0108, %388 ], [ %.0108, %378 ], [ %.0108, %375 ], [ %.0108, %370 ], [ %.0108, %367 ], [ %.0108, %362 ], [ %.0108, %359 ], [ %.0108, %358 ], [ %.0108, %344 ], [ %.0108, %334 ], [ %.0108, %331 ], [ %.0108, %330 ], [ %.neg, %320 ], [ %.0108, %310 ], [ %.0108, %309 ], [ %.0108, %308 ], [ %.0108, %299 ], [ %.0108, %296 ], [ %.0108, %295 ], [ 0, %252 ], [ %.0108, %242 ], [ %.0108, %240 ], [ %.0108, %238 ], [ %.0108, %236 ], [ %.0108, %224 ], [ %.0108, %214 ], [ %.0108, %212 ], [ %.0108, %211 ], [ %.0108, %201 ], [ %.0108, %191 ], [ %.0108, %186 ], [ %.0108, %183 ], [ %.0108, %180 ], [ %.0108, %179 ], [ %.0108, %168 ], [ %.0108, %158 ], [ %.0108, %150 ], [ %.0108, %146 ], [ %.0108, %145 ], [ %.0108, %140 ], [ %.0108, %136 ], [ %.0108, %135 ], [ %.0108, %122 ], [ %.0108, %121 ], [ %.0108, %110 ], [ %.0108, %100 ], [ %.0108, %98 ], [ %.0108, %86 ], [ %.0108, %76 ], [ %.0108, %66 ], [ %.0108, %64 ], [ %.0108, %52 ], [ %.0108, %42 ], [ %.0108, %40 ], [ %.0108, %22 ], [ %.0108, %12 ], [ %.0108, %9 ]
  %.0106.be = phi i32 [ %.0106, %8 ], [ %.0106, %573 ], [ %.0106, %572 ], [ 1, %571 ], [ %.0106, %569 ], [ %.0106, %564 ], [ %.0106, %559 ], [ %.0106, %557 ], [ %.0106, %523 ], [ %.0106, %522 ], [ %.0106, %520 ], [ %.0106, %518 ], [ %.0106, %516 ], [ %.0106, %515 ], [ %.0106, %514 ], [ %.0106, %510 ], [ %.0106, %499 ], [ %.0106, %489 ], [ %.0106, %488 ], [ %.0106, %486 ], [ %.0106, %484 ], [ %483, %482 ], [ %.0106, %476 ], [ %.0106, %474 ], [ %.0106, %462 ], [ %.0106, %452 ], [ %.0106, %451 ], [ 1, %441 ], [ %.0106, %431 ], [ %.0106, %430 ], [ %.0106, %419 ], [ %.0106, %409 ], [ %.0106, %403 ], [ %.0106, %402 ], [ %.0106, %388 ], [ %.0106, %378 ], [ %.0106, %375 ], [ %.0106, %370 ], [ %.0106, %367 ], [ %.0106, %362 ], [ %.0106, %359 ], [ %.0106, %358 ], [ %.0106, %344 ], [ %.0106, %334 ], [ %.0106, %331 ], [ %.0106, %330 ], [ %.0106, %320 ], [ %.0106, %310 ], [ %.0106, %309 ], [ %.0106, %308 ], [ %.0106, %299 ], [ %.0106, %296 ], [ %.0106, %295 ], [ %.0106, %252 ], [ %.0106, %242 ], [ %.0106, %240 ], [ %.0106, %238 ], [ %.0106, %236 ], [ %.0106, %224 ], [ %.0106, %214 ], [ %.0106, %212 ], [ %.0106, %211 ], [ %.0106, %201 ], [ %.0106, %191 ], [ %.0106, %186 ], [ %.0106, %183 ], [ %.0106, %180 ], [ %.0106, %179 ], [ %.0106, %168 ], [ %.0106, %158 ], [ %.0106, %150 ], [ %.0106, %146 ], [ %.0106, %145 ], [ %.0106, %140 ], [ %.0106, %136 ], [ %.0106, %135 ], [ %.0106, %122 ], [ %.0106, %121 ], [ %.0106, %110 ], [ %.0106, %100 ], [ %.0106, %98 ], [ %.0106, %86 ], [ %.0106, %76 ], [ %.0106, %66 ], [ %.0106, %64 ], [ %.0106, %52 ], [ %.0106, %42 ], [ %.0106, %40 ], [ %.0106, %22 ], [ %.0106, %12 ], [ %.0106, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ -1418566589, %573 ], [ 547563487, %572 ], [ -555000943, %571 ], [ -1881661349, %569 ], [ -164468268, %564 ], [ 1739557505, %559 ], [ 746806055, %557 ], [ -1415612577, %523 ], [ -746943081, %522 ], [ 343127304, %520 ], [ 1260401175, %518 ], [ 114937493, %516 ], [ 1732240966, %515 ], [ 1049163908, %514 ], [ 341562641, %510 ], [ %508, %499 ], [ %498, %489 ], [ -464500251, %488 ], [ 587211992, %486 ], [ 2092021991, %484 ], [ -1559493445, %482 ], [ -1465130161, %476 ], [ %475, %474 ], [ %473, %462 ], [ %461, %452 ], [ -1559493445, %451 ], [ %450, %441 ], [ %440, %431 ], [ 2011479969, %430 ], [ %429, %419 ], [ %418, %409 ], [ -1322017938, %403 ], [ 376106781, %402 ], [ %401, %388 ], [ %387, %378 ], [ %377, %375 ], [ 340695374, %370 ], [ %369, %367 ], [ -179744899, %362 ], [ %361, %359 ], [ 1396419418, %358 ], [ %357, %344 ], [ %343, %334 ], [ %333, %331 ], [ 709081713, %330 ], [ %329, %320 ], [ %319, %310 ], [ -1246395442, %309 ], [ -1175824874, %308 ], [ %307, %299 ], [ %298, %296 ], [ 709081713, %295 ], [ %294, %252 ], [ %251, %242 ], [ %241, %240 ], [ 2011479969, %238 ], [ %237, %236 ], [ %235, %224 ], [ %223, %214 ], [ 587211992, %212 ], [ 812298662, %211 ], [ %210, %201 ], [ %200, %191 ], [ 446939763, %186 ], [ %185, %183 ], [ 812298662, %180 ], [ -187996997, %179 ], [ %178, %168 ], [ %167, %158 ], [ -1376038052, %150 ], [ %149, %146 ], [ -187996997, %145 ], [ -1684221031, %140 ], [ %139, %136 ], [ -1355753787, %135 ], [ -1148096640, %122 ], [ -464500251, %121 ], [ %120, %110 ], [ %109, %100 ], [ %99, %98 ], [ %97, %86 ], [ %85, %76 ], [ %75, %66 ], [ %65, %64 ], [ %63, %52 ], [ %51, %42 ], [ %41, %40 ], [ %39, %22 ], [ %21, %12 ], [ %11, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i32, i32* @n, align 4
  %.not132 = icmp sgt i32 %.0124, %10
  %11 = select i1 %.not132, i32 -1354809349, i32 -1276745777
  br label %.backedge

12:                                               ; preds = %8
  %13 = load i32, i32* @x.7, align 4
  %14 = load i32, i32* @y.8, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 341562641, i32 -37213661
  br label %.backedge

22:                                               ; preds = %8
  %23 = sext i32 %.0124 to i64
  %24 = getelementptr inbounds [1009 x i32], [1009 x i32]* @x, i64 0, i64 %23
  call void @_Z4readRi(i32* nonnull dereferenceable(4) %24)
  %25 = getelementptr inbounds [1009 x i32], [1009 x i32]* @y, i64 0, i64 %23
  call void @_Z4readRi(i32* nonnull dereferenceable(4) %25)
  %26 = load i32, i32* %24, align 4
  %27 = load i32, i32* %25, align 4
  %28 = add i32 %27, %26
  %29 = and i32 %28, 1
  %30 = icmp ne i32 %29, 0
  store i1 %30, i1* %6, align 1
  %31 = load i32, i32* @x.7, align 4
  %32 = load i32, i32* @y.8, align 4
  %33 = add i32 %31, -1
  %34 = mul i32 %33, %31
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %37, %36
  %39 = select i1 %38, i32 -754727734, i32 -37213661
  br label %.backedge

40:                                               ; preds = %8
  %.0..0..0. = load volatile i1, i1* %6, align 1
  %41 = select i1 %.0..0..0., i32 650465896, i32 69514862
  br label %.backedge

42:                                               ; preds = %8
  %43 = load i32, i32* @x.7, align 4
  %44 = load i32, i32* @y.8, align 4
  %45 = add i32 %43, -1
  %46 = mul i32 %45, %43
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %49, %48
  %51 = select i1 %50, i32 1049163908, i32 -2113671300
  br label %.backedge

52:                                               ; preds = %8
  %53 = load i32, i32* @vis, align 4
  %54 = icmp eq i32 %53, 0
  store i1 %54, i1* %5, align 1
  %55 = load i32, i32* @x.7, align 4
  %56 = load i32, i32* @y.8, align 4
  %57 = add i32 %55, -1
  %58 = mul i32 %57, %55
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %61, %60
  %63 = select i1 %62, i32 995070535, i32 -2113671300
  br label %.backedge

64:                                               ; preds = %8
  %.0..0..0.101 = load volatile i1, i1* %5, align 1
  %65 = select i1 %.0..0..0.101, i32 -1585010820, i32 69514862
  br label %.backedge

66:                                               ; preds = %8
  %67 = sext i32 %.0124 to i64
  %68 = getelementptr inbounds [1009 x i32], [1009 x i32]* @x, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds [1009 x i32], [1009 x i32]* @y, i64 0, i64 %67
  %71 = load i32, i32* %70, align 4
  %72 = add i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = select i1 %74, i32 970465584, i32 844554323
  br label %.backedge

76:                                               ; preds = %8
  %77 = load i32, i32* @x.7, align 4
  %78 = load i32, i32* @y.8, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 1732240966, i32 281650680
  br label %.backedge

86:                                               ; preds = %8
  %87 = load i32, i32* @vis, align 4
  %88 = icmp eq i32 %87, 1
  store i1 %88, i1* %4, align 1
  %89 = load i32, i32* @x.7, align 4
  %90 = load i32, i32* @y.8, align 4
  %91 = add i32 %89, -1
  %92 = mul i32 %91, %89
  %93 = and i32 %92, 1
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %95, %94
  %97 = select i1 %96, i32 -214766537, i32 281650680
  br label %.backedge

98:                                               ; preds = %8
  %.0..0..0.102 = load volatile i1, i1* %4, align 1
  %99 = select i1 %.0..0..0.102, i32 -1585010820, i32 844554323
  br label %.backedge

100:                                              ; preds = %8
  %101 = load i32, i32* @x.7, align 4
  %102 = load i32, i32* @y.8, align 4
  %103 = add i32 %101, -1
  %104 = mul i32 %103, %101
  %105 = and i32 %104, 1
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %107, %106
  %109 = select i1 %108, i32 114937493, i32 -1283443054
  br label %.backedge

110:                                              ; preds = %8
  %111 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %112 = load i32, i32* @x.7, align 4
  %113 = load i32, i32* @y.8, align 4
  %114 = add i32 %112, -1
  %115 = mul i32 %114, %112
  %116 = and i32 %115, 1
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %118, %117
  %120 = select i1 %119, i32 44237599, i32 -1283443054
  br label %.backedge

121:                                              ; preds = %8
  br label %.backedge

122:                                              ; preds = %8
  %123 = sext i32 %.0124 to i64
  %124 = getelementptr inbounds [1009 x i32], [1009 x i32]* @x, i64 0, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds [1009 x i32], [1009 x i32]* @y, i64 0, i64 %123
  %127 = load i32, i32* %126, align 4
  %128 = add i32 %127, %125
  %129 = srem i32 %128, 2
  store i32 %129, i32* @vis, align 4
  %130 = call i32 @llvm.abs.i32(i32 %125, i1 true)
  %131 = call i32 @llvm.abs.i32(i32 %127, i1 true)
  %132 = add nuw i32 %131, %130
  store i32 %132, i32* %7, align 4
  %133 = call dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* nonnull dereferenceable(4) @maxn, i32* nonnull dereferenceable(4) %7)
  %134 = load i32, i32* %133, align 4
  store i32 %134, i32* @maxn, align 4
  br label %.backedge

135:                                              ; preds = %8
  %.neg131 = add i32 %.0124, 1
  br label %.backedge

136:                                              ; preds = %8
  %137 = load i32, i32* @vis, align 4
  %138 = icmp eq i32 %137, 0
  %139 = select i1 %138, i32 1402201095, i32 -1684221031
  br label %.backedge

140:                                              ; preds = %8
  %141 = load i32, i32* @cnt, align 4
  %142 = add i32 %141, 1
  store i32 %142, i32* @cnt, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %143
  store i64 1, i64* %144, align 8
  br label %.backedge

145:                                              ; preds = %8
  br label %.backedge

146:                                              ; preds = %8
  %147 = load i32, i32* @maxn, align 4
  %148 = call i32 @_Z3Logi(i32 %147)
  %.not130 = icmp sgt i32 %.0122, %148
  %149 = select i1 %.not130, i32 -368606378, i32 244302675
  br label %.backedge

150:                                              ; preds = %8
  %151 = add i32 %.0122, -1
  %152 = zext i32 %151 to i64
  %153 = shl nuw i64 1, %152
  %154 = load i32, i32* @cnt, align 4
  %155 = add i32 %154, 1
  store i32 %155, i32* @cnt, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %156
  store i64 %153, i64* %157, align 8
  br label %.backedge

158:                                              ; preds = %8
  %159 = load i32, i32* @x.7, align 4
  %160 = load i32, i32* @y.8, align 4
  %161 = add i32 %159, -1
  %162 = mul i32 %161, %159
  %163 = and i32 %162, 1
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %165, %164
  %167 = select i1 %166, i32 1260401175, i32 -484016040
  br label %.backedge

168:                                              ; preds = %8
  %169 = add i32 %.0122, 1
  %170 = load i32, i32* @x.7, align 4
  %171 = load i32, i32* @y.8, align 4
  %172 = add i32 %170, -1
  %173 = mul i32 %172, %170
  %174 = and i32 %173, 1
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %176, %175
  %178 = select i1 %177, i32 766425163, i32 -484016040
  br label %.backedge

179:                                              ; preds = %8
  br label %.backedge

180:                                              ; preds = %8
  %181 = load i32, i32* @cnt, align 4
  %182 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %181)
  br label %.backedge

183:                                              ; preds = %8
  %184 = load i32, i32* @cnt, align 4
  %.not129 = icmp sgt i32 %.0120, %184
  %185 = select i1 %.not129, i32 -1477506774, i32 -1342017735
  br label %.backedge

186:                                              ; preds = %8
  %187 = sext i32 %.0120 to i64
  %188 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %187
  %189 = load i64, i64* %188, align 8
  %190 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 %189)
  br label %.backedge

191:                                              ; preds = %8
  %192 = load i32, i32* @x.7, align 4
  %193 = load i32, i32* @y.8, align 4
  %194 = add i32 %192, -1
  %195 = mul i32 %194, %192
  %196 = and i32 %195, 1
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %198, %197
  %200 = select i1 %199, i32 343127304, i32 1432231003
  br label %.backedge

201:                                              ; preds = %8
  %.neg128 = add i32 %.0120, 1
  %202 = load i32, i32* @x.7, align 4
  %203 = load i32, i32* @y.8, align 4
  %204 = add i32 %202, -1
  %205 = mul i32 %204, %202
  %206 = and i32 %205, 1
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %208, %207
  %210 = select i1 %209, i32 968209585, i32 1432231003
  br label %.backedge

211:                                              ; preds = %8
  br label %.backedge

212:                                              ; preds = %8
  %213 = call i32 @putchar(i32 10)
  br label %.backedge

214:                                              ; preds = %8
  %215 = load i32, i32* @x.7, align 4
  %216 = load i32, i32* @y.8, align 4
  %217 = add i32 %215, -1
  %218 = mul i32 %217, %215
  %219 = and i32 %218, 1
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %221, %220
  %223 = select i1 %222, i32 -746943081, i32 -1622794972
  br label %.backedge

224:                                              ; preds = %8
  %225 = load i32, i32* @n, align 4
  %226 = icmp sle i32 %.0118, %225
  store i1 %226, i1* %3, align 1
  %227 = load i32, i32* @x.7, align 4
  %228 = load i32, i32* @y.8, align 4
  %229 = add i32 %227, -1
  %230 = mul i32 %229, %227
  %231 = and i32 %230, 1
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %233, %232
  %235 = select i1 %234, i32 -86469227, i32 -1622794972
  br label %.backedge

236:                                              ; preds = %8
  %.0..0..0.103 = load volatile i1, i1* %3, align 1
  %237 = select i1 %.0..0..0.103, i32 1129428788, i32 1742334420
  br label %.backedge

238:                                              ; preds = %8
  %239 = load i32, i32* @cnt, align 4
  br label %.backedge

240:                                              ; preds = %8
  %.not = icmp eq i32 %.0112, 0
  %241 = select i1 %.not, i32 882250767, i32 1409692267
  br label %.backedge

242:                                              ; preds = %8
  %243 = load i32, i32* @x.7, align 4
  %244 = load i32, i32* @y.8, align 4
  %245 = add i32 %243, -1
  %246 = mul i32 %245, %243
  %247 = and i32 %246, 1
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %249, %248
  %251 = select i1 %250, i32 -1415612577, i32 -2061123535
  br label %.backedge

252:                                              ; preds = %8
  %253 = sext i32 %.0112 to i64
  %254 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %253
  %255 = load i64, i64* %254, align 8
  %256 = sub i64 %.0116, %255
  %257 = sext i32 %.0118 to i64
  %258 = getelementptr inbounds [1009 x i32], [1009 x i32]* @x, i64 0, i64 %257
  %259 = load i32, i32* %258, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds [1009 x i32], [1009 x i32]* @y, i64 0, i64 %257
  %262 = load i32, i32* %261, align 4
  %263 = sext i32 %262 to i64
  %264 = call double @_Z7get_disxxxx(i64 %256, i64 %.0114, i64 %260, i64 %263)
  store double %264, double* getelementptr inbounds ([4 x double], [4 x double]* @dis, i64 0, i64 0), align 16
  %265 = load i64, i64* %254, align 8
  %266 = add i64 %265, %.0116
  %267 = load i32, i32* %258, align 4
  %268 = sext i32 %267 to i64
  %269 = load i32, i32* %261, align 4
  %270 = sext i32 %269 to i64
  %271 = call double @_Z7get_disxxxx(i64 %266, i64 %.0114, i64 %268, i64 %270)
  store double %271, double* getelementptr inbounds ([4 x double], [4 x double]* @dis, i64 0, i64 1), align 8
  %272 = load i64, i64* %254, align 8
  %273 = sub i64 %.0114, %272
  %274 = load i32, i32* %258, align 4
  %275 = sext i32 %274 to i64
  %276 = load i32, i32* %261, align 4
  %277 = sext i32 %276 to i64
  %278 = call double @_Z7get_disxxxx(i64 %.0116, i64 %273, i64 %275, i64 %277)
  store double %278, double* getelementptr inbounds ([4 x double], [4 x double]* @dis, i64 0, i64 2), align 16
  %279 = load i64, i64* %254, align 8
  %280 = add i64 %279, %.0114
  %281 = load i32, i32* %258, align 4
  %282 = sext i32 %281 to i64
  %283 = load i32, i32* %261, align 4
  %284 = sext i32 %283 to i64
  %285 = call double @_Z7get_disxxxx(i64 %.0116, i64 %280, i64 %282, i64 %284)
  store double %285, double* getelementptr inbounds ([4 x double], [4 x double]* @dis, i64 0, i64 3), align 8
  %286 = load i32, i32* @x.7, align 4
  %287 = load i32, i32* @y.8, align 4
  %288 = add i32 %286, -1
  %289 = mul i32 %288, %286
  %290 = and i32 %289, 1
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %292, %291
  %294 = select i1 %293, i32 2104831177, i32 -2061123535
  br label %.backedge

295:                                              ; preds = %8
  br label %.backedge

296:                                              ; preds = %8
  %297 = icmp slt i32 %.0108, 4
  %298 = select i1 %297, i32 963565974, i32 1081677041
  br label %.backedge

299:                                              ; preds = %8
  %300 = sext i32 %.0110 to i64
  %301 = getelementptr inbounds [4 x double], [4 x double]* @dis, i64 0, i64 %300
  %302 = load double, double* %301, align 8
  %303 = sext i32 %.0108 to i64
  %304 = getelementptr inbounds [4 x double], [4 x double]* @dis, i64 0, i64 %303
  %305 = load double, double* %304, align 8
  %306 = fcmp ogt double %302, %305
  %307 = select i1 %306, i32 -321649803, i32 -1175824874
  br label %.backedge

308:                                              ; preds = %8
  br label %.backedge

309:                                              ; preds = %8
  br label %.backedge

310:                                              ; preds = %8
  %311 = load i32, i32* @x.7, align 4
  %312 = load i32, i32* @y.8, align 4
  %313 = add i32 %311, -1
  %314 = mul i32 %313, %311
  %315 = and i32 %314, 1
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %317, %316
  %319 = select i1 %318, i32 746806055, i32 -464731817
  br label %.backedge

320:                                              ; preds = %8
  %.neg = add i32 %.0108, 1
  %321 = load i32, i32* @x.7, align 4
  %322 = load i32, i32* @y.8, align 4
  %323 = add i32 %321, -1
  %324 = mul i32 %323, %321
  %325 = and i32 %324, 1
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %327, %326
  %329 = select i1 %328, i32 196951519, i32 -464731817
  br label %.backedge

330:                                              ; preds = %8
  br label %.backedge

331:                                              ; preds = %8
  %332 = icmp eq i32 %.0110, 0
  %333 = select i1 %332, i32 -1591761554, i32 1396419418
  br label %.backedge

334:                                              ; preds = %8
  %335 = load i32, i32* @x.7, align 4
  %336 = load i32, i32* @y.8, align 4
  %337 = add i32 %335, -1
  %338 = mul i32 %337, %335
  %339 = and i32 %338, 1
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %341, %340
  %343 = select i1 %342, i32 1739557505, i32 -1044374993
  br label %.backedge

344:                                              ; preds = %8
  %345 = sext i32 %.0112 to i64
  %346 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %345
  %347 = load i64, i64* %346, align 8
  %348 = sub i64 %.0116, %347
  %349 = load i32, i32* @x.7, align 4
  %350 = load i32, i32* @y.8, align 4
  %351 = add i32 %349, -1
  %352 = mul i32 %351, %349
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %355, %354
  %357 = select i1 %356, i32 1560981068, i32 -1044374993
  br label %.backedge

358:                                              ; preds = %8
  br label %.backedge

359:                                              ; preds = %8
  %360 = icmp eq i32 %.0110, 1
  %361 = select i1 %360, i32 1580924734, i32 -179744899
  br label %.backedge

362:                                              ; preds = %8
  %363 = sext i32 %.0112 to i64
  %364 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %363
  %365 = load i64, i64* %364, align 8
  %366 = add i64 %365, %.0116
  br label %.backedge

367:                                              ; preds = %8
  %368 = icmp eq i32 %.0110, 2
  %369 = select i1 %368, i32 -1847713781, i32 340695374
  br label %.backedge

370:                                              ; preds = %8
  %371 = sext i32 %.0112 to i64
  %372 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %371
  %373 = load i64, i64* %372, align 8
  %374 = sub i64 %.0114, %373
  br label %.backedge

375:                                              ; preds = %8
  %376 = icmp eq i32 %.0110, 3
  %377 = select i1 %376, i32 1786581293, i32 376106781
  br label %.backedge

378:                                              ; preds = %8
  %379 = load i32, i32* @x.7, align 4
  %380 = load i32, i32* @y.8, align 4
  %381 = add i32 %379, -1
  %382 = mul i32 %381, %379
  %383 = and i32 %382, 1
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %385, %384
  %387 = select i1 %386, i32 -164468268, i32 -1155981727
  br label %.backedge

388:                                              ; preds = %8
  %389 = sext i32 %.0112 to i64
  %390 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %389
  %391 = load i64, i64* %390, align 8
  %392 = add i64 %391, %.0114
  %393 = load i32, i32* @x.7, align 4
  %394 = load i32, i32* @y.8, align 4
  %395 = add i32 %393, -1
  %396 = mul i32 %395, %393
  %397 = and i32 %396, 1
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %399, %398
  %401 = select i1 %400, i32 217188358, i32 -1155981727
  br label %.backedge

402:                                              ; preds = %8
  br label %.backedge

403:                                              ; preds = %8
  %404 = sext i32 %.0110 to i64
  %405 = getelementptr inbounds [4 x i8], [4 x i8]* @dir, i64 0, i64 %404
  %406 = load i8, i8* %405, align 1
  %407 = sext i32 %.0112 to i64
  %408 = getelementptr inbounds [45 x i8], [45 x i8]* @ans, i64 0, i64 %407
  store i8 %406, i8* %408, align 1
  br label %.backedge

409:                                              ; preds = %8
  %410 = load i32, i32* @x.7, align 4
  %411 = load i32, i32* @y.8, align 4
  %412 = add i32 %410, -1
  %413 = mul i32 %412, %410
  %414 = and i32 %413, 1
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %416, %415
  %418 = select i1 %417, i32 -1881661349, i32 -1242753610
  br label %.backedge

419:                                              ; preds = %8
  %420 = add i32 %.0112, -1
  %421 = load i32, i32* @x.7, align 4
  %422 = load i32, i32* @y.8, align 4
  %423 = add i32 %421, -1
  %424 = mul i32 %423, %421
  %425 = and i32 %424, 1
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %427, %426
  %429 = select i1 %428, i32 -729861936, i32 -1242753610
  br label %.backedge

430:                                              ; preds = %8
  br label %.backedge

431:                                              ; preds = %8
  %432 = load i32, i32* @x.7, align 4
  %433 = load i32, i32* @y.8, align 4
  %434 = add i32 %432, -1
  %435 = mul i32 %434, %432
  %436 = and i32 %435, 1
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %438, %437
  %440 = select i1 %439, i32 -555000943, i32 1245213993
  br label %.backedge

441:                                              ; preds = %8
  %442 = load i32, i32* @x.7, align 4
  %443 = load i32, i32* @y.8, align 4
  %444 = add i32 %442, -1
  %445 = mul i32 %444, %442
  %446 = and i32 %445, 1
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %448, %447
  %450 = select i1 %449, i32 797033505, i32 1245213993
  br label %.backedge

451:                                              ; preds = %8
  br label %.backedge

452:                                              ; preds = %8
  %453 = load i32, i32* @x.7, align 4
  %454 = load i32, i32* @y.8, align 4
  %455 = add i32 %453, -1
  %456 = mul i32 %455, %453
  %457 = and i32 %456, 1
  %458 = icmp eq i32 %457, 0
  %459 = icmp slt i32 %454, 10
  %460 = or i1 %459, %458
  %461 = select i1 %460, i32 547563487, i32 683478695
  br label %.backedge

462:                                              ; preds = %8
  %463 = load i32, i32* @cnt, align 4
  %464 = icmp sle i32 %.0106, %463
  store i1 %464, i1* %2, align 1
  %465 = load i32, i32* @x.7, align 4
  %466 = load i32, i32* @y.8, align 4
  %467 = add i32 %465, -1
  %468 = mul i32 %467, %465
  %469 = and i32 %468, 1
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %471, %470
  %473 = select i1 %472, i32 -2024013073, i32 683478695
  br label %.backedge

474:                                              ; preds = %8
  %.0..0..0.104 = load volatile i1, i1* %2, align 1
  %475 = select i1 %.0..0..0.104, i32 -450857679, i32 -1313152595
  br label %.backedge

476:                                              ; preds = %8
  %477 = sext i32 %.0106 to i64
  %478 = getelementptr inbounds [45 x i8], [45 x i8]* @ans, i64 0, i64 %477
  %479 = load i8, i8* %478, align 1
  %480 = sext i8 %479 to i32
  %481 = call i32 @putchar(i32 %480)
  br label %.backedge

482:                                              ; preds = %8
  %483 = add i32 %.0106, 1
  br label %.backedge

484:                                              ; preds = %8
  %485 = call i32 @putchar(i32 10)
  br label %.backedge

486:                                              ; preds = %8
  %487 = add i32 %.0118, 1
  br label %.backedge

488:                                              ; preds = %8
  br label %.backedge

489:                                              ; preds = %8
  %490 = load i32, i32* @x.7, align 4
  %491 = load i32, i32* @y.8, align 4
  %492 = add i32 %490, -1
  %493 = mul i32 %492, %490
  %494 = and i32 %493, 1
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %496, %495
  %498 = select i1 %497, i32 -1418566589, i32 96966242
  br label %.backedge

499:                                              ; preds = %8
  store i32 0, i32* %1, align 4
  %500 = load i32, i32* @x.7, align 4
  %501 = load i32, i32* @y.8, align 4
  %502 = add i32 %500, -1
  %503 = mul i32 %502, %500
  %504 = and i32 %503, 1
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %506, %505
  %508 = select i1 %507, i32 93022090, i32 96966242
  br label %.backedge

509:                                              ; preds = %8
  %.0..0..0.105 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.105

510:                                              ; preds = %8
  %511 = sext i32 %.0124 to i64
  %512 = getelementptr inbounds [1009 x i32], [1009 x i32]* @x, i64 0, i64 %511
  call void @_Z4readRi(i32* nonnull dereferenceable(4) %512)
  %513 = getelementptr inbounds [1009 x i32], [1009 x i32]* @y, i64 0, i64 %511
  call void @_Z4readRi(i32* nonnull dereferenceable(4) %513)
  br label %.backedge

514:                                              ; preds = %8
  br label %.backedge

515:                                              ; preds = %8
  br label %.backedge

516:                                              ; preds = %8
  %517 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

518:                                              ; preds = %8
  %519 = add i32 %.0122, 1
  br label %.backedge

520:                                              ; preds = %8
  %521 = add i32 %.0120, 1
  br label %.backedge

522:                                              ; preds = %8
  br label %.backedge

523:                                              ; preds = %8
  %524 = sext i32 %.0112 to i64
  %525 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %524
  %526 = load i64, i64* %525, align 8
  %527 = sub i64 %.0116, %526
  %528 = sext i32 %.0118 to i64
  %529 = getelementptr inbounds [1009 x i32], [1009 x i32]* @x, i64 0, i64 %528
  %530 = load i32, i32* %529, align 4
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds [1009 x i32], [1009 x i32]* @y, i64 0, i64 %528
  %533 = load i32, i32* %532, align 4
  %534 = sext i32 %533 to i64
  %535 = call double @_Z7get_disxxxx(i64 %527, i64 %.0114, i64 %531, i64 %534)
  store double %535, double* getelementptr inbounds ([4 x double], [4 x double]* @dis, i64 0, i64 0), align 16
  %536 = load i64, i64* %525, align 8
  %537 = add i64 %536, %.0116
  %538 = load i32, i32* %529, align 4
  %539 = sext i32 %538 to i64
  %540 = load i32, i32* %532, align 4
  %541 = sext i32 %540 to i64
  %542 = call double @_Z7get_disxxxx(i64 %537, i64 %.0114, i64 %539, i64 %541)
  store double %542, double* getelementptr inbounds ([4 x double], [4 x double]* @dis, i64 0, i64 1), align 8
  %543 = load i64, i64* %525, align 8
  %544 = sub i64 %.0114, %543
  %545 = load i32, i32* %529, align 4
  %546 = sext i32 %545 to i64
  %547 = load i32, i32* %532, align 4
  %548 = sext i32 %547 to i64
  %549 = call double @_Z7get_disxxxx(i64 %.0116, i64 %544, i64 %546, i64 %548)
  store double %549, double* getelementptr inbounds ([4 x double], [4 x double]* @dis, i64 0, i64 2), align 16
  %550 = load i64, i64* %525, align 8
  %551 = add i64 %550, %.0114
  %552 = load i32, i32* %529, align 4
  %553 = sext i32 %552 to i64
  %554 = load i32, i32* %532, align 4
  %555 = sext i32 %554 to i64
  %556 = call double @_Z7get_disxxxx(i64 %.0116, i64 %551, i64 %553, i64 %555)
  store double %556, double* getelementptr inbounds ([4 x double], [4 x double]* @dis, i64 0, i64 3), align 8
  br label %.backedge

557:                                              ; preds = %8
  %558 = add i32 %.0108, 1
  br label %.backedge

559:                                              ; preds = %8
  %560 = sext i32 %.0112 to i64
  %561 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %560
  %562 = load i64, i64* %561, align 8
  %563 = sub i64 %.0116, %562
  br label %.backedge

564:                                              ; preds = %8
  %565 = sext i32 %.0112 to i64
  %566 = getelementptr inbounds [45 x i64], [45 x i64]* @a, i64 0, i64 %565
  %567 = load i64, i64* %566, align 8
  %568 = add i64 %567, %.0114
  br label %.backedge

569:                                              ; preds = %8
  %570 = add i32 %.0112, -1
  br label %.backedge

571:                                              ; preds = %8
  br label %.backedge

572:                                              ; preds = %8
  br label %.backedge

573:                                              ; preds = %8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4) %0, i32* dereferenceable(4) %1) local_unnamed_addr #7 comdat {
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* %0, align 4
  store i32 %6, i32* %5, align 4
  %7 = load i32, i32* %1, align 4
  store i32 %7, i32* %4, align 4
  %8 = load i32, i32* @x.9, align 4
  %9 = load i32, i32* @y.10, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 1849544171, i32 2110928276
  %17 = select i1 %15, i32 -924100227, i32 2110928276
  br label %.outer

.outer:                                           ; preds = %18, %2
  %.09.ph = phi i32* [ undef, %2 ], [ %.09.ph14, %18 ]
  %.0.ph = phi i32 [ -54952036, %2 ], [ %16, %18 ]
  br label %.outer13

.outer13:                                         ; preds = %.outer13.backedge, %.outer
  %.09.ph14 = phi i32* [ %.09.ph, %.outer ], [ %.09.ph14.be, %.outer13.backedge ]
  %.0.ph15 = phi i32 [ %.0.ph, %.outer ], [ -364483251, %.outer13.backedge ]
  br label %.outer16

.outer16:                                         ; preds = %.outer16.backedge, %.outer13
  %.0.ph17 = phi i32 [ %.0.ph15, %.outer13 ], [ %.0.ph17.be, %.outer16.backedge ]
  br label %18

18:                                               ; preds = %.outer16, %18
  switch i32 %.0.ph17, label %18 [
    i32 -54952036, label %19
    i32 1281152597, label %.outer13.backedge
    i32 -406469432, label %22
    i32 -364483251, label %.outer16.backedge
    i32 -924100227, label %.outer
    i32 1849544171, label %23
    i32 2110928276, label %24
  ]

19:                                               ; preds = %18
  %.0..0..0.6 = load volatile i32, i32* %5, align 4
  %.0..0..0.7 = load volatile i32, i32* %4, align 4
  %20 = icmp slt i32 %.0..0..0.6, %.0..0..0.7
  %21 = select i1 %20, i32 1281152597, i32 -406469432
  br label %.outer16.backedge

22:                                               ; preds = %18
  br label %.outer13.backedge

.outer13.backedge:                                ; preds = %18, %22
  %.09.ph14.be = phi i32* [ %0, %22 ], [ %1, %18 ]
  br label %.outer13

23:                                               ; preds = %18
  store i32* %.09.ph, i32** %3, align 8
  %.0..0..0.8 = load volatile i32*, i32** %3, align 8
  ret i32* %.0..0..0.8

24:                                               ; preds = %18
  br label %.outer16.backedge

.outer16.backedge:                                ; preds = %18, %24, %19
  %.0.ph17.be = phi i32 [ %21, %19 ], [ -924100227, %24 ], [ %17, %18 ]
  br label %.outer16
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z3Logi(i32 %0) local_unnamed_addr #0 comdat {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = tail call double @_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %0)
  %5 = tail call double @_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 2)
  %6 = fdiv double %4, %5
  %7 = fptosi double %6 to i32
  %8 = shl nuw i32 1, %7
  store i32 %8, i32* %3, align 4
  store i32 %0, i32* %2, align 4
  %9 = add i32 %7, 1
  %10 = load i32, i32* @x.11, align 4
  %11 = load i32, i32* @y.12, align 4
  %12 = add i32 %10, -1
  %13 = mul i32 %12, %10
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %16, %15
  %18 = select i1 %17, i32 -1143183374, i32 -1268178055
  %19 = select i1 %17, i32 -1585839655, i32 -1268178055
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.09.ph = phi i32 [ undef, %1 ], [ %.09.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ -1513944651, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %.outer11

.outer11:                                         ; preds = %.outer11.backedge, %.outer
  %.0.ph12 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph12.be, %.outer11.backedge ]
  br label %20

20:                                               ; preds = %.outer11, %20
  switch i32 %.0.ph12, label %20 [
    i32 -1513944651, label %21
    i32 2098903975, label %.outer.backedge
    i32 -2036314116, label %.outer11.backedge
    i32 -1585839655, label %24
    i32 -1143183374, label %25
    i32 1538858087, label %26
    i32 -1268178055, label %27
  ]

21:                                               ; preds = %20
  %.0..0..0. = load volatile i32, i32* %3, align 4
  %.0..0..0.8 = load volatile i32, i32* %2, align 4
  %22 = icmp eq i32 %.0..0..0., %.0..0..0.8
  %23 = select i1 %22, i32 2098903975, i32 -2036314116
  br label %.outer11.backedge

24:                                               ; preds = %20
  br label %.outer.backedge

25:                                               ; preds = %20
  br label %.outer11.backedge

.outer11.backedge:                                ; preds = %20, %25, %21
  %.0.ph12.be = phi i32 [ %23, %21 ], [ 1538858087, %25 ], [ %19, %20 ]
  br label %.outer11

26:                                               ; preds = %20
  ret i32 %.09.ph

27:                                               ; preds = %20
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %20, %27, %24
  %.09.ph.be = phi i32 [ %9, %24 ], [ %9, %27 ], [ %7, %20 ]
  %.0.ph.be = phi i32 [ %18, %24 ], [ -1585839655, %27 ], [ 1538858087, %20 ]
  br label %.outer
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define linkonce_odr double @_Z7get_disxxxx(i64 %0, i64 %1, i64 %2, i64 %3) local_unnamed_addr #0 comdat {
  %5 = alloca double, align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = load i32, i32* @x.13, align 4
  %9 = load i32, i32* @y.14, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %7, align 1
  %14 = icmp slt i32 %9, 10
  store i1 %14, i1* %6, align 1
  %15 = sub i64 %0, %2
  %16 = mul nsw i64 %15, %15
  %17 = sub i64 %1, %3
  %18 = mul nsw i64 %17, %17
  %19 = add nuw i64 %18, %16
  br label %.outer

.outer:                                           ; preds = %24, %4
  %.ph = phi double [ %25, %24 ], [ undef, %4 ]
  %.0.ph = phi i32 [ %34, %24 ], [ 1650117186, %4 ]
  br label %.outer4

.outer4:                                          ; preds = %.outer4.backedge, %.outer
  %.0.ph5 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph5.be, %.outer4.backedge ]
  br label %20

20:                                               ; preds = %.outer4, %20
  switch i32 %.0.ph5, label %20 [
    i32 1650117186, label %21
    i32 -1874621702, label %24
    i32 -1398275897, label %35
    i32 79142322, label %36
  ]

21:                                               ; preds = %20
  %.0..0..0. = load volatile i1, i1* %7, align 1
  %.0..0..0.1 = load volatile i1, i1* %6, align 1
  %22 = or i1 %.0..0..0., %.0..0..0.1
  %23 = select i1 %22, i32 -1874621702, i32 79142322
  br label %.outer4.backedge

24:                                               ; preds = %20
  %25 = tail call double @_ZSt4sqrtIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %19)
  %26 = load i32, i32* @x.13, align 4
  %27 = load i32, i32* @y.14, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 -1398275897, i32 79142322
  br label %.outer

35:                                               ; preds = %20
  store double %.ph, double* %5, align 8
  %.0..0..0.2 = load volatile double, double* %5, align 8
  ret double %.0..0..0.2

36:                                               ; preds = %20
  %37 = tail call double @_ZSt4sqrtIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %19)
  br label %.outer4.backedge

.outer4.backedge:                                 ; preds = %36, %21
  %.0.ph5.be = phi i32 [ %23, %21 ], [ -1874621702, %36 ]
  br label %.outer4
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %0) local_unnamed_addr #7 comdat {
  %2 = sitofp i32 %0 to double
  %3 = tail call double @log(double %2) #11
  ret double %3
}

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare double @log(double) local_unnamed_addr #8

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZSt4sqrtIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %0) local_unnamed_addr #7 comdat {
  %2 = alloca double, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.17, align 4
  %6 = load i32, i32* @y.18, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  %12 = sitofp i64 %0 to double
  %13 = or i1 %11, %10
  %14 = select i1 %13, i32 482965481, i32 455012831
  br label %.outer

.outer:                                           ; preds = %19, %1
  %.ph = phi double [ %20, %19 ], [ undef, %1 ]
  %.0.ph = phi i32 [ %14, %19 ], [ 1798490592, %1 ]
  br label %.outer3

.outer3:                                          ; preds = %.outer3.backedge, %.outer
  %.0.ph4 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph4.be, %.outer3.backedge ]
  br label %15

15:                                               ; preds = %.outer3, %15
  switch i32 %.0.ph4, label %15 [
    i32 1798490592, label %16
    i32 1578628426, label %19
    i32 482965481, label %21
    i32 455012831, label %.outer3.backedge
  ]

16:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %17 = or i1 %.0..0..0., %.0..0..0.1
  %18 = select i1 %17, i32 1578628426, i32 455012831
  br label %.outer3.backedge

19:                                               ; preds = %15
  %20 = tail call double @sqrt(double %12) #11
  br label %.outer

21:                                               ; preds = %15
  store double %.ph, double* %2, align 8
  %.0..0..0.2 = load volatile double, double* %2, align 8
  ret double %.0..0..0.2

.outer3.backedge:                                 ; preds = %15, %16
  %.0.ph4.be = phi i32 [ %18, %16 ], [ 1578628426, %15 ]
  br label %.outer3
}

; Function Attrs: mustprogress nofree nosync nounwind readnone willreturn
declare double @sqrt(double) local_unnamed_addr #8

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s534694738.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #9

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { mustprogress nofree nosync nounwind readnone willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #10 = { nounwind }
attributes #11 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
