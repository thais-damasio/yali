; ModuleID = 'build_ollvm/programs/p03247/s275513756.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s275513756.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@d = local_unnamed_addr global [1010 x i32] zeroinitializer, align 16
@x = local_unnamed_addr global [1010 x i32] zeroinitializer, align 16
@y = local_unnamed_addr global [1010 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s275513756.cpp, i8* null }]
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0
@x.14 = common local_unnamed_addr global i32 0
@y.15 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline nounwind uwtable
define i64 @_Z4readv() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = tail call i32 @getchar()
  %3 = trunc i32 %2 to i8
  br label %4

4:                                                ; preds = %.backedge, %0
  %.022 = phi i64 [ 0, %0 ], [ %.022.be, %.backedge ]
  %.020 = phi i64 [ 1, %0 ], [ %.020.be, %.backedge ]
  %.018 = phi i8 [ %3, %0 ], [ %.018.be, %.backedge ]
  %.016 = phi i32 [ -14187871, %0 ], [ %.016.be, %.backedge ]
  %.014 = phi i1 [ undef, %0 ], [ %.014.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.016, label %.backedge [
    i32 -14187871, label %5
    i32 -713292846, label %8
    i32 326721503, label %10
    i32 666716871, label %12
    i32 -1735784053, label %15
    i32 1408782705, label %25
    i32 1633704103, label %35
    i32 -969096103, label %36
    i32 1502515564, label %39
    i32 -10055964, label %40
    i32 552872626, label %43
    i32 618765539, label %45
    i32 -2018062407, label %55
    i32 -641108746, label %65
    i32 1080455304, label %67
    i32 1760949601, label %77
    i32 1531502266, label %93
    i32 -1001959216, label %94
    i32 -568963178, label %96
    i32 -669213424, label %97
    i32 -1387840934, label %98
  ]

.backedge:                                        ; preds = %4, %98, %97, %96, %93, %77, %67, %65, %55, %45, %43, %40, %39, %36, %35, %25, %15, %12, %10, %8, %5
  %.022.be = phi i64 [ %.022, %4 ], [ %102, %98 ], [ %.022, %97 ], [ %.022, %96 ], [ %.022, %93 ], [ %81, %77 ], [ %.022, %67 ], [ %.022, %65 ], [ %.022, %55 ], [ %.022, %45 ], [ %.022, %43 ], [ %.022, %40 ], [ %.022, %39 ], [ %.022, %36 ], [ %.022, %35 ], [ %.022, %25 ], [ %.022, %15 ], [ %.022, %12 ], [ %.022, %10 ], [ %.022, %8 ], [ %.022, %5 ]
  %.020.be = phi i64 [ %.020, %4 ], [ %.020, %98 ], [ %.020, %97 ], [ -1, %96 ], [ %.020, %93 ], [ %.020, %77 ], [ %.020, %67 ], [ %.020, %65 ], [ %.020, %55 ], [ %.020, %45 ], [ %.020, %43 ], [ %.020, %40 ], [ %.020, %39 ], [ %.020, %36 ], [ %.020, %35 ], [ -1, %25 ], [ %.020, %15 ], [ %.020, %12 ], [ %.020, %10 ], [ %.020, %8 ], [ %.020, %5 ]
  %.018.be = phi i8 [ %.018, %4 ], [ %104, %98 ], [ %.018, %97 ], [ %.018, %96 ], [ %.018, %93 ], [ %83, %77 ], [ %.018, %67 ], [ %.018, %65 ], [ %.018, %55 ], [ %.018, %45 ], [ %.018, %43 ], [ %.018, %40 ], [ %.018, %39 ], [ %38, %36 ], [ %.018, %35 ], [ %.018, %25 ], [ %.018, %15 ], [ %.018, %12 ], [ %.018, %10 ], [ %.018, %8 ], [ %.018, %5 ]
  %.016.be = phi i32 [ %.016, %4 ], [ 1760949601, %98 ], [ -2018062407, %97 ], [ 1408782705, %96 ], [ -10055964, %93 ], [ %92, %77 ], [ %76, %67 ], [ %66, %65 ], [ %64, %55 ], [ %54, %45 ], [ 618765539, %43 ], [ %42, %40 ], [ -10055964, %39 ], [ -14187871, %36 ], [ -969096103, %35 ], [ %34, %25 ], [ %24, %15 ], [ %14, %12 ], [ %11, %10 ], [ 326721503, %8 ], [ %7, %5 ]
  %.014.be = phi i1 [ %.014, %4 ], [ %.014, %98 ], [ %.014, %97 ], [ %.014, %96 ], [ %.014, %93 ], [ %.014, %77 ], [ %.014, %67 ], [ %.014, %65 ], [ %.014, %55 ], [ %.014, %45 ], [ %.014, %43 ], [ %.014, %40 ], [ %.014, %39 ], [ %.014, %36 ], [ %.014, %35 ], [ %.014, %25 ], [ %.014, %15 ], [ %.014, %12 ], [ %.014, %10 ], [ %9, %8 ], [ true, %5 ]
  %.0.be = phi i1 [ %.0, %4 ], [ %.0, %98 ], [ %.0, %97 ], [ %.0, %96 ], [ %.0, %93 ], [ %.0, %77 ], [ %.0, %67 ], [ %.0, %65 ], [ %.0, %55 ], [ %.0, %45 ], [ %44, %43 ], [ false, %40 ], [ %.0, %39 ], [ %.0, %36 ], [ %.0, %35 ], [ %.0, %25 ], [ %.0, %15 ], [ %.0, %12 ], [ %.0, %10 ], [ %.0, %8 ], [ %.0, %5 ]
  br label %4

5:                                                ; preds = %4
  %6 = icmp slt i8 %.018, 48
  %7 = select i1 %6, i32 326721503, i32 -713292846
  br label %.backedge

8:                                                ; preds = %4
  %9 = icmp sgt i8 %.018, 57
  br label %.backedge

10:                                               ; preds = %4
  %11 = select i1 %.014, i32 666716871, i32 1502515564
  br label %.backedge

12:                                               ; preds = %4
  %13 = icmp eq i8 %.018, 45
  %14 = select i1 %13, i32 -1735784053, i32 -969096103
  br label %.backedge

15:                                               ; preds = %4
  %16 = load i32, i32* @x.10, align 4
  %17 = load i32, i32* @y.11, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 1408782705, i32 -568963178
  br label %.backedge

25:                                               ; preds = %4
  %26 = load i32, i32* @x.10, align 4
  %27 = load i32, i32* @y.11, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 1633704103, i32 -568963178
  br label %.backedge

35:                                               ; preds = %4
  br label %.backedge

36:                                               ; preds = %4
  %37 = tail call i32 @getchar()
  %38 = trunc i32 %37 to i8
  br label %.backedge

39:                                               ; preds = %4
  br label %.backedge

40:                                               ; preds = %4
  %41 = icmp sgt i8 %.018, 47
  %42 = select i1 %41, i32 552872626, i32 618765539
  br label %.backedge

43:                                               ; preds = %4
  %44 = icmp slt i8 %.018, 58
  br label %.backedge

45:                                               ; preds = %4
  store i1 %.0, i1* %1, align 1
  %46 = load i32, i32* @x.10, align 4
  %47 = load i32, i32* @y.11, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -2018062407, i32 -669213424
  br label %.backedge

55:                                               ; preds = %4
  %56 = load i32, i32* @x.10, align 4
  %57 = load i32, i32* @y.11, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 -641108746, i32 -669213424
  br label %.backedge

65:                                               ; preds = %4
  %.0..0..0.13 = load volatile i1, i1* %1, align 1
  %66 = select i1 %.0..0..0.13, i32 1080455304, i32 -1001959216
  br label %.backedge

67:                                               ; preds = %4
  %68 = load i32, i32* @x.10, align 4
  %69 = load i32, i32* @y.11, align 4
  %70 = add i32 %68, -1
  %71 = mul i32 %70, %68
  %72 = and i32 %71, 1
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %74, %73
  %76 = select i1 %75, i32 1760949601, i32 -1387840934
  br label %.backedge

77:                                               ; preds = %4
  %78 = mul nsw i64 %.022, 10
  %79 = sext i8 %.018 to i64
  %80 = add i64 %78, -48
  %81 = add i64 %80, %79
  %82 = tail call i32 @getchar()
  %83 = trunc i32 %82 to i8
  %84 = load i32, i32* @x.10, align 4
  %85 = load i32, i32* @y.11, align 4
  %86 = add i32 %84, -1
  %87 = mul i32 %86, %84
  %88 = and i32 %87, 1
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %90, %89
  %92 = select i1 %91, i32 1531502266, i32 -1387840934
  br label %.backedge

93:                                               ; preds = %4
  br label %.backedge

94:                                               ; preds = %4
  %95 = mul nsw i64 %.020, %.022
  ret i64 %95

96:                                               ; preds = %4
  br label %.backedge

97:                                               ; preds = %4
  br label %.backedge

98:                                               ; preds = %4
  %99 = mul nsw i64 %.022, 10
  %100 = sext i8 %.018 to i64
  %101 = add i64 %99, -48
  %102 = add i64 %101, %100
  %103 = tail call i32 @getchar()
  %104 = trunc i32 %103 to i8
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #5

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = tail call i64 @_Z4readv()
  %6 = trunc i64 %5 to i32
  br label %7

7:                                                ; preds = %.backedge, %0
  %.072 = phi i32 [ 0, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ 0, %0 ], [ %.070.be, %.backedge ]
  %.068 = phi i32 [ 1, %0 ], [ %.068.be, %.backedge ]
  %.066 = phi i32 [ undef, %0 ], [ %.066.be, %.backedge ]
  %.064 = phi i32 [ undef, %0 ], [ %.064.be, %.backedge ]
  %.062 = phi i32 [ undef, %0 ], [ %.062.be, %.backedge ]
  %.060 = phi i32 [ undef, %0 ], [ %.060.be, %.backedge ]
  %.058 = phi i32 [ undef, %0 ], [ %.058.be, %.backedge ]
  %.0 = phi i32 [ 724933554, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 724933554, label %8
    i32 1236571222, label %18
    i32 62187652, label %29
    i32 -2052600363, label %31
    i32 95867841, label %43
    i32 -1055871642, label %45
    i32 1541446114, label %55
    i32 2069861456, label %66
    i32 -149484672, label %67
    i32 -2137396304, label %69
    i32 -1648162591, label %71
    i32 -1166890917, label %73
    i32 521638863, label %74
    i32 2126352397, label %76
    i32 1337686593, label %77
    i32 686423799, label %80
    i32 1938259183, label %90
    i32 250319164, label %104
    i32 2033867760, label %105
    i32 -927354324, label %115
    i32 -1386413624, label %126
    i32 191606975, label %127
    i32 -1200228236, label %129
    i32 427963327, label %132
    i32 -866205395, label %142
    i32 1377374034, label %153
    i32 -1201902221, label %154
    i32 1834161246, label %164
    i32 97359187, label %175
    i32 200431567, label %177
    i32 -1523570020, label %182
    i32 -339685694, label %183
    i32 -543757868, label %193
    i32 -540104024, label %203
    i32 -611563406, label %204
    i32 537249155, label %206
    i32 3292527, label %216
    i32 1128453611, label %226
    i32 439899150, label %227
    i32 -396193987, label %237
    i32 -1072736556, label %248
    i32 -1591704640, label %250
    i32 807985835, label %260
    i32 -1957242349, label %270
    i32 -137932104, label %284
    i32 -386023409, label %286
    i32 -1067000553, label %294
    i32 -834746312, label %302
    i32 -188854169, label %303
    i32 290737621, label %309
    i32 988120500, label %317
    i32 -1651920375, label %325
    i32 2042318563, label %335
    i32 -1934317857, label %345
    i32 -759185860, label %346
    i32 1389083027, label %347
    i32 1401558499, label %357
    i32 816861503, label %368
    i32 408307537, label %369
    i32 1718020147, label %370
    i32 -946372482, label %372
    i32 1639019893, label %373
    i32 923926139, label %374
    i32 1714975621, label %375
    i32 -415840896, label %377
    i32 -1930352837, label %381
    i32 1455587938, label %383
    i32 -2026421004, label %385
    i32 875592252, label %386
    i32 1538909891, label %387
    i32 60561734, label %388
    i32 1880041605, label %389
    i32 -669569738, label %390
    i32 1111101916, label %391
  ]

.backedge:                                        ; preds = %7, %391, %390, %389, %388, %387, %386, %385, %383, %381, %377, %375, %374, %372, %370, %369, %368, %357, %347, %346, %345, %335, %325, %317, %309, %303, %302, %294, %286, %284, %270, %260, %250, %248, %237, %227, %226, %216, %206, %204, %203, %193, %183, %182, %177, %175, %164, %154, %153, %142, %132, %129, %127, %126, %115, %105, %104, %90, %80, %77, %76, %74, %73, %71, %69, %67, %66, %55, %45, %43, %31, %29, %18, %8
  %.072.be = phi i32 [ %.072, %7 ], [ %.072, %391 ], [ %.072, %390 ], [ %.072, %389 ], [ %.072, %388 ], [ %.072, %387 ], [ %.072, %386 ], [ %.072, %385 ], [ %.072, %383 ], [ %.072, %381 ], [ %.072, %377 ], [ %.072, %375 ], [ %.072, %374 ], [ %.072, %372 ], [ %.072, %370 ], [ %.072, %369 ], [ %.072, %368 ], [ %.072, %357 ], [ %.072, %347 ], [ %.072, %346 ], [ %.072, %345 ], [ %.072, %335 ], [ %.072, %325 ], [ %.072, %317 ], [ %.072, %309 ], [ %.072, %303 ], [ %.072, %302 ], [ %.072, %294 ], [ %.072, %286 ], [ %.072, %284 ], [ %.072, %270 ], [ %.072, %260 ], [ %.072, %250 ], [ %.072, %248 ], [ %.072, %237 ], [ %.072, %227 ], [ %.072, %226 ], [ %.072, %216 ], [ %.072, %206 ], [ %.072, %204 ], [ %.072, %203 ], [ %.072, %193 ], [ %.072, %183 ], [ %.072, %182 ], [ %.072, %177 ], [ %.072, %175 ], [ %.072, %164 ], [ %.072, %154 ], [ %.072, %153 ], [ %.072, %142 ], [ %.072, %132 ], [ %.072, %129 ], [ %.072, %127 ], [ %.072, %126 ], [ %.072, %115 ], [ %.072, %105 ], [ %.072, %104 ], [ %.072, %90 ], [ %.072, %80 ], [ %.072, %77 ], [ %.072, %76 ], [ %.072, %74 ], [ %.072, %73 ], [ %.072, %71 ], [ %.072, %69 ], [ %.072, %67 ], [ %.072, %66 ], [ %.072, %55 ], [ %.072, %45 ], [ %44, %43 ], [ %.072, %31 ], [ %.072, %29 ], [ %.072, %18 ], [ %.072, %8 ]
  %.070.be = phi i32 [ %.070, %7 ], [ %.070, %391 ], [ %.070, %390 ], [ %.070, %389 ], [ %.070, %388 ], [ %.070, %387 ], [ %.070, %386 ], [ %.070, %385 ], [ %.070, %383 ], [ %.070, %381 ], [ %.070, %377 ], [ %376, %375 ], [ %.070, %374 ], [ %.070, %372 ], [ %.070, %370 ], [ %.070, %369 ], [ %.070, %368 ], [ %.070, %357 ], [ %.070, %347 ], [ %.070, %346 ], [ %.070, %345 ], [ %.070, %335 ], [ %.070, %325 ], [ %.070, %317 ], [ %.070, %309 ], [ %.070, %303 ], [ %.070, %302 ], [ %.070, %294 ], [ %.070, %286 ], [ %.070, %284 ], [ %.070, %270 ], [ %.070, %260 ], [ %.070, %250 ], [ %.070, %248 ], [ %.070, %237 ], [ %.070, %227 ], [ %.070, %226 ], [ %.070, %216 ], [ %.070, %206 ], [ %.070, %204 ], [ %.070, %203 ], [ %.070, %193 ], [ %.070, %183 ], [ %.070, %182 ], [ %.070, %177 ], [ %.070, %175 ], [ %.070, %164 ], [ %.070, %154 ], [ %.070, %153 ], [ %.070, %142 ], [ %.070, %132 ], [ %.070, %129 ], [ %.070, %127 ], [ %.070, %126 ], [ %.070, %115 ], [ %.070, %105 ], [ %.070, %104 ], [ %.070, %90 ], [ %.070, %80 ], [ %.070, %77 ], [ %.070, %76 ], [ %.070, %74 ], [ %.070, %73 ], [ %.070, %71 ], [ %.070, %69 ], [ %.070, %67 ], [ %.070, %66 ], [ %56, %55 ], [ %.070, %45 ], [ %.070, %43 ], [ %.070, %31 ], [ %.070, %29 ], [ %.070, %18 ], [ %.070, %8 ]
  %.068.be = phi i32 [ %.068, %7 ], [ %.068, %391 ], [ %.068, %390 ], [ %.068, %389 ], [ %.068, %388 ], [ %.068, %387 ], [ %.068, %386 ], [ %.068, %385 ], [ %.068, %383 ], [ %.068, %381 ], [ %.068, %377 ], [ %.068, %375 ], [ %.068, %374 ], [ %.068, %372 ], [ %.068, %370 ], [ %.068, %369 ], [ %.068, %368 ], [ %.068, %357 ], [ %.068, %347 ], [ %.068, %346 ], [ %.068, %345 ], [ %.068, %335 ], [ %.068, %325 ], [ %.068, %317 ], [ %.068, %309 ], [ %.068, %303 ], [ %.068, %302 ], [ %.068, %294 ], [ %.068, %286 ], [ %.068, %284 ], [ %.068, %270 ], [ %.068, %260 ], [ %.068, %250 ], [ %.068, %248 ], [ %.068, %237 ], [ %.068, %227 ], [ %.068, %226 ], [ %.068, %216 ], [ %.068, %206 ], [ %.068, %204 ], [ %.068, %203 ], [ %.068, %193 ], [ %.068, %183 ], [ %.068, %182 ], [ %.068, %177 ], [ %.068, %175 ], [ %.068, %164 ], [ %.068, %154 ], [ %.068, %153 ], [ %.068, %142 ], [ %.068, %132 ], [ %.068, %129 ], [ %.068, %127 ], [ %.068, %126 ], [ %.068, %115 ], [ %.068, %105 ], [ %.068, %104 ], [ %.068, %90 ], [ %.068, %80 ], [ %.068, %77 ], [ %.068, %76 ], [ %75, %74 ], [ %.068, %73 ], [ %.068, %71 ], [ %.068, %69 ], [ %.068, %67 ], [ %.068, %66 ], [ %.068, %55 ], [ %.068, %45 ], [ %.068, %43 ], [ %.068, %31 ], [ %.068, %29 ], [ %.068, %18 ], [ %.068, %8 ]
  %.066.be = phi i32 [ %.066, %7 ], [ %.066, %391 ], [ %.066, %390 ], [ %.066, %389 ], [ %.066, %388 ], [ %.066, %387 ], [ %.066, %386 ], [ %.066, %385 ], [ %.066, %383 ], [ %.066, %381 ], [ %.neg, %377 ], [ %.066, %375 ], [ %.066, %374 ], [ %.066, %372 ], [ %.066, %370 ], [ %.066, %369 ], [ %.066, %368 ], [ %.066, %357 ], [ %.066, %347 ], [ %.066, %346 ], [ %.066, %345 ], [ %.066, %335 ], [ %.066, %325 ], [ %.066, %317 ], [ %.066, %309 ], [ %.066, %303 ], [ %.066, %302 ], [ %.066, %294 ], [ %.066, %286 ], [ %.066, %284 ], [ %.066, %270 ], [ %.066, %260 ], [ %.066, %250 ], [ %.066, %248 ], [ %.066, %237 ], [ %.066, %227 ], [ %.066, %226 ], [ %.066, %216 ], [ %.066, %206 ], [ %.066, %204 ], [ %.066, %203 ], [ %.066, %193 ], [ %.066, %183 ], [ %.066, %182 ], [ %.066, %177 ], [ %.066, %175 ], [ %.066, %164 ], [ %.066, %154 ], [ %.066, %153 ], [ %.066, %142 ], [ %.066, %132 ], [ %.neg83, %129 ], [ %.066, %127 ], [ %.066, %126 ], [ %.066, %115 ], [ %.066, %105 ], [ %.066, %104 ], [ %92, %90 ], [ %.066, %80 ], [ %.066, %77 ], [ 0, %76 ], [ %.066, %74 ], [ %.066, %73 ], [ %.066, %71 ], [ %.066, %69 ], [ %.066, %67 ], [ %.066, %66 ], [ %.066, %55 ], [ %.066, %45 ], [ %.066, %43 ], [ %.066, %31 ], [ %.066, %29 ], [ %.066, %18 ], [ %.066, %8 ]
  %.064.be = phi i32 [ %.064, %7 ], [ %.064, %391 ], [ %.064, %390 ], [ %.064, %389 ], [ %.064, %388 ], [ %.064, %387 ], [ %.064, %386 ], [ %.064, %385 ], [ %.064, %383 ], [ %382, %381 ], [ %.064, %377 ], [ %.064, %375 ], [ %.064, %374 ], [ %.064, %372 ], [ %.064, %370 ], [ %.064, %369 ], [ %.064, %368 ], [ %.064, %357 ], [ %.064, %347 ], [ %.064, %346 ], [ %.064, %345 ], [ %.064, %335 ], [ %.064, %325 ], [ %.064, %317 ], [ %.064, %309 ], [ %.064, %303 ], [ %.064, %302 ], [ %.064, %294 ], [ %.064, %286 ], [ %.064, %284 ], [ %.064, %270 ], [ %.064, %260 ], [ %.064, %250 ], [ %.064, %248 ], [ %.064, %237 ], [ %.064, %227 ], [ %.064, %226 ], [ %.064, %216 ], [ %.064, %206 ], [ %.064, %204 ], [ %.064, %203 ], [ %.064, %193 ], [ %.064, %183 ], [ %.064, %182 ], [ %.064, %177 ], [ %.064, %175 ], [ %.064, %164 ], [ %.064, %154 ], [ %.064, %153 ], [ %.064, %142 ], [ %.064, %132 ], [ %.064, %129 ], [ %.064, %127 ], [ %.064, %126 ], [ %116, %115 ], [ %.064, %105 ], [ %.064, %104 ], [ %.064, %90 ], [ %.064, %80 ], [ %.064, %77 ], [ 30, %76 ], [ %.064, %74 ], [ %.064, %73 ], [ %.064, %71 ], [ %.064, %69 ], [ %.064, %67 ], [ %.064, %66 ], [ %.064, %55 ], [ %.064, %45 ], [ %.064, %43 ], [ %.064, %31 ], [ %.064, %29 ], [ %.064, %18 ], [ %.064, %8 ]
  %.062.be = phi i32 [ %.062, %7 ], [ %.062, %391 ], [ %.062, %390 ], [ %.062, %389 ], [ %.062, %388 ], [ %.062, %387 ], [ %.062, %386 ], [ %.062, %385 ], [ 1, %383 ], [ %.062, %381 ], [ %.062, %377 ], [ %.062, %375 ], [ %.062, %374 ], [ %.062, %372 ], [ %.062, %370 ], [ %.062, %369 ], [ %.062, %368 ], [ %.062, %357 ], [ %.062, %347 ], [ %.062, %346 ], [ %.062, %345 ], [ %.062, %335 ], [ %.062, %325 ], [ %.062, %317 ], [ %.062, %309 ], [ %.062, %303 ], [ %.062, %302 ], [ %.062, %294 ], [ %.062, %286 ], [ %.062, %284 ], [ %.062, %270 ], [ %.062, %260 ], [ %.062, %250 ], [ %.062, %248 ], [ %.062, %237 ], [ %.062, %227 ], [ %.062, %226 ], [ %.062, %216 ], [ %.062, %206 ], [ %.062, %204 ], [ %.062, %203 ], [ %.062, %193 ], [ %.062, %183 ], [ %.neg82, %182 ], [ %.062, %177 ], [ %.062, %175 ], [ %.062, %164 ], [ %.062, %154 ], [ %.062, %153 ], [ 1, %142 ], [ %.062, %132 ], [ %.062, %129 ], [ %.062, %127 ], [ %.062, %126 ], [ %.062, %115 ], [ %.062, %105 ], [ %.062, %104 ], [ %.062, %90 ], [ %.062, %80 ], [ %.062, %77 ], [ %.062, %76 ], [ %.062, %74 ], [ %.062, %73 ], [ %.062, %71 ], [ %.062, %69 ], [ %.062, %67 ], [ %.062, %66 ], [ %.062, %55 ], [ %.062, %45 ], [ %.062, %43 ], [ %.062, %31 ], [ %.062, %29 ], [ %.062, %18 ], [ %.062, %8 ]
  %.060.be = phi i32 [ %.060, %7 ], [ %.060, %391 ], [ %.060, %390 ], [ %.060, %389 ], [ %.060, %388 ], [ %.060, %387 ], [ 1, %386 ], [ %.060, %385 ], [ %.060, %383 ], [ %.060, %381 ], [ %.060, %377 ], [ %.060, %375 ], [ %.060, %374 ], [ %.060, %372 ], [ %371, %370 ], [ %.060, %369 ], [ %.060, %368 ], [ %.060, %357 ], [ %.060, %347 ], [ %.060, %346 ], [ %.060, %345 ], [ %.060, %335 ], [ %.060, %325 ], [ %.060, %317 ], [ %.060, %309 ], [ %.060, %303 ], [ %.060, %302 ], [ %.060, %294 ], [ %.060, %286 ], [ %.060, %284 ], [ %.060, %270 ], [ %.060, %260 ], [ %.060, %250 ], [ %.060, %248 ], [ %.060, %237 ], [ %.060, %227 ], [ %.060, %226 ], [ %.060, %216 ], [ %.060, %206 ], [ %.060, %204 ], [ %.060, %203 ], [ 1, %193 ], [ %.060, %183 ], [ %.060, %182 ], [ %.060, %177 ], [ %.060, %175 ], [ %.060, %164 ], [ %.060, %154 ], [ %.060, %153 ], [ %.060, %142 ], [ %.060, %132 ], [ %.060, %129 ], [ %.060, %127 ], [ %.060, %126 ], [ %.060, %115 ], [ %.060, %105 ], [ %.060, %104 ], [ %.060, %90 ], [ %.060, %80 ], [ %.060, %77 ], [ %.060, %76 ], [ %.060, %74 ], [ %.060, %73 ], [ %.060, %71 ], [ %.060, %69 ], [ %.060, %67 ], [ %.060, %66 ], [ %.060, %55 ], [ %.060, %45 ], [ %.060, %43 ], [ %.060, %31 ], [ %.060, %29 ], [ %.060, %18 ], [ %.060, %8 ]
  %.058.be = phi i32 [ %.058, %7 ], [ %392, %391 ], [ %.058, %390 ], [ %.058, %389 ], [ %.058, %388 ], [ 1, %387 ], [ %.058, %386 ], [ %.058, %385 ], [ %.058, %383 ], [ %.058, %381 ], [ %.058, %377 ], [ %.058, %375 ], [ %.058, %374 ], [ %.058, %372 ], [ %.058, %370 ], [ %.058, %369 ], [ %.058, %368 ], [ %358, %357 ], [ %.058, %347 ], [ %.058, %346 ], [ %.058, %345 ], [ %.058, %335 ], [ %.058, %325 ], [ %.058, %317 ], [ %.058, %309 ], [ %.058, %303 ], [ %.058, %302 ], [ %.058, %294 ], [ %.058, %286 ], [ %.058, %284 ], [ %.058, %270 ], [ %.058, %260 ], [ %.058, %250 ], [ %.058, %248 ], [ %.058, %237 ], [ %.058, %227 ], [ %.058, %226 ], [ 1, %216 ], [ %.058, %206 ], [ %.058, %204 ], [ %.058, %203 ], [ %.058, %193 ], [ %.058, %183 ], [ %.058, %182 ], [ %.058, %177 ], [ %.058, %175 ], [ %.058, %164 ], [ %.058, %154 ], [ %.058, %153 ], [ %.058, %142 ], [ %.058, %132 ], [ %.058, %129 ], [ %.058, %127 ], [ %.058, %126 ], [ %.058, %115 ], [ %.058, %105 ], [ %.058, %104 ], [ %.058, %90 ], [ %.058, %80 ], [ %.058, %77 ], [ %.058, %76 ], [ %.058, %74 ], [ %.058, %73 ], [ %.058, %71 ], [ %.058, %69 ], [ %.058, %67 ], [ %.058, %66 ], [ %.058, %55 ], [ %.058, %45 ], [ %.058, %43 ], [ %.058, %31 ], [ %.058, %29 ], [ %.058, %18 ], [ %.058, %8 ]
  %.0.be = phi i32 [ %.0, %7 ], [ 1401558499, %391 ], [ 2042318563, %390 ], [ -1957242349, %389 ], [ -396193987, %388 ], [ 3292527, %387 ], [ -543757868, %386 ], [ 1834161246, %385 ], [ -866205395, %383 ], [ -927354324, %381 ], [ 1938259183, %377 ], [ 1541446114, %375 ], [ 1236571222, %374 ], [ 1639019893, %372 ], [ -611563406, %370 ], [ 1718020147, %369 ], [ 439899150, %368 ], [ %367, %357 ], [ %356, %347 ], [ 1389083027, %346 ], [ -759185860, %345 ], [ %344, %335 ], [ %334, %325 ], [ -1651920375, %317 ], [ -1651920375, %309 ], [ %308, %303 ], [ -759185860, %302 ], [ -834746312, %294 ], [ -834746312, %286 ], [ %285, %284 ], [ %283, %270 ], [ %269, %260 ], [ %259, %250 ], [ %249, %248 ], [ %247, %237 ], [ %236, %227 ], [ 439899150, %226 ], [ %225, %216 ], [ %215, %206 ], [ %205, %204 ], [ -611563406, %203 ], [ %202, %193 ], [ %192, %183 ], [ -1201902221, %182 ], [ -1523570020, %177 ], [ %176, %175 ], [ %174, %164 ], [ %163, %154 ], [ -1201902221, %153 ], [ %152, %142 ], [ %141, %132 ], [ 427963327, %129 ], [ %128, %127 ], [ 1337686593, %126 ], [ %125, %115 ], [ %114, %105 ], [ 2033867760, %104 ], [ %103, %90 ], [ %89, %80 ], [ %79, %77 ], [ 1337686593, %76 ], [ 724933554, %74 ], [ 521638863, %73 ], [ 1639019893, %71 ], [ %70, %69 ], [ %68, %67 ], [ -149484672, %66 ], [ %65, %55 ], [ %54, %45 ], [ -149484672, %43 ], [ %42, %31 ], [ %30, %29 ], [ %28, %18 ], [ %17, %8 ]
  br label %7

8:                                                ; preds = %7
  %9 = load i32, i32* @x.12, align 4
  %10 = load i32, i32* @y.13, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %15, %14
  %17 = select i1 %16, i32 1236571222, i32 923926139
  br label %.backedge

18:                                               ; preds = %7
  %19 = icmp sle i32 %.068, %6
  store i1 %19, i1* %4, align 1
  %20 = load i32, i32* @x.12, align 4
  %21 = load i32, i32* @y.13, align 4
  %22 = add i32 %20, -1
  %23 = mul i32 %22, %20
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %26, %25
  %28 = select i1 %27, i32 62187652, i32 923926139
  br label %.backedge

29:                                               ; preds = %7
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %30 = select i1 %.0..0..0., i32 -2052600363, i32 2126352397
  br label %.backedge

31:                                               ; preds = %7
  %32 = tail call i64 @_Z4readv()
  %33 = trunc i64 %32 to i32
  %34 = sext i32 %.068 to i64
  %35 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %34
  store i32 %33, i32* %35, align 4
  %36 = tail call i64 @_Z4readv()
  %37 = trunc i64 %36 to i32
  %38 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %34
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* %35, align 4
  %40 = add i32 %39, %37
  %41 = and i32 %40, 1
  %.not87 = icmp eq i32 %41, 0
  %42 = select i1 %.not87, i32 -1055871642, i32 95867841
  br label %.backedge

43:                                               ; preds = %7
  %44 = add i32 %.072, 1
  br label %.backedge

45:                                               ; preds = %7
  %46 = load i32, i32* @x.12, align 4
  %47 = load i32, i32* @y.13, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 1541446114, i32 1714975621
  br label %.backedge

55:                                               ; preds = %7
  %56 = add i32 %.070, 1
  %57 = load i32, i32* @x.12, align 4
  %58 = load i32, i32* @y.13, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 2069861456, i32 1714975621
  br label %.backedge

66:                                               ; preds = %7
  br label %.backedge

67:                                               ; preds = %7
  %.not86 = icmp eq i32 %.070, 0
  %68 = select i1 %.not86, i32 -1166890917, i32 -2137396304
  br label %.backedge

69:                                               ; preds = %7
  %.not85 = icmp eq i32 %.072, 0
  %70 = select i1 %.not85, i32 -1166890917, i32 -1648162591
  br label %.backedge

71:                                               ; preds = %7
  %72 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

73:                                               ; preds = %7
  br label %.backedge

74:                                               ; preds = %7
  %75 = add i32 %.068, 1
  br label %.backedge

76:                                               ; preds = %7
  br label %.backedge

77:                                               ; preds = %7
  %78 = icmp sgt i32 %.064, -1
  %79 = select i1 %78, i32 686423799, i32 191606975
  br label %.backedge

80:                                               ; preds = %7
  %81 = load i32, i32* @x.12, align 4
  %82 = load i32, i32* @y.13, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 1938259183, i32 -415840896
  br label %.backedge

90:                                               ; preds = %7
  %91 = shl nuw i32 1, %.064
  %92 = add i32 %.066, 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [1010 x i32], [1010 x i32]* @d, i64 0, i64 %93
  store i32 %91, i32* %94, align 4
  %95 = load i32, i32* @x.12, align 4
  %96 = load i32, i32* @y.13, align 4
  %97 = add i32 %95, -1
  %98 = mul i32 %97, %95
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %101, %100
  %103 = select i1 %102, i32 250319164, i32 -415840896
  br label %.backedge

104:                                              ; preds = %7
  br label %.backedge

105:                                              ; preds = %7
  %106 = load i32, i32* @x.12, align 4
  %107 = load i32, i32* @y.13, align 4
  %108 = add i32 %106, -1
  %109 = mul i32 %108, %106
  %110 = and i32 %109, 1
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %112, %111
  %114 = select i1 %113, i32 -927354324, i32 -1930352837
  br label %.backedge

115:                                              ; preds = %7
  %116 = add i32 %.064, -1
  %117 = load i32, i32* @x.12, align 4
  %118 = load i32, i32* @y.13, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 -1386413624, i32 -1930352837
  br label %.backedge

126:                                              ; preds = %7
  br label %.backedge

127:                                              ; preds = %7
  %.not84 = icmp eq i32 %.070, 0
  %128 = select i1 %.not84, i32 427963327, i32 -1200228236
  br label %.backedge

129:                                              ; preds = %7
  %.neg83 = add i32 %.066, 1
  %130 = sext i32 %.neg83 to i64
  %131 = getelementptr inbounds [1010 x i32], [1010 x i32]* @d, i64 0, i64 %130
  store i32 1, i32* %131, align 4
  br label %.backedge

132:                                              ; preds = %7
  %133 = load i32, i32* @x.12, align 4
  %134 = load i32, i32* @y.13, align 4
  %135 = add i32 %133, -1
  %136 = mul i32 %135, %133
  %137 = and i32 %136, 1
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %139, %138
  %141 = select i1 %140, i32 -866205395, i32 1455587938
  br label %.backedge

142:                                              ; preds = %7
  %143 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %.066)
  %144 = load i32, i32* @x.12, align 4
  %145 = load i32, i32* @y.13, align 4
  %146 = add i32 %144, -1
  %147 = mul i32 %146, %144
  %148 = and i32 %147, 1
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %150, %149
  %152 = select i1 %151, i32 1377374034, i32 1455587938
  br label %.backedge

153:                                              ; preds = %7
  br label %.backedge

154:                                              ; preds = %7
  %155 = load i32, i32* @x.12, align 4
  %156 = load i32, i32* @y.13, align 4
  %157 = add i32 %155, -1
  %158 = mul i32 %157, %155
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %161, %160
  %163 = select i1 %162, i32 1834161246, i32 -2026421004
  br label %.backedge

164:                                              ; preds = %7
  %165 = icmp sle i32 %.062, %.066
  store i1 %165, i1* %3, align 1
  %166 = load i32, i32* @x.12, align 4
  %167 = load i32, i32* @y.13, align 4
  %168 = add i32 %166, -1
  %169 = mul i32 %168, %166
  %170 = and i32 %169, 1
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %172, %171
  %174 = select i1 %173, i32 97359187, i32 -2026421004
  br label %.backedge

175:                                              ; preds = %7
  %.0..0..0.55 = load volatile i1, i1* %3, align 1
  %176 = select i1 %.0..0..0.55, i32 200431567, i32 -339685694
  br label %.backedge

177:                                              ; preds = %7
  %178 = sext i32 %.062 to i64
  %179 = getelementptr inbounds [1010 x i32], [1010 x i32]* @d, i64 0, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %180)
  br label %.backedge

182:                                              ; preds = %7
  %.neg82 = add i32 %.062, 1
  br label %.backedge

183:                                              ; preds = %7
  %184 = load i32, i32* @x.12, align 4
  %185 = load i32, i32* @y.13, align 4
  %186 = add i32 %184, -1
  %187 = mul i32 %186, %184
  %188 = and i32 %187, 1
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %190, %189
  %192 = select i1 %191, i32 -543757868, i32 875592252
  br label %.backedge

193:                                              ; preds = %7
  %putchar81 = tail call i32 @putchar(i32 10)
  %194 = load i32, i32* @x.12, align 4
  %195 = load i32, i32* @y.13, align 4
  %196 = add i32 %194, -1
  %197 = mul i32 %196, %194
  %198 = and i32 %197, 1
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %200, %199
  %202 = select i1 %201, i32 -540104024, i32 875592252
  br label %.backedge

203:                                              ; preds = %7
  br label %.backedge

204:                                              ; preds = %7
  %.not = icmp sgt i32 %.060, %6
  %205 = select i1 %.not, i32 -946372482, i32 537249155
  br label %.backedge

206:                                              ; preds = %7
  %207 = load i32, i32* @x.12, align 4
  %208 = load i32, i32* @y.13, align 4
  %209 = add i32 %207, -1
  %210 = mul i32 %209, %207
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %213, %212
  %215 = select i1 %214, i32 3292527, i32 1538909891
  br label %.backedge

216:                                              ; preds = %7
  %217 = load i32, i32* @x.12, align 4
  %218 = load i32, i32* @y.13, align 4
  %219 = add i32 %217, -1
  %220 = mul i32 %219, %217
  %221 = and i32 %220, 1
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %223, %222
  %225 = select i1 %224, i32 1128453611, i32 1538909891
  br label %.backedge

226:                                              ; preds = %7
  br label %.backedge

227:                                              ; preds = %7
  %228 = load i32, i32* @x.12, align 4
  %229 = load i32, i32* @y.13, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 -396193987, i32 60561734
  br label %.backedge

237:                                              ; preds = %7
  %238 = icmp sle i32 %.058, %.066
  store i1 %238, i1* %2, align 1
  %239 = load i32, i32* @x.12, align 4
  %240 = load i32, i32* @y.13, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 -1072736556, i32 60561734
  br label %.backedge

248:                                              ; preds = %7
  %.0..0..0.56 = load volatile i1, i1* %2, align 1
  %249 = select i1 %.0..0..0.56, i32 -1591704640, i32 408307537
  br label %.backedge

250:                                              ; preds = %7
  %251 = sext i32 %.060 to i64
  %252 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %251
  %253 = load i32, i32* %252, align 4
  %254 = tail call i32 @llvm.abs.i32(i32 %253, i1 true)
  %255 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %251
  %256 = load i32, i32* %255, align 4
  %257 = tail call i32 @llvm.abs.i32(i32 %256, i1 true)
  %258 = icmp ugt i32 %254, %257
  %259 = select i1 %258, i32 807985835, i32 -188854169
  br label %.backedge

260:                                              ; preds = %7
  %261 = load i32, i32* @x.12, align 4
  %262 = load i32, i32* @y.13, align 4
  %263 = add i32 %261, -1
  %264 = mul i32 %263, %261
  %265 = and i32 %264, 1
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %267, %266
  %269 = select i1 %268, i32 -1957242349, i32 1880041605
  br label %.backedge

270:                                              ; preds = %7
  %271 = sext i32 %.060 to i64
  %272 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = icmp sgt i32 %273, 0
  store i1 %274, i1* %1, align 1
  %275 = load i32, i32* @x.12, align 4
  %276 = load i32, i32* @y.13, align 4
  %277 = add i32 %275, -1
  %278 = mul i32 %277, %275
  %279 = and i32 %278, 1
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %281, %280
  %283 = select i1 %282, i32 -137932104, i32 1880041605
  br label %.backedge

284:                                              ; preds = %7
  %.0..0..0.57 = load volatile i1, i1* %1, align 1
  %285 = select i1 %.0..0..0.57, i32 -386023409, i32 -1067000553
  br label %.backedge

286:                                              ; preds = %7
  %287 = sext i32 %.058 to i64
  %288 = getelementptr inbounds [1010 x i32], [1010 x i32]* @d, i64 0, i64 %287
  %289 = load i32, i32* %288, align 4
  %290 = sext i32 %.060 to i64
  %291 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = sub i32 %292, %289
  store i32 %293, i32* %291, align 4
  %putchar80 = tail call i32 @putchar(i32 82)
  br label %.backedge

294:                                              ; preds = %7
  %295 = sext i32 %.058 to i64
  %296 = getelementptr inbounds [1010 x i32], [1010 x i32]* @d, i64 0, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = sext i32 %.060 to i64
  %299 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = add i32 %300, %297
  store i32 %301, i32* %299, align 4
  %putchar79 = tail call i32 @putchar(i32 76)
  br label %.backedge

302:                                              ; preds = %7
  br label %.backedge

303:                                              ; preds = %7
  %304 = sext i32 %.060 to i64
  %305 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %304
  %306 = load i32, i32* %305, align 4
  %307 = icmp sgt i32 %306, 0
  %308 = select i1 %307, i32 290737621, i32 988120500
  br label %.backedge

309:                                              ; preds = %7
  %310 = sext i32 %.058 to i64
  %311 = getelementptr inbounds [1010 x i32], [1010 x i32]* @d, i64 0, i64 %310
  %312 = load i32, i32* %311, align 4
  %313 = sext i32 %.060 to i64
  %314 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = sub i32 %315, %312
  store i32 %316, i32* %314, align 4
  %putchar78 = tail call i32 @putchar(i32 85)
  br label %.backedge

317:                                              ; preds = %7
  %318 = sext i32 %.058 to i64
  %319 = getelementptr inbounds [1010 x i32], [1010 x i32]* @d, i64 0, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = sext i32 %.060 to i64
  %322 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %321
  %323 = load i32, i32* %322, align 4
  %324 = add i32 %323, %320
  store i32 %324, i32* %322, align 4
  %putchar77 = tail call i32 @putchar(i32 68)
  br label %.backedge

325:                                              ; preds = %7
  %326 = load i32, i32* @x.12, align 4
  %327 = load i32, i32* @y.13, align 4
  %328 = add i32 %326, -1
  %329 = mul i32 %328, %326
  %330 = and i32 %329, 1
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %332, %331
  %334 = select i1 %333, i32 2042318563, i32 -669569738
  br label %.backedge

335:                                              ; preds = %7
  %336 = load i32, i32* @x.12, align 4
  %337 = load i32, i32* @y.13, align 4
  %338 = add i32 %336, -1
  %339 = mul i32 %338, %336
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %342, %341
  %344 = select i1 %343, i32 -1934317857, i32 -669569738
  br label %.backedge

345:                                              ; preds = %7
  br label %.backedge

346:                                              ; preds = %7
  br label %.backedge

347:                                              ; preds = %7
  %348 = load i32, i32* @x.12, align 4
  %349 = load i32, i32* @y.13, align 4
  %350 = add i32 %348, -1
  %351 = mul i32 %350, %348
  %352 = and i32 %351, 1
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %354, %353
  %356 = select i1 %355, i32 1401558499, i32 1111101916
  br label %.backedge

357:                                              ; preds = %7
  %358 = add i32 %.058, 1
  %359 = load i32, i32* @x.12, align 4
  %360 = load i32, i32* @y.13, align 4
  %361 = add i32 %359, -1
  %362 = mul i32 %361, %359
  %363 = and i32 %362, 1
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %365, %364
  %367 = select i1 %366, i32 816861503, i32 1111101916
  br label %.backedge

368:                                              ; preds = %7
  br label %.backedge

369:                                              ; preds = %7
  %putchar76 = tail call i32 @putchar(i32 10)
  br label %.backedge

370:                                              ; preds = %7
  %371 = add i32 %.060, 1
  br label %.backedge

372:                                              ; preds = %7
  br label %.backedge

373:                                              ; preds = %7
  ret i32 0

374:                                              ; preds = %7
  br label %.backedge

375:                                              ; preds = %7
  %376 = add i32 %.070, 1
  br label %.backedge

377:                                              ; preds = %7
  %378 = shl nuw i32 1, %.064
  %.neg = add i32 %.066, 1
  %379 = sext i32 %.neg to i64
  %380 = getelementptr inbounds [1010 x i32], [1010 x i32]* @d, i64 0, i64 %379
  store i32 %378, i32* %380, align 4
  br label %.backedge

381:                                              ; preds = %7
  %382 = add i32 %.064, -1
  br label %.backedge

383:                                              ; preds = %7
  %384 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %.066)
  br label %.backedge

385:                                              ; preds = %7
  br label %.backedge

386:                                              ; preds = %7
  %putchar = tail call i32 @putchar(i32 10)
  br label %.backedge

387:                                              ; preds = %7
  br label %.backedge

388:                                              ; preds = %7
  br label %.backedge

389:                                              ; preds = %7
  br label %.backedge

390:                                              ; preds = %7
  br label %.backedge

391:                                              ; preds = %7
  %392 = add i32 %.058, 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s275513756.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #7

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
