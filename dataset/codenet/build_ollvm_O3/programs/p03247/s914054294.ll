; ModuleID = 'build_ollvm/programs/p03247/s914054294.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s914054294.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

$_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_ = comdat any

@.str = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"%lld %lld\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%lld \00", align 1
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@str = private unnamed_addr constant [3 x i8] c"35\00", align 1
@str.1 = private unnamed_addr constant [3 x i8] c"-1\00", align 1

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i64, align 8
  %7 = alloca [1000 x i64], align 16
  %8 = alloca [1000 x i64], align 16
  %9 = alloca [35 x i64], align 16
  %10 = alloca [36 x i64], align 16
  %11 = alloca [36 x i8], align 16
  %12 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64* nonnull %6)
  %13 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 0
  %14 = getelementptr inbounds [36 x i8], [36 x i8]* %11, i64 0, i64 0
  %15 = getelementptr inbounds [36 x i8], [36 x i8]* %11, i64 0, i64 35
  %16 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 0
  %17 = getelementptr inbounds [1000 x i64], [1000 x i64]* %7, i64 0, i64 0
  %18 = getelementptr inbounds [1000 x i64], [1000 x i64]* %8, i64 0, i64 0
  %19 = bitcast [35 x i64]* %9 to <2 x i64>*
  %20 = bitcast [35 x i64]* %9 to <2 x i64>*
  br label %21

21:                                               ; preds = %.backedge, %0
  %.0100 = phi i64 [ undef, %0 ], [ %.0100.be, %.backedge ]
  %.098 = phi i64 [ undef, %0 ], [ %.098.be, %.backedge ]
  %.096 = phi i64 [ undef, %0 ], [ %.096.be, %.backedge ]
  %.094 = phi i32 [ 0, %0 ], [ %.094.be, %.backedge ]
  %.092 = phi i32 [ undef, %0 ], [ %.092.be, %.backedge ]
  %.090 = phi i32 [ undef, %0 ], [ %.090.be, %.backedge ]
  %.088 = phi i32 [ undef, %0 ], [ %.088.be, %.backedge ]
  %.086 = phi i32 [ undef, %0 ], [ %.086.be, %.backedge ]
  %.084 = phi i32 [ undef, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i32 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.0 = phi i32 [ -1121380989, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1121380989, label %22
    i32 1357311980, label %27
    i32 1755000245, label %32
    i32 -760577183, label %42
    i32 -714865569, label %53
    i32 -1996323634, label %54
    i32 -103686782, label %55
    i32 915473504, label %65
    i32 -846365989, label %78
    i32 -645997545, label %80
    i32 1377508744, label %97
    i32 -1910361005, label %98
    i32 2063135408, label %99
    i32 1289142879, label %109
    i32 -940213065, label %120
    i32 -901107143, label %121
    i32 408375742, label %127
    i32 872916952, label %128
    i32 330356933, label %138
    i32 342196154, label %149
    i32 -569532427, label %151
    i32 -765550041, label %159
    i32 -1981656937, label %160
    i32 1461422471, label %161
    i32 1549240011, label %171
    i32 1387454589, label %181
    i32 -57702730, label %182
    i32 -1518424831, label %185
    i32 -1594732930, label %193
    i32 1046795443, label %195
    i32 -1379932140, label %196
    i32 -269388547, label %197
    i32 -1369582891, label %200
    i32 -1952038146, label %210
    i32 172378880, label %228
    i32 -403358795, label %229
    i32 868842579, label %231
    i32 59073723, label %232
    i32 507531902, label %242
    i32 -1317651273, label %253
    i32 -1000602291, label %255
    i32 -2106489607, label %260
    i32 -612513979, label %262
    i32 88666445, label %263
    i32 2092681479, label %273
    i32 334509532, label %286
    i32 -1464718601, label %288
    i32 -1381639788, label %289
    i32 848738549, label %292
    i32 -1621767025, label %330
    i32 1525652848, label %339
    i32 298543209, label %349
    i32 903321092, label %363
    i32 1299849206, label %365
    i32 2133383344, label %374
    i32 -1416359736, label %379
    i32 -354668611, label %388
    i32 -865973475, label %393
    i32 -1463295432, label %402
    i32 330992011, label %403
    i32 -1327868243, label %404
    i32 101479591, label %405
    i32 799400533, label %406
    i32 -1133597879, label %407
    i32 -1535837801, label %408
    i32 1386260280, label %418
    i32 -2090420115, label %429
    i32 1308498463, label %430
    i32 223095998, label %431
    i32 1736496206, label %432
    i32 551095887, label %433
    i32 -348911573, label %435
    i32 1862559693, label %436
    i32 170866838, label %437
    i32 1875814959, label %447
    i32 527715481, label %448
    i32 984246963, label %449
    i32 -1343006069, label %450
  ]

.backedge:                                        ; preds = %21, %450, %449, %448, %447, %437, %436, %435, %433, %432, %431, %429, %418, %408, %407, %406, %405, %404, %403, %402, %393, %388, %379, %374, %365, %363, %349, %339, %330, %292, %289, %288, %286, %273, %263, %262, %260, %255, %253, %242, %232, %231, %229, %228, %210, %200, %197, %196, %195, %193, %185, %182, %181, %171, %161, %160, %159, %151, %149, %138, %128, %127, %121, %120, %109, %99, %98, %97, %80, %78, %65, %55, %54, %53, %42, %32, %27, %22
  %.0100.be = phi i64 [ %.0100, %21 ], [ %.0100, %450 ], [ %.0100, %449 ], [ %.0100, %448 ], [ %.0100, %447 ], [ %.0100, %437 ], [ %.0100, %436 ], [ %.0100, %435 ], [ %.0100, %433 ], [ %.0100, %432 ], [ %.0100, %431 ], [ %.0100, %429 ], [ %.0100, %418 ], [ %.0100, %408 ], [ %.0100, %407 ], [ %.0100, %406 ], [ %.0100, %405 ], [ %.0100, %404 ], [ %.0100, %403 ], [ %.0100, %402 ], [ %.0100, %393 ], [ %.0100, %388 ], [ %.0100, %379 ], [ %.0100, %374 ], [ %.0100, %365 ], [ %.0100, %363 ], [ %.0100, %349 ], [ %.0100, %339 ], [ %.0100, %330 ], [ %312, %292 ], [ %.0100, %289 ], [ %.0100, %288 ], [ %.0100, %286 ], [ %.0100, %273 ], [ %.0100, %263 ], [ %.0100, %262 ], [ %.0100, %260 ], [ %.0100, %255 ], [ %.0100, %253 ], [ %.0100, %242 ], [ %.0100, %232 ], [ %.0100, %231 ], [ %.0100, %229 ], [ %.0100, %228 ], [ %.0100, %210 ], [ %.0100, %200 ], [ %.0100, %197 ], [ %.0100, %196 ], [ %.0100, %195 ], [ %.0100, %193 ], [ %.0100, %185 ], [ %.0100, %182 ], [ %.0100, %181 ], [ %.0100, %171 ], [ %.0100, %161 ], [ %.0100, %160 ], [ %.0100, %159 ], [ %.0100, %151 ], [ %.0100, %149 ], [ %.0100, %138 ], [ %.0100, %128 ], [ %.0100, %127 ], [ %.0100, %121 ], [ %.0100, %120 ], [ %.0100, %109 ], [ %.0100, %99 ], [ %.0100, %98 ], [ %.0100, %97 ], [ %93, %80 ], [ %.0100, %78 ], [ %.0100, %65 ], [ %.0100, %55 ], [ %.0100, %54 ], [ %.0100, %53 ], [ %.0100, %42 ], [ %.0100, %32 ], [ %.0100, %27 ], [ %.0100, %22 ]
  %.098.be = phi i64 [ %.098, %21 ], [ %.098, %450 ], [ %.098, %449 ], [ %.098, %448 ], [ %.098, %447 ], [ %.098, %437 ], [ %.098, %436 ], [ %.098, %435 ], [ %.098, %433 ], [ %.098, %432 ], [ %.098, %431 ], [ %.098, %429 ], [ %.098, %418 ], [ %.098, %408 ], [ %.098, %407 ], [ %.098, %406 ], [ %.098, %405 ], [ %.098, %404 ], [ %.098, %403 ], [ %.098, %402 ], [ %.098, %393 ], [ %.098, %388 ], [ %.098, %379 ], [ %.098, %374 ], [ %.098, %365 ], [ %.098, %363 ], [ %.098, %349 ], [ %.098, %339 ], [ %.098, %330 ], [ %319, %292 ], [ %.098, %289 ], [ %.098, %288 ], [ %.098, %286 ], [ %.098, %273 ], [ %.098, %263 ], [ %.098, %262 ], [ %.098, %260 ], [ %.098, %255 ], [ %.098, %253 ], [ %.098, %242 ], [ %.098, %232 ], [ %.098, %231 ], [ %.098, %229 ], [ %.098, %228 ], [ %.098, %210 ], [ %.098, %200 ], [ %.098, %197 ], [ %.098, %196 ], [ %.098, %195 ], [ %.098, %193 ], [ %.098, %185 ], [ %.098, %182 ], [ %.098, %181 ], [ %.098, %171 ], [ %.098, %161 ], [ %.098, %160 ], [ %.098, %159 ], [ %.098, %151 ], [ %.098, %149 ], [ %.098, %138 ], [ %.098, %128 ], [ %.098, %127 ], [ %.098, %121 ], [ %.098, %120 ], [ %.098, %109 ], [ %.098, %99 ], [ %.098, %98 ], [ %.098, %97 ], [ %.098, %80 ], [ %.098, %78 ], [ %.098, %65 ], [ %.098, %55 ], [ %.098, %54 ], [ %.098, %53 ], [ %.098, %42 ], [ %.098, %32 ], [ %.098, %27 ], [ %.098, %22 ]
  %.096.be = phi i64 [ %.096, %21 ], [ %.096, %450 ], [ %.096, %449 ], [ %.096, %448 ], [ %.096, %447 ], [ %.096, %437 ], [ %.096, %436 ], [ %.096, %435 ], [ %.096, %433 ], [ %.096, %432 ], [ %.096, %431 ], [ %.096, %429 ], [ %.096, %418 ], [ %.096, %408 ], [ %.096, %407 ], [ %.096, %406 ], [ %.096, %405 ], [ %.096, %404 ], [ %.096, %403 ], [ %.096, %402 ], [ %.096, %393 ], [ %.096, %388 ], [ %.096, %379 ], [ %.096, %374 ], [ %.096, %365 ], [ %.096, %363 ], [ %.096, %349 ], [ %.096, %339 ], [ %.096, %330 ], [ %326, %292 ], [ %.096, %289 ], [ %.096, %288 ], [ %.096, %286 ], [ %.096, %273 ], [ %.096, %263 ], [ %.096, %262 ], [ %.096, %260 ], [ %.096, %255 ], [ %.096, %253 ], [ %.096, %242 ], [ %.096, %232 ], [ %.096, %231 ], [ %.096, %229 ], [ %.096, %228 ], [ %.096, %210 ], [ %.096, %200 ], [ %.096, %197 ], [ %.096, %196 ], [ %.096, %195 ], [ %.096, %193 ], [ %.096, %185 ], [ %.096, %182 ], [ %.096, %181 ], [ %.096, %171 ], [ %.096, %161 ], [ %.096, %160 ], [ %.096, %159 ], [ %.096, %151 ], [ %.096, %149 ], [ %.096, %138 ], [ %.096, %128 ], [ %.096, %127 ], [ %.096, %121 ], [ %.096, %120 ], [ %.096, %109 ], [ %.096, %99 ], [ %.096, %98 ], [ %.096, %97 ], [ %.096, %80 ], [ %.096, %78 ], [ %.096, %65 ], [ %.096, %55 ], [ %.096, %54 ], [ %.096, %53 ], [ %.096, %42 ], [ %.096, %32 ], [ %.096, %27 ], [ %.096, %22 ]
  %.094.be = phi i32 [ %.094, %21 ], [ %.094, %450 ], [ %.094, %449 ], [ %.094, %448 ], [ %.094, %447 ], [ %.094, %437 ], [ %.094, %436 ], [ %.094, %435 ], [ %.094, %433 ], [ %.094, %432 ], [ %.neg, %431 ], [ %.094, %429 ], [ %.094, %418 ], [ %.094, %408 ], [ %.094, %407 ], [ %.094, %406 ], [ %.094, %405 ], [ %.094, %404 ], [ %.094, %403 ], [ %.094, %402 ], [ %.094, %393 ], [ %.094, %388 ], [ %.094, %379 ], [ %.094, %374 ], [ %.094, %365 ], [ %.094, %363 ], [ %.094, %349 ], [ %.094, %339 ], [ %.094, %330 ], [ %.094, %292 ], [ %.094, %289 ], [ %.094, %288 ], [ %.094, %286 ], [ %.094, %273 ], [ %.094, %263 ], [ %.094, %262 ], [ %.094, %260 ], [ %.094, %255 ], [ %.094, %253 ], [ %.094, %242 ], [ %.094, %232 ], [ %.094, %231 ], [ %.094, %229 ], [ %.094, %228 ], [ %.094, %210 ], [ %.094, %200 ], [ %.094, %197 ], [ %.094, %196 ], [ %.094, %195 ], [ %.094, %193 ], [ %.094, %185 ], [ %.094, %182 ], [ %.094, %181 ], [ %.094, %171 ], [ %.094, %161 ], [ %.094, %160 ], [ %.094, %159 ], [ %.094, %151 ], [ %.094, %149 ], [ %.094, %138 ], [ %.094, %128 ], [ %.094, %127 ], [ %.094, %121 ], [ %.094, %120 ], [ %.094, %109 ], [ %.094, %99 ], [ %.094, %98 ], [ %.094, %97 ], [ %.094, %80 ], [ %.094, %78 ], [ %.094, %65 ], [ %.094, %55 ], [ %.094, %54 ], [ %.094, %53 ], [ %43, %42 ], [ %.094, %32 ], [ %.094, %27 ], [ %.094, %22 ]
  %.092.be = phi i32 [ %.092, %21 ], [ %.092, %450 ], [ %.092, %449 ], [ %.092, %448 ], [ %.092, %447 ], [ %.092, %437 ], [ %.092, %436 ], [ %.092, %435 ], [ %434, %433 ], [ %.092, %432 ], [ %.092, %431 ], [ %.092, %429 ], [ %.092, %418 ], [ %.092, %408 ], [ %.092, %407 ], [ %.092, %406 ], [ %.092, %405 ], [ %.092, %404 ], [ %.092, %403 ], [ %.092, %402 ], [ %.092, %393 ], [ %.092, %388 ], [ %.092, %379 ], [ %.092, %374 ], [ %.092, %365 ], [ %.092, %363 ], [ %.092, %349 ], [ %.092, %339 ], [ %.092, %330 ], [ %.092, %292 ], [ %.092, %289 ], [ %.092, %288 ], [ %.092, %286 ], [ %.092, %273 ], [ %.092, %263 ], [ %.092, %262 ], [ %.092, %260 ], [ %.092, %255 ], [ %.092, %253 ], [ %.092, %242 ], [ %.092, %232 ], [ %.092, %231 ], [ %.092, %229 ], [ %.092, %228 ], [ %.092, %210 ], [ %.092, %200 ], [ %.092, %197 ], [ %.092, %196 ], [ %.092, %195 ], [ %.092, %193 ], [ %.092, %185 ], [ %.092, %182 ], [ %.092, %181 ], [ %.092, %171 ], [ %.092, %161 ], [ %.092, %160 ], [ %.092, %159 ], [ %.092, %151 ], [ %.092, %149 ], [ %.092, %138 ], [ %.092, %128 ], [ %.092, %127 ], [ %.092, %121 ], [ %.092, %120 ], [ %110, %109 ], [ %.092, %99 ], [ %.092, %98 ], [ %.092, %97 ], [ %.092, %80 ], [ %.092, %78 ], [ %.092, %65 ], [ %.092, %55 ], [ 1, %54 ], [ %.092, %53 ], [ %.092, %42 ], [ %.092, %32 ], [ %.092, %27 ], [ %.092, %22 ]
  %.090.be = phi i32 [ %.090, %21 ], [ %.090, %450 ], [ %.090, %449 ], [ %.090, %448 ], [ %.090, %447 ], [ %.090, %437 ], [ %.090, %436 ], [ %.090, %435 ], [ %.090, %433 ], [ %.090, %432 ], [ %.090, %431 ], [ %.090, %429 ], [ %.090, %418 ], [ %.090, %408 ], [ %.090, %407 ], [ %.090, %406 ], [ %.090, %405 ], [ %.090, %404 ], [ %.090, %403 ], [ %.090, %402 ], [ %.090, %393 ], [ %.090, %388 ], [ %.090, %379 ], [ %.090, %374 ], [ %.090, %365 ], [ %.090, %363 ], [ %.090, %349 ], [ %.090, %339 ], [ %.090, %330 ], [ %.090, %292 ], [ %.090, %289 ], [ %.090, %288 ], [ %.090, %286 ], [ %.090, %273 ], [ %.090, %263 ], [ %.090, %262 ], [ %.090, %260 ], [ %.090, %255 ], [ %.090, %253 ], [ %.090, %242 ], [ %.090, %232 ], [ %.090, %231 ], [ %.090, %229 ], [ %.090, %228 ], [ %.090, %210 ], [ %.090, %200 ], [ %.090, %197 ], [ %.090, %196 ], [ %.090, %195 ], [ %.090, %193 ], [ %.090, %185 ], [ %.090, %182 ], [ %.090, %181 ], [ %.090, %171 ], [ %.090, %161 ], [ %.090, %160 ], [ %.neg109, %159 ], [ %.090, %151 ], [ %.090, %149 ], [ %.090, %138 ], [ %.090, %128 ], [ 1, %127 ], [ %.090, %121 ], [ %.090, %120 ], [ %.090, %109 ], [ %.090, %99 ], [ %.090, %98 ], [ %.090, %97 ], [ %.090, %80 ], [ %.090, %78 ], [ %.090, %65 ], [ %.090, %55 ], [ %.090, %54 ], [ %.090, %53 ], [ %.090, %42 ], [ %.090, %32 ], [ %.090, %27 ], [ %.090, %22 ]
  %.088.be = phi i32 [ %.088, %21 ], [ %.088, %450 ], [ %.088, %449 ], [ %.088, %448 ], [ %.088, %447 ], [ %.088, %437 ], [ 2, %436 ], [ %.088, %435 ], [ %.088, %433 ], [ %.088, %432 ], [ %.088, %431 ], [ %.088, %429 ], [ %.088, %418 ], [ %.088, %408 ], [ %.088, %407 ], [ %.088, %406 ], [ %.088, %405 ], [ %.088, %404 ], [ %.088, %403 ], [ %.088, %402 ], [ %.088, %393 ], [ %.088, %388 ], [ %.088, %379 ], [ %.088, %374 ], [ %.088, %365 ], [ %.088, %363 ], [ %.088, %349 ], [ %.088, %339 ], [ %.088, %330 ], [ %.088, %292 ], [ %.088, %289 ], [ %.088, %288 ], [ %.088, %286 ], [ %.088, %273 ], [ %.088, %263 ], [ %.088, %262 ], [ %.088, %260 ], [ %.088, %255 ], [ %.088, %253 ], [ %.088, %242 ], [ %.088, %232 ], [ %.088, %231 ], [ %.088, %229 ], [ %.088, %228 ], [ %.088, %210 ], [ %.088, %200 ], [ %.088, %197 ], [ %.088, %196 ], [ %.088, %195 ], [ %194, %193 ], [ %.088, %185 ], [ %.088, %182 ], [ %.088, %181 ], [ 2, %171 ], [ %.088, %161 ], [ %.088, %160 ], [ %.088, %159 ], [ %.088, %151 ], [ %.088, %149 ], [ %.088, %138 ], [ %.088, %128 ], [ %.088, %127 ], [ %.088, %121 ], [ %.088, %120 ], [ %.088, %109 ], [ %.088, %99 ], [ %.088, %98 ], [ %.088, %97 ], [ %.088, %80 ], [ %.088, %78 ], [ %.088, %65 ], [ %.088, %55 ], [ %.088, %54 ], [ %.088, %53 ], [ %.088, %42 ], [ %.088, %32 ], [ %.088, %27 ], [ %.088, %22 ]
  %.086.be = phi i32 [ %.086, %21 ], [ %.086, %450 ], [ %.086, %449 ], [ %.086, %448 ], [ %.086, %447 ], [ %.086, %437 ], [ %.086, %436 ], [ %.086, %435 ], [ %.086, %433 ], [ %.086, %432 ], [ %.086, %431 ], [ %.086, %429 ], [ %.086, %418 ], [ %.086, %408 ], [ %.086, %407 ], [ %.086, %406 ], [ %.086, %405 ], [ %.086, %404 ], [ %.086, %403 ], [ %.086, %402 ], [ %.086, %393 ], [ %.086, %388 ], [ %.086, %379 ], [ %.086, %374 ], [ %.086, %365 ], [ %.086, %363 ], [ %.086, %349 ], [ %.086, %339 ], [ %.086, %330 ], [ %.086, %292 ], [ %.086, %289 ], [ %.086, %288 ], [ %.086, %286 ], [ %.086, %273 ], [ %.086, %263 ], [ %.086, %262 ], [ %.086, %260 ], [ %.086, %255 ], [ %.086, %253 ], [ %.086, %242 ], [ %.086, %232 ], [ %.086, %231 ], [ %230, %229 ], [ %.086, %228 ], [ %.086, %210 ], [ %.086, %200 ], [ %.086, %197 ], [ 0, %196 ], [ %.086, %195 ], [ %.086, %193 ], [ %.086, %185 ], [ %.086, %182 ], [ %.086, %181 ], [ %.086, %171 ], [ %.086, %161 ], [ %.086, %160 ], [ %.086, %159 ], [ %.086, %151 ], [ %.086, %149 ], [ %.086, %138 ], [ %.086, %128 ], [ %.086, %127 ], [ %.086, %121 ], [ %.086, %120 ], [ %.086, %109 ], [ %.086, %99 ], [ %.086, %98 ], [ %.086, %97 ], [ %.086, %80 ], [ %.086, %78 ], [ %.086, %65 ], [ %.086, %55 ], [ %.086, %54 ], [ %.086, %53 ], [ %.086, %42 ], [ %.086, %32 ], [ %.086, %27 ], [ %.086, %22 ]
  %.084.be = phi i32 [ %.084, %21 ], [ %.084, %450 ], [ %.084, %449 ], [ %.084, %448 ], [ %.084, %447 ], [ %.084, %437 ], [ %.084, %436 ], [ %.084, %435 ], [ %.084, %433 ], [ %.084, %432 ], [ %.084, %431 ], [ %.084, %429 ], [ %.084, %418 ], [ %.084, %408 ], [ %.084, %407 ], [ %.084, %406 ], [ %.084, %405 ], [ %.084, %404 ], [ %.084, %403 ], [ %.084, %402 ], [ %.084, %393 ], [ %.084, %388 ], [ %.084, %379 ], [ %.084, %374 ], [ %.084, %365 ], [ %.084, %363 ], [ %.084, %349 ], [ %.084, %339 ], [ %.084, %330 ], [ %.084, %292 ], [ %.084, %289 ], [ %.084, %288 ], [ %.084, %286 ], [ %.084, %273 ], [ %.084, %263 ], [ %.084, %262 ], [ %261, %260 ], [ %.084, %255 ], [ %.084, %253 ], [ %.084, %242 ], [ %.084, %232 ], [ 0, %231 ], [ %.084, %229 ], [ %.084, %228 ], [ %.084, %210 ], [ %.084, %200 ], [ %.084, %197 ], [ %.084, %196 ], [ %.084, %195 ], [ %.084, %193 ], [ %.084, %185 ], [ %.084, %182 ], [ %.084, %181 ], [ %.084, %171 ], [ %.084, %161 ], [ %.084, %160 ], [ %.084, %159 ], [ %.084, %151 ], [ %.084, %149 ], [ %.084, %138 ], [ %.084, %128 ], [ %.084, %127 ], [ %.084, %121 ], [ %.084, %120 ], [ %.084, %109 ], [ %.084, %99 ], [ %.084, %98 ], [ %.084, %97 ], [ %.084, %80 ], [ %.084, %78 ], [ %.084, %65 ], [ %.084, %55 ], [ %.084, %54 ], [ %.084, %53 ], [ %.084, %42 ], [ %.084, %32 ], [ %.084, %27 ], [ %.084, %22 ]
  %.082.be = phi i32 [ %.082, %21 ], [ %451, %450 ], [ %.082, %449 ], [ %.082, %448 ], [ %.082, %447 ], [ %.082, %437 ], [ %.082, %436 ], [ %.082, %435 ], [ %.082, %433 ], [ %.082, %432 ], [ %.082, %431 ], [ %.082, %429 ], [ %419, %418 ], [ %.082, %408 ], [ %.082, %407 ], [ %.082, %406 ], [ %.082, %405 ], [ %.082, %404 ], [ %.082, %403 ], [ %.082, %402 ], [ %.082, %393 ], [ %.082, %388 ], [ %.082, %379 ], [ %.082, %374 ], [ %.082, %365 ], [ %.082, %363 ], [ %.082, %349 ], [ %.082, %339 ], [ %.082, %330 ], [ %.082, %292 ], [ %.082, %289 ], [ %.082, %288 ], [ %.082, %286 ], [ %.082, %273 ], [ %.082, %263 ], [ 0, %262 ], [ %.082, %260 ], [ %.082, %255 ], [ %.082, %253 ], [ %.082, %242 ], [ %.082, %232 ], [ %.082, %231 ], [ %.082, %229 ], [ %.082, %228 ], [ %.082, %210 ], [ %.082, %200 ], [ %.082, %197 ], [ %.082, %196 ], [ %.082, %195 ], [ %.082, %193 ], [ %.082, %185 ], [ %.082, %182 ], [ %.082, %181 ], [ %.082, %171 ], [ %.082, %161 ], [ %.082, %160 ], [ %.082, %159 ], [ %.082, %151 ], [ %.082, %149 ], [ %.082, %138 ], [ %.082, %128 ], [ %.082, %127 ], [ %.082, %121 ], [ %.082, %120 ], [ %.082, %109 ], [ %.082, %99 ], [ %.082, %98 ], [ %.082, %97 ], [ %.082, %80 ], [ %.082, %78 ], [ %.082, %65 ], [ %.082, %55 ], [ %.082, %54 ], [ %.082, %53 ], [ %.082, %42 ], [ %.082, %32 ], [ %.082, %27 ], [ %.082, %22 ]
  %.080.be = phi i32 [ %.080, %21 ], [ %.080, %450 ], [ %.080, %449 ], [ %.080, %448 ], [ %.080, %447 ], [ %.080, %437 ], [ %.080, %436 ], [ %.080, %435 ], [ %.080, %433 ], [ %.080, %432 ], [ %.080, %431 ], [ %.080, %429 ], [ %.080, %418 ], [ %.080, %408 ], [ %.080, %407 ], [ %.neg104, %406 ], [ %.080, %405 ], [ %.080, %404 ], [ %.080, %403 ], [ %.080, %402 ], [ %.080, %393 ], [ %.080, %388 ], [ %.080, %379 ], [ %.080, %374 ], [ %.080, %365 ], [ %.080, %363 ], [ %.080, %349 ], [ %.080, %339 ], [ %.080, %330 ], [ %.080, %292 ], [ %.080, %289 ], [ 34, %288 ], [ %.080, %286 ], [ %.080, %273 ], [ %.080, %263 ], [ %.080, %262 ], [ %.080, %260 ], [ %.080, %255 ], [ %.080, %253 ], [ %.080, %242 ], [ %.080, %232 ], [ %.080, %231 ], [ %.080, %229 ], [ %.080, %228 ], [ %.080, %210 ], [ %.080, %200 ], [ %.080, %197 ], [ %.080, %196 ], [ %.080, %195 ], [ %.080, %193 ], [ %.080, %185 ], [ %.080, %182 ], [ %.080, %181 ], [ %.080, %171 ], [ %.080, %161 ], [ %.080, %160 ], [ %.080, %159 ], [ %.080, %151 ], [ %.080, %149 ], [ %.080, %138 ], [ %.080, %128 ], [ %.080, %127 ], [ %.080, %121 ], [ %.080, %120 ], [ %.080, %109 ], [ %.080, %99 ], [ %.080, %98 ], [ %.080, %97 ], [ %.080, %80 ], [ %.080, %78 ], [ %.080, %65 ], [ %.080, %55 ], [ %.080, %54 ], [ %.080, %53 ], [ %.080, %42 ], [ %.080, %32 ], [ %.080, %27 ], [ %.080, %22 ]
  %.0.be = phi i32 [ %.0, %21 ], [ 1386260280, %450 ], [ 298543209, %449 ], [ 2092681479, %448 ], [ 507531902, %447 ], [ -1952038146, %437 ], [ 1549240011, %436 ], [ 330356933, %435 ], [ 1289142879, %433 ], [ 915473504, %432 ], [ -760577183, %431 ], [ 88666445, %429 ], [ %428, %418 ], [ %417, %408 ], [ -1535837801, %407 ], [ -1381639788, %406 ], [ 799400533, %405 ], [ 101479591, %404 ], [ -1327868243, %403 ], [ 330992011, %402 ], [ -1463295432, %393 ], [ %392, %388 ], [ 330992011, %379 ], [ %378, %374 ], [ -1327868243, %365 ], [ %364, %363 ], [ %362, %349 ], [ %348, %339 ], [ 101479591, %330 ], [ %329, %292 ], [ %291, %289 ], [ -1381639788, %288 ], [ %287, %286 ], [ %285, %273 ], [ %272, %263 ], [ 88666445, %262 ], [ 59073723, %260 ], [ -2106489607, %255 ], [ %254, %253 ], [ %252, %242 ], [ %241, %232 ], [ 59073723, %231 ], [ -269388547, %229 ], [ -403358795, %228 ], [ %227, %210 ], [ %209, %200 ], [ %199, %197 ], [ -269388547, %196 ], [ -1379932140, %195 ], [ -57702730, %193 ], [ -1594732930, %185 ], [ %184, %182 ], [ -57702730, %181 ], [ %180, %171 ], [ %170, %161 ], [ -1379932140, %160 ], [ 872916952, %159 ], [ -765550041, %151 ], [ %150, %149 ], [ %148, %138 ], [ %137, %128 ], [ 872916952, %127 ], [ %126, %121 ], [ -103686782, %120 ], [ %119, %109 ], [ %108, %99 ], [ 2063135408, %98 ], [ 1308498463, %97 ], [ %96, %80 ], [ %79, %78 ], [ %77, %65 ], [ %64, %55 ], [ -103686782, %54 ], [ -1121380989, %53 ], [ %52, %42 ], [ %41, %32 ], [ 1755000245, %27 ], [ %26, %22 ]
  br label %21

22:                                               ; preds = %21
  %23 = sext i32 %.094 to i64
  %24 = load i64, i64* %6, align 8
  %25 = icmp sgt i64 %24, %23
  %26 = select i1 %25, i32 1357311980, i32 -1996323634
  br label %.backedge

27:                                               ; preds = %21
  %28 = sext i32 %.094 to i64
  %29 = getelementptr inbounds [1000 x i64], [1000 x i64]* %7, i64 0, i64 %28
  %30 = getelementptr inbounds [1000 x i64], [1000 x i64]* %8, i64 0, i64 %28
  %31 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i64* nonnull %29, i64* nonnull %30)
  br label %.backedge

32:                                               ; preds = %21
  %33 = load i32, i32* @x, align 4
  %34 = load i32, i32* @y, align 4
  %35 = add i32 %33, -1
  %36 = mul i32 %35, %33
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %39, %38
  %41 = select i1 %40, i32 -760577183, i32 223095998
  br label %.backedge

42:                                               ; preds = %21
  %43 = add i32 %.094, 1
  %44 = load i32, i32* @x, align 4
  %45 = load i32, i32* @y, align 4
  %46 = add i32 %44, -1
  %47 = mul i32 %46, %44
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %50, %49
  %52 = select i1 %51, i32 -714865569, i32 223095998
  br label %.backedge

53:                                               ; preds = %21
  br label %.backedge

54:                                               ; preds = %21
  br label %.backedge

55:                                               ; preds = %21
  %56 = load i32, i32* @x, align 4
  %57 = load i32, i32* @y, align 4
  %58 = add i32 %56, -1
  %59 = mul i32 %58, %56
  %60 = and i32 %59, 1
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %62, %61
  %64 = select i1 %63, i32 915473504, i32 1736496206
  br label %.backedge

65:                                               ; preds = %21
  %66 = sext i32 %.092 to i64
  %67 = load i64, i64* %6, align 8
  %68 = icmp sgt i64 %67, %66
  store i1 %68, i1* %5, align 1
  %69 = load i32, i32* @x, align 4
  %70 = load i32, i32* @y, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 -846365989, i32 1736496206
  br label %.backedge

78:                                               ; preds = %21
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %79 = select i1 %.0..0..0., i32 -645997545, i32 -901107143
  br label %.backedge

80:                                               ; preds = %21
  %81 = sext i32 %.092 to i64
  %82 = getelementptr inbounds [1000 x i64], [1000 x i64]* %7, i64 0, i64 %81
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds [1000 x i64], [1000 x i64]* %8, i64 0, i64 %81
  %85 = load i64, i64* %84, align 8
  %86 = add i64 %85, %83
  %87 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %86)
  %88 = fptosi double %87 to i64
  %89 = load i64, i64* %17, align 16
  %90 = load i64, i64* %18, align 16
  %91 = add i64 %90, %89
  %92 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %91)
  %93 = fptosi double %92 to i64
  %94 = srem i64 %88, 2
  %95 = srem i64 %93, 2
  %.not112 = icmp eq i64 %94, %95
  %96 = select i1 %.not112, i32 -1910361005, i32 1377508744
  br label %.backedge

97:                                               ; preds = %21
  %puts111 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @str.1, i64 0, i64 0))
  br label %.backedge

98:                                               ; preds = %21
  br label %.backedge

99:                                               ; preds = %21
  %100 = load i32, i32* @x, align 4
  %101 = load i32, i32* @y, align 4
  %102 = add i32 %100, -1
  %103 = mul i32 %102, %100
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %106, %105
  %108 = select i1 %107, i32 1289142879, i32 551095887
  br label %.backedge

109:                                              ; preds = %21
  %110 = add i32 %.092, 1
  %111 = load i32, i32* @x, align 4
  %112 = load i32, i32* @y, align 4
  %113 = add i32 %111, -1
  %114 = mul i32 %113, %111
  %115 = and i32 %114, 1
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %117, %116
  %119 = select i1 %118, i32 -940213065, i32 551095887
  br label %.backedge

120:                                              ; preds = %21
  br label %.backedge

121:                                              ; preds = %21
  %122 = load i64, i64* %17, align 16
  %123 = load i64, i64* %18, align 16
  %124 = add i64 %123, %122
  %125 = and i64 %124, 1
  %.not110 = icmp eq i64 %125, 0
  %126 = select i1 %.not110, i32 1461422471, i32 408375742
  br label %.backedge

127:                                              ; preds = %21
  store i64 1, i64* %13, align 16
  br label %.backedge

128:                                              ; preds = %21
  %129 = load i32, i32* @x, align 4
  %130 = load i32, i32* @y, align 4
  %131 = add i32 %129, -1
  %132 = mul i32 %131, %129
  %133 = and i32 %132, 1
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %135, %134
  %137 = select i1 %136, i32 330356933, i32 -348911573
  br label %.backedge

138:                                              ; preds = %21
  %139 = icmp slt i32 %.090, 35
  store i1 %139, i1* %4, align 1
  %140 = load i32, i32* @x, align 4
  %141 = load i32, i32* @y, align 4
  %142 = add i32 %140, -1
  %143 = mul i32 %142, %140
  %144 = and i32 %143, 1
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %146, %145
  %148 = select i1 %147, i32 342196154, i32 -348911573
  br label %.backedge

149:                                              ; preds = %21
  %.0..0..0.76 = load volatile i1, i1* %4, align 1
  %150 = select i1 %.0..0..0.76, i32 -569532427, i32 -1981656937
  br label %.backedge

151:                                              ; preds = %21
  %152 = add i32 %.090, -1
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %153
  %155 = load i64, i64* %154, align 8
  %156 = shl nsw i64 %155, 1
  %157 = sext i32 %.090 to i64
  %158 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %157
  store i64 %156, i64* %158, align 8
  br label %.backedge

159:                                              ; preds = %21
  %.neg109 = add i32 %.090, 1
  br label %.backedge

160:                                              ; preds = %21
  br label %.backedge

161:                                              ; preds = %21
  %162 = load i32, i32* @x, align 4
  %163 = load i32, i32* @y, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 1549240011, i32 1862559693
  br label %.backedge

171:                                              ; preds = %21
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %20, align 16
  %172 = load i32, i32* @x, align 4
  %173 = load i32, i32* @y, align 4
  %174 = add i32 %172, -1
  %175 = mul i32 %174, %172
  %176 = and i32 %175, 1
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %178, %177
  %180 = select i1 %179, i32 1387454589, i32 1862559693
  br label %.backedge

181:                                              ; preds = %21
  br label %.backedge

182:                                              ; preds = %21
  %183 = icmp slt i32 %.088, 35
  %184 = select i1 %183, i32 -1518424831, i32 1046795443
  br label %.backedge

185:                                              ; preds = %21
  %186 = add i32 %.088, -1
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %187
  %189 = load i64, i64* %188, align 8
  %190 = shl nsw i64 %189, 1
  %191 = sext i32 %.088 to i64
  %192 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %191
  store i64 %190, i64* %192, align 8
  br label %.backedge

193:                                              ; preds = %21
  %194 = add i32 %.088, 1
  br label %.backedge

195:                                              ; preds = %21
  br label %.backedge

196:                                              ; preds = %21
  store i64 0, i64* %16, align 16
  br label %.backedge

197:                                              ; preds = %21
  %198 = icmp slt i32 %.086, 35
  %199 = select i1 %198, i32 -1369582891, i32 868842579
  br label %.backedge

200:                                              ; preds = %21
  %201 = load i32, i32* @x, align 4
  %202 = load i32, i32* @y, align 4
  %203 = add i32 %201, -1
  %204 = mul i32 %203, %201
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %207, %206
  %209 = select i1 %208, i32 -1952038146, i32 170866838
  br label %.backedge

210:                                              ; preds = %21
  %211 = sext i32 %.086 to i64
  %212 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 %211
  %213 = load i64, i64* %212, align 8
  %214 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %211
  %215 = load i64, i64* %214, align 8
  %216 = add i64 %215, %213
  %.neg108 = add i32 %.086, 1
  %217 = sext i32 %.neg108 to i64
  %218 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 %217
  store i64 %216, i64* %218, align 8
  %219 = load i32, i32* @x, align 4
  %220 = load i32, i32* @y, align 4
  %221 = add i32 %219, -1
  %222 = mul i32 %221, %219
  %223 = and i32 %222, 1
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %225, %224
  %227 = select i1 %226, i32 172378880, i32 170866838
  br label %.backedge

228:                                              ; preds = %21
  br label %.backedge

229:                                              ; preds = %21
  %230 = add i32 %.086, 1
  br label %.backedge

231:                                              ; preds = %21
  store i8 0, i8* %15, align 1
  %puts107 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @str, i64 0, i64 0))
  br label %.backedge

232:                                              ; preds = %21
  %233 = load i32, i32* @x, align 4
  %234 = load i32, i32* @y, align 4
  %235 = add i32 %233, -1
  %236 = mul i32 %235, %233
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %239, %238
  %241 = select i1 %240, i32 507531902, i32 1875814959
  br label %.backedge

242:                                              ; preds = %21
  %243 = icmp slt i32 %.084, 35
  store i1 %243, i1* %3, align 1
  %244 = load i32, i32* @x, align 4
  %245 = load i32, i32* @y, align 4
  %246 = add i32 %244, -1
  %247 = mul i32 %246, %244
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %250, %249
  %252 = select i1 %251, i32 -1317651273, i32 1875814959
  br label %.backedge

253:                                              ; preds = %21
  %.0..0..0.77 = load volatile i1, i1* %3, align 1
  %254 = select i1 %.0..0..0.77, i32 -1000602291, i32 -612513979
  br label %.backedge

255:                                              ; preds = %21
  %256 = sext i32 %.084 to i64
  %257 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %256
  %258 = load i64, i64* %257, align 8
  %259 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 %258)
  br label %.backedge

260:                                              ; preds = %21
  %261 = add i32 %.084, 1
  br label %.backedge

262:                                              ; preds = %21
  %putchar = call i32 @putchar(i32 10)
  br label %.backedge

263:                                              ; preds = %21
  %264 = load i32, i32* @x, align 4
  %265 = load i32, i32* @y, align 4
  %266 = add i32 %264, -1
  %267 = mul i32 %266, %264
  %268 = and i32 %267, 1
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %270, %269
  %272 = select i1 %271, i32 2092681479, i32 527715481
  br label %.backedge

273:                                              ; preds = %21
  %274 = sext i32 %.082 to i64
  %275 = load i64, i64* %6, align 8
  %276 = icmp sgt i64 %275, %274
  store i1 %276, i1* %2, align 1
  %277 = load i32, i32* @x, align 4
  %278 = load i32, i32* @y, align 4
  %279 = add i32 %277, -1
  %280 = mul i32 %279, %277
  %281 = and i32 %280, 1
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %283, %282
  %285 = select i1 %284, i32 334509532, i32 527715481
  br label %.backedge

286:                                              ; preds = %21
  %.0..0..0.78 = load volatile i1, i1* %2, align 1
  %287 = select i1 %.0..0..0.78, i32 -1464718601, i32 1308498463
  br label %.backedge

288:                                              ; preds = %21
  br label %.backedge

289:                                              ; preds = %21
  %290 = icmp sgt i32 %.080, -1
  %291 = select i1 %290, i32 848738549, i32 -1133597879
  br label %.backedge

292:                                              ; preds = %21
  %293 = sext i32 %.082 to i64
  %294 = getelementptr inbounds [1000 x i64], [1000 x i64]* %7, i64 0, i64 %293
  %295 = load i64, i64* %294, align 8
  %296 = sext i32 %.080 to i64
  %297 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %296
  %298 = load i64, i64* %297, align 8
  %299 = add i64 %298, %295
  %300 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %299)
  %301 = getelementptr inbounds [1000 x i64], [1000 x i64]* %8, i64 0, i64 %293
  %302 = load i64, i64* %301, align 8
  %303 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %302)
  %304 = fadd double %300, %303
  %305 = fptosi double %304 to i64
  %306 = load i64, i64* %294, align 8
  %307 = sub i64 %306, %298
  %308 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %307)
  %309 = load i64, i64* %301, align 8
  %310 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %309)
  %311 = fadd double %308, %310
  %312 = fptosi double %311 to i64
  %313 = load i64, i64* %294, align 8
  %314 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %313)
  %315 = load i64, i64* %301, align 8
  %316 = sub i64 %315, %298
  %317 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %316)
  %318 = fadd double %314, %317
  %319 = fptosi double %318 to i64
  %320 = load i64, i64* %294, align 8
  %321 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %320)
  %322 = load i64, i64* %301, align 8
  %323 = add i64 %322, %298
  %324 = call double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %323)
  %325 = fadd double %321, %324
  %326 = fptosi double %325 to i64
  %327 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 %296
  %328 = load i64, i64* %327, align 8
  %.not106 = icmp slt i64 %328, %305
  %329 = select i1 %.not106, i32 1525652848, i32 -1621767025
  br label %.backedge

330:                                              ; preds = %21
  %331 = sext i32 %.080 to i64
  %332 = getelementptr inbounds [36 x i8], [36 x i8]* %11, i64 0, i64 %331
  store i8 76, i8* %332, align 1
  %333 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %331
  %334 = load i64, i64* %333, align 8
  %335 = sext i32 %.082 to i64
  %336 = getelementptr inbounds [1000 x i64], [1000 x i64]* %7, i64 0, i64 %335
  %337 = load i64, i64* %336, align 8
  %338 = add i64 %337, %334
  store i64 %338, i64* %336, align 8
  br label %.backedge

339:                                              ; preds = %21
  %340 = load i32, i32* @x, align 4
  %341 = load i32, i32* @y, align 4
  %342 = add i32 %340, -1
  %343 = mul i32 %342, %340
  %344 = and i32 %343, 1
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %346, %345
  %348 = select i1 %347, i32 298543209, i32 984246963
  br label %.backedge

349:                                              ; preds = %21
  %350 = sext i32 %.080 to i64
  %351 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 %350
  %352 = load i64, i64* %351, align 8
  %353 = icmp sle i64 %.0100, %352
  store i1 %353, i1* %1, align 1
  %354 = load i32, i32* @x, align 4
  %355 = load i32, i32* @y, align 4
  %356 = add i32 %354, -1
  %357 = mul i32 %356, %354
  %358 = and i32 %357, 1
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %360, %359
  %362 = select i1 %361, i32 903321092, i32 984246963
  br label %.backedge

363:                                              ; preds = %21
  %.0..0..0.79 = load volatile i1, i1* %1, align 1
  %364 = select i1 %.0..0..0.79, i32 1299849206, i32 2133383344
  br label %.backedge

365:                                              ; preds = %21
  %366 = sext i32 %.080 to i64
  %367 = getelementptr inbounds [36 x i8], [36 x i8]* %11, i64 0, i64 %366
  store i8 82, i8* %367, align 1
  %368 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %366
  %369 = load i64, i64* %368, align 8
  %370 = sext i32 %.082 to i64
  %371 = getelementptr inbounds [1000 x i64], [1000 x i64]* %7, i64 0, i64 %370
  %372 = load i64, i64* %371, align 8
  %373 = sub i64 %372, %369
  store i64 %373, i64* %371, align 8
  br label %.backedge

374:                                              ; preds = %21
  %375 = sext i32 %.080 to i64
  %376 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 %375
  %377 = load i64, i64* %376, align 8
  %.not105 = icmp sgt i64 %.098, %377
  %378 = select i1 %.not105, i32 -354668611, i32 -1416359736
  br label %.backedge

379:                                              ; preds = %21
  %380 = sext i32 %.080 to i64
  %381 = getelementptr inbounds [36 x i8], [36 x i8]* %11, i64 0, i64 %380
  store i8 85, i8* %381, align 1
  %382 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %380
  %383 = load i64, i64* %382, align 8
  %384 = sext i32 %.082 to i64
  %385 = getelementptr inbounds [1000 x i64], [1000 x i64]* %8, i64 0, i64 %384
  %386 = load i64, i64* %385, align 8
  %387 = sub i64 %386, %383
  store i64 %387, i64* %385, align 8
  br label %.backedge

388:                                              ; preds = %21
  %389 = sext i32 %.080 to i64
  %390 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 %389
  %391 = load i64, i64* %390, align 8
  %.not = icmp sgt i64 %.096, %391
  %392 = select i1 %.not, i32 -1463295432, i32 -865973475
  br label %.backedge

393:                                              ; preds = %21
  %394 = sext i32 %.080 to i64
  %395 = getelementptr inbounds [36 x i8], [36 x i8]* %11, i64 0, i64 %394
  store i8 68, i8* %395, align 1
  %396 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %394
  %397 = load i64, i64* %396, align 8
  %398 = sext i32 %.082 to i64
  %399 = getelementptr inbounds [1000 x i64], [1000 x i64]* %8, i64 0, i64 %398
  %400 = load i64, i64* %399, align 8
  %401 = add i64 %400, %397
  store i64 %401, i64* %399, align 8
  br label %.backedge

402:                                              ; preds = %21
  br label %.backedge

403:                                              ; preds = %21
  br label %.backedge

404:                                              ; preds = %21
  br label %.backedge

405:                                              ; preds = %21
  br label %.backedge

406:                                              ; preds = %21
  %.neg104 = add i32 %.080, -1
  br label %.backedge

407:                                              ; preds = %21
  %puts = call i32 @puts(i8* nonnull %14)
  br label %.backedge

408:                                              ; preds = %21
  %409 = load i32, i32* @x, align 4
  %410 = load i32, i32* @y, align 4
  %411 = add i32 %409, -1
  %412 = mul i32 %411, %409
  %413 = and i32 %412, 1
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %415, %414
  %417 = select i1 %416, i32 1386260280, i32 -1343006069
  br label %.backedge

418:                                              ; preds = %21
  %419 = add i32 %.082, 1
  %420 = load i32, i32* @x, align 4
  %421 = load i32, i32* @y, align 4
  %422 = add i32 %420, -1
  %423 = mul i32 %422, %420
  %424 = and i32 %423, 1
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %426, %425
  %428 = select i1 %427, i32 -2090420115, i32 -1343006069
  br label %.backedge

429:                                              ; preds = %21
  br label %.backedge

430:                                              ; preds = %21
  ret i32 0

431:                                              ; preds = %21
  %.neg = add i32 %.094, 1
  br label %.backedge

432:                                              ; preds = %21
  br label %.backedge

433:                                              ; preds = %21
  %434 = add i32 %.092, 1
  br label %.backedge

435:                                              ; preds = %21
  br label %.backedge

436:                                              ; preds = %21
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %19, align 16
  br label %.backedge

437:                                              ; preds = %21
  %438 = sext i32 %.086 to i64
  %439 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 %438
  %440 = load i64, i64* %439, align 8
  %441 = getelementptr inbounds [35 x i64], [35 x i64]* %9, i64 0, i64 %438
  %442 = load i64, i64* %441, align 8
  %443 = add i64 %442, %440
  %444 = add i32 %.086, 1
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds [36 x i64], [36 x i64]* %10, i64 0, i64 %445
  store i64 %443, i64* %446, align 8
  br label %.backedge

447:                                              ; preds = %21
  br label %.backedge

448:                                              ; preds = %21
  br label %.backedge

449:                                              ; preds = %21
  br label %.backedge

450:                                              ; preds = %21
  %451 = add i32 %.082, 1
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr double @_ZSt3absIxEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i64 %0) local_unnamed_addr #2 comdat {
  %2 = sitofp i64 %0 to double
  %3 = tail call double @llvm.fabs.f64(double %2)
  ret double %3
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #4

attributes #0 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { nofree nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
