; ModuleID = 'build_ollvm/programs/p03247/s184402847.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s184402847.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z4readv = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@x = local_unnamed_addr global [1010 x i32] zeroinitializer, align 16
@y = local_unnamed_addr global [1010 x i32] zeroinitializer, align 16
@len = local_unnamed_addr global [33 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d\0A1\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s184402847.cpp, i8* null }]
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0
@x.13 = common local_unnamed_addr global i32 0
@y.14 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i64 @_Z3Absx(i64 %0) local_unnamed_addr #4 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i32, i32* @x.7, align 4
  %4 = load i32, i32* @y.8, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %9, %8
  %11 = select i1 %10, i32 -1760349893, i32 -1368827147
  %12 = select i1 %10, i32 1317574946, i32 -1368827147
  %13 = sub i64 0, %0
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.06.ph = phi i64 [ undef, %1 ], [ %.06.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ -2137602677, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %.outer8

.outer8:                                          ; preds = %.outer8.backedge, %.outer
  %.0.ph9 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph9.be, %.outer8.backedge ]
  br label %14

14:                                               ; preds = %.outer8, %14
  switch i32 %.0.ph9, label %14 [
    i32 -2137602677, label %15
    i32 1683774419, label %.outer.backedge
    i32 -220103732, label %.outer8.backedge
    i32 1317574946, label %18
    i32 -1760349893, label %19
    i32 63161174, label %20
    i32 -1368827147, label %21
  ]

15:                                               ; preds = %14
  %.0..0..0. = load volatile i64, i64* %2, align 8
  %16 = icmp slt i64 %.0..0..0., 0
  %17 = select i1 %16, i32 1683774419, i32 -220103732
  br label %.outer8.backedge

18:                                               ; preds = %14
  br label %.outer.backedge

19:                                               ; preds = %14
  br label %.outer8.backedge

.outer8.backedge:                                 ; preds = %14, %19, %15
  %.0.ph9.be = phi i32 [ %17, %15 ], [ 63161174, %19 ], [ %12, %14 ]
  br label %.outer8

20:                                               ; preds = %14
  ret i64 %.06.ph

21:                                               ; preds = %14
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %14, %21, %18
  %.06.ph.be = phi i64 [ %0, %18 ], [ %0, %21 ], [ %13, %14 ]
  %.0.ph.be = phi i32 [ %11, %18 ], [ 1317574946, %21 ], [ 63161174, %14 ]
  br label %.outer
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca [40 x i8], align 16
  %6 = tail call i32 @_Z4readv()
  %7 = getelementptr inbounds [40 x i8], [40 x i8]* %5, i64 0, i64 1
  %8 = getelementptr inbounds [40 x i8], [40 x i8]* %5, i64 0, i64 0
  br label %9

9:                                                ; preds = %.backedge, %0
  %.087 = phi i32 [ 1, %0 ], [ %.087.be, %.backedge ]
  %.085 = phi i32 [ undef, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i32 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i32 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i32 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i32 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i64 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i64 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i64 [ undef, %0 ], [ %.067.be, %.backedge ]
  %.065 = phi i64 [ undef, %0 ], [ %.065.be, %.backedge ]
  %.0 = phi i32 [ 1147452312, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1147452312, label %10
    i32 -500723810, label %12
    i32 -137772761, label %18
    i32 145550602, label %28
    i32 -385982012, label %39
    i32 -235433121, label %40
    i32 2103862368, label %48
    i32 -1839184261, label %58
    i32 -274886402, label %69
    i32 -238421539, label %71
    i32 1237958735, label %83
    i32 -1831223236, label %85
    i32 906985599, label %86
    i32 -784838136, label %88
    i32 559389386, label %92
    i32 -1406120571, label %93
    i32 -1784559681, label %103
    i32 1172710006, label %114
    i32 1554793873, label %116
    i32 -1880256442, label %126
    i32 673182625, label %141
    i32 219427347, label %142
    i32 -553786974, label %144
    i32 -1643928980, label %145
    i32 -626414715, label %146
    i32 -2090751259, label %149
    i32 -569113312, label %155
    i32 -931142209, label %156
    i32 2141901174, label %157
    i32 2120367676, label %158
    i32 -1475609181, label %160
    i32 -1550547046, label %170
    i32 -2007544834, label %180
    i32 -645775058, label %181
    i32 -855146942, label %183
    i32 1006893133, label %197
    i32 797551209, label %200
    i32 -890462286, label %207
    i32 -1123101439, label %214
    i32 -1500231216, label %215
    i32 31769864, label %225
    i32 1527189533, label %236
    i32 -784529545, label %238
    i32 1286264611, label %248
    i32 -795733852, label %264
    i32 2103937597, label %265
    i32 -1943564408, label %272
    i32 -247667668, label %273
    i32 -2124090724, label %274
    i32 1019107355, label %276
    i32 -792226022, label %277
    i32 -1792221412, label %287
    i32 -979767572, label %298
    i32 -1939385098, label %299
    i32 -727726302, label %300
    i32 1279853282, label %310
    i32 716180715, label %320
    i32 1438816700, label %321
    i32 361031478, label %323
    i32 -1673200800, label %324
    i32 -728916155, label %325
    i32 -174217819, label %331
    i32 -114717396, label %332
    i32 2108797680, label %333
    i32 -1866894912, label %340
    i32 -274428997, label %342
  ]

.backedge:                                        ; preds = %9, %342, %340, %333, %332, %331, %325, %324, %323, %321, %310, %300, %299, %298, %287, %277, %276, %274, %273, %272, %265, %264, %248, %238, %236, %225, %215, %214, %207, %200, %197, %183, %181, %180, %170, %160, %158, %157, %156, %155, %149, %146, %145, %144, %142, %141, %126, %116, %114, %103, %93, %92, %88, %86, %85, %83, %71, %69, %58, %48, %40, %39, %28, %18, %12, %10
  %.087.be = phi i32 [ %.087, %9 ], [ %.087, %342 ], [ %.087, %340 ], [ %.087, %333 ], [ %.087, %332 ], [ %.087, %331 ], [ %.087, %325 ], [ %.087, %324 ], [ %.087, %323 ], [ %322, %321 ], [ %.087, %310 ], [ %.087, %300 ], [ %.087, %299 ], [ %.087, %298 ], [ %.087, %287 ], [ %.087, %277 ], [ %.087, %276 ], [ %.087, %274 ], [ %.087, %273 ], [ %.087, %272 ], [ %.087, %265 ], [ %.087, %264 ], [ %.087, %248 ], [ %.087, %238 ], [ %.087, %236 ], [ %.087, %225 ], [ %.087, %215 ], [ %.087, %214 ], [ %.087, %207 ], [ %.087, %200 ], [ %.087, %197 ], [ %.087, %183 ], [ %.087, %181 ], [ %.087, %180 ], [ %.087, %170 ], [ %.087, %160 ], [ %.087, %158 ], [ %.087, %157 ], [ %.087, %156 ], [ %.087, %155 ], [ %.087, %149 ], [ %.087, %146 ], [ %.087, %145 ], [ %.087, %144 ], [ %.087, %142 ], [ %.087, %141 ], [ %.087, %126 ], [ %.087, %116 ], [ %.087, %114 ], [ %.087, %103 ], [ %.087, %93 ], [ %.087, %92 ], [ %.087, %88 ], [ %.087, %86 ], [ %.087, %85 ], [ %.087, %83 ], [ %.087, %71 ], [ %.087, %69 ], [ %.087, %58 ], [ %.087, %48 ], [ %.087, %40 ], [ %.087, %39 ], [ %29, %28 ], [ %.087, %18 ], [ %.087, %12 ], [ %.087, %10 ]
  %.085.be = phi i32 [ %.085, %9 ], [ %.085, %342 ], [ %.085, %340 ], [ %.085, %333 ], [ %.085, %332 ], [ %.085, %331 ], [ %.085, %325 ], [ %.085, %324 ], [ %.085, %323 ], [ %.085, %321 ], [ %.085, %310 ], [ %.085, %300 ], [ %.085, %299 ], [ %.085, %298 ], [ %.085, %287 ], [ %.085, %277 ], [ %.085, %276 ], [ %.085, %274 ], [ %.085, %273 ], [ %.085, %272 ], [ %.085, %265 ], [ %.085, %264 ], [ %.085, %248 ], [ %.085, %238 ], [ %.085, %236 ], [ %.085, %225 ], [ %.085, %215 ], [ %.085, %214 ], [ %.085, %207 ], [ %.085, %200 ], [ %.085, %197 ], [ %.085, %183 ], [ %.085, %181 ], [ %.085, %180 ], [ %.085, %170 ], [ %.085, %160 ], [ %.085, %158 ], [ %.085, %157 ], [ %.085, %156 ], [ %.085, %155 ], [ %.085, %149 ], [ %.085, %146 ], [ %.085, %145 ], [ %.085, %144 ], [ %.085, %142 ], [ %.085, %141 ], [ %.085, %126 ], [ %.085, %116 ], [ %.085, %114 ], [ %.085, %103 ], [ %.085, %93 ], [ %.085, %92 ], [ %.085, %88 ], [ %.085, %86 ], [ %.085, %85 ], [ %.085, %83 ], [ %.085, %71 ], [ %.085, %69 ], [ %.085, %58 ], [ %.085, %48 ], [ %47, %40 ], [ %.085, %39 ], [ %.085, %28 ], [ %.085, %18 ], [ %.085, %12 ], [ %.085, %10 ]
  %.083.be = phi i32 [ %.083, %9 ], [ %.083, %342 ], [ %.083, %340 ], [ %.083, %333 ], [ %.083, %332 ], [ %.083, %331 ], [ %.083, %325 ], [ %.083, %324 ], [ %.083, %323 ], [ %.083, %321 ], [ %.083, %310 ], [ %.083, %300 ], [ %.083, %299 ], [ %.083, %298 ], [ %.083, %287 ], [ %.083, %277 ], [ %.083, %276 ], [ %.083, %274 ], [ %.083, %273 ], [ %.083, %272 ], [ %.083, %265 ], [ %.083, %264 ], [ %.083, %248 ], [ %.083, %238 ], [ %.083, %236 ], [ %.083, %225 ], [ %.083, %215 ], [ %.083, %214 ], [ %.083, %207 ], [ %.083, %200 ], [ %.083, %197 ], [ %.083, %183 ], [ %.083, %181 ], [ %.083, %180 ], [ %.083, %170 ], [ %.083, %160 ], [ %.083, %158 ], [ %.083, %157 ], [ %.083, %156 ], [ %.083, %155 ], [ %.083, %149 ], [ %.083, %146 ], [ %.083, %145 ], [ %.083, %144 ], [ %.083, %142 ], [ %.083, %141 ], [ %.083, %126 ], [ %.083, %116 ], [ %.083, %114 ], [ %.083, %103 ], [ %.083, %93 ], [ %.083, %92 ], [ %.083, %88 ], [ %87, %86 ], [ %.083, %85 ], [ %.083, %83 ], [ %.083, %71 ], [ %.083, %69 ], [ %.083, %58 ], [ %.083, %48 ], [ 1, %40 ], [ %.083, %39 ], [ %.083, %28 ], [ %.083, %18 ], [ %.083, %12 ], [ %.083, %10 ]
  %.081.be = phi i32 [ %.081, %9 ], [ %.081, %342 ], [ %.081, %340 ], [ %.081, %333 ], [ %.081, %332 ], [ %.081, %331 ], [ %327, %325 ], [ %.081, %324 ], [ %.081, %323 ], [ %.081, %321 ], [ %.081, %310 ], [ %.081, %300 ], [ %.081, %299 ], [ %.081, %298 ], [ %.081, %287 ], [ %.081, %277 ], [ %.081, %276 ], [ %.081, %274 ], [ %.081, %273 ], [ %.081, %272 ], [ %.081, %265 ], [ %.081, %264 ], [ %.081, %248 ], [ %.081, %238 ], [ %.081, %236 ], [ %.081, %225 ], [ %.081, %215 ], [ %.081, %214 ], [ %.081, %207 ], [ %.081, %200 ], [ %.081, %197 ], [ %.081, %183 ], [ %.081, %181 ], [ %.081, %180 ], [ %.081, %170 ], [ %.081, %160 ], [ %.081, %158 ], [ %.081, %157 ], [ %.081, %156 ], [ %.081, %155 ], [ %151, %149 ], [ %.081, %146 ], [ %.081, %145 ], [ %.081, %144 ], [ %.081, %142 ], [ %.081, %141 ], [ %128, %126 ], [ %.081, %116 ], [ %.081, %114 ], [ %.081, %103 ], [ %.081, %93 ], [ %.081, %92 ], [ 1, %88 ], [ %.081, %86 ], [ %.081, %85 ], [ %.081, %83 ], [ %.081, %71 ], [ %.081, %69 ], [ %.081, %58 ], [ %.081, %48 ], [ %.081, %40 ], [ %.081, %39 ], [ %.081, %28 ], [ %.081, %18 ], [ %.081, %12 ], [ %.081, %10 ]
  %.079.be = phi i32 [ %.079, %9 ], [ %.079, %342 ], [ %.079, %340 ], [ %.079, %333 ], [ %.079, %332 ], [ %.079, %331 ], [ %.079, %325 ], [ %.079, %324 ], [ %.079, %323 ], [ %.079, %321 ], [ %.079, %310 ], [ %.079, %300 ], [ %.079, %299 ], [ %.079, %298 ], [ %.079, %287 ], [ %.079, %277 ], [ %.079, %276 ], [ %.079, %274 ], [ %.079, %273 ], [ %.079, %272 ], [ %.079, %265 ], [ %.079, %264 ], [ %.079, %248 ], [ %.079, %238 ], [ %.079, %236 ], [ %.079, %225 ], [ %.079, %215 ], [ %.079, %214 ], [ %.079, %207 ], [ %.079, %200 ], [ %.079, %197 ], [ %.079, %183 ], [ %.079, %181 ], [ %.079, %180 ], [ %.079, %170 ], [ %.079, %160 ], [ %.079, %158 ], [ %.079, %157 ], [ %.079, %156 ], [ %.079, %155 ], [ %.079, %149 ], [ %.079, %146 ], [ %.079, %145 ], [ %.079, %144 ], [ %143, %142 ], [ %.079, %141 ], [ %.079, %126 ], [ %.079, %116 ], [ %.079, %114 ], [ %.079, %103 ], [ %.079, %93 ], [ 1, %92 ], [ %.079, %88 ], [ %.079, %86 ], [ %.079, %85 ], [ %.079, %83 ], [ %.079, %71 ], [ %.079, %69 ], [ %.079, %58 ], [ %.079, %48 ], [ %.079, %40 ], [ %.079, %39 ], [ %.079, %28 ], [ %.079, %18 ], [ %.079, %12 ], [ %.079, %10 ]
  %.077.be = phi i32 [ %.077, %9 ], [ %.077, %342 ], [ %.077, %340 ], [ %.077, %333 ], [ %.077, %332 ], [ %.077, %331 ], [ %.077, %325 ], [ %.077, %324 ], [ %.077, %323 ], [ %.077, %321 ], [ %.077, %310 ], [ %.077, %300 ], [ %.077, %299 ], [ %.077, %298 ], [ %.077, %287 ], [ %.077, %277 ], [ %.077, %276 ], [ %.077, %274 ], [ %.077, %273 ], [ %.077, %272 ], [ %.077, %265 ], [ %.077, %264 ], [ %.077, %248 ], [ %.077, %238 ], [ %.077, %236 ], [ %.077, %225 ], [ %.077, %215 ], [ %.077, %214 ], [ %.077, %207 ], [ %.077, %200 ], [ %.077, %197 ], [ %.077, %183 ], [ %.077, %181 ], [ %.077, %180 ], [ %.077, %170 ], [ %.077, %160 ], [ %.077, %158 ], [ %.077, %157 ], [ %.077, %156 ], [ %.neg, %155 ], [ %.077, %149 ], [ %.077, %146 ], [ 0, %145 ], [ %.077, %144 ], [ %.077, %142 ], [ %.077, %141 ], [ %.077, %126 ], [ %.077, %116 ], [ %.077, %114 ], [ %.077, %103 ], [ %.077, %93 ], [ %.077, %92 ], [ %.077, %88 ], [ %.077, %86 ], [ %.077, %85 ], [ %.077, %83 ], [ %.077, %71 ], [ %.077, %69 ], [ %.077, %58 ], [ %.077, %48 ], [ %.077, %40 ], [ %.077, %39 ], [ %.077, %28 ], [ %.077, %18 ], [ %.077, %12 ], [ %.077, %10 ]
  %.075.be = phi i32 [ %.075, %9 ], [ %.075, %342 ], [ %341, %340 ], [ %.075, %333 ], [ %.075, %332 ], [ %.075, %331 ], [ %.075, %325 ], [ %.075, %324 ], [ %.075, %323 ], [ %.075, %321 ], [ %.075, %310 ], [ %.075, %300 ], [ %.075, %299 ], [ %.075, %298 ], [ %288, %287 ], [ %.075, %277 ], [ %.075, %276 ], [ %.075, %274 ], [ %.075, %273 ], [ %.075, %272 ], [ %.075, %265 ], [ %.075, %264 ], [ %.075, %248 ], [ %.075, %238 ], [ %.075, %236 ], [ %.075, %225 ], [ %.075, %215 ], [ %.075, %214 ], [ %.075, %207 ], [ %.075, %200 ], [ %.075, %197 ], [ %.075, %183 ], [ %.075, %181 ], [ %.075, %180 ], [ %.075, %170 ], [ %.075, %160 ], [ %.075, %158 ], [ 1, %157 ], [ %.075, %156 ], [ %.075, %155 ], [ %.075, %149 ], [ %.075, %146 ], [ %.075, %145 ], [ %.075, %144 ], [ %.075, %142 ], [ %.075, %141 ], [ %.075, %126 ], [ %.075, %116 ], [ %.075, %114 ], [ %.075, %103 ], [ %.075, %93 ], [ %.075, %92 ], [ %.075, %88 ], [ %.075, %86 ], [ %.075, %85 ], [ %.075, %83 ], [ %.075, %71 ], [ %.075, %69 ], [ %.075, %58 ], [ %.075, %48 ], [ %.075, %40 ], [ %.075, %39 ], [ %.075, %28 ], [ %.075, %18 ], [ %.075, %12 ], [ %.075, %10 ]
  %.073.be = phi i64 [ %.073, %9 ], [ %.073, %342 ], [ %.073, %340 ], [ %.073, %333 ], [ %.073, %332 ], [ 0, %331 ], [ %.073, %325 ], [ %.073, %324 ], [ %.073, %323 ], [ %.073, %321 ], [ %.073, %310 ], [ %.073, %300 ], [ %.073, %299 ], [ %.073, %298 ], [ %.073, %287 ], [ %.073, %277 ], [ %.073, %276 ], [ %.073, %274 ], [ %.073, %273 ], [ %.073, %272 ], [ %.073, %265 ], [ %.073, %264 ], [ %.073, %248 ], [ %.073, %238 ], [ %.073, %236 ], [ %.073, %225 ], [ %.073, %215 ], [ %.073, %214 ], [ %212, %207 ], [ %205, %200 ], [ %.073, %197 ], [ %.073, %183 ], [ %.073, %181 ], [ %.073, %180 ], [ 0, %170 ], [ %.073, %160 ], [ %.073, %158 ], [ %.073, %157 ], [ %.073, %156 ], [ %.073, %155 ], [ %.073, %149 ], [ %.073, %146 ], [ %.073, %145 ], [ %.073, %144 ], [ %.073, %142 ], [ %.073, %141 ], [ %.073, %126 ], [ %.073, %116 ], [ %.073, %114 ], [ %.073, %103 ], [ %.073, %93 ], [ %.073, %92 ], [ %.073, %88 ], [ %.073, %86 ], [ %.073, %85 ], [ %.073, %83 ], [ %.073, %71 ], [ %.073, %69 ], [ %.073, %58 ], [ %.073, %48 ], [ %.073, %40 ], [ %.073, %39 ], [ %.073, %28 ], [ %.073, %18 ], [ %.073, %12 ], [ %.073, %10 ]
  %.071.be = phi i64 [ %.071, %9 ], [ %.071, %342 ], [ %.071, %340 ], [ %338, %333 ], [ %.071, %332 ], [ 0, %331 ], [ %.071, %325 ], [ %.071, %324 ], [ %.071, %323 ], [ %.071, %321 ], [ %.071, %310 ], [ %.071, %300 ], [ %.071, %299 ], [ %.071, %298 ], [ %.071, %287 ], [ %.071, %277 ], [ %.071, %276 ], [ %.071, %274 ], [ %.071, %273 ], [ %.071, %272 ], [ %270, %265 ], [ %.071, %264 ], [ %253, %248 ], [ %.071, %238 ], [ %.071, %236 ], [ %.071, %225 ], [ %.071, %215 ], [ %.071, %214 ], [ %.071, %207 ], [ %.071, %200 ], [ %.071, %197 ], [ %.071, %183 ], [ %.071, %181 ], [ %.071, %180 ], [ 0, %170 ], [ %.071, %160 ], [ %.071, %158 ], [ %.071, %157 ], [ %.071, %156 ], [ %.071, %155 ], [ %.071, %149 ], [ %.071, %146 ], [ %.071, %145 ], [ %.071, %144 ], [ %.071, %142 ], [ %.071, %141 ], [ %.071, %126 ], [ %.071, %116 ], [ %.071, %114 ], [ %.071, %103 ], [ %.071, %93 ], [ %.071, %92 ], [ %.071, %88 ], [ %.071, %86 ], [ %.071, %85 ], [ %.071, %83 ], [ %.071, %71 ], [ %.071, %69 ], [ %.071, %58 ], [ %.071, %48 ], [ %.071, %40 ], [ %.071, %39 ], [ %.071, %28 ], [ %.071, %18 ], [ %.071, %12 ], [ %.071, %10 ]
  %.069.be = phi i32 [ %.069, %9 ], [ %.069, %342 ], [ %.069, %340 ], [ %.069, %333 ], [ %.069, %332 ], [ %.081, %331 ], [ %.069, %325 ], [ %.069, %324 ], [ %.069, %323 ], [ %.069, %321 ], [ %.069, %310 ], [ %.069, %300 ], [ %.069, %299 ], [ %.069, %298 ], [ %.069, %287 ], [ %.069, %277 ], [ %.069, %276 ], [ %275, %274 ], [ %.069, %273 ], [ %.069, %272 ], [ %.069, %265 ], [ %.069, %264 ], [ %.069, %248 ], [ %.069, %238 ], [ %.069, %236 ], [ %.069, %225 ], [ %.069, %215 ], [ %.069, %214 ], [ %.069, %207 ], [ %.069, %200 ], [ %.069, %197 ], [ %.069, %183 ], [ %.069, %181 ], [ %.069, %180 ], [ %.081, %170 ], [ %.069, %160 ], [ %.069, %158 ], [ %.069, %157 ], [ %.069, %156 ], [ %.069, %155 ], [ %.069, %149 ], [ %.069, %146 ], [ %.069, %145 ], [ %.069, %144 ], [ %.069, %142 ], [ %.069, %141 ], [ %.069, %126 ], [ %.069, %116 ], [ %.069, %114 ], [ %.069, %103 ], [ %.069, %93 ], [ %.069, %92 ], [ %.069, %88 ], [ %.069, %86 ], [ %.069, %85 ], [ %.069, %83 ], [ %.069, %71 ], [ %.069, %69 ], [ %.069, %58 ], [ %.069, %48 ], [ %.069, %40 ], [ %.069, %39 ], [ %.069, %28 ], [ %.069, %18 ], [ %.069, %12 ], [ %.069, %10 ]
  %.067.be = phi i64 [ %.067, %9 ], [ %.067, %342 ], [ %.067, %340 ], [ %.067, %333 ], [ %.067, %332 ], [ %.067, %331 ], [ %.067, %325 ], [ %.067, %324 ], [ %.067, %323 ], [ %.067, %321 ], [ %.067, %310 ], [ %.067, %300 ], [ %.067, %299 ], [ %.067, %298 ], [ %.067, %287 ], [ %.067, %277 ], [ %.067, %276 ], [ %.067, %274 ], [ %.067, %273 ], [ %.067, %272 ], [ %.067, %265 ], [ %.067, %264 ], [ %.067, %248 ], [ %.067, %238 ], [ %.067, %236 ], [ %.067, %225 ], [ %.067, %215 ], [ %.067, %214 ], [ %.067, %207 ], [ %.067, %200 ], [ %.067, %197 ], [ %188, %183 ], [ %.067, %181 ], [ %.067, %180 ], [ %.067, %170 ], [ %.067, %160 ], [ %.067, %158 ], [ %.067, %157 ], [ %.067, %156 ], [ %.067, %155 ], [ %.067, %149 ], [ %.067, %146 ], [ %.067, %145 ], [ %.067, %144 ], [ %.067, %142 ], [ %.067, %141 ], [ %.067, %126 ], [ %.067, %116 ], [ %.067, %114 ], [ %.067, %103 ], [ %.067, %93 ], [ %.067, %92 ], [ %.067, %88 ], [ %.067, %86 ], [ %.067, %85 ], [ %.067, %83 ], [ %.067, %71 ], [ %.067, %69 ], [ %.067, %58 ], [ %.067, %48 ], [ %.067, %40 ], [ %.067, %39 ], [ %.067, %28 ], [ %.067, %18 ], [ %.067, %12 ], [ %.067, %10 ]
  %.065.be = phi i64 [ %.065, %9 ], [ %.065, %342 ], [ %.065, %340 ], [ %.065, %333 ], [ %.065, %332 ], [ %.065, %331 ], [ %.065, %325 ], [ %.065, %324 ], [ %.065, %323 ], [ %.065, %321 ], [ %.065, %310 ], [ %.065, %300 ], [ %.065, %299 ], [ %.065, %298 ], [ %.065, %287 ], [ %.065, %277 ], [ %.065, %276 ], [ %.065, %274 ], [ %.065, %273 ], [ %.065, %272 ], [ %.065, %265 ], [ %.065, %264 ], [ %.065, %248 ], [ %.065, %238 ], [ %.065, %236 ], [ %.065, %225 ], [ %.065, %215 ], [ %.065, %214 ], [ %.065, %207 ], [ %.065, %200 ], [ %.065, %197 ], [ %192, %183 ], [ %.065, %181 ], [ %.065, %180 ], [ %.065, %170 ], [ %.065, %160 ], [ %.065, %158 ], [ %.065, %157 ], [ %.065, %156 ], [ %.065, %155 ], [ %.065, %149 ], [ %.065, %146 ], [ %.065, %145 ], [ %.065, %144 ], [ %.065, %142 ], [ %.065, %141 ], [ %.065, %126 ], [ %.065, %116 ], [ %.065, %114 ], [ %.065, %103 ], [ %.065, %93 ], [ %.065, %92 ], [ %.065, %88 ], [ %.065, %86 ], [ %.065, %85 ], [ %.065, %83 ], [ %.065, %71 ], [ %.065, %69 ], [ %.065, %58 ], [ %.065, %48 ], [ %.065, %40 ], [ %.065, %39 ], [ %.065, %28 ], [ %.065, %18 ], [ %.065, %12 ], [ %.065, %10 ]
  %.0.be = phi i32 [ %.0, %9 ], [ 1279853282, %342 ], [ -1792221412, %340 ], [ 1286264611, %333 ], [ 31769864, %332 ], [ -1550547046, %331 ], [ -1880256442, %325 ], [ -1784559681, %324 ], [ -1839184261, %323 ], [ 145550602, %321 ], [ %319, %310 ], [ %309, %300 ], [ -727726302, %299 ], [ 2120367676, %298 ], [ %297, %287 ], [ %286, %277 ], [ -792226022, %276 ], [ -645775058, %274 ], [ -2124090724, %273 ], [ -247667668, %272 ], [ -1943564408, %265 ], [ -1943564408, %264 ], [ %263, %248 ], [ %247, %238 ], [ %237, %236 ], [ %235, %225 ], [ %224, %215 ], [ -247667668, %214 ], [ -1123101439, %207 ], [ -1123101439, %200 ], [ %199, %197 ], [ %196, %183 ], [ %182, %181 ], [ -645775058, %180 ], [ %179, %170 ], [ %169, %160 ], [ %159, %158 ], [ 2120367676, %157 ], [ 2141901174, %156 ], [ -626414715, %155 ], [ -569113312, %149 ], [ %148, %146 ], [ -626414715, %145 ], [ 2141901174, %144 ], [ -1406120571, %142 ], [ 219427347, %141 ], [ %140, %126 ], [ %125, %116 ], [ %115, %114 ], [ %113, %103 ], [ %102, %93 ], [ -1406120571, %92 ], [ %91, %88 ], [ 2103862368, %86 ], [ 906985599, %85 ], [ -727726302, %83 ], [ %82, %71 ], [ %70, %69 ], [ %68, %58 ], [ %57, %48 ], [ 2103862368, %40 ], [ 1147452312, %39 ], [ %38, %28 ], [ %27, %18 ], [ -137772761, %12 ], [ %11, %10 ]
  br label %9

10:                                               ; preds = %9
  %.not95 = icmp sgt i32 %.087, %6
  %11 = select i1 %.not95, i32 -235433121, i32 -500723810
  br label %.backedge

12:                                               ; preds = %9
  %13 = tail call i32 @_Z4readv()
  %14 = sext i32 %.087 to i64
  %15 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %14
  store i32 %13, i32* %15, align 4
  %16 = tail call i32 @_Z4readv()
  %17 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %14
  store i32 %16, i32* %17, align 4
  br label %.backedge

18:                                               ; preds = %9
  %19 = load i32, i32* @x.9, align 4
  %20 = load i32, i32* @y.10, align 4
  %21 = add i32 %19, -1
  %22 = mul i32 %21, %19
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %25, %24
  %27 = select i1 %26, i32 145550602, i32 1438816700
  br label %.backedge

28:                                               ; preds = %9
  %29 = add i32 %.087, 1
  %30 = load i32, i32* @x.9, align 4
  %31 = load i32, i32* @y.10, align 4
  %32 = add i32 %30, -1
  %33 = mul i32 %32, %30
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %36, %35
  %38 = select i1 %37, i32 -385982012, i32 1438816700
  br label %.backedge

39:                                               ; preds = %9
  br label %.backedge

40:                                               ; preds = %9
  %41 = load i32, i32* getelementptr inbounds ([1010 x i32], [1010 x i32]* @x, i64 0, i64 1), align 4
  %42 = load i32, i32* getelementptr inbounds ([1010 x i32], [1010 x i32]* @y, i64 0, i64 1), align 4
  %43 = add i32 %42, %41
  %44 = sext i32 %43 to i64
  %45 = tail call i64 @_Z3Absx(i64 %44)
  %46 = trunc i64 %45 to i32
  %47 = and i32 %46, 1
  br label %.backedge

48:                                               ; preds = %9
  %49 = load i32, i32* @x.9, align 4
  %50 = load i32, i32* @y.10, align 4
  %51 = add i32 %49, -1
  %52 = mul i32 %51, %49
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %55, %54
  %57 = select i1 %56, i32 -1839184261, i32 361031478
  br label %.backedge

58:                                               ; preds = %9
  %59 = icmp sle i32 %.083, %6
  store i1 %59, i1* %4, align 1
  %60 = load i32, i32* @x.9, align 4
  %61 = load i32, i32* @y.10, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 -274886402, i32 361031478
  br label %.backedge

69:                                               ; preds = %9
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %70 = select i1 %.0..0..0., i32 -238421539, i32 -784838136
  br label %.backedge

71:                                               ; preds = %9
  %72 = sext i32 %.083 to i64
  %73 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %72
  %76 = load i32, i32* %75, align 4
  %77 = add i32 %76, %74
  %78 = sext i32 %77 to i64
  %79 = tail call i64 @_Z3Absx(i64 %78)
  %80 = and i64 %79, 1
  %81 = sext i32 %.085 to i64
  %.not94 = icmp eq i64 %80, %81
  %82 = select i1 %.not94, i32 -1831223236, i32 1237958735
  br label %.backedge

83:                                               ; preds = %9
  %84 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  br label %.backedge

85:                                               ; preds = %9
  br label %.backedge

86:                                               ; preds = %9
  %87 = add i32 %.083, 1
  br label %.backedge

88:                                               ; preds = %9
  %89 = sub i32 32, %.085
  %90 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %89)
  store i32 1, i32* getelementptr inbounds ([33 x i32], [33 x i32]* @len, i64 0, i64 1), align 4
  %.not93 = icmp eq i32 %.085, 0
  %91 = select i1 %.not93, i32 -1643928980, i32 559389386
  br label %.backedge

92:                                               ; preds = %9
  br label %.backedge

93:                                               ; preds = %9
  %94 = load i32, i32* @x.9, align 4
  %95 = load i32, i32* @y.10, align 4
  %96 = add i32 %94, -1
  %97 = mul i32 %96, %94
  %98 = and i32 %97, 1
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %100, %99
  %102 = select i1 %101, i32 -1784559681, i32 -1673200800
  br label %.backedge

103:                                              ; preds = %9
  %104 = icmp slt i32 %.079, 31
  store i1 %104, i1* %3, align 1
  %105 = load i32, i32* @x.9, align 4
  %106 = load i32, i32* @y.10, align 4
  %107 = add i32 %105, -1
  %108 = mul i32 %107, %105
  %109 = and i32 %108, 1
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %111, %110
  %113 = select i1 %112, i32 1172710006, i32 -1673200800
  br label %.backedge

114:                                              ; preds = %9
  %.0..0..0.62 = load volatile i1, i1* %3, align 1
  %115 = select i1 %.0..0..0.62, i32 1554793873, i32 -553786974
  br label %.backedge

116:                                              ; preds = %9
  %117 = load i32, i32* @x.9, align 4
  %118 = load i32, i32* @y.10, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 -1880256442, i32 -728916155
  br label %.backedge

126:                                              ; preds = %9
  %127 = shl nuw i32 1, %.079
  %128 = add i32 %.081, 1
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %129
  store i32 %127, i32* %130, align 4
  %131 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %127)
  %132 = load i32, i32* @x.9, align 4
  %133 = load i32, i32* @y.10, align 4
  %134 = add i32 %132, -1
  %135 = mul i32 %134, %132
  %136 = and i32 %135, 1
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %138, %137
  %140 = select i1 %139, i32 673182625, i32 -728916155
  br label %.backedge

141:                                              ; preds = %9
  br label %.backedge

142:                                              ; preds = %9
  %143 = add i32 %.079, 1
  br label %.backedge

144:                                              ; preds = %9
  %putchar92 = tail call i32 @putchar(i32 10)
  br label %.backedge

145:                                              ; preds = %9
  br label %.backedge

146:                                              ; preds = %9
  %147 = icmp slt i32 %.077, 31
  %148 = select i1 %147, i32 -2090751259, i32 -931142209
  br label %.backedge

149:                                              ; preds = %9
  %150 = shl nuw i32 1, %.077
  %151 = add i32 %.081, 1
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %152
  store i32 %150, i32* %153, align 4
  %154 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %150)
  br label %.backedge

155:                                              ; preds = %9
  %.neg = add i32 %.077, 1
  br label %.backedge

156:                                              ; preds = %9
  %putchar = tail call i32 @putchar(i32 10)
  br label %.backedge

157:                                              ; preds = %9
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(40) %8, i8 0, i64 40, i1 false)
  br label %.backedge

158:                                              ; preds = %9
  %.not91 = icmp sgt i32 %.075, %6
  %159 = select i1 %.not91, i32 -1939385098, i32 -1475609181
  br label %.backedge

160:                                              ; preds = %9
  %161 = load i32, i32* @x.9, align 4
  %162 = load i32, i32* @y.10, align 4
  %163 = add i32 %161, -1
  %164 = mul i32 %163, %161
  %165 = and i32 %164, 1
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %167, %166
  %169 = select i1 %168, i32 -1550547046, i32 -174217819
  br label %.backedge

170:                                              ; preds = %9
  %171 = load i32, i32* @x.9, align 4
  %172 = load i32, i32* @y.10, align 4
  %173 = add i32 %171, -1
  %174 = mul i32 %173, %171
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %177, %176
  %179 = select i1 %178, i32 -2007544834, i32 -174217819
  br label %.backedge

180:                                              ; preds = %9
  br label %.backedge

181:                                              ; preds = %9
  %.not = icmp eq i32 %.069, 0
  %182 = select i1 %.not, i32 1019107355, i32 -855146942
  br label %.backedge

183:                                              ; preds = %9
  %184 = sext i32 %.075 to i64
  %185 = getelementptr inbounds [1010 x i32], [1010 x i32]* @x, i64 0, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = sext i32 %186 to i64
  %188 = sub i64 %187, %.073
  %189 = getelementptr inbounds [1010 x i32], [1010 x i32]* @y, i64 0, i64 %184
  %190 = load i32, i32* %189, align 4
  %191 = sext i32 %190 to i64
  %192 = sub i64 %191, %.071
  %193 = tail call i64 @_Z3Absx(i64 %188)
  %194 = tail call i64 @_Z3Absx(i64 %192)
  %195 = icmp sgt i64 %193, %194
  %196 = select i1 %195, i32 1006893133, i32 -1500231216
  br label %.backedge

197:                                              ; preds = %9
  %198 = icmp sgt i64 %.067, 0
  %199 = select i1 %198, i32 797551209, i32 -890462286
  br label %.backedge

200:                                              ; preds = %9
  %201 = sext i32 %.069 to i64
  %202 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = sext i32 %203 to i64
  %205 = add i64 %.073, %204
  %206 = getelementptr inbounds [40 x i8], [40 x i8]* %5, i64 0, i64 %201
  store i8 82, i8* %206, align 1
  br label %.backedge

207:                                              ; preds = %9
  %208 = sext i32 %.069 to i64
  %209 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = sext i32 %210 to i64
  %212 = sub i64 %.073, %211
  %213 = getelementptr inbounds [40 x i8], [40 x i8]* %5, i64 0, i64 %208
  store i8 76, i8* %213, align 1
  br label %.backedge

214:                                              ; preds = %9
  br label %.backedge

215:                                              ; preds = %9
  %216 = load i32, i32* @x.9, align 4
  %217 = load i32, i32* @y.10, align 4
  %218 = add i32 %216, -1
  %219 = mul i32 %218, %216
  %220 = and i32 %219, 1
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %222, %221
  %224 = select i1 %223, i32 31769864, i32 -114717396
  br label %.backedge

225:                                              ; preds = %9
  %226 = icmp sgt i64 %.065, 0
  store i1 %226, i1* %2, align 1
  %227 = load i32, i32* @x.9, align 4
  %228 = load i32, i32* @y.10, align 4
  %229 = add i32 %227, -1
  %230 = mul i32 %229, %227
  %231 = and i32 %230, 1
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %233, %232
  %235 = select i1 %234, i32 1527189533, i32 -114717396
  br label %.backedge

236:                                              ; preds = %9
  %.0..0..0.63 = load volatile i1, i1* %2, align 1
  %237 = select i1 %.0..0..0.63, i32 -784529545, i32 2103937597
  br label %.backedge

238:                                              ; preds = %9
  %239 = load i32, i32* @x.9, align 4
  %240 = load i32, i32* @y.10, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 1286264611, i32 2108797680
  br label %.backedge

248:                                              ; preds = %9
  %249 = sext i32 %.069 to i64
  %250 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %249
  %251 = load i32, i32* %250, align 4
  %252 = sext i32 %251 to i64
  %253 = add i64 %.071, %252
  %254 = getelementptr inbounds [40 x i8], [40 x i8]* %5, i64 0, i64 %249
  store i8 85, i8* %254, align 1
  %255 = load i32, i32* @x.9, align 4
  %256 = load i32, i32* @y.10, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 -795733852, i32 2108797680
  br label %.backedge

264:                                              ; preds = %9
  br label %.backedge

265:                                              ; preds = %9
  %266 = sext i32 %.069 to i64
  %267 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %266
  %268 = load i32, i32* %267, align 4
  %269 = sext i32 %268 to i64
  %270 = sub i64 %.071, %269
  %271 = getelementptr inbounds [40 x i8], [40 x i8]* %5, i64 0, i64 %266
  store i8 68, i8* %271, align 1
  br label %.backedge

272:                                              ; preds = %9
  br label %.backedge

273:                                              ; preds = %9
  br label %.backedge

274:                                              ; preds = %9
  %275 = add i32 %.069, -1
  br label %.backedge

276:                                              ; preds = %9
  %puts = call i32 @puts(i8* nonnull %7)
  br label %.backedge

277:                                              ; preds = %9
  %278 = load i32, i32* @x.9, align 4
  %279 = load i32, i32* @y.10, align 4
  %280 = add i32 %278, -1
  %281 = mul i32 %280, %278
  %282 = and i32 %281, 1
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %284, %283
  %286 = select i1 %285, i32 -1792221412, i32 -1866894912
  br label %.backedge

287:                                              ; preds = %9
  %288 = add i32 %.075, 1
  %289 = load i32, i32* @x.9, align 4
  %290 = load i32, i32* @y.10, align 4
  %291 = add i32 %289, -1
  %292 = mul i32 %291, %289
  %293 = and i32 %292, 1
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %295, %294
  %297 = select i1 %296, i32 -979767572, i32 -1866894912
  br label %.backedge

298:                                              ; preds = %9
  br label %.backedge

299:                                              ; preds = %9
  br label %.backedge

300:                                              ; preds = %9
  %301 = load i32, i32* @x.9, align 4
  %302 = load i32, i32* @y.10, align 4
  %303 = add i32 %301, -1
  %304 = mul i32 %303, %301
  %305 = and i32 %304, 1
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %307, %306
  %309 = select i1 %308, i32 1279853282, i32 -274428997
  br label %.backedge

310:                                              ; preds = %9
  store i32 0, i32* %1, align 4
  %311 = load i32, i32* @x.9, align 4
  %312 = load i32, i32* @y.10, align 4
  %313 = add i32 %311, -1
  %314 = mul i32 %313, %311
  %315 = and i32 %314, 1
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %317, %316
  %319 = select i1 %318, i32 716180715, i32 -274428997
  br label %.backedge

320:                                              ; preds = %9
  %.0..0..0.64 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.64

321:                                              ; preds = %9
  %322 = add i32 %.087, 1
  br label %.backedge

323:                                              ; preds = %9
  br label %.backedge

324:                                              ; preds = %9
  br label %.backedge

325:                                              ; preds = %9
  %326 = shl nuw i32 1, %.079
  %327 = add i32 %.081, 1
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %328
  store i32 %326, i32* %329, align 4
  %330 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %326)
  br label %.backedge

331:                                              ; preds = %9
  br label %.backedge

332:                                              ; preds = %9
  br label %.backedge

333:                                              ; preds = %9
  %334 = sext i32 %.069 to i64
  %335 = getelementptr inbounds [33 x i32], [33 x i32]* @len, i64 0, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = sext i32 %336 to i64
  %338 = add i64 %.071, %337
  %339 = getelementptr inbounds [40 x i8], [40 x i8]* %5, i64 0, i64 %334
  store i8 85, i8* %339, align 1
  br label %.backedge

340:                                              ; preds = %9
  %341 = add i32 %.075, 1
  br label %.backedge

342:                                              ; preds = %9
  br label %.backedge
}

; Function Attrs: noinline uwtable
define linkonce_odr i32 @_Z4readv() local_unnamed_addr #0 comdat {
  %1 = alloca i32, align 4
  %2 = tail call i32 @getchar()
  %3 = trunc i32 %2 to i8
  br label %4

4:                                                ; preds = %.backedge, %0
  %5 = phi i32 [ undef, %0 ], [ %.be, %.backedge ]
  %.023 = phi i32 [ 0, %0 ], [ %.023.be, %.backedge ]
  %.021 = phi i32 [ 1, %0 ], [ %.021.be, %.backedge ]
  %.019 = phi i8 [ %3, %0 ], [ %.019.be, %.backedge ]
  %.017 = phi i32 [ 751378813, %0 ], [ %.017.be, %.backedge ]
  %.015 = phi i1 [ undef, %0 ], [ %.015.be, %.backedge ]
  %.0 = phi i1 [ undef, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.017, label %.backedge [
    i32 751378813, label %6
    i32 2133271961, label %9
    i32 1756759399, label %11
    i32 827196763, label %13
    i32 1381140652, label %16
    i32 -1488023637, label %26
    i32 495251678, label %36
    i32 1270710140, label %37
    i32 -71573094, label %40
    i32 964700026, label %50
    i32 -969575253, label %60
    i32 -1423507798, label %61
    i32 -1368343026, label %64
    i32 393360560, label %66
    i32 149232107, label %68
    i32 -1689389095, label %73
    i32 -335907827, label %83
    i32 -449111358, label %94
    i32 -557245686, label %95
    i32 1099992505, label %96
    i32 1799342324, label %97
  ]

.backedge:                                        ; preds = %4, %97, %96, %95, %83, %73, %68, %66, %64, %61, %60, %50, %40, %37, %36, %26, %16, %13, %11, %9, %6
  %.be = phi i32 [ %5, %4 ], [ %5, %97 ], [ %5, %96 ], [ %5, %95 ], [ %84, %83 ], [ %5, %73 ], [ %5, %68 ], [ %5, %66 ], [ %5, %64 ], [ %5, %61 ], [ %5, %60 ], [ %5, %50 ], [ %5, %40 ], [ %5, %37 ], [ %5, %36 ], [ %5, %26 ], [ %5, %16 ], [ %5, %13 ], [ %5, %11 ], [ %5, %9 ], [ %5, %6 ]
  %.023.be = phi i32 [ %.023, %4 ], [ %.023, %97 ], [ %.023, %96 ], [ %.023, %95 ], [ %.023, %83 ], [ %.023, %73 ], [ %.neg25, %68 ], [ %.023, %66 ], [ %.023, %64 ], [ %.023, %61 ], [ %.023, %60 ], [ %.023, %50 ], [ %.023, %40 ], [ %.023, %37 ], [ %.023, %36 ], [ %.023, %26 ], [ %.023, %16 ], [ %.023, %13 ], [ %.023, %11 ], [ %.023, %9 ], [ %.023, %6 ]
  %.021.be = phi i32 [ %.021, %4 ], [ %.021, %97 ], [ %.021, %96 ], [ -1, %95 ], [ %.021, %83 ], [ %.021, %73 ], [ %.021, %68 ], [ %.021, %66 ], [ %.021, %64 ], [ %.021, %61 ], [ %.021, %60 ], [ %.021, %50 ], [ %.021, %40 ], [ %.021, %37 ], [ %.021, %36 ], [ -1, %26 ], [ %.021, %16 ], [ %.021, %13 ], [ %.021, %11 ], [ %.021, %9 ], [ %.021, %6 ]
  %.019.be = phi i8 [ %.019, %4 ], [ %.019, %97 ], [ %.019, %96 ], [ %.019, %95 ], [ %.019, %83 ], [ %.019, %73 ], [ %72, %68 ], [ %.019, %66 ], [ %.019, %64 ], [ %.019, %61 ], [ %.019, %60 ], [ %.019, %50 ], [ %.019, %40 ], [ %39, %37 ], [ %.019, %36 ], [ %.019, %26 ], [ %.019, %16 ], [ %.019, %13 ], [ %.019, %11 ], [ %.019, %9 ], [ %.019, %6 ]
  %.017.be = phi i32 [ %.017, %4 ], [ -335907827, %97 ], [ 964700026, %96 ], [ -1488023637, %95 ], [ %93, %83 ], [ %82, %73 ], [ -1423507798, %68 ], [ %67, %66 ], [ 393360560, %64 ], [ %63, %61 ], [ -1423507798, %60 ], [ %59, %50 ], [ %49, %40 ], [ 751378813, %37 ], [ 1270710140, %36 ], [ %35, %26 ], [ %25, %16 ], [ %15, %13 ], [ %12, %11 ], [ 1756759399, %9 ], [ %8, %6 ]
  %.015.be = phi i1 [ %.015, %4 ], [ %.015, %97 ], [ %.015, %96 ], [ %.015, %95 ], [ %.015, %83 ], [ %.015, %73 ], [ %.015, %68 ], [ %.015, %66 ], [ %.015, %64 ], [ %.015, %61 ], [ %.015, %60 ], [ %.015, %50 ], [ %.015, %40 ], [ %.015, %37 ], [ %.015, %36 ], [ %.015, %26 ], [ %.015, %16 ], [ %.015, %13 ], [ %.015, %11 ], [ %10, %9 ], [ true, %6 ]
  %.0.be = phi i1 [ %.0, %4 ], [ %.0, %97 ], [ %.0, %96 ], [ %.0, %95 ], [ %.0, %83 ], [ %.0, %73 ], [ %.0, %68 ], [ %.0, %66 ], [ %65, %64 ], [ false, %61 ], [ %.0, %60 ], [ %.0, %50 ], [ %.0, %40 ], [ %.0, %37 ], [ %.0, %36 ], [ %.0, %26 ], [ %.0, %16 ], [ %.0, %13 ], [ %.0, %11 ], [ %.0, %9 ], [ %.0, %6 ]
  br label %4

6:                                                ; preds = %4
  %7 = icmp slt i8 %.019, 48
  %8 = select i1 %7, i32 1756759399, i32 2133271961
  br label %.backedge

9:                                                ; preds = %4
  %10 = icmp sgt i8 %.019, 57
  br label %.backedge

11:                                               ; preds = %4
  %12 = select i1 %.015, i32 827196763, i32 -71573094
  br label %.backedge

13:                                               ; preds = %4
  %14 = icmp eq i8 %.019, 45
  %15 = select i1 %14, i32 1381140652, i32 1270710140
  br label %.backedge

16:                                               ; preds = %4
  %17 = load i32, i32* @x.11, align 4
  %18 = load i32, i32* @y.12, align 4
  %19 = add i32 %17, -1
  %20 = mul i32 %19, %17
  %21 = and i32 %20, 1
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %23, %22
  %25 = select i1 %24, i32 -1488023637, i32 -557245686
  br label %.backedge

26:                                               ; preds = %4
  %27 = load i32, i32* @x.11, align 4
  %28 = load i32, i32* @y.12, align 4
  %29 = add i32 %27, -1
  %30 = mul i32 %29, %27
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %33, %32
  %35 = select i1 %34, i32 495251678, i32 -557245686
  br label %.backedge

36:                                               ; preds = %4
  br label %.backedge

37:                                               ; preds = %4
  %38 = tail call i32 @getchar()
  %39 = trunc i32 %38 to i8
  br label %.backedge

40:                                               ; preds = %4
  %41 = load i32, i32* @x.11, align 4
  %42 = load i32, i32* @y.12, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 964700026, i32 1099992505
  br label %.backedge

50:                                               ; preds = %4
  %51 = load i32, i32* @x.11, align 4
  %52 = load i32, i32* @y.12, align 4
  %53 = add i32 %51, -1
  %54 = mul i32 %53, %51
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %57, %56
  %59 = select i1 %58, i32 -969575253, i32 1099992505
  br label %.backedge

60:                                               ; preds = %4
  br label %.backedge

61:                                               ; preds = %4
  %62 = icmp sgt i8 %.019, 47
  %63 = select i1 %62, i32 -1368343026, i32 393360560
  br label %.backedge

64:                                               ; preds = %4
  %65 = icmp slt i8 %.019, 58
  br label %.backedge

66:                                               ; preds = %4
  %67 = select i1 %.0, i32 149232107, i32 -1689389095
  br label %.backedge

68:                                               ; preds = %4
  %.neg.neg = mul i32 %.023, 10
  %69 = xor i8 %.019, 48
  %70 = sext i8 %69 to i32
  %.neg25 = add i32 %.neg.neg, %70
  %71 = tail call i32 @getchar()
  %72 = trunc i32 %71 to i8
  br label %.backedge

73:                                               ; preds = %4
  %74 = load i32, i32* @x.11, align 4
  %75 = load i32, i32* @y.12, align 4
  %76 = add i32 %74, -1
  %77 = mul i32 %76, %74
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %80, %79
  %82 = select i1 %81, i32 -335907827, i32 1799342324
  br label %.backedge

83:                                               ; preds = %4
  %84 = mul nsw i32 %.021, %.023
  %85 = load i32, i32* @x.11, align 4
  %86 = load i32, i32* @y.12, align 4
  %87 = add i32 %85, -1
  %88 = mul i32 %87, %85
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %91, %90
  %93 = select i1 %92, i32 -449111358, i32 1799342324
  br label %.backedge

94:                                               ; preds = %4
  store i32 %5, i32* %1, align 4
  %.0..0..0.14 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.14

95:                                               ; preds = %4
  br label %.backedge

96:                                               ; preds = %4
  br label %.backedge

97:                                               ; preds = %4
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @getchar() local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s184402847.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
