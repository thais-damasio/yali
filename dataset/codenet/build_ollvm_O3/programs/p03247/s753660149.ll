; ModuleID = 'build_ollvm/programs/p03247/s753660149.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s753660149.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }

$_Z3absIxET_S0_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@m = local_unnamed_addr global i32 0, align 4
@x = global [10007 x i64] zeroinitializer, align 16
@y = global [10007 x i64] zeroinitializer, align 16
@c = local_unnamed_addr global [10007 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%lld%lld\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%lld \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s753660149.cpp, i8* null }]
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0
@x.14 = common local_unnamed_addr global i32 0
@y.15 = common local_unnamed_addr global i32 0
@x.16 = common local_unnamed_addr global i32 0
@y.17 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull @n)
  br label %10

10:                                               ; preds = %.backedge, %0
  %.077 = phi i32 [ 1, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i64 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.067 = phi i64 [ undef, %0 ], [ %.067.be, %.backedge ]
  %.065 = phi i32 [ undef, %0 ], [ %.065.be, %.backedge ]
  %.0 = phi i32 [ 2016729978, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 2016729978, label %11
    i32 854518527, label %21
    i32 -1276381077, label %33
    i32 2129735069, label %35
    i32 713076403, label %45
    i32 -109505346, label %67
    i32 -832483208, label %69
    i32 -2115833480, label %79
    i32 -543949197, label %90
    i32 -1126064891, label %91
    i32 1427924232, label %92
    i32 -257563695, label %93
    i32 -504340381, label %103
    i32 -966775953, label %113
    i32 -1858782023, label %114
    i32 281912209, label %124
    i32 297891254, label %135
    i32 1537830387, label %137
    i32 -1088335, label %143
    i32 -1990510116, label %153
    i32 -1250696767, label %164
    i32 -1629615049, label %165
    i32 968666622, label %175
    i32 665844771, label %190
    i32 -990154358, label %192
    i32 760963827, label %197
    i32 -1858077699, label %200
    i32 -1109321242, label %210
    i32 -1369626245, label %222
    i32 -1640934886, label %224
    i32 -1911409114, label %229
    i32 1921082765, label %230
    i32 638314935, label %240
    i32 -1074730930, label %250
    i32 586325908, label %251
    i32 -1825261037, label %254
    i32 150110373, label %264
    i32 -1652964440, label %274
    i32 -992317030, label %275
    i32 192276103, label %285
    i32 -254284843, label %297
    i32 -247697699, label %299
    i32 -1550858786, label %309
    i32 960477101, label %329
    i32 -1555424770, label %331
    i32 375605102, label %337
    i32 1818133113, label %342
    i32 -1756823189, label %347
    i32 624703037, label %348
    i32 1699411220, label %358
    i32 -467601312, label %372
    i32 -322157718, label %374
    i32 -1271605603, label %384
    i32 -1687632733, label %398
    i32 -1742817985, label %399
    i32 1709838283, label %409
    i32 -916813468, label %423
    i32 1357319252, label %424
    i32 -244207114, label %434
    i32 401844330, label %444
    i32 -748869517, label %445
    i32 1222465051, label %446
    i32 -1575986243, label %448
    i32 -1168137627, label %449
    i32 -1940896608, label %450
    i32 -769403597, label %451
    i32 -1708738022, label %452
    i32 -443541572, label %453
    i32 1126447025, label %458
    i32 1336040294, label %460
    i32 -956989971, label %461
    i32 293027975, label %462
    i32 911405118, label %464
    i32 1198708985, label %465
    i32 450912278, label %466
    i32 -1316047339, label %467
    i32 605101637, label %468
    i32 -1435304618, label %469
    i32 -1884245549, label %479
    i32 -527168231, label %480
    i32 1169398205, label %485
    i32 -2070643317, label %490
  ]

.backedge:                                        ; preds = %10, %490, %485, %480, %479, %469, %468, %467, %466, %465, %464, %462, %461, %460, %458, %453, %452, %450, %449, %448, %446, %445, %444, %434, %424, %423, %409, %399, %398, %384, %374, %372, %358, %348, %347, %342, %337, %331, %329, %309, %299, %297, %285, %275, %274, %264, %254, %251, %250, %240, %230, %229, %224, %222, %210, %200, %197, %192, %190, %175, %165, %164, %153, %143, %137, %135, %124, %114, %113, %103, %93, %92, %91, %90, %79, %69, %67, %45, %35, %33, %21, %11
  %.077.be = phi i32 [ %.077, %10 ], [ %.077, %490 ], [ %.077, %485 ], [ %.077, %480 ], [ %.077, %479 ], [ %.077, %469 ], [ %.077, %468 ], [ %.077, %467 ], [ %.077, %466 ], [ %.077, %465 ], [ %.077, %464 ], [ %.077, %462 ], [ %.077, %461 ], [ %.077, %460 ], [ %.077, %458 ], [ %.077, %453 ], [ %.077, %452 ], [ %.077, %450 ], [ %.077, %449 ], [ %.077, %448 ], [ %.077, %446 ], [ %.077, %445 ], [ %.077, %444 ], [ %.077, %434 ], [ %.077, %424 ], [ %.077, %423 ], [ %.077, %409 ], [ %.077, %399 ], [ %.077, %398 ], [ %.077, %384 ], [ %.077, %374 ], [ %.077, %372 ], [ %.077, %358 ], [ %.077, %348 ], [ %.077, %347 ], [ %.077, %342 ], [ %.077, %337 ], [ %.077, %331 ], [ %.077, %329 ], [ %.077, %309 ], [ %.077, %299 ], [ %.077, %297 ], [ %.077, %285 ], [ %.077, %275 ], [ %.077, %274 ], [ %.077, %264 ], [ %.077, %254 ], [ %.077, %251 ], [ %.077, %250 ], [ %.077, %240 ], [ %.077, %230 ], [ %.077, %229 ], [ %.077, %224 ], [ %.077, %222 ], [ %.077, %210 ], [ %.077, %200 ], [ %.077, %197 ], [ %.077, %192 ], [ %.077, %190 ], [ %.077, %175 ], [ %.077, %165 ], [ %.077, %164 ], [ %.077, %153 ], [ %.077, %143 ], [ %.077, %137 ], [ %.077, %135 ], [ %.077, %124 ], [ %.077, %114 ], [ %.077, %113 ], [ %.077, %103 ], [ %.077, %93 ], [ %.neg90, %92 ], [ %.077, %91 ], [ %.077, %90 ], [ %.077, %79 ], [ %.077, %69 ], [ %.077, %67 ], [ %.077, %45 ], [ %.077, %35 ], [ %.077, %33 ], [ %.077, %21 ], [ %.077, %11 ]
  %.075.be = phi i32 [ %.075, %10 ], [ %.075, %490 ], [ %.075, %485 ], [ %.075, %480 ], [ %.075, %479 ], [ %.075, %469 ], [ %.075, %468 ], [ %.075, %467 ], [ %.075, %466 ], [ %.075, %465 ], [ %.075, %464 ], [ %463, %462 ], [ %.075, %461 ], [ 36, %460 ], [ %.075, %458 ], [ %.075, %453 ], [ %.075, %452 ], [ %.075, %450 ], [ %.075, %449 ], [ %.075, %448 ], [ %.075, %446 ], [ %.075, %445 ], [ %.075, %444 ], [ %.075, %434 ], [ %.075, %424 ], [ %.075, %423 ], [ %.075, %409 ], [ %.075, %399 ], [ %.075, %398 ], [ %.075, %384 ], [ %.075, %374 ], [ %.075, %372 ], [ %.075, %358 ], [ %.075, %348 ], [ %.075, %347 ], [ %.075, %342 ], [ %.075, %337 ], [ %.075, %331 ], [ %.075, %329 ], [ %.075, %309 ], [ %.075, %299 ], [ %.075, %297 ], [ %.075, %285 ], [ %.075, %275 ], [ %.075, %274 ], [ %.075, %264 ], [ %.075, %254 ], [ %.075, %251 ], [ %.075, %250 ], [ %.075, %240 ], [ %.075, %230 ], [ %.075, %229 ], [ %.075, %224 ], [ %.075, %222 ], [ %.075, %210 ], [ %.075, %200 ], [ %.075, %197 ], [ %.075, %192 ], [ %.075, %190 ], [ %.075, %175 ], [ %.075, %165 ], [ %.075, %164 ], [ %154, %153 ], [ %.075, %143 ], [ %.075, %137 ], [ %.075, %135 ], [ %.075, %124 ], [ %.075, %114 ], [ %.075, %113 ], [ 36, %103 ], [ %.075, %93 ], [ %.075, %92 ], [ %.075, %91 ], [ %.075, %90 ], [ %.075, %79 ], [ %.075, %69 ], [ %.075, %67 ], [ %.075, %45 ], [ %.075, %35 ], [ %.075, %33 ], [ %.075, %21 ], [ %.075, %11 ]
  %.073.be = phi i32 [ %.073, %10 ], [ %.073, %490 ], [ %.073, %485 ], [ %.073, %480 ], [ %.073, %479 ], [ %.073, %469 ], [ %.073, %468 ], [ %.073, %467 ], [ %.073, %466 ], [ %.073, %465 ], [ %.073, %464 ], [ %.073, %462 ], [ %.073, %461 ], [ %.073, %460 ], [ %.073, %458 ], [ %.073, %453 ], [ %.073, %452 ], [ %.073, %450 ], [ %.073, %449 ], [ %.073, %448 ], [ %.073, %446 ], [ %.073, %445 ], [ %.073, %444 ], [ %.073, %434 ], [ %.073, %424 ], [ %.073, %423 ], [ %.073, %409 ], [ %.073, %399 ], [ %.073, %398 ], [ %.073, %384 ], [ %.073, %374 ], [ %.073, %372 ], [ %.073, %358 ], [ %.073, %348 ], [ %.073, %347 ], [ %.073, %342 ], [ %.073, %337 ], [ %.073, %331 ], [ %.073, %329 ], [ %.073, %309 ], [ %.073, %299 ], [ %.073, %297 ], [ %.073, %285 ], [ %.073, %275 ], [ %.073, %274 ], [ %.073, %264 ], [ %.073, %254 ], [ %.073, %251 ], [ %.073, %250 ], [ %.073, %240 ], [ %.073, %230 ], [ %.neg89, %229 ], [ %.073, %224 ], [ %.073, %222 ], [ %.073, %210 ], [ %.073, %200 ], [ 1, %197 ], [ %.073, %192 ], [ %.073, %190 ], [ %.073, %175 ], [ %.073, %165 ], [ %.073, %164 ], [ %.073, %153 ], [ %.073, %143 ], [ %.073, %137 ], [ %.073, %135 ], [ %.073, %124 ], [ %.073, %114 ], [ %.073, %113 ], [ %.073, %103 ], [ %.073, %93 ], [ %.073, %92 ], [ %.073, %91 ], [ %.073, %90 ], [ %.073, %79 ], [ %.073, %69 ], [ %.073, %67 ], [ %.073, %45 ], [ %.073, %35 ], [ %.073, %33 ], [ %.073, %21 ], [ %.073, %11 ]
  %.071.be = phi i32 [ %.071, %10 ], [ %.071, %490 ], [ %.071, %485 ], [ %.071, %480 ], [ %.071, %479 ], [ %.071, %469 ], [ %.071, %468 ], [ %.071, %467 ], [ 1, %466 ], [ %.071, %465 ], [ %.071, %464 ], [ %.071, %462 ], [ %.071, %461 ], [ %.071, %460 ], [ %.071, %458 ], [ %.071, %453 ], [ %.071, %452 ], [ %.071, %450 ], [ %.neg, %449 ], [ %.071, %448 ], [ %.071, %446 ], [ %.071, %445 ], [ %.071, %444 ], [ %.071, %434 ], [ %.071, %424 ], [ %.071, %423 ], [ %.071, %409 ], [ %.071, %399 ], [ %.071, %398 ], [ %.071, %384 ], [ %.071, %374 ], [ %.071, %372 ], [ %.071, %358 ], [ %.071, %348 ], [ %.071, %347 ], [ %.071, %342 ], [ %.071, %337 ], [ %.071, %331 ], [ %.071, %329 ], [ %.071, %309 ], [ %.071, %299 ], [ %.071, %297 ], [ %.071, %285 ], [ %.071, %275 ], [ %.071, %274 ], [ %.071, %264 ], [ %.071, %254 ], [ %.071, %251 ], [ %.071, %250 ], [ 1, %240 ], [ %.071, %230 ], [ %.071, %229 ], [ %.071, %224 ], [ %.071, %222 ], [ %.071, %210 ], [ %.071, %200 ], [ %.071, %197 ], [ %.071, %192 ], [ %.071, %190 ], [ %.071, %175 ], [ %.071, %165 ], [ %.071, %164 ], [ %.071, %153 ], [ %.071, %143 ], [ %.071, %137 ], [ %.071, %135 ], [ %.071, %124 ], [ %.071, %114 ], [ %.071, %113 ], [ %.071, %103 ], [ %.071, %93 ], [ %.071, %92 ], [ %.071, %91 ], [ %.071, %90 ], [ %.071, %79 ], [ %.071, %69 ], [ %.071, %67 ], [ %.071, %45 ], [ %.071, %35 ], [ %.071, %33 ], [ %.071, %21 ], [ %.071, %11 ]
  %.069.be = phi i64 [ %.069, %10 ], [ %.069, %490 ], [ %.069, %485 ], [ %.069, %480 ], [ %.069, %479 ], [ %.069, %469 ], [ %.069, %468 ], [ 0, %467 ], [ %.069, %466 ], [ %.069, %465 ], [ %.069, %464 ], [ %.069, %462 ], [ %.069, %461 ], [ %.069, %460 ], [ %.069, %458 ], [ %.069, %453 ], [ %.069, %452 ], [ %.069, %450 ], [ %.069, %449 ], [ %.069, %448 ], [ %.069, %446 ], [ %.069, %445 ], [ %.069, %444 ], [ %.069, %434 ], [ %.069, %424 ], [ %.069, %423 ], [ %.069, %409 ], [ %.069, %399 ], [ %.069, %398 ], [ %.069, %384 ], [ %.069, %374 ], [ %.069, %372 ], [ %.069, %358 ], [ %.069, %348 ], [ %.069, %347 ], [ %346, %342 ], [ %341, %337 ], [ %.069, %331 ], [ %.069, %329 ], [ %.069, %309 ], [ %.069, %299 ], [ %.069, %297 ], [ %.069, %285 ], [ %.069, %275 ], [ %.069, %274 ], [ 0, %264 ], [ %.069, %254 ], [ %.069, %251 ], [ %.069, %250 ], [ %.069, %240 ], [ %.069, %230 ], [ %.069, %229 ], [ %.069, %224 ], [ %.069, %222 ], [ %.069, %210 ], [ %.069, %200 ], [ %.069, %197 ], [ %.069, %192 ], [ %.069, %190 ], [ %.069, %175 ], [ %.069, %165 ], [ %.069, %164 ], [ %.069, %153 ], [ %.069, %143 ], [ %.069, %137 ], [ %.069, %135 ], [ %.069, %124 ], [ %.069, %114 ], [ %.069, %113 ], [ %.069, %103 ], [ %.069, %93 ], [ %.069, %92 ], [ %.069, %91 ], [ %.069, %90 ], [ %.069, %79 ], [ %.069, %69 ], [ %.069, %67 ], [ %.069, %45 ], [ %.069, %35 ], [ %.069, %33 ], [ %.069, %21 ], [ %.069, %11 ]
  %.067.be = phi i64 [ %.067, %10 ], [ %.067, %490 ], [ %489, %485 ], [ %484, %480 ], [ %.067, %479 ], [ %.067, %469 ], [ %.067, %468 ], [ 0, %467 ], [ %.067, %466 ], [ %.067, %465 ], [ %.067, %464 ], [ %.067, %462 ], [ %.067, %461 ], [ %.067, %460 ], [ %.067, %458 ], [ %.067, %453 ], [ %.067, %452 ], [ %.067, %450 ], [ %.067, %449 ], [ %.067, %448 ], [ %.067, %446 ], [ %.067, %445 ], [ %.067, %444 ], [ %.067, %434 ], [ %.067, %424 ], [ %.067, %423 ], [ %413, %409 ], [ %.067, %399 ], [ %.067, %398 ], [ %388, %384 ], [ %.067, %374 ], [ %.067, %372 ], [ %.067, %358 ], [ %.067, %348 ], [ %.067, %347 ], [ %.067, %342 ], [ %.067, %337 ], [ %.067, %331 ], [ %.067, %329 ], [ %.067, %309 ], [ %.067, %299 ], [ %.067, %297 ], [ %.067, %285 ], [ %.067, %275 ], [ %.067, %274 ], [ 0, %264 ], [ %.067, %254 ], [ %.067, %251 ], [ %.067, %250 ], [ %.067, %240 ], [ %.067, %230 ], [ %.067, %229 ], [ %.067, %224 ], [ %.067, %222 ], [ %.067, %210 ], [ %.067, %200 ], [ %.067, %197 ], [ %.067, %192 ], [ %.067, %190 ], [ %.067, %175 ], [ %.067, %165 ], [ %.067, %164 ], [ %.067, %153 ], [ %.067, %143 ], [ %.067, %137 ], [ %.067, %135 ], [ %.067, %124 ], [ %.067, %114 ], [ %.067, %113 ], [ %.067, %103 ], [ %.067, %93 ], [ %.067, %92 ], [ %.067, %91 ], [ %.067, %90 ], [ %.067, %79 ], [ %.067, %69 ], [ %.067, %67 ], [ %.067, %45 ], [ %.067, %35 ], [ %.067, %33 ], [ %.067, %21 ], [ %.067, %11 ]
  %.065.be = phi i32 [ %.065, %10 ], [ %.065, %490 ], [ %.065, %485 ], [ %.065, %480 ], [ %.065, %479 ], [ %.065, %469 ], [ %.065, %468 ], [ 1, %467 ], [ %.065, %466 ], [ %.065, %465 ], [ %.065, %464 ], [ %.065, %462 ], [ %.065, %461 ], [ %.065, %460 ], [ %.065, %458 ], [ %.065, %453 ], [ %.065, %452 ], [ %.065, %450 ], [ %.065, %449 ], [ %.065, %448 ], [ %447, %446 ], [ %.065, %445 ], [ %.065, %444 ], [ %.065, %434 ], [ %.065, %424 ], [ %.065, %423 ], [ %.065, %409 ], [ %.065, %399 ], [ %.065, %398 ], [ %.065, %384 ], [ %.065, %374 ], [ %.065, %372 ], [ %.065, %358 ], [ %.065, %348 ], [ %.065, %347 ], [ %.065, %342 ], [ %.065, %337 ], [ %.065, %331 ], [ %.065, %329 ], [ %.065, %309 ], [ %.065, %299 ], [ %.065, %297 ], [ %.065, %285 ], [ %.065, %275 ], [ %.065, %274 ], [ 1, %264 ], [ %.065, %254 ], [ %.065, %251 ], [ %.065, %250 ], [ %.065, %240 ], [ %.065, %230 ], [ %.065, %229 ], [ %.065, %224 ], [ %.065, %222 ], [ %.065, %210 ], [ %.065, %200 ], [ %.065, %197 ], [ %.065, %192 ], [ %.065, %190 ], [ %.065, %175 ], [ %.065, %165 ], [ %.065, %164 ], [ %.065, %153 ], [ %.065, %143 ], [ %.065, %137 ], [ %.065, %135 ], [ %.065, %124 ], [ %.065, %114 ], [ %.065, %113 ], [ %.065, %103 ], [ %.065, %93 ], [ %.065, %92 ], [ %.065, %91 ], [ %.065, %90 ], [ %.065, %79 ], [ %.065, %69 ], [ %.065, %67 ], [ %.065, %45 ], [ %.065, %35 ], [ %.065, %33 ], [ %.065, %21 ], [ %.065, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ -244207114, %490 ], [ 1709838283, %485 ], [ -1271605603, %480 ], [ 1699411220, %479 ], [ -1550858786, %469 ], [ 192276103, %468 ], [ 150110373, %467 ], [ 638314935, %466 ], [ -1109321242, %465 ], [ 968666622, %464 ], [ -1990510116, %462 ], [ 281912209, %461 ], [ -504340381, %460 ], [ -2115833480, %458 ], [ 713076403, %453 ], [ 854518527, %452 ], [ -769403597, %450 ], [ 586325908, %449 ], [ -1168137627, %448 ], [ -992317030, %446 ], [ 1222465051, %445 ], [ -748869517, %444 ], [ %443, %434 ], [ %433, %424 ], [ 1357319252, %423 ], [ %422, %409 ], [ %408, %399 ], [ 1357319252, %398 ], [ %397, %384 ], [ %383, %374 ], [ %373, %372 ], [ %371, %358 ], [ %357, %348 ], [ -748869517, %347 ], [ -1756823189, %342 ], [ -1756823189, %337 ], [ %336, %331 ], [ %330, %329 ], [ %328, %309 ], [ %308, %299 ], [ %298, %297 ], [ %296, %285 ], [ %284, %275 ], [ -992317030, %274 ], [ %273, %264 ], [ %263, %254 ], [ %253, %251 ], [ 586325908, %250 ], [ %249, %240 ], [ %239, %230 ], [ -1858077699, %229 ], [ -1911409114, %224 ], [ %223, %222 ], [ %221, %210 ], [ %209, %200 ], [ -1858077699, %197 ], [ 760963827, %192 ], [ %191, %190 ], [ %189, %175 ], [ %174, %165 ], [ -1858782023, %164 ], [ %163, %153 ], [ %152, %143 ], [ -1088335, %137 ], [ %136, %135 ], [ %134, %124 ], [ %123, %114 ], [ -1858782023, %113 ], [ %112, %103 ], [ %102, %93 ], [ 2016729978, %92 ], [ 1427924232, %91 ], [ -769403597, %90 ], [ %89, %79 ], [ %78, %69 ], [ %68, %67 ], [ %66, %45 ], [ %44, %35 ], [ %34, %33 ], [ %32, %21 ], [ %20, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = load i32, i32* @x.12, align 4
  %13 = load i32, i32* @y.13, align 4
  %14 = add i32 %12, -1
  %15 = mul i32 %14, %12
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %18, %17
  %20 = select i1 %19, i32 854518527, i32 -1708738022
  br label %.backedge

21:                                               ; preds = %10
  %22 = load i32, i32* @n, align 4
  %23 = icmp sle i32 %.077, %22
  store i1 %23, i1* %8, align 1
  %24 = load i32, i32* @x.12, align 4
  %25 = load i32, i32* @y.13, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 -1276381077, i32 -1708738022
  br label %.backedge

33:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %34 = select i1 %.0..0..0., i32 2129735069, i32 -257563695
  br label %.backedge

35:                                               ; preds = %10
  %36 = load i32, i32* @x.12, align 4
  %37 = load i32, i32* @y.13, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 713076403, i32 -443541572
  br label %.backedge

45:                                               ; preds = %10
  %46 = sext i32 %.077 to i64
  %47 = getelementptr inbounds [10007 x i64], [10007 x i64]* @x, i64 0, i64 %46
  %48 = getelementptr inbounds [10007 x i64], [10007 x i64]* @y, i64 0, i64 %46
  %49 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64* nonnull %47, i64* nonnull %48)
  %50 = load i64, i64* getelementptr inbounds ([10007 x i64], [10007 x i64]* @x, i64 0, i64 1), align 8
  %51 = load i64, i64* getelementptr inbounds ([10007 x i64], [10007 x i64]* @y, i64 0, i64 1), align 8
  %52 = add i64 %51, %50
  %53 = load i64, i64* %47, align 8
  %54 = load i64, i64* %48, align 8
  %.neg92 = xor i64 %52, -1
  %55 = add i64 %53, %.neg92
  %.neg91 = add i64 %55, %54
  %56 = and i64 %.neg91, 1
  %57 = icmp eq i64 %56, 0
  store i1 %57, i1* %7, align 1
  %58 = load i32, i32* @x.12, align 4
  %59 = load i32, i32* @y.13, align 4
  %60 = add i32 %58, -1
  %61 = mul i32 %60, %58
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %64, %63
  %66 = select i1 %65, i32 -109505346, i32 -443541572
  br label %.backedge

67:                                               ; preds = %10
  %.0..0..0.58 = load volatile i1, i1* %7, align 1
  %68 = select i1 %.0..0..0.58, i32 -832483208, i32 -1126064891
  br label %.backedge

69:                                               ; preds = %10
  %70 = load i32, i32* @x.12, align 4
  %71 = load i32, i32* @y.13, align 4
  %72 = add i32 %70, -1
  %73 = mul i32 %72, %70
  %74 = and i32 %73, 1
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %76, %75
  %78 = select i1 %77, i32 -2115833480, i32 1126447025
  br label %.backedge

79:                                               ; preds = %10
  %80 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %81 = load i32, i32* @x.12, align 4
  %82 = load i32, i32* @y.13, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 -543949197, i32 1126447025
  br label %.backedge

90:                                               ; preds = %10
  br label %.backedge

91:                                               ; preds = %10
  br label %.backedge

92:                                               ; preds = %10
  %.neg90 = add i32 %.077, 1
  br label %.backedge

93:                                               ; preds = %10
  %94 = load i32, i32* @x.12, align 4
  %95 = load i32, i32* @y.13, align 4
  %96 = add i32 %94, -1
  %97 = mul i32 %96, %94
  %98 = and i32 %97, 1
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %100, %99
  %102 = select i1 %101, i32 -504340381, i32 1336040294
  br label %.backedge

103:                                              ; preds = %10
  store i32 36, i32* @m, align 4
  %104 = load i32, i32* @x.12, align 4
  %105 = load i32, i32* @y.13, align 4
  %106 = add i32 %104, -1
  %107 = mul i32 %106, %104
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %110, %109
  %112 = select i1 %111, i32 -966775953, i32 1336040294
  br label %.backedge

113:                                              ; preds = %10
  br label %.backedge

114:                                              ; preds = %10
  %115 = load i32, i32* @x.12, align 4
  %116 = load i32, i32* @y.13, align 4
  %117 = add i32 %115, -1
  %118 = mul i32 %117, %115
  %119 = and i32 %118, 1
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %121, %120
  %123 = select i1 %122, i32 281912209, i32 -956989971
  br label %.backedge

124:                                              ; preds = %10
  %125 = icmp ne i32 %.075, 0
  store i1 %125, i1* %6, align 1
  %126 = load i32, i32* @x.12, align 4
  %127 = load i32, i32* @y.13, align 4
  %128 = add i32 %126, -1
  %129 = mul i32 %128, %126
  %130 = and i32 %129, 1
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %132, %131
  %134 = select i1 %133, i32 297891254, i32 -956989971
  br label %.backedge

135:                                              ; preds = %10
  %.0..0..0.59 = load volatile i1, i1* %6, align 1
  %136 = select i1 %.0..0..0.59, i32 1537830387, i32 -1629615049
  br label %.backedge

137:                                              ; preds = %10
  %138 = sub i32 36, %.075
  %139 = zext i32 %138 to i64
  %140 = shl nuw i64 1, %139
  %141 = sext i32 %.075 to i64
  %142 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %141
  store i64 %140, i64* %142, align 8
  br label %.backedge

143:                                              ; preds = %10
  %144 = load i32, i32* @x.12, align 4
  %145 = load i32, i32* @y.13, align 4
  %146 = add i32 %144, -1
  %147 = mul i32 %146, %144
  %148 = and i32 %147, 1
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %150, %149
  %152 = select i1 %151, i32 -1990510116, i32 293027975
  br label %.backedge

153:                                              ; preds = %10
  %154 = add i32 %.075, -1
  %155 = load i32, i32* @x.12, align 4
  %156 = load i32, i32* @y.13, align 4
  %157 = add i32 %155, -1
  %158 = mul i32 %157, %155
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %161, %160
  %163 = select i1 %162, i32 -1250696767, i32 293027975
  br label %.backedge

164:                                              ; preds = %10
  br label %.backedge

165:                                              ; preds = %10
  %166 = load i32, i32* @x.12, align 4
  %167 = load i32, i32* @y.13, align 4
  %168 = add i32 %166, -1
  %169 = mul i32 %168, %166
  %170 = and i32 %169, 1
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %172, %171
  %174 = select i1 %173, i32 968666622, i32 911405118
  br label %.backedge

175:                                              ; preds = %10
  %176 = load i64, i64* getelementptr inbounds ([10007 x i64], [10007 x i64]* @x, i64 0, i64 1), align 8
  %177 = load i64, i64* getelementptr inbounds ([10007 x i64], [10007 x i64]* @y, i64 0, i64 1), align 8
  %178 = add i64 %177, %176
  %179 = and i64 %178, 1
  %180 = icmp eq i64 %179, 0
  store i1 %180, i1* %5, align 1
  %181 = load i32, i32* @x.12, align 4
  %182 = load i32, i32* @y.13, align 4
  %183 = add i32 %181, -1
  %184 = mul i32 %183, %181
  %185 = and i32 %184, 1
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %187, %186
  %189 = select i1 %188, i32 665844771, i32 911405118
  br label %.backedge

190:                                              ; preds = %10
  %.0..0..0.60 = load volatile i1, i1* %5, align 1
  %191 = select i1 %.0..0..0.60, i32 -990154358, i32 760963827
  br label %.backedge

192:                                              ; preds = %10
  %193 = load i32, i32* @m, align 4
  %194 = add i32 %193, 1
  store i32 %194, i32* @m, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %195
  store i64 1, i64* %196, align 8
  br label %.backedge

197:                                              ; preds = %10
  %198 = load i32, i32* @m, align 4
  %199 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %198)
  br label %.backedge

200:                                              ; preds = %10
  %201 = load i32, i32* @x.12, align 4
  %202 = load i32, i32* @y.13, align 4
  %203 = add i32 %201, -1
  %204 = mul i32 %203, %201
  %205 = and i32 %204, 1
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %207, %206
  %209 = select i1 %208, i32 -1109321242, i32 1198708985
  br label %.backedge

210:                                              ; preds = %10
  %211 = load i32, i32* @m, align 4
  %212 = icmp sle i32 %.073, %211
  store i1 %212, i1* %4, align 1
  %213 = load i32, i32* @x.12, align 4
  %214 = load i32, i32* @y.13, align 4
  %215 = add i32 %213, -1
  %216 = mul i32 %215, %213
  %217 = and i32 %216, 1
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %219, %218
  %221 = select i1 %220, i32 -1369626245, i32 1198708985
  br label %.backedge

222:                                              ; preds = %10
  %.0..0..0.61 = load volatile i1, i1* %4, align 1
  %223 = select i1 %.0..0..0.61, i32 -1640934886, i32 1921082765
  br label %.backedge

224:                                              ; preds = %10
  %225 = sext i32 %.073 to i64
  %226 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %225
  %227 = load i64, i64* %226, align 8
  %228 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 %227)
  br label %.backedge

229:                                              ; preds = %10
  %.neg89 = add i32 %.073, 1
  br label %.backedge

230:                                              ; preds = %10
  %231 = load i32, i32* @x.12, align 4
  %232 = load i32, i32* @y.13, align 4
  %233 = add i32 %231, -1
  %234 = mul i32 %233, %231
  %235 = and i32 %234, 1
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %237, %236
  %239 = select i1 %238, i32 638314935, i32 450912278
  br label %.backedge

240:                                              ; preds = %10
  %putchar88 = tail call i32 @putchar(i32 10)
  %241 = load i32, i32* @x.12, align 4
  %242 = load i32, i32* @y.13, align 4
  %243 = add i32 %241, -1
  %244 = mul i32 %243, %241
  %245 = and i32 %244, 1
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %247, %246
  %249 = select i1 %248, i32 -1074730930, i32 450912278
  br label %.backedge

250:                                              ; preds = %10
  br label %.backedge

251:                                              ; preds = %10
  %252 = load i32, i32* @n, align 4
  %.not = icmp sgt i32 %.071, %252
  %253 = select i1 %.not, i32 -1940896608, i32 -1825261037
  br label %.backedge

254:                                              ; preds = %10
  %255 = load i32, i32* @x.12, align 4
  %256 = load i32, i32* @y.13, align 4
  %257 = add i32 %255, -1
  %258 = mul i32 %257, %255
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %261, %260
  %263 = select i1 %262, i32 150110373, i32 -1316047339
  br label %.backedge

264:                                              ; preds = %10
  %265 = load i32, i32* @x.12, align 4
  %266 = load i32, i32* @y.13, align 4
  %267 = add i32 %265, -1
  %268 = mul i32 %267, %265
  %269 = and i32 %268, 1
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %271, %270
  %273 = select i1 %272, i32 -1652964440, i32 -1316047339
  br label %.backedge

274:                                              ; preds = %10
  br label %.backedge

275:                                              ; preds = %10
  %276 = load i32, i32* @x.12, align 4
  %277 = load i32, i32* @y.13, align 4
  %278 = add i32 %276, -1
  %279 = mul i32 %278, %276
  %280 = and i32 %279, 1
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %282, %281
  %284 = select i1 %283, i32 192276103, i32 605101637
  br label %.backedge

285:                                              ; preds = %10
  %286 = load i32, i32* @m, align 4
  %287 = icmp sle i32 %.065, %286
  store i1 %287, i1* %3, align 1
  %288 = load i32, i32* @x.12, align 4
  %289 = load i32, i32* @y.13, align 4
  %290 = add i32 %288, -1
  %291 = mul i32 %290, %288
  %292 = and i32 %291, 1
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %294, %293
  %296 = select i1 %295, i32 -254284843, i32 605101637
  br label %.backedge

297:                                              ; preds = %10
  %.0..0..0.62 = load volatile i1, i1* %3, align 1
  %298 = select i1 %.0..0..0.62, i32 -247697699, i32 -1575986243
  br label %.backedge

299:                                              ; preds = %10
  %300 = load i32, i32* @x.12, align 4
  %301 = load i32, i32* @y.13, align 4
  %302 = add i32 %300, -1
  %303 = mul i32 %302, %300
  %304 = and i32 %303, 1
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %306, %305
  %308 = select i1 %307, i32 -1550858786, i32 -1435304618
  br label %.backedge

309:                                              ; preds = %10
  %310 = sext i32 %.071 to i64
  %311 = getelementptr inbounds [10007 x i64], [10007 x i64]* @x, i64 0, i64 %310
  %312 = load i64, i64* %311, align 8
  %313 = sub i64 %.069, %312
  %314 = tail call i64 @_Z3absIxET_S0_(i64 %313)
  %315 = getelementptr inbounds [10007 x i64], [10007 x i64]* @y, i64 0, i64 %310
  %316 = load i64, i64* %315, align 8
  %317 = sub i64 %.067, %316
  %318 = tail call i64 @_Z3absIxET_S0_(i64 %317)
  %319 = icmp sgt i64 %314, %318
  store i1 %319, i1* %2, align 1
  %320 = load i32, i32* @x.12, align 4
  %321 = load i32, i32* @y.13, align 4
  %322 = add i32 %320, -1
  %323 = mul i32 %322, %320
  %324 = and i32 %323, 1
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %326, %325
  %328 = select i1 %327, i32 960477101, i32 -1435304618
  br label %.backedge

329:                                              ; preds = %10
  %.0..0..0.63 = load volatile i1, i1* %2, align 1
  %330 = select i1 %.0..0..0.63, i32 -1555424770, i32 624703037
  br label %.backedge

331:                                              ; preds = %10
  %332 = sext i32 %.071 to i64
  %333 = getelementptr inbounds [10007 x i64], [10007 x i64]* @x, i64 0, i64 %332
  %334 = load i64, i64* %333, align 8
  %335 = icmp sgt i64 %334, %.069
  %336 = select i1 %335, i32 375605102, i32 1818133113
  br label %.backedge

337:                                              ; preds = %10
  %putchar87 = tail call i32 @putchar(i32 82)
  %338 = sext i32 %.065 to i64
  %339 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %338
  %340 = load i64, i64* %339, align 8
  %341 = add i64 %340, %.069
  br label %.backedge

342:                                              ; preds = %10
  %putchar86 = tail call i32 @putchar(i32 76)
  %343 = sext i32 %.065 to i64
  %344 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %343
  %345 = load i64, i64* %344, align 8
  %346 = sub i64 %.069, %345
  br label %.backedge

347:                                              ; preds = %10
  br label %.backedge

348:                                              ; preds = %10
  %349 = load i32, i32* @x.12, align 4
  %350 = load i32, i32* @y.13, align 4
  %351 = add i32 %349, -1
  %352 = mul i32 %351, %349
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %355, %354
  %357 = select i1 %356, i32 1699411220, i32 -1884245549
  br label %.backedge

358:                                              ; preds = %10
  %359 = sext i32 %.071 to i64
  %360 = getelementptr inbounds [10007 x i64], [10007 x i64]* @y, i64 0, i64 %359
  %361 = load i64, i64* %360, align 8
  %362 = icmp sgt i64 %361, %.067
  store i1 %362, i1* %1, align 1
  %363 = load i32, i32* @x.12, align 4
  %364 = load i32, i32* @y.13, align 4
  %365 = add i32 %363, -1
  %366 = mul i32 %365, %363
  %367 = and i32 %366, 1
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %369, %368
  %371 = select i1 %370, i32 -467601312, i32 -1884245549
  br label %.backedge

372:                                              ; preds = %10
  %.0..0..0.64 = load volatile i1, i1* %1, align 1
  %373 = select i1 %.0..0..0.64, i32 -322157718, i32 -1742817985
  br label %.backedge

374:                                              ; preds = %10
  %375 = load i32, i32* @x.12, align 4
  %376 = load i32, i32* @y.13, align 4
  %377 = add i32 %375, -1
  %378 = mul i32 %377, %375
  %379 = and i32 %378, 1
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %381, %380
  %383 = select i1 %382, i32 -1271605603, i32 -527168231
  br label %.backedge

384:                                              ; preds = %10
  %putchar85 = tail call i32 @putchar(i32 85)
  %385 = sext i32 %.065 to i64
  %386 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %385
  %387 = load i64, i64* %386, align 8
  %388 = add i64 %387, %.067
  %389 = load i32, i32* @x.12, align 4
  %390 = load i32, i32* @y.13, align 4
  %391 = add i32 %389, -1
  %392 = mul i32 %391, %389
  %393 = and i32 %392, 1
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %395, %394
  %397 = select i1 %396, i32 -1687632733, i32 -527168231
  br label %.backedge

398:                                              ; preds = %10
  br label %.backedge

399:                                              ; preds = %10
  %400 = load i32, i32* @x.12, align 4
  %401 = load i32, i32* @y.13, align 4
  %402 = add i32 %400, -1
  %403 = mul i32 %402, %400
  %404 = and i32 %403, 1
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %406, %405
  %408 = select i1 %407, i32 1709838283, i32 1169398205
  br label %.backedge

409:                                              ; preds = %10
  %putchar84 = tail call i32 @putchar(i32 68)
  %410 = sext i32 %.065 to i64
  %411 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %410
  %412 = load i64, i64* %411, align 8
  %413 = sub i64 %.067, %412
  %414 = load i32, i32* @x.12, align 4
  %415 = load i32, i32* @y.13, align 4
  %416 = add i32 %414, -1
  %417 = mul i32 %416, %414
  %418 = and i32 %417, 1
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %420, %419
  %422 = select i1 %421, i32 -916813468, i32 1169398205
  br label %.backedge

423:                                              ; preds = %10
  br label %.backedge

424:                                              ; preds = %10
  %425 = load i32, i32* @x.12, align 4
  %426 = load i32, i32* @y.13, align 4
  %427 = add i32 %425, -1
  %428 = mul i32 %427, %425
  %429 = and i32 %428, 1
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %431, %430
  %433 = select i1 %432, i32 -244207114, i32 -2070643317
  br label %.backedge

434:                                              ; preds = %10
  %435 = load i32, i32* @x.12, align 4
  %436 = load i32, i32* @y.13, align 4
  %437 = add i32 %435, -1
  %438 = mul i32 %437, %435
  %439 = and i32 %438, 1
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %441, %440
  %443 = select i1 %442, i32 401844330, i32 -2070643317
  br label %.backedge

444:                                              ; preds = %10
  br label %.backedge

445:                                              ; preds = %10
  br label %.backedge

446:                                              ; preds = %10
  %447 = add i32 %.065, 1
  br label %.backedge

448:                                              ; preds = %10
  %putchar83 = tail call i32 @putchar(i32 10)
  br label %.backedge

449:                                              ; preds = %10
  %.neg = add i32 %.071, 1
  br label %.backedge

450:                                              ; preds = %10
  br label %.backedge

451:                                              ; preds = %10
  ret i32 0

452:                                              ; preds = %10
  br label %.backedge

453:                                              ; preds = %10
  %454 = sext i32 %.077 to i64
  %455 = getelementptr inbounds [10007 x i64], [10007 x i64]* @x, i64 0, i64 %454
  %456 = getelementptr inbounds [10007 x i64], [10007 x i64]* @y, i64 0, i64 %454
  %457 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64* nonnull %455, i64* nonnull %456)
  br label %.backedge

458:                                              ; preds = %10
  %459 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  br label %.backedge

460:                                              ; preds = %10
  store i32 36, i32* @m, align 4
  br label %.backedge

461:                                              ; preds = %10
  br label %.backedge

462:                                              ; preds = %10
  %463 = add i32 %.075, -1
  br label %.backedge

464:                                              ; preds = %10
  br label %.backedge

465:                                              ; preds = %10
  br label %.backedge

466:                                              ; preds = %10
  %putchar82 = tail call i32 @putchar(i32 10)
  br label %.backedge

467:                                              ; preds = %10
  br label %.backedge

468:                                              ; preds = %10
  br label %.backedge

469:                                              ; preds = %10
  %470 = sext i32 %.071 to i64
  %471 = getelementptr inbounds [10007 x i64], [10007 x i64]* @x, i64 0, i64 %470
  %472 = load i64, i64* %471, align 8
  %473 = sub i64 %.069, %472
  %474 = tail call i64 @_Z3absIxET_S0_(i64 %473)
  %475 = getelementptr inbounds [10007 x i64], [10007 x i64]* @y, i64 0, i64 %470
  %476 = load i64, i64* %475, align 8
  %477 = sub i64 %.067, %476
  %478 = tail call i64 @_Z3absIxET_S0_(i64 %477)
  br label %.backedge

479:                                              ; preds = %10
  br label %.backedge

480:                                              ; preds = %10
  %putchar81 = tail call i32 @putchar(i32 85)
  %481 = sext i32 %.065 to i64
  %482 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %481
  %483 = load i64, i64* %482, align 8
  %484 = add i64 %483, %.067
  br label %.backedge

485:                                              ; preds = %10
  %putchar = tail call i32 @putchar(i32 68)
  %486 = sext i32 %.065 to i64
  %487 = getelementptr inbounds [10007 x i64], [10007 x i64]* @c, i64 0, i64 %486
  %488 = load i64, i64* %487, align 8
  %489 = sub i64 %.067, %488
  br label %.backedge

490:                                              ; preds = %10
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_Z3absIxET_S0_(i64 %0) local_unnamed_addr #6 comdat {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i1, align 1
  %5 = alloca i64*, align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = load i32, i32* @x.14, align 4
  %9 = load i32, i32* @y.15, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %7, align 1
  %14 = icmp slt i32 %9, 10
  store i1 %14, i1* %6, align 1
  br label %15

15:                                               ; preds = %.backedge, %1
  %16 = phi i32 [ %9, %1 ], [ %.be, %.backedge ]
  %17 = phi i32 [ %8, %1 ], [ %.be13, %.backedge ]
  %18 = phi i32 [ %9, %1 ], [ %.be14, %.backedge ]
  %19 = phi i32 [ %8, %1 ], [ %.be15, %.backedge ]
  %20 = phi i32 [ %9, %1 ], [ %.be16, %.backedge ]
  %21 = phi i32 [ %8, %1 ], [ %.be17, %.backedge ]
  %22 = phi i32 [ %9, %1 ], [ %.be18, %.backedge ]
  %23 = phi i32 [ %8, %1 ], [ %.be19, %.backedge ]
  %.011 = phi i32 [ 885593105, %1 ], [ %.011.be, %.backedge ]
  %.0 = phi i64 [ undef, %1 ], [ %.0.be, %.backedge ]
  switch i32 %.011, label %.backedge [
    i32 885593105, label %24
    i32 -2140197393, label %27
    i32 -1041564960, label %40
    i32 -640479543, label %42
    i32 -558187419, label %45
    i32 146883405, label %53
    i32 -1529879674, label %62
    i32 -361100633, label %63
    i32 -158203397, label %71
    i32 -1073732396, label %79
    i32 -619380793, label %80
    i32 1566660741, label %81
    i32 -534044665, label %82
  ]

.backedge:                                        ; preds = %15, %82, %81, %80, %71, %63, %62, %53, %45, %42, %40, %27, %24
  %.be = phi i32 [ %16, %15 ], [ %16, %82 ], [ %16, %81 ], [ %16, %80 ], [ %16, %71 ], [ %16, %63 ], [ %16, %62 ], [ %16, %53 ], [ %16, %45 ], [ %16, %42 ], [ %16, %40 ], [ %32, %27 ], [ %16, %24 ]
  %.be13 = phi i32 [ %17, %15 ], [ %17, %82 ], [ %17, %81 ], [ %17, %80 ], [ %17, %71 ], [ %17, %63 ], [ %17, %62 ], [ %17, %53 ], [ %17, %45 ], [ %17, %42 ], [ %17, %40 ], [ %31, %27 ], [ %17, %24 ]
  %.be14 = phi i32 [ %18, %15 ], [ %18, %82 ], [ %18, %81 ], [ %18, %80 ], [ %18, %71 ], [ %18, %63 ], [ %18, %62 ], [ %18, %53 ], [ %16, %45 ], [ %18, %42 ], [ %18, %40 ], [ %32, %27 ], [ %18, %24 ]
  %.be15 = phi i32 [ %19, %15 ], [ %19, %82 ], [ %19, %81 ], [ %19, %80 ], [ %19, %71 ], [ %19, %63 ], [ %19, %62 ], [ %19, %53 ], [ %17, %45 ], [ %19, %42 ], [ %19, %40 ], [ %31, %27 ], [ %19, %24 ]
  %.be16 = phi i32 [ %20, %15 ], [ %20, %82 ], [ %20, %81 ], [ %20, %80 ], [ %20, %71 ], [ %20, %63 ], [ %20, %62 ], [ %18, %53 ], [ %16, %45 ], [ %20, %42 ], [ %20, %40 ], [ %32, %27 ], [ %20, %24 ]
  %.be17 = phi i32 [ %21, %15 ], [ %21, %82 ], [ %21, %81 ], [ %21, %80 ], [ %21, %71 ], [ %21, %63 ], [ %21, %62 ], [ %19, %53 ], [ %17, %45 ], [ %21, %42 ], [ %21, %40 ], [ %31, %27 ], [ %21, %24 ]
  %.be18 = phi i32 [ %22, %15 ], [ %22, %82 ], [ %22, %81 ], [ %22, %80 ], [ %22, %71 ], [ %20, %63 ], [ %22, %62 ], [ %18, %53 ], [ %16, %45 ], [ %22, %42 ], [ %22, %40 ], [ %32, %27 ], [ %22, %24 ]
  %.be19 = phi i32 [ %23, %15 ], [ %23, %82 ], [ %23, %81 ], [ %23, %80 ], [ %23, %71 ], [ %21, %63 ], [ %23, %62 ], [ %19, %53 ], [ %17, %45 ], [ %23, %42 ], [ %23, %40 ], [ %31, %27 ], [ %23, %24 ]
  %.011.be = phi i32 [ %.011, %15 ], [ -158203397, %82 ], [ 146883405, %81 ], [ -2140197393, %80 ], [ %78, %71 ], [ %70, %63 ], [ -361100633, %62 ], [ %61, %53 ], [ %52, %45 ], [ -361100633, %42 ], [ %41, %40 ], [ %39, %27 ], [ %26, %24 ]
  %.0.be = phi i64 [ %.0, %15 ], [ %.0, %82 ], [ %.0, %81 ], [ %.0, %80 ], [ %.0, %71 ], [ %.0, %63 ], [ %.0..0..0.9, %62 ], [ %.0, %53 ], [ %.0, %45 ], [ %44, %42 ], [ %.0, %40 ], [ %.0, %27 ], [ %.0, %24 ]
  br label %15

24:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %7, align 1
  %.0..0..0.2 = load volatile i1, i1* %6, align 1
  %25 = or i1 %.0..0..0., %.0..0..0.2
  %26 = select i1 %25, i32 -2140197393, i32 -619380793
  br label %.backedge

27:                                               ; preds = %15
  %28 = alloca i64, align 8
  store i64* %28, i64** %5, align 8
  %.0..0..0.3 = load volatile i64*, i64** %5, align 8
  store i64 %0, i64* %.0..0..0.3, align 8
  %.0..0..0.4 = load volatile i64*, i64** %5, align 8
  %29 = load i64, i64* %.0..0..0.4, align 8
  %30 = icmp slt i64 %29, 0
  store i1 %30, i1* %4, align 1
  %31 = load i32, i32* @x.14, align 4
  %32 = load i32, i32* @y.15, align 4
  %33 = add i32 %31, -1
  %34 = mul i32 %33, %31
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %37, %36
  %39 = select i1 %38, i32 -1041564960, i32 -619380793
  br label %.backedge

40:                                               ; preds = %15
  %.0..0..0.8 = load volatile i1, i1* %4, align 1
  %41 = select i1 %.0..0..0.8, i32 -640479543, i32 -558187419
  br label %.backedge

42:                                               ; preds = %15
  %.0..0..0.5 = load volatile i64*, i64** %5, align 8
  %43 = load i64, i64* %.0..0..0.5, align 8
  %44 = sub i64 0, %43
  br label %.backedge

45:                                               ; preds = %15
  %46 = add i32 %17, -1
  %47 = mul i32 %46, %17
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %16, 10
  %51 = or i1 %50, %49
  %52 = select i1 %51, i32 146883405, i32 1566660741
  br label %.backedge

53:                                               ; preds = %15
  %.0..0..0.6 = load volatile i64*, i64** %5, align 8
  %54 = load i64, i64* %.0..0..0.6, align 8
  store i64 %54, i64* %3, align 8
  %55 = add i32 %19, -1
  %56 = mul i32 %55, %19
  %57 = and i32 %56, 1
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %18, 10
  %60 = or i1 %59, %58
  %61 = select i1 %60, i32 -1529879674, i32 1566660741
  br label %.backedge

62:                                               ; preds = %15
  %.0..0..0.9 = load volatile i64, i64* %3, align 8
  br label %.backedge

63:                                               ; preds = %15
  store i64 %.0, i64* %2, align 8
  %64 = add i32 %21, -1
  %65 = mul i32 %64, %21
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %20, 10
  %69 = or i1 %68, %67
  %70 = select i1 %69, i32 -158203397, i32 -534044665
  br label %.backedge

71:                                               ; preds = %15
  %72 = add i32 %23, -1
  %73 = mul i32 %72, %23
  %74 = and i32 %73, 1
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %22, 10
  %77 = or i1 %76, %75
  %78 = select i1 %77, i32 -1073732396, i32 -534044665
  br label %.backedge

79:                                               ; preds = %15
  %.0..0..0.10 = load volatile i64, i64* %2, align 8
  ret i64 %.0..0..0.10

80:                                               ; preds = %15
  br label %.backedge

81:                                               ; preds = %15
  %.0..0..0.7 = load volatile i64*, i64** %5, align 8
  br label %.backedge

82:                                               ; preds = %15
  br label %.backedge
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s753660149.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #3

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
