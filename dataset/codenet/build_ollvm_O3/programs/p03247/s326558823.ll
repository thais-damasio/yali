; ModuleID = 'build_ollvm/programs/p03247/s326558823.ll'
source_filename = "Project_CodeNet_C++1400/p03247/s326558823.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct.pt = type { i32, i32 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@st = local_unnamed_addr global [1005 x i32] zeroinitializer, align 16
@a = global [1005 x %struct.pt] zeroinitializer, align 16
@.str = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"1 \00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s326558823.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0
@x.11 = common local_unnamed_addr global i32 0
@y.12 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x, align 4
  %4 = load i32, i32* @y, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ 1745188586, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 1745188586, label %11
    i32 426156838, label %14
    i32 2080753655, label %25
    i32 485669301, label %26
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 426156838, i32 485669301
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %15 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  %16 = load i32, i32* @x, align 4
  %17 = load i32, i32* @y, align 4
  %18 = add i32 %16, -1
  %19 = mul i32 %18, %16
  %20 = and i32 %19, 1
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %22, %21
  %24 = select i1 %23, i32 2080753655, i32 485669301
  br label %.outer.backedge

25:                                               ; preds = %10
  ret void

26:                                               ; preds = %10
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %27 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #8
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %26, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %24, %14 ], [ 426156838, %26 ]
  br label %.outer
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn
define i32 @_Z2jdb(i1 zeroext %0) local_unnamed_addr #4 {
  %2 = select i1 %0, i32 1, i32 -1
  ret i32 %2
}

; Function Attrs: nofree noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i32, align 4
  %5 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32* nonnull @n, i32* getelementptr inbounds ([1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 1, i32 0), i32* getelementptr inbounds ([1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 1, i32 1))
  %6 = load i32, i32* getelementptr inbounds ([1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 1, i32 0), align 8
  %7 = load i32, i32* getelementptr inbounds ([1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 1, i32 1), align 4
  %8 = xor i32 %7, %6
  %9 = and i32 %8, 1
  store i32 %9, i32* %4, align 4
  br label %10

10:                                               ; preds = %.backedge, %0
  %.084 = phi i8 [ 0, %0 ], [ %.084.be, %.backedge ]
  %.082 = phi i32 [ undef, %0 ], [ %.082.be, %.backedge ]
  %.080 = phi i32 [ undef, %0 ], [ %.080.be, %.backedge ]
  %.078 = phi i32 [ undef, %0 ], [ %.078.be, %.backedge ]
  %.076 = phi i32 [ undef, %0 ], [ %.076.be, %.backedge ]
  %.074 = phi i32 [ undef, %0 ], [ %.074.be, %.backedge ]
  %.072 = phi i32 [ undef, %0 ], [ %.072.be, %.backedge ]
  %.070 = phi i32 [ undef, %0 ], [ %.070.be, %.backedge ]
  %.0 = phi i32 [ 2025064795, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 2025064795, label %11
    i32 -1792885648, label %13
    i32 1934556415, label %23
    i32 9787132, label %34
    i32 -913361297, label %35
    i32 -223536125, label %36
    i32 -1461042078, label %39
    i32 1721481744, label %45
    i32 1960260166, label %50
    i32 -1913848478, label %59
    i32 -1522398018, label %61
    i32 2098997881, label %71
    i32 885255602, label %81
    i32 -295375375, label %82
    i32 1374129514, label %92
    i32 99872373, label %102
    i32 401143352, label %103
    i32 905988574, label %107
    i32 1813329963, label %109
    i32 -1128248511, label %110
    i32 145020897, label %113
    i32 403353053, label %123
    i32 -708282456, label %135
    i32 188893318, label %136
    i32 -1430607002, label %146
    i32 878296164, label %157
    i32 -606441738, label %158
    i32 1531505080, label %159
    i32 -1622297800, label %169
    i32 -1528346694, label %181
    i32 1212178299, label %183
    i32 -737036208, label %185
    i32 1162593635, label %195
    i32 -1464488028, label %206
    i32 1172210536, label %207
    i32 -1591356674, label %217
    i32 -399406063, label %232
    i32 -84270289, label %233
    i32 -777170943, label %243
    i32 1851975204, label %254
    i32 478966607, label %256
    i32 1942329892, label %265
    i32 1701577584, label %275
    i32 1335902433, label %289
    i32 -1283355586, label %290
    i32 -2038732856, label %304
    i32 -1235572062, label %308
    i32 -1824244606, label %317
    i32 -619167244, label %327
    i32 233656928, label %340
    i32 1503004184, label %341
    i32 -1144264764, label %345
    i32 -199383655, label %346
    i32 -1493754496, label %356
    i32 1141787959, label %366
    i32 1735301979, label %367
    i32 599678421, label %368
    i32 347920209, label %370
    i32 -1964766582, label %371
    i32 1493312011, label %374
    i32 -428656658, label %380
    i32 -2072523974, label %390
    i32 -944870546, label %401
    i32 -714676169, label %402
    i32 -929464373, label %408
    i32 512661147, label %418
    i32 -1636479562, label %429
    i32 -101403726, label %430
    i32 1567112502, label %436
    i32 555134975, label %438
    i32 1684859283, label %444
    i32 -195396099, label %446
    i32 -1725768260, label %447
    i32 969686631, label %457
    i32 23282131, label %468
    i32 -1508324540, label %469
    i32 1535295182, label %470
    i32 1161213097, label %472
    i32 -1809992232, label %473
    i32 244365371, label %483
    i32 1930917467, label %493
    i32 -346775658, label %494
    i32 195406202, label %496
    i32 1683402951, label %497
    i32 -1363980643, label %499
    i32 -165144488, label %502
    i32 1669835421, label %504
    i32 975102424, label %505
    i32 -2098709375, label %507
    i32 -724328454, label %513
    i32 -718806631, label %514
    i32 1561910099, label %519
    i32 -1313829758, label %522
    i32 510144633, label %523
    i32 2003095477, label %525
    i32 -2130050722, label %527
    i32 393707977, label %529
  ]

.backedge:                                        ; preds = %10, %529, %527, %525, %523, %522, %519, %514, %513, %507, %505, %504, %502, %499, %497, %496, %494, %483, %473, %472, %470, %469, %468, %457, %447, %446, %444, %438, %436, %430, %429, %418, %408, %402, %401, %390, %380, %374, %371, %370, %368, %367, %366, %356, %346, %345, %341, %340, %327, %317, %308, %304, %290, %289, %275, %265, %256, %254, %243, %233, %232, %217, %207, %206, %195, %185, %183, %181, %169, %159, %158, %157, %146, %136, %135, %123, %113, %110, %109, %107, %103, %102, %92, %82, %81, %71, %61, %59, %50, %45, %39, %36, %35, %34, %23, %13, %11
  %.084.be = phi i8 [ %.084, %10 ], [ %.084, %529 ], [ %.084, %527 ], [ %.084, %525 ], [ %.084, %523 ], [ %.084, %522 ], [ %.084, %519 ], [ %.084, %514 ], [ %.084, %513 ], [ %.084, %507 ], [ %.084, %505 ], [ %.084, %504 ], [ %.084, %502 ], [ %.084, %499 ], [ %.084, %497 ], [ %.084, %496 ], [ 1, %494 ], [ %.084, %483 ], [ %.084, %473 ], [ %.084, %472 ], [ %.084, %470 ], [ %.084, %469 ], [ %.084, %468 ], [ %.084, %457 ], [ %.084, %447 ], [ %.084, %446 ], [ %.084, %444 ], [ %.084, %438 ], [ %.084, %436 ], [ %.084, %430 ], [ %.084, %429 ], [ %.084, %418 ], [ %.084, %408 ], [ %.084, %402 ], [ %.084, %401 ], [ %.084, %390 ], [ %.084, %380 ], [ %.084, %374 ], [ %.084, %371 ], [ %.084, %370 ], [ %.084, %368 ], [ %.084, %367 ], [ %.084, %366 ], [ %.084, %356 ], [ %.084, %346 ], [ %.084, %345 ], [ %.084, %341 ], [ %.084, %340 ], [ %.084, %327 ], [ %.084, %317 ], [ %.084, %308 ], [ %.084, %304 ], [ %.084, %290 ], [ %.084, %289 ], [ %.084, %275 ], [ %.084, %265 ], [ %.084, %256 ], [ %.084, %254 ], [ %.084, %243 ], [ %.084, %233 ], [ %.084, %232 ], [ %.084, %217 ], [ %.084, %207 ], [ %.084, %206 ], [ %.084, %195 ], [ %.084, %185 ], [ %.084, %183 ], [ %.084, %181 ], [ %.084, %169 ], [ %.084, %159 ], [ %.084, %158 ], [ %.084, %157 ], [ %.084, %146 ], [ %.084, %136 ], [ %.084, %135 ], [ %.084, %123 ], [ %.084, %113 ], [ %.084, %110 ], [ %.084, %109 ], [ %.084, %107 ], [ %.084, %103 ], [ %.084, %102 ], [ %.084, %92 ], [ %.084, %82 ], [ %.084, %81 ], [ %.084, %71 ], [ %.084, %61 ], [ %.084, %59 ], [ %.084, %50 ], [ %.084, %45 ], [ %.084, %39 ], [ %.084, %36 ], [ %.084, %35 ], [ %.084, %34 ], [ 1, %23 ], [ %.084, %13 ], [ %.084, %11 ]
  %.082.be = phi i32 [ %.082, %10 ], [ %.082, %529 ], [ %.082, %527 ], [ %.082, %525 ], [ %.082, %523 ], [ %.082, %522 ], [ %.082, %519 ], [ %.082, %514 ], [ %.082, %513 ], [ %.082, %507 ], [ %.082, %505 ], [ %.082, %504 ], [ %.082, %502 ], [ %.082, %499 ], [ %498, %497 ], [ %.082, %496 ], [ %.082, %494 ], [ %.082, %483 ], [ %.082, %473 ], [ %.082, %472 ], [ %.082, %470 ], [ %.082, %469 ], [ %.082, %468 ], [ %.082, %457 ], [ %.082, %447 ], [ %.082, %446 ], [ %.082, %444 ], [ %.082, %438 ], [ %.082, %436 ], [ %.082, %430 ], [ %.082, %429 ], [ %.082, %418 ], [ %.082, %408 ], [ %.082, %402 ], [ %.082, %401 ], [ %.082, %390 ], [ %.082, %380 ], [ %.082, %374 ], [ %.082, %371 ], [ %.082, %370 ], [ %.082, %368 ], [ %.082, %367 ], [ %.082, %366 ], [ %.082, %356 ], [ %.082, %346 ], [ %.082, %345 ], [ %.082, %341 ], [ %.082, %340 ], [ %.082, %327 ], [ %.082, %317 ], [ %.082, %308 ], [ %.082, %304 ], [ %.082, %290 ], [ %.082, %289 ], [ %.082, %275 ], [ %.082, %265 ], [ %.082, %256 ], [ %.082, %254 ], [ %.082, %243 ], [ %.082, %233 ], [ %.082, %232 ], [ %.082, %217 ], [ %.082, %207 ], [ %.082, %206 ], [ %.082, %195 ], [ %.082, %185 ], [ %.082, %183 ], [ %.082, %181 ], [ %.082, %169 ], [ %.082, %159 ], [ %.082, %158 ], [ %.082, %157 ], [ %.082, %146 ], [ %.082, %136 ], [ %.082, %135 ], [ %.082, %123 ], [ %.082, %113 ], [ %.082, %110 ], [ %.082, %109 ], [ %.082, %107 ], [ %.082, %103 ], [ %.082, %102 ], [ %.neg99, %92 ], [ %.082, %82 ], [ %.082, %81 ], [ %.082, %71 ], [ %.082, %61 ], [ %.082, %59 ], [ %.082, %50 ], [ %.082, %45 ], [ %.082, %39 ], [ %.082, %36 ], [ 2, %35 ], [ %.082, %34 ], [ %.082, %23 ], [ %.082, %13 ], [ %.082, %11 ]
  %.080.be = phi i32 [ %.080, %10 ], [ %.080, %529 ], [ %.080, %527 ], [ %.080, %525 ], [ %.080, %523 ], [ %.080, %522 ], [ %.080, %519 ], [ %.080, %514 ], [ %.080, %513 ], [ %.080, %507 ], [ %.080, %505 ], [ %.080, %504 ], [ %503, %502 ], [ %.080, %499 ], [ %.080, %497 ], [ %.080, %496 ], [ %.080, %494 ], [ %.080, %483 ], [ %.080, %473 ], [ %.080, %472 ], [ %.080, %470 ], [ %.080, %469 ], [ %.080, %468 ], [ %.080, %457 ], [ %.080, %447 ], [ %.080, %446 ], [ %.080, %444 ], [ %.080, %438 ], [ %.080, %436 ], [ %.080, %430 ], [ %.080, %429 ], [ %.080, %418 ], [ %.080, %408 ], [ %.080, %402 ], [ %.080, %401 ], [ %.080, %390 ], [ %.080, %380 ], [ %.080, %374 ], [ %.080, %371 ], [ %.080, %370 ], [ %.080, %368 ], [ %.080, %367 ], [ %.080, %366 ], [ %.080, %356 ], [ %.080, %346 ], [ %.080, %345 ], [ %.080, %341 ], [ %.080, %340 ], [ %.080, %327 ], [ %.080, %317 ], [ %.080, %308 ], [ %.080, %304 ], [ %.080, %290 ], [ %.080, %289 ], [ %.080, %275 ], [ %.080, %265 ], [ %.080, %256 ], [ %.080, %254 ], [ %.080, %243 ], [ %.080, %233 ], [ %.080, %232 ], [ %.080, %217 ], [ %.080, %207 ], [ %.080, %206 ], [ %.080, %195 ], [ %.080, %185 ], [ %.080, %183 ], [ %.080, %181 ], [ %.080, %169 ], [ %.080, %159 ], [ %.080, %158 ], [ %.080, %157 ], [ %147, %146 ], [ %.080, %136 ], [ %.080, %135 ], [ %.080, %123 ], [ %.080, %113 ], [ %.080, %110 ], [ 0, %109 ], [ %.080, %107 ], [ %.080, %103 ], [ %.080, %102 ], [ %.080, %92 ], [ %.080, %82 ], [ %.080, %81 ], [ %.080, %71 ], [ %.080, %61 ], [ %.080, %59 ], [ %.080, %50 ], [ %.080, %45 ], [ %.080, %39 ], [ %.080, %36 ], [ %.080, %35 ], [ %.080, %34 ], [ %.080, %23 ], [ %.080, %13 ], [ %.080, %11 ]
  %.078.be = phi i32 [ %.078, %10 ], [ %.078, %529 ], [ %.078, %527 ], [ %.078, %525 ], [ %.078, %523 ], [ %.078, %522 ], [ %.078, %519 ], [ %.078, %514 ], [ %.078, %513 ], [ %.078, %507 ], [ %.078, %505 ], [ %.078, %504 ], [ %.078, %502 ], [ %.078, %499 ], [ %.078, %497 ], [ %.078, %496 ], [ %.078, %494 ], [ %.078, %483 ], [ %.078, %473 ], [ %.078, %472 ], [ %471, %470 ], [ %.078, %469 ], [ %.078, %468 ], [ %.078, %457 ], [ %.078, %447 ], [ %.078, %446 ], [ %.078, %444 ], [ %.078, %438 ], [ %.078, %436 ], [ %.078, %430 ], [ %.078, %429 ], [ %.078, %418 ], [ %.078, %408 ], [ %.078, %402 ], [ %.078, %401 ], [ %.078, %390 ], [ %.078, %380 ], [ %.078, %374 ], [ %.078, %371 ], [ %.078, %370 ], [ %.078, %368 ], [ %.078, %367 ], [ %.078, %366 ], [ %.078, %356 ], [ %.078, %346 ], [ %.078, %345 ], [ %.078, %341 ], [ %.078, %340 ], [ %.078, %327 ], [ %.078, %317 ], [ %.078, %308 ], [ %.078, %304 ], [ %.078, %290 ], [ %.078, %289 ], [ %.078, %275 ], [ %.078, %265 ], [ %.078, %256 ], [ %.078, %254 ], [ %.078, %243 ], [ %.078, %233 ], [ %.078, %232 ], [ %.078, %217 ], [ %.078, %207 ], [ %.078, %206 ], [ %.078, %195 ], [ %.078, %185 ], [ %.078, %183 ], [ %.078, %181 ], [ %.078, %169 ], [ %.078, %159 ], [ 1, %158 ], [ %.078, %157 ], [ %.078, %146 ], [ %.078, %136 ], [ %.078, %135 ], [ %.078, %123 ], [ %.078, %113 ], [ %.078, %110 ], [ %.078, %109 ], [ %.078, %107 ], [ %.078, %103 ], [ %.078, %102 ], [ %.078, %92 ], [ %.078, %82 ], [ %.078, %81 ], [ %.078, %71 ], [ %.078, %61 ], [ %.078, %59 ], [ %.078, %50 ], [ %.078, %45 ], [ %.078, %39 ], [ %.078, %36 ], [ %.078, %35 ], [ %.078, %34 ], [ %.078, %23 ], [ %.078, %13 ], [ %.078, %11 ]
  %.076.be = phi i32 [ %.076, %10 ], [ %.076, %529 ], [ %.076, %527 ], [ %.076, %525 ], [ %.076, %523 ], [ %.076, %522 ], [ %.076, %519 ], [ %516, %514 ], [ %.076, %513 ], [ %510, %507 ], [ %.076, %505 ], [ %.076, %504 ], [ %.076, %502 ], [ %.076, %499 ], [ %.076, %497 ], [ %.076, %496 ], [ %.076, %494 ], [ %.076, %483 ], [ %.076, %473 ], [ %.076, %472 ], [ %.076, %470 ], [ %.076, %469 ], [ %.076, %468 ], [ %.076, %457 ], [ %.076, %447 ], [ %.076, %446 ], [ %.076, %444 ], [ %.076, %438 ], [ %.076, %436 ], [ %.076, %430 ], [ %.076, %429 ], [ %.076, %418 ], [ %.076, %408 ], [ %.076, %402 ], [ %.076, %401 ], [ %.076, %390 ], [ %.076, %380 ], [ %.076, %374 ], [ %.076, %371 ], [ %.076, %370 ], [ %.076, %368 ], [ %.076, %367 ], [ %.076, %366 ], [ %.076, %356 ], [ %.076, %346 ], [ %.076, %345 ], [ %.076, %341 ], [ %.076, %340 ], [ %.076, %327 ], [ %.076, %317 ], [ %.076, %308 ], [ %305, %304 ], [ %.076, %290 ], [ %.076, %289 ], [ %277, %275 ], [ %.076, %265 ], [ %.076, %256 ], [ %.076, %254 ], [ %.076, %243 ], [ %.076, %233 ], [ %.076, %232 ], [ %220, %217 ], [ %.076, %207 ], [ %.076, %206 ], [ %.076, %195 ], [ %.076, %185 ], [ %.076, %183 ], [ %.076, %181 ], [ %.076, %169 ], [ %.076, %159 ], [ %.076, %158 ], [ %.076, %157 ], [ %.076, %146 ], [ %.076, %136 ], [ %.076, %135 ], [ %.076, %123 ], [ %.076, %113 ], [ %.076, %110 ], [ %.076, %109 ], [ %.076, %107 ], [ %.076, %103 ], [ %.076, %102 ], [ %.076, %92 ], [ %.076, %82 ], [ %.076, %81 ], [ %.076, %71 ], [ %.076, %61 ], [ %.076, %59 ], [ %.076, %50 ], [ %.076, %45 ], [ %.076, %39 ], [ %.076, %36 ], [ %.076, %35 ], [ %.076, %34 ], [ %.076, %23 ], [ %.076, %13 ], [ %.076, %11 ]
  %.074.be = phi i32 [ %.074, %10 ], [ %.074, %529 ], [ %.074, %527 ], [ %.074, %525 ], [ %.074, %523 ], [ %.074, %522 ], [ %.neg88, %519 ], [ %.074, %514 ], [ %.074, %513 ], [ %512, %507 ], [ %.074, %505 ], [ %.074, %504 ], [ %.074, %502 ], [ %.074, %499 ], [ %.074, %497 ], [ %.074, %496 ], [ %.074, %494 ], [ %.074, %483 ], [ %.074, %473 ], [ %.074, %472 ], [ %.074, %470 ], [ %.074, %469 ], [ %.074, %468 ], [ %.074, %457 ], [ %.074, %447 ], [ %.074, %446 ], [ %.074, %444 ], [ %.074, %438 ], [ %.074, %436 ], [ %.074, %430 ], [ %.074, %429 ], [ %.074, %418 ], [ %.074, %408 ], [ %.074, %402 ], [ %.074, %401 ], [ %.074, %390 ], [ %.074, %380 ], [ %.074, %374 ], [ %.074, %371 ], [ %.074, %370 ], [ %.074, %368 ], [ %.074, %367 ], [ %.074, %366 ], [ %.074, %356 ], [ %.074, %346 ], [ %.074, %345 ], [ %342, %341 ], [ %.074, %340 ], [ %328, %327 ], [ %.074, %317 ], [ %.074, %308 ], [ %.074, %304 ], [ %.074, %290 ], [ %.074, %289 ], [ %.074, %275 ], [ %.074, %265 ], [ %.074, %256 ], [ %.074, %254 ], [ %.074, %243 ], [ %.074, %233 ], [ %.074, %232 ], [ %222, %217 ], [ %.074, %207 ], [ %.074, %206 ], [ %.074, %195 ], [ %.074, %185 ], [ %.074, %183 ], [ %.074, %181 ], [ %.074, %169 ], [ %.074, %159 ], [ %.074, %158 ], [ %.074, %157 ], [ %.074, %146 ], [ %.074, %136 ], [ %.074, %135 ], [ %.074, %123 ], [ %.074, %113 ], [ %.074, %110 ], [ %.074, %109 ], [ %.074, %107 ], [ %.074, %103 ], [ %.074, %102 ], [ %.074, %92 ], [ %.074, %82 ], [ %.074, %81 ], [ %.074, %71 ], [ %.074, %61 ], [ %.074, %59 ], [ %.074, %50 ], [ %.074, %45 ], [ %.074, %39 ], [ %.074, %36 ], [ %.074, %35 ], [ %.074, %34 ], [ %.074, %23 ], [ %.074, %13 ], [ %.074, %11 ]
  %.072.be = phi i32 [ %.072, %10 ], [ %.072, %529 ], [ %.072, %527 ], [ %.072, %525 ], [ %.072, %523 ], [ %.072, %522 ], [ %.072, %519 ], [ %.072, %514 ], [ %.072, %513 ], [ 30, %507 ], [ %.072, %505 ], [ %.072, %504 ], [ %.072, %502 ], [ %.072, %499 ], [ %.072, %497 ], [ %.072, %496 ], [ %.072, %494 ], [ %.072, %483 ], [ %.072, %473 ], [ %.072, %472 ], [ %.072, %470 ], [ %.072, %469 ], [ %.072, %468 ], [ %.072, %457 ], [ %.072, %447 ], [ %.072, %446 ], [ %.072, %444 ], [ %.072, %438 ], [ %.072, %436 ], [ %.072, %430 ], [ %.072, %429 ], [ %.072, %418 ], [ %.072, %408 ], [ %.072, %402 ], [ %.072, %401 ], [ %.072, %390 ], [ %.072, %380 ], [ %.072, %374 ], [ %.072, %371 ], [ %.072, %370 ], [ %369, %368 ], [ %.072, %367 ], [ %.072, %366 ], [ %.072, %356 ], [ %.072, %346 ], [ %.072, %345 ], [ %.072, %341 ], [ %.072, %340 ], [ %.072, %327 ], [ %.072, %317 ], [ %.072, %308 ], [ %.072, %304 ], [ %.072, %290 ], [ %.072, %289 ], [ %.072, %275 ], [ %.072, %265 ], [ %.072, %256 ], [ %.072, %254 ], [ %.072, %243 ], [ %.072, %233 ], [ %.072, %232 ], [ 30, %217 ], [ %.072, %207 ], [ %.072, %206 ], [ %.072, %195 ], [ %.072, %185 ], [ %.072, %183 ], [ %.072, %181 ], [ %.072, %169 ], [ %.072, %159 ], [ %.072, %158 ], [ %.072, %157 ], [ %.072, %146 ], [ %.072, %136 ], [ %.072, %135 ], [ %.072, %123 ], [ %.072, %113 ], [ %.072, %110 ], [ %.072, %109 ], [ %.072, %107 ], [ %.072, %103 ], [ %.072, %102 ], [ %.072, %92 ], [ %.072, %82 ], [ %.072, %81 ], [ %.072, %71 ], [ %.072, %61 ], [ %.072, %59 ], [ %.072, %50 ], [ %.072, %45 ], [ %.072, %39 ], [ %.072, %36 ], [ %.072, %35 ], [ %.072, %34 ], [ %.072, %23 ], [ %.072, %13 ], [ %.072, %11 ]
  %.070.be = phi i32 [ %.070, %10 ], [ %.070, %529 ], [ %528, %527 ], [ %.070, %525 ], [ %.070, %523 ], [ %.070, %522 ], [ %.070, %519 ], [ %.070, %514 ], [ %.070, %513 ], [ %.070, %507 ], [ %.070, %505 ], [ %.070, %504 ], [ %.070, %502 ], [ %.070, %499 ], [ %.070, %497 ], [ %.070, %496 ], [ %.070, %494 ], [ %.070, %483 ], [ %.070, %473 ], [ %.070, %472 ], [ %.070, %470 ], [ %.070, %469 ], [ %.070, %468 ], [ %458, %457 ], [ %.070, %447 ], [ %.070, %446 ], [ %.070, %444 ], [ %.070, %438 ], [ %.070, %436 ], [ %.070, %430 ], [ %.070, %429 ], [ %.070, %418 ], [ %.070, %408 ], [ %.070, %402 ], [ %.070, %401 ], [ %.070, %390 ], [ %.070, %380 ], [ %.070, %374 ], [ %.070, %371 ], [ 0, %370 ], [ %.070, %368 ], [ %.070, %367 ], [ %.070, %366 ], [ %.070, %356 ], [ %.070, %346 ], [ %.070, %345 ], [ %.070, %341 ], [ %.070, %340 ], [ %.070, %327 ], [ %.070, %317 ], [ %.070, %308 ], [ %.070, %304 ], [ %.070, %290 ], [ %.070, %289 ], [ %.070, %275 ], [ %.070, %265 ], [ %.070, %256 ], [ %.070, %254 ], [ %.070, %243 ], [ %.070, %233 ], [ %.070, %232 ], [ %.070, %217 ], [ %.070, %207 ], [ %.070, %206 ], [ %.070, %195 ], [ %.070, %185 ], [ %.070, %183 ], [ %.070, %181 ], [ %.070, %169 ], [ %.070, %159 ], [ %.070, %158 ], [ %.070, %157 ], [ %.070, %146 ], [ %.070, %136 ], [ %.070, %135 ], [ %.070, %123 ], [ %.070, %113 ], [ %.070, %110 ], [ %.070, %109 ], [ %.070, %107 ], [ %.070, %103 ], [ %.070, %102 ], [ %.070, %92 ], [ %.070, %82 ], [ %.070, %81 ], [ %.070, %71 ], [ %.070, %61 ], [ %.070, %59 ], [ %.070, %50 ], [ %.070, %45 ], [ %.070, %39 ], [ %.070, %36 ], [ %.070, %35 ], [ %.070, %34 ], [ %.070, %23 ], [ %.070, %13 ], [ %.070, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ 244365371, %529 ], [ 969686631, %527 ], [ 512661147, %525 ], [ -2072523974, %523 ], [ -1493754496, %522 ], [ -619167244, %519 ], [ 1701577584, %514 ], [ -777170943, %513 ], [ -1591356674, %507 ], [ 1162593635, %505 ], [ -1622297800, %504 ], [ -1430607002, %502 ], [ 403353053, %499 ], [ 1374129514, %497 ], [ 2098997881, %496 ], [ 1934556415, %494 ], [ %492, %483 ], [ %482, %473 ], [ -1809992232, %472 ], [ 1531505080, %470 ], [ 1535295182, %469 ], [ -1964766582, %468 ], [ %467, %457 ], [ %456, %447 ], [ -1725768260, %446 ], [ -195396099, %444 ], [ %443, %438 ], [ 555134975, %436 ], [ %435, %430 ], [ -101403726, %429 ], [ %428, %418 ], [ %417, %408 ], [ %407, %402 ], [ -714676169, %401 ], [ %400, %390 ], [ %389, %380 ], [ %379, %374 ], [ %373, %371 ], [ -1964766582, %370 ], [ -84270289, %368 ], [ 599678421, %367 ], [ 1735301979, %366 ], [ %365, %356 ], [ %355, %346 ], [ -199383655, %345 ], [ -1144264764, %341 ], [ -1144264764, %340 ], [ %339, %327 ], [ %326, %317 ], [ %316, %308 ], [ -199383655, %304 ], [ %303, %290 ], [ 1735301979, %289 ], [ %288, %275 ], [ %274, %265 ], [ %264, %256 ], [ %255, %254 ], [ %253, %243 ], [ %242, %233 ], [ -84270289, %232 ], [ %231, %217 ], [ %216, %207 ], [ 1172210536, %206 ], [ %205, %195 ], [ %194, %185 ], [ %184, %183 ], [ %182, %181 ], [ %180, %169 ], [ %168, %159 ], [ 1531505080, %158 ], [ -1128248511, %157 ], [ %156, %146 ], [ %145, %136 ], [ 188893318, %135 ], [ %134, %123 ], [ %122, %113 ], [ %112, %110 ], [ -1128248511, %109 ], [ 1813329963, %107 ], [ %106, %103 ], [ -223536125, %102 ], [ %101, %92 ], [ %91, %82 ], [ -295375375, %81 ], [ %80, %71 ], [ %70, %61 ], [ -1809992232, %59 ], [ %58, %50 ], [ 1960260166, %45 ], [ %44, %39 ], [ %38, %36 ], [ -223536125, %35 ], [ -913361297, %34 ], [ %33, %23 ], [ %22, %13 ], [ %12, %11 ]
  br label %10

11:                                               ; preds = %10
  %.0..0..0. = load volatile i32, i32* %4, align 4
  %.not105 = icmp eq i32 %.0..0..0., 0
  %12 = select i1 %.not105, i32 -1792885648, i32 -913361297
  br label %.backedge

13:                                               ; preds = %10
  %14 = load i32, i32* @x.9, align 4
  %15 = load i32, i32* @y.10, align 4
  %16 = add i32 %14, -1
  %17 = mul i32 %16, %14
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %20, %19
  %22 = select i1 %21, i32 1934556415, i32 -346775658
  br label %.backedge

23:                                               ; preds = %10
  %24 = load i32, i32* getelementptr inbounds ([1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 1, i32 0), align 8
  %.neg104 = add i32 %24, 1
  store i32 %.neg104, i32* getelementptr inbounds ([1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 1, i32 0), align 8
  %25 = load i32, i32* @x.9, align 4
  %26 = load i32, i32* @y.10, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 9787132, i32 -346775658
  br label %.backedge

34:                                               ; preds = %10
  br label %.backedge

35:                                               ; preds = %10
  br label %.backedge

36:                                               ; preds = %10
  %37 = load i32, i32* @n, align 4
  %.not103 = icmp sgt i32 %.082, %37
  %38 = select i1 %.not103, i32 401143352, i32 -1461042078
  br label %.backedge

39:                                               ; preds = %10
  %40 = sext i32 %.082 to i64
  %41 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %40, i32 0
  %42 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %40, i32 1
  %43 = tail call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %41, i32* nonnull %42)
  %.not102 = icmp eq i8 %.084, 0
  %44 = select i1 %.not102, i32 1960260166, i32 1721481744
  br label %.backedge

45:                                               ; preds = %10
  %46 = sext i32 %.082 to i64
  %47 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %46, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = add i32 %48, 1
  store i32 %49, i32* %47, align 8
  br label %.backedge

50:                                               ; preds = %10
  %51 = sext i32 %.082 to i64
  %52 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %51, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %51, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = xor i32 %55, %53
  %57 = and i32 %56, 1
  %.not101 = icmp eq i32 %57, 0
  %58 = select i1 %.not101, i32 -1913848478, i32 -1522398018
  br label %.backedge

59:                                               ; preds = %10
  %60 = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  br label %.backedge

61:                                               ; preds = %10
  %62 = load i32, i32* @x.9, align 4
  %63 = load i32, i32* @y.10, align 4
  %64 = add i32 %62, -1
  %65 = mul i32 %64, %62
  %66 = and i32 %65, 1
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %68, %67
  %70 = select i1 %69, i32 2098997881, i32 195406202
  br label %.backedge

71:                                               ; preds = %10
  %72 = load i32, i32* @x.9, align 4
  %73 = load i32, i32* @y.10, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 885255602, i32 195406202
  br label %.backedge

81:                                               ; preds = %10
  br label %.backedge

82:                                               ; preds = %10
  %83 = load i32, i32* @x.9, align 4
  %84 = load i32, i32* @y.10, align 4
  %85 = add i32 %83, -1
  %86 = mul i32 %85, %83
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %89, %88
  %91 = select i1 %90, i32 1374129514, i32 1683402951
  br label %.backedge

92:                                               ; preds = %10
  %.neg99 = add i32 %.082, 1
  %93 = load i32, i32* @x.9, align 4
  %94 = load i32, i32* @y.10, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 99872373, i32 1683402951
  br label %.backedge

102:                                              ; preds = %10
  br label %.backedge

103:                                              ; preds = %10
  %.not97 = icmp eq i8 %.084, 0
  %narrow98 = add nuw nsw i8 %.084, 31
  %104 = zext i8 %narrow98 to i32
  %105 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %104)
  %106 = select i1 %.not97, i32 1813329963, i32 905988574
  br label %.backedge

107:                                              ; preds = %10
  %108 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  br label %.backedge

109:                                              ; preds = %10
  br label %.backedge

110:                                              ; preds = %10
  %111 = icmp slt i32 %.080, 31
  %112 = select i1 %111, i32 145020897, i32 -606441738
  br label %.backedge

113:                                              ; preds = %10
  %114 = load i32, i32* @x.9, align 4
  %115 = load i32, i32* @y.10, align 4
  %116 = add i32 %114, -1
  %117 = mul i32 %116, %114
  %118 = and i32 %117, 1
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %120, %119
  %122 = select i1 %121, i32 403353053, i32 -1363980643
  br label %.backedge

123:                                              ; preds = %10
  %124 = shl nuw i32 1, %.080
  %125 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i32 %124)
  %126 = load i32, i32* @x.9, align 4
  %127 = load i32, i32* @y.10, align 4
  %128 = add i32 %126, -1
  %129 = mul i32 %128, %126
  %130 = and i32 %129, 1
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %132, %131
  %134 = select i1 %133, i32 -708282456, i32 -1363980643
  br label %.backedge

135:                                              ; preds = %10
  br label %.backedge

136:                                              ; preds = %10
  %137 = load i32, i32* @x.9, align 4
  %138 = load i32, i32* @y.10, align 4
  %139 = add i32 %137, -1
  %140 = mul i32 %139, %137
  %141 = and i32 %140, 1
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %143, %142
  %145 = select i1 %144, i32 -1430607002, i32 -165144488
  br label %.backedge

146:                                              ; preds = %10
  %147 = add i32 %.080, 1
  %148 = load i32, i32* @x.9, align 4
  %149 = load i32, i32* @y.10, align 4
  %150 = add i32 %148, -1
  %151 = mul i32 %150, %148
  %152 = and i32 %151, 1
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %154, %153
  %156 = select i1 %155, i32 878296164, i32 -165144488
  br label %.backedge

157:                                              ; preds = %10
  br label %.backedge

158:                                              ; preds = %10
  %putchar96 = tail call i32 @putchar(i32 10)
  br label %.backedge

159:                                              ; preds = %10
  %160 = load i32, i32* @x.9, align 4
  %161 = load i32, i32* @y.10, align 4
  %162 = add i32 %160, -1
  %163 = mul i32 %162, %160
  %164 = and i32 %163, 1
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %166, %165
  %168 = select i1 %167, i32 -1622297800, i32 1669835421
  br label %.backedge

169:                                              ; preds = %10
  %170 = load i32, i32* @n, align 4
  %171 = icmp sle i32 %.078, %170
  store i1 %171, i1* %3, align 1
  %172 = load i32, i32* @x.9, align 4
  %173 = load i32, i32* @y.10, align 4
  %174 = add i32 %172, -1
  %175 = mul i32 %174, %172
  %176 = and i32 %175, 1
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %178, %177
  %180 = select i1 %179, i32 -1528346694, i32 1669835421
  br label %.backedge

181:                                              ; preds = %10
  %.0..0..0.67 = load volatile i1, i1* %3, align 1
  %182 = select i1 %.0..0..0.67, i32 1212178299, i32 1161213097
  br label %.backedge

183:                                              ; preds = %10
  %.not = icmp eq i8 %.084, 0
  %184 = select i1 %.not, i32 1172210536, i32 -737036208
  br label %.backedge

185:                                              ; preds = %10
  %186 = load i32, i32* @x.9, align 4
  %187 = load i32, i32* @y.10, align 4
  %188 = add i32 %186, -1
  %189 = mul i32 %188, %186
  %190 = and i32 %189, 1
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %192, %191
  %194 = select i1 %193, i32 1162593635, i32 975102424
  br label %.backedge

195:                                              ; preds = %10
  %196 = tail call i32 @putchar(i32 76)
  %197 = load i32, i32* @x.9, align 4
  %198 = load i32, i32* @y.10, align 4
  %199 = add i32 %197, -1
  %200 = mul i32 %199, %197
  %201 = and i32 %200, 1
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %203, %202
  %205 = select i1 %204, i32 -1464488028, i32 975102424
  br label %.backedge

206:                                              ; preds = %10
  br label %.backedge

207:                                              ; preds = %10
  %208 = load i32, i32* @x.9, align 4
  %209 = load i32, i32* @y.10, align 4
  %210 = add i32 %208, -1
  %211 = mul i32 %210, %208
  %212 = and i32 %211, 1
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %214, %213
  %216 = select i1 %215, i32 -1591356674, i32 -2098709375
  br label %.backedge

217:                                              ; preds = %10
  %218 = sext i32 %.078 to i64
  %219 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %218, i32 0
  %220 = load i32, i32* %219, align 8
  %221 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %218, i32 1
  %222 = load i32, i32* %221, align 4
  %223 = load i32, i32* @x.9, align 4
  %224 = load i32, i32* @y.10, align 4
  %225 = add i32 %223, -1
  %226 = mul i32 %225, %223
  %227 = and i32 %226, 1
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %229, %228
  %231 = select i1 %230, i32 -399406063, i32 -2098709375
  br label %.backedge

232:                                              ; preds = %10
  br label %.backedge

233:                                              ; preds = %10
  %234 = load i32, i32* @x.9, align 4
  %235 = load i32, i32* @y.10, align 4
  %236 = add i32 %234, -1
  %237 = mul i32 %236, %234
  %238 = and i32 %237, 1
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %240, %239
  %242 = select i1 %241, i32 -777170943, i32 -724328454
  br label %.backedge

243:                                              ; preds = %10
  %244 = icmp sgt i32 %.072, -1
  store i1 %244, i1* %2, align 1
  %245 = load i32, i32* @x.9, align 4
  %246 = load i32, i32* @y.10, align 4
  %247 = add i32 %245, -1
  %248 = mul i32 %247, %245
  %249 = and i32 %248, 1
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %251, %250
  %253 = select i1 %252, i32 1851975204, i32 -724328454
  br label %.backedge

254:                                              ; preds = %10
  %.0..0..0.68 = load volatile i1, i1* %2, align 1
  %255 = select i1 %.0..0..0.68, i32 478966607, i32 347920209
  br label %.backedge

256:                                              ; preds = %10
  %257 = shl nuw i32 1, %.072
  %258 = add i32 %257, %.076
  %259 = tail call i32 @llvm.abs.i32(i32 %258, i1 true)
  %260 = tail call i32 @llvm.abs.i32(i32 %.074, i1 true)
  %narrow95 = add nuw i32 %259, %260
  %261 = zext i32 %narrow95 to i64
  %262 = sext i32 %257 to i64
  %263 = icmp slt i64 %261, %262
  %264 = select i1 %263, i32 1942329892, i32 -1283355586
  br label %.backedge

265:                                              ; preds = %10
  %266 = load i32, i32* @x.9, align 4
  %267 = load i32, i32* @y.10, align 4
  %268 = add i32 %266, -1
  %269 = mul i32 %268, %266
  %270 = and i32 %269, 1
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %272, %271
  %274 = select i1 %273, i32 1701577584, i32 -718806631
  br label %.backedge

275:                                              ; preds = %10
  %276 = shl nuw i32 1, %.072
  %277 = add i32 %276, %.076
  %278 = sext i32 %.072 to i64
  %279 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %278
  store i32 1, i32* %279, align 4
  %280 = load i32, i32* @x.9, align 4
  %281 = load i32, i32* @y.10, align 4
  %282 = add i32 %280, -1
  %283 = mul i32 %282, %280
  %284 = and i32 %283, 1
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %286, %285
  %288 = select i1 %287, i32 1335902433, i32 -718806631
  br label %.backedge

289:                                              ; preds = %10
  br label %.backedge

290:                                              ; preds = %10
  %291 = shl nuw i32 1, %.072
  %292 = add i32 %.076, 1930001776
  %293 = sub i32 %292, %291
  %294 = add i32 %293, -1930001776
  %295 = icmp slt i32 %294, 0
  %neg = sub i32 1930001776, %293
  %296 = select i1 %295, i32 %neg, i32 %294
  %297 = sext i32 %296 to i64
  %298 = tail call i32 @llvm.abs.i32(i32 %.074, i1 true)
  %299 = zext i32 %298 to i64
  %300 = add nsw i64 %297, %299
  %301 = sext i32 %291 to i64
  %302 = icmp slt i64 %300, %301
  %303 = select i1 %302, i32 -2038732856, i32 -1235572062
  br label %.backedge

304:                                              ; preds = %10
  %.neg91 = shl nsw i32 -1, %.072
  %305 = add i32 %.neg91, %.076
  %306 = sext i32 %.072 to i64
  %307 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %306
  store i32 2, i32* %307, align 4
  br label %.backedge

308:                                              ; preds = %10
  %309 = tail call i32 @llvm.abs.i32(i32 %.076, i1 true)
  %310 = shl nuw i32 1, %.072
  %311 = add i32 %310, %.074
  %312 = tail call i32 @llvm.abs.i32(i32 %311, i1 true)
  %narrow = add nuw i32 %312, %309
  %313 = zext i32 %narrow to i64
  %314 = sext i32 %310 to i64
  %315 = icmp slt i64 %313, %314
  %316 = select i1 %315, i32 -1824244606, i32 1503004184
  br label %.backedge

317:                                              ; preds = %10
  %318 = load i32, i32* @x.9, align 4
  %319 = load i32, i32* @y.10, align 4
  %320 = add i32 %318, -1
  %321 = mul i32 %320, %318
  %322 = and i32 %321, 1
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %324, %323
  %326 = select i1 %325, i32 -619167244, i32 1561910099
  br label %.backedge

327:                                              ; preds = %10
  %.neg90.neg = shl nuw i32 1, %.072
  %328 = add i32 %.neg90.neg, %.074
  %329 = sext i32 %.072 to i64
  %330 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %329
  store i32 3, i32* %330, align 4
  %331 = load i32, i32* @x.9, align 4
  %332 = load i32, i32* @y.10, align 4
  %333 = add i32 %331, -1
  %334 = mul i32 %333, %331
  %335 = and i32 %334, 1
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %337, %336
  %339 = select i1 %338, i32 233656928, i32 1561910099
  br label %.backedge

340:                                              ; preds = %10
  br label %.backedge

341:                                              ; preds = %10
  %.neg89 = shl nsw i32 -1, %.072
  %342 = add i32 %.neg89, %.074
  %343 = sext i32 %.072 to i64
  %344 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %343
  store i32 4, i32* %344, align 4
  br label %.backedge

345:                                              ; preds = %10
  br label %.backedge

346:                                              ; preds = %10
  %347 = load i32, i32* @x.9, align 4
  %348 = load i32, i32* @y.10, align 4
  %349 = add i32 %347, -1
  %350 = mul i32 %349, %347
  %351 = and i32 %350, 1
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %353, %352
  %355 = select i1 %354, i32 -1493754496, i32 -1313829758
  br label %.backedge

356:                                              ; preds = %10
  %357 = load i32, i32* @x.9, align 4
  %358 = load i32, i32* @y.10, align 4
  %359 = add i32 %357, -1
  %360 = mul i32 %359, %357
  %361 = and i32 %360, 1
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %363, %362
  %365 = select i1 %364, i32 1141787959, i32 -1313829758
  br label %.backedge

366:                                              ; preds = %10
  br label %.backedge

367:                                              ; preds = %10
  br label %.backedge

368:                                              ; preds = %10
  %369 = add i32 %.072, -1
  br label %.backedge

370:                                              ; preds = %10
  br label %.backedge

371:                                              ; preds = %10
  %372 = icmp slt i32 %.070, 31
  %373 = select i1 %372, i32 1493312011, i32 -1508324540
  br label %.backedge

374:                                              ; preds = %10
  %375 = sext i32 %.070 to i64
  %376 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %375
  %377 = load i32, i32* %376, align 4
  %378 = icmp eq i32 %377, 1
  %379 = select i1 %378, i32 -428656658, i32 -714676169
  br label %.backedge

380:                                              ; preds = %10
  %381 = load i32, i32* @x.9, align 4
  %382 = load i32, i32* @y.10, align 4
  %383 = add i32 %381, -1
  %384 = mul i32 %383, %381
  %385 = and i32 %384, 1
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %387, %386
  %389 = select i1 %388, i32 -2072523974, i32 510144633
  br label %.backedge

390:                                              ; preds = %10
  %391 = tail call i32 @putchar(i32 76)
  %392 = load i32, i32* @x.9, align 4
  %393 = load i32, i32* @y.10, align 4
  %394 = add i32 %392, -1
  %395 = mul i32 %394, %392
  %396 = and i32 %395, 1
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %398, %397
  %400 = select i1 %399, i32 -944870546, i32 510144633
  br label %.backedge

401:                                              ; preds = %10
  br label %.backedge

402:                                              ; preds = %10
  %403 = sext i32 %.070 to i64
  %404 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %403
  %405 = load i32, i32* %404, align 4
  %406 = icmp eq i32 %405, 2
  %407 = select i1 %406, i32 -929464373, i32 -101403726
  br label %.backedge

408:                                              ; preds = %10
  %409 = load i32, i32* @x.9, align 4
  %410 = load i32, i32* @y.10, align 4
  %411 = add i32 %409, -1
  %412 = mul i32 %411, %409
  %413 = and i32 %412, 1
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %415, %414
  %417 = select i1 %416, i32 512661147, i32 2003095477
  br label %.backedge

418:                                              ; preds = %10
  %419 = tail call i32 @putchar(i32 82)
  %420 = load i32, i32* @x.9, align 4
  %421 = load i32, i32* @y.10, align 4
  %422 = add i32 %420, -1
  %423 = mul i32 %422, %420
  %424 = and i32 %423, 1
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %426, %425
  %428 = select i1 %427, i32 -1636479562, i32 2003095477
  br label %.backedge

429:                                              ; preds = %10
  br label %.backedge

430:                                              ; preds = %10
  %431 = sext i32 %.070 to i64
  %432 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %431
  %433 = load i32, i32* %432, align 4
  %434 = icmp eq i32 %433, 3
  %435 = select i1 %434, i32 1567112502, i32 555134975
  br label %.backedge

436:                                              ; preds = %10
  %437 = tail call i32 @putchar(i32 68)
  br label %.backedge

438:                                              ; preds = %10
  %439 = sext i32 %.070 to i64
  %440 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %439
  %441 = load i32, i32* %440, align 4
  %442 = icmp eq i32 %441, 4
  %443 = select i1 %442, i32 1684859283, i32 -195396099
  br label %.backedge

444:                                              ; preds = %10
  %445 = tail call i32 @putchar(i32 85)
  br label %.backedge

446:                                              ; preds = %10
  br label %.backedge

447:                                              ; preds = %10
  %448 = load i32, i32* @x.9, align 4
  %449 = load i32, i32* @y.10, align 4
  %450 = add i32 %448, -1
  %451 = mul i32 %450, %448
  %452 = and i32 %451, 1
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %449, 10
  %455 = or i1 %454, %453
  %456 = select i1 %455, i32 969686631, i32 -2130050722
  br label %.backedge

457:                                              ; preds = %10
  %458 = add i32 %.070, 1
  %459 = load i32, i32* @x.9, align 4
  %460 = load i32, i32* @y.10, align 4
  %461 = add i32 %459, -1
  %462 = mul i32 %461, %459
  %463 = and i32 %462, 1
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %465, %464
  %467 = select i1 %466, i32 23282131, i32 -2130050722
  br label %.backedge

468:                                              ; preds = %10
  br label %.backedge

469:                                              ; preds = %10
  %putchar = tail call i32 @putchar(i32 10)
  br label %.backedge

470:                                              ; preds = %10
  %471 = add i32 %.078, 1
  br label %.backedge

472:                                              ; preds = %10
  br label %.backedge

473:                                              ; preds = %10
  %474 = load i32, i32* @x.9, align 4
  %475 = load i32, i32* @y.10, align 4
  %476 = add i32 %474, -1
  %477 = mul i32 %476, %474
  %478 = and i32 %477, 1
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %480, %479
  %482 = select i1 %481, i32 244365371, i32 393707977
  br label %.backedge

483:                                              ; preds = %10
  %484 = load i32, i32* @x.9, align 4
  %485 = load i32, i32* @y.10, align 4
  %486 = add i32 %484, -1
  %487 = mul i32 %486, %484
  %488 = and i32 %487, 1
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %490, %489
  %492 = select i1 %491, i32 1930917467, i32 393707977
  br label %.backedge

493:                                              ; preds = %10
  store i32 0, i32* %1, align 4
  %.0..0..0.69 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.69

494:                                              ; preds = %10
  %495 = load i32, i32* getelementptr inbounds ([1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 1, i32 0), align 8
  %.neg = add i32 %495, 1
  store i32 %.neg, i32* getelementptr inbounds ([1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 1, i32 0), align 8
  br label %.backedge

496:                                              ; preds = %10
  br label %.backedge

497:                                              ; preds = %10
  %498 = add i32 %.082, 1
  br label %.backedge

499:                                              ; preds = %10
  %500 = shl nuw i32 1, %.080
  %501 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i32 %500)
  br label %.backedge

502:                                              ; preds = %10
  %503 = add i32 %.080, 1
  br label %.backedge

504:                                              ; preds = %10
  br label %.backedge

505:                                              ; preds = %10
  %506 = tail call i32 @putchar(i32 76)
  br label %.backedge

507:                                              ; preds = %10
  %508 = sext i32 %.078 to i64
  %509 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %508, i32 0
  %510 = load i32, i32* %509, align 8
  %511 = getelementptr inbounds [1005 x %struct.pt], [1005 x %struct.pt]* @a, i64 0, i64 %508, i32 1
  %512 = load i32, i32* %511, align 4
  br label %.backedge

513:                                              ; preds = %10
  br label %.backedge

514:                                              ; preds = %10
  %515 = shl nuw i32 1, %.072
  %516 = add i32 %515, %.076
  %517 = sext i32 %.072 to i64
  %518 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %517
  store i32 1, i32* %518, align 4
  br label %.backedge

519:                                              ; preds = %10
  %.neg.neg = shl nuw i32 1, %.072
  %.neg88 = add i32 %.neg.neg, %.074
  %520 = sext i32 %.072 to i64
  %521 = getelementptr inbounds [1005 x i32], [1005 x i32]* @st, i64 0, i64 %520
  store i32 3, i32* %521, align 4
  br label %.backedge

522:                                              ; preds = %10
  br label %.backedge

523:                                              ; preds = %10
  %524 = tail call i32 @putchar(i32 76)
  br label %.backedge

525:                                              ; preds = %10
  %526 = tail call i32 @putchar(i32 82)
  br label %.backedge

527:                                              ; preds = %10
  %528 = add i32 %.070, 1
  br label %.backedge

529:                                              ; preds = %10
  br label %.backedge
}

; Function Attrs: nofree nounwind
declare noundef i32 @scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #6

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s326558823.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #7

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { mustprogress nofree noinline norecurse nosync nounwind readnone uwtable willreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
