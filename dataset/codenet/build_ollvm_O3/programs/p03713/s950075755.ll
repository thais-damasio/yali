; ModuleID = 'build_ollvm/programs/p03713/s950075755.ll'
source_filename = "Project_CodeNet_C++1400/p03713/s950075755.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

$_ZSt3absx = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s950075755.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline uwtable
define void @_Z11solve_abc_cv() local_unnamed_addr #0 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  store i64 0, i64* %8, align 8
  %19 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %6)
  %20 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %19, i64* nonnull dereferenceable(8) %7)
  %21 = load i64, i64* %6, align 8
  %22 = srem i64 %21, 3
  store i64 %22, i64* %5, align 8
  br label %23

23:                                               ; preds = %.backedge, %0
  %.085 = phi i64 [ undef, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i64 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i64 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i64 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i64 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i64 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i64 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.0 = phi i32 [ -1852978809, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1852978809, label %24
    i32 -1591788826, label %27
    i32 -699351390, label %32
    i32 696572555, label %33
    i32 2035834976, label %46
    i32 -1963804816, label %47
    i32 -150333004, label %51
    i32 -1249976569, label %60
    i32 -428089024, label %70
    i32 911056646, label %81
    i32 -769509965, label %82
    i32 -346946000, label %92
    i32 -720936561, label %102
    i32 1756649544, label %103
    i32 -400127806, label %104
    i32 -787800547, label %114
    i32 -2028526311, label %126
    i32 163666148, label %128
    i32 1951773669, label %138
    i32 -1980418575, label %148
    i32 1514146753, label %159
    i32 1366185915, label %161
    i32 -1394954976, label %166
    i32 586075848, label %168
    i32 2013455821, label %170
    i32 498971024, label %180
    i32 -1939582117, label %194
    i32 989280434, label %195
    i32 -1044296908, label %197
    i32 1408836329, label %199
    i32 636371018, label %209
    i32 2000124680, label %223
    i32 -1996642371, label %224
    i32 2139209753, label %225
    i32 -1479969464, label %226
    i32 -855541317, label %227
    i32 -1084524643, label %237
    i32 1357570767, label %248
    i32 -1650831474, label %249
    i32 -1975070060, label %250
    i32 955430944, label %255
    i32 1566231464, label %256
    i32 -388788932, label %260
    i32 1020698413, label %269
    i32 799028026, label %271
    i32 -424769428, label %281
    i32 896381630, label %291
    i32 32826420, label %292
    i32 1084385039, label %293
    i32 -1795405434, label %303
    i32 -109779788, label %315
    i32 2043957560, label %317
    i32 -1157822755, label %327
    i32 -1909745915, label %329
    i32 -994524293, label %339
    i32 -242027716, label %353
    i32 -1184513018, label %354
    i32 242844216, label %356
    i32 103282303, label %358
    i32 -1066706058, label %363
    i32 282795214, label %373
    i32 759627613, label %384
    i32 1920766618, label %386
    i32 1900545405, label %388
    i32 1731670956, label %393
    i32 -157851759, label %403
    i32 2108727948, label %413
    i32 159400115, label %414
    i32 -733165459, label %424
    i32 1593092326, label %434
    i32 -822924488, label %435
    i32 24821764, label %436
    i32 -632232795, label %438
    i32 150610718, label %439
    i32 -1898763603, label %440
    i32 -1440158300, label %444
    i32 856730791, label %445
    i32 -1711454584, label %446
    i32 997374060, label %447
    i32 -772548723, label %448
    i32 523750776, label %453
    i32 1172332992, label %458
    i32 1560182782, label %460
    i32 -1277519535, label %461
    i32 -1154796172, label %462
    i32 1538691856, label %467
    i32 -1601866486, label %468
    i32 -905500466, label %469
  ]

.backedge:                                        ; preds = %23, %469, %468, %467, %462, %461, %460, %458, %453, %448, %447, %446, %445, %444, %439, %438, %436, %435, %434, %424, %414, %413, %403, %393, %388, %386, %384, %373, %363, %358, %356, %354, %353, %339, %329, %327, %317, %315, %303, %293, %292, %291, %281, %271, %269, %260, %256, %255, %250, %249, %248, %237, %227, %226, %225, %224, %223, %209, %199, %197, %195, %194, %180, %170, %168, %166, %161, %159, %148, %138, %128, %126, %114, %104, %103, %102, %92, %82, %81, %70, %60, %51, %47, %46, %33, %32, %27, %24
  %.085.be = phi i64 [ %.085, %23 ], [ %.085, %469 ], [ %.085, %468 ], [ %.085, %467 ], [ %.085, %462 ], [ %.085, %461 ], [ %.085, %460 ], [ %.085, %458 ], [ %.085, %453 ], [ %.085, %448 ], [ %.085, %447 ], [ %.085, %446 ], [ %.085, %445 ], [ %.085, %444 ], [ %.085, %439 ], [ %.085, %438 ], [ %.085, %436 ], [ %.085, %435 ], [ %.085, %434 ], [ %.085, %424 ], [ %.085, %414 ], [ %.085, %413 ], [ %.085, %403 ], [ %.085, %393 ], [ %.085, %388 ], [ %.085, %386 ], [ %.085, %384 ], [ %.085, %373 ], [ %.085, %363 ], [ %.085, %358 ], [ %.085, %356 ], [ %.085, %354 ], [ %.085, %353 ], [ %.085, %339 ], [ %.085, %329 ], [ %.085, %327 ], [ %319, %317 ], [ %.085, %315 ], [ %.085, %303 ], [ %.085, %293 ], [ %.085, %292 ], [ %.085, %291 ], [ %.085, %281 ], [ %.085, %271 ], [ %.085, %269 ], [ %.085, %260 ], [ %.085, %256 ], [ %.085, %255 ], [ %.085, %250 ], [ %.085, %249 ], [ %.085, %248 ], [ %.085, %237 ], [ %.085, %227 ], [ %.085, %226 ], [ %.085, %225 ], [ %.085, %224 ], [ %.085, %223 ], [ %.085, %209 ], [ %.085, %199 ], [ %.085, %197 ], [ %.085, %195 ], [ %.085, %194 ], [ %.085, %180 ], [ %.085, %170 ], [ %.085, %168 ], [ %.085, %166 ], [ %.085, %161 ], [ %.085, %159 ], [ %.085, %148 ], [ %.085, %138 ], [ %130, %128 ], [ %.085, %126 ], [ %.085, %114 ], [ %.085, %104 ], [ %.085, %103 ], [ %.085, %102 ], [ %.085, %92 ], [ %.085, %82 ], [ %.085, %81 ], [ %.085, %70 ], [ %.085, %60 ], [ %.085, %51 ], [ %.085, %47 ], [ %.085, %46 ], [ %.085, %33 ], [ %.085, %32 ], [ %.085, %27 ], [ %.085, %24 ]
  %.083.be = phi i64 [ %.083, %23 ], [ %.083, %469 ], [ %.083, %468 ], [ %.083, %467 ], [ %.083, %462 ], [ %.083, %461 ], [ %.083, %460 ], [ %.083, %458 ], [ %.083, %453 ], [ %.083, %448 ], [ %.083, %447 ], [ %.083, %446 ], [ %.083, %445 ], [ %.083, %444 ], [ %.083, %439 ], [ %.083, %438 ], [ %.083, %436 ], [ %.083, %435 ], [ %.083, %434 ], [ %.083, %424 ], [ %.083, %414 ], [ %.083, %413 ], [ %.083, %403 ], [ %.083, %393 ], [ %.083, %388 ], [ %.083, %386 ], [ %.083, %384 ], [ %.083, %373 ], [ %.083, %363 ], [ %.083, %358 ], [ %.083, %356 ], [ %.083, %354 ], [ %.083, %353 ], [ %.083, %339 ], [ %.083, %329 ], [ %.083, %327 ], [ %323, %317 ], [ %.083, %315 ], [ %.083, %303 ], [ %.083, %293 ], [ %.083, %292 ], [ %.083, %291 ], [ %.083, %281 ], [ %.083, %271 ], [ %.083, %269 ], [ %.083, %260 ], [ %.083, %256 ], [ %.083, %255 ], [ %.083, %250 ], [ %.083, %249 ], [ %.083, %248 ], [ %.083, %237 ], [ %.083, %227 ], [ %.083, %226 ], [ %.083, %225 ], [ %.083, %224 ], [ %.083, %223 ], [ %.083, %209 ], [ %.083, %199 ], [ %.083, %197 ], [ %.083, %195 ], [ %.083, %194 ], [ %.083, %180 ], [ %.083, %170 ], [ %.083, %168 ], [ %.083, %166 ], [ %.083, %161 ], [ %.083, %159 ], [ %.083, %148 ], [ %.083, %138 ], [ %134, %128 ], [ %.083, %126 ], [ %.083, %114 ], [ %.083, %104 ], [ %.083, %103 ], [ %.083, %102 ], [ %.083, %92 ], [ %.083, %82 ], [ %.083, %81 ], [ %.083, %70 ], [ %.083, %60 ], [ %.083, %51 ], [ %.083, %47 ], [ %.083, %46 ], [ %.083, %33 ], [ %.083, %32 ], [ %.083, %27 ], [ %.083, %24 ]
  %.081.be = phi i64 [ %.081, %23 ], [ %.081, %469 ], [ %.081, %468 ], [ %.081, %467 ], [ %.081, %462 ], [ %.081, %461 ], [ %.081, %460 ], [ %.081, %458 ], [ %.081, %453 ], [ %.081, %448 ], [ %.081, %447 ], [ %.081, %446 ], [ %.081, %445 ], [ %.081, %444 ], [ %.081, %439 ], [ %.081, %438 ], [ %.081, %436 ], [ %.081, %435 ], [ %.081, %434 ], [ %.081, %424 ], [ %.081, %414 ], [ %.081, %413 ], [ %.081, %403 ], [ %.081, %393 ], [ %.081, %388 ], [ %.081, %386 ], [ %.081, %384 ], [ %.081, %373 ], [ %.081, %363 ], [ %.081, %358 ], [ %.081, %356 ], [ %.081, %354 ], [ %.081, %353 ], [ %.081, %339 ], [ %.081, %329 ], [ %.081, %327 ], [ %325, %317 ], [ %.081, %315 ], [ %.081, %303 ], [ %.081, %293 ], [ %.081, %292 ], [ %.081, %291 ], [ %.081, %281 ], [ %.081, %271 ], [ %.081, %269 ], [ %.081, %260 ], [ %.081, %256 ], [ %.081, %255 ], [ %.081, %250 ], [ %.081, %249 ], [ %.081, %248 ], [ %.081, %237 ], [ %.081, %227 ], [ %.081, %226 ], [ %.081, %225 ], [ %.081, %224 ], [ %.081, %223 ], [ %.081, %209 ], [ %.081, %199 ], [ %.081, %197 ], [ %.081, %195 ], [ %.081, %194 ], [ %.081, %180 ], [ %.081, %170 ], [ %.081, %168 ], [ %.081, %166 ], [ %.081, %161 ], [ %.081, %159 ], [ %.081, %148 ], [ %.081, %138 ], [ %136, %128 ], [ %.081, %126 ], [ %.081, %114 ], [ %.081, %104 ], [ %.081, %103 ], [ %.081, %102 ], [ %.081, %92 ], [ %.081, %82 ], [ %.081, %81 ], [ %.081, %70 ], [ %.081, %60 ], [ %.081, %51 ], [ %.081, %47 ], [ %.081, %46 ], [ %.081, %33 ], [ %.081, %32 ], [ %.081, %27 ], [ %.081, %24 ]
  %.079.be = phi i64 [ %.079, %23 ], [ %.079, %469 ], [ %.079, %468 ], [ %.079, %467 ], [ %.079, %462 ], [ %.079, %461 ], [ %.079, %460 ], [ %.079, %458 ], [ %.079, %453 ], [ %.079, %448 ], [ %.079, %447 ], [ %.079, %446 ], [ %.079, %445 ], [ %.neg, %444 ], [ %.079, %439 ], [ %.079, %438 ], [ %.079, %436 ], [ %.079, %435 ], [ %.079, %434 ], [ %.079, %424 ], [ %.079, %414 ], [ %.079, %413 ], [ %.079, %403 ], [ %.079, %393 ], [ %.079, %388 ], [ %.079, %386 ], [ %.079, %384 ], [ %.079, %373 ], [ %.079, %363 ], [ %.079, %358 ], [ %.079, %356 ], [ %.079, %354 ], [ %.079, %353 ], [ %.079, %339 ], [ %.079, %329 ], [ %.079, %327 ], [ %.079, %317 ], [ %.079, %315 ], [ %.079, %303 ], [ %.079, %293 ], [ %.079, %292 ], [ %.079, %291 ], [ %.079, %281 ], [ %.079, %271 ], [ %.079, %269 ], [ %.079, %260 ], [ %.079, %256 ], [ %.079, %255 ], [ %.079, %250 ], [ %.079, %249 ], [ %.079, %248 ], [ %.079, %237 ], [ %.079, %227 ], [ %.079, %226 ], [ %.079, %225 ], [ %.079, %224 ], [ %.079, %223 ], [ %.079, %209 ], [ %.079, %199 ], [ %.079, %197 ], [ %.079, %195 ], [ %.079, %194 ], [ %.079, %180 ], [ %.079, %170 ], [ %.079, %168 ], [ %.079, %166 ], [ %.079, %161 ], [ %.079, %159 ], [ %.079, %148 ], [ %.079, %138 ], [ %.079, %128 ], [ %.079, %126 ], [ %.079, %114 ], [ %.079, %104 ], [ %.079, %103 ], [ %.079, %102 ], [ %.079, %92 ], [ %.079, %82 ], [ %.079, %81 ], [ %71, %70 ], [ %.079, %60 ], [ %.079, %51 ], [ %.079, %47 ], [ 1, %46 ], [ %.079, %33 ], [ %.079, %32 ], [ %.079, %27 ], [ %.079, %24 ]
  %.077.be = phi i64 [ %.077, %23 ], [ %.077, %469 ], [ %.077, %468 ], [ %.077, %467 ], [ %.077, %462 ], [ %.077, %461 ], [ %.077, %460 ], [ %459, %458 ], [ %.077, %453 ], [ %.077, %448 ], [ %.077, %447 ], [ %.077, %446 ], [ %.077, %445 ], [ %.077, %444 ], [ %.077, %439 ], [ %.077, %438 ], [ %.077, %436 ], [ %.077, %435 ], [ %.077, %434 ], [ %.077, %424 ], [ %.077, %414 ], [ %.077, %413 ], [ %.077, %403 ], [ %.077, %393 ], [ %.077, %388 ], [ %.077, %386 ], [ %.077, %384 ], [ %.077, %373 ], [ %.077, %363 ], [ %.077, %358 ], [ %.077, %356 ], [ %.077, %354 ], [ %.077, %353 ], [ %.077, %339 ], [ %.077, %329 ], [ %.077, %327 ], [ %.077, %317 ], [ %.077, %315 ], [ %.077, %303 ], [ %.077, %293 ], [ %.077, %292 ], [ %.077, %291 ], [ %.077, %281 ], [ %.077, %271 ], [ %.077, %269 ], [ %.077, %260 ], [ %.077, %256 ], [ %.077, %255 ], [ %.077, %250 ], [ %.077, %249 ], [ %.077, %248 ], [ %238, %237 ], [ %.077, %227 ], [ %.077, %226 ], [ %.077, %225 ], [ %.077, %224 ], [ %.077, %223 ], [ %.077, %209 ], [ %.077, %199 ], [ %.077, %197 ], [ %.077, %195 ], [ %.077, %194 ], [ %.077, %180 ], [ %.077, %170 ], [ %.077, %168 ], [ %.077, %166 ], [ %.077, %161 ], [ %.077, %159 ], [ %.077, %148 ], [ %.077, %138 ], [ %.077, %128 ], [ %.077, %126 ], [ %.077, %114 ], [ %.077, %104 ], [ 1, %103 ], [ %.077, %102 ], [ %.077, %92 ], [ %.077, %82 ], [ %.077, %81 ], [ %.077, %70 ], [ %.077, %60 ], [ %.077, %51 ], [ %.077, %47 ], [ %.077, %46 ], [ %.077, %33 ], [ %.077, %32 ], [ %.077, %27 ], [ %.077, %24 ]
  %.075.be = phi i64 [ %.075, %23 ], [ %.075, %469 ], [ %.075, %468 ], [ %.075, %467 ], [ %.075, %462 ], [ %.075, %461 ], [ %.075, %460 ], [ %.075, %458 ], [ %.075, %453 ], [ %.075, %448 ], [ %.075, %447 ], [ %.075, %446 ], [ %.075, %445 ], [ %.075, %444 ], [ %.075, %439 ], [ %.075, %438 ], [ %.075, %436 ], [ %.075, %435 ], [ %.075, %434 ], [ %.075, %424 ], [ %.075, %414 ], [ %.075, %413 ], [ %.075, %403 ], [ %.075, %393 ], [ %.075, %388 ], [ %.075, %386 ], [ %.075, %384 ], [ %.075, %373 ], [ %.075, %363 ], [ %.075, %358 ], [ %.075, %356 ], [ %.075, %354 ], [ %.075, %353 ], [ %.075, %339 ], [ %.075, %329 ], [ %.075, %327 ], [ %.075, %317 ], [ %.075, %315 ], [ %.075, %303 ], [ %.075, %293 ], [ %.075, %292 ], [ %.075, %291 ], [ %.075, %281 ], [ %.075, %271 ], [ %270, %269 ], [ %.075, %260 ], [ %.075, %256 ], [ 1, %255 ], [ %.075, %250 ], [ %.075, %249 ], [ %.075, %248 ], [ %.075, %237 ], [ %.075, %227 ], [ %.075, %226 ], [ %.075, %225 ], [ %.075, %224 ], [ %.075, %223 ], [ %.075, %209 ], [ %.075, %199 ], [ %.075, %197 ], [ %.075, %195 ], [ %.075, %194 ], [ %.075, %180 ], [ %.075, %170 ], [ %.075, %168 ], [ %.075, %166 ], [ %.075, %161 ], [ %.075, %159 ], [ %.075, %148 ], [ %.075, %138 ], [ %.075, %128 ], [ %.075, %126 ], [ %.075, %114 ], [ %.075, %104 ], [ %.075, %103 ], [ %.075, %102 ], [ %.075, %92 ], [ %.075, %82 ], [ %.075, %81 ], [ %.075, %70 ], [ %.075, %60 ], [ %.075, %51 ], [ %.075, %47 ], [ %.075, %46 ], [ %.075, %33 ], [ %.075, %32 ], [ %.075, %27 ], [ %.075, %24 ]
  %.073.be = phi i64 [ %.073, %23 ], [ %.073, %469 ], [ %.073, %468 ], [ %.073, %467 ], [ %.073, %462 ], [ %.073, %461 ], [ %.073, %460 ], [ %.073, %458 ], [ %.073, %453 ], [ %.073, %448 ], [ %.073, %447 ], [ %.073, %446 ], [ %.073, %445 ], [ %.073, %444 ], [ %.073, %439 ], [ %.073, %438 ], [ %437, %436 ], [ %.073, %435 ], [ %.073, %434 ], [ %.073, %424 ], [ %.073, %414 ], [ %.073, %413 ], [ %.073, %403 ], [ %.073, %393 ], [ %.073, %388 ], [ %.073, %386 ], [ %.073, %384 ], [ %.073, %373 ], [ %.073, %363 ], [ %.073, %358 ], [ %.073, %356 ], [ %.073, %354 ], [ %.073, %353 ], [ %.073, %339 ], [ %.073, %329 ], [ %.073, %327 ], [ %.073, %317 ], [ %.073, %315 ], [ %.073, %303 ], [ %.073, %293 ], [ 1, %292 ], [ %.073, %291 ], [ %.073, %281 ], [ %.073, %271 ], [ %.073, %269 ], [ %.073, %260 ], [ %.073, %256 ], [ %.073, %255 ], [ %.073, %250 ], [ %.073, %249 ], [ %.073, %248 ], [ %.073, %237 ], [ %.073, %227 ], [ %.073, %226 ], [ %.073, %225 ], [ %.073, %224 ], [ %.073, %223 ], [ %.073, %209 ], [ %.073, %199 ], [ %.073, %197 ], [ %.073, %195 ], [ %.073, %194 ], [ %.073, %180 ], [ %.073, %170 ], [ %.073, %168 ], [ %.073, %166 ], [ %.073, %161 ], [ %.073, %159 ], [ %.073, %148 ], [ %.073, %138 ], [ %.073, %128 ], [ %.073, %126 ], [ %.073, %114 ], [ %.073, %104 ], [ %.073, %103 ], [ %.073, %102 ], [ %.073, %92 ], [ %.073, %82 ], [ %.073, %81 ], [ %.073, %70 ], [ %.073, %60 ], [ %.073, %51 ], [ %.073, %47 ], [ %.073, %46 ], [ %.073, %33 ], [ %.073, %32 ], [ %.073, %27 ], [ %.073, %24 ]
  %.0.be = phi i32 [ %.0, %23 ], [ -733165459, %469 ], [ -157851759, %468 ], [ 282795214, %467 ], [ -994524293, %462 ], [ -1795405434, %461 ], [ -424769428, %460 ], [ -1084524643, %458 ], [ 636371018, %453 ], [ 498971024, %448 ], [ -1980418575, %447 ], [ -787800547, %446 ], [ -346946000, %445 ], [ -428089024, %444 ], [ -1898763603, %439 ], [ 150610718, %438 ], [ 1084385039, %436 ], [ 24821764, %435 ], [ -822924488, %434 ], [ %433, %424 ], [ %423, %414 ], [ 159400115, %413 ], [ %412, %403 ], [ %402, %393 ], [ 1731670956, %388 ], [ %387, %386 ], [ %385, %384 ], [ %383, %373 ], [ %372, %363 ], [ 159400115, %358 ], [ %357, %356 ], [ %355, %354 ], [ -822924488, %353 ], [ %352, %339 ], [ %338, %329 ], [ %328, %327 ], [ %326, %317 ], [ %316, %315 ], [ %314, %303 ], [ %302, %293 ], [ 1084385039, %292 ], [ 150610718, %291 ], [ %290, %281 ], [ %280, %271 ], [ 1566231464, %269 ], [ 1020698413, %260 ], [ %259, %256 ], [ 1566231464, %255 ], [ %254, %250 ], [ -1975070060, %249 ], [ -400127806, %248 ], [ %247, %237 ], [ %236, %227 ], [ -855541317, %226 ], [ -1479969464, %225 ], [ 2139209753, %224 ], [ -1996642371, %223 ], [ %222, %209 ], [ %208, %199 ], [ %198, %197 ], [ %196, %195 ], [ 2139209753, %194 ], [ %193, %180 ], [ %179, %170 ], [ %169, %168 ], [ %167, %166 ], [ -1479969464, %161 ], [ %160, %159 ], [ %158, %148 ], [ %147, %138 ], [ %137, %128 ], [ %127, %126 ], [ %125, %114 ], [ %113, %104 ], [ -400127806, %103 ], [ -1975070060, %102 ], [ %101, %92 ], [ %91, %82 ], [ -1963804816, %81 ], [ %80, %70 ], [ %69, %60 ], [ -1249976569, %51 ], [ %50, %47 ], [ -1963804816, %46 ], [ %45, %33 ], [ -1898763603, %32 ], [ %31, %27 ], [ %26, %24 ]
  br label %23

24:                                               ; preds = %23
  %.0..0..0. = load volatile i64, i64* %5, align 8
  %25 = icmp eq i64 %.0..0..0., 0
  %26 = select i1 %25, i32 -699351390, i32 -1591788826
  br label %.backedge

27:                                               ; preds = %23
  %28 = load i64, i64* %7, align 8
  %29 = srem i64 %28, 3
  %30 = icmp eq i64 %29, 0
  %31 = select i1 %30, i32 -699351390, i32 696572555
  br label %.backedge

32:                                               ; preds = %23
  store i64 0, i64* %8, align 8
  br label %.backedge

33:                                               ; preds = %23
  store i64 1000000000, i64* %8, align 8
  %34 = load i64, i64* %7, align 8
  %35 = call i64 @_ZSt3absx(i64 %34)
  store i64 %35, i64* %9, align 8
  %36 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %9)
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %8, align 8
  %38 = load i64, i64* %6, align 8
  %39 = call i64 @_ZSt3absx(i64 %38)
  store i64 %39, i64* %10, align 8
  %40 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %10)
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %8, align 8
  %42 = load i64, i64* %6, align 8
  %43 = and i64 %42, 1
  %44 = icmp eq i64 %43, 0
  %45 = select i1 %44, i32 2035834976, i32 1756649544
  br label %.backedge

46:                                               ; preds = %23
  br label %.backedge

47:                                               ; preds = %23
  %48 = load i64, i64* %7, align 8
  %49 = icmp slt i64 %.079, %48
  %50 = select i1 %49, i32 -150333004, i32 -769509965
  br label %.backedge

51:                                               ; preds = %23
  %52 = load i64, i64* %6, align 8
  %53 = mul nsw i64 %52, %.079
  %54 = sdiv i64 %52, 2
  %55 = load i64, i64* %7, align 8
  %.neg100 = sub i64 %.079, %55
  %.neg101 = mul i64 %.neg100, %54
  %56 = add i64 %.neg101, %53
  %57 = call i64 @_ZSt3absx(i64 %56)
  store i64 %57, i64* %11, align 8
  %58 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %11)
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %8, align 8
  br label %.backedge

60:                                               ; preds = %23
  %61 = load i32, i32* @x.1, align 4
  %62 = load i32, i32* @y.2, align 4
  %63 = add i32 %61, -1
  %64 = mul i32 %63, %61
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %67, %66
  %69 = select i1 %68, i32 -428089024, i32 -1440158300
  br label %.backedge

70:                                               ; preds = %23
  %71 = add i64 %.079, 1
  %72 = load i32, i32* @x.1, align 4
  %73 = load i32, i32* @y.2, align 4
  %74 = add i32 %72, -1
  %75 = mul i32 %74, %72
  %76 = and i32 %75, 1
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %78, %77
  %80 = select i1 %79, i32 911056646, i32 -1440158300
  br label %.backedge

81:                                               ; preds = %23
  br label %.backedge

82:                                               ; preds = %23
  %83 = load i32, i32* @x.1, align 4
  %84 = load i32, i32* @y.2, align 4
  %85 = add i32 %83, -1
  %86 = mul i32 %85, %83
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %89, %88
  %91 = select i1 %90, i32 -346946000, i32 856730791
  br label %.backedge

92:                                               ; preds = %23
  %93 = load i32, i32* @x.1, align 4
  %94 = load i32, i32* @y.2, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 -720936561, i32 856730791
  br label %.backedge

102:                                              ; preds = %23
  br label %.backedge

103:                                              ; preds = %23
  br label %.backedge

104:                                              ; preds = %23
  %105 = load i32, i32* @x.1, align 4
  %106 = load i32, i32* @y.2, align 4
  %107 = add i32 %105, -1
  %108 = mul i32 %107, %105
  %109 = and i32 %108, 1
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %111, %110
  %113 = select i1 %112, i32 -787800547, i32 -1711454584
  br label %.backedge

114:                                              ; preds = %23
  %115 = load i64, i64* %7, align 8
  %116 = icmp slt i64 %.077, %115
  store i1 %116, i1* %4, align 1
  %117 = load i32, i32* @x.1, align 4
  %118 = load i32, i32* @y.2, align 4
  %119 = add i32 %117, -1
  %120 = mul i32 %119, %117
  %121 = and i32 %120, 1
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %123, %122
  %125 = select i1 %124, i32 -2028526311, i32 -1711454584
  br label %.backedge

126:                                              ; preds = %23
  %.0..0..0.69 = load volatile i1, i1* %4, align 1
  %127 = select i1 %.0..0..0.69, i32 163666148, i32 -1650831474
  br label %.backedge

128:                                              ; preds = %23
  %129 = load i64, i64* %6, align 8
  %130 = mul nsw i64 %129, %.077
  %131 = sdiv i64 %129, 2
  %132 = load i64, i64* %7, align 8
  %133 = sub i64 %132, %.077
  %134 = mul nsw i64 %133, %131
  %135 = add nsw i64 %131, 1
  %136 = mul nsw i64 %135, %133
  %.not98 = icmp slt i64 %130, %134
  %137 = select i1 %.not98, i32 -1394954976, i32 1951773669
  br label %.backedge

138:                                              ; preds = %23
  %139 = load i32, i32* @x.1, align 4
  %140 = load i32, i32* @y.2, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 -1980418575, i32 997374060
  br label %.backedge

148:                                              ; preds = %23
  %149 = icmp sle i64 %.081, %.083
  store i1 %149, i1* %3, align 1
  %150 = load i32, i32* @x.1, align 4
  %151 = load i32, i32* @y.2, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 1514146753, i32 997374060
  br label %.backedge

159:                                              ; preds = %23
  %.0..0..0.70 = load volatile i1, i1* %3, align 1
  %160 = select i1 %.0..0..0.70, i32 1366185915, i32 -1394954976
  br label %.backedge

161:                                              ; preds = %23
  %162 = sub i64 %.085, %.083
  %163 = call i64 @_ZSt3absx(i64 %162)
  store i64 %163, i64* %12, align 8
  %164 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %12)
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %8, align 8
  br label %.backedge

166:                                              ; preds = %23
  %.not97 = icmp slt i64 %.081, %.083
  %167 = select i1 %.not97, i32 989280434, i32 586075848
  br label %.backedge

168:                                              ; preds = %23
  %.not96 = icmp sgt i64 %.085, %.083
  %169 = select i1 %.not96, i32 989280434, i32 2013455821
  br label %.backedge

170:                                              ; preds = %23
  %171 = load i32, i32* @x.1, align 4
  %172 = load i32, i32* @y.2, align 4
  %173 = add i32 %171, -1
  %174 = mul i32 %173, %171
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %177, %176
  %179 = select i1 %178, i32 498971024, i32 -772548723
  br label %.backedge

180:                                              ; preds = %23
  %181 = sub i64 %.081, %.085
  %182 = call i64 @_ZSt3absx(i64 %181)
  store i64 %182, i64* %13, align 8
  %183 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %13)
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %8, align 8
  %185 = load i32, i32* @x.1, align 4
  %186 = load i32, i32* @y.2, align 4
  %187 = add i32 %185, -1
  %188 = mul i32 %187, %185
  %189 = and i32 %188, 1
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %191, %190
  %193 = select i1 %192, i32 -1939582117, i32 -772548723
  br label %.backedge

194:                                              ; preds = %23
  br label %.backedge

195:                                              ; preds = %23
  %.not95 = icmp slt i64 %.081, %.085
  %196 = select i1 %.not95, i32 -1996642371, i32 -1044296908
  br label %.backedge

197:                                              ; preds = %23
  %.not94 = icmp slt i64 %.085, %.083
  %198 = select i1 %.not94, i32 -1996642371, i32 1408836329
  br label %.backedge

199:                                              ; preds = %23
  %200 = load i32, i32* @x.1, align 4
  %201 = load i32, i32* @y.2, align 4
  %202 = add i32 %200, -1
  %203 = mul i32 %202, %200
  %204 = and i32 %203, 1
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %206, %205
  %208 = select i1 %207, i32 636371018, i32 523750776
  br label %.backedge

209:                                              ; preds = %23
  %210 = sub i64 %.081, %.083
  %211 = call i64 @_ZSt3absx(i64 %210)
  store i64 %211, i64* %14, align 8
  %212 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %14)
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %8, align 8
  %214 = load i32, i32* @x.1, align 4
  %215 = load i32, i32* @y.2, align 4
  %216 = add i32 %214, -1
  %217 = mul i32 %216, %214
  %218 = and i32 %217, 1
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %220, %219
  %222 = select i1 %221, i32 2000124680, i32 523750776
  br label %.backedge

223:                                              ; preds = %23
  br label %.backedge

224:                                              ; preds = %23
  br label %.backedge

225:                                              ; preds = %23
  br label %.backedge

226:                                              ; preds = %23
  br label %.backedge

227:                                              ; preds = %23
  %228 = load i32, i32* @x.1, align 4
  %229 = load i32, i32* @y.2, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 -1084524643, i32 1172332992
  br label %.backedge

237:                                              ; preds = %23
  %238 = add i64 %.077, 1
  %239 = load i32, i32* @x.1, align 4
  %240 = load i32, i32* @y.2, align 4
  %241 = add i32 %239, -1
  %242 = mul i32 %241, %239
  %243 = and i32 %242, 1
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %245, %244
  %247 = select i1 %246, i32 1357570767, i32 1172332992
  br label %.backedge

248:                                              ; preds = %23
  br label %.backedge

249:                                              ; preds = %23
  br label %.backedge

250:                                              ; preds = %23
  %251 = load i64, i64* %7, align 8
  %252 = and i64 %251, 1
  %253 = icmp eq i64 %252, 0
  %254 = select i1 %253, i32 955430944, i32 32826420
  br label %.backedge

255:                                              ; preds = %23
  br label %.backedge

256:                                              ; preds = %23
  %257 = load i64, i64* %6, align 8
  %258 = icmp slt i64 %.075, %257
  %259 = select i1 %258, i32 -388788932, i32 799028026
  br label %.backedge

260:                                              ; preds = %23
  %261 = load i64, i64* %7, align 8
  %262 = mul nsw i64 %261, %.075
  %263 = sdiv i64 %261, 2
  %264 = load i64, i64* %6, align 8
  %.neg92 = sub i64 %.075, %264
  %.neg93 = mul i64 %.neg92, %263
  %265 = add i64 %.neg93, %262
  %266 = call i64 @_ZSt3absx(i64 %265)
  store i64 %266, i64* %15, align 8
  %267 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %15)
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %8, align 8
  br label %.backedge

269:                                              ; preds = %23
  %270 = add i64 %.075, 1
  br label %.backedge

271:                                              ; preds = %23
  %272 = load i32, i32* @x.1, align 4
  %273 = load i32, i32* @y.2, align 4
  %274 = add i32 %272, -1
  %275 = mul i32 %274, %272
  %276 = and i32 %275, 1
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %278, %277
  %280 = select i1 %279, i32 -424769428, i32 1560182782
  br label %.backedge

281:                                              ; preds = %23
  %282 = load i32, i32* @x.1, align 4
  %283 = load i32, i32* @y.2, align 4
  %284 = add i32 %282, -1
  %285 = mul i32 %284, %282
  %286 = and i32 %285, 1
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %288, %287
  %290 = select i1 %289, i32 896381630, i32 1560182782
  br label %.backedge

291:                                              ; preds = %23
  br label %.backedge

292:                                              ; preds = %23
  br label %.backedge

293:                                              ; preds = %23
  %294 = load i32, i32* @x.1, align 4
  %295 = load i32, i32* @y.2, align 4
  %296 = add i32 %294, -1
  %297 = mul i32 %296, %294
  %298 = and i32 %297, 1
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %300, %299
  %302 = select i1 %301, i32 -1795405434, i32 -1277519535
  br label %.backedge

303:                                              ; preds = %23
  %304 = load i64, i64* %6, align 8
  %305 = icmp slt i64 %.073, %304
  store i1 %305, i1* %2, align 1
  %306 = load i32, i32* @x.1, align 4
  %307 = load i32, i32* @y.2, align 4
  %308 = add i32 %306, -1
  %309 = mul i32 %308, %306
  %310 = and i32 %309, 1
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %312, %311
  %314 = select i1 %313, i32 -109779788, i32 -1277519535
  br label %.backedge

315:                                              ; preds = %23
  %.0..0..0.71 = load volatile i1, i1* %2, align 1
  %316 = select i1 %.0..0..0.71, i32 2043957560, i32 -632232795
  br label %.backedge

317:                                              ; preds = %23
  %318 = load i64, i64* %7, align 8
  %319 = mul nsw i64 %318, %.073
  %320 = sdiv i64 %318, 2
  %321 = load i64, i64* %6, align 8
  %322 = sub i64 %321, %.073
  %323 = mul nsw i64 %322, %320
  %324 = add nsw i64 %320, 1
  %325 = mul nsw i64 %324, %322
  %.not90 = icmp slt i64 %319, %325
  %326 = select i1 %.not90, i32 -1184513018, i32 -1157822755
  br label %.backedge

327:                                              ; preds = %23
  %.not89 = icmp slt i64 %.081, %.083
  %328 = select i1 %.not89, i32 -1184513018, i32 -1909745915
  br label %.backedge

329:                                              ; preds = %23
  %330 = load i32, i32* @x.1, align 4
  %331 = load i32, i32* @y.2, align 4
  %332 = add i32 %330, -1
  %333 = mul i32 %332, %330
  %334 = and i32 %333, 1
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %336, %335
  %338 = select i1 %337, i32 -994524293, i32 -1154796172
  br label %.backedge

339:                                              ; preds = %23
  %340 = sub i64 %.085, %.083
  %341 = call i64 @_ZSt3absx(i64 %340)
  store i64 %341, i64* %16, align 8
  %342 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %16)
  %343 = load i64, i64* %342, align 8
  store i64 %343, i64* %8, align 8
  %344 = load i32, i32* @x.1, align 4
  %345 = load i32, i32* @y.2, align 4
  %346 = add i32 %344, -1
  %347 = mul i32 %346, %344
  %348 = and i32 %347, 1
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %350, %349
  %352 = select i1 %351, i32 -242027716, i32 -1154796172
  br label %.backedge

353:                                              ; preds = %23
  br label %.backedge

354:                                              ; preds = %23
  %.not88 = icmp slt i64 %.081, %.083
  %355 = select i1 %.not88, i32 -1066706058, i32 242844216
  br label %.backedge

356:                                              ; preds = %23
  %.not87 = icmp sgt i64 %.085, %.083
  %357 = select i1 %.not87, i32 -1066706058, i32 103282303
  br label %.backedge

358:                                              ; preds = %23
  %359 = sub i64 %.081, %.085
  %360 = call i64 @_ZSt3absx(i64 %359)
  store i64 %360, i64* %17, align 8
  %361 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %17)
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %8, align 8
  br label %.backedge

363:                                              ; preds = %23
  %364 = load i32, i32* @x.1, align 4
  %365 = load i32, i32* @y.2, align 4
  %366 = add i32 %364, -1
  %367 = mul i32 %366, %364
  %368 = and i32 %367, 1
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %370, %369
  %372 = select i1 %371, i32 282795214, i32 1538691856
  br label %.backedge

373:                                              ; preds = %23
  %374 = icmp sge i64 %.081, %.085
  store i1 %374, i1* %1, align 1
  %375 = load i32, i32* @x.1, align 4
  %376 = load i32, i32* @y.2, align 4
  %377 = add i32 %375, -1
  %378 = mul i32 %377, %375
  %379 = and i32 %378, 1
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %381, %380
  %383 = select i1 %382, i32 759627613, i32 1538691856
  br label %.backedge

384:                                              ; preds = %23
  %.0..0..0.72 = load volatile i1, i1* %1, align 1
  %385 = select i1 %.0..0..0.72, i32 1920766618, i32 1731670956
  br label %.backedge

386:                                              ; preds = %23
  %.not = icmp slt i64 %.085, %.083
  %387 = select i1 %.not, i32 1731670956, i32 1900545405
  br label %.backedge

388:                                              ; preds = %23
  %389 = sub i64 %.081, %.083
  %390 = call i64 @_ZSt3absx(i64 %389)
  store i64 %390, i64* %18, align 8
  %391 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %18)
  %392 = load i64, i64* %391, align 8
  store i64 %392, i64* %8, align 8
  br label %.backedge

393:                                              ; preds = %23
  %394 = load i32, i32* @x.1, align 4
  %395 = load i32, i32* @y.2, align 4
  %396 = add i32 %394, -1
  %397 = mul i32 %396, %394
  %398 = and i32 %397, 1
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %400, %399
  %402 = select i1 %401, i32 -157851759, i32 -1601866486
  br label %.backedge

403:                                              ; preds = %23
  %404 = load i32, i32* @x.1, align 4
  %405 = load i32, i32* @y.2, align 4
  %406 = add i32 %404, -1
  %407 = mul i32 %406, %404
  %408 = and i32 %407, 1
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %410, %409
  %412 = select i1 %411, i32 2108727948, i32 -1601866486
  br label %.backedge

413:                                              ; preds = %23
  br label %.backedge

414:                                              ; preds = %23
  %415 = load i32, i32* @x.1, align 4
  %416 = load i32, i32* @y.2, align 4
  %417 = add i32 %415, -1
  %418 = mul i32 %417, %415
  %419 = and i32 %418, 1
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %421, %420
  %423 = select i1 %422, i32 -733165459, i32 -905500466
  br label %.backedge

424:                                              ; preds = %23
  %425 = load i32, i32* @x.1, align 4
  %426 = load i32, i32* @y.2, align 4
  %427 = add i32 %425, -1
  %428 = mul i32 %427, %425
  %429 = and i32 %428, 1
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %431, %430
  %433 = select i1 %432, i32 1593092326, i32 -905500466
  br label %.backedge

434:                                              ; preds = %23
  br label %.backedge

435:                                              ; preds = %23
  br label %.backedge

436:                                              ; preds = %23
  %437 = add i64 %.073, 1
  br label %.backedge

438:                                              ; preds = %23
  br label %.backedge

439:                                              ; preds = %23
  br label %.backedge

440:                                              ; preds = %23
  %441 = load i64, i64* %8, align 8
  %442 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %441)
  %443 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %442, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void

444:                                              ; preds = %23
  %.neg = add i64 %.079, 1
  br label %.backedge

445:                                              ; preds = %23
  br label %.backedge

446:                                              ; preds = %23
  br label %.backedge

447:                                              ; preds = %23
  br label %.backedge

448:                                              ; preds = %23
  %449 = sub i64 %.081, %.085
  %450 = call i64 @_ZSt3absx(i64 %449)
  store i64 %450, i64* %13, align 8
  %451 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %13)
  %452 = load i64, i64* %451, align 8
  store i64 %452, i64* %8, align 8
  br label %.backedge

453:                                              ; preds = %23
  %454 = sub i64 %.081, %.083
  %455 = call i64 @_ZSt3absx(i64 %454)
  store i64 %455, i64* %14, align 8
  %456 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %14)
  %457 = load i64, i64* %456, align 8
  store i64 %457, i64* %8, align 8
  br label %.backedge

458:                                              ; preds = %23
  %459 = add i64 %.077, 1
  br label %.backedge

460:                                              ; preds = %23
  br label %.backedge

461:                                              ; preds = %23
  br label %.backedge

462:                                              ; preds = %23
  %463 = sub i64 %.085, %.083
  %464 = call i64 @_ZSt3absx(i64 %463)
  store i64 %464, i64* %16, align 8
  %465 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %8, i64* nonnull dereferenceable(8) %16)
  %466 = load i64, i64* %465, align 8
  store i64 %466, i64* %8, align 8
  br label %.backedge

467:                                              ; preds = %23
  br label %.backedge

468:                                              ; preds = %23
  br label %.backedge

469:                                              ; preds = %23
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #4 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64**, align 8
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.3, align 4
  %10 = load i32, i32* @y.4, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %16

16:                                               ; preds = %.backedge, %2
  %.0 = phi i32 [ -1211946829, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1211946829, label %17
    i32 61501421, label %20
    i32 -1712641718, label %38
    i32 -815974453, label %40
    i32 -1633352789, label %50
    i32 -274397651, label %61
    i32 1738814195, label %62
    i32 -1017195284, label %64
    i32 -1875582291, label %66
    i32 -970773846, label %67
  ]

.backedge:                                        ; preds = %16, %67, %66, %62, %61, %50, %40, %38, %20, %17
  %.0.be = phi i32 [ %.0, %16 ], [ -1633352789, %67 ], [ 61501421, %66 ], [ -1017195284, %62 ], [ -1017195284, %61 ], [ %60, %50 ], [ %49, %40 ], [ %39, %38 ], [ %37, %20 ], [ %19, %17 ]
  br label %16

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 61501421, i32 -1875582291
  br label %.backedge

20:                                               ; preds = %16
  %21 = alloca i64*, align 8
  store i64** %21, i64*** %6, align 8
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %5, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %4, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %5, align 8
  store i64* %0, i64** %.0..0..0.6, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %4, align 8
  store i64* %1, i64** %.0..0..0.9, align 8
  %.0..0..0.10 = load volatile i64**, i64*** %4, align 8
  %24 = load i64*, i64** %.0..0..0.10, align 8
  %25 = load i64, i64* %24, align 8
  %.0..0..0.7 = load volatile i64**, i64*** %5, align 8
  %26 = load i64*, i64** %.0..0..0.7, align 8
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %25, %27
  store i1 %28, i1* %3, align 1
  %29 = load i32, i32* @x.3, align 4
  %30 = load i32, i32* @y.4, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 -1712641718, i32 -1875582291
  br label %.backedge

38:                                               ; preds = %16
  %.0..0..0.13 = load volatile i1, i1* %3, align 1
  %39 = select i1 %.0..0..0.13, i32 -815974453, i32 1738814195
  br label %.backedge

40:                                               ; preds = %16
  %41 = load i32, i32* @x.3, align 4
  %42 = load i32, i32* @y.4, align 4
  %43 = add i32 %41, -1
  %44 = mul i32 %43, %41
  %45 = and i32 %44, 1
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %47, %46
  %49 = select i1 %48, i32 -1633352789, i32 -970773846
  br label %.backedge

50:                                               ; preds = %16
  %.0..0..0.11 = load volatile i64**, i64*** %4, align 8
  %51 = load i64*, i64** %.0..0..0.11, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %6, align 8
  store i64* %51, i64** %.0..0..0.2, align 8
  %52 = load i32, i32* @x.3, align 4
  %53 = load i32, i32* @y.4, align 4
  %54 = add i32 %52, -1
  %55 = mul i32 %54, %52
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %58, %57
  %60 = select i1 %59, i32 -274397651, i32 -970773846
  br label %.backedge

61:                                               ; preds = %16
  br label %.backedge

62:                                               ; preds = %16
  %.0..0..0.8 = load volatile i64**, i64*** %5, align 8
  %63 = load i64*, i64** %.0..0..0.8, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %6, align 8
  store i64* %63, i64** %.0..0..0.3, align 8
  br label %.backedge

64:                                               ; preds = %16
  %.0..0..0.4 = load volatile i64**, i64*** %6, align 8
  %65 = load i64*, i64** %.0..0..0.4, align 8
  ret i64* %65

66:                                               ; preds = %16
  br label %.backedge

67:                                               ; preds = %16
  %.0..0..0.12 = load volatile i64**, i64*** %4, align 8
  %68 = load i64*, i64** %.0..0..0.12, align 8
  %.0..0..0.5 = load volatile i64**, i64*** %6, align 8
  store i64* %68, i64** %.0..0..0.5, align 8
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZSt3absx(i64 %0) local_unnamed_addr #4 comdat {
  %2 = alloca i64, align 8
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.5, align 4
  %6 = load i32, i32* @y.6, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  %12 = or i1 %11, %10
  %13 = select i1 %12, i32 2052303743, i32 1560204792
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %1
  %.0.ph = phi i32 [ 658461028, %1 ], [ %.0.ph.be, %.outer.backedge ]
  br label %14

14:                                               ; preds = %.outer, %14
  switch i32 %.0.ph, label %14 [
    i32 658461028, label %15
    i32 -74426371, label %.outer.backedge
    i32 2052303743, label %18
    i32 1560204792, label %20
  ]

15:                                               ; preds = %14
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %16 = or i1 %.0..0..0., %.0..0..0.1
  %17 = select i1 %16, i32 -74426371, i32 1560204792
  br label %.outer.backedge

18:                                               ; preds = %14
  %19 = tail call i64 @llvm.abs.i64(i64 %0, i1 false)
  store i64 %19, i64* %2, align 8
  %.0..0..0.2 = load volatile i64, i64* %2, align 8
  ret i64 %.0..0..0.2

20:                                               ; preds = %14
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %14, %20, %15
  %.0.ph.be = phi i32 [ %17, %15 ], [ -74426371, %20 ], [ %13, %14 ]
  br label %.outer
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272), i8*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.7, align 4
  %4 = load i32, i32* @y.8, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -1083450901, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -1083450901, label %11
    i32 664032462, label %14
    i32 1200128110, label %32
    i32 -1191953250, label %33
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 664032462, i32 -1191953250
  br label %.outer.backedge

14:                                               ; preds = %10
  %15 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %16 = getelementptr i8, i8* %15, i64 -24
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %18
  %20 = bitcast i8* %19 to %"class.std::basic_ios"*
  %21 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %20, %"class.std::basic_ostream"* null)
  %22 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  tail call void @_Z11solve_abc_cv()
  %23 = load i32, i32* @x.7, align 4
  %24 = load i32, i32* @y.8, align 4
  %25 = add i32 %23, -1
  %26 = mul i32 %25, %23
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %29, %28
  %31 = select i1 %30, i32 1200128110, i32 -1191953250
  br label %.outer.backedge

32:                                               ; preds = %10
  ret i32 0

33:                                               ; preds = %10
  %34 = load i8*, i8** bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8**), align 8
  %35 = getelementptr i8, i8* %34, i64 -24
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds i8, i8* bitcast (%"class.std::basic_istream"* @_ZSt3cin to i8*), i64 %37
  %39 = bitcast i8* %38 to %"class.std::basic_ios"*
  %40 = tail call %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"* %39, %"class.std::basic_ostream"* null)
  %41 = tail call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  tail call void @_Z11solve_abc_cv()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %33, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %31, %14 ], [ 664032462, %33 ]
  br label %.outer
}

declare %"class.std::basic_ostream"* @_ZNSt9basic_iosIcSt11char_traitsIcEE3tieEPSo(%"class.std::basic_ios"*, %"class.std::basic_ostream"*) local_unnamed_addr #1

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s950075755.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.abs.i64(i64, i1 immarg) #6

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
