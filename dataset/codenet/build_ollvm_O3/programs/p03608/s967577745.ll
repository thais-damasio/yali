; ModuleID = 'build_ollvm/programs/p03608/s967577745.ll'
source_filename = "Project_CodeNet_C++1400/p03608/s967577745.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZSt3minIxERKT_S2_S2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@r = global i32 0, align 4
@d = global [205 x [205 x i64]] zeroinitializer, align 16
@x = global [8 x i32] zeroinitializer, align 16
@y = local_unnamed_addr global [8 x i32] zeroinitializer, align 16
@ans = global i64 1000000000000000000, align 8
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s967577745.cpp, i8* null }]
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0
@x.5 = common local_unnamed_addr global i32 0
@y.6 = common local_unnamed_addr global i32 0
@x.7 = common local_unnamed_addr global i32 0
@y.8 = common local_unnamed_addr global i32 0
@x.9 = common local_unnamed_addr global i32 0
@y.10 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline nounwind uwtable
define void @_Z5solveix(i32 %0, i64 %1) local_unnamed_addr #4 {
  %3 = alloca i1, align 1
  %4 = alloca i32*, align 8
  %5 = alloca i1, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  store i64 %1, i64* %8, align 8
  store i32 %0, i32* %7, align 4
  %9 = load i32, i32* @r, align 4
  store i32 %9, i32* %6, align 4
  %10 = sext i32 %0 to i64
  %11 = getelementptr inbounds [8 x i32], [8 x i32]* @y, i64 0, i64 %10
  %.neg = add i32 %0, 1
  %12 = add i32 %0, -1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [8 x i32], [8 x i32]* @y, i64 0, i64 %13
  %15 = icmp eq i32 %0, 0
  %16 = select i1 %15, i32 -569346902, i32 -928804704
  br label %17

17:                                               ; preds = %.backedge, %2
  %.039 = phi i32 [ undef, %2 ], [ %.039.be, %.backedge ]
  %.037 = phi i8* [ undef, %2 ], [ %.037.be, %.backedge ]
  %.035 = phi i32 [ undef, %2 ], [ %.035.be, %.backedge ]
  %.033 = phi i32 [ undef, %2 ], [ %.033.be, %.backedge ]
  %.031 = phi i32 [ undef, %2 ], [ %.031.be, %.backedge ]
  %.0 = phi i32 [ 1260702692, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1260702692, label %18
    i32 784528831, label %21
    i32 313743152, label %26
    i32 -149463627, label %29
    i32 -569346902, label %30
    i32 -87673343, label %31
    i32 -1452202476, label %41
    i32 1431305030, label %53
    i32 -230658876, label %55
    i32 -2100263749, label %56
    i32 189117431, label %58
    i32 -928804704, label %59
    i32 78268587, label %64
    i32 -1970824253, label %74
    i32 1445987717, label %86
    i32 1195148492, label %88
    i32 -1123219070, label %91
    i32 103390396, label %92
    i32 -1550157156, label %93
    i32 280044034, label %96
    i32 245926932, label %102
    i32 1308546055, label %104
    i32 1991721324, label %105
    i32 -979083898, label %109
    i32 27849383, label %115
    i32 1428775376, label %129
    i32 -406468593, label %139
    i32 1976447202, label %149
    i32 1686553234, label %150
    i32 -1685924848, label %160
    i32 -38758701, label %171
    i32 622801015, label %172
    i32 -373015159, label %173
    i32 -921679550, label %174
    i32 1747389286, label %175
    i32 1784150894, label %176
    i32 -781957481, label %177
  ]

.backedge:                                        ; preds = %17, %177, %176, %175, %174, %172, %171, %160, %150, %149, %139, %129, %115, %109, %105, %104, %102, %96, %93, %92, %91, %88, %86, %74, %64, %59, %58, %56, %55, %53, %41, %31, %30, %29, %26, %21, %18
  %.039.be = phi i32 [ %.039, %17 ], [ %.039, %177 ], [ %.039, %176 ], [ %.039, %175 ], [ %.039, %174 ], [ %.039, %172 ], [ %.039, %171 ], [ %.039, %160 ], [ %.039, %150 ], [ %.039, %149 ], [ %.039, %139 ], [ %.039, %129 ], [ %.039, %115 ], [ %.039, %109 ], [ %.039, %105 ], [ %.039, %104 ], [ %.039, %102 ], [ %.039, %96 ], [ %.039, %93 ], [ %.039, %92 ], [ %.039, %91 ], [ %.039, %88 ], [ %.039, %86 ], [ %.039, %74 ], [ %.039, %64 ], [ %.039, %59 ], [ %.039, %58 ], [ %57, %56 ], [ %.039, %55 ], [ %.039, %53 ], [ %.039, %41 ], [ %.039, %31 ], [ 0, %30 ], [ %.039, %29 ], [ %.039, %26 ], [ %.039, %21 ], [ %.039, %18 ]
  %.037.be = phi i8* [ %.037, %17 ], [ %.037, %177 ], [ %.037, %176 ], [ %.037, %175 ], [ %.037, %174 ], [ %.037, %172 ], [ %.037, %171 ], [ %.037, %160 ], [ %.037, %150 ], [ %.037, %149 ], [ %.037, %139 ], [ %.037, %129 ], [ %.037, %115 ], [ %.037, %109 ], [ %.037, %105 ], [ %.037, %104 ], [ %.037, %102 ], [ %.037, %96 ], [ %.037, %93 ], [ %.037, %92 ], [ %.037, %91 ], [ %.037, %88 ], [ %.037, %86 ], [ %.037, %74 ], [ %.037, %64 ], [ %62, %59 ], [ %.037, %58 ], [ %.037, %56 ], [ %.037, %55 ], [ %.037, %53 ], [ %.037, %41 ], [ %.037, %31 ], [ %.037, %30 ], [ %.037, %29 ], [ %.037, %26 ], [ %.037, %21 ], [ %.037, %18 ]
  %.035.be = phi i32 [ %.035, %17 ], [ %.035, %177 ], [ %.035, %176 ], [ %.035, %175 ], [ %.035, %174 ], [ %.035, %172 ], [ %.035, %171 ], [ %.035, %160 ], [ %.035, %150 ], [ %.035, %149 ], [ %.035, %139 ], [ %.035, %129 ], [ %.035, %115 ], [ %.035, %109 ], [ %.035, %105 ], [ %.035, %104 ], [ %.035, %102 ], [ %.035, %96 ], [ %.035, %93 ], [ %.035, %92 ], [ %.neg41, %91 ], [ %.035, %88 ], [ %.035, %86 ], [ %.035, %74 ], [ %.035, %64 ], [ 0, %59 ], [ %.035, %58 ], [ %.035, %56 ], [ %.035, %55 ], [ %.035, %53 ], [ %.035, %41 ], [ %.035, %31 ], [ %.035, %30 ], [ %.035, %29 ], [ %.035, %26 ], [ %.035, %21 ], [ %.035, %18 ]
  %.033.be = phi i32 [ %.033, %17 ], [ %.033, %177 ], [ %.033, %176 ], [ %.033, %175 ], [ %.033, %174 ], [ %.033, %172 ], [ %.033, %171 ], [ %.033, %160 ], [ %.033, %150 ], [ %.033, %149 ], [ %.033, %139 ], [ %.033, %129 ], [ %.033, %115 ], [ %.033, %109 ], [ %.033, %105 ], [ %.033, %104 ], [ %103, %102 ], [ %.033, %96 ], [ %.033, %93 ], [ 0, %92 ], [ %.033, %91 ], [ %.033, %88 ], [ %.033, %86 ], [ %.033, %74 ], [ %.033, %64 ], [ %.033, %59 ], [ %.033, %58 ], [ %.033, %56 ], [ %.033, %55 ], [ %.033, %53 ], [ %.033, %41 ], [ %.033, %31 ], [ %.033, %30 ], [ %.033, %29 ], [ %.033, %26 ], [ %.033, %21 ], [ %.033, %18 ]
  %.031.be = phi i32 [ %.031, %17 ], [ %178, %177 ], [ %.031, %176 ], [ %.031, %175 ], [ %.031, %174 ], [ %.031, %172 ], [ %.031, %171 ], [ %161, %160 ], [ %.031, %150 ], [ %.031, %149 ], [ %.031, %139 ], [ %.031, %129 ], [ %.031, %115 ], [ %.031, %109 ], [ %.031, %105 ], [ 0, %104 ], [ %.031, %102 ], [ %.031, %96 ], [ %.031, %93 ], [ %.031, %92 ], [ %.031, %91 ], [ %.031, %88 ], [ %.031, %86 ], [ %.031, %74 ], [ %.031, %64 ], [ %.031, %59 ], [ %.031, %58 ], [ %.031, %56 ], [ %.031, %55 ], [ %.031, %53 ], [ %.031, %41 ], [ %.031, %31 ], [ %.031, %30 ], [ %.031, %29 ], [ %.031, %26 ], [ %.031, %21 ], [ %.031, %18 ]
  %.0.be = phi i32 [ %.0, %17 ], [ -1685924848, %177 ], [ -406468593, %176 ], [ -1970824253, %175 ], [ -1452202476, %174 ], [ -373015159, %172 ], [ 1991721324, %171 ], [ %170, %160 ], [ %159, %150 ], [ 1686553234, %149 ], [ %148, %139 ], [ %138, %129 ], [ 1428775376, %115 ], [ %114, %109 ], [ %108, %105 ], [ 1991721324, %104 ], [ -1550157156, %102 ], [ 245926932, %96 ], [ %95, %93 ], [ -1550157156, %92 ], [ 78268587, %91 ], [ -1123219070, %88 ], [ %87, %86 ], [ %85, %74 ], [ %73, %64 ], [ 78268587, %59 ], [ -373015159, %58 ], [ -87673343, %56 ], [ -2100263749, %55 ], [ %54, %53 ], [ %52, %41 ], [ %40, %31 ], [ -87673343, %30 ], [ %16, %29 ], [ -149463627, %26 ], [ %25, %21 ], [ %20, %18 ]
  br label %17

18:                                               ; preds = %17
  %.0..0..0.24 = load volatile i32, i32* %7, align 4
  %.0..0..0.25 = load volatile i32, i32* %6, align 4
  %19 = icmp eq i32 %.0..0..0.24, %.0..0..0.25
  %20 = select i1 %19, i32 313743152, i32 784528831
  br label %.backedge

21:                                               ; preds = %17
  %22 = load i64, i64* %8, align 8
  %23 = load i64, i64* @ans, align 8
  %24 = icmp sgt i64 %22, %23
  %25 = select i1 %24, i32 313743152, i32 -149463627
  br label %.backedge

26:                                               ; preds = %17
  %27 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) @ans, i64* nonnull dereferenceable(8) %8)
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* @ans, align 8
  br label %.backedge

29:                                               ; preds = %17
  br label %.backedge

30:                                               ; preds = %17
  br label %.backedge

31:                                               ; preds = %17
  %32 = load i32, i32* @x.3, align 4
  %33 = load i32, i32* @y.4, align 4
  %34 = add i32 %32, -1
  %35 = mul i32 %34, %32
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %38, %37
  %40 = select i1 %39, i32 -1452202476, i32 -921679550
  br label %.backedge

41:                                               ; preds = %17
  %42 = load i32, i32* @r, align 4
  %43 = icmp slt i32 %.039, %42
  store i1 %43, i1* %5, align 1
  %44 = load i32, i32* @x.3, align 4
  %45 = load i32, i32* @y.4, align 4
  %46 = add i32 %44, -1
  %47 = mul i32 %46, %44
  %48 = and i32 %47, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %50, %49
  %52 = select i1 %51, i32 1431305030, i32 -921679550
  br label %.backedge

53:                                               ; preds = %17
  %.0..0..0.26 = load volatile i1, i1* %5, align 1
  %54 = select i1 %.0..0..0.26, i32 -230658876, i32 189117431
  br label %.backedge

55:                                               ; preds = %17
  store i32 %.039, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @y, i64 0, i64 0), align 16
  call void @_Z5solveix(i32 1, i64 0)
  br label %.backedge

56:                                               ; preds = %17
  %57 = add i32 %.039, 1
  br label %.backedge

58:                                               ; preds = %17
  br label %.backedge

59:                                               ; preds = %17
  %60 = load i32, i32* @r, align 4
  %61 = zext i32 %60 to i64
  %62 = call i8* @llvm.stacksave()
  %63 = alloca i32, i64 %61, align 16
  store i32* %63, i32** %4, align 8
  br label %.backedge

64:                                               ; preds = %17
  %65 = load i32, i32* @x.3, align 4
  %66 = load i32, i32* @y.4, align 4
  %67 = add i32 %65, -1
  %68 = mul i32 %67, %65
  %69 = and i32 %68, 1
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %71, %70
  %73 = select i1 %72, i32 -1970824253, i32 1747389286
  br label %.backedge

74:                                               ; preds = %17
  %75 = load i32, i32* @r, align 4
  %76 = icmp slt i32 %.035, %75
  store i1 %76, i1* %3, align 1
  %77 = load i32, i32* @x.3, align 4
  %78 = load i32, i32* @y.4, align 4
  %79 = add i32 %77, -1
  %80 = mul i32 %79, %77
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %83, %82
  %85 = select i1 %84, i32 1445987717, i32 1747389286
  br label %.backedge

86:                                               ; preds = %17
  %.0..0..0.30 = load volatile i1, i1* %3, align 1
  %87 = select i1 %.0..0..0.30, i32 1195148492, i32 103390396
  br label %.backedge

88:                                               ; preds = %17
  %89 = sext i32 %.035 to i64
  %.0..0..0.27 = load volatile i32*, i32** %4, align 8
  %90 = getelementptr inbounds i32, i32* %.0..0..0.27, i64 %89
  store i32 0, i32* %90, align 4
  br label %.backedge

91:                                               ; preds = %17
  %.neg41 = add i32 %.035, 1
  br label %.backedge

92:                                               ; preds = %17
  br label %.backedge

93:                                               ; preds = %17
  %94 = icmp slt i32 %.033, %0
  %95 = select i1 %94, i32 280044034, i32 1308546055
  br label %.backedge

96:                                               ; preds = %17
  %97 = sext i32 %.033 to i64
  %98 = getelementptr inbounds [8 x i32], [8 x i32]* @y, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = sext i32 %99 to i64
  %.0..0..0.28 = load volatile i32*, i32** %4, align 8
  %101 = getelementptr inbounds i32, i32* %.0..0..0.28, i64 %100
  store i32 1, i32* %101, align 4
  br label %.backedge

102:                                              ; preds = %17
  %103 = add i32 %.033, 1
  br label %.backedge

104:                                              ; preds = %17
  br label %.backedge

105:                                              ; preds = %17
  %106 = load i32, i32* @r, align 4
  %107 = icmp slt i32 %.031, %106
  %108 = select i1 %107, i32 -979083898, i32 622801015
  br label %.backedge

109:                                              ; preds = %17
  %110 = sext i32 %.031 to i64
  %.0..0..0.29 = load volatile i32*, i32** %4, align 8
  %111 = getelementptr inbounds i32, i32* %.0..0..0.29, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 0
  %114 = select i1 %113, i32 27849383, i32 1428775376
  br label %.backedge

115:                                              ; preds = %17
  store i32 %.031, i32* %11, align 4
  %116 = load i64, i64* %8, align 8
  %117 = load i32, i32* %14, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [8 x i32], [8 x i32]* @x, i64 0, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = sext i32 %.031 to i64
  %123 = getelementptr inbounds [8 x i32], [8 x i32]* @x, i64 0, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %121, i64 %125
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, %116
  call void @_Z5solveix(i32 %.neg, i64 %128)
  br label %.backedge

129:                                              ; preds = %17
  %130 = load i32, i32* @x.3, align 4
  %131 = load i32, i32* @y.4, align 4
  %132 = add i32 %130, -1
  %133 = mul i32 %132, %130
  %134 = and i32 %133, 1
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %136, %135
  %138 = select i1 %137, i32 -406468593, i32 1784150894
  br label %.backedge

139:                                              ; preds = %17
  %140 = load i32, i32* @x.3, align 4
  %141 = load i32, i32* @y.4, align 4
  %142 = add i32 %140, -1
  %143 = mul i32 %142, %140
  %144 = and i32 %143, 1
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %146, %145
  %148 = select i1 %147, i32 1976447202, i32 1784150894
  br label %.backedge

149:                                              ; preds = %17
  br label %.backedge

150:                                              ; preds = %17
  %151 = load i32, i32* @x.3, align 4
  %152 = load i32, i32* @y.4, align 4
  %153 = add i32 %151, -1
  %154 = mul i32 %153, %151
  %155 = and i32 %154, 1
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %157, %156
  %159 = select i1 %158, i32 -1685924848, i32 -781957481
  br label %.backedge

160:                                              ; preds = %17
  %161 = add i32 %.031, 1
  %162 = load i32, i32* @x.3, align 4
  %163 = load i32, i32* @y.4, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 -38758701, i32 -781957481
  br label %.backedge

171:                                              ; preds = %17
  br label %.backedge

172:                                              ; preds = %17
  call void @llvm.stackrestore(i8* %.037)
  br label %.backedge

173:                                              ; preds = %17
  ret void

174:                                              ; preds = %17
  br label %.backedge

175:                                              ; preds = %17
  br label %.backedge

176:                                              ; preds = %17
  br label %.backedge

177:                                              ; preds = %17
  %178 = add i32 %.031, 1
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #4 comdat {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = load i64, i64* %1, align 8
  store i64 %5, i64* %4, align 8
  %6 = load i64, i64* %0, align 8
  store i64 %6, i64* %3, align 8
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.07.ph = phi i64* [ undef, %2 ], [ %.07.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ -2028251766, %2 ], [ 300162290, %.outer.backedge ]
  br label %.outer9

.outer9:                                          ; preds = %.outer, %8
  %.0.ph10 = phi i32 [ %.0.ph, %.outer ], [ %10, %8 ]
  br label %7

7:                                                ; preds = %.outer9, %7
  switch i32 %.0.ph10, label %7 [
    i32 -2028251766, label %8
    i32 -1119513748, label %.outer.backedge
    i32 -1725421728, label %11
    i32 300162290, label %12
  ]

8:                                                ; preds = %7
  %.0..0..0.5 = load volatile i64, i64* %4, align 8
  %.0..0..0.6 = load volatile i64, i64* %3, align 8
  %9 = icmp slt i64 %.0..0..0.5, %.0..0..0.6
  %10 = select i1 %9, i32 -1119513748, i32 -1725421728
  br label %.outer9

11:                                               ; preds = %7
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %7, %11
  %.07.ph.be = phi i64* [ %0, %11 ], [ %1, %7 ]
  br label %.outer

12:                                               ; preds = %7
  ret i64* %.07.ph
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare i8* @llvm.stacksave() #5

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.stackrestore(i8*) #5

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #6 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %3)
  %10 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %9, i32* nonnull dereferenceable(4) %4)
  %11 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %10, i32* nonnull dereferenceable(4) @r)
  br label %12

12:                                               ; preds = %.backedge, %0
  %.061 = phi i32 [ 0, %0 ], [ %.061.be, %.backedge ]
  %.059 = phi i32 [ undef, %0 ], [ %.059.be, %.backedge ]
  %.057 = phi i32 [ undef, %0 ], [ %.057.be, %.backedge ]
  %.055 = phi i32 [ undef, %0 ], [ %.055.be, %.backedge ]
  %.053 = phi i32 [ undef, %0 ], [ %.053.be, %.backedge ]
  %.051 = phi i32 [ undef, %0 ], [ %.051.be, %.backedge ]
  %.049 = phi i32 [ undef, %0 ], [ %.049.be, %.backedge ]
  %.047 = phi i32 [ undef, %0 ], [ %.047.be, %.backedge ]
  %.0 = phi i32 [ 1971866947, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1971866947, label %13
    i32 1585234701, label %17
    i32 -596006002, label %22
    i32 -892387210, label %24
    i32 -462121947, label %34
    i32 -799095345, label %44
    i32 290782410, label %45
    i32 1717023070, label %49
    i32 1173930434, label %50
    i32 1279572448, label %60
    i32 1046651524, label %72
    i32 -1264618349, label %74
    i32 832012455, label %84
    i32 243359952, label %97
    i32 -1502393871, label %98
    i32 -653731879, label %100
    i32 30439853, label %101
    i32 -1722770723, label %111
    i32 -839337317, label %122
    i32 -982762896, label %123
    i32 -1897411106, label %124
    i32 -273733782, label %128
    i32 884137499, label %131
    i32 713102009, label %133
    i32 1916411436, label %143
    i32 -1687337433, label %153
    i32 616901553, label %154
    i32 -210723655, label %158
    i32 1385065903, label %168
    i32 -2004064135, label %187
    i32 878332949, label %188
    i32 -769490572, label %189
    i32 4462837, label %190
    i32 1168572746, label %194
    i32 1592238591, label %195
    i32 1149257258, label %199
    i32 -1735598187, label %209
    i32 -1343598794, label %219
    i32 54030572, label %220
    i32 -21003568, label %224
    i32 -1555210300, label %234
    i32 1727633833, label %255
    i32 431929257, label %256
    i32 -1564981054, label %266
    i32 -732336612, label %277
    i32 -532336243, label %278
    i32 -1133726898, label %279
    i32 -1349959980, label %280
    i32 -1443792010, label %290
    i32 1573667237, label %300
    i32 834005313, label %301
    i32 1339961688, label %303
    i32 2117160107, label %313
    i32 185119141, label %325
    i32 -492375681, label %326
    i32 677228921, label %327
    i32 -1544206496, label %328
    i32 -272765322, label %332
    i32 880744215, label %334
    i32 -1438357309, label %335
    i32 -976184189, label %345
    i32 -48985425, label %346
    i32 -378288364, label %358
    i32 1611635495, label %360
    i32 -799102827, label %361
  ]

.backedge:                                        ; preds = %12, %361, %360, %358, %346, %345, %335, %334, %332, %328, %327, %326, %313, %303, %301, %300, %290, %280, %279, %278, %277, %266, %256, %255, %234, %224, %220, %219, %209, %199, %195, %194, %190, %189, %188, %187, %168, %158, %154, %153, %143, %133, %131, %128, %124, %123, %122, %111, %101, %100, %98, %97, %84, %74, %72, %60, %50, %49, %45, %44, %34, %24, %22, %17, %13
  %.061.be = phi i32 [ %.061, %12 ], [ %.061, %361 ], [ %.061, %360 ], [ %.061, %358 ], [ %.061, %346 ], [ %.061, %345 ], [ %.061, %335 ], [ %.061, %334 ], [ %.061, %332 ], [ %.061, %328 ], [ %.061, %327 ], [ %.061, %326 ], [ %.061, %313 ], [ %.061, %303 ], [ %.061, %301 ], [ %.061, %300 ], [ %.061, %290 ], [ %.061, %280 ], [ %.061, %279 ], [ %.061, %278 ], [ %.061, %277 ], [ %.061, %266 ], [ %.061, %256 ], [ %.061, %255 ], [ %.061, %234 ], [ %.061, %224 ], [ %.061, %220 ], [ %.061, %219 ], [ %.061, %209 ], [ %.061, %199 ], [ %.061, %195 ], [ %.061, %194 ], [ %.061, %190 ], [ %.061, %189 ], [ %.061, %188 ], [ %.061, %187 ], [ %.061, %168 ], [ %.061, %158 ], [ %.061, %154 ], [ %.061, %153 ], [ %.061, %143 ], [ %.061, %133 ], [ %.061, %131 ], [ %.061, %128 ], [ %.061, %124 ], [ %.061, %123 ], [ %.061, %122 ], [ %.061, %111 ], [ %.061, %101 ], [ %.061, %100 ], [ %.061, %98 ], [ %.061, %97 ], [ %.061, %84 ], [ %.061, %74 ], [ %.061, %72 ], [ %.061, %60 ], [ %.061, %50 ], [ %.061, %49 ], [ %.061, %45 ], [ %.061, %44 ], [ %.061, %34 ], [ %.061, %24 ], [ %23, %22 ], [ %.061, %17 ], [ %.061, %13 ]
  %.059.be = phi i32 [ %.059, %12 ], [ %.059, %361 ], [ %.059, %360 ], [ %.059, %358 ], [ %.059, %346 ], [ %.059, %345 ], [ %.059, %335 ], [ %.059, %334 ], [ %333, %332 ], [ %.059, %328 ], [ %.059, %327 ], [ 0, %326 ], [ %.059, %313 ], [ %.059, %303 ], [ %.059, %301 ], [ %.059, %300 ], [ %.059, %290 ], [ %.059, %280 ], [ %.059, %279 ], [ %.059, %278 ], [ %.059, %277 ], [ %.059, %266 ], [ %.059, %256 ], [ %.059, %255 ], [ %.059, %234 ], [ %.059, %224 ], [ %.059, %220 ], [ %.059, %219 ], [ %.059, %209 ], [ %.059, %199 ], [ %.059, %195 ], [ %.059, %194 ], [ %.059, %190 ], [ %.059, %189 ], [ %.059, %188 ], [ %.059, %187 ], [ %.059, %168 ], [ %.059, %158 ], [ %.059, %154 ], [ %.059, %153 ], [ %.059, %143 ], [ %.059, %133 ], [ %.059, %131 ], [ %.059, %128 ], [ %.059, %124 ], [ %.059, %123 ], [ %.059, %122 ], [ %112, %111 ], [ %.059, %101 ], [ %.059, %100 ], [ %.059, %98 ], [ %.059, %97 ], [ %.059, %84 ], [ %.059, %74 ], [ %.059, %72 ], [ %.059, %60 ], [ %.059, %50 ], [ %.059, %49 ], [ %.059, %45 ], [ %.059, %44 ], [ 0, %34 ], [ %.059, %24 ], [ %.059, %22 ], [ %.059, %17 ], [ %.059, %13 ]
  %.057.be = phi i32 [ %.057, %12 ], [ %.057, %361 ], [ %.057, %360 ], [ %.057, %358 ], [ %.057, %346 ], [ %.057, %345 ], [ %.057, %335 ], [ %.057, %334 ], [ %.057, %332 ], [ %.057, %328 ], [ %.057, %327 ], [ %.057, %326 ], [ %.057, %313 ], [ %.057, %303 ], [ %.057, %301 ], [ %.057, %300 ], [ %.057, %290 ], [ %.057, %280 ], [ %.057, %279 ], [ %.057, %278 ], [ %.057, %277 ], [ %.057, %266 ], [ %.057, %256 ], [ %.057, %255 ], [ %.057, %234 ], [ %.057, %224 ], [ %.057, %220 ], [ %.057, %219 ], [ %.057, %209 ], [ %.057, %199 ], [ %.057, %195 ], [ %.057, %194 ], [ %.057, %190 ], [ %.057, %189 ], [ %.057, %188 ], [ %.057, %187 ], [ %.057, %168 ], [ %.057, %158 ], [ %.057, %154 ], [ %.057, %153 ], [ %.057, %143 ], [ %.057, %133 ], [ %.057, %131 ], [ %.057, %128 ], [ %.057, %124 ], [ %.057, %123 ], [ %.057, %122 ], [ %.057, %111 ], [ %.057, %101 ], [ %.057, %100 ], [ %99, %98 ], [ %.057, %97 ], [ %.057, %84 ], [ %.057, %74 ], [ %.057, %72 ], [ %.057, %60 ], [ %.057, %50 ], [ 0, %49 ], [ %.057, %45 ], [ %.057, %44 ], [ %.057, %34 ], [ %.057, %24 ], [ %.057, %22 ], [ %.057, %17 ], [ %.057, %13 ]
  %.055.be = phi i32 [ %.055, %12 ], [ %.055, %361 ], [ %.055, %360 ], [ %.055, %358 ], [ %.055, %346 ], [ %.055, %345 ], [ %.055, %335 ], [ %.055, %334 ], [ %.055, %332 ], [ %.055, %328 ], [ %.055, %327 ], [ %.055, %326 ], [ %.055, %313 ], [ %.055, %303 ], [ %.055, %301 ], [ %.055, %300 ], [ %.055, %290 ], [ %.055, %280 ], [ %.055, %279 ], [ %.055, %278 ], [ %.055, %277 ], [ %.055, %266 ], [ %.055, %256 ], [ %.055, %255 ], [ %.055, %234 ], [ %.055, %224 ], [ %.055, %220 ], [ %.055, %219 ], [ %.055, %209 ], [ %.055, %199 ], [ %.055, %195 ], [ %.055, %194 ], [ %.055, %190 ], [ %.055, %189 ], [ %.055, %188 ], [ %.055, %187 ], [ %.055, %168 ], [ %.055, %158 ], [ %.055, %154 ], [ %.055, %153 ], [ %.055, %143 ], [ %.055, %133 ], [ %132, %131 ], [ %.055, %128 ], [ %.055, %124 ], [ 0, %123 ], [ %.055, %122 ], [ %.055, %111 ], [ %.055, %101 ], [ %.055, %100 ], [ %.055, %98 ], [ %.055, %97 ], [ %.055, %84 ], [ %.055, %74 ], [ %.055, %72 ], [ %.055, %60 ], [ %.055, %50 ], [ %.055, %49 ], [ %.055, %45 ], [ %.055, %44 ], [ %.055, %34 ], [ %.055, %24 ], [ %.055, %22 ], [ %.055, %17 ], [ %.055, %13 ]
  %.053.be = phi i32 [ %.053, %12 ], [ %.053, %361 ], [ %.053, %360 ], [ %.053, %358 ], [ %.053, %346 ], [ %.053, %345 ], [ %.053, %335 ], [ 0, %334 ], [ %.053, %332 ], [ %.053, %328 ], [ %.053, %327 ], [ %.053, %326 ], [ %.053, %313 ], [ %.053, %303 ], [ %.053, %301 ], [ %.053, %300 ], [ %.053, %290 ], [ %.053, %280 ], [ %.053, %279 ], [ %.053, %278 ], [ %.053, %277 ], [ %.053, %266 ], [ %.053, %256 ], [ %.053, %255 ], [ %.053, %234 ], [ %.053, %224 ], [ %.053, %220 ], [ %.053, %219 ], [ %.053, %209 ], [ %.053, %199 ], [ %.053, %195 ], [ %.053, %194 ], [ %.053, %190 ], [ %.053, %189 ], [ %.neg64, %188 ], [ %.053, %187 ], [ %.053, %168 ], [ %.053, %158 ], [ %.053, %154 ], [ %.053, %153 ], [ 0, %143 ], [ %.053, %133 ], [ %.053, %131 ], [ %.053, %128 ], [ %.053, %124 ], [ %.053, %123 ], [ %.053, %122 ], [ %.053, %111 ], [ %.053, %101 ], [ %.053, %100 ], [ %.053, %98 ], [ %.053, %97 ], [ %.053, %84 ], [ %.053, %74 ], [ %.053, %72 ], [ %.053, %60 ], [ %.053, %50 ], [ %.053, %49 ], [ %.053, %45 ], [ %.053, %44 ], [ %.053, %34 ], [ %.053, %24 ], [ %.053, %22 ], [ %.053, %17 ], [ %.053, %13 ]
  %.051.be = phi i32 [ %.051, %12 ], [ %.051, %361 ], [ %.051, %360 ], [ %.051, %358 ], [ %.051, %346 ], [ %.051, %345 ], [ %.051, %335 ], [ %.051, %334 ], [ %.051, %332 ], [ %.051, %328 ], [ %.051, %327 ], [ %.051, %326 ], [ %.051, %313 ], [ %.051, %303 ], [ %302, %301 ], [ %.051, %300 ], [ %.051, %290 ], [ %.051, %280 ], [ %.051, %279 ], [ %.051, %278 ], [ %.051, %277 ], [ %.051, %266 ], [ %.051, %256 ], [ %.051, %255 ], [ %.051, %234 ], [ %.051, %224 ], [ %.051, %220 ], [ %.051, %219 ], [ %.051, %209 ], [ %.051, %199 ], [ %.051, %195 ], [ %.051, %194 ], [ %.051, %190 ], [ 0, %189 ], [ %.051, %188 ], [ %.051, %187 ], [ %.051, %168 ], [ %.051, %158 ], [ %.051, %154 ], [ %.051, %153 ], [ %.051, %143 ], [ %.051, %133 ], [ %.051, %131 ], [ %.051, %128 ], [ %.051, %124 ], [ %.051, %123 ], [ %.051, %122 ], [ %.051, %111 ], [ %.051, %101 ], [ %.051, %100 ], [ %.051, %98 ], [ %.051, %97 ], [ %.051, %84 ], [ %.051, %74 ], [ %.051, %72 ], [ %.051, %60 ], [ %.051, %50 ], [ %.051, %49 ], [ %.051, %45 ], [ %.051, %44 ], [ %.051, %34 ], [ %.051, %24 ], [ %.051, %22 ], [ %.051, %17 ], [ %.051, %13 ]
  %.049.be = phi i32 [ %.049, %12 ], [ %.049, %361 ], [ %.049, %360 ], [ %.049, %358 ], [ %.049, %346 ], [ %.049, %345 ], [ %.049, %335 ], [ %.049, %334 ], [ %.049, %332 ], [ %.049, %328 ], [ %.049, %327 ], [ %.049, %326 ], [ %.049, %313 ], [ %.049, %303 ], [ %.049, %301 ], [ %.049, %300 ], [ %.049, %290 ], [ %.049, %280 ], [ %.neg63, %279 ], [ %.049, %278 ], [ %.049, %277 ], [ %.049, %266 ], [ %.049, %256 ], [ %.049, %255 ], [ %.049, %234 ], [ %.049, %224 ], [ %.049, %220 ], [ %.049, %219 ], [ %.049, %209 ], [ %.049, %199 ], [ %.049, %195 ], [ 0, %194 ], [ %.049, %190 ], [ %.049, %189 ], [ %.049, %188 ], [ %.049, %187 ], [ %.049, %168 ], [ %.049, %158 ], [ %.049, %154 ], [ %.049, %153 ], [ %.049, %143 ], [ %.049, %133 ], [ %.049, %131 ], [ %.049, %128 ], [ %.049, %124 ], [ %.049, %123 ], [ %.049, %122 ], [ %.049, %111 ], [ %.049, %101 ], [ %.049, %100 ], [ %.049, %98 ], [ %.049, %97 ], [ %.049, %84 ], [ %.049, %74 ], [ %.049, %72 ], [ %.049, %60 ], [ %.049, %50 ], [ %.049, %49 ], [ %.049, %45 ], [ %.049, %44 ], [ %.049, %34 ], [ %.049, %24 ], [ %.049, %22 ], [ %.049, %17 ], [ %.049, %13 ]
  %.047.be = phi i32 [ %.047, %12 ], [ %.047, %361 ], [ %.047, %360 ], [ %359, %358 ], [ %.047, %346 ], [ 0, %345 ], [ %.047, %335 ], [ %.047, %334 ], [ %.047, %332 ], [ %.047, %328 ], [ %.047, %327 ], [ %.047, %326 ], [ %.047, %313 ], [ %.047, %303 ], [ %.047, %301 ], [ %.047, %300 ], [ %.047, %290 ], [ %.047, %280 ], [ %.047, %279 ], [ %.047, %278 ], [ %.047, %277 ], [ %267, %266 ], [ %.047, %256 ], [ %.047, %255 ], [ %.047, %234 ], [ %.047, %224 ], [ %.047, %220 ], [ %.047, %219 ], [ 0, %209 ], [ %.047, %199 ], [ %.047, %195 ], [ %.047, %194 ], [ %.047, %190 ], [ %.047, %189 ], [ %.047, %188 ], [ %.047, %187 ], [ %.047, %168 ], [ %.047, %158 ], [ %.047, %154 ], [ %.047, %153 ], [ %.047, %143 ], [ %.047, %133 ], [ %.047, %131 ], [ %.047, %128 ], [ %.047, %124 ], [ %.047, %123 ], [ %.047, %122 ], [ %.047, %111 ], [ %.047, %101 ], [ %.047, %100 ], [ %.047, %98 ], [ %.047, %97 ], [ %.047, %84 ], [ %.047, %74 ], [ %.047, %72 ], [ %.047, %60 ], [ %.047, %50 ], [ %.047, %49 ], [ %.047, %45 ], [ %.047, %44 ], [ %.047, %34 ], [ %.047, %24 ], [ %.047, %22 ], [ %.047, %17 ], [ %.047, %13 ]
  %.0.be = phi i32 [ %.0, %12 ], [ 2117160107, %361 ], [ -1443792010, %360 ], [ -1564981054, %358 ], [ -1555210300, %346 ], [ -1735598187, %345 ], [ 1385065903, %335 ], [ 1916411436, %334 ], [ -1722770723, %332 ], [ 832012455, %328 ], [ 1279572448, %327 ], [ -462121947, %326 ], [ %324, %313 ], [ %312, %303 ], [ 4462837, %301 ], [ 834005313, %300 ], [ %299, %290 ], [ %289, %280 ], [ 1592238591, %279 ], [ -1133726898, %278 ], [ 54030572, %277 ], [ %276, %266 ], [ %265, %256 ], [ 431929257, %255 ], [ %254, %234 ], [ %233, %224 ], [ %223, %220 ], [ 54030572, %219 ], [ %218, %209 ], [ %208, %199 ], [ %198, %195 ], [ 1592238591, %194 ], [ %193, %190 ], [ 4462837, %189 ], [ 616901553, %188 ], [ 878332949, %187 ], [ %186, %168 ], [ %167, %158 ], [ %157, %154 ], [ 616901553, %153 ], [ %152, %143 ], [ %142, %133 ], [ -1897411106, %131 ], [ 884137499, %128 ], [ %127, %124 ], [ -1897411106, %123 ], [ 290782410, %122 ], [ %121, %111 ], [ %110, %101 ], [ 30439853, %100 ], [ 1173930434, %98 ], [ -1502393871, %97 ], [ %96, %84 ], [ %83, %74 ], [ %73, %72 ], [ %71, %60 ], [ %59, %50 ], [ 1173930434, %49 ], [ %48, %45 ], [ 290782410, %44 ], [ %43, %34 ], [ %33, %24 ], [ 1971866947, %22 ], [ -596006002, %17 ], [ %16, %13 ]
  br label %12

13:                                               ; preds = %12
  %14 = load i32, i32* @r, align 4
  %15 = icmp slt i32 %.061, %14
  %16 = select i1 %15, i32 1585234701, i32 -892387210
  br label %.backedge

17:                                               ; preds = %12
  %18 = sext i32 %.061 to i64
  %19 = getelementptr inbounds [8 x i32], [8 x i32]* @x, i64 0, i64 %18
  %20 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %19)
  %21 = load i32, i32* %19, align 4
  %.neg66 = add i32 %21, -1
  store i32 %.neg66, i32* %19, align 4
  br label %.backedge

22:                                               ; preds = %12
  %23 = add i32 %.061, 1
  br label %.backedge

24:                                               ; preds = %12
  %25 = load i32, i32* @x.7, align 4
  %26 = load i32, i32* @y.8, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 -462121947, i32 -492375681
  br label %.backedge

34:                                               ; preds = %12
  %35 = load i32, i32* @x.7, align 4
  %36 = load i32, i32* @y.8, align 4
  %37 = add i32 %35, -1
  %38 = mul i32 %37, %35
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %41, %40
  %43 = select i1 %42, i32 -799095345, i32 -492375681
  br label %.backedge

44:                                               ; preds = %12
  br label %.backedge

45:                                               ; preds = %12
  %46 = load i32, i32* %3, align 4
  %47 = icmp slt i32 %.059, %46
  %48 = select i1 %47, i32 1717023070, i32 -982762896
  br label %.backedge

49:                                               ; preds = %12
  br label %.backedge

50:                                               ; preds = %12
  %51 = load i32, i32* @x.7, align 4
  %52 = load i32, i32* @y.8, align 4
  %53 = add i32 %51, -1
  %54 = mul i32 %53, %51
  %55 = and i32 %54, 1
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %57, %56
  %59 = select i1 %58, i32 1279572448, i32 677228921
  br label %.backedge

60:                                               ; preds = %12
  %61 = load i32, i32* %3, align 4
  %62 = icmp slt i32 %.057, %61
  store i1 %62, i1* %2, align 1
  %63 = load i32, i32* @x.7, align 4
  %64 = load i32, i32* @y.8, align 4
  %65 = add i32 %63, -1
  %66 = mul i32 %65, %63
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %69, %68
  %71 = select i1 %70, i32 1046651524, i32 677228921
  br label %.backedge

72:                                               ; preds = %12
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %73 = select i1 %.0..0..0., i32 -1264618349, i32 -653731879
  br label %.backedge

74:                                               ; preds = %12
  %75 = load i32, i32* @x.7, align 4
  %76 = load i32, i32* @y.8, align 4
  %77 = add i32 %75, -1
  %78 = mul i32 %77, %75
  %79 = and i32 %78, 1
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %81, %80
  %83 = select i1 %82, i32 832012455, i32 -1544206496
  br label %.backedge

84:                                               ; preds = %12
  %85 = sext i32 %.059 to i64
  %86 = sext i32 %.057 to i64
  %87 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %85, i64 %86
  store i64 1000000000, i64* %87, align 8
  %88 = load i32, i32* @x.7, align 4
  %89 = load i32, i32* @y.8, align 4
  %90 = add i32 %88, -1
  %91 = mul i32 %90, %88
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %94, %93
  %96 = select i1 %95, i32 243359952, i32 -1544206496
  br label %.backedge

97:                                               ; preds = %12
  br label %.backedge

98:                                               ; preds = %12
  %99 = add i32 %.057, 1
  br label %.backedge

100:                                              ; preds = %12
  br label %.backedge

101:                                              ; preds = %12
  %102 = load i32, i32* @x.7, align 4
  %103 = load i32, i32* @y.8, align 4
  %104 = add i32 %102, -1
  %105 = mul i32 %104, %102
  %106 = and i32 %105, 1
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %108, %107
  %110 = select i1 %109, i32 -1722770723, i32 -272765322
  br label %.backedge

111:                                              ; preds = %12
  %112 = add i32 %.059, 1
  %113 = load i32, i32* @x.7, align 4
  %114 = load i32, i32* @y.8, align 4
  %115 = add i32 %113, -1
  %116 = mul i32 %115, %113
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %119, %118
  %121 = select i1 %120, i32 -839337317, i32 -272765322
  br label %.backedge

122:                                              ; preds = %12
  br label %.backedge

123:                                              ; preds = %12
  br label %.backedge

124:                                              ; preds = %12
  %125 = load i32, i32* %3, align 4
  %126 = icmp slt i32 %.055, %125
  %127 = select i1 %126, i32 -273733782, i32 713102009
  br label %.backedge

128:                                              ; preds = %12
  %129 = sext i32 %.055 to i64
  %130 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %129, i64 %129
  store i64 0, i64* %130, align 8
  br label %.backedge

131:                                              ; preds = %12
  %132 = add i32 %.055, 1
  br label %.backedge

133:                                              ; preds = %12
  %134 = load i32, i32* @x.7, align 4
  %135 = load i32, i32* @y.8, align 4
  %136 = add i32 %134, -1
  %137 = mul i32 %136, %134
  %138 = and i32 %137, 1
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %140, %139
  %142 = select i1 %141, i32 1916411436, i32 880744215
  br label %.backedge

143:                                              ; preds = %12
  %144 = load i32, i32* @x.7, align 4
  %145 = load i32, i32* @y.8, align 4
  %146 = add i32 %144, -1
  %147 = mul i32 %146, %144
  %148 = and i32 %147, 1
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %150, %149
  %152 = select i1 %151, i32 -1687337433, i32 880744215
  br label %.backedge

153:                                              ; preds = %12
  br label %.backedge

154:                                              ; preds = %12
  %155 = load i32, i32* %4, align 4
  %156 = icmp slt i32 %.053, %155
  %157 = select i1 %156, i32 -210723655, i32 -769490572
  br label %.backedge

158:                                              ; preds = %12
  %159 = load i32, i32* @x.7, align 4
  %160 = load i32, i32* @y.8, align 4
  %161 = add i32 %159, -1
  %162 = mul i32 %161, %159
  %163 = and i32 %162, 1
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %165, %164
  %167 = select i1 %166, i32 1385065903, i32 -1438357309
  br label %.backedge

168:                                              ; preds = %12
  %169 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %5)
  %170 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %169, i64* nonnull dereferenceable(8) %6)
  %171 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %170, i64* nonnull dereferenceable(8) %7)
  %172 = load i64, i64* %5, align 8
  %.neg65 = add i64 %172, -1
  store i64 %.neg65, i64* %5, align 8
  %173 = load i64, i64* %6, align 8
  %174 = add i64 %173, -1
  store i64 %174, i64* %6, align 8
  %175 = load i64, i64* %7, align 8
  %176 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %.neg65, i64 %174
  store i64 %175, i64* %176, align 8
  %177 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %174, i64 %.neg65
  store i64 %175, i64* %177, align 8
  %178 = load i32, i32* @x.7, align 4
  %179 = load i32, i32* @y.8, align 4
  %180 = add i32 %178, -1
  %181 = mul i32 %180, %178
  %182 = and i32 %181, 1
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %184, %183
  %186 = select i1 %185, i32 -2004064135, i32 -1438357309
  br label %.backedge

187:                                              ; preds = %12
  br label %.backedge

188:                                              ; preds = %12
  %.neg64 = add i32 %.053, 1
  br label %.backedge

189:                                              ; preds = %12
  br label %.backedge

190:                                              ; preds = %12
  %191 = load i32, i32* %3, align 4
  %192 = icmp slt i32 %.051, %191
  %193 = select i1 %192, i32 1168572746, i32 1339961688
  br label %.backedge

194:                                              ; preds = %12
  br label %.backedge

195:                                              ; preds = %12
  %196 = load i32, i32* %3, align 4
  %197 = icmp slt i32 %.049, %196
  %198 = select i1 %197, i32 1149257258, i32 -1349959980
  br label %.backedge

199:                                              ; preds = %12
  %200 = load i32, i32* @x.7, align 4
  %201 = load i32, i32* @y.8, align 4
  %202 = add i32 %200, -1
  %203 = mul i32 %202, %200
  %204 = and i32 %203, 1
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %206, %205
  %208 = select i1 %207, i32 -1735598187, i32 -976184189
  br label %.backedge

209:                                              ; preds = %12
  %210 = load i32, i32* @x.7, align 4
  %211 = load i32, i32* @y.8, align 4
  %212 = add i32 %210, -1
  %213 = mul i32 %212, %210
  %214 = and i32 %213, 1
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %216, %215
  %218 = select i1 %217, i32 -1343598794, i32 -976184189
  br label %.backedge

219:                                              ; preds = %12
  br label %.backedge

220:                                              ; preds = %12
  %221 = load i32, i32* %3, align 4
  %222 = icmp slt i32 %.047, %221
  %223 = select i1 %222, i32 -21003568, i32 -532336243
  br label %.backedge

224:                                              ; preds = %12
  %225 = load i32, i32* @x.7, align 4
  %226 = load i32, i32* @y.8, align 4
  %227 = add i32 %225, -1
  %228 = mul i32 %227, %225
  %229 = and i32 %228, 1
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %231, %230
  %233 = select i1 %232, i32 -1555210300, i32 -48985425
  br label %.backedge

234:                                              ; preds = %12
  %235 = sext i32 %.049 to i64
  %236 = sext i32 %.047 to i64
  %237 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %235, i64 %236
  %238 = sext i32 %.051 to i64
  %239 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %235, i64 %238
  %240 = load i64, i64* %239, align 8
  %241 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %238, i64 %236
  %242 = load i64, i64* %241, align 8
  %243 = add i64 %242, %240
  store i64 %243, i64* %8, align 8
  %244 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %237, i64* nonnull dereferenceable(8) %8)
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %237, align 8
  %246 = load i32, i32* @x.7, align 4
  %247 = load i32, i32* @y.8, align 4
  %248 = add i32 %246, -1
  %249 = mul i32 %248, %246
  %250 = and i32 %249, 1
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %252, %251
  %254 = select i1 %253, i32 1727633833, i32 -48985425
  br label %.backedge

255:                                              ; preds = %12
  br label %.backedge

256:                                              ; preds = %12
  %257 = load i32, i32* @x.7, align 4
  %258 = load i32, i32* @y.8, align 4
  %259 = add i32 %257, -1
  %260 = mul i32 %259, %257
  %261 = and i32 %260, 1
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %263, %262
  %265 = select i1 %264, i32 -1564981054, i32 -378288364
  br label %.backedge

266:                                              ; preds = %12
  %267 = add i32 %.047, 1
  %268 = load i32, i32* @x.7, align 4
  %269 = load i32, i32* @y.8, align 4
  %270 = add i32 %268, -1
  %271 = mul i32 %270, %268
  %272 = and i32 %271, 1
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %274, %273
  %276 = select i1 %275, i32 -732336612, i32 -378288364
  br label %.backedge

277:                                              ; preds = %12
  br label %.backedge

278:                                              ; preds = %12
  br label %.backedge

279:                                              ; preds = %12
  %.neg63 = add i32 %.049, 1
  br label %.backedge

280:                                              ; preds = %12
  %281 = load i32, i32* @x.7, align 4
  %282 = load i32, i32* @y.8, align 4
  %283 = add i32 %281, -1
  %284 = mul i32 %283, %281
  %285 = and i32 %284, 1
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %287, %286
  %289 = select i1 %288, i32 -1443792010, i32 1611635495
  br label %.backedge

290:                                              ; preds = %12
  %291 = load i32, i32* @x.7, align 4
  %292 = load i32, i32* @y.8, align 4
  %293 = add i32 %291, -1
  %294 = mul i32 %293, %291
  %295 = and i32 %294, 1
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %297, %296
  %299 = select i1 %298, i32 1573667237, i32 1611635495
  br label %.backedge

300:                                              ; preds = %12
  br label %.backedge

301:                                              ; preds = %12
  %302 = add i32 %.051, 1
  br label %.backedge

303:                                              ; preds = %12
  %304 = load i32, i32* @x.7, align 4
  %305 = load i32, i32* @y.8, align 4
  %306 = add i32 %304, -1
  %307 = mul i32 %306, %304
  %308 = and i32 %307, 1
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %310, %309
  %312 = select i1 %311, i32 2117160107, i32 -799102827
  br label %.backedge

313:                                              ; preds = %12
  call void @_Z5solveix(i32 0, i64 0)
  %314 = load i64, i64* @ans, align 8
  %315 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %314)
  store i32 0, i32* %1, align 4
  %316 = load i32, i32* @x.7, align 4
  %317 = load i32, i32* @y.8, align 4
  %318 = add i32 %316, -1
  %319 = mul i32 %318, %316
  %320 = and i32 %319, 1
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %322, %321
  %324 = select i1 %323, i32 185119141, i32 -799102827
  br label %.backedge

325:                                              ; preds = %12
  %.0..0..0.46 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.46

326:                                              ; preds = %12
  br label %.backedge

327:                                              ; preds = %12
  br label %.backedge

328:                                              ; preds = %12
  %329 = sext i32 %.059 to i64
  %330 = sext i32 %.057 to i64
  %331 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %329, i64 %330
  store i64 1000000000, i64* %331, align 8
  br label %.backedge

332:                                              ; preds = %12
  %333 = add i32 %.059, 1
  br label %.backedge

334:                                              ; preds = %12
  br label %.backedge

335:                                              ; preds = %12
  %336 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %5)
  %337 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %336, i64* nonnull dereferenceable(8) %6)
  %338 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %337, i64* nonnull dereferenceable(8) %7)
  %339 = load i64, i64* %5, align 8
  %340 = add i64 %339, -1
  store i64 %340, i64* %5, align 8
  %341 = load i64, i64* %6, align 8
  %.neg = add i64 %341, -1
  store i64 %.neg, i64* %6, align 8
  %342 = load i64, i64* %7, align 8
  %343 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %340, i64 %.neg
  store i64 %342, i64* %343, align 8
  %344 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %.neg, i64 %340
  store i64 %342, i64* %344, align 8
  br label %.backedge

345:                                              ; preds = %12
  br label %.backedge

346:                                              ; preds = %12
  %347 = sext i32 %.049 to i64
  %348 = sext i32 %.047 to i64
  %349 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %347, i64 %348
  %350 = sext i32 %.051 to i64
  %351 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %347, i64 %350
  %352 = load i64, i64* %351, align 8
  %353 = getelementptr inbounds [205 x [205 x i64]], [205 x [205 x i64]]* @d, i64 0, i64 %350, i64 %348
  %354 = load i64, i64* %353, align 8
  %355 = add i64 %354, %352
  store i64 %355, i64* %8, align 8
  %356 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %349, i64* nonnull dereferenceable(8) %8)
  %357 = load i64, i64* %356, align 8
  store i64 %357, i64* %349, align 8
  br label %.backedge

358:                                              ; preds = %12
  %359 = add i32 %.047, 1
  br label %.backedge

360:                                              ; preds = %12
  br label %.backedge

361:                                              ; preds = %12
  call void @_Z5solveix(i32 0, i64 0)
  %362 = load i64, i64* @ans, align 8
  %363 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %362)
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s967577745.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.9, align 4
  %4 = load i32, i32* @y.10, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -191565921, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -191565921, label %11
    i32 714871250, label %14
    i32 -413447089, label %24
    i32 -1593223391, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 714871250, i32 -1593223391
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.9, align 4
  %16 = load i32, i32* @y.10, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 -413447089, i32 -1593223391
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 714871250, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { mustprogress nofree nosync nounwind willreturn }
attributes #6 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
