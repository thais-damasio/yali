; ModuleID = 'build_ollvm/programs/p03232/s464852417.ll'
source_filename = "Project_CodeNet_C++1400/p03232/s464852417.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::allocator" = type { i8 }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@_ZL5alphaB5cxx11 = internal global %"class.std::__cxx11::basic_string" zeroinitializer, align 8
@.str = private unnamed_addr constant [27 x i8] c"abcdefghijklmnopqrstuvwxyz\00", align 1
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s464852417.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #5
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init.1() unnamed_addr #0 section ".text.startup" personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %1 = alloca %"class.std::allocator", align 1
  call void @_ZNSaIcEC1Ev(%"class.std::allocator"* nonnull %1) #5
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_(%"class.std::__cxx11::basic_string"* nonnull @_ZL5alphaB5cxx11, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), %"class.std::allocator"* nonnull dereferenceable(1) %1)
          to label %2 unwind label %22

2:                                                ; preds = %0
  %3 = load i32, i32* @x.2, align 4
  %4 = load i32, i32* @y.3, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %9, %8
  br i1 %10, label %11, label %24

11:                                               ; preds = %24, %2
  call void @_ZNSaIcED1Ev(%"class.std::allocator"* nonnull %1) #5
  %12 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZL5alphaB5cxx11 to i8*), i8* nonnull @__dso_handle) #5
  %13 = load i32, i32* @x.2, align 4
  %14 = load i32, i32* @y.3, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  br i1 %20, label %21, label %24

21:                                               ; preds = %11
  ret void

22:                                               ; preds = %0
  %23 = landingpad { i8*, i32 }
          cleanup
  call void @_ZNSaIcED1Ev(%"class.std::allocator"* nonnull %1) #5
  resume { i8*, i32 } %23

24:                                               ; preds = %11, %2
  call void @_ZNSaIcED1Ev(%"class.std::allocator"* nonnull %1) #5
  %25 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__cxx11::basic_string"*)* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev to void (i8*)*), i8* bitcast (%"class.std::__cxx11::basic_string"* @_ZL5alphaB5cxx11 to i8*), i8* nonnull @__dso_handle) #5
  br label %11
}

; Function Attrs: nounwind
declare void @_ZNSaIcEC1Ev(%"class.std::allocator"*) unnamed_addr #2

declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_(%"class.std::__cxx11::basic_string"*, i8*, %"class.std::allocator"* dereferenceable(1)) unnamed_addr #1

declare i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind
declare void @_ZNSaIcED1Ev(%"class.std::allocator"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(%"class.std::__cxx11::basic_string"*) unnamed_addr #2

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i64*, align 8
  %4 = alloca i1, align 1
  %5 = alloca i64*, align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i64*, align 8
  %9 = alloca i64, align 8
  %10 = alloca [31 x i64], align 16
  %11 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %9)
  %12 = load i64, i64* %9, align 8
  %13 = alloca i64, i64 %12, align 16
  %14 = getelementptr inbounds [31 x i64], [31 x i64]* %10, i64 0, i64 0
  br label %15

15:                                               ; preds = %.backedge, %0
  %.0122 = phi i64 [ undef, %0 ], [ %.0122.be, %.backedge ]
  %.0120 = phi i32 [ 0, %0 ], [ %.0120.be, %.backedge ]
  %.0118 = phi i32 [ undef, %0 ], [ %.0118.be, %.backedge ]
  %.0116 = phi i32 [ undef, %0 ], [ %.0116.be, %.backedge ]
  %.0114 = phi i64 [ undef, %0 ], [ %.0114.be, %.backedge ]
  %.0112 = phi i32 [ undef, %0 ], [ %.0112.be, %.backedge ]
  %.0110 = phi i64 [ undef, %0 ], [ %.0110.be, %.backedge ]
  %.0108 = phi i32 [ undef, %0 ], [ %.0108.be, %.backedge ]
  %.0106 = phi i32 [ undef, %0 ], [ %.0106.be, %.backedge ]
  %.0104 = phi i32 [ undef, %0 ], [ %.0104.be, %.backedge ]
  %.0102 = phi i64 [ undef, %0 ], [ %.0102.be, %.backedge ]
  %.0100 = phi i32 [ undef, %0 ], [ %.0100.be, %.backedge ]
  %.0 = phi i32 [ 1240314038, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 1240314038, label %16
    i32 -129099840, label %21
    i32 1628905855, label %25
    i32 -934890022, label %35
    i32 1524570419, label %45
    i32 291031480, label %46
    i32 -1592253487, label %50
    i32 -291095842, label %53
    i32 1157043321, label %56
    i32 2051737561, label %59
    i32 -2054392485, label %68
    i32 -1223425363, label %78
    i32 -1118088405, label %89
    i32 -920899382, label %90
    i32 -1628846146, label %91
    i32 1008850757, label %101
    i32 1689596652, label %112
    i32 -843136162, label %114
    i32 -1445529724, label %118
    i32 2036526520, label %128
    i32 -1259233031, label %148
    i32 1418849860, label %149
    i32 -2010147839, label %152
    i32 -1300855750, label %153
    i32 -464669761, label %155
    i32 -854233507, label %165
    i32 -107052196, label %175
    i32 102655601, label %176
    i32 -1842678238, label %186
    i32 -952627299, label %199
    i32 823805206, label %201
    i32 -1616983481, label %205
    i32 -1558074964, label %215
    i32 1156876444, label %226
    i32 -519118741, label %227
    i32 -1150914202, label %237
    i32 -1143176608, label %249
    i32 -2066660745, label %250
    i32 1677187892, label %260
    i32 157782087, label %273
    i32 883672979, label %275
    i32 -1060441013, label %285
    i32 -1537931309, label %302
    i32 913070865, label %303
    i32 -111789855, label %305
    i32 234904011, label %309
    i32 -708232825, label %319
    i32 -391298117, label %333
    i32 -1608091754, label %335
    i32 1279740649, label %346
    i32 1744943690, label %356
    i32 -797565579, label %367
    i32 -1265724285, label %368
    i32 2015215187, label %378
    i32 1859633331, label %388
    i32 719398899, label %389
    i32 219308561, label %399
    i32 -2083073384, label %412
    i32 714897665, label %414
    i32 505767933, label %424
    i32 -405734114, label %451
    i32 -225101839, label %452
    i32 -1439219482, label %462
    i32 -130993505, label %473
    i32 -1033071231, label %474
    i32 915118299, label %477
    i32 -570839972, label %479
    i32 -1451013659, label %481
    i32 -573151025, label %482
    i32 1470987879, label %493
    i32 1171517121, label %494
    i32 -1368596554, label %495
    i32 1004750321, label %497
    i32 -220153138, label %498
    i32 -1697199574, label %499
    i32 1437636712, label %508
    i32 -386180642, label %509
    i32 772783784, label %510
    i32 1898191752, label %511
    i32 -1994343210, label %512
    i32 -1986851990, label %530
  ]

.backedge:                                        ; preds = %15, %530, %512, %511, %510, %509, %508, %499, %498, %497, %495, %494, %493, %482, %481, %479, %477, %473, %462, %452, %451, %424, %414, %412, %399, %389, %388, %378, %368, %367, %356, %346, %335, %333, %319, %309, %305, %303, %302, %285, %275, %273, %260, %250, %249, %237, %227, %226, %215, %205, %201, %199, %186, %176, %175, %165, %155, %153, %152, %149, %148, %128, %118, %114, %112, %101, %91, %90, %89, %78, %68, %59, %56, %53, %50, %46, %45, %35, %25, %21, %16
  %.0122.be = phi i64 [ %.0122, %15 ], [ %.0122, %530 ], [ %.0122, %512 ], [ %.0122, %511 ], [ %.0122, %510 ], [ %.0122, %509 ], [ %.0122, %508 ], [ %.0122, %499 ], [ %.0122, %498 ], [ %.0122, %497 ], [ %.0122, %495 ], [ %.0122, %494 ], [ %.0122, %493 ], [ %.0122, %482 ], [ %.0122, %481 ], [ %.0122, %479 ], [ %.0122, %477 ], [ %.0122, %473 ], [ %.0122, %462 ], [ %.0122, %452 ], [ %.0122, %451 ], [ %.0122, %424 ], [ %.0122, %414 ], [ %.0122, %412 ], [ %.0122, %399 ], [ %.0122, %389 ], [ %.0122, %388 ], [ %.0122, %378 ], [ %.0122, %368 ], [ %.0122, %367 ], [ %.0122, %356 ], [ %.0122, %346 ], [ %.0122, %335 ], [ %.0122, %333 ], [ %.0122, %319 ], [ %.0122, %309 ], [ %.0122, %305 ], [ %.0122, %303 ], [ %.0122, %302 ], [ %.0122, %285 ], [ %.0122, %275 ], [ %.0122, %273 ], [ %.0122, %260 ], [ %.0122, %250 ], [ %.0122, %249 ], [ %.0122, %237 ], [ %.0122, %227 ], [ %.0122, %226 ], [ %.0122, %215 ], [ %.0122, %205 ], [ %.0122, %201 ], [ %.0122, %199 ], [ %.0122, %186 ], [ %.0122, %176 ], [ %.0122, %175 ], [ %.0122, %165 ], [ %.0122, %155 ], [ %.0122, %153 ], [ %.0122, %152 ], [ %.0122, %149 ], [ %.0122, %148 ], [ %.0122, %128 ], [ %.0122, %118 ], [ %.0122, %114 ], [ %.0122, %112 ], [ %.0122, %101 ], [ %.0122, %91 ], [ %.0122, %90 ], [ %.0122, %89 ], [ %.0122, %78 ], [ %.0122, %68 ], [ %.0122, %59 ], [ %.0122, %56 ], [ %.0122, %53 ], [ %.0122, %50 ], [ %47, %46 ], [ %.0122, %45 ], [ %.0122, %35 ], [ %.0122, %25 ], [ %.0122, %21 ], [ %.0122, %16 ]
  %.0120.be = phi i32 [ %.0120, %15 ], [ %.0120, %530 ], [ %.0120, %512 ], [ %.0120, %511 ], [ %.0120, %510 ], [ %.0120, %509 ], [ %.0120, %508 ], [ %.0120, %499 ], [ %.0120, %498 ], [ %.0120, %497 ], [ %.0120, %495 ], [ %.0120, %494 ], [ %.0120, %493 ], [ %.0120, %482 ], [ %.0120, %481 ], [ %.0120, %479 ], [ %478, %477 ], [ %.0120, %473 ], [ %.0120, %462 ], [ %.0120, %452 ], [ %.0120, %451 ], [ %.0120, %424 ], [ %.0120, %414 ], [ %.0120, %412 ], [ %.0120, %399 ], [ %.0120, %389 ], [ %.0120, %388 ], [ %.0120, %378 ], [ %.0120, %368 ], [ %.0120, %367 ], [ %.0120, %356 ], [ %.0120, %346 ], [ %.0120, %335 ], [ %.0120, %333 ], [ %.0120, %319 ], [ %.0120, %309 ], [ %.0120, %305 ], [ %.0120, %303 ], [ %.0120, %302 ], [ %.0120, %285 ], [ %.0120, %275 ], [ %.0120, %273 ], [ %.0120, %260 ], [ %.0120, %250 ], [ %.0120, %249 ], [ %.0120, %237 ], [ %.0120, %227 ], [ %.0120, %226 ], [ %.0120, %215 ], [ %.0120, %205 ], [ %.0120, %201 ], [ %.0120, %199 ], [ %.0120, %186 ], [ %.0120, %176 ], [ %.0120, %175 ], [ %.0120, %165 ], [ %.0120, %155 ], [ %.0120, %153 ], [ %.0120, %152 ], [ %.0120, %149 ], [ %.0120, %148 ], [ %.0120, %128 ], [ %.0120, %118 ], [ %.0120, %114 ], [ %.0120, %112 ], [ %.0120, %101 ], [ %.0120, %91 ], [ %.0120, %90 ], [ %.0120, %89 ], [ %.0120, %78 ], [ %.0120, %68 ], [ %.0120, %59 ], [ %.0120, %56 ], [ %.0120, %53 ], [ %.0120, %50 ], [ %.0120, %46 ], [ %.0120, %45 ], [ %.neg129, %35 ], [ %.0120, %25 ], [ %.0120, %21 ], [ %.0120, %16 ]
  %.0118.be = phi i32 [ %.0118, %15 ], [ %.0118, %530 ], [ %.0118, %512 ], [ %.0118, %511 ], [ %.0118, %510 ], [ %.0118, %509 ], [ %.0118, %508 ], [ %.0118, %499 ], [ %.0118, %498 ], [ %.0118, %497 ], [ %.0118, %495 ], [ %.0118, %494 ], [ %.0118, %493 ], [ %.0118, %482 ], [ %.0118, %481 ], [ %.0118, %479 ], [ %.0118, %477 ], [ %.0118, %473 ], [ %.0118, %462 ], [ %.0118, %452 ], [ %.0118, %451 ], [ %.0118, %424 ], [ %.0118, %414 ], [ %.0118, %412 ], [ %.0118, %399 ], [ %.0118, %389 ], [ %.0118, %388 ], [ %.0118, %378 ], [ %.0118, %368 ], [ %.0118, %367 ], [ %.0118, %356 ], [ %.0118, %346 ], [ %.0118, %335 ], [ %.0118, %333 ], [ %.0118, %319 ], [ %.0118, %309 ], [ %.0118, %305 ], [ %.0118, %303 ], [ %.0118, %302 ], [ %.0118, %285 ], [ %.0118, %275 ], [ %.0118, %273 ], [ %.0118, %260 ], [ %.0118, %250 ], [ %.0118, %249 ], [ %.0118, %237 ], [ %.0118, %227 ], [ %.0118, %226 ], [ %.0118, %215 ], [ %.0118, %205 ], [ %.0118, %201 ], [ %.0118, %199 ], [ %.0118, %186 ], [ %.0118, %176 ], [ %.0118, %175 ], [ %.0118, %165 ], [ %.0118, %155 ], [ %154, %153 ], [ %.0118, %152 ], [ %.0118, %149 ], [ %.0118, %148 ], [ %.0118, %128 ], [ %.0118, %118 ], [ %.0118, %114 ], [ %.0118, %112 ], [ %.0118, %101 ], [ %.0118, %91 ], [ %.0118, %90 ], [ %.0118, %89 ], [ %.0118, %78 ], [ %.0118, %68 ], [ %.0118, %59 ], [ %.0118, %56 ], [ %.0118, %53 ], [ %.0118, %50 ], [ 1, %46 ], [ %.0118, %45 ], [ %.0118, %35 ], [ %.0118, %25 ], [ %.0118, %21 ], [ %.0118, %16 ]
  %.0116.be = phi i32 [ %.0116, %15 ], [ %.0116, %530 ], [ %.0116, %512 ], [ %.0116, %511 ], [ %.0116, %510 ], [ %.0116, %509 ], [ %.0116, %508 ], [ %.0116, %499 ], [ %.0116, %498 ], [ %.0116, %497 ], [ %.0116, %495 ], [ %.0116, %494 ], [ %.0116, %493 ], [ %.0116, %482 ], [ %.0116, %481 ], [ %480, %479 ], [ %.0116, %477 ], [ %.0116, %473 ], [ %.0116, %462 ], [ %.0116, %452 ], [ %.0116, %451 ], [ %.0116, %424 ], [ %.0116, %414 ], [ %.0116, %412 ], [ %.0116, %399 ], [ %.0116, %389 ], [ %.0116, %388 ], [ %.0116, %378 ], [ %.0116, %368 ], [ %.0116, %367 ], [ %.0116, %356 ], [ %.0116, %346 ], [ %.0116, %335 ], [ %.0116, %333 ], [ %.0116, %319 ], [ %.0116, %309 ], [ %.0116, %305 ], [ %.0116, %303 ], [ %.0116, %302 ], [ %.0116, %285 ], [ %.0116, %275 ], [ %.0116, %273 ], [ %.0116, %260 ], [ %.0116, %250 ], [ %.0116, %249 ], [ %.0116, %237 ], [ %.0116, %227 ], [ %.0116, %226 ], [ %.0116, %215 ], [ %.0116, %205 ], [ %.0116, %201 ], [ %.0116, %199 ], [ %.0116, %186 ], [ %.0116, %176 ], [ %.0116, %175 ], [ %.0116, %165 ], [ %.0116, %155 ], [ %.0116, %153 ], [ %.0116, %152 ], [ %.0116, %149 ], [ %.0116, %148 ], [ %.0116, %128 ], [ %.0116, %118 ], [ %.0116, %114 ], [ %.0116, %112 ], [ %.0116, %101 ], [ %.0116, %91 ], [ %.0116, %90 ], [ %.0116, %89 ], [ %79, %78 ], [ %.0116, %68 ], [ %.0116, %59 ], [ %.0116, %56 ], [ 1, %53 ], [ %.0116, %50 ], [ %.0116, %46 ], [ %.0116, %45 ], [ %.0116, %35 ], [ %.0116, %25 ], [ %.0116, %21 ], [ %.0116, %16 ]
  %.0114.be = phi i64 [ %.0114, %15 ], [ %.0114, %530 ], [ %.0114, %512 ], [ %.0114, %511 ], [ %.0114, %510 ], [ %.0114, %509 ], [ %.0114, %508 ], [ %.0114, %499 ], [ %.0114, %498 ], [ %.0114, %497 ], [ %.0114, %495 ], [ %.0114, %494 ], [ %.0114, %493 ], [ %.0114, %482 ], [ %.0114, %481 ], [ %.0114, %479 ], [ %.0114, %477 ], [ %.0114, %473 ], [ %.0114, %462 ], [ %.0114, %452 ], [ %.0114, %451 ], [ %.0114, %424 ], [ %.0114, %414 ], [ %.0114, %412 ], [ %.0114, %399 ], [ %.0114, %389 ], [ %.0114, %388 ], [ %.0114, %378 ], [ %.0114, %368 ], [ %.0114, %367 ], [ %.0114, %356 ], [ %.0114, %346 ], [ %.0114, %335 ], [ %.0114, %333 ], [ %.0114, %319 ], [ %.0114, %309 ], [ %.0114, %305 ], [ %.0114, %303 ], [ %.0114, %302 ], [ %.0114, %285 ], [ %.0114, %275 ], [ %.0114, %273 ], [ %.0114, %260 ], [ %.0114, %250 ], [ %.0114, %249 ], [ %.0114, %237 ], [ %.0114, %227 ], [ %.0114, %226 ], [ %.0114, %215 ], [ %.0114, %205 ], [ %.0114, %201 ], [ %.0114, %199 ], [ %.0114, %186 ], [ %.0114, %176 ], [ %.0114, %175 ], [ %.0114, %165 ], [ %.0114, %155 ], [ %.0114, %153 ], [ %.0114, %152 ], [ %150, %149 ], [ %.0114, %148 ], [ %.0114, %128 ], [ %.0114, %118 ], [ %.0114, %114 ], [ %.0114, %112 ], [ %.0114, %101 ], [ %.0114, %91 ], [ 1000000005, %90 ], [ %.0114, %89 ], [ %.0114, %78 ], [ %.0114, %68 ], [ %.0114, %59 ], [ %.0114, %56 ], [ %.0114, %53 ], [ %.0114, %50 ], [ %.0114, %46 ], [ %.0114, %45 ], [ %.0114, %35 ], [ %.0114, %25 ], [ %.0114, %21 ], [ %.0114, %16 ]
  %.0112.be = phi i32 [ %.0112, %15 ], [ %.0112, %530 ], [ %.0112, %512 ], [ %.0112, %511 ], [ %.0112, %510 ], [ %.0112, %509 ], [ %.0112, %508 ], [ %.0112, %499 ], [ %.0112, %498 ], [ %.0112, %497 ], [ %.0112, %495 ], [ %.0112, %494 ], [ %.0112, %493 ], [ %.0112, %482 ], [ %.0112, %481 ], [ %.0112, %479 ], [ %.0112, %477 ], [ %.0112, %473 ], [ %.0112, %462 ], [ %.0112, %452 ], [ %.0112, %451 ], [ %.0112, %424 ], [ %.0112, %414 ], [ %.0112, %412 ], [ %.0112, %399 ], [ %.0112, %389 ], [ %.0112, %388 ], [ %.0112, %378 ], [ %.0112, %368 ], [ %.0112, %367 ], [ %.0112, %356 ], [ %.0112, %346 ], [ %.0112, %335 ], [ %.0112, %333 ], [ %.0112, %319 ], [ %.0112, %309 ], [ %.0112, %305 ], [ %.0112, %303 ], [ %.0112, %302 ], [ %.0112, %285 ], [ %.0112, %275 ], [ %.0112, %273 ], [ %.0112, %260 ], [ %.0112, %250 ], [ %.0112, %249 ], [ %.0112, %237 ], [ %.0112, %227 ], [ %.0112, %226 ], [ %.0112, %215 ], [ %.0112, %205 ], [ %.0112, %201 ], [ %.0112, %199 ], [ %.0112, %186 ], [ %.0112, %176 ], [ %.0112, %175 ], [ %.0112, %165 ], [ %.0112, %155 ], [ %.0112, %153 ], [ %.0112, %152 ], [ %151, %149 ], [ %.0112, %148 ], [ %.0112, %128 ], [ %.0112, %118 ], [ %.0112, %114 ], [ %.0112, %112 ], [ %.0112, %101 ], [ %.0112, %91 ], [ 0, %90 ], [ %.0112, %89 ], [ %.0112, %78 ], [ %.0112, %68 ], [ %.0112, %59 ], [ %.0112, %56 ], [ %.0112, %53 ], [ %.0112, %50 ], [ %.0112, %46 ], [ %.0112, %45 ], [ %.0112, %35 ], [ %.0112, %25 ], [ %.0112, %21 ], [ %.0112, %16 ]
  %.0110.be = phi i64 [ %.0110, %15 ], [ %.0110, %530 ], [ %.0110, %512 ], [ %.0110, %511 ], [ %.0110, %510 ], [ %.0110, %509 ], [ %.0110, %508 ], [ %.0110, %499 ], [ %.0110, %498 ], [ %.0110, %497 ], [ %.0110, %495 ], [ %.0110, %494 ], [ 1, %493 ], [ %.0110, %482 ], [ %.0110, %481 ], [ %.0110, %479 ], [ %.0110, %477 ], [ %.0110, %473 ], [ %.0110, %462 ], [ %.0110, %452 ], [ %.0110, %451 ], [ %.0110, %424 ], [ %.0110, %414 ], [ %.0110, %412 ], [ %.0110, %399 ], [ %.0110, %389 ], [ %.0110, %388 ], [ %.0110, %378 ], [ %.0110, %368 ], [ %.0110, %367 ], [ %.0110, %356 ], [ %.0110, %346 ], [ %.0110, %335 ], [ %.0110, %333 ], [ %.0110, %319 ], [ %.0110, %309 ], [ %.0110, %305 ], [ %.0110, %303 ], [ %.0110, %302 ], [ %.0110, %285 ], [ %.0110, %275 ], [ %.0110, %273 ], [ %.0110, %260 ], [ %.0110, %250 ], [ %.0110, %249 ], [ %.0110, %237 ], [ %.0110, %227 ], [ %.0110, %226 ], [ %.0110, %215 ], [ %.0110, %205 ], [ %204, %201 ], [ %.0110, %199 ], [ %.0110, %186 ], [ %.0110, %176 ], [ %.0110, %175 ], [ 1, %165 ], [ %.0110, %155 ], [ %.0110, %153 ], [ %.0110, %152 ], [ %.0110, %149 ], [ %.0110, %148 ], [ %.0110, %128 ], [ %.0110, %118 ], [ %.0110, %114 ], [ %.0110, %112 ], [ %.0110, %101 ], [ %.0110, %91 ], [ %.0110, %90 ], [ %.0110, %89 ], [ %.0110, %78 ], [ %.0110, %68 ], [ %.0110, %59 ], [ %.0110, %56 ], [ %.0110, %53 ], [ %.0110, %50 ], [ %.0110, %46 ], [ %.0110, %45 ], [ %.0110, %35 ], [ %.0110, %25 ], [ %.0110, %21 ], [ %.0110, %16 ]
  %.0108.be = phi i32 [ %.0108, %15 ], [ %.0108, %530 ], [ %.0108, %512 ], [ %.0108, %511 ], [ %.0108, %510 ], [ %.0108, %509 ], [ %.0108, %508 ], [ %.0108, %499 ], [ %.0108, %498 ], [ %.0108, %497 ], [ %496, %495 ], [ %.0108, %494 ], [ 1, %493 ], [ %.0108, %482 ], [ %.0108, %481 ], [ %.0108, %479 ], [ %.0108, %477 ], [ %.0108, %473 ], [ %.0108, %462 ], [ %.0108, %452 ], [ %.0108, %451 ], [ %.0108, %424 ], [ %.0108, %414 ], [ %.0108, %412 ], [ %.0108, %399 ], [ %.0108, %389 ], [ %.0108, %388 ], [ %.0108, %378 ], [ %.0108, %368 ], [ %.0108, %367 ], [ %.0108, %356 ], [ %.0108, %346 ], [ %.0108, %335 ], [ %.0108, %333 ], [ %.0108, %319 ], [ %.0108, %309 ], [ %.0108, %305 ], [ %.0108, %303 ], [ %.0108, %302 ], [ %.0108, %285 ], [ %.0108, %275 ], [ %.0108, %273 ], [ %.0108, %260 ], [ %.0108, %250 ], [ %.0108, %249 ], [ %.0108, %237 ], [ %.0108, %227 ], [ %.0108, %226 ], [ %216, %215 ], [ %.0108, %205 ], [ %.0108, %201 ], [ %.0108, %199 ], [ %.0108, %186 ], [ %.0108, %176 ], [ %.0108, %175 ], [ 1, %165 ], [ %.0108, %155 ], [ %.0108, %153 ], [ %.0108, %152 ], [ %.0108, %149 ], [ %.0108, %148 ], [ %.0108, %128 ], [ %.0108, %118 ], [ %.0108, %114 ], [ %.0108, %112 ], [ %.0108, %101 ], [ %.0108, %91 ], [ %.0108, %90 ], [ %.0108, %89 ], [ %.0108, %78 ], [ %.0108, %68 ], [ %.0108, %59 ], [ %.0108, %56 ], [ %.0108, %53 ], [ %.0108, %50 ], [ %.0108, %46 ], [ %.0108, %45 ], [ %.0108, %35 ], [ %.0108, %25 ], [ %.0108, %21 ], [ %.0108, %16 ]
  %.0106.be = phi i32 [ %.0106, %15 ], [ %.0106, %530 ], [ %.0106, %512 ], [ %.0106, %511 ], [ %.0106, %510 ], [ %.0106, %509 ], [ %.0106, %508 ], [ %.0106, %499 ], [ %.0106, %498 ], [ 0, %497 ], [ %.0106, %495 ], [ %.0106, %494 ], [ %.0106, %493 ], [ %.0106, %482 ], [ %.0106, %481 ], [ %.0106, %479 ], [ %.0106, %477 ], [ %.0106, %473 ], [ %.0106, %462 ], [ %.0106, %452 ], [ %.0106, %451 ], [ %.0106, %424 ], [ %.0106, %414 ], [ %.0106, %412 ], [ %.0106, %399 ], [ %.0106, %389 ], [ %.0106, %388 ], [ %.0106, %378 ], [ %.0106, %368 ], [ %.0106, %367 ], [ %.0106, %356 ], [ %.0106, %346 ], [ %.0106, %335 ], [ %.0106, %333 ], [ %.0106, %319 ], [ %.0106, %309 ], [ %.0106, %305 ], [ %304, %303 ], [ %.0106, %302 ], [ %.0106, %285 ], [ %.0106, %275 ], [ %.0106, %273 ], [ %.0106, %260 ], [ %.0106, %250 ], [ %.0106, %249 ], [ 0, %237 ], [ %.0106, %227 ], [ %.0106, %226 ], [ %.0106, %215 ], [ %.0106, %205 ], [ %.0106, %201 ], [ %.0106, %199 ], [ %.0106, %186 ], [ %.0106, %176 ], [ %.0106, %175 ], [ %.0106, %165 ], [ %.0106, %155 ], [ %.0106, %153 ], [ %.0106, %152 ], [ %.0106, %149 ], [ %.0106, %148 ], [ %.0106, %128 ], [ %.0106, %118 ], [ %.0106, %114 ], [ %.0106, %112 ], [ %.0106, %101 ], [ %.0106, %91 ], [ %.0106, %90 ], [ %.0106, %89 ], [ %.0106, %78 ], [ %.0106, %68 ], [ %.0106, %59 ], [ %.0106, %56 ], [ %.0106, %53 ], [ %.0106, %50 ], [ %.0106, %46 ], [ %.0106, %45 ], [ %.0106, %35 ], [ %.0106, %25 ], [ %.0106, %21 ], [ %.0106, %16 ]
  %.0104.be = phi i32 [ %.0104, %15 ], [ %.0104, %530 ], [ %.0104, %512 ], [ %.0104, %511 ], [ %.0104, %510 ], [ %.neg125, %509 ], [ %.0104, %508 ], [ %.0104, %499 ], [ %.0104, %498 ], [ %.0104, %497 ], [ %.0104, %495 ], [ %.0104, %494 ], [ %.0104, %493 ], [ %.0104, %482 ], [ %.0104, %481 ], [ %.0104, %479 ], [ %.0104, %477 ], [ %.0104, %473 ], [ %.0104, %462 ], [ %.0104, %452 ], [ %.0104, %451 ], [ %.0104, %424 ], [ %.0104, %414 ], [ %.0104, %412 ], [ %.0104, %399 ], [ %.0104, %389 ], [ %.0104, %388 ], [ %.0104, %378 ], [ %.0104, %368 ], [ %.0104, %367 ], [ %357, %356 ], [ %.0104, %346 ], [ %.0104, %335 ], [ %.0104, %333 ], [ %.0104, %319 ], [ %.0104, %309 ], [ 1, %305 ], [ %.0104, %303 ], [ %.0104, %302 ], [ %.0104, %285 ], [ %.0104, %275 ], [ %.0104, %273 ], [ %.0104, %260 ], [ %.0104, %250 ], [ %.0104, %249 ], [ %.0104, %237 ], [ %.0104, %227 ], [ %.0104, %226 ], [ %.0104, %215 ], [ %.0104, %205 ], [ %.0104, %201 ], [ %.0104, %199 ], [ %.0104, %186 ], [ %.0104, %176 ], [ %.0104, %175 ], [ %.0104, %165 ], [ %.0104, %155 ], [ %.0104, %153 ], [ %.0104, %152 ], [ %.0104, %149 ], [ %.0104, %148 ], [ %.0104, %128 ], [ %.0104, %118 ], [ %.0104, %114 ], [ %.0104, %112 ], [ %.0104, %101 ], [ %.0104, %91 ], [ %.0104, %90 ], [ %.0104, %89 ], [ %.0104, %78 ], [ %.0104, %68 ], [ %.0104, %59 ], [ %.0104, %56 ], [ %.0104, %53 ], [ %.0104, %50 ], [ %.0104, %46 ], [ %.0104, %45 ], [ %.0104, %35 ], [ %.0104, %25 ], [ %.0104, %21 ], [ %.0104, %16 ]
  %.0102.be = phi i64 [ %.0102, %15 ], [ %.0102, %530 ], [ %529, %512 ], [ %.0102, %511 ], [ 0, %510 ], [ %.0102, %509 ], [ %.0102, %508 ], [ %.0102, %499 ], [ %.0102, %498 ], [ %.0102, %497 ], [ %.0102, %495 ], [ %.0102, %494 ], [ %.0102, %493 ], [ %.0102, %482 ], [ %.0102, %481 ], [ %.0102, %479 ], [ %.0102, %477 ], [ %.0102, %473 ], [ %.0102, %462 ], [ %.0102, %452 ], [ %.0102, %451 ], [ %441, %424 ], [ %.0102, %414 ], [ %.0102, %412 ], [ %.0102, %399 ], [ %.0102, %389 ], [ %.0102, %388 ], [ 0, %378 ], [ %.0102, %368 ], [ %.0102, %367 ], [ %.0102, %356 ], [ %.0102, %346 ], [ %.0102, %335 ], [ %.0102, %333 ], [ %.0102, %319 ], [ %.0102, %309 ], [ %.0102, %305 ], [ %.0102, %303 ], [ %.0102, %302 ], [ %.0102, %285 ], [ %.0102, %275 ], [ %.0102, %273 ], [ %.0102, %260 ], [ %.0102, %250 ], [ %.0102, %249 ], [ %.0102, %237 ], [ %.0102, %227 ], [ %.0102, %226 ], [ %.0102, %215 ], [ %.0102, %205 ], [ %.0102, %201 ], [ %.0102, %199 ], [ %.0102, %186 ], [ %.0102, %176 ], [ %.0102, %175 ], [ %.0102, %165 ], [ %.0102, %155 ], [ %.0102, %153 ], [ %.0102, %152 ], [ %.0102, %149 ], [ %.0102, %148 ], [ %.0102, %128 ], [ %.0102, %118 ], [ %.0102, %114 ], [ %.0102, %112 ], [ %.0102, %101 ], [ %.0102, %91 ], [ %.0102, %90 ], [ %.0102, %89 ], [ %.0102, %78 ], [ %.0102, %68 ], [ %.0102, %59 ], [ %.0102, %56 ], [ %.0102, %53 ], [ %.0102, %50 ], [ %.0102, %46 ], [ %.0102, %45 ], [ %.0102, %35 ], [ %.0102, %25 ], [ %.0102, %21 ], [ %.0102, %16 ]
  %.0100.be = phi i32 [ %.0100, %15 ], [ %531, %530 ], [ %.0100, %512 ], [ %.0100, %511 ], [ 0, %510 ], [ %.0100, %509 ], [ %.0100, %508 ], [ %.0100, %499 ], [ %.0100, %498 ], [ %.0100, %497 ], [ %.0100, %495 ], [ %.0100, %494 ], [ %.0100, %493 ], [ %.0100, %482 ], [ %.0100, %481 ], [ %.0100, %479 ], [ %.0100, %477 ], [ %.0100, %473 ], [ %463, %462 ], [ %.0100, %452 ], [ %.0100, %451 ], [ %.0100, %424 ], [ %.0100, %414 ], [ %.0100, %412 ], [ %.0100, %399 ], [ %.0100, %389 ], [ %.0100, %388 ], [ 0, %378 ], [ %.0100, %368 ], [ %.0100, %367 ], [ %.0100, %356 ], [ %.0100, %346 ], [ %.0100, %335 ], [ %.0100, %333 ], [ %.0100, %319 ], [ %.0100, %309 ], [ %.0100, %305 ], [ %.0100, %303 ], [ %.0100, %302 ], [ %.0100, %285 ], [ %.0100, %275 ], [ %.0100, %273 ], [ %.0100, %260 ], [ %.0100, %250 ], [ %.0100, %249 ], [ %.0100, %237 ], [ %.0100, %227 ], [ %.0100, %226 ], [ %.0100, %215 ], [ %.0100, %205 ], [ %.0100, %201 ], [ %.0100, %199 ], [ %.0100, %186 ], [ %.0100, %176 ], [ %.0100, %175 ], [ %.0100, %165 ], [ %.0100, %155 ], [ %.0100, %153 ], [ %.0100, %152 ], [ %.0100, %149 ], [ %.0100, %148 ], [ %.0100, %128 ], [ %.0100, %118 ], [ %.0100, %114 ], [ %.0100, %112 ], [ %.0100, %101 ], [ %.0100, %91 ], [ %.0100, %90 ], [ %.0100, %89 ], [ %.0100, %78 ], [ %.0100, %68 ], [ %.0100, %59 ], [ %.0100, %56 ], [ %.0100, %53 ], [ %.0100, %50 ], [ %.0100, %46 ], [ %.0100, %45 ], [ %.0100, %35 ], [ %.0100, %25 ], [ %.0100, %21 ], [ %.0100, %16 ]
  %.0.be = phi i32 [ %.0, %15 ], [ -1439219482, %530 ], [ 505767933, %512 ], [ 219308561, %511 ], [ 2015215187, %510 ], [ 1744943690, %509 ], [ -708232825, %508 ], [ -1060441013, %499 ], [ 1677187892, %498 ], [ -1150914202, %497 ], [ -1558074964, %495 ], [ -1842678238, %494 ], [ -854233507, %493 ], [ 2036526520, %482 ], [ 1008850757, %481 ], [ -1223425363, %479 ], [ -934890022, %477 ], [ 719398899, %473 ], [ %472, %462 ], [ %461, %452 ], [ -225101839, %451 ], [ %450, %424 ], [ %423, %414 ], [ %413, %412 ], [ %411, %399 ], [ %398, %389 ], [ 719398899, %388 ], [ %387, %378 ], [ %377, %368 ], [ 234904011, %367 ], [ %366, %356 ], [ %355, %346 ], [ 1279740649, %335 ], [ %334, %333 ], [ %332, %319 ], [ %318, %309 ], [ 234904011, %305 ], [ -2066660745, %303 ], [ 913070865, %302 ], [ %301, %285 ], [ %284, %275 ], [ %274, %273 ], [ %272, %260 ], [ %259, %250 ], [ -2066660745, %249 ], [ %248, %237 ], [ %236, %227 ], [ 102655601, %226 ], [ %225, %215 ], [ %214, %205 ], [ -1616983481, %201 ], [ %200, %199 ], [ %198, %186 ], [ %185, %176 ], [ 102655601, %175 ], [ %174, %165 ], [ %164, %155 ], [ -1592253487, %153 ], [ -1300855750, %152 ], [ -1628846146, %149 ], [ 1418849860, %148 ], [ %147, %128 ], [ %127, %118 ], [ %117, %114 ], [ %113, %112 ], [ %111, %101 ], [ %100, %91 ], [ -1628846146, %90 ], [ 1157043321, %89 ], [ %88, %78 ], [ %77, %68 ], [ -2054392485, %59 ], [ %58, %56 ], [ 1157043321, %53 ], [ %52, %50 ], [ -1592253487, %46 ], [ 1240314038, %45 ], [ %44, %35 ], [ %34, %25 ], [ 1628905855, %21 ], [ %20, %16 ]
  br label %15

16:                                               ; preds = %15
  %17 = sext i32 %.0120 to i64
  %18 = load i64, i64* %9, align 8
  %19 = icmp sgt i64 %18, %17
  %20 = select i1 %19, i32 -129099840, i32 291031480
  br label %.backedge

21:                                               ; preds = %15
  %22 = sext i32 %.0120 to i64
  %23 = getelementptr inbounds i64, i64* %13, i64 %22
  %24 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %23)
  br label %.backedge

25:                                               ; preds = %15
  %26 = load i32, i32* @x.4, align 4
  %27 = load i32, i32* @y.5, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 -934890022, i32 915118299
  br label %.backedge

35:                                               ; preds = %15
  %.neg129 = add i32 %.0120, 1
  %36 = load i32, i32* @x.4, align 4
  %37 = load i32, i32* @y.5, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 1524570419, i32 915118299
  br label %.backedge

45:                                               ; preds = %15
  br label %.backedge

46:                                               ; preds = %15
  %47 = load i64, i64* %9, align 8
  %48 = add i64 %47, 1
  %49 = alloca i64, i64 %48, align 16
  store i64* %49, i64** %8, align 8
  br label %.backedge

50:                                               ; preds = %15
  %51 = sext i32 %.0118 to i64
  %.not = icmp slt i64 %.0122, %51
  %52 = select i1 %.not, i32 -464669761, i32 -291095842
  br label %.backedge

53:                                               ; preds = %15
  %54 = sext i32 %.0118 to i64
  %.0..0..0.75 = load volatile i64*, i64** %8, align 8
  %55 = getelementptr inbounds i64, i64* %.0..0..0.75, i64 %54
  store i64 1, i64* %55, align 8
  store i64 %54, i64* %14, align 16
  br label %.backedge

56:                                               ; preds = %15
  %57 = icmp slt i32 %.0116, 31
  %58 = select i1 %57, i32 2051737561, i32 -920899382
  br label %.backedge

59:                                               ; preds = %15
  %60 = add i32 %.0116, -1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [31 x i64], [31 x i64]* %10, i64 0, i64 %61
  %63 = load i64, i64* %62, align 8
  %64 = mul nsw i64 %63, %63
  %65 = urem i64 %64, 1000000007
  %66 = sext i32 %.0116 to i64
  %67 = getelementptr inbounds [31 x i64], [31 x i64]* %10, i64 0, i64 %66
  store i64 %65, i64* %67, align 8
  br label %.backedge

68:                                               ; preds = %15
  %69 = load i32, i32* @x.4, align 4
  %70 = load i32, i32* @y.5, align 4
  %71 = add i32 %69, -1
  %72 = mul i32 %71, %69
  %73 = and i32 %72, 1
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %75, %74
  %77 = select i1 %76, i32 -1223425363, i32 -570839972
  br label %.backedge

78:                                               ; preds = %15
  %79 = add i32 %.0116, 1
  %80 = load i32, i32* @x.4, align 4
  %81 = load i32, i32* @y.5, align 4
  %82 = add i32 %80, -1
  %83 = mul i32 %82, %80
  %84 = and i32 %83, 1
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %86, %85
  %88 = select i1 %87, i32 -1118088405, i32 -570839972
  br label %.backedge

89:                                               ; preds = %15
  br label %.backedge

90:                                               ; preds = %15
  br label %.backedge

91:                                               ; preds = %15
  %92 = load i32, i32* @x.4, align 4
  %93 = load i32, i32* @y.5, align 4
  %94 = add i32 %92, -1
  %95 = mul i32 %94, %92
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %98, %97
  %100 = select i1 %99, i32 1008850757, i32 -1451013659
  br label %.backedge

101:                                              ; preds = %15
  %102 = icmp sgt i64 %.0114, 0
  store i1 %102, i1* %7, align 1
  %103 = load i32, i32* @x.4, align 4
  %104 = load i32, i32* @y.5, align 4
  %105 = add i32 %103, -1
  %106 = mul i32 %105, %103
  %107 = and i32 %106, 1
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %109, %108
  %111 = select i1 %110, i32 1689596652, i32 -1451013659
  br label %.backedge

112:                                              ; preds = %15
  %.0..0..0.82 = load volatile i1, i1* %7, align 1
  %113 = select i1 %.0..0..0.82, i32 -843136162, i32 -2010147839
  br label %.backedge

114:                                              ; preds = %15
  %115 = srem i64 %.0114, 2
  %116 = icmp eq i64 %115, 1
  %117 = select i1 %116, i32 -1445529724, i32 1418849860
  br label %.backedge

118:                                              ; preds = %15
  %119 = load i32, i32* @x.4, align 4
  %120 = load i32, i32* @y.5, align 4
  %121 = add i32 %119, -1
  %122 = mul i32 %121, %119
  %123 = and i32 %122, 1
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %125, %124
  %127 = select i1 %126, i32 2036526520, i32 -573151025
  br label %.backedge

128:                                              ; preds = %15
  %129 = sext i32 %.0112 to i64
  %130 = getelementptr inbounds [31 x i64], [31 x i64]* %10, i64 0, i64 %129
  %131 = load i64, i64* %130, align 8
  %132 = sext i32 %.0118 to i64
  %.0..0..0.76 = load volatile i64*, i64** %8, align 8
  %133 = getelementptr inbounds i64, i64* %.0..0..0.76, i64 %132
  %134 = load i64, i64* %133, align 8
  %135 = mul nsw i64 %134, %131
  store i64 %135, i64* %133, align 8
  %.0..0..0.77 = load volatile i64*, i64** %8, align 8
  %136 = getelementptr inbounds i64, i64* %.0..0..0.77, i64 %132
  %137 = load i64, i64* %136, align 8
  %138 = srem i64 %137, 1000000007
  store i64 %138, i64* %136, align 8
  %139 = load i32, i32* @x.4, align 4
  %140 = load i32, i32* @y.5, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 -1259233031, i32 -573151025
  br label %.backedge

148:                                              ; preds = %15
  br label %.backedge

149:                                              ; preds = %15
  %150 = sdiv i64 %.0114, 2
  %151 = add i32 %.0112, 1
  br label %.backedge

152:                                              ; preds = %15
  br label %.backedge

153:                                              ; preds = %15
  %154 = add i32 %.0118, 1
  br label %.backedge

155:                                              ; preds = %15
  %156 = load i32, i32* @x.4, align 4
  %157 = load i32, i32* @y.5, align 4
  %158 = add i32 %156, -1
  %159 = mul i32 %158, %156
  %160 = and i32 %159, 1
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %162, %161
  %164 = select i1 %163, i32 -854233507, i32 1470987879
  br label %.backedge

165:                                              ; preds = %15
  %166 = load i32, i32* @x.4, align 4
  %167 = load i32, i32* @y.5, align 4
  %168 = add i32 %166, -1
  %169 = mul i32 %168, %166
  %170 = and i32 %169, 1
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %172, %171
  %174 = select i1 %173, i32 -107052196, i32 1470987879
  br label %.backedge

175:                                              ; preds = %15
  br label %.backedge

176:                                              ; preds = %15
  %177 = load i32, i32* @x.4, align 4
  %178 = load i32, i32* @y.5, align 4
  %179 = add i32 %177, -1
  %180 = mul i32 %179, %177
  %181 = and i32 %180, 1
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %183, %182
  %185 = select i1 %184, i32 -1842678238, i32 1171517121
  br label %.backedge

186:                                              ; preds = %15
  %187 = sext i32 %.0108 to i64
  %188 = load i64, i64* %9, align 8
  %189 = icmp sge i64 %188, %187
  store i1 %189, i1* %6, align 1
  %190 = load i32, i32* @x.4, align 4
  %191 = load i32, i32* @y.5, align 4
  %192 = add i32 %190, -1
  %193 = mul i32 %192, %190
  %194 = and i32 %193, 1
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %196, %195
  %198 = select i1 %197, i32 -952627299, i32 1171517121
  br label %.backedge

199:                                              ; preds = %15
  %.0..0..0.83 = load volatile i1, i1* %6, align 1
  %200 = select i1 %.0..0..0.83, i32 823805206, i32 -519118741
  br label %.backedge

201:                                              ; preds = %15
  %202 = sext i32 %.0108 to i64
  %203 = mul nsw i64 %.0110, %202
  %204 = srem i64 %203, 1000000007
  br label %.backedge

205:                                              ; preds = %15
  %206 = load i32, i32* @x.4, align 4
  %207 = load i32, i32* @y.5, align 4
  %208 = add i32 %206, -1
  %209 = mul i32 %208, %206
  %210 = and i32 %209, 1
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %212, %211
  %214 = select i1 %213, i32 -1558074964, i32 -1368596554
  br label %.backedge

215:                                              ; preds = %15
  %216 = add i32 %.0108, 1
  %217 = load i32, i32* @x.4, align 4
  %218 = load i32, i32* @y.5, align 4
  %219 = add i32 %217, -1
  %220 = mul i32 %219, %217
  %221 = and i32 %220, 1
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %223, %222
  %225 = select i1 %224, i32 1156876444, i32 -1368596554
  br label %.backedge

226:                                              ; preds = %15
  br label %.backedge

227:                                              ; preds = %15
  %228 = load i32, i32* @x.4, align 4
  %229 = load i32, i32* @y.5, align 4
  %230 = add i32 %228, -1
  %231 = mul i32 %230, %228
  %232 = and i32 %231, 1
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %234, %233
  %236 = select i1 %235, i32 -1150914202, i32 1004750321
  br label %.backedge

237:                                              ; preds = %15
  %238 = load i64, i64* %9, align 8
  %239 = alloca i64, i64 %238, align 16
  store i64* %239, i64** %5, align 8
  %240 = load i32, i32* @x.4, align 4
  %241 = load i32, i32* @y.5, align 4
  %242 = add i32 %240, -1
  %243 = mul i32 %242, %240
  %244 = and i32 %243, 1
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %246, %245
  %248 = select i1 %247, i32 -1143176608, i32 1004750321
  br label %.backedge

249:                                              ; preds = %15
  br label %.backedge

250:                                              ; preds = %15
  %251 = load i32, i32* @x.4, align 4
  %252 = load i32, i32* @y.5, align 4
  %253 = add i32 %251, -1
  %254 = mul i32 %253, %251
  %255 = and i32 %254, 1
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %257, %256
  %259 = select i1 %258, i32 1677187892, i32 -220153138
  br label %.backedge

260:                                              ; preds = %15
  %261 = sext i32 %.0106 to i64
  %262 = load i64, i64* %9, align 8
  %263 = icmp sgt i64 %262, %261
  store i1 %263, i1* %4, align 1
  %264 = load i32, i32* @x.4, align 4
  %265 = load i32, i32* @y.5, align 4
  %266 = add i32 %264, -1
  %267 = mul i32 %266, %264
  %268 = and i32 %267, 1
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %270, %269
  %272 = select i1 %271, i32 157782087, i32 -220153138
  br label %.backedge

273:                                              ; preds = %15
  %.0..0..0.88 = load volatile i1, i1* %4, align 1
  %274 = select i1 %.0..0..0.88, i32 883672979, i32 -111789855
  br label %.backedge

275:                                              ; preds = %15
  %276 = load i32, i32* @x.4, align 4
  %277 = load i32, i32* @y.5, align 4
  %278 = add i32 %276, -1
  %279 = mul i32 %278, %276
  %280 = and i32 %279, 1
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %282, %281
  %284 = select i1 %283, i32 -1060441013, i32 -1697199574
  br label %.backedge

285:                                              ; preds = %15
  %.neg128 = add i32 %.0106, 1
  %286 = sext i32 %.neg128 to i64
  %.0..0..0.78 = load volatile i64*, i64** %8, align 8
  %287 = getelementptr inbounds i64, i64* %.0..0..0.78, i64 %286
  %288 = load i64, i64* %287, align 8
  %289 = mul nsw i64 %288, %.0110
  %290 = srem i64 %289, 1000000007
  %291 = sext i32 %.0106 to i64
  %.0..0..0.84 = load volatile i64*, i64** %5, align 8
  %292 = getelementptr inbounds i64, i64* %.0..0..0.84, i64 %291
  store i64 %290, i64* %292, align 8
  %293 = load i32, i32* @x.4, align 4
  %294 = load i32, i32* @y.5, align 4
  %295 = add i32 %293, -1
  %296 = mul i32 %295, %293
  %297 = and i32 %296, 1
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %299, %298
  %301 = select i1 %300, i32 -1537931309, i32 -1697199574
  br label %.backedge

302:                                              ; preds = %15
  br label %.backedge

303:                                              ; preds = %15
  %304 = add i32 %.0106, 1
  br label %.backedge

305:                                              ; preds = %15
  %306 = load i64, i64* %9, align 8
  %307 = alloca i64, i64 %306, align 16
  store i64* %307, i64** %3, align 8
  %.0..0..0.85 = load volatile i64*, i64** %5, align 8
  %308 = load i64, i64* %.0..0..0.85, align 16
  %.0..0..0.89 = load volatile i64*, i64** %3, align 8
  store i64 %308, i64* %.0..0..0.89, align 16
  br label %.backedge

309:                                              ; preds = %15
  %310 = load i32, i32* @x.4, align 4
  %311 = load i32, i32* @y.5, align 4
  %312 = add i32 %310, -1
  %313 = mul i32 %312, %310
  %314 = and i32 %313, 1
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %316, %315
  %318 = select i1 %317, i32 -708232825, i32 1437636712
  br label %.backedge

319:                                              ; preds = %15
  %320 = sext i32 %.0104 to i64
  %321 = load i64, i64* %9, align 8
  %322 = add i64 %321, -1
  %323 = icmp sge i64 %322, %320
  store i1 %323, i1* %2, align 1
  %324 = load i32, i32* @x.4, align 4
  %325 = load i32, i32* @y.5, align 4
  %326 = add i32 %324, -1
  %327 = mul i32 %326, %324
  %328 = and i32 %327, 1
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %330, %329
  %332 = select i1 %331, i32 -391298117, i32 1437636712
  br label %.backedge

333:                                              ; preds = %15
  %.0..0..0.98 = load volatile i1, i1* %2, align 1
  %334 = select i1 %.0..0..0.98, i32 -1608091754, i32 -1265724285
  br label %.backedge

335:                                              ; preds = %15
  %336 = add i32 %.0104, -1
  %337 = sext i32 %336 to i64
  %.0..0..0.90 = load volatile i64*, i64** %3, align 8
  %338 = getelementptr inbounds i64, i64* %.0..0..0.90, i64 %337
  %339 = load i64, i64* %338, align 8
  %340 = sext i32 %.0104 to i64
  %.0..0..0.86 = load volatile i64*, i64** %5, align 8
  %341 = getelementptr inbounds i64, i64* %.0..0..0.86, i64 %340
  %342 = load i64, i64* %341, align 8
  %343 = add i64 %342, %339
  %344 = srem i64 %343, 1000000007
  %.0..0..0.91 = load volatile i64*, i64** %3, align 8
  %345 = getelementptr inbounds i64, i64* %.0..0..0.91, i64 %340
  store i64 %344, i64* %345, align 8
  br label %.backedge

346:                                              ; preds = %15
  %347 = load i32, i32* @x.4, align 4
  %348 = load i32, i32* @y.5, align 4
  %349 = add i32 %347, -1
  %350 = mul i32 %349, %347
  %351 = and i32 %350, 1
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %353, %352
  %355 = select i1 %354, i32 1744943690, i32 -386180642
  br label %.backedge

356:                                              ; preds = %15
  %357 = add i32 %.0104, 1
  %358 = load i32, i32* @x.4, align 4
  %359 = load i32, i32* @y.5, align 4
  %360 = add i32 %358, -1
  %361 = mul i32 %360, %358
  %362 = and i32 %361, 1
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %364, %363
  %366 = select i1 %365, i32 -797565579, i32 -386180642
  br label %.backedge

367:                                              ; preds = %15
  br label %.backedge

368:                                              ; preds = %15
  %369 = load i32, i32* @x.4, align 4
  %370 = load i32, i32* @y.5, align 4
  %371 = add i32 %369, -1
  %372 = mul i32 %371, %369
  %373 = and i32 %372, 1
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %375, %374
  %377 = select i1 %376, i32 2015215187, i32 772783784
  br label %.backedge

378:                                              ; preds = %15
  %379 = load i32, i32* @x.4, align 4
  %380 = load i32, i32* @y.5, align 4
  %381 = add i32 %379, -1
  %382 = mul i32 %381, %379
  %383 = and i32 %382, 1
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %385, %384
  %387 = select i1 %386, i32 1859633331, i32 772783784
  br label %.backedge

388:                                              ; preds = %15
  br label %.backedge

389:                                              ; preds = %15
  %390 = load i32, i32* @x.4, align 4
  %391 = load i32, i32* @y.5, align 4
  %392 = add i32 %390, -1
  %393 = mul i32 %392, %390
  %394 = and i32 %393, 1
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %396, %395
  %398 = select i1 %397, i32 219308561, i32 1898191752
  br label %.backedge

399:                                              ; preds = %15
  %400 = sext i32 %.0100 to i64
  %401 = load i64, i64* %9, align 8
  %402 = icmp sgt i64 %401, %400
  store i1 %402, i1* %1, align 1
  %403 = load i32, i32* @x.4, align 4
  %404 = load i32, i32* @y.5, align 4
  %405 = add i32 %403, -1
  %406 = mul i32 %405, %403
  %407 = and i32 %406, 1
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %409, %408
  %411 = select i1 %410, i32 -2083073384, i32 1898191752
  br label %.backedge

412:                                              ; preds = %15
  %.0..0..0.99 = load volatile i1, i1* %1, align 1
  %413 = select i1 %.0..0..0.99, i32 714897665, i32 -1033071231
  br label %.backedge

414:                                              ; preds = %15
  %415 = load i32, i32* @x.4, align 4
  %416 = load i32, i32* @y.5, align 4
  %417 = add i32 %415, -1
  %418 = mul i32 %417, %415
  %419 = and i32 %418, 1
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %421, %420
  %423 = select i1 %422, i32 505767933, i32 -1994343210
  br label %.backedge

424:                                              ; preds = %15
  %425 = sext i32 %.0100 to i64
  %.0..0..0.92 = load volatile i64*, i64** %3, align 8
  %426 = getelementptr inbounds i64, i64* %.0..0..0.92, i64 %425
  %427 = load i64, i64* %426, align 8
  %428 = load i64, i64* %9, align 8
  %429 = xor i64 %425, -1
  %430 = add i64 %428, %429
  %.0..0..0.93 = load volatile i64*, i64** %3, align 8
  %431 = getelementptr inbounds i64, i64* %.0..0..0.93, i64 %430
  %432 = load i64, i64* %431, align 8
  %.0..0..0.94 = load volatile i64*, i64** %3, align 8
  %433 = load i64, i64* %.0..0..0.94, align 16
  %.neg126.neg = add i64 %427, 1000000007
  %434 = add i64 %.neg126.neg, %432
  %.neg127 = sub i64 %434, %433
  %435 = srem i64 %.neg127, 1000000007
  %436 = getelementptr inbounds i64, i64* %13, i64 %425
  %437 = load i64, i64* %436, align 8
  %438 = mul nsw i64 %435, %437
  %439 = srem i64 %438, 1000000007
  %440 = add i64 %439, %.0102
  %441 = srem i64 %440, 1000000007
  %442 = load i32, i32* @x.4, align 4
  %443 = load i32, i32* @y.5, align 4
  %444 = add i32 %442, -1
  %445 = mul i32 %444, %442
  %446 = and i32 %445, 1
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %448, %447
  %450 = select i1 %449, i32 -405734114, i32 -1994343210
  br label %.backedge

451:                                              ; preds = %15
  br label %.backedge

452:                                              ; preds = %15
  %453 = load i32, i32* @x.4, align 4
  %454 = load i32, i32* @y.5, align 4
  %455 = add i32 %453, -1
  %456 = mul i32 %455, %453
  %457 = and i32 %456, 1
  %458 = icmp eq i32 %457, 0
  %459 = icmp slt i32 %454, 10
  %460 = or i1 %459, %458
  %461 = select i1 %460, i32 -1439219482, i32 -1986851990
  br label %.backedge

462:                                              ; preds = %15
  %463 = add i32 %.0100, 1
  %464 = load i32, i32* @x.4, align 4
  %465 = load i32, i32* @y.5, align 4
  %466 = add i32 %464, -1
  %467 = mul i32 %466, %464
  %468 = and i32 %467, 1
  %469 = icmp eq i32 %468, 0
  %470 = icmp slt i32 %465, 10
  %471 = or i1 %470, %469
  %472 = select i1 %471, i32 -130993505, i32 -1986851990
  br label %.backedge

473:                                              ; preds = %15
  br label %.backedge

474:                                              ; preds = %15
  %475 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %.0102)
  %476 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %475, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  ret i32 0

477:                                              ; preds = %15
  %478 = add i32 %.0120, 1
  br label %.backedge

479:                                              ; preds = %15
  %480 = add i32 %.0116, 1
  br label %.backedge

481:                                              ; preds = %15
  br label %.backedge

482:                                              ; preds = %15
  %483 = sext i32 %.0112 to i64
  %484 = getelementptr inbounds [31 x i64], [31 x i64]* %10, i64 0, i64 %483
  %485 = load i64, i64* %484, align 8
  %486 = sext i32 %.0118 to i64
  %.0..0..0.79 = load volatile i64*, i64** %8, align 8
  %487 = getelementptr inbounds i64, i64* %.0..0..0.79, i64 %486
  %488 = load i64, i64* %487, align 8
  %489 = mul nsw i64 %488, %485
  store i64 %489, i64* %487, align 8
  %.0..0..0.80 = load volatile i64*, i64** %8, align 8
  %490 = getelementptr inbounds i64, i64* %.0..0..0.80, i64 %486
  %491 = load i64, i64* %490, align 8
  %492 = srem i64 %491, 1000000007
  store i64 %492, i64* %490, align 8
  br label %.backedge

493:                                              ; preds = %15
  br label %.backedge

494:                                              ; preds = %15
  br label %.backedge

495:                                              ; preds = %15
  %496 = add i32 %.0108, 1
  br label %.backedge

497:                                              ; preds = %15
  br label %.backedge

498:                                              ; preds = %15
  br label %.backedge

499:                                              ; preds = %15
  %500 = add i32 %.0106, 1
  %501 = sext i32 %500 to i64
  %.0..0..0.81 = load volatile i64*, i64** %8, align 8
  %502 = getelementptr inbounds i64, i64* %.0..0..0.81, i64 %501
  %503 = load i64, i64* %502, align 8
  %504 = mul nsw i64 %503, %.0110
  %505 = srem i64 %504, 1000000007
  %506 = sext i32 %.0106 to i64
  %.0..0..0.87 = load volatile i64*, i64** %5, align 8
  %507 = getelementptr inbounds i64, i64* %.0..0..0.87, i64 %506
  store i64 %505, i64* %507, align 8
  br label %.backedge

508:                                              ; preds = %15
  br label %.backedge

509:                                              ; preds = %15
  %.neg125 = add i32 %.0104, 1
  br label %.backedge

510:                                              ; preds = %15
  br label %.backedge

511:                                              ; preds = %15
  br label %.backedge

512:                                              ; preds = %15
  %513 = sext i32 %.0100 to i64
  %.0..0..0.95 = load volatile i64*, i64** %3, align 8
  %514 = getelementptr inbounds i64, i64* %.0..0..0.95, i64 %513
  %515 = load i64, i64* %514, align 8
  %516 = load i64, i64* %9, align 8
  %517 = xor i64 %513, -1
  %518 = add i64 %516, %517
  %.0..0..0.96 = load volatile i64*, i64** %3, align 8
  %519 = getelementptr inbounds i64, i64* %.0..0..0.96, i64 %518
  %520 = load i64, i64* %519, align 8
  %.0..0..0.97 = load volatile i64*, i64** %3, align 8
  %521 = load i64, i64* %.0..0..0.97, align 16
  %.neg.neg = add i64 %515, 1000000007
  %522 = add i64 %.neg.neg, %520
  %.neg124 = sub i64 %522, %521
  %523 = srem i64 %.neg124, 1000000007
  %524 = getelementptr inbounds i64, i64* %13, i64 %513
  %525 = load i64, i64* %524, align 8
  %526 = mul nsw i64 %523, %525
  %527 = srem i64 %526, 1000000007
  %528 = add i64 %527, %.0102
  %529 = srem i64 %528, 1000000007
  br label %.backedge

530:                                              ; preds = %15
  %531 = add i32 %.0100, 1
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s464852417.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  tail call fastcc void @__cxx_global_var_init.1()
  ret void
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
