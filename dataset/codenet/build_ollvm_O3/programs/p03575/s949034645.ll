; ModuleID = 'build_ollvm/programs/p03575/s949034645.ll'
source_filename = "Project_CodeNet_C++1400/p03575/s949034645.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"struct.std::pair" = type { i64, i64 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i64 0, align 8
@m = global i64 0, align 8
@ans = local_unnamed_addr global i64 0, align 8
@map = local_unnamed_addr global [50 x [50 x i64]] zeroinitializer, align 16
@u = local_unnamed_addr global [50 x i64] zeroinitializer, align 16
@e = global [50 x %"struct.std::pair"] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s949034645.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.1 = common local_unnamed_addr global i32 0
@y.2 = common local_unnamed_addr global i32 0
@x.3 = common local_unnamed_addr global i32 0
@y.4 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #5
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #4 {
  %1 = alloca i32, align 4
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) @n)
  %7 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %6, i64* nonnull dereferenceable(8) @m)
  br label %8

8:                                                ; preds = %.backedge, %0
  %.093 = phi i64 [ 0, %0 ], [ %.093.be, %.backedge ]
  %.091 = phi i64 [ undef, %0 ], [ %.091.be, %.backedge ]
  %.089 = phi i64 [ undef, %0 ], [ %.089.be, %.backedge ]
  %.087 = phi i64 [ undef, %0 ], [ %.087.be, %.backedge ]
  %.085 = phi i64 [ undef, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i64 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i64 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i64 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i64 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.0 = phi i32 [ -1130011428, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1130011428, label %9
    i32 406209325, label %13
    i32 176606368, label %24
    i32 82055225, label %34
    i32 -784050675, label %45
    i32 -935521651, label %46
    i32 1391947604, label %56
    i32 -1426011563, label %66
    i32 -38796209, label %67
    i32 2070237872, label %71
    i32 133822976, label %78
    i32 -1426444302, label %82
    i32 -1308958262, label %84
    i32 -1088811708, label %86
    i32 -2102686128, label %87
    i32 -1483238330, label %92
    i32 669774876, label %102
    i32 -1661683942, label %113
    i32 -162509292, label %114
    i32 1032121287, label %118
    i32 -605966271, label %123
    i32 -61770247, label %128
    i32 23015956, label %133
    i32 1466925935, label %136
    i32 -1728916312, label %146
    i32 -901267954, label %159
    i32 1831139158, label %161
    i32 1856432578, label %171
    i32 31130443, label %184
    i32 1513526829, label %186
    i32 -240562348, label %190
    i32 1796110481, label %195
    i32 -1901599332, label %199
    i32 855835384, label %203
    i32 1937161465, label %206
    i32 1455974061, label %216
    i32 -1122322397, label %228
    i32 -381695058, label %230
    i32 1111690603, label %235
    i32 1469548712, label %245
    i32 298926638, label %258
    i32 -237445719, label %259
    i32 -1623231660, label %269
    i32 -950168448, label %279
    i32 995857460, label %280
    i32 1050602975, label %290
    i32 -408077370, label %301
    i32 1476317810, label %302
    i32 -370696931, label %303
    i32 587745696, label %304
    i32 -938033364, label %305
    i32 1432125433, label %306
    i32 -888302998, label %307
    i32 2053086543, label %317
    i32 1703734759, label %328
    i32 1768096952, label %329
    i32 -1924524152, label %330
    i32 502858025, label %332
    i32 -1721070986, label %333
    i32 -893373576, label %343
    i32 893503836, label %355
    i32 1133751878, label %357
    i32 -5612694, label %362
    i32 1435809052, label %372
    i32 1086119102, label %382
    i32 -790577592, label %383
    i32 26949073, label %393
    i32 1283142438, label %403
    i32 -388701740, label %404
    i32 -69836053, label %405
    i32 838447210, label %407
    i32 230705159, label %410
    i32 -1323399219, label %420
    i32 -376622667, label %436
    i32 1051765867, label %437
    i32 199658326, label %447
    i32 540505585, label %458
    i32 -1663973253, label %459
    i32 157260214, label %469
    i32 1494211517, label %482
    i32 -1711439371, label %483
    i32 602707851, label %485
    i32 1580086063, label %486
    i32 53649948, label %488
    i32 -1316557542, label %489
    i32 783856146, label %490
    i32 -1347453148, label %491
    i32 828464842, label %495
    i32 2097154385, label %496
    i32 -1724443029, label %498
    i32 -1530747975, label %500
    i32 -628168785, label %501
    i32 -700772224, label %502
    i32 2015522843, label %503
    i32 -1593271100, label %510
    i32 95008710, label %511
  ]

.backedge:                                        ; preds = %8, %511, %510, %503, %502, %501, %500, %498, %496, %495, %491, %490, %489, %488, %486, %485, %483, %469, %459, %458, %447, %437, %436, %420, %410, %407, %405, %404, %403, %393, %383, %382, %372, %362, %357, %355, %343, %333, %332, %330, %329, %328, %317, %307, %306, %305, %304, %303, %302, %301, %290, %280, %279, %269, %259, %258, %245, %235, %230, %228, %216, %206, %203, %199, %195, %190, %186, %184, %171, %161, %159, %146, %136, %133, %128, %123, %118, %114, %113, %102, %92, %87, %86, %84, %82, %78, %71, %67, %66, %56, %46, %45, %34, %24, %13, %9
  %.093.be = phi i64 [ %.093, %8 ], [ %.093, %511 ], [ %.093, %510 ], [ %.093, %503 ], [ %.093, %502 ], [ %.093, %501 ], [ %.093, %500 ], [ %.093, %498 ], [ %.093, %496 ], [ %.093, %495 ], [ %.093, %491 ], [ %.093, %490 ], [ %.093, %489 ], [ %.093, %488 ], [ %.093, %486 ], [ %.093, %485 ], [ %484, %483 ], [ %.093, %469 ], [ %.093, %459 ], [ %.093, %458 ], [ %.093, %447 ], [ %.093, %437 ], [ %.093, %436 ], [ %.093, %420 ], [ %.093, %410 ], [ %.093, %407 ], [ %.093, %405 ], [ %.093, %404 ], [ %.093, %403 ], [ %.093, %393 ], [ %.093, %383 ], [ %.093, %382 ], [ %.093, %372 ], [ %.093, %362 ], [ %.093, %357 ], [ %.093, %355 ], [ %.093, %343 ], [ %.093, %333 ], [ %.093, %332 ], [ %.093, %330 ], [ %.093, %329 ], [ %.093, %328 ], [ %.093, %317 ], [ %.093, %307 ], [ %.093, %306 ], [ %.093, %305 ], [ %.093, %304 ], [ %.093, %303 ], [ %.093, %302 ], [ %.093, %301 ], [ %.093, %290 ], [ %.093, %280 ], [ %.093, %279 ], [ %.093, %269 ], [ %.093, %259 ], [ %.093, %258 ], [ %.093, %245 ], [ %.093, %235 ], [ %.093, %230 ], [ %.093, %228 ], [ %.093, %216 ], [ %.093, %206 ], [ %.093, %203 ], [ %.093, %199 ], [ %.093, %195 ], [ %.093, %190 ], [ %.093, %186 ], [ %.093, %184 ], [ %.093, %171 ], [ %.093, %161 ], [ %.093, %159 ], [ %.093, %146 ], [ %.093, %136 ], [ %.093, %133 ], [ %.093, %128 ], [ %.093, %123 ], [ %.093, %118 ], [ %.093, %114 ], [ %.093, %113 ], [ %.093, %102 ], [ %.093, %92 ], [ %.093, %87 ], [ %.093, %86 ], [ %.093, %84 ], [ %.093, %82 ], [ %.093, %78 ], [ %.093, %71 ], [ %.093, %67 ], [ %.093, %66 ], [ %.093, %56 ], [ %.093, %46 ], [ %.093, %45 ], [ %35, %34 ], [ %.093, %24 ], [ %.093, %13 ], [ %.093, %9 ]
  %.091.be = phi i64 [ %.091, %8 ], [ %.091, %511 ], [ %.neg, %510 ], [ %.091, %503 ], [ %.091, %502 ], [ %.091, %501 ], [ %.091, %500 ], [ %.091, %498 ], [ %.091, %496 ], [ %.091, %495 ], [ %.091, %491 ], [ %.091, %490 ], [ %.091, %489 ], [ %.091, %488 ], [ %.091, %486 ], [ 0, %485 ], [ %.091, %483 ], [ %.091, %469 ], [ %.091, %459 ], [ %.091, %458 ], [ %448, %447 ], [ %.091, %437 ], [ %.091, %436 ], [ %.091, %420 ], [ %.091, %410 ], [ %.091, %407 ], [ %.091, %405 ], [ %.091, %404 ], [ %.091, %403 ], [ %.091, %393 ], [ %.091, %383 ], [ %.091, %382 ], [ %.091, %372 ], [ %.091, %362 ], [ %.091, %357 ], [ %.091, %355 ], [ %.091, %343 ], [ %.091, %333 ], [ %.091, %332 ], [ %.091, %330 ], [ %.091, %329 ], [ %.091, %328 ], [ %.091, %317 ], [ %.091, %307 ], [ %.091, %306 ], [ %.091, %305 ], [ %.091, %304 ], [ %.091, %303 ], [ %.091, %302 ], [ %.091, %301 ], [ %.091, %290 ], [ %.091, %280 ], [ %.091, %279 ], [ %.091, %269 ], [ %.091, %259 ], [ %.091, %258 ], [ %.091, %245 ], [ %.091, %235 ], [ %.091, %230 ], [ %.091, %228 ], [ %.091, %216 ], [ %.091, %206 ], [ %.091, %203 ], [ %.091, %199 ], [ %.091, %195 ], [ %.091, %190 ], [ %.091, %186 ], [ %.091, %184 ], [ %.091, %171 ], [ %.091, %161 ], [ %.091, %159 ], [ %.091, %146 ], [ %.091, %136 ], [ %.091, %133 ], [ %.091, %128 ], [ %.091, %123 ], [ %.091, %118 ], [ %.091, %114 ], [ %.091, %113 ], [ %.091, %102 ], [ %.091, %92 ], [ %.091, %87 ], [ %.091, %86 ], [ %.091, %84 ], [ %.091, %82 ], [ %.091, %78 ], [ %.091, %71 ], [ %.091, %67 ], [ %.091, %66 ], [ 0, %56 ], [ %.091, %46 ], [ %.091, %45 ], [ %.091, %34 ], [ %.091, %24 ], [ %.091, %13 ], [ %.091, %9 ]
  %.089.be = phi i64 [ %.089, %8 ], [ %.089, %511 ], [ %.089, %510 ], [ %.089, %503 ], [ %.089, %502 ], [ %.089, %501 ], [ %.089, %500 ], [ %.089, %498 ], [ %.089, %496 ], [ %.089, %495 ], [ %.089, %491 ], [ %.089, %490 ], [ %.089, %489 ], [ %.089, %488 ], [ %.089, %486 ], [ %.089, %485 ], [ %.089, %483 ], [ %.089, %469 ], [ %.089, %459 ], [ %.089, %458 ], [ %.089, %447 ], [ %.089, %437 ], [ %.089, %436 ], [ %.089, %420 ], [ %.089, %410 ], [ %.089, %407 ], [ %.089, %405 ], [ %.089, %404 ], [ %.089, %403 ], [ %.089, %393 ], [ %.089, %383 ], [ %.089, %382 ], [ %.089, %372 ], [ %.089, %362 ], [ %.089, %357 ], [ %.089, %355 ], [ %.089, %343 ], [ %.089, %333 ], [ %.089, %332 ], [ %.089, %330 ], [ %.089, %329 ], [ %.089, %328 ], [ %.089, %317 ], [ %.089, %307 ], [ %.089, %306 ], [ %.089, %305 ], [ %.089, %304 ], [ %.089, %303 ], [ %.089, %302 ], [ %.089, %301 ], [ %.089, %290 ], [ %.089, %280 ], [ %.089, %279 ], [ %.089, %269 ], [ %.089, %259 ], [ %.089, %258 ], [ %.089, %245 ], [ %.089, %235 ], [ %.089, %230 ], [ %.089, %228 ], [ %.089, %216 ], [ %.089, %206 ], [ %.089, %203 ], [ %.089, %199 ], [ %.089, %195 ], [ %.089, %190 ], [ %.089, %186 ], [ %.089, %184 ], [ %.089, %171 ], [ %.089, %161 ], [ %.089, %159 ], [ %.089, %146 ], [ %.089, %136 ], [ %.089, %133 ], [ %.089, %128 ], [ %.089, %123 ], [ %.089, %118 ], [ %.089, %114 ], [ %.089, %113 ], [ %.089, %102 ], [ %.089, %92 ], [ %.089, %87 ], [ %.089, %86 ], [ %85, %84 ], [ %.089, %82 ], [ %.089, %78 ], [ 0, %71 ], [ %.089, %67 ], [ %.089, %66 ], [ %.089, %56 ], [ %.089, %46 ], [ %.089, %45 ], [ %.089, %34 ], [ %.089, %24 ], [ %.089, %13 ], [ %.089, %9 ]
  %.087.be = phi i64 [ %.087, %8 ], [ %.087, %511 ], [ %.087, %510 ], [ %.087, %503 ], [ %.087, %502 ], [ %.087, %501 ], [ %.087, %500 ], [ %.087, %498 ], [ %.087, %496 ], [ %.087, %495 ], [ %.087, %491 ], [ %.087, %490 ], [ %.087, %489 ], [ %.087, %488 ], [ %.087, %486 ], [ %.087, %485 ], [ %.087, %483 ], [ %.087, %469 ], [ %.087, %459 ], [ %.087, %458 ], [ %.087, %447 ], [ %.087, %437 ], [ %.087, %436 ], [ %.087, %420 ], [ %.087, %410 ], [ %.087, %407 ], [ %.087, %405 ], [ %.087, %404 ], [ %.087, %403 ], [ %.087, %393 ], [ %.087, %383 ], [ %.087, %382 ], [ %.087, %372 ], [ %.087, %362 ], [ %.087, %357 ], [ %.087, %355 ], [ %.087, %343 ], [ %.087, %333 ], [ %.087, %332 ], [ %331, %330 ], [ %.087, %329 ], [ %.087, %328 ], [ %.087, %317 ], [ %.087, %307 ], [ %.087, %306 ], [ %.087, %305 ], [ %.087, %304 ], [ %.087, %303 ], [ %.087, %302 ], [ %.087, %301 ], [ %.087, %290 ], [ %.087, %280 ], [ %.087, %279 ], [ %.087, %269 ], [ %.087, %259 ], [ %.087, %258 ], [ %.087, %245 ], [ %.087, %235 ], [ %.087, %230 ], [ %.087, %228 ], [ %.087, %216 ], [ %.087, %206 ], [ %.087, %203 ], [ %.087, %199 ], [ %.087, %195 ], [ %.087, %190 ], [ %.087, %186 ], [ %.087, %184 ], [ %.087, %171 ], [ %.087, %161 ], [ %.087, %159 ], [ %.087, %146 ], [ %.087, %136 ], [ %.087, %133 ], [ %.087, %128 ], [ %.087, %123 ], [ %.087, %118 ], [ %.087, %114 ], [ %.087, %113 ], [ %.087, %102 ], [ %.087, %92 ], [ %.087, %87 ], [ 0, %86 ], [ %.087, %84 ], [ %.087, %82 ], [ %.087, %78 ], [ %.087, %71 ], [ %.087, %67 ], [ %.087, %66 ], [ %.087, %56 ], [ %.087, %46 ], [ %.087, %45 ], [ %.087, %34 ], [ %.087, %24 ], [ %.087, %13 ], [ %.087, %9 ]
  %.085.be = phi i64 [ %.085, %8 ], [ %.085, %511 ], [ %.085, %510 ], [ %.085, %503 ], [ %.085, %502 ], [ %.085, %501 ], [ %.085, %500 ], [ %499, %498 ], [ %.085, %496 ], [ %.085, %495 ], [ %.085, %491 ], [ %.085, %490 ], [ %.085, %489 ], [ %.085, %488 ], [ %487, %486 ], [ %.085, %485 ], [ %.085, %483 ], [ %.085, %469 ], [ %.085, %459 ], [ %.085, %458 ], [ %.085, %447 ], [ %.085, %437 ], [ %.085, %436 ], [ %.085, %420 ], [ %.085, %410 ], [ %.085, %407 ], [ %.085, %405 ], [ %.085, %404 ], [ %.085, %403 ], [ %.085, %393 ], [ %.085, %383 ], [ %.085, %382 ], [ %.085, %372 ], [ %.085, %362 ], [ %.085, %357 ], [ %.085, %355 ], [ %.085, %343 ], [ %.085, %333 ], [ %.085, %332 ], [ %.085, %330 ], [ %.085, %329 ], [ %.085, %328 ], [ %318, %317 ], [ %.085, %307 ], [ %.085, %306 ], [ %.085, %305 ], [ %.085, %304 ], [ %.085, %303 ], [ %.085, %302 ], [ %.085, %301 ], [ %.085, %290 ], [ %.085, %280 ], [ %.085, %279 ], [ %.085, %269 ], [ %.085, %259 ], [ %.085, %258 ], [ %.085, %245 ], [ %.085, %235 ], [ %.085, %230 ], [ %.085, %228 ], [ %.085, %216 ], [ %.085, %206 ], [ %.085, %203 ], [ %.085, %199 ], [ %.085, %195 ], [ %.085, %190 ], [ %.085, %186 ], [ %.085, %184 ], [ %.085, %171 ], [ %.085, %161 ], [ %.085, %159 ], [ %.085, %146 ], [ %.085, %136 ], [ %.085, %133 ], [ %.085, %128 ], [ %.085, %123 ], [ %.085, %118 ], [ %.085, %114 ], [ %.085, %113 ], [ %103, %102 ], [ %.085, %92 ], [ %.085, %87 ], [ %.085, %86 ], [ %.085, %84 ], [ %.085, %82 ], [ %.085, %78 ], [ %.085, %71 ], [ %.085, %67 ], [ %.085, %66 ], [ %.085, %56 ], [ %.085, %46 ], [ %.085, %45 ], [ %.085, %34 ], [ %.085, %24 ], [ %.085, %13 ], [ %.085, %9 ]
  %.083.be = phi i64 [ %.083, %8 ], [ %.083, %511 ], [ %.083, %510 ], [ %.083, %503 ], [ %.083, %502 ], [ %.083, %501 ], [ %.083, %500 ], [ %.083, %498 ], [ %.083, %496 ], [ %.083, %495 ], [ %.083, %491 ], [ %.083, %490 ], [ %.083, %489 ], [ %.083, %488 ], [ %.083, %486 ], [ %.083, %485 ], [ %.083, %483 ], [ %.083, %469 ], [ %.083, %459 ], [ %.083, %458 ], [ %.083, %447 ], [ %.083, %437 ], [ %.083, %436 ], [ %.083, %420 ], [ %.083, %410 ], [ %.083, %407 ], [ %.083, %405 ], [ %.083, %404 ], [ %.083, %403 ], [ %.083, %393 ], [ %.083, %383 ], [ %.083, %382 ], [ %.083, %372 ], [ %.083, %362 ], [ %.083, %357 ], [ %.083, %355 ], [ %.083, %343 ], [ %.083, %333 ], [ %.083, %332 ], [ %.083, %330 ], [ %.083, %329 ], [ %.083, %328 ], [ %.083, %317 ], [ %.083, %307 ], [ %.083, %306 ], [ %.083, %305 ], [ %.083, %304 ], [ %.083, %303 ], [ %.083, %302 ], [ %.083, %301 ], [ %.083, %290 ], [ %.083, %280 ], [ %.083, %279 ], [ %.083, %269 ], [ %.083, %259 ], [ %.083, %258 ], [ %.083, %245 ], [ %.083, %235 ], [ %.083, %230 ], [ %.083, %228 ], [ %.083, %216 ], [ %.083, %206 ], [ %205, %203 ], [ %.083, %199 ], [ %.083, %195 ], [ %.083, %190 ], [ %.083, %186 ], [ %.083, %184 ], [ %.083, %171 ], [ %.083, %161 ], [ %.083, %159 ], [ %.083, %146 ], [ %.083, %136 ], [ %.083, %133 ], [ %.083, %128 ], [ %.083, %123 ], [ %.083, %118 ], [ %.083, %114 ], [ %.083, %113 ], [ %.083, %102 ], [ %.083, %92 ], [ %.083, %87 ], [ %.083, %86 ], [ %.083, %84 ], [ %.083, %82 ], [ %.083, %78 ], [ %.083, %71 ], [ %.083, %67 ], [ %.083, %66 ], [ %.083, %56 ], [ %.083, %46 ], [ %.083, %45 ], [ %.083, %34 ], [ %.083, %24 ], [ %.083, %13 ], [ %.083, %9 ]
  %.081.be = phi i64 [ %.081, %8 ], [ %.081, %511 ], [ %.081, %510 ], [ %.081, %503 ], [ %.081, %502 ], [ %.081, %501 ], [ %.081, %500 ], [ %.081, %498 ], [ %497, %496 ], [ %.081, %495 ], [ %.081, %491 ], [ %.081, %490 ], [ %.081, %489 ], [ %.081, %488 ], [ %.081, %486 ], [ %.081, %485 ], [ %.081, %483 ], [ %.081, %469 ], [ %.081, %459 ], [ %.081, %458 ], [ %.081, %447 ], [ %.081, %437 ], [ %.081, %436 ], [ %.081, %420 ], [ %.081, %410 ], [ %.081, %407 ], [ %.081, %405 ], [ %.081, %404 ], [ %.081, %403 ], [ %.081, %393 ], [ %.081, %383 ], [ %.081, %382 ], [ %.081, %372 ], [ %.081, %362 ], [ %.081, %357 ], [ %.081, %355 ], [ %.081, %343 ], [ %.081, %333 ], [ %.081, %332 ], [ %.081, %330 ], [ %.081, %329 ], [ %.081, %328 ], [ %.081, %317 ], [ %.081, %307 ], [ %.081, %306 ], [ %.081, %305 ], [ %.081, %304 ], [ %.081, %303 ], [ %.081, %302 ], [ %.081, %301 ], [ %291, %290 ], [ %.081, %280 ], [ %.081, %279 ], [ %.081, %269 ], [ %.081, %259 ], [ %.081, %258 ], [ %.081, %245 ], [ %.081, %235 ], [ %.081, %230 ], [ %.081, %228 ], [ %.081, %216 ], [ %.081, %206 ], [ 0, %203 ], [ %.081, %199 ], [ %.081, %195 ], [ %.081, %190 ], [ %.081, %186 ], [ %.081, %184 ], [ %.081, %171 ], [ %.081, %161 ], [ %.081, %159 ], [ %.081, %146 ], [ %.081, %136 ], [ %.081, %133 ], [ %.081, %128 ], [ %.081, %123 ], [ %.081, %118 ], [ %.081, %114 ], [ %.081, %113 ], [ %.081, %102 ], [ %.081, %92 ], [ %.081, %87 ], [ %.081, %86 ], [ %.081, %84 ], [ %.081, %82 ], [ %.081, %78 ], [ %.081, %71 ], [ %.081, %67 ], [ %.081, %66 ], [ %.081, %56 ], [ %.081, %46 ], [ %.081, %45 ], [ %.081, %34 ], [ %.081, %24 ], [ %.081, %13 ], [ %.081, %9 ]
  %.079.be = phi i64 [ %.079, %8 ], [ %.079, %511 ], [ %.079, %510 ], [ %.079, %503 ], [ %.079, %502 ], [ 1, %501 ], [ %.079, %500 ], [ %.079, %498 ], [ %.079, %496 ], [ %.079, %495 ], [ %.079, %491 ], [ %.079, %490 ], [ %.079, %489 ], [ %.079, %488 ], [ %.079, %486 ], [ %.079, %485 ], [ %.079, %483 ], [ %.079, %469 ], [ %.079, %459 ], [ %.079, %458 ], [ %.079, %447 ], [ %.079, %437 ], [ %.079, %436 ], [ %.079, %420 ], [ %.079, %410 ], [ %.079, %407 ], [ %.079, %405 ], [ %.079, %404 ], [ %.079, %403 ], [ %.079, %393 ], [ %.079, %383 ], [ %.079, %382 ], [ 1, %372 ], [ %.079, %362 ], [ %.079, %357 ], [ %.079, %355 ], [ %.079, %343 ], [ %.079, %333 ], [ 0, %332 ], [ %.079, %330 ], [ %.079, %329 ], [ %.079, %328 ], [ %.079, %317 ], [ %.079, %307 ], [ %.079, %306 ], [ %.079, %305 ], [ %.079, %304 ], [ %.079, %303 ], [ %.079, %302 ], [ %.079, %301 ], [ %.079, %290 ], [ %.079, %280 ], [ %.079, %279 ], [ %.079, %269 ], [ %.079, %259 ], [ %.079, %258 ], [ %.079, %245 ], [ %.079, %235 ], [ %.079, %230 ], [ %.079, %228 ], [ %.079, %216 ], [ %.079, %206 ], [ %.079, %203 ], [ %.079, %199 ], [ %.079, %195 ], [ %.079, %190 ], [ %.079, %186 ], [ %.079, %184 ], [ %.079, %171 ], [ %.079, %161 ], [ %.079, %159 ], [ %.079, %146 ], [ %.079, %136 ], [ %.079, %133 ], [ %.079, %128 ], [ %.079, %123 ], [ %.079, %118 ], [ %.079, %114 ], [ %.079, %113 ], [ %.079, %102 ], [ %.079, %92 ], [ %.079, %87 ], [ %.079, %86 ], [ %.079, %84 ], [ %.079, %82 ], [ %.079, %78 ], [ %.079, %71 ], [ %.079, %67 ], [ %.079, %66 ], [ %.079, %56 ], [ %.079, %46 ], [ %.079, %45 ], [ %.079, %34 ], [ %.079, %24 ], [ %.079, %13 ], [ %.079, %9 ]
  %.077.be = phi i64 [ %.077, %8 ], [ %.077, %511 ], [ %.077, %510 ], [ %.077, %503 ], [ %.077, %502 ], [ %.077, %501 ], [ %.077, %500 ], [ %.077, %498 ], [ %.077, %496 ], [ %.077, %495 ], [ %.077, %491 ], [ %.077, %490 ], [ %.077, %489 ], [ %.077, %488 ], [ %.077, %486 ], [ %.077, %485 ], [ %.077, %483 ], [ %.077, %469 ], [ %.077, %459 ], [ %.077, %458 ], [ %.077, %447 ], [ %.077, %437 ], [ %.077, %436 ], [ %.077, %420 ], [ %.077, %410 ], [ %.077, %407 ], [ %.077, %405 ], [ %.neg95, %404 ], [ %.077, %403 ], [ %.077, %393 ], [ %.077, %383 ], [ %.077, %382 ], [ %.077, %372 ], [ %.077, %362 ], [ %.077, %357 ], [ %.077, %355 ], [ %.077, %343 ], [ %.077, %333 ], [ 0, %332 ], [ %.077, %330 ], [ %.077, %329 ], [ %.077, %328 ], [ %.077, %317 ], [ %.077, %307 ], [ %.077, %306 ], [ %.077, %305 ], [ %.077, %304 ], [ %.077, %303 ], [ %.077, %302 ], [ %.077, %301 ], [ %.077, %290 ], [ %.077, %280 ], [ %.077, %279 ], [ %.077, %269 ], [ %.077, %259 ], [ %.077, %258 ], [ %.077, %245 ], [ %.077, %235 ], [ %.077, %230 ], [ %.077, %228 ], [ %.077, %216 ], [ %.077, %206 ], [ %.077, %203 ], [ %.077, %199 ], [ %.077, %195 ], [ %.077, %190 ], [ %.077, %186 ], [ %.077, %184 ], [ %.077, %171 ], [ %.077, %161 ], [ %.077, %159 ], [ %.077, %146 ], [ %.077, %136 ], [ %.077, %133 ], [ %.077, %128 ], [ %.077, %123 ], [ %.077, %118 ], [ %.077, %114 ], [ %.077, %113 ], [ %.077, %102 ], [ %.077, %92 ], [ %.077, %87 ], [ %.077, %86 ], [ %.077, %84 ], [ %.077, %82 ], [ %.077, %78 ], [ %.077, %71 ], [ %.077, %67 ], [ %.077, %66 ], [ %.077, %56 ], [ %.077, %46 ], [ %.077, %45 ], [ %.077, %34 ], [ %.077, %24 ], [ %.077, %13 ], [ %.077, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ 157260214, %511 ], [ 199658326, %510 ], [ -1323399219, %503 ], [ 26949073, %502 ], [ 1435809052, %501 ], [ -893373576, %500 ], [ 2053086543, %498 ], [ 1050602975, %496 ], [ -1623231660, %495 ], [ 1469548712, %491 ], [ 1455974061, %490 ], [ 1856432578, %489 ], [ -1728916312, %488 ], [ 669774876, %486 ], [ 1391947604, %485 ], [ 82055225, %483 ], [ %481, %469 ], [ %468, %459 ], [ -38796209, %458 ], [ %457, %447 ], [ %446, %437 ], [ 1051765867, %436 ], [ %435, %420 ], [ %419, %410 ], [ 230705159, %407 ], [ %406, %405 ], [ -1721070986, %404 ], [ -388701740, %403 ], [ %402, %393 ], [ %392, %383 ], [ -790577592, %382 ], [ %381, %372 ], [ %371, %362 ], [ %361, %357 ], [ %356, %355 ], [ %354, %343 ], [ %342, %333 ], [ -1721070986, %332 ], [ -2102686128, %330 ], [ -1924524152, %329 ], [ -162509292, %328 ], [ %327, %317 ], [ %316, %307 ], [ -888302998, %306 ], [ 1432125433, %305 ], [ -938033364, %304 ], [ 587745696, %303 ], [ -370696931, %302 ], [ 1937161465, %301 ], [ %300, %290 ], [ %289, %280 ], [ 995857460, %279 ], [ %278, %269 ], [ %268, %259 ], [ -237445719, %258 ], [ %257, %245 ], [ %244, %235 ], [ %234, %230 ], [ %229, %228 ], [ %227, %216 ], [ %215, %206 ], [ 1937161465, %203 ], [ -370696931, %199 ], [ %198, %195 ], [ %194, %190 ], [ 587745696, %186 ], [ %185, %184 ], [ %183, %171 ], [ %170, %161 ], [ %160, %159 ], [ %158, %146 ], [ %145, %136 ], [ -938033364, %133 ], [ %132, %128 ], [ %127, %123 ], [ %122, %118 ], [ %117, %114 ], [ -162509292, %113 ], [ %112, %102 ], [ %101, %92 ], [ %91, %87 ], [ -2102686128, %86 ], [ 133822976, %84 ], [ -1308958262, %82 ], [ %81, %78 ], [ 133822976, %71 ], [ %70, %67 ], [ -38796209, %66 ], [ %65, %56 ], [ %55, %46 ], [ -1130011428, %45 ], [ %44, %34 ], [ %33, %24 ], [ 176606368, %13 ], [ %12, %9 ]
  br label %8

9:                                                ; preds = %8
  %10 = load i64, i64* @m, align 8
  %11 = icmp slt i64 %.093, %10
  %12 = select i1 %11, i32 406209325, i32 -935521651
  br label %.backedge

13:                                               ; preds = %8
  %14 = getelementptr inbounds [50 x %"struct.std::pair"], [50 x %"struct.std::pair"]* @e, i64 0, i64 %.093, i32 0
  %15 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull @_ZSt3cin, i64* nonnull dereferenceable(8) %14)
  %16 = getelementptr inbounds [50 x %"struct.std::pair"], [50 x %"struct.std::pair"]* @e, i64 0, i64 %.093, i32 1
  %17 = tail call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"* nonnull %15, i64* nonnull dereferenceable(8) %16)
  %18 = load i64, i64* %14, align 16
  %19 = add i64 %18, -1
  store i64 %19, i64* %14, align 16
  %20 = load i64, i64* %16, align 8
  %21 = add i64 %20, -1
  store i64 %21, i64* %16, align 8
  %22 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %19, i64 %21
  store i64 1, i64* %22, align 8
  %23 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %21, i64 %19
  store i64 1, i64* %23, align 8
  br label %.backedge

24:                                               ; preds = %8
  %25 = load i32, i32* @x.1, align 4
  %26 = load i32, i32* @y.2, align 4
  %27 = add i32 %25, -1
  %28 = mul i32 %27, %25
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %31, %30
  %33 = select i1 %32, i32 82055225, i32 -1711439371
  br label %.backedge

34:                                               ; preds = %8
  %35 = add i64 %.093, 1
  %36 = load i32, i32* @x.1, align 4
  %37 = load i32, i32* @y.2, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 -784050675, i32 -1711439371
  br label %.backedge

45:                                               ; preds = %8
  br label %.backedge

46:                                               ; preds = %8
  %47 = load i32, i32* @x.1, align 4
  %48 = load i32, i32* @y.2, align 4
  %49 = add i32 %47, -1
  %50 = mul i32 %49, %47
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %53, %52
  %55 = select i1 %54, i32 1391947604, i32 602707851
  br label %.backedge

56:                                               ; preds = %8
  store i64 0, i64* @ans, align 8
  %57 = load i32, i32* @x.1, align 4
  %58 = load i32, i32* @y.2, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 -1426011563, i32 602707851
  br label %.backedge

66:                                               ; preds = %8
  br label %.backedge

67:                                               ; preds = %8
  %68 = load i64, i64* @m, align 8
  %69 = icmp slt i64 %.091, %68
  %70 = select i1 %69, i32 2070237872, i32 -1663973253
  br label %.backedge

71:                                               ; preds = %8
  %72 = getelementptr inbounds [50 x %"struct.std::pair"], [50 x %"struct.std::pair"]* @e, i64 0, i64 %.091, i32 0
  %73 = load i64, i64* %72, align 16
  %74 = getelementptr inbounds [50 x %"struct.std::pair"], [50 x %"struct.std::pair"]* @e, i64 0, i64 %.091, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %73, i64 %75
  store i64 0, i64* %76, align 8
  %77 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %75, i64 %73
  store i64 0, i64* %77, align 8
  br label %.backedge

78:                                               ; preds = %8
  %79 = load i64, i64* @n, align 8
  %80 = icmp slt i64 %.089, %79
  %81 = select i1 %80, i32 -1426444302, i32 -1088811708
  br label %.backedge

82:                                               ; preds = %8
  %83 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.089
  store i64 -1, i64* %83, align 8
  br label %.backedge

84:                                               ; preds = %8
  %85 = add i64 %.089, 1
  br label %.backedge

86:                                               ; preds = %8
  br label %.backedge

87:                                               ; preds = %8
  %88 = load i64, i64* @n, align 8
  %89 = add i64 %88, -1
  %90 = icmp slt i64 %.087, %89
  %91 = select i1 %90, i32 -1483238330, i32 502858025
  br label %.backedge

92:                                               ; preds = %8
  %93 = load i32, i32* @x.1, align 4
  %94 = load i32, i32* @y.2, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 669774876, i32 1580086063
  br label %.backedge

102:                                              ; preds = %8
  %103 = add i64 %.087, 1
  %104 = load i32, i32* @x.1, align 4
  %105 = load i32, i32* @y.2, align 4
  %106 = add i32 %104, -1
  %107 = mul i32 %106, %104
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %110, %109
  %112 = select i1 %111, i32 -1661683942, i32 1580086063
  br label %.backedge

113:                                              ; preds = %8
  br label %.backedge

114:                                              ; preds = %8
  %115 = load i64, i64* @n, align 8
  %116 = icmp slt i64 %.085, %115
  %117 = select i1 %116, i32 1032121287, i32 1768096952
  br label %.backedge

118:                                              ; preds = %8
  %119 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %.087, i64 %.085
  %120 = load i64, i64* %119, align 8
  %121 = icmp eq i64 %120, 1
  %122 = select i1 %121, i32 -605966271, i32 1432125433
  br label %.backedge

123:                                              ; preds = %8
  %124 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.087
  %125 = load i64, i64* %124, align 8
  %126 = icmp eq i64 %125, -1
  %127 = select i1 %126, i32 -61770247, i32 1466925935
  br label %.backedge

128:                                              ; preds = %8
  %129 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.085
  %130 = load i64, i64* %129, align 8
  %131 = icmp eq i64 %130, -1
  %132 = select i1 %131, i32 23015956, i32 1466925935
  br label %.backedge

133:                                              ; preds = %8
  %134 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.087
  store i64 %.087, i64* %134, align 8
  %135 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.085
  store i64 %.087, i64* %135, align 8
  br label %.backedge

136:                                              ; preds = %8
  %137 = load i32, i32* @x.1, align 4
  %138 = load i32, i32* @y.2, align 4
  %139 = add i32 %137, -1
  %140 = mul i32 %139, %137
  %141 = and i32 %140, 1
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %143, %142
  %145 = select i1 %144, i32 -1728916312, i32 53649948
  br label %.backedge

146:                                              ; preds = %8
  %147 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.087
  %148 = load i64, i64* %147, align 8
  %149 = icmp ne i64 %148, -1
  store i1 %149, i1* %5, align 1
  %150 = load i32, i32* @x.1, align 4
  %151 = load i32, i32* @y.2, align 4
  %152 = add i32 %150, -1
  %153 = mul i32 %152, %150
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %156, %155
  %158 = select i1 %157, i32 -901267954, i32 53649948
  br label %.backedge

159:                                              ; preds = %8
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %160 = select i1 %.0..0..0., i32 1831139158, i32 -240562348
  br label %.backedge

161:                                              ; preds = %8
  %162 = load i32, i32* @x.1, align 4
  %163 = load i32, i32* @y.2, align 4
  %164 = add i32 %162, -1
  %165 = mul i32 %164, %162
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %168, %167
  %170 = select i1 %169, i32 1856432578, i32 -1316557542
  br label %.backedge

171:                                              ; preds = %8
  %172 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.085
  %173 = load i64, i64* %172, align 8
  %174 = icmp eq i64 %173, -1
  store i1 %174, i1* %4, align 1
  %175 = load i32, i32* @x.1, align 4
  %176 = load i32, i32* @y.2, align 4
  %177 = add i32 %175, -1
  %178 = mul i32 %177, %175
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %181, %180
  %183 = select i1 %182, i32 31130443, i32 -1316557542
  br label %.backedge

184:                                              ; preds = %8
  %.0..0..0.73 = load volatile i1, i1* %4, align 1
  %185 = select i1 %.0..0..0.73, i32 1513526829, i32 -240562348
  br label %.backedge

186:                                              ; preds = %8
  %187 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.087
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.085
  store i64 %188, i64* %189, align 8
  br label %.backedge

190:                                              ; preds = %8
  %191 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.087
  %192 = load i64, i64* %191, align 8
  %193 = icmp eq i64 %192, -1
  %194 = select i1 %193, i32 1796110481, i32 855835384
  br label %.backedge

195:                                              ; preds = %8
  %196 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.085
  %197 = load i64, i64* %196, align 8
  %.not97 = icmp eq i64 %197, -1
  %198 = select i1 %.not97, i32 855835384, i32 -1901599332
  br label %.backedge

199:                                              ; preds = %8
  %200 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.085
  %201 = load i64, i64* %200, align 8
  %202 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.087
  store i64 %201, i64* %202, align 8
  br label %.backedge

203:                                              ; preds = %8
  %204 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.085
  %205 = load i64, i64* %204, align 8
  br label %.backedge

206:                                              ; preds = %8
  %207 = load i32, i32* @x.1, align 4
  %208 = load i32, i32* @y.2, align 4
  %209 = add i32 %207, -1
  %210 = mul i32 %209, %207
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %213, %212
  %215 = select i1 %214, i32 1455974061, i32 783856146
  br label %.backedge

216:                                              ; preds = %8
  %217 = load i64, i64* @n, align 8
  %218 = icmp slt i64 %.081, %217
  store i1 %218, i1* %3, align 1
  %219 = load i32, i32* @x.1, align 4
  %220 = load i32, i32* @y.2, align 4
  %221 = add i32 %219, -1
  %222 = mul i32 %221, %219
  %223 = and i32 %222, 1
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %225, %224
  %227 = select i1 %226, i32 -1122322397, i32 783856146
  br label %.backedge

228:                                              ; preds = %8
  %.0..0..0.74 = load volatile i1, i1* %3, align 1
  %229 = select i1 %.0..0..0.74, i32 -381695058, i32 1476317810
  br label %.backedge

230:                                              ; preds = %8
  %231 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.081
  %232 = load i64, i64* %231, align 8
  %233 = icmp eq i64 %232, %.083
  %234 = select i1 %233, i32 1111690603, i32 -237445719
  br label %.backedge

235:                                              ; preds = %8
  %236 = load i32, i32* @x.1, align 4
  %237 = load i32, i32* @y.2, align 4
  %238 = add i32 %236, -1
  %239 = mul i32 %238, %236
  %240 = and i32 %239, 1
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %242, %241
  %244 = select i1 %243, i32 1469548712, i32 -1347453148
  br label %.backedge

245:                                              ; preds = %8
  %246 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.087
  %247 = load i64, i64* %246, align 8
  %248 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.081
  store i64 %247, i64* %248, align 8
  %249 = load i32, i32* @x.1, align 4
  %250 = load i32, i32* @y.2, align 4
  %251 = add i32 %249, -1
  %252 = mul i32 %251, %249
  %253 = and i32 %252, 1
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %255, %254
  %257 = select i1 %256, i32 298926638, i32 -1347453148
  br label %.backedge

258:                                              ; preds = %8
  br label %.backedge

259:                                              ; preds = %8
  %260 = load i32, i32* @x.1, align 4
  %261 = load i32, i32* @y.2, align 4
  %262 = add i32 %260, -1
  %263 = mul i32 %262, %260
  %264 = and i32 %263, 1
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %266, %265
  %268 = select i1 %267, i32 -1623231660, i32 828464842
  br label %.backedge

269:                                              ; preds = %8
  %270 = load i32, i32* @x.1, align 4
  %271 = load i32, i32* @y.2, align 4
  %272 = add i32 %270, -1
  %273 = mul i32 %272, %270
  %274 = and i32 %273, 1
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %276, %275
  %278 = select i1 %277, i32 -950168448, i32 828464842
  br label %.backedge

279:                                              ; preds = %8
  br label %.backedge

280:                                              ; preds = %8
  %281 = load i32, i32* @x.1, align 4
  %282 = load i32, i32* @y.2, align 4
  %283 = add i32 %281, -1
  %284 = mul i32 %283, %281
  %285 = and i32 %284, 1
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %287, %286
  %289 = select i1 %288, i32 1050602975, i32 2097154385
  br label %.backedge

290:                                              ; preds = %8
  %291 = add i64 %.081, 1
  %292 = load i32, i32* @x.1, align 4
  %293 = load i32, i32* @y.2, align 4
  %294 = add i32 %292, -1
  %295 = mul i32 %294, %292
  %296 = and i32 %295, 1
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %298, %297
  %300 = select i1 %299, i32 -408077370, i32 2097154385
  br label %.backedge

301:                                              ; preds = %8
  br label %.backedge

302:                                              ; preds = %8
  br label %.backedge

303:                                              ; preds = %8
  br label %.backedge

304:                                              ; preds = %8
  br label %.backedge

305:                                              ; preds = %8
  br label %.backedge

306:                                              ; preds = %8
  br label %.backedge

307:                                              ; preds = %8
  %308 = load i32, i32* @x.1, align 4
  %309 = load i32, i32* @y.2, align 4
  %310 = add i32 %308, -1
  %311 = mul i32 %310, %308
  %312 = and i32 %311, 1
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %314, %313
  %316 = select i1 %315, i32 2053086543, i32 -1724443029
  br label %.backedge

317:                                              ; preds = %8
  %318 = add i64 %.085, 1
  %319 = load i32, i32* @x.1, align 4
  %320 = load i32, i32* @y.2, align 4
  %321 = add i32 %319, -1
  %322 = mul i32 %321, %319
  %323 = and i32 %322, 1
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %325, %324
  %327 = select i1 %326, i32 1703734759, i32 -1724443029
  br label %.backedge

328:                                              ; preds = %8
  br label %.backedge

329:                                              ; preds = %8
  br label %.backedge

330:                                              ; preds = %8
  %331 = add i64 %.087, 1
  br label %.backedge

332:                                              ; preds = %8
  br label %.backedge

333:                                              ; preds = %8
  %334 = load i32, i32* @x.1, align 4
  %335 = load i32, i32* @y.2, align 4
  %336 = add i32 %334, -1
  %337 = mul i32 %336, %334
  %338 = and i32 %337, 1
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %340, %339
  %342 = select i1 %341, i32 -893373576, i32 -1530747975
  br label %.backedge

343:                                              ; preds = %8
  %344 = load i64, i64* @n, align 8
  %345 = icmp slt i64 %.077, %344
  store i1 %345, i1* %2, align 1
  %346 = load i32, i32* @x.1, align 4
  %347 = load i32, i32* @y.2, align 4
  %348 = add i32 %346, -1
  %349 = mul i32 %348, %346
  %350 = and i32 %349, 1
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %352, %351
  %354 = select i1 %353, i32 893503836, i32 -1530747975
  br label %.backedge

355:                                              ; preds = %8
  %.0..0..0.75 = load volatile i1, i1* %2, align 1
  %356 = select i1 %.0..0..0.75, i32 1133751878, i32 -69836053
  br label %.backedge

357:                                              ; preds = %8
  %358 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.077
  %359 = load i64, i64* %358, align 8
  %360 = load i64, i64* getelementptr inbounds ([50 x i64], [50 x i64]* @u, i64 0, i64 0), align 16
  %.not96 = icmp eq i64 %359, %360
  %361 = select i1 %.not96, i32 -790577592, i32 -5612694
  br label %.backedge

362:                                              ; preds = %8
  %363 = load i32, i32* @x.1, align 4
  %364 = load i32, i32* @y.2, align 4
  %365 = add i32 %363, -1
  %366 = mul i32 %365, %363
  %367 = and i32 %366, 1
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %369, %368
  %371 = select i1 %370, i32 1435809052, i32 -628168785
  br label %.backedge

372:                                              ; preds = %8
  %373 = load i32, i32* @x.1, align 4
  %374 = load i32, i32* @y.2, align 4
  %375 = add i32 %373, -1
  %376 = mul i32 %375, %373
  %377 = and i32 %376, 1
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %379, %378
  %381 = select i1 %380, i32 1086119102, i32 -628168785
  br label %.backedge

382:                                              ; preds = %8
  br label %.backedge

383:                                              ; preds = %8
  %384 = load i32, i32* @x.1, align 4
  %385 = load i32, i32* @y.2, align 4
  %386 = add i32 %384, -1
  %387 = mul i32 %386, %384
  %388 = and i32 %387, 1
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %390, %389
  %392 = select i1 %391, i32 26949073, i32 -700772224
  br label %.backedge

393:                                              ; preds = %8
  %394 = load i32, i32* @x.1, align 4
  %395 = load i32, i32* @y.2, align 4
  %396 = add i32 %394, -1
  %397 = mul i32 %396, %394
  %398 = and i32 %397, 1
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %400, %399
  %402 = select i1 %401, i32 1283142438, i32 -700772224
  br label %.backedge

403:                                              ; preds = %8
  br label %.backedge

404:                                              ; preds = %8
  %.neg95 = add i64 %.077, 1
  br label %.backedge

405:                                              ; preds = %8
  %.not = icmp eq i64 %.079, 0
  %406 = select i1 %.not, i32 230705159, i32 838447210
  br label %.backedge

407:                                              ; preds = %8
  %408 = load i64, i64* @ans, align 8
  %409 = add i64 %408, 1
  store i64 %409, i64* @ans, align 8
  br label %.backedge

410:                                              ; preds = %8
  %411 = load i32, i32* @x.1, align 4
  %412 = load i32, i32* @y.2, align 4
  %413 = add i32 %411, -1
  %414 = mul i32 %413, %411
  %415 = and i32 %414, 1
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %417, %416
  %419 = select i1 %418, i32 -1323399219, i32 2015522843
  br label %.backedge

420:                                              ; preds = %8
  %421 = getelementptr inbounds [50 x %"struct.std::pair"], [50 x %"struct.std::pair"]* @e, i64 0, i64 %.091, i32 0
  %422 = load i64, i64* %421, align 16
  %423 = getelementptr inbounds [50 x %"struct.std::pair"], [50 x %"struct.std::pair"]* @e, i64 0, i64 %.091, i32 1
  %424 = load i64, i64* %423, align 8
  %425 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %422, i64 %424
  store i64 1, i64* %425, align 8
  %426 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %424, i64 %422
  store i64 1, i64* %426, align 8
  %427 = load i32, i32* @x.1, align 4
  %428 = load i32, i32* @y.2, align 4
  %429 = add i32 %427, -1
  %430 = mul i32 %429, %427
  %431 = and i32 %430, 1
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %433, %432
  %435 = select i1 %434, i32 -376622667, i32 2015522843
  br label %.backedge

436:                                              ; preds = %8
  br label %.backedge

437:                                              ; preds = %8
  %438 = load i32, i32* @x.1, align 4
  %439 = load i32, i32* @y.2, align 4
  %440 = add i32 %438, -1
  %441 = mul i32 %440, %438
  %442 = and i32 %441, 1
  %443 = icmp eq i32 %442, 0
  %444 = icmp slt i32 %439, 10
  %445 = or i1 %444, %443
  %446 = select i1 %445, i32 199658326, i32 -1593271100
  br label %.backedge

447:                                              ; preds = %8
  %448 = add i64 %.091, 1
  %449 = load i32, i32* @x.1, align 4
  %450 = load i32, i32* @y.2, align 4
  %451 = add i32 %449, -1
  %452 = mul i32 %451, %449
  %453 = and i32 %452, 1
  %454 = icmp eq i32 %453, 0
  %455 = icmp slt i32 %450, 10
  %456 = or i1 %455, %454
  %457 = select i1 %456, i32 540505585, i32 -1593271100
  br label %.backedge

458:                                              ; preds = %8
  br label %.backedge

459:                                              ; preds = %8
  %460 = load i32, i32* @x.1, align 4
  %461 = load i32, i32* @y.2, align 4
  %462 = add i32 %460, -1
  %463 = mul i32 %462, %460
  %464 = and i32 %463, 1
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %466, %465
  %468 = select i1 %467, i32 157260214, i32 95008710
  br label %.backedge

469:                                              ; preds = %8
  %470 = load i64, i64* @ans, align 8
  %471 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %470)
  %472 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %471, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %473 = load i32, i32* @x.1, align 4
  %474 = load i32, i32* @y.2, align 4
  %475 = add i32 %473, -1
  %476 = mul i32 %475, %473
  %477 = and i32 %476, 1
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %479, %478
  %481 = select i1 %480, i32 1494211517, i32 95008710
  br label %.backedge

482:                                              ; preds = %8
  store i32 0, i32* %1, align 4
  %.0..0..0.76 = load volatile i32, i32* %1, align 4
  ret i32 %.0..0..0.76

483:                                              ; preds = %8
  %484 = add i64 %.093, 1
  br label %.backedge

485:                                              ; preds = %8
  store i64 0, i64* @ans, align 8
  br label %.backedge

486:                                              ; preds = %8
  %487 = add i64 %.087, 1
  br label %.backedge

488:                                              ; preds = %8
  br label %.backedge

489:                                              ; preds = %8
  br label %.backedge

490:                                              ; preds = %8
  br label %.backedge

491:                                              ; preds = %8
  %492 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.087
  %493 = load i64, i64* %492, align 8
  %494 = getelementptr inbounds [50 x i64], [50 x i64]* @u, i64 0, i64 %.081
  store i64 %493, i64* %494, align 8
  br label %.backedge

495:                                              ; preds = %8
  br label %.backedge

496:                                              ; preds = %8
  %497 = add i64 %.081, 1
  br label %.backedge

498:                                              ; preds = %8
  %499 = add i64 %.085, 1
  br label %.backedge

500:                                              ; preds = %8
  br label %.backedge

501:                                              ; preds = %8
  br label %.backedge

502:                                              ; preds = %8
  br label %.backedge

503:                                              ; preds = %8
  %504 = getelementptr inbounds [50 x %"struct.std::pair"], [50 x %"struct.std::pair"]* @e, i64 0, i64 %.091, i32 0
  %505 = load i64, i64* %504, align 16
  %506 = getelementptr inbounds [50 x %"struct.std::pair"], [50 x %"struct.std::pair"]* @e, i64 0, i64 %.091, i32 1
  %507 = load i64, i64* %506, align 8
  %508 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %505, i64 %507
  store i64 1, i64* %508, align 8
  %509 = getelementptr inbounds [50 x [50 x i64]], [50 x [50 x i64]]* @map, i64 0, i64 %507, i64 %505
  store i64 1, i64* %509, align 8
  br label %.backedge

510:                                              ; preds = %8
  %.neg = add i64 %.091, 1
  br label %.backedge

511:                                              ; preds = %8
  %512 = load i64, i64* @ans, align 8
  %513 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %512)
  %514 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"* nonnull %513, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)* nonnull @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  br label %.backedge
}

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERx(%"class.std::basic_istream"*, i64* dereferenceable(8)) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEPFRSoS_E(%"class.std::basic_ostream"*, %"class.std::basic_ostream"* (%"class.std::basic_ostream"*)*) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%"class.std::basic_ostream"* dereferenceable(272)) #1

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s949034645.cpp() #0 section ".text.startup" {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = load i32, i32* @x.3, align 4
  %4 = load i32, i32* @y.4, align 4
  %5 = add i32 %3, -1
  %6 = mul i32 %5, %3
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  store i1 %8, i1* %2, align 1
  %9 = icmp slt i32 %4, 10
  store i1 %9, i1* %1, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %0
  %.0.ph = phi i32 [ -536481857, %0 ], [ %.0.ph.be, %.outer.backedge ]
  br label %10

10:                                               ; preds = %.outer, %10
  switch i32 %.0.ph, label %10 [
    i32 -536481857, label %11
    i32 1810050256, label %14
    i32 9922703, label %24
    i32 1036661859, label %25
  ]

11:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %2, align 1
  %.0..0..0.1 = load volatile i1, i1* %1, align 1
  %12 = or i1 %.0..0..0., %.0..0..0.1
  %13 = select i1 %12, i32 1810050256, i32 1036661859
  br label %.outer.backedge

14:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  %15 = load i32, i32* @x.3, align 4
  %16 = load i32, i32* @y.4, align 4
  %17 = add i32 %15, -1
  %18 = mul i32 %17, %15
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %21, %20
  %23 = select i1 %22, i32 9922703, i32 1036661859
  br label %.outer.backedge

24:                                               ; preds = %10
  ret void

25:                                               ; preds = %10
  tail call fastcc void @__cxx_global_var_init()
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %25, %14, %11
  %.0.ph.be = phi i32 [ %13, %11 ], [ %23, %14 ], [ 1810050256, %25 ]
  br label %.outer
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
