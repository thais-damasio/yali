; ModuleID = 'build_ollvm/programs/p03735/s073652634.ll'
source_filename = "Project_CodeNet_C++1400/p03735/s073652634.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%struct.node = type { i32, i32, i32, i32 }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }

$_ZN4nodeC2Ev = comdat any

$_ZN4node5resetEv = comdat any

$_ZN4node3addEii = comdat any

$_ZN4node3getEv = comdat any

$_ZSt3minIxERKT_S2_S2_ = comdat any

$_ZSt14random_shuffleIPiEvT_S1_ = comdat any

$_ZSt3maxIiERKT_S2_S2_ = comdat any

$_ZSt3minIiERKT_S2_S2_ = comdat any

$_ZSt9iter_swapIPiS0_EvT_T0_ = comdat any

$_ZSt4swapIiEvRT_S1_ = comdat any

$_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_ = comdat any

@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external global i8
@n = global i32 0, align 4
@a = global [200005 x i32] zeroinitializer, align 16
@b = global [200005 x i32] zeroinitializer, align 16
@nd = global [200005 x i32] zeroinitializer, align 16
@chance = global [200005 x [41 x %struct.node]] zeroinitializer, align 16
@_ZSt3cin = external global %"class.std::basic_istream", align 8
@_ZSt4cout = external global %"class.std::basic_ostream", align 8
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_s073652634.cpp, i8* null }]
@x = common local_unnamed_addr global i32 0
@y = common local_unnamed_addr global i32 0
@x.2 = common local_unnamed_addr global i32 0
@y.3 = common local_unnamed_addr global i32 0
@x.4 = common local_unnamed_addr global i32 0
@y.5 = common local_unnamed_addr global i32 0
@x.6 = common local_unnamed_addr global i32 0
@y.7 = common local_unnamed_addr global i32 0
@x.8 = common local_unnamed_addr global i32 0
@y.9 = common local_unnamed_addr global i32 0
@x.10 = common local_unnamed_addr global i32 0
@y.11 = common local_unnamed_addr global i32 0
@x.12 = common local_unnamed_addr global i32 0
@y.13 = common local_unnamed_addr global i32 0
@x.14 = common local_unnamed_addr global i32 0
@y.15 = common local_unnamed_addr global i32 0
@x.16 = common local_unnamed_addr global i32 0
@y.17 = common local_unnamed_addr global i32 0
@x.18 = common local_unnamed_addr global i32 0
@y.19 = common local_unnamed_addr global i32 0
@x.20 = common local_unnamed_addr global i32 0
@y.21 = common local_unnamed_addr global i32 0
@x.22 = common local_unnamed_addr global i32 0
@y.23 = common local_unnamed_addr global i32 0
@x.24 = common local_unnamed_addr global i32 0
@y.25 = common local_unnamed_addr global i32 0
@x.26 = common local_unnamed_addr global i32 0
@y.27 = common local_unnamed_addr global i32 0
@x.28 = common local_unnamed_addr global i32 0
@y.29 = common local_unnamed_addr global i32 0
@x.30 = common local_unnamed_addr global i32 0
@y.31 = common local_unnamed_addr global i32 0

; Function Attrs: noinline uwtable
define internal fastcc void @__cxx_global_var_init() unnamed_addr #0 section ".text.startup" {
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit)
  %1 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7
  ret void
}

declare void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"*) unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: noinline nounwind uwtable
define internal fastcc void @__cxx_global_var_init.1() unnamed_addr #4 section ".text.startup" {
  br label %.outer

.outer:                                           ; preds = %2, %0
  %.01.ph = phi i32 [ %5, %2 ], [ -483912373, %0 ]
  %.0.ph = phi %struct.node* [ %3, %2 ], [ getelementptr inbounds ([200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 0, i64 0), %0 ]
  br label %1

1:                                                ; preds = %.outer, %1
  switch i32 %.01.ph, label %1 [
    i32 -483912373, label %2
    i32 -828236183, label %6
  ]

2:                                                ; preds = %1
  tail call void @_ZN4nodeC2Ev(%struct.node* %.0.ph)
  %3 = getelementptr inbounds %struct.node, %struct.node* %.0.ph, i64 1
  %4 = icmp eq %struct.node* %3, getelementptr inbounds ([200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 1, i64 0, i64 0)
  %5 = select i1 %4, i32 -828236183, i32 -483912373
  br label %.outer

6:                                                ; preds = %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN4nodeC2Ev(%struct.node* %0) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %struct.node* %0 to <4 x i32>*
  store <4 x i32> <i32 -808464433, i32 1061109567, i32 -808464433, i32 1061109567>, <4 x i32>* %2, align 4
  ret void
}

; Function Attrs: noinline uwtable
define i64 @_Z5solvev() local_unnamed_addr #0 {
  %1 = alloca i1, align 1
  %2 = alloca i1, align 1
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = alloca %struct.node, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = bitcast %struct.node* %6 to i8*
  br label %10

10:                                               ; preds = %.backedge, %0
  %.085 = phi i32 [ 1, %0 ], [ %.085.be, %.backedge ]
  %.083 = phi i32 [ undef, %0 ], [ %.083.be, %.backedge ]
  %.081 = phi i32 [ undef, %0 ], [ %.081.be, %.backedge ]
  %.079 = phi i32 [ undef, %0 ], [ %.079.be, %.backedge ]
  %.077 = phi i32 [ undef, %0 ], [ %.077.be, %.backedge ]
  %.075 = phi i32 [ undef, %0 ], [ %.075.be, %.backedge ]
  %.073 = phi i32 [ undef, %0 ], [ %.073.be, %.backedge ]
  %.071 = phi i32 [ undef, %0 ], [ %.071.be, %.backedge ]
  %.069 = phi i32 [ undef, %0 ], [ %.069.be, %.backedge ]
  %.0 = phi i32 [ -1183102818, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -1183102818, label %11
    i32 -1598040402, label %21
    i32 -2008784159, label %33
    i32 1204723124, label %35
    i32 1978389515, label %45
    i32 -269130501, label %55
    i32 -1577908817, label %56
    i32 2130805465, label %66
    i32 -519586408, label %77
    i32 1554736827, label %79
    i32 281637460, label %89
    i32 -567212475, label %102
    i32 -1696947769, label %103
    i32 1600784669, label %113
    i32 1905848914, label %124
    i32 -801459614, label %125
    i32 654493366, label %135
    i32 -355521901, label %148
    i32 -86845564, label %149
    i32 -160346172, label %152
    i32 587986457, label %163
    i32 1772621809, label %173
    i32 -195626056, label %184
    i32 688215216, label %186
    i32 1483752893, label %194
    i32 -2035721819, label %195
    i32 -918500975, label %205
    i32 783246830, label %216
    i32 1433660583, label %218
    i32 -233515623, label %226
    i32 -1686262864, label %228
    i32 1085095759, label %233
    i32 -799328718, label %234
    i32 1617534400, label %244
    i32 335252603, label %255
    i32 1575603884, label %256
    i32 1595130106, label %267
    i32 -1991760079, label %270
    i32 -1316495121, label %280
    i32 1799340159, label %296
    i32 1590358468, label %298
    i32 1389303321, label %308
    i32 -392044201, label %318
    i32 387203865, label %319
    i32 -1864166310, label %322
    i32 1666095206, label %332
    i32 -1428422117, label %350
    i32 316856472, label %351
    i32 1414863122, label %353
    i32 -1629294643, label %358
    i32 -1677860943, label %368
    i32 822501476, label %378
    i32 745883088, label %379
    i32 -1771591532, label %389
    i32 1804095579, label %400
    i32 -1628453999, label %401
    i32 -1899829644, label %411
    i32 309931347, label %421
    i32 285521727, label %422
    i32 339907424, label %432
    i32 360783041, label %443
    i32 940800198, label %444
    i32 -1643487948, label %445
    i32 1046863217, label %447
    i32 -1899491227, label %457
    i32 1407026341, label %467
    i32 1087305073, label %468
    i32 -1108742168, label %471
    i32 -281706147, label %479
    i32 -701102385, label %481
    i32 1917408118, label %483
    i32 -1302473700, label %484
    i32 -1304932911, label %485
    i32 -556498957, label %486
    i32 1521047970, label %490
    i32 -180751715, label %492
    i32 1147920237, label %496
    i32 -11719503, label %497
    i32 1531921538, label %498
    i32 -1045162295, label %500
    i32 -195456314, label %506
    i32 -582117716, label %507
    i32 -1079851346, label %516
    i32 -1893353354, label %517
    i32 846741234, label %519
    i32 1025433063, label %520
    i32 1161403305, label %522
  ]

.backedge:                                        ; preds = %10, %522, %520, %519, %517, %516, %507, %506, %500, %498, %497, %496, %492, %490, %486, %485, %484, %483, %479, %471, %468, %467, %457, %447, %445, %444, %443, %432, %422, %421, %411, %401, %400, %389, %379, %378, %368, %358, %353, %351, %350, %332, %322, %319, %318, %308, %298, %296, %280, %270, %267, %256, %255, %244, %234, %233, %228, %226, %218, %216, %205, %195, %194, %186, %184, %173, %163, %152, %149, %148, %135, %125, %124, %113, %103, %102, %89, %79, %77, %66, %56, %55, %45, %35, %33, %21, %11
  %.085.be = phi i32 [ %.085, %10 ], [ %.085, %522 ], [ %.085, %520 ], [ %.085, %519 ], [ %.085, %517 ], [ %.085, %516 ], [ %.085, %507 ], [ %.085, %506 ], [ %.085, %500 ], [ %.085, %498 ], [ %.085, %497 ], [ %.085, %496 ], [ %.085, %492 ], [ %.085, %490 ], [ %.085, %486 ], [ %.085, %485 ], [ %.085, %484 ], [ %.085, %483 ], [ %.085, %479 ], [ %.085, %471 ], [ %.085, %468 ], [ %.085, %467 ], [ %.085, %457 ], [ %.085, %447 ], [ %446, %445 ], [ %.085, %444 ], [ %.085, %443 ], [ %.085, %432 ], [ %.085, %422 ], [ %.085, %421 ], [ %.085, %411 ], [ %.085, %401 ], [ %.085, %400 ], [ %.085, %389 ], [ %.085, %379 ], [ %.085, %378 ], [ %.085, %368 ], [ %.085, %358 ], [ %.085, %353 ], [ %.085, %351 ], [ %.085, %350 ], [ %.085, %332 ], [ %.085, %322 ], [ %.085, %319 ], [ %.085, %318 ], [ %.085, %308 ], [ %.085, %298 ], [ %.085, %296 ], [ %.085, %280 ], [ %.085, %270 ], [ %.085, %267 ], [ %.085, %256 ], [ %.085, %255 ], [ %.085, %244 ], [ %.085, %234 ], [ %.085, %233 ], [ %.085, %228 ], [ %.085, %226 ], [ %.085, %218 ], [ %.085, %216 ], [ %.085, %205 ], [ %.085, %195 ], [ %.085, %194 ], [ %.085, %186 ], [ %.085, %184 ], [ %.085, %173 ], [ %.085, %163 ], [ %.085, %152 ], [ %.085, %149 ], [ %.085, %148 ], [ %.085, %135 ], [ %.085, %125 ], [ %.085, %124 ], [ %.085, %113 ], [ %.085, %103 ], [ %.085, %102 ], [ %.085, %89 ], [ %.085, %79 ], [ %.085, %77 ], [ %.085, %66 ], [ %.085, %56 ], [ %.085, %55 ], [ %.085, %45 ], [ %.085, %35 ], [ %.085, %33 ], [ %.085, %21 ], [ %.085, %11 ]
  %.083.be = phi i32 [ %.083, %10 ], [ %.083, %522 ], [ %.083, %520 ], [ %.083, %519 ], [ %.083, %517 ], [ %.083, %516 ], [ %.083, %507 ], [ %.083, %506 ], [ %.083, %500 ], [ %.083, %498 ], [ %.083, %497 ], [ %.083, %496 ], [ %.083, %492 ], [ %491, %490 ], [ %.083, %486 ], [ %.083, %485 ], [ 1, %484 ], [ %.083, %483 ], [ %.083, %479 ], [ %.083, %471 ], [ %.083, %468 ], [ %.083, %467 ], [ %.083, %457 ], [ %.083, %447 ], [ %.083, %445 ], [ %.083, %444 ], [ %.083, %443 ], [ %.083, %432 ], [ %.083, %422 ], [ %.083, %421 ], [ %.083, %411 ], [ %.083, %401 ], [ %.083, %400 ], [ %.083, %389 ], [ %.083, %379 ], [ %.083, %378 ], [ %.083, %368 ], [ %.083, %358 ], [ %.083, %353 ], [ %.083, %351 ], [ %.083, %350 ], [ %.083, %332 ], [ %.083, %322 ], [ %.083, %319 ], [ %.083, %318 ], [ %.083, %308 ], [ %.083, %298 ], [ %.083, %296 ], [ %.083, %280 ], [ %.083, %270 ], [ %.083, %267 ], [ %.083, %256 ], [ %.083, %255 ], [ %.083, %244 ], [ %.083, %234 ], [ %.083, %233 ], [ %.083, %228 ], [ %.083, %226 ], [ %.083, %218 ], [ %.083, %216 ], [ %.083, %205 ], [ %.083, %195 ], [ %.083, %194 ], [ %.083, %186 ], [ %.083, %184 ], [ %.083, %173 ], [ %.083, %163 ], [ %.083, %152 ], [ %.083, %149 ], [ %.083, %148 ], [ %.083, %135 ], [ %.083, %125 ], [ %.083, %124 ], [ %114, %113 ], [ %.083, %103 ], [ %.083, %102 ], [ %.083, %89 ], [ %.083, %79 ], [ %.083, %77 ], [ %.083, %66 ], [ %.083, %56 ], [ %.083, %55 ], [ 1, %45 ], [ %.083, %35 ], [ %.083, %33 ], [ %.083, %21 ], [ %.083, %11 ]
  %.081.be = phi i32 [ %.081, %10 ], [ %.081, %522 ], [ %.081, %520 ], [ %.081, %519 ], [ %.081, %517 ], [ %.081, %516 ], [ %.081, %507 ], [ %.081, %506 ], [ %.081, %500 ], [ %.081, %498 ], [ %.081, %497 ], [ %.081, %496 ], [ %495, %492 ], [ %.081, %490 ], [ %.081, %486 ], [ %.081, %485 ], [ %.081, %484 ], [ %.081, %483 ], [ %.081, %479 ], [ %.081, %471 ], [ %.081, %468 ], [ %.081, %467 ], [ %.081, %457 ], [ %.081, %447 ], [ %.081, %445 ], [ %.081, %444 ], [ %.081, %443 ], [ %.081, %432 ], [ %.081, %422 ], [ %.081, %421 ], [ %.081, %411 ], [ %.081, %401 ], [ %.081, %400 ], [ %.081, %389 ], [ %.081, %379 ], [ %.081, %378 ], [ %.081, %368 ], [ %.081, %358 ], [ %.081, %353 ], [ %.081, %351 ], [ %.081, %350 ], [ %.081, %332 ], [ %.081, %322 ], [ %.081, %319 ], [ %.081, %318 ], [ %.081, %308 ], [ %.081, %298 ], [ %.081, %296 ], [ %.081, %280 ], [ %.081, %270 ], [ %.081, %267 ], [ %.081, %256 ], [ %.081, %255 ], [ %.081, %244 ], [ %.081, %234 ], [ %.081, %233 ], [ %.081, %228 ], [ %.081, %226 ], [ %.081, %218 ], [ %.081, %216 ], [ %.081, %205 ], [ %.081, %195 ], [ %.081, %194 ], [ %.081, %186 ], [ %.081, %184 ], [ %.081, %173 ], [ %.081, %163 ], [ %.081, %152 ], [ %.081, %149 ], [ %.081, %148 ], [ %138, %135 ], [ %.081, %125 ], [ %.081, %124 ], [ %.081, %113 ], [ %.081, %103 ], [ %.081, %102 ], [ %.081, %89 ], [ %.081, %79 ], [ %.081, %77 ], [ %.081, %66 ], [ %.081, %56 ], [ %.081, %55 ], [ %.081, %45 ], [ %.081, %35 ], [ %.081, %33 ], [ %.081, %21 ], [ %.081, %11 ]
  %.079.be = phi i32 [ %.079, %10 ], [ %.079, %522 ], [ %521, %520 ], [ %.079, %519 ], [ %.079, %517 ], [ %.079, %516 ], [ %.079, %507 ], [ %.079, %506 ], [ %.079, %500 ], [ %.079, %498 ], [ %.079, %497 ], [ %.079, %496 ], [ 1, %492 ], [ %.079, %490 ], [ %.079, %486 ], [ %.079, %485 ], [ %.079, %484 ], [ %.079, %483 ], [ %.079, %479 ], [ %.079, %471 ], [ %.079, %468 ], [ %.079, %467 ], [ %.079, %457 ], [ %.079, %447 ], [ %.079, %445 ], [ %.079, %444 ], [ %.079, %443 ], [ %433, %432 ], [ %.079, %422 ], [ %.079, %421 ], [ %.079, %411 ], [ %.079, %401 ], [ %.079, %400 ], [ %.079, %389 ], [ %.079, %379 ], [ %.079, %378 ], [ %.079, %368 ], [ %.079, %358 ], [ %.079, %353 ], [ %.079, %351 ], [ %.079, %350 ], [ %.079, %332 ], [ %.079, %322 ], [ %.079, %319 ], [ %.079, %318 ], [ %.079, %308 ], [ %.079, %298 ], [ %.079, %296 ], [ %.079, %280 ], [ %.079, %270 ], [ %.079, %267 ], [ %.079, %256 ], [ %.079, %255 ], [ %.079, %244 ], [ %.079, %234 ], [ %.079, %233 ], [ %.079, %228 ], [ %.079, %226 ], [ %.079, %218 ], [ %.079, %216 ], [ %.079, %205 ], [ %.079, %195 ], [ %.079, %194 ], [ %.079, %186 ], [ %.079, %184 ], [ %.079, %173 ], [ %.079, %163 ], [ %.079, %152 ], [ %.079, %149 ], [ %.079, %148 ], [ 1, %135 ], [ %.079, %125 ], [ %.079, %124 ], [ %.079, %113 ], [ %.079, %103 ], [ %.079, %102 ], [ %.079, %89 ], [ %.079, %79 ], [ %.079, %77 ], [ %.079, %66 ], [ %.079, %56 ], [ %.079, %55 ], [ %.079, %45 ], [ %.079, %35 ], [ %.079, %33 ], [ %.079, %21 ], [ %.079, %11 ]
  %.077.be = phi i32 [ %.077, %10 ], [ %.077, %522 ], [ %.077, %520 ], [ %.077, %519 ], [ %.077, %517 ], [ %.077, %516 ], [ %.077, %507 ], [ %.077, %506 ], [ %.077, %500 ], [ %499, %498 ], [ %.077, %497 ], [ %.077, %496 ], [ %.077, %492 ], [ %.077, %490 ], [ %.077, %486 ], [ %.077, %485 ], [ %.077, %484 ], [ %.077, %483 ], [ %.077, %479 ], [ %.077, %471 ], [ %.077, %468 ], [ %.077, %467 ], [ %.077, %457 ], [ %.077, %447 ], [ %.077, %445 ], [ %.077, %444 ], [ %.077, %443 ], [ %.077, %432 ], [ %.077, %422 ], [ %.077, %421 ], [ %.077, %411 ], [ %.077, %401 ], [ %.077, %400 ], [ %.077, %389 ], [ %.077, %379 ], [ %.077, %378 ], [ %.077, %368 ], [ %.077, %358 ], [ %.077, %353 ], [ %.077, %351 ], [ %.077, %350 ], [ %.077, %332 ], [ %.077, %322 ], [ %.077, %319 ], [ %.077, %318 ], [ %.077, %308 ], [ %.077, %298 ], [ %.077, %296 ], [ %.077, %280 ], [ %.077, %270 ], [ %.077, %267 ], [ %.077, %256 ], [ %.077, %255 ], [ %245, %244 ], [ %.077, %234 ], [ %.077, %233 ], [ %.077, %228 ], [ %.077, %226 ], [ %.077, %218 ], [ %.077, %216 ], [ %.077, %205 ], [ %.077, %195 ], [ %.077, %194 ], [ %.077, %186 ], [ %.077, %184 ], [ %.077, %173 ], [ %.077, %163 ], [ 5, %152 ], [ %.077, %149 ], [ %.077, %148 ], [ %.077, %135 ], [ %.077, %125 ], [ %.077, %124 ], [ %.077, %113 ], [ %.077, %103 ], [ %.077, %102 ], [ %.077, %89 ], [ %.077, %79 ], [ %.077, %77 ], [ %.077, %66 ], [ %.077, %56 ], [ %.077, %55 ], [ %.077, %45 ], [ %.077, %35 ], [ %.077, %33 ], [ %.077, %21 ], [ %.077, %11 ]
  %.075.be = phi i32 [ %.075, %10 ], [ %.075, %522 ], [ %.075, %520 ], [ %.075, %519 ], [ %.075, %517 ], [ %.075, %516 ], [ %.075, %507 ], [ %.075, %506 ], [ %.075, %500 ], [ %.075, %498 ], [ %.075, %497 ], [ %.075, %496 ], [ %.075, %492 ], [ %.075, %490 ], [ %.075, %486 ], [ %.075, %485 ], [ %.075, %484 ], [ %.075, %483 ], [ %.075, %479 ], [ %.075, %471 ], [ %.075, %468 ], [ %.075, %467 ], [ %.075, %457 ], [ %.075, %447 ], [ %.075, %445 ], [ %.075, %444 ], [ %.075, %443 ], [ %.075, %432 ], [ %.075, %422 ], [ %.075, %421 ], [ %.075, %411 ], [ %.075, %401 ], [ %.075, %400 ], [ %.075, %389 ], [ %.075, %379 ], [ %.075, %378 ], [ %.075, %368 ], [ %.075, %358 ], [ %.075, %353 ], [ %.075, %351 ], [ %.075, %350 ], [ %.075, %332 ], [ %.075, %322 ], [ %.075, %319 ], [ %.075, %318 ], [ %.075, %308 ], [ %.075, %298 ], [ %.075, %296 ], [ %.075, %280 ], [ %.075, %270 ], [ %.075, %267 ], [ %.075, %256 ], [ %.075, %255 ], [ %.075, %244 ], [ %.075, %234 ], [ %.075, %233 ], [ %.075, %228 ], [ %227, %226 ], [ %.075, %218 ], [ %.075, %216 ], [ %.075, %205 ], [ %.075, %195 ], [ 1, %194 ], [ %.075, %186 ], [ %.075, %184 ], [ %.075, %173 ], [ %.075, %163 ], [ %.075, %152 ], [ %.075, %149 ], [ %.075, %148 ], [ %.075, %135 ], [ %.075, %125 ], [ %.075, %124 ], [ %.075, %113 ], [ %.075, %103 ], [ %.075, %102 ], [ %.075, %89 ], [ %.075, %79 ], [ %.075, %77 ], [ %.075, %66 ], [ %.075, %56 ], [ %.075, %55 ], [ %.075, %45 ], [ %.075, %35 ], [ %.075, %33 ], [ %.075, %21 ], [ %.075, %11 ]
  %.073.be = phi i32 [ %.073, %10 ], [ %.073, %522 ], [ %.073, %520 ], [ %.073, %519 ], [ %518, %517 ], [ %.073, %516 ], [ %.073, %507 ], [ %.073, %506 ], [ %.073, %500 ], [ %.073, %498 ], [ %.073, %497 ], [ %.073, %496 ], [ %.073, %492 ], [ %.073, %490 ], [ %.073, %486 ], [ %.073, %485 ], [ %.073, %484 ], [ %.073, %483 ], [ %.073, %479 ], [ %.073, %471 ], [ %.073, %468 ], [ %.073, %467 ], [ %.073, %457 ], [ %.073, %447 ], [ %.073, %445 ], [ %.073, %444 ], [ %.073, %443 ], [ %.073, %432 ], [ %.073, %422 ], [ %.073, %421 ], [ %.073, %411 ], [ %.073, %401 ], [ %.073, %400 ], [ %390, %389 ], [ %.073, %379 ], [ %.073, %378 ], [ %.073, %368 ], [ %.073, %358 ], [ %.073, %353 ], [ %.073, %351 ], [ %.073, %350 ], [ %.073, %332 ], [ %.073, %322 ], [ %.073, %319 ], [ %.073, %318 ], [ %.073, %308 ], [ %.073, %298 ], [ %.073, %296 ], [ %.073, %280 ], [ %.073, %270 ], [ %.073, %267 ], [ 5, %256 ], [ %.073, %255 ], [ %.073, %244 ], [ %.073, %234 ], [ %.073, %233 ], [ %.073, %228 ], [ %.073, %226 ], [ %.073, %218 ], [ %.073, %216 ], [ %.073, %205 ], [ %.073, %195 ], [ %.073, %194 ], [ %.073, %186 ], [ %.073, %184 ], [ %.073, %173 ], [ %.073, %163 ], [ %.073, %152 ], [ %.073, %149 ], [ %.073, %148 ], [ %.073, %135 ], [ %.073, %125 ], [ %.073, %124 ], [ %.073, %113 ], [ %.073, %103 ], [ %.073, %102 ], [ %.073, %89 ], [ %.073, %79 ], [ %.073, %77 ], [ %.073, %66 ], [ %.073, %56 ], [ %.073, %55 ], [ %.073, %45 ], [ %.073, %35 ], [ %.073, %33 ], [ %.073, %21 ], [ %.073, %11 ]
  %.071.be = phi i32 [ %.071, %10 ], [ %.071, %522 ], [ %.071, %520 ], [ %.071, %519 ], [ %.071, %517 ], [ %.071, %516 ], [ %.071, %507 ], [ 1, %506 ], [ %.071, %500 ], [ %.071, %498 ], [ %.071, %497 ], [ %.071, %496 ], [ %.071, %492 ], [ %.071, %490 ], [ %.071, %486 ], [ %.071, %485 ], [ %.071, %484 ], [ %.071, %483 ], [ %.071, %479 ], [ %.071, %471 ], [ %.071, %468 ], [ %.071, %467 ], [ %.071, %457 ], [ %.071, %447 ], [ %.071, %445 ], [ %.071, %444 ], [ %.071, %443 ], [ %.071, %432 ], [ %.071, %422 ], [ %.071, %421 ], [ %.071, %411 ], [ %.071, %401 ], [ %.071, %400 ], [ %.071, %389 ], [ %.071, %379 ], [ %.071, %378 ], [ %.071, %368 ], [ %.071, %358 ], [ %.071, %353 ], [ %352, %351 ], [ %.071, %350 ], [ %.071, %332 ], [ %.071, %322 ], [ %.071, %319 ], [ %.071, %318 ], [ 1, %308 ], [ %.071, %298 ], [ %.071, %296 ], [ %.071, %280 ], [ %.071, %270 ], [ %.071, %267 ], [ %.071, %256 ], [ %.071, %255 ], [ %.071, %244 ], [ %.071, %234 ], [ %.071, %233 ], [ %.071, %228 ], [ %.071, %226 ], [ %.071, %218 ], [ %.071, %216 ], [ %.071, %205 ], [ %.071, %195 ], [ %.071, %194 ], [ %.071, %186 ], [ %.071, %184 ], [ %.071, %173 ], [ %.071, %163 ], [ %.071, %152 ], [ %.071, %149 ], [ %.071, %148 ], [ %.071, %135 ], [ %.071, %125 ], [ %.071, %124 ], [ %.071, %113 ], [ %.071, %103 ], [ %.071, %102 ], [ %.071, %89 ], [ %.071, %79 ], [ %.071, %77 ], [ %.071, %66 ], [ %.071, %56 ], [ %.071, %55 ], [ %.071, %45 ], [ %.071, %35 ], [ %.071, %33 ], [ %.071, %21 ], [ %.071, %11 ]
  %.069.be = phi i32 [ %.069, %10 ], [ 1, %522 ], [ %.069, %520 ], [ %.069, %519 ], [ %.069, %517 ], [ %.069, %516 ], [ %.069, %507 ], [ %.069, %506 ], [ %.069, %500 ], [ %.069, %498 ], [ %.069, %497 ], [ %.069, %496 ], [ %.069, %492 ], [ %.069, %490 ], [ %.069, %486 ], [ %.069, %485 ], [ %.069, %484 ], [ %.069, %483 ], [ %480, %479 ], [ %.069, %471 ], [ %.069, %468 ], [ %.069, %467 ], [ 1, %457 ], [ %.069, %447 ], [ %.069, %445 ], [ %.069, %444 ], [ %.069, %443 ], [ %.069, %432 ], [ %.069, %422 ], [ %.069, %421 ], [ %.069, %411 ], [ %.069, %401 ], [ %.069, %400 ], [ %.069, %389 ], [ %.069, %379 ], [ %.069, %378 ], [ %.069, %368 ], [ %.069, %358 ], [ %.069, %353 ], [ %.069, %351 ], [ %.069, %350 ], [ %.069, %332 ], [ %.069, %322 ], [ %.069, %319 ], [ %.069, %318 ], [ %.069, %308 ], [ %.069, %298 ], [ %.069, %296 ], [ %.069, %280 ], [ %.069, %270 ], [ %.069, %267 ], [ %.069, %256 ], [ %.069, %255 ], [ %.069, %244 ], [ %.069, %234 ], [ %.069, %233 ], [ %.069, %228 ], [ %.069, %226 ], [ %.069, %218 ], [ %.069, %216 ], [ %.069, %205 ], [ %.069, %195 ], [ %.069, %194 ], [ %.069, %186 ], [ %.069, %184 ], [ %.069, %173 ], [ %.069, %163 ], [ %.069, %152 ], [ %.069, %149 ], [ %.069, %148 ], [ %.069, %135 ], [ %.069, %125 ], [ %.069, %124 ], [ %.069, %113 ], [ %.069, %103 ], [ %.069, %102 ], [ %.069, %89 ], [ %.069, %79 ], [ %.069, %77 ], [ %.069, %66 ], [ %.069, %56 ], [ %.069, %55 ], [ %.069, %45 ], [ %.069, %35 ], [ %.069, %33 ], [ %.069, %21 ], [ %.069, %11 ]
  %.0.be = phi i32 [ %.0, %10 ], [ -1899491227, %522 ], [ 339907424, %520 ], [ -1899829644, %519 ], [ -1771591532, %517 ], [ -1677860943, %516 ], [ 1666095206, %507 ], [ 1389303321, %506 ], [ -1316495121, %500 ], [ 1617534400, %498 ], [ -918500975, %497 ], [ 1772621809, %496 ], [ 654493366, %492 ], [ 1600784669, %490 ], [ 281637460, %486 ], [ 2130805465, %485 ], [ 1978389515, %484 ], [ -1598040402, %483 ], [ 1087305073, %479 ], [ -281706147, %471 ], [ %470, %468 ], [ 1087305073, %467 ], [ %466, %457 ], [ %456, %447 ], [ -1183102818, %445 ], [ -1643487948, %444 ], [ -86845564, %443 ], [ %442, %432 ], [ %431, %422 ], [ 285521727, %421 ], [ %420, %411 ], [ %410, %401 ], [ 1595130106, %400 ], [ %399, %389 ], [ %388, %379 ], [ 745883088, %378 ], [ %377, %368 ], [ %367, %358 ], [ -1628453999, %353 ], [ 387203865, %351 ], [ 316856472, %350 ], [ %349, %332 ], [ %331, %322 ], [ %321, %319 ], [ 387203865, %318 ], [ %317, %308 ], [ %307, %298 ], [ %297, %296 ], [ %295, %280 ], [ %279, %270 ], [ %269, %267 ], [ 1595130106, %256 ], [ 587986457, %255 ], [ %254, %244 ], [ %243, %234 ], [ -799328718, %233 ], [ 1575603884, %228 ], [ -2035721819, %226 ], [ -233515623, %218 ], [ %217, %216 ], [ %215, %205 ], [ %204, %195 ], [ -2035721819, %194 ], [ %193, %186 ], [ %185, %184 ], [ %183, %173 ], [ %172, %163 ], [ 587986457, %152 ], [ %151, %149 ], [ -86845564, %148 ], [ %147, %135 ], [ %134, %125 ], [ -1577908817, %124 ], [ %123, %113 ], [ %112, %103 ], [ -1696947769, %102 ], [ %101, %89 ], [ %88, %79 ], [ %78, %77 ], [ %76, %66 ], [ %65, %56 ], [ -1577908817, %55 ], [ %54, %45 ], [ %44, %35 ], [ %34, %33 ], [ %32, %21 ], [ %20, %11 ]
  br label %10

11:                                               ; preds = %10
  %12 = load i32, i32* @x.6, align 4
  %13 = load i32, i32* @y.7, align 4
  %14 = add i32 %12, -1
  %15 = mul i32 %14, %12
  %16 = and i32 %15, 1
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %18, %17
  %20 = select i1 %19, i32 -1598040402, i32 1917408118
  br label %.backedge

21:                                               ; preds = %10
  %22 = load i32, i32* @n, align 4
  %23 = icmp sle i32 %.085, %22
  store i1 %23, i1* %5, align 1
  %24 = load i32, i32* @x.6, align 4
  %25 = load i32, i32* @y.7, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 -2008784159, i32 1917408118
  br label %.backedge

33:                                               ; preds = %10
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %34 = select i1 %.0..0..0., i32 1204723124, i32 1046863217
  br label %.backedge

35:                                               ; preds = %10
  %36 = load i32, i32* @x.6, align 4
  %37 = load i32, i32* @y.7, align 4
  %38 = add i32 %36, -1
  %39 = mul i32 %38, %36
  %40 = and i32 %39, 1
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %42, %41
  %44 = select i1 %43, i32 1978389515, i32 -1302473700
  br label %.backedge

45:                                               ; preds = %10
  %46 = load i32, i32* @x.6, align 4
  %47 = load i32, i32* @y.7, align 4
  %48 = add i32 %46, -1
  %49 = mul i32 %48, %46
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %52, %51
  %54 = select i1 %53, i32 -269130501, i32 -1302473700
  br label %.backedge

55:                                               ; preds = %10
  br label %.backedge

56:                                               ; preds = %10
  %57 = load i32, i32* @x.6, align 4
  %58 = load i32, i32* @y.7, align 4
  %59 = add i32 %57, -1
  %60 = mul i32 %59, %57
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %63, %62
  %65 = select i1 %64, i32 2130805465, i32 -1304932911
  br label %.backedge

66:                                               ; preds = %10
  %67 = icmp slt i32 %.083, 6
  store i1 %67, i1* %4, align 1
  %68 = load i32, i32* @x.6, align 4
  %69 = load i32, i32* @y.7, align 4
  %70 = add i32 %68, -1
  %71 = mul i32 %70, %68
  %72 = and i32 %71, 1
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %74, %73
  %76 = select i1 %75, i32 -519586408, i32 -1304932911
  br label %.backedge

77:                                               ; preds = %10
  %.0..0..0.65 = load volatile i1, i1* %4, align 1
  %78 = select i1 %.0..0..0.65, i32 1554736827, i32 -801459614
  br label %.backedge

79:                                               ; preds = %10
  %80 = load i32, i32* @x.6, align 4
  %81 = load i32, i32* @y.7, align 4
  %82 = add i32 %80, -1
  %83 = mul i32 %82, %80
  %84 = and i32 %83, 1
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %86, %85
  %88 = select i1 %87, i32 281637460, i32 -556498957
  br label %.backedge

89:                                               ; preds = %10
  %90 = sext i32 %.085 to i64
  %91 = sext i32 %.083 to i64
  %92 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %90, i64 %91
  call void @_ZN4node5resetEv(%struct.node* nonnull %92)
  %93 = load i32, i32* @x.6, align 4
  %94 = load i32, i32* @y.7, align 4
  %95 = add i32 %93, -1
  %96 = mul i32 %95, %93
  %97 = and i32 %96, 1
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %99, %98
  %101 = select i1 %100, i32 -567212475, i32 -556498957
  br label %.backedge

102:                                              ; preds = %10
  br label %.backedge

103:                                              ; preds = %10
  %104 = load i32, i32* @x.6, align 4
  %105 = load i32, i32* @y.7, align 4
  %106 = add i32 %104, -1
  %107 = mul i32 %106, %104
  %108 = and i32 %107, 1
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %110, %109
  %112 = select i1 %111, i32 1600784669, i32 1521047970
  br label %.backedge

113:                                              ; preds = %10
  %114 = add i32 %.083, 1
  %115 = load i32, i32* @x.6, align 4
  %116 = load i32, i32* @y.7, align 4
  %117 = add i32 %115, -1
  %118 = mul i32 %117, %115
  %119 = and i32 %118, 1
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %121, %120
  %123 = select i1 %122, i32 1905848914, i32 1521047970
  br label %.backedge

124:                                              ; preds = %10
  br label %.backedge

125:                                              ; preds = %10
  %126 = load i32, i32* @x.6, align 4
  %127 = load i32, i32* @y.7, align 4
  %128 = add i32 %126, -1
  %129 = mul i32 %128, %126
  %130 = and i32 %129, 1
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %132, %131
  %134 = select i1 %133, i32 654493366, i32 -180751715
  br label %.backedge

135:                                              ; preds = %10
  %136 = sext i32 %.085 to i64
  %137 = getelementptr inbounds [200005 x i32], [200005 x i32]* @nd, i64 0, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = load i32, i32* @x.6, align 4
  %140 = load i32, i32* @y.7, align 4
  %141 = add i32 %139, -1
  %142 = mul i32 %141, %139
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %145, %144
  %147 = select i1 %146, i32 -355521901, i32 -180751715
  br label %.backedge

148:                                              ; preds = %10
  br label %.backedge

149:                                              ; preds = %10
  %150 = icmp slt i32 %.079, 6
  %151 = select i1 %150, i32 -160346172, i32 940800198
  br label %.backedge

152:                                              ; preds = %10
  %153 = add i32 %.085, -1
  %154 = sext i32 %153 to i64
  %155 = sext i32 %.079 to i64
  %156 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %154, i64 %155
  %157 = bitcast %struct.node* %156 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %9, i8* noundef nonnull align 16 dereferenceable(16) %157, i64 16, i1 false)
  %158 = sext i32 %.081 to i64
  %159 = getelementptr inbounds [200005 x i32], [200005 x i32]* @a, i64 0, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds [200005 x i32], [200005 x i32]* @b, i64 0, i64 %158
  %162 = load i32, i32* %161, align 4
  call void @_ZN4node3addEii(%struct.node* nonnull %6, i32 %160, i32 %162)
  br label %.backedge

163:                                              ; preds = %10
  %164 = load i32, i32* @x.6, align 4
  %165 = load i32, i32* @y.7, align 4
  %166 = add i32 %164, -1
  %167 = mul i32 %166, %164
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %170, %169
  %172 = select i1 %171, i32 1772621809, i32 1147920237
  br label %.backedge

173:                                              ; preds = %10
  %174 = icmp sgt i32 %.077, 0
  store i1 %174, i1* %3, align 1
  %175 = load i32, i32* @x.6, align 4
  %176 = load i32, i32* @y.7, align 4
  %177 = add i32 %175, -1
  %178 = mul i32 %177, %175
  %179 = and i32 %178, 1
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %181, %180
  %183 = select i1 %182, i32 -195626056, i32 1147920237
  br label %.backedge

184:                                              ; preds = %10
  %.0..0..0.66 = load volatile i1, i1* %3, align 1
  %185 = select i1 %.0..0..0.66, i32 688215216, i32 1575603884
  br label %.backedge

186:                                              ; preds = %10
  %187 = sext i32 %.085 to i64
  %188 = sext i32 %.077 to i64
  %189 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %187, i64 %188
  %190 = call i64 @_ZN4node3getEv(%struct.node* nonnull %189)
  %191 = call i64 @_ZN4node3getEv(%struct.node* nonnull %6)
  %192 = icmp sgt i64 %190, %191
  %193 = select i1 %192, i32 1483752893, i32 1085095759
  br label %.backedge

194:                                              ; preds = %10
  br label %.backedge

195:                                              ; preds = %10
  %196 = load i32, i32* @x.6, align 4
  %197 = load i32, i32* @y.7, align 4
  %198 = add i32 %196, -1
  %199 = mul i32 %198, %196
  %200 = and i32 %199, 1
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %202, %201
  %204 = select i1 %203, i32 -918500975, i32 -11719503
  br label %.backedge

205:                                              ; preds = %10
  %206 = icmp slt i32 %.075, %.077
  store i1 %206, i1* %2, align 1
  %207 = load i32, i32* @x.6, align 4
  %208 = load i32, i32* @y.7, align 4
  %209 = add i32 %207, -1
  %210 = mul i32 %209, %207
  %211 = and i32 %210, 1
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %213, %212
  %215 = select i1 %214, i32 783246830, i32 -11719503
  br label %.backedge

216:                                              ; preds = %10
  %.0..0..0.67 = load volatile i1, i1* %2, align 1
  %217 = select i1 %.0..0..0.67, i32 1433660583, i32 -1686262864
  br label %.backedge

218:                                              ; preds = %10
  %219 = sext i32 %.085 to i64
  %.neg = add i32 %.075, 1
  %220 = sext i32 %.neg to i64
  %221 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %219, i64 %220
  %222 = sext i32 %.075 to i64
  %223 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %219, i64 %222
  %224 = bitcast %struct.node* %223 to i8*
  %225 = bitcast %struct.node* %221 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(16) %224, i8* noundef nonnull align 16 dereferenceable(16) %225, i64 16, i1 false)
  br label %.backedge

226:                                              ; preds = %10
  %227 = add i32 %.075, 1
  br label %.backedge

228:                                              ; preds = %10
  %229 = sext i32 %.085 to i64
  %230 = sext i32 %.077 to i64
  %231 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %229, i64 %230
  %232 = bitcast %struct.node* %231 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(16) %232, i8* noundef nonnull align 4 dereferenceable(16) %9, i64 16, i1 false)
  br label %.backedge

233:                                              ; preds = %10
  br label %.backedge

234:                                              ; preds = %10
  %235 = load i32, i32* @x.6, align 4
  %236 = load i32, i32* @y.7, align 4
  %237 = add i32 %235, -1
  %238 = mul i32 %237, %235
  %239 = and i32 %238, 1
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %241, %240
  %243 = select i1 %242, i32 1617534400, i32 1531921538
  br label %.backedge

244:                                              ; preds = %10
  %245 = add i32 %.077, -1
  %246 = load i32, i32* @x.6, align 4
  %247 = load i32, i32* @y.7, align 4
  %248 = add i32 %246, -1
  %249 = mul i32 %248, %246
  %250 = and i32 %249, 1
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %252, %251
  %254 = select i1 %253, i32 335252603, i32 1531921538
  br label %.backedge

255:                                              ; preds = %10
  br label %.backedge

256:                                              ; preds = %10
  %257 = add i32 %.085, -1
  %258 = sext i32 %257 to i64
  %259 = sext i32 %.079 to i64
  %260 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %258, i64 %259
  %261 = bitcast %struct.node* %260 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %9, i8* noundef nonnull align 16 dereferenceable(16) %261, i64 16, i1 false)
  %262 = sext i32 %.081 to i64
  %263 = getelementptr inbounds [200005 x i32], [200005 x i32]* @b, i64 0, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = getelementptr inbounds [200005 x i32], [200005 x i32]* @a, i64 0, i64 %262
  %266 = load i32, i32* %265, align 4
  call void @_ZN4node3addEii(%struct.node* nonnull %6, i32 %264, i32 %266)
  br label %.backedge

267:                                              ; preds = %10
  %268 = icmp sgt i32 %.073, 0
  %269 = select i1 %268, i32 -1991760079, i32 -1628453999
  br label %.backedge

270:                                              ; preds = %10
  %271 = load i32, i32* @x.6, align 4
  %272 = load i32, i32* @y.7, align 4
  %273 = add i32 %271, -1
  %274 = mul i32 %273, %271
  %275 = and i32 %274, 1
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %277, %276
  %279 = select i1 %278, i32 -1316495121, i32 -1045162295
  br label %.backedge

280:                                              ; preds = %10
  %281 = sext i32 %.085 to i64
  %282 = sext i32 %.073 to i64
  %283 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %281, i64 %282
  %284 = call i64 @_ZN4node3getEv(%struct.node* nonnull %283)
  %285 = call i64 @_ZN4node3getEv(%struct.node* nonnull %6)
  %286 = icmp sgt i64 %284, %285
  store i1 %286, i1* %1, align 1
  %287 = load i32, i32* @x.6, align 4
  %288 = load i32, i32* @y.7, align 4
  %289 = add i32 %287, -1
  %290 = mul i32 %289, %287
  %291 = and i32 %290, 1
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %293, %292
  %295 = select i1 %294, i32 1799340159, i32 -1045162295
  br label %.backedge

296:                                              ; preds = %10
  %.0..0..0.68 = load volatile i1, i1* %1, align 1
  %297 = select i1 %.0..0..0.68, i32 1590358468, i32 -1629294643
  br label %.backedge

298:                                              ; preds = %10
  %299 = load i32, i32* @x.6, align 4
  %300 = load i32, i32* @y.7, align 4
  %301 = add i32 %299, -1
  %302 = mul i32 %301, %299
  %303 = and i32 %302, 1
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %305, %304
  %307 = select i1 %306, i32 1389303321, i32 -195456314
  br label %.backedge

308:                                              ; preds = %10
  %309 = load i32, i32* @x.6, align 4
  %310 = load i32, i32* @y.7, align 4
  %311 = add i32 %309, -1
  %312 = mul i32 %311, %309
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %315, %314
  %317 = select i1 %316, i32 -392044201, i32 -195456314
  br label %.backedge

318:                                              ; preds = %10
  br label %.backedge

319:                                              ; preds = %10
  %320 = icmp slt i32 %.071, %.073
  %321 = select i1 %320, i32 -1864166310, i32 1414863122
  br label %.backedge

322:                                              ; preds = %10
  %323 = load i32, i32* @x.6, align 4
  %324 = load i32, i32* @y.7, align 4
  %325 = add i32 %323, -1
  %326 = mul i32 %325, %323
  %327 = and i32 %326, 1
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %329, %328
  %331 = select i1 %330, i32 1666095206, i32 -582117716
  br label %.backedge

332:                                              ; preds = %10
  %333 = sext i32 %.085 to i64
  %334 = add i32 %.071, 1
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %333, i64 %335
  %337 = sext i32 %.071 to i64
  %338 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %333, i64 %337
  %339 = bitcast %struct.node* %338 to i8*
  %340 = bitcast %struct.node* %336 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(16) %339, i8* noundef nonnull align 16 dereferenceable(16) %340, i64 16, i1 false)
  %341 = load i32, i32* @x.6, align 4
  %342 = load i32, i32* @y.7, align 4
  %343 = add i32 %341, -1
  %344 = mul i32 %343, %341
  %345 = and i32 %344, 1
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %347, %346
  %349 = select i1 %348, i32 -1428422117, i32 -582117716
  br label %.backedge

350:                                              ; preds = %10
  br label %.backedge

351:                                              ; preds = %10
  %352 = add i32 %.071, 1
  br label %.backedge

353:                                              ; preds = %10
  %354 = sext i32 %.085 to i64
  %355 = sext i32 %.073 to i64
  %356 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %354, i64 %355
  %357 = bitcast %struct.node* %356 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(16) %357, i8* noundef nonnull align 4 dereferenceable(16) %9, i64 16, i1 false)
  br label %.backedge

358:                                              ; preds = %10
  %359 = load i32, i32* @x.6, align 4
  %360 = load i32, i32* @y.7, align 4
  %361 = add i32 %359, -1
  %362 = mul i32 %361, %359
  %363 = and i32 %362, 1
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %365, %364
  %367 = select i1 %366, i32 -1677860943, i32 -1079851346
  br label %.backedge

368:                                              ; preds = %10
  %369 = load i32, i32* @x.6, align 4
  %370 = load i32, i32* @y.7, align 4
  %371 = add i32 %369, -1
  %372 = mul i32 %371, %369
  %373 = and i32 %372, 1
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %375, %374
  %377 = select i1 %376, i32 822501476, i32 -1079851346
  br label %.backedge

378:                                              ; preds = %10
  br label %.backedge

379:                                              ; preds = %10
  %380 = load i32, i32* @x.6, align 4
  %381 = load i32, i32* @y.7, align 4
  %382 = add i32 %380, -1
  %383 = mul i32 %382, %380
  %384 = and i32 %383, 1
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %386, %385
  %388 = select i1 %387, i32 -1771591532, i32 -1893353354
  br label %.backedge

389:                                              ; preds = %10
  %390 = add i32 %.073, -1
  %391 = load i32, i32* @x.6, align 4
  %392 = load i32, i32* @y.7, align 4
  %393 = add i32 %391, -1
  %394 = mul i32 %393, %391
  %395 = and i32 %394, 1
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %397, %396
  %399 = select i1 %398, i32 1804095579, i32 -1893353354
  br label %.backedge

400:                                              ; preds = %10
  br label %.backedge

401:                                              ; preds = %10
  %402 = load i32, i32* @x.6, align 4
  %403 = load i32, i32* @y.7, align 4
  %404 = add i32 %402, -1
  %405 = mul i32 %404, %402
  %406 = and i32 %405, 1
  %407 = icmp eq i32 %406, 0
  %408 = icmp slt i32 %403, 10
  %409 = or i1 %408, %407
  %410 = select i1 %409, i32 -1899829644, i32 846741234
  br label %.backedge

411:                                              ; preds = %10
  %412 = load i32, i32* @x.6, align 4
  %413 = load i32, i32* @y.7, align 4
  %414 = add i32 %412, -1
  %415 = mul i32 %414, %412
  %416 = and i32 %415, 1
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %418, %417
  %420 = select i1 %419, i32 309931347, i32 846741234
  br label %.backedge

421:                                              ; preds = %10
  br label %.backedge

422:                                              ; preds = %10
  %423 = load i32, i32* @x.6, align 4
  %424 = load i32, i32* @y.7, align 4
  %425 = add i32 %423, -1
  %426 = mul i32 %425, %423
  %427 = and i32 %426, 1
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %429, %428
  %431 = select i1 %430, i32 339907424, i32 1025433063
  br label %.backedge

432:                                              ; preds = %10
  %433 = add i32 %.079, 1
  %434 = load i32, i32* @x.6, align 4
  %435 = load i32, i32* @y.7, align 4
  %436 = add i32 %434, -1
  %437 = mul i32 %436, %434
  %438 = and i32 %437, 1
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %440, %439
  %442 = select i1 %441, i32 360783041, i32 1025433063
  br label %.backedge

443:                                              ; preds = %10
  br label %.backedge

444:                                              ; preds = %10
  br label %.backedge

445:                                              ; preds = %10
  %446 = add i32 %.085, 1
  br label %.backedge

447:                                              ; preds = %10
  %448 = load i32, i32* @x.6, align 4
  %449 = load i32, i32* @y.7, align 4
  %450 = add i32 %448, -1
  %451 = mul i32 %450, %448
  %452 = and i32 %451, 1
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %449, 10
  %455 = or i1 %454, %453
  %456 = select i1 %455, i32 -1899491227, i32 1161403305
  br label %.backedge

457:                                              ; preds = %10
  store i64 4557430888798830399, i64* %7, align 8
  %458 = load i32, i32* @x.6, align 4
  %459 = load i32, i32* @y.7, align 4
  %460 = add i32 %458, -1
  %461 = mul i32 %460, %458
  %462 = and i32 %461, 1
  %463 = icmp eq i32 %462, 0
  %464 = icmp slt i32 %459, 10
  %465 = or i1 %464, %463
  %466 = select i1 %465, i32 1407026341, i32 1161403305
  br label %.backedge

467:                                              ; preds = %10
  br label %.backedge

468:                                              ; preds = %10
  %469 = icmp slt i32 %.069, 6
  %470 = select i1 %469, i32 -1108742168, i32 -701102385
  br label %.backedge

471:                                              ; preds = %10
  %472 = load i32, i32* @n, align 4
  %473 = sext i32 %472 to i64
  %474 = sext i32 %.069 to i64
  %475 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %473, i64 %474
  %476 = call i64 @_ZN4node3getEv(%struct.node* nonnull %475)
  store i64 %476, i64* %8, align 8
  %477 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* nonnull dereferenceable(8) %7, i64* nonnull dereferenceable(8) %8)
  %478 = load i64, i64* %477, align 8
  store i64 %478, i64* %7, align 8
  br label %.backedge

479:                                              ; preds = %10
  %480 = add i32 %.069, 1
  br label %.backedge

481:                                              ; preds = %10
  %482 = load i64, i64* %7, align 8
  ret i64 %482

483:                                              ; preds = %10
  br label %.backedge

484:                                              ; preds = %10
  br label %.backedge

485:                                              ; preds = %10
  br label %.backedge

486:                                              ; preds = %10
  %487 = sext i32 %.085 to i64
  %488 = sext i32 %.083 to i64
  %489 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %487, i64 %488
  call void @_ZN4node5resetEv(%struct.node* nonnull %489)
  br label %.backedge

490:                                              ; preds = %10
  %491 = add i32 %.083, 1
  br label %.backedge

492:                                              ; preds = %10
  %493 = sext i32 %.085 to i64
  %494 = getelementptr inbounds [200005 x i32], [200005 x i32]* @nd, i64 0, i64 %493
  %495 = load i32, i32* %494, align 4
  br label %.backedge

496:                                              ; preds = %10
  br label %.backedge

497:                                              ; preds = %10
  br label %.backedge

498:                                              ; preds = %10
  %499 = add i32 %.077, -1
  br label %.backedge

500:                                              ; preds = %10
  %501 = sext i32 %.085 to i64
  %502 = sext i32 %.073 to i64
  %503 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %501, i64 %502
  %504 = call i64 @_ZN4node3getEv(%struct.node* nonnull %503)
  %505 = call i64 @_ZN4node3getEv(%struct.node* nonnull %6)
  br label %.backedge

506:                                              ; preds = %10
  br label %.backedge

507:                                              ; preds = %10
  %508 = sext i32 %.085 to i64
  %509 = add i32 %.071, 1
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %508, i64 %510
  %512 = sext i32 %.071 to i64
  %513 = getelementptr inbounds [200005 x [41 x %struct.node]], [200005 x [41 x %struct.node]]* @chance, i64 0, i64 %508, i64 %512
  %514 = bitcast %struct.node* %513 to i8*
  %515 = bitcast %struct.node* %511 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(16) %514, i8* noundef nonnull align 16 dereferenceable(16) %515, i64 16, i1 false)
  br label %.backedge

516:                                              ; preds = %10
  br label %.backedge

517:                                              ; preds = %10
  %518 = add i32 %.073, -1
  br label %.backedge

519:                                              ; preds = %10
  br label %.backedge

520:                                              ; preds = %10
  %521 = add i32 %.079, 1
  br label %.backedge

522:                                              ; preds = %10
  store i64 4557430888798830399, i64* %7, align 8
  br label %.backedge
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN4node5resetEv(%struct.node* %0) local_unnamed_addr #4 comdat align 2 {
  %2 = bitcast %struct.node* %0 to <4 x i32>*
  store <4 x i32> <i32 -808464433, i32 1061109567, i32 -808464433, i32 1061109567>, <4 x i32>* %2, align 4
  ret void
}

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZN4node3addEii(%struct.node* %0, i32 %1, i32 %2) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i1, align 1
  %5 = alloca i1, align 1
  %6 = load i32, i32* @x.10, align 4
  %7 = load i32, i32* @y.11, align 4
  %8 = add i32 %6, -1
  %9 = mul i32 %8, %6
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  store i1 %11, i1* %5, align 1
  %12 = icmp slt i32 %7, 10
  store i1 %12, i1* %4, align 1
  %13 = getelementptr inbounds %struct.node, %struct.node* %0, i64 0, i32 0
  %14 = getelementptr inbounds %struct.node, %struct.node* %0, i64 0, i32 1
  %15 = getelementptr inbounds %struct.node, %struct.node* %0, i64 0, i32 2
  %16 = getelementptr inbounds %struct.node, %struct.node* %0, i64 0, i32 3
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %3
  %.0.ph = phi i32 [ -1881634409, %3 ], [ %.0.ph.be, %.outer.backedge ]
  br label %17

17:                                               ; preds = %.outer, %17
  switch i32 %.0.ph, label %17 [
    i32 -1881634409, label %18
    i32 281327572, label %21
    i32 -1133728639, label %41
    i32 -503655922, label %42
  ]

18:                                               ; preds = %17
  %.0..0..0. = load volatile i1, i1* %5, align 1
  %.0..0..0.1 = load volatile i1, i1* %4, align 1
  %19 = or i1 %.0..0..0., %.0..0..0.1
  %20 = select i1 %19, i32 281327572, i32 -503655922
  br label %.outer.backedge

21:                                               ; preds = %17
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  store i32 %1, i32* %22, align 4
  store i32 %2, i32* %23, align 4
  %24 = call dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4) %13, i32* nonnull dereferenceable(4) %22)
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %13, align 4
  %26 = call dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* nonnull dereferenceable(4) %14, i32* nonnull dereferenceable(4) %22)
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %14, align 4
  %28 = call dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* nonnull dereferenceable(4) %15, i32* nonnull dereferenceable(4) %23)
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %15, align 4
  %30 = call dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* nonnull dereferenceable(4) %16, i32* nonnull dereferenceable(4) %23)
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %16, align 4
  %32 = load i32, i32* @x.10, align 4
  %33 = load i32, i32* @y.11, align 4
  %34 = add i32 %32, -1
  %35 = mul i32 %34, %32
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %38, %37
  %40 = select i1 %39, i32 -1133728639, i32 -503655922
  br label %.outer.backedge

41:                                               ; preds = %17
  ret void

42:                                               ; preds = %17
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  store i32 %1, i32* %43, align 4
  store i32 %2, i32* %44, align 4
  %45 = call dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4) %13, i32* nonnull dereferenceable(4) %43)
  %46 = load i32, i32* %45, align 4
  store i32 %46, i32* %13, align 4
  %47 = call dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* nonnull dereferenceable(4) %14, i32* nonnull dereferenceable(4) %43)
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %14, align 4
  %49 = call dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* nonnull dereferenceable(4) %15, i32* nonnull dereferenceable(4) %44)
  %50 = load i32, i32* %49, align 4
  store i32 %50, i32* %15, align 4
  %51 = call dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* nonnull dereferenceable(4) %16, i32* nonnull dereferenceable(4) %44)
  %52 = load i32, i32* %51, align 4
  store i32 %52, i32* %16, align 4
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %42, %21, %18
  %.0.ph.be = phi i32 [ %20, %18 ], [ %40, %21 ], [ 281327572, %42 ]
  br label %.outer
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr i64 @_ZN4node3getEv(%struct.node* %0) local_unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %struct.node, %struct.node* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.node, %struct.node* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = sub i32 %3, %5
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %struct.node, %struct.node* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.node, %struct.node* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %9, %11
  %13 = sext i32 %12 to i64
  %14 = mul nsw i64 %13, %7
  ret i64 %14
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1) local_unnamed_addr #4 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i64**, align 8
  %5 = alloca i64**, align 8
  %6 = alloca i64**, align 8
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %9 = load i32, i32* @x.14, align 4
  %10 = load i32, i32* @y.15, align 4
  %11 = add i32 %9, -1
  %12 = mul i32 %11, %9
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  store i1 %14, i1* %8, align 1
  %15 = icmp slt i32 %10, 10
  store i1 %15, i1* %7, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ 1961646725, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %16

16:                                               ; preds = %.outer, %16
  switch i32 %.0.ph, label %16 [
    i32 1961646725, label %17
    i32 -106172055, label %20
    i32 669999576, label %38
    i32 725167740, label %40
    i32 1780316737, label %42
    i32 -1392594018, label %44
    i32 2003315884, label %.outer.backedge
  ]

17:                                               ; preds = %16
  %.0..0..0. = load volatile i1, i1* %8, align 1
  %.0..0..0.1 = load volatile i1, i1* %7, align 1
  %18 = or i1 %.0..0..0., %.0..0..0.1
  %19 = select i1 %18, i32 -106172055, i32 2003315884
  br label %.outer.backedge

20:                                               ; preds = %16
  %21 = alloca i64*, align 8
  store i64** %21, i64*** %6, align 8
  %22 = alloca i64*, align 8
  store i64** %22, i64*** %5, align 8
  %23 = alloca i64*, align 8
  store i64** %23, i64*** %4, align 8
  %.0..0..0.5 = load volatile i64**, i64*** %5, align 8
  store i64* %0, i64** %.0..0..0.5, align 8
  %.0..0..0.8 = load volatile i64**, i64*** %4, align 8
  store i64* %1, i64** %.0..0..0.8, align 8
  %.0..0..0.9 = load volatile i64**, i64*** %4, align 8
  %24 = load i64*, i64** %.0..0..0.9, align 8
  %25 = load i64, i64* %24, align 8
  %.0..0..0.6 = load volatile i64**, i64*** %5, align 8
  %26 = load i64*, i64** %.0..0..0.6, align 8
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %25, %27
  store i1 %28, i1* %3, align 1
  %29 = load i32, i32* @x.14, align 4
  %30 = load i32, i32* @y.15, align 4
  %31 = add i32 %29, -1
  %32 = mul i32 %31, %29
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %35, %34
  %37 = select i1 %36, i32 669999576, i32 2003315884
  br label %.outer.backedge

38:                                               ; preds = %16
  %.0..0..0.11 = load volatile i1, i1* %3, align 1
  %39 = select i1 %.0..0..0.11, i32 725167740, i32 1780316737
  br label %.outer.backedge

40:                                               ; preds = %16
  %.0..0..0.10 = load volatile i64**, i64*** %4, align 8
  %41 = load i64*, i64** %.0..0..0.10, align 8
  %.0..0..0.2 = load volatile i64**, i64*** %6, align 8
  store i64* %41, i64** %.0..0..0.2, align 8
  br label %.outer.backedge

42:                                               ; preds = %16
  %.0..0..0.7 = load volatile i64**, i64*** %5, align 8
  %43 = load i64*, i64** %.0..0..0.7, align 8
  %.0..0..0.3 = load volatile i64**, i64*** %6, align 8
  store i64* %43, i64** %.0..0..0.3, align 8
  br label %.outer.backedge

44:                                               ; preds = %16
  %.0..0..0.4 = load volatile i64**, i64*** %6, align 8
  %45 = load i64*, i64** %.0..0..0.4, align 8
  ret i64* %45

.outer.backedge:                                  ; preds = %16, %42, %40, %38, %20, %17
  %.0.ph.be = phi i32 [ %19, %17 ], [ %37, %20 ], [ %39, %38 ], [ -1392594018, %40 ], [ -1392594018, %42 ], [ -106172055, %16 ]
  br label %.outer
}

; Function Attrs: noinline norecurse uwtable
define i32 @main() local_unnamed_addr #5 {
  %1 = alloca i1, align 1
  %2 = alloca i64*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = load i32, i32* @x.16, align 4
  %9 = load i32, i32* @y.17, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  store i1 %13, i1* %7, align 1
  %14 = icmp slt i32 %9, 10
  store i1 %14, i1* %6, align 1
  br label %15

15:                                               ; preds = %.backedge, %0
  %.0 = phi i32 [ -586730655, %0 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 -586730655, label %16
    i32 -1346379617, label %19
    i32 569462608, label %35
    i32 1761546291, label %36
    i32 350726653, label %46
    i32 768439465, label %59
    i32 -224351272, label %61
    i32 -746321774, label %74
    i32 -1527914921, label %84
    i32 358093024, label %96
    i32 -1515102328, label %97
    i32 -289506116, label %98
    i32 -2030585532, label %102
    i32 196788034, label %110
    i32 -2108877009, label %120
    i32 1483119777, label %132
    i32 -329679466, label %133
    i32 -212164216, label %143
    i32 -1232234259, label %156
    i32 835807183, label %157
    i32 1387061670, label %160
    i32 1879009481, label %161
    i32 -1625417881, label %164
    i32 -1510822339, label %167
  ]

.backedge:                                        ; preds = %15, %167, %164, %161, %160, %157, %143, %133, %132, %120, %110, %102, %98, %97, %96, %84, %74, %61, %59, %46, %36, %35, %19, %16
  %.0.be = phi i32 [ %.0, %15 ], [ -212164216, %167 ], [ -2108877009, %164 ], [ -1527914921, %161 ], [ 350726653, %160 ], [ -1346379617, %157 ], [ %155, %143 ], [ %142, %133 ], [ -289506116, %132 ], [ %131, %120 ], [ %119, %110 ], [ 196788034, %102 ], [ %101, %98 ], [ -289506116, %97 ], [ 1761546291, %96 ], [ %95, %84 ], [ %83, %74 ], [ -746321774, %61 ], [ %60, %59 ], [ %58, %46 ], [ %45, %36 ], [ 1761546291, %35 ], [ %34, %19 ], [ %18, %16 ]
  br label %15

16:                                               ; preds = %15
  %.0..0..0. = load volatile i1, i1* %7, align 1
  %.0..0..0.1 = load volatile i1, i1* %6, align 1
  %17 = or i1 %.0..0..0., %.0..0..0.1
  %18 = select i1 %17, i32 -1346379617, i32 835807183
  br label %.backedge

19:                                               ; preds = %15
  %20 = alloca i32, align 4
  store i32* %20, i32** %5, align 8
  %21 = alloca i64, align 8
  store i64* %21, i64** %4, align 8
  %22 = alloca i32, align 4
  store i32* %22, i32** %3, align 8
  %23 = alloca i64, align 8
  store i64* %23, i64** %2, align 8
  %24 = call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %25 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) @n)
  %.0..0..0.2 = load volatile i32*, i32** %5, align 8
  store i32 1, i32* %.0..0..0.2, align 4
  %26 = load i32, i32* @x.16, align 4
  %27 = load i32, i32* @y.17, align 4
  %28 = add i32 %26, -1
  %29 = mul i32 %28, %26
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %32, %31
  %34 = select i1 %33, i32 569462608, i32 835807183
  br label %.backedge

35:                                               ; preds = %15
  br label %.backedge

36:                                               ; preds = %15
  %37 = load i32, i32* @x.16, align 4
  %38 = load i32, i32* @y.17, align 4
  %39 = add i32 %37, -1
  %40 = mul i32 %39, %37
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %43, %42
  %45 = select i1 %44, i32 350726653, i32 1387061670
  br label %.backedge

46:                                               ; preds = %15
  %.0..0..0.3 = load volatile i32*, i32** %5, align 8
  %47 = load i32, i32* %.0..0..0.3, align 4
  %48 = load i32, i32* @n, align 4
  %49 = icmp sle i32 %47, %48
  store i1 %49, i1* %1, align 1
  %50 = load i32, i32* @x.16, align 4
  %51 = load i32, i32* @y.17, align 4
  %52 = add i32 %50, -1
  %53 = mul i32 %52, %50
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %56, %55
  %58 = select i1 %57, i32 768439465, i32 1387061670
  br label %.backedge

59:                                               ; preds = %15
  %.0..0..0.26 = load volatile i1, i1* %1, align 1
  %60 = select i1 %.0..0..0.26, i32 -224351272, i32 -1515102328
  br label %.backedge

61:                                               ; preds = %15
  %.0..0..0.4 = load volatile i32*, i32** %5, align 8
  %62 = load i32, i32* %.0..0..0.4, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [200005 x i32], [200005 x i32]* @a, i64 0, i64 %63
  %65 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) %64)
  %.0..0..0.5 = load volatile i32*, i32** %5, align 8
  %66 = load i32, i32* %.0..0..0.5, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [200005 x i32], [200005 x i32]* @b, i64 0, i64 %67
  %69 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull %65, i32* nonnull dereferenceable(4) %68)
  %.0..0..0.6 = load volatile i32*, i32** %5, align 8
  %70 = load i32, i32* %.0..0..0.6, align 4
  %.0..0..0.7 = load volatile i32*, i32** %5, align 8
  %71 = load i32, i32* %.0..0..0.7, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [200005 x i32], [200005 x i32]* @nd, i64 0, i64 %72
  store i32 %70, i32* %73, align 4
  br label %.backedge

74:                                               ; preds = %15
  %75 = load i32, i32* @x.16, align 4
  %76 = load i32, i32* @y.17, align 4
  %77 = add i32 %75, -1
  %78 = mul i32 %77, %75
  %79 = and i32 %78, 1
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %81, %80
  %83 = select i1 %82, i32 -1527914921, i32 1879009481
  br label %.backedge

84:                                               ; preds = %15
  %.0..0..0.8 = load volatile i32*, i32** %5, align 8
  %85 = load i32, i32* %.0..0..0.8, align 4
  %86 = add i32 %85, 1
  %.0..0..0.9 = load volatile i32*, i32** %5, align 8
  store i32 %86, i32* %.0..0..0.9, align 4
  %87 = load i32, i32* @x.16, align 4
  %88 = load i32, i32* @y.17, align 4
  %89 = add i32 %87, -1
  %90 = mul i32 %89, %87
  %91 = and i32 %90, 1
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %93, %92
  %95 = select i1 %94, i32 358093024, i32 1879009481
  br label %.backedge

96:                                               ; preds = %15
  br label %.backedge

97:                                               ; preds = %15
  %.0..0..0.13 = load volatile i64*, i64** %4, align 8
  store i64 4557430888798830399, i64* %.0..0..0.13, align 8
  %.0..0..0.18 = load volatile i32*, i32** %3, align 8
  store i32 1, i32* %.0..0..0.18, align 4
  br label %.backedge

98:                                               ; preds = %15
  %.0..0..0.19 = load volatile i32*, i32** %3, align 8
  %99 = load i32, i32* %.0..0..0.19, align 4
  %100 = icmp slt i32 %99, 31
  %101 = select i1 %100, i32 -2030585532, i32 -329679466
  br label %.backedge

102:                                              ; preds = %15
  %103 = load i32, i32* @n, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [200005 x i32], [200005 x i32]* @nd, i64 0, i64 %104
  %106 = getelementptr inbounds i32, i32* %105, i64 1
  call void @_ZSt14random_shuffleIPiEvT_S1_(i32* getelementptr inbounds ([200005 x i32], [200005 x i32]* @nd, i64 0, i64 1), i32* nonnull %106)
  %107 = call i64 @_Z5solvev()
  %.0..0..0.24 = load volatile i64*, i64** %2, align 8
  store i64 %107, i64* %.0..0..0.24, align 8
  %.0..0..0.14 = load volatile i64*, i64** %4, align 8
  %.0..0..0.25 = load volatile i64*, i64** %2, align 8
  %108 = call dereferenceable(8) i64* @_ZSt3minIxERKT_S2_S2_(i64* dereferenceable(8) %.0..0..0.14, i64* dereferenceable(8) %.0..0..0.25)
  %109 = load i64, i64* %108, align 8
  %.0..0..0.15 = load volatile i64*, i64** %4, align 8
  store i64 %109, i64* %.0..0..0.15, align 8
  br label %.backedge

110:                                              ; preds = %15
  %111 = load i32, i32* @x.16, align 4
  %112 = load i32, i32* @y.17, align 4
  %113 = add i32 %111, -1
  %114 = mul i32 %113, %111
  %115 = and i32 %114, 1
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %117, %116
  %119 = select i1 %118, i32 -2108877009, i32 -1625417881
  br label %.backedge

120:                                              ; preds = %15
  %.0..0..0.20 = load volatile i32*, i32** %3, align 8
  %121 = load i32, i32* %.0..0..0.20, align 4
  %122 = add i32 %121, 1
  %.0..0..0.21 = load volatile i32*, i32** %3, align 8
  store i32 %122, i32* %.0..0..0.21, align 4
  %123 = load i32, i32* @x.16, align 4
  %124 = load i32, i32* @y.17, align 4
  %125 = add i32 %123, -1
  %126 = mul i32 %125, %123
  %127 = and i32 %126, 1
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %129, %128
  %131 = select i1 %130, i32 1483119777, i32 -1625417881
  br label %.backedge

132:                                              ; preds = %15
  br label %.backedge

133:                                              ; preds = %15
  %134 = load i32, i32* @x.16, align 4
  %135 = load i32, i32* @y.17, align 4
  %136 = add i32 %134, -1
  %137 = mul i32 %136, %134
  %138 = and i32 %137, 1
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %140, %139
  %142 = select i1 %141, i32 -212164216, i32 -1510822339
  br label %.backedge

143:                                              ; preds = %15
  %.0..0..0.16 = load volatile i64*, i64** %4, align 8
  %144 = load i64, i64* %.0..0..0.16, align 8
  %145 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %144)
  %146 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %145, i8 signext 10)
  %147 = load i32, i32* @x.16, align 4
  %148 = load i32, i32* @y.17, align 4
  %149 = add i32 %147, -1
  %150 = mul i32 %149, %147
  %151 = and i32 %150, 1
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %153, %152
  %155 = select i1 %154, i32 -1232234259, i32 -1510822339
  br label %.backedge

156:                                              ; preds = %15
  ret i32 0

157:                                              ; preds = %15
  %158 = call zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext false)
  %159 = call dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull @_ZSt3cin, i32* nonnull dereferenceable(4) @n)
  br label %.backedge

160:                                              ; preds = %15
  %.0..0..0.10 = load volatile i32*, i32** %5, align 8
  br label %.backedge

161:                                              ; preds = %15
  %.0..0..0.11 = load volatile i32*, i32** %5, align 8
  %162 = load i32, i32* %.0..0..0.11, align 4
  %163 = add i32 %162, 1
  %.0..0..0.12 = load volatile i32*, i32** %5, align 8
  store i32 %163, i32* %.0..0..0.12, align 4
  br label %.backedge

164:                                              ; preds = %15
  %.0..0..0.22 = load volatile i32*, i32** %3, align 8
  %165 = load i32, i32* %.0..0..0.22, align 4
  %166 = add i32 %165, 1
  %.0..0..0.23 = load volatile i32*, i32** %3, align 8
  store i32 %166, i32* %.0..0..0.23, align 4
  br label %.backedge

167:                                              ; preds = %15
  %.0..0..0.17 = load volatile i64*, i64** %4, align 8
  %168 = load i64, i64* %.0..0..0.17, align 8
  %169 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"* nonnull @_ZSt4cout, i64 %168)
  %170 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* nonnull dereferenceable(272) %169, i8 signext 10)
  br label %.backedge
}

declare zeroext i1 @_ZNSt8ios_base15sync_with_stdioEb(i1 zeroext) local_unnamed_addr #1

declare dereferenceable(280) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"*, i32* dereferenceable(4)) local_unnamed_addr #1

; Function Attrs: noinline uwtable
define linkonce_odr void @_ZSt14random_shuffleIPiEvT_S1_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %4, align 8
  %6 = ptrtoint i32* %0 to i64
  %7 = getelementptr inbounds i32, i32* %0, i64 1
  br label %8

8:                                                ; preds = %.backedge, %2
  %.020 = phi i32* [ undef, %2 ], [ %.020.be, %.backedge ]
  %.018 = phi i32* [ undef, %2 ], [ %.018.be, %.backedge ]
  %.0 = phi i32 [ 707668787, %2 ], [ %.0.be, %.backedge ]
  switch i32 %.0, label %.backedge [
    i32 707668787, label %9
    i32 74853712, label %11
    i32 -483739195, label %12
    i32 1503953604, label %22
    i32 -994754759, label %33
    i32 401390762, label %35
    i32 -1889825953, label %45
    i32 -109351794, label %46
    i32 35782987, label %47
    i32 578734885, label %49
    i32 651016434, label %59
    i32 2042500721, label %69
    i32 -1727657304, label %70
    i32 1694054738, label %80
    i32 -1401117179, label %90
    i32 -1537359844, label %91
    i32 -956798473, label %92
    i32 1443017197, label %93
  ]

.backedge:                                        ; preds = %8, %93, %92, %91, %80, %70, %69, %59, %49, %47, %46, %45, %35, %33, %22, %12, %11, %9
  %.020.be = phi i32* [ %.020, %8 ], [ %.020, %93 ], [ %.020, %92 ], [ %.020, %91 ], [ %.020, %80 ], [ %.020, %70 ], [ %.020, %69 ], [ %.020, %59 ], [ %.020, %49 ], [ %48, %47 ], [ %.020, %46 ], [ %.020, %45 ], [ %.020, %35 ], [ %.020, %33 ], [ %.020, %22 ], [ %.020, %12 ], [ %7, %11 ], [ %.020, %9 ]
  %.018.be = phi i32* [ %.018, %8 ], [ %.018, %93 ], [ %.018, %92 ], [ %.018, %91 ], [ %.018, %80 ], [ %.018, %70 ], [ %.018, %69 ], [ %.018, %59 ], [ %.018, %49 ], [ %.018, %47 ], [ %.018, %46 ], [ %.018, %45 ], [ %43, %35 ], [ %.018, %33 ], [ %.018, %22 ], [ %.018, %12 ], [ %.018, %11 ], [ %.018, %9 ]
  %.0.be = phi i32 [ %.0, %8 ], [ 1694054738, %93 ], [ 651016434, %92 ], [ 1503953604, %91 ], [ %89, %80 ], [ %79, %70 ], [ -1727657304, %69 ], [ %68, %59 ], [ %58, %49 ], [ -483739195, %47 ], [ 35782987, %46 ], [ -109351794, %45 ], [ %44, %35 ], [ %34, %33 ], [ %32, %22 ], [ %21, %12 ], [ -483739195, %11 ], [ %10, %9 ]
  br label %8

9:                                                ; preds = %8
  %.0..0..0.15 = load volatile i32*, i32** %5, align 8
  %.0..0..0.16 = load volatile i32*, i32** %4, align 8
  %.not22 = icmp eq i32* %.0..0..0.15, %.0..0..0.16
  %10 = select i1 %.not22, i32 -1727657304, i32 74853712
  br label %.backedge

11:                                               ; preds = %8
  br label %.backedge

12:                                               ; preds = %8
  %13 = load i32, i32* @x.18, align 4
  %14 = load i32, i32* @y.19, align 4
  %15 = add i32 %13, -1
  %16 = mul i32 %15, %13
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %19, %18
  %21 = select i1 %20, i32 1503953604, i32 -1537359844
  br label %.backedge

22:                                               ; preds = %8
  %23 = icmp ne i32* %.020, %1
  store i1 %23, i1* %3, align 1
  %24 = load i32, i32* @x.18, align 4
  %25 = load i32, i32* @y.19, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 -994754759, i32 -1537359844
  br label %.backedge

33:                                               ; preds = %8
  %.0..0..0.17 = load volatile i1, i1* %3, align 1
  %34 = select i1 %.0..0..0.17, i32 401390762, i32 578734885
  br label %.backedge

35:                                               ; preds = %8
  %36 = tail call i32 @rand() #7
  %37 = sext i32 %36 to i64
  %38 = ptrtoint i32* %.020 to i64
  %39 = sub i64 %38, %6
  %40 = ashr exact i64 %39, 2
  %41 = add nsw i64 %40, 1
  %42 = srem i64 %37, %41
  %43 = getelementptr inbounds i32, i32* %0, i64 %42
  %.not = icmp eq i32* %.020, %43
  %44 = select i1 %.not, i32 -109351794, i32 -1889825953
  br label %.backedge

45:                                               ; preds = %8
  tail call void @_ZSt9iter_swapIPiS0_EvT_T0_(i32* %.020, i32* %.018)
  br label %.backedge

46:                                               ; preds = %8
  br label %.backedge

47:                                               ; preds = %8
  %48 = getelementptr inbounds i32, i32* %.020, i64 1
  br label %.backedge

49:                                               ; preds = %8
  %50 = load i32, i32* @x.18, align 4
  %51 = load i32, i32* @y.19, align 4
  %52 = add i32 %50, -1
  %53 = mul i32 %52, %50
  %54 = and i32 %53, 1
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %56, %55
  %58 = select i1 %57, i32 651016434, i32 -956798473
  br label %.backedge

59:                                               ; preds = %8
  %60 = load i32, i32* @x.18, align 4
  %61 = load i32, i32* @y.19, align 4
  %62 = add i32 %60, -1
  %63 = mul i32 %62, %60
  %64 = and i32 %63, 1
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %66, %65
  %68 = select i1 %67, i32 2042500721, i32 -956798473
  br label %.backedge

69:                                               ; preds = %8
  br label %.backedge

70:                                               ; preds = %8
  %71 = load i32, i32* @x.18, align 4
  %72 = load i32, i32* @y.19, align 4
  %73 = add i32 %71, -1
  %74 = mul i32 %73, %71
  %75 = and i32 %74, 1
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %77, %76
  %79 = select i1 %78, i32 1694054738, i32 1443017197
  br label %.backedge

80:                                               ; preds = %8
  %81 = load i32, i32* @x.18, align 4
  %82 = load i32, i32* @y.19, align 4
  %83 = add i32 %81, -1
  %84 = mul i32 %83, %81
  %85 = and i32 %84, 1
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %87, %86
  %89 = select i1 %88, i32 -1401117179, i32 1443017197
  br label %.backedge

90:                                               ; preds = %8
  ret void

91:                                               ; preds = %8
  br label %.backedge

92:                                               ; preds = %8
  br label %.backedge

93:                                               ; preds = %8
  br label %.backedge
}

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c(%"class.std::basic_ostream"* dereferenceable(272), i8 signext) local_unnamed_addr #1

declare dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEx(%"class.std::basic_ostream"*, i64) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt3maxIiERKT_S2_S2_(i32* dereferenceable(4) %0, i32* dereferenceable(4) %1) local_unnamed_addr #4 comdat {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = load i32, i32* %0, align 4
  store i32 %5, i32* %4, align 4
  %6 = load i32, i32* %1, align 4
  store i32 %6, i32* %3, align 4
  %7 = load i32, i32* @x.20, align 4
  %8 = load i32, i32* @y.21, align 4
  %9 = add i32 %7, -1
  %10 = mul i32 %9, %7
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 -796228000, i32 -1993021920
  %16 = select i1 %14, i32 -1301148351, i32 -1993021920
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.08.ph = phi i32* [ undef, %2 ], [ %.08.ph.be, %.outer.backedge ]
  %.0.ph = phi i32 [ -1493622811, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %.outer10

.outer10:                                         ; preds = %.outer10.backedge, %.outer
  %.0.ph11 = phi i32 [ %.0.ph, %.outer ], [ %.0.ph11.be, %.outer10.backedge ]
  br label %17

17:                                               ; preds = %.outer10, %17
  switch i32 %.0.ph11, label %17 [
    i32 -1493622811, label %18
    i32 -1448248176, label %.outer.backedge
    i32 -284903104, label %.outer10.backedge
    i32 -1301148351, label %21
    i32 -796228000, label %22
    i32 -370572884, label %23
    i32 -1993021920, label %24
  ]

18:                                               ; preds = %17
  %.0..0..0.6 = load volatile i32, i32* %4, align 4
  %.0..0..0.7 = load volatile i32, i32* %3, align 4
  %19 = icmp slt i32 %.0..0..0.6, %.0..0..0.7
  %20 = select i1 %19, i32 -1448248176, i32 -284903104
  br label %.outer10.backedge

21:                                               ; preds = %17
  br label %.outer.backedge

22:                                               ; preds = %17
  br label %.outer10.backedge

.outer10.backedge:                                ; preds = %17, %22, %18
  %.0.ph11.be = phi i32 [ %20, %18 ], [ -370572884, %22 ], [ %16, %17 ]
  br label %.outer10

23:                                               ; preds = %17
  ret i32* %.08.ph

24:                                               ; preds = %17
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %17, %24, %21
  %.08.ph.be = phi i32* [ %0, %21 ], [ %0, %24 ], [ %1, %17 ]
  %.0.ph.be = phi i32 [ %15, %21 ], [ -1301148351, %24 ], [ -370572884, %17 ]
  br label %.outer
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt3minIiERKT_S2_S2_(i32* dereferenceable(4) %0, i32* dereferenceable(4) %1) local_unnamed_addr #4 comdat {
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* %1, align 4
  store i32 %6, i32* %5, align 4
  %7 = load i32, i32* %0, align 4
  store i32 %7, i32* %4, align 4
  %8 = load i32, i32* @x.22, align 4
  %9 = load i32, i32* @y.23, align 4
  %10 = add i32 %8, -1
  %11 = mul i32 %10, %8
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %14, %13
  %16 = select i1 %15, i32 1205250353, i32 1427713197
  %17 = select i1 %15, i32 1730340470, i32 1427713197
  br label %.outer

.outer:                                           ; preds = %18, %2
  %.09.ph = phi i32* [ undef, %2 ], [ %.09.ph14, %18 ]
  %.0.ph = phi i32 [ -1713520294, %2 ], [ %16, %18 ]
  br label %.outer13

.outer13:                                         ; preds = %.outer13.backedge, %.outer
  %.09.ph14 = phi i32* [ %.09.ph, %.outer ], [ %.09.ph14.be, %.outer13.backedge ]
  %.0.ph15 = phi i32 [ %.0.ph, %.outer ], [ 1721612632, %.outer13.backedge ]
  br label %.outer16

.outer16:                                         ; preds = %.outer16.backedge, %.outer13
  %.0.ph17 = phi i32 [ %.0.ph15, %.outer13 ], [ %.0.ph17.be, %.outer16.backedge ]
  br label %18

18:                                               ; preds = %.outer16, %18
  switch i32 %.0.ph17, label %18 [
    i32 -1713520294, label %19
    i32 2144205503, label %.outer13.backedge
    i32 2065325866, label %22
    i32 1721612632, label %.outer16.backedge
    i32 1730340470, label %.outer
    i32 1205250353, label %23
    i32 1427713197, label %24
  ]

19:                                               ; preds = %18
  %.0..0..0.6 = load volatile i32, i32* %5, align 4
  %.0..0..0.7 = load volatile i32, i32* %4, align 4
  %20 = icmp slt i32 %.0..0..0.6, %.0..0..0.7
  %21 = select i1 %20, i32 2144205503, i32 2065325866
  br label %.outer16.backedge

22:                                               ; preds = %18
  br label %.outer13.backedge

.outer13.backedge:                                ; preds = %18, %22
  %.09.ph14.be = phi i32* [ %0, %22 ], [ %1, %18 ]
  br label %.outer13

23:                                               ; preds = %18
  store i32* %.09.ph, i32** %3, align 8
  %.0..0..0.8 = load volatile i32*, i32** %3, align 8
  ret i32* %.0..0..0.8

24:                                               ; preds = %18
  br label %.outer16.backedge

.outer16.backedge:                                ; preds = %18, %24, %19
  %.0.ph17.be = phi i32 [ %21, %19 ], [ 1730340470, %24 ], [ %17, %18 ]
  br label %.outer16
}

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #2

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt9iter_swapIPiS0_EvT_T0_(i32* %0, i32* %1) local_unnamed_addr #4 comdat {
  tail call void @_ZSt4swapIiEvRT_S1_(i32* dereferenceable(4) %0, i32* dereferenceable(4) %1) #7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZSt4swapIiEvRT_S1_(i32* dereferenceable(4) %0, i32* dereferenceable(4) %1) local_unnamed_addr #4 comdat {
  %3 = alloca i1, align 1
  %4 = alloca i1, align 1
  %5 = load i32, i32* @x.26, align 4
  %6 = load i32, i32* @y.27, align 4
  %7 = add i32 %5, -1
  %8 = mul i32 %7, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  store i1 %10, i1* %4, align 1
  %11 = icmp slt i32 %6, 10
  store i1 %11, i1* %3, align 1
  br label %.outer

.outer:                                           ; preds = %.outer.backedge, %2
  %.0.ph = phi i32 [ -211739555, %2 ], [ %.0.ph.be, %.outer.backedge ]
  br label %12

12:                                               ; preds = %.outer, %12
  switch i32 %.0.ph, label %12 [
    i32 -211739555, label %13
    i32 -531107897, label %16
    i32 1740522578, label %33
    i32 1460545927, label %34
  ]

13:                                               ; preds = %12
  %.0..0..0. = load volatile i1, i1* %4, align 1
  %.0..0..0.1 = load volatile i1, i1* %3, align 1
  %14 = or i1 %.0..0..0., %.0..0..0.1
  %15 = select i1 %14, i32 -531107897, i32 1460545927
  br label %.outer.backedge

16:                                               ; preds = %12
  %17 = alloca i32, align 4
  %18 = call dereferenceable(4) i32* @_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_(i32* nonnull dereferenceable(4) %0) #7
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %17, align 4
  %20 = call dereferenceable(4) i32* @_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_(i32* nonnull dereferenceable(4) %1) #7
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %0, align 4
  %22 = call dereferenceable(4) i32* @_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_(i32* nonnull dereferenceable(4) %17) #7
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %1, align 4
  %24 = load i32, i32* @x.26, align 4
  %25 = load i32, i32* @y.27, align 4
  %26 = add i32 %24, -1
  %27 = mul i32 %26, %24
  %28 = and i32 %27, 1
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %30, %29
  %32 = select i1 %31, i32 1740522578, i32 1460545927
  br label %.outer.backedge

33:                                               ; preds = %12
  ret void

34:                                               ; preds = %12
  %35 = alloca i32, align 4
  %36 = call dereferenceable(4) i32* @_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_(i32* nonnull dereferenceable(4) %0) #7
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %35, align 4
  %38 = call dereferenceable(4) i32* @_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_(i32* nonnull dereferenceable(4) %1) #7
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %0, align 4
  %40 = call dereferenceable(4) i32* @_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_(i32* nonnull dereferenceable(4) %35) #7
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %1, align 4
  br label %.outer.backedge

.outer.backedge:                                  ; preds = %34, %16, %13
  %.0.ph.be = phi i32 [ %15, %13 ], [ %32, %16 ], [ -531107897, %34 ]
  br label %.outer
}

; Function Attrs: noinline nounwind uwtable
define linkonce_odr dereferenceable(4) i32* @_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_(i32* dereferenceable(4) %0) local_unnamed_addr #4 comdat {
  ret i32* %0
}

; Function Attrs: noinline uwtable
define internal void @_GLOBAL__sub_I_s073652634.cpp() #0 section ".text.startup" {
  tail call fastcc void @__cxx_global_var_init()
  tail call fastcc void @__cxx_global_var_init.1()
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
