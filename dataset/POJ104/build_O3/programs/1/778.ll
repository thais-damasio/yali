; ModuleID = 'source-C-CXX/1/778.c'
source_filename = "source-C-CXX/1/778.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@__const.main.b = private unnamed_addr constant [26 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ", align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%c\0A%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1000 x [26 x i8]], align 16
  %3 = alloca [1000 x i32], align 16
  %4 = alloca i32, align 4
  %5 = alloca [26 x i32], align 16
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #4
  %7 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 26000, i8* nonnull %7) #4
  %8 = bitcast [1000 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4000, i8* nonnull %8) #4
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #4
  %10 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %1)
  store i32 0, i32* %4, align 4, !tbaa !5
  %11 = load i32, i32* %1, align 4, !tbaa !5
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %0, %13
  %14 = phi i32 [ %19, %13 ], [ 0, %0 ]
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [1000 x i32], [1000 x i32]* %3, i64 0, i64 %15
  %17 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 %15, i64 0
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %16, i8* nonnull %17)
  %19 = add nuw nsw i32 %14, 1
  store i32 %19, i32* %4, align 4, !tbaa !5
  %20 = load i32, i32* %1, align 4, !tbaa !5
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %13, label %22, !llvm.loop !9

22:                                               ; preds = %13, %0
  %23 = phi i32 [ %11, %0 ], [ %20, %13 ]
  %24 = bitcast [26 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %24) #4
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(104) %24, i8 0, i64 104, i1 false)
  %25 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 25
  %26 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 24
  %27 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 23
  %28 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 22
  %29 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 21
  %30 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 20
  %31 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 19
  %32 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 18
  %33 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 17
  %34 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 16
  %35 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 15
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 14
  %37 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 13
  %38 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 12
  %39 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 11
  %40 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 10
  %41 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 9
  %42 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 8
  %43 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 7
  %44 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 6
  %45 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 5
  %46 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 4
  %47 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 3
  %48 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 2
  %49 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 1
  %50 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 0
  %51 = icmp sgt i32 %23, 0
  br i1 %51, label %52, label %195

52:                                               ; preds = %22
  %53 = zext i32 %23 to i64
  br label %54

54:                                               ; preds = %52, %192
  %55 = phi i32 [ 0, %52 ], [ %83, %192 ]
  %56 = phi i32 [ 0, %52 ], [ %84, %192 ]
  %57 = phi i32 [ 0, %52 ], [ %85, %192 ]
  %58 = phi i32 [ 0, %52 ], [ %86, %192 ]
  %59 = phi i32 [ 0, %52 ], [ %87, %192 ]
  %60 = phi i32 [ 0, %52 ], [ %88, %192 ]
  %61 = phi i32 [ 0, %52 ], [ %89, %192 ]
  %62 = phi i32 [ 0, %52 ], [ %90, %192 ]
  %63 = phi i32 [ 0, %52 ], [ %91, %192 ]
  %64 = phi i32 [ 0, %52 ], [ %92, %192 ]
  %65 = phi i32 [ 0, %52 ], [ %93, %192 ]
  %66 = phi i32 [ 0, %52 ], [ %94, %192 ]
  %67 = phi i32 [ 0, %52 ], [ %95, %192 ]
  %68 = phi i32 [ 0, %52 ], [ %96, %192 ]
  %69 = phi i32 [ 0, %52 ], [ %97, %192 ]
  %70 = phi i32 [ 0, %52 ], [ %98, %192 ]
  %71 = phi i32 [ 0, %52 ], [ %99, %192 ]
  %72 = phi i32 [ 0, %52 ], [ %100, %192 ]
  %73 = phi i32 [ 0, %52 ], [ %101, %192 ]
  %74 = phi i32 [ 0, %52 ], [ %102, %192 ]
  %75 = phi i32 [ 0, %52 ], [ %103, %192 ]
  %76 = phi i32 [ 0, %52 ], [ %104, %192 ]
  %77 = phi i32 [ 0, %52 ], [ %105, %192 ]
  %78 = phi i32 [ 0, %52 ], [ %106, %192 ]
  %79 = phi i32 [ 0, %52 ], [ %107, %192 ]
  %80 = phi i32 [ 0, %52 ], [ %108, %192 ]
  %81 = phi i64 [ 0, %52 ], [ %193, %192 ]
  br label %82

82:                                               ; preds = %54, %164
  %83 = phi i32 [ %55, %54 ], [ %165, %164 ]
  %84 = phi i32 [ %56, %54 ], [ %166, %164 ]
  %85 = phi i32 [ %57, %54 ], [ %167, %164 ]
  %86 = phi i32 [ %58, %54 ], [ %168, %164 ]
  %87 = phi i32 [ %59, %54 ], [ %169, %164 ]
  %88 = phi i32 [ %60, %54 ], [ %170, %164 ]
  %89 = phi i32 [ %61, %54 ], [ %171, %164 ]
  %90 = phi i32 [ %62, %54 ], [ %172, %164 ]
  %91 = phi i32 [ %63, %54 ], [ %173, %164 ]
  %92 = phi i32 [ %64, %54 ], [ %174, %164 ]
  %93 = phi i32 [ %65, %54 ], [ %175, %164 ]
  %94 = phi i32 [ %66, %54 ], [ %176, %164 ]
  %95 = phi i32 [ %67, %54 ], [ %177, %164 ]
  %96 = phi i32 [ %68, %54 ], [ %178, %164 ]
  %97 = phi i32 [ %69, %54 ], [ %179, %164 ]
  %98 = phi i32 [ %70, %54 ], [ %180, %164 ]
  %99 = phi i32 [ %71, %54 ], [ %181, %164 ]
  %100 = phi i32 [ %72, %54 ], [ %182, %164 ]
  %101 = phi i32 [ %73, %54 ], [ %183, %164 ]
  %102 = phi i32 [ %74, %54 ], [ %184, %164 ]
  %103 = phi i32 [ %75, %54 ], [ %185, %164 ]
  %104 = phi i32 [ %76, %54 ], [ %186, %164 ]
  %105 = phi i32 [ %77, %54 ], [ %187, %164 ]
  %106 = phi i32 [ %78, %54 ], [ %188, %164 ]
  %107 = phi i32 [ %79, %54 ], [ %189, %164 ]
  %108 = phi i32 [ %80, %54 ], [ %190, %164 ]
  %109 = phi i64 [ 0, %54 ], [ %191, %164 ]
  %110 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 %81, i64 %109
  %111 = load i8, i8* %110, align 1, !tbaa !11
  switch i8 %111, label %164 [
    i8 0, label %192
    i8 65, label %112
    i8 66, label %114
    i8 67, label %116
    i8 68, label %118
    i8 69, label %120
    i8 70, label %122
    i8 71, label %124
    i8 72, label %126
    i8 73, label %128
    i8 74, label %130
    i8 75, label %132
    i8 76, label %134
    i8 77, label %136
    i8 78, label %138
    i8 79, label %140
    i8 80, label %142
    i8 81, label %144
    i8 82, label %146
    i8 83, label %148
    i8 84, label %150
    i8 85, label %152
    i8 86, label %154
    i8 87, label %156
    i8 88, label %158
    i8 89, label %160
    i8 90, label %162
  ]

112:                                              ; preds = %82
  %113 = add nsw i32 %83, 1
  store i32 %113, i32* %50, align 16, !tbaa !5
  br label %164

114:                                              ; preds = %82
  %115 = add nsw i32 %84, 1
  store i32 %115, i32* %49, align 4, !tbaa !5
  br label %164

116:                                              ; preds = %82
  %117 = add nsw i32 %85, 1
  store i32 %117, i32* %48, align 8, !tbaa !5
  br label %164

118:                                              ; preds = %82
  %119 = add nsw i32 %86, 1
  store i32 %119, i32* %47, align 4, !tbaa !5
  br label %164

120:                                              ; preds = %82
  %121 = add nsw i32 %87, 1
  store i32 %121, i32* %46, align 16, !tbaa !5
  br label %164

122:                                              ; preds = %82
  %123 = add nsw i32 %88, 1
  store i32 %123, i32* %45, align 4, !tbaa !5
  br label %164

124:                                              ; preds = %82
  %125 = add nsw i32 %89, 1
  store i32 %125, i32* %44, align 8, !tbaa !5
  br label %164

126:                                              ; preds = %82
  %127 = add nsw i32 %90, 1
  store i32 %127, i32* %43, align 4, !tbaa !5
  br label %164

128:                                              ; preds = %82
  %129 = add nsw i32 %91, 1
  store i32 %129, i32* %42, align 16, !tbaa !5
  br label %164

130:                                              ; preds = %82
  %131 = add nsw i32 %92, 1
  store i32 %131, i32* %41, align 4, !tbaa !5
  br label %164

132:                                              ; preds = %82
  %133 = add nsw i32 %93, 1
  store i32 %133, i32* %40, align 8, !tbaa !5
  br label %164

134:                                              ; preds = %82
  %135 = add nsw i32 %94, 1
  store i32 %135, i32* %39, align 4, !tbaa !5
  br label %164

136:                                              ; preds = %82
  %137 = add nsw i32 %95, 1
  store i32 %137, i32* %38, align 16, !tbaa !5
  br label %164

138:                                              ; preds = %82
  %139 = add nsw i32 %96, 1
  store i32 %139, i32* %37, align 4, !tbaa !5
  br label %164

140:                                              ; preds = %82
  %141 = add nsw i32 %97, 1
  store i32 %141, i32* %36, align 8, !tbaa !5
  br label %164

142:                                              ; preds = %82
  %143 = add nsw i32 %98, 1
  store i32 %143, i32* %35, align 4, !tbaa !5
  br label %164

144:                                              ; preds = %82
  %145 = add nsw i32 %99, 1
  store i32 %145, i32* %34, align 16, !tbaa !5
  br label %164

146:                                              ; preds = %82
  %147 = add nsw i32 %100, 1
  store i32 %147, i32* %33, align 4, !tbaa !5
  br label %164

148:                                              ; preds = %82
  %149 = add nsw i32 %101, 1
  store i32 %149, i32* %32, align 8, !tbaa !5
  br label %164

150:                                              ; preds = %82
  %151 = add nsw i32 %102, 1
  store i32 %151, i32* %31, align 4, !tbaa !5
  br label %164

152:                                              ; preds = %82
  %153 = add nsw i32 %103, 1
  store i32 %153, i32* %30, align 16, !tbaa !5
  br label %164

154:                                              ; preds = %82
  %155 = add nsw i32 %104, 1
  store i32 %155, i32* %29, align 4, !tbaa !5
  br label %164

156:                                              ; preds = %82
  %157 = add nsw i32 %105, 1
  store i32 %157, i32* %28, align 8, !tbaa !5
  br label %164

158:                                              ; preds = %82
  %159 = add nsw i32 %106, 1
  store i32 %159, i32* %27, align 4, !tbaa !5
  br label %164

160:                                              ; preds = %82
  %161 = add nsw i32 %107, 1
  store i32 %161, i32* %26, align 16, !tbaa !5
  br label %164

162:                                              ; preds = %82
  %163 = add nsw i32 %108, 1
  store i32 %163, i32* %25, align 4, !tbaa !5
  br label %164

164:                                              ; preds = %82, %114, %112, %116, %118, %120, %122, %124, %126, %128, %130, %132, %134, %136, %138, %140, %142, %144, %146, %148, %150, %152, %154, %156, %158, %160, %162
  %165 = phi i32 [ %83, %82 ], [ %83, %114 ], [ %113, %112 ], [ %83, %116 ], [ %83, %118 ], [ %83, %120 ], [ %83, %122 ], [ %83, %124 ], [ %83, %126 ], [ %83, %128 ], [ %83, %130 ], [ %83, %132 ], [ %83, %134 ], [ %83, %136 ], [ %83, %138 ], [ %83, %140 ], [ %83, %142 ], [ %83, %144 ], [ %83, %146 ], [ %83, %148 ], [ %83, %150 ], [ %83, %152 ], [ %83, %154 ], [ %83, %156 ], [ %83, %158 ], [ %83, %160 ], [ %83, %162 ]
  %166 = phi i32 [ %84, %82 ], [ %115, %114 ], [ %84, %112 ], [ %84, %116 ], [ %84, %118 ], [ %84, %120 ], [ %84, %122 ], [ %84, %124 ], [ %84, %126 ], [ %84, %128 ], [ %84, %130 ], [ %84, %132 ], [ %84, %134 ], [ %84, %136 ], [ %84, %138 ], [ %84, %140 ], [ %84, %142 ], [ %84, %144 ], [ %84, %146 ], [ %84, %148 ], [ %84, %150 ], [ %84, %152 ], [ %84, %154 ], [ %84, %156 ], [ %84, %158 ], [ %84, %160 ], [ %84, %162 ]
  %167 = phi i32 [ %85, %82 ], [ %85, %114 ], [ %85, %112 ], [ %117, %116 ], [ %85, %118 ], [ %85, %120 ], [ %85, %122 ], [ %85, %124 ], [ %85, %126 ], [ %85, %128 ], [ %85, %130 ], [ %85, %132 ], [ %85, %134 ], [ %85, %136 ], [ %85, %138 ], [ %85, %140 ], [ %85, %142 ], [ %85, %144 ], [ %85, %146 ], [ %85, %148 ], [ %85, %150 ], [ %85, %152 ], [ %85, %154 ], [ %85, %156 ], [ %85, %158 ], [ %85, %160 ], [ %85, %162 ]
  %168 = phi i32 [ %86, %82 ], [ %86, %114 ], [ %86, %112 ], [ %86, %116 ], [ %119, %118 ], [ %86, %120 ], [ %86, %122 ], [ %86, %124 ], [ %86, %126 ], [ %86, %128 ], [ %86, %130 ], [ %86, %132 ], [ %86, %134 ], [ %86, %136 ], [ %86, %138 ], [ %86, %140 ], [ %86, %142 ], [ %86, %144 ], [ %86, %146 ], [ %86, %148 ], [ %86, %150 ], [ %86, %152 ], [ %86, %154 ], [ %86, %156 ], [ %86, %158 ], [ %86, %160 ], [ %86, %162 ]
  %169 = phi i32 [ %87, %82 ], [ %87, %114 ], [ %87, %112 ], [ %87, %116 ], [ %87, %118 ], [ %121, %120 ], [ %87, %122 ], [ %87, %124 ], [ %87, %126 ], [ %87, %128 ], [ %87, %130 ], [ %87, %132 ], [ %87, %134 ], [ %87, %136 ], [ %87, %138 ], [ %87, %140 ], [ %87, %142 ], [ %87, %144 ], [ %87, %146 ], [ %87, %148 ], [ %87, %150 ], [ %87, %152 ], [ %87, %154 ], [ %87, %156 ], [ %87, %158 ], [ %87, %160 ], [ %87, %162 ]
  %170 = phi i32 [ %88, %82 ], [ %88, %114 ], [ %88, %112 ], [ %88, %116 ], [ %88, %118 ], [ %88, %120 ], [ %123, %122 ], [ %88, %124 ], [ %88, %126 ], [ %88, %128 ], [ %88, %130 ], [ %88, %132 ], [ %88, %134 ], [ %88, %136 ], [ %88, %138 ], [ %88, %140 ], [ %88, %142 ], [ %88, %144 ], [ %88, %146 ], [ %88, %148 ], [ %88, %150 ], [ %88, %152 ], [ %88, %154 ], [ %88, %156 ], [ %88, %158 ], [ %88, %160 ], [ %88, %162 ]
  %171 = phi i32 [ %89, %82 ], [ %89, %114 ], [ %89, %112 ], [ %89, %116 ], [ %89, %118 ], [ %89, %120 ], [ %89, %122 ], [ %125, %124 ], [ %89, %126 ], [ %89, %128 ], [ %89, %130 ], [ %89, %132 ], [ %89, %134 ], [ %89, %136 ], [ %89, %138 ], [ %89, %140 ], [ %89, %142 ], [ %89, %144 ], [ %89, %146 ], [ %89, %148 ], [ %89, %150 ], [ %89, %152 ], [ %89, %154 ], [ %89, %156 ], [ %89, %158 ], [ %89, %160 ], [ %89, %162 ]
  %172 = phi i32 [ %90, %82 ], [ %90, %114 ], [ %90, %112 ], [ %90, %116 ], [ %90, %118 ], [ %90, %120 ], [ %90, %122 ], [ %90, %124 ], [ %127, %126 ], [ %90, %128 ], [ %90, %130 ], [ %90, %132 ], [ %90, %134 ], [ %90, %136 ], [ %90, %138 ], [ %90, %140 ], [ %90, %142 ], [ %90, %144 ], [ %90, %146 ], [ %90, %148 ], [ %90, %150 ], [ %90, %152 ], [ %90, %154 ], [ %90, %156 ], [ %90, %158 ], [ %90, %160 ], [ %90, %162 ]
  %173 = phi i32 [ %91, %82 ], [ %91, %114 ], [ %91, %112 ], [ %91, %116 ], [ %91, %118 ], [ %91, %120 ], [ %91, %122 ], [ %91, %124 ], [ %91, %126 ], [ %129, %128 ], [ %91, %130 ], [ %91, %132 ], [ %91, %134 ], [ %91, %136 ], [ %91, %138 ], [ %91, %140 ], [ %91, %142 ], [ %91, %144 ], [ %91, %146 ], [ %91, %148 ], [ %91, %150 ], [ %91, %152 ], [ %91, %154 ], [ %91, %156 ], [ %91, %158 ], [ %91, %160 ], [ %91, %162 ]
  %174 = phi i32 [ %92, %82 ], [ %92, %114 ], [ %92, %112 ], [ %92, %116 ], [ %92, %118 ], [ %92, %120 ], [ %92, %122 ], [ %92, %124 ], [ %92, %126 ], [ %92, %128 ], [ %131, %130 ], [ %92, %132 ], [ %92, %134 ], [ %92, %136 ], [ %92, %138 ], [ %92, %140 ], [ %92, %142 ], [ %92, %144 ], [ %92, %146 ], [ %92, %148 ], [ %92, %150 ], [ %92, %152 ], [ %92, %154 ], [ %92, %156 ], [ %92, %158 ], [ %92, %160 ], [ %92, %162 ]
  %175 = phi i32 [ %93, %82 ], [ %93, %114 ], [ %93, %112 ], [ %93, %116 ], [ %93, %118 ], [ %93, %120 ], [ %93, %122 ], [ %93, %124 ], [ %93, %126 ], [ %93, %128 ], [ %93, %130 ], [ %133, %132 ], [ %93, %134 ], [ %93, %136 ], [ %93, %138 ], [ %93, %140 ], [ %93, %142 ], [ %93, %144 ], [ %93, %146 ], [ %93, %148 ], [ %93, %150 ], [ %93, %152 ], [ %93, %154 ], [ %93, %156 ], [ %93, %158 ], [ %93, %160 ], [ %93, %162 ]
  %176 = phi i32 [ %94, %82 ], [ %94, %114 ], [ %94, %112 ], [ %94, %116 ], [ %94, %118 ], [ %94, %120 ], [ %94, %122 ], [ %94, %124 ], [ %94, %126 ], [ %94, %128 ], [ %94, %130 ], [ %94, %132 ], [ %135, %134 ], [ %94, %136 ], [ %94, %138 ], [ %94, %140 ], [ %94, %142 ], [ %94, %144 ], [ %94, %146 ], [ %94, %148 ], [ %94, %150 ], [ %94, %152 ], [ %94, %154 ], [ %94, %156 ], [ %94, %158 ], [ %94, %160 ], [ %94, %162 ]
  %177 = phi i32 [ %95, %82 ], [ %95, %114 ], [ %95, %112 ], [ %95, %116 ], [ %95, %118 ], [ %95, %120 ], [ %95, %122 ], [ %95, %124 ], [ %95, %126 ], [ %95, %128 ], [ %95, %130 ], [ %95, %132 ], [ %95, %134 ], [ %137, %136 ], [ %95, %138 ], [ %95, %140 ], [ %95, %142 ], [ %95, %144 ], [ %95, %146 ], [ %95, %148 ], [ %95, %150 ], [ %95, %152 ], [ %95, %154 ], [ %95, %156 ], [ %95, %158 ], [ %95, %160 ], [ %95, %162 ]
  %178 = phi i32 [ %96, %82 ], [ %96, %114 ], [ %96, %112 ], [ %96, %116 ], [ %96, %118 ], [ %96, %120 ], [ %96, %122 ], [ %96, %124 ], [ %96, %126 ], [ %96, %128 ], [ %96, %130 ], [ %96, %132 ], [ %96, %134 ], [ %96, %136 ], [ %139, %138 ], [ %96, %140 ], [ %96, %142 ], [ %96, %144 ], [ %96, %146 ], [ %96, %148 ], [ %96, %150 ], [ %96, %152 ], [ %96, %154 ], [ %96, %156 ], [ %96, %158 ], [ %96, %160 ], [ %96, %162 ]
  %179 = phi i32 [ %97, %82 ], [ %97, %114 ], [ %97, %112 ], [ %97, %116 ], [ %97, %118 ], [ %97, %120 ], [ %97, %122 ], [ %97, %124 ], [ %97, %126 ], [ %97, %128 ], [ %97, %130 ], [ %97, %132 ], [ %97, %134 ], [ %97, %136 ], [ %97, %138 ], [ %141, %140 ], [ %97, %142 ], [ %97, %144 ], [ %97, %146 ], [ %97, %148 ], [ %97, %150 ], [ %97, %152 ], [ %97, %154 ], [ %97, %156 ], [ %97, %158 ], [ %97, %160 ], [ %97, %162 ]
  %180 = phi i32 [ %98, %82 ], [ %98, %114 ], [ %98, %112 ], [ %98, %116 ], [ %98, %118 ], [ %98, %120 ], [ %98, %122 ], [ %98, %124 ], [ %98, %126 ], [ %98, %128 ], [ %98, %130 ], [ %98, %132 ], [ %98, %134 ], [ %98, %136 ], [ %98, %138 ], [ %98, %140 ], [ %143, %142 ], [ %98, %144 ], [ %98, %146 ], [ %98, %148 ], [ %98, %150 ], [ %98, %152 ], [ %98, %154 ], [ %98, %156 ], [ %98, %158 ], [ %98, %160 ], [ %98, %162 ]
  %181 = phi i32 [ %99, %82 ], [ %99, %114 ], [ %99, %112 ], [ %99, %116 ], [ %99, %118 ], [ %99, %120 ], [ %99, %122 ], [ %99, %124 ], [ %99, %126 ], [ %99, %128 ], [ %99, %130 ], [ %99, %132 ], [ %99, %134 ], [ %99, %136 ], [ %99, %138 ], [ %99, %140 ], [ %99, %142 ], [ %145, %144 ], [ %99, %146 ], [ %99, %148 ], [ %99, %150 ], [ %99, %152 ], [ %99, %154 ], [ %99, %156 ], [ %99, %158 ], [ %99, %160 ], [ %99, %162 ]
  %182 = phi i32 [ %100, %82 ], [ %100, %114 ], [ %100, %112 ], [ %100, %116 ], [ %100, %118 ], [ %100, %120 ], [ %100, %122 ], [ %100, %124 ], [ %100, %126 ], [ %100, %128 ], [ %100, %130 ], [ %100, %132 ], [ %100, %134 ], [ %100, %136 ], [ %100, %138 ], [ %100, %140 ], [ %100, %142 ], [ %100, %144 ], [ %147, %146 ], [ %100, %148 ], [ %100, %150 ], [ %100, %152 ], [ %100, %154 ], [ %100, %156 ], [ %100, %158 ], [ %100, %160 ], [ %100, %162 ]
  %183 = phi i32 [ %101, %82 ], [ %101, %114 ], [ %101, %112 ], [ %101, %116 ], [ %101, %118 ], [ %101, %120 ], [ %101, %122 ], [ %101, %124 ], [ %101, %126 ], [ %101, %128 ], [ %101, %130 ], [ %101, %132 ], [ %101, %134 ], [ %101, %136 ], [ %101, %138 ], [ %101, %140 ], [ %101, %142 ], [ %101, %144 ], [ %101, %146 ], [ %149, %148 ], [ %101, %150 ], [ %101, %152 ], [ %101, %154 ], [ %101, %156 ], [ %101, %158 ], [ %101, %160 ], [ %101, %162 ]
  %184 = phi i32 [ %102, %82 ], [ %102, %114 ], [ %102, %112 ], [ %102, %116 ], [ %102, %118 ], [ %102, %120 ], [ %102, %122 ], [ %102, %124 ], [ %102, %126 ], [ %102, %128 ], [ %102, %130 ], [ %102, %132 ], [ %102, %134 ], [ %102, %136 ], [ %102, %138 ], [ %102, %140 ], [ %102, %142 ], [ %102, %144 ], [ %102, %146 ], [ %102, %148 ], [ %151, %150 ], [ %102, %152 ], [ %102, %154 ], [ %102, %156 ], [ %102, %158 ], [ %102, %160 ], [ %102, %162 ]
  %185 = phi i32 [ %103, %82 ], [ %103, %114 ], [ %103, %112 ], [ %103, %116 ], [ %103, %118 ], [ %103, %120 ], [ %103, %122 ], [ %103, %124 ], [ %103, %126 ], [ %103, %128 ], [ %103, %130 ], [ %103, %132 ], [ %103, %134 ], [ %103, %136 ], [ %103, %138 ], [ %103, %140 ], [ %103, %142 ], [ %103, %144 ], [ %103, %146 ], [ %103, %148 ], [ %103, %150 ], [ %153, %152 ], [ %103, %154 ], [ %103, %156 ], [ %103, %158 ], [ %103, %160 ], [ %103, %162 ]
  %186 = phi i32 [ %104, %82 ], [ %104, %114 ], [ %104, %112 ], [ %104, %116 ], [ %104, %118 ], [ %104, %120 ], [ %104, %122 ], [ %104, %124 ], [ %104, %126 ], [ %104, %128 ], [ %104, %130 ], [ %104, %132 ], [ %104, %134 ], [ %104, %136 ], [ %104, %138 ], [ %104, %140 ], [ %104, %142 ], [ %104, %144 ], [ %104, %146 ], [ %104, %148 ], [ %104, %150 ], [ %104, %152 ], [ %155, %154 ], [ %104, %156 ], [ %104, %158 ], [ %104, %160 ], [ %104, %162 ]
  %187 = phi i32 [ %105, %82 ], [ %105, %114 ], [ %105, %112 ], [ %105, %116 ], [ %105, %118 ], [ %105, %120 ], [ %105, %122 ], [ %105, %124 ], [ %105, %126 ], [ %105, %128 ], [ %105, %130 ], [ %105, %132 ], [ %105, %134 ], [ %105, %136 ], [ %105, %138 ], [ %105, %140 ], [ %105, %142 ], [ %105, %144 ], [ %105, %146 ], [ %105, %148 ], [ %105, %150 ], [ %105, %152 ], [ %105, %154 ], [ %157, %156 ], [ %105, %158 ], [ %105, %160 ], [ %105, %162 ]
  %188 = phi i32 [ %106, %82 ], [ %106, %114 ], [ %106, %112 ], [ %106, %116 ], [ %106, %118 ], [ %106, %120 ], [ %106, %122 ], [ %106, %124 ], [ %106, %126 ], [ %106, %128 ], [ %106, %130 ], [ %106, %132 ], [ %106, %134 ], [ %106, %136 ], [ %106, %138 ], [ %106, %140 ], [ %106, %142 ], [ %106, %144 ], [ %106, %146 ], [ %106, %148 ], [ %106, %150 ], [ %106, %152 ], [ %106, %154 ], [ %106, %156 ], [ %159, %158 ], [ %106, %160 ], [ %106, %162 ]
  %189 = phi i32 [ %107, %82 ], [ %107, %114 ], [ %107, %112 ], [ %107, %116 ], [ %107, %118 ], [ %107, %120 ], [ %107, %122 ], [ %107, %124 ], [ %107, %126 ], [ %107, %128 ], [ %107, %130 ], [ %107, %132 ], [ %107, %134 ], [ %107, %136 ], [ %107, %138 ], [ %107, %140 ], [ %107, %142 ], [ %107, %144 ], [ %107, %146 ], [ %107, %148 ], [ %107, %150 ], [ %107, %152 ], [ %107, %154 ], [ %107, %156 ], [ %107, %158 ], [ %161, %160 ], [ %107, %162 ]
  %190 = phi i32 [ %108, %82 ], [ %108, %114 ], [ %108, %112 ], [ %108, %116 ], [ %108, %118 ], [ %108, %120 ], [ %108, %122 ], [ %108, %124 ], [ %108, %126 ], [ %108, %128 ], [ %108, %130 ], [ %108, %132 ], [ %108, %134 ], [ %108, %136 ], [ %108, %138 ], [ %108, %140 ], [ %108, %142 ], [ %108, %144 ], [ %108, %146 ], [ %108, %148 ], [ %108, %150 ], [ %108, %152 ], [ %108, %154 ], [ %108, %156 ], [ %108, %158 ], [ %108, %160 ], [ %163, %162 ]
  %191 = add nuw i64 %109, 1
  br label %82, !llvm.loop !12

192:                                              ; preds = %82
  %193 = add nuw nsw i64 %81, 1
  %194 = icmp eq i64 %193, %53
  br i1 %194, label %195, label %54, !llvm.loop !13

195:                                              ; preds = %192, %22
  %196 = phi i32 [ 0, %22 ], [ %108, %192 ]
  %197 = phi i32 [ 0, %22 ], [ %107, %192 ]
  %198 = phi i32 [ 0, %22 ], [ %106, %192 ]
  %199 = phi i32 [ 0, %22 ], [ %105, %192 ]
  %200 = phi i32 [ 0, %22 ], [ %104, %192 ]
  %201 = phi i32 [ 0, %22 ], [ %103, %192 ]
  %202 = phi i32 [ 0, %22 ], [ %102, %192 ]
  %203 = phi i32 [ 0, %22 ], [ %101, %192 ]
  %204 = phi i32 [ 0, %22 ], [ %100, %192 ]
  %205 = phi i32 [ 0, %22 ], [ %99, %192 ]
  %206 = phi i32 [ 0, %22 ], [ %98, %192 ]
  %207 = phi i32 [ 0, %22 ], [ %97, %192 ]
  %208 = phi i32 [ 0, %22 ], [ %96, %192 ]
  %209 = phi i32 [ 0, %22 ], [ %95, %192 ]
  %210 = phi i32 [ 0, %22 ], [ %94, %192 ]
  %211 = phi i32 [ 0, %22 ], [ %93, %192 ]
  %212 = phi i32 [ 0, %22 ], [ %92, %192 ]
  %213 = phi i32 [ 0, %22 ], [ %91, %192 ]
  %214 = phi i32 [ 0, %22 ], [ %90, %192 ]
  %215 = phi i32 [ 0, %22 ], [ %89, %192 ]
  %216 = phi i32 [ 0, %22 ], [ %88, %192 ]
  %217 = phi i32 [ 0, %22 ], [ %87, %192 ]
  %218 = phi i32 [ 0, %22 ], [ %86, %192 ]
  %219 = phi i32 [ 0, %22 ], [ %85, %192 ]
  %220 = phi i32 [ 0, %22 ], [ %84, %192 ]
  %221 = phi i32 [ 0, %22 ], [ %83, %192 ]
  %222 = icmp sgt i32 %220, %221
  %223 = select i1 %222, i32 %220, i32 %221
  %224 = zext i1 %222 to i64
  %225 = icmp sgt i32 %219, %223
  %226 = select i1 %225, i32 %219, i32 %223
  %227 = select i1 %225, i64 2, i64 %224
  %228 = icmp sgt i32 %218, %226
  %229 = select i1 %228, i32 %218, i32 %226
  %230 = select i1 %228, i64 3, i64 %227
  %231 = icmp sgt i32 %217, %229
  %232 = select i1 %231, i32 %217, i32 %229
  %233 = select i1 %231, i64 4, i64 %230
  %234 = icmp sgt i32 %216, %232
  %235 = select i1 %234, i32 %216, i32 %232
  %236 = select i1 %234, i64 5, i64 %233
  %237 = icmp sgt i32 %215, %235
  %238 = select i1 %237, i32 %215, i32 %235
  %239 = icmp sgt i32 %214, %238
  %240 = select i1 %239, i32 %214, i32 %238
  %241 = icmp sgt i32 %213, %240
  %242 = select i1 %241, i32 %213, i32 %240
  %243 = icmp sgt i32 %212, %242
  %244 = select i1 %243, i32 %212, i32 %242
  %245 = icmp sgt i32 %211, %244
  %246 = select i1 %245, i32 %211, i32 %244
  %247 = icmp sgt i32 %210, %246
  %248 = select i1 %247, i32 %210, i32 %246
  %249 = icmp sgt i32 %209, %248
  %250 = select i1 %249, i32 %209, i32 %248
  %251 = icmp sgt i32 %208, %250
  %252 = select i1 %251, i32 %208, i32 %250
  %253 = icmp sgt i32 %207, %252
  %254 = select i1 %253, i32 %207, i32 %252
  %255 = icmp sgt i32 %206, %254
  %256 = select i1 %255, i32 %206, i32 %254
  %257 = icmp sgt i32 %205, %256
  %258 = select i1 %257, i32 %205, i32 %256
  %259 = icmp sgt i32 %204, %258
  %260 = select i1 %259, i32 %204, i32 %258
  %261 = icmp sgt i32 %203, %260
  %262 = select i1 %261, i32 %203, i32 %260
  %263 = icmp sgt i32 %202, %262
  %264 = select i1 %263, i32 %202, i32 %262
  %265 = icmp sgt i32 %201, %264
  %266 = select i1 %265, i32 %201, i32 %264
  %267 = icmp sgt i32 %200, %266
  %268 = select i1 %267, i32 %200, i32 %266
  %269 = icmp sgt i32 %199, %268
  %270 = select i1 %269, i32 %199, i32 %268
  %271 = icmp sgt i32 %198, %270
  %272 = select i1 %271, i32 %198, i32 %270
  %273 = icmp sgt i32 %197, %272
  %274 = select i1 %273, i32 %197, i32 %272
  %275 = icmp sgt i32 %196, %274
  store i32 26, i32* %4, align 4, !tbaa !5
  %276 = select i1 %237, i64 6, i64 %236
  %277 = select i1 %239, i64 7, i64 %276
  %278 = select i1 %241, i64 8, i64 %277
  %279 = select i1 %243, i64 9, i64 %278
  %280 = select i1 %245, i64 10, i64 %279
  %281 = select i1 %247, i64 11, i64 %280
  %282 = select i1 %249, i64 12, i64 %281
  %283 = select i1 %251, i64 13, i64 %282
  %284 = select i1 %253, i64 14, i64 %283
  %285 = select i1 %255, i64 15, i64 %284
  %286 = select i1 %257, i64 16, i64 %285
  %287 = select i1 %259, i64 17, i64 %286
  %288 = select i1 %261, i64 18, i64 %287
  %289 = select i1 %263, i64 19, i64 %288
  %290 = select i1 %265, i64 20, i64 %289
  %291 = select i1 %267, i64 21, i64 %290
  %292 = select i1 %269, i64 22, i64 %291
  %293 = select i1 %271, i64 23, i64 %292
  %294 = select i1 %273, i64 24, i64 %293
  %295 = select i1 %275, i64 25, i64 %294
  %296 = getelementptr inbounds [26 x i8], [26 x i8]* @__const.main.b, i64 0, i64 %295
  %297 = load i8, i8* %296, align 1, !tbaa !11
  %298 = sext i8 %297 to i32
  %299 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 %295
  %300 = load i32, i32* %299, align 4, !tbaa !5
  %301 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 %298, i32 %300)
  store i32 0, i32* %4, align 4, !tbaa !5
  %302 = load i32, i32* %1, align 4, !tbaa !5
  %303 = icmp sgt i32 %302, 0
  br i1 %303, label %304, label %331

304:                                              ; preds = %195, %327
  %305 = phi i32 [ %328, %327 ], [ %302, %195 ]
  %306 = phi i32 [ %329, %327 ], [ 0, %195 ]
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 %307, i64 0
  %309 = load i8, i8* %308, align 2, !tbaa !11
  %310 = icmp eq i8 %309, 0
  br i1 %310, label %327, label %311

311:                                              ; preds = %304
  %312 = getelementptr inbounds [1000 x i32], [1000 x i32]* %3, i64 0, i64 %307
  br label %313

313:                                              ; preds = %311, %320
  %314 = phi i64 [ 0, %311 ], [ %321, %320 ]
  %315 = phi i8 [ %309, %311 ], [ %323, %320 ]
  %316 = icmp eq i8 %315, %297
  br i1 %316, label %317, label %320

317:                                              ; preds = %313
  %318 = load i32, i32* %312, align 4, !tbaa !5
  %319 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %318)
  br label %320

320:                                              ; preds = %313, %317
  %321 = add nuw i64 %314, 1
  %322 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 %307, i64 %321
  %323 = load i8, i8* %322, align 1, !tbaa !11
  %324 = icmp eq i8 %323, 0
  br i1 %324, label %325, label %313, !llvm.loop !14

325:                                              ; preds = %320
  %326 = load i32, i32* %1, align 4, !tbaa !5
  br label %327

327:                                              ; preds = %325, %304
  %328 = phi i32 [ %326, %325 ], [ %305, %304 ]
  %329 = add nuw nsw i32 %306, 1
  store i32 %329, i32* %4, align 4, !tbaa !5
  %330 = icmp slt i32 %329, %328
  br i1 %330, label %304, label %331, !llvm.loop !15

331:                                              ; preds = %327, %195
  %332 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %24) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 4000, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 26000, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nofree nounwind sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!7, !7, i64 0}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !10}
!15 = distinct !{!15, !10}
