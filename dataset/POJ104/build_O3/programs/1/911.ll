; ModuleID = 'source-C-CXX/1/911.c'
source_filename = "source-C-CXX/1/911.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.book = type { i32, [26 x i8], %struct.book* }

@m = dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"%d %s\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@i = dso_local local_unnamed_addr global i32 0, align 4
@.str.2 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local %struct.book* @creat() local_unnamed_addr #0 {
  %1 = tail call noalias align 16 dereferenceable_or_null(40) i8* @malloc(i64 40) #4
  %2 = bitcast i8* %1 to %struct.book*
  %3 = load i32, i32* @m, align 4, !tbaa !5
  %4 = icmp sgt i32 %3, 1
  br i1 %4, label %5, label %20

5:                                                ; preds = %0, %5
  %6 = phi i32 [ %15, %5 ], [ 1, %0 ]
  %7 = phi %struct.book* [ %12, %5 ], [ %2, %0 ]
  %8 = getelementptr inbounds %struct.book, %struct.book* %7, i64 0, i32 0
  %9 = getelementptr inbounds %struct.book, %struct.book* %7, i64 0, i32 1, i64 0
  %10 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* %8, i8* nonnull %9)
  %11 = tail call noalias align 16 dereferenceable_or_null(40) i8* @malloc(i64 40) #4
  %12 = bitcast i8* %11 to %struct.book*
  %13 = getelementptr inbounds %struct.book, %struct.book* %7, i64 0, i32 2
  %14 = bitcast %struct.book** %13 to i8**
  store i8* %11, i8** %14, align 8, !tbaa !9
  %15 = add nuw nsw i32 %6, 1
  %16 = load i32, i32* @m, align 4, !tbaa !5
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %5, label %18, !llvm.loop !12

18:                                               ; preds = %5
  %19 = bitcast i8* %11 to %struct.book*
  br label %20

20:                                               ; preds = %18, %0
  %21 = phi %struct.book* [ %2, %0 ], [ %19, %18 ]
  %22 = getelementptr inbounds %struct.book, %struct.book* %21, i64 0, i32 0
  %23 = getelementptr inbounds %struct.book, %struct.book* %21, i64 0, i32 1, i64 0
  %24 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* %22, i8* nonnull %23)
  %25 = getelementptr inbounds %struct.book, %struct.book* %21, i64 0, i32 2
  store %struct.book* null, %struct.book** %25, align 8, !tbaa !9
  ret %struct.book* %2
}

; Function Attrs: inaccessiblememonly mustprogress nofree nounwind willreturn
declare noalias noundef align 16 i8* @malloc(i64 noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* nonnull @m)
  %2 = tail call noalias align 16 dereferenceable_or_null(40) i8* @malloc(i64 40) #4
  %3 = bitcast i8* %2 to %struct.book*
  %4 = load i32, i32* @m, align 4, !tbaa !5
  %5 = icmp sgt i32 %4, 1
  br i1 %5, label %6, label %21

6:                                                ; preds = %0, %6
  %7 = phi i32 [ %16, %6 ], [ 1, %0 ]
  %8 = phi %struct.book* [ %13, %6 ], [ %3, %0 ]
  %9 = getelementptr inbounds %struct.book, %struct.book* %8, i64 0, i32 0
  %10 = getelementptr inbounds %struct.book, %struct.book* %8, i64 0, i32 1, i64 0
  %11 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* %9, i8* nonnull %10) #4
  %12 = tail call noalias align 16 dereferenceable_or_null(40) i8* @malloc(i64 40) #4
  %13 = bitcast i8* %12 to %struct.book*
  %14 = getelementptr inbounds %struct.book, %struct.book* %8, i64 0, i32 2
  %15 = bitcast %struct.book** %14 to i8**
  store i8* %12, i8** %15, align 8, !tbaa !9
  %16 = add nuw nsw i32 %7, 1
  %17 = load i32, i32* @m, align 4, !tbaa !5
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %6, label %19, !llvm.loop !12

19:                                               ; preds = %6
  %20 = bitcast i8* %12 to %struct.book*
  br label %21

21:                                               ; preds = %19, %0
  %22 = phi %struct.book* [ %3, %0 ], [ %20, %19 ]
  %23 = getelementptr inbounds %struct.book, %struct.book* %22, i64 0, i32 0
  %24 = getelementptr inbounds %struct.book, %struct.book* %22, i64 0, i32 1, i64 0
  %25 = tail call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32* %23, i8* nonnull %24) #4
  %26 = getelementptr inbounds %struct.book, %struct.book* %22, i64 0, i32 2
  store %struct.book* null, %struct.book** %26, align 8, !tbaa !9
  %27 = icmp eq i8* %2, null
  br i1 %27, label %203, label %28

28:                                               ; preds = %21, %173
  %29 = phi i32 [ %174, %173 ], [ 0, %21 ]
  %30 = phi i32 [ %175, %173 ], [ 0, %21 ]
  %31 = phi i32 [ %176, %173 ], [ 0, %21 ]
  %32 = phi i32 [ %177, %173 ], [ 0, %21 ]
  %33 = phi i32 [ %178, %173 ], [ 0, %21 ]
  %34 = phi i32 [ %179, %173 ], [ 0, %21 ]
  %35 = phi i32 [ %180, %173 ], [ 0, %21 ]
  %36 = phi i32 [ %181, %173 ], [ 0, %21 ]
  %37 = phi i32 [ %182, %173 ], [ 0, %21 ]
  %38 = phi i32 [ %183, %173 ], [ 0, %21 ]
  %39 = phi i32 [ %184, %173 ], [ 0, %21 ]
  %40 = phi i32 [ %185, %173 ], [ 0, %21 ]
  %41 = phi i32 [ %186, %173 ], [ 0, %21 ]
  %42 = phi i32 [ %187, %173 ], [ 0, %21 ]
  %43 = phi i32 [ %188, %173 ], [ 0, %21 ]
  %44 = phi i32 [ %189, %173 ], [ 0, %21 ]
  %45 = phi i32 [ %190, %173 ], [ 0, %21 ]
  %46 = phi i32 [ %191, %173 ], [ 0, %21 ]
  %47 = phi i32 [ %192, %173 ], [ 0, %21 ]
  %48 = phi i32 [ %193, %173 ], [ 0, %21 ]
  %49 = phi i32 [ %194, %173 ], [ 0, %21 ]
  %50 = phi i32 [ %195, %173 ], [ 0, %21 ]
  %51 = phi i32 [ %196, %173 ], [ 0, %21 ]
  %52 = phi i32 [ %197, %173 ], [ 0, %21 ]
  %53 = phi i32 [ %198, %173 ], [ 0, %21 ]
  %54 = phi i32 [ %199, %173 ], [ 0, %21 ]
  %55 = phi %struct.book* [ %201, %173 ], [ %3, %21 ]
  %56 = getelementptr inbounds %struct.book, %struct.book* %55, i64 0, i32 1, i64 0
  store i32 0, i32* @i, align 4, !tbaa !5
  %57 = tail call i64 @strlen(i8* noundef nonnull %56) #5
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %173, label %59

59:                                               ; preds = %28, %142
  %60 = phi i32 [ %143, %142 ], [ %29, %28 ]
  %61 = phi i32 [ %144, %142 ], [ %30, %28 ]
  %62 = phi i32 [ %145, %142 ], [ %31, %28 ]
  %63 = phi i32 [ %146, %142 ], [ %32, %28 ]
  %64 = phi i32 [ %147, %142 ], [ %33, %28 ]
  %65 = phi i32 [ %148, %142 ], [ %34, %28 ]
  %66 = phi i32 [ %149, %142 ], [ %35, %28 ]
  %67 = phi i32 [ %150, %142 ], [ %36, %28 ]
  %68 = phi i32 [ %151, %142 ], [ %37, %28 ]
  %69 = phi i32 [ %152, %142 ], [ %38, %28 ]
  %70 = phi i32 [ %153, %142 ], [ %39, %28 ]
  %71 = phi i32 [ %154, %142 ], [ %40, %28 ]
  %72 = phi i32 [ %155, %142 ], [ %41, %28 ]
  %73 = phi i32 [ %156, %142 ], [ %42, %28 ]
  %74 = phi i32 [ %157, %142 ], [ %43, %28 ]
  %75 = phi i32 [ %158, %142 ], [ %44, %28 ]
  %76 = phi i32 [ %159, %142 ], [ %45, %28 ]
  %77 = phi i32 [ %160, %142 ], [ %46, %28 ]
  %78 = phi i32 [ %161, %142 ], [ %47, %28 ]
  %79 = phi i32 [ %162, %142 ], [ %48, %28 ]
  %80 = phi i32 [ %163, %142 ], [ %49, %28 ]
  %81 = phi i32 [ %164, %142 ], [ %50, %28 ]
  %82 = phi i32 [ %165, %142 ], [ %51, %28 ]
  %83 = phi i32 [ %166, %142 ], [ %52, %28 ]
  %84 = phi i32 [ %167, %142 ], [ %53, %28 ]
  %85 = phi i32 [ %168, %142 ], [ %54, %28 ]
  %86 = phi i64 [ %169, %142 ], [ 0, %28 ]
  %87 = getelementptr inbounds %struct.book, %struct.book* %55, i64 0, i32 1, i64 %86
  %88 = load i8, i8* %87, align 1, !tbaa !14
  %89 = sext i8 %88 to i32
  switch i32 %89, label %142 [
    i32 65, label %90
    i32 66, label %92
    i32 67, label %94
    i32 68, label %96
    i32 69, label %98
    i32 70, label %100
    i32 71, label %102
    i32 72, label %104
    i32 73, label %106
    i32 74, label %108
    i32 75, label %110
    i32 76, label %112
    i32 77, label %114
    i32 78, label %116
    i32 79, label %118
    i32 80, label %120
    i32 81, label %122
    i32 82, label %124
    i32 83, label %126
    i32 84, label %128
    i32 85, label %130
    i32 86, label %132
    i32 87, label %134
    i32 88, label %136
    i32 89, label %138
    i32 90, label %140
  ]

90:                                               ; preds = %59
  %91 = add nsw i32 %60, 1
  br label %142

92:                                               ; preds = %59
  %93 = add nsw i32 %61, 1
  br label %142

94:                                               ; preds = %59
  %95 = add nsw i32 %62, 1
  br label %142

96:                                               ; preds = %59
  %97 = add nsw i32 %63, 1
  br label %142

98:                                               ; preds = %59
  %99 = add nsw i32 %64, 1
  br label %142

100:                                              ; preds = %59
  %101 = add nsw i32 %65, 1
  br label %142

102:                                              ; preds = %59
  %103 = add nsw i32 %66, 1
  br label %142

104:                                              ; preds = %59
  %105 = add nsw i32 %67, 1
  br label %142

106:                                              ; preds = %59
  %107 = add nsw i32 %68, 1
  br label %142

108:                                              ; preds = %59
  %109 = add nsw i32 %69, 1
  br label %142

110:                                              ; preds = %59
  %111 = add nsw i32 %70, 1
  br label %142

112:                                              ; preds = %59
  %113 = add nsw i32 %71, 1
  br label %142

114:                                              ; preds = %59
  %115 = add nsw i32 %72, 1
  br label %142

116:                                              ; preds = %59
  %117 = add nsw i32 %73, 1
  br label %142

118:                                              ; preds = %59
  %119 = add nsw i32 %74, 1
  br label %142

120:                                              ; preds = %59
  %121 = add nsw i32 %75, 1
  br label %142

122:                                              ; preds = %59
  %123 = add nsw i32 %76, 1
  br label %142

124:                                              ; preds = %59
  %125 = add nsw i32 %77, 1
  br label %142

126:                                              ; preds = %59
  %127 = add nsw i32 %78, 1
  br label %142

128:                                              ; preds = %59
  %129 = add nsw i32 %79, 1
  br label %142

130:                                              ; preds = %59
  %131 = add nsw i32 %80, 1
  br label %142

132:                                              ; preds = %59
  %133 = add nsw i32 %81, 1
  br label %142

134:                                              ; preds = %59
  %135 = add nsw i32 %82, 1
  br label %142

136:                                              ; preds = %59
  %137 = add nsw i32 %83, 1
  br label %142

138:                                              ; preds = %59
  %139 = add nsw i32 %84, 1
  br label %142

140:                                              ; preds = %59
  %141 = add nsw i32 %85, 1
  br label %142

142:                                              ; preds = %90, %92, %94, %96, %98, %100, %102, %104, %106, %108, %110, %112, %114, %116, %118, %120, %122, %124, %126, %128, %130, %132, %134, %136, %138, %140, %59
  %143 = phi i32 [ %60, %59 ], [ %60, %140 ], [ %60, %138 ], [ %60, %136 ], [ %60, %134 ], [ %60, %132 ], [ %60, %130 ], [ %60, %128 ], [ %60, %126 ], [ %60, %124 ], [ %60, %122 ], [ %60, %120 ], [ %60, %118 ], [ %60, %116 ], [ %60, %114 ], [ %60, %112 ], [ %60, %110 ], [ %60, %108 ], [ %60, %106 ], [ %60, %104 ], [ %60, %102 ], [ %60, %100 ], [ %60, %98 ], [ %60, %96 ], [ %60, %94 ], [ %60, %92 ], [ %91, %90 ]
  %144 = phi i32 [ %61, %59 ], [ %61, %140 ], [ %61, %138 ], [ %61, %136 ], [ %61, %134 ], [ %61, %132 ], [ %61, %130 ], [ %61, %128 ], [ %61, %126 ], [ %61, %124 ], [ %61, %122 ], [ %61, %120 ], [ %61, %118 ], [ %61, %116 ], [ %61, %114 ], [ %61, %112 ], [ %61, %110 ], [ %61, %108 ], [ %61, %106 ], [ %61, %104 ], [ %61, %102 ], [ %61, %100 ], [ %61, %98 ], [ %61, %96 ], [ %61, %94 ], [ %93, %92 ], [ %61, %90 ]
  %145 = phi i32 [ %62, %59 ], [ %62, %140 ], [ %62, %138 ], [ %62, %136 ], [ %62, %134 ], [ %62, %132 ], [ %62, %130 ], [ %62, %128 ], [ %62, %126 ], [ %62, %124 ], [ %62, %122 ], [ %62, %120 ], [ %62, %118 ], [ %62, %116 ], [ %62, %114 ], [ %62, %112 ], [ %62, %110 ], [ %62, %108 ], [ %62, %106 ], [ %62, %104 ], [ %62, %102 ], [ %62, %100 ], [ %62, %98 ], [ %62, %96 ], [ %95, %94 ], [ %62, %92 ], [ %62, %90 ]
  %146 = phi i32 [ %63, %59 ], [ %63, %140 ], [ %63, %138 ], [ %63, %136 ], [ %63, %134 ], [ %63, %132 ], [ %63, %130 ], [ %63, %128 ], [ %63, %126 ], [ %63, %124 ], [ %63, %122 ], [ %63, %120 ], [ %63, %118 ], [ %63, %116 ], [ %63, %114 ], [ %63, %112 ], [ %63, %110 ], [ %63, %108 ], [ %63, %106 ], [ %63, %104 ], [ %63, %102 ], [ %63, %100 ], [ %63, %98 ], [ %97, %96 ], [ %63, %94 ], [ %63, %92 ], [ %63, %90 ]
  %147 = phi i32 [ %64, %59 ], [ %64, %140 ], [ %64, %138 ], [ %64, %136 ], [ %64, %134 ], [ %64, %132 ], [ %64, %130 ], [ %64, %128 ], [ %64, %126 ], [ %64, %124 ], [ %64, %122 ], [ %64, %120 ], [ %64, %118 ], [ %64, %116 ], [ %64, %114 ], [ %64, %112 ], [ %64, %110 ], [ %64, %108 ], [ %64, %106 ], [ %64, %104 ], [ %64, %102 ], [ %64, %100 ], [ %99, %98 ], [ %64, %96 ], [ %64, %94 ], [ %64, %92 ], [ %64, %90 ]
  %148 = phi i32 [ %65, %59 ], [ %65, %140 ], [ %65, %138 ], [ %65, %136 ], [ %65, %134 ], [ %65, %132 ], [ %65, %130 ], [ %65, %128 ], [ %65, %126 ], [ %65, %124 ], [ %65, %122 ], [ %65, %120 ], [ %65, %118 ], [ %65, %116 ], [ %65, %114 ], [ %65, %112 ], [ %65, %110 ], [ %65, %108 ], [ %65, %106 ], [ %65, %104 ], [ %65, %102 ], [ %101, %100 ], [ %65, %98 ], [ %65, %96 ], [ %65, %94 ], [ %65, %92 ], [ %65, %90 ]
  %149 = phi i32 [ %66, %59 ], [ %66, %140 ], [ %66, %138 ], [ %66, %136 ], [ %66, %134 ], [ %66, %132 ], [ %66, %130 ], [ %66, %128 ], [ %66, %126 ], [ %66, %124 ], [ %66, %122 ], [ %66, %120 ], [ %66, %118 ], [ %66, %116 ], [ %66, %114 ], [ %66, %112 ], [ %66, %110 ], [ %66, %108 ], [ %66, %106 ], [ %66, %104 ], [ %103, %102 ], [ %66, %100 ], [ %66, %98 ], [ %66, %96 ], [ %66, %94 ], [ %66, %92 ], [ %66, %90 ]
  %150 = phi i32 [ %67, %59 ], [ %67, %140 ], [ %67, %138 ], [ %67, %136 ], [ %67, %134 ], [ %67, %132 ], [ %67, %130 ], [ %67, %128 ], [ %67, %126 ], [ %67, %124 ], [ %67, %122 ], [ %67, %120 ], [ %67, %118 ], [ %67, %116 ], [ %67, %114 ], [ %67, %112 ], [ %67, %110 ], [ %67, %108 ], [ %67, %106 ], [ %105, %104 ], [ %67, %102 ], [ %67, %100 ], [ %67, %98 ], [ %67, %96 ], [ %67, %94 ], [ %67, %92 ], [ %67, %90 ]
  %151 = phi i32 [ %68, %59 ], [ %68, %140 ], [ %68, %138 ], [ %68, %136 ], [ %68, %134 ], [ %68, %132 ], [ %68, %130 ], [ %68, %128 ], [ %68, %126 ], [ %68, %124 ], [ %68, %122 ], [ %68, %120 ], [ %68, %118 ], [ %68, %116 ], [ %68, %114 ], [ %68, %112 ], [ %68, %110 ], [ %68, %108 ], [ %107, %106 ], [ %68, %104 ], [ %68, %102 ], [ %68, %100 ], [ %68, %98 ], [ %68, %96 ], [ %68, %94 ], [ %68, %92 ], [ %68, %90 ]
  %152 = phi i32 [ %69, %59 ], [ %69, %140 ], [ %69, %138 ], [ %69, %136 ], [ %69, %134 ], [ %69, %132 ], [ %69, %130 ], [ %69, %128 ], [ %69, %126 ], [ %69, %124 ], [ %69, %122 ], [ %69, %120 ], [ %69, %118 ], [ %69, %116 ], [ %69, %114 ], [ %69, %112 ], [ %69, %110 ], [ %109, %108 ], [ %69, %106 ], [ %69, %104 ], [ %69, %102 ], [ %69, %100 ], [ %69, %98 ], [ %69, %96 ], [ %69, %94 ], [ %69, %92 ], [ %69, %90 ]
  %153 = phi i32 [ %70, %59 ], [ %70, %140 ], [ %70, %138 ], [ %70, %136 ], [ %70, %134 ], [ %70, %132 ], [ %70, %130 ], [ %70, %128 ], [ %70, %126 ], [ %70, %124 ], [ %70, %122 ], [ %70, %120 ], [ %70, %118 ], [ %70, %116 ], [ %70, %114 ], [ %70, %112 ], [ %111, %110 ], [ %70, %108 ], [ %70, %106 ], [ %70, %104 ], [ %70, %102 ], [ %70, %100 ], [ %70, %98 ], [ %70, %96 ], [ %70, %94 ], [ %70, %92 ], [ %70, %90 ]
  %154 = phi i32 [ %71, %59 ], [ %71, %140 ], [ %71, %138 ], [ %71, %136 ], [ %71, %134 ], [ %71, %132 ], [ %71, %130 ], [ %71, %128 ], [ %71, %126 ], [ %71, %124 ], [ %71, %122 ], [ %71, %120 ], [ %71, %118 ], [ %71, %116 ], [ %71, %114 ], [ %113, %112 ], [ %71, %110 ], [ %71, %108 ], [ %71, %106 ], [ %71, %104 ], [ %71, %102 ], [ %71, %100 ], [ %71, %98 ], [ %71, %96 ], [ %71, %94 ], [ %71, %92 ], [ %71, %90 ]
  %155 = phi i32 [ %72, %59 ], [ %72, %140 ], [ %72, %138 ], [ %72, %136 ], [ %72, %134 ], [ %72, %132 ], [ %72, %130 ], [ %72, %128 ], [ %72, %126 ], [ %72, %124 ], [ %72, %122 ], [ %72, %120 ], [ %72, %118 ], [ %72, %116 ], [ %115, %114 ], [ %72, %112 ], [ %72, %110 ], [ %72, %108 ], [ %72, %106 ], [ %72, %104 ], [ %72, %102 ], [ %72, %100 ], [ %72, %98 ], [ %72, %96 ], [ %72, %94 ], [ %72, %92 ], [ %72, %90 ]
  %156 = phi i32 [ %73, %59 ], [ %73, %140 ], [ %73, %138 ], [ %73, %136 ], [ %73, %134 ], [ %73, %132 ], [ %73, %130 ], [ %73, %128 ], [ %73, %126 ], [ %73, %124 ], [ %73, %122 ], [ %73, %120 ], [ %73, %118 ], [ %117, %116 ], [ %73, %114 ], [ %73, %112 ], [ %73, %110 ], [ %73, %108 ], [ %73, %106 ], [ %73, %104 ], [ %73, %102 ], [ %73, %100 ], [ %73, %98 ], [ %73, %96 ], [ %73, %94 ], [ %73, %92 ], [ %73, %90 ]
  %157 = phi i32 [ %74, %59 ], [ %74, %140 ], [ %74, %138 ], [ %74, %136 ], [ %74, %134 ], [ %74, %132 ], [ %74, %130 ], [ %74, %128 ], [ %74, %126 ], [ %74, %124 ], [ %74, %122 ], [ %74, %120 ], [ %119, %118 ], [ %74, %116 ], [ %74, %114 ], [ %74, %112 ], [ %74, %110 ], [ %74, %108 ], [ %74, %106 ], [ %74, %104 ], [ %74, %102 ], [ %74, %100 ], [ %74, %98 ], [ %74, %96 ], [ %74, %94 ], [ %74, %92 ], [ %74, %90 ]
  %158 = phi i32 [ %75, %59 ], [ %75, %140 ], [ %75, %138 ], [ %75, %136 ], [ %75, %134 ], [ %75, %132 ], [ %75, %130 ], [ %75, %128 ], [ %75, %126 ], [ %75, %124 ], [ %75, %122 ], [ %121, %120 ], [ %75, %118 ], [ %75, %116 ], [ %75, %114 ], [ %75, %112 ], [ %75, %110 ], [ %75, %108 ], [ %75, %106 ], [ %75, %104 ], [ %75, %102 ], [ %75, %100 ], [ %75, %98 ], [ %75, %96 ], [ %75, %94 ], [ %75, %92 ], [ %75, %90 ]
  %159 = phi i32 [ %76, %59 ], [ %76, %140 ], [ %76, %138 ], [ %76, %136 ], [ %76, %134 ], [ %76, %132 ], [ %76, %130 ], [ %76, %128 ], [ %76, %126 ], [ %76, %124 ], [ %123, %122 ], [ %76, %120 ], [ %76, %118 ], [ %76, %116 ], [ %76, %114 ], [ %76, %112 ], [ %76, %110 ], [ %76, %108 ], [ %76, %106 ], [ %76, %104 ], [ %76, %102 ], [ %76, %100 ], [ %76, %98 ], [ %76, %96 ], [ %76, %94 ], [ %76, %92 ], [ %76, %90 ]
  %160 = phi i32 [ %77, %59 ], [ %77, %140 ], [ %77, %138 ], [ %77, %136 ], [ %77, %134 ], [ %77, %132 ], [ %77, %130 ], [ %77, %128 ], [ %77, %126 ], [ %125, %124 ], [ %77, %122 ], [ %77, %120 ], [ %77, %118 ], [ %77, %116 ], [ %77, %114 ], [ %77, %112 ], [ %77, %110 ], [ %77, %108 ], [ %77, %106 ], [ %77, %104 ], [ %77, %102 ], [ %77, %100 ], [ %77, %98 ], [ %77, %96 ], [ %77, %94 ], [ %77, %92 ], [ %77, %90 ]
  %161 = phi i32 [ %78, %59 ], [ %78, %140 ], [ %78, %138 ], [ %78, %136 ], [ %78, %134 ], [ %78, %132 ], [ %78, %130 ], [ %78, %128 ], [ %127, %126 ], [ %78, %124 ], [ %78, %122 ], [ %78, %120 ], [ %78, %118 ], [ %78, %116 ], [ %78, %114 ], [ %78, %112 ], [ %78, %110 ], [ %78, %108 ], [ %78, %106 ], [ %78, %104 ], [ %78, %102 ], [ %78, %100 ], [ %78, %98 ], [ %78, %96 ], [ %78, %94 ], [ %78, %92 ], [ %78, %90 ]
  %162 = phi i32 [ %79, %59 ], [ %79, %140 ], [ %79, %138 ], [ %79, %136 ], [ %79, %134 ], [ %79, %132 ], [ %79, %130 ], [ %129, %128 ], [ %79, %126 ], [ %79, %124 ], [ %79, %122 ], [ %79, %120 ], [ %79, %118 ], [ %79, %116 ], [ %79, %114 ], [ %79, %112 ], [ %79, %110 ], [ %79, %108 ], [ %79, %106 ], [ %79, %104 ], [ %79, %102 ], [ %79, %100 ], [ %79, %98 ], [ %79, %96 ], [ %79, %94 ], [ %79, %92 ], [ %79, %90 ]
  %163 = phi i32 [ %80, %59 ], [ %80, %140 ], [ %80, %138 ], [ %80, %136 ], [ %80, %134 ], [ %80, %132 ], [ %131, %130 ], [ %80, %128 ], [ %80, %126 ], [ %80, %124 ], [ %80, %122 ], [ %80, %120 ], [ %80, %118 ], [ %80, %116 ], [ %80, %114 ], [ %80, %112 ], [ %80, %110 ], [ %80, %108 ], [ %80, %106 ], [ %80, %104 ], [ %80, %102 ], [ %80, %100 ], [ %80, %98 ], [ %80, %96 ], [ %80, %94 ], [ %80, %92 ], [ %80, %90 ]
  %164 = phi i32 [ %81, %59 ], [ %81, %140 ], [ %81, %138 ], [ %81, %136 ], [ %81, %134 ], [ %133, %132 ], [ %81, %130 ], [ %81, %128 ], [ %81, %126 ], [ %81, %124 ], [ %81, %122 ], [ %81, %120 ], [ %81, %118 ], [ %81, %116 ], [ %81, %114 ], [ %81, %112 ], [ %81, %110 ], [ %81, %108 ], [ %81, %106 ], [ %81, %104 ], [ %81, %102 ], [ %81, %100 ], [ %81, %98 ], [ %81, %96 ], [ %81, %94 ], [ %81, %92 ], [ %81, %90 ]
  %165 = phi i32 [ %82, %59 ], [ %82, %140 ], [ %82, %138 ], [ %82, %136 ], [ %135, %134 ], [ %82, %132 ], [ %82, %130 ], [ %82, %128 ], [ %82, %126 ], [ %82, %124 ], [ %82, %122 ], [ %82, %120 ], [ %82, %118 ], [ %82, %116 ], [ %82, %114 ], [ %82, %112 ], [ %82, %110 ], [ %82, %108 ], [ %82, %106 ], [ %82, %104 ], [ %82, %102 ], [ %82, %100 ], [ %82, %98 ], [ %82, %96 ], [ %82, %94 ], [ %82, %92 ], [ %82, %90 ]
  %166 = phi i32 [ %83, %59 ], [ %83, %140 ], [ %83, %138 ], [ %137, %136 ], [ %83, %134 ], [ %83, %132 ], [ %83, %130 ], [ %83, %128 ], [ %83, %126 ], [ %83, %124 ], [ %83, %122 ], [ %83, %120 ], [ %83, %118 ], [ %83, %116 ], [ %83, %114 ], [ %83, %112 ], [ %83, %110 ], [ %83, %108 ], [ %83, %106 ], [ %83, %104 ], [ %83, %102 ], [ %83, %100 ], [ %83, %98 ], [ %83, %96 ], [ %83, %94 ], [ %83, %92 ], [ %83, %90 ]
  %167 = phi i32 [ %84, %59 ], [ %84, %140 ], [ %139, %138 ], [ %84, %136 ], [ %84, %134 ], [ %84, %132 ], [ %84, %130 ], [ %84, %128 ], [ %84, %126 ], [ %84, %124 ], [ %84, %122 ], [ %84, %120 ], [ %84, %118 ], [ %84, %116 ], [ %84, %114 ], [ %84, %112 ], [ %84, %110 ], [ %84, %108 ], [ %84, %106 ], [ %84, %104 ], [ %84, %102 ], [ %84, %100 ], [ %84, %98 ], [ %84, %96 ], [ %84, %94 ], [ %84, %92 ], [ %84, %90 ]
  %168 = phi i32 [ %85, %59 ], [ %141, %140 ], [ %85, %138 ], [ %85, %136 ], [ %85, %134 ], [ %85, %132 ], [ %85, %130 ], [ %85, %128 ], [ %85, %126 ], [ %85, %124 ], [ %85, %122 ], [ %85, %120 ], [ %85, %118 ], [ %85, %116 ], [ %85, %114 ], [ %85, %112 ], [ %85, %110 ], [ %85, %108 ], [ %85, %106 ], [ %85, %104 ], [ %85, %102 ], [ %85, %100 ], [ %85, %98 ], [ %85, %96 ], [ %85, %94 ], [ %85, %92 ], [ %85, %90 ]
  %169 = add nuw nsw i64 %86, 1
  %170 = trunc i64 %169 to i32
  store i32 %170, i32* @i, align 4, !tbaa !5
  %171 = tail call i64 @strlen(i8* noundef nonnull %56) #5
  %172 = icmp ugt i64 %171, %169
  br i1 %172, label %59, label %173, !llvm.loop !15

173:                                              ; preds = %142, %28
  %174 = phi i32 [ %29, %28 ], [ %143, %142 ]
  %175 = phi i32 [ %30, %28 ], [ %144, %142 ]
  %176 = phi i32 [ %31, %28 ], [ %145, %142 ]
  %177 = phi i32 [ %32, %28 ], [ %146, %142 ]
  %178 = phi i32 [ %33, %28 ], [ %147, %142 ]
  %179 = phi i32 [ %34, %28 ], [ %148, %142 ]
  %180 = phi i32 [ %35, %28 ], [ %149, %142 ]
  %181 = phi i32 [ %36, %28 ], [ %150, %142 ]
  %182 = phi i32 [ %37, %28 ], [ %151, %142 ]
  %183 = phi i32 [ %38, %28 ], [ %152, %142 ]
  %184 = phi i32 [ %39, %28 ], [ %153, %142 ]
  %185 = phi i32 [ %40, %28 ], [ %154, %142 ]
  %186 = phi i32 [ %41, %28 ], [ %155, %142 ]
  %187 = phi i32 [ %42, %28 ], [ %156, %142 ]
  %188 = phi i32 [ %43, %28 ], [ %157, %142 ]
  %189 = phi i32 [ %44, %28 ], [ %158, %142 ]
  %190 = phi i32 [ %45, %28 ], [ %159, %142 ]
  %191 = phi i32 [ %46, %28 ], [ %160, %142 ]
  %192 = phi i32 [ %47, %28 ], [ %161, %142 ]
  %193 = phi i32 [ %48, %28 ], [ %162, %142 ]
  %194 = phi i32 [ %49, %28 ], [ %163, %142 ]
  %195 = phi i32 [ %50, %28 ], [ %164, %142 ]
  %196 = phi i32 [ %51, %28 ], [ %165, %142 ]
  %197 = phi i32 [ %52, %28 ], [ %166, %142 ]
  %198 = phi i32 [ %53, %28 ], [ %167, %142 ]
  %199 = phi i32 [ %54, %28 ], [ %168, %142 ]
  %200 = getelementptr inbounds %struct.book, %struct.book* %55, i64 0, i32 2
  %201 = load %struct.book*, %struct.book** %200, align 8, !tbaa !9
  %202 = icmp eq %struct.book* %201, null
  br i1 %202, label %203, label %28, !llvm.loop !16

203:                                              ; preds = %173, %21
  %204 = phi i32 [ 0, %21 ], [ %174, %173 ]
  %205 = phi i32 [ 0, %21 ], [ %175, %173 ]
  %206 = phi i32 [ 0, %21 ], [ %176, %173 ]
  %207 = phi i32 [ 0, %21 ], [ %177, %173 ]
  %208 = phi i32 [ 0, %21 ], [ %178, %173 ]
  %209 = phi i32 [ 0, %21 ], [ %179, %173 ]
  %210 = phi i32 [ 0, %21 ], [ %180, %173 ]
  %211 = phi i32 [ 0, %21 ], [ %181, %173 ]
  %212 = phi i32 [ 0, %21 ], [ %182, %173 ]
  %213 = phi i32 [ 0, %21 ], [ %183, %173 ]
  %214 = phi i32 [ 0, %21 ], [ %184, %173 ]
  %215 = phi i32 [ 0, %21 ], [ %185, %173 ]
  %216 = phi i32 [ 0, %21 ], [ %186, %173 ]
  %217 = phi i32 [ 0, %21 ], [ %187, %173 ]
  %218 = phi i32 [ 0, %21 ], [ %188, %173 ]
  %219 = phi i32 [ 0, %21 ], [ %189, %173 ]
  %220 = phi i32 [ 0, %21 ], [ %190, %173 ]
  %221 = phi i32 [ 0, %21 ], [ %191, %173 ]
  %222 = phi i32 [ 0, %21 ], [ %192, %173 ]
  %223 = phi i32 [ 0, %21 ], [ %193, %173 ]
  %224 = phi i32 [ 0, %21 ], [ %194, %173 ]
  %225 = phi i32 [ 0, %21 ], [ %195, %173 ]
  %226 = phi i32 [ 0, %21 ], [ %196, %173 ]
  %227 = phi i32 [ 0, %21 ], [ %197, %173 ]
  %228 = phi i32 [ 0, %21 ], [ %198, %173 ]
  %229 = phi i32 [ 0, %21 ], [ %199, %173 ]
  %230 = icmp sgt i32 %205, %204
  %231 = select i1 %230, i32 %205, i32 %204
  %232 = icmp sgt i32 %206, %231
  %233 = select i1 %232, i32 %206, i32 %231
  %234 = icmp sgt i32 %207, %233
  %235 = select i1 %234, i32 %207, i32 %233
  %236 = icmp sgt i32 %208, %235
  %237 = select i1 %236, i32 %208, i32 %235
  %238 = icmp sgt i32 %209, %237
  %239 = select i1 %238, i32 %209, i32 %237
  %240 = icmp sgt i32 %210, %239
  %241 = select i1 %240, i32 %210, i32 %239
  %242 = icmp sgt i32 %211, %241
  %243 = select i1 %242, i32 %211, i32 %241
  %244 = icmp sgt i32 %212, %243
  %245 = select i1 %244, i32 %212, i32 %243
  %246 = icmp sgt i32 %213, %245
  %247 = select i1 %246, i32 %213, i32 %245
  %248 = icmp sgt i32 %214, %247
  %249 = select i1 %248, i32 %214, i32 %247
  %250 = icmp sgt i32 %215, %249
  %251 = select i1 %250, i32 %215, i32 %249
  %252 = icmp sgt i32 %216, %251
  %253 = select i1 %252, i32 %216, i32 %251
  %254 = icmp sgt i32 %217, %253
  %255 = select i1 %254, i32 %217, i32 %253
  %256 = icmp sgt i32 %218, %255
  %257 = select i1 %256, i32 %218, i32 %255
  %258 = icmp sgt i32 %219, %257
  %259 = select i1 %258, i32 %219, i32 %257
  %260 = icmp sgt i32 %220, %259
  %261 = select i1 %260, i32 %220, i32 %259
  %262 = icmp sgt i32 %221, %261
  %263 = select i1 %262, i32 %221, i32 %261
  %264 = icmp sgt i32 %222, %263
  %265 = select i1 %264, i32 %222, i32 %263
  %266 = icmp sgt i32 %223, %265
  %267 = select i1 %266, i32 %223, i32 %265
  %268 = icmp sgt i32 %224, %267
  %269 = select i1 %268, i32 %224, i32 %267
  %270 = icmp sgt i32 %225, %269
  %271 = select i1 %270, i32 %225, i32 %269
  %272 = icmp sgt i32 %226, %271
  %273 = select i1 %272, i32 %226, i32 %271
  %274 = icmp sgt i32 %227, %273
  %275 = select i1 %274, i32 %227, i32 %273
  %276 = icmp sgt i32 %228, %275
  %277 = select i1 %276, i32 %228, i32 %275
  %278 = icmp sgt i32 %229, %277
  %279 = select i1 %278, i32 %229, i32 %277
  %280 = icmp eq i32 %204, %279
  br i1 %280, label %281, label %285

281:                                              ; preds = %365, %363, %361, %359, %357, %355, %353, %351, %349, %347, %345, %343, %341, %339, %337, %335, %333, %331, %329, %327, %325, %323, %321, %319, %285, %203
  %282 = phi i32 [ 0, %203 ], [ 1, %285 ], [ 2, %319 ], [ 3, %321 ], [ 4, %323 ], [ 5, %325 ], [ 6, %327 ], [ 7, %329 ], [ 8, %331 ], [ 9, %333 ], [ 10, %335 ], [ 11, %337 ], [ 12, %339 ], [ 13, %341 ], [ 14, %343 ], [ 15, %345 ], [ 16, %347 ], [ 17, %349 ], [ 18, %351 ], [ 19, %353 ], [ 20, %355 ], [ 21, %357 ], [ 22, %359 ], [ 23, %361 ], [ 24, %363 ], [ 25, %365 ]
  store i32 %282, i32* @i, align 4, !tbaa !5
  %283 = add nuw nsw i32 %282, 65
  %284 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %283)
  br label %287

285:                                              ; preds = %203
  %286 = icmp eq i32 %205, %279
  br i1 %286, label %281, label %319

287:                                              ; preds = %367, %281
  %288 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %279)
  br i1 %27, label %318, label %289

289:                                              ; preds = %287, %314
  %290 = phi %struct.book* [ %316, %314 ], [ %3, %287 ]
  %291 = getelementptr inbounds %struct.book, %struct.book* %290, i64 0, i32 1, i64 0
  %292 = getelementptr inbounds %struct.book, %struct.book* %290, i64 0, i32 0
  %293 = tail call i64 @strlen(i8* noundef nonnull %291) #5
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %314, label %295

295:                                              ; preds = %289
  %296 = load i32, i32* @i, align 4, !tbaa !5
  br label %297

297:                                              ; preds = %295, %309
  %298 = phi i32 [ %296, %295 ], [ %310, %309 ]
  %299 = phi i64 [ 0, %295 ], [ %311, %309 ]
  %300 = getelementptr inbounds %struct.book, %struct.book* %290, i64 0, i32 1, i64 %299
  %301 = load i8, i8* %300, align 1, !tbaa !14
  %302 = sext i8 %301 to i32
  %303 = add nsw i32 %298, 65
  %304 = icmp eq i32 %303, %302
  br i1 %304, label %305, label %309

305:                                              ; preds = %297
  %306 = load i32, i32* %292, align 8, !tbaa !17
  %307 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %306)
  %308 = load i32, i32* @i, align 4, !tbaa !5
  br label %309

309:                                              ; preds = %297, %305
  %310 = phi i32 [ %298, %297 ], [ %308, %305 ]
  %311 = add nuw i64 %299, 1
  %312 = tail call i64 @strlen(i8* noundef nonnull %291) #5
  %313 = icmp ugt i64 %312, %311
  br i1 %313, label %297, label %314, !llvm.loop !18

314:                                              ; preds = %309, %289
  %315 = getelementptr inbounds %struct.book, %struct.book* %290, i64 0, i32 2
  %316 = load %struct.book*, %struct.book** %315, align 8, !tbaa !9
  %317 = icmp eq %struct.book* %316, null
  br i1 %317, label %318, label %289, !llvm.loop !19

318:                                              ; preds = %314, %287
  ret i32 0

319:                                              ; preds = %285
  %320 = icmp eq i32 %206, %279
  br i1 %320, label %281, label %321

321:                                              ; preds = %319
  %322 = icmp eq i32 %207, %279
  br i1 %322, label %281, label %323

323:                                              ; preds = %321
  %324 = icmp eq i32 %208, %279
  br i1 %324, label %281, label %325

325:                                              ; preds = %323
  %326 = icmp eq i32 %209, %279
  br i1 %326, label %281, label %327

327:                                              ; preds = %325
  %328 = icmp eq i32 %210, %279
  br i1 %328, label %281, label %329

329:                                              ; preds = %327
  %330 = icmp eq i32 %211, %279
  br i1 %330, label %281, label %331

331:                                              ; preds = %329
  %332 = icmp eq i32 %212, %279
  br i1 %332, label %281, label %333

333:                                              ; preds = %331
  %334 = icmp eq i32 %213, %279
  br i1 %334, label %281, label %335

335:                                              ; preds = %333
  %336 = icmp eq i32 %214, %279
  br i1 %336, label %281, label %337

337:                                              ; preds = %335
  %338 = icmp eq i32 %215, %279
  br i1 %338, label %281, label %339

339:                                              ; preds = %337
  %340 = icmp eq i32 %216, %279
  br i1 %340, label %281, label %341

341:                                              ; preds = %339
  %342 = icmp eq i32 %217, %279
  br i1 %342, label %281, label %343

343:                                              ; preds = %341
  %344 = icmp eq i32 %218, %279
  br i1 %344, label %281, label %345

345:                                              ; preds = %343
  %346 = icmp eq i32 %219, %279
  br i1 %346, label %281, label %347

347:                                              ; preds = %345
  %348 = icmp eq i32 %220, %279
  br i1 %348, label %281, label %349

349:                                              ; preds = %347
  %350 = icmp eq i32 %221, %279
  br i1 %350, label %281, label %351

351:                                              ; preds = %349
  %352 = icmp eq i32 %222, %279
  br i1 %352, label %281, label %353

353:                                              ; preds = %351
  %354 = icmp eq i32 %223, %279
  br i1 %354, label %281, label %355

355:                                              ; preds = %353
  %356 = icmp eq i32 %224, %279
  br i1 %356, label %281, label %357

357:                                              ; preds = %355
  %358 = icmp eq i32 %225, %279
  br i1 %358, label %281, label %359

359:                                              ; preds = %357
  %360 = icmp eq i32 %226, %279
  br i1 %360, label %281, label %361

361:                                              ; preds = %359
  %362 = icmp eq i32 %227, %279
  br i1 %362, label %281, label %363

363:                                              ; preds = %361
  %364 = icmp eq i32 %228, %279
  br i1 %364, label %281, label %365

365:                                              ; preds = %363
  %366 = icmp slt i32 %229, %277
  br i1 %366, label %367, label %281

367:                                              ; preds = %365
  store i32 26, i32* @i, align 4, !tbaa !5
  br label %287
}

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

attributes #0 = { nofree nounwind sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { inaccessiblememonly mustprogress nofree nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !11, i64 32}
!10 = !{!"book", !6, i64 0, !7, i64 4, !11, i64 32}
!11 = !{!"any pointer", !7, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
!14 = !{!7, !7, i64 0}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !13}
!17 = !{!10, !6, i64 0}
!18 = distinct !{!18, !13}
!19 = distinct !{!19, !13}
