; ModuleID = 'source-C-CXX/1/914.c'
source_filename = "source-C-CXX/1/914.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%d %s\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1000 x i32], align 16
  %3 = alloca [1000 x [27 x i8]], align 16
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = bitcast [1000 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4000, i8* nonnull %5) #5
  %6 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 27000, i8* nonnull %6) #5
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %1)
  %8 = load i32, i32* %1, align 4, !tbaa !5
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %190

10:                                               ; preds = %0, %159
  %11 = phi i32 [ %160, %159 ], [ undef, %0 ]
  %12 = phi i32 [ %161, %159 ], [ undef, %0 ]
  %13 = phi i32 [ %162, %159 ], [ undef, %0 ]
  %14 = phi i32 [ %163, %159 ], [ undef, %0 ]
  %15 = phi i32 [ %164, %159 ], [ undef, %0 ]
  %16 = phi i32 [ %165, %159 ], [ undef, %0 ]
  %17 = phi i32 [ %166, %159 ], [ undef, %0 ]
  %18 = phi i32 [ %167, %159 ], [ undef, %0 ]
  %19 = phi i32 [ %168, %159 ], [ undef, %0 ]
  %20 = phi i32 [ %169, %159 ], [ undef, %0 ]
  %21 = phi i32 [ %170, %159 ], [ undef, %0 ]
  %22 = phi i32 [ %171, %159 ], [ undef, %0 ]
  %23 = phi i32 [ %172, %159 ], [ undef, %0 ]
  %24 = phi i32 [ %173, %159 ], [ undef, %0 ]
  %25 = phi i32 [ %174, %159 ], [ undef, %0 ]
  %26 = phi i32 [ %175, %159 ], [ undef, %0 ]
  %27 = phi i32 [ %176, %159 ], [ undef, %0 ]
  %28 = phi i32 [ %177, %159 ], [ undef, %0 ]
  %29 = phi i32 [ %178, %159 ], [ undef, %0 ]
  %30 = phi i32 [ %179, %159 ], [ undef, %0 ]
  %31 = phi i32 [ %180, %159 ], [ undef, %0 ]
  %32 = phi i32 [ %181, %159 ], [ undef, %0 ]
  %33 = phi i32 [ %182, %159 ], [ undef, %0 ]
  %34 = phi i32 [ %183, %159 ], [ undef, %0 ]
  %35 = phi i32 [ %184, %159 ], [ undef, %0 ]
  %36 = phi i32 [ %185, %159 ], [ undef, %0 ]
  %37 = phi i64 [ %186, %159 ], [ 0, %0 ]
  %38 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %37
  %39 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 %37, i64 0
  %40 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %38, i8* nonnull %39)
  %41 = call i64 @strlen(i8* noundef nonnull %39) #6
  %42 = trunc i64 %41 to i32
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %159

44:                                               ; preds = %10
  %45 = shl i64 %41, 32
  %46 = ashr exact i64 %45, 32
  br label %47

47:                                               ; preds = %44, %130
  %48 = phi i32 [ %11, %44 ], [ %131, %130 ]
  %49 = phi i32 [ %12, %44 ], [ %132, %130 ]
  %50 = phi i32 [ %13, %44 ], [ %133, %130 ]
  %51 = phi i32 [ %14, %44 ], [ %134, %130 ]
  %52 = phi i32 [ %15, %44 ], [ %135, %130 ]
  %53 = phi i32 [ %16, %44 ], [ %136, %130 ]
  %54 = phi i32 [ %17, %44 ], [ %137, %130 ]
  %55 = phi i32 [ %18, %44 ], [ %138, %130 ]
  %56 = phi i32 [ %19, %44 ], [ %139, %130 ]
  %57 = phi i32 [ %20, %44 ], [ %140, %130 ]
  %58 = phi i32 [ %21, %44 ], [ %141, %130 ]
  %59 = phi i32 [ %22, %44 ], [ %142, %130 ]
  %60 = phi i32 [ %23, %44 ], [ %143, %130 ]
  %61 = phi i32 [ %24, %44 ], [ %144, %130 ]
  %62 = phi i32 [ %25, %44 ], [ %145, %130 ]
  %63 = phi i32 [ %26, %44 ], [ %146, %130 ]
  %64 = phi i32 [ %27, %44 ], [ %147, %130 ]
  %65 = phi i32 [ %28, %44 ], [ %148, %130 ]
  %66 = phi i32 [ %29, %44 ], [ %149, %130 ]
  %67 = phi i32 [ %30, %44 ], [ %150, %130 ]
  %68 = phi i32 [ %31, %44 ], [ %151, %130 ]
  %69 = phi i32 [ %32, %44 ], [ %152, %130 ]
  %70 = phi i32 [ %33, %44 ], [ %153, %130 ]
  %71 = phi i32 [ %34, %44 ], [ %154, %130 ]
  %72 = phi i32 [ %35, %44 ], [ %155, %130 ]
  %73 = phi i32 [ %36, %44 ], [ %156, %130 ]
  %74 = phi i64 [ 0, %44 ], [ %157, %130 ]
  %75 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 %37, i64 %74
  %76 = load i8, i8* %75, align 1, !tbaa !9
  %77 = sext i8 %76 to i32
  switch i32 %77, label %130 [
    i32 65, label %78
    i32 66, label %80
    i32 67, label %82
    i32 68, label %84
    i32 69, label %86
    i32 70, label %88
    i32 71, label %90
    i32 72, label %92
    i32 73, label %94
    i32 74, label %96
    i32 75, label %98
    i32 76, label %100
    i32 77, label %102
    i32 78, label %104
    i32 79, label %106
    i32 80, label %108
    i32 81, label %110
    i32 82, label %112
    i32 83, label %114
    i32 84, label %116
    i32 85, label %118
    i32 86, label %120
    i32 87, label %122
    i32 88, label %124
    i32 89, label %126
    i32 90, label %128
  ]

78:                                               ; preds = %47
  %79 = add nsw i32 %73, 1
  br label %130

80:                                               ; preds = %47
  %81 = add nsw i32 %72, 1
  br label %130

82:                                               ; preds = %47
  %83 = add nsw i32 %71, 1
  br label %130

84:                                               ; preds = %47
  %85 = add nsw i32 %70, 1
  br label %130

86:                                               ; preds = %47
  %87 = add nsw i32 %69, 1
  br label %130

88:                                               ; preds = %47
  %89 = add nsw i32 %68, 1
  br label %130

90:                                               ; preds = %47
  %91 = add nsw i32 %67, 1
  br label %130

92:                                               ; preds = %47
  %93 = add nsw i32 %66, 1
  br label %130

94:                                               ; preds = %47
  %95 = add nsw i32 %65, 1
  br label %130

96:                                               ; preds = %47
  %97 = add nsw i32 %64, 1
  br label %130

98:                                               ; preds = %47
  %99 = add nsw i32 %63, 1
  br label %130

100:                                              ; preds = %47
  %101 = add nsw i32 %62, 1
  br label %130

102:                                              ; preds = %47
  %103 = add nsw i32 %61, 1
  br label %130

104:                                              ; preds = %47
  %105 = add nsw i32 %60, 1
  br label %130

106:                                              ; preds = %47
  %107 = add nsw i32 %59, 1
  br label %130

108:                                              ; preds = %47
  %109 = add nsw i32 %58, 1
  br label %130

110:                                              ; preds = %47
  %111 = add nsw i32 %57, 1
  br label %130

112:                                              ; preds = %47
  %113 = add nsw i32 %56, 1
  br label %130

114:                                              ; preds = %47
  %115 = add nsw i32 %55, 1
  br label %130

116:                                              ; preds = %47
  %117 = add nsw i32 %54, 1
  br label %130

118:                                              ; preds = %47
  %119 = add nsw i32 %53, 1
  br label %130

120:                                              ; preds = %47
  %121 = add nsw i32 %52, 1
  br label %130

122:                                              ; preds = %47
  %123 = add nsw i32 %51, 1
  br label %130

124:                                              ; preds = %47
  %125 = add nsw i32 %50, 1
  br label %130

126:                                              ; preds = %47
  %127 = add nsw i32 %49, 1
  br label %130

128:                                              ; preds = %47
  %129 = add nsw i32 %48, 1
  br label %130

130:                                              ; preds = %78, %80, %82, %84, %86, %88, %90, %92, %94, %96, %98, %100, %102, %104, %106, %108, %110, %112, %114, %116, %118, %120, %122, %124, %126, %128, %47
  %131 = phi i32 [ %48, %47 ], [ %129, %128 ], [ %48, %126 ], [ %48, %124 ], [ %48, %122 ], [ %48, %120 ], [ %48, %118 ], [ %48, %116 ], [ %48, %114 ], [ %48, %112 ], [ %48, %110 ], [ %48, %108 ], [ %48, %106 ], [ %48, %104 ], [ %48, %102 ], [ %48, %100 ], [ %48, %98 ], [ %48, %96 ], [ %48, %94 ], [ %48, %92 ], [ %48, %90 ], [ %48, %88 ], [ %48, %86 ], [ %48, %84 ], [ %48, %82 ], [ %48, %80 ], [ %48, %78 ]
  %132 = phi i32 [ %49, %47 ], [ %49, %128 ], [ %127, %126 ], [ %49, %124 ], [ %49, %122 ], [ %49, %120 ], [ %49, %118 ], [ %49, %116 ], [ %49, %114 ], [ %49, %112 ], [ %49, %110 ], [ %49, %108 ], [ %49, %106 ], [ %49, %104 ], [ %49, %102 ], [ %49, %100 ], [ %49, %98 ], [ %49, %96 ], [ %49, %94 ], [ %49, %92 ], [ %49, %90 ], [ %49, %88 ], [ %49, %86 ], [ %49, %84 ], [ %49, %82 ], [ %49, %80 ], [ %49, %78 ]
  %133 = phi i32 [ %50, %47 ], [ %50, %128 ], [ %50, %126 ], [ %125, %124 ], [ %50, %122 ], [ %50, %120 ], [ %50, %118 ], [ %50, %116 ], [ %50, %114 ], [ %50, %112 ], [ %50, %110 ], [ %50, %108 ], [ %50, %106 ], [ %50, %104 ], [ %50, %102 ], [ %50, %100 ], [ %50, %98 ], [ %50, %96 ], [ %50, %94 ], [ %50, %92 ], [ %50, %90 ], [ %50, %88 ], [ %50, %86 ], [ %50, %84 ], [ %50, %82 ], [ %50, %80 ], [ %50, %78 ]
  %134 = phi i32 [ %51, %47 ], [ %51, %128 ], [ %51, %126 ], [ %51, %124 ], [ %123, %122 ], [ %51, %120 ], [ %51, %118 ], [ %51, %116 ], [ %51, %114 ], [ %51, %112 ], [ %51, %110 ], [ %51, %108 ], [ %51, %106 ], [ %51, %104 ], [ %51, %102 ], [ %51, %100 ], [ %51, %98 ], [ %51, %96 ], [ %51, %94 ], [ %51, %92 ], [ %51, %90 ], [ %51, %88 ], [ %51, %86 ], [ %51, %84 ], [ %51, %82 ], [ %51, %80 ], [ %51, %78 ]
  %135 = phi i32 [ %52, %47 ], [ %52, %128 ], [ %52, %126 ], [ %52, %124 ], [ %52, %122 ], [ %121, %120 ], [ %52, %118 ], [ %52, %116 ], [ %52, %114 ], [ %52, %112 ], [ %52, %110 ], [ %52, %108 ], [ %52, %106 ], [ %52, %104 ], [ %52, %102 ], [ %52, %100 ], [ %52, %98 ], [ %52, %96 ], [ %52, %94 ], [ %52, %92 ], [ %52, %90 ], [ %52, %88 ], [ %52, %86 ], [ %52, %84 ], [ %52, %82 ], [ %52, %80 ], [ %52, %78 ]
  %136 = phi i32 [ %53, %47 ], [ %53, %128 ], [ %53, %126 ], [ %53, %124 ], [ %53, %122 ], [ %53, %120 ], [ %119, %118 ], [ %53, %116 ], [ %53, %114 ], [ %53, %112 ], [ %53, %110 ], [ %53, %108 ], [ %53, %106 ], [ %53, %104 ], [ %53, %102 ], [ %53, %100 ], [ %53, %98 ], [ %53, %96 ], [ %53, %94 ], [ %53, %92 ], [ %53, %90 ], [ %53, %88 ], [ %53, %86 ], [ %53, %84 ], [ %53, %82 ], [ %53, %80 ], [ %53, %78 ]
  %137 = phi i32 [ %54, %47 ], [ %54, %128 ], [ %54, %126 ], [ %54, %124 ], [ %54, %122 ], [ %54, %120 ], [ %54, %118 ], [ %117, %116 ], [ %54, %114 ], [ %54, %112 ], [ %54, %110 ], [ %54, %108 ], [ %54, %106 ], [ %54, %104 ], [ %54, %102 ], [ %54, %100 ], [ %54, %98 ], [ %54, %96 ], [ %54, %94 ], [ %54, %92 ], [ %54, %90 ], [ %54, %88 ], [ %54, %86 ], [ %54, %84 ], [ %54, %82 ], [ %54, %80 ], [ %54, %78 ]
  %138 = phi i32 [ %55, %47 ], [ %55, %128 ], [ %55, %126 ], [ %55, %124 ], [ %55, %122 ], [ %55, %120 ], [ %55, %118 ], [ %55, %116 ], [ %115, %114 ], [ %55, %112 ], [ %55, %110 ], [ %55, %108 ], [ %55, %106 ], [ %55, %104 ], [ %55, %102 ], [ %55, %100 ], [ %55, %98 ], [ %55, %96 ], [ %55, %94 ], [ %55, %92 ], [ %55, %90 ], [ %55, %88 ], [ %55, %86 ], [ %55, %84 ], [ %55, %82 ], [ %55, %80 ], [ %55, %78 ]
  %139 = phi i32 [ %56, %47 ], [ %56, %128 ], [ %56, %126 ], [ %56, %124 ], [ %56, %122 ], [ %56, %120 ], [ %56, %118 ], [ %56, %116 ], [ %56, %114 ], [ %113, %112 ], [ %56, %110 ], [ %56, %108 ], [ %56, %106 ], [ %56, %104 ], [ %56, %102 ], [ %56, %100 ], [ %56, %98 ], [ %56, %96 ], [ %56, %94 ], [ %56, %92 ], [ %56, %90 ], [ %56, %88 ], [ %56, %86 ], [ %56, %84 ], [ %56, %82 ], [ %56, %80 ], [ %56, %78 ]
  %140 = phi i32 [ %57, %47 ], [ %57, %128 ], [ %57, %126 ], [ %57, %124 ], [ %57, %122 ], [ %57, %120 ], [ %57, %118 ], [ %57, %116 ], [ %57, %114 ], [ %57, %112 ], [ %111, %110 ], [ %57, %108 ], [ %57, %106 ], [ %57, %104 ], [ %57, %102 ], [ %57, %100 ], [ %57, %98 ], [ %57, %96 ], [ %57, %94 ], [ %57, %92 ], [ %57, %90 ], [ %57, %88 ], [ %57, %86 ], [ %57, %84 ], [ %57, %82 ], [ %57, %80 ], [ %57, %78 ]
  %141 = phi i32 [ %58, %47 ], [ %58, %128 ], [ %58, %126 ], [ %58, %124 ], [ %58, %122 ], [ %58, %120 ], [ %58, %118 ], [ %58, %116 ], [ %58, %114 ], [ %58, %112 ], [ %58, %110 ], [ %109, %108 ], [ %58, %106 ], [ %58, %104 ], [ %58, %102 ], [ %58, %100 ], [ %58, %98 ], [ %58, %96 ], [ %58, %94 ], [ %58, %92 ], [ %58, %90 ], [ %58, %88 ], [ %58, %86 ], [ %58, %84 ], [ %58, %82 ], [ %58, %80 ], [ %58, %78 ]
  %142 = phi i32 [ %59, %47 ], [ %59, %128 ], [ %59, %126 ], [ %59, %124 ], [ %59, %122 ], [ %59, %120 ], [ %59, %118 ], [ %59, %116 ], [ %59, %114 ], [ %59, %112 ], [ %59, %110 ], [ %59, %108 ], [ %107, %106 ], [ %59, %104 ], [ %59, %102 ], [ %59, %100 ], [ %59, %98 ], [ %59, %96 ], [ %59, %94 ], [ %59, %92 ], [ %59, %90 ], [ %59, %88 ], [ %59, %86 ], [ %59, %84 ], [ %59, %82 ], [ %59, %80 ], [ %59, %78 ]
  %143 = phi i32 [ %60, %47 ], [ %60, %128 ], [ %60, %126 ], [ %60, %124 ], [ %60, %122 ], [ %60, %120 ], [ %60, %118 ], [ %60, %116 ], [ %60, %114 ], [ %60, %112 ], [ %60, %110 ], [ %60, %108 ], [ %60, %106 ], [ %105, %104 ], [ %60, %102 ], [ %60, %100 ], [ %60, %98 ], [ %60, %96 ], [ %60, %94 ], [ %60, %92 ], [ %60, %90 ], [ %60, %88 ], [ %60, %86 ], [ %60, %84 ], [ %60, %82 ], [ %60, %80 ], [ %60, %78 ]
  %144 = phi i32 [ %61, %47 ], [ %61, %128 ], [ %61, %126 ], [ %61, %124 ], [ %61, %122 ], [ %61, %120 ], [ %61, %118 ], [ %61, %116 ], [ %61, %114 ], [ %61, %112 ], [ %61, %110 ], [ %61, %108 ], [ %61, %106 ], [ %61, %104 ], [ %103, %102 ], [ %61, %100 ], [ %61, %98 ], [ %61, %96 ], [ %61, %94 ], [ %61, %92 ], [ %61, %90 ], [ %61, %88 ], [ %61, %86 ], [ %61, %84 ], [ %61, %82 ], [ %61, %80 ], [ %61, %78 ]
  %145 = phi i32 [ %62, %47 ], [ %62, %128 ], [ %62, %126 ], [ %62, %124 ], [ %62, %122 ], [ %62, %120 ], [ %62, %118 ], [ %62, %116 ], [ %62, %114 ], [ %62, %112 ], [ %62, %110 ], [ %62, %108 ], [ %62, %106 ], [ %62, %104 ], [ %62, %102 ], [ %101, %100 ], [ %62, %98 ], [ %62, %96 ], [ %62, %94 ], [ %62, %92 ], [ %62, %90 ], [ %62, %88 ], [ %62, %86 ], [ %62, %84 ], [ %62, %82 ], [ %62, %80 ], [ %62, %78 ]
  %146 = phi i32 [ %63, %47 ], [ %63, %128 ], [ %63, %126 ], [ %63, %124 ], [ %63, %122 ], [ %63, %120 ], [ %63, %118 ], [ %63, %116 ], [ %63, %114 ], [ %63, %112 ], [ %63, %110 ], [ %63, %108 ], [ %63, %106 ], [ %63, %104 ], [ %63, %102 ], [ %63, %100 ], [ %99, %98 ], [ %63, %96 ], [ %63, %94 ], [ %63, %92 ], [ %63, %90 ], [ %63, %88 ], [ %63, %86 ], [ %63, %84 ], [ %63, %82 ], [ %63, %80 ], [ %63, %78 ]
  %147 = phi i32 [ %64, %47 ], [ %64, %128 ], [ %64, %126 ], [ %64, %124 ], [ %64, %122 ], [ %64, %120 ], [ %64, %118 ], [ %64, %116 ], [ %64, %114 ], [ %64, %112 ], [ %64, %110 ], [ %64, %108 ], [ %64, %106 ], [ %64, %104 ], [ %64, %102 ], [ %64, %100 ], [ %64, %98 ], [ %97, %96 ], [ %64, %94 ], [ %64, %92 ], [ %64, %90 ], [ %64, %88 ], [ %64, %86 ], [ %64, %84 ], [ %64, %82 ], [ %64, %80 ], [ %64, %78 ]
  %148 = phi i32 [ %65, %47 ], [ %65, %128 ], [ %65, %126 ], [ %65, %124 ], [ %65, %122 ], [ %65, %120 ], [ %65, %118 ], [ %65, %116 ], [ %65, %114 ], [ %65, %112 ], [ %65, %110 ], [ %65, %108 ], [ %65, %106 ], [ %65, %104 ], [ %65, %102 ], [ %65, %100 ], [ %65, %98 ], [ %65, %96 ], [ %95, %94 ], [ %65, %92 ], [ %65, %90 ], [ %65, %88 ], [ %65, %86 ], [ %65, %84 ], [ %65, %82 ], [ %65, %80 ], [ %65, %78 ]
  %149 = phi i32 [ %66, %47 ], [ %66, %128 ], [ %66, %126 ], [ %66, %124 ], [ %66, %122 ], [ %66, %120 ], [ %66, %118 ], [ %66, %116 ], [ %66, %114 ], [ %66, %112 ], [ %66, %110 ], [ %66, %108 ], [ %66, %106 ], [ %66, %104 ], [ %66, %102 ], [ %66, %100 ], [ %66, %98 ], [ %66, %96 ], [ %66, %94 ], [ %93, %92 ], [ %66, %90 ], [ %66, %88 ], [ %66, %86 ], [ %66, %84 ], [ %66, %82 ], [ %66, %80 ], [ %66, %78 ]
  %150 = phi i32 [ %67, %47 ], [ %67, %128 ], [ %67, %126 ], [ %67, %124 ], [ %67, %122 ], [ %67, %120 ], [ %67, %118 ], [ %67, %116 ], [ %67, %114 ], [ %67, %112 ], [ %67, %110 ], [ %67, %108 ], [ %67, %106 ], [ %67, %104 ], [ %67, %102 ], [ %67, %100 ], [ %67, %98 ], [ %67, %96 ], [ %67, %94 ], [ %67, %92 ], [ %91, %90 ], [ %67, %88 ], [ %67, %86 ], [ %67, %84 ], [ %67, %82 ], [ %67, %80 ], [ %67, %78 ]
  %151 = phi i32 [ %68, %47 ], [ %68, %128 ], [ %68, %126 ], [ %68, %124 ], [ %68, %122 ], [ %68, %120 ], [ %68, %118 ], [ %68, %116 ], [ %68, %114 ], [ %68, %112 ], [ %68, %110 ], [ %68, %108 ], [ %68, %106 ], [ %68, %104 ], [ %68, %102 ], [ %68, %100 ], [ %68, %98 ], [ %68, %96 ], [ %68, %94 ], [ %68, %92 ], [ %68, %90 ], [ %89, %88 ], [ %68, %86 ], [ %68, %84 ], [ %68, %82 ], [ %68, %80 ], [ %68, %78 ]
  %152 = phi i32 [ %69, %47 ], [ %69, %128 ], [ %69, %126 ], [ %69, %124 ], [ %69, %122 ], [ %69, %120 ], [ %69, %118 ], [ %69, %116 ], [ %69, %114 ], [ %69, %112 ], [ %69, %110 ], [ %69, %108 ], [ %69, %106 ], [ %69, %104 ], [ %69, %102 ], [ %69, %100 ], [ %69, %98 ], [ %69, %96 ], [ %69, %94 ], [ %69, %92 ], [ %69, %90 ], [ %69, %88 ], [ %87, %86 ], [ %69, %84 ], [ %69, %82 ], [ %69, %80 ], [ %69, %78 ]
  %153 = phi i32 [ %70, %47 ], [ %70, %128 ], [ %70, %126 ], [ %70, %124 ], [ %70, %122 ], [ %70, %120 ], [ %70, %118 ], [ %70, %116 ], [ %70, %114 ], [ %70, %112 ], [ %70, %110 ], [ %70, %108 ], [ %70, %106 ], [ %70, %104 ], [ %70, %102 ], [ %70, %100 ], [ %70, %98 ], [ %70, %96 ], [ %70, %94 ], [ %70, %92 ], [ %70, %90 ], [ %70, %88 ], [ %70, %86 ], [ %85, %84 ], [ %70, %82 ], [ %70, %80 ], [ %70, %78 ]
  %154 = phi i32 [ %71, %47 ], [ %71, %128 ], [ %71, %126 ], [ %71, %124 ], [ %71, %122 ], [ %71, %120 ], [ %71, %118 ], [ %71, %116 ], [ %71, %114 ], [ %71, %112 ], [ %71, %110 ], [ %71, %108 ], [ %71, %106 ], [ %71, %104 ], [ %71, %102 ], [ %71, %100 ], [ %71, %98 ], [ %71, %96 ], [ %71, %94 ], [ %71, %92 ], [ %71, %90 ], [ %71, %88 ], [ %71, %86 ], [ %71, %84 ], [ %83, %82 ], [ %71, %80 ], [ %71, %78 ]
  %155 = phi i32 [ %72, %47 ], [ %72, %128 ], [ %72, %126 ], [ %72, %124 ], [ %72, %122 ], [ %72, %120 ], [ %72, %118 ], [ %72, %116 ], [ %72, %114 ], [ %72, %112 ], [ %72, %110 ], [ %72, %108 ], [ %72, %106 ], [ %72, %104 ], [ %72, %102 ], [ %72, %100 ], [ %72, %98 ], [ %72, %96 ], [ %72, %94 ], [ %72, %92 ], [ %72, %90 ], [ %72, %88 ], [ %72, %86 ], [ %72, %84 ], [ %72, %82 ], [ %81, %80 ], [ %72, %78 ]
  %156 = phi i32 [ %73, %47 ], [ %73, %128 ], [ %73, %126 ], [ %73, %124 ], [ %73, %122 ], [ %73, %120 ], [ %73, %118 ], [ %73, %116 ], [ %73, %114 ], [ %73, %112 ], [ %73, %110 ], [ %73, %108 ], [ %73, %106 ], [ %73, %104 ], [ %73, %102 ], [ %73, %100 ], [ %73, %98 ], [ %73, %96 ], [ %73, %94 ], [ %73, %92 ], [ %73, %90 ], [ %73, %88 ], [ %73, %86 ], [ %73, %84 ], [ %73, %82 ], [ %73, %80 ], [ %79, %78 ]
  %157 = add nuw nsw i64 %74, 1
  %158 = icmp eq i64 %157, %46
  br i1 %158, label %159, label %47, !llvm.loop !10

159:                                              ; preds = %130, %10
  %160 = phi i32 [ %11, %10 ], [ %131, %130 ]
  %161 = phi i32 [ %12, %10 ], [ %132, %130 ]
  %162 = phi i32 [ %13, %10 ], [ %133, %130 ]
  %163 = phi i32 [ %14, %10 ], [ %134, %130 ]
  %164 = phi i32 [ %15, %10 ], [ %135, %130 ]
  %165 = phi i32 [ %16, %10 ], [ %136, %130 ]
  %166 = phi i32 [ %17, %10 ], [ %137, %130 ]
  %167 = phi i32 [ %18, %10 ], [ %138, %130 ]
  %168 = phi i32 [ %19, %10 ], [ %139, %130 ]
  %169 = phi i32 [ %20, %10 ], [ %140, %130 ]
  %170 = phi i32 [ %21, %10 ], [ %141, %130 ]
  %171 = phi i32 [ %22, %10 ], [ %142, %130 ]
  %172 = phi i32 [ %23, %10 ], [ %143, %130 ]
  %173 = phi i32 [ %24, %10 ], [ %144, %130 ]
  %174 = phi i32 [ %25, %10 ], [ %145, %130 ]
  %175 = phi i32 [ %26, %10 ], [ %146, %130 ]
  %176 = phi i32 [ %27, %10 ], [ %147, %130 ]
  %177 = phi i32 [ %28, %10 ], [ %148, %130 ]
  %178 = phi i32 [ %29, %10 ], [ %149, %130 ]
  %179 = phi i32 [ %30, %10 ], [ %150, %130 ]
  %180 = phi i32 [ %31, %10 ], [ %151, %130 ]
  %181 = phi i32 [ %32, %10 ], [ %152, %130 ]
  %182 = phi i32 [ %33, %10 ], [ %153, %130 ]
  %183 = phi i32 [ %34, %10 ], [ %154, %130 ]
  %184 = phi i32 [ %35, %10 ], [ %155, %130 ]
  %185 = phi i32 [ %36, %10 ], [ %156, %130 ]
  %186 = add nuw nsw i64 %37, 1
  %187 = load i32, i32* %1, align 4, !tbaa !5
  %188 = sext i32 %187 to i64
  %189 = icmp slt i64 %186, %188
  br i1 %189, label %10, label %190, !llvm.loop !12

190:                                              ; preds = %159, %0
  %191 = phi i32 [ undef, %0 ], [ %160, %159 ]
  %192 = phi i32 [ undef, %0 ], [ %161, %159 ]
  %193 = phi i32 [ undef, %0 ], [ %162, %159 ]
  %194 = phi i32 [ undef, %0 ], [ %163, %159 ]
  %195 = phi i32 [ undef, %0 ], [ %164, %159 ]
  %196 = phi i32 [ undef, %0 ], [ %165, %159 ]
  %197 = phi i32 [ undef, %0 ], [ %166, %159 ]
  %198 = phi i32 [ undef, %0 ], [ %167, %159 ]
  %199 = phi i32 [ undef, %0 ], [ %168, %159 ]
  %200 = phi i32 [ undef, %0 ], [ %169, %159 ]
  %201 = phi i32 [ undef, %0 ], [ %170, %159 ]
  %202 = phi i32 [ undef, %0 ], [ %171, %159 ]
  %203 = phi i32 [ undef, %0 ], [ %172, %159 ]
  %204 = phi i32 [ undef, %0 ], [ %173, %159 ]
  %205 = phi i32 [ undef, %0 ], [ %174, %159 ]
  %206 = phi i32 [ undef, %0 ], [ %175, %159 ]
  %207 = phi i32 [ undef, %0 ], [ %176, %159 ]
  %208 = phi i32 [ undef, %0 ], [ %177, %159 ]
  %209 = phi i32 [ undef, %0 ], [ %178, %159 ]
  %210 = phi i32 [ undef, %0 ], [ %179, %159 ]
  %211 = phi i32 [ undef, %0 ], [ %180, %159 ]
  %212 = phi i32 [ undef, %0 ], [ %181, %159 ]
  %213 = phi i32 [ undef, %0 ], [ %182, %159 ]
  %214 = phi i32 [ undef, %0 ], [ %183, %159 ]
  %215 = phi i32 [ undef, %0 ], [ %184, %159 ]
  %216 = phi i32 [ undef, %0 ], [ %185, %159 ]
  %217 = icmp sgt i32 %215, %216
  %218 = select i1 %217, i32 %215, i32 %216
  %219 = zext i1 %217 to i32
  %220 = icmp sgt i32 %214, %218
  %221 = select i1 %220, i32 %214, i32 %218
  %222 = select i1 %220, i32 2, i32 %219
  %223 = icmp sgt i32 %213, %221
  %224 = select i1 %223, i32 %213, i32 %221
  %225 = select i1 %223, i32 3, i32 %222
  %226 = icmp sgt i32 %212, %224
  %227 = select i1 %226, i32 %212, i32 %224
  %228 = select i1 %226, i32 4, i32 %225
  %229 = icmp sgt i32 %211, %227
  %230 = select i1 %229, i32 %211, i32 %227
  %231 = select i1 %229, i32 5, i32 %228
  %232 = icmp sgt i32 %210, %230
  %233 = select i1 %232, i32 %210, i32 %230
  %234 = select i1 %232, i32 6, i32 %231
  %235 = icmp sgt i32 %209, %233
  %236 = select i1 %235, i32 %209, i32 %233
  %237 = select i1 %235, i32 7, i32 %234
  %238 = icmp sgt i32 %208, %236
  %239 = select i1 %238, i32 %208, i32 %236
  %240 = select i1 %238, i32 8, i32 %237
  %241 = icmp sgt i32 %207, %239
  %242 = select i1 %241, i32 %207, i32 %239
  %243 = select i1 %241, i32 9, i32 %240
  %244 = icmp sgt i32 %206, %242
  %245 = select i1 %244, i32 %206, i32 %242
  %246 = select i1 %244, i32 10, i32 %243
  %247 = icmp sgt i32 %205, %245
  %248 = select i1 %247, i32 %205, i32 %245
  %249 = select i1 %247, i32 11, i32 %246
  %250 = icmp sgt i32 %204, %248
  %251 = select i1 %250, i32 %204, i32 %248
  %252 = select i1 %250, i32 12, i32 %249
  %253 = icmp sgt i32 %203, %251
  %254 = select i1 %253, i32 %203, i32 %251
  %255 = select i1 %253, i32 13, i32 %252
  %256 = icmp sgt i32 %202, %254
  %257 = select i1 %256, i32 %202, i32 %254
  %258 = select i1 %256, i32 14, i32 %255
  %259 = icmp sgt i32 %201, %257
  %260 = select i1 %259, i32 %201, i32 %257
  %261 = select i1 %259, i32 15, i32 %258
  %262 = icmp sgt i32 %200, %260
  %263 = select i1 %262, i32 %200, i32 %260
  %264 = select i1 %262, i32 16, i32 %261
  %265 = icmp sgt i32 %199, %263
  %266 = select i1 %265, i32 %199, i32 %263
  %267 = select i1 %265, i32 17, i32 %264
  %268 = icmp sgt i32 %198, %266
  %269 = select i1 %268, i32 %198, i32 %266
  %270 = select i1 %268, i32 18, i32 %267
  %271 = icmp sgt i32 %197, %269
  %272 = select i1 %271, i32 %197, i32 %269
  %273 = select i1 %271, i32 19, i32 %270
  %274 = icmp sgt i32 %196, %272
  %275 = select i1 %274, i32 %196, i32 %272
  %276 = select i1 %274, i32 20, i32 %273
  %277 = icmp sgt i32 %195, %275
  %278 = select i1 %277, i32 %195, i32 %275
  %279 = select i1 %277, i32 21, i32 %276
  %280 = icmp sgt i32 %194, %278
  %281 = select i1 %280, i32 %194, i32 %278
  %282 = select i1 %280, i32 22, i32 %279
  %283 = icmp sgt i32 %193, %281
  %284 = select i1 %283, i32 %193, i32 %281
  %285 = select i1 %283, i32 23, i32 %282
  %286 = icmp sgt i32 %192, %284
  %287 = select i1 %286, i32 %192, i32 %284
  %288 = select i1 %286, i32 24, i32 %285
  %289 = icmp sgt i32 %191, %287
  %290 = select i1 %289, i32 25, i32 %288
  %291 = add i32 %290, -1
  %292 = icmp ult i32 %291, 25
  %293 = add i32 %290, 65
  %294 = select i1 %292, i32 %293, i32 65
  %295 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %294)
  %296 = load i32, i32* %1, align 4, !tbaa !5
  %297 = icmp sgt i32 %296, 0
  br i1 %297, label %298, label %362

298:                                              ; preds = %190
  %299 = zext i32 %296 to i64
  %300 = add i32 %290, -1
  %301 = icmp ult i32 %300, 25
  %302 = trunc i32 %300 to i8
  %303 = add i8 %302, 66
  %304 = select i1 %301, i8 %303, i8 65
  %305 = add i32 %290, -1
  %306 = icmp ult i32 %305, 25
  %307 = trunc i32 %305 to i8
  %308 = add i8 %307, 66
  %309 = select i1 %306, i8 %308, i8 65
  %310 = add i32 %290, -1
  %311 = icmp ult i32 %310, 25
  %312 = trunc i32 %310 to i8
  %313 = add i8 %312, 66
  %314 = select i1 %311, i8 %313, i8 65
  br label %315

315:                                              ; preds = %298, %358
  %316 = phi i64 [ 0, %298 ], [ %360, %358 ]
  %317 = phi i32 [ 0, %298 ], [ %359, %358 ]
  %318 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 %316, i64 0
  %319 = call i64 @strlen(i8* noundef nonnull %318) #6
  %320 = trunc i64 %319 to i32
  %321 = icmp sgt i32 %320, 0
  br i1 %321, label %322, label %358

322:                                              ; preds = %315
  %323 = shl i64 %319, 32
  %324 = and i64 %319, 1
  %325 = icmp eq i64 %323, 4294967296
  br i1 %325, label %347, label %326

326:                                              ; preds = %322
  %327 = ashr exact i64 %323, 32
  %328 = sub nsw i64 %327, %324
  br label %329

329:                                              ; preds = %329, %326
  %330 = phi i64 [ 0, %326 ], [ %344, %329 ]
  %331 = phi i32 [ %317, %326 ], [ %343, %329 ]
  %332 = phi i64 [ %328, %326 ], [ %345, %329 ]
  %333 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 %316, i64 %330
  %334 = load i8, i8* %333, align 1, !tbaa !9
  %335 = icmp eq i8 %334, %304
  %336 = zext i1 %335 to i32
  %337 = add nsw i32 %331, %336
  %338 = or i64 %330, 1
  %339 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 %316, i64 %338
  %340 = load i8, i8* %339, align 1, !tbaa !9
  %341 = icmp eq i8 %340, %309
  %342 = zext i1 %341 to i32
  %343 = add nsw i32 %337, %342
  %344 = add nuw nsw i64 %330, 2
  %345 = add i64 %332, -2
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %347, label %329, !llvm.loop !13

347:                                              ; preds = %329, %322
  %348 = phi i32 [ undef, %322 ], [ %343, %329 ]
  %349 = phi i64 [ 0, %322 ], [ %344, %329 ]
  %350 = phi i32 [ %317, %322 ], [ %343, %329 ]
  %351 = icmp eq i64 %324, 0
  br i1 %351, label %358, label %352

352:                                              ; preds = %347
  %353 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 %316, i64 %349
  %354 = load i8, i8* %353, align 1, !tbaa !9
  %355 = icmp eq i8 %354, %314
  %356 = zext i1 %355 to i32
  %357 = add nsw i32 %350, %356
  br label %358

358:                                              ; preds = %352, %347, %315
  %359 = phi i32 [ %317, %315 ], [ %348, %347 ], [ %357, %352 ]
  %360 = add nuw nsw i64 %316, 1
  %361 = icmp eq i64 %360, %299
  br i1 %361, label %362, label %315, !llvm.loop !14

362:                                              ; preds = %358, %190
  %363 = phi i32 [ 0, %190 ], [ %359, %358 ]
  %364 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %363)
  %365 = load i32, i32* %1, align 4, !tbaa !5
  %366 = icmp sgt i32 %365, 0
  br i1 %366, label %367, label %402

367:                                              ; preds = %362
  %368 = add i32 %290, -1
  %369 = icmp ult i32 %368, 25
  %370 = trunc i32 %368 to i8
  %371 = add i8 %370, 66
  %372 = select i1 %369, i8 %371, i8 65
  br label %373

373:                                              ; preds = %367, %397
  %374 = phi i32 [ %398, %397 ], [ %365, %367 ]
  %375 = phi i64 [ %399, %397 ], [ 0, %367 ]
  %376 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 %375, i64 0
  %377 = call i64 @strlen(i8* noundef nonnull %376) #6
  %378 = trunc i64 %377 to i32
  %379 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %375
  %380 = icmp sgt i32 %378, 0
  br i1 %380, label %381, label %397

381:                                              ; preds = %373
  %382 = shl i64 %377, 32
  %383 = ashr exact i64 %382, 32
  br label %384

384:                                              ; preds = %381, %392
  %385 = phi i64 [ 0, %381 ], [ %393, %392 ]
  %386 = getelementptr inbounds [1000 x [27 x i8]], [1000 x [27 x i8]]* %3, i64 0, i64 %375, i64 %385
  %387 = load i8, i8* %386, align 1, !tbaa !9
  %388 = icmp eq i8 %387, %372
  br i1 %388, label %389, label %392

389:                                              ; preds = %384
  %390 = load i32, i32* %379, align 4, !tbaa !5
  %391 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %390)
  br label %392

392:                                              ; preds = %384, %389
  %393 = add nuw nsw i64 %385, 1
  %394 = icmp eq i64 %393, %383
  br i1 %394, label %395, label %384, !llvm.loop !15

395:                                              ; preds = %392
  %396 = load i32, i32* %1, align 4, !tbaa !5
  br label %397

397:                                              ; preds = %395, %373
  %398 = phi i32 [ %396, %395 ], [ %374, %373 ]
  %399 = add nuw nsw i64 %375, 1
  %400 = sext i32 %398 to i64
  %401 = icmp slt i64 %399, %400
  br i1 %401, label %373, label %402, !llvm.loop !16

402:                                              ; preds = %397, %362
  call void @llvm.lifetime.end.p0i8(i64 27000, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4000, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  ret i32 0
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone sspstrong uwtable willreturn
define dso_local signext i8 @f(i32 %0) local_unnamed_addr #4 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 25
  %4 = trunc i32 %2 to i8
  %5 = add i8 %4, 66
  %6 = select i1 %3, i8 %5, i8 65
  ret i8 %6
}

attributes #0 = { nofree nounwind sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree norecurse nosync nounwind readnone sspstrong uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!7, !7, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
!15 = distinct !{!15, !11}
!16 = distinct !{!16, !11}
