; ModuleID = 'source-C-CXX/36/1163.c'
source_filename = "source-C-CXX/36/1163.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@__const.main.zm = private unnamed_addr constant [27 x i8] c"0abcdefghijklmnopqrstuvwxyz", align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@str = private unnamed_addr constant [3 x i8] c"no\00", align 1

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca [100001 x i8], align 16
  %3 = alloca [27 x i8], align 16
  %4 = alloca [27 x i32], align 16
  %5 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100001, i8* nonnull %6) #5
  %7 = getelementptr inbounds [27 x i8], [27 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 27, i8* nonnull %7) #5
  %8 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %1)
  %9 = bitcast [27 x i32]* %4 to i8*
  %10 = load i32, i32* %1, align 4, !tbaa !5
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %131

12:                                               ; preds = %0
  %13 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 26
  %14 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 25
  %15 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 24
  %16 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 23
  %17 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 22
  %18 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 21
  %19 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 20
  %20 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 19
  %21 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 18
  %22 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 17
  %23 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 16
  %24 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 15
  %25 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 14
  %26 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 13
  %27 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 12
  %28 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 11
  %29 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 10
  %30 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 9
  %31 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 8
  %32 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 7
  %33 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 6
  %34 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 5
  %35 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 4
  %36 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 3
  %37 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 2
  %38 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 1
  br label %39

39:                                               ; preds = %12, %127
  %40 = phi i32 [ %128, %127 ], [ 0, %12 ]
  %41 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %6)
  call void @llvm.lifetime.start.p0i8(i64 108, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(108) %9, i8 0, i64 108, i1 false)
  %42 = load i8, i8* %6, align 16, !tbaa !9
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %182, %39
  %45 = phi i32 [ 0, %39 ], [ %195, %182 ]
  br label %77

46:                                               ; preds = %39, %182
  %47 = phi i32 [ %208, %182 ], [ 0, %39 ]
  %48 = phi i32 [ %183, %182 ], [ 0, %39 ]
  %49 = phi i32 [ %207, %182 ], [ 0, %39 ]
  %50 = phi i32 [ %184, %182 ], [ 0, %39 ]
  %51 = phi i32 [ %206, %182 ], [ 0, %39 ]
  %52 = phi i32 [ %185, %182 ], [ 0, %39 ]
  %53 = phi i32 [ %205, %182 ], [ 0, %39 ]
  %54 = phi i32 [ %186, %182 ], [ 0, %39 ]
  %55 = phi i32 [ %204, %182 ], [ 0, %39 ]
  %56 = phi i32 [ %187, %182 ], [ 0, %39 ]
  %57 = phi i32 [ %203, %182 ], [ 0, %39 ]
  %58 = phi i32 [ %188, %182 ], [ 0, %39 ]
  %59 = phi i32 [ %202, %182 ], [ 0, %39 ]
  %60 = phi i32 [ %189, %182 ], [ 0, %39 ]
  %61 = phi i32 [ %201, %182 ], [ 0, %39 ]
  %62 = phi i32 [ %190, %182 ], [ 0, %39 ]
  %63 = phi i32 [ %200, %182 ], [ 0, %39 ]
  %64 = phi i32 [ %191, %182 ], [ 0, %39 ]
  %65 = phi i32 [ %199, %182 ], [ 0, %39 ]
  %66 = phi i32 [ %192, %182 ], [ 0, %39 ]
  %67 = phi i32 [ %198, %182 ], [ 0, %39 ]
  %68 = phi i32 [ %193, %182 ], [ 0, %39 ]
  %69 = phi i32 [ %197, %182 ], [ 0, %39 ]
  %70 = phi i32 [ %194, %182 ], [ 0, %39 ]
  %71 = phi i32 [ %196, %182 ], [ 0, %39 ]
  %72 = phi i32 [ %195, %182 ], [ 0, %39 ]
  %73 = phi i64 [ %209, %182 ], [ 0, %39 ]
  %74 = phi i8 [ %211, %182 ], [ %42, %39 ]
  switch i8 %74, label %182 [
    i8 97, label %75
    i8 98, label %132
    i8 99, label %134
    i8 100, label %136
    i8 101, label %138
    i8 102, label %140
    i8 103, label %142
    i8 104, label %144
    i8 105, label %146
    i8 106, label %148
    i8 107, label %150
    i8 108, label %152
    i8 109, label %154
    i8 110, label %156
    i8 111, label %158
    i8 112, label %160
    i8 113, label %162
    i8 114, label %164
    i8 115, label %166
    i8 116, label %168
    i8 117, label %170
    i8 118, label %172
    i8 119, label %174
    i8 120, label %176
    i8 121, label %178
    i8 122, label %180
  ]

75:                                               ; preds = %46
  %76 = add nsw i32 %72, 1
  store i32 %76, i32* %38, align 4, !tbaa !5
  br label %182

77:                                               ; preds = %226, %44
  %78 = phi i32 [ %45, %44 ], [ %228, %226 ]
  %79 = phi i64 [ 1, %44 ], [ %224, %226 ]
  %80 = phi i32 [ 0, %44 ], [ %223, %226 ]
  %81 = phi i32 [ 0, %44 ], [ %222, %226 ]
  %82 = icmp eq i32 %78, 1
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = add nsw i32 %81, 1
  br label %91

85:                                               ; preds = %77
  %86 = getelementptr inbounds [27 x i8], [27 x i8]* @__const.main.zm, i64 0, i64 %79
  %87 = load i8, i8* %86, align 1, !tbaa !9
  %88 = sext i32 %80 to i64
  %89 = getelementptr inbounds [27 x i8], [27 x i8]* %3, i64 0, i64 %88
  store i8 %87, i8* %89, align 1, !tbaa !9
  %90 = add nsw i32 %80, 1
  br label %91

91:                                               ; preds = %83, %85
  %92 = phi i32 [ %84, %83 ], [ %81, %85 ]
  %93 = phi i32 [ %80, %83 ], [ %90, %85 ]
  %94 = add nuw nsw i64 %79, 1
  %95 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4, !tbaa !5
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %215, label %213

98:                                               ; preds = %221
  %99 = icmp eq i32 %222, 26
  br i1 %99, label %125, label %100

100:                                              ; preds = %98
  %101 = xor i1 %43, true
  %102 = icmp sgt i32 %223, 0
  %103 = select i1 %101, i1 %102, i1 false
  br i1 %103, label %104, label %127

104:                                              ; preds = %100
  %105 = zext i32 %223 to i64
  br label %106

106:                                              ; preds = %104, %117
  %107 = phi i64 [ 0, %104 ], [ %118, %117 ]
  %108 = phi i8 [ %42, %104 ], [ %120, %117 ]
  br label %111

109:                                              ; preds = %111
  %110 = icmp eq i64 %116, %105
  br i1 %110, label %117, label %111, !llvm.loop !10

111:                                              ; preds = %106, %109
  %112 = phi i64 [ 0, %106 ], [ %116, %109 ]
  %113 = getelementptr inbounds [27 x i8], [27 x i8]* %3, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1, !tbaa !9
  %115 = icmp eq i8 %108, %114
  %116 = add nuw nsw i64 %112, 1
  br i1 %115, label %122, label %109

117:                                              ; preds = %109
  %118 = add nuw i64 %107, 1
  %119 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 %118
  %120 = load i8, i8* %119, align 1, !tbaa !9
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %127, label %106, !llvm.loop !12

122:                                              ; preds = %111
  %123 = sext i8 %108 to i32
  %124 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %123)
  br label %127

125:                                              ; preds = %98
  %126 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @str, i64 0, i64 0))
  br label %127

127:                                              ; preds = %117, %100, %122, %125
  call void @llvm.lifetime.end.p0i8(i64 108, i8* nonnull %9) #5
  %128 = add nuw nsw i32 %40, 1
  %129 = load i32, i32* %1, align 4, !tbaa !5
  %130 = icmp slt i32 %128, %129
  br i1 %130, label %39, label %131, !llvm.loop !13

131:                                              ; preds = %127, %0
  call void @llvm.lifetime.end.p0i8(i64 27, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 100001, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  ret i32 0

132:                                              ; preds = %46
  %133 = add nsw i32 %71, 1
  store i32 %133, i32* %37, align 8, !tbaa !5
  br label %182

134:                                              ; preds = %46
  %135 = add nsw i32 %70, 1
  store i32 %135, i32* %36, align 4, !tbaa !5
  br label %182

136:                                              ; preds = %46
  %137 = add nsw i32 %69, 1
  store i32 %137, i32* %35, align 16, !tbaa !5
  br label %182

138:                                              ; preds = %46
  %139 = add nsw i32 %68, 1
  store i32 %139, i32* %34, align 4, !tbaa !5
  br label %182

140:                                              ; preds = %46
  %141 = add nsw i32 %67, 1
  store i32 %141, i32* %33, align 8, !tbaa !5
  br label %182

142:                                              ; preds = %46
  %143 = add nsw i32 %66, 1
  store i32 %143, i32* %32, align 4, !tbaa !5
  br label %182

144:                                              ; preds = %46
  %145 = add nsw i32 %65, 1
  store i32 %145, i32* %31, align 16, !tbaa !5
  br label %182

146:                                              ; preds = %46
  %147 = add nsw i32 %64, 1
  store i32 %147, i32* %30, align 4, !tbaa !5
  br label %182

148:                                              ; preds = %46
  %149 = add nsw i32 %63, 1
  store i32 %149, i32* %29, align 8, !tbaa !5
  br label %182

150:                                              ; preds = %46
  %151 = add nsw i32 %62, 1
  store i32 %151, i32* %28, align 4, !tbaa !5
  br label %182

152:                                              ; preds = %46
  %153 = add nsw i32 %61, 1
  store i32 %153, i32* %27, align 16, !tbaa !5
  br label %182

154:                                              ; preds = %46
  %155 = add nsw i32 %60, 1
  store i32 %155, i32* %26, align 4, !tbaa !5
  br label %182

156:                                              ; preds = %46
  %157 = add nsw i32 %59, 1
  store i32 %157, i32* %25, align 8, !tbaa !5
  br label %182

158:                                              ; preds = %46
  %159 = add nsw i32 %58, 1
  store i32 %159, i32* %24, align 4, !tbaa !5
  br label %182

160:                                              ; preds = %46
  %161 = add nsw i32 %57, 1
  store i32 %161, i32* %23, align 16, !tbaa !5
  br label %182

162:                                              ; preds = %46
  %163 = add nsw i32 %56, 1
  store i32 %163, i32* %22, align 4, !tbaa !5
  br label %182

164:                                              ; preds = %46
  %165 = add nsw i32 %55, 1
  store i32 %165, i32* %21, align 8, !tbaa !5
  br label %182

166:                                              ; preds = %46
  %167 = add nsw i32 %54, 1
  store i32 %167, i32* %20, align 4, !tbaa !5
  br label %182

168:                                              ; preds = %46
  %169 = add nsw i32 %53, 1
  store i32 %169, i32* %19, align 16, !tbaa !5
  br label %182

170:                                              ; preds = %46
  %171 = add nsw i32 %52, 1
  store i32 %171, i32* %18, align 4, !tbaa !5
  br label %182

172:                                              ; preds = %46
  %173 = add nsw i32 %51, 1
  store i32 %173, i32* %17, align 8, !tbaa !5
  br label %182

174:                                              ; preds = %46
  %175 = add nsw i32 %50, 1
  store i32 %175, i32* %16, align 4, !tbaa !5
  br label %182

176:                                              ; preds = %46
  %177 = add nsw i32 %49, 1
  store i32 %177, i32* %15, align 16, !tbaa !5
  br label %182

178:                                              ; preds = %46
  %179 = add nsw i32 %48, 1
  store i32 %179, i32* %14, align 4, !tbaa !5
  br label %182

180:                                              ; preds = %46
  %181 = add nsw i32 %47, 1
  store i32 %181, i32* %13, align 8, !tbaa !5
  br label %182

182:                                              ; preds = %46, %132, %75, %134, %136, %138, %140, %142, %144, %146, %148, %150, %152, %154, %156, %158, %160, %162, %164, %166, %168, %170, %172, %174, %176, %178, %180
  %183 = phi i32 [ %48, %180 ], [ %179, %178 ], [ %48, %176 ], [ %48, %174 ], [ %48, %172 ], [ %48, %170 ], [ %48, %168 ], [ %48, %166 ], [ %48, %164 ], [ %48, %162 ], [ %48, %160 ], [ %48, %158 ], [ %48, %156 ], [ %48, %154 ], [ %48, %152 ], [ %48, %150 ], [ %48, %148 ], [ %48, %146 ], [ %48, %144 ], [ %48, %142 ], [ %48, %140 ], [ %48, %138 ], [ %48, %136 ], [ %48, %134 ], [ %48, %75 ], [ %48, %132 ], [ %48, %46 ]
  %184 = phi i32 [ %50, %180 ], [ %50, %178 ], [ %50, %176 ], [ %175, %174 ], [ %50, %172 ], [ %50, %170 ], [ %50, %168 ], [ %50, %166 ], [ %50, %164 ], [ %50, %162 ], [ %50, %160 ], [ %50, %158 ], [ %50, %156 ], [ %50, %154 ], [ %50, %152 ], [ %50, %150 ], [ %50, %148 ], [ %50, %146 ], [ %50, %144 ], [ %50, %142 ], [ %50, %140 ], [ %50, %138 ], [ %50, %136 ], [ %50, %134 ], [ %50, %75 ], [ %50, %132 ], [ %50, %46 ]
  %185 = phi i32 [ %52, %180 ], [ %52, %178 ], [ %52, %176 ], [ %52, %174 ], [ %52, %172 ], [ %171, %170 ], [ %52, %168 ], [ %52, %166 ], [ %52, %164 ], [ %52, %162 ], [ %52, %160 ], [ %52, %158 ], [ %52, %156 ], [ %52, %154 ], [ %52, %152 ], [ %52, %150 ], [ %52, %148 ], [ %52, %146 ], [ %52, %144 ], [ %52, %142 ], [ %52, %140 ], [ %52, %138 ], [ %52, %136 ], [ %52, %134 ], [ %52, %75 ], [ %52, %132 ], [ %52, %46 ]
  %186 = phi i32 [ %54, %180 ], [ %54, %178 ], [ %54, %176 ], [ %54, %174 ], [ %54, %172 ], [ %54, %170 ], [ %54, %168 ], [ %167, %166 ], [ %54, %164 ], [ %54, %162 ], [ %54, %160 ], [ %54, %158 ], [ %54, %156 ], [ %54, %154 ], [ %54, %152 ], [ %54, %150 ], [ %54, %148 ], [ %54, %146 ], [ %54, %144 ], [ %54, %142 ], [ %54, %140 ], [ %54, %138 ], [ %54, %136 ], [ %54, %134 ], [ %54, %75 ], [ %54, %132 ], [ %54, %46 ]
  %187 = phi i32 [ %56, %180 ], [ %56, %178 ], [ %56, %176 ], [ %56, %174 ], [ %56, %172 ], [ %56, %170 ], [ %56, %168 ], [ %56, %166 ], [ %56, %164 ], [ %163, %162 ], [ %56, %160 ], [ %56, %158 ], [ %56, %156 ], [ %56, %154 ], [ %56, %152 ], [ %56, %150 ], [ %56, %148 ], [ %56, %146 ], [ %56, %144 ], [ %56, %142 ], [ %56, %140 ], [ %56, %138 ], [ %56, %136 ], [ %56, %134 ], [ %56, %75 ], [ %56, %132 ], [ %56, %46 ]
  %188 = phi i32 [ %58, %180 ], [ %58, %178 ], [ %58, %176 ], [ %58, %174 ], [ %58, %172 ], [ %58, %170 ], [ %58, %168 ], [ %58, %166 ], [ %58, %164 ], [ %58, %162 ], [ %58, %160 ], [ %159, %158 ], [ %58, %156 ], [ %58, %154 ], [ %58, %152 ], [ %58, %150 ], [ %58, %148 ], [ %58, %146 ], [ %58, %144 ], [ %58, %142 ], [ %58, %140 ], [ %58, %138 ], [ %58, %136 ], [ %58, %134 ], [ %58, %75 ], [ %58, %132 ], [ %58, %46 ]
  %189 = phi i32 [ %60, %180 ], [ %60, %178 ], [ %60, %176 ], [ %60, %174 ], [ %60, %172 ], [ %60, %170 ], [ %60, %168 ], [ %60, %166 ], [ %60, %164 ], [ %60, %162 ], [ %60, %160 ], [ %60, %158 ], [ %60, %156 ], [ %155, %154 ], [ %60, %152 ], [ %60, %150 ], [ %60, %148 ], [ %60, %146 ], [ %60, %144 ], [ %60, %142 ], [ %60, %140 ], [ %60, %138 ], [ %60, %136 ], [ %60, %134 ], [ %60, %75 ], [ %60, %132 ], [ %60, %46 ]
  %190 = phi i32 [ %62, %180 ], [ %62, %178 ], [ %62, %176 ], [ %62, %174 ], [ %62, %172 ], [ %62, %170 ], [ %62, %168 ], [ %62, %166 ], [ %62, %164 ], [ %62, %162 ], [ %62, %160 ], [ %62, %158 ], [ %62, %156 ], [ %62, %154 ], [ %62, %152 ], [ %151, %150 ], [ %62, %148 ], [ %62, %146 ], [ %62, %144 ], [ %62, %142 ], [ %62, %140 ], [ %62, %138 ], [ %62, %136 ], [ %62, %134 ], [ %62, %75 ], [ %62, %132 ], [ %62, %46 ]
  %191 = phi i32 [ %64, %180 ], [ %64, %178 ], [ %64, %176 ], [ %64, %174 ], [ %64, %172 ], [ %64, %170 ], [ %64, %168 ], [ %64, %166 ], [ %64, %164 ], [ %64, %162 ], [ %64, %160 ], [ %64, %158 ], [ %64, %156 ], [ %64, %154 ], [ %64, %152 ], [ %64, %150 ], [ %64, %148 ], [ %147, %146 ], [ %64, %144 ], [ %64, %142 ], [ %64, %140 ], [ %64, %138 ], [ %64, %136 ], [ %64, %134 ], [ %64, %75 ], [ %64, %132 ], [ %64, %46 ]
  %192 = phi i32 [ %66, %180 ], [ %66, %178 ], [ %66, %176 ], [ %66, %174 ], [ %66, %172 ], [ %66, %170 ], [ %66, %168 ], [ %66, %166 ], [ %66, %164 ], [ %66, %162 ], [ %66, %160 ], [ %66, %158 ], [ %66, %156 ], [ %66, %154 ], [ %66, %152 ], [ %66, %150 ], [ %66, %148 ], [ %66, %146 ], [ %66, %144 ], [ %143, %142 ], [ %66, %140 ], [ %66, %138 ], [ %66, %136 ], [ %66, %134 ], [ %66, %75 ], [ %66, %132 ], [ %66, %46 ]
  %193 = phi i32 [ %68, %180 ], [ %68, %178 ], [ %68, %176 ], [ %68, %174 ], [ %68, %172 ], [ %68, %170 ], [ %68, %168 ], [ %68, %166 ], [ %68, %164 ], [ %68, %162 ], [ %68, %160 ], [ %68, %158 ], [ %68, %156 ], [ %68, %154 ], [ %68, %152 ], [ %68, %150 ], [ %68, %148 ], [ %68, %146 ], [ %68, %144 ], [ %68, %142 ], [ %68, %140 ], [ %139, %138 ], [ %68, %136 ], [ %68, %134 ], [ %68, %75 ], [ %68, %132 ], [ %68, %46 ]
  %194 = phi i32 [ %70, %180 ], [ %70, %178 ], [ %70, %176 ], [ %70, %174 ], [ %70, %172 ], [ %70, %170 ], [ %70, %168 ], [ %70, %166 ], [ %70, %164 ], [ %70, %162 ], [ %70, %160 ], [ %70, %158 ], [ %70, %156 ], [ %70, %154 ], [ %70, %152 ], [ %70, %150 ], [ %70, %148 ], [ %70, %146 ], [ %70, %144 ], [ %70, %142 ], [ %70, %140 ], [ %70, %138 ], [ %70, %136 ], [ %135, %134 ], [ %70, %75 ], [ %70, %132 ], [ %70, %46 ]
  %195 = phi i32 [ %72, %180 ], [ %72, %178 ], [ %72, %176 ], [ %72, %174 ], [ %72, %172 ], [ %72, %170 ], [ %72, %168 ], [ %72, %166 ], [ %72, %164 ], [ %72, %162 ], [ %72, %160 ], [ %72, %158 ], [ %72, %156 ], [ %72, %154 ], [ %72, %152 ], [ %72, %150 ], [ %72, %148 ], [ %72, %146 ], [ %72, %144 ], [ %72, %142 ], [ %72, %140 ], [ %72, %138 ], [ %72, %136 ], [ %72, %134 ], [ %76, %75 ], [ %72, %132 ], [ %72, %46 ]
  %196 = phi i32 [ %71, %180 ], [ %71, %178 ], [ %71, %176 ], [ %71, %174 ], [ %71, %172 ], [ %71, %170 ], [ %71, %168 ], [ %71, %166 ], [ %71, %164 ], [ %71, %162 ], [ %71, %160 ], [ %71, %158 ], [ %71, %156 ], [ %71, %154 ], [ %71, %152 ], [ %71, %150 ], [ %71, %148 ], [ %71, %146 ], [ %71, %144 ], [ %71, %142 ], [ %71, %140 ], [ %71, %138 ], [ %71, %136 ], [ %71, %134 ], [ %71, %75 ], [ %133, %132 ], [ %71, %46 ]
  %197 = phi i32 [ %69, %180 ], [ %69, %178 ], [ %69, %176 ], [ %69, %174 ], [ %69, %172 ], [ %69, %170 ], [ %69, %168 ], [ %69, %166 ], [ %69, %164 ], [ %69, %162 ], [ %69, %160 ], [ %69, %158 ], [ %69, %156 ], [ %69, %154 ], [ %69, %152 ], [ %69, %150 ], [ %69, %148 ], [ %69, %146 ], [ %69, %144 ], [ %69, %142 ], [ %69, %140 ], [ %69, %138 ], [ %137, %136 ], [ %69, %134 ], [ %69, %75 ], [ %69, %132 ], [ %69, %46 ]
  %198 = phi i32 [ %67, %180 ], [ %67, %178 ], [ %67, %176 ], [ %67, %174 ], [ %67, %172 ], [ %67, %170 ], [ %67, %168 ], [ %67, %166 ], [ %67, %164 ], [ %67, %162 ], [ %67, %160 ], [ %67, %158 ], [ %67, %156 ], [ %67, %154 ], [ %67, %152 ], [ %67, %150 ], [ %67, %148 ], [ %67, %146 ], [ %67, %144 ], [ %67, %142 ], [ %141, %140 ], [ %67, %138 ], [ %67, %136 ], [ %67, %134 ], [ %67, %75 ], [ %67, %132 ], [ %67, %46 ]
  %199 = phi i32 [ %65, %180 ], [ %65, %178 ], [ %65, %176 ], [ %65, %174 ], [ %65, %172 ], [ %65, %170 ], [ %65, %168 ], [ %65, %166 ], [ %65, %164 ], [ %65, %162 ], [ %65, %160 ], [ %65, %158 ], [ %65, %156 ], [ %65, %154 ], [ %65, %152 ], [ %65, %150 ], [ %65, %148 ], [ %65, %146 ], [ %145, %144 ], [ %65, %142 ], [ %65, %140 ], [ %65, %138 ], [ %65, %136 ], [ %65, %134 ], [ %65, %75 ], [ %65, %132 ], [ %65, %46 ]
  %200 = phi i32 [ %63, %180 ], [ %63, %178 ], [ %63, %176 ], [ %63, %174 ], [ %63, %172 ], [ %63, %170 ], [ %63, %168 ], [ %63, %166 ], [ %63, %164 ], [ %63, %162 ], [ %63, %160 ], [ %63, %158 ], [ %63, %156 ], [ %63, %154 ], [ %63, %152 ], [ %63, %150 ], [ %149, %148 ], [ %63, %146 ], [ %63, %144 ], [ %63, %142 ], [ %63, %140 ], [ %63, %138 ], [ %63, %136 ], [ %63, %134 ], [ %63, %75 ], [ %63, %132 ], [ %63, %46 ]
  %201 = phi i32 [ %61, %180 ], [ %61, %178 ], [ %61, %176 ], [ %61, %174 ], [ %61, %172 ], [ %61, %170 ], [ %61, %168 ], [ %61, %166 ], [ %61, %164 ], [ %61, %162 ], [ %61, %160 ], [ %61, %158 ], [ %61, %156 ], [ %61, %154 ], [ %153, %152 ], [ %61, %150 ], [ %61, %148 ], [ %61, %146 ], [ %61, %144 ], [ %61, %142 ], [ %61, %140 ], [ %61, %138 ], [ %61, %136 ], [ %61, %134 ], [ %61, %75 ], [ %61, %132 ], [ %61, %46 ]
  %202 = phi i32 [ %59, %180 ], [ %59, %178 ], [ %59, %176 ], [ %59, %174 ], [ %59, %172 ], [ %59, %170 ], [ %59, %168 ], [ %59, %166 ], [ %59, %164 ], [ %59, %162 ], [ %59, %160 ], [ %59, %158 ], [ %157, %156 ], [ %59, %154 ], [ %59, %152 ], [ %59, %150 ], [ %59, %148 ], [ %59, %146 ], [ %59, %144 ], [ %59, %142 ], [ %59, %140 ], [ %59, %138 ], [ %59, %136 ], [ %59, %134 ], [ %59, %75 ], [ %59, %132 ], [ %59, %46 ]
  %203 = phi i32 [ %57, %180 ], [ %57, %178 ], [ %57, %176 ], [ %57, %174 ], [ %57, %172 ], [ %57, %170 ], [ %57, %168 ], [ %57, %166 ], [ %57, %164 ], [ %57, %162 ], [ %161, %160 ], [ %57, %158 ], [ %57, %156 ], [ %57, %154 ], [ %57, %152 ], [ %57, %150 ], [ %57, %148 ], [ %57, %146 ], [ %57, %144 ], [ %57, %142 ], [ %57, %140 ], [ %57, %138 ], [ %57, %136 ], [ %57, %134 ], [ %57, %75 ], [ %57, %132 ], [ %57, %46 ]
  %204 = phi i32 [ %55, %180 ], [ %55, %178 ], [ %55, %176 ], [ %55, %174 ], [ %55, %172 ], [ %55, %170 ], [ %55, %168 ], [ %55, %166 ], [ %165, %164 ], [ %55, %162 ], [ %55, %160 ], [ %55, %158 ], [ %55, %156 ], [ %55, %154 ], [ %55, %152 ], [ %55, %150 ], [ %55, %148 ], [ %55, %146 ], [ %55, %144 ], [ %55, %142 ], [ %55, %140 ], [ %55, %138 ], [ %55, %136 ], [ %55, %134 ], [ %55, %75 ], [ %55, %132 ], [ %55, %46 ]
  %205 = phi i32 [ %53, %180 ], [ %53, %178 ], [ %53, %176 ], [ %53, %174 ], [ %53, %172 ], [ %53, %170 ], [ %169, %168 ], [ %53, %166 ], [ %53, %164 ], [ %53, %162 ], [ %53, %160 ], [ %53, %158 ], [ %53, %156 ], [ %53, %154 ], [ %53, %152 ], [ %53, %150 ], [ %53, %148 ], [ %53, %146 ], [ %53, %144 ], [ %53, %142 ], [ %53, %140 ], [ %53, %138 ], [ %53, %136 ], [ %53, %134 ], [ %53, %75 ], [ %53, %132 ], [ %53, %46 ]
  %206 = phi i32 [ %51, %180 ], [ %51, %178 ], [ %51, %176 ], [ %51, %174 ], [ %173, %172 ], [ %51, %170 ], [ %51, %168 ], [ %51, %166 ], [ %51, %164 ], [ %51, %162 ], [ %51, %160 ], [ %51, %158 ], [ %51, %156 ], [ %51, %154 ], [ %51, %152 ], [ %51, %150 ], [ %51, %148 ], [ %51, %146 ], [ %51, %144 ], [ %51, %142 ], [ %51, %140 ], [ %51, %138 ], [ %51, %136 ], [ %51, %134 ], [ %51, %75 ], [ %51, %132 ], [ %51, %46 ]
  %207 = phi i32 [ %49, %180 ], [ %49, %178 ], [ %177, %176 ], [ %49, %174 ], [ %49, %172 ], [ %49, %170 ], [ %49, %168 ], [ %49, %166 ], [ %49, %164 ], [ %49, %162 ], [ %49, %160 ], [ %49, %158 ], [ %49, %156 ], [ %49, %154 ], [ %49, %152 ], [ %49, %150 ], [ %49, %148 ], [ %49, %146 ], [ %49, %144 ], [ %49, %142 ], [ %49, %140 ], [ %49, %138 ], [ %49, %136 ], [ %49, %134 ], [ %49, %75 ], [ %49, %132 ], [ %49, %46 ]
  %208 = phi i32 [ %181, %180 ], [ %47, %178 ], [ %47, %176 ], [ %47, %174 ], [ %47, %172 ], [ %47, %170 ], [ %47, %168 ], [ %47, %166 ], [ %47, %164 ], [ %47, %162 ], [ %47, %160 ], [ %47, %158 ], [ %47, %156 ], [ %47, %154 ], [ %47, %152 ], [ %47, %150 ], [ %47, %148 ], [ %47, %146 ], [ %47, %144 ], [ %47, %142 ], [ %47, %140 ], [ %47, %138 ], [ %47, %136 ], [ %47, %134 ], [ %47, %75 ], [ %47, %132 ], [ %47, %46 ]
  %209 = add nuw i64 %73, 1
  %210 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 %209
  %211 = load i8, i8* %210, align 1, !tbaa !9
  %212 = icmp eq i8 %211, 0
  br i1 %212, label %44, label %46, !llvm.loop !14

213:                                              ; preds = %91
  %214 = add nsw i32 %92, 1
  br label %221

215:                                              ; preds = %91
  %216 = getelementptr inbounds [27 x i8], [27 x i8]* @__const.main.zm, i64 0, i64 %94
  %217 = load i8, i8* %216, align 1, !tbaa !9
  %218 = sext i32 %93 to i64
  %219 = getelementptr inbounds [27 x i8], [27 x i8]* %3, i64 0, i64 %218
  store i8 %217, i8* %219, align 1, !tbaa !9
  %220 = add nsw i32 %93, 1
  br label %221

221:                                              ; preds = %215, %213
  %222 = phi i32 [ %214, %213 ], [ %92, %215 ]
  %223 = phi i32 [ %93, %213 ], [ %220, %215 ]
  %224 = add nuw nsw i64 %79, 2
  %225 = icmp eq i64 %224, 27
  br i1 %225, label %98, label %226, !llvm.loop !15

226:                                              ; preds = %221
  %227 = getelementptr inbounds [27 x i32], [27 x i32]* %4, i64 0, i64 %224
  %228 = load i32, i32* %227, align 4, !tbaa !5
  br label %77
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #4

attributes #0 = { nofree nounwind sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!7, !7, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
!15 = distinct !{!15, !11}
