; ModuleID = 'source-C-CXX/36/1122.c'
source_filename = "source-C-CXX/36/1122.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@str = private unnamed_addr constant [3 x i8] c"no\00", align 1

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca [100001 x i8], align 16
  %3 = alloca [123 x i32], align 16
  %4 = bitcast [123 x i32]* %3 to i8*
  %5 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  %6 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100001, i8* nonnull %6) #6
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %1)
  %8 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 0
  %9 = load i32, i32* %1, align 4, !tbaa !5
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %101, label %11

11:                                               ; preds = %0, %97
  %12 = phi i32 [ %98, %97 ], [ 1, %0 ]
  %13 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), [100001 x i8]* nonnull %2)
  %14 = call i64 @strlen(i8* noundef nonnull %6) #7
  %15 = trunc i64 %14 to i32
  call void @llvm.lifetime.start.p0i8(i64 492, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(492) %4, i8 0, i64 492, i1 false)
  %16 = add i32 %15, -1
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %95, label %18

18:                                               ; preds = %11
  %19 = and i64 %14, 4294967295
  br label %22

20:                                               ; preds = %152
  %21 = icmp eq i32 %165, 1
  br i1 %21, label %55, label %56

22:                                               ; preds = %18, %152
  %23 = phi i32 [ 0, %18 ], [ %165, %152 ]
  %24 = phi i32 [ 0, %18 ], [ %166, %152 ]
  %25 = phi i32 [ 0, %18 ], [ %164, %152 ]
  %26 = phi i32 [ 0, %18 ], [ %167, %152 ]
  %27 = phi i32 [ 0, %18 ], [ %163, %152 ]
  %28 = phi i32 [ 0, %18 ], [ %168, %152 ]
  %29 = phi i32 [ 0, %18 ], [ %162, %152 ]
  %30 = phi i32 [ 0, %18 ], [ %169, %152 ]
  %31 = phi i32 [ 0, %18 ], [ %161, %152 ]
  %32 = phi i32 [ 0, %18 ], [ %170, %152 ]
  %33 = phi i32 [ 0, %18 ], [ %160, %152 ]
  %34 = phi i32 [ 0, %18 ], [ %171, %152 ]
  %35 = phi i32 [ 0, %18 ], [ %159, %152 ]
  %36 = phi i32 [ 0, %18 ], [ %172, %152 ]
  %37 = phi i32 [ 0, %18 ], [ %158, %152 ]
  %38 = phi i32 [ 0, %18 ], [ %173, %152 ]
  %39 = phi i32 [ 0, %18 ], [ %157, %152 ]
  %40 = phi i32 [ 0, %18 ], [ %174, %152 ]
  %41 = phi i32 [ 0, %18 ], [ %156, %152 ]
  %42 = phi i32 [ 0, %18 ], [ %175, %152 ]
  %43 = phi i32 [ 0, %18 ], [ %155, %152 ]
  %44 = phi i32 [ 0, %18 ], [ %176, %152 ]
  %45 = phi i32 [ 0, %18 ], [ %154, %152 ]
  %46 = phi i32 [ 0, %18 ], [ %177, %152 ]
  %47 = phi i32 [ 0, %18 ], [ %153, %152 ]
  %48 = phi i32 [ 0, %18 ], [ %178, %152 ]
  %49 = phi i64 [ 0, %18 ], [ %179, %152 ]
  %50 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1, !tbaa !9
  %52 = sext i8 %51 to i32
  switch i32 %52, label %152 [
    i32 97, label %53
    i32 98, label %102
    i32 99, label %104
    i32 100, label %106
    i32 101, label %108
    i32 102, label %110
    i32 103, label %112
    i32 104, label %114
    i32 105, label %116
    i32 106, label %118
    i32 107, label %120
    i32 108, label %122
    i32 109, label %124
    i32 110, label %126
    i32 111, label %128
    i32 112, label %130
    i32 113, label %132
    i32 114, label %134
    i32 115, label %136
    i32 116, label %138
    i32 117, label %140
    i32 118, label %142
    i32 119, label %144
    i32 120, label %146
    i32 121, label %148
    i32 122, label %150
  ]

53:                                               ; preds = %22
  %54 = add nsw i32 %23, 1
  br label %152

55:                                               ; preds = %20
  store i32 97, i32* %8, align 16, !tbaa !5
  br label %56

56:                                               ; preds = %20, %55
  %57 = phi i32 [ 1, %55 ], [ 0, %20 ]
  %58 = icmp eq i32 %166, 1
  br i1 %58, label %181, label %185

59:                                               ; preds = %373, %377
  %60 = phi i32 [ %376, %373 ], [ %370, %377 ]
  %61 = xor i1 %17, true
  %62 = icmp sgt i32 %60, 0
  %63 = select i1 %61, i1 %62, i1 false
  br i1 %63, label %64, label %97

64:                                               ; preds = %59
  %65 = zext i32 %16 to i64
  %66 = zext i32 %60 to i64
  br label %67

67:                                               ; preds = %64, %85
  %68 = phi i64 [ 0, %64 ], [ %92, %85 ]
  %69 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 %68
  %70 = load i8, i8* %69, align 1, !tbaa !9
  %71 = sext i8 %70 to i32
  br label %72

72:                                               ; preds = %67, %77
  %73 = phi i64 [ 0, %67 ], [ %78, %77 ]
  %74 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %73
  %75 = load i32, i32* %74, align 4, !tbaa !5
  %76 = icmp eq i32 %75, %71
  br i1 %76, label %80, label %77

77:                                               ; preds = %72
  %78 = add nuw nsw i64 %73, 1
  %79 = icmp eq i64 %78, %66
  br i1 %79, label %85, label %72, !llvm.loop !10

80:                                               ; preds = %72
  %81 = trunc i64 %73 to i32
  %82 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %71)
  %83 = load i8, i8* %69, align 1, !tbaa !9
  %84 = sext i8 %83 to i32
  br label %85

85:                                               ; preds = %77, %80
  %86 = phi i32 [ %84, %80 ], [ %71, %77 ]
  %87 = phi i32 [ %81, %80 ], [ %60, %77 ]
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4, !tbaa !5
  %91 = icmp eq i32 %90, %86
  %92 = add nuw nsw i64 %68, 1
  %93 = icmp uge i64 %68, %65
  %94 = select i1 %91, i1 true, i1 %93
  br i1 %94, label %97, label %67, !llvm.loop !12

95:                                               ; preds = %11, %377
  %96 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @str, i64 0, i64 0))
  br label %97

97:                                               ; preds = %85, %59, %95
  call void @llvm.lifetime.end.p0i8(i64 492, i8* nonnull %4) #6
  %98 = add nuw nsw i32 %12, 1
  %99 = load i32, i32* %1, align 4, !tbaa !5
  %100 = icmp slt i32 %12, %99
  br i1 %100, label %11, label %101, !llvm.loop !13

101:                                              ; preds = %97, %0
  call void @llvm.lifetime.end.p0i8(i64 100001, i8* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  ret i32 0

102:                                              ; preds = %22
  %103 = add nsw i32 %24, 1
  br label %152

104:                                              ; preds = %22
  %105 = add nsw i32 %25, 1
  br label %152

106:                                              ; preds = %22
  %107 = add nsw i32 %26, 1
  br label %152

108:                                              ; preds = %22
  %109 = add nsw i32 %27, 1
  br label %152

110:                                              ; preds = %22
  %111 = add nsw i32 %28, 1
  br label %152

112:                                              ; preds = %22
  %113 = add nsw i32 %29, 1
  br label %152

114:                                              ; preds = %22
  %115 = add nsw i32 %30, 1
  br label %152

116:                                              ; preds = %22
  %117 = add nsw i32 %31, 1
  br label %152

118:                                              ; preds = %22
  %119 = add nsw i32 %32, 1
  br label %152

120:                                              ; preds = %22
  %121 = add nsw i32 %33, 1
  br label %152

122:                                              ; preds = %22
  %123 = add nsw i32 %34, 1
  br label %152

124:                                              ; preds = %22
  %125 = add nsw i32 %35, 1
  br label %152

126:                                              ; preds = %22
  %127 = add nsw i32 %36, 1
  br label %152

128:                                              ; preds = %22
  %129 = add nsw i32 %37, 1
  br label %152

130:                                              ; preds = %22
  %131 = add nsw i32 %38, 1
  br label %152

132:                                              ; preds = %22
  %133 = add nsw i32 %39, 1
  br label %152

134:                                              ; preds = %22
  %135 = add nsw i32 %40, 1
  br label %152

136:                                              ; preds = %22
  %137 = add nsw i32 %41, 1
  br label %152

138:                                              ; preds = %22
  %139 = add nsw i32 %42, 1
  br label %152

140:                                              ; preds = %22
  %141 = add nsw i32 %43, 1
  br label %152

142:                                              ; preds = %22
  %143 = add nsw i32 %44, 1
  br label %152

144:                                              ; preds = %22
  %145 = add nsw i32 %45, 1
  br label %152

146:                                              ; preds = %22
  %147 = add nsw i32 %46, 1
  br label %152

148:                                              ; preds = %22
  %149 = add nsw i32 %47, 1
  br label %152

150:                                              ; preds = %22
  %151 = add nsw i32 %48, 1
  br label %152

152:                                              ; preds = %22, %102, %53, %104, %106, %108, %110, %112, %114, %116, %118, %120, %122, %124, %126, %128, %130, %132, %134, %136, %138, %140, %142, %144, %146, %148, %150
  %153 = phi i32 [ %47, %150 ], [ %149, %148 ], [ %47, %146 ], [ %47, %144 ], [ %47, %142 ], [ %47, %140 ], [ %47, %138 ], [ %47, %136 ], [ %47, %134 ], [ %47, %132 ], [ %47, %130 ], [ %47, %128 ], [ %47, %126 ], [ %47, %124 ], [ %47, %122 ], [ %47, %120 ], [ %47, %118 ], [ %47, %116 ], [ %47, %114 ], [ %47, %112 ], [ %47, %110 ], [ %47, %108 ], [ %47, %106 ], [ %47, %104 ], [ %47, %53 ], [ %47, %102 ], [ %47, %22 ]
  %154 = phi i32 [ %45, %150 ], [ %45, %148 ], [ %45, %146 ], [ %145, %144 ], [ %45, %142 ], [ %45, %140 ], [ %45, %138 ], [ %45, %136 ], [ %45, %134 ], [ %45, %132 ], [ %45, %130 ], [ %45, %128 ], [ %45, %126 ], [ %45, %124 ], [ %45, %122 ], [ %45, %120 ], [ %45, %118 ], [ %45, %116 ], [ %45, %114 ], [ %45, %112 ], [ %45, %110 ], [ %45, %108 ], [ %45, %106 ], [ %45, %104 ], [ %45, %53 ], [ %45, %102 ], [ %45, %22 ]
  %155 = phi i32 [ %43, %150 ], [ %43, %148 ], [ %43, %146 ], [ %43, %144 ], [ %43, %142 ], [ %141, %140 ], [ %43, %138 ], [ %43, %136 ], [ %43, %134 ], [ %43, %132 ], [ %43, %130 ], [ %43, %128 ], [ %43, %126 ], [ %43, %124 ], [ %43, %122 ], [ %43, %120 ], [ %43, %118 ], [ %43, %116 ], [ %43, %114 ], [ %43, %112 ], [ %43, %110 ], [ %43, %108 ], [ %43, %106 ], [ %43, %104 ], [ %43, %53 ], [ %43, %102 ], [ %43, %22 ]
  %156 = phi i32 [ %41, %150 ], [ %41, %148 ], [ %41, %146 ], [ %41, %144 ], [ %41, %142 ], [ %41, %140 ], [ %41, %138 ], [ %137, %136 ], [ %41, %134 ], [ %41, %132 ], [ %41, %130 ], [ %41, %128 ], [ %41, %126 ], [ %41, %124 ], [ %41, %122 ], [ %41, %120 ], [ %41, %118 ], [ %41, %116 ], [ %41, %114 ], [ %41, %112 ], [ %41, %110 ], [ %41, %108 ], [ %41, %106 ], [ %41, %104 ], [ %41, %53 ], [ %41, %102 ], [ %41, %22 ]
  %157 = phi i32 [ %39, %150 ], [ %39, %148 ], [ %39, %146 ], [ %39, %144 ], [ %39, %142 ], [ %39, %140 ], [ %39, %138 ], [ %39, %136 ], [ %39, %134 ], [ %133, %132 ], [ %39, %130 ], [ %39, %128 ], [ %39, %126 ], [ %39, %124 ], [ %39, %122 ], [ %39, %120 ], [ %39, %118 ], [ %39, %116 ], [ %39, %114 ], [ %39, %112 ], [ %39, %110 ], [ %39, %108 ], [ %39, %106 ], [ %39, %104 ], [ %39, %53 ], [ %39, %102 ], [ %39, %22 ]
  %158 = phi i32 [ %37, %150 ], [ %37, %148 ], [ %37, %146 ], [ %37, %144 ], [ %37, %142 ], [ %37, %140 ], [ %37, %138 ], [ %37, %136 ], [ %37, %134 ], [ %37, %132 ], [ %37, %130 ], [ %129, %128 ], [ %37, %126 ], [ %37, %124 ], [ %37, %122 ], [ %37, %120 ], [ %37, %118 ], [ %37, %116 ], [ %37, %114 ], [ %37, %112 ], [ %37, %110 ], [ %37, %108 ], [ %37, %106 ], [ %37, %104 ], [ %37, %53 ], [ %37, %102 ], [ %37, %22 ]
  %159 = phi i32 [ %35, %150 ], [ %35, %148 ], [ %35, %146 ], [ %35, %144 ], [ %35, %142 ], [ %35, %140 ], [ %35, %138 ], [ %35, %136 ], [ %35, %134 ], [ %35, %132 ], [ %35, %130 ], [ %35, %128 ], [ %35, %126 ], [ %125, %124 ], [ %35, %122 ], [ %35, %120 ], [ %35, %118 ], [ %35, %116 ], [ %35, %114 ], [ %35, %112 ], [ %35, %110 ], [ %35, %108 ], [ %35, %106 ], [ %35, %104 ], [ %35, %53 ], [ %35, %102 ], [ %35, %22 ]
  %160 = phi i32 [ %33, %150 ], [ %33, %148 ], [ %33, %146 ], [ %33, %144 ], [ %33, %142 ], [ %33, %140 ], [ %33, %138 ], [ %33, %136 ], [ %33, %134 ], [ %33, %132 ], [ %33, %130 ], [ %33, %128 ], [ %33, %126 ], [ %33, %124 ], [ %33, %122 ], [ %121, %120 ], [ %33, %118 ], [ %33, %116 ], [ %33, %114 ], [ %33, %112 ], [ %33, %110 ], [ %33, %108 ], [ %33, %106 ], [ %33, %104 ], [ %33, %53 ], [ %33, %102 ], [ %33, %22 ]
  %161 = phi i32 [ %31, %150 ], [ %31, %148 ], [ %31, %146 ], [ %31, %144 ], [ %31, %142 ], [ %31, %140 ], [ %31, %138 ], [ %31, %136 ], [ %31, %134 ], [ %31, %132 ], [ %31, %130 ], [ %31, %128 ], [ %31, %126 ], [ %31, %124 ], [ %31, %122 ], [ %31, %120 ], [ %31, %118 ], [ %117, %116 ], [ %31, %114 ], [ %31, %112 ], [ %31, %110 ], [ %31, %108 ], [ %31, %106 ], [ %31, %104 ], [ %31, %53 ], [ %31, %102 ], [ %31, %22 ]
  %162 = phi i32 [ %29, %150 ], [ %29, %148 ], [ %29, %146 ], [ %29, %144 ], [ %29, %142 ], [ %29, %140 ], [ %29, %138 ], [ %29, %136 ], [ %29, %134 ], [ %29, %132 ], [ %29, %130 ], [ %29, %128 ], [ %29, %126 ], [ %29, %124 ], [ %29, %122 ], [ %29, %120 ], [ %29, %118 ], [ %29, %116 ], [ %29, %114 ], [ %113, %112 ], [ %29, %110 ], [ %29, %108 ], [ %29, %106 ], [ %29, %104 ], [ %29, %53 ], [ %29, %102 ], [ %29, %22 ]
  %163 = phi i32 [ %27, %150 ], [ %27, %148 ], [ %27, %146 ], [ %27, %144 ], [ %27, %142 ], [ %27, %140 ], [ %27, %138 ], [ %27, %136 ], [ %27, %134 ], [ %27, %132 ], [ %27, %130 ], [ %27, %128 ], [ %27, %126 ], [ %27, %124 ], [ %27, %122 ], [ %27, %120 ], [ %27, %118 ], [ %27, %116 ], [ %27, %114 ], [ %27, %112 ], [ %27, %110 ], [ %109, %108 ], [ %27, %106 ], [ %27, %104 ], [ %27, %53 ], [ %27, %102 ], [ %27, %22 ]
  %164 = phi i32 [ %25, %150 ], [ %25, %148 ], [ %25, %146 ], [ %25, %144 ], [ %25, %142 ], [ %25, %140 ], [ %25, %138 ], [ %25, %136 ], [ %25, %134 ], [ %25, %132 ], [ %25, %130 ], [ %25, %128 ], [ %25, %126 ], [ %25, %124 ], [ %25, %122 ], [ %25, %120 ], [ %25, %118 ], [ %25, %116 ], [ %25, %114 ], [ %25, %112 ], [ %25, %110 ], [ %25, %108 ], [ %25, %106 ], [ %105, %104 ], [ %25, %53 ], [ %25, %102 ], [ %25, %22 ]
  %165 = phi i32 [ %23, %150 ], [ %23, %148 ], [ %23, %146 ], [ %23, %144 ], [ %23, %142 ], [ %23, %140 ], [ %23, %138 ], [ %23, %136 ], [ %23, %134 ], [ %23, %132 ], [ %23, %130 ], [ %23, %128 ], [ %23, %126 ], [ %23, %124 ], [ %23, %122 ], [ %23, %120 ], [ %23, %118 ], [ %23, %116 ], [ %23, %114 ], [ %23, %112 ], [ %23, %110 ], [ %23, %108 ], [ %23, %106 ], [ %23, %104 ], [ %54, %53 ], [ %23, %102 ], [ %23, %22 ]
  %166 = phi i32 [ %24, %150 ], [ %24, %148 ], [ %24, %146 ], [ %24, %144 ], [ %24, %142 ], [ %24, %140 ], [ %24, %138 ], [ %24, %136 ], [ %24, %134 ], [ %24, %132 ], [ %24, %130 ], [ %24, %128 ], [ %24, %126 ], [ %24, %124 ], [ %24, %122 ], [ %24, %120 ], [ %24, %118 ], [ %24, %116 ], [ %24, %114 ], [ %24, %112 ], [ %24, %110 ], [ %24, %108 ], [ %24, %106 ], [ %24, %104 ], [ %24, %53 ], [ %103, %102 ], [ %24, %22 ]
  %167 = phi i32 [ %26, %150 ], [ %26, %148 ], [ %26, %146 ], [ %26, %144 ], [ %26, %142 ], [ %26, %140 ], [ %26, %138 ], [ %26, %136 ], [ %26, %134 ], [ %26, %132 ], [ %26, %130 ], [ %26, %128 ], [ %26, %126 ], [ %26, %124 ], [ %26, %122 ], [ %26, %120 ], [ %26, %118 ], [ %26, %116 ], [ %26, %114 ], [ %26, %112 ], [ %26, %110 ], [ %26, %108 ], [ %107, %106 ], [ %26, %104 ], [ %26, %53 ], [ %26, %102 ], [ %26, %22 ]
  %168 = phi i32 [ %28, %150 ], [ %28, %148 ], [ %28, %146 ], [ %28, %144 ], [ %28, %142 ], [ %28, %140 ], [ %28, %138 ], [ %28, %136 ], [ %28, %134 ], [ %28, %132 ], [ %28, %130 ], [ %28, %128 ], [ %28, %126 ], [ %28, %124 ], [ %28, %122 ], [ %28, %120 ], [ %28, %118 ], [ %28, %116 ], [ %28, %114 ], [ %28, %112 ], [ %111, %110 ], [ %28, %108 ], [ %28, %106 ], [ %28, %104 ], [ %28, %53 ], [ %28, %102 ], [ %28, %22 ]
  %169 = phi i32 [ %30, %150 ], [ %30, %148 ], [ %30, %146 ], [ %30, %144 ], [ %30, %142 ], [ %30, %140 ], [ %30, %138 ], [ %30, %136 ], [ %30, %134 ], [ %30, %132 ], [ %30, %130 ], [ %30, %128 ], [ %30, %126 ], [ %30, %124 ], [ %30, %122 ], [ %30, %120 ], [ %30, %118 ], [ %30, %116 ], [ %115, %114 ], [ %30, %112 ], [ %30, %110 ], [ %30, %108 ], [ %30, %106 ], [ %30, %104 ], [ %30, %53 ], [ %30, %102 ], [ %30, %22 ]
  %170 = phi i32 [ %32, %150 ], [ %32, %148 ], [ %32, %146 ], [ %32, %144 ], [ %32, %142 ], [ %32, %140 ], [ %32, %138 ], [ %32, %136 ], [ %32, %134 ], [ %32, %132 ], [ %32, %130 ], [ %32, %128 ], [ %32, %126 ], [ %32, %124 ], [ %32, %122 ], [ %32, %120 ], [ %119, %118 ], [ %32, %116 ], [ %32, %114 ], [ %32, %112 ], [ %32, %110 ], [ %32, %108 ], [ %32, %106 ], [ %32, %104 ], [ %32, %53 ], [ %32, %102 ], [ %32, %22 ]
  %171 = phi i32 [ %34, %150 ], [ %34, %148 ], [ %34, %146 ], [ %34, %144 ], [ %34, %142 ], [ %34, %140 ], [ %34, %138 ], [ %34, %136 ], [ %34, %134 ], [ %34, %132 ], [ %34, %130 ], [ %34, %128 ], [ %34, %126 ], [ %34, %124 ], [ %123, %122 ], [ %34, %120 ], [ %34, %118 ], [ %34, %116 ], [ %34, %114 ], [ %34, %112 ], [ %34, %110 ], [ %34, %108 ], [ %34, %106 ], [ %34, %104 ], [ %34, %53 ], [ %34, %102 ], [ %34, %22 ]
  %172 = phi i32 [ %36, %150 ], [ %36, %148 ], [ %36, %146 ], [ %36, %144 ], [ %36, %142 ], [ %36, %140 ], [ %36, %138 ], [ %36, %136 ], [ %36, %134 ], [ %36, %132 ], [ %36, %130 ], [ %36, %128 ], [ %127, %126 ], [ %36, %124 ], [ %36, %122 ], [ %36, %120 ], [ %36, %118 ], [ %36, %116 ], [ %36, %114 ], [ %36, %112 ], [ %36, %110 ], [ %36, %108 ], [ %36, %106 ], [ %36, %104 ], [ %36, %53 ], [ %36, %102 ], [ %36, %22 ]
  %173 = phi i32 [ %38, %150 ], [ %38, %148 ], [ %38, %146 ], [ %38, %144 ], [ %38, %142 ], [ %38, %140 ], [ %38, %138 ], [ %38, %136 ], [ %38, %134 ], [ %38, %132 ], [ %131, %130 ], [ %38, %128 ], [ %38, %126 ], [ %38, %124 ], [ %38, %122 ], [ %38, %120 ], [ %38, %118 ], [ %38, %116 ], [ %38, %114 ], [ %38, %112 ], [ %38, %110 ], [ %38, %108 ], [ %38, %106 ], [ %38, %104 ], [ %38, %53 ], [ %38, %102 ], [ %38, %22 ]
  %174 = phi i32 [ %40, %150 ], [ %40, %148 ], [ %40, %146 ], [ %40, %144 ], [ %40, %142 ], [ %40, %140 ], [ %40, %138 ], [ %40, %136 ], [ %135, %134 ], [ %40, %132 ], [ %40, %130 ], [ %40, %128 ], [ %40, %126 ], [ %40, %124 ], [ %40, %122 ], [ %40, %120 ], [ %40, %118 ], [ %40, %116 ], [ %40, %114 ], [ %40, %112 ], [ %40, %110 ], [ %40, %108 ], [ %40, %106 ], [ %40, %104 ], [ %40, %53 ], [ %40, %102 ], [ %40, %22 ]
  %175 = phi i32 [ %42, %150 ], [ %42, %148 ], [ %42, %146 ], [ %42, %144 ], [ %42, %142 ], [ %42, %140 ], [ %139, %138 ], [ %42, %136 ], [ %42, %134 ], [ %42, %132 ], [ %42, %130 ], [ %42, %128 ], [ %42, %126 ], [ %42, %124 ], [ %42, %122 ], [ %42, %120 ], [ %42, %118 ], [ %42, %116 ], [ %42, %114 ], [ %42, %112 ], [ %42, %110 ], [ %42, %108 ], [ %42, %106 ], [ %42, %104 ], [ %42, %53 ], [ %42, %102 ], [ %42, %22 ]
  %176 = phi i32 [ %44, %150 ], [ %44, %148 ], [ %44, %146 ], [ %44, %144 ], [ %143, %142 ], [ %44, %140 ], [ %44, %138 ], [ %44, %136 ], [ %44, %134 ], [ %44, %132 ], [ %44, %130 ], [ %44, %128 ], [ %44, %126 ], [ %44, %124 ], [ %44, %122 ], [ %44, %120 ], [ %44, %118 ], [ %44, %116 ], [ %44, %114 ], [ %44, %112 ], [ %44, %110 ], [ %44, %108 ], [ %44, %106 ], [ %44, %104 ], [ %44, %53 ], [ %44, %102 ], [ %44, %22 ]
  %177 = phi i32 [ %46, %150 ], [ %46, %148 ], [ %147, %146 ], [ %46, %144 ], [ %46, %142 ], [ %46, %140 ], [ %46, %138 ], [ %46, %136 ], [ %46, %134 ], [ %46, %132 ], [ %46, %130 ], [ %46, %128 ], [ %46, %126 ], [ %46, %124 ], [ %46, %122 ], [ %46, %120 ], [ %46, %118 ], [ %46, %116 ], [ %46, %114 ], [ %46, %112 ], [ %46, %110 ], [ %46, %108 ], [ %46, %106 ], [ %46, %104 ], [ %46, %53 ], [ %46, %102 ], [ %46, %22 ]
  %178 = phi i32 [ %151, %150 ], [ %48, %148 ], [ %48, %146 ], [ %48, %144 ], [ %48, %142 ], [ %48, %140 ], [ %48, %138 ], [ %48, %136 ], [ %48, %134 ], [ %48, %132 ], [ %48, %130 ], [ %48, %128 ], [ %48, %126 ], [ %48, %124 ], [ %48, %122 ], [ %48, %120 ], [ %48, %118 ], [ %48, %116 ], [ %48, %114 ], [ %48, %112 ], [ %48, %110 ], [ %48, %108 ], [ %48, %106 ], [ %48, %104 ], [ %48, %53 ], [ %48, %102 ], [ %48, %22 ]
  %179 = add nuw nsw i64 %49, 1
  %180 = icmp eq i64 %179, %19
  br i1 %180, label %20, label %22, !llvm.loop !14

181:                                              ; preds = %56
  %182 = zext i32 %57 to i64
  %183 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %182
  store i32 98, i32* %183, align 4, !tbaa !5
  %184 = add nuw nsw i32 %57, 1
  br label %185

185:                                              ; preds = %181, %56
  %186 = phi i32 [ %184, %181 ], [ %57, %56 ]
  %187 = phi i32 [ 1, %181 ], [ %57, %56 ]
  %188 = icmp eq i32 %164, 1
  br i1 %188, label %189, label %193

189:                                              ; preds = %185
  %190 = zext i32 %186 to i64
  %191 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %190
  store i32 99, i32* %191, align 4, !tbaa !5
  %192 = add nuw nsw i32 %186, 1
  br label %193

193:                                              ; preds = %189, %185
  %194 = phi i32 [ %192, %189 ], [ %186, %185 ]
  %195 = phi i32 [ 1, %189 ], [ %187, %185 ]
  %196 = icmp eq i32 %167, 1
  br i1 %196, label %197, label %201

197:                                              ; preds = %193
  %198 = zext i32 %194 to i64
  %199 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %198
  store i32 100, i32* %199, align 4, !tbaa !5
  %200 = add nuw nsw i32 %194, 1
  br label %201

201:                                              ; preds = %197, %193
  %202 = phi i32 [ %200, %197 ], [ %194, %193 ]
  %203 = phi i32 [ 1, %197 ], [ %195, %193 ]
  %204 = icmp eq i32 %163, 1
  br i1 %204, label %205, label %209

205:                                              ; preds = %201
  %206 = zext i32 %202 to i64
  %207 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %206
  store i32 101, i32* %207, align 4, !tbaa !5
  %208 = add nuw nsw i32 %202, 1
  br label %209

209:                                              ; preds = %205, %201
  %210 = phi i32 [ %208, %205 ], [ %202, %201 ]
  %211 = phi i32 [ 1, %205 ], [ %203, %201 ]
  %212 = icmp eq i32 %168, 1
  br i1 %212, label %213, label %217

213:                                              ; preds = %209
  %214 = zext i32 %210 to i64
  %215 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %214
  store i32 102, i32* %215, align 4, !tbaa !5
  %216 = add nuw nsw i32 %210, 1
  br label %217

217:                                              ; preds = %213, %209
  %218 = phi i32 [ %216, %213 ], [ %210, %209 ]
  %219 = phi i32 [ 1, %213 ], [ %211, %209 ]
  %220 = icmp eq i32 %162, 1
  br i1 %220, label %221, label %225

221:                                              ; preds = %217
  %222 = zext i32 %218 to i64
  %223 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %222
  store i32 103, i32* %223, align 4, !tbaa !5
  %224 = add nuw nsw i32 %218, 1
  br label %225

225:                                              ; preds = %221, %217
  %226 = phi i32 [ %224, %221 ], [ %218, %217 ]
  %227 = phi i32 [ 1, %221 ], [ %219, %217 ]
  %228 = icmp eq i32 %169, 1
  br i1 %228, label %229, label %233

229:                                              ; preds = %225
  %230 = zext i32 %226 to i64
  %231 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %230
  store i32 104, i32* %231, align 4, !tbaa !5
  %232 = add nuw nsw i32 %226, 1
  br label %233

233:                                              ; preds = %229, %225
  %234 = phi i32 [ %232, %229 ], [ %226, %225 ]
  %235 = phi i32 [ 1, %229 ], [ %227, %225 ]
  %236 = icmp eq i32 %161, 1
  br i1 %236, label %237, label %241

237:                                              ; preds = %233
  %238 = zext i32 %234 to i64
  %239 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %238
  store i32 105, i32* %239, align 4, !tbaa !5
  %240 = add nuw nsw i32 %234, 1
  br label %241

241:                                              ; preds = %237, %233
  %242 = phi i32 [ %240, %237 ], [ %234, %233 ]
  %243 = phi i32 [ 1, %237 ], [ %235, %233 ]
  %244 = icmp eq i32 %170, 1
  br i1 %244, label %245, label %249

245:                                              ; preds = %241
  %246 = zext i32 %242 to i64
  %247 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %246
  store i32 106, i32* %247, align 4, !tbaa !5
  %248 = add nuw nsw i32 %242, 1
  br label %249

249:                                              ; preds = %245, %241
  %250 = phi i32 [ %248, %245 ], [ %242, %241 ]
  %251 = phi i32 [ 1, %245 ], [ %243, %241 ]
  %252 = icmp eq i32 %160, 1
  br i1 %252, label %253, label %257

253:                                              ; preds = %249
  %254 = zext i32 %250 to i64
  %255 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %254
  store i32 107, i32* %255, align 4, !tbaa !5
  %256 = add nuw nsw i32 %250, 1
  br label %257

257:                                              ; preds = %253, %249
  %258 = phi i32 [ %256, %253 ], [ %250, %249 ]
  %259 = phi i32 [ 1, %253 ], [ %251, %249 ]
  %260 = icmp eq i32 %171, 1
  br i1 %260, label %261, label %265

261:                                              ; preds = %257
  %262 = zext i32 %258 to i64
  %263 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %262
  store i32 108, i32* %263, align 4, !tbaa !5
  %264 = add nuw nsw i32 %258, 1
  br label %265

265:                                              ; preds = %261, %257
  %266 = phi i32 [ %264, %261 ], [ %258, %257 ]
  %267 = phi i32 [ 1, %261 ], [ %259, %257 ]
  %268 = icmp eq i32 %159, 1
  br i1 %268, label %269, label %273

269:                                              ; preds = %265
  %270 = zext i32 %266 to i64
  %271 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %270
  store i32 109, i32* %271, align 4, !tbaa !5
  %272 = add nuw nsw i32 %266, 1
  br label %273

273:                                              ; preds = %269, %265
  %274 = phi i32 [ %272, %269 ], [ %266, %265 ]
  %275 = phi i32 [ 1, %269 ], [ %267, %265 ]
  %276 = icmp eq i32 %172, 1
  br i1 %276, label %277, label %281

277:                                              ; preds = %273
  %278 = zext i32 %274 to i64
  %279 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %278
  store i32 110, i32* %279, align 4, !tbaa !5
  %280 = add nuw nsw i32 %274, 1
  br label %281

281:                                              ; preds = %277, %273
  %282 = phi i32 [ %280, %277 ], [ %274, %273 ]
  %283 = phi i32 [ 1, %277 ], [ %275, %273 ]
  %284 = icmp eq i32 %158, 1
  br i1 %284, label %285, label %289

285:                                              ; preds = %281
  %286 = zext i32 %282 to i64
  %287 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %286
  store i32 111, i32* %287, align 4, !tbaa !5
  %288 = add nuw nsw i32 %282, 1
  br label %289

289:                                              ; preds = %285, %281
  %290 = phi i32 [ %288, %285 ], [ %282, %281 ]
  %291 = phi i32 [ 1, %285 ], [ %283, %281 ]
  %292 = icmp eq i32 %173, 1
  br i1 %292, label %293, label %297

293:                                              ; preds = %289
  %294 = zext i32 %290 to i64
  %295 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %294
  store i32 112, i32* %295, align 4, !tbaa !5
  %296 = add nuw nsw i32 %290, 1
  br label %297

297:                                              ; preds = %293, %289
  %298 = phi i32 [ %296, %293 ], [ %290, %289 ]
  %299 = phi i32 [ 1, %293 ], [ %291, %289 ]
  %300 = icmp eq i32 %157, 1
  br i1 %300, label %301, label %305

301:                                              ; preds = %297
  %302 = zext i32 %298 to i64
  %303 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %302
  store i32 113, i32* %303, align 4, !tbaa !5
  %304 = add nuw nsw i32 %298, 1
  br label %305

305:                                              ; preds = %301, %297
  %306 = phi i32 [ %304, %301 ], [ %298, %297 ]
  %307 = phi i32 [ 1, %301 ], [ %299, %297 ]
  %308 = icmp eq i32 %174, 1
  br i1 %308, label %309, label %313

309:                                              ; preds = %305
  %310 = zext i32 %306 to i64
  %311 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %310
  store i32 114, i32* %311, align 4, !tbaa !5
  %312 = add nuw nsw i32 %306, 1
  br label %313

313:                                              ; preds = %309, %305
  %314 = phi i32 [ %312, %309 ], [ %306, %305 ]
  %315 = phi i32 [ 1, %309 ], [ %307, %305 ]
  %316 = icmp eq i32 %156, 1
  br i1 %316, label %317, label %321

317:                                              ; preds = %313
  %318 = zext i32 %314 to i64
  %319 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %318
  store i32 115, i32* %319, align 4, !tbaa !5
  %320 = add nuw nsw i32 %314, 1
  br label %321

321:                                              ; preds = %317, %313
  %322 = phi i32 [ %320, %317 ], [ %314, %313 ]
  %323 = phi i32 [ 1, %317 ], [ %315, %313 ]
  %324 = icmp eq i32 %175, 1
  br i1 %324, label %325, label %329

325:                                              ; preds = %321
  %326 = zext i32 %322 to i64
  %327 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %326
  store i32 116, i32* %327, align 4, !tbaa !5
  %328 = add nuw nsw i32 %322, 1
  br label %329

329:                                              ; preds = %325, %321
  %330 = phi i32 [ %328, %325 ], [ %322, %321 ]
  %331 = phi i32 [ 1, %325 ], [ %323, %321 ]
  %332 = icmp eq i32 %155, 1
  br i1 %332, label %333, label %337

333:                                              ; preds = %329
  %334 = zext i32 %330 to i64
  %335 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %334
  store i32 117, i32* %335, align 4, !tbaa !5
  %336 = add nuw nsw i32 %330, 1
  br label %337

337:                                              ; preds = %333, %329
  %338 = phi i32 [ %336, %333 ], [ %330, %329 ]
  %339 = phi i32 [ 1, %333 ], [ %331, %329 ]
  %340 = icmp eq i32 %176, 1
  br i1 %340, label %341, label %345

341:                                              ; preds = %337
  %342 = zext i32 %338 to i64
  %343 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %342
  store i32 118, i32* %343, align 4, !tbaa !5
  %344 = add nuw nsw i32 %338, 1
  br label %345

345:                                              ; preds = %341, %337
  %346 = phi i32 [ %344, %341 ], [ %338, %337 ]
  %347 = phi i32 [ 1, %341 ], [ %339, %337 ]
  %348 = icmp eq i32 %154, 1
  br i1 %348, label %349, label %353

349:                                              ; preds = %345
  %350 = zext i32 %346 to i64
  %351 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %350
  store i32 119, i32* %351, align 4, !tbaa !5
  %352 = add nuw nsw i32 %346, 1
  br label %353

353:                                              ; preds = %349, %345
  %354 = phi i32 [ %352, %349 ], [ %346, %345 ]
  %355 = phi i32 [ 1, %349 ], [ %347, %345 ]
  %356 = icmp eq i32 %177, 1
  br i1 %356, label %357, label %361

357:                                              ; preds = %353
  %358 = zext i32 %354 to i64
  %359 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %358
  store i32 120, i32* %359, align 4, !tbaa !5
  %360 = add nuw nsw i32 %354, 1
  br label %361

361:                                              ; preds = %357, %353
  %362 = phi i32 [ %360, %357 ], [ %354, %353 ]
  %363 = phi i32 [ 1, %357 ], [ %355, %353 ]
  %364 = icmp eq i32 %153, 1
  br i1 %364, label %365, label %369

365:                                              ; preds = %361
  %366 = zext i32 %362 to i64
  %367 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %366
  store i32 121, i32* %367, align 4, !tbaa !5
  %368 = add nuw nsw i32 %362, 1
  br label %369

369:                                              ; preds = %365, %361
  %370 = phi i32 [ %368, %365 ], [ %362, %361 ]
  %371 = phi i32 [ 1, %365 ], [ %363, %361 ]
  %372 = icmp eq i32 %178, 1
  br i1 %372, label %373, label %377

373:                                              ; preds = %369
  %374 = zext i32 %370 to i64
  %375 = getelementptr inbounds [123 x i32], [123 x i32]* %3, i64 0, i64 %374
  store i32 122, i32* %375, align 4, !tbaa !5
  %376 = add nuw nsw i32 %370, 1
  br label %59

377:                                              ; preds = %369
  %378 = icmp eq i32 %371, 0
  br i1 %378, label %95, label %59
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree nounwind sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nounwind }
attributes #5 = { argmemonly nofree nounwind willreturn writeonly }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!7, !7, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
