; ModuleID = 'source-C-CXX/39/439.c'
source_filename = "source-C-CXX/39/439.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%lf%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Invalid input\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %148

; <label>:9:                                      ; preds = %0, %148
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %15)
  %20 = load double, double* %11, align 8
  %21 = load double, double* %12, align 8
  %22 = fadd double %20, %21
  %23 = load double, double* %13, align 8
  %24 = fadd double %22, %23
  %25 = load double, double* %14, align 8
  %26 = fadd double %24, %25
  %27 = fmul double 5.000000e-01, %26
  store double %27, double* %16, align 8
  %28 = load double, double* %15, align 8
  %29 = fmul double 0x400921FB4D12D84A, %28
  %30 = fdiv double %29, 3.600000e+02
  store double %30, double* %18, align 8
  %31 = load double, double* %16, align 8
  %32 = load double, double* %11, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %16, align 8
  %35 = load double, double* %12, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %36
  %38 = load double, double* %16, align 8
  %39 = load double, double* %13, align 8
  %40 = fsub double %38, %39
  %41 = fmul double %37, %40
  %42 = load double, double* %16, align 8
  %43 = load double, double* %14, align 8
  %44 = fsub double %42, %43
  %45 = fmul double %41, %44
  %46 = load double, double* %11, align 8
  %47 = load double, double* %12, align 8
  %48 = fmul double %46, %47
  %49 = load double, double* %13, align 8
  %50 = fmul double %48, %49
  %51 = load double, double* %14, align 8
  %52 = fmul double %50, %51
  %53 = load double, double* %18, align 8
  %54 = call double @cos(double %53) #3
  %55 = fmul double %52, %54
  %56 = load double, double* %18, align 8
  %57 = call double @cos(double %56) #3
  %58 = fmul double %55, %57
  %59 = fsub double %45, %58
  %60 = call double @sqrt(double %59) #3
  store double %60, double* %17, align 8
  %61 = load double, double* %16, align 8
  %62 = load double, double* %11, align 8
  %63 = fsub double %61, %62
  %64 = load double, double* %16, align 8
  %65 = load double, double* %12, align 8
  %66 = fsub double %64, %65
  %67 = fmul double %63, %66
  %68 = load double, double* %16, align 8
  %69 = load double, double* %13, align 8
  %70 = fsub double %68, %69
  %71 = fmul double %67, %70
  %72 = load double, double* %16, align 8
  %73 = load double, double* %14, align 8
  %74 = fsub double %72, %73
  %75 = fmul double %71, %74
  %76 = load double, double* %11, align 8
  %77 = load double, double* %12, align 8
  %78 = fmul double %76, %77
  %79 = load double, double* %13, align 8
  %80 = fmul double %78, %79
  %81 = load double, double* %14, align 8
  %82 = fmul double %80, %81
  %83 = load double, double* %15, align 8
  %84 = fmul double 0x400921FB4D12D84A, %83
  %85 = fdiv double %84, 2.000000e+00
  %86 = fdiv double %85, 1.800000e+02
  %87 = call double @cos(double %86) #3
  %88 = fmul double %82, %87
  %89 = load double, double* %15, align 8
  %90 = fmul double 0x400921FB4D12D84A, %89
  %91 = fdiv double %90, 2.000000e+00
  %92 = fdiv double %91, 1.800000e+02
  %93 = call double @cos(double %92) #3
  %94 = fmul double %88, %93
  %95 = fsub double %75, %94
  %96 = fcmp olt double %95, 0.000000e+00
  %97 = load i32, i32* @x
  %98 = load i32, i32* @y
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %105, label %148

; <label>:105:                                    ; preds = %9
  br i1 %96, label %106, label %126

; <label>:106:                                    ; preds = %105
  %107 = load i32, i32* @x
  %108 = load i32, i32* @y
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %115, label %492

; <label>:115:                                    ; preds = %106, %492
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0))
  %117 = load i32, i32* @x
  %118 = load i32, i32* @y
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %125, label %492

; <label>:125:                                    ; preds = %115
  br label %129

; <label>:126:                                    ; preds = %105
  %127 = load double, double* %17, align 8
  %128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %127)
  br label %129

; <label>:129:                                    ; preds = %126, %125
  %130 = load i32, i32* @x
  %131 = load i32, i32* @y
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %138, label %494

; <label>:138:                                    ; preds = %129, %494
  %139 = load i32, i32* @x
  %140 = load i32, i32* @y
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %147, label %494

; <label>:147:                                    ; preds = %138
  ret i32 0

; <label>:148:                                    ; preds = %9, %0
  %149 = alloca i32, align 4
  %150 = alloca double, align 8
  %151 = alloca double, align 8
  %152 = alloca double, align 8
  %153 = alloca double, align 8
  %154 = alloca double, align 8
  %155 = alloca double, align 8
  %156 = alloca double, align 8
  %157 = alloca double, align 8
  store i32 0, i32* %149, align 4
  %158 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %150, double* %151, double* %152, double* %153, double* %154)
  %159 = load double, double* %150, align 8
  %160 = load double, double* %151, align 8
  %161 = fsub double %159, %160
  %162 = fmul double %161, %160
  %163 = fsub double %159, %160
  %164 = fmul double %163, %160
  %165 = fsub double %159, %160
  %166 = fmul double %165, %160
  %167 = fsub double -0.000000e+00, %159
  %168 = fadd double %167, %160
  %169 = fadd double %159, %160
  %170 = load double, double* %152, align 8
  %171 = fsub double %169, %170
  %172 = fmul double %171, %170
  %173 = fadd double %169, %170
  %174 = load double, double* %153, align 8
  %175 = fsub double -0.000000e+00, %173
  %176 = fadd double %175, %174
  %177 = fsub double -0.000000e+00, %173
  %178 = fadd double %177, %174
  %179 = fadd double %173, %174
  %180 = fsub double 5.000000e-01, %179
  %181 = fmul double %180, %179
  %182 = fsub double -0.000000e+00, 5.000000e-01
  %183 = fadd double %182, %179
  %184 = fsub double -0.000000e+00, 5.000000e-01
  %185 = fadd double %184, %179
  %186 = fsub double 5.000000e-01, %179
  %187 = fmul double %186, %179
  %188 = fmul double 5.000000e-01, %179
  store double %188, double* %155, align 8
  %189 = load double, double* %154, align 8
  %190 = fsub double 0x400921FB4D12D84A, %189
  %191 = fmul double %190, %189
  %192 = fsub double 0x400921FB4D12D84A, %189
  %193 = fmul double %192, %189
  %194 = fsub double -0.000000e+00, 0x400921FB4D12D84A
  %195 = fadd double %194, %189
  %196 = fsub double 0x400921FB4D12D84A, %189
  %197 = fmul double %196, %189
  %198 = fsub double 0x400921FB4D12D84A, %189
  %199 = fmul double %198, %189
  %200 = fsub double -0.000000e+00, 0x400921FB4D12D84A
  %201 = fadd double %200, %189
  %202 = fmul double 0x400921FB4D12D84A, %189
  %203 = fsub double %202, 3.600000e+02
  %204 = fmul double %203, 3.600000e+02
  %205 = fdiv double %202, 3.600000e+02
  store double %205, double* %157, align 8
  %206 = load double, double* %155, align 8
  %207 = load double, double* %150, align 8
  %208 = fsub double %206, %207
  %209 = load double, double* %155, align 8
  %210 = load double, double* %151, align 8
  %211 = fsub double %209, %210
  %212 = fmul double %211, %210
  %213 = fsub double %209, %210
  %214 = fmul double %213, %210
  %215 = fsub double -0.000000e+00, %209
  %216 = fadd double %215, %210
  %217 = fsub double %209, %210
  %218 = fsub double -0.000000e+00, %208
  %219 = fadd double %218, %217
  %220 = fsub double -0.000000e+00, %208
  %221 = fadd double %220, %217
  %222 = fmul double %208, %217
  %223 = load double, double* %155, align 8
  %224 = load double, double* %152, align 8
  %225 = fsub double %223, %224
  %226 = fmul double %225, %224
  %227 = fsub double %223, %224
  %228 = fmul double %227, %224
  %229 = fsub double %223, %224
  %230 = fmul double %229, %224
  %231 = fsub double %223, %224
  %232 = fsub double -0.000000e+00, %222
  %233 = fadd double %232, %231
  %234 = fsub double -0.000000e+00, %222
  %235 = fadd double %234, %231
  %236 = fsub double -0.000000e+00, %222
  %237 = fadd double %236, %231
  %238 = fsub double -0.000000e+00, %222
  %239 = fadd double %238, %231
  %240 = fsub double %222, %231
  %241 = fmul double %240, %231
  %242 = fmul double %222, %231
  %243 = load double, double* %155, align 8
  %244 = load double, double* %153, align 8
  %245 = fsub double %243, %244
  %246 = fmul double %245, %244
  %247 = fsub double -0.000000e+00, %243
  %248 = fadd double %247, %244
  %249 = fsub double %243, %244
  %250 = fsub double -0.000000e+00, %242
  %251 = fadd double %250, %249
  %252 = fmul double %242, %249
  %253 = load double, double* %150, align 8
  %254 = load double, double* %151, align 8
  %255 = fsub double %253, %254
  %256 = fmul double %255, %254
  %257 = fsub double -0.000000e+00, %253
  %258 = fadd double %257, %254
  %259 = fsub double %253, %254
  %260 = fmul double %259, %254
  %261 = fsub double %253, %254
  %262 = fmul double %261, %254
  %263 = fmul double %253, %254
  %264 = load double, double* %152, align 8
  %265 = fsub double %263, %264
  %266 = fmul double %265, %264
  %267 = fsub double %263, %264
  %268 = fmul double %267, %264
  %269 = fsub double %263, %264
  %270 = fmul double %269, %264
  %271 = fsub double -0.000000e+00, %263
  %272 = fadd double %271, %264
  %273 = fmul double %263, %264
  %274 = load double, double* %153, align 8
  %275 = fsub double %273, %274
  %276 = fmul double %275, %274
  %277 = fsub double -0.000000e+00, %273
  %278 = fadd double %277, %274
  %279 = fsub double -0.000000e+00, %273
  %280 = fadd double %279, %274
  %281 = fmul double %273, %274
  %282 = load double, double* %157, align 8
  %283 = call double @cos(double %282) #3
  %284 = fsub double -0.000000e+00, %281
  %285 = fadd double %284, %283
  %286 = fsub double -0.000000e+00, %281
  %287 = fadd double %286, %283
  %288 = fmul double %281, %283
  %289 = load double, double* %157, align 8
  %290 = call double @cos(double %289) #3
  %291 = fsub double %288, %290
  %292 = fmul double %291, %290
  %293 = fsub double -0.000000e+00, %288
  %294 = fadd double %293, %290
  %295 = fsub double %288, %290
  %296 = fmul double %295, %290
  %297 = fsub double %288, %290
  %298 = fmul double %297, %290
  %299 = fsub double %288, %290
  %300 = fmul double %299, %290
  %301 = fsub double -0.000000e+00, %288
  %302 = fadd double %301, %290
  %303 = fsub double %288, %290
  %304 = fmul double %303, %290
  %305 = fsub double -0.000000e+00, %288
  %306 = fadd double %305, %290
  %307 = fmul double %288, %290
  %308 = fsub double %252, %307
  %309 = fmul double %308, %307
  %310 = fsub double %252, %307
  %311 = fmul double %310, %307
  %312 = fsub double %252, %307
  %313 = call double @sqrt(double %312) #3
  store double %313, double* %156, align 8
  %314 = load double, double* %155, align 8
  %315 = load double, double* %150, align 8
  %316 = fsub double -0.000000e+00, %314
  %317 = fadd double %316, %315
  %318 = fsub double %314, %315
  %319 = fmul double %318, %315
  %320 = fsub double -0.000000e+00, %314
  %321 = fadd double %320, %315
  %322 = fsub double %314, %315
  %323 = fmul double %322, %315
  %324 = fsub double %314, %315
  %325 = load double, double* %155, align 8
  %326 = load double, double* %151, align 8
  %327 = fsub double %325, %326
  %328 = fmul double %327, %326
  %329 = fsub double %325, %326
  %330 = fmul double %329, %326
  %331 = fsub double -0.000000e+00, %325
  %332 = fadd double %331, %326
  %333 = fsub double -0.000000e+00, %325
  %334 = fadd double %333, %326
  %335 = fsub double %325, %326
  %336 = fsub double -0.000000e+00, %324
  %337 = fadd double %336, %335
  %338 = fsub double -0.000000e+00, %324
  %339 = fadd double %338, %335
  %340 = fmul double %324, %335
  %341 = load double, double* %155, align 8
  %342 = load double, double* %152, align 8
  %343 = fsub double %341, %342
  %344 = fsub double %340, %343
  %345 = fmul double %344, %343
  %346 = fsub double %340, %343
  %347 = fmul double %346, %343
  %348 = fsub double -0.000000e+00, %340
  %349 = fadd double %348, %343
  %350 = fsub double %340, %343
  %351 = fmul double %350, %343
  %352 = fmul double %340, %343
  %353 = load double, double* %155, align 8
  %354 = load double, double* %153, align 8
  %355 = fsub double -0.000000e+00, %353
  %356 = fadd double %355, %354
  %357 = fsub double -0.000000e+00, %353
  %358 = fadd double %357, %354
  %359 = fsub double %353, %354
  %360 = fmul double %359, %354
  %361 = fsub double %353, %354
  %362 = fmul double %361, %354
  %363 = fsub double %353, %354
  %364 = fsub double %352, %363
  %365 = fmul double %364, %363
  %366 = fsub double -0.000000e+00, %352
  %367 = fadd double %366, %363
  %368 = fsub double -0.000000e+00, %352
  %369 = fadd double %368, %363
  %370 = fsub double %352, %363
  %371 = fmul double %370, %363
  %372 = fmul double %352, %363
  %373 = load double, double* %150, align 8
  %374 = load double, double* %151, align 8
  %375 = fsub double %373, %374
  %376 = fmul double %375, %374
  %377 = fsub double -0.000000e+00, %373
  %378 = fadd double %377, %374
  %379 = fsub double %373, %374
  %380 = fmul double %379, %374
  %381 = fsub double %373, %374
  %382 = fmul double %381, %374
  %383 = fsub double -0.000000e+00, %373
  %384 = fadd double %383, %374
  %385 = fmul double %373, %374
  %386 = load double, double* %152, align 8
  %387 = fsub double -0.000000e+00, %385
  %388 = fadd double %387, %386
  %389 = fsub double %385, %386
  %390 = fmul double %389, %386
  %391 = fmul double %385, %386
  %392 = load double, double* %153, align 8
  %393 = fsub double %391, %392
  %394 = fmul double %393, %392
  %395 = fsub double -0.000000e+00, %391
  %396 = fadd double %395, %392
  %397 = fsub double %391, %392
  %398 = fmul double %397, %392
  %399 = fsub double %391, %392
  %400 = fmul double %399, %392
  %401 = fsub double %391, %392
  %402 = fmul double %401, %392
  %403 = fsub double -0.000000e+00, %391
  %404 = fadd double %403, %392
  %405 = fmul double %391, %392
  %406 = load double, double* %154, align 8
  %407 = fsub double 0x400921FB4D12D84A, %406
  %408 = fmul double %407, %406
  %409 = fsub double -0.000000e+00, 0x400921FB4D12D84A
  %410 = fadd double %409, %406
  %411 = fsub double -0.000000e+00, 0x400921FB4D12D84A
  %412 = fadd double %411, %406
  %413 = fmul double 0x400921FB4D12D84A, %406
  %414 = fsub double -0.000000e+00, %413
  %415 = fadd double %414, 2.000000e+00
  %416 = fsub double %413, 2.000000e+00
  %417 = fmul double %416, 2.000000e+00
  %418 = fdiv double %413, 2.000000e+00
  %419 = fsub double %418, 1.800000e+02
  %420 = fmul double %419, 1.800000e+02
  %421 = fsub double %418, 1.800000e+02
  %422 = fmul double %421, 1.800000e+02
  %423 = fsub double -0.000000e+00, %418
  %424 = fadd double %423, 1.800000e+02
  %425 = fsub double %418, 1.800000e+02
  %426 = fmul double %425, 1.800000e+02
  %427 = fsub double -0.000000e+00, %418
  %428 = fadd double %427, 1.800000e+02
  %429 = fsub double %418, 1.800000e+02
  %430 = fmul double %429, 1.800000e+02
  %431 = fsub double %418, 1.800000e+02
  %432 = fmul double %431, 1.800000e+02
  %433 = fsub double -0.000000e+00, %418
  %434 = fadd double %433, 1.800000e+02
  %435 = fdiv double %418, 1.800000e+02
  %436 = call double @cos(double %435) #3
  %437 = fmul double %405, %436
  %438 = load double, double* %154, align 8
  %439 = fsub double -0.000000e+00, 0x400921FB4D12D84A
  %440 = fadd double %439, %438
  %441 = fmul double 0x400921FB4D12D84A, %438
  %442 = fsub double -0.000000e+00, %441
  %443 = fadd double %442, 2.000000e+00
  %444 = fsub double -0.000000e+00, %441
  %445 = fadd double %444, 2.000000e+00
  %446 = fsub double -0.000000e+00, %441
  %447 = fadd double %446, 2.000000e+00
  %448 = fsub double %441, 2.000000e+00
  %449 = fmul double %448, 2.000000e+00
  %450 = fsub double %441, 2.000000e+00
  %451 = fmul double %450, 2.000000e+00
  %452 = fsub double %441, 2.000000e+00
  %453 = fmul double %452, 2.000000e+00
  %454 = fsub double -0.000000e+00, %441
  %455 = fadd double %454, 2.000000e+00
  %456 = fsub double %441, 2.000000e+00
  %457 = fmul double %456, 2.000000e+00
  %458 = fdiv double %441, 2.000000e+00
  %459 = fsub double %458, 1.800000e+02
  %460 = fmul double %459, 1.800000e+02
  %461 = fsub double -0.000000e+00, %458
  %462 = fadd double %461, 1.800000e+02
  %463 = fsub double %458, 1.800000e+02
  %464 = fmul double %463, 1.800000e+02
  %465 = fsub double %458, 1.800000e+02
  %466 = fmul double %465, 1.800000e+02
  %467 = fsub double -0.000000e+00, %458
  %468 = fadd double %467, 1.800000e+02
  %469 = fsub double -0.000000e+00, %458
  %470 = fadd double %469, 1.800000e+02
  %471 = fdiv double %458, 1.800000e+02
  %472 = call double @cos(double %471) #3
  %473 = fsub double %437, %472
  %474 = fmul double %473, %472
  %475 = fsub double %437, %472
  %476 = fmul double %475, %472
  %477 = fsub double -0.000000e+00, %437
  %478 = fadd double %477, %472
  %479 = fsub double -0.000000e+00, %437
  %480 = fadd double %479, %472
  %481 = fsub double -0.000000e+00, %437
  %482 = fadd double %481, %472
  %483 = fsub double %437, %472
  %484 = fmul double %483, %472
  %485 = fmul double %437, %472
  %486 = fsub double -0.000000e+00, %372
  %487 = fadd double %486, %485
  %488 = fsub double -0.000000e+00, %372
  %489 = fadd double %488, %485
  %490 = fsub double %372, %485
  %491 = fcmp olt double %490, 0.000000e+00
  br label %9

; <label>:492:                                    ; preds = %115, %106
  %493 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0))
  br label %115

; <label>:494:                                    ; preds = %138, %129
  br label %138
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
