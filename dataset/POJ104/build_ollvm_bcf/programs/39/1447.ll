; ModuleID = 'source-C-CXX/39/1447.c'
source_filename = "source-C-CXX/39/1447.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %106

; <label>:9:                                      ; preds = %0, %106
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %11)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %12)
  %20 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %13)
  %21 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %14)
  %22 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %15)
  %23 = load double, double* %17, align 8
  %24 = load double, double* %11, align 8
  %25 = fsub double %23, %24
  %26 = load double, double* %17, align 8
  %27 = load double, double* %12, align 8
  %28 = fsub double %26, %27
  %29 = fmul double %25, %28
  %30 = load double, double* %17, align 8
  %31 = load double, double* %13, align 8
  %32 = fsub double %30, %31
  %33 = fmul double %29, %32
  %34 = load double, double* %17, align 8
  %35 = load double, double* %14, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %36
  %38 = load double, double* %11, align 8
  %39 = load double, double* %12, align 8
  %40 = fmul double %38, %39
  %41 = load double, double* %13, align 8
  %42 = fmul double %40, %41
  %43 = load double, double* %14, align 8
  %44 = fmul double %42, %43
  %45 = load double, double* %15, align 8
  %46 = fdiv double %45, 2.000000e+00
  %47 = fdiv double %46, 1.800000e+02
  %48 = fmul double %47, 1.000000e+02
  %49 = call double @cos(double %48) #3
  %50 = fmul double %44, %49
  %51 = load double, double* %15, align 8
  %52 = fdiv double %51, 2.000000e+00
  %53 = fdiv double %52, 1.800000e+02
  %54 = fmul double %53, 1.000000e+02
  %55 = call double @cos(double %54) #3
  %56 = fmul double %50, %55
  %57 = fsub double %37, %56
  %58 = call double @sqrt(double %57) #3
  store double %58, double* %16, align 8
  %59 = load double, double* %17, align 8
  %60 = load double, double* %11, align 8
  %61 = fsub double %59, %60
  %62 = load double, double* %17, align 8
  %63 = load double, double* %12, align 8
  %64 = fsub double %62, %63
  %65 = fmul double %61, %64
  %66 = load double, double* %17, align 8
  %67 = load double, double* %13, align 8
  %68 = fsub double %66, %67
  %69 = fmul double %65, %68
  %70 = load double, double* %17, align 8
  %71 = load double, double* %14, align 8
  %72 = fsub double %70, %71
  %73 = fmul double %69, %72
  %74 = load double, double* %11, align 8
  %75 = load double, double* %12, align 8
  %76 = fmul double %74, %75
  %77 = load double, double* %13, align 8
  %78 = fmul double %76, %77
  %79 = load double, double* %14, align 8
  %80 = fmul double %78, %79
  %81 = load double, double* %15, align 8
  %82 = fdiv double %81, 2.000000e+00
  %83 = call double @cos(double %82) #3
  %84 = fmul double %80, %83
  %85 = load double, double* %15, align 8
  %86 = fdiv double %85, 2.000000e+00
  %87 = call double @cos(double %86) #3
  %88 = fmul double %84, %87
  %89 = fsub double %73, %88
  %90 = fcmp olt double %89, 0.000000e+00
  %91 = load i32, i32* @x
  %92 = load i32, i32* @y
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %99, label %106

; <label>:99:                                     ; preds = %9
  br i1 %90, label %100, label %102

; <label>:100:                                    ; preds = %99
  %101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %105

; <label>:102:                                    ; preds = %99
  %103 = load double, double* %16, align 8
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %103)
  br label %105

; <label>:105:                                    ; preds = %102, %100
  ret i32 0

; <label>:106:                                    ; preds = %9, %0
  %107 = alloca i32, align 4
  %108 = alloca double, align 8
  %109 = alloca double, align 8
  %110 = alloca double, align 8
  %111 = alloca double, align 8
  %112 = alloca double, align 8
  %113 = alloca double, align 8
  %114 = alloca double, align 8
  store i32 0, i32* %107, align 4
  %115 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %108)
  %116 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %109)
  %117 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %110)
  %118 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %111)
  %119 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %112)
  %120 = load double, double* %114, align 8
  %121 = load double, double* %108, align 8
  %122 = fsub double %120, %121
  %123 = fmul double %122, %121
  %124 = fsub double %120, %121
  %125 = fmul double %124, %121
  %126 = fsub double %120, %121
  %127 = load double, double* %114, align 8
  %128 = load double, double* %109, align 8
  %129 = fsub double -0.000000e+00, %127
  %130 = fadd double %129, %128
  %131 = fsub double %127, %128
  %132 = fmul double %131, %128
  %133 = fsub double -0.000000e+00, %127
  %134 = fadd double %133, %128
  %135 = fsub double %127, %128
  %136 = fmul double %135, %128
  %137 = fsub double -0.000000e+00, %127
  %138 = fadd double %137, %128
  %139 = fsub double %127, %128
  %140 = fmul double %139, %128
  %141 = fsub double %127, %128
  %142 = fmul double %141, %128
  %143 = fsub double %127, %128
  %144 = fmul double %143, %128
  %145 = fsub double -0.000000e+00, %127
  %146 = fadd double %145, %128
  %147 = fsub double %127, %128
  %148 = fsub double %126, %147
  %149 = fmul double %148, %147
  %150 = fsub double -0.000000e+00, %126
  %151 = fadd double %150, %147
  %152 = fsub double %126, %147
  %153 = fmul double %152, %147
  %154 = fsub double %126, %147
  %155 = fmul double %154, %147
  %156 = fsub double %126, %147
  %157 = fmul double %156, %147
  %158 = fsub double -0.000000e+00, %126
  %159 = fadd double %158, %147
  %160 = fmul double %126, %147
  %161 = load double, double* %114, align 8
  %162 = load double, double* %110, align 8
  %163 = fsub double -0.000000e+00, %161
  %164 = fadd double %163, %162
  %165 = fsub double %161, %162
  %166 = fmul double %165, %162
  %167 = fsub double -0.000000e+00, %161
  %168 = fadd double %167, %162
  %169 = fsub double %161, %162
  %170 = fsub double -0.000000e+00, %160
  %171 = fadd double %170, %169
  %172 = fsub double -0.000000e+00, %160
  %173 = fadd double %172, %169
  %174 = fmul double %160, %169
  %175 = load double, double* %114, align 8
  %176 = load double, double* %111, align 8
  %177 = fsub double -0.000000e+00, %175
  %178 = fadd double %177, %176
  %179 = fsub double -0.000000e+00, %175
  %180 = fadd double %179, %176
  %181 = fsub double %175, %176
  %182 = fmul double %181, %176
  %183 = fsub double %175, %176
  %184 = fsub double %174, %183
  %185 = fmul double %184, %183
  %186 = fsub double -0.000000e+00, %174
  %187 = fadd double %186, %183
  %188 = fsub double %174, %183
  %189 = fmul double %188, %183
  %190 = fsub double -0.000000e+00, %174
  %191 = fadd double %190, %183
  %192 = fsub double -0.000000e+00, %174
  %193 = fadd double %192, %183
  %194 = fsub double -0.000000e+00, %174
  %195 = fadd double %194, %183
  %196 = fsub double -0.000000e+00, %174
  %197 = fadd double %196, %183
  %198 = fmul double %174, %183
  %199 = load double, double* %108, align 8
  %200 = load double, double* %109, align 8
  %201 = fsub double -0.000000e+00, %199
  %202 = fadd double %201, %200
  %203 = fsub double -0.000000e+00, %199
  %204 = fadd double %203, %200
  %205 = fsub double %199, %200
  %206 = fmul double %205, %200
  %207 = fsub double -0.000000e+00, %199
  %208 = fadd double %207, %200
  %209 = fmul double %199, %200
  %210 = load double, double* %110, align 8
  %211 = fsub double %209, %210
  %212 = fmul double %211, %210
  %213 = fsub double %209, %210
  %214 = fmul double %213, %210
  %215 = fsub double %209, %210
  %216 = fmul double %215, %210
  %217 = fmul double %209, %210
  %218 = load double, double* %111, align 8
  %219 = fmul double %217, %218
  %220 = load double, double* %112, align 8
  %221 = fsub double -0.000000e+00, %220
  %222 = fadd double %221, 2.000000e+00
  %223 = fsub double %220, 2.000000e+00
  %224 = fmul double %223, 2.000000e+00
  %225 = fsub double -0.000000e+00, %220
  %226 = fadd double %225, 2.000000e+00
  %227 = fsub double %220, 2.000000e+00
  %228 = fmul double %227, 2.000000e+00
  %229 = fsub double -0.000000e+00, %220
  %230 = fadd double %229, 2.000000e+00
  %231 = fsub double %220, 2.000000e+00
  %232 = fmul double %231, 2.000000e+00
  %233 = fsub double -0.000000e+00, %220
  %234 = fadd double %233, 2.000000e+00
  %235 = fsub double %220, 2.000000e+00
  %236 = fmul double %235, 2.000000e+00
  %237 = fdiv double %220, 2.000000e+00
  %238 = fsub double %237, 1.800000e+02
  %239 = fmul double %238, 1.800000e+02
  %240 = fsub double %237, 1.800000e+02
  %241 = fmul double %240, 1.800000e+02
  %242 = fdiv double %237, 1.800000e+02
  %243 = fsub double %242, 1.000000e+02
  %244 = fmul double %243, 1.000000e+02
  %245 = fsub double -0.000000e+00, %242
  %246 = fadd double %245, 1.000000e+02
  %247 = fsub double %242, 1.000000e+02
  %248 = fmul double %247, 1.000000e+02
  %249 = fsub double %242, 1.000000e+02
  %250 = fmul double %249, 1.000000e+02
  %251 = fsub double %242, 1.000000e+02
  %252 = fmul double %251, 1.000000e+02
  %253 = fsub double -0.000000e+00, %242
  %254 = fadd double %253, 1.000000e+02
  %255 = fsub double -0.000000e+00, %242
  %256 = fadd double %255, 1.000000e+02
  %257 = fmul double %242, 1.000000e+02
  %258 = call double @cos(double %257) #3
  %259 = fsub double -0.000000e+00, %219
  %260 = fadd double %259, %258
  %261 = fsub double -0.000000e+00, %219
  %262 = fadd double %261, %258
  %263 = fsub double %219, %258
  %264 = fmul double %263, %258
  %265 = fsub double -0.000000e+00, %219
  %266 = fadd double %265, %258
  %267 = fsub double -0.000000e+00, %219
  %268 = fadd double %267, %258
  %269 = fsub double -0.000000e+00, %219
  %270 = fadd double %269, %258
  %271 = fsub double -0.000000e+00, %219
  %272 = fadd double %271, %258
  %273 = fmul double %219, %258
  %274 = load double, double* %112, align 8
  %275 = fdiv double %274, 2.000000e+00
  %276 = fsub double -0.000000e+00, %275
  %277 = fadd double %276, 1.800000e+02
  %278 = fsub double -0.000000e+00, %275
  %279 = fadd double %278, 1.800000e+02
  %280 = fdiv double %275, 1.800000e+02
  %281 = fsub double %280, 1.000000e+02
  %282 = fmul double %281, 1.000000e+02
  %283 = fsub double %280, 1.000000e+02
  %284 = fmul double %283, 1.000000e+02
  %285 = fmul double %280, 1.000000e+02
  %286 = call double @cos(double %285) #3
  %287 = fsub double -0.000000e+00, %273
  %288 = fadd double %287, %286
  %289 = fsub double -0.000000e+00, %273
  %290 = fadd double %289, %286
  %291 = fsub double %273, %286
  %292 = fmul double %291, %286
  %293 = fsub double -0.000000e+00, %273
  %294 = fadd double %293, %286
  %295 = fsub double -0.000000e+00, %273
  %296 = fadd double %295, %286
  %297 = fmul double %273, %286
  %298 = fsub double -0.000000e+00, %198
  %299 = fadd double %298, %297
  %300 = fsub double %198, %297
  %301 = call double @sqrt(double %300) #3
  store double %301, double* %113, align 8
  %302 = load double, double* %114, align 8
  %303 = load double, double* %108, align 8
  %304 = fsub double %302, %303
  %305 = fmul double %304, %303
  %306 = fsub double %302, %303
  %307 = fmul double %306, %303
  %308 = fsub double %302, %303
  %309 = fmul double %308, %303
  %310 = fsub double %302, %303
  %311 = load double, double* %114, align 8
  %312 = load double, double* %109, align 8
  %313 = fsub double -0.000000e+00, %311
  %314 = fadd double %313, %312
  %315 = fsub double -0.000000e+00, %311
  %316 = fadd double %315, %312
  %317 = fsub double -0.000000e+00, %311
  %318 = fadd double %317, %312
  %319 = fsub double %311, %312
  %320 = fsub double -0.000000e+00, %310
  %321 = fadd double %320, %319
  %322 = fsub double %310, %319
  %323 = fmul double %322, %319
  %324 = fmul double %310, %319
  %325 = load double, double* %114, align 8
  %326 = load double, double* %110, align 8
  %327 = fsub double %325, %326
  %328 = fsub double -0.000000e+00, %324
  %329 = fadd double %328, %327
  %330 = fsub double %324, %327
  %331 = fmul double %330, %327
  %332 = fsub double %324, %327
  %333 = fmul double %332, %327
  %334 = fsub double %324, %327
  %335 = fmul double %334, %327
  %336 = fmul double %324, %327
  %337 = load double, double* %114, align 8
  %338 = load double, double* %111, align 8
  %339 = fsub double -0.000000e+00, %337
  %340 = fadd double %339, %338
  %341 = fsub double -0.000000e+00, %337
  %342 = fadd double %341, %338
  %343 = fsub double %337, %338
  %344 = fmul double %343, %338
  %345 = fsub double -0.000000e+00, %337
  %346 = fadd double %345, %338
  %347 = fsub double %337, %338
  %348 = fmul double %347, %338
  %349 = fsub double %337, %338
  %350 = fsub double %336, %349
  %351 = fmul double %350, %349
  %352 = fsub double -0.000000e+00, %336
  %353 = fadd double %352, %349
  %354 = fsub double %336, %349
  %355 = fmul double %354, %349
  %356 = fsub double -0.000000e+00, %336
  %357 = fadd double %356, %349
  %358 = fsub double %336, %349
  %359 = fmul double %358, %349
  %360 = fsub double -0.000000e+00, %336
  %361 = fadd double %360, %349
  %362 = fsub double -0.000000e+00, %336
  %363 = fadd double %362, %349
  %364 = fmul double %336, %349
  %365 = load double, double* %108, align 8
  %366 = load double, double* %109, align 8
  %367 = fsub double %365, %366
  %368 = fmul double %367, %366
  %369 = fsub double -0.000000e+00, %365
  %370 = fadd double %369, %366
  %371 = fsub double %365, %366
  %372 = fmul double %371, %366
  %373 = fsub double %365, %366
  %374 = fmul double %373, %366
  %375 = fsub double %365, %366
  %376 = fmul double %375, %366
  %377 = fsub double -0.000000e+00, %365
  %378 = fadd double %377, %366
  %379 = fsub double %365, %366
  %380 = fmul double %379, %366
  %381 = fmul double %365, %366
  %382 = load double, double* %110, align 8
  %383 = fsub double -0.000000e+00, %381
  %384 = fadd double %383, %382
  %385 = fsub double %381, %382
  %386 = fmul double %385, %382
  %387 = fsub double %381, %382
  %388 = fmul double %387, %382
  %389 = fsub double -0.000000e+00, %381
  %390 = fadd double %389, %382
  %391 = fsub double -0.000000e+00, %381
  %392 = fadd double %391, %382
  %393 = fsub double -0.000000e+00, %381
  %394 = fadd double %393, %382
  %395 = fsub double %381, %382
  %396 = fmul double %395, %382
  %397 = fmul double %381, %382
  %398 = load double, double* %111, align 8
  %399 = fsub double -0.000000e+00, %397
  %400 = fadd double %399, %398
  %401 = fsub double -0.000000e+00, %397
  %402 = fadd double %401, %398
  %403 = fsub double %397, %398
  %404 = fmul double %403, %398
  %405 = fsub double %397, %398
  %406 = fmul double %405, %398
  %407 = fmul double %397, %398
  %408 = load double, double* %112, align 8
  %409 = fsub double -0.000000e+00, %408
  %410 = fadd double %409, 2.000000e+00
  %411 = fsub double -0.000000e+00, %408
  %412 = fadd double %411, 2.000000e+00
  %413 = fsub double %408, 2.000000e+00
  %414 = fmul double %413, 2.000000e+00
  %415 = fsub double %408, 2.000000e+00
  %416 = fmul double %415, 2.000000e+00
  %417 = fdiv double %408, 2.000000e+00
  %418 = call double @cos(double %417) #3
  %419 = fsub double -0.000000e+00, %407
  %420 = fadd double %419, %418
  %421 = fsub double %407, %418
  %422 = fmul double %421, %418
  %423 = fsub double -0.000000e+00, %407
  %424 = fadd double %423, %418
  %425 = fsub double -0.000000e+00, %407
  %426 = fadd double %425, %418
  %427 = fsub double %407, %418
  %428 = fmul double %427, %418
  %429 = fsub double -0.000000e+00, %407
  %430 = fadd double %429, %418
  %431 = fmul double %407, %418
  %432 = load double, double* %112, align 8
  %433 = fsub double %432, 2.000000e+00
  %434 = fmul double %433, 2.000000e+00
  %435 = fdiv double %432, 2.000000e+00
  %436 = call double @cos(double %435) #3
  %437 = fsub double %431, %436
  %438 = fmul double %437, %436
  %439 = fsub double %431, %436
  %440 = fmul double %439, %436
  %441 = fsub double -0.000000e+00, %431
  %442 = fadd double %441, %436
  %443 = fsub double -0.000000e+00, %431
  %444 = fadd double %443, %436
  %445 = fmul double %431, %436
  %446 = fsub double -0.000000e+00, %364
  %447 = fadd double %446, %445
  %448 = fsub double %364, %445
  %449 = fcmp olt double %448, 0.000000e+00
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
