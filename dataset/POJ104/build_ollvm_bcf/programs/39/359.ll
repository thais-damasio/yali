; ModuleID = 'source-C-CXX/39/359.c'
source_filename = "source-C-CXX/39/359.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%lf%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%.4f\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Invalid input\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %108

; <label>:9:                                      ; preds = %0, %108
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %15)
  %20 = load double, double* %15, align 8
  %21 = fmul double 0.000000e+00, %20
  %22 = fdiv double %21, 2.000000e+00
  store double %22, double* %16, align 8
  %23 = load double, double* %11, align 8
  %24 = load double, double* %12, align 8
  %25 = fadd double %23, %24
  %26 = load double, double* %13, align 8
  %27 = fadd double %25, %26
  %28 = load double, double* %14, align 8
  %29 = fadd double %27, %28
  %30 = fmul double 1.000000e+00, %29
  %31 = fdiv double %30, 2.000000e+00
  store double %31, double* %18, align 8
  %32 = load double, double* %18, align 8
  %33 = load double, double* %11, align 8
  %34 = fsub double %32, %33
  %35 = load double, double* %18, align 8
  %36 = load double, double* %12, align 8
  %37 = fsub double %35, %36
  %38 = fmul double %34, %37
  %39 = load double, double* %18, align 8
  %40 = load double, double* %13, align 8
  %41 = fsub double %39, %40
  %42 = fmul double %38, %41
  %43 = load double, double* %18, align 8
  %44 = load double, double* %14, align 8
  %45 = fsub double %43, %44
  %46 = fmul double %42, %45
  %47 = load double, double* %11, align 8
  %48 = load double, double* %12, align 8
  %49 = fmul double %47, %48
  %50 = load double, double* %13, align 8
  %51 = fmul double %49, %50
  %52 = load double, double* %14, align 8
  %53 = fmul double %51, %52
  %54 = load double, double* %16, align 8
  %55 = call double @cos(double %54) #3
  %56 = fmul double %53, %55
  %57 = load double, double* %16, align 8
  %58 = call double @cos(double %57) #3
  %59 = fmul double %56, %58
  %60 = fsub double %46, %59
  %61 = call double @sqrt(double %60) #3
  store double %61, double* %17, align 8
  %62 = load double, double* %18, align 8
  %63 = load double, double* %11, align 8
  %64 = fsub double %62, %63
  %65 = load double, double* %18, align 8
  %66 = load double, double* %12, align 8
  %67 = fsub double %65, %66
  %68 = fmul double %64, %67
  %69 = load double, double* %18, align 8
  %70 = load double, double* %13, align 8
  %71 = fsub double %69, %70
  %72 = fmul double %68, %71
  %73 = load double, double* %18, align 8
  %74 = load double, double* %14, align 8
  %75 = fsub double %73, %74
  %76 = fmul double %72, %75
  %77 = load double, double* %11, align 8
  %78 = load double, double* %12, align 8
  %79 = fmul double %77, %78
  %80 = load double, double* %13, align 8
  %81 = fmul double %79, %80
  %82 = load double, double* %14, align 8
  %83 = fmul double %81, %82
  %84 = load double, double* %16, align 8
  %85 = call double @cos(double %84) #3
  %86 = fmul double %83, %85
  %87 = load double, double* %16, align 8
  %88 = call double @cos(double %87) #3
  %89 = fmul double %86, %88
  %90 = fsub double %76, %89
  %91 = fcmp oge double %90, 0.000000e+00
  %92 = load i32, i32* @x
  %93 = load i32, i32* @y
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %100, label %108

; <label>:100:                                    ; preds = %9
  br i1 %91, label %101, label %104

; <label>:101:                                    ; preds = %100
  %102 = load double, double* %17, align 8
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double %102)
  br label %107

; <label>:104:                                    ; preds = %100
  %105 = load double, double* %17, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), double %105)
  br label %107

; <label>:107:                                    ; preds = %104, %101
  ret i32 0

; <label>:108:                                    ; preds = %9, %0
  %109 = alloca i32, align 4
  %110 = alloca double, align 8
  %111 = alloca double, align 8
  %112 = alloca double, align 8
  %113 = alloca double, align 8
  %114 = alloca double, align 8
  %115 = alloca double, align 8
  %116 = alloca double, align 8
  %117 = alloca double, align 8
  store i32 0, i32* %109, align 4
  %118 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %110, double* %111, double* %112, double* %113, double* %114)
  %119 = load double, double* %114, align 8
  %120 = fsub double 0.000000e+00, %119
  %121 = fmul double %120, %119
  %122 = fsub double 0.000000e+00, %119
  %123 = fmul double %122, %119
  %124 = fsub double 0.000000e+00, %119
  %125 = fmul double %124, %119
  %126 = fmul double 0.000000e+00, %119
  %127 = fsub double %126, 2.000000e+00
  %128 = fmul double %127, 2.000000e+00
  %129 = fsub double %126, 2.000000e+00
  %130 = fmul double %129, 2.000000e+00
  %131 = fsub double -0.000000e+00, %126
  %132 = fadd double %131, 2.000000e+00
  %133 = fsub double -0.000000e+00, %126
  %134 = fadd double %133, 2.000000e+00
  %135 = fsub double %126, 2.000000e+00
  %136 = fmul double %135, 2.000000e+00
  %137 = fsub double -0.000000e+00, %126
  %138 = fadd double %137, 2.000000e+00
  %139 = fdiv double %126, 2.000000e+00
  store double %139, double* %115, align 8
  %140 = load double, double* %110, align 8
  %141 = load double, double* %111, align 8
  %142 = fsub double %140, %141
  %143 = fmul double %142, %141
  %144 = fsub double -0.000000e+00, %140
  %145 = fadd double %144, %141
  %146 = fsub double %140, %141
  %147 = fmul double %146, %141
  %148 = fsub double -0.000000e+00, %140
  %149 = fadd double %148, %141
  %150 = fsub double -0.000000e+00, %140
  %151 = fadd double %150, %141
  %152 = fsub double %140, %141
  %153 = fmul double %152, %141
  %154 = fsub double %140, %141
  %155 = fmul double %154, %141
  %156 = fsub double -0.000000e+00, %140
  %157 = fadd double %156, %141
  %158 = fadd double %140, %141
  %159 = load double, double* %112, align 8
  %160 = fsub double -0.000000e+00, %158
  %161 = fadd double %160, %159
  %162 = fsub double -0.000000e+00, %158
  %163 = fadd double %162, %159
  %164 = fadd double %158, %159
  %165 = load double, double* %113, align 8
  %166 = fsub double -0.000000e+00, %164
  %167 = fadd double %166, %165
  %168 = fadd double %164, %165
  %169 = fsub double 1.000000e+00, %168
  %170 = fmul double %169, %168
  %171 = fsub double -0.000000e+00, 1.000000e+00
  %172 = fadd double %171, %168
  %173 = fsub double -0.000000e+00, 1.000000e+00
  %174 = fadd double %173, %168
  %175 = fmul double 1.000000e+00, %168
  %176 = fsub double %175, 2.000000e+00
  %177 = fmul double %176, 2.000000e+00
  %178 = fsub double -0.000000e+00, %175
  %179 = fadd double %178, 2.000000e+00
  %180 = fdiv double %175, 2.000000e+00
  store double %180, double* %117, align 8
  %181 = load double, double* %117, align 8
  %182 = load double, double* %110, align 8
  %183 = fsub double %181, %182
  %184 = fmul double %183, %182
  %185 = fsub double %181, %182
  %186 = fmul double %185, %182
  %187 = fsub double %181, %182
  %188 = fmul double %187, %182
  %189 = fsub double -0.000000e+00, %181
  %190 = fadd double %189, %182
  %191 = fsub double %181, %182
  %192 = load double, double* %117, align 8
  %193 = load double, double* %111, align 8
  %194 = fsub double %192, %193
  %195 = fmul double %194, %193
  %196 = fsub double %192, %193
  %197 = fsub double %191, %196
  %198 = fmul double %197, %196
  %199 = fsub double %191, %196
  %200 = fmul double %199, %196
  %201 = fsub double %191, %196
  %202 = fmul double %201, %196
  %203 = fsub double -0.000000e+00, %191
  %204 = fadd double %203, %196
  %205 = fsub double %191, %196
  %206 = fmul double %205, %196
  %207 = fsub double -0.000000e+00, %191
  %208 = fadd double %207, %196
  %209 = fsub double %191, %196
  %210 = fmul double %209, %196
  %211 = fmul double %191, %196
  %212 = load double, double* %117, align 8
  %213 = load double, double* %112, align 8
  %214 = fsub double %212, %213
  %215 = fmul double %214, %213
  %216 = fsub double %212, %213
  %217 = fmul double %216, %213
  %218 = fsub double %212, %213
  %219 = fmul double %218, %213
  %220 = fsub double %212, %213
  %221 = fmul double %220, %213
  %222 = fsub double %212, %213
  %223 = fsub double -0.000000e+00, %211
  %224 = fadd double %223, %222
  %225 = fmul double %211, %222
  %226 = load double, double* %117, align 8
  %227 = load double, double* %113, align 8
  %228 = fsub double -0.000000e+00, %226
  %229 = fadd double %228, %227
  %230 = fsub double -0.000000e+00, %226
  %231 = fadd double %230, %227
  %232 = fsub double -0.000000e+00, %226
  %233 = fadd double %232, %227
  %234 = fsub double %226, %227
  %235 = fmul double %234, %227
  %236 = fsub double -0.000000e+00, %226
  %237 = fadd double %236, %227
  %238 = fsub double -0.000000e+00, %226
  %239 = fadd double %238, %227
  %240 = fsub double %226, %227
  %241 = fmul double %240, %227
  %242 = fsub double %226, %227
  %243 = fsub double -0.000000e+00, %225
  %244 = fadd double %243, %242
  %245 = fsub double -0.000000e+00, %225
  %246 = fadd double %245, %242
  %247 = fsub double %225, %242
  %248 = fmul double %247, %242
  %249 = fmul double %225, %242
  %250 = load double, double* %110, align 8
  %251 = load double, double* %111, align 8
  %252 = fsub double -0.000000e+00, %250
  %253 = fadd double %252, %251
  %254 = fsub double %250, %251
  %255 = fmul double %254, %251
  %256 = fsub double -0.000000e+00, %250
  %257 = fadd double %256, %251
  %258 = fsub double -0.000000e+00, %250
  %259 = fadd double %258, %251
  %260 = fsub double %250, %251
  %261 = fmul double %260, %251
  %262 = fsub double %250, %251
  %263 = fmul double %262, %251
  %264 = fsub double %250, %251
  %265 = fmul double %264, %251
  %266 = fmul double %250, %251
  %267 = load double, double* %112, align 8
  %268 = fsub double %266, %267
  %269 = fmul double %268, %267
  %270 = fsub double -0.000000e+00, %266
  %271 = fadd double %270, %267
  %272 = fsub double %266, %267
  %273 = fmul double %272, %267
  %274 = fsub double -0.000000e+00, %266
  %275 = fadd double %274, %267
  %276 = fsub double -0.000000e+00, %266
  %277 = fadd double %276, %267
  %278 = fsub double -0.000000e+00, %266
  %279 = fadd double %278, %267
  %280 = fsub double %266, %267
  %281 = fmul double %280, %267
  %282 = fsub double -0.000000e+00, %266
  %283 = fadd double %282, %267
  %284 = fsub double %266, %267
  %285 = fmul double %284, %267
  %286 = fmul double %266, %267
  %287 = load double, double* %113, align 8
  %288 = fsub double -0.000000e+00, %286
  %289 = fadd double %288, %287
  %290 = fsub double -0.000000e+00, %286
  %291 = fadd double %290, %287
  %292 = fsub double -0.000000e+00, %286
  %293 = fadd double %292, %287
  %294 = fsub double %286, %287
  %295 = fmul double %294, %287
  %296 = fsub double %286, %287
  %297 = fmul double %296, %287
  %298 = fsub double -0.000000e+00, %286
  %299 = fadd double %298, %287
  %300 = fmul double %286, %287
  %301 = load double, double* %115, align 8
  %302 = call double @cos(double %301) #3
  %303 = fsub double %300, %302
  %304 = fmul double %303, %302
  %305 = fmul double %300, %302
  %306 = load double, double* %115, align 8
  %307 = call double @cos(double %306) #3
  %308 = fsub double -0.000000e+00, %305
  %309 = fadd double %308, %307
  %310 = fsub double -0.000000e+00, %305
  %311 = fadd double %310, %307
  %312 = fmul double %305, %307
  %313 = fsub double %249, %312
  %314 = call double @sqrt(double %313) #3
  store double %314, double* %116, align 8
  %315 = load double, double* %117, align 8
  %316 = load double, double* %110, align 8
  %317 = fsub double %315, %316
  %318 = fmul double %317, %316
  %319 = fsub double %315, %316
  %320 = load double, double* %117, align 8
  %321 = load double, double* %111, align 8
  %322 = fsub double %320, %321
  %323 = fmul double %322, %321
  %324 = fsub double -0.000000e+00, %320
  %325 = fadd double %324, %321
  %326 = fsub double %320, %321
  %327 = fmul double %326, %321
  %328 = fsub double %320, %321
  %329 = fmul double %328, %321
  %330 = fsub double -0.000000e+00, %320
  %331 = fadd double %330, %321
  %332 = fsub double -0.000000e+00, %320
  %333 = fadd double %332, %321
  %334 = fsub double %320, %321
  %335 = fsub double %319, %334
  %336 = fmul double %335, %334
  %337 = fsub double -0.000000e+00, %319
  %338 = fadd double %337, %334
  %339 = fsub double -0.000000e+00, %319
  %340 = fadd double %339, %334
  %341 = fmul double %319, %334
  %342 = load double, double* %117, align 8
  %343 = load double, double* %112, align 8
  %344 = fsub double %342, %343
  %345 = fsub double -0.000000e+00, %341
  %346 = fadd double %345, %344
  %347 = fsub double -0.000000e+00, %341
  %348 = fadd double %347, %344
  %349 = fsub double -0.000000e+00, %341
  %350 = fadd double %349, %344
  %351 = fsub double -0.000000e+00, %341
  %352 = fadd double %351, %344
  %353 = fsub double %341, %344
  %354 = fmul double %353, %344
  %355 = fmul double %341, %344
  %356 = load double, double* %117, align 8
  %357 = load double, double* %113, align 8
  %358 = fsub double %356, %357
  %359 = fmul double %358, %357
  %360 = fsub double -0.000000e+00, %356
  %361 = fadd double %360, %357
  %362 = fsub double -0.000000e+00, %356
  %363 = fadd double %362, %357
  %364 = fsub double -0.000000e+00, %356
  %365 = fadd double %364, %357
  %366 = fsub double %356, %357
  %367 = fmul double %366, %357
  %368 = fsub double -0.000000e+00, %356
  %369 = fadd double %368, %357
  %370 = fsub double %356, %357
  %371 = fmul double %355, %370
  %372 = load double, double* %110, align 8
  %373 = load double, double* %111, align 8
  %374 = fsub double -0.000000e+00, %372
  %375 = fadd double %374, %373
  %376 = fmul double %372, %373
  %377 = load double, double* %112, align 8
  %378 = fsub double -0.000000e+00, %376
  %379 = fadd double %378, %377
  %380 = fsub double -0.000000e+00, %376
  %381 = fadd double %380, %377
  %382 = fsub double %376, %377
  %383 = fmul double %382, %377
  %384 = fsub double -0.000000e+00, %376
  %385 = fadd double %384, %377
  %386 = fmul double %376, %377
  %387 = load double, double* %113, align 8
  %388 = fsub double -0.000000e+00, %386
  %389 = fadd double %388, %387
  %390 = fmul double %386, %387
  %391 = load double, double* %115, align 8
  %392 = call double @cos(double %391) #3
  %393 = fsub double -0.000000e+00, %390
  %394 = fadd double %393, %392
  %395 = fsub double -0.000000e+00, %390
  %396 = fadd double %395, %392
  %397 = fsub double %390, %392
  %398 = fmul double %397, %392
  %399 = fsub double -0.000000e+00, %390
  %400 = fadd double %399, %392
  %401 = fsub double -0.000000e+00, %390
  %402 = fadd double %401, %392
  %403 = fsub double -0.000000e+00, %390
  %404 = fadd double %403, %392
  %405 = fmul double %390, %392
  %406 = load double, double* %115, align 8
  %407 = call double @cos(double %406) #3
  %408 = fsub double %405, %407
  %409 = fmul double %408, %407
  %410 = fsub double -0.000000e+00, %405
  %411 = fadd double %410, %407
  %412 = fsub double %405, %407
  %413 = fmul double %412, %407
  %414 = fsub double %405, %407
  %415 = fmul double %414, %407
  %416 = fmul double %405, %407
  %417 = fsub double %371, %416
  %418 = fmul double %417, %416
  %419 = fsub double %371, %416
  %420 = fmul double %419, %416
  %421 = fsub double %371, %416
  %422 = fcmp oge double %421, 0.000000e+00
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
