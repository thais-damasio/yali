; ModuleID = 'source-C-CXX/39/2554.c'
source_filename = "source-C-CXX/39/2554.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [17 x i8] c"%lf\0A%lf\0A%lf\0A%lf\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %108

; <label>:9:                                      ; preds = %0, %108
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double* %17)
  %20 = load double, double* %11, align 8
  %21 = fdiv double %20, 2.000000e+00
  %22 = load double, double* %12, align 8
  %23 = fdiv double %22, 2.000000e+00
  %24 = fadd double %21, %23
  %25 = load double, double* %13, align 8
  %26 = fdiv double %25, 2.000000e+00
  %27 = fadd double %24, %26
  %28 = load double, double* %14, align 8
  %29 = fdiv double %28, 2.000000e+00
  %30 = fadd double %27, %29
  store double %30, double* %15, align 8
  %31 = load double, double* %15, align 8
  %32 = load double, double* %11, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %15, align 8
  %35 = load double, double* %12, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %36
  %38 = load double, double* %15, align 8
  %39 = load double, double* %13, align 8
  %40 = fsub double %38, %39
  %41 = fmul double %37, %40
  %42 = load double, double* %15, align 8
  %43 = load double, double* %14, align 8
  %44 = fsub double %42, %43
  %45 = fmul double %41, %44
  %46 = load double, double* %11, align 8
  %47 = load double, double* %12, align 8
  %48 = fmul double %46, %47
  %49 = load double, double* %13, align 8
  %50 = fmul double %48, %49
  %51 = load double, double* %14, align 8
  %52 = fmul double %50, %51
  %53 = load double, double* %17, align 8
  %54 = fdiv double %53, 1.800000e+02
  %55 = fmul double %54, 1.000000e+02
  %56 = call double @cos(double %55) #3
  %57 = fadd double %56, 1.000000e+00
  %58 = fdiv double %57, 2.000000e+00
  %59 = fmul double %52, %58
  %60 = fsub double %45, %59
  %61 = call double @sqrt(double %60) #3
  store double %61, double* %16, align 8
  %62 = load double, double* %15, align 8
  %63 = load double, double* %11, align 8
  %64 = fsub double %62, %63
  %65 = load double, double* %15, align 8
  %66 = load double, double* %12, align 8
  %67 = fsub double %65, %66
  %68 = fmul double %64, %67
  %69 = load double, double* %15, align 8
  %70 = load double, double* %13, align 8
  %71 = fsub double %69, %70
  %72 = fmul double %68, %71
  %73 = load double, double* %15, align 8
  %74 = load double, double* %14, align 8
  %75 = fsub double %73, %74
  %76 = fmul double %72, %75
  %77 = load double, double* %11, align 8
  %78 = load double, double* %12, align 8
  %79 = fmul double %77, %78
  %80 = load double, double* %13, align 8
  %81 = fmul double %79, %80
  %82 = load double, double* %14, align 8
  %83 = fmul double %81, %82
  %84 = load double, double* %17, align 8
  %85 = fdiv double %84, 1.800000e+02
  %86 = fmul double %85, 1.000000e+02
  %87 = call double @cos(double %86) #3
  %88 = fadd double %87, 1.000000e+00
  %89 = fdiv double %88, 2.000000e+00
  %90 = fmul double %83, %89
  %91 = fsub double %76, %90
  %92 = fcmp olt double %91, 0.000000e+00
  %93 = load i32, i32* @x
  %94 = load i32, i32* @y
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %101, label %108

; <label>:101:                                    ; preds = %9
  br i1 %92, label %102, label %104

; <label>:102:                                    ; preds = %101
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %107

; <label>:104:                                    ; preds = %101
  %105 = load double, double* %16, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), double %105)
  br label %107

; <label>:107:                                    ; preds = %104, %102
  ret i32 0

; <label>:108:                                    ; preds = %9, %0
  %109 = alloca i32, align 4
  %110 = alloca double, align 8
  %111 = alloca double, align 8
  %112 = alloca double, align 8
  %113 = alloca double, align 8
  %114 = alloca double, align 8
  %115 = alloca double, align 8
  %116 = alloca double, align 8
  store i32 0, i32* %109, align 4
  %117 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), double* %110, double* %111, double* %112, double* %113)
  %118 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double* %116)
  %119 = load double, double* %110, align 8
  %120 = fsub double -0.000000e+00, %119
  %121 = fadd double %120, 2.000000e+00
  %122 = fsub double -0.000000e+00, %119
  %123 = fadd double %122, 2.000000e+00
  %124 = fsub double %119, 2.000000e+00
  %125 = fmul double %124, 2.000000e+00
  %126 = fdiv double %119, 2.000000e+00
  %127 = load double, double* %111, align 8
  %128 = fsub double %127, 2.000000e+00
  %129 = fmul double %128, 2.000000e+00
  %130 = fsub double -0.000000e+00, %127
  %131 = fadd double %130, 2.000000e+00
  %132 = fsub double %127, 2.000000e+00
  %133 = fmul double %132, 2.000000e+00
  %134 = fsub double %127, 2.000000e+00
  %135 = fmul double %134, 2.000000e+00
  %136 = fdiv double %127, 2.000000e+00
  %137 = fsub double %126, %136
  %138 = fmul double %137, %136
  %139 = fsub double %126, %136
  %140 = fmul double %139, %136
  %141 = fsub double %126, %136
  %142 = fmul double %141, %136
  %143 = fadd double %126, %136
  %144 = load double, double* %112, align 8
  %145 = fsub double %144, 2.000000e+00
  %146 = fmul double %145, 2.000000e+00
  %147 = fsub double -0.000000e+00, %144
  %148 = fadd double %147, 2.000000e+00
  %149 = fsub double -0.000000e+00, %144
  %150 = fadd double %149, 2.000000e+00
  %151 = fsub double %144, 2.000000e+00
  %152 = fmul double %151, 2.000000e+00
  %153 = fsub double %144, 2.000000e+00
  %154 = fmul double %153, 2.000000e+00
  %155 = fsub double -0.000000e+00, %144
  %156 = fadd double %155, 2.000000e+00
  %157 = fdiv double %144, 2.000000e+00
  %158 = fsub double -0.000000e+00, %143
  %159 = fadd double %158, %157
  %160 = fadd double %143, %157
  %161 = load double, double* %113, align 8
  %162 = fsub double %161, 2.000000e+00
  %163 = fmul double %162, 2.000000e+00
  %164 = fsub double %161, 2.000000e+00
  %165 = fmul double %164, 2.000000e+00
  %166 = fdiv double %161, 2.000000e+00
  %167 = fsub double %160, %166
  %168 = fmul double %167, %166
  %169 = fsub double %160, %166
  %170 = fmul double %169, %166
  %171 = fsub double %160, %166
  %172 = fmul double %171, %166
  %173 = fsub double -0.000000e+00, %160
  %174 = fadd double %173, %166
  %175 = fsub double %160, %166
  %176 = fmul double %175, %166
  %177 = fsub double %160, %166
  %178 = fmul double %177, %166
  %179 = fadd double %160, %166
  store double %179, double* %114, align 8
  %180 = load double, double* %114, align 8
  %181 = load double, double* %110, align 8
  %182 = fsub double %180, %181
  %183 = fmul double %182, %181
  %184 = fsub double %180, %181
  %185 = fmul double %184, %181
  %186 = fsub double %180, %181
  %187 = fmul double %186, %181
  %188 = fsub double %180, %181
  %189 = fmul double %188, %181
  %190 = fsub double %180, %181
  %191 = load double, double* %114, align 8
  %192 = load double, double* %111, align 8
  %193 = fsub double %191, %192
  %194 = fmul double %193, %192
  %195 = fsub double -0.000000e+00, %191
  %196 = fadd double %195, %192
  %197 = fsub double -0.000000e+00, %191
  %198 = fadd double %197, %192
  %199 = fsub double -0.000000e+00, %191
  %200 = fadd double %199, %192
  %201 = fsub double %191, %192
  %202 = fsub double -0.000000e+00, %190
  %203 = fadd double %202, %201
  %204 = fsub double -0.000000e+00, %190
  %205 = fadd double %204, %201
  %206 = fsub double -0.000000e+00, %190
  %207 = fadd double %206, %201
  %208 = fmul double %190, %201
  %209 = load double, double* %114, align 8
  %210 = load double, double* %112, align 8
  %211 = fsub double -0.000000e+00, %209
  %212 = fadd double %211, %210
  %213 = fsub double %209, %210
  %214 = fmul double %213, %210
  %215 = fsub double %209, %210
  %216 = fsub double -0.000000e+00, %208
  %217 = fadd double %216, %215
  %218 = fsub double -0.000000e+00, %208
  %219 = fadd double %218, %215
  %220 = fsub double %208, %215
  %221 = fmul double %220, %215
  %222 = fsub double -0.000000e+00, %208
  %223 = fadd double %222, %215
  %224 = fsub double -0.000000e+00, %208
  %225 = fadd double %224, %215
  %226 = fsub double %208, %215
  %227 = fmul double %226, %215
  %228 = fmul double %208, %215
  %229 = load double, double* %114, align 8
  %230 = load double, double* %113, align 8
  %231 = fsub double %229, %230
  %232 = fmul double %231, %230
  %233 = fsub double %229, %230
  %234 = fsub double %228, %233
  %235 = fmul double %234, %233
  %236 = fsub double -0.000000e+00, %228
  %237 = fadd double %236, %233
  %238 = fsub double %228, %233
  %239 = fmul double %238, %233
  %240 = fmul double %228, %233
  %241 = load double, double* %110, align 8
  %242 = load double, double* %111, align 8
  %243 = fsub double %241, %242
  %244 = fmul double %243, %242
  %245 = fsub double -0.000000e+00, %241
  %246 = fadd double %245, %242
  %247 = fsub double -0.000000e+00, %241
  %248 = fadd double %247, %242
  %249 = fsub double %241, %242
  %250 = fmul double %249, %242
  %251 = fmul double %241, %242
  %252 = load double, double* %112, align 8
  %253 = fsub double -0.000000e+00, %251
  %254 = fadd double %253, %252
  %255 = fsub double %251, %252
  %256 = fmul double %255, %252
  %257 = fsub double %251, %252
  %258 = fmul double %257, %252
  %259 = fsub double -0.000000e+00, %251
  %260 = fadd double %259, %252
  %261 = fsub double -0.000000e+00, %251
  %262 = fadd double %261, %252
  %263 = fmul double %251, %252
  %264 = load double, double* %113, align 8
  %265 = fsub double -0.000000e+00, %263
  %266 = fadd double %265, %264
  %267 = fsub double %263, %264
  %268 = fmul double %267, %264
  %269 = fsub double -0.000000e+00, %263
  %270 = fadd double %269, %264
  %271 = fsub double %263, %264
  %272 = fmul double %271, %264
  %273 = fsub double -0.000000e+00, %263
  %274 = fadd double %273, %264
  %275 = fsub double %263, %264
  %276 = fmul double %275, %264
  %277 = fsub double -0.000000e+00, %263
  %278 = fadd double %277, %264
  %279 = fmul double %263, %264
  %280 = load double, double* %116, align 8
  %281 = fsub double -0.000000e+00, %280
  %282 = fadd double %281, 1.800000e+02
  %283 = fsub double -0.000000e+00, %280
  %284 = fadd double %283, 1.800000e+02
  %285 = fsub double %280, 1.800000e+02
  %286 = fmul double %285, 1.800000e+02
  %287 = fsub double %280, 1.800000e+02
  %288 = fmul double %287, 1.800000e+02
  %289 = fsub double -0.000000e+00, %280
  %290 = fadd double %289, 1.800000e+02
  %291 = fsub double -0.000000e+00, %280
  %292 = fadd double %291, 1.800000e+02
  %293 = fdiv double %280, 1.800000e+02
  %294 = fsub double -0.000000e+00, %293
  %295 = fadd double %294, 1.000000e+02
  %296 = fsub double %293, 1.000000e+02
  %297 = fmul double %296, 1.000000e+02
  %298 = fsub double -0.000000e+00, %293
  %299 = fadd double %298, 1.000000e+02
  %300 = fmul double %293, 1.000000e+02
  %301 = call double @cos(double %300) #3
  %302 = fsub double %301, 1.000000e+00
  %303 = fmul double %302, 1.000000e+00
  %304 = fadd double %301, 1.000000e+00
  %305 = fsub double -0.000000e+00, %304
  %306 = fadd double %305, 2.000000e+00
  %307 = fsub double %304, 2.000000e+00
  %308 = fmul double %307, 2.000000e+00
  %309 = fsub double -0.000000e+00, %304
  %310 = fadd double %309, 2.000000e+00
  %311 = fsub double %304, 2.000000e+00
  %312 = fmul double %311, 2.000000e+00
  %313 = fsub double -0.000000e+00, %304
  %314 = fadd double %313, 2.000000e+00
  %315 = fsub double %304, 2.000000e+00
  %316 = fmul double %315, 2.000000e+00
  %317 = fsub double %304, 2.000000e+00
  %318 = fmul double %317, 2.000000e+00
  %319 = fdiv double %304, 2.000000e+00
  %320 = fsub double -0.000000e+00, %279
  %321 = fadd double %320, %319
  %322 = fsub double -0.000000e+00, %279
  %323 = fadd double %322, %319
  %324 = fsub double -0.000000e+00, %279
  %325 = fadd double %324, %319
  %326 = fmul double %279, %319
  %327 = fsub double %240, %326
  %328 = fmul double %327, %326
  %329 = fsub double -0.000000e+00, %240
  %330 = fadd double %329, %326
  %331 = fsub double -0.000000e+00, %240
  %332 = fadd double %331, %326
  %333 = fsub double -0.000000e+00, %240
  %334 = fadd double %333, %326
  %335 = fsub double %240, %326
  %336 = fmul double %335, %326
  %337 = fsub double -0.000000e+00, %240
  %338 = fadd double %337, %326
  %339 = fsub double %240, %326
  %340 = fmul double %339, %326
  %341 = fsub double %240, %326
  %342 = call double @sqrt(double %341) #3
  store double %342, double* %115, align 8
  %343 = load double, double* %114, align 8
  %344 = load double, double* %110, align 8
  %345 = fsub double -0.000000e+00, %343
  %346 = fadd double %345, %344
  %347 = fsub double %343, %344
  %348 = fmul double %347, %344
  %349 = fsub double %343, %344
  %350 = fmul double %349, %344
  %351 = fsub double -0.000000e+00, %343
  %352 = fadd double %351, %344
  %353 = fsub double %343, %344
  %354 = fmul double %353, %344
  %355 = fsub double %343, %344
  %356 = load double, double* %114, align 8
  %357 = load double, double* %111, align 8
  %358 = fsub double -0.000000e+00, %356
  %359 = fadd double %358, %357
  %360 = fsub double %356, %357
  %361 = fmul double %360, %357
  %362 = fsub double -0.000000e+00, %356
  %363 = fadd double %362, %357
  %364 = fsub double -0.000000e+00, %356
  %365 = fadd double %364, %357
  %366 = fsub double %356, %357
  %367 = fmul double %366, %357
  %368 = fsub double %356, %357
  %369 = fsub double %355, %368
  %370 = fmul double %369, %368
  %371 = fsub double -0.000000e+00, %355
  %372 = fadd double %371, %368
  %373 = fsub double %355, %368
  %374 = fmul double %373, %368
  %375 = fsub double %355, %368
  %376 = fmul double %375, %368
  %377 = fmul double %355, %368
  %378 = load double, double* %114, align 8
  %379 = load double, double* %112, align 8
  %380 = fsub double %378, %379
  %381 = fmul double %380, %379
  %382 = fsub double -0.000000e+00, %378
  %383 = fadd double %382, %379
  %384 = fsub double -0.000000e+00, %378
  %385 = fadd double %384, %379
  %386 = fsub double %378, %379
  %387 = fmul double %386, %379
  %388 = fsub double %378, %379
  %389 = fmul double %388, %379
  %390 = fsub double %378, %379
  %391 = fsub double -0.000000e+00, %377
  %392 = fadd double %391, %390
  %393 = fsub double %377, %390
  %394 = fmul double %393, %390
  %395 = fsub double -0.000000e+00, %377
  %396 = fadd double %395, %390
  %397 = fsub double -0.000000e+00, %377
  %398 = fadd double %397, %390
  %399 = fmul double %377, %390
  %400 = load double, double* %114, align 8
  %401 = load double, double* %113, align 8
  %402 = fsub double %400, %401
  %403 = fmul double %402, %401
  %404 = fsub double -0.000000e+00, %400
  %405 = fadd double %404, %401
  %406 = fsub double %400, %401
  %407 = fmul double %406, %401
  %408 = fsub double -0.000000e+00, %400
  %409 = fadd double %408, %401
  %410 = fsub double %400, %401
  %411 = fmul double %410, %401
  %412 = fsub double -0.000000e+00, %400
  %413 = fadd double %412, %401
  %414 = fsub double %400, %401
  %415 = fmul double %414, %401
  %416 = fsub double %400, %401
  %417 = fsub double %399, %416
  %418 = fmul double %417, %416
  %419 = fsub double %399, %416
  %420 = fmul double %419, %416
  %421 = fmul double %399, %416
  %422 = load double, double* %110, align 8
  %423 = load double, double* %111, align 8
  %424 = fsub double %422, %423
  %425 = fmul double %424, %423
  %426 = fsub double -0.000000e+00, %422
  %427 = fadd double %426, %423
  %428 = fsub double -0.000000e+00, %422
  %429 = fadd double %428, %423
  %430 = fsub double %422, %423
  %431 = fmul double %430, %423
  %432 = fsub double -0.000000e+00, %422
  %433 = fadd double %432, %423
  %434 = fsub double %422, %423
  %435 = fmul double %434, %423
  %436 = fmul double %422, %423
  %437 = load double, double* %112, align 8
  %438 = fsub double %436, %437
  %439 = fmul double %438, %437
  %440 = fsub double -0.000000e+00, %436
  %441 = fadd double %440, %437
  %442 = fsub double -0.000000e+00, %436
  %443 = fadd double %442, %437
  %444 = fmul double %436, %437
  %445 = load double, double* %113, align 8
  %446 = fsub double -0.000000e+00, %444
  %447 = fadd double %446, %445
  %448 = fmul double %444, %445
  %449 = load double, double* %116, align 8
  %450 = fsub double -0.000000e+00, %449
  %451 = fadd double %450, 1.800000e+02
  %452 = fsub double -0.000000e+00, %449
  %453 = fadd double %452, 1.800000e+02
  %454 = fdiv double %449, 1.800000e+02
  %455 = fsub double -0.000000e+00, %454
  %456 = fadd double %455, 1.000000e+02
  %457 = fsub double %454, 1.000000e+02
  %458 = fmul double %457, 1.000000e+02
  %459 = fmul double %454, 1.000000e+02
  %460 = call double @cos(double %459) #3
  %461 = fsub double -0.000000e+00, %460
  %462 = fadd double %461, 1.000000e+00
  %463 = fsub double %460, 1.000000e+00
  %464 = fmul double %463, 1.000000e+00
  %465 = fsub double %460, 1.000000e+00
  %466 = fmul double %465, 1.000000e+00
  %467 = fsub double %460, 1.000000e+00
  %468 = fmul double %467, 1.000000e+00
  %469 = fadd double %460, 1.000000e+00
  %470 = fsub double %469, 2.000000e+00
  %471 = fmul double %470, 2.000000e+00
  %472 = fsub double %469, 2.000000e+00
  %473 = fmul double %472, 2.000000e+00
  %474 = fsub double %469, 2.000000e+00
  %475 = fmul double %474, 2.000000e+00
  %476 = fsub double %469, 2.000000e+00
  %477 = fmul double %476, 2.000000e+00
  %478 = fsub double -0.000000e+00, %469
  %479 = fadd double %478, 2.000000e+00
  %480 = fsub double %469, 2.000000e+00
  %481 = fmul double %480, 2.000000e+00
  %482 = fsub double -0.000000e+00, %469
  %483 = fadd double %482, 2.000000e+00
  %484 = fdiv double %469, 2.000000e+00
  %485 = fsub double %448, %484
  %486 = fmul double %485, %484
  %487 = fsub double -0.000000e+00, %448
  %488 = fadd double %487, %484
  %489 = fsub double -0.000000e+00, %448
  %490 = fadd double %489, %484
  %491 = fsub double -0.000000e+00, %448
  %492 = fadd double %491, %484
  %493 = fsub double %448, %484
  %494 = fmul double %493, %484
  %495 = fsub double %448, %484
  %496 = fmul double %495, %484
  %497 = fsub double -0.000000e+00, %448
  %498 = fadd double %497, %484
  %499 = fmul double %448, %484
  %500 = fsub double -0.000000e+00, %421
  %501 = fadd double %500, %499
  %502 = fsub double %421, %499
  %503 = fcmp olt double %502, 0.000000e+00
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
