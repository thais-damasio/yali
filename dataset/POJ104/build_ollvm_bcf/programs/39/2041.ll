; ModuleID = 'source-C-CXX/39/2041.c'
source_filename = "source-C-CXX/39/2041.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%.4f\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %180

; <label>:9:                                      ; preds = %0, %180
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %11)
  %20 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %12)
  %21 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %13)
  %22 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %14)
  %23 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %16)
  %24 = load float, float* %16, align 4
  %25 = fdiv float %24, 1.800000e+02
  %26 = fmul float %25, 1.000000e+02
  store float %26, float* %15, align 4
  %27 = load float, float* %11, align 4
  %28 = load float, float* %12, align 4
  %29 = fadd float %27, %28
  %30 = load float, float* %13, align 4
  %31 = fadd float %29, %30
  %32 = load float, float* %14, align 4
  %33 = fadd float %31, %32
  %34 = fdiv float %33, 2.000000e+00
  store float %34, float* %17, align 4
  %35 = load float, float* %17, align 4
  %36 = load float, float* %11, align 4
  %37 = fsub float %35, %36
  %38 = load float, float* %17, align 4
  %39 = load float, float* %12, align 4
  %40 = fsub float %38, %39
  %41 = fmul float %37, %40
  %42 = load float, float* %17, align 4
  %43 = load float, float* %13, align 4
  %44 = fsub float %42, %43
  %45 = fmul float %41, %44
  %46 = load float, float* %17, align 4
  %47 = load float, float* %14, align 4
  %48 = fsub float %46, %47
  %49 = fmul float %45, %48
  %50 = fpext float %49 to double
  %51 = load float, float* %11, align 4
  %52 = load float, float* %12, align 4
  %53 = fmul float %51, %52
  %54 = load float, float* %13, align 4
  %55 = fmul float %53, %54
  %56 = load float, float* %14, align 4
  %57 = fmul float %55, %56
  %58 = fpext float %57 to double
  %59 = load float, float* %15, align 4
  %60 = fdiv float %59, 2.000000e+00
  %61 = fpext float %60 to double
  %62 = call double @cos(double %61) #3
  %63 = fmul double %58, %62
  %64 = load float, float* %15, align 4
  %65 = fdiv float %64, 2.000000e+00
  %66 = fpext float %65 to double
  %67 = call double @cos(double %66) #3
  %68 = fmul double %63, %67
  %69 = fsub double %50, %68
  %70 = call double @sqrt(double %69) #3
  %71 = fptrunc double %70 to float
  store float %71, float* %18, align 4
  %72 = load float, float* %17, align 4
  %73 = load float, float* %11, align 4
  %74 = fsub float %72, %73
  %75 = load float, float* %17, align 4
  %76 = load float, float* %12, align 4
  %77 = fsub float %75, %76
  %78 = fmul float %74, %77
  %79 = load float, float* %17, align 4
  %80 = load float, float* %13, align 4
  %81 = fsub float %79, %80
  %82 = fmul float %78, %81
  %83 = load float, float* %17, align 4
  %84 = load float, float* %14, align 4
  %85 = fsub float %83, %84
  %86 = fmul float %82, %85
  %87 = fpext float %86 to double
  %88 = load float, float* %11, align 4
  %89 = load float, float* %12, align 4
  %90 = fmul float %88, %89
  %91 = load float, float* %13, align 4
  %92 = fmul float %90, %91
  %93 = load float, float* %14, align 4
  %94 = fmul float %92, %93
  %95 = fpext float %94 to double
  %96 = load float, float* %15, align 4
  %97 = fdiv float %96, 2.000000e+00
  %98 = fpext float %97 to double
  %99 = call double @cos(double %98) #3
  %100 = fmul double %95, %99
  %101 = load float, float* %15, align 4
  %102 = fdiv float %101, 2.000000e+00
  %103 = fpext float %102 to double
  %104 = call double @cos(double %103) #3
  %105 = fmul double %100, %104
  %106 = fsub double %87, %105
  %107 = fcmp olt double %106, 0.000000e+00
  %108 = load i32, i32* @x
  %109 = load i32, i32* @y
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %116, label %180

; <label>:116:                                    ; preds = %9
  br i1 %107, label %117, label %119

; <label>:117:                                    ; preds = %116
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %161

; <label>:119:                                    ; preds = %116
  %120 = load float, float* %17, align 4
  %121 = load float, float* %11, align 4
  %122 = fsub float %120, %121
  %123 = load float, float* %17, align 4
  %124 = load float, float* %12, align 4
  %125 = fsub float %123, %124
  %126 = fmul float %122, %125
  %127 = load float, float* %17, align 4
  %128 = load float, float* %13, align 4
  %129 = fsub float %127, %128
  %130 = fmul float %126, %129
  %131 = load float, float* %17, align 4
  %132 = load float, float* %14, align 4
  %133 = fsub float %131, %132
  %134 = fmul float %130, %133
  %135 = fpext float %134 to double
  %136 = load float, float* %11, align 4
  %137 = load float, float* %12, align 4
  %138 = fmul float %136, %137
  %139 = load float, float* %13, align 4
  %140 = fmul float %138, %139
  %141 = load float, float* %14, align 4
  %142 = fmul float %140, %141
  %143 = fpext float %142 to double
  %144 = load float, float* %15, align 4
  %145 = fdiv float %144, 2.000000e+00
  %146 = fpext float %145 to double
  %147 = call double @cos(double %146) #3
  %148 = fmul double %143, %147
  %149 = load float, float* %15, align 4
  %150 = fdiv float %149, 2.000000e+00
  %151 = fpext float %150 to double
  %152 = call double @cos(double %151) #3
  %153 = fmul double %148, %152
  %154 = fsub double %135, %153
  %155 = fcmp oge double %154, 0.000000e+00
  br i1 %155, label %156, label %160

; <label>:156:                                    ; preds = %119
  %157 = load float, float* %18, align 4
  %158 = fpext float %157 to double
  %159 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), double %158)
  br label %160

; <label>:160:                                    ; preds = %156, %119
  br label %161

; <label>:161:                                    ; preds = %160, %117
  %162 = load i32, i32* @x
  %163 = load i32, i32* @y
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %170, label %561

; <label>:170:                                    ; preds = %161, %561
  %171 = load i32, i32* @x
  %172 = load i32, i32* @y
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %179, label %561

; <label>:179:                                    ; preds = %170
  ret i32 0

; <label>:180:                                    ; preds = %9, %0
  %181 = alloca i32, align 4
  %182 = alloca float, align 4
  %183 = alloca float, align 4
  %184 = alloca float, align 4
  %185 = alloca float, align 4
  %186 = alloca float, align 4
  %187 = alloca float, align 4
  %188 = alloca float, align 4
  %189 = alloca float, align 4
  store i32 0, i32* %181, align 4
  %190 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %182)
  %191 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %183)
  %192 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %184)
  %193 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %185)
  %194 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %187)
  %195 = load float, float* %187, align 4
  %196 = fsub float %195, 1.800000e+02
  %197 = fmul float %196, 1.800000e+02
  %198 = fdiv float %195, 1.800000e+02
  %199 = fsub float %198, 1.000000e+02
  %200 = fmul float %199, 1.000000e+02
  %201 = fsub float -0.000000e+00, %198
  %202 = fadd float %201, 1.000000e+02
  %203 = fsub float -0.000000e+00, %198
  %204 = fadd float %203, 1.000000e+02
  %205 = fsub float -0.000000e+00, %198
  %206 = fadd float %205, 1.000000e+02
  %207 = fsub float -0.000000e+00, %198
  %208 = fadd float %207, 1.000000e+02
  %209 = fsub float -0.000000e+00, %198
  %210 = fadd float %209, 1.000000e+02
  %211 = fsub float -0.000000e+00, %198
  %212 = fadd float %211, 1.000000e+02
  %213 = fmul float %198, 1.000000e+02
  store float %213, float* %186, align 4
  %214 = load float, float* %182, align 4
  %215 = load float, float* %183, align 4
  %216 = fsub float %214, %215
  %217 = fmul float %216, %215
  %218 = fadd float %214, %215
  %219 = load float, float* %184, align 4
  %220 = fsub float %218, %219
  %221 = fmul float %220, %219
  %222 = fsub float -0.000000e+00, %218
  %223 = fadd float %222, %219
  %224 = fsub float %218, %219
  %225 = fmul float %224, %219
  %226 = fsub float -0.000000e+00, %218
  %227 = fadd float %226, %219
  %228 = fadd float %218, %219
  %229 = load float, float* %185, align 4
  %230 = fsub float %228, %229
  %231 = fmul float %230, %229
  %232 = fsub float -0.000000e+00, %228
  %233 = fadd float %232, %229
  %234 = fadd float %228, %229
  %235 = fsub float %234, 2.000000e+00
  %236 = fmul float %235, 2.000000e+00
  %237 = fsub float -0.000000e+00, %234
  %238 = fadd float %237, 2.000000e+00
  %239 = fdiv float %234, 2.000000e+00
  store float %239, float* %188, align 4
  %240 = load float, float* %188, align 4
  %241 = load float, float* %182, align 4
  %242 = fsub float -0.000000e+00, %240
  %243 = fadd float %242, %241
  %244 = fsub float %240, %241
  %245 = load float, float* %188, align 4
  %246 = load float, float* %183, align 4
  %247 = fsub float -0.000000e+00, %245
  %248 = fadd float %247, %246
  %249 = fsub float %245, %246
  %250 = fmul float %249, %246
  %251 = fsub float %245, %246
  %252 = fmul float %251, %246
  %253 = fsub float %245, %246
  %254 = fsub float -0.000000e+00, %244
  %255 = fadd float %254, %253
  %256 = fsub float %244, %253
  %257 = fmul float %256, %253
  %258 = fsub float %244, %253
  %259 = fmul float %258, %253
  %260 = fsub float %244, %253
  %261 = fmul float %260, %253
  %262 = fsub float -0.000000e+00, %244
  %263 = fadd float %262, %253
  %264 = fmul float %244, %253
  %265 = load float, float* %188, align 4
  %266 = load float, float* %184, align 4
  %267 = fsub float -0.000000e+00, %265
  %268 = fadd float %267, %266
  %269 = fsub float -0.000000e+00, %265
  %270 = fadd float %269, %266
  %271 = fsub float %265, %266
  %272 = fsub float -0.000000e+00, %264
  %273 = fadd float %272, %271
  %274 = fsub float %264, %271
  %275 = fmul float %274, %271
  %276 = fsub float %264, %271
  %277 = fmul float %276, %271
  %278 = fsub float %264, %271
  %279 = fmul float %278, %271
  %280 = fsub float %264, %271
  %281 = fmul float %280, %271
  %282 = fmul float %264, %271
  %283 = load float, float* %188, align 4
  %284 = load float, float* %185, align 4
  %285 = fsub float -0.000000e+00, %283
  %286 = fadd float %285, %284
  %287 = fsub float -0.000000e+00, %283
  %288 = fadd float %287, %284
  %289 = fsub float %283, %284
  %290 = fmul float %289, %284
  %291 = fsub float %283, %284
  %292 = fsub float -0.000000e+00, %282
  %293 = fadd float %292, %291
  %294 = fsub float -0.000000e+00, %282
  %295 = fadd float %294, %291
  %296 = fsub float -0.000000e+00, %282
  %297 = fadd float %296, %291
  %298 = fsub float -0.000000e+00, %282
  %299 = fadd float %298, %291
  %300 = fsub float -0.000000e+00, %282
  %301 = fadd float %300, %291
  %302 = fsub float %282, %291
  %303 = fmul float %302, %291
  %304 = fmul float %282, %291
  %305 = fpext float %304 to double
  %306 = load float, float* %182, align 4
  %307 = load float, float* %183, align 4
  %308 = fsub float -0.000000e+00, %306
  %309 = fadd float %308, %307
  %310 = fsub float -0.000000e+00, %306
  %311 = fadd float %310, %307
  %312 = fsub float %306, %307
  %313 = fmul float %312, %307
  %314 = fsub float -0.000000e+00, %306
  %315 = fadd float %314, %307
  %316 = fmul float %306, %307
  %317 = load float, float* %184, align 4
  %318 = fsub float -0.000000e+00, %316
  %319 = fadd float %318, %317
  %320 = fsub float %316, %317
  %321 = fmul float %320, %317
  %322 = fsub float -0.000000e+00, %316
  %323 = fadd float %322, %317
  %324 = fsub float -0.000000e+00, %316
  %325 = fadd float %324, %317
  %326 = fsub float %316, %317
  %327 = fmul float %326, %317
  %328 = fmul float %316, %317
  %329 = load float, float* %185, align 4
  %330 = fsub float %328, %329
  %331 = fmul float %330, %329
  %332 = fsub float %328, %329
  %333 = fmul float %332, %329
  %334 = fsub float %328, %329
  %335 = fmul float %334, %329
  %336 = fmul float %328, %329
  %337 = fpext float %336 to double
  %338 = load float, float* %186, align 4
  %339 = fsub float %338, 2.000000e+00
  %340 = fmul float %339, 2.000000e+00
  %341 = fsub float %338, 2.000000e+00
  %342 = fmul float %341, 2.000000e+00
  %343 = fsub float %338, 2.000000e+00
  %344 = fmul float %343, 2.000000e+00
  %345 = fsub float %338, 2.000000e+00
  %346 = fmul float %345, 2.000000e+00
  %347 = fdiv float %338, 2.000000e+00
  %348 = fpext float %347 to double
  %349 = call double @cos(double %348) #3
  %350 = fsub double -0.000000e+00, %337
  %351 = fadd double %350, %349
  %352 = fsub double -0.000000e+00, %337
  %353 = fadd double %352, %349
  %354 = fmul double %337, %349
  %355 = load float, float* %186, align 4
  %356 = fsub float -0.000000e+00, %355
  %357 = fadd float %356, 2.000000e+00
  %358 = fsub float -0.000000e+00, %355
  %359 = fadd float %358, 2.000000e+00
  %360 = fsub float -0.000000e+00, %355
  %361 = fadd float %360, 2.000000e+00
  %362 = fsub float -0.000000e+00, %355
  %363 = fadd float %362, 2.000000e+00
  %364 = fsub float -0.000000e+00, %355
  %365 = fadd float %364, 2.000000e+00
  %366 = fsub float %355, 2.000000e+00
  %367 = fmul float %366, 2.000000e+00
  %368 = fsub float %355, 2.000000e+00
  %369 = fmul float %368, 2.000000e+00
  %370 = fsub float %355, 2.000000e+00
  %371 = fmul float %370, 2.000000e+00
  %372 = fsub float -0.000000e+00, %355
  %373 = fadd float %372, 2.000000e+00
  %374 = fdiv float %355, 2.000000e+00
  %375 = fpext float %374 to double
  %376 = call double @cos(double %375) #3
  %377 = fsub double -0.000000e+00, %354
  %378 = fadd double %377, %376
  %379 = fsub double -0.000000e+00, %354
  %380 = fadd double %379, %376
  %381 = fmul double %354, %376
  %382 = fsub double %305, %381
  %383 = fmul double %382, %381
  %384 = fsub double %305, %381
  %385 = fmul double %384, %381
  %386 = fsub double %305, %381
  %387 = fmul double %386, %381
  %388 = fsub double -0.000000e+00, %305
  %389 = fadd double %388, %381
  %390 = fsub double %305, %381
  %391 = fmul double %390, %381
  %392 = fsub double %305, %381
  %393 = fmul double %392, %381
  %394 = fsub double %305, %381
  %395 = fmul double %394, %381
  %396 = fsub double -0.000000e+00, %305
  %397 = fadd double %396, %381
  %398 = fsub double %305, %381
  %399 = call double @sqrt(double %398) #3
  %400 = fptrunc double %399 to float
  store float %400, float* %189, align 4
  %401 = load float, float* %188, align 4
  %402 = load float, float* %182, align 4
  %403 = fsub float -0.000000e+00, %401
  %404 = fadd float %403, %402
  %405 = fsub float -0.000000e+00, %401
  %406 = fadd float %405, %402
  %407 = fsub float %401, %402
  %408 = load float, float* %188, align 4
  %409 = load float, float* %183, align 4
  %410 = fsub float -0.000000e+00, %408
  %411 = fadd float %410, %409
  %412 = fsub float %408, %409
  %413 = fsub float %407, %412
  %414 = fmul float %413, %412
  %415 = fsub float -0.000000e+00, %407
  %416 = fadd float %415, %412
  %417 = fmul float %407, %412
  %418 = load float, float* %188, align 4
  %419 = load float, float* %184, align 4
  %420 = fsub float %418, %419
  %421 = fmul float %420, %419
  %422 = fsub float -0.000000e+00, %418
  %423 = fadd float %422, %419
  %424 = fsub float -0.000000e+00, %418
  %425 = fadd float %424, %419
  %426 = fsub float -0.000000e+00, %418
  %427 = fadd float %426, %419
  %428 = fsub float %418, %419
  %429 = fmul float %428, %419
  %430 = fsub float %418, %419
  %431 = fsub float %417, %430
  %432 = fmul float %431, %430
  %433 = fsub float -0.000000e+00, %417
  %434 = fadd float %433, %430
  %435 = fsub float -0.000000e+00, %417
  %436 = fadd float %435, %430
  %437 = fsub float -0.000000e+00, %417
  %438 = fadd float %437, %430
  %439 = fsub float -0.000000e+00, %417
  %440 = fadd float %439, %430
  %441 = fsub float %417, %430
  %442 = fmul float %441, %430
  %443 = fmul float %417, %430
  %444 = load float, float* %188, align 4
  %445 = load float, float* %185, align 4
  %446 = fsub float -0.000000e+00, %444
  %447 = fadd float %446, %445
  %448 = fsub float -0.000000e+00, %444
  %449 = fadd float %448, %445
  %450 = fsub float %444, %445
  %451 = fmul float %450, %445
  %452 = fsub float -0.000000e+00, %444
  %453 = fadd float %452, %445
  %454 = fsub float -0.000000e+00, %444
  %455 = fadd float %454, %445
  %456 = fsub float -0.000000e+00, %444
  %457 = fadd float %456, %445
  %458 = fsub float %444, %445
  %459 = fsub float %443, %458
  %460 = fmul float %459, %458
  %461 = fsub float %443, %458
  %462 = fmul float %461, %458
  %463 = fsub float -0.000000e+00, %443
  %464 = fadd float %463, %458
  %465 = fmul float %443, %458
  %466 = fpext float %465 to double
  %467 = load float, float* %182, align 4
  %468 = load float, float* %183, align 4
  %469 = fsub float %467, %468
  %470 = fmul float %469, %468
  %471 = fsub float -0.000000e+00, %467
  %472 = fadd float %471, %468
  %473 = fsub float -0.000000e+00, %467
  %474 = fadd float %473, %468
  %475 = fsub float -0.000000e+00, %467
  %476 = fadd float %475, %468
  %477 = fsub float -0.000000e+00, %467
  %478 = fadd float %477, %468
  %479 = fsub float %467, %468
  %480 = fmul float %479, %468
  %481 = fsub float %467, %468
  %482 = fmul float %481, %468
  %483 = fsub float -0.000000e+00, %467
  %484 = fadd float %483, %468
  %485 = fmul float %467, %468
  %486 = load float, float* %184, align 4
  %487 = fsub float %485, %486
  %488 = fmul float %487, %486
  %489 = fsub float -0.000000e+00, %485
  %490 = fadd float %489, %486
  %491 = fmul float %485, %486
  %492 = load float, float* %185, align 4
  %493 = fsub float %491, %492
  %494 = fmul float %493, %492
  %495 = fsub float -0.000000e+00, %491
  %496 = fadd float %495, %492
  %497 = fmul float %491, %492
  %498 = fpext float %497 to double
  %499 = load float, float* %186, align 4
  %500 = fsub float -0.000000e+00, %499
  %501 = fadd float %500, 2.000000e+00
  %502 = fsub float -0.000000e+00, %499
  %503 = fadd float %502, 2.000000e+00
  %504 = fsub float -0.000000e+00, %499
  %505 = fadd float %504, 2.000000e+00
  %506 = fsub float -0.000000e+00, %499
  %507 = fadd float %506, 2.000000e+00
  %508 = fsub float %499, 2.000000e+00
  %509 = fmul float %508, 2.000000e+00
  %510 = fsub float -0.000000e+00, %499
  %511 = fadd float %510, 2.000000e+00
  %512 = fdiv float %499, 2.000000e+00
  %513 = fpext float %512 to double
  %514 = call double @cos(double %513) #3
  %515 = fsub double %498, %514
  %516 = fmul double %515, %514
  %517 = fsub double %498, %514
  %518 = fmul double %517, %514
  %519 = fsub double %498, %514
  %520 = fmul double %519, %514
  %521 = fsub double -0.000000e+00, %498
  %522 = fadd double %521, %514
  %523 = fsub double %498, %514
  %524 = fmul double %523, %514
  %525 = fsub double %498, %514
  %526 = fmul double %525, %514
  %527 = fmul double %498, %514
  %528 = load float, float* %186, align 4
  %529 = fsub float -0.000000e+00, %528
  %530 = fadd float %529, 2.000000e+00
  %531 = fsub float %528, 2.000000e+00
  %532 = fmul float %531, 2.000000e+00
  %533 = fsub float -0.000000e+00, %528
  %534 = fadd float %533, 2.000000e+00
  %535 = fsub float %528, 2.000000e+00
  %536 = fmul float %535, 2.000000e+00
  %537 = fsub float %528, 2.000000e+00
  %538 = fmul float %537, 2.000000e+00
  %539 = fsub float -0.000000e+00, %528
  %540 = fadd float %539, 2.000000e+00
  %541 = fdiv float %528, 2.000000e+00
  %542 = fpext float %541 to double
  %543 = call double @cos(double %542) #3
  %544 = fsub double %527, %543
  %545 = fmul double %544, %543
  %546 = fsub double -0.000000e+00, %527
  %547 = fadd double %546, %543
  %548 = fsub double -0.000000e+00, %527
  %549 = fadd double %548, %543
  %550 = fsub double %527, %543
  %551 = fmul double %550, %543
  %552 = fsub double -0.000000e+00, %527
  %553 = fadd double %552, %543
  %554 = fmul double %527, %543
  %555 = fsub double -0.000000e+00, %466
  %556 = fadd double %555, %554
  %557 = fsub double -0.000000e+00, %466
  %558 = fadd double %557, %554
  %559 = fsub double %466, %554
  %560 = fcmp olt double %559, 0.000000e+00
  br label %9

; <label>:561:                                    ; preds = %170, %161
  br label %170
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
