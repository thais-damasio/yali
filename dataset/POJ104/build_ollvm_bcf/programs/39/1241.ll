; ModuleID = 'source-C-CXX/39/1241.c'
source_filename = "source-C-CXX/39/1241.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%.4f\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %151

; <label>:9:                                      ; preds = %0, %151
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %11)
  %20 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %12)
  %21 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %13)
  %22 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %14)
  %23 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %15)
  %24 = load float, float* %11, align 4
  %25 = load float, float* %12, align 4
  %26 = fadd float %24, %25
  %27 = load float, float* %13, align 4
  %28 = fadd float %26, %27
  %29 = load float, float* %14, align 4
  %30 = fadd float %28, %29
  %31 = fpext float %30 to double
  %32 = fdiv double %31, 2.000000e+00
  %33 = fptrunc double %32 to float
  store float %33, float* %16, align 4
  %34 = load float, float* %16, align 4
  %35 = load float, float* %11, align 4
  %36 = fsub float %34, %35
  %37 = load float, float* %16, align 4
  %38 = load float, float* %12, align 4
  %39 = fsub float %37, %38
  %40 = fmul float %36, %39
  %41 = load float, float* %16, align 4
  %42 = load float, float* %13, align 4
  %43 = fsub float %41, %42
  %44 = fmul float %40, %43
  %45 = load float, float* %16, align 4
  %46 = load float, float* %14, align 4
  %47 = fsub float %45, %46
  %48 = fmul float %44, %47
  %49 = fpext float %48 to double
  %50 = load float, float* %11, align 4
  %51 = load float, float* %12, align 4
  %52 = fmul float %50, %51
  %53 = load float, float* %13, align 4
  %54 = fmul float %52, %53
  %55 = load float, float* %14, align 4
  %56 = fmul float %54, %55
  %57 = fpext float %56 to double
  %58 = load float, float* %15, align 4
  %59 = fdiv float %58, 2.000000e+00
  %60 = fdiv float %59, 1.800000e+02
  %61 = fmul float %60, 1.000000e+02
  %62 = fpext float %61 to double
  %63 = call double @cos(double %62) #3
  %64 = fmul double %57, %63
  %65 = load float, float* %15, align 4
  %66 = fdiv float %65, 2.000000e+00
  %67 = fdiv float %66, 1.800000e+02
  %68 = fmul float %67, 1.000000e+02
  %69 = fpext float %68 to double
  %70 = call double @cos(double %69) #3
  %71 = fmul double %64, %70
  %72 = fsub double %49, %71
  %73 = call double @sqrt(double %72) #3
  %74 = fptrunc double %73 to float
  store float %74, float* %17, align 4
  %75 = load float, float* %16, align 4
  %76 = load float, float* %11, align 4
  %77 = fsub float %75, %76
  %78 = load float, float* %16, align 4
  %79 = load float, float* %12, align 4
  %80 = fsub float %78, %79
  %81 = fmul float %77, %80
  %82 = load float, float* %16, align 4
  %83 = load float, float* %13, align 4
  %84 = fsub float %82, %83
  %85 = fmul float %81, %84
  %86 = load float, float* %16, align 4
  %87 = load float, float* %14, align 4
  %88 = fsub float %86, %87
  %89 = fmul float %85, %88
  %90 = fpext float %89 to double
  %91 = load float, float* %11, align 4
  %92 = load float, float* %12, align 4
  %93 = fmul float %91, %92
  %94 = load float, float* %13, align 4
  %95 = fmul float %93, %94
  %96 = load float, float* %14, align 4
  %97 = fmul float %95, %96
  %98 = fpext float %97 to double
  %99 = load float, float* %15, align 4
  %100 = fdiv float %99, 2.000000e+00
  %101 = fdiv float %100, 1.800000e+02
  %102 = fmul float %101, 1.000000e+02
  %103 = fpext float %102 to double
  %104 = call double @cos(double %103) #3
  %105 = fmul double %98, %104
  %106 = load float, float* %15, align 4
  %107 = fdiv float %106, 2.000000e+00
  %108 = fdiv float %107, 1.800000e+02
  %109 = fmul float %108, 1.000000e+02
  %110 = fpext float %109 to double
  %111 = call double @cos(double %110) #3
  %112 = fmul double %105, %111
  %113 = fsub double %90, %112
  %114 = fptrunc double %113 to float
  store float %114, float* %18, align 4
  %115 = load float, float* %18, align 4
  %116 = fcmp ogt float %115, 0.000000e+00
  %117 = load i32, i32* @x
  %118 = load i32, i32* @y
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %125, label %151

; <label>:125:                                    ; preds = %9
  br i1 %116, label %126, label %130

; <label>:126:                                    ; preds = %125
  %127 = load float, float* %17, align 4
  %128 = fpext float %127 to double
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double %128)
  br label %150

; <label>:130:                                    ; preds = %125
  %131 = load i32, i32* @x
  %132 = load i32, i32* @y
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %139, label %555

; <label>:139:                                    ; preds = %130, %555
  %140 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  %141 = load i32, i32* @x
  %142 = load i32, i32* @y
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %149, label %555

; <label>:149:                                    ; preds = %139
  br label %150

; <label>:150:                                    ; preds = %149, %126
  ret i32 0

; <label>:151:                                    ; preds = %9, %0
  %152 = alloca i32, align 4
  %153 = alloca float, align 4
  %154 = alloca float, align 4
  %155 = alloca float, align 4
  %156 = alloca float, align 4
  %157 = alloca float, align 4
  %158 = alloca float, align 4
  %159 = alloca float, align 4
  %160 = alloca float, align 4
  store i32 0, i32* %152, align 4
  %161 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %153)
  %162 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %154)
  %163 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %155)
  %164 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %156)
  %165 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %157)
  %166 = load float, float* %153, align 4
  %167 = load float, float* %154, align 4
  %168 = fsub float %166, %167
  %169 = fmul float %168, %167
  %170 = fsub float %166, %167
  %171 = fmul float %170, %167
  %172 = fsub float %166, %167
  %173 = fmul float %172, %167
  %174 = fsub float -0.000000e+00, %166
  %175 = fadd float %174, %167
  %176 = fadd float %166, %167
  %177 = load float, float* %155, align 4
  %178 = fsub float -0.000000e+00, %176
  %179 = fadd float %178, %177
  %180 = fsub float %176, %177
  %181 = fmul float %180, %177
  %182 = fsub float %176, %177
  %183 = fmul float %182, %177
  %184 = fsub float -0.000000e+00, %176
  %185 = fadd float %184, %177
  %186 = fsub float %176, %177
  %187 = fmul float %186, %177
  %188 = fadd float %176, %177
  %189 = load float, float* %156, align 4
  %190 = fsub float %188, %189
  %191 = fmul float %190, %189
  %192 = fsub float -0.000000e+00, %188
  %193 = fadd float %192, %189
  %194 = fsub float %188, %189
  %195 = fmul float %194, %189
  %196 = fsub float -0.000000e+00, %188
  %197 = fadd float %196, %189
  %198 = fsub float %188, %189
  %199 = fmul float %198, %189
  %200 = fsub float -0.000000e+00, %188
  %201 = fadd float %200, %189
  %202 = fsub float -0.000000e+00, %188
  %203 = fadd float %202, %189
  %204 = fadd float %188, %189
  %205 = fpext float %204 to double
  %206 = fsub double -0.000000e+00, %205
  %207 = fadd double %206, 2.000000e+00
  %208 = fsub double -0.000000e+00, %205
  %209 = fadd double %208, 2.000000e+00
  %210 = fsub double -0.000000e+00, %205
  %211 = fadd double %210, 2.000000e+00
  %212 = fdiv double %205, 2.000000e+00
  %213 = fptrunc double %212 to float
  store float %213, float* %158, align 4
  %214 = load float, float* %158, align 4
  %215 = load float, float* %153, align 4
  %216 = fsub float %214, %215
  %217 = fmul float %216, %215
  %218 = fsub float %214, %215
  %219 = fmul float %218, %215
  %220 = fsub float -0.000000e+00, %214
  %221 = fadd float %220, %215
  %222 = fsub float %214, %215
  %223 = load float, float* %158, align 4
  %224 = load float, float* %154, align 4
  %225 = fsub float %223, %224
  %226 = fmul float %225, %224
  %227 = fsub float %223, %224
  %228 = fmul float %227, %224
  %229 = fsub float %223, %224
  %230 = fsub float -0.000000e+00, %222
  %231 = fadd float %230, %229
  %232 = fsub float -0.000000e+00, %222
  %233 = fadd float %232, %229
  %234 = fsub float %222, %229
  %235 = fmul float %234, %229
  %236 = fsub float -0.000000e+00, %222
  %237 = fadd float %236, %229
  %238 = fsub float -0.000000e+00, %222
  %239 = fadd float %238, %229
  %240 = fsub float -0.000000e+00, %222
  %241 = fadd float %240, %229
  %242 = fsub float -0.000000e+00, %222
  %243 = fadd float %242, %229
  %244 = fmul float %222, %229
  %245 = load float, float* %158, align 4
  %246 = load float, float* %155, align 4
  %247 = fsub float %245, %246
  %248 = fmul float %247, %246
  %249 = fsub float -0.000000e+00, %245
  %250 = fadd float %249, %246
  %251 = fsub float -0.000000e+00, %245
  %252 = fadd float %251, %246
  %253 = fsub float %245, %246
  %254 = fmul float %253, %246
  %255 = fsub float %245, %246
  %256 = fmul float %244, %255
  %257 = load float, float* %158, align 4
  %258 = load float, float* %156, align 4
  %259 = fsub float -0.000000e+00, %257
  %260 = fadd float %259, %258
  %261 = fsub float %257, %258
  %262 = fmul float %261, %258
  %263 = fsub float %257, %258
  %264 = fmul float %263, %258
  %265 = fsub float -0.000000e+00, %257
  %266 = fadd float %265, %258
  %267 = fsub float %257, %258
  %268 = fsub float -0.000000e+00, %256
  %269 = fadd float %268, %267
  %270 = fsub float %256, %267
  %271 = fmul float %270, %267
  %272 = fsub float %256, %267
  %273 = fmul float %272, %267
  %274 = fsub float -0.000000e+00, %256
  %275 = fadd float %274, %267
  %276 = fsub float %256, %267
  %277 = fmul float %276, %267
  %278 = fmul float %256, %267
  %279 = fpext float %278 to double
  %280 = load float, float* %153, align 4
  %281 = load float, float* %154, align 4
  %282 = fsub float -0.000000e+00, %280
  %283 = fadd float %282, %281
  %284 = fsub float %280, %281
  %285 = fmul float %284, %281
  %286 = fsub float -0.000000e+00, %280
  %287 = fadd float %286, %281
  %288 = fsub float %280, %281
  %289 = fmul float %288, %281
  %290 = fsub float -0.000000e+00, %280
  %291 = fadd float %290, %281
  %292 = fsub float %280, %281
  %293 = fmul float %292, %281
  %294 = fsub float %280, %281
  %295 = fmul float %294, %281
  %296 = fsub float -0.000000e+00, %280
  %297 = fadd float %296, %281
  %298 = fmul float %280, %281
  %299 = load float, float* %155, align 4
  %300 = fsub float -0.000000e+00, %298
  %301 = fadd float %300, %299
  %302 = fsub float %298, %299
  %303 = fmul float %302, %299
  %304 = fsub float %298, %299
  %305 = fmul float %304, %299
  %306 = fsub float -0.000000e+00, %298
  %307 = fadd float %306, %299
  %308 = fsub float -0.000000e+00, %298
  %309 = fadd float %308, %299
  %310 = fmul float %298, %299
  %311 = load float, float* %156, align 4
  %312 = fsub float %310, %311
  %313 = fmul float %312, %311
  %314 = fsub float -0.000000e+00, %310
  %315 = fadd float %314, %311
  %316 = fmul float %310, %311
  %317 = fpext float %316 to double
  %318 = load float, float* %157, align 4
  %319 = fsub float %318, 2.000000e+00
  %320 = fmul float %319, 2.000000e+00
  %321 = fsub float %318, 2.000000e+00
  %322 = fmul float %321, 2.000000e+00
  %323 = fdiv float %318, 2.000000e+00
  %324 = fsub float %323, 1.800000e+02
  %325 = fmul float %324, 1.800000e+02
  %326 = fsub float %323, 1.800000e+02
  %327 = fmul float %326, 1.800000e+02
  %328 = fdiv float %323, 1.800000e+02
  %329 = fsub float %328, 1.000000e+02
  %330 = fmul float %329, 1.000000e+02
  %331 = fsub float %328, 1.000000e+02
  %332 = fmul float %331, 1.000000e+02
  %333 = fsub float -0.000000e+00, %328
  %334 = fadd float %333, 1.000000e+02
  %335 = fmul float %328, 1.000000e+02
  %336 = fpext float %335 to double
  %337 = call double @cos(double %336) #3
  %338 = fsub double -0.000000e+00, %317
  %339 = fadd double %338, %337
  %340 = fsub double %317, %337
  %341 = fmul double %340, %337
  %342 = fmul double %317, %337
  %343 = load float, float* %157, align 4
  %344 = fsub float %343, 2.000000e+00
  %345 = fmul float %344, 2.000000e+00
  %346 = fsub float %343, 2.000000e+00
  %347 = fmul float %346, 2.000000e+00
  %348 = fsub float %343, 2.000000e+00
  %349 = fmul float %348, 2.000000e+00
  %350 = fsub float -0.000000e+00, %343
  %351 = fadd float %350, 2.000000e+00
  %352 = fdiv float %343, 2.000000e+00
  %353 = fsub float -0.000000e+00, %352
  %354 = fadd float %353, 1.800000e+02
  %355 = fsub float %352, 1.800000e+02
  %356 = fmul float %355, 1.800000e+02
  %357 = fsub float %352, 1.800000e+02
  %358 = fmul float %357, 1.800000e+02
  %359 = fsub float -0.000000e+00, %352
  %360 = fadd float %359, 1.800000e+02
  %361 = fdiv float %352, 1.800000e+02
  %362 = fsub float -0.000000e+00, %361
  %363 = fadd float %362, 1.000000e+02
  %364 = fsub float -0.000000e+00, %361
  %365 = fadd float %364, 1.000000e+02
  %366 = fsub float %361, 1.000000e+02
  %367 = fmul float %366, 1.000000e+02
  %368 = fsub float %361, 1.000000e+02
  %369 = fmul float %368, 1.000000e+02
  %370 = fsub float %361, 1.000000e+02
  %371 = fmul float %370, 1.000000e+02
  %372 = fsub float -0.000000e+00, %361
  %373 = fadd float %372, 1.000000e+02
  %374 = fsub float -0.000000e+00, %361
  %375 = fadd float %374, 1.000000e+02
  %376 = fmul float %361, 1.000000e+02
  %377 = fpext float %376 to double
  %378 = call double @cos(double %377) #3
  %379 = fsub double %342, %378
  %380 = fmul double %379, %378
  %381 = fmul double %342, %378
  %382 = fsub double %279, %381
  %383 = fmul double %382, %381
  %384 = fsub double %279, %381
  %385 = fmul double %384, %381
  %386 = fsub double -0.000000e+00, %279
  %387 = fadd double %386, %381
  %388 = fsub double %279, %381
  %389 = fmul double %388, %381
  %390 = fsub double %279, %381
  %391 = fmul double %390, %381
  %392 = fsub double %279, %381
  %393 = fmul double %392, %381
  %394 = fsub double %279, %381
  %395 = call double @sqrt(double %394) #3
  %396 = fptrunc double %395 to float
  store float %396, float* %159, align 4
  %397 = load float, float* %158, align 4
  %398 = load float, float* %153, align 4
  %399 = fsub float %397, %398
  %400 = fmul float %399, %398
  %401 = fsub float %397, %398
  %402 = fmul float %401, %398
  %403 = fsub float %397, %398
  %404 = fmul float %403, %398
  %405 = fsub float -0.000000e+00, %397
  %406 = fadd float %405, %398
  %407 = fsub float -0.000000e+00, %397
  %408 = fadd float %407, %398
  %409 = fsub float -0.000000e+00, %397
  %410 = fadd float %409, %398
  %411 = fsub float %397, %398
  %412 = load float, float* %158, align 4
  %413 = load float, float* %154, align 4
  %414 = fsub float -0.000000e+00, %412
  %415 = fadd float %414, %413
  %416 = fsub float %412, %413
  %417 = fsub float %411, %416
  %418 = fmul float %417, %416
  %419 = fmul float %411, %416
  %420 = load float, float* %158, align 4
  %421 = load float, float* %155, align 4
  %422 = fsub float %420, %421
  %423 = fmul float %422, %421
  %424 = fsub float -0.000000e+00, %420
  %425 = fadd float %424, %421
  %426 = fsub float -0.000000e+00, %420
  %427 = fadd float %426, %421
  %428 = fsub float %420, %421
  %429 = fmul float %428, %421
  %430 = fsub float -0.000000e+00, %420
  %431 = fadd float %430, %421
  %432 = fsub float %420, %421
  %433 = fmul float %419, %432
  %434 = load float, float* %158, align 4
  %435 = load float, float* %156, align 4
  %436 = fsub float -0.000000e+00, %434
  %437 = fadd float %436, %435
  %438 = fsub float -0.000000e+00, %434
  %439 = fadd float %438, %435
  %440 = fsub float %434, %435
  %441 = fmul float %440, %435
  %442 = fsub float -0.000000e+00, %434
  %443 = fadd float %442, %435
  %444 = fsub float -0.000000e+00, %434
  %445 = fadd float %444, %435
  %446 = fsub float %434, %435
  %447 = fsub float %433, %446
  %448 = fmul float %447, %446
  %449 = fsub float %433, %446
  %450 = fmul float %449, %446
  %451 = fsub float %433, %446
  %452 = fmul float %451, %446
  %453 = fmul float %433, %446
  %454 = fpext float %453 to double
  %455 = load float, float* %153, align 4
  %456 = load float, float* %154, align 4
  %457 = fsub float %455, %456
  %458 = fmul float %457, %456
  %459 = fmul float %455, %456
  %460 = load float, float* %155, align 4
  %461 = fsub float -0.000000e+00, %459
  %462 = fadd float %461, %460
  %463 = fsub float %459, %460
  %464 = fmul float %463, %460
  %465 = fsub float -0.000000e+00, %459
  %466 = fadd float %465, %460
  %467 = fsub float -0.000000e+00, %459
  %468 = fadd float %467, %460
  %469 = fsub float %459, %460
  %470 = fmul float %469, %460
  %471 = fsub float %459, %460
  %472 = fmul float %471, %460
  %473 = fsub float %459, %460
  %474 = fmul float %473, %460
  %475 = fsub float %459, %460
  %476 = fmul float %475, %460
  %477 = fsub float -0.000000e+00, %459
  %478 = fadd float %477, %460
  %479 = fmul float %459, %460
  %480 = load float, float* %156, align 4
  %481 = fsub float -0.000000e+00, %479
  %482 = fadd float %481, %480
  %483 = fsub float %479, %480
  %484 = fmul float %483, %480
  %485 = fsub float %479, %480
  %486 = fmul float %485, %480
  %487 = fmul float %479, %480
  %488 = fpext float %487 to double
  %489 = load float, float* %157, align 4
  %490 = fsub float -0.000000e+00, %489
  %491 = fadd float %490, 2.000000e+00
  %492 = fsub float -0.000000e+00, %489
  %493 = fadd float %492, 2.000000e+00
  %494 = fsub float %489, 2.000000e+00
  %495 = fmul float %494, 2.000000e+00
  %496 = fsub float %489, 2.000000e+00
  %497 = fmul float %496, 2.000000e+00
  %498 = fdiv float %489, 2.000000e+00
  %499 = fsub float %498, 1.800000e+02
  %500 = fmul float %499, 1.800000e+02
  %501 = fsub float -0.000000e+00, %498
  %502 = fadd float %501, 1.800000e+02
  %503 = fdiv float %498, 1.800000e+02
  %504 = fsub float -0.000000e+00, %503
  %505 = fadd float %504, 1.000000e+02
  %506 = fsub float %503, 1.000000e+02
  %507 = fmul float %506, 1.000000e+02
  %508 = fsub float %503, 1.000000e+02
  %509 = fmul float %508, 1.000000e+02
  %510 = fsub float %503, 1.000000e+02
  %511 = fmul float %510, 1.000000e+02
  %512 = fmul float %503, 1.000000e+02
  %513 = fpext float %512 to double
  %514 = call double @cos(double %513) #3
  %515 = fsub double -0.000000e+00, %488
  %516 = fadd double %515, %514
  %517 = fsub double -0.000000e+00, %488
  %518 = fadd double %517, %514
  %519 = fsub double %488, %514
  %520 = fmul double %519, %514
  %521 = fsub double -0.000000e+00, %488
  %522 = fadd double %521, %514
  %523 = fsub double -0.000000e+00, %488
  %524 = fadd double %523, %514
  %525 = fmul double %488, %514
  %526 = load float, float* %157, align 4
  %527 = fsub float %526, 2.000000e+00
  %528 = fmul float %527, 2.000000e+00
  %529 = fsub float -0.000000e+00, %526
  %530 = fadd float %529, 2.000000e+00
  %531 = fsub float -0.000000e+00, %526
  %532 = fadd float %531, 2.000000e+00
  %533 = fdiv float %526, 2.000000e+00
  %534 = fsub float -0.000000e+00, %533
  %535 = fadd float %534, 1.800000e+02
  %536 = fdiv float %533, 1.800000e+02
  %537 = fsub float -0.000000e+00, %536
  %538 = fadd float %537, 1.000000e+02
  %539 = fsub float %536, 1.000000e+02
  %540 = fmul float %539, 1.000000e+02
  %541 = fsub float -0.000000e+00, %536
  %542 = fadd float %541, 1.000000e+02
  %543 = fmul float %536, 1.000000e+02
  %544 = fpext float %543 to double
  %545 = call double @cos(double %544) #3
  %546 = fsub double -0.000000e+00, %525
  %547 = fadd double %546, %545
  %548 = fsub double -0.000000e+00, %525
  %549 = fadd double %548, %545
  %550 = fmul double %525, %545
  %551 = fsub double %454, %550
  %552 = fptrunc double %551 to float
  store float %552, float* %160, align 4
  %553 = load float, float* %160, align 4
  %554 = fcmp ogt float %553, 0.000000e+00
  br label %9

; <label>:555:                                    ; preds = %139, %130
  %556 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %139
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
