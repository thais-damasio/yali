; ModuleID = 'source-C-CXX/39/1830.c'
source_filename = "source-C-CXX/39/1830.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%lf%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %116

; <label>:9:                                      ; preds = %0, %116
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %15)
  %20 = load double, double* %11, align 8
  %21 = load double, double* %12, align 8
  %22 = fadd double %20, %21
  %23 = load double, double* %13, align 8
  %24 = fadd double %22, %23
  %25 = load double, double* %14, align 8
  %26 = fadd double %24, %25
  %27 = fdiv double %26, 2.000000e+00
  store double %27, double* %17, align 8
  %28 = load double, double* %17, align 8
  %29 = load double, double* %11, align 8
  %30 = fsub double %28, %29
  %31 = load double, double* %17, align 8
  %32 = load double, double* %12, align 8
  %33 = fsub double %31, %32
  %34 = fmul double %30, %33
  %35 = load double, double* %17, align 8
  %36 = load double, double* %13, align 8
  %37 = fsub double %35, %36
  %38 = fmul double %34, %37
  %39 = load double, double* %17, align 8
  %40 = load double, double* %14, align 8
  %41 = fsub double %39, %40
  %42 = fmul double %38, %41
  %43 = load double, double* %11, align 8
  %44 = load double, double* %12, align 8
  %45 = fmul double %43, %44
  %46 = load double, double* %13, align 8
  %47 = fmul double %45, %46
  %48 = load double, double* %14, align 8
  %49 = fmul double %47, %48
  %50 = load double, double* %15, align 8
  %51 = fmul double %50, 0x400921FB4D12D84A
  %52 = fdiv double %51, 3.600000e+02
  %53 = call double @cos(double %52) #3
  %54 = fmul double %49, %53
  %55 = load double, double* %15, align 8
  %56 = fmul double %55, 0x400921FB4D12D84A
  %57 = fdiv double %56, 3.600000e+02
  %58 = call double @cos(double %57) #3
  %59 = fmul double %54, %58
  %60 = fsub double %42, %59
  %61 = call double @sqrt(double %60) #3
  store double %61, double* %18, align 8
  %62 = load double, double* %17, align 8
  %63 = load double, double* %11, align 8
  %64 = fsub double %62, %63
  %65 = load double, double* %17, align 8
  %66 = load double, double* %12, align 8
  %67 = fsub double %65, %66
  %68 = fmul double %64, %67
  %69 = load double, double* %17, align 8
  %70 = load double, double* %13, align 8
  %71 = fsub double %69, %70
  %72 = fmul double %68, %71
  %73 = load double, double* %17, align 8
  %74 = load double, double* %14, align 8
  %75 = fsub double %73, %74
  %76 = fmul double %72, %75
  %77 = load double, double* %11, align 8
  %78 = load double, double* %12, align 8
  %79 = fmul double %77, %78
  %80 = load double, double* %13, align 8
  %81 = fmul double %79, %80
  %82 = load double, double* %14, align 8
  %83 = fmul double %81, %82
  %84 = load double, double* %15, align 8
  %85 = fmul double %84, 0x400921FB4D12D84A
  %86 = fdiv double %85, 3.600000e+02
  %87 = call double @cos(double %86) #3
  %88 = fmul double %83, %87
  %89 = load double, double* %15, align 8
  %90 = fmul double %89, 0x400921FB4D12D84A
  %91 = fdiv double %90, 3.600000e+02
  %92 = call double @cos(double %91) #3
  %93 = fmul double %88, %92
  %94 = fsub double %76, %93
  store double %94, double* %16, align 8
  %95 = load double, double* %16, align 8
  %96 = fcmp ogt double %95, 0.000000e+00
  %97 = load i32, i32* @x
  %98 = load i32, i32* @y
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %105, label %116

; <label>:105:                                    ; preds = %9
  br i1 %96, label %106, label %109

; <label>:106:                                    ; preds = %105
  %107 = load double, double* %18, align 8
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double %107)
  br label %115

; <label>:109:                                    ; preds = %105
  %110 = load double, double* %16, align 8
  %111 = fcmp olt double %110, 0.000000e+00
  br i1 %111, label %112, label %114

; <label>:112:                                    ; preds = %109
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %114

; <label>:114:                                    ; preds = %112, %109
  br label %115

; <label>:115:                                    ; preds = %114, %106
  ret i32 0

; <label>:116:                                    ; preds = %9, %0
  %117 = alloca i32, align 4
  %118 = alloca double, align 8
  %119 = alloca double, align 8
  %120 = alloca double, align 8
  %121 = alloca double, align 8
  %122 = alloca double, align 8
  %123 = alloca double, align 8
  %124 = alloca double, align 8
  %125 = alloca double, align 8
  store i32 0, i32* %117, align 4
  %126 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %118, double* %119, double* %120, double* %121, double* %122)
  %127 = load double, double* %118, align 8
  %128 = load double, double* %119, align 8
  %129 = fsub double -0.000000e+00, %127
  %130 = fadd double %129, %128
  %131 = fadd double %127, %128
  %132 = load double, double* %120, align 8
  %133 = fsub double -0.000000e+00, %131
  %134 = fadd double %133, %132
  %135 = fsub double -0.000000e+00, %131
  %136 = fadd double %135, %132
  %137 = fsub double %131, %132
  %138 = fmul double %137, %132
  %139 = fadd double %131, %132
  %140 = load double, double* %121, align 8
  %141 = fsub double -0.000000e+00, %139
  %142 = fadd double %141, %140
  %143 = fsub double %139, %140
  %144 = fmul double %143, %140
  %145 = fsub double -0.000000e+00, %139
  %146 = fadd double %145, %140
  %147 = fsub double -0.000000e+00, %139
  %148 = fadd double %147, %140
  %149 = fsub double %139, %140
  %150 = fmul double %149, %140
  %151 = fsub double -0.000000e+00, %139
  %152 = fadd double %151, %140
  %153 = fadd double %139, %140
  %154 = fsub double %153, 2.000000e+00
  %155 = fmul double %154, 2.000000e+00
  %156 = fsub double %153, 2.000000e+00
  %157 = fmul double %156, 2.000000e+00
  %158 = fsub double %153, 2.000000e+00
  %159 = fmul double %158, 2.000000e+00
  %160 = fsub double -0.000000e+00, %153
  %161 = fadd double %160, 2.000000e+00
  %162 = fsub double -0.000000e+00, %153
  %163 = fadd double %162, 2.000000e+00
  %164 = fdiv double %153, 2.000000e+00
  store double %164, double* %124, align 8
  %165 = load double, double* %124, align 8
  %166 = load double, double* %118, align 8
  %167 = fsub double -0.000000e+00, %165
  %168 = fadd double %167, %166
  %169 = fsub double %165, %166
  %170 = fmul double %169, %166
  %171 = fsub double %165, %166
  %172 = fmul double %171, %166
  %173 = fsub double -0.000000e+00, %165
  %174 = fadd double %173, %166
  %175 = fsub double %165, %166
  %176 = load double, double* %124, align 8
  %177 = load double, double* %119, align 8
  %178 = fsub double %176, %177
  %179 = fmul double %178, %177
  %180 = fsub double -0.000000e+00, %176
  %181 = fadd double %180, %177
  %182 = fsub double -0.000000e+00, %176
  %183 = fadd double %182, %177
  %184 = fsub double %176, %177
  %185 = fsub double -0.000000e+00, %175
  %186 = fadd double %185, %184
  %187 = fsub double %175, %184
  %188 = fmul double %187, %184
  %189 = fsub double %175, %184
  %190 = fmul double %189, %184
  %191 = fsub double %175, %184
  %192 = fmul double %191, %184
  %193 = fsub double -0.000000e+00, %175
  %194 = fadd double %193, %184
  %195 = fsub double %175, %184
  %196 = fmul double %195, %184
  %197 = fsub double -0.000000e+00, %175
  %198 = fadd double %197, %184
  %199 = fsub double -0.000000e+00, %175
  %200 = fadd double %199, %184
  %201 = fsub double %175, %184
  %202 = fmul double %201, %184
  %203 = fmul double %175, %184
  %204 = load double, double* %124, align 8
  %205 = load double, double* %120, align 8
  %206 = fsub double %204, %205
  %207 = fmul double %206, %205
  %208 = fsub double -0.000000e+00, %204
  %209 = fadd double %208, %205
  %210 = fsub double %204, %205
  %211 = fmul double %210, %205
  %212 = fsub double -0.000000e+00, %204
  %213 = fadd double %212, %205
  %214 = fsub double %204, %205
  %215 = fmul double %214, %205
  %216 = fsub double %204, %205
  %217 = fmul double %216, %205
  %218 = fsub double -0.000000e+00, %204
  %219 = fadd double %218, %205
  %220 = fsub double -0.000000e+00, %204
  %221 = fadd double %220, %205
  %222 = fsub double %204, %205
  %223 = fsub double -0.000000e+00, %203
  %224 = fadd double %223, %222
  %225 = fsub double %203, %222
  %226 = fmul double %225, %222
  %227 = fsub double %203, %222
  %228 = fmul double %227, %222
  %229 = fsub double %203, %222
  %230 = fmul double %229, %222
  %231 = fmul double %203, %222
  %232 = load double, double* %124, align 8
  %233 = load double, double* %121, align 8
  %234 = fsub double -0.000000e+00, %232
  %235 = fadd double %234, %233
  %236 = fsub double %232, %233
  %237 = fmul double %236, %233
  %238 = fsub double %232, %233
  %239 = fmul double %238, %233
  %240 = fsub double %232, %233
  %241 = fsub double %231, %240
  %242 = fmul double %241, %240
  %243 = fsub double -0.000000e+00, %231
  %244 = fadd double %243, %240
  %245 = fmul double %231, %240
  %246 = load double, double* %118, align 8
  %247 = load double, double* %119, align 8
  %248 = fsub double -0.000000e+00, %246
  %249 = fadd double %248, %247
  %250 = fsub double -0.000000e+00, %246
  %251 = fadd double %250, %247
  %252 = fsub double %246, %247
  %253 = fmul double %252, %247
  %254 = fsub double -0.000000e+00, %246
  %255 = fadd double %254, %247
  %256 = fsub double %246, %247
  %257 = fmul double %256, %247
  %258 = fsub double %246, %247
  %259 = fmul double %258, %247
  %260 = fmul double %246, %247
  %261 = load double, double* %120, align 8
  %262 = fsub double -0.000000e+00, %260
  %263 = fadd double %262, %261
  %264 = fsub double -0.000000e+00, %260
  %265 = fadd double %264, %261
  %266 = fsub double -0.000000e+00, %260
  %267 = fadd double %266, %261
  %268 = fsub double -0.000000e+00, %260
  %269 = fadd double %268, %261
  %270 = fmul double %260, %261
  %271 = load double, double* %121, align 8
  %272 = fsub double %270, %271
  %273 = fmul double %272, %271
  %274 = fsub double %270, %271
  %275 = fmul double %274, %271
  %276 = fsub double -0.000000e+00, %270
  %277 = fadd double %276, %271
  %278 = fsub double %270, %271
  %279 = fmul double %278, %271
  %280 = fsub double %270, %271
  %281 = fmul double %280, %271
  %282 = fsub double %270, %271
  %283 = fmul double %282, %271
  %284 = fmul double %270, %271
  %285 = load double, double* %122, align 8
  %286 = fsub double %285, 0x400921FB4D12D84A
  %287 = fmul double %286, 0x400921FB4D12D84A
  %288 = fsub double %285, 0x400921FB4D12D84A
  %289 = fmul double %288, 0x400921FB4D12D84A
  %290 = fsub double -0.000000e+00, %285
  %291 = fadd double %290, 0x400921FB4D12D84A
  %292 = fsub double -0.000000e+00, %285
  %293 = fadd double %292, 0x400921FB4D12D84A
  %294 = fmul double %285, 0x400921FB4D12D84A
  %295 = fsub double %294, 3.600000e+02
  %296 = fmul double %295, 3.600000e+02
  %297 = fdiv double %294, 3.600000e+02
  %298 = call double @cos(double %297) #3
  %299 = fsub double -0.000000e+00, %284
  %300 = fadd double %299, %298
  %301 = fsub double -0.000000e+00, %284
  %302 = fadd double %301, %298
  %303 = fsub double %284, %298
  %304 = fmul double %303, %298
  %305 = fsub double -0.000000e+00, %284
  %306 = fadd double %305, %298
  %307 = fsub double %284, %298
  %308 = fmul double %307, %298
  %309 = fsub double -0.000000e+00, %284
  %310 = fadd double %309, %298
  %311 = fsub double -0.000000e+00, %284
  %312 = fadd double %311, %298
  %313 = fmul double %284, %298
  %314 = load double, double* %122, align 8
  %315 = fsub double -0.000000e+00, %314
  %316 = fadd double %315, 0x400921FB4D12D84A
  %317 = fmul double %314, 0x400921FB4D12D84A
  %318 = fsub double %317, 3.600000e+02
  %319 = fmul double %318, 3.600000e+02
  %320 = fsub double %317, 3.600000e+02
  %321 = fmul double %320, 3.600000e+02
  %322 = fsub double -0.000000e+00, %317
  %323 = fadd double %322, 3.600000e+02
  %324 = fdiv double %317, 3.600000e+02
  %325 = call double @cos(double %324) #3
  %326 = fsub double -0.000000e+00, %313
  %327 = fadd double %326, %325
  %328 = fsub double %313, %325
  %329 = fmul double %328, %325
  %330 = fsub double %313, %325
  %331 = fmul double %330, %325
  %332 = fsub double %313, %325
  %333 = fmul double %332, %325
  %334 = fsub double -0.000000e+00, %313
  %335 = fadd double %334, %325
  %336 = fsub double -0.000000e+00, %313
  %337 = fadd double %336, %325
  %338 = fmul double %313, %325
  %339 = fsub double %245, %338
  %340 = fmul double %339, %338
  %341 = fsub double %245, %338
  %342 = fmul double %341, %338
  %343 = fsub double -0.000000e+00, %245
  %344 = fadd double %343, %338
  %345 = fsub double %245, %338
  %346 = call double @sqrt(double %345) #3
  store double %346, double* %125, align 8
  %347 = load double, double* %124, align 8
  %348 = load double, double* %118, align 8
  %349 = fsub double %347, %348
  %350 = fmul double %349, %348
  %351 = fsub double %347, %348
  %352 = fmul double %351, %348
  %353 = fsub double %347, %348
  %354 = load double, double* %124, align 8
  %355 = load double, double* %119, align 8
  %356 = fsub double %354, %355
  %357 = fmul double %356, %355
  %358 = fsub double %354, %355
  %359 = fsub double %353, %358
  %360 = fmul double %359, %358
  %361 = fmul double %353, %358
  %362 = load double, double* %124, align 8
  %363 = load double, double* %120, align 8
  %364 = fsub double -0.000000e+00, %362
  %365 = fadd double %364, %363
  %366 = fsub double -0.000000e+00, %362
  %367 = fadd double %366, %363
  %368 = fsub double %362, %363
  %369 = fmul double %368, %363
  %370 = fsub double -0.000000e+00, %362
  %371 = fadd double %370, %363
  %372 = fsub double %362, %363
  %373 = fsub double %361, %372
  %374 = fmul double %373, %372
  %375 = fsub double %361, %372
  %376 = fmul double %375, %372
  %377 = fmul double %361, %372
  %378 = load double, double* %124, align 8
  %379 = load double, double* %121, align 8
  %380 = fsub double %378, %379
  %381 = fsub double %377, %380
  %382 = fmul double %381, %380
  %383 = fsub double %377, %380
  %384 = fmul double %383, %380
  %385 = fmul double %377, %380
  %386 = load double, double* %118, align 8
  %387 = load double, double* %119, align 8
  %388 = fsub double -0.000000e+00, %386
  %389 = fadd double %388, %387
  %390 = fsub double %386, %387
  %391 = fmul double %390, %387
  %392 = fmul double %386, %387
  %393 = load double, double* %120, align 8
  %394 = fsub double -0.000000e+00, %392
  %395 = fadd double %394, %393
  %396 = fsub double %392, %393
  %397 = fmul double %396, %393
  %398 = fsub double -0.000000e+00, %392
  %399 = fadd double %398, %393
  %400 = fsub double %392, %393
  %401 = fmul double %400, %393
  %402 = fsub double -0.000000e+00, %392
  %403 = fadd double %402, %393
  %404 = fsub double -0.000000e+00, %392
  %405 = fadd double %404, %393
  %406 = fmul double %392, %393
  %407 = load double, double* %121, align 8
  %408 = fsub double %406, %407
  %409 = fmul double %408, %407
  %410 = fsub double -0.000000e+00, %406
  %411 = fadd double %410, %407
  %412 = fsub double -0.000000e+00, %406
  %413 = fadd double %412, %407
  %414 = fsub double %406, %407
  %415 = fmul double %414, %407
  %416 = fsub double %406, %407
  %417 = fmul double %416, %407
  %418 = fmul double %406, %407
  %419 = load double, double* %122, align 8
  %420 = fsub double %419, 0x400921FB4D12D84A
  %421 = fmul double %420, 0x400921FB4D12D84A
  %422 = fsub double %419, 0x400921FB4D12D84A
  %423 = fmul double %422, 0x400921FB4D12D84A
  %424 = fsub double -0.000000e+00, %419
  %425 = fadd double %424, 0x400921FB4D12D84A
  %426 = fsub double %419, 0x400921FB4D12D84A
  %427 = fmul double %426, 0x400921FB4D12D84A
  %428 = fmul double %419, 0x400921FB4D12D84A
  %429 = fsub double %428, 3.600000e+02
  %430 = fmul double %429, 3.600000e+02
  %431 = fsub double %428, 3.600000e+02
  %432 = fmul double %431, 3.600000e+02
  %433 = fsub double -0.000000e+00, %428
  %434 = fadd double %433, 3.600000e+02
  %435 = fsub double -0.000000e+00, %428
  %436 = fadd double %435, 3.600000e+02
  %437 = fsub double -0.000000e+00, %428
  %438 = fadd double %437, 3.600000e+02
  %439 = fsub double %428, 3.600000e+02
  %440 = fmul double %439, 3.600000e+02
  %441 = fsub double %428, 3.600000e+02
  %442 = fmul double %441, 3.600000e+02
  %443 = fdiv double %428, 3.600000e+02
  %444 = call double @cos(double %443) #3
  %445 = fsub double -0.000000e+00, %418
  %446 = fadd double %445, %444
  %447 = fsub double -0.000000e+00, %418
  %448 = fadd double %447, %444
  %449 = fsub double -0.000000e+00, %418
  %450 = fadd double %449, %444
  %451 = fsub double %418, %444
  %452 = fmul double %451, %444
  %453 = fmul double %418, %444
  %454 = load double, double* %122, align 8
  %455 = fsub double -0.000000e+00, %454
  %456 = fadd double %455, 0x400921FB4D12D84A
  %457 = fsub double %454, 0x400921FB4D12D84A
  %458 = fmul double %457, 0x400921FB4D12D84A
  %459 = fsub double %454, 0x400921FB4D12D84A
  %460 = fmul double %459, 0x400921FB4D12D84A
  %461 = fsub double %454, 0x400921FB4D12D84A
  %462 = fmul double %461, 0x400921FB4D12D84A
  %463 = fmul double %454, 0x400921FB4D12D84A
  %464 = fsub double %463, 3.600000e+02
  %465 = fmul double %464, 3.600000e+02
  %466 = fsub double -0.000000e+00, %463
  %467 = fadd double %466, 3.600000e+02
  %468 = fdiv double %463, 3.600000e+02
  %469 = call double @cos(double %468) #3
  %470 = fsub double -0.000000e+00, %453
  %471 = fadd double %470, %469
  %472 = fsub double -0.000000e+00, %453
  %473 = fadd double %472, %469
  %474 = fsub double -0.000000e+00, %453
  %475 = fadd double %474, %469
  %476 = fsub double %453, %469
  %477 = fmul double %476, %469
  %478 = fmul double %453, %469
  %479 = fsub double %385, %478
  %480 = fmul double %479, %478
  %481 = fsub double %385, %478
  %482 = fmul double %481, %478
  %483 = fsub double %385, %478
  %484 = fmul double %483, %478
  %485 = fsub double -0.000000e+00, %385
  %486 = fadd double %485, %478
  %487 = fsub double -0.000000e+00, %385
  %488 = fadd double %487, %478
  %489 = fsub double %385, %478
  %490 = fmul double %489, %478
  %491 = fsub double -0.000000e+00, %385
  %492 = fadd double %491, %478
  %493 = fsub double %385, %478
  store double %493, double* %123, align 8
  %494 = load double, double* %123, align 8
  %495 = fcmp ogt double %494, 0.000000e+00
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
