; ModuleID = 'source-C-CXX/39/2298.c'
source_filename = "source-C-CXX/39/2298.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"%lf\0A%lf\0A%lf\0A%lf\0A%lf\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%.4lf\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %124

; <label>:9:                                      ; preds = %0, %124
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %15)
  %20 = load double, double* %11, align 8
  %21 = load double, double* %12, align 8
  %22 = fadd double %20, %21
  %23 = load double, double* %13, align 8
  %24 = fadd double %22, %23
  %25 = load double, double* %14, align 8
  %26 = fadd double %24, %25
  %27 = fdiv double %26, 2.000000e+00
  store double %27, double* %18, align 8
  %28 = load double, double* %15, align 8
  %29 = fmul double %28, 1.000000e+02
  %30 = fdiv double %29, 3.600000e+02
  store double %30, double* %16, align 8
  %31 = load double, double* %18, align 8
  %32 = load double, double* %11, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %18, align 8
  %35 = load double, double* %12, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %36
  %38 = load double, double* %18, align 8
  %39 = load double, double* %13, align 8
  %40 = fsub double %38, %39
  %41 = fmul double %37, %40
  %42 = load double, double* %18, align 8
  %43 = load double, double* %14, align 8
  %44 = fsub double %42, %43
  %45 = fmul double %41, %44
  %46 = load double, double* %11, align 8
  %47 = load double, double* %12, align 8
  %48 = fmul double %46, %47
  %49 = load double, double* %13, align 8
  %50 = fmul double %48, %49
  %51 = load double, double* %14, align 8
  %52 = fmul double %50, %51
  %53 = load double, double* %16, align 8
  %54 = call double @cos(double %53) #3
  %55 = fmul double %52, %54
  %56 = load double, double* %16, align 8
  %57 = call double @cos(double %56) #3
  %58 = fmul double %55, %57
  %59 = fsub double %45, %58
  %60 = call double @sqrt(double %59) #3
  store double %60, double* %17, align 8
  %61 = load double, double* %18, align 8
  %62 = load double, double* %11, align 8
  %63 = fsub double %61, %62
  %64 = load double, double* %18, align 8
  %65 = load double, double* %12, align 8
  %66 = fsub double %64, %65
  %67 = fmul double %63, %66
  %68 = load double, double* %18, align 8
  %69 = load double, double* %13, align 8
  %70 = fsub double %68, %69
  %71 = fmul double %67, %70
  %72 = load double, double* %18, align 8
  %73 = load double, double* %14, align 8
  %74 = fsub double %72, %73
  %75 = fmul double %71, %74
  %76 = load double, double* %11, align 8
  %77 = load double, double* %12, align 8
  %78 = fmul double %76, %77
  %79 = load double, double* %13, align 8
  %80 = fmul double %78, %79
  %81 = load double, double* %14, align 8
  %82 = fmul double %80, %81
  %83 = load double, double* %15, align 8
  %84 = call double @cos(double %83) #3
  %85 = fmul double %82, %84
  %86 = load double, double* %16, align 8
  %87 = call double @cos(double %86) #3
  %88 = fmul double %85, %87
  %89 = fsub double %75, %88
  %90 = fcmp ogt double %89, 0.000000e+00
  %91 = load i32, i32* @x
  %92 = load i32, i32* @y
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %99, label %124

; <label>:99:                                     ; preds = %9
  br i1 %90, label %100, label %103

; <label>:100:                                    ; preds = %99
  %101 = load double, double* %17, align 8
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %101)
  br label %105

; <label>:103:                                    ; preds = %99
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %105

; <label>:105:                                    ; preds = %103, %100
  %106 = load i32, i32* @x
  %107 = load i32, i32* @y
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %114, label %450

; <label>:114:                                    ; preds = %105, %450
  %115 = load i32, i32* @x
  %116 = load i32, i32* @y
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %123, label %450

; <label>:123:                                    ; preds = %114
  ret i32 0

; <label>:124:                                    ; preds = %9, %0
  %125 = alloca i32, align 4
  %126 = alloca double, align 8
  %127 = alloca double, align 8
  %128 = alloca double, align 8
  %129 = alloca double, align 8
  %130 = alloca double, align 8
  %131 = alloca double, align 8
  %132 = alloca double, align 8
  %133 = alloca double, align 8
  store i32 0, i32* %125, align 4
  %134 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), double* %126, double* %127, double* %128, double* %129, double* %130)
  %135 = load double, double* %126, align 8
  %136 = load double, double* %127, align 8
  %137 = fadd double %135, %136
  %138 = load double, double* %128, align 8
  %139 = fsub double -0.000000e+00, %137
  %140 = fadd double %139, %138
  %141 = fsub double %137, %138
  %142 = fmul double %141, %138
  %143 = fadd double %137, %138
  %144 = load double, double* %129, align 8
  %145 = fsub double %143, %144
  %146 = fmul double %145, %144
  %147 = fsub double -0.000000e+00, %143
  %148 = fadd double %147, %144
  %149 = fsub double -0.000000e+00, %143
  %150 = fadd double %149, %144
  %151 = fadd double %143, %144
  %152 = fsub double -0.000000e+00, %151
  %153 = fadd double %152, 2.000000e+00
  %154 = fsub double -0.000000e+00, %151
  %155 = fadd double %154, 2.000000e+00
  %156 = fsub double -0.000000e+00, %151
  %157 = fadd double %156, 2.000000e+00
  %158 = fsub double %151, 2.000000e+00
  %159 = fmul double %158, 2.000000e+00
  %160 = fsub double -0.000000e+00, %151
  %161 = fadd double %160, 2.000000e+00
  %162 = fsub double -0.000000e+00, %151
  %163 = fadd double %162, 2.000000e+00
  %164 = fsub double %151, 2.000000e+00
  %165 = fmul double %164, 2.000000e+00
  %166 = fdiv double %151, 2.000000e+00
  store double %166, double* %133, align 8
  %167 = load double, double* %130, align 8
  %168 = fsub double -0.000000e+00, %167
  %169 = fadd double %168, 1.000000e+02
  %170 = fsub double %167, 1.000000e+02
  %171 = fmul double %170, 1.000000e+02
  %172 = fsub double %167, 1.000000e+02
  %173 = fmul double %172, 1.000000e+02
  %174 = fsub double %167, 1.000000e+02
  %175 = fmul double %174, 1.000000e+02
  %176 = fsub double %167, 1.000000e+02
  %177 = fmul double %176, 1.000000e+02
  %178 = fmul double %167, 1.000000e+02
  %179 = fsub double -0.000000e+00, %178
  %180 = fadd double %179, 3.600000e+02
  %181 = fsub double %178, 3.600000e+02
  %182 = fmul double %181, 3.600000e+02
  %183 = fsub double -0.000000e+00, %178
  %184 = fadd double %183, 3.600000e+02
  %185 = fdiv double %178, 3.600000e+02
  store double %185, double* %131, align 8
  %186 = load double, double* %133, align 8
  %187 = load double, double* %126, align 8
  %188 = fsub double %186, %187
  %189 = fmul double %188, %187
  %190 = fsub double -0.000000e+00, %186
  %191 = fadd double %190, %187
  %192 = fsub double -0.000000e+00, %186
  %193 = fadd double %192, %187
  %194 = fsub double %186, %187
  %195 = load double, double* %133, align 8
  %196 = load double, double* %127, align 8
  %197 = fsub double %195, %196
  %198 = fmul double %197, %196
  %199 = fsub double %195, %196
  %200 = fmul double %199, %196
  %201 = fsub double -0.000000e+00, %195
  %202 = fadd double %201, %196
  %203 = fsub double %195, %196
  %204 = fmul double %203, %196
  %205 = fsub double %195, %196
  %206 = fmul double %205, %196
  %207 = fsub double %195, %196
  %208 = fmul double %207, %196
  %209 = fsub double %195, %196
  %210 = fsub double -0.000000e+00, %194
  %211 = fadd double %210, %209
  %212 = fsub double %194, %209
  %213 = fmul double %212, %209
  %214 = fsub double -0.000000e+00, %194
  %215 = fadd double %214, %209
  %216 = fsub double -0.000000e+00, %194
  %217 = fadd double %216, %209
  %218 = fsub double %194, %209
  %219 = fmul double %218, %209
  %220 = fmul double %194, %209
  %221 = load double, double* %133, align 8
  %222 = load double, double* %128, align 8
  %223 = fsub double -0.000000e+00, %221
  %224 = fadd double %223, %222
  %225 = fsub double -0.000000e+00, %221
  %226 = fadd double %225, %222
  %227 = fsub double %221, %222
  %228 = fmul double %227, %222
  %229 = fsub double -0.000000e+00, %221
  %230 = fadd double %229, %222
  %231 = fsub double %221, %222
  %232 = fmul double %231, %222
  %233 = fsub double -0.000000e+00, %221
  %234 = fadd double %233, %222
  %235 = fsub double %221, %222
  %236 = fsub double %220, %235
  %237 = fmul double %236, %235
  %238 = fsub double %220, %235
  %239 = fmul double %238, %235
  %240 = fsub double %220, %235
  %241 = fmul double %240, %235
  %242 = fmul double %220, %235
  %243 = load double, double* %133, align 8
  %244 = load double, double* %129, align 8
  %245 = fsub double -0.000000e+00, %243
  %246 = fadd double %245, %244
  %247 = fsub double %243, %244
  %248 = fsub double -0.000000e+00, %242
  %249 = fadd double %248, %247
  %250 = fsub double %242, %247
  %251 = fmul double %250, %247
  %252 = fsub double -0.000000e+00, %242
  %253 = fadd double %252, %247
  %254 = fsub double -0.000000e+00, %242
  %255 = fadd double %254, %247
  %256 = fsub double -0.000000e+00, %242
  %257 = fadd double %256, %247
  %258 = fsub double %242, %247
  %259 = fmul double %258, %247
  %260 = fsub double -0.000000e+00, %242
  %261 = fadd double %260, %247
  %262 = fsub double -0.000000e+00, %242
  %263 = fadd double %262, %247
  %264 = fmul double %242, %247
  %265 = load double, double* %126, align 8
  %266 = load double, double* %127, align 8
  %267 = fsub double %265, %266
  %268 = fmul double %267, %266
  %269 = fsub double %265, %266
  %270 = fmul double %269, %266
  %271 = fsub double -0.000000e+00, %265
  %272 = fadd double %271, %266
  %273 = fmul double %265, %266
  %274 = load double, double* %128, align 8
  %275 = fsub double -0.000000e+00, %273
  %276 = fadd double %275, %274
  %277 = fsub double -0.000000e+00, %273
  %278 = fadd double %277, %274
  %279 = fsub double -0.000000e+00, %273
  %280 = fadd double %279, %274
  %281 = fsub double -0.000000e+00, %273
  %282 = fadd double %281, %274
  %283 = fmul double %273, %274
  %284 = load double, double* %129, align 8
  %285 = fsub double -0.000000e+00, %283
  %286 = fadd double %285, %284
  %287 = fmul double %283, %284
  %288 = load double, double* %131, align 8
  %289 = call double @cos(double %288) #3
  %290 = fsub double %287, %289
  %291 = fmul double %290, %289
  %292 = fsub double -0.000000e+00, %287
  %293 = fadd double %292, %289
  %294 = fsub double -0.000000e+00, %287
  %295 = fadd double %294, %289
  %296 = fsub double %287, %289
  %297 = fmul double %296, %289
  %298 = fsub double -0.000000e+00, %287
  %299 = fadd double %298, %289
  %300 = fsub double %287, %289
  %301 = fmul double %300, %289
  %302 = fsub double -0.000000e+00, %287
  %303 = fadd double %302, %289
  %304 = fsub double -0.000000e+00, %287
  %305 = fadd double %304, %289
  %306 = fmul double %287, %289
  %307 = load double, double* %131, align 8
  %308 = call double @cos(double %307) #3
  %309 = fsub double -0.000000e+00, %306
  %310 = fadd double %309, %308
  %311 = fsub double %306, %308
  %312 = fmul double %311, %308
  %313 = fsub double -0.000000e+00, %306
  %314 = fadd double %313, %308
  %315 = fsub double %306, %308
  %316 = fmul double %315, %308
  %317 = fsub double -0.000000e+00, %306
  %318 = fadd double %317, %308
  %319 = fmul double %306, %308
  %320 = fsub double -0.000000e+00, %264
  %321 = fadd double %320, %319
  %322 = fsub double -0.000000e+00, %264
  %323 = fadd double %322, %319
  %324 = fsub double -0.000000e+00, %264
  %325 = fadd double %324, %319
  %326 = fsub double %264, %319
  %327 = fmul double %326, %319
  %328 = fsub double %264, %319
  %329 = call double @sqrt(double %328) #3
  store double %329, double* %132, align 8
  %330 = load double, double* %133, align 8
  %331 = load double, double* %126, align 8
  %332 = fsub double -0.000000e+00, %330
  %333 = fadd double %332, %331
  %334 = fsub double %330, %331
  %335 = fmul double %334, %331
  %336 = fsub double %330, %331
  %337 = load double, double* %133, align 8
  %338 = load double, double* %127, align 8
  %339 = fsub double %337, %338
  %340 = fmul double %339, %338
  %341 = fsub double %337, %338
  %342 = fmul double %341, %338
  %343 = fsub double %337, %338
  %344 = fmul double %343, %338
  %345 = fsub double %337, %338
  %346 = fsub double %336, %345
  %347 = fmul double %346, %345
  %348 = fsub double -0.000000e+00, %336
  %349 = fadd double %348, %345
  %350 = fsub double -0.000000e+00, %336
  %351 = fadd double %350, %345
  %352 = fmul double %336, %345
  %353 = load double, double* %133, align 8
  %354 = load double, double* %128, align 8
  %355 = fsub double -0.000000e+00, %353
  %356 = fadd double %355, %354
  %357 = fsub double -0.000000e+00, %353
  %358 = fadd double %357, %354
  %359 = fsub double %353, %354
  %360 = fmul double %359, %354
  %361 = fsub double %353, %354
  %362 = fmul double %361, %354
  %363 = fsub double %353, %354
  %364 = fmul double %363, %354
  %365 = fsub double -0.000000e+00, %353
  %366 = fadd double %365, %354
  %367 = fsub double -0.000000e+00, %353
  %368 = fadd double %367, %354
  %369 = fsub double %353, %354
  %370 = fsub double -0.000000e+00, %352
  %371 = fadd double %370, %369
  %372 = fmul double %352, %369
  %373 = load double, double* %133, align 8
  %374 = load double, double* %129, align 8
  %375 = fsub double -0.000000e+00, %373
  %376 = fadd double %375, %374
  %377 = fsub double %373, %374
  %378 = fmul double %377, %374
  %379 = fsub double %373, %374
  %380 = fmul double %379, %374
  %381 = fsub double %373, %374
  %382 = fmul double %381, %374
  %383 = fsub double -0.000000e+00, %373
  %384 = fadd double %383, %374
  %385 = fsub double %373, %374
  %386 = fsub double %372, %385
  %387 = fmul double %386, %385
  %388 = fsub double %372, %385
  %389 = fmul double %388, %385
  %390 = fsub double %372, %385
  %391 = fmul double %390, %385
  %392 = fmul double %372, %385
  %393 = load double, double* %126, align 8
  %394 = load double, double* %127, align 8
  %395 = fsub double -0.000000e+00, %393
  %396 = fadd double %395, %394
  %397 = fsub double -0.000000e+00, %393
  %398 = fadd double %397, %394
  %399 = fsub double -0.000000e+00, %393
  %400 = fadd double %399, %394
  %401 = fsub double %393, %394
  %402 = fmul double %401, %394
  %403 = fsub double -0.000000e+00, %393
  %404 = fadd double %403, %394
  %405 = fmul double %393, %394
  %406 = load double, double* %128, align 8
  %407 = fsub double -0.000000e+00, %405
  %408 = fadd double %407, %406
  %409 = fsub double -0.000000e+00, %405
  %410 = fadd double %409, %406
  %411 = fmul double %405, %406
  %412 = load double, double* %129, align 8
  %413 = fsub double %411, %412
  %414 = fmul double %413, %412
  %415 = fsub double -0.000000e+00, %411
  %416 = fadd double %415, %412
  %417 = fsub double %411, %412
  %418 = fmul double %417, %412
  %419 = fsub double -0.000000e+00, %411
  %420 = fadd double %419, %412
  %421 = fsub double -0.000000e+00, %411
  %422 = fadd double %421, %412
  %423 = fmul double %411, %412
  %424 = load double, double* %130, align 8
  %425 = call double @cos(double %424) #3
  %426 = fsub double -0.000000e+00, %423
  %427 = fadd double %426, %425
  %428 = fsub double -0.000000e+00, %423
  %429 = fadd double %428, %425
  %430 = fsub double %423, %425
  %431 = fmul double %430, %425
  %432 = fsub double -0.000000e+00, %423
  %433 = fadd double %432, %425
  %434 = fsub double -0.000000e+00, %423
  %435 = fadd double %434, %425
  %436 = fsub double -0.000000e+00, %423
  %437 = fadd double %436, %425
  %438 = fmul double %423, %425
  %439 = load double, double* %131, align 8
  %440 = call double @cos(double %439) #3
  %441 = fsub double %438, %440
  %442 = fmul double %441, %440
  %443 = fsub double -0.000000e+00, %438
  %444 = fadd double %443, %440
  %445 = fsub double -0.000000e+00, %438
  %446 = fadd double %445, %440
  %447 = fmul double %438, %440
  %448 = fsub double %392, %447
  %449 = fcmp ogt double %448, 0.000000e+00
  br label %9

; <label>:450:                                    ; preds = %114, %105
  br label %114
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
