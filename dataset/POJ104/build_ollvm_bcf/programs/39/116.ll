; ModuleID = 'source-C-CXX/39/116.c'
source_filename = "source-C-CXX/39/116.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Invalid input\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%.4lf\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32, i8**) #0 {
  %3 = load i32, i32* @x
  %4 = load i32, i32* @y
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %140

; <label>:11:                                     ; preds = %2, %140
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8**, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  store i32 0, i32* %12, align 4
  store i32 %0, i32* %13, align 4
  store i8** %1, i8*** %14, align 8
  %22 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %15)
  %23 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %16)
  %24 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %17)
  %25 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %18)
  %26 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %19)
  %27 = load double, double* %15, align 8
  %28 = load double, double* %16, align 8
  %29 = fadd double %27, %28
  %30 = load double, double* %17, align 8
  %31 = fadd double %29, %30
  %32 = load double, double* %18, align 8
  %33 = fadd double %31, %32
  %34 = fdiv double %33, 2.000000e+00
  store double %34, double* %20, align 8
  %35 = load double, double* %20, align 8
  %36 = load double, double* %15, align 8
  %37 = fsub double %35, %36
  %38 = load double, double* %20, align 8
  %39 = load double, double* %16, align 8
  %40 = fsub double %38, %39
  %41 = fmul double %37, %40
  %42 = load double, double* %20, align 8
  %43 = load double, double* %17, align 8
  %44 = fsub double %42, %43
  %45 = fmul double %41, %44
  %46 = load double, double* %20, align 8
  %47 = load double, double* %18, align 8
  %48 = fsub double %46, %47
  %49 = fmul double %45, %48
  %50 = load double, double* %15, align 8
  %51 = load double, double* %16, align 8
  %52 = fmul double %50, %51
  %53 = load double, double* %17, align 8
  %54 = fmul double %52, %53
  %55 = load double, double* %18, align 8
  %56 = fmul double %54, %55
  %57 = load double, double* %19, align 8
  %58 = fmul double %57, 3.140000e+00
  %59 = fdiv double %58, 2.000000e+00
  %60 = fdiv double %59, 1.800000e+02
  %61 = call double @cos(double %60) #3
  %62 = fmul double %56, %61
  %63 = load double, double* %19, align 8
  %64 = fmul double %63, 3.140000e+00
  %65 = fdiv double %64, 2.000000e+00
  %66 = fdiv double %65, 1.800000e+02
  %67 = call double @cos(double %66) #3
  %68 = fmul double %62, %67
  %69 = fsub double %49, %68
  %70 = call double @sqrt(double %69) #3
  store double %70, double* %21, align 8
  %71 = load double, double* %20, align 8
  %72 = load double, double* %15, align 8
  %73 = fsub double %71, %72
  %74 = load double, double* %20, align 8
  %75 = load double, double* %16, align 8
  %76 = fsub double %74, %75
  %77 = fmul double %73, %76
  %78 = load double, double* %20, align 8
  %79 = load double, double* %17, align 8
  %80 = fsub double %78, %79
  %81 = fmul double %77, %80
  %82 = load double, double* %20, align 8
  %83 = load double, double* %18, align 8
  %84 = fsub double %82, %83
  %85 = fmul double %81, %84
  %86 = load double, double* %15, align 8
  %87 = load double, double* %16, align 8
  %88 = fmul double %86, %87
  %89 = load double, double* %17, align 8
  %90 = fmul double %88, %89
  %91 = load double, double* %18, align 8
  %92 = fmul double %90, %91
  %93 = load double, double* %19, align 8
  %94 = fmul double %93, 3.140000e+00
  %95 = fdiv double %94, 2.000000e+00
  %96 = fdiv double %95, 1.800000e+02
  %97 = call double @cos(double %96) #3
  %98 = fmul double %92, %97
  %99 = load double, double* %19, align 8
  %100 = fmul double %99, 3.140000e+00
  %101 = fdiv double %100, 2.000000e+00
  %102 = fdiv double %101, 1.800000e+02
  %103 = call double @cos(double %102) #3
  %104 = fmul double %98, %103
  %105 = fsub double %85, %104
  %106 = fcmp olt double %105, 0.000000e+00
  %107 = load i32, i32* @x
  %108 = load i32, i32* @y
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %115, label %140

; <label>:115:                                    ; preds = %11
  br i1 %106, label %116, label %118

; <label>:116:                                    ; preds = %115
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0))
  br label %139

; <label>:118:                                    ; preds = %115
  %119 = load i32, i32* @x
  %120 = load i32, i32* @y
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %127, label %490

; <label>:127:                                    ; preds = %118, %490
  %128 = load double, double* %21, align 8
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double %128)
  %130 = load i32, i32* @x
  %131 = load i32, i32* @y
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %138, label %490

; <label>:138:                                    ; preds = %127
  br label %139

; <label>:139:                                    ; preds = %138, %116
  ret i32 0

; <label>:140:                                    ; preds = %11, %2
  %141 = alloca i32, align 4
  %142 = alloca i32, align 4
  %143 = alloca i8**, align 8
  %144 = alloca double, align 8
  %145 = alloca double, align 8
  %146 = alloca double, align 8
  %147 = alloca double, align 8
  %148 = alloca double, align 8
  %149 = alloca double, align 8
  %150 = alloca double, align 8
  store i32 0, i32* %141, align 4
  store i32 %0, i32* %142, align 4
  store i8** %1, i8*** %143, align 8
  %151 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %144)
  %152 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %145)
  %153 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %146)
  %154 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %147)
  %155 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %148)
  %156 = load double, double* %144, align 8
  %157 = load double, double* %145, align 8
  %158 = fsub double %156, %157
  %159 = fmul double %158, %157
  %160 = fadd double %156, %157
  %161 = load double, double* %146, align 8
  %162 = fsub double %160, %161
  %163 = fmul double %162, %161
  %164 = fadd double %160, %161
  %165 = load double, double* %147, align 8
  %166 = fsub double -0.000000e+00, %164
  %167 = fadd double %166, %165
  %168 = fsub double -0.000000e+00, %164
  %169 = fadd double %168, %165
  %170 = fadd double %164, %165
  %171 = fsub double %170, 2.000000e+00
  %172 = fmul double %171, 2.000000e+00
  %173 = fsub double -0.000000e+00, %170
  %174 = fadd double %173, 2.000000e+00
  %175 = fsub double -0.000000e+00, %170
  %176 = fadd double %175, 2.000000e+00
  %177 = fsub double -0.000000e+00, %170
  %178 = fadd double %177, 2.000000e+00
  %179 = fsub double %170, 2.000000e+00
  %180 = fmul double %179, 2.000000e+00
  %181 = fsub double -0.000000e+00, %170
  %182 = fadd double %181, 2.000000e+00
  %183 = fdiv double %170, 2.000000e+00
  store double %183, double* %149, align 8
  %184 = load double, double* %149, align 8
  %185 = load double, double* %144, align 8
  %186 = fsub double %184, %185
  %187 = fmul double %186, %185
  %188 = fsub double %184, %185
  %189 = fmul double %188, %185
  %190 = fsub double %184, %185
  %191 = load double, double* %149, align 8
  %192 = load double, double* %145, align 8
  %193 = fsub double -0.000000e+00, %191
  %194 = fadd double %193, %192
  %195 = fsub double -0.000000e+00, %191
  %196 = fadd double %195, %192
  %197 = fsub double %191, %192
  %198 = fsub double %190, %197
  %199 = fmul double %198, %197
  %200 = fsub double -0.000000e+00, %190
  %201 = fadd double %200, %197
  %202 = fsub double -0.000000e+00, %190
  %203 = fadd double %202, %197
  %204 = fsub double %190, %197
  %205 = fmul double %204, %197
  %206 = fsub double -0.000000e+00, %190
  %207 = fadd double %206, %197
  %208 = fsub double -0.000000e+00, %190
  %209 = fadd double %208, %197
  %210 = fmul double %190, %197
  %211 = load double, double* %149, align 8
  %212 = load double, double* %146, align 8
  %213 = fsub double -0.000000e+00, %211
  %214 = fadd double %213, %212
  %215 = fsub double -0.000000e+00, %211
  %216 = fadd double %215, %212
  %217 = fsub double %211, %212
  %218 = fmul double %217, %212
  %219 = fsub double -0.000000e+00, %211
  %220 = fadd double %219, %212
  %221 = fsub double -0.000000e+00, %211
  %222 = fadd double %221, %212
  %223 = fsub double %211, %212
  %224 = fsub double %210, %223
  %225 = fmul double %224, %223
  %226 = fmul double %210, %223
  %227 = load double, double* %149, align 8
  %228 = load double, double* %147, align 8
  %229 = fsub double %227, %228
  %230 = fmul double %229, %228
  %231 = fsub double %227, %228
  %232 = fmul double %231, %228
  %233 = fsub double -0.000000e+00, %227
  %234 = fadd double %233, %228
  %235 = fsub double %227, %228
  %236 = fmul double %235, %228
  %237 = fsub double %227, %228
  %238 = fsub double -0.000000e+00, %226
  %239 = fadd double %238, %237
  %240 = fsub double %226, %237
  %241 = fmul double %240, %237
  %242 = fmul double %226, %237
  %243 = load double, double* %144, align 8
  %244 = load double, double* %145, align 8
  %245 = fsub double -0.000000e+00, %243
  %246 = fadd double %245, %244
  %247 = fsub double -0.000000e+00, %243
  %248 = fadd double %247, %244
  %249 = fsub double %243, %244
  %250 = fmul double %249, %244
  %251 = fsub double -0.000000e+00, %243
  %252 = fadd double %251, %244
  %253 = fsub double -0.000000e+00, %243
  %254 = fadd double %253, %244
  %255 = fsub double %243, %244
  %256 = fmul double %255, %244
  %257 = fmul double %243, %244
  %258 = load double, double* %146, align 8
  %259 = fsub double %257, %258
  %260 = fmul double %259, %258
  %261 = fsub double -0.000000e+00, %257
  %262 = fadd double %261, %258
  %263 = fsub double -0.000000e+00, %257
  %264 = fadd double %263, %258
  %265 = fmul double %257, %258
  %266 = load double, double* %147, align 8
  %267 = fsub double -0.000000e+00, %265
  %268 = fadd double %267, %266
  %269 = fsub double %265, %266
  %270 = fmul double %269, %266
  %271 = fsub double -0.000000e+00, %265
  %272 = fadd double %271, %266
  %273 = fmul double %265, %266
  %274 = load double, double* %148, align 8
  %275 = fsub double -0.000000e+00, %274
  %276 = fadd double %275, 3.140000e+00
  %277 = fsub double %274, 3.140000e+00
  %278 = fmul double %277, 3.140000e+00
  %279 = fsub double %274, 3.140000e+00
  %280 = fmul double %279, 3.140000e+00
  %281 = fmul double %274, 3.140000e+00
  %282 = fsub double %281, 2.000000e+00
  %283 = fmul double %282, 2.000000e+00
  %284 = fsub double -0.000000e+00, %281
  %285 = fadd double %284, 2.000000e+00
  %286 = fsub double %281, 2.000000e+00
  %287 = fmul double %286, 2.000000e+00
  %288 = fsub double -0.000000e+00, %281
  %289 = fadd double %288, 2.000000e+00
  %290 = fsub double %281, 2.000000e+00
  %291 = fmul double %290, 2.000000e+00
  %292 = fsub double %281, 2.000000e+00
  %293 = fmul double %292, 2.000000e+00
  %294 = fdiv double %281, 2.000000e+00
  %295 = fdiv double %294, 1.800000e+02
  %296 = call double @cos(double %295) #3
  %297 = fsub double %273, %296
  %298 = fmul double %297, %296
  %299 = fsub double -0.000000e+00, %273
  %300 = fadd double %299, %296
  %301 = fsub double -0.000000e+00, %273
  %302 = fadd double %301, %296
  %303 = fsub double %273, %296
  %304 = fmul double %303, %296
  %305 = fmul double %273, %296
  %306 = load double, double* %148, align 8
  %307 = fsub double -0.000000e+00, %306
  %308 = fadd double %307, 3.140000e+00
  %309 = fsub double -0.000000e+00, %306
  %310 = fadd double %309, 3.140000e+00
  %311 = fmul double %306, 3.140000e+00
  %312 = fsub double %311, 2.000000e+00
  %313 = fmul double %312, 2.000000e+00
  %314 = fsub double -0.000000e+00, %311
  %315 = fadd double %314, 2.000000e+00
  %316 = fsub double -0.000000e+00, %311
  %317 = fadd double %316, 2.000000e+00
  %318 = fdiv double %311, 2.000000e+00
  %319 = fsub double -0.000000e+00, %318
  %320 = fadd double %319, 1.800000e+02
  %321 = fsub double -0.000000e+00, %318
  %322 = fadd double %321, 1.800000e+02
  %323 = fdiv double %318, 1.800000e+02
  %324 = call double @cos(double %323) #3
  %325 = fsub double -0.000000e+00, %305
  %326 = fadd double %325, %324
  %327 = fsub double %305, %324
  %328 = fmul double %327, %324
  %329 = fsub double %305, %324
  %330 = fmul double %329, %324
  %331 = fsub double -0.000000e+00, %305
  %332 = fadd double %331, %324
  %333 = fsub double %305, %324
  %334 = fmul double %333, %324
  %335 = fsub double -0.000000e+00, %305
  %336 = fadd double %335, %324
  %337 = fmul double %305, %324
  %338 = fsub double %242, %337
  %339 = fmul double %338, %337
  %340 = fsub double %242, %337
  %341 = fmul double %340, %337
  %342 = fsub double %242, %337
  %343 = fmul double %342, %337
  %344 = fsub double %242, %337
  %345 = fmul double %344, %337
  %346 = fsub double -0.000000e+00, %242
  %347 = fadd double %346, %337
  %348 = fsub double %242, %337
  %349 = call double @sqrt(double %348) #3
  store double %349, double* %150, align 8
  %350 = load double, double* %149, align 8
  %351 = load double, double* %144, align 8
  %352 = fsub double -0.000000e+00, %350
  %353 = fadd double %352, %351
  %354 = fsub double %350, %351
  %355 = load double, double* %149, align 8
  %356 = load double, double* %145, align 8
  %357 = fsub double -0.000000e+00, %355
  %358 = fadd double %357, %356
  %359 = fsub double -0.000000e+00, %355
  %360 = fadd double %359, %356
  %361 = fsub double -0.000000e+00, %355
  %362 = fadd double %361, %356
  %363 = fsub double -0.000000e+00, %355
  %364 = fadd double %363, %356
  %365 = fsub double %355, %356
  %366 = fmul double %365, %356
  %367 = fsub double -0.000000e+00, %355
  %368 = fadd double %367, %356
  %369 = fsub double %355, %356
  %370 = fsub double %354, %369
  %371 = fmul double %370, %369
  %372 = fsub double %354, %369
  %373 = fmul double %372, %369
  %374 = fsub double %354, %369
  %375 = fmul double %374, %369
  %376 = fsub double -0.000000e+00, %354
  %377 = fadd double %376, %369
  %378 = fsub double -0.000000e+00, %354
  %379 = fadd double %378, %369
  %380 = fmul double %354, %369
  %381 = load double, double* %149, align 8
  %382 = load double, double* %146, align 8
  %383 = fsub double -0.000000e+00, %381
  %384 = fadd double %383, %382
  %385 = fsub double -0.000000e+00, %381
  %386 = fadd double %385, %382
  %387 = fsub double %381, %382
  %388 = fsub double %380, %387
  %389 = fmul double %388, %387
  %390 = fsub double -0.000000e+00, %380
  %391 = fadd double %390, %387
  %392 = fsub double -0.000000e+00, %380
  %393 = fadd double %392, %387
  %394 = fsub double %380, %387
  %395 = fmul double %394, %387
  %396 = fmul double %380, %387
  %397 = load double, double* %149, align 8
  %398 = load double, double* %147, align 8
  %399 = fsub double -0.000000e+00, %397
  %400 = fadd double %399, %398
  %401 = fsub double %397, %398
  %402 = fmul double %401, %398
  %403 = fsub double -0.000000e+00, %397
  %404 = fadd double %403, %398
  %405 = fsub double -0.000000e+00, %397
  %406 = fadd double %405, %398
  %407 = fsub double -0.000000e+00, %397
  %408 = fadd double %407, %398
  %409 = fsub double %397, %398
  %410 = fmul double %409, %398
  %411 = fsub double %397, %398
  %412 = fmul double %411, %398
  %413 = fsub double %397, %398
  %414 = fsub double -0.000000e+00, %396
  %415 = fadd double %414, %413
  %416 = fmul double %396, %413
  %417 = load double, double* %144, align 8
  %418 = load double, double* %145, align 8
  %419 = fsub double -0.000000e+00, %417
  %420 = fadd double %419, %418
  %421 = fsub double %417, %418
  %422 = fmul double %421, %418
  %423 = fsub double %417, %418
  %424 = fmul double %423, %418
  %425 = fmul double %417, %418
  %426 = load double, double* %146, align 8
  %427 = fsub double -0.000000e+00, %425
  %428 = fadd double %427, %426
  %429 = fmul double %425, %426
  %430 = load double, double* %147, align 8
  %431 = fsub double %429, %430
  %432 = fmul double %431, %430
  %433 = fsub double %429, %430
  %434 = fmul double %433, %430
  %435 = fsub double %429, %430
  %436 = fmul double %435, %430
  %437 = fsub double -0.000000e+00, %429
  %438 = fadd double %437, %430
  %439 = fmul double %429, %430
  %440 = load double, double* %148, align 8
  %441 = fsub double %440, 3.140000e+00
  %442 = fmul double %441, 3.140000e+00
  %443 = fsub double -0.000000e+00, %440
  %444 = fadd double %443, 3.140000e+00
  %445 = fmul double %440, 3.140000e+00
  %446 = fsub double -0.000000e+00, %445
  %447 = fadd double %446, 2.000000e+00
  %448 = fdiv double %445, 2.000000e+00
  %449 = fsub double -0.000000e+00, %448
  %450 = fadd double %449, 1.800000e+02
  %451 = fsub double -0.000000e+00, %448
  %452 = fadd double %451, 1.800000e+02
  %453 = fsub double -0.000000e+00, %448
  %454 = fadd double %453, 1.800000e+02
  %455 = fsub double -0.000000e+00, %448
  %456 = fadd double %455, 1.800000e+02
  %457 = fdiv double %448, 1.800000e+02
  %458 = call double @cos(double %457) #3
  %459 = fsub double -0.000000e+00, %439
  %460 = fadd double %459, %458
  %461 = fsub double -0.000000e+00, %439
  %462 = fadd double %461, %458
  %463 = fsub double -0.000000e+00, %439
  %464 = fadd double %463, %458
  %465 = fsub double -0.000000e+00, %439
  %466 = fadd double %465, %458
  %467 = fmul double %439, %458
  %468 = load double, double* %148, align 8
  %469 = fsub double %468, 3.140000e+00
  %470 = fmul double %469, 3.140000e+00
  %471 = fmul double %468, 3.140000e+00
  %472 = fsub double %471, 2.000000e+00
  %473 = fmul double %472, 2.000000e+00
  %474 = fsub double %471, 2.000000e+00
  %475 = fmul double %474, 2.000000e+00
  %476 = fdiv double %471, 2.000000e+00
  %477 = fsub double %476, 1.800000e+02
  %478 = fmul double %477, 1.800000e+02
  %479 = fdiv double %476, 1.800000e+02
  %480 = call double @cos(double %479) #3
  %481 = fsub double -0.000000e+00, %467
  %482 = fadd double %481, %480
  %483 = fsub double -0.000000e+00, %467
  %484 = fadd double %483, %480
  %485 = fmul double %467, %480
  %486 = fsub double %416, %485
  %487 = fmul double %486, %485
  %488 = fsub double %416, %485
  %489 = fcmp olt double %488, 0.000000e+00
  br label %11

; <label>:490:                                    ; preds = %127, %118
  %491 = load double, double* %21, align 8
  %492 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double %491)
  br label %127
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
