; ModuleID = 'source-C-CXX/39/850.c'
source_filename = "source-C-CXX/39/850.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"%lf\0A%lf\0A%lf\0A%lf\0A%lf\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define void @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %133

; <label>:9:                                      ; preds = %0, %133
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), double* %10, double* %11, double* %12, double* %13, double* %16)
  %19 = load double, double* %10, align 8
  %20 = load double, double* %11, align 8
  %21 = fadd double %19, %20
  %22 = load double, double* %12, align 8
  %23 = fadd double %21, %22
  %24 = load double, double* %13, align 8
  %25 = fadd double %23, %24
  %26 = fdiv double %25, 2.000000e+00
  store double %26, double* %15, align 8
  %27 = load double, double* %15, align 8
  %28 = load double, double* %10, align 8
  %29 = fsub double %27, %28
  %30 = load double, double* %15, align 8
  %31 = load double, double* %11, align 8
  %32 = fsub double %30, %31
  %33 = fmul double %29, %32
  %34 = load double, double* %15, align 8
  %35 = load double, double* %12, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %36
  %38 = load double, double* %15, align 8
  %39 = load double, double* %13, align 8
  %40 = fsub double %38, %39
  %41 = fmul double %37, %40
  %42 = load double, double* %10, align 8
  %43 = load double, double* %11, align 8
  %44 = fmul double %42, %43
  %45 = load double, double* %12, align 8
  %46 = fmul double %44, %45
  %47 = load double, double* %13, align 8
  %48 = fmul double %46, %47
  %49 = load double, double* %16, align 8
  %50 = fmul double %49, 1.000000e+02
  %51 = fdiv double %50, 1.800000e+02
  %52 = fdiv double %51, 2.000000e+00
  %53 = call double @cos(double %52) #3
  %54 = fmul double %48, %53
  %55 = load double, double* %16, align 8
  %56 = fmul double %55, 1.000000e+02
  %57 = fdiv double %56, 1.800000e+02
  %58 = fdiv double %57, 2.000000e+00
  %59 = call double @cos(double %58) #3
  %60 = fmul double %54, %59
  %61 = fsub double %41, %60
  store double %61, double* %17, align 8
  %62 = load double, double* %15, align 8
  %63 = load double, double* %10, align 8
  %64 = fsub double %62, %63
  %65 = load double, double* %15, align 8
  %66 = load double, double* %11, align 8
  %67 = fsub double %65, %66
  %68 = fmul double %64, %67
  %69 = load double, double* %15, align 8
  %70 = load double, double* %12, align 8
  %71 = fsub double %69, %70
  %72 = fmul double %68, %71
  %73 = load double, double* %15, align 8
  %74 = load double, double* %13, align 8
  %75 = fsub double %73, %74
  %76 = fmul double %72, %75
  %77 = load double, double* %10, align 8
  %78 = load double, double* %11, align 8
  %79 = fmul double %77, %78
  %80 = load double, double* %12, align 8
  %81 = fmul double %79, %80
  %82 = load double, double* %13, align 8
  %83 = fmul double %81, %82
  %84 = load double, double* %16, align 8
  %85 = fmul double %84, 1.000000e+02
  %86 = fdiv double %85, 1.800000e+02
  %87 = fdiv double %86, 2.000000e+00
  %88 = call double @cos(double %87) #3
  %89 = fmul double %83, %88
  %90 = load double, double* %16, align 8
  %91 = fmul double %90, 1.000000e+02
  %92 = fdiv double %91, 1.800000e+02
  %93 = fdiv double %92, 2.000000e+00
  %94 = call double @cos(double %93) #3
  %95 = fmul double %89, %94
  %96 = fsub double %76, %95
  %97 = call double @sqrt(double %96) #3
  store double %97, double* %14, align 8
  %98 = load double, double* %17, align 8
  %99 = fcmp olt double %98, 0.000000e+00
  %100 = load i32, i32* @x
  %101 = load i32, i32* @y
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %108, label %133

; <label>:108:                                    ; preds = %9
  br i1 %99, label %109, label %111

; <label>:109:                                    ; preds = %108
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %114

; <label>:111:                                    ; preds = %108
  %112 = load double, double* %14, align 8
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %112)
  br label %114

; <label>:114:                                    ; preds = %111, %109
  %115 = load i32, i32* @x
  %116 = load i32, i32* @y
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %123, label %552

; <label>:123:                                    ; preds = %114, %552
  %124 = load i32, i32* @x
  %125 = load i32, i32* @y
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %132, label %552

; <label>:132:                                    ; preds = %123
  ret void

; <label>:133:                                    ; preds = %9, %0
  %134 = alloca double, align 8
  %135 = alloca double, align 8
  %136 = alloca double, align 8
  %137 = alloca double, align 8
  %138 = alloca double, align 8
  %139 = alloca double, align 8
  %140 = alloca double, align 8
  %141 = alloca double, align 8
  %142 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), double* %134, double* %135, double* %136, double* %137, double* %140)
  %143 = load double, double* %134, align 8
  %144 = load double, double* %135, align 8
  %145 = fsub double %143, %144
  %146 = fmul double %145, %144
  %147 = fsub double %143, %144
  %148 = fmul double %147, %144
  %149 = fsub double -0.000000e+00, %143
  %150 = fadd double %149, %144
  %151 = fsub double -0.000000e+00, %143
  %152 = fadd double %151, %144
  %153 = fadd double %143, %144
  %154 = load double, double* %136, align 8
  %155 = fsub double %153, %154
  %156 = fmul double %155, %154
  %157 = fsub double -0.000000e+00, %153
  %158 = fadd double %157, %154
  %159 = fsub double -0.000000e+00, %153
  %160 = fadd double %159, %154
  %161 = fsub double -0.000000e+00, %153
  %162 = fadd double %161, %154
  %163 = fadd double %153, %154
  %164 = load double, double* %137, align 8
  %165 = fsub double %163, %164
  %166 = fmul double %165, %164
  %167 = fsub double %163, %164
  %168 = fmul double %167, %164
  %169 = fsub double -0.000000e+00, %163
  %170 = fadd double %169, %164
  %171 = fsub double -0.000000e+00, %163
  %172 = fadd double %171, %164
  %173 = fsub double -0.000000e+00, %163
  %174 = fadd double %173, %164
  %175 = fsub double %163, %164
  %176 = fmul double %175, %164
  %177 = fadd double %163, %164
  %178 = fsub double %177, 2.000000e+00
  %179 = fmul double %178, 2.000000e+00
  %180 = fsub double %177, 2.000000e+00
  %181 = fmul double %180, 2.000000e+00
  %182 = fsub double -0.000000e+00, %177
  %183 = fadd double %182, 2.000000e+00
  %184 = fsub double -0.000000e+00, %177
  %185 = fadd double %184, 2.000000e+00
  %186 = fdiv double %177, 2.000000e+00
  store double %186, double* %139, align 8
  %187 = load double, double* %139, align 8
  %188 = load double, double* %134, align 8
  %189 = fsub double %187, %188
  %190 = load double, double* %139, align 8
  %191 = load double, double* %135, align 8
  %192 = fsub double %190, %191
  %193 = fmul double %192, %191
  %194 = fsub double %190, %191
  %195 = fmul double %194, %191
  %196 = fsub double %190, %191
  %197 = fsub double %189, %196
  %198 = fmul double %197, %196
  %199 = fsub double %189, %196
  %200 = fmul double %199, %196
  %201 = fsub double -0.000000e+00, %189
  %202 = fadd double %201, %196
  %203 = fsub double -0.000000e+00, %189
  %204 = fadd double %203, %196
  %205 = fsub double %189, %196
  %206 = fmul double %205, %196
  %207 = fsub double %189, %196
  %208 = fmul double %207, %196
  %209 = fsub double -0.000000e+00, %189
  %210 = fadd double %209, %196
  %211 = fmul double %189, %196
  %212 = load double, double* %139, align 8
  %213 = load double, double* %136, align 8
  %214 = fsub double -0.000000e+00, %212
  %215 = fadd double %214, %213
  %216 = fsub double %212, %213
  %217 = fmul double %216, %213
  %218 = fsub double -0.000000e+00, %212
  %219 = fadd double %218, %213
  %220 = fsub double %212, %213
  %221 = fmul double %220, %213
  %222 = fsub double %212, %213
  %223 = fmul double %222, %213
  %224 = fsub double -0.000000e+00, %212
  %225 = fadd double %224, %213
  %226 = fsub double %212, %213
  %227 = fsub double %211, %226
  %228 = fmul double %227, %226
  %229 = fsub double -0.000000e+00, %211
  %230 = fadd double %229, %226
  %231 = fsub double -0.000000e+00, %211
  %232 = fadd double %231, %226
  %233 = fsub double -0.000000e+00, %211
  %234 = fadd double %233, %226
  %235 = fsub double -0.000000e+00, %211
  %236 = fadd double %235, %226
  %237 = fsub double %211, %226
  %238 = fmul double %237, %226
  %239 = fsub double %211, %226
  %240 = fmul double %239, %226
  %241 = fmul double %211, %226
  %242 = load double, double* %139, align 8
  %243 = load double, double* %137, align 8
  %244 = fsub double -0.000000e+00, %242
  %245 = fadd double %244, %243
  %246 = fsub double -0.000000e+00, %242
  %247 = fadd double %246, %243
  %248 = fsub double -0.000000e+00, %242
  %249 = fadd double %248, %243
  %250 = fsub double %242, %243
  %251 = fsub double -0.000000e+00, %241
  %252 = fadd double %251, %250
  %253 = fmul double %241, %250
  %254 = load double, double* %134, align 8
  %255 = load double, double* %135, align 8
  %256 = fsub double %254, %255
  %257 = fmul double %256, %255
  %258 = fmul double %254, %255
  %259 = load double, double* %136, align 8
  %260 = fsub double %258, %259
  %261 = fmul double %260, %259
  %262 = fsub double -0.000000e+00, %258
  %263 = fadd double %262, %259
  %264 = fsub double -0.000000e+00, %258
  %265 = fadd double %264, %259
  %266 = fmul double %258, %259
  %267 = load double, double* %137, align 8
  %268 = fsub double -0.000000e+00, %266
  %269 = fadd double %268, %267
  %270 = fsub double -0.000000e+00, %266
  %271 = fadd double %270, %267
  %272 = fsub double -0.000000e+00, %266
  %273 = fadd double %272, %267
  %274 = fmul double %266, %267
  %275 = load double, double* %140, align 8
  %276 = fsub double %275, 1.000000e+02
  %277 = fmul double %276, 1.000000e+02
  %278 = fmul double %275, 1.000000e+02
  %279 = fsub double %278, 1.800000e+02
  %280 = fmul double %279, 1.800000e+02
  %281 = fdiv double %278, 1.800000e+02
  %282 = fsub double -0.000000e+00, %281
  %283 = fadd double %282, 2.000000e+00
  %284 = fsub double -0.000000e+00, %281
  %285 = fadd double %284, 2.000000e+00
  %286 = fsub double -0.000000e+00, %281
  %287 = fadd double %286, 2.000000e+00
  %288 = fsub double -0.000000e+00, %281
  %289 = fadd double %288, 2.000000e+00
  %290 = fsub double -0.000000e+00, %281
  %291 = fadd double %290, 2.000000e+00
  %292 = fdiv double %281, 2.000000e+00
  %293 = call double @cos(double %292) #3
  %294 = fsub double -0.000000e+00, %274
  %295 = fadd double %294, %293
  %296 = fsub double -0.000000e+00, %274
  %297 = fadd double %296, %293
  %298 = fsub double -0.000000e+00, %274
  %299 = fadd double %298, %293
  %300 = fsub double %274, %293
  %301 = fmul double %300, %293
  %302 = fsub double %274, %293
  %303 = fmul double %302, %293
  %304 = fmul double %274, %293
  %305 = load double, double* %140, align 8
  %306 = fsub double -0.000000e+00, %305
  %307 = fadd double %306, 1.000000e+02
  %308 = fsub double -0.000000e+00, %305
  %309 = fadd double %308, 1.000000e+02
  %310 = fsub double %305, 1.000000e+02
  %311 = fmul double %310, 1.000000e+02
  %312 = fsub double %305, 1.000000e+02
  %313 = fmul double %312, 1.000000e+02
  %314 = fsub double -0.000000e+00, %305
  %315 = fadd double %314, 1.000000e+02
  %316 = fsub double -0.000000e+00, %305
  %317 = fadd double %316, 1.000000e+02
  %318 = fsub double %305, 1.000000e+02
  %319 = fmul double %318, 1.000000e+02
  %320 = fmul double %305, 1.000000e+02
  %321 = fsub double -0.000000e+00, %320
  %322 = fadd double %321, 1.800000e+02
  %323 = fsub double %320, 1.800000e+02
  %324 = fmul double %323, 1.800000e+02
  %325 = fsub double -0.000000e+00, %320
  %326 = fadd double %325, 1.800000e+02
  %327 = fsub double %320, 1.800000e+02
  %328 = fmul double %327, 1.800000e+02
  %329 = fdiv double %320, 1.800000e+02
  %330 = fsub double -0.000000e+00, %329
  %331 = fadd double %330, 2.000000e+00
  %332 = fsub double %329, 2.000000e+00
  %333 = fmul double %332, 2.000000e+00
  %334 = fdiv double %329, 2.000000e+00
  %335 = call double @cos(double %334) #3
  %336 = fsub double %304, %335
  %337 = fmul double %336, %335
  %338 = fsub double %304, %335
  %339 = fmul double %338, %335
  %340 = fsub double %304, %335
  %341 = fmul double %340, %335
  %342 = fsub double %304, %335
  %343 = fmul double %342, %335
  %344 = fsub double -0.000000e+00, %304
  %345 = fadd double %344, %335
  %346 = fsub double -0.000000e+00, %304
  %347 = fadd double %346, %335
  %348 = fsub double %304, %335
  %349 = fmul double %348, %335
  %350 = fsub double -0.000000e+00, %304
  %351 = fadd double %350, %335
  %352 = fsub double %304, %335
  %353 = fmul double %352, %335
  %354 = fmul double %304, %335
  %355 = fsub double %253, %354
  %356 = fmul double %355, %354
  %357 = fsub double %253, %354
  %358 = fmul double %357, %354
  %359 = fsub double %253, %354
  %360 = fmul double %359, %354
  %361 = fsub double %253, %354
  %362 = fmul double %361, %354
  %363 = fsub double -0.000000e+00, %253
  %364 = fadd double %363, %354
  %365 = fsub double %253, %354
  store double %365, double* %141, align 8
  %366 = load double, double* %139, align 8
  %367 = load double, double* %134, align 8
  %368 = fsub double %366, %367
  %369 = fmul double %368, %367
  %370 = fsub double -0.000000e+00, %366
  %371 = fadd double %370, %367
  %372 = fsub double %366, %367
  %373 = fmul double %372, %367
  %374 = fsub double %366, %367
  %375 = fmul double %374, %367
  %376 = fsub double -0.000000e+00, %366
  %377 = fadd double %376, %367
  %378 = fsub double %366, %367
  %379 = fmul double %378, %367
  %380 = fsub double %366, %367
  %381 = load double, double* %139, align 8
  %382 = load double, double* %135, align 8
  %383 = fsub double %381, %382
  %384 = fmul double %383, %382
  %385 = fsub double -0.000000e+00, %381
  %386 = fadd double %385, %382
  %387 = fsub double %381, %382
  %388 = fmul double %387, %382
  %389 = fsub double %381, %382
  %390 = fmul double %389, %382
  %391 = fsub double -0.000000e+00, %381
  %392 = fadd double %391, %382
  %393 = fsub double %381, %382
  %394 = fsub double %380, %393
  %395 = fmul double %394, %393
  %396 = fsub double %380, %393
  %397 = fmul double %396, %393
  %398 = fsub double -0.000000e+00, %380
  %399 = fadd double %398, %393
  %400 = fsub double -0.000000e+00, %380
  %401 = fadd double %400, %393
  %402 = fsub double -0.000000e+00, %380
  %403 = fadd double %402, %393
  %404 = fsub double %380, %393
  %405 = fmul double %404, %393
  %406 = fsub double %380, %393
  %407 = fmul double %406, %393
  %408 = fmul double %380, %393
  %409 = load double, double* %139, align 8
  %410 = load double, double* %136, align 8
  %411 = fsub double -0.000000e+00, %409
  %412 = fadd double %411, %410
  %413 = fsub double %409, %410
  %414 = fmul double %413, %410
  %415 = fsub double -0.000000e+00, %409
  %416 = fadd double %415, %410
  %417 = fsub double -0.000000e+00, %409
  %418 = fadd double %417, %410
  %419 = fsub double %409, %410
  %420 = fsub double -0.000000e+00, %408
  %421 = fadd double %420, %419
  %422 = fsub double -0.000000e+00, %408
  %423 = fadd double %422, %419
  %424 = fsub double -0.000000e+00, %408
  %425 = fadd double %424, %419
  %426 = fsub double %408, %419
  %427 = fmul double %426, %419
  %428 = fsub double %408, %419
  %429 = fmul double %428, %419
  %430 = fsub double %408, %419
  %431 = fmul double %430, %419
  %432 = fsub double -0.000000e+00, %408
  %433 = fadd double %432, %419
  %434 = fmul double %408, %419
  %435 = load double, double* %139, align 8
  %436 = load double, double* %137, align 8
  %437 = fsub double %435, %436
  %438 = fsub double %434, %437
  %439 = fmul double %438, %437
  %440 = fsub double %434, %437
  %441 = fmul double %440, %437
  %442 = fsub double %434, %437
  %443 = fmul double %442, %437
  %444 = fmul double %434, %437
  %445 = load double, double* %134, align 8
  %446 = load double, double* %135, align 8
  %447 = fmul double %445, %446
  %448 = load double, double* %136, align 8
  %449 = fmul double %447, %448
  %450 = load double, double* %137, align 8
  %451 = fsub double -0.000000e+00, %449
  %452 = fadd double %451, %450
  %453 = fsub double %449, %450
  %454 = fmul double %453, %450
  %455 = fsub double %449, %450
  %456 = fmul double %455, %450
  %457 = fsub double %449, %450
  %458 = fmul double %457, %450
  %459 = fsub double %449, %450
  %460 = fmul double %459, %450
  %461 = fmul double %449, %450
  %462 = load double, double* %140, align 8
  %463 = fsub double -0.000000e+00, %462
  %464 = fadd double %463, 1.000000e+02
  %465 = fsub double -0.000000e+00, %462
  %466 = fadd double %465, 1.000000e+02
  %467 = fsub double %462, 1.000000e+02
  %468 = fmul double %467, 1.000000e+02
  %469 = fsub double %462, 1.000000e+02
  %470 = fmul double %469, 1.000000e+02
  %471 = fmul double %462, 1.000000e+02
  %472 = fsub double %471, 1.800000e+02
  %473 = fmul double %472, 1.800000e+02
  %474 = fdiv double %471, 1.800000e+02
  %475 = fsub double %474, 2.000000e+00
  %476 = fmul double %475, 2.000000e+00
  %477 = fdiv double %474, 2.000000e+00
  %478 = call double @cos(double %477) #3
  %479 = fsub double -0.000000e+00, %461
  %480 = fadd double %479, %478
  %481 = fsub double %461, %478
  %482 = fmul double %481, %478
  %483 = fsub double %461, %478
  %484 = fmul double %483, %478
  %485 = fsub double %461, %478
  %486 = fmul double %485, %478
  %487 = fsub double %461, %478
  %488 = fmul double %487, %478
  %489 = fsub double -0.000000e+00, %461
  %490 = fadd double %489, %478
  %491 = fmul double %461, %478
  %492 = load double, double* %140, align 8
  %493 = fsub double %492, 1.000000e+02
  %494 = fmul double %493, 1.000000e+02
  %495 = fsub double -0.000000e+00, %492
  %496 = fadd double %495, 1.000000e+02
  %497 = fsub double %492, 1.000000e+02
  %498 = fmul double %497, 1.000000e+02
  %499 = fsub double %492, 1.000000e+02
  %500 = fmul double %499, 1.000000e+02
  %501 = fsub double %492, 1.000000e+02
  %502 = fmul double %501, 1.000000e+02
  %503 = fsub double -0.000000e+00, %492
  %504 = fadd double %503, 1.000000e+02
  %505 = fmul double %492, 1.000000e+02
  %506 = fsub double %505, 1.800000e+02
  %507 = fmul double %506, 1.800000e+02
  %508 = fdiv double %505, 1.800000e+02
  %509 = fsub double -0.000000e+00, %508
  %510 = fadd double %509, 2.000000e+00
  %511 = fsub double %508, 2.000000e+00
  %512 = fmul double %511, 2.000000e+00
  %513 = fsub double -0.000000e+00, %508
  %514 = fadd double %513, 2.000000e+00
  %515 = fsub double -0.000000e+00, %508
  %516 = fadd double %515, 2.000000e+00
  %517 = fsub double -0.000000e+00, %508
  %518 = fadd double %517, 2.000000e+00
  %519 = fsub double %508, 2.000000e+00
  %520 = fmul double %519, 2.000000e+00
  %521 = fdiv double %508, 2.000000e+00
  %522 = call double @cos(double %521) #3
  %523 = fsub double -0.000000e+00, %491
  %524 = fadd double %523, %522
  %525 = fsub double %491, %522
  %526 = fmul double %525, %522
  %527 = fsub double %491, %522
  %528 = fmul double %527, %522
  %529 = fsub double -0.000000e+00, %491
  %530 = fadd double %529, %522
  %531 = fsub double %491, %522
  %532 = fmul double %531, %522
  %533 = fsub double %491, %522
  %534 = fmul double %533, %522
  %535 = fsub double %491, %522
  %536 = fmul double %535, %522
  %537 = fsub double %491, %522
  %538 = fmul double %537, %522
  %539 = fsub double %491, %522
  %540 = fmul double %539, %522
  %541 = fmul double %491, %522
  %542 = fsub double %444, %541
  %543 = fmul double %542, %541
  %544 = fsub double %444, %541
  %545 = fmul double %544, %541
  %546 = fsub double %444, %541
  %547 = fmul double %546, %541
  %548 = fsub double %444, %541
  %549 = call double @sqrt(double %548) #3
  store double %549, double* %138, align 8
  %550 = load double, double* %141, align 8
  %551 = fcmp olt double %550, 0.000000e+00
  br label %9

; <label>:552:                                    ; preds = %123, %114
  br label %123
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
