; ModuleID = 'source-C-CXX/39/312.c'
source_filename = "source-C-CXX/39/312.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"%lf %lf %lf %lf %lf\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"Invalid input\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%.4lf\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %169

; <label>:9:                                      ; preds = %0, %169
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %18)
  %20 = load double, double* %11, align 8
  %21 = load double, double* %12, align 8
  %22 = fadd double %20, %21
  %23 = load double, double* %13, align 8
  %24 = fadd double %22, %23
  %25 = load double, double* %14, align 8
  %26 = fadd double %24, %25
  %27 = fdiv double %26, 2.000000e+00
  store double %27, double* %15, align 8
  %28 = load double, double* %18, align 8
  %29 = fdiv double %28, 7.200000e+02
  %30 = fmul double %29, 2.000000e+00
  %31 = fmul double %30, 1.000000e+02
  %32 = call double @cos(double %31) #3
  store double %32, double* %17, align 8
  %33 = load double, double* %15, align 8
  %34 = load double, double* %11, align 8
  %35 = fsub double %33, %34
  %36 = load double, double* %15, align 8
  %37 = load double, double* %12, align 8
  %38 = fsub double %36, %37
  %39 = fmul double %35, %38
  %40 = load double, double* %15, align 8
  %41 = load double, double* %13, align 8
  %42 = fsub double %40, %41
  %43 = fmul double %39, %42
  %44 = load double, double* %15, align 8
  %45 = load double, double* %14, align 8
  %46 = fsub double %44, %45
  %47 = fmul double %43, %46
  %48 = load double, double* %11, align 8
  %49 = load double, double* %12, align 8
  %50 = fmul double %48, %49
  %51 = load double, double* %13, align 8
  %52 = fmul double %50, %51
  %53 = load double, double* %14, align 8
  %54 = fmul double %52, %53
  %55 = load double, double* %17, align 8
  %56 = fmul double %54, %55
  %57 = load double, double* %17, align 8
  %58 = fmul double %56, %57
  %59 = fsub double %47, %58
  %60 = call double @sqrt(double %59) #3
  store double %60, double* %16, align 8
  %61 = load double, double* %15, align 8
  %62 = load double, double* %11, align 8
  %63 = fsub double %61, %62
  %64 = load double, double* %15, align 8
  %65 = load double, double* %12, align 8
  %66 = fsub double %64, %65
  %67 = fmul double %63, %66
  %68 = load double, double* %15, align 8
  %69 = load double, double* %13, align 8
  %70 = fsub double %68, %69
  %71 = fmul double %67, %70
  %72 = load double, double* %15, align 8
  %73 = load double, double* %14, align 8
  %74 = fsub double %72, %73
  %75 = fmul double %71, %74
  %76 = load double, double* %11, align 8
  %77 = load double, double* %12, align 8
  %78 = fmul double %76, %77
  %79 = load double, double* %13, align 8
  %80 = fmul double %78, %79
  %81 = load double, double* %14, align 8
  %82 = fmul double %80, %81
  %83 = load double, double* %17, align 8
  %84 = fmul double %82, %83
  %85 = load double, double* %17, align 8
  %86 = fmul double %84, %85
  %87 = fsub double %75, %86
  %88 = fcmp olt double %87, 0.000000e+00
  %89 = load i32, i32* @x
  %90 = load i32, i32* @y
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %97, label %169

; <label>:97:                                     ; preds = %9
  br i1 %88, label %98, label %118

; <label>:98:                                     ; preds = %97
  %99 = load i32, i32* @x
  %100 = load i32, i32* @y
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %107, label %503

; <label>:107:                                    ; preds = %98, %503
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0))
  %109 = load i32, i32* @x
  %110 = load i32, i32* @y
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %117, label %503

; <label>:117:                                    ; preds = %107
  br label %118

; <label>:118:                                    ; preds = %117, %97
  %119 = load double, double* %15, align 8
  %120 = load double, double* %11, align 8
  %121 = fsub double %119, %120
  %122 = load double, double* %15, align 8
  %123 = load double, double* %12, align 8
  %124 = fsub double %122, %123
  %125 = fmul double %121, %124
  %126 = load double, double* %15, align 8
  %127 = load double, double* %13, align 8
  %128 = fsub double %126, %127
  %129 = fmul double %125, %128
  %130 = load double, double* %15, align 8
  %131 = load double, double* %14, align 8
  %132 = fsub double %130, %131
  %133 = fmul double %129, %132
  %134 = load double, double* %11, align 8
  %135 = load double, double* %12, align 8
  %136 = fmul double %134, %135
  %137 = load double, double* %13, align 8
  %138 = fmul double %136, %137
  %139 = load double, double* %14, align 8
  %140 = fmul double %138, %139
  %141 = load double, double* %17, align 8
  %142 = fmul double %140, %141
  %143 = load double, double* %17, align 8
  %144 = fmul double %142, %143
  %145 = fsub double %133, %144
  %146 = fcmp oge double %145, 0.000000e+00
  br i1 %146, label %147, label %150

; <label>:147:                                    ; preds = %118
  %148 = load double, double* %16, align 8
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double %148)
  br label %150

; <label>:150:                                    ; preds = %147, %118
  %151 = load i32, i32* @x
  %152 = load i32, i32* @y
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %159, label %505

; <label>:159:                                    ; preds = %150, %505
  %160 = load i32, i32* @x
  %161 = load i32, i32* @y
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %168, label %505

; <label>:168:                                    ; preds = %159
  ret i32 1

; <label>:169:                                    ; preds = %9, %0
  %170 = alloca i32, align 4
  %171 = alloca double, align 8
  %172 = alloca double, align 8
  %173 = alloca double, align 8
  %174 = alloca double, align 8
  %175 = alloca double, align 8
  %176 = alloca double, align 8
  %177 = alloca double, align 8
  %178 = alloca double, align 8
  store i32 0, i32* %170, align 4
  %179 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), double* %171, double* %172, double* %173, double* %174, double* %178)
  %180 = load double, double* %171, align 8
  %181 = load double, double* %172, align 8
  %182 = fsub double %180, %181
  %183 = fmul double %182, %181
  %184 = fsub double -0.000000e+00, %180
  %185 = fadd double %184, %181
  %186 = fsub double %180, %181
  %187 = fmul double %186, %181
  %188 = fsub double %180, %181
  %189 = fmul double %188, %181
  %190 = fsub double %180, %181
  %191 = fmul double %190, %181
  %192 = fsub double -0.000000e+00, %180
  %193 = fadd double %192, %181
  %194 = fadd double %180, %181
  %195 = load double, double* %173, align 8
  %196 = fsub double %194, %195
  %197 = fmul double %196, %195
  %198 = fsub double -0.000000e+00, %194
  %199 = fadd double %198, %195
  %200 = fadd double %194, %195
  %201 = load double, double* %174, align 8
  %202 = fsub double -0.000000e+00, %200
  %203 = fadd double %202, %201
  %204 = fsub double %200, %201
  %205 = fmul double %204, %201
  %206 = fsub double -0.000000e+00, %200
  %207 = fadd double %206, %201
  %208 = fsub double %200, %201
  %209 = fmul double %208, %201
  %210 = fsub double -0.000000e+00, %200
  %211 = fadd double %210, %201
  %212 = fsub double -0.000000e+00, %200
  %213 = fadd double %212, %201
  %214 = fadd double %200, %201
  %215 = fsub double %214, 2.000000e+00
  %216 = fmul double %215, 2.000000e+00
  %217 = fsub double -0.000000e+00, %214
  %218 = fadd double %217, 2.000000e+00
  %219 = fsub double -0.000000e+00, %214
  %220 = fadd double %219, 2.000000e+00
  %221 = fsub double -0.000000e+00, %214
  %222 = fadd double %221, 2.000000e+00
  %223 = fsub double %214, 2.000000e+00
  %224 = fmul double %223, 2.000000e+00
  %225 = fdiv double %214, 2.000000e+00
  store double %225, double* %175, align 8
  %226 = load double, double* %178, align 8
  %227 = fsub double -0.000000e+00, %226
  %228 = fadd double %227, 7.200000e+02
  %229 = fsub double %226, 7.200000e+02
  %230 = fmul double %229, 7.200000e+02
  %231 = fdiv double %226, 7.200000e+02
  %232 = fsub double %231, 2.000000e+00
  %233 = fmul double %232, 2.000000e+00
  %234 = fsub double -0.000000e+00, %231
  %235 = fadd double %234, 2.000000e+00
  %236 = fsub double %231, 2.000000e+00
  %237 = fmul double %236, 2.000000e+00
  %238 = fsub double %231, 2.000000e+00
  %239 = fmul double %238, 2.000000e+00
  %240 = fsub double -0.000000e+00, %231
  %241 = fadd double %240, 2.000000e+00
  %242 = fmul double %231, 2.000000e+00
  %243 = fsub double %242, 1.000000e+02
  %244 = fmul double %243, 1.000000e+02
  %245 = fsub double %242, 1.000000e+02
  %246 = fmul double %245, 1.000000e+02
  %247 = fsub double -0.000000e+00, %242
  %248 = fadd double %247, 1.000000e+02
  %249 = fmul double %242, 1.000000e+02
  %250 = call double @cos(double %249) #3
  store double %250, double* %177, align 8
  %251 = load double, double* %175, align 8
  %252 = load double, double* %171, align 8
  %253 = fsub double -0.000000e+00, %251
  %254 = fadd double %253, %252
  %255 = fsub double %251, %252
  %256 = load double, double* %175, align 8
  %257 = load double, double* %172, align 8
  %258 = fsub double -0.000000e+00, %256
  %259 = fadd double %258, %257
  %260 = fsub double -0.000000e+00, %256
  %261 = fadd double %260, %257
  %262 = fsub double %256, %257
  %263 = fmul double %262, %257
  %264 = fsub double -0.000000e+00, %256
  %265 = fadd double %264, %257
  %266 = fsub double %256, %257
  %267 = fmul double %266, %257
  %268 = fsub double -0.000000e+00, %256
  %269 = fadd double %268, %257
  %270 = fsub double -0.000000e+00, %256
  %271 = fadd double %270, %257
  %272 = fsub double %256, %257
  %273 = fsub double -0.000000e+00, %255
  %274 = fadd double %273, %272
  %275 = fsub double %255, %272
  %276 = fmul double %275, %272
  %277 = fsub double -0.000000e+00, %255
  %278 = fadd double %277, %272
  %279 = fsub double %255, %272
  %280 = fmul double %279, %272
  %281 = fsub double %255, %272
  %282 = fmul double %281, %272
  %283 = fmul double %255, %272
  %284 = load double, double* %175, align 8
  %285 = load double, double* %173, align 8
  %286 = fsub double %284, %285
  %287 = fmul double %286, %285
  %288 = fsub double -0.000000e+00, %284
  %289 = fadd double %288, %285
  %290 = fsub double %284, %285
  %291 = fmul double %290, %285
  %292 = fsub double -0.000000e+00, %284
  %293 = fadd double %292, %285
  %294 = fsub double -0.000000e+00, %284
  %295 = fadd double %294, %285
  %296 = fsub double %284, %285
  %297 = fsub double %283, %296
  %298 = fmul double %297, %296
  %299 = fsub double %283, %296
  %300 = fmul double %299, %296
  %301 = fsub double %283, %296
  %302 = fmul double %301, %296
  %303 = fsub double %283, %296
  %304 = fmul double %303, %296
  %305 = fsub double -0.000000e+00, %283
  %306 = fadd double %305, %296
  %307 = fmul double %283, %296
  %308 = load double, double* %175, align 8
  %309 = load double, double* %174, align 8
  %310 = fsub double -0.000000e+00, %308
  %311 = fadd double %310, %309
  %312 = fsub double -0.000000e+00, %308
  %313 = fadd double %312, %309
  %314 = fsub double %308, %309
  %315 = fmul double %314, %309
  %316 = fsub double -0.000000e+00, %308
  %317 = fadd double %316, %309
  %318 = fsub double %308, %309
  %319 = fmul double %318, %309
  %320 = fsub double %308, %309
  %321 = fsub double -0.000000e+00, %307
  %322 = fadd double %321, %320
  %323 = fsub double -0.000000e+00, %307
  %324 = fadd double %323, %320
  %325 = fsub double -0.000000e+00, %307
  %326 = fadd double %325, %320
  %327 = fmul double %307, %320
  %328 = load double, double* %171, align 8
  %329 = load double, double* %172, align 8
  %330 = fsub double %328, %329
  %331 = fmul double %330, %329
  %332 = fsub double -0.000000e+00, %328
  %333 = fadd double %332, %329
  %334 = fsub double -0.000000e+00, %328
  %335 = fadd double %334, %329
  %336 = fsub double %328, %329
  %337 = fmul double %336, %329
  %338 = fsub double %328, %329
  %339 = fmul double %338, %329
  %340 = fmul double %328, %329
  %341 = load double, double* %173, align 8
  %342 = fsub double -0.000000e+00, %340
  %343 = fadd double %342, %341
  %344 = fsub double -0.000000e+00, %340
  %345 = fadd double %344, %341
  %346 = fsub double %340, %341
  %347 = fmul double %346, %341
  %348 = fsub double %340, %341
  %349 = fmul double %348, %341
  %350 = fmul double %340, %341
  %351 = load double, double* %174, align 8
  %352 = fsub double -0.000000e+00, %350
  %353 = fadd double %352, %351
  %354 = fsub double -0.000000e+00, %350
  %355 = fadd double %354, %351
  %356 = fmul double %350, %351
  %357 = load double, double* %177, align 8
  %358 = fsub double -0.000000e+00, %356
  %359 = fadd double %358, %357
  %360 = fsub double -0.000000e+00, %356
  %361 = fadd double %360, %357
  %362 = fsub double %356, %357
  %363 = fmul double %362, %357
  %364 = fsub double %356, %357
  %365 = fmul double %364, %357
  %366 = fsub double -0.000000e+00, %356
  %367 = fadd double %366, %357
  %368 = fsub double %356, %357
  %369 = fmul double %368, %357
  %370 = fsub double -0.000000e+00, %356
  %371 = fadd double %370, %357
  %372 = fmul double %356, %357
  %373 = load double, double* %177, align 8
  %374 = fsub double %372, %373
  %375 = fmul double %374, %373
  %376 = fmul double %372, %373
  %377 = fsub double %327, %376
  %378 = call double @sqrt(double %377) #3
  store double %378, double* %176, align 8
  %379 = load double, double* %175, align 8
  %380 = load double, double* %171, align 8
  %381 = fsub double %379, %380
  %382 = fmul double %381, %380
  %383 = fsub double -0.000000e+00, %379
  %384 = fadd double %383, %380
  %385 = fsub double -0.000000e+00, %379
  %386 = fadd double %385, %380
  %387 = fsub double %379, %380
  %388 = load double, double* %175, align 8
  %389 = load double, double* %172, align 8
  %390 = fsub double %388, %389
  %391 = fmul double %390, %389
  %392 = fsub double -0.000000e+00, %388
  %393 = fadd double %392, %389
  %394 = fsub double %388, %389
  %395 = fmul double %394, %389
  %396 = fsub double %388, %389
  %397 = fsub double -0.000000e+00, %387
  %398 = fadd double %397, %396
  %399 = fsub double %387, %396
  %400 = fmul double %399, %396
  %401 = fsub double %387, %396
  %402 = fmul double %401, %396
  %403 = fsub double %387, %396
  %404 = fmul double %403, %396
  %405 = fsub double %387, %396
  %406 = fmul double %405, %396
  %407 = fsub double %387, %396
  %408 = fmul double %407, %396
  %409 = fmul double %387, %396
  %410 = load double, double* %175, align 8
  %411 = load double, double* %173, align 8
  %412 = fsub double -0.000000e+00, %410
  %413 = fadd double %412, %411
  %414 = fsub double %410, %411
  %415 = fmul double %414, %411
  %416 = fsub double %410, %411
  %417 = fsub double %409, %416
  %418 = fmul double %417, %416
  %419 = fsub double %409, %416
  %420 = fmul double %419, %416
  %421 = fmul double %409, %416
  %422 = load double, double* %175, align 8
  %423 = load double, double* %174, align 8
  %424 = fsub double %422, %423
  %425 = fmul double %424, %423
  %426 = fsub double %422, %423
  %427 = fsub double -0.000000e+00, %421
  %428 = fadd double %427, %426
  %429 = fmul double %421, %426
  %430 = load double, double* %171, align 8
  %431 = load double, double* %172, align 8
  %432 = fsub double -0.000000e+00, %430
  %433 = fadd double %432, %431
  %434 = fsub double %430, %431
  %435 = fmul double %434, %431
  %436 = fsub double -0.000000e+00, %430
  %437 = fadd double %436, %431
  %438 = fsub double %430, %431
  %439 = fmul double %438, %431
  %440 = fsub double %430, %431
  %441 = fmul double %440, %431
  %442 = fmul double %430, %431
  %443 = load double, double* %173, align 8
  %444 = fsub double %442, %443
  %445 = fmul double %444, %443
  %446 = fsub double %442, %443
  %447 = fmul double %446, %443
  %448 = fsub double %442, %443
  %449 = fmul double %448, %443
  %450 = fsub double %442, %443
  %451 = fmul double %450, %443
  %452 = fmul double %442, %443
  %453 = load double, double* %174, align 8
  %454 = fsub double -0.000000e+00, %452
  %455 = fadd double %454, %453
  %456 = fsub double %452, %453
  %457 = fmul double %456, %453
  %458 = fsub double %452, %453
  %459 = fmul double %458, %453
  %460 = fsub double %452, %453
  %461 = fmul double %460, %453
  %462 = fsub double %452, %453
  %463 = fmul double %462, %453
  %464 = fmul double %452, %453
  %465 = load double, double* %177, align 8
  %466 = fsub double %464, %465
  %467 = fmul double %466, %465
  %468 = fsub double %464, %465
  %469 = fmul double %468, %465
  %470 = fsub double %464, %465
  %471 = fmul double %470, %465
  %472 = fmul double %464, %465
  %473 = load double, double* %177, align 8
  %474 = fsub double %472, %473
  %475 = fmul double %474, %473
  %476 = fsub double %472, %473
  %477 = fmul double %476, %473
  %478 = fsub double -0.000000e+00, %472
  %479 = fadd double %478, %473
  %480 = fsub double %472, %473
  %481 = fmul double %480, %473
  %482 = fsub double -0.000000e+00, %472
  %483 = fadd double %482, %473
  %484 = fsub double %472, %473
  %485 = fmul double %484, %473
  %486 = fsub double %472, %473
  %487 = fmul double %486, %473
  %488 = fsub double %472, %473
  %489 = fmul double %488, %473
  %490 = fmul double %472, %473
  %491 = fsub double %429, %490
  %492 = fmul double %491, %490
  %493 = fsub double -0.000000e+00, %429
  %494 = fadd double %493, %490
  %495 = fsub double %429, %490
  %496 = fmul double %495, %490
  %497 = fsub double -0.000000e+00, %429
  %498 = fadd double %497, %490
  %499 = fsub double -0.000000e+00, %429
  %500 = fadd double %499, %490
  %501 = fsub double %429, %490
  %502 = fcmp olt double %501, 0.000000e+00
  br label %9

; <label>:503:                                    ; preds = %107, %98
  %504 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0))
  br label %107

; <label>:505:                                    ; preds = %159, %150
  br label %159
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
