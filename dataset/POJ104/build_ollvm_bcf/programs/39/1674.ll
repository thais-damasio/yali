; ModuleID = 'source-C-CXX/39/1674.c'
source_filename = "source-C-CXX/39/1674.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%lf%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %142

; <label>:9:                                      ; preds = %0, %142
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %15)
  %19 = load double, double* %16, align 8
  %20 = load double, double* %11, align 8
  %21 = fsub double %19, %20
  %22 = load double, double* %16, align 8
  %23 = load double, double* %12, align 8
  %24 = fsub double %22, %23
  %25 = fmul double %21, %24
  %26 = load double, double* %16, align 8
  %27 = load double, double* %13, align 8
  %28 = fsub double %26, %27
  %29 = fmul double %25, %28
  %30 = load double, double* %16, align 8
  %31 = load double, double* %14, align 8
  %32 = fsub double %30, %31
  %33 = fmul double %29, %32
  %34 = load double, double* %11, align 8
  %35 = load double, double* %12, align 8
  %36 = fmul double %34, %35
  %37 = load double, double* %13, align 8
  %38 = fmul double %36, %37
  %39 = load double, double* %14, align 8
  %40 = fmul double %38, %39
  %41 = load double, double* %15, align 8
  %42 = fdiv double %41, 2.000000e+00
  %43 = fmul double %42, 1.000000e+02
  %44 = fdiv double %43, 1.800000e+02
  %45 = call double @cos(double %44) #3
  %46 = fmul double %40, %45
  %47 = load double, double* %15, align 8
  %48 = fdiv double %47, 2.000000e+00
  %49 = fmul double %48, 1.000000e+02
  %50 = fdiv double %49, 1.800000e+02
  %51 = call double @cos(double %50) #3
  %52 = fmul double %46, %51
  %53 = fsub double %33, %52
  %54 = call double @sqrt(double %53) #3
  store double %54, double* %17, align 8
  %55 = load double, double* %16, align 8
  %56 = load double, double* %11, align 8
  %57 = fsub double %55, %56
  %58 = load double, double* %16, align 8
  %59 = load double, double* %12, align 8
  %60 = fsub double %58, %59
  %61 = fmul double %57, %60
  %62 = load double, double* %16, align 8
  %63 = load double, double* %13, align 8
  %64 = fsub double %62, %63
  %65 = fmul double %61, %64
  %66 = load double, double* %16, align 8
  %67 = load double, double* %14, align 8
  %68 = fsub double %66, %67
  %69 = fmul double %65, %68
  %70 = load double, double* %11, align 8
  %71 = load double, double* %12, align 8
  %72 = fmul double %70, %71
  %73 = load double, double* %13, align 8
  %74 = fmul double %72, %73
  %75 = load double, double* %14, align 8
  %76 = fmul double %74, %75
  %77 = load double, double* %15, align 8
  %78 = fdiv double %77, 2.000000e+00
  %79 = fmul double %78, 1.000000e+02
  %80 = fdiv double %79, 1.800000e+02
  %81 = call double @cos(double %80) #3
  %82 = fmul double %76, %81
  %83 = load double, double* %15, align 8
  %84 = fdiv double %83, 2.000000e+00
  %85 = fmul double %84, 1.000000e+02
  %86 = fdiv double %85, 1.800000e+02
  %87 = call double @cos(double %86) #3
  %88 = fmul double %82, %87
  %89 = fsub double %69, %88
  %90 = fcmp olt double %89, 0.000000e+00
  %91 = load i32, i32* @x
  %92 = load i32, i32* @y
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %99, label %142

; <label>:99:                                     ; preds = %9
  br i1 %90, label %100, label %120

; <label>:100:                                    ; preds = %99
  %101 = load i32, i32* @x
  %102 = load i32, i32* @y
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %109, label %468

; <label>:109:                                    ; preds = %100, %468
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %111 = load i32, i32* @x
  %112 = load i32, i32* @y
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %119, label %468

; <label>:119:                                    ; preds = %109
  br label %123

; <label>:120:                                    ; preds = %99
  %121 = load double, double* %17, align 8
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %121)
  br label %123

; <label>:123:                                    ; preds = %120, %119
  %124 = load i32, i32* @x
  %125 = load i32, i32* @y
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %132, label %470

; <label>:132:                                    ; preds = %123, %470
  %133 = load i32, i32* @x
  %134 = load i32, i32* @y
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %141, label %470

; <label>:141:                                    ; preds = %132
  ret i32 0

; <label>:142:                                    ; preds = %9, %0
  %143 = alloca i32, align 4
  %144 = alloca double, align 8
  %145 = alloca double, align 8
  %146 = alloca double, align 8
  %147 = alloca double, align 8
  %148 = alloca double, align 8
  %149 = alloca double, align 8
  %150 = alloca double, align 8
  store i32 0, i32* %143, align 4
  %151 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %144, double* %145, double* %146, double* %147, double* %148)
  %152 = load double, double* %149, align 8
  %153 = load double, double* %144, align 8
  %154 = fsub double -0.000000e+00, %152
  %155 = fadd double %154, %153
  %156 = fsub double %152, %153
  %157 = load double, double* %149, align 8
  %158 = load double, double* %145, align 8
  %159 = fsub double %157, %158
  %160 = fmul double %159, %158
  %161 = fsub double -0.000000e+00, %157
  %162 = fadd double %161, %158
  %163 = fsub double -0.000000e+00, %157
  %164 = fadd double %163, %158
  %165 = fsub double %157, %158
  %166 = fsub double -0.000000e+00, %156
  %167 = fadd double %166, %165
  %168 = fmul double %156, %165
  %169 = load double, double* %149, align 8
  %170 = load double, double* %146, align 8
  %171 = fsub double -0.000000e+00, %169
  %172 = fadd double %171, %170
  %173 = fsub double %169, %170
  %174 = fsub double %168, %173
  %175 = fmul double %174, %173
  %176 = fsub double %168, %173
  %177 = fmul double %176, %173
  %178 = fmul double %168, %173
  %179 = load double, double* %149, align 8
  %180 = load double, double* %147, align 8
  %181 = fsub double %179, %180
  %182 = fmul double %181, %180
  %183 = fsub double %179, %180
  %184 = fmul double %183, %180
  %185 = fsub double %179, %180
  %186 = fmul double %185, %180
  %187 = fsub double -0.000000e+00, %179
  %188 = fadd double %187, %180
  %189 = fsub double -0.000000e+00, %179
  %190 = fadd double %189, %180
  %191 = fsub double %179, %180
  %192 = fsub double %178, %191
  %193 = fmul double %192, %191
  %194 = fsub double -0.000000e+00, %178
  %195 = fadd double %194, %191
  %196 = fsub double -0.000000e+00, %178
  %197 = fadd double %196, %191
  %198 = fsub double %178, %191
  %199 = fmul double %198, %191
  %200 = fsub double -0.000000e+00, %178
  %201 = fadd double %200, %191
  %202 = fsub double -0.000000e+00, %178
  %203 = fadd double %202, %191
  %204 = fsub double -0.000000e+00, %178
  %205 = fadd double %204, %191
  %206 = fsub double %178, %191
  %207 = fmul double %206, %191
  %208 = fmul double %178, %191
  %209 = load double, double* %144, align 8
  %210 = load double, double* %145, align 8
  %211 = fsub double %209, %210
  %212 = fmul double %211, %210
  %213 = fmul double %209, %210
  %214 = load double, double* %146, align 8
  %215 = fsub double -0.000000e+00, %213
  %216 = fadd double %215, %214
  %217 = fsub double %213, %214
  %218 = fmul double %217, %214
  %219 = fmul double %213, %214
  %220 = load double, double* %147, align 8
  %221 = fsub double %219, %220
  %222 = fmul double %221, %220
  %223 = fsub double -0.000000e+00, %219
  %224 = fadd double %223, %220
  %225 = fsub double -0.000000e+00, %219
  %226 = fadd double %225, %220
  %227 = fmul double %219, %220
  %228 = load double, double* %148, align 8
  %229 = fsub double -0.000000e+00, %228
  %230 = fadd double %229, 2.000000e+00
  %231 = fsub double -0.000000e+00, %228
  %232 = fadd double %231, 2.000000e+00
  %233 = fdiv double %228, 2.000000e+00
  %234 = fsub double -0.000000e+00, %233
  %235 = fadd double %234, 1.000000e+02
  %236 = fsub double %233, 1.000000e+02
  %237 = fmul double %236, 1.000000e+02
  %238 = fsub double %233, 1.000000e+02
  %239 = fmul double %238, 1.000000e+02
  %240 = fsub double %233, 1.000000e+02
  %241 = fmul double %240, 1.000000e+02
  %242 = fsub double -0.000000e+00, %233
  %243 = fadd double %242, 1.000000e+02
  %244 = fmul double %233, 1.000000e+02
  %245 = fsub double %244, 1.800000e+02
  %246 = fmul double %245, 1.800000e+02
  %247 = fsub double %244, 1.800000e+02
  %248 = fmul double %247, 1.800000e+02
  %249 = fsub double %244, 1.800000e+02
  %250 = fmul double %249, 1.800000e+02
  %251 = fsub double %244, 1.800000e+02
  %252 = fmul double %251, 1.800000e+02
  %253 = fsub double %244, 1.800000e+02
  %254 = fmul double %253, 1.800000e+02
  %255 = fdiv double %244, 1.800000e+02
  %256 = call double @cos(double %255) #3
  %257 = fsub double -0.000000e+00, %227
  %258 = fadd double %257, %256
  %259 = fmul double %227, %256
  %260 = load double, double* %148, align 8
  %261 = fsub double -0.000000e+00, %260
  %262 = fadd double %261, 2.000000e+00
  %263 = fdiv double %260, 2.000000e+00
  %264 = fsub double -0.000000e+00, %263
  %265 = fadd double %264, 1.000000e+02
  %266 = fsub double %263, 1.000000e+02
  %267 = fmul double %266, 1.000000e+02
  %268 = fsub double %263, 1.000000e+02
  %269 = fmul double %268, 1.000000e+02
  %270 = fsub double -0.000000e+00, %263
  %271 = fadd double %270, 1.000000e+02
  %272 = fsub double -0.000000e+00, %263
  %273 = fadd double %272, 1.000000e+02
  %274 = fsub double -0.000000e+00, %263
  %275 = fadd double %274, 1.000000e+02
  %276 = fsub double %263, 1.000000e+02
  %277 = fmul double %276, 1.000000e+02
  %278 = fsub double %263, 1.000000e+02
  %279 = fmul double %278, 1.000000e+02
  %280 = fsub double %263, 1.000000e+02
  %281 = fmul double %280, 1.000000e+02
  %282 = fmul double %263, 1.000000e+02
  %283 = fsub double %282, 1.800000e+02
  %284 = fmul double %283, 1.800000e+02
  %285 = fsub double -0.000000e+00, %282
  %286 = fadd double %285, 1.800000e+02
  %287 = fsub double -0.000000e+00, %282
  %288 = fadd double %287, 1.800000e+02
  %289 = fdiv double %282, 1.800000e+02
  %290 = call double @cos(double %289) #3
  %291 = fsub double %259, %290
  %292 = fmul double %291, %290
  %293 = fsub double -0.000000e+00, %259
  %294 = fadd double %293, %290
  %295 = fmul double %259, %290
  %296 = fsub double %208, %295
  %297 = fmul double %296, %295
  %298 = fsub double %208, %295
  %299 = fmul double %298, %295
  %300 = fsub double %208, %295
  %301 = fmul double %300, %295
  %302 = fsub double %208, %295
  %303 = fmul double %302, %295
  %304 = fsub double -0.000000e+00, %208
  %305 = fadd double %304, %295
  %306 = fsub double %208, %295
  %307 = call double @sqrt(double %306) #3
  store double %307, double* %150, align 8
  %308 = load double, double* %149, align 8
  %309 = load double, double* %144, align 8
  %310 = fsub double %308, %309
  %311 = fmul double %310, %309
  %312 = fsub double %308, %309
  %313 = load double, double* %149, align 8
  %314 = load double, double* %145, align 8
  %315 = fsub double -0.000000e+00, %313
  %316 = fadd double %315, %314
  %317 = fsub double %313, %314
  %318 = fmul double %317, %314
  %319 = fsub double -0.000000e+00, %313
  %320 = fadd double %319, %314
  %321 = fsub double -0.000000e+00, %313
  %322 = fadd double %321, %314
  %323 = fsub double %313, %314
  %324 = fmul double %323, %314
  %325 = fsub double %313, %314
  %326 = fsub double -0.000000e+00, %312
  %327 = fadd double %326, %325
  %328 = fsub double -0.000000e+00, %312
  %329 = fadd double %328, %325
  %330 = fsub double -0.000000e+00, %312
  %331 = fadd double %330, %325
  %332 = fsub double -0.000000e+00, %312
  %333 = fadd double %332, %325
  %334 = fsub double -0.000000e+00, %312
  %335 = fadd double %334, %325
  %336 = fsub double %312, %325
  %337 = fmul double %336, %325
  %338 = fmul double %312, %325
  %339 = load double, double* %149, align 8
  %340 = load double, double* %146, align 8
  %341 = fsub double %339, %340
  %342 = fmul double %341, %340
  %343 = fsub double -0.000000e+00, %339
  %344 = fadd double %343, %340
  %345 = fsub double -0.000000e+00, %339
  %346 = fadd double %345, %340
  %347 = fsub double %339, %340
  %348 = fsub double -0.000000e+00, %338
  %349 = fadd double %348, %347
  %350 = fmul double %338, %347
  %351 = load double, double* %149, align 8
  %352 = load double, double* %147, align 8
  %353 = fsub double %351, %352
  %354 = fmul double %353, %352
  %355 = fsub double %351, %352
  %356 = fmul double %355, %352
  %357 = fsub double -0.000000e+00, %351
  %358 = fadd double %357, %352
  %359 = fsub double %351, %352
  %360 = fmul double %359, %352
  %361 = fsub double %351, %352
  %362 = fmul double %350, %361
  %363 = load double, double* %144, align 8
  %364 = load double, double* %145, align 8
  %365 = fsub double %363, %364
  %366 = fmul double %365, %364
  %367 = fmul double %363, %364
  %368 = load double, double* %146, align 8
  %369 = fmul double %367, %368
  %370 = load double, double* %147, align 8
  %371 = fmul double %369, %370
  %372 = load double, double* %148, align 8
  %373 = fsub double %372, 2.000000e+00
  %374 = fmul double %373, 2.000000e+00
  %375 = fsub double %372, 2.000000e+00
  %376 = fmul double %375, 2.000000e+00
  %377 = fsub double %372, 2.000000e+00
  %378 = fmul double %377, 2.000000e+00
  %379 = fsub double -0.000000e+00, %372
  %380 = fadd double %379, 2.000000e+00
  %381 = fdiv double %372, 2.000000e+00
  %382 = fsub double -0.000000e+00, %381
  %383 = fadd double %382, 1.000000e+02
  %384 = fsub double %381, 1.000000e+02
  %385 = fmul double %384, 1.000000e+02
  %386 = fsub double -0.000000e+00, %381
  %387 = fadd double %386, 1.000000e+02
  %388 = fmul double %381, 1.000000e+02
  %389 = fsub double %388, 1.800000e+02
  %390 = fmul double %389, 1.800000e+02
  %391 = fsub double %388, 1.800000e+02
  %392 = fmul double %391, 1.800000e+02
  %393 = fsub double -0.000000e+00, %388
  %394 = fadd double %393, 1.800000e+02
  %395 = fdiv double %388, 1.800000e+02
  %396 = call double @cos(double %395) #3
  %397 = fsub double %371, %396
  %398 = fmul double %397, %396
  %399 = fsub double -0.000000e+00, %371
  %400 = fadd double %399, %396
  %401 = fsub double %371, %396
  %402 = fmul double %401, %396
  %403 = fsub double -0.000000e+00, %371
  %404 = fadd double %403, %396
  %405 = fsub double %371, %396
  %406 = fmul double %405, %396
  %407 = fsub double %371, %396
  %408 = fmul double %407, %396
  %409 = fmul double %371, %396
  %410 = load double, double* %148, align 8
  %411 = fsub double %410, 2.000000e+00
  %412 = fmul double %411, 2.000000e+00
  %413 = fsub double -0.000000e+00, %410
  %414 = fadd double %413, 2.000000e+00
  %415 = fsub double -0.000000e+00, %410
  %416 = fadd double %415, 2.000000e+00
  %417 = fdiv double %410, 2.000000e+00
  %418 = fsub double %417, 1.000000e+02
  %419 = fmul double %418, 1.000000e+02
  %420 = fsub double -0.000000e+00, %417
  %421 = fadd double %420, 1.000000e+02
  %422 = fsub double -0.000000e+00, %417
  %423 = fadd double %422, 1.000000e+02
  %424 = fsub double %417, 1.000000e+02
  %425 = fmul double %424, 1.000000e+02
  %426 = fsub double %417, 1.000000e+02
  %427 = fmul double %426, 1.000000e+02
  %428 = fmul double %417, 1.000000e+02
  %429 = fsub double %428, 1.800000e+02
  %430 = fmul double %429, 1.800000e+02
  %431 = fsub double %428, 1.800000e+02
  %432 = fmul double %431, 1.800000e+02
  %433 = fsub double -0.000000e+00, %428
  %434 = fadd double %433, 1.800000e+02
  %435 = fsub double %428, 1.800000e+02
  %436 = fmul double %435, 1.800000e+02
  %437 = fsub double -0.000000e+00, %428
  %438 = fadd double %437, 1.800000e+02
  %439 = fdiv double %428, 1.800000e+02
  %440 = call double @cos(double %439) #3
  %441 = fsub double %409, %440
  %442 = fmul double %441, %440
  %443 = fsub double -0.000000e+00, %409
  %444 = fadd double %443, %440
  %445 = fsub double -0.000000e+00, %409
  %446 = fadd double %445, %440
  %447 = fsub double %409, %440
  %448 = fmul double %447, %440
  %449 = fsub double %409, %440
  %450 = fmul double %449, %440
  %451 = fsub double -0.000000e+00, %409
  %452 = fadd double %451, %440
  %453 = fsub double -0.000000e+00, %409
  %454 = fadd double %453, %440
  %455 = fsub double -0.000000e+00, %409
  %456 = fadd double %455, %440
  %457 = fmul double %409, %440
  %458 = fsub double -0.000000e+00, %362
  %459 = fadd double %458, %457
  %460 = fsub double -0.000000e+00, %362
  %461 = fadd double %460, %457
  %462 = fsub double %362, %457
  %463 = fmul double %462, %457
  %464 = fsub double %362, %457
  %465 = fmul double %464, %457
  %466 = fsub double %362, %457
  %467 = fcmp olt double %466, 0.000000e+00
  br label %9

; <label>:468:                                    ; preds = %109, %100
  %469 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %109

; <label>:470:                                    ; preds = %132, %123
  br label %132
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
