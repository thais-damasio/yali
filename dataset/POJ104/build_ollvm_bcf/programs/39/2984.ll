; ModuleID = 'source-C-CXX/39/2984.c'
source_filename = "source-C-CXX/39/2984.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%.4f\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %166

; <label>:9:                                      ; preds = %0, %166
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %12)
  %20 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %13)
  %21 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %14)
  %22 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %15)
  %23 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %16)
  %24 = load float, float* %12, align 4
  %25 = load float, float* %13, align 4
  %26 = fadd float %24, %25
  %27 = load float, float* %14, align 4
  %28 = fadd float %26, %27
  %29 = load float, float* %15, align 4
  %30 = fadd float %28, %29
  %31 = fdiv float %30, 2.000000e+00
  store float %31, float* %11, align 4
  %32 = load float, float* %16, align 4
  %33 = fdiv float %32, 1.800000e+02
  %34 = fmul float %33, 1.000000e+02
  store float %34, float* %17, align 4
  %35 = load float, float* %11, align 4
  %36 = load float, float* %12, align 4
  %37 = fsub float %35, %36
  %38 = load float, float* %11, align 4
  %39 = load float, float* %13, align 4
  %40 = fsub float %38, %39
  %41 = fmul float %37, %40
  %42 = load float, float* %11, align 4
  %43 = load float, float* %14, align 4
  %44 = fsub float %42, %43
  %45 = fmul float %41, %44
  %46 = load float, float* %11, align 4
  %47 = load float, float* %15, align 4
  %48 = fsub float %46, %47
  %49 = fmul float %45, %48
  %50 = fpext float %49 to double
  %51 = load float, float* %12, align 4
  %52 = load float, float* %13, align 4
  %53 = fmul float %51, %52
  %54 = load float, float* %14, align 4
  %55 = fmul float %53, %54
  %56 = load float, float* %15, align 4
  %57 = fmul float %55, %56
  %58 = fpext float %57 to double
  %59 = load float, float* %17, align 4
  %60 = fdiv float %59, 2.000000e+00
  %61 = fpext float %60 to double
  %62 = call double @cos(double %61) #3
  %63 = fmul double %58, %62
  %64 = load float, float* %17, align 4
  %65 = fdiv float %64, 2.000000e+00
  %66 = fpext float %65 to double
  %67 = call double @cos(double %66) #3
  %68 = fmul double %63, %67
  %69 = fsub double %50, %68
  %70 = fptrunc double %69 to float
  store float %70, float* %18, align 4
  %71 = load float, float* %18, align 4
  %72 = fcmp olt float %71, 0.000000e+00
  %73 = load i32, i32* @x
  %74 = load i32, i32* @y
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %81, label %166

; <label>:81:                                     ; preds = %9
  br i1 %72, label %82, label %84

; <label>:82:                                     ; preds = %81
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %143

; <label>:84:                                     ; preds = %81
  %85 = load i32, i32* @x
  %86 = load i32, i32* @y
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %93, label %388

; <label>:93:                                     ; preds = %84, %388
  %94 = load float, float* %11, align 4
  %95 = load float, float* %12, align 4
  %96 = fsub float %94, %95
  %97 = load float, float* %11, align 4
  %98 = load float, float* %13, align 4
  %99 = fsub float %97, %98
  %100 = fmul float %96, %99
  %101 = load float, float* %11, align 4
  %102 = load float, float* %14, align 4
  %103 = fsub float %101, %102
  %104 = fmul float %100, %103
  %105 = load float, float* %11, align 4
  %106 = load float, float* %15, align 4
  %107 = fsub float %105, %106
  %108 = fmul float %104, %107
  %109 = fpext float %108 to double
  %110 = load float, float* %12, align 4
  %111 = load float, float* %13, align 4
  %112 = fmul float %110, %111
  %113 = load float, float* %14, align 4
  %114 = fmul float %112, %113
  %115 = load float, float* %15, align 4
  %116 = fmul float %114, %115
  %117 = fpext float %116 to double
  %118 = load float, float* %17, align 4
  %119 = fdiv float %118, 2.000000e+00
  %120 = fpext float %119 to double
  %121 = call double @cos(double %120) #3
  %122 = fmul double %117, %121
  %123 = load float, float* %17, align 4
  %124 = fdiv float %123, 2.000000e+00
  %125 = fpext float %124 to double
  %126 = call double @cos(double %125) #3
  %127 = fmul double %122, %126
  %128 = fsub double %109, %127
  %129 = call double @sqrt(double %128) #3
  %130 = fptrunc double %129 to float
  store float %130, float* %11, align 4
  %131 = load float, float* %11, align 4
  %132 = fpext float %131 to double
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), double %132)
  %134 = load i32, i32* @x
  %135 = load i32, i32* @y
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %142, label %388

; <label>:142:                                    ; preds = %93
  br label %143

; <label>:143:                                    ; preds = %142, %82
  %144 = load i32, i32* @x
  %145 = load i32, i32* @y
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %152, label %539

; <label>:152:                                    ; preds = %143, %539
  %153 = call i32 @getchar()
  %154 = call i32 @getchar()
  %155 = call i32 @getchar()
  %156 = load i32, i32* %10, align 4
  %157 = load i32, i32* @x
  %158 = load i32, i32* @y
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %165, label %539

; <label>:165:                                    ; preds = %152
  ret i32 %156

; <label>:166:                                    ; preds = %9, %0
  %167 = alloca i32, align 4
  %168 = alloca float, align 4
  %169 = alloca float, align 4
  %170 = alloca float, align 4
  %171 = alloca float, align 4
  %172 = alloca float, align 4
  %173 = alloca float, align 4
  %174 = alloca float, align 4
  %175 = alloca float, align 4
  store i32 0, i32* %167, align 4
  %176 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %169)
  %177 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %170)
  %178 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %171)
  %179 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %172)
  %180 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), float* %173)
  %181 = load float, float* %169, align 4
  %182 = load float, float* %170, align 4
  %183 = fsub float %181, %182
  %184 = fmul float %183, %182
  %185 = fadd float %181, %182
  %186 = load float, float* %171, align 4
  %187 = fsub float -0.000000e+00, %185
  %188 = fadd float %187, %186
  %189 = fsub float %185, %186
  %190 = fmul float %189, %186
  %191 = fadd float %185, %186
  %192 = load float, float* %172, align 4
  %193 = fsub float %191, %192
  %194 = fmul float %193, %192
  %195 = fsub float -0.000000e+00, %191
  %196 = fadd float %195, %192
  %197 = fsub float -0.000000e+00, %191
  %198 = fadd float %197, %192
  %199 = fadd float %191, %192
  %200 = fsub float -0.000000e+00, %199
  %201 = fadd float %200, 2.000000e+00
  %202 = fdiv float %199, 2.000000e+00
  store float %202, float* %168, align 4
  %203 = load float, float* %173, align 4
  %204 = fsub float %203, 1.800000e+02
  %205 = fmul float %204, 1.800000e+02
  %206 = fsub float -0.000000e+00, %203
  %207 = fadd float %206, 1.800000e+02
  %208 = fsub float -0.000000e+00, %203
  %209 = fadd float %208, 1.800000e+02
  %210 = fsub float %203, 1.800000e+02
  %211 = fmul float %210, 1.800000e+02
  %212 = fsub float -0.000000e+00, %203
  %213 = fadd float %212, 1.800000e+02
  %214 = fsub float %203, 1.800000e+02
  %215 = fmul float %214, 1.800000e+02
  %216 = fdiv float %203, 1.800000e+02
  %217 = fsub float -0.000000e+00, %216
  %218 = fadd float %217, 1.000000e+02
  %219 = fsub float %216, 1.000000e+02
  %220 = fmul float %219, 1.000000e+02
  %221 = fsub float %216, 1.000000e+02
  %222 = fmul float %221, 1.000000e+02
  %223 = fsub float %216, 1.000000e+02
  %224 = fmul float %223, 1.000000e+02
  %225 = fsub float -0.000000e+00, %216
  %226 = fadd float %225, 1.000000e+02
  %227 = fmul float %216, 1.000000e+02
  store float %227, float* %174, align 4
  %228 = load float, float* %168, align 4
  %229 = load float, float* %169, align 4
  %230 = fsub float -0.000000e+00, %228
  %231 = fadd float %230, %229
  %232 = fsub float -0.000000e+00, %228
  %233 = fadd float %232, %229
  %234 = fsub float -0.000000e+00, %228
  %235 = fadd float %234, %229
  %236 = fsub float %228, %229
  %237 = load float, float* %168, align 4
  %238 = load float, float* %170, align 4
  %239 = fsub float -0.000000e+00, %237
  %240 = fadd float %239, %238
  %241 = fsub float %237, %238
  %242 = fmul float %241, %238
  %243 = fsub float -0.000000e+00, %237
  %244 = fadd float %243, %238
  %245 = fsub float -0.000000e+00, %237
  %246 = fadd float %245, %238
  %247 = fsub float %237, %238
  %248 = fsub float -0.000000e+00, %236
  %249 = fadd float %248, %247
  %250 = fsub float -0.000000e+00, %236
  %251 = fadd float %250, %247
  %252 = fsub float %236, %247
  %253 = fmul float %252, %247
  %254 = fsub float %236, %247
  %255 = fmul float %254, %247
  %256 = fsub float -0.000000e+00, %236
  %257 = fadd float %256, %247
  %258 = fsub float -0.000000e+00, %236
  %259 = fadd float %258, %247
  %260 = fsub float %236, %247
  %261 = fmul float %260, %247
  %262 = fmul float %236, %247
  %263 = load float, float* %168, align 4
  %264 = load float, float* %171, align 4
  %265 = fsub float -0.000000e+00, %263
  %266 = fadd float %265, %264
  %267 = fsub float -0.000000e+00, %263
  %268 = fadd float %267, %264
  %269 = fsub float %263, %264
  %270 = fmul float %269, %264
  %271 = fsub float %263, %264
  %272 = fmul float %271, %264
  %273 = fsub float %263, %264
  %274 = fmul float %273, %264
  %275 = fsub float %263, %264
  %276 = fsub float -0.000000e+00, %262
  %277 = fadd float %276, %275
  %278 = fsub float %262, %275
  %279 = fmul float %278, %275
  %280 = fmul float %262, %275
  %281 = load float, float* %168, align 4
  %282 = load float, float* %172, align 4
  %283 = fsub float %281, %282
  %284 = fmul float %283, %282
  %285 = fsub float %281, %282
  %286 = fmul float %285, %282
  %287 = fsub float %281, %282
  %288 = fmul float %287, %282
  %289 = fsub float %281, %282
  %290 = fmul float %289, %282
  %291 = fsub float -0.000000e+00, %281
  %292 = fadd float %291, %282
  %293 = fsub float %281, %282
  %294 = fmul float %293, %282
  %295 = fsub float %281, %282
  %296 = fsub float %280, %295
  %297 = fmul float %296, %295
  %298 = fsub float -0.000000e+00, %280
  %299 = fadd float %298, %295
  %300 = fmul float %280, %295
  %301 = fpext float %300 to double
  %302 = load float, float* %169, align 4
  %303 = load float, float* %170, align 4
  %304 = fsub float %302, %303
  %305 = fmul float %304, %303
  %306 = fsub float -0.000000e+00, %302
  %307 = fadd float %306, %303
  %308 = fsub float -0.000000e+00, %302
  %309 = fadd float %308, %303
  %310 = fsub float -0.000000e+00, %302
  %311 = fadd float %310, %303
  %312 = fsub float -0.000000e+00, %302
  %313 = fadd float %312, %303
  %314 = fsub float %302, %303
  %315 = fmul float %314, %303
  %316 = fmul float %302, %303
  %317 = load float, float* %171, align 4
  %318 = fsub float %316, %317
  %319 = fmul float %318, %317
  %320 = fsub float -0.000000e+00, %316
  %321 = fadd float %320, %317
  %322 = fsub float %316, %317
  %323 = fmul float %322, %317
  %324 = fmul float %316, %317
  %325 = load float, float* %172, align 4
  %326 = fsub float %324, %325
  %327 = fmul float %326, %325
  %328 = fsub float -0.000000e+00, %324
  %329 = fadd float %328, %325
  %330 = fsub float -0.000000e+00, %324
  %331 = fadd float %330, %325
  %332 = fsub float %324, %325
  %333 = fmul float %332, %325
  %334 = fsub float -0.000000e+00, %324
  %335 = fadd float %334, %325
  %336 = fsub float %324, %325
  %337 = fmul float %336, %325
  %338 = fsub float %324, %325
  %339 = fmul float %338, %325
  %340 = fmul float %324, %325
  %341 = fpext float %340 to double
  %342 = load float, float* %174, align 4
  %343 = fsub float -0.000000e+00, %342
  %344 = fadd float %343, 2.000000e+00
  %345 = fsub float -0.000000e+00, %342
  %346 = fadd float %345, 2.000000e+00
  %347 = fsub float -0.000000e+00, %342
  %348 = fadd float %347, 2.000000e+00
  %349 = fsub float %342, 2.000000e+00
  %350 = fmul float %349, 2.000000e+00
  %351 = fsub float -0.000000e+00, %342
  %352 = fadd float %351, 2.000000e+00
  %353 = fdiv float %342, 2.000000e+00
  %354 = fpext float %353 to double
  %355 = call double @cos(double %354) #3
  %356 = fsub double -0.000000e+00, %341
  %357 = fadd double %356, %355
  %358 = fsub double -0.000000e+00, %341
  %359 = fadd double %358, %355
  %360 = fsub double -0.000000e+00, %341
  %361 = fadd double %360, %355
  %362 = fsub double %341, %355
  %363 = fmul double %362, %355
  %364 = fmul double %341, %355
  %365 = load float, float* %174, align 4
  %366 = fsub float %365, 2.000000e+00
  %367 = fmul float %366, 2.000000e+00
  %368 = fdiv float %365, 2.000000e+00
  %369 = fpext float %368 to double
  %370 = call double @cos(double %369) #3
  %371 = fsub double -0.000000e+00, %364
  %372 = fadd double %371, %370
  %373 = fsub double %364, %370
  %374 = fmul double %373, %370
  %375 = fsub double %364, %370
  %376 = fmul double %375, %370
  %377 = fsub double -0.000000e+00, %364
  %378 = fadd double %377, %370
  %379 = fsub double %364, %370
  %380 = fmul double %379, %370
  %381 = fmul double %364, %370
  %382 = fsub double -0.000000e+00, %301
  %383 = fadd double %382, %381
  %384 = fsub double %301, %381
  %385 = fptrunc double %384 to float
  store float %385, float* %175, align 4
  %386 = load float, float* %175, align 4
  %387 = fcmp olt float %386, 0.000000e+00
  br label %9

; <label>:388:                                    ; preds = %93, %84
  %389 = load float, float* %11, align 4
  %390 = load float, float* %12, align 4
  %391 = fsub float -0.000000e+00, %389
  %392 = fadd float %391, %390
  %393 = fsub float %389, %390
  %394 = load float, float* %11, align 4
  %395 = load float, float* %13, align 4
  %396 = fsub float -0.000000e+00, %394
  %397 = fadd float %396, %395
  %398 = fsub float -0.000000e+00, %394
  %399 = fadd float %398, %395
  %400 = fsub float %394, %395
  %401 = fsub float -0.000000e+00, %393
  %402 = fadd float %401, %400
  %403 = fsub float -0.000000e+00, %393
  %404 = fadd float %403, %400
  %405 = fsub float -0.000000e+00, %393
  %406 = fadd float %405, %400
  %407 = fmul float %393, %400
  %408 = load float, float* %11, align 4
  %409 = load float, float* %14, align 4
  %410 = fsub float %408, %409
  %411 = fmul float %410, %409
  %412 = fsub float -0.000000e+00, %408
  %413 = fadd float %412, %409
  %414 = fsub float %408, %409
  %415 = fmul float %414, %409
  %416 = fsub float -0.000000e+00, %408
  %417 = fadd float %416, %409
  %418 = fsub float %408, %409
  %419 = fmul float %418, %409
  %420 = fsub float %408, %409
  %421 = fmul float %420, %409
  %422 = fsub float -0.000000e+00, %408
  %423 = fadd float %422, %409
  %424 = fsub float %408, %409
  %425 = fsub float -0.000000e+00, %407
  %426 = fadd float %425, %424
  %427 = fsub float %407, %424
  %428 = fmul float %427, %424
  %429 = fsub float -0.000000e+00, %407
  %430 = fadd float %429, %424
  %431 = fsub float -0.000000e+00, %407
  %432 = fadd float %431, %424
  %433 = fmul float %407, %424
  %434 = load float, float* %11, align 4
  %435 = load float, float* %15, align 4
  %436 = fsub float -0.000000e+00, %434
  %437 = fadd float %436, %435
  %438 = fsub float -0.000000e+00, %434
  %439 = fadd float %438, %435
  %440 = fsub float %434, %435
  %441 = fmul float %440, %435
  %442 = fsub float %434, %435
  %443 = fsub float -0.000000e+00, %433
  %444 = fadd float %443, %442
  %445 = fsub float %433, %442
  %446 = fmul float %445, %442
  %447 = fsub float -0.000000e+00, %433
  %448 = fadd float %447, %442
  %449 = fsub float -0.000000e+00, %433
  %450 = fadd float %449, %442
  %451 = fsub float %433, %442
  %452 = fmul float %451, %442
  %453 = fmul float %433, %442
  %454 = fpext float %453 to double
  %455 = load float, float* %12, align 4
  %456 = load float, float* %13, align 4
  %457 = fsub float %455, %456
  %458 = fmul float %457, %456
  %459 = fsub float -0.000000e+00, %455
  %460 = fadd float %459, %456
  %461 = fmul float %455, %456
  %462 = load float, float* %14, align 4
  %463 = fsub float -0.000000e+00, %461
  %464 = fadd float %463, %462
  %465 = fsub float %461, %462
  %466 = fmul float %465, %462
  %467 = fsub float %461, %462
  %468 = fmul float %467, %462
  %469 = fsub float -0.000000e+00, %461
  %470 = fadd float %469, %462
  %471 = fsub float %461, %462
  %472 = fmul float %471, %462
  %473 = fsub float %461, %462
  %474 = fmul float %473, %462
  %475 = fmul float %461, %462
  %476 = load float, float* %15, align 4
  %477 = fsub float %475, %476
  %478 = fmul float %477, %476
  %479 = fmul float %475, %476
  %480 = fpext float %479 to double
  %481 = load float, float* %17, align 4
  %482 = fsub float -0.000000e+00, %481
  %483 = fadd float %482, 2.000000e+00
  %484 = fsub float -0.000000e+00, %481
  %485 = fadd float %484, 2.000000e+00
  %486 = fsub float %481, 2.000000e+00
  %487 = fmul float %486, 2.000000e+00
  %488 = fsub float %481, 2.000000e+00
  %489 = fmul float %488, 2.000000e+00
  %490 = fdiv float %481, 2.000000e+00
  %491 = fpext float %490 to double
  %492 = call double @cos(double %491) #3
  %493 = fsub double %480, %492
  %494 = fmul double %493, %492
  %495 = fsub double %480, %492
  %496 = fmul double %495, %492
  %497 = fsub double %480, %492
  %498 = fmul double %497, %492
  %499 = fsub double -0.000000e+00, %480
  %500 = fadd double %499, %492
  %501 = fsub double %480, %492
  %502 = fmul double %501, %492
  %503 = fsub double -0.000000e+00, %480
  %504 = fadd double %503, %492
  %505 = fsub double -0.000000e+00, %480
  %506 = fadd double %505, %492
  %507 = fsub double %480, %492
  %508 = fmul double %507, %492
  %509 = fsub double -0.000000e+00, %480
  %510 = fadd double %509, %492
  %511 = fmul double %480, %492
  %512 = load float, float* %17, align 4
  %513 = fsub float %512, 2.000000e+00
  %514 = fmul float %513, 2.000000e+00
  %515 = fdiv float %512, 2.000000e+00
  %516 = fpext float %515 to double
  %517 = call double @cos(double %516) #3
  %518 = fsub double %511, %517
  %519 = fmul double %518, %517
  %520 = fsub double -0.000000e+00, %511
  %521 = fadd double %520, %517
  %522 = fsub double %511, %517
  %523 = fmul double %522, %517
  %524 = fsub double -0.000000e+00, %511
  %525 = fadd double %524, %517
  %526 = fmul double %511, %517
  %527 = fsub double %454, %526
  %528 = fmul double %527, %526
  %529 = fsub double %454, %526
  %530 = fmul double %529, %526
  %531 = fsub double %454, %526
  %532 = fmul double %531, %526
  %533 = fsub double %454, %526
  %534 = call double @sqrt(double %533) #3
  %535 = fptrunc double %534 to float
  store float %535, float* %11, align 4
  %536 = load float, float* %11, align 4
  %537 = fpext float %536 to double
  %538 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), double %537)
  br label %93

; <label>:539:                                    ; preds = %152, %143
  %540 = call i32 @getchar()
  %541 = call i32 @getchar()
  %542 = call i32 @getchar()
  %543 = load i32, i32* %10, align 4
  br label %152
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

declare i32 @getchar() #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
