; ModuleID = 'source-C-CXX/39/367.c'
source_filename = "source-C-CXX/39/367.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [11 x i8] c"%f%f%f%f%f\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %140

; <label>:9:                                      ; preds = %0, %140
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), float* %11, float* %12, float* %13, float* %14, float* %15)
  %19 = load float, float* %11, align 4
  %20 = load float, float* %12, align 4
  %21 = fadd float %19, %20
  %22 = load float, float* %13, align 4
  %23 = fadd float %21, %22
  %24 = load float, float* %14, align 4
  %25 = fadd float %23, %24
  %26 = fpext float %25 to double
  %27 = fmul double 5.000000e-01, %26
  %28 = fptrunc double %27 to float
  store float %28, float* %16, align 4
  %29 = load float, float* %16, align 4
  %30 = load float, float* %11, align 4
  %31 = fsub float %29, %30
  %32 = load float, float* %16, align 4
  %33 = load float, float* %12, align 4
  %34 = fsub float %32, %33
  %35 = fmul float %31, %34
  %36 = load float, float* %16, align 4
  %37 = load float, float* %13, align 4
  %38 = fsub float %36, %37
  %39 = fmul float %35, %38
  %40 = load float, float* %16, align 4
  %41 = load float, float* %14, align 4
  %42 = fsub float %40, %41
  %43 = fmul float %39, %42
  %44 = fpext float %43 to double
  %45 = load float, float* %11, align 4
  %46 = load float, float* %12, align 4
  %47 = fmul float %45, %46
  %48 = load float, float* %13, align 4
  %49 = fmul float %47, %48
  %50 = load float, float* %14, align 4
  %51 = fmul float %49, %50
  %52 = fpext float %51 to double
  %53 = load float, float* %15, align 4
  %54 = fpext float %53 to double
  %55 = fmul double %54, 0x400921FB4D12D84A
  %56 = fdiv double %55, 3.600000e+02
  %57 = call double @cos(double %56) #3
  %58 = fmul double %52, %57
  %59 = load float, float* %15, align 4
  %60 = fpext float %59 to double
  %61 = fmul double %60, 0x400921FB4D12D84A
  %62 = fdiv double %61, 3.600000e+02
  %63 = call double @cos(double %62) #3
  %64 = fmul double %58, %63
  %65 = fsub double %44, %64
  %66 = fcmp olt double %65, 0.000000e+00
  %67 = load i32, i32* @x
  %68 = load i32, i32* @y
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %75, label %140

; <label>:75:                                     ; preds = %9
  br i1 %66, label %76, label %78

; <label>:76:                                     ; preds = %75
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %139

; <label>:78:                                     ; preds = %75
  %79 = load i32, i32* @x
  %80 = load i32, i32* @y
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %87, label %376

; <label>:87:                                     ; preds = %78, %376
  %88 = load float, float* %16, align 4
  %89 = load float, float* %11, align 4
  %90 = fsub float %88, %89
  %91 = load float, float* %16, align 4
  %92 = load float, float* %12, align 4
  %93 = fsub float %91, %92
  %94 = fmul float %90, %93
  %95 = load float, float* %16, align 4
  %96 = load float, float* %13, align 4
  %97 = fsub float %95, %96
  %98 = fmul float %94, %97
  %99 = load float, float* %16, align 4
  %100 = load float, float* %14, align 4
  %101 = fsub float %99, %100
  %102 = fmul float %98, %101
  %103 = fpext float %102 to double
  %104 = load float, float* %11, align 4
  %105 = load float, float* %12, align 4
  %106 = fmul float %104, %105
  %107 = load float, float* %13, align 4
  %108 = fmul float %106, %107
  %109 = load float, float* %14, align 4
  %110 = fmul float %108, %109
  %111 = fpext float %110 to double
  %112 = load float, float* %15, align 4
  %113 = fpext float %112 to double
  %114 = fmul double %113, 0x400921FB4D12D84A
  %115 = fdiv double %114, 3.600000e+02
  %116 = call double @cos(double %115) #3
  %117 = fmul double %111, %116
  %118 = load float, float* %15, align 4
  %119 = fpext float %118 to double
  %120 = fmul double %119, 0x400921FB4D12D84A
  %121 = fdiv double %120, 3.600000e+02
  %122 = call double @cos(double %121) #3
  %123 = fmul double %117, %122
  %124 = fsub double %103, %123
  %125 = call double @sqrt(double %124) #3
  %126 = fptrunc double %125 to float
  store float %126, float* %17, align 4
  %127 = load float, float* %17, align 4
  %128 = fpext float %127 to double
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %128)
  %130 = load i32, i32* @x
  %131 = load i32, i32* @y
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %138, label %376

; <label>:138:                                    ; preds = %87
  br label %139

; <label>:139:                                    ; preds = %138, %76
  ret i32 0

; <label>:140:                                    ; preds = %9, %0
  %141 = alloca i32, align 4
  %142 = alloca float, align 4
  %143 = alloca float, align 4
  %144 = alloca float, align 4
  %145 = alloca float, align 4
  %146 = alloca float, align 4
  %147 = alloca float, align 4
  %148 = alloca float, align 4
  store i32 0, i32* %141, align 4
  %149 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), float* %142, float* %143, float* %144, float* %145, float* %146)
  %150 = load float, float* %142, align 4
  %151 = load float, float* %143, align 4
  %152 = fsub float %150, %151
  %153 = fmul float %152, %151
  %154 = fsub float -0.000000e+00, %150
  %155 = fadd float %154, %151
  %156 = fadd float %150, %151
  %157 = load float, float* %144, align 4
  %158 = fsub float -0.000000e+00, %156
  %159 = fadd float %158, %157
  %160 = fsub float %156, %157
  %161 = fmul float %160, %157
  %162 = fsub float -0.000000e+00, %156
  %163 = fadd float %162, %157
  %164 = fsub float -0.000000e+00, %156
  %165 = fadd float %164, %157
  %166 = fsub float -0.000000e+00, %156
  %167 = fadd float %166, %157
  %168 = fsub float -0.000000e+00, %156
  %169 = fadd float %168, %157
  %170 = fsub float %156, %157
  %171 = fmul float %170, %157
  %172 = fsub float -0.000000e+00, %156
  %173 = fadd float %172, %157
  %174 = fsub float -0.000000e+00, %156
  %175 = fadd float %174, %157
  %176 = fadd float %156, %157
  %177 = load float, float* %145, align 4
  %178 = fsub float -0.000000e+00, %176
  %179 = fadd float %178, %177
  %180 = fadd float %176, %177
  %181 = fpext float %180 to double
  %182 = fsub double -0.000000e+00, 5.000000e-01
  %183 = fadd double %182, %181
  %184 = fsub double 5.000000e-01, %181
  %185 = fmul double %184, %181
  %186 = fsub double -0.000000e+00, 5.000000e-01
  %187 = fadd double %186, %181
  %188 = fmul double 5.000000e-01, %181
  %189 = fptrunc double %188 to float
  store float %189, float* %147, align 4
  %190 = load float, float* %147, align 4
  %191 = load float, float* %142, align 4
  %192 = fsub float %190, %191
  %193 = fmul float %192, %191
  %194 = fsub float %190, %191
  %195 = fmul float %194, %191
  %196 = fsub float %190, %191
  %197 = fmul float %196, %191
  %198 = fsub float -0.000000e+00, %190
  %199 = fadd float %198, %191
  %200 = fsub float %190, %191
  %201 = fmul float %200, %191
  %202 = fsub float -0.000000e+00, %190
  %203 = fadd float %202, %191
  %204 = fsub float %190, %191
  %205 = load float, float* %147, align 4
  %206 = load float, float* %143, align 4
  %207 = fsub float %205, %206
  %208 = fmul float %207, %206
  %209 = fsub float %205, %206
  %210 = fmul float %209, %206
  %211 = fsub float %205, %206
  %212 = fmul float %211, %206
  %213 = fsub float %205, %206
  %214 = fsub float %204, %213
  %215 = fmul float %214, %213
  %216 = fsub float %204, %213
  %217 = fmul float %216, %213
  %218 = fsub float %204, %213
  %219 = fmul float %218, %213
  %220 = fsub float -0.000000e+00, %204
  %221 = fadd float %220, %213
  %222 = fmul float %204, %213
  %223 = load float, float* %147, align 4
  %224 = load float, float* %144, align 4
  %225 = fsub float -0.000000e+00, %223
  %226 = fadd float %225, %224
  %227 = fsub float %223, %224
  %228 = fmul float %227, %224
  %229 = fsub float %223, %224
  %230 = fmul float %229, %224
  %231 = fsub float -0.000000e+00, %223
  %232 = fadd float %231, %224
  %233 = fsub float %223, %224
  %234 = fmul float %233, %224
  %235 = fsub float -0.000000e+00, %223
  %236 = fadd float %235, %224
  %237 = fsub float %223, %224
  %238 = fsub float -0.000000e+00, %222
  %239 = fadd float %238, %237
  %240 = fsub float %222, %237
  %241 = fmul float %240, %237
  %242 = fsub float -0.000000e+00, %222
  %243 = fadd float %242, %237
  %244 = fmul float %222, %237
  %245 = load float, float* %147, align 4
  %246 = load float, float* %145, align 4
  %247 = fsub float %245, %246
  %248 = fmul float %247, %246
  %249 = fsub float %245, %246
  %250 = fmul float %249, %246
  %251 = fsub float %245, %246
  %252 = fmul float %251, %246
  %253 = fsub float -0.000000e+00, %245
  %254 = fadd float %253, %246
  %255 = fsub float -0.000000e+00, %245
  %256 = fadd float %255, %246
  %257 = fsub float %245, %246
  %258 = fsub float -0.000000e+00, %244
  %259 = fadd float %258, %257
  %260 = fsub float -0.000000e+00, %244
  %261 = fadd float %260, %257
  %262 = fsub float -0.000000e+00, %244
  %263 = fadd float %262, %257
  %264 = fsub float %244, %257
  %265 = fmul float %264, %257
  %266 = fsub float %244, %257
  %267 = fmul float %266, %257
  %268 = fmul float %244, %257
  %269 = fpext float %268 to double
  %270 = load float, float* %142, align 4
  %271 = load float, float* %143, align 4
  %272 = fsub float %270, %271
  %273 = fmul float %272, %271
  %274 = fsub float %270, %271
  %275 = fmul float %274, %271
  %276 = fsub float %270, %271
  %277 = fmul float %276, %271
  %278 = fsub float -0.000000e+00, %270
  %279 = fadd float %278, %271
  %280 = fmul float %270, %271
  %281 = load float, float* %144, align 4
  %282 = fsub float %280, %281
  %283 = fmul float %282, %281
  %284 = fsub float %280, %281
  %285 = fmul float %284, %281
  %286 = fsub float %280, %281
  %287 = fmul float %286, %281
  %288 = fmul float %280, %281
  %289 = load float, float* %145, align 4
  %290 = fsub float %288, %289
  %291 = fmul float %290, %289
  %292 = fsub float -0.000000e+00, %288
  %293 = fadd float %292, %289
  %294 = fsub float %288, %289
  %295 = fmul float %294, %289
  %296 = fsub float %288, %289
  %297 = fmul float %296, %289
  %298 = fmul float %288, %289
  %299 = fpext float %298 to double
  %300 = load float, float* %146, align 4
  %301 = fpext float %300 to double
  %302 = fsub double -0.000000e+00, %301
  %303 = fadd double %302, 0x400921FB4D12D84A
  %304 = fsub double -0.000000e+00, %301
  %305 = fadd double %304, 0x400921FB4D12D84A
  %306 = fsub double %301, 0x400921FB4D12D84A
  %307 = fmul double %306, 0x400921FB4D12D84A
  %308 = fmul double %301, 0x400921FB4D12D84A
  %309 = fsub double -0.000000e+00, %308
  %310 = fadd double %309, 3.600000e+02
  %311 = fdiv double %308, 3.600000e+02
  %312 = call double @cos(double %311) #3
  %313 = fsub double -0.000000e+00, %299
  %314 = fadd double %313, %312
  %315 = fsub double %299, %312
  %316 = fmul double %315, %312
  %317 = fsub double -0.000000e+00, %299
  %318 = fadd double %317, %312
  %319 = fsub double %299, %312
  %320 = fmul double %319, %312
  %321 = fsub double -0.000000e+00, %299
  %322 = fadd double %321, %312
  %323 = fsub double %299, %312
  %324 = fmul double %323, %312
  %325 = fsub double %299, %312
  %326 = fmul double %325, %312
  %327 = fmul double %299, %312
  %328 = load float, float* %146, align 4
  %329 = fpext float %328 to double
  %330 = fsub double -0.000000e+00, %329
  %331 = fadd double %330, 0x400921FB4D12D84A
  %332 = fsub double -0.000000e+00, %329
  %333 = fadd double %332, 0x400921FB4D12D84A
  %334 = fsub double -0.000000e+00, %329
  %335 = fadd double %334, 0x400921FB4D12D84A
  %336 = fsub double -0.000000e+00, %329
  %337 = fadd double %336, 0x400921FB4D12D84A
  %338 = fsub double %329, 0x400921FB4D12D84A
  %339 = fmul double %338, 0x400921FB4D12D84A
  %340 = fsub double -0.000000e+00, %329
  %341 = fadd double %340, 0x400921FB4D12D84A
  %342 = fmul double %329, 0x400921FB4D12D84A
  %343 = fsub double %342, 3.600000e+02
  %344 = fmul double %343, 3.600000e+02
  %345 = fsub double %342, 3.600000e+02
  %346 = fmul double %345, 3.600000e+02
  %347 = fsub double %342, 3.600000e+02
  %348 = fmul double %347, 3.600000e+02
  %349 = fsub double %342, 3.600000e+02
  %350 = fmul double %349, 3.600000e+02
  %351 = fsub double %342, 3.600000e+02
  %352 = fmul double %351, 3.600000e+02
  %353 = fdiv double %342, 3.600000e+02
  %354 = call double @cos(double %353) #3
  %355 = fsub double -0.000000e+00, %327
  %356 = fadd double %355, %354
  %357 = fmul double %327, %354
  %358 = fsub double -0.000000e+00, %269
  %359 = fadd double %358, %357
  %360 = fsub double -0.000000e+00, %269
  %361 = fadd double %360, %357
  %362 = fsub double %269, %357
  %363 = fmul double %362, %357
  %364 = fsub double %269, %357
  %365 = fmul double %364, %357
  %366 = fsub double -0.000000e+00, %269
  %367 = fadd double %366, %357
  %368 = fsub double %269, %357
  %369 = fmul double %368, %357
  %370 = fsub double %269, %357
  %371 = fmul double %370, %357
  %372 = fsub double %269, %357
  %373 = fmul double %372, %357
  %374 = fsub double %269, %357
  %375 = fcmp olt double %374, 0.000000e+00
  br label %9

; <label>:376:                                    ; preds = %87, %78
  %377 = load float, float* %16, align 4
  %378 = load float, float* %11, align 4
  %379 = fsub float %377, %378
  %380 = fmul float %379, %378
  %381 = fsub float -0.000000e+00, %377
  %382 = fadd float %381, %378
  %383 = fsub float -0.000000e+00, %377
  %384 = fadd float %383, %378
  %385 = fsub float -0.000000e+00, %377
  %386 = fadd float %385, %378
  %387 = fsub float %377, %378
  %388 = fmul float %387, %378
  %389 = fsub float -0.000000e+00, %377
  %390 = fadd float %389, %378
  %391 = fsub float -0.000000e+00, %377
  %392 = fadd float %391, %378
  %393 = fsub float -0.000000e+00, %377
  %394 = fadd float %393, %378
  %395 = fsub float %377, %378
  %396 = load float, float* %16, align 4
  %397 = load float, float* %12, align 4
  %398 = fsub float -0.000000e+00, %396
  %399 = fadd float %398, %397
  %400 = fsub float -0.000000e+00, %396
  %401 = fadd float %400, %397
  %402 = fsub float -0.000000e+00, %396
  %403 = fadd float %402, %397
  %404 = fsub float -0.000000e+00, %396
  %405 = fadd float %404, %397
  %406 = fsub float -0.000000e+00, %396
  %407 = fadd float %406, %397
  %408 = fsub float %396, %397
  %409 = fsub float %395, %408
  %410 = fmul float %409, %408
  %411 = fsub float -0.000000e+00, %395
  %412 = fadd float %411, %408
  %413 = fsub float -0.000000e+00, %395
  %414 = fadd float %413, %408
  %415 = fsub float -0.000000e+00, %395
  %416 = fadd float %415, %408
  %417 = fsub float -0.000000e+00, %395
  %418 = fadd float %417, %408
  %419 = fsub float %395, %408
  %420 = fmul float %419, %408
  %421 = fsub float %395, %408
  %422 = fmul float %421, %408
  %423 = fsub float -0.000000e+00, %395
  %424 = fadd float %423, %408
  %425 = fmul float %395, %408
  %426 = load float, float* %16, align 4
  %427 = load float, float* %13, align 4
  %428 = fsub float %426, %427
  %429 = fmul float %428, %427
  %430 = fsub float %426, %427
  %431 = fsub float -0.000000e+00, %425
  %432 = fadd float %431, %430
  %433 = fsub float -0.000000e+00, %425
  %434 = fadd float %433, %430
  %435 = fsub float %425, %430
  %436 = fmul float %435, %430
  %437 = fsub float -0.000000e+00, %425
  %438 = fadd float %437, %430
  %439 = fmul float %425, %430
  %440 = load float, float* %16, align 4
  %441 = load float, float* %14, align 4
  %442 = fsub float -0.000000e+00, %440
  %443 = fadd float %442, %441
  %444 = fsub float -0.000000e+00, %440
  %445 = fadd float %444, %441
  %446 = fsub float -0.000000e+00, %440
  %447 = fadd float %446, %441
  %448 = fsub float %440, %441
  %449 = fsub float %439, %448
  %450 = fmul float %449, %448
  %451 = fsub float -0.000000e+00, %439
  %452 = fadd float %451, %448
  %453 = fsub float %439, %448
  %454 = fmul float %453, %448
  %455 = fsub float -0.000000e+00, %439
  %456 = fadd float %455, %448
  %457 = fsub float %439, %448
  %458 = fmul float %457, %448
  %459 = fsub float -0.000000e+00, %439
  %460 = fadd float %459, %448
  %461 = fmul float %439, %448
  %462 = fpext float %461 to double
  %463 = load float, float* %11, align 4
  %464 = load float, float* %12, align 4
  %465 = fsub float %463, %464
  %466 = fmul float %465, %464
  %467 = fsub float %463, %464
  %468 = fmul float %467, %464
  %469 = fsub float %463, %464
  %470 = fmul float %469, %464
  %471 = fsub float %463, %464
  %472 = fmul float %471, %464
  %473 = fmul float %463, %464
  %474 = load float, float* %13, align 4
  %475 = fsub float %473, %474
  %476 = fmul float %475, %474
  %477 = fsub float -0.000000e+00, %473
  %478 = fadd float %477, %474
  %479 = fsub float -0.000000e+00, %473
  %480 = fadd float %479, %474
  %481 = fsub float %473, %474
  %482 = fmul float %481, %474
  %483 = fsub float %473, %474
  %484 = fmul float %483, %474
  %485 = fsub float %473, %474
  %486 = fmul float %485, %474
  %487 = fsub float %473, %474
  %488 = fmul float %487, %474
  %489 = fmul float %473, %474
  %490 = load float, float* %14, align 4
  %491 = fsub float %489, %490
  %492 = fmul float %491, %490
  %493 = fsub float %489, %490
  %494 = fmul float %493, %490
  %495 = fsub float -0.000000e+00, %489
  %496 = fadd float %495, %490
  %497 = fmul float %489, %490
  %498 = fpext float %497 to double
  %499 = load float, float* %15, align 4
  %500 = fpext float %499 to double
  %501 = fsub double %500, 0x400921FB4D12D84A
  %502 = fmul double %501, 0x400921FB4D12D84A
  %503 = fsub double -0.000000e+00, %500
  %504 = fadd double %503, 0x400921FB4D12D84A
  %505 = fsub double %500, 0x400921FB4D12D84A
  %506 = fmul double %505, 0x400921FB4D12D84A
  %507 = fsub double -0.000000e+00, %500
  %508 = fadd double %507, 0x400921FB4D12D84A
  %509 = fsub double -0.000000e+00, %500
  %510 = fadd double %509, 0x400921FB4D12D84A
  %511 = fmul double %500, 0x400921FB4D12D84A
  %512 = fsub double -0.000000e+00, %511
  %513 = fadd double %512, 3.600000e+02
  %514 = fsub double -0.000000e+00, %511
  %515 = fadd double %514, 3.600000e+02
  %516 = fsub double -0.000000e+00, %511
  %517 = fadd double %516, 3.600000e+02
  %518 = fsub double -0.000000e+00, %511
  %519 = fadd double %518, 3.600000e+02
  %520 = fsub double %511, 3.600000e+02
  %521 = fmul double %520, 3.600000e+02
  %522 = fdiv double %511, 3.600000e+02
  %523 = call double @cos(double %522) #3
  %524 = fsub double -0.000000e+00, %498
  %525 = fadd double %524, %523
  %526 = fsub double %498, %523
  %527 = fmul double %526, %523
  %528 = fsub double -0.000000e+00, %498
  %529 = fadd double %528, %523
  %530 = fsub double %498, %523
  %531 = fmul double %530, %523
  %532 = fmul double %498, %523
  %533 = load float, float* %15, align 4
  %534 = fpext float %533 to double
  %535 = fsub double %534, 0x400921FB4D12D84A
  %536 = fmul double %535, 0x400921FB4D12D84A
  %537 = fsub double %534, 0x400921FB4D12D84A
  %538 = fmul double %537, 0x400921FB4D12D84A
  %539 = fsub double %534, 0x400921FB4D12D84A
  %540 = fmul double %539, 0x400921FB4D12D84A
  %541 = fsub double %534, 0x400921FB4D12D84A
  %542 = fmul double %541, 0x400921FB4D12D84A
  %543 = fsub double -0.000000e+00, %534
  %544 = fadd double %543, 0x400921FB4D12D84A
  %545 = fsub double -0.000000e+00, %534
  %546 = fadd double %545, 0x400921FB4D12D84A
  %547 = fsub double -0.000000e+00, %534
  %548 = fadd double %547, 0x400921FB4D12D84A
  %549 = fmul double %534, 0x400921FB4D12D84A
  %550 = fsub double -0.000000e+00, %549
  %551 = fadd double %550, 3.600000e+02
  %552 = fdiv double %549, 3.600000e+02
  %553 = call double @cos(double %552) #3
  %554 = fsub double %532, %553
  %555 = fmul double %554, %553
  %556 = fsub double %532, %553
  %557 = fmul double %556, %553
  %558 = fsub double -0.000000e+00, %532
  %559 = fadd double %558, %553
  %560 = fmul double %532, %553
  %561 = fsub double -0.000000e+00, %462
  %562 = fadd double %561, %560
  %563 = fsub double -0.000000e+00, %462
  %564 = fadd double %563, %560
  %565 = fsub double %462, %560
  %566 = fmul double %565, %560
  %567 = fsub double %462, %560
  %568 = call double @sqrt(double %567) #3
  %569 = fptrunc double %568 to float
  store float %569, float* %17, align 4
  %570 = load float, float* %17, align 4
  %571 = fpext float %570 to double
  %572 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %571)
  br label %87
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
