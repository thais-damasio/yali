; ModuleID = 'source-C-CXX/39/1370.c'
source_filename = "source-C-CXX/39/1370.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%lf%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%.4lf\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %186

; <label>:9:                                      ; preds = %0, %186
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %15)
  %20 = load double, double* %11, align 8
  %21 = load double, double* %12, align 8
  %22 = fadd double %20, %21
  %23 = load double, double* %13, align 8
  %24 = fadd double %22, %23
  %25 = load double, double* %14, align 8
  %26 = fadd double %24, %25
  %27 = fdiv double %26, 2.000000e+00
  store double %27, double* %16, align 8
  %28 = load double, double* %16, align 8
  %29 = load double, double* %11, align 8
  %30 = fsub double %28, %29
  %31 = load double, double* %16, align 8
  %32 = load double, double* %12, align 8
  %33 = fsub double %31, %32
  %34 = fmul double %30, %33
  %35 = load double, double* %16, align 8
  %36 = load double, double* %13, align 8
  %37 = fsub double %35, %36
  %38 = fmul double %34, %37
  %39 = load double, double* %16, align 8
  %40 = load double, double* %14, align 8
  %41 = fsub double %39, %40
  %42 = fmul double %38, %41
  %43 = load double, double* %11, align 8
  %44 = load double, double* %12, align 8
  %45 = fmul double %43, %44
  %46 = load double, double* %13, align 8
  %47 = fmul double %45, %46
  %48 = load double, double* %14, align 8
  %49 = fmul double %47, %48
  %50 = load double, double* %15, align 8
  %51 = fmul double %50, 0x400921FB4D12D84A
  %52 = fdiv double %51, 3.600000e+02
  %53 = call double @cos(double %52) #3
  %54 = fmul double %49, %53
  %55 = load double, double* %15, align 8
  %56 = fmul double %55, 0x400921FB4D12D84A
  %57 = fdiv double %56, 3.600000e+02
  %58 = call double @cos(double %57) #3
  %59 = fmul double %54, %58
  %60 = fsub double %42, %59
  store double %60, double* %17, align 8
  %61 = load double, double* %16, align 8
  %62 = load double, double* %11, align 8
  %63 = fsub double %61, %62
  %64 = load double, double* %16, align 8
  %65 = load double, double* %12, align 8
  %66 = fsub double %64, %65
  %67 = fmul double %63, %66
  %68 = load double, double* %16, align 8
  %69 = load double, double* %13, align 8
  %70 = fsub double %68, %69
  %71 = fmul double %67, %70
  %72 = load double, double* %16, align 8
  %73 = load double, double* %14, align 8
  %74 = fsub double %72, %73
  %75 = fmul double %71, %74
  %76 = load double, double* %11, align 8
  %77 = load double, double* %12, align 8
  %78 = fmul double %76, %77
  %79 = load double, double* %13, align 8
  %80 = fmul double %78, %79
  %81 = load double, double* %14, align 8
  %82 = fmul double %80, %81
  %83 = load double, double* %15, align 8
  %84 = fmul double %83, 0x400921FB4D12D84A
  %85 = fdiv double %84, 3.600000e+02
  %86 = call double @cos(double %85) #3
  %87 = fmul double %82, %86
  %88 = load double, double* %15, align 8
  %89 = fmul double %88, 0x400921FB4D12D84A
  %90 = fdiv double %89, 3.600000e+02
  %91 = call double @cos(double %90) #3
  %92 = fmul double %87, %91
  %93 = fsub double %75, %92
  %94 = call double @sqrt(double %93) #3
  store double %94, double* %18, align 8
  %95 = load double, double* %17, align 8
  %96 = fcmp olt double %95, 0.000000e+00
  %97 = load i32, i32* @x
  %98 = load i32, i32* @y
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %105, label %186

; <label>:105:                                    ; preds = %9
  br i1 %96, label %106, label %126

; <label>:106:                                    ; preds = %105
  %107 = load i32, i32* @x
  %108 = load i32, i32* @y
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %115, label %546

; <label>:115:                                    ; preds = %106, %546
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %117 = load i32, i32* @x
  %118 = load i32, i32* @y
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %125, label %546

; <label>:125:                                    ; preds = %115
  br label %167

; <label>:126:                                    ; preds = %105
  %127 = load double, double* %17, align 8
  %128 = fcmp oge double %127, 0.000000e+00
  br i1 %128, label %129, label %166

; <label>:129:                                    ; preds = %126
  %130 = load double, double* %16, align 8
  %131 = load double, double* %11, align 8
  %132 = fsub double %130, %131
  %133 = load double, double* %16, align 8
  %134 = load double, double* %12, align 8
  %135 = fsub double %133, %134
  %136 = fmul double %132, %135
  %137 = load double, double* %16, align 8
  %138 = load double, double* %13, align 8
  %139 = fsub double %137, %138
  %140 = fmul double %136, %139
  %141 = load double, double* %16, align 8
  %142 = load double, double* %14, align 8
  %143 = fsub double %141, %142
  %144 = fmul double %140, %143
  %145 = load double, double* %11, align 8
  %146 = load double, double* %12, align 8
  %147 = fmul double %145, %146
  %148 = load double, double* %13, align 8
  %149 = fmul double %147, %148
  %150 = load double, double* %14, align 8
  %151 = fmul double %149, %150
  %152 = load double, double* %15, align 8
  %153 = fmul double %152, 0x400921FB4D12D84A
  %154 = fdiv double %153, 3.600000e+02
  %155 = call double @cos(double %154) #3
  %156 = fmul double %151, %155
  %157 = load double, double* %15, align 8
  %158 = fmul double %157, 0x400921FB4D12D84A
  %159 = fdiv double %158, 3.600000e+02
  %160 = call double @cos(double %159) #3
  %161 = fmul double %156, %160
  %162 = fsub double %144, %161
  %163 = call double @sqrt(double %162) #3
  store double %163, double* %18, align 8
  %164 = load double, double* %18, align 8
  %165 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double %164)
  br label %166

; <label>:166:                                    ; preds = %129, %126
  br label %167

; <label>:167:                                    ; preds = %166, %125
  %168 = load i32, i32* @x
  %169 = load i32, i32* @y
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %176, label %548

; <label>:176:                                    ; preds = %167, %548
  %177 = load i32, i32* @x
  %178 = load i32, i32* @y
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %185, label %548

; <label>:185:                                    ; preds = %176
  ret i32 0

; <label>:186:                                    ; preds = %9, %0
  %187 = alloca i32, align 4
  %188 = alloca double, align 8
  %189 = alloca double, align 8
  %190 = alloca double, align 8
  %191 = alloca double, align 8
  %192 = alloca double, align 8
  %193 = alloca double, align 8
  %194 = alloca double, align 8
  %195 = alloca double, align 8
  store i32 0, i32* %187, align 4
  %196 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %188, double* %189, double* %190, double* %191, double* %192)
  %197 = load double, double* %188, align 8
  %198 = load double, double* %189, align 8
  %199 = fsub double -0.000000e+00, %197
  %200 = fadd double %199, %198
  %201 = fsub double %197, %198
  %202 = fmul double %201, %198
  %203 = fadd double %197, %198
  %204 = load double, double* %190, align 8
  %205 = fsub double -0.000000e+00, %203
  %206 = fadd double %205, %204
  %207 = fsub double -0.000000e+00, %203
  %208 = fadd double %207, %204
  %209 = fadd double %203, %204
  %210 = load double, double* %191, align 8
  %211 = fsub double %209, %210
  %212 = fmul double %211, %210
  %213 = fsub double -0.000000e+00, %209
  %214 = fadd double %213, %210
  %215 = fsub double %209, %210
  %216 = fmul double %215, %210
  %217 = fsub double -0.000000e+00, %209
  %218 = fadd double %217, %210
  %219 = fsub double -0.000000e+00, %209
  %220 = fadd double %219, %210
  %221 = fsub double -0.000000e+00, %209
  %222 = fadd double %221, %210
  %223 = fadd double %209, %210
  %224 = fsub double %223, 2.000000e+00
  %225 = fmul double %224, 2.000000e+00
  %226 = fsub double %223, 2.000000e+00
  %227 = fmul double %226, 2.000000e+00
  %228 = fsub double %223, 2.000000e+00
  %229 = fmul double %228, 2.000000e+00
  %230 = fsub double -0.000000e+00, %223
  %231 = fadd double %230, 2.000000e+00
  %232 = fsub double -0.000000e+00, %223
  %233 = fadd double %232, 2.000000e+00
  %234 = fdiv double %223, 2.000000e+00
  store double %234, double* %193, align 8
  %235 = load double, double* %193, align 8
  %236 = load double, double* %188, align 8
  %237 = fsub double %235, %236
  %238 = fmul double %237, %236
  %239 = fsub double %235, %236
  %240 = fmul double %239, %236
  %241 = fsub double -0.000000e+00, %235
  %242 = fadd double %241, %236
  %243 = fsub double %235, %236
  %244 = load double, double* %193, align 8
  %245 = load double, double* %189, align 8
  %246 = fsub double -0.000000e+00, %244
  %247 = fadd double %246, %245
  %248 = fsub double %244, %245
  %249 = fsub double %243, %248
  %250 = fmul double %249, %248
  %251 = fmul double %243, %248
  %252 = load double, double* %193, align 8
  %253 = load double, double* %190, align 8
  %254 = fsub double -0.000000e+00, %252
  %255 = fadd double %254, %253
  %256 = fsub double %252, %253
  %257 = fmul double %256, %253
  %258 = fsub double -0.000000e+00, %252
  %259 = fadd double %258, %253
  %260 = fsub double %252, %253
  %261 = fsub double -0.000000e+00, %251
  %262 = fadd double %261, %260
  %263 = fsub double -0.000000e+00, %251
  %264 = fadd double %263, %260
  %265 = fsub double %251, %260
  %266 = fmul double %265, %260
  %267 = fsub double %251, %260
  %268 = fmul double %267, %260
  %269 = fmul double %251, %260
  %270 = load double, double* %193, align 8
  %271 = load double, double* %191, align 8
  %272 = fsub double %270, %271
  %273 = fmul double %272, %271
  %274 = fsub double %270, %271
  %275 = fsub double -0.000000e+00, %269
  %276 = fadd double %275, %274
  %277 = fsub double -0.000000e+00, %269
  %278 = fadd double %277, %274
  %279 = fsub double %269, %274
  %280 = fmul double %279, %274
  %281 = fsub double -0.000000e+00, %269
  %282 = fadd double %281, %274
  %283 = fsub double -0.000000e+00, %269
  %284 = fadd double %283, %274
  %285 = fsub double %269, %274
  %286 = fmul double %285, %274
  %287 = fmul double %269, %274
  %288 = load double, double* %188, align 8
  %289 = load double, double* %189, align 8
  %290 = fmul double %288, %289
  %291 = load double, double* %190, align 8
  %292 = fsub double -0.000000e+00, %290
  %293 = fadd double %292, %291
  %294 = fsub double %290, %291
  %295 = fmul double %294, %291
  %296 = fsub double -0.000000e+00, %290
  %297 = fadd double %296, %291
  %298 = fsub double -0.000000e+00, %290
  %299 = fadd double %298, %291
  %300 = fsub double -0.000000e+00, %290
  %301 = fadd double %300, %291
  %302 = fmul double %290, %291
  %303 = load double, double* %191, align 8
  %304 = fsub double -0.000000e+00, %302
  %305 = fadd double %304, %303
  %306 = fmul double %302, %303
  %307 = load double, double* %192, align 8
  %308 = fsub double %307, 0x400921FB4D12D84A
  %309 = fmul double %308, 0x400921FB4D12D84A
  %310 = fsub double %307, 0x400921FB4D12D84A
  %311 = fmul double %310, 0x400921FB4D12D84A
  %312 = fsub double -0.000000e+00, %307
  %313 = fadd double %312, 0x400921FB4D12D84A
  %314 = fsub double -0.000000e+00, %307
  %315 = fadd double %314, 0x400921FB4D12D84A
  %316 = fmul double %307, 0x400921FB4D12D84A
  %317 = fsub double %316, 3.600000e+02
  %318 = fmul double %317, 3.600000e+02
  %319 = fsub double -0.000000e+00, %316
  %320 = fadd double %319, 3.600000e+02
  %321 = fsub double %316, 3.600000e+02
  %322 = fmul double %321, 3.600000e+02
  %323 = fdiv double %316, 3.600000e+02
  %324 = call double @cos(double %323) #3
  %325 = fsub double -0.000000e+00, %306
  %326 = fadd double %325, %324
  %327 = fsub double -0.000000e+00, %306
  %328 = fadd double %327, %324
  %329 = fsub double %306, %324
  %330 = fmul double %329, %324
  %331 = fsub double %306, %324
  %332 = fmul double %331, %324
  %333 = fsub double -0.000000e+00, %306
  %334 = fadd double %333, %324
  %335 = fmul double %306, %324
  %336 = load double, double* %192, align 8
  %337 = fsub double %336, 0x400921FB4D12D84A
  %338 = fmul double %337, 0x400921FB4D12D84A
  %339 = fsub double -0.000000e+00, %336
  %340 = fadd double %339, 0x400921FB4D12D84A
  %341 = fmul double %336, 0x400921FB4D12D84A
  %342 = fsub double -0.000000e+00, %341
  %343 = fadd double %342, 3.600000e+02
  %344 = fsub double %341, 3.600000e+02
  %345 = fmul double %344, 3.600000e+02
  %346 = fsub double -0.000000e+00, %341
  %347 = fadd double %346, 3.600000e+02
  %348 = fdiv double %341, 3.600000e+02
  %349 = call double @cos(double %348) #3
  %350 = fsub double %335, %349
  %351 = fmul double %350, %349
  %352 = fmul double %335, %349
  %353 = fsub double %287, %352
  %354 = fmul double %353, %352
  %355 = fsub double -0.000000e+00, %287
  %356 = fadd double %355, %352
  %357 = fsub double -0.000000e+00, %287
  %358 = fadd double %357, %352
  %359 = fsub double -0.000000e+00, %287
  %360 = fadd double %359, %352
  %361 = fsub double %287, %352
  store double %361, double* %194, align 8
  %362 = load double, double* %193, align 8
  %363 = load double, double* %188, align 8
  %364 = fsub double %362, %363
  %365 = fmul double %364, %363
  %366 = fsub double %362, %363
  %367 = load double, double* %193, align 8
  %368 = load double, double* %189, align 8
  %369 = fsub double %367, %368
  %370 = fmul double %369, %368
  %371 = fsub double %367, %368
  %372 = fsub double %366, %371
  %373 = fmul double %372, %371
  %374 = fsub double %366, %371
  %375 = fmul double %374, %371
  %376 = fsub double %366, %371
  %377 = fmul double %376, %371
  %378 = fsub double %366, %371
  %379 = fmul double %378, %371
  %380 = fsub double -0.000000e+00, %366
  %381 = fadd double %380, %371
  %382 = fsub double %366, %371
  %383 = fmul double %382, %371
  %384 = fmul double %366, %371
  %385 = load double, double* %193, align 8
  %386 = load double, double* %190, align 8
  %387 = fsub double %385, %386
  %388 = fmul double %387, %386
  %389 = fsub double -0.000000e+00, %385
  %390 = fadd double %389, %386
  %391 = fsub double %385, %386
  %392 = fsub double -0.000000e+00, %384
  %393 = fadd double %392, %391
  %394 = fmul double %384, %391
  %395 = load double, double* %193, align 8
  %396 = load double, double* %191, align 8
  %397 = fsub double %395, %396
  %398 = fmul double %397, %396
  %399 = fsub double -0.000000e+00, %395
  %400 = fadd double %399, %396
  %401 = fsub double -0.000000e+00, %395
  %402 = fadd double %401, %396
  %403 = fsub double %395, %396
  %404 = fmul double %403, %396
  %405 = fsub double -0.000000e+00, %395
  %406 = fadd double %405, %396
  %407 = fsub double -0.000000e+00, %395
  %408 = fadd double %407, %396
  %409 = fsub double %395, %396
  %410 = fmul double %409, %396
  %411 = fsub double %395, %396
  %412 = fmul double %411, %396
  %413 = fsub double -0.000000e+00, %395
  %414 = fadd double %413, %396
  %415 = fsub double %395, %396
  %416 = fsub double %394, %415
  %417 = fmul double %416, %415
  %418 = fsub double %394, %415
  %419 = fmul double %418, %415
  %420 = fsub double -0.000000e+00, %394
  %421 = fadd double %420, %415
  %422 = fsub double %394, %415
  %423 = fmul double %422, %415
  %424 = fmul double %394, %415
  %425 = load double, double* %188, align 8
  %426 = load double, double* %189, align 8
  %427 = fsub double -0.000000e+00, %425
  %428 = fadd double %427, %426
  %429 = fsub double %425, %426
  %430 = fmul double %429, %426
  %431 = fsub double %425, %426
  %432 = fmul double %431, %426
  %433 = fsub double %425, %426
  %434 = fmul double %433, %426
  %435 = fsub double %425, %426
  %436 = fmul double %435, %426
  %437 = fsub double %425, %426
  %438 = fmul double %437, %426
  %439 = fmul double %425, %426
  %440 = load double, double* %190, align 8
  %441 = fmul double %439, %440
  %442 = load double, double* %191, align 8
  %443 = fsub double -0.000000e+00, %441
  %444 = fadd double %443, %442
  %445 = fsub double %441, %442
  %446 = fmul double %445, %442
  %447 = fsub double %441, %442
  %448 = fmul double %447, %442
  %449 = fsub double -0.000000e+00, %441
  %450 = fadd double %449, %442
  %451 = fmul double %441, %442
  %452 = load double, double* %192, align 8
  %453 = fsub double -0.000000e+00, %452
  %454 = fadd double %453, 0x400921FB4D12D84A
  %455 = fsub double -0.000000e+00, %452
  %456 = fadd double %455, 0x400921FB4D12D84A
  %457 = fsub double -0.000000e+00, %452
  %458 = fadd double %457, 0x400921FB4D12D84A
  %459 = fsub double -0.000000e+00, %452
  %460 = fadd double %459, 0x400921FB4D12D84A
  %461 = fsub double %452, 0x400921FB4D12D84A
  %462 = fmul double %461, 0x400921FB4D12D84A
  %463 = fmul double %452, 0x400921FB4D12D84A
  %464 = fsub double %463, 3.600000e+02
  %465 = fmul double %464, 3.600000e+02
  %466 = fsub double %463, 3.600000e+02
  %467 = fmul double %466, 3.600000e+02
  %468 = fsub double -0.000000e+00, %463
  %469 = fadd double %468, 3.600000e+02
  %470 = fsub double %463, 3.600000e+02
  %471 = fmul double %470, 3.600000e+02
  %472 = fsub double -0.000000e+00, %463
  %473 = fadd double %472, 3.600000e+02
  %474 = fsub double -0.000000e+00, %463
  %475 = fadd double %474, 3.600000e+02
  %476 = fsub double %463, 3.600000e+02
  %477 = fmul double %476, 3.600000e+02
  %478 = fdiv double %463, 3.600000e+02
  %479 = call double @cos(double %478) #3
  %480 = fsub double -0.000000e+00, %451
  %481 = fadd double %480, %479
  %482 = fsub double %451, %479
  %483 = fmul double %482, %479
  %484 = fsub double -0.000000e+00, %451
  %485 = fadd double %484, %479
  %486 = fsub double %451, %479
  %487 = fmul double %486, %479
  %488 = fsub double %451, %479
  %489 = fmul double %488, %479
  %490 = fmul double %451, %479
  %491 = load double, double* %192, align 8
  %492 = fsub double %491, 0x400921FB4D12D84A
  %493 = fmul double %492, 0x400921FB4D12D84A
  %494 = fsub double -0.000000e+00, %491
  %495 = fadd double %494, 0x400921FB4D12D84A
  %496 = fsub double -0.000000e+00, %491
  %497 = fadd double %496, 0x400921FB4D12D84A
  %498 = fsub double %491, 0x400921FB4D12D84A
  %499 = fmul double %498, 0x400921FB4D12D84A
  %500 = fsub double %491, 0x400921FB4D12D84A
  %501 = fmul double %500, 0x400921FB4D12D84A
  %502 = fsub double -0.000000e+00, %491
  %503 = fadd double %502, 0x400921FB4D12D84A
  %504 = fsub double -0.000000e+00, %491
  %505 = fadd double %504, 0x400921FB4D12D84A
  %506 = fmul double %491, 0x400921FB4D12D84A
  %507 = fsub double %506, 3.600000e+02
  %508 = fmul double %507, 3.600000e+02
  %509 = fsub double %506, 3.600000e+02
  %510 = fmul double %509, 3.600000e+02
  %511 = fsub double %506, 3.600000e+02
  %512 = fmul double %511, 3.600000e+02
  %513 = fsub double -0.000000e+00, %506
  %514 = fadd double %513, 3.600000e+02
  %515 = fdiv double %506, 3.600000e+02
  %516 = call double @cos(double %515) #3
  %517 = fsub double %490, %516
  %518 = fmul double %517, %516
  %519 = fsub double -0.000000e+00, %490
  %520 = fadd double %519, %516
  %521 = fsub double -0.000000e+00, %490
  %522 = fadd double %521, %516
  %523 = fsub double -0.000000e+00, %490
  %524 = fadd double %523, %516
  %525 = fsub double %490, %516
  %526 = fmul double %525, %516
  %527 = fsub double %490, %516
  %528 = fmul double %527, %516
  %529 = fsub double -0.000000e+00, %490
  %530 = fadd double %529, %516
  %531 = fsub double %490, %516
  %532 = fmul double %531, %516
  %533 = fmul double %490, %516
  %534 = fsub double %424, %533
  %535 = fmul double %534, %533
  %536 = fsub double %424, %533
  %537 = fmul double %536, %533
  %538 = fsub double %424, %533
  %539 = fmul double %538, %533
  %540 = fsub double %424, %533
  %541 = fmul double %540, %533
  %542 = fsub double %424, %533
  %543 = call double @sqrt(double %542) #3
  store double %543, double* %195, align 8
  %544 = load double, double* %194, align 8
  %545 = fcmp olt double %544, 0.000000e+00
  br label %9

; <label>:546:                                    ; preds = %115, %106
  %547 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %115

; <label>:548:                                    ; preds = %176, %167
  br label %176
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
