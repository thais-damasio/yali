; ModuleID = 'source-C-CXX/39/2154.c'
source_filename = "source-C-CXX/39/2154.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%lf%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %114

; <label>:9:                                      ; preds = %0, %114
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %17)
  %19 = load double, double* %11, align 8
  %20 = load double, double* %12, align 8
  %21 = fadd double %19, %20
  %22 = load double, double* %13, align 8
  %23 = fadd double %21, %22
  %24 = load double, double* %14, align 8
  %25 = fadd double %23, %24
  %26 = fdiv double %25, 2.000000e+00
  store double %26, double* %16, align 8
  %27 = load double, double* %16, align 8
  %28 = load double, double* %11, align 8
  %29 = fsub double %27, %28
  %30 = load double, double* %16, align 8
  %31 = load double, double* %12, align 8
  %32 = fsub double %30, %31
  %33 = fmul double %29, %32
  %34 = load double, double* %16, align 8
  %35 = load double, double* %13, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %36
  %38 = load double, double* %16, align 8
  %39 = load double, double* %14, align 8
  %40 = fsub double %38, %39
  %41 = fmul double %37, %40
  %42 = load double, double* %11, align 8
  %43 = load double, double* %12, align 8
  %44 = fmul double %42, %43
  %45 = load double, double* %13, align 8
  %46 = fmul double %44, %45
  %47 = load double, double* %14, align 8
  %48 = fmul double %46, %47
  %49 = load double, double* %17, align 8
  %50 = fmul double %49, 0x400921FB4D12D84A
  %51 = fdiv double %50, 1.800000e+02
  %52 = fdiv double %51, 2.000000e+00
  %53 = call double @cos(double %52) #3
  %54 = fmul double %48, %53
  %55 = load double, double* %17, align 8
  %56 = fmul double %55, 0x400921FB4D12D84A
  %57 = fdiv double %56, 1.800000e+02
  %58 = fdiv double %57, 2.000000e+00
  %59 = call double @cos(double %58) #3
  %60 = fmul double %54, %59
  %61 = fsub double %41, %60
  %62 = call double @sqrt(double %61) #3
  store double %62, double* %15, align 8
  %63 = load double, double* %16, align 8
  %64 = load double, double* %11, align 8
  %65 = fsub double %63, %64
  %66 = load double, double* %16, align 8
  %67 = load double, double* %12, align 8
  %68 = fsub double %66, %67
  %69 = fmul double %65, %68
  %70 = load double, double* %16, align 8
  %71 = load double, double* %13, align 8
  %72 = fsub double %70, %71
  %73 = fmul double %69, %72
  %74 = load double, double* %16, align 8
  %75 = load double, double* %14, align 8
  %76 = fsub double %74, %75
  %77 = fmul double %73, %76
  %78 = load double, double* %11, align 8
  %79 = load double, double* %12, align 8
  %80 = fmul double %78, %79
  %81 = load double, double* %13, align 8
  %82 = fmul double %80, %81
  %83 = load double, double* %14, align 8
  %84 = fmul double %82, %83
  %85 = load double, double* %17, align 8
  %86 = fmul double %85, 0x400921FB4D12D84A
  %87 = fdiv double %86, 1.800000e+02
  %88 = fdiv double %87, 2.000000e+00
  %89 = call double @cos(double %88) #3
  %90 = fmul double %84, %89
  %91 = load double, double* %17, align 8
  %92 = fmul double %91, 0x400921FB4D12D84A
  %93 = fdiv double %92, 1.800000e+02
  %94 = fdiv double %93, 2.000000e+00
  %95 = call double @cos(double %94) #3
  %96 = fmul double %90, %95
  %97 = fsub double %77, %96
  %98 = fcmp olt double %97, 0.000000e+00
  %99 = load i32, i32* @x
  %100 = load i32, i32* @y
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %107, label %114

; <label>:107:                                    ; preds = %9
  br i1 %98, label %108, label %110

; <label>:108:                                    ; preds = %107
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %113

; <label>:110:                                    ; preds = %107
  %111 = load double, double* %15, align 8
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %111)
  br label %113

; <label>:113:                                    ; preds = %110, %108
  ret i32 0

; <label>:114:                                    ; preds = %9, %0
  %115 = alloca i32, align 4
  %116 = alloca double, align 8
  %117 = alloca double, align 8
  %118 = alloca double, align 8
  %119 = alloca double, align 8
  %120 = alloca double, align 8
  %121 = alloca double, align 8
  %122 = alloca double, align 8
  store i32 0, i32* %115, align 4
  %123 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %116, double* %117, double* %118, double* %119, double* %122)
  %124 = load double, double* %116, align 8
  %125 = load double, double* %117, align 8
  %126 = fsub double -0.000000e+00, %124
  %127 = fadd double %126, %125
  %128 = fsub double -0.000000e+00, %124
  %129 = fadd double %128, %125
  %130 = fsub double -0.000000e+00, %124
  %131 = fadd double %130, %125
  %132 = fsub double -0.000000e+00, %124
  %133 = fadd double %132, %125
  %134 = fadd double %124, %125
  %135 = load double, double* %118, align 8
  %136 = fsub double %134, %135
  %137 = fmul double %136, %135
  %138 = fsub double -0.000000e+00, %134
  %139 = fadd double %138, %135
  %140 = fsub double -0.000000e+00, %134
  %141 = fadd double %140, %135
  %142 = fsub double %134, %135
  %143 = fmul double %142, %135
  %144 = fsub double %134, %135
  %145 = fmul double %144, %135
  %146 = fsub double -0.000000e+00, %134
  %147 = fadd double %146, %135
  %148 = fsub double -0.000000e+00, %134
  %149 = fadd double %148, %135
  %150 = fsub double -0.000000e+00, %134
  %151 = fadd double %150, %135
  %152 = fadd double %134, %135
  %153 = load double, double* %119, align 8
  %154 = fsub double %152, %153
  %155 = fmul double %154, %153
  %156 = fsub double %152, %153
  %157 = fmul double %156, %153
  %158 = fsub double %152, %153
  %159 = fmul double %158, %153
  %160 = fsub double -0.000000e+00, %152
  %161 = fadd double %160, %153
  %162 = fsub double %152, %153
  %163 = fmul double %162, %153
  %164 = fsub double -0.000000e+00, %152
  %165 = fadd double %164, %153
  %166 = fadd double %152, %153
  %167 = fsub double -0.000000e+00, %166
  %168 = fadd double %167, 2.000000e+00
  %169 = fsub double %166, 2.000000e+00
  %170 = fmul double %169, 2.000000e+00
  %171 = fsub double %166, 2.000000e+00
  %172 = fmul double %171, 2.000000e+00
  %173 = fsub double -0.000000e+00, %166
  %174 = fadd double %173, 2.000000e+00
  %175 = fsub double -0.000000e+00, %166
  %176 = fadd double %175, 2.000000e+00
  %177 = fdiv double %166, 2.000000e+00
  store double %177, double* %121, align 8
  %178 = load double, double* %121, align 8
  %179 = load double, double* %116, align 8
  %180 = fsub double %178, %179
  %181 = fmul double %180, %179
  %182 = fsub double %178, %179
  %183 = load double, double* %121, align 8
  %184 = load double, double* %117, align 8
  %185 = fsub double -0.000000e+00, %183
  %186 = fadd double %185, %184
  %187 = fsub double %183, %184
  %188 = fmul double %187, %184
  %189 = fsub double -0.000000e+00, %183
  %190 = fadd double %189, %184
  %191 = fsub double %183, %184
  %192 = fmul double %191, %184
  %193 = fsub double -0.000000e+00, %183
  %194 = fadd double %193, %184
  %195 = fsub double %183, %184
  %196 = fsub double %182, %195
  %197 = fmul double %196, %195
  %198 = fmul double %182, %195
  %199 = load double, double* %121, align 8
  %200 = load double, double* %118, align 8
  %201 = fsub double %199, %200
  %202 = fmul double %201, %200
  %203 = fsub double -0.000000e+00, %199
  %204 = fadd double %203, %200
  %205 = fsub double %199, %200
  %206 = fmul double %205, %200
  %207 = fsub double -0.000000e+00, %199
  %208 = fadd double %207, %200
  %209 = fsub double -0.000000e+00, %199
  %210 = fadd double %209, %200
  %211 = fsub double %199, %200
  %212 = fsub double -0.000000e+00, %198
  %213 = fadd double %212, %211
  %214 = fsub double %198, %211
  %215 = fmul double %214, %211
  %216 = fmul double %198, %211
  %217 = load double, double* %121, align 8
  %218 = load double, double* %119, align 8
  %219 = fsub double %217, %218
  %220 = fmul double %219, %218
  %221 = fsub double -0.000000e+00, %217
  %222 = fadd double %221, %218
  %223 = fsub double -0.000000e+00, %217
  %224 = fadd double %223, %218
  %225 = fsub double %217, %218
  %226 = fmul double %225, %218
  %227 = fsub double %217, %218
  %228 = fmul double %227, %218
  %229 = fsub double %217, %218
  %230 = fsub double %216, %229
  %231 = fmul double %230, %229
  %232 = fsub double %216, %229
  %233 = fmul double %232, %229
  %234 = fsub double -0.000000e+00, %216
  %235 = fadd double %234, %229
  %236 = fmul double %216, %229
  %237 = load double, double* %116, align 8
  %238 = load double, double* %117, align 8
  %239 = fsub double %237, %238
  %240 = fmul double %239, %238
  %241 = fsub double %237, %238
  %242 = fmul double %241, %238
  %243 = fmul double %237, %238
  %244 = load double, double* %118, align 8
  %245 = fsub double -0.000000e+00, %243
  %246 = fadd double %245, %244
  %247 = fmul double %243, %244
  %248 = load double, double* %119, align 8
  %249 = fsub double %247, %248
  %250 = fmul double %249, %248
  %251 = fsub double -0.000000e+00, %247
  %252 = fadd double %251, %248
  %253 = fsub double %247, %248
  %254 = fmul double %253, %248
  %255 = fmul double %247, %248
  %256 = load double, double* %122, align 8
  %257 = fsub double %256, 0x400921FB4D12D84A
  %258 = fmul double %257, 0x400921FB4D12D84A
  %259 = fmul double %256, 0x400921FB4D12D84A
  %260 = fsub double %259, 1.800000e+02
  %261 = fmul double %260, 1.800000e+02
  %262 = fsub double %259, 1.800000e+02
  %263 = fmul double %262, 1.800000e+02
  %264 = fsub double %259, 1.800000e+02
  %265 = fmul double %264, 1.800000e+02
  %266 = fsub double -0.000000e+00, %259
  %267 = fadd double %266, 1.800000e+02
  %268 = fsub double %259, 1.800000e+02
  %269 = fmul double %268, 1.800000e+02
  %270 = fdiv double %259, 1.800000e+02
  %271 = fsub double %270, 2.000000e+00
  %272 = fmul double %271, 2.000000e+00
  %273 = fsub double -0.000000e+00, %270
  %274 = fadd double %273, 2.000000e+00
  %275 = fsub double %270, 2.000000e+00
  %276 = fmul double %275, 2.000000e+00
  %277 = fsub double %270, 2.000000e+00
  %278 = fmul double %277, 2.000000e+00
  %279 = fdiv double %270, 2.000000e+00
  %280 = call double @cos(double %279) #3
  %281 = fsub double -0.000000e+00, %255
  %282 = fadd double %281, %280
  %283 = fsub double %255, %280
  %284 = fmul double %283, %280
  %285 = fmul double %255, %280
  %286 = load double, double* %122, align 8
  %287 = fsub double -0.000000e+00, %286
  %288 = fadd double %287, 0x400921FB4D12D84A
  %289 = fsub double -0.000000e+00, %286
  %290 = fadd double %289, 0x400921FB4D12D84A
  %291 = fsub double -0.000000e+00, %286
  %292 = fadd double %291, 0x400921FB4D12D84A
  %293 = fsub double %286, 0x400921FB4D12D84A
  %294 = fmul double %293, 0x400921FB4D12D84A
  %295 = fmul double %286, 0x400921FB4D12D84A
  %296 = fsub double %295, 1.800000e+02
  %297 = fmul double %296, 1.800000e+02
  %298 = fdiv double %295, 1.800000e+02
  %299 = fsub double %298, 2.000000e+00
  %300 = fmul double %299, 2.000000e+00
  %301 = fsub double %298, 2.000000e+00
  %302 = fmul double %301, 2.000000e+00
  %303 = fsub double %298, 2.000000e+00
  %304 = fmul double %303, 2.000000e+00
  %305 = fsub double -0.000000e+00, %298
  %306 = fadd double %305, 2.000000e+00
  %307 = fdiv double %298, 2.000000e+00
  %308 = call double @cos(double %307) #3
  %309 = fsub double -0.000000e+00, %285
  %310 = fadd double %309, %308
  %311 = fsub double %285, %308
  %312 = fmul double %311, %308
  %313 = fsub double %285, %308
  %314 = fmul double %313, %308
  %315 = fmul double %285, %308
  %316 = fsub double %236, %315
  %317 = fmul double %316, %315
  %318 = fsub double -0.000000e+00, %236
  %319 = fadd double %318, %315
  %320 = fsub double %236, %315
  %321 = call double @sqrt(double %320) #3
  store double %321, double* %120, align 8
  %322 = load double, double* %121, align 8
  %323 = load double, double* %116, align 8
  %324 = fsub double -0.000000e+00, %322
  %325 = fadd double %324, %323
  %326 = fsub double %322, %323
  %327 = fmul double %326, %323
  %328 = fsub double %322, %323
  %329 = fmul double %328, %323
  %330 = fsub double %322, %323
  %331 = fmul double %330, %323
  %332 = fsub double %322, %323
  %333 = load double, double* %121, align 8
  %334 = load double, double* %117, align 8
  %335 = fsub double -0.000000e+00, %333
  %336 = fadd double %335, %334
  %337 = fsub double %333, %334
  %338 = fmul double %337, %334
  %339 = fsub double %333, %334
  %340 = fmul double %339, %334
  %341 = fsub double %333, %334
  %342 = fmul double %341, %334
  %343 = fsub double %333, %334
  %344 = fsub double %332, %343
  %345 = fmul double %344, %343
  %346 = fsub double %332, %343
  %347 = fmul double %346, %343
  %348 = fsub double %332, %343
  %349 = fmul double %348, %343
  %350 = fsub double %332, %343
  %351 = fmul double %350, %343
  %352 = fsub double %332, %343
  %353 = fmul double %352, %343
  %354 = fmul double %332, %343
  %355 = load double, double* %121, align 8
  %356 = load double, double* %118, align 8
  %357 = fsub double -0.000000e+00, %355
  %358 = fadd double %357, %356
  %359 = fsub double -0.000000e+00, %355
  %360 = fadd double %359, %356
  %361 = fsub double %355, %356
  %362 = fsub double %354, %361
  %363 = fmul double %362, %361
  %364 = fmul double %354, %361
  %365 = load double, double* %121, align 8
  %366 = load double, double* %119, align 8
  %367 = fsub double -0.000000e+00, %365
  %368 = fadd double %367, %366
  %369 = fsub double %365, %366
  %370 = fsub double %364, %369
  %371 = fmul double %370, %369
  %372 = fsub double %364, %369
  %373 = fmul double %372, %369
  %374 = fsub double %364, %369
  %375 = fmul double %374, %369
  %376 = fsub double %364, %369
  %377 = fmul double %376, %369
  %378 = fsub double %364, %369
  %379 = fmul double %378, %369
  %380 = fmul double %364, %369
  %381 = load double, double* %116, align 8
  %382 = load double, double* %117, align 8
  %383 = fsub double %381, %382
  %384 = fmul double %383, %382
  %385 = fsub double %381, %382
  %386 = fmul double %385, %382
  %387 = fsub double %381, %382
  %388 = fmul double %387, %382
  %389 = fmul double %381, %382
  %390 = load double, double* %118, align 8
  %391 = fsub double %389, %390
  %392 = fmul double %391, %390
  %393 = fmul double %389, %390
  %394 = load double, double* %119, align 8
  %395 = fsub double -0.000000e+00, %393
  %396 = fadd double %395, %394
  %397 = fsub double -0.000000e+00, %393
  %398 = fadd double %397, %394
  %399 = fsub double %393, %394
  %400 = fmul double %399, %394
  %401 = fmul double %393, %394
  %402 = load double, double* %122, align 8
  %403 = fsub double %402, 0x400921FB4D12D84A
  %404 = fmul double %403, 0x400921FB4D12D84A
  %405 = fsub double %402, 0x400921FB4D12D84A
  %406 = fmul double %405, 0x400921FB4D12D84A
  %407 = fmul double %402, 0x400921FB4D12D84A
  %408 = fsub double %407, 1.800000e+02
  %409 = fmul double %408, 1.800000e+02
  %410 = fsub double -0.000000e+00, %407
  %411 = fadd double %410, 1.800000e+02
  %412 = fdiv double %407, 1.800000e+02
  %413 = fdiv double %412, 2.000000e+00
  %414 = call double @cos(double %413) #3
  %415 = fsub double %401, %414
  %416 = fmul double %415, %414
  %417 = fsub double %401, %414
  %418 = fmul double %417, %414
  %419 = fsub double %401, %414
  %420 = fmul double %419, %414
  %421 = fsub double -0.000000e+00, %401
  %422 = fadd double %421, %414
  %423 = fmul double %401, %414
  %424 = load double, double* %122, align 8
  %425 = fsub double %424, 0x400921FB4D12D84A
  %426 = fmul double %425, 0x400921FB4D12D84A
  %427 = fsub double %424, 0x400921FB4D12D84A
  %428 = fmul double %427, 0x400921FB4D12D84A
  %429 = fmul double %424, 0x400921FB4D12D84A
  %430 = fsub double %429, 1.800000e+02
  %431 = fmul double %430, 1.800000e+02
  %432 = fsub double -0.000000e+00, %429
  %433 = fadd double %432, 1.800000e+02
  %434 = fsub double -0.000000e+00, %429
  %435 = fadd double %434, 1.800000e+02
  %436 = fdiv double %429, 1.800000e+02
  %437 = fsub double -0.000000e+00, %436
  %438 = fadd double %437, 2.000000e+00
  %439 = fsub double -0.000000e+00, %436
  %440 = fadd double %439, 2.000000e+00
  %441 = fsub double -0.000000e+00, %436
  %442 = fadd double %441, 2.000000e+00
  %443 = fsub double -0.000000e+00, %436
  %444 = fadd double %443, 2.000000e+00
  %445 = fsub double %436, 2.000000e+00
  %446 = fmul double %445, 2.000000e+00
  %447 = fdiv double %436, 2.000000e+00
  %448 = call double @cos(double %447) #3
  %449 = fsub double %423, %448
  %450 = fmul double %449, %448
  %451 = fsub double -0.000000e+00, %423
  %452 = fadd double %451, %448
  %453 = fsub double -0.000000e+00, %423
  %454 = fadd double %453, %448
  %455 = fsub double %423, %448
  %456 = fmul double %455, %448
  %457 = fsub double %423, %448
  %458 = fmul double %457, %448
  %459 = fsub double -0.000000e+00, %423
  %460 = fadd double %459, %448
  %461 = fsub double %423, %448
  %462 = fmul double %461, %448
  %463 = fmul double %423, %448
  %464 = fsub double %380, %463
  %465 = fmul double %464, %463
  %466 = fsub double %380, %463
  %467 = fmul double %466, %463
  %468 = fsub double -0.000000e+00, %380
  %469 = fadd double %468, %463
  %470 = fsub double %380, %463
  %471 = fmul double %470, %463
  %472 = fsub double %380, %463
  %473 = fcmp olt double %472, 0.000000e+00
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
