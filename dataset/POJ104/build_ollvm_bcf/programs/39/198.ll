; ModuleID = 'source-C-CXX/39/198.c'
source_filename = "source-C-CXX/39/198.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%.4lf\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), double* %6, double* %7, double* %8, double* %9)
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32* %10)
  %13 = load double, double* %6, align 8
  %14 = load double, double* %7, align 8
  %15 = fadd double %13, %14
  %16 = load double, double* %8, align 8
  %17 = fadd double %15, %16
  %18 = load double, double* %9, align 8
  %19 = fadd double %17, %18
  %20 = fmul double 5.000000e-01, %19
  %21 = load double, double* %6, align 8
  %22 = fsub double %20, %21
  %23 = load double, double* %6, align 8
  %24 = load double, double* %7, align 8
  %25 = fadd double %23, %24
  %26 = load double, double* %8, align 8
  %27 = fadd double %25, %26
  %28 = load double, double* %9, align 8
  %29 = fadd double %27, %28
  %30 = fmul double 5.000000e-01, %29
  %31 = load double, double* %7, align 8
  %32 = fsub double %30, %31
  %33 = fmul double %22, %32
  %34 = load double, double* %6, align 8
  %35 = load double, double* %7, align 8
  %36 = fadd double %34, %35
  %37 = load double, double* %8, align 8
  %38 = fadd double %36, %37
  %39 = load double, double* %9, align 8
  %40 = fadd double %38, %39
  %41 = fmul double 5.000000e-01, %40
  %42 = load double, double* %8, align 8
  %43 = fsub double %41, %42
  %44 = fmul double %33, %43
  %45 = load double, double* %6, align 8
  %46 = load double, double* %7, align 8
  %47 = fadd double %45, %46
  %48 = load double, double* %8, align 8
  %49 = fadd double %47, %48
  %50 = load double, double* %9, align 8
  %51 = fadd double %49, %50
  %52 = fmul double 5.000000e-01, %51
  %53 = load double, double* %9, align 8
  %54 = fsub double %52, %53
  %55 = fmul double %44, %54
  %56 = load double, double* %6, align 8
  %57 = load double, double* %7, align 8
  %58 = fmul double %56, %57
  %59 = load double, double* %8, align 8
  %60 = fmul double %58, %59
  %61 = load double, double* %9, align 8
  %62 = fmul double %60, %61
  %63 = load i32, i32* %10, align 4
  %64 = sitofp i32 %63 to double
  %65 = fdiv double %64, 1.800000e+02
  %66 = fdiv double %65, 2.000000e+00
  %67 = fmul double %66, 0x400921FB4D12D84A
  %68 = call double @cos(double %67) #3
  %69 = fmul double %62, %68
  %70 = load i32, i32* %10, align 4
  %71 = sitofp i32 %70 to double
  %72 = fdiv double %71, 1.800000e+02
  %73 = fdiv double %72, 2.000000e+00
  %74 = fmul double %73, 0x400921FB4D12D84A
  %75 = call double @cos(double %74) #3
  %76 = fmul double %69, %75
  %77 = fsub double %55, %76
  %78 = fcmp olt double %77, 0.000000e+00
  br i1 %78, label %79, label %99

; <label>:79:                                     ; preds = %2
  %80 = load i32, i32* @x
  %81 = load i32, i32* @y
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %88, label %253

; <label>:88:                                     ; preds = %79, %253
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  %90 = load i32, i32* @x
  %91 = load i32, i32* @y
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %98, label %253

; <label>:98:                                     ; preds = %88
  br label %99

; <label>:99:                                     ; preds = %98, %2
  %100 = load double, double* %6, align 8
  %101 = load double, double* %7, align 8
  %102 = fadd double %100, %101
  %103 = load double, double* %8, align 8
  %104 = fadd double %102, %103
  %105 = load double, double* %9, align 8
  %106 = fadd double %104, %105
  %107 = fmul double 5.000000e-01, %106
  %108 = load double, double* %6, align 8
  %109 = fsub double %107, %108
  %110 = load double, double* %6, align 8
  %111 = load double, double* %7, align 8
  %112 = fadd double %110, %111
  %113 = load double, double* %8, align 8
  %114 = fadd double %112, %113
  %115 = load double, double* %9, align 8
  %116 = fadd double %114, %115
  %117 = fmul double 5.000000e-01, %116
  %118 = load double, double* %7, align 8
  %119 = fsub double %117, %118
  %120 = fmul double %109, %119
  %121 = load double, double* %6, align 8
  %122 = load double, double* %7, align 8
  %123 = fadd double %121, %122
  %124 = load double, double* %8, align 8
  %125 = fadd double %123, %124
  %126 = load double, double* %9, align 8
  %127 = fadd double %125, %126
  %128 = fmul double 5.000000e-01, %127
  %129 = load double, double* %8, align 8
  %130 = fsub double %128, %129
  %131 = fmul double %120, %130
  %132 = load double, double* %6, align 8
  %133 = load double, double* %7, align 8
  %134 = fadd double %132, %133
  %135 = load double, double* %8, align 8
  %136 = fadd double %134, %135
  %137 = load double, double* %9, align 8
  %138 = fadd double %136, %137
  %139 = fmul double 5.000000e-01, %138
  %140 = load double, double* %9, align 8
  %141 = fsub double %139, %140
  %142 = fmul double %131, %141
  %143 = load double, double* %6, align 8
  %144 = load double, double* %7, align 8
  %145 = fmul double %143, %144
  %146 = load double, double* %8, align 8
  %147 = fmul double %145, %146
  %148 = load double, double* %9, align 8
  %149 = fmul double %147, %148
  %150 = load i32, i32* %10, align 4
  %151 = sitofp i32 %150 to double
  %152 = fdiv double %151, 1.800000e+02
  %153 = fdiv double %152, 2.000000e+00
  %154 = fmul double %153, 0x400921FB4D12D84A
  %155 = call double @cos(double %154) #3
  %156 = fmul double %149, %155
  %157 = load i32, i32* %10, align 4
  %158 = sitofp i32 %157 to double
  %159 = fdiv double %158, 1.800000e+02
  %160 = fdiv double %159, 2.000000e+00
  %161 = fmul double %160, 0x400921FB4D12D84A
  %162 = call double @cos(double %161) #3
  %163 = fmul double %156, %162
  %164 = fsub double %142, %163
  %165 = fcmp ogt double %164, 0.000000e+00
  br i1 %165, label %166, label %252

; <label>:166:                                    ; preds = %99
  %167 = load i32, i32* @x
  %168 = load i32, i32* @y
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %175, label %255

; <label>:175:                                    ; preds = %166, %255
  %176 = load double, double* %6, align 8
  %177 = load double, double* %7, align 8
  %178 = fadd double %176, %177
  %179 = load double, double* %8, align 8
  %180 = fadd double %178, %179
  %181 = load double, double* %9, align 8
  %182 = fadd double %180, %181
  %183 = fmul double 5.000000e-01, %182
  %184 = load double, double* %6, align 8
  %185 = fsub double %183, %184
  %186 = load double, double* %6, align 8
  %187 = load double, double* %7, align 8
  %188 = fadd double %186, %187
  %189 = load double, double* %8, align 8
  %190 = fadd double %188, %189
  %191 = load double, double* %9, align 8
  %192 = fadd double %190, %191
  %193 = fmul double 5.000000e-01, %192
  %194 = load double, double* %7, align 8
  %195 = fsub double %193, %194
  %196 = fmul double %185, %195
  %197 = load double, double* %6, align 8
  %198 = load double, double* %7, align 8
  %199 = fadd double %197, %198
  %200 = load double, double* %8, align 8
  %201 = fadd double %199, %200
  %202 = load double, double* %9, align 8
  %203 = fadd double %201, %202
  %204 = fmul double 5.000000e-01, %203
  %205 = load double, double* %8, align 8
  %206 = fsub double %204, %205
  %207 = fmul double %196, %206
  %208 = load double, double* %6, align 8
  %209 = load double, double* %7, align 8
  %210 = fadd double %208, %209
  %211 = load double, double* %8, align 8
  %212 = fadd double %210, %211
  %213 = load double, double* %9, align 8
  %214 = fadd double %212, %213
  %215 = fmul double 5.000000e-01, %214
  %216 = load double, double* %9, align 8
  %217 = fsub double %215, %216
  %218 = fmul double %207, %217
  %219 = load double, double* %6, align 8
  %220 = load double, double* %7, align 8
  %221 = fmul double %219, %220
  %222 = load double, double* %8, align 8
  %223 = fmul double %221, %222
  %224 = load double, double* %9, align 8
  %225 = fmul double %223, %224
  %226 = load i32, i32* %10, align 4
  %227 = sitofp i32 %226 to double
  %228 = fdiv double %227, 1.800000e+02
  %229 = fdiv double %228, 2.000000e+00
  %230 = fmul double %229, 0x400921FB4D12D84A
  %231 = call double @cos(double %230) #3
  %232 = fmul double %225, %231
  %233 = load i32, i32* %10, align 4
  %234 = sitofp i32 %233 to double
  %235 = fdiv double %234, 1.800000e+02
  %236 = fdiv double %235, 2.000000e+00
  %237 = fmul double %236, 0x400921FB4D12D84A
  %238 = call double @cos(double %237) #3
  %239 = fmul double %232, %238
  %240 = fsub double %218, %239
  %241 = call double @sqrt(double %240) #3
  %242 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), double %241)
  %243 = load i32, i32* @x
  %244 = load i32, i32* @y
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %251, label %255

; <label>:251:                                    ; preds = %175
  br label %252

; <label>:252:                                    ; preds = %251, %99
  ret i32 0

; <label>:253:                                    ; preds = %88, %79
  %254 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %88

; <label>:255:                                    ; preds = %175, %166
  %256 = load double, double* %6, align 8
  %257 = load double, double* %7, align 8
  %258 = fsub double %256, %257
  %259 = fmul double %258, %257
  %260 = fsub double %256, %257
  %261 = fmul double %260, %257
  %262 = fsub double -0.000000e+00, %256
  %263 = fadd double %262, %257
  %264 = fsub double %256, %257
  %265 = fmul double %264, %257
  %266 = fsub double -0.000000e+00, %256
  %267 = fadd double %266, %257
  %268 = fadd double %256, %257
  %269 = load double, double* %8, align 8
  %270 = fsub double %268, %269
  %271 = fmul double %270, %269
  %272 = fsub double -0.000000e+00, %268
  %273 = fadd double %272, %269
  %274 = fsub double -0.000000e+00, %268
  %275 = fadd double %274, %269
  %276 = fadd double %268, %269
  %277 = load double, double* %9, align 8
  %278 = fsub double %276, %277
  %279 = fmul double %278, %277
  %280 = fsub double -0.000000e+00, %276
  %281 = fadd double %280, %277
  %282 = fsub double -0.000000e+00, %276
  %283 = fadd double %282, %277
  %284 = fadd double %276, %277
  %285 = fsub double 5.000000e-01, %284
  %286 = fmul double %285, %284
  %287 = fsub double 5.000000e-01, %284
  %288 = fmul double %287, %284
  %289 = fsub double 5.000000e-01, %284
  %290 = fmul double %289, %284
  %291 = fmul double 5.000000e-01, %284
  %292 = load double, double* %6, align 8
  %293 = fsub double %291, %292
  %294 = fmul double %293, %292
  %295 = fsub double -0.000000e+00, %291
  %296 = fadd double %295, %292
  %297 = fsub double %291, %292
  %298 = fmul double %297, %292
  %299 = fsub double %291, %292
  %300 = fmul double %299, %292
  %301 = fsub double %291, %292
  %302 = fmul double %301, %292
  %303 = fsub double %291, %292
  %304 = load double, double* %6, align 8
  %305 = load double, double* %7, align 8
  %306 = fsub double -0.000000e+00, %304
  %307 = fadd double %306, %305
  %308 = fsub double %304, %305
  %309 = fmul double %308, %305
  %310 = fadd double %304, %305
  %311 = load double, double* %8, align 8
  %312 = fsub double -0.000000e+00, %310
  %313 = fadd double %312, %311
  %314 = fsub double -0.000000e+00, %310
  %315 = fadd double %314, %311
  %316 = fsub double %310, %311
  %317 = fmul double %316, %311
  %318 = fsub double -0.000000e+00, %310
  %319 = fadd double %318, %311
  %320 = fsub double -0.000000e+00, %310
  %321 = fadd double %320, %311
  %322 = fsub double -0.000000e+00, %310
  %323 = fadd double %322, %311
  %324 = fsub double %310, %311
  %325 = fmul double %324, %311
  %326 = fadd double %310, %311
  %327 = load double, double* %9, align 8
  %328 = fsub double %326, %327
  %329 = fmul double %328, %327
  %330 = fsub double -0.000000e+00, %326
  %331 = fadd double %330, %327
  %332 = fsub double -0.000000e+00, %326
  %333 = fadd double %332, %327
  %334 = fsub double -0.000000e+00, %326
  %335 = fadd double %334, %327
  %336 = fadd double %326, %327
  %337 = fsub double 5.000000e-01, %336
  %338 = fmul double %337, %336
  %339 = fsub double 5.000000e-01, %336
  %340 = fmul double %339, %336
  %341 = fsub double 5.000000e-01, %336
  %342 = fmul double %341, %336
  %343 = fsub double 5.000000e-01, %336
  %344 = fmul double %343, %336
  %345 = fsub double 5.000000e-01, %336
  %346 = fmul double %345, %336
  %347 = fmul double 5.000000e-01, %336
  %348 = load double, double* %7, align 8
  %349 = fsub double %347, %348
  %350 = fmul double %349, %348
  %351 = fsub double %347, %348
  %352 = fmul double %351, %348
  %353 = fsub double %347, %348
  %354 = fmul double %353, %348
  %355 = fsub double -0.000000e+00, %347
  %356 = fadd double %355, %348
  %357 = fsub double -0.000000e+00, %347
  %358 = fadd double %357, %348
  %359 = fsub double %347, %348
  %360 = fsub double -0.000000e+00, %303
  %361 = fadd double %360, %359
  %362 = fsub double -0.000000e+00, %303
  %363 = fadd double %362, %359
  %364 = fsub double -0.000000e+00, %303
  %365 = fadd double %364, %359
  %366 = fsub double %303, %359
  %367 = fmul double %366, %359
  %368 = fsub double %303, %359
  %369 = fmul double %368, %359
  %370 = fmul double %303, %359
  %371 = load double, double* %6, align 8
  %372 = load double, double* %7, align 8
  %373 = fsub double %371, %372
  %374 = fmul double %373, %372
  %375 = fsub double %371, %372
  %376 = fmul double %375, %372
  %377 = fsub double -0.000000e+00, %371
  %378 = fadd double %377, %372
  %379 = fsub double -0.000000e+00, %371
  %380 = fadd double %379, %372
  %381 = fadd double %371, %372
  %382 = load double, double* %8, align 8
  %383 = fsub double -0.000000e+00, %381
  %384 = fadd double %383, %382
  %385 = fsub double %381, %382
  %386 = fmul double %385, %382
  %387 = fsub double %381, %382
  %388 = fmul double %387, %382
  %389 = fsub double %381, %382
  %390 = fmul double %389, %382
  %391 = fadd double %381, %382
  %392 = load double, double* %9, align 8
  %393 = fsub double -0.000000e+00, %391
  %394 = fadd double %393, %392
  %395 = fsub double %391, %392
  %396 = fmul double %395, %392
  %397 = fsub double %391, %392
  %398 = fmul double %397, %392
  %399 = fsub double %391, %392
  %400 = fmul double %399, %392
  %401 = fsub double %391, %392
  %402 = fmul double %401, %392
  %403 = fsub double -0.000000e+00, %391
  %404 = fadd double %403, %392
  %405 = fsub double -0.000000e+00, %391
  %406 = fadd double %405, %392
  %407 = fadd double %391, %392
  %408 = fmul double 5.000000e-01, %407
  %409 = load double, double* %8, align 8
  %410 = fsub double %408, %409
  %411 = fmul double %410, %409
  %412 = fsub double %408, %409
  %413 = fsub double -0.000000e+00, %370
  %414 = fadd double %413, %412
  %415 = fsub double %370, %412
  %416 = fmul double %415, %412
  %417 = fsub double -0.000000e+00, %370
  %418 = fadd double %417, %412
  %419 = fmul double %370, %412
  %420 = load double, double* %6, align 8
  %421 = load double, double* %7, align 8
  %422 = fsub double -0.000000e+00, %420
  %423 = fadd double %422, %421
  %424 = fsub double %420, %421
  %425 = fmul double %424, %421
  %426 = fsub double %420, %421
  %427 = fmul double %426, %421
  %428 = fsub double %420, %421
  %429 = fmul double %428, %421
  %430 = fadd double %420, %421
  %431 = load double, double* %8, align 8
  %432 = fsub double %430, %431
  %433 = fmul double %432, %431
  %434 = fsub double %430, %431
  %435 = fmul double %434, %431
  %436 = fsub double %430, %431
  %437 = fmul double %436, %431
  %438 = fsub double -0.000000e+00, %430
  %439 = fadd double %438, %431
  %440 = fadd double %430, %431
  %441 = load double, double* %9, align 8
  %442 = fsub double %440, %441
  %443 = fmul double %442, %441
  %444 = fsub double -0.000000e+00, %440
  %445 = fadd double %444, %441
  %446 = fsub double %440, %441
  %447 = fmul double %446, %441
  %448 = fsub double -0.000000e+00, %440
  %449 = fadd double %448, %441
  %450 = fsub double -0.000000e+00, %440
  %451 = fadd double %450, %441
  %452 = fsub double %440, %441
  %453 = fmul double %452, %441
  %454 = fsub double %440, %441
  %455 = fmul double %454, %441
  %456 = fsub double %440, %441
  %457 = fmul double %456, %441
  %458 = fadd double %440, %441
  %459 = fsub double -0.000000e+00, 5.000000e-01
  %460 = fadd double %459, %458
  %461 = fsub double -0.000000e+00, 5.000000e-01
  %462 = fadd double %461, %458
  %463 = fmul double 5.000000e-01, %458
  %464 = load double, double* %9, align 8
  %465 = fsub double -0.000000e+00, %463
  %466 = fadd double %465, %464
  %467 = fsub double -0.000000e+00, %463
  %468 = fadd double %467, %464
  %469 = fsub double %463, %464
  %470 = fmul double %469, %464
  %471 = fsub double -0.000000e+00, %463
  %472 = fadd double %471, %464
  %473 = fsub double %463, %464
  %474 = fmul double %473, %464
  %475 = fsub double %463, %464
  %476 = fmul double %475, %464
  %477 = fsub double -0.000000e+00, %463
  %478 = fadd double %477, %464
  %479 = fsub double %463, %464
  %480 = fsub double -0.000000e+00, %419
  %481 = fadd double %480, %479
  %482 = fsub double %419, %479
  %483 = fmul double %482, %479
  %484 = fsub double -0.000000e+00, %419
  %485 = fadd double %484, %479
  %486 = fsub double %419, %479
  %487 = fmul double %486, %479
  %488 = fmul double %419, %479
  %489 = load double, double* %6, align 8
  %490 = load double, double* %7, align 8
  %491 = fsub double %489, %490
  %492 = fmul double %491, %490
  %493 = fsub double %489, %490
  %494 = fmul double %493, %490
  %495 = fsub double %489, %490
  %496 = fmul double %495, %490
  %497 = fsub double %489, %490
  %498 = fmul double %497, %490
  %499 = fsub double -0.000000e+00, %489
  %500 = fadd double %499, %490
  %501 = fmul double %489, %490
  %502 = load double, double* %8, align 8
  %503 = fsub double -0.000000e+00, %501
  %504 = fadd double %503, %502
  %505 = fmul double %501, %502
  %506 = load double, double* %9, align 8
  %507 = fsub double %505, %506
  %508 = fmul double %507, %506
  %509 = fsub double -0.000000e+00, %505
  %510 = fadd double %509, %506
  %511 = fsub double %505, %506
  %512 = fmul double %511, %506
  %513 = fsub double -0.000000e+00, %505
  %514 = fadd double %513, %506
  %515 = fsub double -0.000000e+00, %505
  %516 = fadd double %515, %506
  %517 = fsub double %505, %506
  %518 = fmul double %517, %506
  %519 = fsub double %505, %506
  %520 = fmul double %519, %506
  %521 = fmul double %505, %506
  %522 = load i32, i32* %10, align 4
  %523 = sitofp i32 %522 to double
  %524 = fsub double %523, 1.800000e+02
  %525 = fmul double %524, 1.800000e+02
  %526 = fsub double -0.000000e+00, %523
  %527 = fadd double %526, 1.800000e+02
  %528 = fsub double -0.000000e+00, %523
  %529 = fadd double %528, 1.800000e+02
  %530 = fsub double %523, 1.800000e+02
  %531 = fmul double %530, 1.800000e+02
  %532 = fdiv double %523, 1.800000e+02
  %533 = fsub double -0.000000e+00, %532
  %534 = fadd double %533, 2.000000e+00
  %535 = fdiv double %532, 2.000000e+00
  %536 = fsub double -0.000000e+00, %535
  %537 = fadd double %536, 0x400921FB4D12D84A
  %538 = fsub double -0.000000e+00, %535
  %539 = fadd double %538, 0x400921FB4D12D84A
  %540 = fsub double -0.000000e+00, %535
  %541 = fadd double %540, 0x400921FB4D12D84A
  %542 = fsub double -0.000000e+00, %535
  %543 = fadd double %542, 0x400921FB4D12D84A
  %544 = fsub double %535, 0x400921FB4D12D84A
  %545 = fmul double %544, 0x400921FB4D12D84A
  %546 = fsub double -0.000000e+00, %535
  %547 = fadd double %546, 0x400921FB4D12D84A
  %548 = fmul double %535, 0x400921FB4D12D84A
  %549 = call double @cos(double %548) #3
  %550 = fsub double %521, %549
  %551 = fmul double %550, %549
  %552 = fsub double -0.000000e+00, %521
  %553 = fadd double %552, %549
  %554 = fsub double %521, %549
  %555 = fmul double %554, %549
  %556 = fsub double %521, %549
  %557 = fmul double %556, %549
  %558 = fsub double %521, %549
  %559 = fmul double %558, %549
  %560 = fmul double %521, %549
  %561 = load i32, i32* %10, align 4
  %562 = sitofp i32 %561 to double
  %563 = fsub double %562, 1.800000e+02
  %564 = fmul double %563, 1.800000e+02
  %565 = fdiv double %562, 1.800000e+02
  %566 = fsub double -0.000000e+00, %565
  %567 = fadd double %566, 2.000000e+00
  %568 = fsub double -0.000000e+00, %565
  %569 = fadd double %568, 2.000000e+00
  %570 = fsub double %565, 2.000000e+00
  %571 = fmul double %570, 2.000000e+00
  %572 = fsub double %565, 2.000000e+00
  %573 = fmul double %572, 2.000000e+00
  %574 = fsub double %565, 2.000000e+00
  %575 = fmul double %574, 2.000000e+00
  %576 = fsub double -0.000000e+00, %565
  %577 = fadd double %576, 2.000000e+00
  %578 = fdiv double %565, 2.000000e+00
  %579 = fsub double %578, 0x400921FB4D12D84A
  %580 = fmul double %579, 0x400921FB4D12D84A
  %581 = fsub double -0.000000e+00, %578
  %582 = fadd double %581, 0x400921FB4D12D84A
  %583 = fsub double %578, 0x400921FB4D12D84A
  %584 = fmul double %583, 0x400921FB4D12D84A
  %585 = fsub double %578, 0x400921FB4D12D84A
  %586 = fmul double %585, 0x400921FB4D12D84A
  %587 = fmul double %578, 0x400921FB4D12D84A
  %588 = call double @cos(double %587) #3
  %589 = fsub double -0.000000e+00, %560
  %590 = fadd double %589, %588
  %591 = fsub double -0.000000e+00, %560
  %592 = fadd double %591, %588
  %593 = fsub double -0.000000e+00, %560
  %594 = fadd double %593, %588
  %595 = fsub double %560, %588
  %596 = fmul double %595, %588
  %597 = fsub double %560, %588
  %598 = fmul double %597, %588
  %599 = fsub double -0.000000e+00, %560
  %600 = fadd double %599, %588
  %601 = fmul double %560, %588
  %602 = fsub double -0.000000e+00, %488
  %603 = fadd double %602, %601
  %604 = fsub double %488, %601
  %605 = fmul double %604, %601
  %606 = fsub double %488, %601
  %607 = fmul double %606, %601
  %608 = fsub double %488, %601
  %609 = fmul double %608, %601
  %610 = fsub double -0.000000e+00, %488
  %611 = fadd double %610, %601
  %612 = fsub double %488, %601
  %613 = fmul double %612, %601
  %614 = fsub double %488, %601
  %615 = call double @sqrt(double %614) #3
  %616 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), double %615)
  br label %175
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
