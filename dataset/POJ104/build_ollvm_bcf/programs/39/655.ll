; ModuleID = 'source-C-CXX/39/655.c'
source_filename = "source-C-CXX/39/655.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [21 x i8] c"%lf\0A%lf\0A%lf\0A%lf\0A%lf\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %216

; <label>:9:                                      ; preds = %0, %216
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %15)
  %19 = load double, double* %11, align 8
  %20 = load double, double* %12, align 8
  %21 = fadd double %19, %20
  %22 = load double, double* %13, align 8
  %23 = fadd double %21, %22
  %24 = load double, double* %14, align 8
  %25 = fadd double %23, %24
  %26 = fmul double 5.000000e-01, %25
  %27 = load double, double* %11, align 8
  %28 = fsub double %26, %27
  %29 = load double, double* %11, align 8
  %30 = load double, double* %12, align 8
  %31 = fadd double %29, %30
  %32 = load double, double* %13, align 8
  %33 = fadd double %31, %32
  %34 = load double, double* %14, align 8
  %35 = fadd double %33, %34
  %36 = fmul double 5.000000e-01, %35
  %37 = load double, double* %12, align 8
  %38 = fsub double %36, %37
  %39 = fmul double %28, %38
  %40 = load double, double* %11, align 8
  %41 = load double, double* %12, align 8
  %42 = fadd double %40, %41
  %43 = load double, double* %13, align 8
  %44 = fadd double %42, %43
  %45 = load double, double* %14, align 8
  %46 = fadd double %44, %45
  %47 = fmul double 5.000000e-01, %46
  %48 = load double, double* %13, align 8
  %49 = fsub double %47, %48
  %50 = fmul double %39, %49
  %51 = load double, double* %11, align 8
  %52 = load double, double* %12, align 8
  %53 = fadd double %51, %52
  %54 = load double, double* %13, align 8
  %55 = fadd double %53, %54
  %56 = load double, double* %14, align 8
  %57 = fadd double %55, %56
  %58 = fmul double 5.000000e-01, %57
  %59 = load double, double* %14, align 8
  %60 = fsub double %58, %59
  %61 = fmul double %50, %60
  %62 = load double, double* %11, align 8
  %63 = load double, double* %12, align 8
  %64 = fmul double %62, %63
  %65 = load double, double* %13, align 8
  %66 = fmul double %64, %65
  %67 = load double, double* %14, align 8
  %68 = fmul double %66, %67
  %69 = load double, double* %15, align 8
  %70 = fmul double 1.000000e+02, %69
  %71 = fdiv double %70, 3.600000e+02
  %72 = call double @cos(double %71) #3
  %73 = fmul double %68, %72
  %74 = load double, double* %15, align 8
  %75 = fmul double 1.000000e+02, %74
  %76 = fdiv double %75, 3.600000e+02
  %77 = call double @cos(double %76) #3
  %78 = fmul double %73, %77
  %79 = fsub double %61, %78
  store double %79, double* %17, align 8
  %80 = load double, double* %17, align 8
  %81 = fcmp ogt double %80, 0.000000e+00
  %82 = load i32, i32* @x
  %83 = load i32, i32* @y
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %90, label %216

; <label>:90:                                     ; preds = %9
  br i1 %81, label %91, label %174

; <label>:91:                                     ; preds = %90
  %92 = load i32, i32* @x
  %93 = load i32, i32* @y
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %100, label %473

; <label>:100:                                    ; preds = %91, %473
  %101 = load double, double* %11, align 8
  %102 = load double, double* %12, align 8
  %103 = fadd double %101, %102
  %104 = load double, double* %13, align 8
  %105 = fadd double %103, %104
  %106 = load double, double* %14, align 8
  %107 = fadd double %105, %106
  %108 = fmul double 5.000000e-01, %107
  %109 = load double, double* %11, align 8
  %110 = fsub double %108, %109
  %111 = load double, double* %11, align 8
  %112 = load double, double* %12, align 8
  %113 = fadd double %111, %112
  %114 = load double, double* %13, align 8
  %115 = fadd double %113, %114
  %116 = load double, double* %14, align 8
  %117 = fadd double %115, %116
  %118 = fmul double 5.000000e-01, %117
  %119 = load double, double* %12, align 8
  %120 = fsub double %118, %119
  %121 = fmul double %110, %120
  %122 = load double, double* %11, align 8
  %123 = load double, double* %12, align 8
  %124 = fadd double %122, %123
  %125 = load double, double* %13, align 8
  %126 = fadd double %124, %125
  %127 = load double, double* %14, align 8
  %128 = fadd double %126, %127
  %129 = fmul double 5.000000e-01, %128
  %130 = load double, double* %13, align 8
  %131 = fsub double %129, %130
  %132 = fmul double %121, %131
  %133 = load double, double* %11, align 8
  %134 = load double, double* %12, align 8
  %135 = fadd double %133, %134
  %136 = load double, double* %13, align 8
  %137 = fadd double %135, %136
  %138 = load double, double* %14, align 8
  %139 = fadd double %137, %138
  %140 = fmul double 5.000000e-01, %139
  %141 = load double, double* %14, align 8
  %142 = fsub double %140, %141
  %143 = fmul double %132, %142
  %144 = load double, double* %11, align 8
  %145 = load double, double* %12, align 8
  %146 = fmul double %144, %145
  %147 = load double, double* %13, align 8
  %148 = fmul double %146, %147
  %149 = load double, double* %14, align 8
  %150 = fmul double %148, %149
  %151 = load double, double* %15, align 8
  %152 = fmul double 1.000000e+02, %151
  %153 = fdiv double %152, 3.600000e+02
  %154 = call double @cos(double %153) #3
  %155 = fmul double %150, %154
  %156 = load double, double* %15, align 8
  %157 = fmul double 1.000000e+02, %156
  %158 = fdiv double %157, 3.600000e+02
  %159 = call double @cos(double %158) #3
  %160 = fmul double %155, %159
  %161 = fsub double %143, %160
  %162 = call double @sqrt(double %161) #3
  store double %162, double* %16, align 8
  %163 = load double, double* %16, align 8
  %164 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double %163)
  %165 = load i32, i32* @x
  %166 = load i32, i32* @y
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %173, label %473

; <label>:173:                                    ; preds = %100
  br label %174

; <label>:174:                                    ; preds = %173, %90
  %175 = load i32, i32* @x
  %176 = load i32, i32* @y
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %183, label %784

; <label>:183:                                    ; preds = %174, %784
  %184 = load double, double* %17, align 8
  %185 = fcmp olt double %184, 0.000000e+00
  %186 = load i32, i32* @x
  %187 = load i32, i32* @y
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %194, label %784

; <label>:194:                                    ; preds = %183
  br i1 %185, label %195, label %197

; <label>:195:                                    ; preds = %194
  %196 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %197

; <label>:197:                                    ; preds = %195, %194
  %198 = load i32, i32* @x
  %199 = load i32, i32* @y
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %206, label %787

; <label>:206:                                    ; preds = %197, %787
  %207 = load i32, i32* @x
  %208 = load i32, i32* @y
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %215, label %787

; <label>:215:                                    ; preds = %206
  ret i32 0

; <label>:216:                                    ; preds = %9, %0
  %217 = alloca i32, align 4
  %218 = alloca double, align 8
  %219 = alloca double, align 8
  %220 = alloca double, align 8
  %221 = alloca double, align 8
  %222 = alloca double, align 8
  %223 = alloca double, align 8
  %224 = alloca double, align 8
  store i32 0, i32* %217, align 4
  %225 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), double* %218, double* %219, double* %220, double* %221, double* %222)
  %226 = load double, double* %218, align 8
  %227 = load double, double* %219, align 8
  %228 = fsub double -0.000000e+00, %226
  %229 = fadd double %228, %227
  %230 = fsub double %226, %227
  %231 = fmul double %230, %227
  %232 = fsub double %226, %227
  %233 = fmul double %232, %227
  %234 = fadd double %226, %227
  %235 = load double, double* %220, align 8
  %236 = fsub double %234, %235
  %237 = fmul double %236, %235
  %238 = fsub double -0.000000e+00, %234
  %239 = fadd double %238, %235
  %240 = fadd double %234, %235
  %241 = load double, double* %221, align 8
  %242 = fsub double -0.000000e+00, %240
  %243 = fadd double %242, %241
  %244 = fsub double -0.000000e+00, %240
  %245 = fadd double %244, %241
  %246 = fsub double %240, %241
  %247 = fmul double %246, %241
  %248 = fsub double %240, %241
  %249 = fmul double %248, %241
  %250 = fadd double %240, %241
  %251 = fsub double -0.000000e+00, 5.000000e-01
  %252 = fadd double %251, %250
  %253 = fsub double 5.000000e-01, %250
  %254 = fmul double %253, %250
  %255 = fsub double 5.000000e-01, %250
  %256 = fmul double %255, %250
  %257 = fmul double 5.000000e-01, %250
  %258 = load double, double* %218, align 8
  %259 = fsub double -0.000000e+00, %257
  %260 = fadd double %259, %258
  %261 = fsub double %257, %258
  %262 = fmul double %261, %258
  %263 = fsub double %257, %258
  %264 = load double, double* %218, align 8
  %265 = load double, double* %219, align 8
  %266 = fsub double %264, %265
  %267 = fmul double %266, %265
  %268 = fsub double %264, %265
  %269 = fmul double %268, %265
  %270 = fsub double -0.000000e+00, %264
  %271 = fadd double %270, %265
  %272 = fsub double %264, %265
  %273 = fmul double %272, %265
  %274 = fsub double -0.000000e+00, %264
  %275 = fadd double %274, %265
  %276 = fadd double %264, %265
  %277 = load double, double* %220, align 8
  %278 = fsub double %276, %277
  %279 = fmul double %278, %277
  %280 = fsub double -0.000000e+00, %276
  %281 = fadd double %280, %277
  %282 = fadd double %276, %277
  %283 = load double, double* %221, align 8
  %284 = fsub double -0.000000e+00, %282
  %285 = fadd double %284, %283
  %286 = fsub double -0.000000e+00, %282
  %287 = fadd double %286, %283
  %288 = fadd double %282, %283
  %289 = fsub double -0.000000e+00, 5.000000e-01
  %290 = fadd double %289, %288
  %291 = fmul double 5.000000e-01, %288
  %292 = load double, double* %219, align 8
  %293 = fsub double %291, %292
  %294 = fmul double %293, %292
  %295 = fsub double %291, %292
  %296 = fsub double -0.000000e+00, %263
  %297 = fadd double %296, %295
  %298 = fsub double %263, %295
  %299 = fmul double %298, %295
  %300 = fsub double -0.000000e+00, %263
  %301 = fadd double %300, %295
  %302 = fsub double -0.000000e+00, %263
  %303 = fadd double %302, %295
  %304 = fsub double %263, %295
  %305 = fmul double %304, %295
  %306 = fsub double %263, %295
  %307 = fmul double %306, %295
  %308 = fsub double %263, %295
  %309 = fmul double %308, %295
  %310 = fmul double %263, %295
  %311 = load double, double* %218, align 8
  %312 = load double, double* %219, align 8
  %313 = fsub double -0.000000e+00, %311
  %314 = fadd double %313, %312
  %315 = fadd double %311, %312
  %316 = load double, double* %220, align 8
  %317 = fsub double -0.000000e+00, %315
  %318 = fadd double %317, %316
  %319 = fadd double %315, %316
  %320 = load double, double* %221, align 8
  %321 = fsub double %319, %320
  %322 = fmul double %321, %320
  %323 = fsub double -0.000000e+00, %319
  %324 = fadd double %323, %320
  %325 = fsub double -0.000000e+00, %319
  %326 = fadd double %325, %320
  %327 = fadd double %319, %320
  %328 = fsub double 5.000000e-01, %327
  %329 = fmul double %328, %327
  %330 = fmul double 5.000000e-01, %327
  %331 = load double, double* %220, align 8
  %332 = fsub double -0.000000e+00, %330
  %333 = fadd double %332, %331
  %334 = fsub double %330, %331
  %335 = fsub double %310, %334
  %336 = fmul double %335, %334
  %337 = fsub double -0.000000e+00, %310
  %338 = fadd double %337, %334
  %339 = fmul double %310, %334
  %340 = load double, double* %218, align 8
  %341 = load double, double* %219, align 8
  %342 = fsub double %340, %341
  %343 = fmul double %342, %341
  %344 = fsub double -0.000000e+00, %340
  %345 = fadd double %344, %341
  %346 = fsub double -0.000000e+00, %340
  %347 = fadd double %346, %341
  %348 = fsub double %340, %341
  %349 = fmul double %348, %341
  %350 = fadd double %340, %341
  %351 = load double, double* %220, align 8
  %352 = fsub double %350, %351
  %353 = fmul double %352, %351
  %354 = fsub double -0.000000e+00, %350
  %355 = fadd double %354, %351
  %356 = fsub double -0.000000e+00, %350
  %357 = fadd double %356, %351
  %358 = fadd double %350, %351
  %359 = load double, double* %221, align 8
  %360 = fsub double %358, %359
  %361 = fmul double %360, %359
  %362 = fadd double %358, %359
  %363 = fsub double -0.000000e+00, 5.000000e-01
  %364 = fadd double %363, %362
  %365 = fsub double -0.000000e+00, 5.000000e-01
  %366 = fadd double %365, %362
  %367 = fsub double 5.000000e-01, %362
  %368 = fmul double %367, %362
  %369 = fsub double 5.000000e-01, %362
  %370 = fmul double %369, %362
  %371 = fsub double 5.000000e-01, %362
  %372 = fmul double %371, %362
  %373 = fmul double 5.000000e-01, %362
  %374 = load double, double* %221, align 8
  %375 = fsub double %373, %374
  %376 = fmul double %375, %374
  %377 = fsub double %373, %374
  %378 = fsub double -0.000000e+00, %339
  %379 = fadd double %378, %377
  %380 = fmul double %339, %377
  %381 = load double, double* %218, align 8
  %382 = load double, double* %219, align 8
  %383 = fsub double %381, %382
  %384 = fmul double %383, %382
  %385 = fsub double %381, %382
  %386 = fmul double %385, %382
  %387 = fsub double -0.000000e+00, %381
  %388 = fadd double %387, %382
  %389 = fsub double %381, %382
  %390 = fmul double %389, %382
  %391 = fsub double -0.000000e+00, %381
  %392 = fadd double %391, %382
  %393 = fmul double %381, %382
  %394 = load double, double* %220, align 8
  %395 = fsub double -0.000000e+00, %393
  %396 = fadd double %395, %394
  %397 = fsub double %393, %394
  %398 = fmul double %397, %394
  %399 = fsub double -0.000000e+00, %393
  %400 = fadd double %399, %394
  %401 = fsub double -0.000000e+00, %393
  %402 = fadd double %401, %394
  %403 = fsub double -0.000000e+00, %393
  %404 = fadd double %403, %394
  %405 = fsub double -0.000000e+00, %393
  %406 = fadd double %405, %394
  %407 = fsub double %393, %394
  %408 = fmul double %407, %394
  %409 = fmul double %393, %394
  %410 = load double, double* %221, align 8
  %411 = fsub double %409, %410
  %412 = fmul double %411, %410
  %413 = fsub double %409, %410
  %414 = fmul double %413, %410
  %415 = fsub double %409, %410
  %416 = fmul double %415, %410
  %417 = fmul double %409, %410
  %418 = load double, double* %222, align 8
  %419 = fsub double -0.000000e+00, 1.000000e+02
  %420 = fadd double %419, %418
  %421 = fsub double -0.000000e+00, 1.000000e+02
  %422 = fadd double %421, %418
  %423 = fmul double 1.000000e+02, %418
  %424 = fsub double -0.000000e+00, %423
  %425 = fadd double %424, 3.600000e+02
  %426 = fsub double %423, 3.600000e+02
  %427 = fmul double %426, 3.600000e+02
  %428 = fsub double %423, 3.600000e+02
  %429 = fmul double %428, 3.600000e+02
  %430 = fsub double -0.000000e+00, %423
  %431 = fadd double %430, 3.600000e+02
  %432 = fdiv double %423, 3.600000e+02
  %433 = call double @cos(double %432) #3
  %434 = fsub double -0.000000e+00, %417
  %435 = fadd double %434, %433
  %436 = fmul double %417, %433
  %437 = load double, double* %222, align 8
  %438 = fsub double -0.000000e+00, 1.000000e+02
  %439 = fadd double %438, %437
  %440 = fsub double 1.000000e+02, %437
  %441 = fmul double %440, %437
  %442 = fsub double 1.000000e+02, %437
  %443 = fmul double %442, %437
  %444 = fmul double 1.000000e+02, %437
  %445 = fsub double -0.000000e+00, %444
  %446 = fadd double %445, 3.600000e+02
  %447 = fsub double %444, 3.600000e+02
  %448 = fmul double %447, 3.600000e+02
  %449 = fdiv double %444, 3.600000e+02
  %450 = call double @cos(double %449) #3
  %451 = fsub double -0.000000e+00, %436
  %452 = fadd double %451, %450
  %453 = fsub double %436, %450
  %454 = fmul double %453, %450
  %455 = fsub double %436, %450
  %456 = fmul double %455, %450
  %457 = fsub double %436, %450
  %458 = fmul double %457, %450
  %459 = fsub double -0.000000e+00, %436
  %460 = fadd double %459, %450
  %461 = fsub double -0.000000e+00, %436
  %462 = fadd double %461, %450
  %463 = fsub double -0.000000e+00, %436
  %464 = fadd double %463, %450
  %465 = fsub double -0.000000e+00, %436
  %466 = fadd double %465, %450
  %467 = fmul double %436, %450
  %468 = fsub double -0.000000e+00, %380
  %469 = fadd double %468, %467
  %470 = fsub double %380, %467
  store double %470, double* %224, align 8
  %471 = load double, double* %224, align 8
  %472 = fcmp ogt double %471, 0.000000e+00
  br label %9

; <label>:473:                                    ; preds = %100, %91
  %474 = load double, double* %11, align 8
  %475 = load double, double* %12, align 8
  %476 = fsub double -0.000000e+00, %474
  %477 = fadd double %476, %475
  %478 = fsub double %474, %475
  %479 = fmul double %478, %475
  %480 = fsub double %474, %475
  %481 = fmul double %480, %475
  %482 = fsub double -0.000000e+00, %474
  %483 = fadd double %482, %475
  %484 = fadd double %474, %475
  %485 = load double, double* %13, align 8
  %486 = fsub double -0.000000e+00, %484
  %487 = fadd double %486, %485
  %488 = fsub double %484, %485
  %489 = fmul double %488, %485
  %490 = fsub double -0.000000e+00, %484
  %491 = fadd double %490, %485
  %492 = fadd double %484, %485
  %493 = load double, double* %14, align 8
  %494 = fsub double %492, %493
  %495 = fmul double %494, %493
  %496 = fsub double -0.000000e+00, %492
  %497 = fadd double %496, %493
  %498 = fsub double -0.000000e+00, %492
  %499 = fadd double %498, %493
  %500 = fsub double %492, %493
  %501 = fmul double %500, %493
  %502 = fsub double %492, %493
  %503 = fmul double %502, %493
  %504 = fadd double %492, %493
  %505 = fsub double -0.000000e+00, 5.000000e-01
  %506 = fadd double %505, %504
  %507 = fsub double 5.000000e-01, %504
  %508 = fmul double %507, %504
  %509 = fsub double 5.000000e-01, %504
  %510 = fmul double %509, %504
  %511 = fmul double 5.000000e-01, %504
  %512 = load double, double* %11, align 8
  %513 = fsub double %511, %512
  %514 = load double, double* %11, align 8
  %515 = load double, double* %12, align 8
  %516 = fsub double -0.000000e+00, %514
  %517 = fadd double %516, %515
  %518 = fsub double -0.000000e+00, %514
  %519 = fadd double %518, %515
  %520 = fsub double %514, %515
  %521 = fmul double %520, %515
  %522 = fadd double %514, %515
  %523 = load double, double* %13, align 8
  %524 = fsub double %522, %523
  %525 = fmul double %524, %523
  %526 = fsub double -0.000000e+00, %522
  %527 = fadd double %526, %523
  %528 = fsub double -0.000000e+00, %522
  %529 = fadd double %528, %523
  %530 = fsub double -0.000000e+00, %522
  %531 = fadd double %530, %523
  %532 = fsub double -0.000000e+00, %522
  %533 = fadd double %532, %523
  %534 = fsub double %522, %523
  %535 = fmul double %534, %523
  %536 = fsub double %522, %523
  %537 = fmul double %536, %523
  %538 = fadd double %522, %523
  %539 = load double, double* %14, align 8
  %540 = fsub double %538, %539
  %541 = fmul double %540, %539
  %542 = fsub double %538, %539
  %543 = fmul double %542, %539
  %544 = fadd double %538, %539
  %545 = fsub double -0.000000e+00, 5.000000e-01
  %546 = fadd double %545, %544
  %547 = fsub double -0.000000e+00, 5.000000e-01
  %548 = fadd double %547, %544
  %549 = fsub double 5.000000e-01, %544
  %550 = fmul double %549, %544
  %551 = fsub double -0.000000e+00, 5.000000e-01
  %552 = fadd double %551, %544
  %553 = fsub double 5.000000e-01, %544
  %554 = fmul double %553, %544
  %555 = fsub double -0.000000e+00, 5.000000e-01
  %556 = fadd double %555, %544
  %557 = fsub double 5.000000e-01, %544
  %558 = fmul double %557, %544
  %559 = fmul double 5.000000e-01, %544
  %560 = load double, double* %12, align 8
  %561 = fsub double -0.000000e+00, %559
  %562 = fadd double %561, %560
  %563 = fsub double -0.000000e+00, %559
  %564 = fadd double %563, %560
  %565 = fsub double -0.000000e+00, %559
  %566 = fadd double %565, %560
  %567 = fsub double -0.000000e+00, %559
  %568 = fadd double %567, %560
  %569 = fsub double -0.000000e+00, %559
  %570 = fadd double %569, %560
  %571 = fsub double -0.000000e+00, %559
  %572 = fadd double %571, %560
  %573 = fsub double %559, %560
  %574 = fsub double %513, %573
  %575 = fmul double %574, %573
  %576 = fsub double %513, %573
  %577 = fmul double %576, %573
  %578 = fsub double -0.000000e+00, %513
  %579 = fadd double %578, %573
  %580 = fsub double %513, %573
  %581 = fmul double %580, %573
  %582 = fsub double -0.000000e+00, %513
  %583 = fadd double %582, %573
  %584 = fsub double %513, %573
  %585 = fmul double %584, %573
  %586 = fsub double %513, %573
  %587 = fmul double %586, %573
  %588 = fsub double -0.000000e+00, %513
  %589 = fadd double %588, %573
  %590 = fmul double %513, %573
  %591 = load double, double* %11, align 8
  %592 = load double, double* %12, align 8
  %593 = fsub double -0.000000e+00, %591
  %594 = fadd double %593, %592
  %595 = fsub double %591, %592
  %596 = fmul double %595, %592
  %597 = fsub double -0.000000e+00, %591
  %598 = fadd double %597, %592
  %599 = fsub double %591, %592
  %600 = fmul double %599, %592
  %601 = fsub double %591, %592
  %602 = fmul double %601, %592
  %603 = fsub double %591, %592
  %604 = fmul double %603, %592
  %605 = fsub double -0.000000e+00, %591
  %606 = fadd double %605, %592
  %607 = fadd double %591, %592
  %608 = load double, double* %13, align 8
  %609 = fsub double %607, %608
  %610 = fmul double %609, %608
  %611 = fsub double %607, %608
  %612 = fmul double %611, %608
  %613 = fsub double %607, %608
  %614 = fmul double %613, %608
  %615 = fadd double %607, %608
  %616 = load double, double* %14, align 8
  %617 = fsub double %615, %616
  %618 = fmul double %617, %616
  %619 = fadd double %615, %616
  %620 = fsub double 5.000000e-01, %619
  %621 = fmul double %620, %619
  %622 = fmul double 5.000000e-01, %619
  %623 = load double, double* %13, align 8
  %624 = fsub double -0.000000e+00, %622
  %625 = fadd double %624, %623
  %626 = fsub double %622, %623
  %627 = fsub double %590, %626
  %628 = fmul double %627, %626
  %629 = fsub double %590, %626
  %630 = fmul double %629, %626
  %631 = fsub double -0.000000e+00, %590
  %632 = fadd double %631, %626
  %633 = fsub double %590, %626
  %634 = fmul double %633, %626
  %635 = fmul double %590, %626
  %636 = load double, double* %11, align 8
  %637 = load double, double* %12, align 8
  %638 = fsub double %636, %637
  %639 = fmul double %638, %637
  %640 = fadd double %636, %637
  %641 = load double, double* %13, align 8
  %642 = fsub double %640, %641
  %643 = fmul double %642, %641
  %644 = fsub double -0.000000e+00, %640
  %645 = fadd double %644, %641
  %646 = fsub double %640, %641
  %647 = fmul double %646, %641
  %648 = fsub double %640, %641
  %649 = fmul double %648, %641
  %650 = fsub double -0.000000e+00, %640
  %651 = fadd double %650, %641
  %652 = fsub double %640, %641
  %653 = fmul double %652, %641
  %654 = fadd double %640, %641
  %655 = load double, double* %14, align 8
  %656 = fsub double %654, %655
  %657 = fmul double %656, %655
  %658 = fsub double %654, %655
  %659 = fmul double %658, %655
  %660 = fadd double %654, %655
  %661 = fsub double -0.000000e+00, 5.000000e-01
  %662 = fadd double %661, %660
  %663 = fsub double 5.000000e-01, %660
  %664 = fmul double %663, %660
  %665 = fsub double -0.000000e+00, 5.000000e-01
  %666 = fadd double %665, %660
  %667 = fsub double -0.000000e+00, 5.000000e-01
  %668 = fadd double %667, %660
  %669 = fsub double 5.000000e-01, %660
  %670 = fmul double %669, %660
  %671 = fsub double 5.000000e-01, %660
  %672 = fmul double %671, %660
  %673 = fsub double 5.000000e-01, %660
  %674 = fmul double %673, %660
  %675 = fmul double 5.000000e-01, %660
  %676 = load double, double* %14, align 8
  %677 = fsub double %675, %676
  %678 = fmul double %677, %676
  %679 = fsub double %675, %676
  %680 = fsub double -0.000000e+00, %635
  %681 = fadd double %680, %679
  %682 = fmul double %635, %679
  %683 = load double, double* %11, align 8
  %684 = load double, double* %12, align 8
  %685 = fsub double %683, %684
  %686 = fmul double %685, %684
  %687 = fsub double -0.000000e+00, %683
  %688 = fadd double %687, %684
  %689 = fsub double -0.000000e+00, %683
  %690 = fadd double %689, %684
  %691 = fsub double %683, %684
  %692 = fmul double %691, %684
  %693 = fsub double %683, %684
  %694 = fmul double %693, %684
  %695 = fsub double -0.000000e+00, %683
  %696 = fadd double %695, %684
  %697 = fmul double %683, %684
  %698 = load double, double* %13, align 8
  %699 = fsub double -0.000000e+00, %697
  %700 = fadd double %699, %698
  %701 = fsub double -0.000000e+00, %697
  %702 = fadd double %701, %698
  %703 = fmul double %697, %698
  %704 = load double, double* %14, align 8
  %705 = fsub double -0.000000e+00, %703
  %706 = fadd double %705, %704
  %707 = fmul double %703, %704
  %708 = load double, double* %15, align 8
  %709 = fsub double -0.000000e+00, 1.000000e+02
  %710 = fadd double %709, %708
  %711 = fsub double -0.000000e+00, 1.000000e+02
  %712 = fadd double %711, %708
  %713 = fmul double 1.000000e+02, %708
  %714 = fsub double -0.000000e+00, %713
  %715 = fadd double %714, 3.600000e+02
  %716 = fsub double -0.000000e+00, %713
  %717 = fadd double %716, 3.600000e+02
  %718 = fsub double -0.000000e+00, %713
  %719 = fadd double %718, 3.600000e+02
  %720 = fsub double -0.000000e+00, %713
  %721 = fadd double %720, 3.600000e+02
  %722 = fsub double -0.000000e+00, %713
  %723 = fadd double %722, 3.600000e+02
  %724 = fsub double %713, 3.600000e+02
  %725 = fmul double %724, 3.600000e+02
  %726 = fsub double -0.000000e+00, %713
  %727 = fadd double %726, 3.600000e+02
  %728 = fsub double %713, 3.600000e+02
  %729 = fmul double %728, 3.600000e+02
  %730 = fdiv double %713, 3.600000e+02
  %731 = call double @cos(double %730) #3
  %732 = fsub double %707, %731
  %733 = fmul double %732, %731
  %734 = fsub double %707, %731
  %735 = fmul double %734, %731
  %736 = fsub double %707, %731
  %737 = fmul double %736, %731
  %738 = fsub double -0.000000e+00, %707
  %739 = fadd double %738, %731
  %740 = fsub double %707, %731
  %741 = fmul double %740, %731
  %742 = fmul double %707, %731
  %743 = load double, double* %15, align 8
  %744 = fsub double 1.000000e+02, %743
  %745 = fmul double %744, %743
  %746 = fsub double -0.000000e+00, 1.000000e+02
  %747 = fadd double %746, %743
  %748 = fsub double -0.000000e+00, 1.000000e+02
  %749 = fadd double %748, %743
  %750 = fsub double -0.000000e+00, 1.000000e+02
  %751 = fadd double %750, %743
  %752 = fsub double -0.000000e+00, 1.000000e+02
  %753 = fadd double %752, %743
  %754 = fmul double 1.000000e+02, %743
  %755 = fsub double %754, 3.600000e+02
  %756 = fmul double %755, 3.600000e+02
  %757 = fsub double %754, 3.600000e+02
  %758 = fmul double %757, 3.600000e+02
  %759 = fsub double %754, 3.600000e+02
  %760 = fmul double %759, 3.600000e+02
  %761 = fsub double %754, 3.600000e+02
  %762 = fmul double %761, 3.600000e+02
  %763 = fsub double -0.000000e+00, %754
  %764 = fadd double %763, 3.600000e+02
  %765 = fsub double %754, 3.600000e+02
  %766 = fmul double %765, 3.600000e+02
  %767 = fdiv double %754, 3.600000e+02
  %768 = call double @cos(double %767) #3
  %769 = fsub double -0.000000e+00, %742
  %770 = fadd double %769, %768
  %771 = fsub double %742, %768
  %772 = fmul double %771, %768
  %773 = fmul double %742, %768
  %774 = fsub double %682, %773
  %775 = fmul double %774, %773
  %776 = fsub double %682, %773
  %777 = fmul double %776, %773
  %778 = fsub double -0.000000e+00, %682
  %779 = fadd double %778, %773
  %780 = fsub double %682, %773
  %781 = call double @sqrt(double %780) #3
  store double %781, double* %16, align 8
  %782 = load double, double* %16, align 8
  %783 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double %782)
  br label %100

; <label>:784:                                    ; preds = %183, %174
  %785 = load double, double* %17, align 8
  %786 = fcmp olt double %785, 0.000000e+00
  br label %183

; <label>:787:                                    ; preds = %206, %197
  br label %206
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
