; ModuleID = 'source-C-CXX/39/1002.c'
source_filename = "source-C-CXX/39/1002.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [21 x i8] c"%lf\0A%lf\0A%lf\0A%lf\0A%lf\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %156

; <label>:9:                                      ; preds = %0, %156
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %17)
  %20 = load double, double* %11, align 8
  %21 = load double, double* %12, align 8
  %22 = fadd double %20, %21
  %23 = load double, double* %13, align 8
  %24 = fadd double %22, %23
  %25 = load double, double* %14, align 8
  %26 = fadd double %24, %25
  %27 = fdiv double %26, 2.000000e+00
  store double %27, double* %15, align 8
  %28 = load double, double* %15, align 8
  %29 = load double, double* %11, align 8
  %30 = fsub double %28, %29
  %31 = load double, double* %15, align 8
  %32 = load double, double* %12, align 8
  %33 = fsub double %31, %32
  %34 = fmul double %30, %33
  %35 = load double, double* %15, align 8
  %36 = load double, double* %13, align 8
  %37 = fsub double %35, %36
  %38 = fmul double %34, %37
  %39 = load double, double* %15, align 8
  %40 = load double, double* %14, align 8
  %41 = fsub double %39, %40
  %42 = fmul double %38, %41
  %43 = load double, double* %11, align 8
  %44 = load double, double* %12, align 8
  %45 = fmul double %43, %44
  %46 = load double, double* %13, align 8
  %47 = fmul double %45, %46
  %48 = load double, double* %14, align 8
  %49 = fmul double %47, %48
  %50 = load double, double* %17, align 8
  %51 = fmul double %50, 1.000000e+02
  %52 = fdiv double %51, 2.000000e+00
  %53 = fdiv double %52, 1.800000e+02
  %54 = call double @cos(double %53) #3
  %55 = fmul double %49, %54
  %56 = load double, double* %17, align 8
  %57 = fmul double %56, 1.000000e+02
  %58 = fdiv double %57, 2.000000e+00
  %59 = fdiv double %58, 1.800000e+02
  %60 = call double @cos(double %59) #3
  %61 = fmul double %55, %60
  %62 = fsub double %42, %61
  store double %62, double* %18, align 8
  %63 = load double, double* %15, align 8
  %64 = load double, double* %11, align 8
  %65 = fsub double %63, %64
  %66 = load double, double* %15, align 8
  %67 = load double, double* %12, align 8
  %68 = fsub double %66, %67
  %69 = fmul double %65, %68
  %70 = load double, double* %15, align 8
  %71 = load double, double* %13, align 8
  %72 = fsub double %70, %71
  %73 = fmul double %69, %72
  %74 = load double, double* %15, align 8
  %75 = load double, double* %14, align 8
  %76 = fsub double %74, %75
  %77 = fmul double %73, %76
  %78 = load double, double* %11, align 8
  %79 = load double, double* %12, align 8
  %80 = fmul double %78, %79
  %81 = load double, double* %13, align 8
  %82 = fmul double %80, %81
  %83 = load double, double* %14, align 8
  %84 = fmul double %82, %83
  %85 = load double, double* %17, align 8
  %86 = fmul double %85, 1.000000e+02
  %87 = fdiv double %86, 2.000000e+00
  %88 = fdiv double %87, 1.800000e+02
  %89 = call double @cos(double %88) #3
  %90 = fmul double %84, %89
  %91 = load double, double* %17, align 8
  %92 = fmul double %91, 1.000000e+02
  %93 = fdiv double %92, 2.000000e+00
  %94 = fdiv double %93, 1.800000e+02
  %95 = call double @cos(double %94) #3
  %96 = fmul double %90, %95
  %97 = fsub double %77, %96
  %98 = call double @sqrt(double %97) #3
  store double %98, double* %16, align 8
  %99 = load double, double* %18, align 8
  %100 = fcmp ogt double %99, 0.000000e+00
  %101 = load i32, i32* @x
  %102 = load i32, i32* @y
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %109, label %156

; <label>:109:                                    ; preds = %9
  br i1 %100, label %110, label %113

; <label>:110:                                    ; preds = %109
  %111 = load double, double* %16, align 8
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double %111)
  br label %155

; <label>:113:                                    ; preds = %109
  %114 = load double, double* %18, align 8
  %115 = fcmp olt double %114, 0.000000e+00
  br i1 %115, label %116, label %136

; <label>:116:                                    ; preds = %113
  %117 = load i32, i32* @x
  %118 = load i32, i32* @y
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %125, label %568

; <label>:125:                                    ; preds = %116, %568
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  %127 = load i32, i32* @x
  %128 = load i32, i32* @y
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %135, label %568

; <label>:135:                                    ; preds = %125
  br label %136

; <label>:136:                                    ; preds = %135, %113
  %137 = load i32, i32* @x
  %138 = load i32, i32* @y
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %145, label %570

; <label>:145:                                    ; preds = %136, %570
  %146 = load i32, i32* @x
  %147 = load i32, i32* @y
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %154, label %570

; <label>:154:                                    ; preds = %145
  br label %155

; <label>:155:                                    ; preds = %154, %110
  ret i32 0

; <label>:156:                                    ; preds = %9, %0
  %157 = alloca i32, align 4
  %158 = alloca double, align 8
  %159 = alloca double, align 8
  %160 = alloca double, align 8
  %161 = alloca double, align 8
  %162 = alloca double, align 8
  %163 = alloca double, align 8
  %164 = alloca double, align 8
  %165 = alloca double, align 8
  store i32 0, i32* %157, align 4
  %166 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), double* %158, double* %159, double* %160, double* %161, double* %164)
  %167 = load double, double* %158, align 8
  %168 = load double, double* %159, align 8
  %169 = fsub double %167, %168
  %170 = fmul double %169, %168
  %171 = fsub double -0.000000e+00, %167
  %172 = fadd double %171, %168
  %173 = fsub double %167, %168
  %174 = fmul double %173, %168
  %175 = fsub double %167, %168
  %176 = fmul double %175, %168
  %177 = fadd double %167, %168
  %178 = load double, double* %160, align 8
  %179 = fsub double -0.000000e+00, %177
  %180 = fadd double %179, %178
  %181 = fsub double -0.000000e+00, %177
  %182 = fadd double %181, %178
  %183 = fadd double %177, %178
  %184 = load double, double* %161, align 8
  %185 = fsub double -0.000000e+00, %183
  %186 = fadd double %185, %184
  %187 = fsub double -0.000000e+00, %183
  %188 = fadd double %187, %184
  %189 = fsub double -0.000000e+00, %183
  %190 = fadd double %189, %184
  %191 = fsub double -0.000000e+00, %183
  %192 = fadd double %191, %184
  %193 = fsub double %183, %184
  %194 = fmul double %193, %184
  %195 = fsub double %183, %184
  %196 = fmul double %195, %184
  %197 = fadd double %183, %184
  %198 = fsub double %197, 2.000000e+00
  %199 = fmul double %198, 2.000000e+00
  %200 = fsub double -0.000000e+00, %197
  %201 = fadd double %200, 2.000000e+00
  %202 = fsub double -0.000000e+00, %197
  %203 = fadd double %202, 2.000000e+00
  %204 = fdiv double %197, 2.000000e+00
  store double %204, double* %162, align 8
  %205 = load double, double* %162, align 8
  %206 = load double, double* %158, align 8
  %207 = fsub double %205, %206
  %208 = fmul double %207, %206
  %209 = fsub double -0.000000e+00, %205
  %210 = fadd double %209, %206
  %211 = fsub double %205, %206
  %212 = fmul double %211, %206
  %213 = fsub double -0.000000e+00, %205
  %214 = fadd double %213, %206
  %215 = fsub double %205, %206
  %216 = fmul double %215, %206
  %217 = fsub double %205, %206
  %218 = fmul double %217, %206
  %219 = fsub double %205, %206
  %220 = fmul double %219, %206
  %221 = fsub double %205, %206
  %222 = load double, double* %162, align 8
  %223 = load double, double* %159, align 8
  %224 = fsub double -0.000000e+00, %222
  %225 = fadd double %224, %223
  %226 = fsub double %222, %223
  %227 = fmul double %226, %223
  %228 = fsub double -0.000000e+00, %222
  %229 = fadd double %228, %223
  %230 = fsub double %222, %223
  %231 = fmul double %230, %223
  %232 = fsub double %222, %223
  %233 = fmul double %232, %223
  %234 = fsub double %222, %223
  %235 = fsub double %221, %234
  %236 = fmul double %235, %234
  %237 = fsub double -0.000000e+00, %221
  %238 = fadd double %237, %234
  %239 = fsub double -0.000000e+00, %221
  %240 = fadd double %239, %234
  %241 = fmul double %221, %234
  %242 = load double, double* %162, align 8
  %243 = load double, double* %160, align 8
  %244 = fsub double %242, %243
  %245 = fmul double %244, %243
  %246 = fsub double -0.000000e+00, %242
  %247 = fadd double %246, %243
  %248 = fsub double %242, %243
  %249 = fmul double %248, %243
  %250 = fsub double %242, %243
  %251 = fmul double %250, %243
  %252 = fsub double %242, %243
  %253 = fmul double %252, %243
  %254 = fsub double %242, %243
  %255 = fmul double %254, %243
  %256 = fsub double %242, %243
  %257 = fsub double -0.000000e+00, %241
  %258 = fadd double %257, %256
  %259 = fsub double -0.000000e+00, %241
  %260 = fadd double %259, %256
  %261 = fsub double %241, %256
  %262 = fmul double %261, %256
  %263 = fsub double -0.000000e+00, %241
  %264 = fadd double %263, %256
  %265 = fsub double -0.000000e+00, %241
  %266 = fadd double %265, %256
  %267 = fsub double -0.000000e+00, %241
  %268 = fadd double %267, %256
  %269 = fmul double %241, %256
  %270 = load double, double* %162, align 8
  %271 = load double, double* %161, align 8
  %272 = fsub double %270, %271
  %273 = fmul double %272, %271
  %274 = fsub double %270, %271
  %275 = fmul double %274, %271
  %276 = fsub double %270, %271
  %277 = fmul double %276, %271
  %278 = fsub double -0.000000e+00, %270
  %279 = fadd double %278, %271
  %280 = fsub double -0.000000e+00, %270
  %281 = fadd double %280, %271
  %282 = fsub double -0.000000e+00, %270
  %283 = fadd double %282, %271
  %284 = fsub double %270, %271
  %285 = fsub double -0.000000e+00, %269
  %286 = fadd double %285, %284
  %287 = fmul double %269, %284
  %288 = load double, double* %158, align 8
  %289 = load double, double* %159, align 8
  %290 = fsub double -0.000000e+00, %288
  %291 = fadd double %290, %289
  %292 = fsub double %288, %289
  %293 = fmul double %292, %289
  %294 = fmul double %288, %289
  %295 = load double, double* %160, align 8
  %296 = fmul double %294, %295
  %297 = load double, double* %161, align 8
  %298 = fsub double -0.000000e+00, %296
  %299 = fadd double %298, %297
  %300 = fsub double -0.000000e+00, %296
  %301 = fadd double %300, %297
  %302 = fsub double %296, %297
  %303 = fmul double %302, %297
  %304 = fsub double -0.000000e+00, %296
  %305 = fadd double %304, %297
  %306 = fsub double -0.000000e+00, %296
  %307 = fadd double %306, %297
  %308 = fmul double %296, %297
  %309 = load double, double* %164, align 8
  %310 = fsub double %309, 1.000000e+02
  %311 = fmul double %310, 1.000000e+02
  %312 = fsub double %309, 1.000000e+02
  %313 = fmul double %312, 1.000000e+02
  %314 = fsub double -0.000000e+00, %309
  %315 = fadd double %314, 1.000000e+02
  %316 = fsub double %309, 1.000000e+02
  %317 = fmul double %316, 1.000000e+02
  %318 = fmul double %309, 1.000000e+02
  %319 = fsub double %318, 2.000000e+00
  %320 = fmul double %319, 2.000000e+00
  %321 = fsub double %318, 2.000000e+00
  %322 = fmul double %321, 2.000000e+00
  %323 = fsub double -0.000000e+00, %318
  %324 = fadd double %323, 2.000000e+00
  %325 = fsub double %318, 2.000000e+00
  %326 = fmul double %325, 2.000000e+00
  %327 = fsub double %318, 2.000000e+00
  %328 = fmul double %327, 2.000000e+00
  %329 = fsub double %318, 2.000000e+00
  %330 = fmul double %329, 2.000000e+00
  %331 = fsub double %318, 2.000000e+00
  %332 = fmul double %331, 2.000000e+00
  %333 = fdiv double %318, 2.000000e+00
  %334 = fsub double %333, 1.800000e+02
  %335 = fmul double %334, 1.800000e+02
  %336 = fsub double -0.000000e+00, %333
  %337 = fadd double %336, 1.800000e+02
  %338 = fsub double %333, 1.800000e+02
  %339 = fmul double %338, 1.800000e+02
  %340 = fsub double -0.000000e+00, %333
  %341 = fadd double %340, 1.800000e+02
  %342 = fsub double -0.000000e+00, %333
  %343 = fadd double %342, 1.800000e+02
  %344 = fsub double -0.000000e+00, %333
  %345 = fadd double %344, 1.800000e+02
  %346 = fdiv double %333, 1.800000e+02
  %347 = call double @cos(double %346) #3
  %348 = fsub double %308, %347
  %349 = fmul double %348, %347
  %350 = fsub double -0.000000e+00, %308
  %351 = fadd double %350, %347
  %352 = fsub double -0.000000e+00, %308
  %353 = fadd double %352, %347
  %354 = fsub double %308, %347
  %355 = fmul double %354, %347
  %356 = fsub double -0.000000e+00, %308
  %357 = fadd double %356, %347
  %358 = fmul double %308, %347
  %359 = load double, double* %164, align 8
  %360 = fsub double -0.000000e+00, %359
  %361 = fadd double %360, 1.000000e+02
  %362 = fmul double %359, 1.000000e+02
  %363 = fsub double %362, 2.000000e+00
  %364 = fmul double %363, 2.000000e+00
  %365 = fsub double %362, 2.000000e+00
  %366 = fmul double %365, 2.000000e+00
  %367 = fdiv double %362, 2.000000e+00
  %368 = fsub double -0.000000e+00, %367
  %369 = fadd double %368, 1.800000e+02
  %370 = fsub double %367, 1.800000e+02
  %371 = fmul double %370, 1.800000e+02
  %372 = fsub double -0.000000e+00, %367
  %373 = fadd double %372, 1.800000e+02
  %374 = fsub double %367, 1.800000e+02
  %375 = fmul double %374, 1.800000e+02
  %376 = fsub double %367, 1.800000e+02
  %377 = fmul double %376, 1.800000e+02
  %378 = fdiv double %367, 1.800000e+02
  %379 = call double @cos(double %378) #3
  %380 = fsub double -0.000000e+00, %358
  %381 = fadd double %380, %379
  %382 = fsub double %358, %379
  %383 = fmul double %382, %379
  %384 = fsub double -0.000000e+00, %358
  %385 = fadd double %384, %379
  %386 = fsub double %358, %379
  %387 = fmul double %386, %379
  %388 = fsub double -0.000000e+00, %358
  %389 = fadd double %388, %379
  %390 = fmul double %358, %379
  %391 = fsub double -0.000000e+00, %287
  %392 = fadd double %391, %390
  %393 = fsub double %287, %390
  %394 = fmul double %393, %390
  %395 = fsub double %287, %390
  %396 = fmul double %395, %390
  %397 = fsub double %287, %390
  store double %397, double* %165, align 8
  %398 = load double, double* %162, align 8
  %399 = load double, double* %158, align 8
  %400 = fsub double %398, %399
  %401 = fmul double %400, %399
  %402 = fsub double -0.000000e+00, %398
  %403 = fadd double %402, %399
  %404 = fsub double -0.000000e+00, %398
  %405 = fadd double %404, %399
  %406 = fsub double %398, %399
  %407 = fmul double %406, %399
  %408 = fsub double %398, %399
  %409 = fmul double %408, %399
  %410 = fsub double %398, %399
  %411 = load double, double* %162, align 8
  %412 = load double, double* %159, align 8
  %413 = fsub double %411, %412
  %414 = fmul double %413, %412
  %415 = fsub double -0.000000e+00, %411
  %416 = fadd double %415, %412
  %417 = fsub double -0.000000e+00, %411
  %418 = fadd double %417, %412
  %419 = fsub double %411, %412
  %420 = fmul double %419, %412
  %421 = fsub double %411, %412
  %422 = fmul double %421, %412
  %423 = fsub double %411, %412
  %424 = fsub double -0.000000e+00, %410
  %425 = fadd double %424, %423
  %426 = fmul double %410, %423
  %427 = load double, double* %162, align 8
  %428 = load double, double* %160, align 8
  %429 = fsub double -0.000000e+00, %427
  %430 = fadd double %429, %428
  %431 = fsub double %427, %428
  %432 = fsub double %426, %431
  %433 = fmul double %432, %431
  %434 = fsub double -0.000000e+00, %426
  %435 = fadd double %434, %431
  %436 = fsub double %426, %431
  %437 = fmul double %436, %431
  %438 = fsub double -0.000000e+00, %426
  %439 = fadd double %438, %431
  %440 = fmul double %426, %431
  %441 = load double, double* %162, align 8
  %442 = load double, double* %161, align 8
  %443 = fsub double -0.000000e+00, %441
  %444 = fadd double %443, %442
  %445 = fsub double %441, %442
  %446 = fmul double %445, %442
  %447 = fsub double -0.000000e+00, %441
  %448 = fadd double %447, %442
  %449 = fsub double %441, %442
  %450 = fmul double %449, %442
  %451 = fsub double %441, %442
  %452 = fmul double %451, %442
  %453 = fsub double -0.000000e+00, %441
  %454 = fadd double %453, %442
  %455 = fsub double %441, %442
  %456 = fmul double %440, %455
  %457 = load double, double* %158, align 8
  %458 = load double, double* %159, align 8
  %459 = fsub double -0.000000e+00, %457
  %460 = fadd double %459, %458
  %461 = fsub double -0.000000e+00, %457
  %462 = fadd double %461, %458
  %463 = fsub double -0.000000e+00, %457
  %464 = fadd double %463, %458
  %465 = fmul double %457, %458
  %466 = load double, double* %160, align 8
  %467 = fsub double %465, %466
  %468 = fmul double %467, %466
  %469 = fsub double %465, %466
  %470 = fmul double %469, %466
  %471 = fsub double %465, %466
  %472 = fmul double %471, %466
  %473 = fsub double -0.000000e+00, %465
  %474 = fadd double %473, %466
  %475 = fmul double %465, %466
  %476 = load double, double* %161, align 8
  %477 = fsub double -0.000000e+00, %475
  %478 = fadd double %477, %476
  %479 = fsub double %475, %476
  %480 = fmul double %479, %476
  %481 = fsub double -0.000000e+00, %475
  %482 = fadd double %481, %476
  %483 = fsub double %475, %476
  %484 = fmul double %483, %476
  %485 = fsub double %475, %476
  %486 = fmul double %485, %476
  %487 = fsub double -0.000000e+00, %475
  %488 = fadd double %487, %476
  %489 = fsub double -0.000000e+00, %475
  %490 = fadd double %489, %476
  %491 = fmul double %475, %476
  %492 = load double, double* %164, align 8
  %493 = fsub double -0.000000e+00, %492
  %494 = fadd double %493, 1.000000e+02
  %495 = fsub double -0.000000e+00, %492
  %496 = fadd double %495, 1.000000e+02
  %497 = fsub double %492, 1.000000e+02
  %498 = fmul double %497, 1.000000e+02
  %499 = fsub double %492, 1.000000e+02
  %500 = fmul double %499, 1.000000e+02
  %501 = fsub double %492, 1.000000e+02
  %502 = fmul double %501, 1.000000e+02
  %503 = fsub double -0.000000e+00, %492
  %504 = fadd double %503, 1.000000e+02
  %505 = fsub double -0.000000e+00, %492
  %506 = fadd double %505, 1.000000e+02
  %507 = fmul double %492, 1.000000e+02
  %508 = fsub double -0.000000e+00, %507
  %509 = fadd double %508, 2.000000e+00
  %510 = fsub double -0.000000e+00, %507
  %511 = fadd double %510, 2.000000e+00
  %512 = fsub double %507, 2.000000e+00
  %513 = fmul double %512, 2.000000e+00
  %514 = fsub double %507, 2.000000e+00
  %515 = fmul double %514, 2.000000e+00
  %516 = fdiv double %507, 2.000000e+00
  %517 = fsub double -0.000000e+00, %516
  %518 = fadd double %517, 1.800000e+02
  %519 = fsub double -0.000000e+00, %516
  %520 = fadd double %519, 1.800000e+02
  %521 = fdiv double %516, 1.800000e+02
  %522 = call double @cos(double %521) #3
  %523 = fsub double %491, %522
  %524 = fmul double %523, %522
  %525 = fsub double -0.000000e+00, %491
  %526 = fadd double %525, %522
  %527 = fsub double %491, %522
  %528 = fmul double %527, %522
  %529 = fsub double -0.000000e+00, %491
  %530 = fadd double %529, %522
  %531 = fsub double %491, %522
  %532 = fmul double %531, %522
  %533 = fmul double %491, %522
  %534 = load double, double* %164, align 8
  %535 = fsub double -0.000000e+00, %534
  %536 = fadd double %535, 1.000000e+02
  %537 = fsub double -0.000000e+00, %534
  %538 = fadd double %537, 1.000000e+02
  %539 = fmul double %534, 1.000000e+02
  %540 = fsub double -0.000000e+00, %539
  %541 = fadd double %540, 2.000000e+00
  %542 = fsub double %539, 2.000000e+00
  %543 = fmul double %542, 2.000000e+00
  %544 = fsub double -0.000000e+00, %539
  %545 = fadd double %544, 2.000000e+00
  %546 = fdiv double %539, 2.000000e+00
  %547 = fsub double -0.000000e+00, %546
  %548 = fadd double %547, 1.800000e+02
  %549 = fsub double -0.000000e+00, %546
  %550 = fadd double %549, 1.800000e+02
  %551 = fsub double -0.000000e+00, %546
  %552 = fadd double %551, 1.800000e+02
  %553 = fdiv double %546, 1.800000e+02
  %554 = call double @cos(double %553) #3
  %555 = fsub double %533, %554
  %556 = fmul double %555, %554
  %557 = fsub double %533, %554
  %558 = fmul double %557, %554
  %559 = fsub double %533, %554
  %560 = fmul double %559, %554
  %561 = fmul double %533, %554
  %562 = fsub double -0.000000e+00, %456
  %563 = fadd double %562, %561
  %564 = fsub double %456, %561
  %565 = call double @sqrt(double %564) #3
  store double %565, double* %163, align 8
  %566 = load double, double* %165, align 8
  %567 = fcmp ogt double %566, 0.000000e+00
  br label %9

; <label>:568:                                    ; preds = %125, %116
  %569 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %125

; <label>:570:                                    ; preds = %145, %136
  br label %145
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
