; ModuleID = 'source-C-CXX/39/379.c'
source_filename = "source-C-CXX/39/379.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%.4lf\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32, i8**) #0 {
  %3 = load i32, i32* @x
  %4 = load i32, i32* @y
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %137

; <label>:11:                                     ; preds = %2, %137
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8**, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  store i32 0, i32* %12, align 4
  store i32 %0, i32* %13, align 4
  store i8** %1, i8*** %14, align 8
  %22 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), double* %15, double* %16, double* %17, double* %18)
  %23 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double* %19)
  %24 = load double, double* %15, align 8
  %25 = load double, double* %16, align 8
  %26 = fadd double %24, %25
  %27 = load double, double* %17, align 8
  %28 = fadd double %26, %27
  %29 = load double, double* %18, align 8
  %30 = fadd double %28, %29
  %31 = fmul double 5.000000e-01, %30
  store double %31, double* %21, align 8
  %32 = load double, double* %21, align 8
  %33 = load double, double* %15, align 8
  %34 = fsub double %32, %33
  %35 = load double, double* %21, align 8
  %36 = load double, double* %16, align 8
  %37 = fsub double %35, %36
  %38 = fmul double %34, %37
  %39 = load double, double* %21, align 8
  %40 = load double, double* %17, align 8
  %41 = fsub double %39, %40
  %42 = fmul double %38, %41
  %43 = load double, double* %21, align 8
  %44 = load double, double* %18, align 8
  %45 = fsub double %43, %44
  %46 = fmul double %42, %45
  %47 = load double, double* %15, align 8
  %48 = load double, double* %16, align 8
  %49 = fmul double %47, %48
  %50 = load double, double* %17, align 8
  %51 = fmul double %49, %50
  %52 = load double, double* %18, align 8
  %53 = fmul double %51, %52
  %54 = load double, double* %19, align 8
  %55 = fdiv double %54, 2.000000e+00
  %56 = fmul double %55, 1.000000e+02
  %57 = fdiv double %56, 1.800000e+02
  %58 = call double @cos(double %57) #3
  %59 = fmul double %53, %58
  %60 = load double, double* %19, align 8
  %61 = fdiv double %60, 2.000000e+00
  %62 = fmul double %61, 1.000000e+02
  %63 = fdiv double %62, 1.800000e+02
  %64 = call double @cos(double %63) #3
  %65 = fmul double %59, %64
  %66 = fsub double %46, %65
  %67 = fcmp olt double %66, 0.000000e+00
  %68 = load i32, i32* @x
  %69 = load i32, i32* @y
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %76, label %137

; <label>:76:                                     ; preds = %11
  br i1 %67, label %77, label %79

; <label>:77:                                     ; preds = %76
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %136

; <label>:79:                                     ; preds = %76
  %80 = load i32, i32* @x
  %81 = load i32, i32* @y
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %88, label %382

; <label>:88:                                     ; preds = %79, %382
  %89 = load double, double* %21, align 8
  %90 = load double, double* %15, align 8
  %91 = fsub double %89, %90
  %92 = load double, double* %21, align 8
  %93 = load double, double* %16, align 8
  %94 = fsub double %92, %93
  %95 = fmul double %91, %94
  %96 = load double, double* %21, align 8
  %97 = load double, double* %17, align 8
  %98 = fsub double %96, %97
  %99 = fmul double %95, %98
  %100 = load double, double* %21, align 8
  %101 = load double, double* %18, align 8
  %102 = fsub double %100, %101
  %103 = fmul double %99, %102
  %104 = load double, double* %15, align 8
  %105 = load double, double* %16, align 8
  %106 = fmul double %104, %105
  %107 = load double, double* %17, align 8
  %108 = fmul double %106, %107
  %109 = load double, double* %18, align 8
  %110 = fmul double %108, %109
  %111 = load double, double* %19, align 8
  %112 = fdiv double %111, 2.000000e+00
  %113 = fmul double %112, 1.000000e+02
  %114 = fdiv double %113, 1.800000e+02
  %115 = call double @cos(double %114) #3
  %116 = fmul double %110, %115
  %117 = load double, double* %19, align 8
  %118 = fdiv double %117, 2.000000e+00
  %119 = fmul double %118, 1.000000e+02
  %120 = fdiv double %119, 1.800000e+02
  %121 = call double @cos(double %120) #3
  %122 = fmul double %116, %121
  %123 = fsub double %103, %122
  %124 = call double @sqrt(double %123) #3
  store double %124, double* %20, align 8
  %125 = load double, double* %20, align 8
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), double %125)
  %127 = load i32, i32* @x
  %128 = load i32, i32* @y
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %135, label %382

; <label>:135:                                    ; preds = %88
  br label %136

; <label>:136:                                    ; preds = %135, %77
  ret i32 0

; <label>:137:                                    ; preds = %11, %2
  %138 = alloca i32, align 4
  %139 = alloca i32, align 4
  %140 = alloca i8**, align 8
  %141 = alloca double, align 8
  %142 = alloca double, align 8
  %143 = alloca double, align 8
  %144 = alloca double, align 8
  %145 = alloca double, align 8
  %146 = alloca double, align 8
  %147 = alloca double, align 8
  store i32 0, i32* %138, align 4
  store i32 %0, i32* %139, align 4
  store i8** %1, i8*** %140, align 8
  %148 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), double* %141, double* %142, double* %143, double* %144)
  %149 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), double* %145)
  %150 = load double, double* %141, align 8
  %151 = load double, double* %142, align 8
  %152 = fsub double -0.000000e+00, %150
  %153 = fadd double %152, %151
  %154 = fsub double -0.000000e+00, %150
  %155 = fadd double %154, %151
  %156 = fsub double -0.000000e+00, %150
  %157 = fadd double %156, %151
  %158 = fadd double %150, %151
  %159 = load double, double* %143, align 8
  %160 = fsub double -0.000000e+00, %158
  %161 = fadd double %160, %159
  %162 = fsub double -0.000000e+00, %158
  %163 = fadd double %162, %159
  %164 = fsub double -0.000000e+00, %158
  %165 = fadd double %164, %159
  %166 = fadd double %158, %159
  %167 = load double, double* %144, align 8
  %168 = fsub double -0.000000e+00, %166
  %169 = fadd double %168, %167
  %170 = fsub double -0.000000e+00, %166
  %171 = fadd double %170, %167
  %172 = fsub double -0.000000e+00, %166
  %173 = fadd double %172, %167
  %174 = fsub double %166, %167
  %175 = fmul double %174, %167
  %176 = fadd double %166, %167
  %177 = fsub double -0.000000e+00, 5.000000e-01
  %178 = fadd double %177, %176
  %179 = fsub double -0.000000e+00, 5.000000e-01
  %180 = fadd double %179, %176
  %181 = fsub double 5.000000e-01, %176
  %182 = fmul double %181, %176
  %183 = fmul double 5.000000e-01, %176
  store double %183, double* %147, align 8
  %184 = load double, double* %147, align 8
  %185 = load double, double* %141, align 8
  %186 = fsub double -0.000000e+00, %184
  %187 = fadd double %186, %185
  %188 = fsub double %184, %185
  %189 = fmul double %188, %185
  %190 = fsub double -0.000000e+00, %184
  %191 = fadd double %190, %185
  %192 = fsub double %184, %185
  %193 = load double, double* %147, align 8
  %194 = load double, double* %142, align 8
  %195 = fsub double %193, %194
  %196 = fmul double %195, %194
  %197 = fsub double -0.000000e+00, %193
  %198 = fadd double %197, %194
  %199 = fsub double %193, %194
  %200 = fmul double %199, %194
  %201 = fsub double %193, %194
  %202 = fmul double %201, %194
  %203 = fsub double %193, %194
  %204 = fsub double -0.000000e+00, %192
  %205 = fadd double %204, %203
  %206 = fsub double %192, %203
  %207 = fmul double %206, %203
  %208 = fsub double -0.000000e+00, %192
  %209 = fadd double %208, %203
  %210 = fsub double %192, %203
  %211 = fmul double %210, %203
  %212 = fmul double %192, %203
  %213 = load double, double* %147, align 8
  %214 = load double, double* %143, align 8
  %215 = fsub double %213, %214
  %216 = fmul double %215, %214
  %217 = fsub double -0.000000e+00, %213
  %218 = fadd double %217, %214
  %219 = fsub double %213, %214
  %220 = fsub double %212, %219
  %221 = fmul double %220, %219
  %222 = fsub double -0.000000e+00, %212
  %223 = fadd double %222, %219
  %224 = fmul double %212, %219
  %225 = load double, double* %147, align 8
  %226 = load double, double* %144, align 8
  %227 = fsub double %225, %226
  %228 = fmul double %227, %226
  %229 = fsub double %225, %226
  %230 = fsub double -0.000000e+00, %224
  %231 = fadd double %230, %229
  %232 = fsub double -0.000000e+00, %224
  %233 = fadd double %232, %229
  %234 = fsub double %224, %229
  %235 = fmul double %234, %229
  %236 = fsub double -0.000000e+00, %224
  %237 = fadd double %236, %229
  %238 = fsub double %224, %229
  %239 = fmul double %238, %229
  %240 = fsub double %224, %229
  %241 = fmul double %240, %229
  %242 = fmul double %224, %229
  %243 = load double, double* %141, align 8
  %244 = load double, double* %142, align 8
  %245 = fsub double %243, %244
  %246 = fmul double %245, %244
  %247 = fsub double -0.000000e+00, %243
  %248 = fadd double %247, %244
  %249 = fsub double -0.000000e+00, %243
  %250 = fadd double %249, %244
  %251 = fsub double -0.000000e+00, %243
  %252 = fadd double %251, %244
  %253 = fmul double %243, %244
  %254 = load double, double* %143, align 8
  %255 = fsub double %253, %254
  %256 = fmul double %255, %254
  %257 = fsub double -0.000000e+00, %253
  %258 = fadd double %257, %254
  %259 = fsub double %253, %254
  %260 = fmul double %259, %254
  %261 = fsub double %253, %254
  %262 = fmul double %261, %254
  %263 = fsub double %253, %254
  %264 = fmul double %263, %254
  %265 = fsub double %253, %254
  %266 = fmul double %265, %254
  %267 = fsub double %253, %254
  %268 = fmul double %267, %254
  %269 = fmul double %253, %254
  %270 = load double, double* %144, align 8
  %271 = fsub double -0.000000e+00, %269
  %272 = fadd double %271, %270
  %273 = fsub double %269, %270
  %274 = fmul double %273, %270
  %275 = fsub double %269, %270
  %276 = fmul double %275, %270
  %277 = fmul double %269, %270
  %278 = load double, double* %145, align 8
  %279 = fsub double -0.000000e+00, %278
  %280 = fadd double %279, 2.000000e+00
  %281 = fsub double %278, 2.000000e+00
  %282 = fmul double %281, 2.000000e+00
  %283 = fsub double -0.000000e+00, %278
  %284 = fadd double %283, 2.000000e+00
  %285 = fsub double %278, 2.000000e+00
  %286 = fmul double %285, 2.000000e+00
  %287 = fsub double %278, 2.000000e+00
  %288 = fmul double %287, 2.000000e+00
  %289 = fdiv double %278, 2.000000e+00
  %290 = fsub double -0.000000e+00, %289
  %291 = fadd double %290, 1.000000e+02
  %292 = fsub double -0.000000e+00, %289
  %293 = fadd double %292, 1.000000e+02
  %294 = fmul double %289, 1.000000e+02
  %295 = fsub double -0.000000e+00, %294
  %296 = fadd double %295, 1.800000e+02
  %297 = fsub double %294, 1.800000e+02
  %298 = fmul double %297, 1.800000e+02
  %299 = fsub double -0.000000e+00, %294
  %300 = fadd double %299, 1.800000e+02
  %301 = fsub double %294, 1.800000e+02
  %302 = fmul double %301, 1.800000e+02
  %303 = fsub double -0.000000e+00, %294
  %304 = fadd double %303, 1.800000e+02
  %305 = fsub double -0.000000e+00, %294
  %306 = fadd double %305, 1.800000e+02
  %307 = fsub double %294, 1.800000e+02
  %308 = fmul double %307, 1.800000e+02
  %309 = fdiv double %294, 1.800000e+02
  %310 = call double @cos(double %309) #3
  %311 = fsub double -0.000000e+00, %277
  %312 = fadd double %311, %310
  %313 = fsub double %277, %310
  %314 = fmul double %313, %310
  %315 = fsub double %277, %310
  %316 = fmul double %315, %310
  %317 = fmul double %277, %310
  %318 = load double, double* %145, align 8
  %319 = fsub double -0.000000e+00, %318
  %320 = fadd double %319, 2.000000e+00
  %321 = fsub double %318, 2.000000e+00
  %322 = fmul double %321, 2.000000e+00
  %323 = fsub double %318, 2.000000e+00
  %324 = fmul double %323, 2.000000e+00
  %325 = fsub double -0.000000e+00, %318
  %326 = fadd double %325, 2.000000e+00
  %327 = fsub double -0.000000e+00, %318
  %328 = fadd double %327, 2.000000e+00
  %329 = fsub double -0.000000e+00, %318
  %330 = fadd double %329, 2.000000e+00
  %331 = fdiv double %318, 2.000000e+00
  %332 = fsub double -0.000000e+00, %331
  %333 = fadd double %332, 1.000000e+02
  %334 = fsub double %331, 1.000000e+02
  %335 = fmul double %334, 1.000000e+02
  %336 = fsub double -0.000000e+00, %331
  %337 = fadd double %336, 1.000000e+02
  %338 = fsub double -0.000000e+00, %331
  %339 = fadd double %338, 1.000000e+02
  %340 = fsub double %331, 1.000000e+02
  %341 = fmul double %340, 1.000000e+02
  %342 = fsub double -0.000000e+00, %331
  %343 = fadd double %342, 1.000000e+02
  %344 = fmul double %331, 1.000000e+02
  %345 = fsub double -0.000000e+00, %344
  %346 = fadd double %345, 1.800000e+02
  %347 = fsub double -0.000000e+00, %344
  %348 = fadd double %347, 1.800000e+02
  %349 = fsub double %344, 1.800000e+02
  %350 = fmul double %349, 1.800000e+02
  %351 = fsub double -0.000000e+00, %344
  %352 = fadd double %351, 1.800000e+02
  %353 = fdiv double %344, 1.800000e+02
  %354 = call double @cos(double %353) #3
  %355 = fsub double -0.000000e+00, %317
  %356 = fadd double %355, %354
  %357 = fsub double -0.000000e+00, %317
  %358 = fadd double %357, %354
  %359 = fsub double -0.000000e+00, %317
  %360 = fadd double %359, %354
  %361 = fsub double -0.000000e+00, %317
  %362 = fadd double %361, %354
  %363 = fsub double %317, %354
  %364 = fmul double %363, %354
  %365 = fsub double -0.000000e+00, %317
  %366 = fadd double %365, %354
  %367 = fmul double %317, %354
  %368 = fsub double %242, %367
  %369 = fmul double %368, %367
  %370 = fsub double -0.000000e+00, %242
  %371 = fadd double %370, %367
  %372 = fsub double -0.000000e+00, %242
  %373 = fadd double %372, %367
  %374 = fsub double %242, %367
  %375 = fmul double %374, %367
  %376 = fsub double %242, %367
  %377 = fmul double %376, %367
  %378 = fsub double %242, %367
  %379 = fmul double %378, %367
  %380 = fsub double %242, %367
  %381 = fcmp olt double %380, 0.000000e+00
  br label %11

; <label>:382:                                    ; preds = %88, %79
  %383 = load double, double* %21, align 8
  %384 = load double, double* %15, align 8
  %385 = fsub double -0.000000e+00, %383
  %386 = fadd double %385, %384
  %387 = fsub double -0.000000e+00, %383
  %388 = fadd double %387, %384
  %389 = fsub double -0.000000e+00, %383
  %390 = fadd double %389, %384
  %391 = fsub double -0.000000e+00, %383
  %392 = fadd double %391, %384
  %393 = fsub double %383, %384
  %394 = load double, double* %21, align 8
  %395 = load double, double* %16, align 8
  %396 = fsub double -0.000000e+00, %394
  %397 = fadd double %396, %395
  %398 = fsub double %394, %395
  %399 = fsub double -0.000000e+00, %393
  %400 = fadd double %399, %398
  %401 = fsub double %393, %398
  %402 = fmul double %401, %398
  %403 = fmul double %393, %398
  %404 = load double, double* %21, align 8
  %405 = load double, double* %17, align 8
  %406 = fsub double -0.000000e+00, %404
  %407 = fadd double %406, %405
  %408 = fsub double %404, %405
  %409 = fmul double %408, %405
  %410 = fsub double %404, %405
  %411 = fmul double %410, %405
  %412 = fsub double %404, %405
  %413 = fsub double %403, %412
  %414 = fmul double %413, %412
  %415 = fsub double -0.000000e+00, %403
  %416 = fadd double %415, %412
  %417 = fmul double %403, %412
  %418 = load double, double* %21, align 8
  %419 = load double, double* %18, align 8
  %420 = fsub double %418, %419
  %421 = fmul double %420, %419
  %422 = fsub double %418, %419
  %423 = fsub double %417, %422
  %424 = fmul double %423, %422
  %425 = fmul double %417, %422
  %426 = load double, double* %15, align 8
  %427 = load double, double* %16, align 8
  %428 = fsub double -0.000000e+00, %426
  %429 = fadd double %428, %427
  %430 = fsub double -0.000000e+00, %426
  %431 = fadd double %430, %427
  %432 = fsub double -0.000000e+00, %426
  %433 = fadd double %432, %427
  %434 = fsub double %426, %427
  %435 = fmul double %434, %427
  %436 = fmul double %426, %427
  %437 = load double, double* %17, align 8
  %438 = fsub double -0.000000e+00, %436
  %439 = fadd double %438, %437
  %440 = fsub double -0.000000e+00, %436
  %441 = fadd double %440, %437
  %442 = fsub double %436, %437
  %443 = fmul double %442, %437
  %444 = fsub double -0.000000e+00, %436
  %445 = fadd double %444, %437
  %446 = fmul double %436, %437
  %447 = load double, double* %18, align 8
  %448 = fsub double %446, %447
  %449 = fmul double %448, %447
  %450 = fsub double -0.000000e+00, %446
  %451 = fadd double %450, %447
  %452 = fsub double -0.000000e+00, %446
  %453 = fadd double %452, %447
  %454 = fmul double %446, %447
  %455 = load double, double* %19, align 8
  %456 = fsub double -0.000000e+00, %455
  %457 = fadd double %456, 2.000000e+00
  %458 = fsub double %455, 2.000000e+00
  %459 = fmul double %458, 2.000000e+00
  %460 = fsub double -0.000000e+00, %455
  %461 = fadd double %460, 2.000000e+00
  %462 = fsub double -0.000000e+00, %455
  %463 = fadd double %462, 2.000000e+00
  %464 = fsub double %455, 2.000000e+00
  %465 = fmul double %464, 2.000000e+00
  %466 = fsub double -0.000000e+00, %455
  %467 = fadd double %466, 2.000000e+00
  %468 = fdiv double %455, 2.000000e+00
  %469 = fsub double -0.000000e+00, %468
  %470 = fadd double %469, 1.000000e+02
  %471 = fsub double %468, 1.000000e+02
  %472 = fmul double %471, 1.000000e+02
  %473 = fsub double %468, 1.000000e+02
  %474 = fmul double %473, 1.000000e+02
  %475 = fsub double -0.000000e+00, %468
  %476 = fadd double %475, 1.000000e+02
  %477 = fsub double %468, 1.000000e+02
  %478 = fmul double %477, 1.000000e+02
  %479 = fsub double %468, 1.000000e+02
  %480 = fmul double %479, 1.000000e+02
  %481 = fsub double %468, 1.000000e+02
  %482 = fmul double %481, 1.000000e+02
  %483 = fsub double %468, 1.000000e+02
  %484 = fmul double %483, 1.000000e+02
  %485 = fmul double %468, 1.000000e+02
  %486 = fsub double -0.000000e+00, %485
  %487 = fadd double %486, 1.800000e+02
  %488 = fsub double -0.000000e+00, %485
  %489 = fadd double %488, 1.800000e+02
  %490 = fsub double %485, 1.800000e+02
  %491 = fmul double %490, 1.800000e+02
  %492 = fdiv double %485, 1.800000e+02
  %493 = call double @cos(double %492) #3
  %494 = fsub double %454, %493
  %495 = fmul double %494, %493
  %496 = fsub double %454, %493
  %497 = fmul double %496, %493
  %498 = fsub double -0.000000e+00, %454
  %499 = fadd double %498, %493
  %500 = fsub double -0.000000e+00, %454
  %501 = fadd double %500, %493
  %502 = fmul double %454, %493
  %503 = load double, double* %19, align 8
  %504 = fsub double %503, 2.000000e+00
  %505 = fmul double %504, 2.000000e+00
  %506 = fdiv double %503, 2.000000e+00
  %507 = fsub double -0.000000e+00, %506
  %508 = fadd double %507, 1.000000e+02
  %509 = fsub double -0.000000e+00, %506
  %510 = fadd double %509, 1.000000e+02
  %511 = fmul double %506, 1.000000e+02
  %512 = fsub double %511, 1.800000e+02
  %513 = fmul double %512, 1.800000e+02
  %514 = fsub double %511, 1.800000e+02
  %515 = fmul double %514, 1.800000e+02
  %516 = fsub double %511, 1.800000e+02
  %517 = fmul double %516, 1.800000e+02
  %518 = fdiv double %511, 1.800000e+02
  %519 = call double @cos(double %518) #3
  %520 = fsub double %502, %519
  %521 = fmul double %520, %519
  %522 = fsub double -0.000000e+00, %502
  %523 = fadd double %522, %519
  %524 = fsub double %502, %519
  %525 = fmul double %524, %519
  %526 = fmul double %502, %519
  %527 = fsub double %425, %526
  %528 = fmul double %527, %526
  %529 = fsub double -0.000000e+00, %425
  %530 = fadd double %529, %526
  %531 = fsub double -0.000000e+00, %425
  %532 = fadd double %531, %526
  %533 = fsub double %425, %526
  %534 = fmul double %533, %526
  %535 = fsub double %425, %526
  %536 = fmul double %535, %526
  %537 = fsub double -0.000000e+00, %425
  %538 = fadd double %537, %526
  %539 = fsub double %425, %526
  %540 = fmul double %539, %526
  %541 = fsub double -0.000000e+00, %425
  %542 = fadd double %541, %526
  %543 = fsub double -0.000000e+00, %425
  %544 = fadd double %543, %526
  %545 = fsub double %425, %526
  %546 = call double @sqrt(double %545) #3
  store double %546, double* %20, align 8
  %547 = load double, double* %20, align 8
  %548 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), double %547)
  br label %88
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
