; ModuleID = 'source-C-CXX/39/581.c'
source_filename = "source-C-CXX/39/581.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"%lf%lf%lf%lf%lf\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32, i8**) #0 {
  %3 = load i32, i32* @x
  %4 = load i32, i32* @y
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %11, label %137

; <label>:11:                                     ; preds = %2, %137
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8**, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  store i32 0, i32* %12, align 4
  store i32 %0, i32* %13, align 4
  store i8** %1, i8*** %14, align 8
  store double 0x400921FB4D12D84A, double* %22, align 8
  %23 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %15, double* %16, double* %17, double* %18, double* %19)
  %24 = load double, double* %15, align 8
  %25 = load double, double* %16, align 8
  %26 = fadd double %24, %25
  %27 = load double, double* %17, align 8
  %28 = fadd double %26, %27
  %29 = load double, double* %18, align 8
  %30 = fadd double %28, %29
  %31 = fdiv double %30, 2.000000e+00
  store double %31, double* %20, align 8
  %32 = load double, double* %20, align 8
  %33 = load double, double* %15, align 8
  %34 = fsub double %32, %33
  %35 = load double, double* %20, align 8
  %36 = load double, double* %16, align 8
  %37 = fsub double %35, %36
  %38 = fmul double %34, %37
  %39 = load double, double* %20, align 8
  %40 = load double, double* %17, align 8
  %41 = fsub double %39, %40
  %42 = fmul double %38, %41
  %43 = load double, double* %20, align 8
  %44 = load double, double* %18, align 8
  %45 = fsub double %43, %44
  %46 = fmul double %42, %45
  %47 = load double, double* %15, align 8
  %48 = load double, double* %16, align 8
  %49 = fmul double %47, %48
  %50 = load double, double* %17, align 8
  %51 = fmul double %49, %50
  %52 = load double, double* %18, align 8
  %53 = fmul double %51, %52
  %54 = load double, double* %22, align 8
  %55 = load double, double* %19, align 8
  %56 = fmul double %54, %55
  %57 = fdiv double %56, 3.600000e+02
  %58 = call double @cos(double %57) #3
  %59 = fmul double %53, %58
  %60 = load double, double* %22, align 8
  %61 = load double, double* %19, align 8
  %62 = fmul double %60, %61
  %63 = fdiv double %62, 3.600000e+02
  %64 = call double @cos(double %63) #3
  %65 = fmul double %59, %64
  %66 = fsub double %46, %65
  %67 = fcmp olt double %66, 0.000000e+00
  %68 = load i32, i32* @x
  %69 = load i32, i32* @y
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %76, label %137

; <label>:76:                                     ; preds = %11
  br i1 %67, label %77, label %79

; <label>:77:                                     ; preds = %76
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %136

; <label>:79:                                     ; preds = %76
  %80 = load i32, i32* @x
  %81 = load i32, i32* @y
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %88, label %362

; <label>:88:                                     ; preds = %79, %362
  %89 = load double, double* %20, align 8
  %90 = load double, double* %15, align 8
  %91 = fsub double %89, %90
  %92 = load double, double* %20, align 8
  %93 = load double, double* %16, align 8
  %94 = fsub double %92, %93
  %95 = fmul double %91, %94
  %96 = load double, double* %20, align 8
  %97 = load double, double* %17, align 8
  %98 = fsub double %96, %97
  %99 = fmul double %95, %98
  %100 = load double, double* %20, align 8
  %101 = load double, double* %18, align 8
  %102 = fsub double %100, %101
  %103 = fmul double %99, %102
  %104 = load double, double* %15, align 8
  %105 = load double, double* %16, align 8
  %106 = fmul double %104, %105
  %107 = load double, double* %17, align 8
  %108 = fmul double %106, %107
  %109 = load double, double* %18, align 8
  %110 = fmul double %108, %109
  %111 = load double, double* %22, align 8
  %112 = load double, double* %19, align 8
  %113 = fmul double %111, %112
  %114 = fdiv double %113, 3.600000e+02
  %115 = call double @cos(double %114) #3
  %116 = fmul double %110, %115
  %117 = load double, double* %22, align 8
  %118 = load double, double* %19, align 8
  %119 = fmul double %117, %118
  %120 = fdiv double %119, 3.600000e+02
  %121 = call double @cos(double %120) #3
  %122 = fmul double %116, %121
  %123 = fsub double %103, %122
  %124 = call double @sqrt(double %123) #3
  store double %124, double* %21, align 8
  %125 = load double, double* %21, align 8
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %125)
  %127 = load i32, i32* @x
  %128 = load i32, i32* @y
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %135, label %362

; <label>:135:                                    ; preds = %88
  br label %136

; <label>:136:                                    ; preds = %135, %77
  ret i32 0

; <label>:137:                                    ; preds = %11, %2
  %138 = alloca i32, align 4
  %139 = alloca i32, align 4
  %140 = alloca i8**, align 8
  %141 = alloca double, align 8
  %142 = alloca double, align 8
  %143 = alloca double, align 8
  %144 = alloca double, align 8
  %145 = alloca double, align 8
  %146 = alloca double, align 8
  %147 = alloca double, align 8
  %148 = alloca double, align 8
  store i32 0, i32* %138, align 4
  store i32 %0, i32* %139, align 4
  store i8** %1, i8*** %140, align 8
  store double 0x400921FB4D12D84A, double* %148, align 8
  %149 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), double* %141, double* %142, double* %143, double* %144, double* %145)
  %150 = load double, double* %141, align 8
  %151 = load double, double* %142, align 8
  %152 = fsub double %150, %151
  %153 = fmul double %152, %151
  %154 = fsub double -0.000000e+00, %150
  %155 = fadd double %154, %151
  %156 = fsub double %150, %151
  %157 = fmul double %156, %151
  %158 = fsub double %150, %151
  %159 = fmul double %158, %151
  %160 = fsub double %150, %151
  %161 = fmul double %160, %151
  %162 = fsub double %150, %151
  %163 = fmul double %162, %151
  %164 = fsub double -0.000000e+00, %150
  %165 = fadd double %164, %151
  %166 = fsub double -0.000000e+00, %150
  %167 = fadd double %166, %151
  %168 = fsub double -0.000000e+00, %150
  %169 = fadd double %168, %151
  %170 = fadd double %150, %151
  %171 = load double, double* %143, align 8
  %172 = fsub double -0.000000e+00, %170
  %173 = fadd double %172, %171
  %174 = fsub double %170, %171
  %175 = fmul double %174, %171
  %176 = fsub double %170, %171
  %177 = fmul double %176, %171
  %178 = fsub double %170, %171
  %179 = fmul double %178, %171
  %180 = fsub double -0.000000e+00, %170
  %181 = fadd double %180, %171
  %182 = fadd double %170, %171
  %183 = load double, double* %144, align 8
  %184 = fsub double %182, %183
  %185 = fmul double %184, %183
  %186 = fadd double %182, %183
  %187 = fsub double %186, 2.000000e+00
  %188 = fmul double %187, 2.000000e+00
  %189 = fsub double -0.000000e+00, %186
  %190 = fadd double %189, 2.000000e+00
  %191 = fsub double %186, 2.000000e+00
  %192 = fmul double %191, 2.000000e+00
  %193 = fdiv double %186, 2.000000e+00
  store double %193, double* %146, align 8
  %194 = load double, double* %146, align 8
  %195 = load double, double* %141, align 8
  %196 = fsub double -0.000000e+00, %194
  %197 = fadd double %196, %195
  %198 = fsub double %194, %195
  %199 = load double, double* %146, align 8
  %200 = load double, double* %142, align 8
  %201 = fsub double -0.000000e+00, %199
  %202 = fadd double %201, %200
  %203 = fsub double -0.000000e+00, %199
  %204 = fadd double %203, %200
  %205 = fsub double %199, %200
  %206 = fmul double %205, %200
  %207 = fsub double %199, %200
  %208 = fsub double -0.000000e+00, %198
  %209 = fadd double %208, %207
  %210 = fsub double -0.000000e+00, %198
  %211 = fadd double %210, %207
  %212 = fsub double -0.000000e+00, %198
  %213 = fadd double %212, %207
  %214 = fsub double -0.000000e+00, %198
  %215 = fadd double %214, %207
  %216 = fsub double %198, %207
  %217 = fmul double %216, %207
  %218 = fsub double -0.000000e+00, %198
  %219 = fadd double %218, %207
  %220 = fmul double %198, %207
  %221 = load double, double* %146, align 8
  %222 = load double, double* %143, align 8
  %223 = fsub double %221, %222
  %224 = fsub double -0.000000e+00, %220
  %225 = fadd double %224, %223
  %226 = fsub double %220, %223
  %227 = fmul double %226, %223
  %228 = fsub double -0.000000e+00, %220
  %229 = fadd double %228, %223
  %230 = fsub double %220, %223
  %231 = fmul double %230, %223
  %232 = fsub double -0.000000e+00, %220
  %233 = fadd double %232, %223
  %234 = fmul double %220, %223
  %235 = load double, double* %146, align 8
  %236 = load double, double* %144, align 8
  %237 = fsub double %235, %236
  %238 = fmul double %237, %236
  %239 = fsub double -0.000000e+00, %235
  %240 = fadd double %239, %236
  %241 = fsub double -0.000000e+00, %235
  %242 = fadd double %241, %236
  %243 = fsub double %235, %236
  %244 = fmul double %243, %236
  %245 = fsub double -0.000000e+00, %235
  %246 = fadd double %245, %236
  %247 = fsub double %235, %236
  %248 = fmul double %247, %236
  %249 = fsub double %235, %236
  %250 = fsub double %234, %249
  %251 = fmul double %250, %249
  %252 = fsub double -0.000000e+00, %234
  %253 = fadd double %252, %249
  %254 = fmul double %234, %249
  %255 = load double, double* %141, align 8
  %256 = load double, double* %142, align 8
  %257 = fsub double %255, %256
  %258 = fmul double %257, %256
  %259 = fsub double -0.000000e+00, %255
  %260 = fadd double %259, %256
  %261 = fsub double -0.000000e+00, %255
  %262 = fadd double %261, %256
  %263 = fsub double -0.000000e+00, %255
  %264 = fadd double %263, %256
  %265 = fsub double %255, %256
  %266 = fmul double %265, %256
  %267 = fsub double -0.000000e+00, %255
  %268 = fadd double %267, %256
  %269 = fmul double %255, %256
  %270 = load double, double* %143, align 8
  %271 = fsub double -0.000000e+00, %269
  %272 = fadd double %271, %270
  %273 = fmul double %269, %270
  %274 = load double, double* %144, align 8
  %275 = fsub double %273, %274
  %276 = fmul double %275, %274
  %277 = fsub double %273, %274
  %278 = fmul double %277, %274
  %279 = fsub double -0.000000e+00, %273
  %280 = fadd double %279, %274
  %281 = fsub double -0.000000e+00, %273
  %282 = fadd double %281, %274
  %283 = fsub double -0.000000e+00, %273
  %284 = fadd double %283, %274
  %285 = fsub double -0.000000e+00, %273
  %286 = fadd double %285, %274
  %287 = fsub double %273, %274
  %288 = fmul double %287, %274
  %289 = fsub double -0.000000e+00, %273
  %290 = fadd double %289, %274
  %291 = fmul double %273, %274
  %292 = load double, double* %148, align 8
  %293 = load double, double* %145, align 8
  %294 = fsub double -0.000000e+00, %292
  %295 = fadd double %294, %293
  %296 = fmul double %292, %293
  %297 = fsub double -0.000000e+00, %296
  %298 = fadd double %297, 3.600000e+02
  %299 = fsub double %296, 3.600000e+02
  %300 = fmul double %299, 3.600000e+02
  %301 = fsub double -0.000000e+00, %296
  %302 = fadd double %301, 3.600000e+02
  %303 = fdiv double %296, 3.600000e+02
  %304 = call double @cos(double %303) #3
  %305 = fsub double -0.000000e+00, %291
  %306 = fadd double %305, %304
  %307 = fsub double -0.000000e+00, %291
  %308 = fadd double %307, %304
  %309 = fsub double -0.000000e+00, %291
  %310 = fadd double %309, %304
  %311 = fsub double -0.000000e+00, %291
  %312 = fadd double %311, %304
  %313 = fsub double -0.000000e+00, %291
  %314 = fadd double %313, %304
  %315 = fsub double %291, %304
  %316 = fmul double %315, %304
  %317 = fsub double -0.000000e+00, %291
  %318 = fadd double %317, %304
  %319 = fsub double %291, %304
  %320 = fmul double %319, %304
  %321 = fmul double %291, %304
  %322 = load double, double* %148, align 8
  %323 = load double, double* %145, align 8
  %324 = fsub double %322, %323
  %325 = fmul double %324, %323
  %326 = fsub double %322, %323
  %327 = fmul double %326, %323
  %328 = fsub double -0.000000e+00, %322
  %329 = fadd double %328, %323
  %330 = fsub double %322, %323
  %331 = fmul double %330, %323
  %332 = fsub double %322, %323
  %333 = fmul double %332, %323
  %334 = fmul double %322, %323
  %335 = fsub double %334, 3.600000e+02
  %336 = fmul double %335, 3.600000e+02
  %337 = fsub double %334, 3.600000e+02
  %338 = fmul double %337, 3.600000e+02
  %339 = fsub double -0.000000e+00, %334
  %340 = fadd double %339, 3.600000e+02
  %341 = fsub double %334, 3.600000e+02
  %342 = fmul double %341, 3.600000e+02
  %343 = fdiv double %334, 3.600000e+02
  %344 = call double @cos(double %343) #3
  %345 = fsub double %321, %344
  %346 = fmul double %345, %344
  %347 = fsub double -0.000000e+00, %321
  %348 = fadd double %347, %344
  %349 = fsub double %321, %344
  %350 = fmul double %349, %344
  %351 = fmul double %321, %344
  %352 = fsub double %254, %351
  %353 = fmul double %352, %351
  %354 = fsub double %254, %351
  %355 = fmul double %354, %351
  %356 = fsub double -0.000000e+00, %254
  %357 = fadd double %356, %351
  %358 = fsub double -0.000000e+00, %254
  %359 = fadd double %358, %351
  %360 = fsub double %254, %351
  %361 = fcmp olt double %360, 0.000000e+00
  br label %11

; <label>:362:                                    ; preds = %88, %79
  %363 = load double, double* %20, align 8
  %364 = load double, double* %15, align 8
  %365 = fsub double %363, %364
  %366 = load double, double* %20, align 8
  %367 = load double, double* %16, align 8
  %368 = fsub double %366, %367
  %369 = fmul double %368, %367
  %370 = fsub double %366, %367
  %371 = fmul double %370, %367
  %372 = fsub double -0.000000e+00, %366
  %373 = fadd double %372, %367
  %374 = fsub double -0.000000e+00, %366
  %375 = fadd double %374, %367
  %376 = fsub double -0.000000e+00, %366
  %377 = fadd double %376, %367
  %378 = fsub double %366, %367
  %379 = fsub double %365, %378
  %380 = fmul double %379, %378
  %381 = fsub double -0.000000e+00, %365
  %382 = fadd double %381, %378
  %383 = fsub double -0.000000e+00, %365
  %384 = fadd double %383, %378
  %385 = fsub double -0.000000e+00, %365
  %386 = fadd double %385, %378
  %387 = fsub double -0.000000e+00, %365
  %388 = fadd double %387, %378
  %389 = fmul double %365, %378
  %390 = load double, double* %20, align 8
  %391 = load double, double* %17, align 8
  %392 = fsub double %390, %391
  %393 = fmul double %392, %391
  %394 = fsub double %390, %391
  %395 = fmul double %394, %391
  %396 = fsub double %390, %391
  %397 = fmul double %396, %391
  %398 = fsub double %390, %391
  %399 = fmul double %398, %391
  %400 = fsub double -0.000000e+00, %390
  %401 = fadd double %400, %391
  %402 = fsub double -0.000000e+00, %390
  %403 = fadd double %402, %391
  %404 = fsub double %390, %391
  %405 = fsub double %389, %404
  %406 = fmul double %405, %404
  %407 = fmul double %389, %404
  %408 = load double, double* %20, align 8
  %409 = load double, double* %18, align 8
  %410 = fsub double %408, %409
  %411 = fmul double %410, %409
  %412 = fsub double %408, %409
  %413 = fmul double %412, %409
  %414 = fsub double %408, %409
  %415 = fmul double %407, %414
  %416 = load double, double* %15, align 8
  %417 = load double, double* %16, align 8
  %418 = fsub double %416, %417
  %419 = fmul double %418, %417
  %420 = fsub double %416, %417
  %421 = fmul double %420, %417
  %422 = fsub double -0.000000e+00, %416
  %423 = fadd double %422, %417
  %424 = fsub double -0.000000e+00, %416
  %425 = fadd double %424, %417
  %426 = fsub double -0.000000e+00, %416
  %427 = fadd double %426, %417
  %428 = fmul double %416, %417
  %429 = load double, double* %17, align 8
  %430 = fsub double -0.000000e+00, %428
  %431 = fadd double %430, %429
  %432 = fsub double -0.000000e+00, %428
  %433 = fadd double %432, %429
  %434 = fsub double %428, %429
  %435 = fmul double %434, %429
  %436 = fsub double %428, %429
  %437 = fmul double %436, %429
  %438 = fsub double -0.000000e+00, %428
  %439 = fadd double %438, %429
  %440 = fmul double %428, %429
  %441 = load double, double* %18, align 8
  %442 = fsub double -0.000000e+00, %440
  %443 = fadd double %442, %441
  %444 = fsub double %440, %441
  %445 = fmul double %444, %441
  %446 = fmul double %440, %441
  %447 = load double, double* %22, align 8
  %448 = load double, double* %19, align 8
  %449 = fsub double -0.000000e+00, %447
  %450 = fadd double %449, %448
  %451 = fsub double %447, %448
  %452 = fmul double %451, %448
  %453 = fsub double -0.000000e+00, %447
  %454 = fadd double %453, %448
  %455 = fmul double %447, %448
  %456 = fsub double %455, 3.600000e+02
  %457 = fmul double %456, 3.600000e+02
  %458 = fsub double -0.000000e+00, %455
  %459 = fadd double %458, 3.600000e+02
  %460 = fdiv double %455, 3.600000e+02
  %461 = call double @cos(double %460) #3
  %462 = fsub double -0.000000e+00, %446
  %463 = fadd double %462, %461
  %464 = fsub double -0.000000e+00, %446
  %465 = fadd double %464, %461
  %466 = fsub double %446, %461
  %467 = fmul double %466, %461
  %468 = fmul double %446, %461
  %469 = load double, double* %22, align 8
  %470 = load double, double* %19, align 8
  %471 = fsub double %469, %470
  %472 = fmul double %471, %470
  %473 = fsub double %469, %470
  %474 = fmul double %473, %470
  %475 = fsub double -0.000000e+00, %469
  %476 = fadd double %475, %470
  %477 = fsub double -0.000000e+00, %469
  %478 = fadd double %477, %470
  %479 = fsub double -0.000000e+00, %469
  %480 = fadd double %479, %470
  %481 = fmul double %469, %470
  %482 = fsub double %481, 3.600000e+02
  %483 = fmul double %482, 3.600000e+02
  %484 = fsub double %481, 3.600000e+02
  %485 = fmul double %484, 3.600000e+02
  %486 = fdiv double %481, 3.600000e+02
  %487 = call double @cos(double %486) #3
  %488 = fmul double %468, %487
  %489 = fsub double %415, %488
  %490 = fmul double %489, %488
  %491 = fsub double %415, %488
  %492 = fmul double %491, %488
  %493 = fsub double %415, %488
  %494 = fmul double %493, %488
  %495 = fsub double %415, %488
  %496 = fmul double %495, %488
  %497 = fsub double %415, %488
  %498 = call double @sqrt(double %497) #3
  store double %498, double* %21, align 8
  %499 = load double, double* %21, align 8
  %500 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %499)
  br label %88
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
