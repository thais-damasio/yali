; ModuleID = 'source-C-CXX/39/1248.c'
source_filename = "source-C-CXX/39/1248.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [20 x i8] c"%lf\0A%lf\0A%lf\0A%lf\0A%lf\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %106

; <label>:9:                                      ; preds = %0, %106
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), double* %11, double* %12, double* %13, double* %14, double* %15)
  %20 = load double, double* %11, align 8
  %21 = load double, double* %12, align 8
  %22 = fadd double %20, %21
  %23 = load double, double* %13, align 8
  %24 = fadd double %22, %23
  %25 = load double, double* %14, align 8
  %26 = fadd double %24, %25
  %27 = fdiv double %26, 2.000000e+00
  store double %27, double* %16, align 8
  %28 = load double, double* %15, align 8
  %29 = fdiv double %28, 2.000000e+00
  %30 = fdiv double %29, 1.800000e+02
  %31 = fmul double %30, 0x400921FB4D12D84A
  %32 = call double @cos(double %31) #3
  %33 = load double, double* %15, align 8
  %34 = fdiv double %33, 2.000000e+00
  %35 = fdiv double %34, 1.800000e+02
  %36 = fmul double %35, 0x400921FB4D12D84A
  %37 = call double @cos(double %36) #3
  %38 = fmul double %32, %37
  store double %38, double* %17, align 8
  %39 = load double, double* %16, align 8
  %40 = load double, double* %11, align 8
  %41 = fsub double %39, %40
  %42 = load double, double* %16, align 8
  %43 = load double, double* %12, align 8
  %44 = fsub double %42, %43
  %45 = fmul double %41, %44
  %46 = load double, double* %16, align 8
  %47 = load double, double* %13, align 8
  %48 = fsub double %46, %47
  %49 = fmul double %45, %48
  %50 = load double, double* %16, align 8
  %51 = load double, double* %14, align 8
  %52 = fsub double %50, %51
  %53 = fmul double %49, %52
  %54 = load double, double* %11, align 8
  %55 = load double, double* %12, align 8
  %56 = fmul double %54, %55
  %57 = load double, double* %13, align 8
  %58 = fmul double %56, %57
  %59 = load double, double* %14, align 8
  %60 = fmul double %58, %59
  %61 = load double, double* %17, align 8
  %62 = fmul double %60, %61
  %63 = fsub double %53, %62
  %64 = call double @sqrt(double %63) #3
  store double %64, double* %18, align 8
  %65 = load double, double* %16, align 8
  %66 = load double, double* %11, align 8
  %67 = fsub double %65, %66
  %68 = load double, double* %16, align 8
  %69 = load double, double* %12, align 8
  %70 = fsub double %68, %69
  %71 = fmul double %67, %70
  %72 = load double, double* %16, align 8
  %73 = load double, double* %13, align 8
  %74 = fsub double %72, %73
  %75 = fmul double %71, %74
  %76 = load double, double* %16, align 8
  %77 = load double, double* %14, align 8
  %78 = fsub double %76, %77
  %79 = fmul double %75, %78
  %80 = load double, double* %11, align 8
  %81 = load double, double* %12, align 8
  %82 = fmul double %80, %81
  %83 = load double, double* %13, align 8
  %84 = fmul double %82, %83
  %85 = load double, double* %14, align 8
  %86 = fmul double %84, %85
  %87 = load double, double* %17, align 8
  %88 = fmul double %86, %87
  %89 = fsub double %79, %88
  %90 = fcmp ogt double %89, 0.000000e+00
  %91 = load i32, i32* @x
  %92 = load i32, i32* @y
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %99, label %106

; <label>:99:                                     ; preds = %9
  br i1 %90, label %100, label %103

; <label>:100:                                    ; preds = %99
  %101 = load double, double* %18, align 8
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double %101)
  br label %105

; <label>:103:                                    ; preds = %99
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0))
  br label %105

; <label>:105:                                    ; preds = %103, %100
  ret i32 0

; <label>:106:                                    ; preds = %9, %0
  %107 = alloca i32, align 4
  %108 = alloca double, align 8
  %109 = alloca double, align 8
  %110 = alloca double, align 8
  %111 = alloca double, align 8
  %112 = alloca double, align 8
  %113 = alloca double, align 8
  %114 = alloca double, align 8
  %115 = alloca double, align 8
  store i32 0, i32* %107, align 4
  %116 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), double* %108, double* %109, double* %110, double* %111, double* %112)
  %117 = load double, double* %108, align 8
  %118 = load double, double* %109, align 8
  %119 = fsub double %117, %118
  %120 = fmul double %119, %118
  %121 = fsub double -0.000000e+00, %117
  %122 = fadd double %121, %118
  %123 = fsub double %117, %118
  %124 = fmul double %123, %118
  %125 = fsub double -0.000000e+00, %117
  %126 = fadd double %125, %118
  %127 = fadd double %117, %118
  %128 = load double, double* %110, align 8
  %129 = fsub double %127, %128
  %130 = fmul double %129, %128
  %131 = fsub double %127, %128
  %132 = fmul double %131, %128
  %133 = fsub double %127, %128
  %134 = fmul double %133, %128
  %135 = fsub double %127, %128
  %136 = fmul double %135, %128
  %137 = fsub double -0.000000e+00, %127
  %138 = fadd double %137, %128
  %139 = fadd double %127, %128
  %140 = load double, double* %111, align 8
  %141 = fsub double -0.000000e+00, %139
  %142 = fadd double %141, %140
  %143 = fsub double -0.000000e+00, %139
  %144 = fadd double %143, %140
  %145 = fsub double %139, %140
  %146 = fmul double %145, %140
  %147 = fsub double %139, %140
  %148 = fmul double %147, %140
  %149 = fsub double -0.000000e+00, %139
  %150 = fadd double %149, %140
  %151 = fsub double %139, %140
  %152 = fmul double %151, %140
  %153 = fadd double %139, %140
  %154 = fsub double -0.000000e+00, %153
  %155 = fadd double %154, 2.000000e+00
  %156 = fsub double -0.000000e+00, %153
  %157 = fadd double %156, 2.000000e+00
  %158 = fsub double -0.000000e+00, %153
  %159 = fadd double %158, 2.000000e+00
  %160 = fsub double %153, 2.000000e+00
  %161 = fmul double %160, 2.000000e+00
  %162 = fsub double -0.000000e+00, %153
  %163 = fadd double %162, 2.000000e+00
  %164 = fdiv double %153, 2.000000e+00
  store double %164, double* %113, align 8
  %165 = load double, double* %112, align 8
  %166 = fsub double -0.000000e+00, %165
  %167 = fadd double %166, 2.000000e+00
  %168 = fsub double %165, 2.000000e+00
  %169 = fmul double %168, 2.000000e+00
  %170 = fsub double -0.000000e+00, %165
  %171 = fadd double %170, 2.000000e+00
  %172 = fsub double -0.000000e+00, %165
  %173 = fadd double %172, 2.000000e+00
  %174 = fdiv double %165, 2.000000e+00
  %175 = fsub double %174, 1.800000e+02
  %176 = fmul double %175, 1.800000e+02
  %177 = fsub double -0.000000e+00, %174
  %178 = fadd double %177, 1.800000e+02
  %179 = fsub double %174, 1.800000e+02
  %180 = fmul double %179, 1.800000e+02
  %181 = fsub double -0.000000e+00, %174
  %182 = fadd double %181, 1.800000e+02
  %183 = fsub double %174, 1.800000e+02
  %184 = fmul double %183, 1.800000e+02
  %185 = fdiv double %174, 1.800000e+02
  %186 = fsub double -0.000000e+00, %185
  %187 = fadd double %186, 0x400921FB4D12D84A
  %188 = fsub double -0.000000e+00, %185
  %189 = fadd double %188, 0x400921FB4D12D84A
  %190 = fmul double %185, 0x400921FB4D12D84A
  %191 = call double @cos(double %190) #3
  %192 = load double, double* %112, align 8
  %193 = fsub double -0.000000e+00, %192
  %194 = fadd double %193, 2.000000e+00
  %195 = fsub double -0.000000e+00, %192
  %196 = fadd double %195, 2.000000e+00
  %197 = fsub double -0.000000e+00, %192
  %198 = fadd double %197, 2.000000e+00
  %199 = fsub double -0.000000e+00, %192
  %200 = fadd double %199, 2.000000e+00
  %201 = fsub double %192, 2.000000e+00
  %202 = fmul double %201, 2.000000e+00
  %203 = fsub double -0.000000e+00, %192
  %204 = fadd double %203, 2.000000e+00
  %205 = fsub double %192, 2.000000e+00
  %206 = fmul double %205, 2.000000e+00
  %207 = fdiv double %192, 2.000000e+00
  %208 = fsub double %207, 1.800000e+02
  %209 = fmul double %208, 1.800000e+02
  %210 = fsub double -0.000000e+00, %207
  %211 = fadd double %210, 1.800000e+02
  %212 = fsub double -0.000000e+00, %207
  %213 = fadd double %212, 1.800000e+02
  %214 = fsub double %207, 1.800000e+02
  %215 = fmul double %214, 1.800000e+02
  %216 = fsub double %207, 1.800000e+02
  %217 = fmul double %216, 1.800000e+02
  %218 = fdiv double %207, 1.800000e+02
  %219 = fsub double %218, 0x400921FB4D12D84A
  %220 = fmul double %219, 0x400921FB4D12D84A
  %221 = fsub double -0.000000e+00, %218
  %222 = fadd double %221, 0x400921FB4D12D84A
  %223 = fsub double -0.000000e+00, %218
  %224 = fadd double %223, 0x400921FB4D12D84A
  %225 = fmul double %218, 0x400921FB4D12D84A
  %226 = call double @cos(double %225) #3
  %227 = fmul double %191, %226
  store double %227, double* %114, align 8
  %228 = load double, double* %113, align 8
  %229 = load double, double* %108, align 8
  %230 = fsub double %228, %229
  %231 = fmul double %230, %229
  %232 = fsub double -0.000000e+00, %228
  %233 = fadd double %232, %229
  %234 = fsub double -0.000000e+00, %228
  %235 = fadd double %234, %229
  %236 = fsub double %228, %229
  %237 = load double, double* %113, align 8
  %238 = load double, double* %109, align 8
  %239 = fsub double %237, %238
  %240 = fmul double %239, %238
  %241 = fsub double %237, %238
  %242 = fmul double %241, %238
  %243 = fsub double -0.000000e+00, %237
  %244 = fadd double %243, %238
  %245 = fsub double -0.000000e+00, %237
  %246 = fadd double %245, %238
  %247 = fsub double %237, %238
  %248 = fmul double %247, %238
  %249 = fsub double %237, %238
  %250 = fmul double %249, %238
  %251 = fsub double %237, %238
  %252 = fsub double -0.000000e+00, %236
  %253 = fadd double %252, %251
  %254 = fsub double -0.000000e+00, %236
  %255 = fadd double %254, %251
  %256 = fsub double -0.000000e+00, %236
  %257 = fadd double %256, %251
  %258 = fsub double %236, %251
  %259 = fmul double %258, %251
  %260 = fsub double -0.000000e+00, %236
  %261 = fadd double %260, %251
  %262 = fsub double %236, %251
  %263 = fmul double %262, %251
  %264 = fsub double %236, %251
  %265 = fmul double %264, %251
  %266 = fsub double %236, %251
  %267 = fmul double %266, %251
  %268 = fsub double %236, %251
  %269 = fmul double %268, %251
  %270 = fmul double %236, %251
  %271 = load double, double* %113, align 8
  %272 = load double, double* %110, align 8
  %273 = fsub double -0.000000e+00, %271
  %274 = fadd double %273, %272
  %275 = fsub double %271, %272
  %276 = fmul double %275, %272
  %277 = fsub double %271, %272
  %278 = fmul double %277, %272
  %279 = fsub double %271, %272
  %280 = fmul double %279, %272
  %281 = fsub double -0.000000e+00, %271
  %282 = fadd double %281, %272
  %283 = fsub double %271, %272
  %284 = fsub double -0.000000e+00, %270
  %285 = fadd double %284, %283
  %286 = fsub double -0.000000e+00, %270
  %287 = fadd double %286, %283
  %288 = fsub double %270, %283
  %289 = fmul double %288, %283
  %290 = fsub double -0.000000e+00, %270
  %291 = fadd double %290, %283
  %292 = fsub double -0.000000e+00, %270
  %293 = fadd double %292, %283
  %294 = fmul double %270, %283
  %295 = load double, double* %113, align 8
  %296 = load double, double* %111, align 8
  %297 = fsub double %295, %296
  %298 = fmul double %297, %296
  %299 = fsub double -0.000000e+00, %295
  %300 = fadd double %299, %296
  %301 = fsub double %295, %296
  %302 = fmul double %301, %296
  %303 = fsub double %295, %296
  %304 = fmul double %303, %296
  %305 = fsub double %295, %296
  %306 = fsub double -0.000000e+00, %294
  %307 = fadd double %306, %305
  %308 = fsub double %294, %305
  %309 = fmul double %308, %305
  %310 = fsub double -0.000000e+00, %294
  %311 = fadd double %310, %305
  %312 = fmul double %294, %305
  %313 = load double, double* %108, align 8
  %314 = load double, double* %109, align 8
  %315 = fsub double -0.000000e+00, %313
  %316 = fadd double %315, %314
  %317 = fsub double -0.000000e+00, %313
  %318 = fadd double %317, %314
  %319 = fsub double %313, %314
  %320 = fmul double %319, %314
  %321 = fsub double -0.000000e+00, %313
  %322 = fadd double %321, %314
  %323 = fsub double %313, %314
  %324 = fmul double %323, %314
  %325 = fmul double %313, %314
  %326 = load double, double* %110, align 8
  %327 = fsub double %325, %326
  %328 = fmul double %327, %326
  %329 = fmul double %325, %326
  %330 = load double, double* %111, align 8
  %331 = fsub double -0.000000e+00, %329
  %332 = fadd double %331, %330
  %333 = fsub double %329, %330
  %334 = fmul double %333, %330
  %335 = fsub double -0.000000e+00, %329
  %336 = fadd double %335, %330
  %337 = fsub double %329, %330
  %338 = fmul double %337, %330
  %339 = fsub double %329, %330
  %340 = fmul double %339, %330
  %341 = fsub double -0.000000e+00, %329
  %342 = fadd double %341, %330
  %343 = fsub double %329, %330
  %344 = fmul double %343, %330
  %345 = fsub double -0.000000e+00, %329
  %346 = fadd double %345, %330
  %347 = fmul double %329, %330
  %348 = load double, double* %114, align 8
  %349 = fsub double %347, %348
  %350 = fmul double %349, %348
  %351 = fsub double -0.000000e+00, %347
  %352 = fadd double %351, %348
  %353 = fsub double -0.000000e+00, %347
  %354 = fadd double %353, %348
  %355 = fmul double %347, %348
  %356 = fsub double -0.000000e+00, %312
  %357 = fadd double %356, %355
  %358 = fsub double -0.000000e+00, %312
  %359 = fadd double %358, %355
  %360 = fsub double -0.000000e+00, %312
  %361 = fadd double %360, %355
  %362 = fsub double %312, %355
  %363 = call double @sqrt(double %362) #3
  store double %363, double* %115, align 8
  %364 = load double, double* %113, align 8
  %365 = load double, double* %108, align 8
  %366 = fsub double -0.000000e+00, %364
  %367 = fadd double %366, %365
  %368 = fsub double -0.000000e+00, %364
  %369 = fadd double %368, %365
  %370 = fsub double %364, %365
  %371 = load double, double* %113, align 8
  %372 = load double, double* %109, align 8
  %373 = fsub double %371, %372
  %374 = fmul double %373, %372
  %375 = fsub double %371, %372
  %376 = fsub double %370, %375
  %377 = fmul double %376, %375
  %378 = fsub double %370, %375
  %379 = fmul double %378, %375
  %380 = fsub double -0.000000e+00, %370
  %381 = fadd double %380, %375
  %382 = fsub double %370, %375
  %383 = fmul double %382, %375
  %384 = fsub double %370, %375
  %385 = fmul double %384, %375
  %386 = fmul double %370, %375
  %387 = load double, double* %113, align 8
  %388 = load double, double* %110, align 8
  %389 = fsub double -0.000000e+00, %387
  %390 = fadd double %389, %388
  %391 = fsub double -0.000000e+00, %387
  %392 = fadd double %391, %388
  %393 = fsub double -0.000000e+00, %387
  %394 = fadd double %393, %388
  %395 = fsub double %387, %388
  %396 = fmul double %386, %395
  %397 = load double, double* %113, align 8
  %398 = load double, double* %111, align 8
  %399 = fsub double %397, %398
  %400 = fmul double %399, %398
  %401 = fsub double %397, %398
  %402 = fsub double %396, %401
  %403 = fmul double %402, %401
  %404 = fsub double -0.000000e+00, %396
  %405 = fadd double %404, %401
  %406 = fmul double %396, %401
  %407 = load double, double* %108, align 8
  %408 = load double, double* %109, align 8
  %409 = fsub double %407, %408
  %410 = fmul double %409, %408
  %411 = fsub double -0.000000e+00, %407
  %412 = fadd double %411, %408
  %413 = fmul double %407, %408
  %414 = load double, double* %110, align 8
  %415 = fsub double -0.000000e+00, %413
  %416 = fadd double %415, %414
  %417 = fsub double %413, %414
  %418 = fmul double %417, %414
  %419 = fmul double %413, %414
  %420 = load double, double* %111, align 8
  %421 = fsub double -0.000000e+00, %419
  %422 = fadd double %421, %420
  %423 = fsub double -0.000000e+00, %419
  %424 = fadd double %423, %420
  %425 = fsub double -0.000000e+00, %419
  %426 = fadd double %425, %420
  %427 = fsub double -0.000000e+00, %419
  %428 = fadd double %427, %420
  %429 = fsub double -0.000000e+00, %419
  %430 = fadd double %429, %420
  %431 = fsub double -0.000000e+00, %419
  %432 = fadd double %431, %420
  %433 = fsub double %419, %420
  %434 = fmul double %433, %420
  %435 = fsub double %419, %420
  %436 = fmul double %435, %420
  %437 = fsub double -0.000000e+00, %419
  %438 = fadd double %437, %420
  %439 = fmul double %419, %420
  %440 = load double, double* %114, align 8
  %441 = fsub double %439, %440
  %442 = fmul double %441, %440
  %443 = fsub double -0.000000e+00, %439
  %444 = fadd double %443, %440
  %445 = fsub double %439, %440
  %446 = fmul double %445, %440
  %447 = fsub double -0.000000e+00, %439
  %448 = fadd double %447, %440
  %449 = fsub double -0.000000e+00, %439
  %450 = fadd double %449, %440
  %451 = fmul double %439, %440
  %452 = fsub double %406, %451
  %453 = fmul double %452, %451
  %454 = fsub double -0.000000e+00, %406
  %455 = fadd double %454, %451
  %456 = fsub double -0.000000e+00, %406
  %457 = fadd double %456, %451
  %458 = fsub double %406, %451
  %459 = fcmp ogt double %458, 0.000000e+00
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @cos(double) #2

; Function Attrs: nounwind
declare double @sqrt(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
