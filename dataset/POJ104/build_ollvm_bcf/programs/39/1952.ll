; ModuleID = 'source-C-CXX/39/1952.c'
source_filename = "source-C-CXX/39/1952.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%lf\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Invalid input\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%.4lf\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %132

; <label>:9:                                      ; preds = %0, %132
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %11)
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %12)
  %20 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %13)
  %21 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %14)
  %22 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %15)
  %23 = load double, double* %11, align 8
  %24 = load double, double* %12, align 8
  %25 = fadd double %23, %24
  %26 = load double, double* %13, align 8
  %27 = fadd double %25, %26
  %28 = load double, double* %14, align 8
  %29 = fadd double %27, %28
  %30 = fdiv double %29, 2.000000e+00
  store double %30, double* %16, align 8
  %31 = load double, double* %16, align 8
  %32 = load double, double* %11, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %16, align 8
  %35 = load double, double* %12, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %36
  %38 = load double, double* %16, align 8
  %39 = load double, double* %13, align 8
  %40 = fsub double %38, %39
  %41 = fmul double %37, %40
  %42 = load double, double* %16, align 8
  %43 = load double, double* %14, align 8
  %44 = fsub double %42, %43
  %45 = fmul double %41, %44
  %46 = load double, double* %11, align 8
  %47 = load double, double* %12, align 8
  %48 = fmul double %46, %47
  %49 = load double, double* %13, align 8
  %50 = fmul double %48, %49
  %51 = load double, double* %14, align 8
  %52 = fmul double %50, %51
  %53 = load double, double* %15, align 8
  %54 = fdiv double %53, 3.600000e+02
  %55 = fmul double %54, 0x400921FB4D12D84A
  %56 = call double @cos(double %55) #3
  %57 = fmul double %52, %56
  %58 = load double, double* %15, align 8
  %59 = fdiv double %58, 3.600000e+02
  %60 = fmul double %59, 0x400921FB4D12D84A
  %61 = call double @cos(double %60) #3
  %62 = fmul double %57, %61
  %63 = fsub double %45, %62
  %64 = call double @sqrt(double %63) #3
  store double %64, double* %17, align 8
  %65 = load double, double* %16, align 8
  %66 = load double, double* %11, align 8
  %67 = fsub double %65, %66
  %68 = load double, double* %16, align 8
  %69 = load double, double* %12, align 8
  %70 = fsub double %68, %69
  %71 = fmul double %67, %70
  %72 = load double, double* %16, align 8
  %73 = load double, double* %13, align 8
  %74 = fsub double %72, %73
  %75 = fmul double %71, %74
  %76 = load double, double* %16, align 8
  %77 = load double, double* %14, align 8
  %78 = fsub double %76, %77
  %79 = fmul double %75, %78
  %80 = load double, double* %11, align 8
  %81 = load double, double* %12, align 8
  %82 = fmul double %80, %81
  %83 = load double, double* %13, align 8
  %84 = fmul double %82, %83
  %85 = load double, double* %14, align 8
  %86 = fmul double %84, %85
  %87 = load double, double* %15, align 8
  %88 = fdiv double %87, 3.600000e+02
  %89 = fmul double %88, 0x400921FB4D12D84A
  %90 = call double @cos(double %89) #3
  %91 = fmul double %86, %90
  %92 = load double, double* %15, align 8
  %93 = fdiv double %92, 3.600000e+02
  %94 = fmul double %93, 0x400921FB4D12D84A
  %95 = call double @cos(double %94) #3
  %96 = fmul double %91, %95
  %97 = fsub double %79, %96
  %98 = fcmp olt double %97, 0.000000e+00
  %99 = load i32, i32* @x
  %100 = load i32, i32* @y
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %107, label %132

; <label>:107:                                    ; preds = %9
  br i1 %98, label %108, label %128

; <label>:108:                                    ; preds = %107
  %109 = load i32, i32* @x
  %110 = load i32, i32* @y
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %117, label %510

; <label>:117:                                    ; preds = %108, %510
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  %119 = load i32, i32* @x
  %120 = load i32, i32* @y
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %127, label %510

; <label>:127:                                    ; preds = %117
  br label %131

; <label>:128:                                    ; preds = %107
  %129 = load double, double* %17, align 8
  %130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), double %129)
  br label %131

; <label>:131:                                    ; preds = %128, %127
  ret i32 0

; <label>:132:                                    ; preds = %9, %0
  %133 = alloca i32, align 4
  %134 = alloca double, align 8
  %135 = alloca double, align 8
  %136 = alloca double, align 8
  %137 = alloca double, align 8
  %138 = alloca double, align 8
  %139 = alloca double, align 8
  %140 = alloca double, align 8
  store i32 0, i32* %133, align 4
  %141 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %134)
  %142 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %135)
  %143 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %136)
  %144 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %137)
  %145 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double* %138)
  %146 = load double, double* %134, align 8
  %147 = load double, double* %135, align 8
  %148 = fsub double %146, %147
  %149 = fmul double %148, %147
  %150 = fsub double %146, %147
  %151 = fmul double %150, %147
  %152 = fsub double -0.000000e+00, %146
  %153 = fadd double %152, %147
  %154 = fsub double %146, %147
  %155 = fmul double %154, %147
  %156 = fadd double %146, %147
  %157 = load double, double* %136, align 8
  %158 = fadd double %156, %157
  %159 = load double, double* %137, align 8
  %160 = fsub double -0.000000e+00, %158
  %161 = fadd double %160, %159
  %162 = fsub double %158, %159
  %163 = fmul double %162, %159
  %164 = fsub double %158, %159
  %165 = fmul double %164, %159
  %166 = fsub double -0.000000e+00, %158
  %167 = fadd double %166, %159
  %168 = fsub double -0.000000e+00, %158
  %169 = fadd double %168, %159
  %170 = fadd double %158, %159
  %171 = fsub double %170, 2.000000e+00
  %172 = fmul double %171, 2.000000e+00
  %173 = fsub double %170, 2.000000e+00
  %174 = fmul double %173, 2.000000e+00
  %175 = fsub double -0.000000e+00, %170
  %176 = fadd double %175, 2.000000e+00
  %177 = fsub double -0.000000e+00, %170
  %178 = fadd double %177, 2.000000e+00
  %179 = fsub double %170, 2.000000e+00
  %180 = fmul double %179, 2.000000e+00
  %181 = fsub double %170, 2.000000e+00
  %182 = fmul double %181, 2.000000e+00
  %183 = fsub double -0.000000e+00, %170
  %184 = fadd double %183, 2.000000e+00
  %185 = fdiv double %170, 2.000000e+00
  store double %185, double* %139, align 8
  %186 = load double, double* %139, align 8
  %187 = load double, double* %134, align 8
  %188 = fsub double %186, %187
  %189 = fmul double %188, %187
  %190 = fsub double %186, %187
  %191 = load double, double* %139, align 8
  %192 = load double, double* %135, align 8
  %193 = fsub double %191, %192
  %194 = fmul double %193, %192
  %195 = fsub double %191, %192
  %196 = fmul double %195, %192
  %197 = fsub double -0.000000e+00, %191
  %198 = fadd double %197, %192
  %199 = fsub double %191, %192
  %200 = fmul double %199, %192
  %201 = fsub double %191, %192
  %202 = fmul double %201, %192
  %203 = fsub double %191, %192
  %204 = fsub double %190, %203
  %205 = fmul double %204, %203
  %206 = fsub double %190, %203
  %207 = fmul double %206, %203
  %208 = fsub double -0.000000e+00, %190
  %209 = fadd double %208, %203
  %210 = fsub double %190, %203
  %211 = fmul double %210, %203
  %212 = fsub double -0.000000e+00, %190
  %213 = fadd double %212, %203
  %214 = fsub double %190, %203
  %215 = fmul double %214, %203
  %216 = fsub double %190, %203
  %217 = fmul double %216, %203
  %218 = fmul double %190, %203
  %219 = load double, double* %139, align 8
  %220 = load double, double* %136, align 8
  %221 = fsub double %219, %220
  %222 = fmul double %221, %220
  %223 = fsub double -0.000000e+00, %219
  %224 = fadd double %223, %220
  %225 = fsub double -0.000000e+00, %219
  %226 = fadd double %225, %220
  %227 = fsub double %219, %220
  %228 = fmul double %227, %220
  %229 = fsub double %219, %220
  %230 = fsub double %218, %229
  %231 = fmul double %230, %229
  %232 = fsub double %218, %229
  %233 = fmul double %232, %229
  %234 = fmul double %218, %229
  %235 = load double, double* %139, align 8
  %236 = load double, double* %137, align 8
  %237 = fsub double -0.000000e+00, %235
  %238 = fadd double %237, %236
  %239 = fsub double %235, %236
  %240 = fmul double %239, %236
  %241 = fsub double %235, %236
  %242 = fmul double %241, %236
  %243 = fsub double -0.000000e+00, %235
  %244 = fadd double %243, %236
  %245 = fsub double %235, %236
  %246 = fsub double %234, %245
  %247 = fmul double %246, %245
  %248 = fsub double -0.000000e+00, %234
  %249 = fadd double %248, %245
  %250 = fsub double -0.000000e+00, %234
  %251 = fadd double %250, %245
  %252 = fmul double %234, %245
  %253 = load double, double* %134, align 8
  %254 = load double, double* %135, align 8
  %255 = fsub double -0.000000e+00, %253
  %256 = fadd double %255, %254
  %257 = fsub double %253, %254
  %258 = fmul double %257, %254
  %259 = fsub double %253, %254
  %260 = fmul double %259, %254
  %261 = fsub double -0.000000e+00, %253
  %262 = fadd double %261, %254
  %263 = fsub double %253, %254
  %264 = fmul double %263, %254
  %265 = fmul double %253, %254
  %266 = load double, double* %136, align 8
  %267 = fsub double -0.000000e+00, %265
  %268 = fadd double %267, %266
  %269 = fsub double -0.000000e+00, %265
  %270 = fadd double %269, %266
  %271 = fmul double %265, %266
  %272 = load double, double* %137, align 8
  %273 = fsub double %271, %272
  %274 = fmul double %273, %272
  %275 = fsub double -0.000000e+00, %271
  %276 = fadd double %275, %272
  %277 = fsub double %271, %272
  %278 = fmul double %277, %272
  %279 = fsub double %271, %272
  %280 = fmul double %279, %272
  %281 = fmul double %271, %272
  %282 = load double, double* %138, align 8
  %283 = fsub double -0.000000e+00, %282
  %284 = fadd double %283, 3.600000e+02
  %285 = fsub double %282, 3.600000e+02
  %286 = fmul double %285, 3.600000e+02
  %287 = fsub double -0.000000e+00, %282
  %288 = fadd double %287, 3.600000e+02
  %289 = fsub double -0.000000e+00, %282
  %290 = fadd double %289, 3.600000e+02
  %291 = fsub double -0.000000e+00, %282
  %292 = fadd double %291, 3.600000e+02
  %293 = fsub double -0.000000e+00, %282
  %294 = fadd double %293, 3.600000e+02
  %295 = fsub double -0.000000e+00, %282
  %296 = fadd double %295, 3.600000e+02
  %297 = fdiv double %282, 3.600000e+02
  %298 = fsub double -0.000000e+00, %297
  %299 = fadd double %298, 0x400921FB4D12D84A
  %300 = fmul double %297, 0x400921FB4D12D84A
  %301 = call double @cos(double %300) #3
  %302 = fsub double -0.000000e+00, %281
  %303 = fadd double %302, %301
  %304 = fsub double -0.000000e+00, %281
  %305 = fadd double %304, %301
  %306 = fsub double -0.000000e+00, %281
  %307 = fadd double %306, %301
  %308 = fsub double -0.000000e+00, %281
  %309 = fadd double %308, %301
  %310 = fsub double %281, %301
  %311 = fmul double %310, %301
  %312 = fsub double %281, %301
  %313 = fmul double %312, %301
  %314 = fmul double %281, %301
  %315 = load double, double* %138, align 8
  %316 = fsub double -0.000000e+00, %315
  %317 = fadd double %316, 3.600000e+02
  %318 = fsub double -0.000000e+00, %315
  %319 = fadd double %318, 3.600000e+02
  %320 = fsub double %315, 3.600000e+02
  %321 = fmul double %320, 3.600000e+02
  %322 = fsub double -0.000000e+00, %315
  %323 = fadd double %322, 3.600000e+02
  %324 = fsub double -0.000000e+00, %315
  %325 = fadd double %324, 3.600000e+02
  %326 = fsub double %315, 3.600000e+02
  %327 = fmul double %326, 3.600000e+02
  %328 = fdiv double %315, 3.600000e+02
  %329 = fsub double -0.000000e+00, %328
  %330 = fadd double %329, 0x400921FB4D12D84A
  %331 = fmul double %328, 0x400921FB4D12D84A
  %332 = call double @cos(double %331) #3
  %333 = fsub double -0.000000e+00, %314
  %334 = fadd double %333, %332
  %335 = fmul double %314, %332
  %336 = fsub double %252, %335
  %337 = fmul double %336, %335
  %338 = fsub double %252, %335
  %339 = fmul double %338, %335
  %340 = fsub double %252, %335
  %341 = call double @sqrt(double %340) #3
  store double %341, double* %140, align 8
  %342 = load double, double* %139, align 8
  %343 = load double, double* %134, align 8
  %344 = fsub double %342, %343
  %345 = fmul double %344, %343
  %346 = fsub double %342, %343
  %347 = fmul double %346, %343
  %348 = fsub double %342, %343
  %349 = fmul double %348, %343
  %350 = fsub double -0.000000e+00, %342
  %351 = fadd double %350, %343
  %352 = fsub double -0.000000e+00, %342
  %353 = fadd double %352, %343
  %354 = fsub double %342, %343
  %355 = fmul double %354, %343
  %356 = fsub double %342, %343
  %357 = load double, double* %139, align 8
  %358 = load double, double* %135, align 8
  %359 = fsub double %357, %358
  %360 = fmul double %359, %358
  %361 = fsub double %357, %358
  %362 = fsub double %356, %361
  %363 = fmul double %362, %361
  %364 = fsub double -0.000000e+00, %356
  %365 = fadd double %364, %361
  %366 = fsub double %356, %361
  %367 = fmul double %366, %361
  %368 = fsub double %356, %361
  %369 = fmul double %368, %361
  %370 = fsub double %356, %361
  %371 = fmul double %370, %361
  %372 = fmul double %356, %361
  %373 = load double, double* %139, align 8
  %374 = load double, double* %136, align 8
  %375 = fsub double %373, %374
  %376 = fmul double %375, %374
  %377 = fsub double -0.000000e+00, %373
  %378 = fadd double %377, %374
  %379 = fsub double %373, %374
  %380 = fmul double %379, %374
  %381 = fsub double -0.000000e+00, %373
  %382 = fadd double %381, %374
  %383 = fsub double %373, %374
  %384 = fmul double %383, %374
  %385 = fsub double -0.000000e+00, %373
  %386 = fadd double %385, %374
  %387 = fsub double -0.000000e+00, %373
  %388 = fadd double %387, %374
  %389 = fsub double %373, %374
  %390 = fsub double %372, %389
  %391 = fmul double %390, %389
  %392 = fmul double %372, %389
  %393 = load double, double* %139, align 8
  %394 = load double, double* %137, align 8
  %395 = fsub double -0.000000e+00, %393
  %396 = fadd double %395, %394
  %397 = fsub double %393, %394
  %398 = fmul double %397, %394
  %399 = fsub double -0.000000e+00, %393
  %400 = fadd double %399, %394
  %401 = fsub double %393, %394
  %402 = fmul double %401, %394
  %403 = fsub double -0.000000e+00, %393
  %404 = fadd double %403, %394
  %405 = fsub double %393, %394
  %406 = fmul double %405, %394
  %407 = fsub double %393, %394
  %408 = fsub double %392, %407
  %409 = fmul double %408, %407
  %410 = fsub double %392, %407
  %411 = fmul double %410, %407
  %412 = fsub double -0.000000e+00, %392
  %413 = fadd double %412, %407
  %414 = fsub double -0.000000e+00, %392
  %415 = fadd double %414, %407
  %416 = fsub double %392, %407
  %417 = fmul double %416, %407
  %418 = fmul double %392, %407
  %419 = load double, double* %134, align 8
  %420 = load double, double* %135, align 8
  %421 = fsub double -0.000000e+00, %419
  %422 = fadd double %421, %420
  %423 = fsub double -0.000000e+00, %419
  %424 = fadd double %423, %420
  %425 = fsub double -0.000000e+00, %419
  %426 = fadd double %425, %420
  %427 = fsub double -0.000000e+00, %419
  %428 = fadd double %427, %420
  %429 = fsub double %419, %420
  %430 = fmul double %429, %420
  %431 = fsub double %419, %420
  %432 = fmul double %431, %420
  %433 = fsub double -0.000000e+00, %419
  %434 = fadd double %433, %420
  %435 = fmul double %419, %420
  %436 = load double, double* %136, align 8
  %437 = fsub double %435, %436
  %438 = fmul double %437, %436
  %439 = fmul double %435, %436
  %440 = load double, double* %137, align 8
  %441 = fsub double -0.000000e+00, %439
  %442 = fadd double %441, %440
  %443 = fsub double %439, %440
  %444 = fmul double %443, %440
  %445 = fsub double -0.000000e+00, %439
  %446 = fadd double %445, %440
  %447 = fsub double -0.000000e+00, %439
  %448 = fadd double %447, %440
  %449 = fsub double -0.000000e+00, %439
  %450 = fadd double %449, %440
  %451 = fsub double %439, %440
  %452 = fmul double %451, %440
  %453 = fmul double %439, %440
  %454 = load double, double* %138, align 8
  %455 = fsub double %454, 3.600000e+02
  %456 = fmul double %455, 3.600000e+02
  %457 = fsub double -0.000000e+00, %454
  %458 = fadd double %457, 3.600000e+02
  %459 = fsub double %454, 3.600000e+02
  %460 = fmul double %459, 3.600000e+02
  %461 = fsub double -0.000000e+00, %454
  %462 = fadd double %461, 3.600000e+02
  %463 = fsub double %454, 3.600000e+02
  %464 = fmul double %463, 3.600000e+02
  %465 = fsub double -0.000000e+00, %454
  %466 = fadd double %465, 3.600000e+02
  %467 = fdiv double %454, 3.600000e+02
  %468 = fsub double %467, 0x400921FB4D12D84A
  %469 = fmul double %468, 0x400921FB4D12D84A
  %470 = fmul double %467, 0x400921FB4D12D84A
  %471 = call double @cos(double %470) #3
  %472 = fsub double -0.000000e+00, %453
  %473 = fadd double %472, %471
  %474 = fsub double -0.000000e+00, %453
  %475 = fadd double %474, %471
  %476 = fmul double %453, %471
  %477 = load double, double* %138, align 8
  %478 = fdiv double %477, 3.600000e+02
  %479 = fsub double -0.000000e+00, %478
  %480 = fadd double %479, 0x400921FB4D12D84A
  %481 = fsub double -0.000000e+00, %478
  %482 = fadd double %481, 0x400921FB4D12D84A
  %483 = fsub double %478, 0x400921FB4D12D84A
  %484 = fmul double %483, 0x400921FB4D12D84A
  %485 = fmul double %478, 0x400921FB4D12D84A
  %486 = call double @cos(double %485) #3
  %487 = fsub double %476, %486
  %488 = fmul double %487, %486
  %489 = fsub double -0.000000e+00, %476
  %490 = fadd double %489, %486
  %491 = fmul double %476, %486
  %492 = fsub double -0.000000e+00, %418
  %493 = fadd double %492, %491
  %494 = fsub double -0.000000e+00, %418
  %495 = fadd double %494, %491
  %496 = fsub double -0.000000e+00, %418
  %497 = fadd double %496, %491
  %498 = fsub double -0.000000e+00, %418
  %499 = fadd double %498, %491
  %500 = fsub double -0.000000e+00, %418
  %501 = fadd double %500, %491
  %502 = fsub double %418, %491
  %503 = fmul double %502, %491
  %504 = fsub double %418, %491
  %505 = fmul double %504, %491
  %506 = fsub double -0.000000e+00, %418
  %507 = fadd double %506, %491
  %508 = fsub double %418, %491
  %509 = fcmp olt double %508, 0.000000e+00
  br label %9

; <label>:510:                                    ; preds = %117, %108
  %511 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0))
  br label %117
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind
declare double @sqrt(double) #2

; Function Attrs: nounwind
declare double @cos(double) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
