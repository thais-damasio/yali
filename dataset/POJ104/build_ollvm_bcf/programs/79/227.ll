; ModuleID = 'source-C-CXX/79/227.c'
source_filename = "source-C-CXX/79/227.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [7 x i8] c"%d%d%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %468

; <label>:9:                                      ; preds = %0, %468
  %10 = alloca i32, align 4
  %11 = alloca [2 x [4 x i64]], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %12, align 4
  %17 = load i32, i32* @x
  %18 = load i32, i32* @y
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %25, label %468

; <label>:25:                                     ; preds = %9
  br label %26

; <label>:26:                                     ; preds = %455, %25
  %27 = load i32, i32* %12, align 4
  %28 = icmp sle i32 %27, 1
  br i1 %28, label %29, label %456

; <label>:29:                                     ; preds = %26
  %30 = load i32, i32* %12, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %31
  %33 = getelementptr inbounds [4 x i64], [4 x i64]* %32, i64 0, i64 0
  %34 = load i32, i32* %12, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %35
  %37 = getelementptr inbounds [4 x i64], [4 x i64]* %36, i64 0, i64 1
  %38 = load i32, i32* %12, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %39
  %41 = getelementptr inbounds [4 x i64], [4 x i64]* %40, i64 0, i64 2
  %42 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i64* %33, i64* %37, i64* %41)
  %43 = load i32, i32* %12, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %44
  %46 = getelementptr inbounds [4 x i64], [4 x i64]* %45, i64 0, i64 0
  %47 = load i64, i64* %46, align 16
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %13, align 4
  %49 = load i32, i32* %12, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %50
  %52 = getelementptr inbounds [4 x i64], [4 x i64]* %51, i64 0, i64 1
  %53 = load i64, i64* %52, align 8
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %14, align 4
  %55 = load i32, i32* %12, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %56
  %58 = getelementptr inbounds [4 x i64], [4 x i64]* %57, i64 0, i64 2
  %59 = load i64, i64* %58, align 16
  %60 = trunc i64 %59 to i32
  store i32 %60, i32* %15, align 4
  %61 = load i32, i32* %13, align 4
  %62 = srem i32 %61, 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %68

; <label>:64:                                     ; preds = %29
  %65 = load i32, i32* %13, align 4
  %66 = srem i32 %65, 100
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %72, label %68

; <label>:68:                                     ; preds = %64, %29
  %69 = load i32, i32* %13, align 4
  %70 = srem i32 %69, 400
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %217

; <label>:72:                                     ; preds = %68, %64
  %73 = load i32, i32* %14, align 4
  %74 = icmp sle i32 %73, 2
  br i1 %74, label %75, label %104

; <label>:75:                                     ; preds = %72
  %76 = load i32, i32* %13, align 4
  %77 = sub nsw i32 %76, 1
  %78 = sdiv i32 %77, 4
  %79 = mul nsw i32 %78, 1461
  %80 = load i32, i32* %13, align 4
  %81 = sub nsw i32 %80, 1
  %82 = srem i32 %81, 4
  %83 = mul nsw i32 %82, 365
  %84 = add nsw i32 %79, %83
  %85 = load i32, i32* %13, align 4
  %86 = sub nsw i32 %85, 1
  %87 = sdiv i32 %86, 100
  %88 = sub nsw i32 %84, %87
  %89 = load i32, i32* %13, align 4
  %90 = sub nsw i32 %89, 1
  %91 = sdiv i32 %90, 400
  %92 = add nsw i32 %88, %91
  %93 = load i32, i32* %14, align 4
  %94 = sub nsw i32 %93, 1
  %95 = mul nsw i32 %94, 31
  %96 = add nsw i32 %92, %95
  %97 = load i32, i32* %15, align 4
  %98 = add nsw i32 %96, %97
  %99 = sext i32 %98 to i64
  %100 = load i32, i32* %12, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %101
  %103 = getelementptr inbounds [4 x i64], [4 x i64]* %102, i64 0, i64 3
  store i64 %99, i64* %103, align 8
  br label %216

; <label>:104:                                    ; preds = %72
  %105 = load i32, i32* %14, align 4
  %106 = icmp sle i32 %105, 8
  br i1 %106, label %107, label %161

; <label>:107:                                    ; preds = %104
  %108 = load i32, i32* @x
  %109 = load i32, i32* @y
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %116, label %476

; <label>:116:                                    ; preds = %107, %476
  %117 = load i32, i32* %13, align 4
  %118 = sub nsw i32 %117, 1
  %119 = sdiv i32 %118, 4
  %120 = mul nsw i32 %119, 1461
  %121 = load i32, i32* %13, align 4
  %122 = sub nsw i32 %121, 1
  %123 = srem i32 %122, 4
  %124 = mul nsw i32 %123, 365
  %125 = add nsw i32 %120, %124
  %126 = load i32, i32* %13, align 4
  %127 = sub nsw i32 %126, 1
  %128 = sdiv i32 %127, 100
  %129 = sub nsw i32 %125, %128
  %130 = load i32, i32* %13, align 4
  %131 = sub nsw i32 %130, 1
  %132 = sdiv i32 %131, 400
  %133 = add nsw i32 %129, %132
  %134 = load i32, i32* %14, align 4
  %135 = sub nsw i32 %134, 1
  %136 = sdiv i32 %135, 2
  %137 = mul nsw i32 %136, 61
  %138 = add nsw i32 %133, %137
  %139 = load i32, i32* %14, align 4
  %140 = sub nsw i32 %139, 1
  %141 = srem i32 %140, 2
  %142 = mul nsw i32 %141, 31
  %143 = add nsw i32 %138, %142
  %144 = sub nsw i32 %143, 1
  %145 = load i32, i32* %15, align 4
  %146 = add nsw i32 %144, %145
  %147 = sext i32 %146 to i64
  %148 = load i32, i32* %12, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %149
  %151 = getelementptr inbounds [4 x i64], [4 x i64]* %150, i64 0, i64 3
  store i64 %147, i64* %151, align 8
  %152 = load i32, i32* @x
  %153 = load i32, i32* @y
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %160, label %476

; <label>:160:                                    ; preds = %116
  br label %215

; <label>:161:                                    ; preds = %104
  %162 = load i32, i32* @x
  %163 = load i32, i32* @y
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %170, label %668

; <label>:170:                                    ; preds = %161, %668
  %171 = load i32, i32* %13, align 4
  %172 = sub nsw i32 %171, 1
  %173 = sdiv i32 %172, 4
  %174 = mul nsw i32 %173, 1461
  %175 = load i32, i32* %13, align 4
  %176 = sub nsw i32 %175, 1
  %177 = srem i32 %176, 4
  %178 = mul nsw i32 %177, 365
  %179 = add nsw i32 %174, %178
  %180 = load i32, i32* %13, align 4
  %181 = sub nsw i32 %180, 1
  %182 = sdiv i32 %181, 100
  %183 = sub nsw i32 %179, %182
  %184 = load i32, i32* %13, align 4
  %185 = sub nsw i32 %184, 1
  %186 = sdiv i32 %185, 400
  %187 = add nsw i32 %183, %186
  %188 = add nsw i32 %187, 213
  %189 = load i32, i32* %14, align 4
  %190 = sub nsw i32 %189, 8
  %191 = sdiv i32 %190, 2
  %192 = mul nsw i32 %191, 61
  %193 = add nsw i32 %188, %192
  %194 = load i32, i32* %14, align 4
  %195 = sub nsw i32 %194, 8
  %196 = srem i32 %195, 2
  %197 = mul nsw i32 %196, 31
  %198 = add nsw i32 %193, %197
  %199 = load i32, i32* %15, align 4
  %200 = add nsw i32 %198, %199
  %201 = sext i32 %200 to i64
  %202 = load i32, i32* %12, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %203
  %205 = getelementptr inbounds [4 x i64], [4 x i64]* %204, i64 0, i64 3
  store i64 %201, i64* %205, align 8
  %206 = load i32, i32* @x
  %207 = load i32, i32* @y
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %214, label %668

; <label>:214:                                    ; preds = %170
  br label %215

; <label>:215:                                    ; preds = %214, %160
  br label %216

; <label>:216:                                    ; preds = %215, %75
  br label %416

; <label>:217:                                    ; preds = %68
  %218 = load i32, i32* %14, align 4
  %219 = icmp sle i32 %218, 2
  br i1 %219, label %220, label %267

; <label>:220:                                    ; preds = %217
  %221 = load i32, i32* @x
  %222 = load i32, i32* @y
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %229, label %839

; <label>:229:                                    ; preds = %220, %839
  %230 = load i32, i32* %13, align 4
  %231 = sub nsw i32 %230, 1
  %232 = sdiv i32 %231, 4
  %233 = mul nsw i32 %232, 1461
  %234 = load i32, i32* %13, align 4
  %235 = sub nsw i32 %234, 1
  %236 = srem i32 %235, 4
  %237 = mul nsw i32 %236, 365
  %238 = add nsw i32 %233, %237
  %239 = load i32, i32* %13, align 4
  %240 = sub nsw i32 %239, 1
  %241 = sdiv i32 %240, 100
  %242 = sub nsw i32 %238, %241
  %243 = load i32, i32* %13, align 4
  %244 = sub nsw i32 %243, 1
  %245 = sdiv i32 %244, 400
  %246 = add nsw i32 %242, %245
  %247 = load i32, i32* %14, align 4
  %248 = sub nsw i32 %247, 1
  %249 = mul nsw i32 %248, 31
  %250 = add nsw i32 %246, %249
  %251 = load i32, i32* %15, align 4
  %252 = add nsw i32 %250, %251
  %253 = sext i32 %252 to i64
  %254 = load i32, i32* %12, align 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %255
  %257 = getelementptr inbounds [4 x i64], [4 x i64]* %256, i64 0, i64 3
  store i64 %253, i64* %257, align 8
  %258 = load i32, i32* @x
  %259 = load i32, i32* @y
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %266, label %839

; <label>:266:                                    ; preds = %229
  br label %397

; <label>:267:                                    ; preds = %217
  %268 = load i32, i32* %14, align 4
  %269 = icmp sle i32 %268, 8
  br i1 %269, label %270, label %324

; <label>:270:                                    ; preds = %267
  %271 = load i32, i32* @x
  %272 = load i32, i32* @y
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %279, label %992

; <label>:279:                                    ; preds = %270, %992
  %280 = load i32, i32* %13, align 4
  %281 = sub nsw i32 %280, 1
  %282 = sdiv i32 %281, 4
  %283 = mul nsw i32 %282, 1461
  %284 = load i32, i32* %13, align 4
  %285 = sub nsw i32 %284, 1
  %286 = srem i32 %285, 4
  %287 = mul nsw i32 %286, 365
  %288 = add nsw i32 %283, %287
  %289 = load i32, i32* %13, align 4
  %290 = sub nsw i32 %289, 1
  %291 = sdiv i32 %290, 100
  %292 = sub nsw i32 %288, %291
  %293 = load i32, i32* %13, align 4
  %294 = sub nsw i32 %293, 1
  %295 = sdiv i32 %294, 400
  %296 = add nsw i32 %292, %295
  %297 = load i32, i32* %14, align 4
  %298 = sub nsw i32 %297, 1
  %299 = sdiv i32 %298, 2
  %300 = mul nsw i32 %299, 61
  %301 = add nsw i32 %296, %300
  %302 = load i32, i32* %14, align 4
  %303 = sub nsw i32 %302, 1
  %304 = srem i32 %303, 2
  %305 = mul nsw i32 %304, 31
  %306 = add nsw i32 %301, %305
  %307 = sub nsw i32 %306, 2
  %308 = load i32, i32* %15, align 4
  %309 = add nsw i32 %307, %308
  %310 = sext i32 %309 to i64
  %311 = load i32, i32* %12, align 4
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %312
  %314 = getelementptr inbounds [4 x i64], [4 x i64]* %313, i64 0, i64 3
  store i64 %310, i64* %314, align 8
  %315 = load i32, i32* @x
  %316 = load i32, i32* @y
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %323, label %992

; <label>:323:                                    ; preds = %279
  br label %378

; <label>:324:                                    ; preds = %267
  %325 = load i32, i32* @x
  %326 = load i32, i32* @y
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %333, label %1148

; <label>:333:                                    ; preds = %324, %1148
  %334 = load i32, i32* %13, align 4
  %335 = sub nsw i32 %334, 1
  %336 = sdiv i32 %335, 4
  %337 = mul nsw i32 %336, 1461
  %338 = load i32, i32* %13, align 4
  %339 = sub nsw i32 %338, 1
  %340 = srem i32 %339, 4
  %341 = mul nsw i32 %340, 365
  %342 = add nsw i32 %337, %341
  %343 = load i32, i32* %13, align 4
  %344 = sub nsw i32 %343, 1
  %345 = sdiv i32 %344, 100
  %346 = sub nsw i32 %342, %345
  %347 = load i32, i32* %13, align 4
  %348 = sub nsw i32 %347, 1
  %349 = sdiv i32 %348, 400
  %350 = add nsw i32 %346, %349
  %351 = add nsw i32 %350, 212
  %352 = load i32, i32* %14, align 4
  %353 = sub nsw i32 %352, 8
  %354 = sdiv i32 %353, 2
  %355 = mul nsw i32 %354, 61
  %356 = add nsw i32 %351, %355
  %357 = load i32, i32* %14, align 4
  %358 = sub nsw i32 %357, 8
  %359 = srem i32 %358, 2
  %360 = mul nsw i32 %359, 31
  %361 = add nsw i32 %356, %360
  %362 = load i32, i32* %15, align 4
  %363 = add nsw i32 %361, %362
  %364 = sext i32 %363 to i64
  %365 = load i32, i32* %12, align 4
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %366
  %368 = getelementptr inbounds [4 x i64], [4 x i64]* %367, i64 0, i64 3
  store i64 %364, i64* %368, align 8
  %369 = load i32, i32* @x
  %370 = load i32, i32* @y
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %377, label %1148

; <label>:377:                                    ; preds = %333
  br label %378

; <label>:378:                                    ; preds = %377, %323
  %379 = load i32, i32* @x
  %380 = load i32, i32* @y
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %387, label %1323

; <label>:387:                                    ; preds = %378, %1323
  %388 = load i32, i32* @x
  %389 = load i32, i32* @y
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %396, label %1323

; <label>:396:                                    ; preds = %387
  br label %397

; <label>:397:                                    ; preds = %396, %266
  %398 = load i32, i32* @x
  %399 = load i32, i32* @y
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %406, label %1324

; <label>:406:                                    ; preds = %397, %1324
  %407 = load i32, i32* @x
  %408 = load i32, i32* @y
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %415, label %1324

; <label>:415:                                    ; preds = %406
  br label %416

; <label>:416:                                    ; preds = %415, %216
  %417 = load i32, i32* @x
  %418 = load i32, i32* @y
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %425, label %1325

; <label>:425:                                    ; preds = %416, %1325
  %426 = load i32, i32* @x
  %427 = load i32, i32* @y
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %434, label %1325

; <label>:434:                                    ; preds = %425
  br label %435

; <label>:435:                                    ; preds = %434
  %436 = load i32, i32* @x
  %437 = load i32, i32* @y
  %438 = sub i32 %436, 1
  %439 = mul i32 %436, %438
  %440 = urem i32 %439, 2
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %441, %442
  br i1 %443, label %444, label %1326

; <label>:444:                                    ; preds = %435, %1326
  %445 = load i32, i32* %12, align 4
  %446 = add nsw i32 %445, 1
  store i32 %446, i32* %12, align 4
  %447 = load i32, i32* @x
  %448 = load i32, i32* @y
  %449 = sub i32 %447, 1
  %450 = mul i32 %447, %449
  %451 = urem i32 %450, 2
  %452 = icmp eq i32 %451, 0
  %453 = icmp slt i32 %448, 10
  %454 = or i1 %452, %453
  br i1 %454, label %455, label %1326

; <label>:455:                                    ; preds = %444
  br label %26

; <label>:456:                                    ; preds = %26
  %457 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 0
  %458 = getelementptr inbounds [4 x i64], [4 x i64]* %457, i64 0, i64 3
  %459 = load i64, i64* %458, align 8
  %460 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 1
  %461 = getelementptr inbounds [4 x i64], [4 x i64]* %460, i64 0, i64 3
  %462 = load i64, i64* %461, align 8
  %463 = sub nsw i64 %459, %462
  %464 = trunc i64 %463 to i32
  %465 = call i32 @abs(i32 %464) #3
  store i32 %465, i32* %16, align 4
  %466 = load i32, i32* %16, align 4
  %467 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %466)
  ret i32 0

; <label>:468:                                    ; preds = %9, %0
  %469 = alloca i32, align 4
  %470 = alloca [2 x [4 x i64]], align 16
  %471 = alloca i32, align 4
  %472 = alloca i32, align 4
  %473 = alloca i32, align 4
  %474 = alloca i32, align 4
  %475 = alloca i32, align 4
  store i32 0, i32* %469, align 4
  store i32 0, i32* %471, align 4
  br label %9

; <label>:476:                                    ; preds = %116, %107
  %477 = load i32, i32* %13, align 4
  %478 = sub i32 0, %477
  %479 = add i32 %478, 1
  %480 = sub i32 0, %477
  %481 = add i32 %480, 1
  %482 = sub i32 0, %477
  %483 = add i32 %482, 1
  %484 = shl i32 %477, 1
  %485 = sub i32 %477, 1
  %486 = mul i32 %485, 1
  %487 = shl i32 %477, 1
  %488 = sub nsw i32 %477, 1
  %489 = sub i32 %488, 4
  %490 = mul i32 %489, 4
  %491 = sdiv i32 %488, 4
  %492 = sub i32 0, %491
  %493 = add i32 %492, 1461
  %494 = sub i32 0, %491
  %495 = add i32 %494, 1461
  %496 = shl i32 %491, 1461
  %497 = sub i32 0, %491
  %498 = add i32 %497, 1461
  %499 = shl i32 %491, 1461
  %500 = sub i32 %491, 1461
  %501 = mul i32 %500, 1461
  %502 = mul nsw i32 %491, 1461
  %503 = load i32, i32* %13, align 4
  %504 = sub i32 0, %503
  %505 = add i32 %504, 1
  %506 = shl i32 %503, 1
  %507 = shl i32 %503, 1
  %508 = shl i32 %503, 1
  %509 = sub nsw i32 %503, 1
  %510 = sub i32 %509, 4
  %511 = mul i32 %510, 4
  %512 = sub i32 0, %509
  %513 = add i32 %512, 4
  %514 = sub i32 0, %509
  %515 = add i32 %514, 4
  %516 = srem i32 %509, 4
  %517 = sub i32 0, %516
  %518 = add i32 %517, 365
  %519 = sub i32 0, %516
  %520 = add i32 %519, 365
  %521 = sub i32 0, %516
  %522 = add i32 %521, 365
  %523 = mul nsw i32 %516, 365
  %524 = shl i32 %502, %523
  %525 = shl i32 %502, %523
  %526 = shl i32 %502, %523
  %527 = sub i32 0, %502
  %528 = add i32 %527, %523
  %529 = sub i32 %502, %523
  %530 = mul i32 %529, %523
  %531 = sub i32 %502, %523
  %532 = mul i32 %531, %523
  %533 = sub i32 %502, %523
  %534 = mul i32 %533, %523
  %535 = sub i32 0, %502
  %536 = add i32 %535, %523
  %537 = shl i32 %502, %523
  %538 = add nsw i32 %502, %523
  %539 = load i32, i32* %13, align 4
  %540 = shl i32 %539, 1
  %541 = sub i32 0, %539
  %542 = add i32 %541, 1
  %543 = sub i32 0, %539
  %544 = add i32 %543, 1
  %545 = shl i32 %539, 1
  %546 = sub i32 0, %539
  %547 = add i32 %546, 1
  %548 = sub i32 0, %539
  %549 = add i32 %548, 1
  %550 = sub nsw i32 %539, 1
  %551 = sub i32 %550, 100
  %552 = mul i32 %551, 100
  %553 = shl i32 %550, 100
  %554 = sub i32 %550, 100
  %555 = mul i32 %554, 100
  %556 = shl i32 %550, 100
  %557 = shl i32 %550, 100
  %558 = sdiv i32 %550, 100
  %559 = sub i32 %538, %558
  %560 = mul i32 %559, %558
  %561 = sub nsw i32 %538, %558
  %562 = load i32, i32* %13, align 4
  %563 = sub i32 %562, 1
  %564 = mul i32 %563, 1
  %565 = sub i32 0, %562
  %566 = add i32 %565, 1
  %567 = shl i32 %562, 1
  %568 = sub nsw i32 %562, 1
  %569 = shl i32 %568, 400
  %570 = sub i32 0, %568
  %571 = add i32 %570, 400
  %572 = sub i32 0, %568
  %573 = add i32 %572, 400
  %574 = shl i32 %568, 400
  %575 = sub i32 0, %568
  %576 = add i32 %575, 400
  %577 = sdiv i32 %568, 400
  %578 = shl i32 %561, %577
  %579 = shl i32 %561, %577
  %580 = add nsw i32 %561, %577
  %581 = load i32, i32* %14, align 4
  %582 = sub i32 %581, 1
  %583 = mul i32 %582, 1
  %584 = sub nsw i32 %581, 1
  %585 = shl i32 %584, 2
  %586 = shl i32 %584, 2
  %587 = shl i32 %584, 2
  %588 = sdiv i32 %584, 2
  %589 = sub i32 %588, 61
  %590 = mul i32 %589, 61
  %591 = shl i32 %588, 61
  %592 = sub i32 0, %588
  %593 = add i32 %592, 61
  %594 = sub i32 %588, 61
  %595 = mul i32 %594, 61
  %596 = shl i32 %588, 61
  %597 = sub i32 %588, 61
  %598 = mul i32 %597, 61
  %599 = sub i32 0, %588
  %600 = add i32 %599, 61
  %601 = sub i32 %588, 61
  %602 = mul i32 %601, 61
  %603 = sub i32 %588, 61
  %604 = mul i32 %603, 61
  %605 = mul nsw i32 %588, 61
  %606 = sub i32 %580, %605
  %607 = mul i32 %606, %605
  %608 = sub i32 %580, %605
  %609 = mul i32 %608, %605
  %610 = sub i32 0, %580
  %611 = add i32 %610, %605
  %612 = shl i32 %580, %605
  %613 = add nsw i32 %580, %605
  %614 = load i32, i32* %14, align 4
  %615 = sub i32 0, %614
  %616 = add i32 %615, 1
  %617 = sub i32 0, %614
  %618 = add i32 %617, 1
  %619 = sub i32 %614, 1
  %620 = mul i32 %619, 1
  %621 = sub i32 0, %614
  %622 = add i32 %621, 1
  %623 = shl i32 %614, 1
  %624 = sub i32 0, %614
  %625 = add i32 %624, 1
  %626 = shl i32 %614, 1
  %627 = sub nsw i32 %614, 1
  %628 = sub i32 %627, 2
  %629 = mul i32 %628, 2
  %630 = shl i32 %627, 2
  %631 = shl i32 %627, 2
  %632 = sub i32 %627, 2
  %633 = mul i32 %632, 2
  %634 = srem i32 %627, 2
  %635 = mul nsw i32 %634, 31
  %636 = shl i32 %613, %635
  %637 = sub i32 0, %613
  %638 = add i32 %637, %635
  %639 = shl i32 %613, %635
  %640 = shl i32 %613, %635
  %641 = sub i32 0, %613
  %642 = add i32 %641, %635
  %643 = sub i32 0, %613
  %644 = add i32 %643, %635
  %645 = add nsw i32 %613, %635
  %646 = sub i32 %645, 1
  %647 = mul i32 %646, 1
  %648 = sub nsw i32 %645, 1
  %649 = load i32, i32* %15, align 4
  %650 = sub i32 0, %648
  %651 = add i32 %650, %649
  %652 = sub i32 0, %648
  %653 = add i32 %652, %649
  %654 = sub i32 %648, %649
  %655 = mul i32 %654, %649
  %656 = sub i32 0, %648
  %657 = add i32 %656, %649
  %658 = sub i32 %648, %649
  %659 = mul i32 %658, %649
  %660 = sub i32 0, %648
  %661 = add i32 %660, %649
  %662 = add nsw i32 %648, %649
  %663 = sext i32 %662 to i64
  %664 = load i32, i32* %12, align 4
  %665 = sext i32 %664 to i64
  %666 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %665
  %667 = getelementptr inbounds [4 x i64], [4 x i64]* %666, i64 0, i64 3
  store i64 %663, i64* %667, align 8
  br label %116

; <label>:668:                                    ; preds = %170, %161
  %669 = load i32, i32* %13, align 4
  %670 = sub i32 0, %669
  %671 = add i32 %670, 1
  %672 = shl i32 %669, 1
  %673 = sub i32 %669, 1
  %674 = mul i32 %673, 1
  %675 = shl i32 %669, 1
  %676 = shl i32 %669, 1
  %677 = sub i32 %669, 1
  %678 = mul i32 %677, 1
  %679 = shl i32 %669, 1
  %680 = shl i32 %669, 1
  %681 = sub nsw i32 %669, 1
  %682 = sdiv i32 %681, 4
  %683 = sub i32 0, %682
  %684 = add i32 %683, 1461
  %685 = sub i32 0, %682
  %686 = add i32 %685, 1461
  %687 = sub i32 %682, 1461
  %688 = mul i32 %687, 1461
  %689 = sub i32 %682, 1461
  %690 = mul i32 %689, 1461
  %691 = sub i32 0, %682
  %692 = add i32 %691, 1461
  %693 = sub i32 0, %682
  %694 = add i32 %693, 1461
  %695 = sub i32 0, %682
  %696 = add i32 %695, 1461
  %697 = mul nsw i32 %682, 1461
  %698 = load i32, i32* %13, align 4
  %699 = sub i32 0, %698
  %700 = add i32 %699, 1
  %701 = sub i32 0, %698
  %702 = add i32 %701, 1
  %703 = sub nsw i32 %698, 1
  %704 = sub i32 0, %703
  %705 = add i32 %704, 4
  %706 = shl i32 %703, 4
  %707 = sub i32 0, %703
  %708 = add i32 %707, 4
  %709 = sub i32 %703, 4
  %710 = mul i32 %709, 4
  %711 = shl i32 %703, 4
  %712 = sub i32 0, %703
  %713 = add i32 %712, 4
  %714 = shl i32 %703, 4
  %715 = sub i32 0, %703
  %716 = add i32 %715, 4
  %717 = srem i32 %703, 4
  %718 = shl i32 %717, 365
  %719 = sub i32 %717, 365
  %720 = mul i32 %719, 365
  %721 = mul nsw i32 %717, 365
  %722 = sub i32 %697, %721
  %723 = mul i32 %722, %721
  %724 = shl i32 %697, %721
  %725 = add nsw i32 %697, %721
  %726 = load i32, i32* %13, align 4
  %727 = sub i32 %726, 1
  %728 = mul i32 %727, 1
  %729 = shl i32 %726, 1
  %730 = sub nsw i32 %726, 1
  %731 = shl i32 %730, 100
  %732 = shl i32 %730, 100
  %733 = sub i32 %730, 100
  %734 = mul i32 %733, 100
  %735 = sub i32 %730, 100
  %736 = mul i32 %735, 100
  %737 = sdiv i32 %730, 100
  %738 = sub i32 0, %725
  %739 = add i32 %738, %737
  %740 = sub i32 %725, %737
  %741 = mul i32 %740, %737
  %742 = shl i32 %725, %737
  %743 = sub i32 0, %725
  %744 = add i32 %743, %737
  %745 = shl i32 %725, %737
  %746 = sub i32 0, %725
  %747 = add i32 %746, %737
  %748 = sub nsw i32 %725, %737
  %749 = load i32, i32* %13, align 4
  %750 = shl i32 %749, 1
  %751 = shl i32 %749, 1
  %752 = sub nsw i32 %749, 1
  %753 = sub i32 0, %752
  %754 = add i32 %753, 400
  %755 = sub i32 %752, 400
  %756 = mul i32 %755, 400
  %757 = sub i32 %752, 400
  %758 = mul i32 %757, 400
  %759 = sub i32 %752, 400
  %760 = mul i32 %759, 400
  %761 = sub i32 %752, 400
  %762 = mul i32 %761, 400
  %763 = shl i32 %752, 400
  %764 = sdiv i32 %752, 400
  %765 = shl i32 %748, %764
  %766 = add nsw i32 %748, %764
  %767 = sub i32 0, %766
  %768 = add i32 %767, 213
  %769 = sub i32 %766, 213
  %770 = mul i32 %769, 213
  %771 = add nsw i32 %766, 213
  %772 = load i32, i32* %14, align 4
  %773 = sub i32 0, %772
  %774 = add i32 %773, 8
  %775 = sub i32 %772, 8
  %776 = mul i32 %775, 8
  %777 = shl i32 %772, 8
  %778 = sub nsw i32 %772, 8
  %779 = sub i32 0, %778
  %780 = add i32 %779, 2
  %781 = shl i32 %778, 2
  %782 = shl i32 %778, 2
  %783 = sub i32 %778, 2
  %784 = mul i32 %783, 2
  %785 = sub i32 %778, 2
  %786 = mul i32 %785, 2
  %787 = sdiv i32 %778, 2
  %788 = sub i32 0, %787
  %789 = add i32 %788, 61
  %790 = sub i32 0, %787
  %791 = add i32 %790, 61
  %792 = sub i32 0, %787
  %793 = add i32 %792, 61
  %794 = mul nsw i32 %787, 61
  %795 = shl i32 %771, %794
  %796 = add nsw i32 %771, %794
  %797 = load i32, i32* %14, align 4
  %798 = sub i32 %797, 8
  %799 = mul i32 %798, 8
  %800 = shl i32 %797, 8
  %801 = shl i32 %797, 8
  %802 = shl i32 %797, 8
  %803 = sub i32 %797, 8
  %804 = mul i32 %803, 8
  %805 = sub nsw i32 %797, 8
  %806 = sub i32 0, %805
  %807 = add i32 %806, 2
  %808 = shl i32 %805, 2
  %809 = sub i32 %805, 2
  %810 = mul i32 %809, 2
  %811 = sub i32 %805, 2
  %812 = mul i32 %811, 2
  %813 = srem i32 %805, 2
  %814 = shl i32 %813, 31
  %815 = sub i32 0, %813
  %816 = add i32 %815, 31
  %817 = shl i32 %813, 31
  %818 = mul nsw i32 %813, 31
  %819 = shl i32 %796, %818
  %820 = shl i32 %796, %818
  %821 = shl i32 %796, %818
  %822 = sub i32 0, %796
  %823 = add i32 %822, %818
  %824 = sub i32 %796, %818
  %825 = mul i32 %824, %818
  %826 = sub i32 %796, %818
  %827 = mul i32 %826, %818
  %828 = add nsw i32 %796, %818
  %829 = load i32, i32* %15, align 4
  %830 = shl i32 %828, %829
  %831 = sub i32 %828, %829
  %832 = mul i32 %831, %829
  %833 = add nsw i32 %828, %829
  %834 = sext i32 %833 to i64
  %835 = load i32, i32* %12, align 4
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %836
  %838 = getelementptr inbounds [4 x i64], [4 x i64]* %837, i64 0, i64 3
  store i64 %834, i64* %838, align 8
  br label %170

; <label>:839:                                    ; preds = %229, %220
  %840 = load i32, i32* %13, align 4
  %841 = shl i32 %840, 1
  %842 = sub nsw i32 %840, 1
  %843 = sub i32 %842, 4
  %844 = mul i32 %843, 4
  %845 = sub i32 %842, 4
  %846 = mul i32 %845, 4
  %847 = sub i32 %842, 4
  %848 = mul i32 %847, 4
  %849 = sub i32 0, %842
  %850 = add i32 %849, 4
  %851 = sdiv i32 %842, 4
  %852 = sub i32 0, %851
  %853 = add i32 %852, 1461
  %854 = mul nsw i32 %851, 1461
  %855 = load i32, i32* %13, align 4
  %856 = sub i32 0, %855
  %857 = add i32 %856, 1
  %858 = sub i32 %855, 1
  %859 = mul i32 %858, 1
  %860 = sub nsw i32 %855, 1
  %861 = shl i32 %860, 4
  %862 = sub i32 %860, 4
  %863 = mul i32 %862, 4
  %864 = shl i32 %860, 4
  %865 = sub i32 0, %860
  %866 = add i32 %865, 4
  %867 = shl i32 %860, 4
  %868 = sub i32 0, %860
  %869 = add i32 %868, 4
  %870 = sub i32 %860, 4
  %871 = mul i32 %870, 4
  %872 = sub i32 %860, 4
  %873 = mul i32 %872, 4
  %874 = sub i32 %860, 4
  %875 = mul i32 %874, 4
  %876 = sub i32 0, %860
  %877 = add i32 %876, 4
  %878 = srem i32 %860, 4
  %879 = shl i32 %878, 365
  %880 = sub i32 %878, 365
  %881 = mul i32 %880, 365
  %882 = sub i32 %878, 365
  %883 = mul i32 %882, 365
  %884 = sub i32 0, %878
  %885 = add i32 %884, 365
  %886 = sub i32 0, %878
  %887 = add i32 %886, 365
  %888 = sub i32 %878, 365
  %889 = mul i32 %888, 365
  %890 = mul nsw i32 %878, 365
  %891 = sub i32 0, %854
  %892 = add i32 %891, %890
  %893 = sub i32 %854, %890
  %894 = mul i32 %893, %890
  %895 = sub i32 %854, %890
  %896 = mul i32 %895, %890
  %897 = sub i32 %854, %890
  %898 = mul i32 %897, %890
  %899 = sub i32 %854, %890
  %900 = mul i32 %899, %890
  %901 = sub i32 %854, %890
  %902 = mul i32 %901, %890
  %903 = add nsw i32 %854, %890
  %904 = load i32, i32* %13, align 4
  %905 = sub i32 %904, 1
  %906 = mul i32 %905, 1
  %907 = sub i32 %904, 1
  %908 = mul i32 %907, 1
  %909 = shl i32 %904, 1
  %910 = sub nsw i32 %904, 1
  %911 = sub i32 0, %910
  %912 = add i32 %911, 100
  %913 = sub i32 %910, 100
  %914 = mul i32 %913, 100
  %915 = sub i32 0, %910
  %916 = add i32 %915, 100
  %917 = shl i32 %910, 100
  %918 = sdiv i32 %910, 100
  %919 = sub i32 %903, %918
  %920 = mul i32 %919, %918
  %921 = sub i32 %903, %918
  %922 = mul i32 %921, %918
  %923 = sub i32 %903, %918
  %924 = mul i32 %923, %918
  %925 = sub i32 %903, %918
  %926 = mul i32 %925, %918
  %927 = shl i32 %903, %918
  %928 = sub i32 %903, %918
  %929 = mul i32 %928, %918
  %930 = sub nsw i32 %903, %918
  %931 = load i32, i32* %13, align 4
  %932 = sub i32 0, %931
  %933 = add i32 %932, 1
  %934 = sub i32 %931, 1
  %935 = mul i32 %934, 1
  %936 = shl i32 %931, 1
  %937 = sub i32 0, %931
  %938 = add i32 %937, 1
  %939 = shl i32 %931, 1
  %940 = sub nsw i32 %931, 1
  %941 = sub i32 %940, 400
  %942 = mul i32 %941, 400
  %943 = sub i32 %940, 400
  %944 = mul i32 %943, 400
  %945 = sdiv i32 %940, 400
  %946 = shl i32 %930, %945
  %947 = sub i32 %930, %945
  %948 = mul i32 %947, %945
  %949 = shl i32 %930, %945
  %950 = sub i32 0, %930
  %951 = add i32 %950, %945
  %952 = sub i32 0, %930
  %953 = add i32 %952, %945
  %954 = sub i32 0, %930
  %955 = add i32 %954, %945
  %956 = sub i32 0, %930
  %957 = add i32 %956, %945
  %958 = add nsw i32 %930, %945
  %959 = load i32, i32* %14, align 4
  %960 = shl i32 %959, 1
  %961 = sub i32 0, %959
  %962 = add i32 %961, 1
  %963 = shl i32 %959, 1
  %964 = sub nsw i32 %959, 1
  %965 = sub i32 %964, 31
  %966 = mul i32 %965, 31
  %967 = shl i32 %964, 31
  %968 = sub i32 %964, 31
  %969 = mul i32 %968, 31
  %970 = mul nsw i32 %964, 31
  %971 = shl i32 %958, %970
  %972 = shl i32 %958, %970
  %973 = shl i32 %958, %970
  %974 = sub i32 %958, %970
  %975 = mul i32 %974, %970
  %976 = sub i32 0, %958
  %977 = add i32 %976, %970
  %978 = shl i32 %958, %970
  %979 = shl i32 %958, %970
  %980 = sub i32 0, %958
  %981 = add i32 %980, %970
  %982 = add nsw i32 %958, %970
  %983 = load i32, i32* %15, align 4
  %984 = sub i32 %982, %983
  %985 = mul i32 %984, %983
  %986 = add nsw i32 %982, %983
  %987 = sext i32 %986 to i64
  %988 = load i32, i32* %12, align 4
  %989 = sext i32 %988 to i64
  %990 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %989
  %991 = getelementptr inbounds [4 x i64], [4 x i64]* %990, i64 0, i64 3
  store i64 %987, i64* %991, align 8
  br label %229

; <label>:992:                                    ; preds = %279, %270
  %993 = load i32, i32* %13, align 4
  %994 = sub i32 0, %993
  %995 = add i32 %994, 1
  %996 = sub i32 %993, 1
  %997 = mul i32 %996, 1
  %998 = sub i32 %993, 1
  %999 = mul i32 %998, 1
  %1000 = sub nsw i32 %993, 1
  %1001 = sub i32 0, %1000
  %1002 = add i32 %1001, 4
  %1003 = sub i32 %1000, 4
  %1004 = mul i32 %1003, 4
  %1005 = shl i32 %1000, 4
  %1006 = shl i32 %1000, 4
  %1007 = sub i32 %1000, 4
  %1008 = mul i32 %1007, 4
  %1009 = sub i32 0, %1000
  %1010 = add i32 %1009, 4
  %1011 = sub i32 0, %1000
  %1012 = add i32 %1011, 4
  %1013 = sdiv i32 %1000, 4
  %1014 = sub i32 %1013, 1461
  %1015 = mul i32 %1014, 1461
  %1016 = sub i32 %1013, 1461
  %1017 = mul i32 %1016, 1461
  %1018 = mul nsw i32 %1013, 1461
  %1019 = load i32, i32* %13, align 4
  %1020 = sub i32 0, %1019
  %1021 = add i32 %1020, 1
  %1022 = sub i32 0, %1019
  %1023 = add i32 %1022, 1
  %1024 = sub i32 0, %1019
  %1025 = add i32 %1024, 1
  %1026 = sub nsw i32 %1019, 1
  %1027 = srem i32 %1026, 4
  %1028 = mul nsw i32 %1027, 365
  %1029 = sub i32 0, %1018
  %1030 = add i32 %1029, %1028
  %1031 = shl i32 %1018, %1028
  %1032 = add nsw i32 %1018, %1028
  %1033 = load i32, i32* %13, align 4
  %1034 = sub i32 %1033, 1
  %1035 = mul i32 %1034, 1
  %1036 = shl i32 %1033, 1
  %1037 = shl i32 %1033, 1
  %1038 = sub i32 0, %1033
  %1039 = add i32 %1038, 1
  %1040 = sub i32 0, %1033
  %1041 = add i32 %1040, 1
  %1042 = sub nsw i32 %1033, 1
  %1043 = shl i32 %1042, 100
  %1044 = sub i32 0, %1042
  %1045 = add i32 %1044, 100
  %1046 = shl i32 %1042, 100
  %1047 = sub i32 0, %1042
  %1048 = add i32 %1047, 100
  %1049 = sub i32 0, %1042
  %1050 = add i32 %1049, 100
  %1051 = sub i32 %1042, 100
  %1052 = mul i32 %1051, 100
  %1053 = sdiv i32 %1042, 100
  %1054 = shl i32 %1032, %1053
  %1055 = sub i32 0, %1032
  %1056 = add i32 %1055, %1053
  %1057 = sub nsw i32 %1032, %1053
  %1058 = load i32, i32* %13, align 4
  %1059 = sub i32 0, %1058
  %1060 = add i32 %1059, 1
  %1061 = shl i32 %1058, 1
  %1062 = sub i32 0, %1058
  %1063 = add i32 %1062, 1
  %1064 = sub i32 0, %1058
  %1065 = add i32 %1064, 1
  %1066 = shl i32 %1058, 1
  %1067 = sub i32 0, %1058
  %1068 = add i32 %1067, 1
  %1069 = sub i32 %1058, 1
  %1070 = mul i32 %1069, 1
  %1071 = shl i32 %1058, 1
  %1072 = sub nsw i32 %1058, 1
  %1073 = shl i32 %1072, 400
  %1074 = sub i32 %1072, 400
  %1075 = mul i32 %1074, 400
  %1076 = sub i32 0, %1072
  %1077 = add i32 %1076, 400
  %1078 = sub i32 0, %1072
  %1079 = add i32 %1078, 400
  %1080 = shl i32 %1072, 400
  %1081 = shl i32 %1072, 400
  %1082 = sdiv i32 %1072, 400
  %1083 = sub i32 0, %1057
  %1084 = add i32 %1083, %1082
  %1085 = add nsw i32 %1057, %1082
  %1086 = load i32, i32* %14, align 4
  %1087 = sub nsw i32 %1086, 1
  %1088 = shl i32 %1087, 2
  %1089 = sub i32 %1087, 2
  %1090 = mul i32 %1089, 2
  %1091 = sdiv i32 %1087, 2
  %1092 = sub i32 0, %1091
  %1093 = add i32 %1092, 61
  %1094 = sub i32 %1091, 61
  %1095 = mul i32 %1094, 61
  %1096 = sub i32 0, %1091
  %1097 = add i32 %1096, 61
  %1098 = sub i32 %1091, 61
  %1099 = mul i32 %1098, 61
  %1100 = mul nsw i32 %1091, 61
  %1101 = shl i32 %1085, %1100
  %1102 = sub i32 %1085, %1100
  %1103 = mul i32 %1102, %1100
  %1104 = add nsw i32 %1085, %1100
  %1105 = load i32, i32* %14, align 4
  %1106 = shl i32 %1105, 1
  %1107 = sub nsw i32 %1105, 1
  %1108 = shl i32 %1107, 2
  %1109 = shl i32 %1107, 2
  %1110 = sub i32 %1107, 2
  %1111 = mul i32 %1110, 2
  %1112 = sub i32 %1107, 2
  %1113 = mul i32 %1112, 2
  %1114 = srem i32 %1107, 2
  %1115 = shl i32 %1114, 31
  %1116 = sub i32 %1114, 31
  %1117 = mul i32 %1116, 31
  %1118 = mul nsw i32 %1114, 31
  %1119 = shl i32 %1104, %1118
  %1120 = shl i32 %1104, %1118
  %1121 = shl i32 %1104, %1118
  %1122 = sub i32 0, %1104
  %1123 = add i32 %1122, %1118
  %1124 = sub i32 0, %1104
  %1125 = add i32 %1124, %1118
  %1126 = shl i32 %1104, %1118
  %1127 = add nsw i32 %1104, %1118
  %1128 = shl i32 %1127, 2
  %1129 = sub i32 %1127, 2
  %1130 = mul i32 %1129, 2
  %1131 = shl i32 %1127, 2
  %1132 = sub i32 %1127, 2
  %1133 = mul i32 %1132, 2
  %1134 = sub i32 0, %1127
  %1135 = add i32 %1134, 2
  %1136 = sub nsw i32 %1127, 2
  %1137 = load i32, i32* %15, align 4
  %1138 = sub i32 0, %1136
  %1139 = add i32 %1138, %1137
  %1140 = sub i32 0, %1136
  %1141 = add i32 %1140, %1137
  %1142 = add nsw i32 %1136, %1137
  %1143 = sext i32 %1142 to i64
  %1144 = load i32, i32* %12, align 4
  %1145 = sext i32 %1144 to i64
  %1146 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %1145
  %1147 = getelementptr inbounds [4 x i64], [4 x i64]* %1146, i64 0, i64 3
  store i64 %1143, i64* %1147, align 8
  br label %279

; <label>:1148:                                   ; preds = %333, %324
  %1149 = load i32, i32* %13, align 4
  %1150 = sub i32 0, %1149
  %1151 = add i32 %1150, 1
  %1152 = sub i32 0, %1149
  %1153 = add i32 %1152, 1
  %1154 = sub nsw i32 %1149, 1
  %1155 = sdiv i32 %1154, 4
  %1156 = shl i32 %1155, 1461
  %1157 = sub i32 %1155, 1461
  %1158 = mul i32 %1157, 1461
  %1159 = sub i32 0, %1155
  %1160 = add i32 %1159, 1461
  %1161 = shl i32 %1155, 1461
  %1162 = sub i32 %1155, 1461
  %1163 = mul i32 %1162, 1461
  %1164 = sub i32 0, %1155
  %1165 = add i32 %1164, 1461
  %1166 = mul nsw i32 %1155, 1461
  %1167 = load i32, i32* %13, align 4
  %1168 = sub i32 %1167, 1
  %1169 = mul i32 %1168, 1
  %1170 = sub i32 %1167, 1
  %1171 = mul i32 %1170, 1
  %1172 = shl i32 %1167, 1
  %1173 = sub nsw i32 %1167, 1
  %1174 = sub i32 0, %1173
  %1175 = add i32 %1174, 4
  %1176 = sub i32 0, %1173
  %1177 = add i32 %1176, 4
  %1178 = sub i32 0, %1173
  %1179 = add i32 %1178, 4
  %1180 = sub i32 0, %1173
  %1181 = add i32 %1180, 4
  %1182 = sub i32 %1173, 4
  %1183 = mul i32 %1182, 4
  %1184 = srem i32 %1173, 4
  %1185 = sub i32 0, %1184
  %1186 = add i32 %1185, 365
  %1187 = shl i32 %1184, 365
  %1188 = sub i32 0, %1184
  %1189 = add i32 %1188, 365
  %1190 = shl i32 %1184, 365
  %1191 = shl i32 %1184, 365
  %1192 = sub i32 0, %1184
  %1193 = add i32 %1192, 365
  %1194 = sub i32 %1184, 365
  %1195 = mul i32 %1194, 365
  %1196 = shl i32 %1184, 365
  %1197 = mul nsw i32 %1184, 365
  %1198 = shl i32 %1166, %1197
  %1199 = shl i32 %1166, %1197
  %1200 = sub i32 0, %1166
  %1201 = add i32 %1200, %1197
  %1202 = sub i32 %1166, %1197
  %1203 = mul i32 %1202, %1197
  %1204 = shl i32 %1166, %1197
  %1205 = add nsw i32 %1166, %1197
  %1206 = load i32, i32* %13, align 4
  %1207 = shl i32 %1206, 1
  %1208 = sub nsw i32 %1206, 1
  %1209 = sub i32 0, %1208
  %1210 = add i32 %1209, 100
  %1211 = sdiv i32 %1208, 100
  %1212 = sub i32 0, %1205
  %1213 = add i32 %1212, %1211
  %1214 = sub i32 %1205, %1211
  %1215 = mul i32 %1214, %1211
  %1216 = sub nsw i32 %1205, %1211
  %1217 = load i32, i32* %13, align 4
  %1218 = shl i32 %1217, 1
  %1219 = shl i32 %1217, 1
  %1220 = shl i32 %1217, 1
  %1221 = sub i32 %1217, 1
  %1222 = mul i32 %1221, 1
  %1223 = sub nsw i32 %1217, 1
  %1224 = shl i32 %1223, 400
  %1225 = sub i32 %1223, 400
  %1226 = mul i32 %1225, 400
  %1227 = sdiv i32 %1223, 400
  %1228 = sub i32 0, %1216
  %1229 = add i32 %1228, %1227
  %1230 = shl i32 %1216, %1227
  %1231 = add nsw i32 %1216, %1227
  %1232 = sub i32 %1231, 212
  %1233 = mul i32 %1232, 212
  %1234 = sub i32 %1231, 212
  %1235 = mul i32 %1234, 212
  %1236 = shl i32 %1231, 212
  %1237 = shl i32 %1231, 212
  %1238 = shl i32 %1231, 212
  %1239 = sub i32 %1231, 212
  %1240 = mul i32 %1239, 212
  %1241 = add nsw i32 %1231, 212
  %1242 = load i32, i32* %14, align 4
  %1243 = sub i32 0, %1242
  %1244 = add i32 %1243, 8
  %1245 = shl i32 %1242, 8
  %1246 = sub i32 0, %1242
  %1247 = add i32 %1246, 8
  %1248 = sub i32 %1242, 8
  %1249 = mul i32 %1248, 8
  %1250 = sub nsw i32 %1242, 8
  %1251 = sub i32 0, %1250
  %1252 = add i32 %1251, 2
  %1253 = shl i32 %1250, 2
  %1254 = sub i32 %1250, 2
  %1255 = mul i32 %1254, 2
  %1256 = shl i32 %1250, 2
  %1257 = sdiv i32 %1250, 2
  %1258 = sub i32 %1257, 61
  %1259 = mul i32 %1258, 61
  %1260 = sub i32 %1257, 61
  %1261 = mul i32 %1260, 61
  %1262 = shl i32 %1257, 61
  %1263 = sub i32 0, %1257
  %1264 = add i32 %1263, 61
  %1265 = shl i32 %1257, 61
  %1266 = shl i32 %1257, 61
  %1267 = sub i32 0, %1257
  %1268 = add i32 %1267, 61
  %1269 = mul nsw i32 %1257, 61
  %1270 = shl i32 %1241, %1269
  %1271 = add nsw i32 %1241, %1269
  %1272 = load i32, i32* %14, align 4
  %1273 = sub i32 %1272, 8
  %1274 = mul i32 %1273, 8
  %1275 = shl i32 %1272, 8
  %1276 = sub i32 0, %1272
  %1277 = add i32 %1276, 8
  %1278 = sub i32 %1272, 8
  %1279 = mul i32 %1278, 8
  %1280 = sub i32 %1272, 8
  %1281 = mul i32 %1280, 8
  %1282 = sub nsw i32 %1272, 8
  %1283 = sub i32 0, %1282
  %1284 = add i32 %1283, 2
  %1285 = shl i32 %1282, 2
  %1286 = shl i32 %1282, 2
  %1287 = sub i32 %1282, 2
  %1288 = mul i32 %1287, 2
  %1289 = sub i32 %1282, 2
  %1290 = mul i32 %1289, 2
  %1291 = srem i32 %1282, 2
  %1292 = shl i32 %1291, 31
  %1293 = shl i32 %1291, 31
  %1294 = sub i32 %1291, 31
  %1295 = mul i32 %1294, 31
  %1296 = sub i32 %1291, 31
  %1297 = mul i32 %1296, 31
  %1298 = sub i32 %1291, 31
  %1299 = mul i32 %1298, 31
  %1300 = sub i32 %1291, 31
  %1301 = mul i32 %1300, 31
  %1302 = shl i32 %1291, 31
  %1303 = mul nsw i32 %1291, 31
  %1304 = shl i32 %1271, %1303
  %1305 = sub i32 %1271, %1303
  %1306 = mul i32 %1305, %1303
  %1307 = add nsw i32 %1271, %1303
  %1308 = load i32, i32* %15, align 4
  %1309 = sub i32 %1307, %1308
  %1310 = mul i32 %1309, %1308
  %1311 = sub i32 0, %1307
  %1312 = add i32 %1311, %1308
  %1313 = shl i32 %1307, %1308
  %1314 = shl i32 %1307, %1308
  %1315 = sub i32 %1307, %1308
  %1316 = mul i32 %1315, %1308
  %1317 = add nsw i32 %1307, %1308
  %1318 = sext i32 %1317 to i64
  %1319 = load i32, i32* %12, align 4
  %1320 = sext i32 %1319 to i64
  %1321 = getelementptr inbounds [2 x [4 x i64]], [2 x [4 x i64]]* %11, i64 0, i64 %1320
  %1322 = getelementptr inbounds [4 x i64], [4 x i64]* %1321, i64 0, i64 3
  store i64 %1318, i64* %1322, align 8
  br label %333

; <label>:1323:                                   ; preds = %387, %378
  br label %387

; <label>:1324:                                   ; preds = %406, %397
  br label %406

; <label>:1325:                                   ; preds = %425, %416
  br label %425

; <label>:1326:                                   ; preds = %444, %435
  %1327 = load i32, i32* %12, align 4
  %1328 = sub i32 0, %1327
  %1329 = add i32 %1328, 1
  %1330 = sub i32 %1327, 1
  %1331 = mul i32 %1330, 1
  %1332 = add nsw i32 %1327, 1
  store i32 %1332, i32* %12, align 4
  br label %444
}

declare i32 @__isoc99_scanf(i8*, ...) #1

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #2

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
