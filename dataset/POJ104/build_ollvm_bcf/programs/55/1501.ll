; ModuleID = 'source-C-CXX/55/1501.c'
source_filename = "source-C-CXX/55/1501.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %2)
  %10 = load i32, i32* %2, align 4
  %11 = icmp sgt i32 %10, 1000
  br i1 %11, label %12, label %86

; <label>:12:                                     ; preds = %0
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %21, label %116

; <label>:21:                                     ; preds = %12, %116
  %22 = load i32, i32* %2, align 4
  %23 = srem i32 %22, 10
  store i32 %23, i32* %4, align 4
  %24 = load i32, i32* %2, align 4
  %25 = srem i32 %24, 100
  %26 = load i32, i32* %4, align 4
  %27 = sub nsw i32 %25, %26
  %28 = sdiv i32 %27, 10
  store i32 %28, i32* %5, align 4
  %29 = load i32, i32* %2, align 4
  %30 = srem i32 %29, 1000
  %31 = load i32, i32* %4, align 4
  %32 = sub nsw i32 %30, %31
  %33 = load i32, i32* %5, align 4
  %34 = mul nsw i32 10, %33
  %35 = sub nsw i32 %32, %34
  %36 = sdiv i32 %35, 100
  store i32 %36, i32* %6, align 4
  %37 = load i32, i32* %2, align 4
  %38 = srem i32 %37, 10000
  %39 = load i32, i32* %4, align 4
  %40 = sub nsw i32 %38, %39
  %41 = load i32, i32* %5, align 4
  %42 = mul nsw i32 10, %41
  %43 = sub nsw i32 %40, %42
  %44 = load i32, i32* %6, align 4
  %45 = mul nsw i32 100, %44
  %46 = sub nsw i32 %43, %45
  %47 = sdiv i32 %46, 1000
  store i32 %47, i32* %7, align 4
  %48 = load i32, i32* %2, align 4
  %49 = srem i32 %48, 100000
  %50 = load i32, i32* %4, align 4
  %51 = sub nsw i32 %49, %50
  %52 = load i32, i32* %5, align 4
  %53 = mul nsw i32 10, %52
  %54 = sub nsw i32 %51, %53
  %55 = load i32, i32* %6, align 4
  %56 = mul nsw i32 100, %55
  %57 = sub nsw i32 %54, %56
  %58 = load i32, i32* %7, align 4
  %59 = mul nsw i32 1000, %58
  %60 = sub nsw i32 %57, %59
  %61 = sdiv i32 %60, 10000
  store i32 %61, i32* %8, align 4
  %62 = load i32, i32* %4, align 4
  %63 = mul nsw i32 %62, 10000
  %64 = load i32, i32* %5, align 4
  %65 = mul nsw i32 %64, 1000
  %66 = add nsw i32 %63, %65
  %67 = load i32, i32* %6, align 4
  %68 = mul nsw i32 %67, 100
  %69 = add nsw i32 %66, %68
  %70 = load i32, i32* %7, align 4
  %71 = mul nsw i32 %70, 10
  %72 = add nsw i32 %69, %71
  %73 = load i32, i32* %8, align 4
  %74 = add nsw i32 %72, %73
  store i32 %74, i32* %3, align 4
  %75 = load i32, i32* %3, align 4
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %75)
  %77 = load i32, i32* @x
  %78 = load i32, i32* @y
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %85, label %116

; <label>:85:                                     ; preds = %21
  br label %115

; <label>:86:                                     ; preds = %0
  %87 = load i32, i32* %2, align 4
  %88 = icmp slt i32 %87, 1000
  br i1 %88, label %89, label %114

; <label>:89:                                     ; preds = %86
  %90 = load i32, i32* %2, align 4
  %91 = srem i32 %90, 10
  store i32 %91, i32* %4, align 4
  %92 = load i32, i32* %2, align 4
  %93 = srem i32 %92, 100
  %94 = load i32, i32* %4, align 4
  %95 = sub nsw i32 %93, %94
  %96 = sdiv i32 %95, 10
  store i32 %96, i32* %5, align 4
  %97 = load i32, i32* %2, align 4
  %98 = srem i32 %97, 1000
  %99 = load i32, i32* %4, align 4
  %100 = sub nsw i32 %98, %99
  %101 = load i32, i32* %5, align 4
  %102 = mul nsw i32 10, %101
  %103 = sub nsw i32 %100, %102
  %104 = sdiv i32 %103, 100
  store i32 %104, i32* %6, align 4
  %105 = load i32, i32* %4, align 4
  %106 = mul nsw i32 %105, 100
  %107 = load i32, i32* %5, align 4
  %108 = mul nsw i32 %107, 10
  %109 = add nsw i32 %106, %108
  %110 = load i32, i32* %6, align 4
  %111 = add nsw i32 %109, %110
  store i32 %111, i32* %3, align 4
  %112 = load i32, i32* %3, align 4
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %112)
  br label %114

; <label>:114:                                    ; preds = %89, %86
  br label %115

; <label>:115:                                    ; preds = %114, %85
  ret i32 0

; <label>:116:                                    ; preds = %21, %12
  %117 = load i32, i32* %2, align 4
  %118 = sub i32 0, %117
  %119 = add i32 %118, 10
  %120 = shl i32 %117, 10
  %121 = shl i32 %117, 10
  %122 = shl i32 %117, 10
  %123 = sub i32 0, %117
  %124 = add i32 %123, 10
  %125 = sub i32 %117, 10
  %126 = mul i32 %125, 10
  %127 = srem i32 %117, 10
  store i32 %127, i32* %4, align 4
  %128 = load i32, i32* %2, align 4
  %129 = sub i32 0, %128
  %130 = add i32 %129, 100
  %131 = sub i32 %128, 100
  %132 = mul i32 %131, 100
  %133 = sub i32 %128, 100
  %134 = mul i32 %133, 100
  %135 = sub i32 0, %128
  %136 = add i32 %135, 100
  %137 = srem i32 %128, 100
  %138 = load i32, i32* %4, align 4
  %139 = sub i32 0, %137
  %140 = add i32 %139, %138
  %141 = sub i32 %137, %138
  %142 = mul i32 %141, %138
  %143 = sub i32 %137, %138
  %144 = mul i32 %143, %138
  %145 = sub i32 %137, %138
  %146 = mul i32 %145, %138
  %147 = sub i32 0, %137
  %148 = add i32 %147, %138
  %149 = sub nsw i32 %137, %138
  %150 = sub i32 %149, 10
  %151 = mul i32 %150, 10
  %152 = sdiv i32 %149, 10
  store i32 %152, i32* %5, align 4
  %153 = load i32, i32* %2, align 4
  %154 = shl i32 %153, 1000
  %155 = sub i32 0, %153
  %156 = add i32 %155, 1000
  %157 = sub i32 %153, 1000
  %158 = mul i32 %157, 1000
  %159 = shl i32 %153, 1000
  %160 = sub i32 0, %153
  %161 = add i32 %160, 1000
  %162 = sub i32 %153, 1000
  %163 = mul i32 %162, 1000
  %164 = sub i32 %153, 1000
  %165 = mul i32 %164, 1000
  %166 = srem i32 %153, 1000
  %167 = load i32, i32* %4, align 4
  %168 = shl i32 %166, %167
  %169 = shl i32 %166, %167
  %170 = sub i32 %166, %167
  %171 = mul i32 %170, %167
  %172 = sub nsw i32 %166, %167
  %173 = load i32, i32* %5, align 4
  %174 = sub i32 0, 10
  %175 = add i32 %174, %173
  %176 = shl i32 10, %173
  %177 = sub i32 10, %173
  %178 = mul i32 %177, %173
  %179 = sub i32 0, 10
  %180 = add i32 %179, %173
  %181 = sub i32 0, 10
  %182 = add i32 %181, %173
  %183 = shl i32 10, %173
  %184 = shl i32 10, %173
  %185 = mul nsw i32 10, %173
  %186 = sub i32 %172, %185
  %187 = mul i32 %186, %185
  %188 = shl i32 %172, %185
  %189 = sub nsw i32 %172, %185
  %190 = shl i32 %189, 100
  %191 = sub i32 0, %189
  %192 = add i32 %191, 100
  %193 = sub i32 %189, 100
  %194 = mul i32 %193, 100
  %195 = sdiv i32 %189, 100
  store i32 %195, i32* %6, align 4
  %196 = load i32, i32* %2, align 4
  %197 = sub i32 %196, 10000
  %198 = mul i32 %197, 10000
  %199 = sub i32 0, %196
  %200 = add i32 %199, 10000
  %201 = sub i32 0, %196
  %202 = add i32 %201, 10000
  %203 = shl i32 %196, 10000
  %204 = shl i32 %196, 10000
  %205 = shl i32 %196, 10000
  %206 = srem i32 %196, 10000
  %207 = load i32, i32* %4, align 4
  %208 = sub i32 %206, %207
  %209 = mul i32 %208, %207
  %210 = sub i32 %206, %207
  %211 = mul i32 %210, %207
  %212 = shl i32 %206, %207
  %213 = sub i32 0, %206
  %214 = add i32 %213, %207
  %215 = sub i32 0, %206
  %216 = add i32 %215, %207
  %217 = sub i32 %206, %207
  %218 = mul i32 %217, %207
  %219 = sub nsw i32 %206, %207
  %220 = load i32, i32* %5, align 4
  %221 = sub i32 0, 10
  %222 = add i32 %221, %220
  %223 = sub i32 0, 10
  %224 = add i32 %223, %220
  %225 = sub i32 0, 10
  %226 = add i32 %225, %220
  %227 = sub i32 10, %220
  %228 = mul i32 %227, %220
  %229 = shl i32 10, %220
  %230 = mul nsw i32 10, %220
  %231 = sub i32 0, %219
  %232 = add i32 %231, %230
  %233 = shl i32 %219, %230
  %234 = sub i32 0, %219
  %235 = add i32 %234, %230
  %236 = shl i32 %219, %230
  %237 = sub i32 %219, %230
  %238 = mul i32 %237, %230
  %239 = sub i32 0, %219
  %240 = add i32 %239, %230
  %241 = shl i32 %219, %230
  %242 = shl i32 %219, %230
  %243 = sub nsw i32 %219, %230
  %244 = load i32, i32* %6, align 4
  %245 = shl i32 100, %244
  %246 = sub i32 100, %244
  %247 = mul i32 %246, %244
  %248 = shl i32 100, %244
  %249 = sub i32 100, %244
  %250 = mul i32 %249, %244
  %251 = sub i32 0, 100
  %252 = add i32 %251, %244
  %253 = mul nsw i32 100, %244
  %254 = sub i32 0, %243
  %255 = add i32 %254, %253
  %256 = shl i32 %243, %253
  %257 = sub i32 0, %243
  %258 = add i32 %257, %253
  %259 = sub i32 %243, %253
  %260 = mul i32 %259, %253
  %261 = sub i32 0, %243
  %262 = add i32 %261, %253
  %263 = sub i32 0, %243
  %264 = add i32 %263, %253
  %265 = shl i32 %243, %253
  %266 = sub i32 %243, %253
  %267 = mul i32 %266, %253
  %268 = sub i32 %243, %253
  %269 = mul i32 %268, %253
  %270 = sub i32 %243, %253
  %271 = mul i32 %270, %253
  %272 = sub nsw i32 %243, %253
  %273 = sub i32 %272, 1000
  %274 = mul i32 %273, 1000
  %275 = sub i32 %272, 1000
  %276 = mul i32 %275, 1000
  %277 = sub i32 0, %272
  %278 = add i32 %277, 1000
  %279 = sub i32 %272, 1000
  %280 = mul i32 %279, 1000
  %281 = sdiv i32 %272, 1000
  store i32 %281, i32* %7, align 4
  %282 = load i32, i32* %2, align 4
  %283 = sub i32 %282, 100000
  %284 = mul i32 %283, 100000
  %285 = srem i32 %282, 100000
  %286 = load i32, i32* %4, align 4
  %287 = sub i32 %285, %286
  %288 = mul i32 %287, %286
  %289 = sub i32 0, %285
  %290 = add i32 %289, %286
  %291 = shl i32 %285, %286
  %292 = sub i32 0, %285
  %293 = add i32 %292, %286
  %294 = sub nsw i32 %285, %286
  %295 = load i32, i32* %5, align 4
  %296 = sub i32 0, 10
  %297 = add i32 %296, %295
  %298 = sub i32 0, 10
  %299 = add i32 %298, %295
  %300 = sub i32 0, 10
  %301 = add i32 %300, %295
  %302 = sub i32 10, %295
  %303 = mul i32 %302, %295
  %304 = sub i32 0, 10
  %305 = add i32 %304, %295
  %306 = sub i32 0, 10
  %307 = add i32 %306, %295
  %308 = sub i32 0, 10
  %309 = add i32 %308, %295
  %310 = mul nsw i32 10, %295
  %311 = shl i32 %294, %310
  %312 = sub i32 0, %294
  %313 = add i32 %312, %310
  %314 = shl i32 %294, %310
  %315 = sub nsw i32 %294, %310
  %316 = load i32, i32* %6, align 4
  %317 = sub i32 0, 100
  %318 = add i32 %317, %316
  %319 = sub i32 0, 100
  %320 = add i32 %319, %316
  %321 = sub i32 0, 100
  %322 = add i32 %321, %316
  %323 = shl i32 100, %316
  %324 = mul nsw i32 100, %316
  %325 = sub i32 0, %315
  %326 = add i32 %325, %324
  %327 = sub i32 %315, %324
  %328 = mul i32 %327, %324
  %329 = shl i32 %315, %324
  %330 = sub i32 0, %315
  %331 = add i32 %330, %324
  %332 = sub i32 0, %315
  %333 = add i32 %332, %324
  %334 = shl i32 %315, %324
  %335 = sub i32 0, %315
  %336 = add i32 %335, %324
  %337 = sub nsw i32 %315, %324
  %338 = load i32, i32* %7, align 4
  %339 = sub i32 0, 1000
  %340 = add i32 %339, %338
  %341 = sub i32 1000, %338
  %342 = mul i32 %341, %338
  %343 = sub i32 0, 1000
  %344 = add i32 %343, %338
  %345 = sub i32 0, 1000
  %346 = add i32 %345, %338
  %347 = mul nsw i32 1000, %338
  %348 = shl i32 %337, %347
  %349 = sub i32 0, %337
  %350 = add i32 %349, %347
  %351 = sub i32 0, %337
  %352 = add i32 %351, %347
  %353 = shl i32 %337, %347
  %354 = shl i32 %337, %347
  %355 = sub nsw i32 %337, %347
  %356 = sub i32 0, %355
  %357 = add i32 %356, 10000
  %358 = sub i32 0, %355
  %359 = add i32 %358, 10000
  %360 = shl i32 %355, 10000
  %361 = sub i32 0, %355
  %362 = add i32 %361, 10000
  %363 = shl i32 %355, 10000
  %364 = shl i32 %355, 10000
  %365 = sub i32 %355, 10000
  %366 = mul i32 %365, 10000
  %367 = sub i32 %355, 10000
  %368 = mul i32 %367, 10000
  %369 = sub i32 0, %355
  %370 = add i32 %369, 10000
  %371 = sdiv i32 %355, 10000
  store i32 %371, i32* %8, align 4
  %372 = load i32, i32* %4, align 4
  %373 = shl i32 %372, 10000
  %374 = shl i32 %372, 10000
  %375 = shl i32 %372, 10000
  %376 = mul nsw i32 %372, 10000
  %377 = load i32, i32* %5, align 4
  %378 = sub i32 0, %377
  %379 = add i32 %378, 1000
  %380 = shl i32 %377, 1000
  %381 = shl i32 %377, 1000
  %382 = mul nsw i32 %377, 1000
  %383 = shl i32 %376, %382
  %384 = shl i32 %376, %382
  %385 = sub i32 %376, %382
  %386 = mul i32 %385, %382
  %387 = sub i32 0, %376
  %388 = add i32 %387, %382
  %389 = sub i32 0, %376
  %390 = add i32 %389, %382
  %391 = sub i32 0, %376
  %392 = add i32 %391, %382
  %393 = add nsw i32 %376, %382
  %394 = load i32, i32* %6, align 4
  %395 = sub i32 %394, 100
  %396 = mul i32 %395, 100
  %397 = sub i32 %394, 100
  %398 = mul i32 %397, 100
  %399 = mul nsw i32 %394, 100
  %400 = sub i32 0, %393
  %401 = add i32 %400, %399
  %402 = sub i32 %393, %399
  %403 = mul i32 %402, %399
  %404 = sub i32 %393, %399
  %405 = mul i32 %404, %399
  %406 = shl i32 %393, %399
  %407 = sub i32 %393, %399
  %408 = mul i32 %407, %399
  %409 = sub i32 %393, %399
  %410 = mul i32 %409, %399
  %411 = add nsw i32 %393, %399
  %412 = load i32, i32* %7, align 4
  %413 = shl i32 %412, 10
  %414 = mul nsw i32 %412, 10
  %415 = sub i32 %411, %414
  %416 = mul i32 %415, %414
  %417 = sub i32 0, %411
  %418 = add i32 %417, %414
  %419 = sub i32 %411, %414
  %420 = mul i32 %419, %414
  %421 = sub i32 0, %411
  %422 = add i32 %421, %414
  %423 = sub i32 %411, %414
  %424 = mul i32 %423, %414
  %425 = add nsw i32 %411, %414
  %426 = load i32, i32* %8, align 4
  %427 = sub i32 0, %425
  %428 = add i32 %427, %426
  %429 = sub i32 0, %425
  %430 = add i32 %429, %426
  %431 = sub i32 0, %425
  %432 = add i32 %431, %426
  %433 = sub i32 0, %425
  %434 = add i32 %433, %426
  %435 = shl i32 %425, %426
  %436 = sub i32 %425, %426
  %437 = mul i32 %436, %426
  %438 = shl i32 %425, %426
  %439 = add nsw i32 %425, %426
  store i32 %439, i32* %3, align 4
  %440 = load i32, i32* %3, align 4
  %441 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %440)
  br label %21
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
