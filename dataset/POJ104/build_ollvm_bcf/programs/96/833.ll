; ModuleID = 'source-C-CXX/96/833.c'
source_filename = "source-C-CXX/96/833.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %9 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %2)
  %10 = load i32, i32* %2, align 4
  %11 = load i32, i32* %2, align 4
  %12 = srem i32 %11, 100
  %13 = sub nsw i32 %10, %12
  %14 = sdiv i32 %13, 100
  store i32 %14, i32* %3, align 4
  %15 = load i32, i32* %2, align 4
  %16 = load i32, i32* %3, align 4
  %17 = mul nsw i32 %16, 100
  %18 = sub nsw i32 %15, %17
  %19 = load i32, i32* %2, align 4
  %20 = load i32, i32* %3, align 4
  %21 = mul nsw i32 %20, 100
  %22 = sub nsw i32 %19, %21
  %23 = srem i32 %22, 50
  %24 = sub nsw i32 %18, %23
  %25 = sdiv i32 %24, 50
  store i32 %25, i32* %4, align 4
  %26 = load i32, i32* %2, align 4
  %27 = load i32, i32* %3, align 4
  %28 = mul nsw i32 %27, 100
  %29 = sub nsw i32 %26, %28
  %30 = load i32, i32* %4, align 4
  %31 = mul nsw i32 %30, 50
  %32 = sub nsw i32 %29, %31
  %33 = icmp sge i32 %32, 20
  br i1 %33, label %34, label %93

; <label>:34:                                     ; preds = %0
  %35 = load i32, i32* @x
  %36 = load i32, i32* @y
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %43, label %338

; <label>:43:                                     ; preds = %34, %338
  %44 = load i32, i32* %2, align 4
  %45 = load i32, i32* %3, align 4
  %46 = mul nsw i32 %45, 100
  %47 = sub nsw i32 %44, %46
  %48 = load i32, i32* %4, align 4
  %49 = mul nsw i32 %48, 50
  %50 = sub nsw i32 %47, %49
  %51 = load i32, i32* %2, align 4
  %52 = load i32, i32* %3, align 4
  %53 = mul nsw i32 %52, 100
  %54 = sub nsw i32 %51, %53
  %55 = load i32, i32* %4, align 4
  %56 = mul nsw i32 %55, 50
  %57 = sub nsw i32 %54, %56
  %58 = srem i32 %57, 20
  %59 = sub nsw i32 %50, %58
  %60 = sdiv i32 %59, 20
  store i32 %60, i32* %5, align 4
  %61 = load i32, i32* %2, align 4
  %62 = load i32, i32* %3, align 4
  %63 = mul nsw i32 %62, 100
  %64 = sub nsw i32 %61, %63
  %65 = load i32, i32* %4, align 4
  %66 = mul nsw i32 %65, 50
  %67 = sub nsw i32 %64, %66
  %68 = load i32, i32* %5, align 4
  %69 = mul nsw i32 %68, 20
  %70 = sub nsw i32 %67, %69
  %71 = load i32, i32* %2, align 4
  %72 = load i32, i32* %3, align 4
  %73 = mul nsw i32 %72, 100
  %74 = sub nsw i32 %71, %73
  %75 = load i32, i32* %4, align 4
  %76 = mul nsw i32 %75, 50
  %77 = sub nsw i32 %74, %76
  %78 = load i32, i32* %5, align 4
  %79 = mul nsw i32 %78, 20
  %80 = sub nsw i32 %77, %79
  %81 = srem i32 %80, 10
  %82 = sub nsw i32 %70, %81
  %83 = sdiv i32 %82, 10
  store i32 %83, i32* %6, align 4
  %84 = load i32, i32* @x
  %85 = load i32, i32* @y
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %92, label %338

; <label>:92:                                     ; preds = %43
  br label %195

; <label>:93:                                     ; preds = %0
  %94 = load i32, i32* %2, align 4
  %95 = load i32, i32* %3, align 4
  %96 = mul nsw i32 %95, 100
  %97 = sub nsw i32 %94, %96
  %98 = load i32, i32* %4, align 4
  %99 = mul nsw i32 %98, 50
  %100 = sub nsw i32 %97, %99
  %101 = icmp slt i32 %100, 20
  br i1 %101, label %102, label %147

; <label>:102:                                    ; preds = %93
  %103 = load i32, i32* @x
  %104 = load i32, i32* @y
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %111, label %562

; <label>:111:                                    ; preds = %102, %562
  %112 = load i32, i32* %2, align 4
  %113 = load i32, i32* %3, align 4
  %114 = mul nsw i32 %113, 100
  %115 = sub nsw i32 %112, %114
  %116 = load i32, i32* %4, align 4
  %117 = mul nsw i32 %116, 50
  %118 = sub nsw i32 %115, %117
  %119 = icmp sge i32 %118, 10
  %120 = load i32, i32* @x
  %121 = load i32, i32* @y
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %128, label %562

; <label>:128:                                    ; preds = %111
  br i1 %119, label %129, label %147

; <label>:129:                                    ; preds = %128
  store i32 0, i32* %5, align 4
  %130 = load i32, i32* %2, align 4
  %131 = load i32, i32* %3, align 4
  %132 = mul nsw i32 %131, 100
  %133 = sub nsw i32 %130, %132
  %134 = load i32, i32* %4, align 4
  %135 = mul nsw i32 %134, 50
  %136 = sub nsw i32 %133, %135
  %137 = load i32, i32* %2, align 4
  %138 = load i32, i32* %3, align 4
  %139 = mul nsw i32 %138, 100
  %140 = sub nsw i32 %137, %139
  %141 = load i32, i32* %4, align 4
  %142 = mul nsw i32 %141, 50
  %143 = sub nsw i32 %140, %142
  %144 = srem i32 %143, 10
  %145 = sub nsw i32 %136, %144
  %146 = sdiv i32 %145, 10
  store i32 %146, i32* %6, align 4
  br label %194

; <label>:147:                                    ; preds = %128, %93
  %148 = load i32, i32* @x
  %149 = load i32, i32* @y
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %156, label %601

; <label>:156:                                    ; preds = %147, %601
  %157 = load i32, i32* %2, align 4
  %158 = load i32, i32* %3, align 4
  %159 = mul nsw i32 %158, 100
  %160 = sub nsw i32 %157, %159
  %161 = load i32, i32* %4, align 4
  %162 = mul nsw i32 %161, 50
  %163 = sub nsw i32 %160, %162
  %164 = icmp slt i32 %163, 10
  %165 = load i32, i32* @x
  %166 = load i32, i32* @y
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %173, label %601

; <label>:173:                                    ; preds = %156
  br i1 %164, label %174, label %193

; <label>:174:                                    ; preds = %173
  %175 = load i32, i32* @x
  %176 = load i32, i32* @y
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %183, label %639

; <label>:183:                                    ; preds = %174, %639
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  %184 = load i32, i32* @x
  %185 = load i32, i32* @y
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %192, label %639

; <label>:192:                                    ; preds = %183
  br label %193

; <label>:193:                                    ; preds = %192, %173
  br label %194

; <label>:194:                                    ; preds = %193, %129
  br label %195

; <label>:195:                                    ; preds = %194, %92
  %196 = load i32, i32* %2, align 4
  %197 = load i32, i32* %3, align 4
  %198 = mul nsw i32 %197, 100
  %199 = sub nsw i32 %196, %198
  %200 = load i32, i32* %4, align 4
  %201 = mul nsw i32 %200, 50
  %202 = sub nsw i32 %199, %201
  %203 = load i32, i32* %5, align 4
  %204 = mul nsw i32 %203, 20
  %205 = sub nsw i32 %202, %204
  %206 = load i32, i32* %6, align 4
  %207 = mul nsw i32 %206, 10
  %208 = sub nsw i32 %205, %207
  %209 = icmp sge i32 %208, 5
  br i1 %209, label %210, label %274

; <label>:210:                                    ; preds = %195
  %211 = load i32, i32* @x
  %212 = load i32, i32* @y
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %219, label %640

; <label>:219:                                    ; preds = %210, %640
  %220 = load i32, i32* %2, align 4
  %221 = load i32, i32* %3, align 4
  %222 = mul nsw i32 %221, 100
  %223 = sub nsw i32 %220, %222
  %224 = load i32, i32* %4, align 4
  %225 = mul nsw i32 %224, 50
  %226 = sub nsw i32 %223, %225
  %227 = load i32, i32* %5, align 4
  %228 = mul nsw i32 %227, 20
  %229 = sub nsw i32 %226, %228
  %230 = load i32, i32* %6, align 4
  %231 = mul nsw i32 %230, 10
  %232 = sub nsw i32 %229, %231
  %233 = load i32, i32* %2, align 4
  %234 = load i32, i32* %3, align 4
  %235 = mul nsw i32 %234, 100
  %236 = sub nsw i32 %233, %235
  %237 = load i32, i32* %4, align 4
  %238 = mul nsw i32 %237, 50
  %239 = sub nsw i32 %236, %238
  %240 = load i32, i32* %5, align 4
  %241 = mul nsw i32 %240, 20
  %242 = sub nsw i32 %239, %241
  %243 = load i32, i32* %6, align 4
  %244 = mul nsw i32 %243, 10
  %245 = sub nsw i32 %242, %244
  %246 = srem i32 %245, 5
  %247 = sub nsw i32 %232, %246
  %248 = sdiv i32 %247, 5
  store i32 %248, i32* %7, align 4
  %249 = load i32, i32* %2, align 4
  %250 = load i32, i32* %3, align 4
  %251 = mul nsw i32 %250, 100
  %252 = sub nsw i32 %249, %251
  %253 = load i32, i32* %4, align 4
  %254 = mul nsw i32 %253, 50
  %255 = sub nsw i32 %252, %254
  %256 = load i32, i32* %5, align 4
  %257 = mul nsw i32 %256, 20
  %258 = sub nsw i32 %255, %257
  %259 = load i32, i32* %6, align 4
  %260 = mul nsw i32 %259, 10
  %261 = sub nsw i32 %258, %260
  %262 = load i32, i32* %7, align 4
  %263 = mul nsw i32 %262, 5
  %264 = sub nsw i32 %261, %263
  store i32 %264, i32* %8, align 4
  %265 = load i32, i32* @x
  %266 = load i32, i32* @y
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %273, label %640

; <label>:273:                                    ; preds = %219
  br label %325

; <label>:274:                                    ; preds = %195
  %275 = load i32, i32* %2, align 4
  %276 = load i32, i32* %3, align 4
  %277 = mul nsw i32 %276, 100
  %278 = sub nsw i32 %275, %277
  %279 = load i32, i32* %4, align 4
  %280 = mul nsw i32 %279, 50
  %281 = sub nsw i32 %278, %280
  %282 = load i32, i32* %5, align 4
  %283 = mul nsw i32 %282, 20
  %284 = sub nsw i32 %281, %283
  %285 = load i32, i32* %6, align 4
  %286 = mul nsw i32 %285, 10
  %287 = sub nsw i32 %284, %286
  %288 = icmp slt i32 %287, 5
  br i1 %288, label %289, label %324

; <label>:289:                                    ; preds = %274
  %290 = load i32, i32* @x
  %291 = load i32, i32* @y
  %292 = sub i32 %290, 1
  %293 = mul i32 %290, %292
  %294 = urem i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %295, %296
  br i1 %297, label %298, label %894

; <label>:298:                                    ; preds = %289, %894
  store i32 0, i32* %7, align 4
  %299 = load i32, i32* %2, align 4
  %300 = load i32, i32* %3, align 4
  %301 = mul nsw i32 %300, 100
  %302 = sub nsw i32 %299, %301
  %303 = load i32, i32* %4, align 4
  %304 = mul nsw i32 %303, 50
  %305 = sub nsw i32 %302, %304
  %306 = load i32, i32* %5, align 4
  %307 = mul nsw i32 %306, 20
  %308 = sub nsw i32 %305, %307
  %309 = load i32, i32* %6, align 4
  %310 = mul nsw i32 %309, 10
  %311 = sub nsw i32 %308, %310
  %312 = load i32, i32* %7, align 4
  %313 = mul nsw i32 %312, 5
  %314 = sub nsw i32 %311, %313
  store i32 %314, i32* %8, align 4
  store i32 %314, i32* %8, align 4
  %315 = load i32, i32* @x
  %316 = load i32, i32* @y
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %323, label %894

; <label>:323:                                    ; preds = %298
  br label %324

; <label>:324:                                    ; preds = %323, %274
  br label %325

; <label>:325:                                    ; preds = %324, %273
  %326 = load i32, i32* %3, align 4
  %327 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %326)
  %328 = load i32, i32* %4, align 4
  %329 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %328)
  %330 = load i32, i32* %5, align 4
  %331 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %330)
  %332 = load i32, i32* %6, align 4
  %333 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %332)
  %334 = load i32, i32* %7, align 4
  %335 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %334)
  %336 = load i32, i32* %8, align 4
  %337 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %336)
  ret i32 0

; <label>:338:                                    ; preds = %43, %34
  %339 = load i32, i32* %2, align 4
  %340 = load i32, i32* %3, align 4
  %341 = sub i32 %340, 100
  %342 = mul i32 %341, 100
  %343 = sub i32 %340, 100
  %344 = mul i32 %343, 100
  %345 = sub i32 0, %340
  %346 = add i32 %345, 100
  %347 = sub i32 %340, 100
  %348 = mul i32 %347, 100
  %349 = sub i32 %340, 100
  %350 = mul i32 %349, 100
  %351 = mul nsw i32 %340, 100
  %352 = sub i32 %339, %351
  %353 = mul i32 %352, %351
  %354 = sub i32 0, %339
  %355 = add i32 %354, %351
  %356 = sub nsw i32 %339, %351
  %357 = load i32, i32* %4, align 4
  %358 = shl i32 %357, 50
  %359 = sub i32 0, %357
  %360 = add i32 %359, 50
  %361 = sub i32 %357, 50
  %362 = mul i32 %361, 50
  %363 = sub i32 %357, 50
  %364 = mul i32 %363, 50
  %365 = sub i32 0, %357
  %366 = add i32 %365, 50
  %367 = sub i32 %357, 50
  %368 = mul i32 %367, 50
  %369 = mul nsw i32 %357, 50
  %370 = shl i32 %356, %369
  %371 = sub i32 %356, %369
  %372 = mul i32 %371, %369
  %373 = shl i32 %356, %369
  %374 = sub i32 0, %356
  %375 = add i32 %374, %369
  %376 = sub i32 0, %356
  %377 = add i32 %376, %369
  %378 = sub nsw i32 %356, %369
  %379 = load i32, i32* %2, align 4
  %380 = load i32, i32* %3, align 4
  %381 = sub i32 0, %380
  %382 = add i32 %381, 100
  %383 = sub i32 %380, 100
  %384 = mul i32 %383, 100
  %385 = shl i32 %380, 100
  %386 = sub i32 %380, 100
  %387 = mul i32 %386, 100
  %388 = sub i32 %380, 100
  %389 = mul i32 %388, 100
  %390 = mul nsw i32 %380, 100
  %391 = sub i32 %379, %390
  %392 = mul i32 %391, %390
  %393 = sub i32 0, %379
  %394 = add i32 %393, %390
  %395 = sub i32 0, %379
  %396 = add i32 %395, %390
  %397 = sub i32 0, %379
  %398 = add i32 %397, %390
  %399 = shl i32 %379, %390
  %400 = sub i32 0, %379
  %401 = add i32 %400, %390
  %402 = sub i32 %379, %390
  %403 = mul i32 %402, %390
  %404 = sub nsw i32 %379, %390
  %405 = load i32, i32* %4, align 4
  %406 = sub i32 %405, 50
  %407 = mul i32 %406, 50
  %408 = shl i32 %405, 50
  %409 = shl i32 %405, 50
  %410 = sub i32 %405, 50
  %411 = mul i32 %410, 50
  %412 = mul nsw i32 %405, 50
  %413 = sub i32 0, %404
  %414 = add i32 %413, %412
  %415 = sub i32 0, %404
  %416 = add i32 %415, %412
  %417 = sub i32 %404, %412
  %418 = mul i32 %417, %412
  %419 = shl i32 %404, %412
  %420 = sub i32 0, %404
  %421 = add i32 %420, %412
  %422 = sub i32 %404, %412
  %423 = mul i32 %422, %412
  %424 = sub i32 %404, %412
  %425 = mul i32 %424, %412
  %426 = sub i32 0, %404
  %427 = add i32 %426, %412
  %428 = sub nsw i32 %404, %412
  %429 = sub i32 %428, 20
  %430 = mul i32 %429, 20
  %431 = sub i32 0, %428
  %432 = add i32 %431, 20
  %433 = sub i32 %428, 20
  %434 = mul i32 %433, 20
  %435 = sub i32 0, %428
  %436 = add i32 %435, 20
  %437 = sub i32 0, %428
  %438 = add i32 %437, 20
  %439 = srem i32 %428, 20
  %440 = sub i32 0, %378
  %441 = add i32 %440, %439
  %442 = sub i32 %378, %439
  %443 = mul i32 %442, %439
  %444 = sub i32 0, %378
  %445 = add i32 %444, %439
  %446 = sub nsw i32 %378, %439
  %447 = sub i32 0, %446
  %448 = add i32 %447, 20
  %449 = shl i32 %446, 20
  %450 = sub i32 %446, 20
  %451 = mul i32 %450, 20
  %452 = sub i32 %446, 20
  %453 = mul i32 %452, 20
  %454 = sub i32 %446, 20
  %455 = mul i32 %454, 20
  %456 = sub i32 0, %446
  %457 = add i32 %456, 20
  %458 = sub i32 0, %446
  %459 = add i32 %458, 20
  %460 = sub i32 %446, 20
  %461 = mul i32 %460, 20
  %462 = sdiv i32 %446, 20
  store i32 %462, i32* %5, align 4
  %463 = load i32, i32* %2, align 4
  %464 = load i32, i32* %3, align 4
  %465 = sub i32 0, %464
  %466 = add i32 %465, 100
  %467 = shl i32 %464, 100
  %468 = mul nsw i32 %464, 100
  %469 = shl i32 %463, %468
  %470 = shl i32 %463, %468
  %471 = shl i32 %463, %468
  %472 = sub nsw i32 %463, %468
  %473 = load i32, i32* %4, align 4
  %474 = shl i32 %473, 50
  %475 = sub i32 0, %473
  %476 = add i32 %475, 50
  %477 = mul nsw i32 %473, 50
  %478 = sub i32 0, %472
  %479 = add i32 %478, %477
  %480 = sub i32 %472, %477
  %481 = mul i32 %480, %477
  %482 = sub i32 %472, %477
  %483 = mul i32 %482, %477
  %484 = sub i32 %472, %477
  %485 = mul i32 %484, %477
  %486 = sub i32 0, %472
  %487 = add i32 %486, %477
  %488 = sub nsw i32 %472, %477
  %489 = load i32, i32* %5, align 4
  %490 = shl i32 %489, 20
  %491 = sub i32 %489, 20
  %492 = mul i32 %491, 20
  %493 = sub i32 0, %489
  %494 = add i32 %493, 20
  %495 = sub i32 0, %489
  %496 = add i32 %495, 20
  %497 = mul nsw i32 %489, 20
  %498 = sub i32 0, %488
  %499 = add i32 %498, %497
  %500 = shl i32 %488, %497
  %501 = sub nsw i32 %488, %497
  %502 = load i32, i32* %2, align 4
  %503 = load i32, i32* %3, align 4
  %504 = sub i32 %503, 100
  %505 = mul i32 %504, 100
  %506 = sub i32 %503, 100
  %507 = mul i32 %506, 100
  %508 = sub i32 %503, 100
  %509 = mul i32 %508, 100
  %510 = mul nsw i32 %503, 100
  %511 = shl i32 %502, %510
  %512 = shl i32 %502, %510
  %513 = shl i32 %502, %510
  %514 = sub nsw i32 %502, %510
  %515 = load i32, i32* %4, align 4
  %516 = shl i32 %515, 50
  %517 = shl i32 %515, 50
  %518 = mul nsw i32 %515, 50
  %519 = sub i32 %514, %518
  %520 = mul i32 %519, %518
  %521 = sub nsw i32 %514, %518
  %522 = load i32, i32* %5, align 4
  %523 = shl i32 %522, 20
  %524 = sub i32 %522, 20
  %525 = mul i32 %524, 20
  %526 = shl i32 %522, 20
  %527 = sub i32 0, %522
  %528 = add i32 %527, 20
  %529 = shl i32 %522, 20
  %530 = mul nsw i32 %522, 20
  %531 = shl i32 %521, %530
  %532 = sub nsw i32 %521, %530
  %533 = sub i32 %532, 10
  %534 = mul i32 %533, 10
  %535 = sub i32 %532, 10
  %536 = mul i32 %535, 10
  %537 = sub i32 0, %532
  %538 = add i32 %537, 10
  %539 = shl i32 %532, 10
  %540 = srem i32 %532, 10
  %541 = shl i32 %501, %540
  %542 = sub i32 0, %501
  %543 = add i32 %542, %540
  %544 = sub nsw i32 %501, %540
  %545 = sub i32 %544, 10
  %546 = mul i32 %545, 10
  %547 = sub i32 %544, 10
  %548 = mul i32 %547, 10
  %549 = shl i32 %544, 10
  %550 = sub i32 %544, 10
  %551 = mul i32 %550, 10
  %552 = sub i32 0, %544
  %553 = add i32 %552, 10
  %554 = shl i32 %544, 10
  %555 = sub i32 %544, 10
  %556 = mul i32 %555, 10
  %557 = sub i32 0, %544
  %558 = add i32 %557, 10
  %559 = sub i32 %544, 10
  %560 = mul i32 %559, 10
  %561 = sdiv i32 %544, 10
  store i32 %561, i32* %6, align 4
  br label %43

; <label>:562:                                    ; preds = %111, %102
  %563 = load i32, i32* %2, align 4
  %564 = load i32, i32* %3, align 4
  %565 = shl i32 %564, 100
  %566 = sub i32 %564, 100
  %567 = mul i32 %566, 100
  %568 = shl i32 %564, 100
  %569 = shl i32 %564, 100
  %570 = mul nsw i32 %564, 100
  %571 = shl i32 %563, %570
  %572 = sub nsw i32 %563, %570
  %573 = load i32, i32* %4, align 4
  %574 = sub i32 %573, 50
  %575 = mul i32 %574, 50
  %576 = sub i32 %573, 50
  %577 = mul i32 %576, 50
  %578 = sub i32 0, %573
  %579 = add i32 %578, 50
  %580 = sub i32 %573, 50
  %581 = mul i32 %580, 50
  %582 = shl i32 %573, 50
  %583 = sub i32 0, %573
  %584 = add i32 %583, 50
  %585 = sub i32 %573, 50
  %586 = mul i32 %585, 50
  %587 = mul nsw i32 %573, 50
  %588 = shl i32 %572, %587
  %589 = sub i32 %572, %587
  %590 = mul i32 %589, %587
  %591 = sub i32 0, %572
  %592 = add i32 %591, %587
  %593 = sub i32 0, %572
  %594 = add i32 %593, %587
  %595 = sub i32 %572, %587
  %596 = mul i32 %595, %587
  %597 = sub i32 0, %572
  %598 = add i32 %597, %587
  %599 = sub nsw i32 %572, %587
  %600 = icmp sge i32 %599, 10
  br label %111

; <label>:601:                                    ; preds = %156, %147
  %602 = load i32, i32* %2, align 4
  %603 = load i32, i32* %3, align 4
  %604 = sub i32 %603, 100
  %605 = mul i32 %604, 100
  %606 = shl i32 %603, 100
  %607 = sub i32 0, %603
  %608 = add i32 %607, 100
  %609 = sub i32 %603, 100
  %610 = mul i32 %609, 100
  %611 = mul nsw i32 %603, 100
  %612 = shl i32 %602, %611
  %613 = shl i32 %602, %611
  %614 = sub i32 %602, %611
  %615 = mul i32 %614, %611
  %616 = sub i32 0, %602
  %617 = add i32 %616, %611
  %618 = sub i32 %602, %611
  %619 = mul i32 %618, %611
  %620 = sub nsw i32 %602, %611
  %621 = load i32, i32* %4, align 4
  %622 = sub i32 0, %621
  %623 = add i32 %622, 50
  %624 = sub i32 0, %621
  %625 = add i32 %624, 50
  %626 = sub i32 0, %621
  %627 = add i32 %626, 50
  %628 = sub i32 0, %621
  %629 = add i32 %628, 50
  %630 = mul nsw i32 %621, 50
  %631 = sub i32 0, %620
  %632 = add i32 %631, %630
  %633 = shl i32 %620, %630
  %634 = sub i32 0, %620
  %635 = add i32 %634, %630
  %636 = shl i32 %620, %630
  %637 = sub nsw i32 %620, %630
  %638 = icmp slt i32 %637, 10
  br label %156

; <label>:639:                                    ; preds = %183, %174
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  br label %183

; <label>:640:                                    ; preds = %219, %210
  %641 = load i32, i32* %2, align 4
  %642 = load i32, i32* %3, align 4
  %643 = sub i32 %642, 100
  %644 = mul i32 %643, 100
  %645 = sub i32 0, %642
  %646 = add i32 %645, 100
  %647 = sub i32 0, %642
  %648 = add i32 %647, 100
  %649 = sub i32 %642, 100
  %650 = mul i32 %649, 100
  %651 = mul nsw i32 %642, 100
  %652 = sub i32 %641, %651
  %653 = mul i32 %652, %651
  %654 = shl i32 %641, %651
  %655 = sub i32 0, %641
  %656 = add i32 %655, %651
  %657 = sub nsw i32 %641, %651
  %658 = load i32, i32* %4, align 4
  %659 = sub i32 %658, 50
  %660 = mul i32 %659, 50
  %661 = sub i32 %658, 50
  %662 = mul i32 %661, 50
  %663 = sub i32 0, %658
  %664 = add i32 %663, 50
  %665 = shl i32 %658, 50
  %666 = sub i32 0, %658
  %667 = add i32 %666, 50
  %668 = mul nsw i32 %658, 50
  %669 = shl i32 %657, %668
  %670 = sub i32 0, %657
  %671 = add i32 %670, %668
  %672 = sub i32 %657, %668
  %673 = mul i32 %672, %668
  %674 = sub nsw i32 %657, %668
  %675 = load i32, i32* %5, align 4
  %676 = sub i32 %675, 20
  %677 = mul i32 %676, 20
  %678 = shl i32 %675, 20
  %679 = shl i32 %675, 20
  %680 = shl i32 %675, 20
  %681 = sub i32 0, %675
  %682 = add i32 %681, 20
  %683 = shl i32 %675, 20
  %684 = shl i32 %675, 20
  %685 = mul nsw i32 %675, 20
  %686 = shl i32 %674, %685
  %687 = sub i32 %674, %685
  %688 = mul i32 %687, %685
  %689 = shl i32 %674, %685
  %690 = shl i32 %674, %685
  %691 = sub i32 0, %674
  %692 = add i32 %691, %685
  %693 = shl i32 %674, %685
  %694 = sub nsw i32 %674, %685
  %695 = load i32, i32* %6, align 4
  %696 = sub i32 %695, 10
  %697 = mul i32 %696, 10
  %698 = shl i32 %695, 10
  %699 = sub i32 0, %695
  %700 = add i32 %699, 10
  %701 = sub i32 0, %695
  %702 = add i32 %701, 10
  %703 = sub i32 %695, 10
  %704 = mul i32 %703, 10
  %705 = mul nsw i32 %695, 10
  %706 = sub i32 0, %694
  %707 = add i32 %706, %705
  %708 = shl i32 %694, %705
  %709 = shl i32 %694, %705
  %710 = sub i32 %694, %705
  %711 = mul i32 %710, %705
  %712 = sub i32 %694, %705
  %713 = mul i32 %712, %705
  %714 = sub nsw i32 %694, %705
  %715 = load i32, i32* %2, align 4
  %716 = load i32, i32* %3, align 4
  %717 = shl i32 %716, 100
  %718 = sub i32 0, %716
  %719 = add i32 %718, 100
  %720 = sub i32 %716, 100
  %721 = mul i32 %720, 100
  %722 = shl i32 %716, 100
  %723 = sub i32 0, %716
  %724 = add i32 %723, 100
  %725 = sub i32 0, %716
  %726 = add i32 %725, 100
  %727 = shl i32 %716, 100
  %728 = sub i32 0, %716
  %729 = add i32 %728, 100
  %730 = mul nsw i32 %716, 100
  %731 = shl i32 %715, %730
  %732 = sub nsw i32 %715, %730
  %733 = load i32, i32* %4, align 4
  %734 = shl i32 %733, 50
  %735 = sub i32 %733, 50
  %736 = mul i32 %735, 50
  %737 = sub i32 0, %733
  %738 = add i32 %737, 50
  %739 = sub i32 %733, 50
  %740 = mul i32 %739, 50
  %741 = shl i32 %733, 50
  %742 = shl i32 %733, 50
  %743 = mul nsw i32 %733, 50
  %744 = shl i32 %732, %743
  %745 = shl i32 %732, %743
  %746 = shl i32 %732, %743
  %747 = sub nsw i32 %732, %743
  %748 = load i32, i32* %5, align 4
  %749 = sub i32 %748, 20
  %750 = mul i32 %749, 20
  %751 = sub i32 0, %748
  %752 = add i32 %751, 20
  %753 = sub i32 %748, 20
  %754 = mul i32 %753, 20
  %755 = mul nsw i32 %748, 20
  %756 = shl i32 %747, %755
  %757 = shl i32 %747, %755
  %758 = shl i32 %747, %755
  %759 = sub i32 %747, %755
  %760 = mul i32 %759, %755
  %761 = sub i32 %747, %755
  %762 = mul i32 %761, %755
  %763 = shl i32 %747, %755
  %764 = sub nsw i32 %747, %755
  %765 = load i32, i32* %6, align 4
  %766 = sub i32 %765, 10
  %767 = mul i32 %766, 10
  %768 = mul nsw i32 %765, 10
  %769 = sub i32 0, %764
  %770 = add i32 %769, %768
  %771 = sub i32 %764, %768
  %772 = mul i32 %771, %768
  %773 = shl i32 %764, %768
  %774 = shl i32 %764, %768
  %775 = sub nsw i32 %764, %768
  %776 = sub i32 %775, 5
  %777 = mul i32 %776, 5
  %778 = srem i32 %775, 5
  %779 = shl i32 %714, %778
  %780 = sub i32 %714, %778
  %781 = mul i32 %780, %778
  %782 = sub i32 0, %714
  %783 = add i32 %782, %778
  %784 = sub i32 %714, %778
  %785 = mul i32 %784, %778
  %786 = sub i32 %714, %778
  %787 = mul i32 %786, %778
  %788 = sub i32 0, %714
  %789 = add i32 %788, %778
  %790 = sub i32 0, %714
  %791 = add i32 %790, %778
  %792 = sub nsw i32 %714, %778
  %793 = sub i32 %792, 5
  %794 = mul i32 %793, 5
  %795 = shl i32 %792, 5
  %796 = sub i32 0, %792
  %797 = add i32 %796, 5
  %798 = sub i32 0, %792
  %799 = add i32 %798, 5
  %800 = sub i32 %792, 5
  %801 = mul i32 %800, 5
  %802 = sdiv i32 %792, 5
  store i32 %802, i32* %7, align 4
  %803 = load i32, i32* %2, align 4
  %804 = load i32, i32* %3, align 4
  %805 = sub i32 0, %804
  %806 = add i32 %805, 100
  %807 = sub i32 %804, 100
  %808 = mul i32 %807, 100
  %809 = shl i32 %804, 100
  %810 = shl i32 %804, 100
  %811 = shl i32 %804, 100
  %812 = shl i32 %804, 100
  %813 = sub i32 %804, 100
  %814 = mul i32 %813, 100
  %815 = sub i32 0, %804
  %816 = add i32 %815, 100
  %817 = mul nsw i32 %804, 100
  %818 = sub i32 0, %803
  %819 = add i32 %818, %817
  %820 = sub i32 %803, %817
  %821 = mul i32 %820, %817
  %822 = shl i32 %803, %817
  %823 = sub i32 0, %803
  %824 = add i32 %823, %817
  %825 = sub i32 0, %803
  %826 = add i32 %825, %817
  %827 = shl i32 %803, %817
  %828 = sub i32 0, %803
  %829 = add i32 %828, %817
  %830 = shl i32 %803, %817
  %831 = sub i32 0, %803
  %832 = add i32 %831, %817
  %833 = sub nsw i32 %803, %817
  %834 = load i32, i32* %4, align 4
  %835 = shl i32 %834, 50
  %836 = sub i32 0, %834
  %837 = add i32 %836, 50
  %838 = mul nsw i32 %834, 50
  %839 = shl i32 %833, %838
  %840 = sub i32 %833, %838
  %841 = mul i32 %840, %838
  %842 = shl i32 %833, %838
  %843 = sub nsw i32 %833, %838
  %844 = load i32, i32* %5, align 4
  %845 = sub i32 %844, 20
  %846 = mul i32 %845, 20
  %847 = sub i32 %844, 20
  %848 = mul i32 %847, 20
  %849 = mul nsw i32 %844, 20
  %850 = shl i32 %843, %849
  %851 = shl i32 %843, %849
  %852 = shl i32 %843, %849
  %853 = sub i32 0, %843
  %854 = add i32 %853, %849
  %855 = sub i32 %843, %849
  %856 = mul i32 %855, %849
  %857 = sub i32 0, %843
  %858 = add i32 %857, %849
  %859 = sub i32 %843, %849
  %860 = mul i32 %859, %849
  %861 = sub i32 0, %843
  %862 = add i32 %861, %849
  %863 = sub nsw i32 %843, %849
  %864 = load i32, i32* %6, align 4
  %865 = shl i32 %864, 10
  %866 = mul nsw i32 %864, 10
  %867 = sub i32 %863, %866
  %868 = mul i32 %867, %866
  %869 = sub i32 %863, %866
  %870 = mul i32 %869, %866
  %871 = sub i32 %863, %866
  %872 = mul i32 %871, %866
  %873 = sub nsw i32 %863, %866
  %874 = load i32, i32* %7, align 4
  %875 = sub i32 %874, 5
  %876 = mul i32 %875, 5
  %877 = shl i32 %874, 5
  %878 = sub i32 0, %874
  %879 = add i32 %878, 5
  %880 = sub i32 %874, 5
  %881 = mul i32 %880, 5
  %882 = sub i32 0, %874
  %883 = add i32 %882, 5
  %884 = sub i32 0, %874
  %885 = add i32 %884, 5
  %886 = sub i32 %874, 5
  %887 = mul i32 %886, 5
  %888 = shl i32 %874, 5
  %889 = mul nsw i32 %874, 5
  %890 = sub i32 0, %873
  %891 = add i32 %890, %889
  %892 = shl i32 %873, %889
  %893 = sub nsw i32 %873, %889
  store i32 %893, i32* %8, align 4
  br label %219

; <label>:894:                                    ; preds = %298, %289
  store i32 0, i32* %7, align 4
  %895 = load i32, i32* %2, align 4
  %896 = load i32, i32* %3, align 4
  %897 = sub i32 %896, 100
  %898 = mul i32 %897, 100
  %899 = shl i32 %896, 100
  %900 = mul nsw i32 %896, 100
  %901 = shl i32 %895, %900
  %902 = sub i32 0, %895
  %903 = add i32 %902, %900
  %904 = shl i32 %895, %900
  %905 = sub i32 %895, %900
  %906 = mul i32 %905, %900
  %907 = sub i32 %895, %900
  %908 = mul i32 %907, %900
  %909 = shl i32 %895, %900
  %910 = sub nsw i32 %895, %900
  %911 = load i32, i32* %4, align 4
  %912 = sub i32 0, %911
  %913 = add i32 %912, 50
  %914 = sub i32 %911, 50
  %915 = mul i32 %914, 50
  %916 = mul nsw i32 %911, 50
  %917 = sub i32 0, %910
  %918 = add i32 %917, %916
  %919 = shl i32 %910, %916
  %920 = sub i32 %910, %916
  %921 = mul i32 %920, %916
  %922 = sub i32 0, %910
  %923 = add i32 %922, %916
  %924 = sub i32 0, %910
  %925 = add i32 %924, %916
  %926 = sub nsw i32 %910, %916
  %927 = load i32, i32* %5, align 4
  %928 = shl i32 %927, 20
  %929 = sub i32 %927, 20
  %930 = mul i32 %929, 20
  %931 = mul nsw i32 %927, 20
  %932 = shl i32 %926, %931
  %933 = sub i32 0, %926
  %934 = add i32 %933, %931
  %935 = sub i32 0, %926
  %936 = add i32 %935, %931
  %937 = sub i32 0, %926
  %938 = add i32 %937, %931
  %939 = sub i32 %926, %931
  %940 = mul i32 %939, %931
  %941 = sub i32 %926, %931
  %942 = mul i32 %941, %931
  %943 = sub nsw i32 %926, %931
  %944 = load i32, i32* %6, align 4
  %945 = shl i32 %944, 10
  %946 = sub i32 0, %944
  %947 = add i32 %946, 10
  %948 = mul nsw i32 %944, 10
  %949 = shl i32 %943, %948
  %950 = shl i32 %943, %948
  %951 = sub i32 %943, %948
  %952 = mul i32 %951, %948
  %953 = sub i32 0, %943
  %954 = add i32 %953, %948
  %955 = sub i32 0, %943
  %956 = add i32 %955, %948
  %957 = sub nsw i32 %943, %948
  %958 = load i32, i32* %7, align 4
  %959 = sub i32 0, %958
  %960 = add i32 %959, 5
  %961 = sub i32 0, %958
  %962 = add i32 %961, 5
  %963 = sub i32 0, %958
  %964 = add i32 %963, 5
  %965 = sub i32 0, %958
  %966 = add i32 %965, 5
  %967 = sub i32 %958, 5
  %968 = mul i32 %967, 5
  %969 = mul nsw i32 %958, 5
  %970 = sub i32 0, %957
  %971 = add i32 %970, %969
  %972 = shl i32 %957, %969
  %973 = sub i32 0, %957
  %974 = add i32 %973, %969
  %975 = sub nsw i32 %957, %969
  store i32 %975, i32* %8, align 4
  store i32 %975, i32* %8, align 4
  br label %298
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
