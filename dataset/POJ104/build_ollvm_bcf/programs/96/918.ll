; ModuleID = 'source-C-CXX/96/918.c'
source_filename = "source-C-CXX/96/918.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"%d\0A%d\0A%d\0A%d\0A%d\0A%d\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %155

; <label>:9:                                      ; preds = %0, %155
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %11)
  %19 = load i32, i32* %11, align 4
  %20 = load i32, i32* %11, align 4
  %21 = srem i32 %20, 100
  %22 = sub nsw i32 %19, %21
  %23 = sdiv i32 %22, 100
  store i32 %23, i32* %12, align 4
  %24 = load i32, i32* %11, align 4
  %25 = load i32, i32* %12, align 4
  %26 = mul nsw i32 %25, 100
  %27 = sub nsw i32 %24, %26
  %28 = load i32, i32* %11, align 4
  %29 = load i32, i32* %12, align 4
  %30 = mul nsw i32 %29, 100
  %31 = sub nsw i32 %28, %30
  %32 = srem i32 %31, 50
  %33 = sub nsw i32 %27, %32
  %34 = sdiv i32 %33, 50
  store i32 %34, i32* %13, align 4
  %35 = load i32, i32* %11, align 4
  %36 = load i32, i32* %12, align 4
  %37 = mul nsw i32 %36, 100
  %38 = sub nsw i32 %35, %37
  %39 = load i32, i32* %13, align 4
  %40 = mul nsw i32 %39, 50
  %41 = sub nsw i32 %38, %40
  %42 = load i32, i32* %11, align 4
  %43 = load i32, i32* %12, align 4
  %44 = mul nsw i32 %43, 100
  %45 = sub nsw i32 %42, %44
  %46 = load i32, i32* %13, align 4
  %47 = mul nsw i32 %46, 50
  %48 = sub nsw i32 %45, %47
  %49 = srem i32 %48, 20
  %50 = sub nsw i32 %41, %49
  %51 = sdiv i32 %50, 20
  store i32 %51, i32* %14, align 4
  %52 = load i32, i32* %11, align 4
  %53 = load i32, i32* %12, align 4
  %54 = mul nsw i32 %53, 100
  %55 = sub nsw i32 %52, %54
  %56 = load i32, i32* %13, align 4
  %57 = mul nsw i32 %56, 50
  %58 = sub nsw i32 %55, %57
  %59 = load i32, i32* %14, align 4
  %60 = mul nsw i32 %59, 20
  %61 = sub nsw i32 %58, %60
  %62 = load i32, i32* %11, align 4
  %63 = load i32, i32* %12, align 4
  %64 = mul nsw i32 %63, 100
  %65 = sub nsw i32 %62, %64
  %66 = load i32, i32* %13, align 4
  %67 = mul nsw i32 %66, 50
  %68 = sub nsw i32 %65, %67
  %69 = load i32, i32* %14, align 4
  %70 = mul nsw i32 %69, 20
  %71 = sub nsw i32 %68, %70
  %72 = srem i32 %71, 10
  %73 = sub nsw i32 %61, %72
  %74 = sdiv i32 %73, 10
  store i32 %74, i32* %15, align 4
  %75 = load i32, i32* %11, align 4
  %76 = load i32, i32* %12, align 4
  %77 = mul nsw i32 %76, 100
  %78 = sub nsw i32 %75, %77
  %79 = load i32, i32* %13, align 4
  %80 = mul nsw i32 %79, 50
  %81 = sub nsw i32 %78, %80
  %82 = load i32, i32* %14, align 4
  %83 = mul nsw i32 %82, 20
  %84 = sub nsw i32 %81, %83
  %85 = load i32, i32* %15, align 4
  %86 = mul nsw i32 %85, 10
  %87 = sub nsw i32 %84, %86
  %88 = load i32, i32* %11, align 4
  %89 = load i32, i32* %12, align 4
  %90 = mul nsw i32 %89, 100
  %91 = sub nsw i32 %88, %90
  %92 = load i32, i32* %13, align 4
  %93 = mul nsw i32 %92, 50
  %94 = sub nsw i32 %91, %93
  %95 = load i32, i32* %14, align 4
  %96 = mul nsw i32 %95, 20
  %97 = sub nsw i32 %94, %96
  %98 = load i32, i32* %15, align 4
  %99 = mul nsw i32 %98, 10
  %100 = sub nsw i32 %97, %99
  %101 = srem i32 %100, 5
  %102 = sub nsw i32 %87, %101
  %103 = sdiv i32 %102, 5
  store i32 %103, i32* %16, align 4
  %104 = load i32, i32* %11, align 4
  %105 = load i32, i32* %12, align 4
  %106 = mul nsw i32 %105, 100
  %107 = sub nsw i32 %104, %106
  %108 = load i32, i32* %13, align 4
  %109 = mul nsw i32 %108, 50
  %110 = sub nsw i32 %107, %109
  %111 = load i32, i32* %14, align 4
  %112 = mul nsw i32 %111, 20
  %113 = sub nsw i32 %110, %112
  %114 = load i32, i32* %15, align 4
  %115 = mul nsw i32 %114, 10
  %116 = sub nsw i32 %113, %115
  %117 = load i32, i32* %16, align 4
  %118 = mul nsw i32 %117, 5
  %119 = sub nsw i32 %116, %118
  %120 = load i32, i32* %11, align 4
  %121 = load i32, i32* %12, align 4
  %122 = mul nsw i32 %121, 100
  %123 = sub nsw i32 %120, %122
  %124 = load i32, i32* %13, align 4
  %125 = mul nsw i32 %124, 50
  %126 = sub nsw i32 %123, %125
  %127 = load i32, i32* %14, align 4
  %128 = mul nsw i32 %127, 20
  %129 = sub nsw i32 %126, %128
  %130 = load i32, i32* %15, align 4
  %131 = mul nsw i32 %130, 10
  %132 = sub nsw i32 %129, %131
  %133 = load i32, i32* %16, align 4
  %134 = mul nsw i32 %133, 5
  %135 = sub nsw i32 %132, %134
  %136 = srem i32 %135, 1
  %137 = sub nsw i32 %119, %136
  %138 = sdiv i32 %137, 1
  store i32 %138, i32* %17, align 4
  %139 = load i32, i32* %12, align 4
  %140 = load i32, i32* %13, align 4
  %141 = load i32, i32* %14, align 4
  %142 = load i32, i32* %15, align 4
  %143 = load i32, i32* %16, align 4
  %144 = load i32, i32* %17, align 4
  %145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %139, i32 %140, i32 %141, i32 %142, i32 %143, i32 %144)
  %146 = load i32, i32* @x
  %147 = load i32, i32* @y
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %154, label %155

; <label>:154:                                    ; preds = %9
  ret i32 0

; <label>:155:                                    ; preds = %9, %0
  %156 = alloca i32, align 4
  %157 = alloca i32, align 4
  %158 = alloca i32, align 4
  %159 = alloca i32, align 4
  %160 = alloca i32, align 4
  %161 = alloca i32, align 4
  %162 = alloca i32, align 4
  %163 = alloca i32, align 4
  store i32 0, i32* %156, align 4
  %164 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %157)
  %165 = load i32, i32* %157, align 4
  %166 = load i32, i32* %157, align 4
  %167 = sub i32 0, %166
  %168 = add i32 %167, 100
  %169 = shl i32 %166, 100
  %170 = srem i32 %166, 100
  %171 = shl i32 %165, %170
  %172 = sub i32 %165, %170
  %173 = mul i32 %172, %170
  %174 = sub nsw i32 %165, %170
  %175 = sub i32 0, %174
  %176 = add i32 %175, 100
  %177 = shl i32 %174, 100
  %178 = shl i32 %174, 100
  %179 = sdiv i32 %174, 100
  store i32 %179, i32* %158, align 4
  %180 = load i32, i32* %157, align 4
  %181 = load i32, i32* %158, align 4
  %182 = shl i32 %181, 100
  %183 = shl i32 %181, 100
  %184 = shl i32 %181, 100
  %185 = mul nsw i32 %181, 100
  %186 = sub i32 %180, %185
  %187 = mul i32 %186, %185
  %188 = sub i32 %180, %185
  %189 = mul i32 %188, %185
  %190 = sub i32 0, %180
  %191 = add i32 %190, %185
  %192 = sub nsw i32 %180, %185
  %193 = load i32, i32* %157, align 4
  %194 = load i32, i32* %158, align 4
  %195 = sub i32 %194, 100
  %196 = mul i32 %195, 100
  %197 = shl i32 %194, 100
  %198 = sub i32 0, %194
  %199 = add i32 %198, 100
  %200 = sub i32 0, %194
  %201 = add i32 %200, 100
  %202 = shl i32 %194, 100
  %203 = mul nsw i32 %194, 100
  %204 = sub i32 %193, %203
  %205 = mul i32 %204, %203
  %206 = sub i32 0, %193
  %207 = add i32 %206, %203
  %208 = sub i32 0, %193
  %209 = add i32 %208, %203
  %210 = shl i32 %193, %203
  %211 = sub i32 %193, %203
  %212 = mul i32 %211, %203
  %213 = sub i32 0, %193
  %214 = add i32 %213, %203
  %215 = sub i32 0, %193
  %216 = add i32 %215, %203
  %217 = shl i32 %193, %203
  %218 = sub nsw i32 %193, %203
  %219 = sub i32 %218, 50
  %220 = mul i32 %219, 50
  %221 = sub i32 %218, 50
  %222 = mul i32 %221, 50
  %223 = sub i32 0, %218
  %224 = add i32 %223, 50
  %225 = sub i32 %218, 50
  %226 = mul i32 %225, 50
  %227 = sub i32 %218, 50
  %228 = mul i32 %227, 50
  %229 = sub i32 %218, 50
  %230 = mul i32 %229, 50
  %231 = sub i32 %218, 50
  %232 = mul i32 %231, 50
  %233 = sub i32 0, %218
  %234 = add i32 %233, 50
  %235 = sub i32 %218, 50
  %236 = mul i32 %235, 50
  %237 = srem i32 %218, 50
  %238 = shl i32 %192, %237
  %239 = sub i32 0, %192
  %240 = add i32 %239, %237
  %241 = sub i32 %192, %237
  %242 = mul i32 %241, %237
  %243 = sub i32 0, %192
  %244 = add i32 %243, %237
  %245 = sub nsw i32 %192, %237
  %246 = sub i32 %245, 50
  %247 = mul i32 %246, 50
  %248 = sub i32 %245, 50
  %249 = mul i32 %248, 50
  %250 = sub i32 0, %245
  %251 = add i32 %250, 50
  %252 = sub i32 0, %245
  %253 = add i32 %252, 50
  %254 = sub i32 0, %245
  %255 = add i32 %254, 50
  %256 = sdiv i32 %245, 50
  store i32 %256, i32* %159, align 4
  %257 = load i32, i32* %157, align 4
  %258 = load i32, i32* %158, align 4
  %259 = sub i32 0, %258
  %260 = add i32 %259, 100
  %261 = sub i32 %258, 100
  %262 = mul i32 %261, 100
  %263 = sub i32 %258, 100
  %264 = mul i32 %263, 100
  %265 = sub i32 0, %258
  %266 = add i32 %265, 100
  %267 = sub i32 0, %258
  %268 = add i32 %267, 100
  %269 = sub i32 %258, 100
  %270 = mul i32 %269, 100
  %271 = mul nsw i32 %258, 100
  %272 = sub i32 0, %257
  %273 = add i32 %272, %271
  %274 = sub i32 0, %257
  %275 = add i32 %274, %271
  %276 = shl i32 %257, %271
  %277 = sub i32 %257, %271
  %278 = mul i32 %277, %271
  %279 = shl i32 %257, %271
  %280 = sub i32 0, %257
  %281 = add i32 %280, %271
  %282 = sub nsw i32 %257, %271
  %283 = load i32, i32* %159, align 4
  %284 = shl i32 %283, 50
  %285 = shl i32 %283, 50
  %286 = mul nsw i32 %283, 50
  %287 = sub i32 %282, %286
  %288 = mul i32 %287, %286
  %289 = shl i32 %282, %286
  %290 = sub nsw i32 %282, %286
  %291 = load i32, i32* %157, align 4
  %292 = load i32, i32* %158, align 4
  %293 = sub i32 %292, 100
  %294 = mul i32 %293, 100
  %295 = sub i32 %292, 100
  %296 = mul i32 %295, 100
  %297 = sub i32 %292, 100
  %298 = mul i32 %297, 100
  %299 = sub i32 %292, 100
  %300 = mul i32 %299, 100
  %301 = shl i32 %292, 100
  %302 = sub i32 %292, 100
  %303 = mul i32 %302, 100
  %304 = mul nsw i32 %292, 100
  %305 = shl i32 %291, %304
  %306 = shl i32 %291, %304
  %307 = sub i32 %291, %304
  %308 = mul i32 %307, %304
  %309 = sub nsw i32 %291, %304
  %310 = load i32, i32* %159, align 4
  %311 = shl i32 %310, 50
  %312 = mul nsw i32 %310, 50
  %313 = shl i32 %309, %312
  %314 = sub i32 0, %309
  %315 = add i32 %314, %312
  %316 = sub i32 %309, %312
  %317 = mul i32 %316, %312
  %318 = sub i32 %309, %312
  %319 = mul i32 %318, %312
  %320 = sub i32 %309, %312
  %321 = mul i32 %320, %312
  %322 = shl i32 %309, %312
  %323 = sub i32 0, %309
  %324 = add i32 %323, %312
  %325 = sub nsw i32 %309, %312
  %326 = shl i32 %325, 20
  %327 = sub i32 0, %325
  %328 = add i32 %327, 20
  %329 = sub i32 %325, 20
  %330 = mul i32 %329, 20
  %331 = sub i32 0, %325
  %332 = add i32 %331, 20
  %333 = sub i32 %325, 20
  %334 = mul i32 %333, 20
  %335 = srem i32 %325, 20
  %336 = sub i32 %290, %335
  %337 = mul i32 %336, %335
  %338 = shl i32 %290, %335
  %339 = shl i32 %290, %335
  %340 = sub nsw i32 %290, %335
  %341 = shl i32 %340, 20
  %342 = sub i32 0, %340
  %343 = add i32 %342, 20
  %344 = sub i32 %340, 20
  %345 = mul i32 %344, 20
  %346 = sub i32 %340, 20
  %347 = mul i32 %346, 20
  %348 = sub i32 0, %340
  %349 = add i32 %348, 20
  %350 = shl i32 %340, 20
  %351 = shl i32 %340, 20
  %352 = sdiv i32 %340, 20
  store i32 %352, i32* %160, align 4
  %353 = load i32, i32* %157, align 4
  %354 = load i32, i32* %158, align 4
  %355 = sub i32 %354, 100
  %356 = mul i32 %355, 100
  %357 = mul nsw i32 %354, 100
  %358 = shl i32 %353, %357
  %359 = sub i32 %353, %357
  %360 = mul i32 %359, %357
  %361 = sub i32 0, %353
  %362 = add i32 %361, %357
  %363 = sub nsw i32 %353, %357
  %364 = load i32, i32* %159, align 4
  %365 = sub i32 0, %364
  %366 = add i32 %365, 50
  %367 = shl i32 %364, 50
  %368 = shl i32 %364, 50
  %369 = mul nsw i32 %364, 50
  %370 = sub i32 0, %363
  %371 = add i32 %370, %369
  %372 = sub i32 %363, %369
  %373 = mul i32 %372, %369
  %374 = sub i32 %363, %369
  %375 = mul i32 %374, %369
  %376 = shl i32 %363, %369
  %377 = sub i32 %363, %369
  %378 = mul i32 %377, %369
  %379 = shl i32 %363, %369
  %380 = sub i32 0, %363
  %381 = add i32 %380, %369
  %382 = sub i32 %363, %369
  %383 = mul i32 %382, %369
  %384 = sub nsw i32 %363, %369
  %385 = load i32, i32* %160, align 4
  %386 = shl i32 %385, 20
  %387 = sub i32 0, %385
  %388 = add i32 %387, 20
  %389 = sub i32 %385, 20
  %390 = mul i32 %389, 20
  %391 = sub i32 %385, 20
  %392 = mul i32 %391, 20
  %393 = mul nsw i32 %385, 20
  %394 = sub i32 %384, %393
  %395 = mul i32 %394, %393
  %396 = sub i32 0, %384
  %397 = add i32 %396, %393
  %398 = sub i32 0, %384
  %399 = add i32 %398, %393
  %400 = sub i32 %384, %393
  %401 = mul i32 %400, %393
  %402 = sub i32 0, %384
  %403 = add i32 %402, %393
  %404 = sub nsw i32 %384, %393
  %405 = load i32, i32* %157, align 4
  %406 = load i32, i32* %158, align 4
  %407 = shl i32 %406, 100
  %408 = shl i32 %406, 100
  %409 = sub i32 0, %406
  %410 = add i32 %409, 100
  %411 = shl i32 %406, 100
  %412 = shl i32 %406, 100
  %413 = mul nsw i32 %406, 100
  %414 = shl i32 %405, %413
  %415 = sub nsw i32 %405, %413
  %416 = load i32, i32* %159, align 4
  %417 = shl i32 %416, 50
  %418 = shl i32 %416, 50
  %419 = mul nsw i32 %416, 50
  %420 = sub i32 0, %415
  %421 = add i32 %420, %419
  %422 = sub i32 0, %415
  %423 = add i32 %422, %419
  %424 = sub nsw i32 %415, %419
  %425 = load i32, i32* %160, align 4
  %426 = shl i32 %425, 20
  %427 = sub i32 %425, 20
  %428 = mul i32 %427, 20
  %429 = sub i32 %425, 20
  %430 = mul i32 %429, 20
  %431 = shl i32 %425, 20
  %432 = shl i32 %425, 20
  %433 = shl i32 %425, 20
  %434 = shl i32 %425, 20
  %435 = sub i32 0, %425
  %436 = add i32 %435, 20
  %437 = mul nsw i32 %425, 20
  %438 = sub i32 0, %424
  %439 = add i32 %438, %437
  %440 = sub i32 0, %424
  %441 = add i32 %440, %437
  %442 = sub nsw i32 %424, %437
  %443 = sub i32 0, %442
  %444 = add i32 %443, 10
  %445 = sub i32 %442, 10
  %446 = mul i32 %445, 10
  %447 = sub i32 %442, 10
  %448 = mul i32 %447, 10
  %449 = sub i32 0, %442
  %450 = add i32 %449, 10
  %451 = shl i32 %442, 10
  %452 = srem i32 %442, 10
  %453 = sub i32 0, %404
  %454 = add i32 %453, %452
  %455 = sub i32 %404, %452
  %456 = mul i32 %455, %452
  %457 = sub i32 0, %404
  %458 = add i32 %457, %452
  %459 = sub i32 %404, %452
  %460 = mul i32 %459, %452
  %461 = sub i32 %404, %452
  %462 = mul i32 %461, %452
  %463 = sub i32 %404, %452
  %464 = mul i32 %463, %452
  %465 = shl i32 %404, %452
  %466 = sub nsw i32 %404, %452
  %467 = sub i32 0, %466
  %468 = add i32 %467, 10
  %469 = sub i32 0, %466
  %470 = add i32 %469, 10
  %471 = shl i32 %466, 10
  %472 = sub i32 0, %466
  %473 = add i32 %472, 10
  %474 = sub i32 %466, 10
  %475 = mul i32 %474, 10
  %476 = shl i32 %466, 10
  %477 = sdiv i32 %466, 10
  store i32 %477, i32* %161, align 4
  %478 = load i32, i32* %157, align 4
  %479 = load i32, i32* %158, align 4
  %480 = sub i32 %479, 100
  %481 = mul i32 %480, 100
  %482 = sub i32 0, %479
  %483 = add i32 %482, 100
  %484 = sub i32 %479, 100
  %485 = mul i32 %484, 100
  %486 = sub i32 %479, 100
  %487 = mul i32 %486, 100
  %488 = sub i32 0, %479
  %489 = add i32 %488, 100
  %490 = mul nsw i32 %479, 100
  %491 = sub i32 0, %478
  %492 = add i32 %491, %490
  %493 = sub nsw i32 %478, %490
  %494 = load i32, i32* %159, align 4
  %495 = sub i32 %494, 50
  %496 = mul i32 %495, 50
  %497 = shl i32 %494, 50
  %498 = sub i32 %494, 50
  %499 = mul i32 %498, 50
  %500 = sub i32 %494, 50
  %501 = mul i32 %500, 50
  %502 = sub i32 %494, 50
  %503 = mul i32 %502, 50
  %504 = mul nsw i32 %494, 50
  %505 = shl i32 %493, %504
  %506 = sub nsw i32 %493, %504
  %507 = load i32, i32* %160, align 4
  %508 = sub i32 %507, 20
  %509 = mul i32 %508, 20
  %510 = sub i32 0, %507
  %511 = add i32 %510, 20
  %512 = shl i32 %507, 20
  %513 = sub i32 %507, 20
  %514 = mul i32 %513, 20
  %515 = mul nsw i32 %507, 20
  %516 = sub i32 0, %506
  %517 = add i32 %516, %515
  %518 = sub i32 %506, %515
  %519 = mul i32 %518, %515
  %520 = sub i32 0, %506
  %521 = add i32 %520, %515
  %522 = sub i32 %506, %515
  %523 = mul i32 %522, %515
  %524 = shl i32 %506, %515
  %525 = shl i32 %506, %515
  %526 = sub i32 0, %506
  %527 = add i32 %526, %515
  %528 = sub i32 %506, %515
  %529 = mul i32 %528, %515
  %530 = sub i32 %506, %515
  %531 = mul i32 %530, %515
  %532 = sub nsw i32 %506, %515
  %533 = load i32, i32* %161, align 4
  %534 = shl i32 %533, 10
  %535 = shl i32 %533, 10
  %536 = shl i32 %533, 10
  %537 = sub i32 %533, 10
  %538 = mul i32 %537, 10
  %539 = sub i32 %533, 10
  %540 = mul i32 %539, 10
  %541 = sub i32 0, %533
  %542 = add i32 %541, 10
  %543 = mul nsw i32 %533, 10
  %544 = sub i32 %532, %543
  %545 = mul i32 %544, %543
  %546 = sub i32 0, %532
  %547 = add i32 %546, %543
  %548 = shl i32 %532, %543
  %549 = sub i32 0, %532
  %550 = add i32 %549, %543
  %551 = sub nsw i32 %532, %543
  %552 = load i32, i32* %157, align 4
  %553 = load i32, i32* %158, align 4
  %554 = mul nsw i32 %553, 100
  %555 = sub i32 0, %552
  %556 = add i32 %555, %554
  %557 = shl i32 %552, %554
  %558 = shl i32 %552, %554
  %559 = shl i32 %552, %554
  %560 = shl i32 %552, %554
  %561 = sub nsw i32 %552, %554
  %562 = load i32, i32* %159, align 4
  %563 = sub i32 %562, 50
  %564 = mul i32 %563, 50
  %565 = shl i32 %562, 50
  %566 = shl i32 %562, 50
  %567 = shl i32 %562, 50
  %568 = sub i32 0, %562
  %569 = add i32 %568, 50
  %570 = shl i32 %562, 50
  %571 = sub i32 %562, 50
  %572 = mul i32 %571, 50
  %573 = sub i32 0, %562
  %574 = add i32 %573, 50
  %575 = shl i32 %562, 50
  %576 = mul nsw i32 %562, 50
  %577 = sub i32 0, %561
  %578 = add i32 %577, %576
  %579 = shl i32 %561, %576
  %580 = shl i32 %561, %576
  %581 = sub i32 0, %561
  %582 = add i32 %581, %576
  %583 = sub nsw i32 %561, %576
  %584 = load i32, i32* %160, align 4
  %585 = sub i32 %584, 20
  %586 = mul i32 %585, 20
  %587 = sub i32 0, %584
  %588 = add i32 %587, 20
  %589 = shl i32 %584, 20
  %590 = mul nsw i32 %584, 20
  %591 = sub i32 0, %583
  %592 = add i32 %591, %590
  %593 = sub i32 %583, %590
  %594 = mul i32 %593, %590
  %595 = sub i32 %583, %590
  %596 = mul i32 %595, %590
  %597 = shl i32 %583, %590
  %598 = sub nsw i32 %583, %590
  %599 = load i32, i32* %161, align 4
  %600 = shl i32 %599, 10
  %601 = sub i32 %599, 10
  %602 = mul i32 %601, 10
  %603 = shl i32 %599, 10
  %604 = mul nsw i32 %599, 10
  %605 = shl i32 %598, %604
  %606 = sub i32 %598, %604
  %607 = mul i32 %606, %604
  %608 = sub i32 %598, %604
  %609 = mul i32 %608, %604
  %610 = sub i32 %598, %604
  %611 = mul i32 %610, %604
  %612 = sub i32 %598, %604
  %613 = mul i32 %612, %604
  %614 = sub nsw i32 %598, %604
  %615 = shl i32 %614, 5
  %616 = sub i32 %614, 5
  %617 = mul i32 %616, 5
  %618 = sub i32 0, %614
  %619 = add i32 %618, 5
  %620 = shl i32 %614, 5
  %621 = srem i32 %614, 5
  %622 = shl i32 %551, %621
  %623 = sub i32 0, %551
  %624 = add i32 %623, %621
  %625 = shl i32 %551, %621
  %626 = sub i32 %551, %621
  %627 = mul i32 %626, %621
  %628 = sub i32 0, %551
  %629 = add i32 %628, %621
  %630 = sub i32 %551, %621
  %631 = mul i32 %630, %621
  %632 = sub nsw i32 %551, %621
  %633 = sub i32 %632, 5
  %634 = mul i32 %633, 5
  %635 = sdiv i32 %632, 5
  store i32 %635, i32* %162, align 4
  %636 = load i32, i32* %157, align 4
  %637 = load i32, i32* %158, align 4
  %638 = sub i32 0, %637
  %639 = add i32 %638, 100
  %640 = sub i32 %637, 100
  %641 = mul i32 %640, 100
  %642 = sub i32 %637, 100
  %643 = mul i32 %642, 100
  %644 = shl i32 %637, 100
  %645 = mul nsw i32 %637, 100
  %646 = sub i32 %636, %645
  %647 = mul i32 %646, %645
  %648 = sub i32 %636, %645
  %649 = mul i32 %648, %645
  %650 = sub i32 0, %636
  %651 = add i32 %650, %645
  %652 = sub i32 %636, %645
  %653 = mul i32 %652, %645
  %654 = sub nsw i32 %636, %645
  %655 = load i32, i32* %159, align 4
  %656 = sub i32 %655, 50
  %657 = mul i32 %656, 50
  %658 = sub i32 0, %655
  %659 = add i32 %658, 50
  %660 = shl i32 %655, 50
  %661 = sub i32 0, %655
  %662 = add i32 %661, 50
  %663 = sub i32 0, %655
  %664 = add i32 %663, 50
  %665 = shl i32 %655, 50
  %666 = sub i32 0, %655
  %667 = add i32 %666, 50
  %668 = mul nsw i32 %655, 50
  %669 = shl i32 %654, %668
  %670 = shl i32 %654, %668
  %671 = sub i32 %654, %668
  %672 = mul i32 %671, %668
  %673 = sub i32 %654, %668
  %674 = mul i32 %673, %668
  %675 = sub nsw i32 %654, %668
  %676 = load i32, i32* %160, align 4
  %677 = shl i32 %676, 20
  %678 = sub i32 0, %676
  %679 = add i32 %678, 20
  %680 = sub i32 %676, 20
  %681 = mul i32 %680, 20
  %682 = mul nsw i32 %676, 20
  %683 = sub i32 0, %675
  %684 = add i32 %683, %682
  %685 = sub i32 0, %675
  %686 = add i32 %685, %682
  %687 = sub i32 0, %675
  %688 = add i32 %687, %682
  %689 = shl i32 %675, %682
  %690 = sub i32 %675, %682
  %691 = mul i32 %690, %682
  %692 = sub nsw i32 %675, %682
  %693 = load i32, i32* %161, align 4
  %694 = shl i32 %693, 10
  %695 = sub i32 0, %693
  %696 = add i32 %695, 10
  %697 = mul nsw i32 %693, 10
  %698 = sub i32 %692, %697
  %699 = mul i32 %698, %697
  %700 = sub i32 %692, %697
  %701 = mul i32 %700, %697
  %702 = sub nsw i32 %692, %697
  %703 = load i32, i32* %162, align 4
  %704 = shl i32 %703, 5
  %705 = shl i32 %703, 5
  %706 = sub i32 0, %703
  %707 = add i32 %706, 5
  %708 = sub i32 0, %703
  %709 = add i32 %708, 5
  %710 = shl i32 %703, 5
  %711 = mul nsw i32 %703, 5
  %712 = sub i32 %702, %711
  %713 = mul i32 %712, %711
  %714 = sub i32 %702, %711
  %715 = mul i32 %714, %711
  %716 = sub i32 %702, %711
  %717 = mul i32 %716, %711
  %718 = sub i32 0, %702
  %719 = add i32 %718, %711
  %720 = shl i32 %702, %711
  %721 = sub nsw i32 %702, %711
  %722 = load i32, i32* %157, align 4
  %723 = load i32, i32* %158, align 4
  %724 = sub i32 %723, 100
  %725 = mul i32 %724, 100
  %726 = shl i32 %723, 100
  %727 = sub i32 0, %723
  %728 = add i32 %727, 100
  %729 = sub i32 %723, 100
  %730 = mul i32 %729, 100
  %731 = mul nsw i32 %723, 100
  %732 = sub i32 %722, %731
  %733 = mul i32 %732, %731
  %734 = sub i32 0, %722
  %735 = add i32 %734, %731
  %736 = sub i32 %722, %731
  %737 = mul i32 %736, %731
  %738 = sub i32 %722, %731
  %739 = mul i32 %738, %731
  %740 = sub i32 0, %722
  %741 = add i32 %740, %731
  %742 = sub i32 0, %722
  %743 = add i32 %742, %731
  %744 = sub nsw i32 %722, %731
  %745 = load i32, i32* %159, align 4
  %746 = sub i32 0, %745
  %747 = add i32 %746, 50
  %748 = mul nsw i32 %745, 50
  %749 = sub i32 %744, %748
  %750 = mul i32 %749, %748
  %751 = sub i32 0, %744
  %752 = add i32 %751, %748
  %753 = shl i32 %744, %748
  %754 = sub i32 0, %744
  %755 = add i32 %754, %748
  %756 = sub i32 %744, %748
  %757 = mul i32 %756, %748
  %758 = sub i32 0, %744
  %759 = add i32 %758, %748
  %760 = sub i32 %744, %748
  %761 = mul i32 %760, %748
  %762 = sub i32 0, %744
  %763 = add i32 %762, %748
  %764 = sub nsw i32 %744, %748
  %765 = load i32, i32* %160, align 4
  %766 = mul nsw i32 %765, 20
  %767 = shl i32 %764, %766
  %768 = sub nsw i32 %764, %766
  %769 = load i32, i32* %161, align 4
  %770 = shl i32 %769, 10
  %771 = sub i32 %769, 10
  %772 = mul i32 %771, 10
  %773 = shl i32 %769, 10
  %774 = shl i32 %769, 10
  %775 = sub i32 0, %769
  %776 = add i32 %775, 10
  %777 = mul nsw i32 %769, 10
  %778 = sub i32 0, %768
  %779 = add i32 %778, %777
  %780 = sub nsw i32 %768, %777
  %781 = load i32, i32* %162, align 4
  %782 = sub i32 0, %781
  %783 = add i32 %782, 5
  %784 = shl i32 %781, 5
  %785 = sub i32 0, %781
  %786 = add i32 %785, 5
  %787 = shl i32 %781, 5
  %788 = shl i32 %781, 5
  %789 = sub i32 0, %781
  %790 = add i32 %789, 5
  %791 = mul nsw i32 %781, 5
  %792 = sub i32 0, %780
  %793 = add i32 %792, %791
  %794 = sub i32 0, %780
  %795 = add i32 %794, %791
  %796 = sub nsw i32 %780, %791
  %797 = shl i32 %796, 1
  %798 = sub i32 %796, 1
  %799 = mul i32 %798, 1
  %800 = shl i32 %796, 1
  %801 = shl i32 %796, 1
  %802 = sub i32 %796, 1
  %803 = mul i32 %802, 1
  %804 = sub i32 %796, 1
  %805 = mul i32 %804, 1
  %806 = shl i32 %796, 1
  %807 = srem i32 %796, 1
  %808 = sub i32 0, %721
  %809 = add i32 %808, %807
  %810 = sub nsw i32 %721, %807
  %811 = shl i32 %810, 1
  %812 = sdiv i32 %810, 1
  store i32 %812, i32* %163, align 4
  %813 = load i32, i32* %158, align 4
  %814 = load i32, i32* %159, align 4
  %815 = load i32, i32* %160, align 4
  %816 = load i32, i32* %161, align 4
  %817 = load i32, i32* %162, align 4
  %818 = load i32, i32* %163, align 4
  %819 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %813, i32 %814, i32 %815, i32 %816, i32 %817, i32 %818)
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
