; ModuleID = 'source-C-CXX/96/1790.c'
source_filename = "source-C-CXX/96/1790.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"%d/n\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"%d\0A%d\0A%d\0A%d\0A%d\0A%d\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %87

; <label>:9:                                      ; preds = %0, %87
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32* %11)
  %19 = load i32, i32* %11, align 4
  %20 = sdiv i32 %19, 100
  store i32 %20, i32* %12, align 4
  %21 = load i32, i32* %11, align 4
  %22 = srem i32 %21, 100
  %23 = sdiv i32 %22, 50
  store i32 %23, i32* %13, align 4
  %24 = load i32, i32* %11, align 4
  %25 = load i32, i32* %12, align 4
  %26 = mul nsw i32 100, %25
  %27 = sub nsw i32 %24, %26
  %28 = load i32, i32* %13, align 4
  %29 = mul nsw i32 50, %28
  %30 = sub nsw i32 %27, %29
  %31 = sdiv i32 %30, 20
  store i32 %31, i32* %14, align 4
  %32 = load i32, i32* %11, align 4
  %33 = load i32, i32* %12, align 4
  %34 = mul nsw i32 100, %33
  %35 = sub nsw i32 %32, %34
  %36 = load i32, i32* %13, align 4
  %37 = mul nsw i32 50, %36
  %38 = sub nsw i32 %35, %37
  %39 = load i32, i32* %14, align 4
  %40 = mul nsw i32 20, %39
  %41 = sub nsw i32 %38, %40
  %42 = sdiv i32 %41, 10
  store i32 %42, i32* %15, align 4
  %43 = load i32, i32* %11, align 4
  %44 = load i32, i32* %12, align 4
  %45 = mul nsw i32 100, %44
  %46 = sub nsw i32 %43, %45
  %47 = load i32, i32* %13, align 4
  %48 = mul nsw i32 50, %47
  %49 = sub nsw i32 %46, %48
  %50 = load i32, i32* %14, align 4
  %51 = mul nsw i32 20, %50
  %52 = sub nsw i32 %49, %51
  %53 = load i32, i32* %15, align 4
  %54 = mul nsw i32 10, %53
  %55 = sub nsw i32 %52, %54
  %56 = sdiv i32 %55, 5
  store i32 %56, i32* %16, align 4
  %57 = load i32, i32* %11, align 4
  %58 = load i32, i32* %12, align 4
  %59 = mul nsw i32 100, %58
  %60 = sub nsw i32 %57, %59
  %61 = load i32, i32* %13, align 4
  %62 = mul nsw i32 50, %61
  %63 = sub nsw i32 %60, %62
  %64 = load i32, i32* %14, align 4
  %65 = mul nsw i32 20, %64
  %66 = sub nsw i32 %63, %65
  %67 = load i32, i32* %15, align 4
  %68 = mul nsw i32 10, %67
  %69 = sub nsw i32 %66, %68
  %70 = srem i32 %69, 5
  store i32 %70, i32* %17, align 4
  %71 = load i32, i32* %12, align 4
  %72 = load i32, i32* %13, align 4
  %73 = load i32, i32* %14, align 4
  %74 = load i32, i32* %15, align 4
  %75 = load i32, i32* %16, align 4
  %76 = load i32, i32* %17, align 4
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %71, i32 %72, i32 %73, i32 %74, i32 %75, i32 %76)
  %78 = load i32, i32* @x
  %79 = load i32, i32* @y
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %86, label %87

; <label>:86:                                     ; preds = %9
  ret i32 0

; <label>:87:                                     ; preds = %9, %0
  %88 = alloca i32, align 4
  %89 = alloca i32, align 4
  %90 = alloca i32, align 4
  %91 = alloca i32, align 4
  %92 = alloca i32, align 4
  %93 = alloca i32, align 4
  %94 = alloca i32, align 4
  %95 = alloca i32, align 4
  store i32 0, i32* %88, align 4
  %96 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32* %89)
  %97 = load i32, i32* %89, align 4
  %98 = sub i32 0, %97
  %99 = add i32 %98, 100
  %100 = shl i32 %97, 100
  %101 = sub i32 %97, 100
  %102 = mul i32 %101, 100
  %103 = sub i32 0, %97
  %104 = add i32 %103, 100
  %105 = sdiv i32 %97, 100
  store i32 %105, i32* %90, align 4
  %106 = load i32, i32* %89, align 4
  %107 = sub i32 %106, 100
  %108 = mul i32 %107, 100
  %109 = shl i32 %106, 100
  %110 = sub i32 %106, 100
  %111 = mul i32 %110, 100
  %112 = srem i32 %106, 100
  %113 = sub i32 0, %112
  %114 = add i32 %113, 50
  %115 = sub i32 0, %112
  %116 = add i32 %115, 50
  %117 = sub i32 0, %112
  %118 = add i32 %117, 50
  %119 = sdiv i32 %112, 50
  store i32 %119, i32* %91, align 4
  %120 = load i32, i32* %89, align 4
  %121 = load i32, i32* %90, align 4
  %122 = sub i32 100, %121
  %123 = mul i32 %122, %121
  %124 = sub i32 0, 100
  %125 = add i32 %124, %121
  %126 = sub i32 0, 100
  %127 = add i32 %126, %121
  %128 = sub i32 100, %121
  %129 = mul i32 %128, %121
  %130 = mul nsw i32 100, %121
  %131 = sub i32 %120, %130
  %132 = mul i32 %131, %130
  %133 = sub i32 0, %120
  %134 = add i32 %133, %130
  %135 = sub nsw i32 %120, %130
  %136 = load i32, i32* %91, align 4
  %137 = sub i32 50, %136
  %138 = mul i32 %137, %136
  %139 = sub i32 50, %136
  %140 = mul i32 %139, %136
  %141 = shl i32 50, %136
  %142 = shl i32 50, %136
  %143 = sub i32 50, %136
  %144 = mul i32 %143, %136
  %145 = shl i32 50, %136
  %146 = mul nsw i32 50, %136
  %147 = shl i32 %135, %146
  %148 = shl i32 %135, %146
  %149 = shl i32 %135, %146
  %150 = shl i32 %135, %146
  %151 = shl i32 %135, %146
  %152 = sub i32 %135, %146
  %153 = mul i32 %152, %146
  %154 = sub i32 0, %135
  %155 = add i32 %154, %146
  %156 = sub nsw i32 %135, %146
  %157 = sub i32 0, %156
  %158 = add i32 %157, 20
  %159 = shl i32 %156, 20
  %160 = sub i32 %156, 20
  %161 = mul i32 %160, 20
  %162 = shl i32 %156, 20
  %163 = sub i32 0, %156
  %164 = add i32 %163, 20
  %165 = sub i32 %156, 20
  %166 = mul i32 %165, 20
  %167 = shl i32 %156, 20
  %168 = sdiv i32 %156, 20
  store i32 %168, i32* %92, align 4
  %169 = load i32, i32* %89, align 4
  %170 = load i32, i32* %90, align 4
  %171 = shl i32 100, %170
  %172 = sub i32 100, %170
  %173 = mul i32 %172, %170
  %174 = sub i32 0, 100
  %175 = add i32 %174, %170
  %176 = shl i32 100, %170
  %177 = mul nsw i32 100, %170
  %178 = shl i32 %169, %177
  %179 = shl i32 %169, %177
  %180 = sub i32 0, %169
  %181 = add i32 %180, %177
  %182 = sub i32 %169, %177
  %183 = mul i32 %182, %177
  %184 = sub nsw i32 %169, %177
  %185 = load i32, i32* %91, align 4
  %186 = sub i32 0, 50
  %187 = add i32 %186, %185
  %188 = sub i32 50, %185
  %189 = mul i32 %188, %185
  %190 = shl i32 50, %185
  %191 = shl i32 50, %185
  %192 = mul nsw i32 50, %185
  %193 = sub i32 %184, %192
  %194 = mul i32 %193, %192
  %195 = sub i32 %184, %192
  %196 = mul i32 %195, %192
  %197 = sub i32 %184, %192
  %198 = mul i32 %197, %192
  %199 = shl i32 %184, %192
  %200 = sub i32 0, %184
  %201 = add i32 %200, %192
  %202 = shl i32 %184, %192
  %203 = sub nsw i32 %184, %192
  %204 = load i32, i32* %92, align 4
  %205 = sub i32 0, 20
  %206 = add i32 %205, %204
  %207 = shl i32 20, %204
  %208 = mul nsw i32 20, %204
  %209 = sub i32 %203, %208
  %210 = mul i32 %209, %208
  %211 = sub nsw i32 %203, %208
  %212 = shl i32 %211, 10
  %213 = shl i32 %211, 10
  %214 = sdiv i32 %211, 10
  store i32 %214, i32* %93, align 4
  %215 = load i32, i32* %89, align 4
  %216 = load i32, i32* %90, align 4
  %217 = sub i32 0, 100
  %218 = add i32 %217, %216
  %219 = shl i32 100, %216
  %220 = sub i32 0, 100
  %221 = add i32 %220, %216
  %222 = sub i32 100, %216
  %223 = mul i32 %222, %216
  %224 = sub i32 0, 100
  %225 = add i32 %224, %216
  %226 = sub i32 0, 100
  %227 = add i32 %226, %216
  %228 = shl i32 100, %216
  %229 = sub i32 100, %216
  %230 = mul i32 %229, %216
  %231 = mul nsw i32 100, %216
  %232 = shl i32 %215, %231
  %233 = sub i32 0, %215
  %234 = add i32 %233, %231
  %235 = sub i32 0, %215
  %236 = add i32 %235, %231
  %237 = shl i32 %215, %231
  %238 = sub i32 %215, %231
  %239 = mul i32 %238, %231
  %240 = sub i32 %215, %231
  %241 = mul i32 %240, %231
  %242 = sub i32 0, %215
  %243 = add i32 %242, %231
  %244 = sub nsw i32 %215, %231
  %245 = load i32, i32* %91, align 4
  %246 = sub i32 50, %245
  %247 = mul i32 %246, %245
  %248 = mul nsw i32 50, %245
  %249 = sub i32 0, %244
  %250 = add i32 %249, %248
  %251 = sub nsw i32 %244, %248
  %252 = load i32, i32* %92, align 4
  %253 = sub i32 0, 20
  %254 = add i32 %253, %252
  %255 = shl i32 20, %252
  %256 = shl i32 20, %252
  %257 = shl i32 20, %252
  %258 = sub i32 20, %252
  %259 = mul i32 %258, %252
  %260 = shl i32 20, %252
  %261 = mul nsw i32 20, %252
  %262 = sub i32 %251, %261
  %263 = mul i32 %262, %261
  %264 = sub i32 0, %251
  %265 = add i32 %264, %261
  %266 = sub nsw i32 %251, %261
  %267 = load i32, i32* %93, align 4
  %268 = sub i32 0, 10
  %269 = add i32 %268, %267
  %270 = sub i32 0, 10
  %271 = add i32 %270, %267
  %272 = sub i32 0, 10
  %273 = add i32 %272, %267
  %274 = mul nsw i32 10, %267
  %275 = sub i32 %266, %274
  %276 = mul i32 %275, %274
  %277 = sub nsw i32 %266, %274
  %278 = sub i32 %277, 5
  %279 = mul i32 %278, 5
  %280 = sub i32 0, %277
  %281 = add i32 %280, 5
  %282 = sub i32 %277, 5
  %283 = mul i32 %282, 5
  %284 = sub i32 %277, 5
  %285 = mul i32 %284, 5
  %286 = sdiv i32 %277, 5
  store i32 %286, i32* %94, align 4
  %287 = load i32, i32* %89, align 4
  %288 = load i32, i32* %90, align 4
  %289 = mul nsw i32 100, %288
  %290 = sub i32 0, %287
  %291 = add i32 %290, %289
  %292 = shl i32 %287, %289
  %293 = sub i32 0, %287
  %294 = add i32 %293, %289
  %295 = sub i32 0, %287
  %296 = add i32 %295, %289
  %297 = sub i32 %287, %289
  %298 = mul i32 %297, %289
  %299 = sub i32 %287, %289
  %300 = mul i32 %299, %289
  %301 = sub nsw i32 %287, %289
  %302 = load i32, i32* %91, align 4
  %303 = sub i32 0, 50
  %304 = add i32 %303, %302
  %305 = shl i32 50, %302
  %306 = sub i32 50, %302
  %307 = mul i32 %306, %302
  %308 = sub i32 50, %302
  %309 = mul i32 %308, %302
  %310 = shl i32 50, %302
  %311 = mul nsw i32 50, %302
  %312 = sub i32 %301, %311
  %313 = mul i32 %312, %311
  %314 = sub i32 0, %301
  %315 = add i32 %314, %311
  %316 = shl i32 %301, %311
  %317 = shl i32 %301, %311
  %318 = sub i32 0, %301
  %319 = add i32 %318, %311
  %320 = shl i32 %301, %311
  %321 = sub i32 0, %301
  %322 = add i32 %321, %311
  %323 = sub i32 0, %301
  %324 = add i32 %323, %311
  %325 = sub nsw i32 %301, %311
  %326 = load i32, i32* %92, align 4
  %327 = shl i32 20, %326
  %328 = shl i32 20, %326
  %329 = sub i32 0, 20
  %330 = add i32 %329, %326
  %331 = mul nsw i32 20, %326
  %332 = sub i32 0, %325
  %333 = add i32 %332, %331
  %334 = shl i32 %325, %331
  %335 = sub i32 0, %325
  %336 = add i32 %335, %331
  %337 = sub nsw i32 %325, %331
  %338 = load i32, i32* %93, align 4
  %339 = sub i32 10, %338
  %340 = mul i32 %339, %338
  %341 = sub i32 10, %338
  %342 = mul i32 %341, %338
  %343 = sub i32 0, 10
  %344 = add i32 %343, %338
  %345 = mul nsw i32 10, %338
  %346 = shl i32 %337, %345
  %347 = sub i32 0, %337
  %348 = add i32 %347, %345
  %349 = sub i32 %337, %345
  %350 = mul i32 %349, %345
  %351 = sub i32 %337, %345
  %352 = mul i32 %351, %345
  %353 = sub i32 %337, %345
  %354 = mul i32 %353, %345
  %355 = sub nsw i32 %337, %345
  %356 = sub i32 %355, 5
  %357 = mul i32 %356, 5
  %358 = srem i32 %355, 5
  store i32 %358, i32* %95, align 4
  %359 = load i32, i32* %90, align 4
  %360 = load i32, i32* %91, align 4
  %361 = load i32, i32* %92, align 4
  %362 = load i32, i32* %93, align 4
  %363 = load i32, i32* %94, align 4
  %364 = load i32, i32* %95, align 4
  %365 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %359, i32 %360, i32 %361, i32 %362, i32 %363, i32 %364)
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
