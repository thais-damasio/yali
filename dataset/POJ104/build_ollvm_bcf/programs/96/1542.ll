; ModuleID = 'source-C-CXX/96/1542.c'
source_filename = "source-C-CXX/96/1542.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"%d\0A%d\0A%d\0A%d\0A%d\0A%d\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %100

; <label>:9:                                      ; preds = %0, %100
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %10, align 4
  %18 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %11)
  %19 = load i32, i32* %11, align 4
  %20 = load i32, i32* %11, align 4
  %21 = srem i32 %20, 100
  %22 = sub nsw i32 %19, %21
  %23 = sdiv i32 %22, 100
  store i32 %23, i32* %12, align 4
  %24 = load i32, i32* %11, align 4
  %25 = srem i32 %24, 100
  %26 = load i32, i32* %11, align 4
  %27 = srem i32 %26, 100
  %28 = srem i32 %27, 50
  %29 = sub nsw i32 %25, %28
  %30 = sdiv i32 %29, 50
  store i32 %30, i32* %13, align 4
  %31 = load i32, i32* %11, align 4
  %32 = srem i32 %31, 50
  %33 = load i32, i32* %11, align 4
  %34 = srem i32 %33, 50
  %35 = srem i32 %34, 20
  %36 = sub nsw i32 %32, %35
  %37 = sdiv i32 %36, 20
  store i32 %37, i32* %14, align 4
  %38 = load i32, i32* %11, align 4
  %39 = load i32, i32* %12, align 4
  %40 = mul nsw i32 100, %39
  %41 = sub nsw i32 %38, %40
  %42 = load i32, i32* %13, align 4
  %43 = mul nsw i32 50, %42
  %44 = sub nsw i32 %41, %43
  %45 = load i32, i32* %14, align 4
  %46 = mul nsw i32 20, %45
  %47 = sub nsw i32 %44, %46
  %48 = load i32, i32* %11, align 4
  %49 = load i32, i32* %12, align 4
  %50 = mul nsw i32 100, %49
  %51 = sub nsw i32 %48, %50
  %52 = load i32, i32* %13, align 4
  %53 = mul nsw i32 50, %52
  %54 = sub nsw i32 %51, %53
  %55 = load i32, i32* %14, align 4
  %56 = mul nsw i32 20, %55
  %57 = sub nsw i32 %54, %56
  %58 = srem i32 %57, 10
  %59 = sub nsw i32 %47, %58
  %60 = sdiv i32 %59, 10
  store i32 %60, i32* %15, align 4
  %61 = load i32, i32* %11, align 4
  %62 = srem i32 %61, 10
  %63 = load i32, i32* %11, align 4
  %64 = srem i32 %63, 10
  %65 = srem i32 %64, 5
  %66 = sub nsw i32 %62, %65
  %67 = sdiv i32 %66, 5
  store i32 %67, i32* %16, align 4
  %68 = load i32, i32* %11, align 4
  %69 = load i32, i32* %12, align 4
  %70 = mul nsw i32 100, %69
  %71 = sub nsw i32 %68, %70
  %72 = load i32, i32* %13, align 4
  %73 = mul nsw i32 50, %72
  %74 = sub nsw i32 %71, %73
  %75 = load i32, i32* %14, align 4
  %76 = mul nsw i32 20, %75
  %77 = sub nsw i32 %74, %76
  %78 = load i32, i32* %15, align 4
  %79 = mul nsw i32 10, %78
  %80 = sub nsw i32 %77, %79
  %81 = load i32, i32* %16, align 4
  %82 = mul nsw i32 5, %81
  %83 = sub nsw i32 %80, %82
  store i32 %83, i32* %17, align 4
  %84 = load i32, i32* %12, align 4
  %85 = load i32, i32* %13, align 4
  %86 = load i32, i32* %14, align 4
  %87 = load i32, i32* %15, align 4
  %88 = load i32, i32* %16, align 4
  %89 = load i32, i32* %17, align 4
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %84, i32 %85, i32 %86, i32 %87, i32 %88, i32 %89)
  %91 = load i32, i32* @x
  %92 = load i32, i32* @y
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %99, label %100

; <label>:99:                                     ; preds = %9
  ret i32 0

; <label>:100:                                    ; preds = %9, %0
  %101 = alloca i32, align 4
  %102 = alloca i32, align 4
  %103 = alloca i32, align 4
  %104 = alloca i32, align 4
  %105 = alloca i32, align 4
  %106 = alloca i32, align 4
  %107 = alloca i32, align 4
  %108 = alloca i32, align 4
  store i32 0, i32* %101, align 4
  %109 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %102)
  %110 = load i32, i32* %102, align 4
  %111 = load i32, i32* %102, align 4
  %112 = sub i32 %111, 100
  %113 = mul i32 %112, 100
  %114 = shl i32 %111, 100
  %115 = shl i32 %111, 100
  %116 = sub i32 0, %111
  %117 = add i32 %116, 100
  %118 = shl i32 %111, 100
  %119 = sub i32 %111, 100
  %120 = mul i32 %119, 100
  %121 = sub i32 %111, 100
  %122 = mul i32 %121, 100
  %123 = sub i32 %111, 100
  %124 = mul i32 %123, 100
  %125 = sub i32 %111, 100
  %126 = mul i32 %125, 100
  %127 = srem i32 %111, 100
  %128 = sub i32 %110, %127
  %129 = mul i32 %128, %127
  %130 = sub i32 0, %110
  %131 = add i32 %130, %127
  %132 = sub nsw i32 %110, %127
  %133 = shl i32 %132, 100
  %134 = sub i32 0, %132
  %135 = add i32 %134, 100
  %136 = shl i32 %132, 100
  %137 = sub i32 0, %132
  %138 = add i32 %137, 100
  %139 = shl i32 %132, 100
  %140 = shl i32 %132, 100
  %141 = shl i32 %132, 100
  %142 = sdiv i32 %132, 100
  store i32 %142, i32* %103, align 4
  %143 = load i32, i32* %102, align 4
  %144 = shl i32 %143, 100
  %145 = srem i32 %143, 100
  %146 = load i32, i32* %102, align 4
  %147 = sub i32 0, %146
  %148 = add i32 %147, 100
  %149 = shl i32 %146, 100
  %150 = sub i32 %146, 100
  %151 = mul i32 %150, 100
  %152 = sub i32 0, %146
  %153 = add i32 %152, 100
  %154 = sub i32 %146, 100
  %155 = mul i32 %154, 100
  %156 = sub i32 0, %146
  %157 = add i32 %156, 100
  %158 = srem i32 %146, 100
  %159 = sub i32 %158, 50
  %160 = mul i32 %159, 50
  %161 = shl i32 %158, 50
  %162 = shl i32 %158, 50
  %163 = sub i32 0, %158
  %164 = add i32 %163, 50
  %165 = sub i32 0, %158
  %166 = add i32 %165, 50
  %167 = sub i32 %158, 50
  %168 = mul i32 %167, 50
  %169 = srem i32 %158, 50
  %170 = sub i32 %145, %169
  %171 = mul i32 %170, %169
  %172 = sub i32 %145, %169
  %173 = mul i32 %172, %169
  %174 = sub i32 0, %145
  %175 = add i32 %174, %169
  %176 = sub i32 0, %145
  %177 = add i32 %176, %169
  %178 = sub i32 %145, %169
  %179 = mul i32 %178, %169
  %180 = shl i32 %145, %169
  %181 = sub nsw i32 %145, %169
  %182 = shl i32 %181, 50
  %183 = sub i32 0, %181
  %184 = add i32 %183, 50
  %185 = sub i32 0, %181
  %186 = add i32 %185, 50
  %187 = sub i32 %181, 50
  %188 = mul i32 %187, 50
  %189 = sdiv i32 %181, 50
  store i32 %189, i32* %104, align 4
  %190 = load i32, i32* %102, align 4
  %191 = shl i32 %190, 50
  %192 = sub i32 0, %190
  %193 = add i32 %192, 50
  %194 = sub i32 0, %190
  %195 = add i32 %194, 50
  %196 = sub i32 0, %190
  %197 = add i32 %196, 50
  %198 = shl i32 %190, 50
  %199 = sub i32 %190, 50
  %200 = mul i32 %199, 50
  %201 = sub i32 0, %190
  %202 = add i32 %201, 50
  %203 = srem i32 %190, 50
  %204 = load i32, i32* %102, align 4
  %205 = shl i32 %204, 50
  %206 = sub i32 0, %204
  %207 = add i32 %206, 50
  %208 = shl i32 %204, 50
  %209 = sub i32 %204, 50
  %210 = mul i32 %209, 50
  %211 = sub i32 %204, 50
  %212 = mul i32 %211, 50
  %213 = shl i32 %204, 50
  %214 = shl i32 %204, 50
  %215 = srem i32 %204, 50
  %216 = shl i32 %215, 20
  %217 = sub i32 %215, 20
  %218 = mul i32 %217, 20
  %219 = sub i32 %215, 20
  %220 = mul i32 %219, 20
  %221 = shl i32 %215, 20
  %222 = shl i32 %215, 20
  %223 = srem i32 %215, 20
  %224 = sub i32 0, %203
  %225 = add i32 %224, %223
  %226 = sub i32 0, %203
  %227 = add i32 %226, %223
  %228 = sub i32 0, %203
  %229 = add i32 %228, %223
  %230 = sub i32 %203, %223
  %231 = mul i32 %230, %223
  %232 = shl i32 %203, %223
  %233 = shl i32 %203, %223
  %234 = sub nsw i32 %203, %223
  %235 = sub i32 %234, 20
  %236 = mul i32 %235, 20
  %237 = sub i32 0, %234
  %238 = add i32 %237, 20
  %239 = sub i32 %234, 20
  %240 = mul i32 %239, 20
  %241 = sub i32 %234, 20
  %242 = mul i32 %241, 20
  %243 = sdiv i32 %234, 20
  store i32 %243, i32* %105, align 4
  %244 = load i32, i32* %102, align 4
  %245 = load i32, i32* %103, align 4
  %246 = sub i32 0, 100
  %247 = add i32 %246, %245
  %248 = shl i32 100, %245
  %249 = sub i32 100, %245
  %250 = mul i32 %249, %245
  %251 = shl i32 100, %245
  %252 = sub i32 100, %245
  %253 = mul i32 %252, %245
  %254 = sub i32 0, 100
  %255 = add i32 %254, %245
  %256 = mul nsw i32 100, %245
  %257 = shl i32 %244, %256
  %258 = sub nsw i32 %244, %256
  %259 = load i32, i32* %104, align 4
  %260 = sub i32 50, %259
  %261 = mul i32 %260, %259
  %262 = shl i32 50, %259
  %263 = sub i32 0, 50
  %264 = add i32 %263, %259
  %265 = shl i32 50, %259
  %266 = mul nsw i32 50, %259
  %267 = sub i32 0, %258
  %268 = add i32 %267, %266
  %269 = shl i32 %258, %266
  %270 = shl i32 %258, %266
  %271 = sub i32 %258, %266
  %272 = mul i32 %271, %266
  %273 = shl i32 %258, %266
  %274 = shl i32 %258, %266
  %275 = shl i32 %258, %266
  %276 = sub i32 0, %258
  %277 = add i32 %276, %266
  %278 = sub i32 %258, %266
  %279 = mul i32 %278, %266
  %280 = sub nsw i32 %258, %266
  %281 = load i32, i32* %105, align 4
  %282 = sub i32 0, 20
  %283 = add i32 %282, %281
  %284 = sub i32 20, %281
  %285 = mul i32 %284, %281
  %286 = sub i32 0, 20
  %287 = add i32 %286, %281
  %288 = sub i32 20, %281
  %289 = mul i32 %288, %281
  %290 = sub i32 20, %281
  %291 = mul i32 %290, %281
  %292 = sub i32 20, %281
  %293 = mul i32 %292, %281
  %294 = mul nsw i32 20, %281
  %295 = sub i32 0, %280
  %296 = add i32 %295, %294
  %297 = sub i32 0, %280
  %298 = add i32 %297, %294
  %299 = sub i32 %280, %294
  %300 = mul i32 %299, %294
  %301 = shl i32 %280, %294
  %302 = shl i32 %280, %294
  %303 = sub i32 %280, %294
  %304 = mul i32 %303, %294
  %305 = shl i32 %280, %294
  %306 = sub nsw i32 %280, %294
  %307 = load i32, i32* %102, align 4
  %308 = load i32, i32* %103, align 4
  %309 = sub i32 100, %308
  %310 = mul i32 %309, %308
  %311 = shl i32 100, %308
  %312 = sub i32 0, 100
  %313 = add i32 %312, %308
  %314 = sub i32 0, 100
  %315 = add i32 %314, %308
  %316 = sub i32 0, 100
  %317 = add i32 %316, %308
  %318 = sub i32 100, %308
  %319 = mul i32 %318, %308
  %320 = sub i32 0, 100
  %321 = add i32 %320, %308
  %322 = shl i32 100, %308
  %323 = sub i32 100, %308
  %324 = mul i32 %323, %308
  %325 = mul nsw i32 100, %308
  %326 = sub i32 0, %307
  %327 = add i32 %326, %325
  %328 = sub i32 %307, %325
  %329 = mul i32 %328, %325
  %330 = shl i32 %307, %325
  %331 = shl i32 %307, %325
  %332 = sub nsw i32 %307, %325
  %333 = load i32, i32* %104, align 4
  %334 = sub i32 0, 50
  %335 = add i32 %334, %333
  %336 = shl i32 50, %333
  %337 = sub i32 0, 50
  %338 = add i32 %337, %333
  %339 = shl i32 50, %333
  %340 = shl i32 50, %333
  %341 = sub i32 0, 50
  %342 = add i32 %341, %333
  %343 = sub i32 50, %333
  %344 = mul i32 %343, %333
  %345 = mul nsw i32 50, %333
  %346 = shl i32 %332, %345
  %347 = sub i32 0, %332
  %348 = add i32 %347, %345
  %349 = sub i32 0, %332
  %350 = add i32 %349, %345
  %351 = sub i32 0, %332
  %352 = add i32 %351, %345
  %353 = sub i32 %332, %345
  %354 = mul i32 %353, %345
  %355 = sub i32 %332, %345
  %356 = mul i32 %355, %345
  %357 = shl i32 %332, %345
  %358 = shl i32 %332, %345
  %359 = sub nsw i32 %332, %345
  %360 = load i32, i32* %105, align 4
  %361 = sub i32 20, %360
  %362 = mul i32 %361, %360
  %363 = sub i32 20, %360
  %364 = mul i32 %363, %360
  %365 = mul nsw i32 20, %360
  %366 = shl i32 %359, %365
  %367 = shl i32 %359, %365
  %368 = shl i32 %359, %365
  %369 = sub i32 0, %359
  %370 = add i32 %369, %365
  %371 = sub i32 0, %359
  %372 = add i32 %371, %365
  %373 = sub i32 %359, %365
  %374 = mul i32 %373, %365
  %375 = sub i32 0, %359
  %376 = add i32 %375, %365
  %377 = sub nsw i32 %359, %365
  %378 = sub i32 0, %377
  %379 = add i32 %378, 10
  %380 = sub i32 %377, 10
  %381 = mul i32 %380, 10
  %382 = sub i32 0, %377
  %383 = add i32 %382, 10
  %384 = srem i32 %377, 10
  %385 = sub i32 0, %306
  %386 = add i32 %385, %384
  %387 = shl i32 %306, %384
  %388 = sub i32 %306, %384
  %389 = mul i32 %388, %384
  %390 = sub i32 0, %306
  %391 = add i32 %390, %384
  %392 = sub i32 %306, %384
  %393 = mul i32 %392, %384
  %394 = sub nsw i32 %306, %384
  %395 = sub i32 %394, 10
  %396 = mul i32 %395, 10
  %397 = sub i32 %394, 10
  %398 = mul i32 %397, 10
  %399 = shl i32 %394, 10
  %400 = sdiv i32 %394, 10
  store i32 %400, i32* %106, align 4
  %401 = load i32, i32* %102, align 4
  %402 = sub i32 0, %401
  %403 = add i32 %402, 10
  %404 = sub i32 %401, 10
  %405 = mul i32 %404, 10
  %406 = shl i32 %401, 10
  %407 = srem i32 %401, 10
  %408 = load i32, i32* %102, align 4
  %409 = srem i32 %408, 10
  %410 = shl i32 %409, 5
  %411 = sub i32 0, %409
  %412 = add i32 %411, 5
  %413 = sub i32 0, %409
  %414 = add i32 %413, 5
  %415 = shl i32 %409, 5
  %416 = sub i32 0, %409
  %417 = add i32 %416, 5
  %418 = srem i32 %409, 5
  %419 = sub i32 0, %407
  %420 = add i32 %419, %418
  %421 = shl i32 %407, %418
  %422 = shl i32 %407, %418
  %423 = sub i32 0, %407
  %424 = add i32 %423, %418
  %425 = shl i32 %407, %418
  %426 = shl i32 %407, %418
  %427 = sub nsw i32 %407, %418
  %428 = sdiv i32 %427, 5
  store i32 %428, i32* %107, align 4
  %429 = load i32, i32* %102, align 4
  %430 = load i32, i32* %103, align 4
  %431 = sub i32 0, 100
  %432 = add i32 %431, %430
  %433 = mul nsw i32 100, %430
  %434 = sub i32 %429, %433
  %435 = mul i32 %434, %433
  %436 = sub i32 %429, %433
  %437 = mul i32 %436, %433
  %438 = shl i32 %429, %433
  %439 = sub i32 0, %429
  %440 = add i32 %439, %433
  %441 = sub i32 %429, %433
  %442 = mul i32 %441, %433
  %443 = sub nsw i32 %429, %433
  %444 = load i32, i32* %104, align 4
  %445 = sub i32 0, 50
  %446 = add i32 %445, %444
  %447 = mul nsw i32 50, %444
  %448 = sub i32 0, %443
  %449 = add i32 %448, %447
  %450 = shl i32 %443, %447
  %451 = sub i32 0, %443
  %452 = add i32 %451, %447
  %453 = sub i32 0, %443
  %454 = add i32 %453, %447
  %455 = sub nsw i32 %443, %447
  %456 = load i32, i32* %105, align 4
  %457 = sub i32 0, 20
  %458 = add i32 %457, %456
  %459 = shl i32 20, %456
  %460 = sub i32 0, 20
  %461 = add i32 %460, %456
  %462 = mul nsw i32 20, %456
  %463 = shl i32 %455, %462
  %464 = sub i32 %455, %462
  %465 = mul i32 %464, %462
  %466 = shl i32 %455, %462
  %467 = sub nsw i32 %455, %462
  %468 = load i32, i32* %106, align 4
  %469 = sub i32 10, %468
  %470 = mul i32 %469, %468
  %471 = sub i32 10, %468
  %472 = mul i32 %471, %468
  %473 = sub i32 0, 10
  %474 = add i32 %473, %468
  %475 = sub i32 0, 10
  %476 = add i32 %475, %468
  %477 = sub i32 0, 10
  %478 = add i32 %477, %468
  %479 = mul nsw i32 10, %468
  %480 = shl i32 %467, %479
  %481 = sub i32 0, %467
  %482 = add i32 %481, %479
  %483 = sub i32 0, %467
  %484 = add i32 %483, %479
  %485 = sub i32 %467, %479
  %486 = mul i32 %485, %479
  %487 = sub i32 %467, %479
  %488 = mul i32 %487, %479
  %489 = sub nsw i32 %467, %479
  %490 = load i32, i32* %107, align 4
  %491 = sub i32 0, 5
  %492 = add i32 %491, %490
  %493 = sub i32 0, 5
  %494 = add i32 %493, %490
  %495 = mul nsw i32 5, %490
  %496 = sub i32 %489, %495
  %497 = mul i32 %496, %495
  %498 = sub i32 0, %489
  %499 = add i32 %498, %495
  %500 = shl i32 %489, %495
  %501 = sub nsw i32 %489, %495
  store i32 %501, i32* %108, align 4
  %502 = load i32, i32* %103, align 4
  %503 = load i32, i32* %104, align 4
  %504 = load i32, i32* %105, align 4
  %505 = load i32, i32* %106, align 4
  %506 = load i32, i32* %107, align 4
  %507 = load i32, i32* %108, align 4
  %508 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %502, i32 %503, i32 %504, i32 %505, i32 %506, i32 %507)
  br label %9
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
