; ModuleID = 'source-C-CXX/96/172.c'
source_filename = "source-C-CXX/96/172.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"%d\0A%d\0A%d\0A%d\0A%d\0A%d\0A\00", align 1
@x = common global i32 0
@y = common global i32 0

; Function Attrs: noinline nounwind uwtable
define void @main() #0 {
  %1 = load i32, i32* @x
  %2 = load i32, i32* @y
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %9, label %123

; <label>:9:                                      ; preds = %0, %123
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %10)
  %18 = load i32, i32* %10, align 4
  %19 = sdiv i32 %18, 100
  store i32 %19, i32* %11, align 4
  %20 = load i32, i32* %10, align 4
  %21 = load i32, i32* %11, align 4
  %22 = mul nsw i32 %21, 100
  %23 = sub nsw i32 %20, %22
  %24 = sdiv i32 %23, 50
  store i32 %24, i32* %12, align 4
  %25 = load i32, i32* %10, align 4
  %26 = load i32, i32* %11, align 4
  %27 = mul nsw i32 %26, 100
  %28 = sub nsw i32 %25, %27
  %29 = load i32, i32* %12, align 4
  %30 = mul nsw i32 %29, 50
  %31 = sub nsw i32 %28, %30
  %32 = sdiv i32 %31, 20
  store i32 %32, i32* %13, align 4
  %33 = load i32, i32* %10, align 4
  %34 = load i32, i32* %11, align 4
  %35 = mul nsw i32 %34, 100
  %36 = sub nsw i32 %33, %35
  %37 = load i32, i32* %12, align 4
  %38 = mul nsw i32 %37, 50
  %39 = sub nsw i32 %36, %38
  %40 = load i32, i32* %13, align 4
  %41 = mul nsw i32 20, %40
  %42 = sub nsw i32 %39, %41
  %43 = sdiv i32 %42, 10
  store i32 %43, i32* %14, align 4
  %44 = load i32, i32* %10, align 4
  %45 = load i32, i32* %11, align 4
  %46 = mul nsw i32 %45, 100
  %47 = sub nsw i32 %44, %46
  %48 = load i32, i32* %12, align 4
  %49 = mul nsw i32 %48, 50
  %50 = sub nsw i32 %47, %49
  %51 = load i32, i32* %13, align 4
  %52 = mul nsw i32 20, %51
  %53 = sub nsw i32 %50, %52
  %54 = load i32, i32* %14, align 4
  %55 = mul nsw i32 %54, 10
  %56 = sub nsw i32 %53, %55
  %57 = sdiv i32 %56, 5
  store i32 %57, i32* %15, align 4
  %58 = load i32, i32* %10, align 4
  %59 = load i32, i32* %11, align 4
  %60 = mul nsw i32 %59, 100
  %61 = sub nsw i32 %58, %60
  %62 = load i32, i32* %12, align 4
  %63 = mul nsw i32 %62, 50
  %64 = sub nsw i32 %61, %63
  %65 = load i32, i32* %13, align 4
  %66 = mul nsw i32 20, %65
  %67 = sub nsw i32 %64, %66
  %68 = load i32, i32* %14, align 4
  %69 = mul nsw i32 %68, 10
  %70 = sub nsw i32 %67, %69
  %71 = load i32, i32* %15, align 4
  %72 = mul nsw i32 5, %71
  %73 = sub nsw i32 %70, %72
  %74 = sdiv i32 %73, 1
  store i32 %74, i32* %16, align 4
  %75 = load i32, i32* %11, align 4
  %76 = load i32, i32* %12, align 4
  %77 = add nsw i32 %75, %76
  %78 = load i32, i32* %13, align 4
  %79 = add nsw i32 %77, %78
  %80 = load i32, i32* %14, align 4
  %81 = add nsw i32 %79, %80
  %82 = load i32, i32* %15, align 4
  %83 = add nsw i32 %81, %82
  %84 = load i32, i32* %16, align 4
  %85 = add nsw i32 %83, %84
  store i32 %85, i32* %10, align 4
  %86 = icmp ne i32 %85, 0
  %87 = load i32, i32* @x
  %88 = load i32, i32* @y
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %95, label %123

; <label>:95:                                     ; preds = %9
  br i1 %86, label %96, label %122

; <label>:96:                                     ; preds = %95
  %97 = load i32, i32* @x
  %98 = load i32, i32* @y
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %105, label %492

; <label>:105:                                    ; preds = %96, %492
  %106 = load i32, i32* %11, align 4
  %107 = load i32, i32* %12, align 4
  %108 = load i32, i32* %13, align 4
  %109 = load i32, i32* %14, align 4
  %110 = load i32, i32* %15, align 4
  %111 = load i32, i32* %16, align 4
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %106, i32 %107, i32 %108, i32 %109, i32 %110, i32 %111)
  %113 = load i32, i32* @x
  %114 = load i32, i32* @y
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %121, label %492

; <label>:121:                                    ; preds = %105
  br label %122

; <label>:122:                                    ; preds = %121, %95
  ret void

; <label>:123:                                    ; preds = %9, %0
  %124 = alloca i32, align 4
  %125 = alloca i32, align 4
  %126 = alloca i32, align 4
  %127 = alloca i32, align 4
  %128 = alloca i32, align 4
  %129 = alloca i32, align 4
  %130 = alloca i32, align 4
  %131 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %124)
  %132 = load i32, i32* %124, align 4
  %133 = sub i32 %132, 100
  %134 = mul i32 %133, 100
  %135 = sub i32 %132, 100
  %136 = mul i32 %135, 100
  %137 = shl i32 %132, 100
  %138 = shl i32 %132, 100
  %139 = sub i32 %132, 100
  %140 = mul i32 %139, 100
  %141 = sdiv i32 %132, 100
  store i32 %141, i32* %125, align 4
  %142 = load i32, i32* %124, align 4
  %143 = load i32, i32* %125, align 4
  %144 = sub i32 %143, 100
  %145 = mul i32 %144, 100
  %146 = mul nsw i32 %143, 100
  %147 = sub i32 %142, %146
  %148 = mul i32 %147, %146
  %149 = sub i32 0, %142
  %150 = add i32 %149, %146
  %151 = shl i32 %142, %146
  %152 = shl i32 %142, %146
  %153 = sub i32 %142, %146
  %154 = mul i32 %153, %146
  %155 = sub i32 0, %142
  %156 = add i32 %155, %146
  %157 = sub i32 0, %142
  %158 = add i32 %157, %146
  %159 = shl i32 %142, %146
  %160 = sub nsw i32 %142, %146
  %161 = sub i32 0, %160
  %162 = add i32 %161, 50
  %163 = sdiv i32 %160, 50
  store i32 %163, i32* %126, align 4
  %164 = load i32, i32* %124, align 4
  %165 = load i32, i32* %125, align 4
  %166 = sub i32 0, %165
  %167 = add i32 %166, 100
  %168 = sub i32 %165, 100
  %169 = mul i32 %168, 100
  %170 = shl i32 %165, 100
  %171 = sub i32 0, %165
  %172 = add i32 %171, 100
  %173 = sub i32 0, %165
  %174 = add i32 %173, 100
  %175 = mul nsw i32 %165, 100
  %176 = sub i32 %164, %175
  %177 = mul i32 %176, %175
  %178 = sub nsw i32 %164, %175
  %179 = load i32, i32* %126, align 4
  %180 = sub i32 %179, 50
  %181 = mul i32 %180, 50
  %182 = sub i32 %179, 50
  %183 = mul i32 %182, 50
  %184 = sub i32 0, %179
  %185 = add i32 %184, 50
  %186 = shl i32 %179, 50
  %187 = sub i32 0, %179
  %188 = add i32 %187, 50
  %189 = sub i32 0, %179
  %190 = add i32 %189, 50
  %191 = sub i32 0, %179
  %192 = add i32 %191, 50
  %193 = sub i32 0, %179
  %194 = add i32 %193, 50
  %195 = mul nsw i32 %179, 50
  %196 = sub i32 0, %178
  %197 = add i32 %196, %195
  %198 = sub i32 %178, %195
  %199 = mul i32 %198, %195
  %200 = sub i32 0, %178
  %201 = add i32 %200, %195
  %202 = sub nsw i32 %178, %195
  %203 = sub i32 %202, 20
  %204 = mul i32 %203, 20
  %205 = shl i32 %202, 20
  %206 = sub i32 %202, 20
  %207 = mul i32 %206, 20
  %208 = shl i32 %202, 20
  %209 = sub i32 %202, 20
  %210 = mul i32 %209, 20
  %211 = sdiv i32 %202, 20
  store i32 %211, i32* %127, align 4
  %212 = load i32, i32* %124, align 4
  %213 = load i32, i32* %125, align 4
  %214 = shl i32 %213, 100
  %215 = shl i32 %213, 100
  %216 = sub i32 0, %213
  %217 = add i32 %216, 100
  %218 = shl i32 %213, 100
  %219 = shl i32 %213, 100
  %220 = sub i32 %213, 100
  %221 = mul i32 %220, 100
  %222 = mul nsw i32 %213, 100
  %223 = shl i32 %212, %222
  %224 = sub nsw i32 %212, %222
  %225 = load i32, i32* %126, align 4
  %226 = mul nsw i32 %225, 50
  %227 = sub i32 0, %224
  %228 = add i32 %227, %226
  %229 = sub i32 %224, %226
  %230 = mul i32 %229, %226
  %231 = sub i32 0, %224
  %232 = add i32 %231, %226
  %233 = sub i32 %224, %226
  %234 = mul i32 %233, %226
  %235 = sub nsw i32 %224, %226
  %236 = load i32, i32* %127, align 4
  %237 = sub i32 20, %236
  %238 = mul i32 %237, %236
  %239 = sub i32 20, %236
  %240 = mul i32 %239, %236
  %241 = mul nsw i32 20, %236
  %242 = sub i32 %235, %241
  %243 = mul i32 %242, %241
  %244 = sub i32 %235, %241
  %245 = mul i32 %244, %241
  %246 = sub nsw i32 %235, %241
  %247 = sub i32 %246, 10
  %248 = mul i32 %247, 10
  %249 = sub i32 %246, 10
  %250 = mul i32 %249, 10
  %251 = shl i32 %246, 10
  %252 = shl i32 %246, 10
  %253 = sdiv i32 %246, 10
  store i32 %253, i32* %128, align 4
  %254 = load i32, i32* %124, align 4
  %255 = load i32, i32* %125, align 4
  %256 = shl i32 %255, 100
  %257 = sub i32 %255, 100
  %258 = mul i32 %257, 100
  %259 = sub i32 0, %255
  %260 = add i32 %259, 100
  %261 = sub i32 0, %255
  %262 = add i32 %261, 100
  %263 = sub i32 0, %255
  %264 = add i32 %263, 100
  %265 = sub i32 0, %255
  %266 = add i32 %265, 100
  %267 = sub i32 %255, 100
  %268 = mul i32 %267, 100
  %269 = mul nsw i32 %255, 100
  %270 = sub i32 %254, %269
  %271 = mul i32 %270, %269
  %272 = shl i32 %254, %269
  %273 = shl i32 %254, %269
  %274 = sub i32 %254, %269
  %275 = mul i32 %274, %269
  %276 = sub nsw i32 %254, %269
  %277 = load i32, i32* %126, align 4
  %278 = sub i32 0, %277
  %279 = add i32 %278, 50
  %280 = sub i32 0, %277
  %281 = add i32 %280, 50
  %282 = sub i32 %277, 50
  %283 = mul i32 %282, 50
  %284 = shl i32 %277, 50
  %285 = sub i32 0, %277
  %286 = add i32 %285, 50
  %287 = sub i32 0, %277
  %288 = add i32 %287, 50
  %289 = sub i32 %277, 50
  %290 = mul i32 %289, 50
  %291 = sub i32 0, %277
  %292 = add i32 %291, 50
  %293 = mul nsw i32 %277, 50
  %294 = sub i32 0, %276
  %295 = add i32 %294, %293
  %296 = sub i32 %276, %293
  %297 = mul i32 %296, %293
  %298 = sub i32 0, %276
  %299 = add i32 %298, %293
  %300 = sub i32 %276, %293
  %301 = mul i32 %300, %293
  %302 = sub i32 0, %276
  %303 = add i32 %302, %293
  %304 = shl i32 %276, %293
  %305 = sub i32 %276, %293
  %306 = mul i32 %305, %293
  %307 = sub i32 0, %276
  %308 = add i32 %307, %293
  %309 = sub i32 0, %276
  %310 = add i32 %309, %293
  %311 = sub nsw i32 %276, %293
  %312 = load i32, i32* %127, align 4
  %313 = sub i32 0, 20
  %314 = add i32 %313, %312
  %315 = sub i32 0, 20
  %316 = add i32 %315, %312
  %317 = sub i32 0, 20
  %318 = add i32 %317, %312
  %319 = mul nsw i32 20, %312
  %320 = shl i32 %311, %319
  %321 = shl i32 %311, %319
  %322 = sub i32 0, %311
  %323 = add i32 %322, %319
  %324 = sub i32 0, %311
  %325 = add i32 %324, %319
  %326 = sub nsw i32 %311, %319
  %327 = load i32, i32* %128, align 4
  %328 = shl i32 %327, 10
  %329 = mul nsw i32 %327, 10
  %330 = shl i32 %326, %329
  %331 = sub nsw i32 %326, %329
  %332 = sub i32 0, %331
  %333 = add i32 %332, 5
  %334 = sdiv i32 %331, 5
  store i32 %334, i32* %129, align 4
  %335 = load i32, i32* %124, align 4
  %336 = load i32, i32* %125, align 4
  %337 = sub i32 %336, 100
  %338 = mul i32 %337, 100
  %339 = sub i32 %336, 100
  %340 = mul i32 %339, 100
  %341 = shl i32 %336, 100
  %342 = sub i32 0, %336
  %343 = add i32 %342, 100
  %344 = sub i32 0, %336
  %345 = add i32 %344, 100
  %346 = mul nsw i32 %336, 100
  %347 = sub i32 0, %335
  %348 = add i32 %347, %346
  %349 = shl i32 %335, %346
  %350 = shl i32 %335, %346
  %351 = sub i32 %335, %346
  %352 = mul i32 %351, %346
  %353 = shl i32 %335, %346
  %354 = shl i32 %335, %346
  %355 = sub i32 %335, %346
  %356 = mul i32 %355, %346
  %357 = sub i32 %335, %346
  %358 = mul i32 %357, %346
  %359 = sub nsw i32 %335, %346
  %360 = load i32, i32* %126, align 4
  %361 = sub i32 0, %360
  %362 = add i32 %361, 50
  %363 = sub i32 0, %360
  %364 = add i32 %363, 50
  %365 = sub i32 0, %360
  %366 = add i32 %365, 50
  %367 = mul nsw i32 %360, 50
  %368 = sub i32 0, %359
  %369 = add i32 %368, %367
  %370 = shl i32 %359, %367
  %371 = sub i32 %359, %367
  %372 = mul i32 %371, %367
  %373 = sub i32 0, %359
  %374 = add i32 %373, %367
  %375 = sub nsw i32 %359, %367
  %376 = load i32, i32* %127, align 4
  %377 = sub i32 0, 20
  %378 = add i32 %377, %376
  %379 = shl i32 20, %376
  %380 = mul nsw i32 20, %376
  %381 = sub i32 %375, %380
  %382 = mul i32 %381, %380
  %383 = sub i32 0, %375
  %384 = add i32 %383, %380
  %385 = sub i32 0, %375
  %386 = add i32 %385, %380
  %387 = sub i32 0, %375
  %388 = add i32 %387, %380
  %389 = sub i32 %375, %380
  %390 = mul i32 %389, %380
  %391 = sub i32 0, %375
  %392 = add i32 %391, %380
  %393 = sub nsw i32 %375, %380
  %394 = load i32, i32* %128, align 4
  %395 = shl i32 %394, 10
  %396 = shl i32 %394, 10
  %397 = sub i32 %394, 10
  %398 = mul i32 %397, 10
  %399 = sub i32 %394, 10
  %400 = mul i32 %399, 10
  %401 = sub i32 %394, 10
  %402 = mul i32 %401, 10
  %403 = sub i32 0, %394
  %404 = add i32 %403, 10
  %405 = shl i32 %394, 10
  %406 = mul nsw i32 %394, 10
  %407 = sub i32 0, %393
  %408 = add i32 %407, %406
  %409 = shl i32 %393, %406
  %410 = sub nsw i32 %393, %406
  %411 = load i32, i32* %129, align 4
  %412 = sub i32 5, %411
  %413 = mul i32 %412, %411
  %414 = sub i32 0, 5
  %415 = add i32 %414, %411
  %416 = shl i32 5, %411
  %417 = sub i32 0, 5
  %418 = add i32 %417, %411
  %419 = mul nsw i32 5, %411
  %420 = sub i32 %410, %419
  %421 = mul i32 %420, %419
  %422 = sub i32 0, %410
  %423 = add i32 %422, %419
  %424 = shl i32 %410, %419
  %425 = sub i32 0, %410
  %426 = add i32 %425, %419
  %427 = sub nsw i32 %410, %419
  %428 = shl i32 %427, 1
  %429 = sub i32 %427, 1
  %430 = mul i32 %429, 1
  %431 = sub i32 %427, 1
  %432 = mul i32 %431, 1
  %433 = sub i32 %427, 1
  %434 = mul i32 %433, 1
  %435 = sdiv i32 %427, 1
  store i32 %435, i32* %130, align 4
  %436 = load i32, i32* %125, align 4
  %437 = load i32, i32* %126, align 4
  %438 = shl i32 %436, %437
  %439 = shl i32 %436, %437
  %440 = sub i32 0, %436
  %441 = add i32 %440, %437
  %442 = shl i32 %436, %437
  %443 = shl i32 %436, %437
  %444 = sub i32 0, %436
  %445 = add i32 %444, %437
  %446 = add nsw i32 %436, %437
  %447 = load i32, i32* %127, align 4
  %448 = sub i32 0, %446
  %449 = add i32 %448, %447
  %450 = sub i32 0, %446
  %451 = add i32 %450, %447
  %452 = sub i32 0, %446
  %453 = add i32 %452, %447
  %454 = shl i32 %446, %447
  %455 = sub i32 %446, %447
  %456 = mul i32 %455, %447
  %457 = sub i32 0, %446
  %458 = add i32 %457, %447
  %459 = sub i32 %446, %447
  %460 = mul i32 %459, %447
  %461 = sub i32 %446, %447
  %462 = mul i32 %461, %447
  %463 = add nsw i32 %446, %447
  %464 = load i32, i32* %128, align 4
  %465 = shl i32 %463, %464
  %466 = sub i32 0, %463
  %467 = add i32 %466, %464
  %468 = sub i32 %463, %464
  %469 = mul i32 %468, %464
  %470 = sub i32 0, %463
  %471 = add i32 %470, %464
  %472 = sub i32 %463, %464
  %473 = mul i32 %472, %464
  %474 = add nsw i32 %463, %464
  %475 = load i32, i32* %129, align 4
  %476 = shl i32 %474, %475
  %477 = sub i32 0, %474
  %478 = add i32 %477, %475
  %479 = add nsw i32 %474, %475
  %480 = load i32, i32* %130, align 4
  %481 = shl i32 %479, %480
  %482 = sub i32 0, %479
  %483 = add i32 %482, %480
  %484 = sub i32 0, %479
  %485 = add i32 %484, %480
  %486 = shl i32 %479, %480
  %487 = shl i32 %479, %480
  %488 = sub i32 %479, %480
  %489 = mul i32 %488, %480
  %490 = add nsw i32 %479, %480
  store i32 %490, i32* %124, align 4
  %491 = icmp ne i32 %490, 0
  br label %9

; <label>:492:                                    ; preds = %105, %96
  %493 = load i32, i32* %11, align 4
  %494 = load i32, i32* %12, align 4
  %495 = load i32, i32* %13, align 4
  %496 = load i32, i32* %14, align 4
  %497 = load i32, i32* %15, align 4
  %498 = load i32, i32* %16, align 4
  %499 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %493, i32 %494, i32 %495, i32 %496, i32 %497, i32 %498)
  br label %105
}

declare i32 @__isoc99_scanf(i8*, ...) #1

declare i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"Obfuscator-LLVM clang version 4.0.1  (based on Obfuscator-LLVM 4.0.1)"}
