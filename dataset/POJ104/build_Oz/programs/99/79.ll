; ModuleID = 'source-C-CXX/99/79.c'
source_filename = "source-C-CXX/99/79.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [7 x i8] c"%c=%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"No\00", align 1

; Function Attrs: minsize nounwind optsize sspstrong uwtable
define dso_local void @main() local_unnamed_addr #0 {
  %1 = alloca [300 x i8], align 16
  %2 = alloca [26 x i32], align 16
  %3 = getelementptr inbounds [300 x i8], [300 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 300, i8* nonnull %3) #5
  br label %4

4:                                                ; preds = %7, %0
  %5 = phi i64 [ %9, %7 ], [ 0, %0 ]
  %6 = icmp eq i64 %5, 300
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds [300 x i8], [300 x i8]* %1, i64 0, i64 %5
  store i8 0, i8* %8, align 1, !tbaa !5
  %9 = add nuw nsw i64 %5, 1
  br label %4, !llvm.loop !8

10:                                               ; preds = %4
  %11 = call i32 (i8*, ...) bitcast (i32 (...)* @gets to i32 (i8*, ...)*)(i8* nonnull %3) #6
  %12 = bitcast [26 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(104) %12, i8 0, i64 104, i1 false)
  %13 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 7
  %14 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 25
  %15 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 24
  %16 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 23
  %17 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 22
  %18 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 21
  %19 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 20
  %20 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 19
  %21 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 18
  %22 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 17
  %23 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 16
  %24 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 15
  %25 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 14
  %26 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 13
  %27 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 12
  %28 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 11
  %29 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 10
  %30 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 9
  %31 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 8
  %32 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 6
  %33 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 5
  %34 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 4
  %35 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 3
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 2
  %37 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 1
  %38 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 0
  br label %39

39:                                               ; preds = %124, %10
  %40 = phi i32 [ %125, %124 ], [ 0, %10 ]
  %41 = phi i32 [ %126, %124 ], [ 0, %10 ]
  %42 = phi i32 [ %127, %124 ], [ 0, %10 ]
  %43 = phi i32 [ %128, %124 ], [ 0, %10 ]
  %44 = phi i32 [ %129, %124 ], [ 0, %10 ]
  %45 = phi i32 [ %130, %124 ], [ 0, %10 ]
  %46 = phi i32 [ %131, %124 ], [ 0, %10 ]
  %47 = phi i32 [ %132, %124 ], [ 0, %10 ]
  %48 = phi i32 [ %133, %124 ], [ 0, %10 ]
  %49 = phi i32 [ %134, %124 ], [ 0, %10 ]
  %50 = phi i32 [ %135, %124 ], [ 0, %10 ]
  %51 = phi i32 [ %136, %124 ], [ 0, %10 ]
  %52 = phi i32 [ %137, %124 ], [ 0, %10 ]
  %53 = phi i32 [ %138, %124 ], [ 0, %10 ]
  %54 = phi i32 [ %139, %124 ], [ 0, %10 ]
  %55 = phi i32 [ %140, %124 ], [ 0, %10 ]
  %56 = phi i32 [ %141, %124 ], [ 0, %10 ]
  %57 = phi i32 [ %142, %124 ], [ 0, %10 ]
  %58 = phi i32 [ %143, %124 ], [ 0, %10 ]
  %59 = phi i32 [ %144, %124 ], [ 0, %10 ]
  %60 = phi i32 [ %145, %124 ], [ 0, %10 ]
  %61 = phi i32 [ %146, %124 ], [ 0, %10 ]
  %62 = phi i32 [ %147, %124 ], [ 0, %10 ]
  %63 = phi i32 [ %148, %124 ], [ 0, %10 ]
  %64 = phi i32 [ %149, %124 ], [ 0, %10 ]
  %65 = phi i32 [ %150, %124 ], [ 0, %10 ]
  %66 = phi i64 [ %151, %124 ], [ 0, %10 ]
  %67 = icmp eq i64 %66, 51
  br i1 %67, label %152, label %68

68:                                               ; preds = %39
  %69 = getelementptr inbounds [300 x i8], [300 x i8]* %1, i64 0, i64 %66
  %70 = load i8, i8* %69, align 1, !tbaa !5
  %71 = sext i8 %70 to i32
  switch i32 %71, label %124 [
    i32 97, label %72
    i32 98, label %74
    i32 99, label %76
    i32 100, label %78
    i32 101, label %80
    i32 102, label %82
    i32 103, label %84
    i32 105, label %86
    i32 106, label %88
    i32 107, label %90
    i32 108, label %92
    i32 109, label %94
    i32 110, label %96
    i32 111, label %98
    i32 112, label %100
    i32 113, label %102
    i32 114, label %104
    i32 115, label %106
    i32 116, label %108
    i32 117, label %110
    i32 118, label %112
    i32 119, label %114
    i32 120, label %116
    i32 121, label %118
    i32 122, label %120
    i32 104, label %122
  ]

72:                                               ; preds = %68
  %73 = add nsw i32 %40, 1
  store i32 %73, i32* %38, align 16, !tbaa !10
  br label %124

74:                                               ; preds = %68
  %75 = add nsw i32 %41, 1
  store i32 %75, i32* %37, align 4, !tbaa !10
  br label %124

76:                                               ; preds = %68
  %77 = add nsw i32 %42, 1
  store i32 %77, i32* %36, align 8, !tbaa !10
  br label %124

78:                                               ; preds = %68
  %79 = add nsw i32 %43, 1
  store i32 %79, i32* %35, align 4, !tbaa !10
  br label %124

80:                                               ; preds = %68
  %81 = add nsw i32 %44, 1
  store i32 %81, i32* %34, align 16, !tbaa !10
  br label %124

82:                                               ; preds = %68
  %83 = add nsw i32 %45, 1
  store i32 %83, i32* %33, align 4, !tbaa !10
  br label %124

84:                                               ; preds = %68
  %85 = add nsw i32 %46, 1
  store i32 %85, i32* %32, align 8, !tbaa !10
  br label %124

86:                                               ; preds = %68
  %87 = add nsw i32 %47, 1
  store i32 %87, i32* %31, align 16, !tbaa !10
  br label %124

88:                                               ; preds = %68
  %89 = add nsw i32 %48, 1
  store i32 %89, i32* %30, align 4, !tbaa !10
  br label %124

90:                                               ; preds = %68
  %91 = add nsw i32 %49, 1
  store i32 %91, i32* %29, align 8, !tbaa !10
  br label %124

92:                                               ; preds = %68
  %93 = add nsw i32 %50, 1
  store i32 %93, i32* %28, align 4, !tbaa !10
  br label %124

94:                                               ; preds = %68
  %95 = add nsw i32 %51, 1
  store i32 %95, i32* %27, align 16, !tbaa !10
  br label %124

96:                                               ; preds = %68
  %97 = add nsw i32 %52, 1
  store i32 %97, i32* %26, align 4, !tbaa !10
  br label %124

98:                                               ; preds = %68
  %99 = add nsw i32 %53, 1
  store i32 %99, i32* %25, align 8, !tbaa !10
  br label %124

100:                                              ; preds = %68
  %101 = add nsw i32 %54, 1
  store i32 %101, i32* %24, align 4, !tbaa !10
  br label %124

102:                                              ; preds = %68
  %103 = add nsw i32 %55, 1
  store i32 %103, i32* %23, align 16, !tbaa !10
  br label %124

104:                                              ; preds = %68
  %105 = add nsw i32 %56, 1
  store i32 %105, i32* %22, align 4, !tbaa !10
  br label %124

106:                                              ; preds = %68
  %107 = add nsw i32 %57, 1
  store i32 %107, i32* %21, align 8, !tbaa !10
  br label %124

108:                                              ; preds = %68
  %109 = add nsw i32 %58, 1
  store i32 %109, i32* %20, align 4, !tbaa !10
  br label %124

110:                                              ; preds = %68
  %111 = add nsw i32 %59, 1
  store i32 %111, i32* %19, align 16, !tbaa !10
  br label %124

112:                                              ; preds = %68
  %113 = add nsw i32 %60, 1
  store i32 %113, i32* %18, align 4, !tbaa !10
  br label %124

114:                                              ; preds = %68
  %115 = add nsw i32 %61, 1
  store i32 %115, i32* %17, align 8, !tbaa !10
  br label %124

116:                                              ; preds = %68
  %117 = add nsw i32 %62, 1
  store i32 %117, i32* %16, align 4, !tbaa !10
  br label %124

118:                                              ; preds = %68
  %119 = add nsw i32 %63, 1
  store i32 %119, i32* %15, align 16, !tbaa !10
  br label %124

120:                                              ; preds = %68
  %121 = add nsw i32 %64, 1
  store i32 %121, i32* %14, align 4, !tbaa !10
  br label %124

122:                                              ; preds = %68
  %123 = add nsw i32 %65, 1
  store i32 %123, i32* %13, align 4, !tbaa !10
  br label %124

124:                                              ; preds = %72, %74, %76, %78, %80, %82, %84, %86, %88, %90, %92, %94, %96, %98, %100, %102, %104, %106, %108, %110, %112, %114, %116, %118, %120, %122, %68
  %125 = phi i32 [ %73, %72 ], [ %40, %74 ], [ %40, %76 ], [ %40, %78 ], [ %40, %80 ], [ %40, %82 ], [ %40, %84 ], [ %40, %86 ], [ %40, %88 ], [ %40, %90 ], [ %40, %92 ], [ %40, %94 ], [ %40, %96 ], [ %40, %98 ], [ %40, %100 ], [ %40, %102 ], [ %40, %104 ], [ %40, %106 ], [ %40, %108 ], [ %40, %110 ], [ %40, %112 ], [ %40, %114 ], [ %40, %116 ], [ %40, %118 ], [ %40, %120 ], [ %40, %122 ], [ %40, %68 ]
  %126 = phi i32 [ %41, %72 ], [ %75, %74 ], [ %41, %76 ], [ %41, %78 ], [ %41, %80 ], [ %41, %82 ], [ %41, %84 ], [ %41, %86 ], [ %41, %88 ], [ %41, %90 ], [ %41, %92 ], [ %41, %94 ], [ %41, %96 ], [ %41, %98 ], [ %41, %100 ], [ %41, %102 ], [ %41, %104 ], [ %41, %106 ], [ %41, %108 ], [ %41, %110 ], [ %41, %112 ], [ %41, %114 ], [ %41, %116 ], [ %41, %118 ], [ %41, %120 ], [ %41, %122 ], [ %41, %68 ]
  %127 = phi i32 [ %42, %72 ], [ %42, %74 ], [ %77, %76 ], [ %42, %78 ], [ %42, %80 ], [ %42, %82 ], [ %42, %84 ], [ %42, %86 ], [ %42, %88 ], [ %42, %90 ], [ %42, %92 ], [ %42, %94 ], [ %42, %96 ], [ %42, %98 ], [ %42, %100 ], [ %42, %102 ], [ %42, %104 ], [ %42, %106 ], [ %42, %108 ], [ %42, %110 ], [ %42, %112 ], [ %42, %114 ], [ %42, %116 ], [ %42, %118 ], [ %42, %120 ], [ %42, %122 ], [ %42, %68 ]
  %128 = phi i32 [ %43, %72 ], [ %43, %74 ], [ %43, %76 ], [ %79, %78 ], [ %43, %80 ], [ %43, %82 ], [ %43, %84 ], [ %43, %86 ], [ %43, %88 ], [ %43, %90 ], [ %43, %92 ], [ %43, %94 ], [ %43, %96 ], [ %43, %98 ], [ %43, %100 ], [ %43, %102 ], [ %43, %104 ], [ %43, %106 ], [ %43, %108 ], [ %43, %110 ], [ %43, %112 ], [ %43, %114 ], [ %43, %116 ], [ %43, %118 ], [ %43, %120 ], [ %43, %122 ], [ %43, %68 ]
  %129 = phi i32 [ %44, %72 ], [ %44, %74 ], [ %44, %76 ], [ %44, %78 ], [ %81, %80 ], [ %44, %82 ], [ %44, %84 ], [ %44, %86 ], [ %44, %88 ], [ %44, %90 ], [ %44, %92 ], [ %44, %94 ], [ %44, %96 ], [ %44, %98 ], [ %44, %100 ], [ %44, %102 ], [ %44, %104 ], [ %44, %106 ], [ %44, %108 ], [ %44, %110 ], [ %44, %112 ], [ %44, %114 ], [ %44, %116 ], [ %44, %118 ], [ %44, %120 ], [ %44, %122 ], [ %44, %68 ]
  %130 = phi i32 [ %45, %72 ], [ %45, %74 ], [ %45, %76 ], [ %45, %78 ], [ %45, %80 ], [ %83, %82 ], [ %45, %84 ], [ %45, %86 ], [ %45, %88 ], [ %45, %90 ], [ %45, %92 ], [ %45, %94 ], [ %45, %96 ], [ %45, %98 ], [ %45, %100 ], [ %45, %102 ], [ %45, %104 ], [ %45, %106 ], [ %45, %108 ], [ %45, %110 ], [ %45, %112 ], [ %45, %114 ], [ %45, %116 ], [ %45, %118 ], [ %45, %120 ], [ %45, %122 ], [ %45, %68 ]
  %131 = phi i32 [ %46, %72 ], [ %46, %74 ], [ %46, %76 ], [ %46, %78 ], [ %46, %80 ], [ %46, %82 ], [ %85, %84 ], [ %46, %86 ], [ %46, %88 ], [ %46, %90 ], [ %46, %92 ], [ %46, %94 ], [ %46, %96 ], [ %46, %98 ], [ %46, %100 ], [ %46, %102 ], [ %46, %104 ], [ %46, %106 ], [ %46, %108 ], [ %46, %110 ], [ %46, %112 ], [ %46, %114 ], [ %46, %116 ], [ %46, %118 ], [ %46, %120 ], [ %46, %122 ], [ %46, %68 ]
  %132 = phi i32 [ %47, %72 ], [ %47, %74 ], [ %47, %76 ], [ %47, %78 ], [ %47, %80 ], [ %47, %82 ], [ %47, %84 ], [ %87, %86 ], [ %47, %88 ], [ %47, %90 ], [ %47, %92 ], [ %47, %94 ], [ %47, %96 ], [ %47, %98 ], [ %47, %100 ], [ %47, %102 ], [ %47, %104 ], [ %47, %106 ], [ %47, %108 ], [ %47, %110 ], [ %47, %112 ], [ %47, %114 ], [ %47, %116 ], [ %47, %118 ], [ %47, %120 ], [ %47, %122 ], [ %47, %68 ]
  %133 = phi i32 [ %48, %72 ], [ %48, %74 ], [ %48, %76 ], [ %48, %78 ], [ %48, %80 ], [ %48, %82 ], [ %48, %84 ], [ %48, %86 ], [ %89, %88 ], [ %48, %90 ], [ %48, %92 ], [ %48, %94 ], [ %48, %96 ], [ %48, %98 ], [ %48, %100 ], [ %48, %102 ], [ %48, %104 ], [ %48, %106 ], [ %48, %108 ], [ %48, %110 ], [ %48, %112 ], [ %48, %114 ], [ %48, %116 ], [ %48, %118 ], [ %48, %120 ], [ %48, %122 ], [ %48, %68 ]
  %134 = phi i32 [ %49, %72 ], [ %49, %74 ], [ %49, %76 ], [ %49, %78 ], [ %49, %80 ], [ %49, %82 ], [ %49, %84 ], [ %49, %86 ], [ %49, %88 ], [ %91, %90 ], [ %49, %92 ], [ %49, %94 ], [ %49, %96 ], [ %49, %98 ], [ %49, %100 ], [ %49, %102 ], [ %49, %104 ], [ %49, %106 ], [ %49, %108 ], [ %49, %110 ], [ %49, %112 ], [ %49, %114 ], [ %49, %116 ], [ %49, %118 ], [ %49, %120 ], [ %49, %122 ], [ %49, %68 ]
  %135 = phi i32 [ %50, %72 ], [ %50, %74 ], [ %50, %76 ], [ %50, %78 ], [ %50, %80 ], [ %50, %82 ], [ %50, %84 ], [ %50, %86 ], [ %50, %88 ], [ %50, %90 ], [ %93, %92 ], [ %50, %94 ], [ %50, %96 ], [ %50, %98 ], [ %50, %100 ], [ %50, %102 ], [ %50, %104 ], [ %50, %106 ], [ %50, %108 ], [ %50, %110 ], [ %50, %112 ], [ %50, %114 ], [ %50, %116 ], [ %50, %118 ], [ %50, %120 ], [ %50, %122 ], [ %50, %68 ]
  %136 = phi i32 [ %51, %72 ], [ %51, %74 ], [ %51, %76 ], [ %51, %78 ], [ %51, %80 ], [ %51, %82 ], [ %51, %84 ], [ %51, %86 ], [ %51, %88 ], [ %51, %90 ], [ %51, %92 ], [ %95, %94 ], [ %51, %96 ], [ %51, %98 ], [ %51, %100 ], [ %51, %102 ], [ %51, %104 ], [ %51, %106 ], [ %51, %108 ], [ %51, %110 ], [ %51, %112 ], [ %51, %114 ], [ %51, %116 ], [ %51, %118 ], [ %51, %120 ], [ %51, %122 ], [ %51, %68 ]
  %137 = phi i32 [ %52, %72 ], [ %52, %74 ], [ %52, %76 ], [ %52, %78 ], [ %52, %80 ], [ %52, %82 ], [ %52, %84 ], [ %52, %86 ], [ %52, %88 ], [ %52, %90 ], [ %52, %92 ], [ %52, %94 ], [ %97, %96 ], [ %52, %98 ], [ %52, %100 ], [ %52, %102 ], [ %52, %104 ], [ %52, %106 ], [ %52, %108 ], [ %52, %110 ], [ %52, %112 ], [ %52, %114 ], [ %52, %116 ], [ %52, %118 ], [ %52, %120 ], [ %52, %122 ], [ %52, %68 ]
  %138 = phi i32 [ %53, %72 ], [ %53, %74 ], [ %53, %76 ], [ %53, %78 ], [ %53, %80 ], [ %53, %82 ], [ %53, %84 ], [ %53, %86 ], [ %53, %88 ], [ %53, %90 ], [ %53, %92 ], [ %53, %94 ], [ %53, %96 ], [ %99, %98 ], [ %53, %100 ], [ %53, %102 ], [ %53, %104 ], [ %53, %106 ], [ %53, %108 ], [ %53, %110 ], [ %53, %112 ], [ %53, %114 ], [ %53, %116 ], [ %53, %118 ], [ %53, %120 ], [ %53, %122 ], [ %53, %68 ]
  %139 = phi i32 [ %54, %72 ], [ %54, %74 ], [ %54, %76 ], [ %54, %78 ], [ %54, %80 ], [ %54, %82 ], [ %54, %84 ], [ %54, %86 ], [ %54, %88 ], [ %54, %90 ], [ %54, %92 ], [ %54, %94 ], [ %54, %96 ], [ %54, %98 ], [ %101, %100 ], [ %54, %102 ], [ %54, %104 ], [ %54, %106 ], [ %54, %108 ], [ %54, %110 ], [ %54, %112 ], [ %54, %114 ], [ %54, %116 ], [ %54, %118 ], [ %54, %120 ], [ %54, %122 ], [ %54, %68 ]
  %140 = phi i32 [ %55, %72 ], [ %55, %74 ], [ %55, %76 ], [ %55, %78 ], [ %55, %80 ], [ %55, %82 ], [ %55, %84 ], [ %55, %86 ], [ %55, %88 ], [ %55, %90 ], [ %55, %92 ], [ %55, %94 ], [ %55, %96 ], [ %55, %98 ], [ %55, %100 ], [ %103, %102 ], [ %55, %104 ], [ %55, %106 ], [ %55, %108 ], [ %55, %110 ], [ %55, %112 ], [ %55, %114 ], [ %55, %116 ], [ %55, %118 ], [ %55, %120 ], [ %55, %122 ], [ %55, %68 ]
  %141 = phi i32 [ %56, %72 ], [ %56, %74 ], [ %56, %76 ], [ %56, %78 ], [ %56, %80 ], [ %56, %82 ], [ %56, %84 ], [ %56, %86 ], [ %56, %88 ], [ %56, %90 ], [ %56, %92 ], [ %56, %94 ], [ %56, %96 ], [ %56, %98 ], [ %56, %100 ], [ %56, %102 ], [ %105, %104 ], [ %56, %106 ], [ %56, %108 ], [ %56, %110 ], [ %56, %112 ], [ %56, %114 ], [ %56, %116 ], [ %56, %118 ], [ %56, %120 ], [ %56, %122 ], [ %56, %68 ]
  %142 = phi i32 [ %57, %72 ], [ %57, %74 ], [ %57, %76 ], [ %57, %78 ], [ %57, %80 ], [ %57, %82 ], [ %57, %84 ], [ %57, %86 ], [ %57, %88 ], [ %57, %90 ], [ %57, %92 ], [ %57, %94 ], [ %57, %96 ], [ %57, %98 ], [ %57, %100 ], [ %57, %102 ], [ %57, %104 ], [ %107, %106 ], [ %57, %108 ], [ %57, %110 ], [ %57, %112 ], [ %57, %114 ], [ %57, %116 ], [ %57, %118 ], [ %57, %120 ], [ %57, %122 ], [ %57, %68 ]
  %143 = phi i32 [ %58, %72 ], [ %58, %74 ], [ %58, %76 ], [ %58, %78 ], [ %58, %80 ], [ %58, %82 ], [ %58, %84 ], [ %58, %86 ], [ %58, %88 ], [ %58, %90 ], [ %58, %92 ], [ %58, %94 ], [ %58, %96 ], [ %58, %98 ], [ %58, %100 ], [ %58, %102 ], [ %58, %104 ], [ %58, %106 ], [ %109, %108 ], [ %58, %110 ], [ %58, %112 ], [ %58, %114 ], [ %58, %116 ], [ %58, %118 ], [ %58, %120 ], [ %58, %122 ], [ %58, %68 ]
  %144 = phi i32 [ %59, %72 ], [ %59, %74 ], [ %59, %76 ], [ %59, %78 ], [ %59, %80 ], [ %59, %82 ], [ %59, %84 ], [ %59, %86 ], [ %59, %88 ], [ %59, %90 ], [ %59, %92 ], [ %59, %94 ], [ %59, %96 ], [ %59, %98 ], [ %59, %100 ], [ %59, %102 ], [ %59, %104 ], [ %59, %106 ], [ %59, %108 ], [ %111, %110 ], [ %59, %112 ], [ %59, %114 ], [ %59, %116 ], [ %59, %118 ], [ %59, %120 ], [ %59, %122 ], [ %59, %68 ]
  %145 = phi i32 [ %60, %72 ], [ %60, %74 ], [ %60, %76 ], [ %60, %78 ], [ %60, %80 ], [ %60, %82 ], [ %60, %84 ], [ %60, %86 ], [ %60, %88 ], [ %60, %90 ], [ %60, %92 ], [ %60, %94 ], [ %60, %96 ], [ %60, %98 ], [ %60, %100 ], [ %60, %102 ], [ %60, %104 ], [ %60, %106 ], [ %60, %108 ], [ %60, %110 ], [ %113, %112 ], [ %60, %114 ], [ %60, %116 ], [ %60, %118 ], [ %60, %120 ], [ %60, %122 ], [ %60, %68 ]
  %146 = phi i32 [ %61, %72 ], [ %61, %74 ], [ %61, %76 ], [ %61, %78 ], [ %61, %80 ], [ %61, %82 ], [ %61, %84 ], [ %61, %86 ], [ %61, %88 ], [ %61, %90 ], [ %61, %92 ], [ %61, %94 ], [ %61, %96 ], [ %61, %98 ], [ %61, %100 ], [ %61, %102 ], [ %61, %104 ], [ %61, %106 ], [ %61, %108 ], [ %61, %110 ], [ %61, %112 ], [ %115, %114 ], [ %61, %116 ], [ %61, %118 ], [ %61, %120 ], [ %61, %122 ], [ %61, %68 ]
  %147 = phi i32 [ %62, %72 ], [ %62, %74 ], [ %62, %76 ], [ %62, %78 ], [ %62, %80 ], [ %62, %82 ], [ %62, %84 ], [ %62, %86 ], [ %62, %88 ], [ %62, %90 ], [ %62, %92 ], [ %62, %94 ], [ %62, %96 ], [ %62, %98 ], [ %62, %100 ], [ %62, %102 ], [ %62, %104 ], [ %62, %106 ], [ %62, %108 ], [ %62, %110 ], [ %62, %112 ], [ %62, %114 ], [ %117, %116 ], [ %62, %118 ], [ %62, %120 ], [ %62, %122 ], [ %62, %68 ]
  %148 = phi i32 [ %63, %72 ], [ %63, %74 ], [ %63, %76 ], [ %63, %78 ], [ %63, %80 ], [ %63, %82 ], [ %63, %84 ], [ %63, %86 ], [ %63, %88 ], [ %63, %90 ], [ %63, %92 ], [ %63, %94 ], [ %63, %96 ], [ %63, %98 ], [ %63, %100 ], [ %63, %102 ], [ %63, %104 ], [ %63, %106 ], [ %63, %108 ], [ %63, %110 ], [ %63, %112 ], [ %63, %114 ], [ %63, %116 ], [ %119, %118 ], [ %63, %120 ], [ %63, %122 ], [ %63, %68 ]
  %149 = phi i32 [ %64, %72 ], [ %64, %74 ], [ %64, %76 ], [ %64, %78 ], [ %64, %80 ], [ %64, %82 ], [ %64, %84 ], [ %64, %86 ], [ %64, %88 ], [ %64, %90 ], [ %64, %92 ], [ %64, %94 ], [ %64, %96 ], [ %64, %98 ], [ %64, %100 ], [ %64, %102 ], [ %64, %104 ], [ %64, %106 ], [ %64, %108 ], [ %64, %110 ], [ %64, %112 ], [ %64, %114 ], [ %64, %116 ], [ %64, %118 ], [ %121, %120 ], [ %64, %122 ], [ %64, %68 ]
  %150 = phi i32 [ %65, %72 ], [ %65, %74 ], [ %65, %76 ], [ %65, %78 ], [ %65, %80 ], [ %65, %82 ], [ %65, %84 ], [ %65, %86 ], [ %65, %88 ], [ %65, %90 ], [ %65, %92 ], [ %65, %94 ], [ %65, %96 ], [ %65, %98 ], [ %65, %100 ], [ %65, %102 ], [ %65, %104 ], [ %65, %106 ], [ %65, %108 ], [ %65, %110 ], [ %65, %112 ], [ %65, %114 ], [ %65, %116 ], [ %65, %118 ], [ %65, %120 ], [ %123, %122 ], [ %65, %68 ]
  %151 = add nuw nsw i64 %66, 1
  br label %39, !llvm.loop !12

152:                                              ; preds = %39, %165
  %153 = phi i64 [ %167, %165 ], [ 0, %39 ]
  %154 = phi i32 [ %166, %165 ], [ 0, %39 ]
  %155 = icmp eq i64 %153, 26
  br i1 %155, label %168, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds [26 x i32], [26 x i32]* %2, i64 0, i64 %153
  %158 = load i32, i32* %157, align 4, !tbaa !10
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %165, label %160

160:                                              ; preds = %156
  %161 = trunc i64 %153 to i32
  %162 = add i32 %161, 97
  %163 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 %162, i32 %158) #7
  %164 = add nsw i32 %154, 1
  br label %165

165:                                              ; preds = %160, %156
  %166 = phi i32 [ %164, %160 ], [ %154, %156 ]
  %167 = add nuw nsw i64 %153, 1
  br label %152, !llvm.loop !13

168:                                              ; preds = %152
  %169 = icmp eq i32 %154, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %168
  %171 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %172

172:                                              ; preds = %170, %168
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 300, i8* nonnull %3) #5
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: minsize optsize
declare i32 @gets(...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { minsize nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { minsize optsize "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #4 = { minsize nofree nounwind optsize "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }
attributes #6 = { minsize nounwind optsize }
attributes #7 = { minsize optsize }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.mustprogress"}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !6, i64 0}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !9}
