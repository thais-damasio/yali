; ModuleID = 'source-C-CXX/99/214.c'
source_filename = "source-C-CXX/99/214.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"No\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%c=%d\0A\00", align 1

; Function Attrs: minsize nofree nounwind optsize sspstrong uwtable
define dso_local void @main() local_unnamed_addr #0 {
  %1 = alloca [27 x i32], align 16
  %2 = bitcast [27 x i32]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 108, i8* nonnull %2) #4
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(108) %2, i8 0, i64 108, i1 false)
  %3 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 26
  %4 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 25
  %5 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 24
  %6 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 23
  %7 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 22
  %8 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 21
  %9 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 20
  %10 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 19
  %11 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 18
  %12 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 17
  %13 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 16
  %14 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 15
  %15 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 14
  %16 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 13
  %17 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 12
  %18 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 11
  %19 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 10
  %20 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 9
  %21 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 8
  %22 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 7
  %23 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 6
  %24 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 5
  %25 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 4
  %26 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 3
  %27 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 2
  %28 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 1
  br label %29

29:                                               ; preds = %63, %0
  %30 = phi i32 [ 0, %0 ], [ %64, %63 ]
  %31 = phi i32 [ 0, %0 ], [ %65, %63 ]
  %32 = phi i32 [ 0, %0 ], [ %66, %63 ]
  %33 = phi i32 [ 0, %0 ], [ %67, %63 ]
  %34 = phi i32 [ 0, %0 ], [ %68, %63 ]
  %35 = phi i32 [ 0, %0 ], [ %69, %63 ]
  %36 = phi i32 [ 0, %0 ], [ %70, %63 ]
  %37 = phi i32 [ 0, %0 ], [ %71, %63 ]
  %38 = phi i32 [ 0, %0 ], [ %72, %63 ]
  %39 = phi i32 [ 0, %0 ], [ %73, %63 ]
  %40 = phi i32 [ 0, %0 ], [ %74, %63 ]
  %41 = phi i32 [ 0, %0 ], [ %75, %63 ]
  %42 = phi i32 [ 0, %0 ], [ %76, %63 ]
  %43 = phi i32 [ 0, %0 ], [ %77, %63 ]
  %44 = phi i32 [ 0, %0 ], [ %78, %63 ]
  %45 = phi i32 [ 0, %0 ], [ %79, %63 ]
  %46 = phi i32 [ 0, %0 ], [ %80, %63 ]
  %47 = phi i32 [ 0, %0 ], [ %81, %63 ]
  %48 = phi i32 [ 0, %0 ], [ %82, %63 ]
  %49 = phi i32 [ 0, %0 ], [ %83, %63 ]
  %50 = phi i32 [ 0, %0 ], [ %84, %63 ]
  %51 = phi i32 [ 0, %0 ], [ %85, %63 ]
  %52 = phi i32 [ 0, %0 ], [ %86, %63 ]
  %53 = phi i32 [ 0, %0 ], [ %87, %63 ]
  %54 = phi i32 [ 0, %0 ], [ %88, %63 ]
  %55 = phi i32 [ 0, %0 ], [ %89, %63 ]
  %56 = tail call i32 @getchar() #5
  %57 = shl i32 %56, 24
  %58 = icmp eq i32 %57, 167772160
  br i1 %58, label %140, label %59

59:                                               ; preds = %29
  %60 = ashr exact i32 %57, 24
  switch i32 %60, label %63 [
    i32 97, label %61
    i32 98, label %90
    i32 99, label %92
    i32 100, label %94
    i32 101, label %96
    i32 102, label %98
    i32 103, label %100
    i32 104, label %102
    i32 105, label %104
    i32 106, label %106
    i32 107, label %108
    i32 108, label %110
    i32 109, label %112
    i32 110, label %114
    i32 111, label %116
    i32 112, label %118
    i32 113, label %120
    i32 114, label %122
    i32 115, label %124
    i32 116, label %126
    i32 117, label %128
    i32 118, label %130
    i32 119, label %132
    i32 120, label %134
    i32 121, label %136
    i32 122, label %138
  ]

61:                                               ; preds = %59
  %62 = add nsw i32 %30, 1
  store i32 %62, i32* %28, align 4, !tbaa !5
  br label %63

63:                                               ; preds = %61, %90, %92, %94, %96, %98, %100, %102, %104, %106, %108, %110, %112, %114, %116, %118, %120, %122, %124, %126, %128, %130, %132, %134, %136, %138, %59
  %64 = phi i32 [ %62, %61 ], [ %30, %90 ], [ %30, %92 ], [ %30, %94 ], [ %30, %96 ], [ %30, %98 ], [ %30, %100 ], [ %30, %102 ], [ %30, %104 ], [ %30, %106 ], [ %30, %108 ], [ %30, %110 ], [ %30, %112 ], [ %30, %114 ], [ %30, %116 ], [ %30, %118 ], [ %30, %120 ], [ %30, %122 ], [ %30, %124 ], [ %30, %126 ], [ %30, %128 ], [ %30, %130 ], [ %30, %132 ], [ %30, %134 ], [ %30, %136 ], [ %30, %138 ], [ %30, %59 ]
  %65 = phi i32 [ %31, %61 ], [ %91, %90 ], [ %31, %92 ], [ %31, %94 ], [ %31, %96 ], [ %31, %98 ], [ %31, %100 ], [ %31, %102 ], [ %31, %104 ], [ %31, %106 ], [ %31, %108 ], [ %31, %110 ], [ %31, %112 ], [ %31, %114 ], [ %31, %116 ], [ %31, %118 ], [ %31, %120 ], [ %31, %122 ], [ %31, %124 ], [ %31, %126 ], [ %31, %128 ], [ %31, %130 ], [ %31, %132 ], [ %31, %134 ], [ %31, %136 ], [ %31, %138 ], [ %31, %59 ]
  %66 = phi i32 [ %32, %61 ], [ %32, %90 ], [ %93, %92 ], [ %32, %94 ], [ %32, %96 ], [ %32, %98 ], [ %32, %100 ], [ %32, %102 ], [ %32, %104 ], [ %32, %106 ], [ %32, %108 ], [ %32, %110 ], [ %32, %112 ], [ %32, %114 ], [ %32, %116 ], [ %32, %118 ], [ %32, %120 ], [ %32, %122 ], [ %32, %124 ], [ %32, %126 ], [ %32, %128 ], [ %32, %130 ], [ %32, %132 ], [ %32, %134 ], [ %32, %136 ], [ %32, %138 ], [ %32, %59 ]
  %67 = phi i32 [ %33, %61 ], [ %33, %90 ], [ %33, %92 ], [ %95, %94 ], [ %33, %96 ], [ %33, %98 ], [ %33, %100 ], [ %33, %102 ], [ %33, %104 ], [ %33, %106 ], [ %33, %108 ], [ %33, %110 ], [ %33, %112 ], [ %33, %114 ], [ %33, %116 ], [ %33, %118 ], [ %33, %120 ], [ %33, %122 ], [ %33, %124 ], [ %33, %126 ], [ %33, %128 ], [ %33, %130 ], [ %33, %132 ], [ %33, %134 ], [ %33, %136 ], [ %33, %138 ], [ %33, %59 ]
  %68 = phi i32 [ %34, %61 ], [ %34, %90 ], [ %34, %92 ], [ %34, %94 ], [ %97, %96 ], [ %34, %98 ], [ %34, %100 ], [ %34, %102 ], [ %34, %104 ], [ %34, %106 ], [ %34, %108 ], [ %34, %110 ], [ %34, %112 ], [ %34, %114 ], [ %34, %116 ], [ %34, %118 ], [ %34, %120 ], [ %34, %122 ], [ %34, %124 ], [ %34, %126 ], [ %34, %128 ], [ %34, %130 ], [ %34, %132 ], [ %34, %134 ], [ %34, %136 ], [ %34, %138 ], [ %34, %59 ]
  %69 = phi i32 [ %35, %61 ], [ %35, %90 ], [ %35, %92 ], [ %35, %94 ], [ %35, %96 ], [ %99, %98 ], [ %35, %100 ], [ %35, %102 ], [ %35, %104 ], [ %35, %106 ], [ %35, %108 ], [ %35, %110 ], [ %35, %112 ], [ %35, %114 ], [ %35, %116 ], [ %35, %118 ], [ %35, %120 ], [ %35, %122 ], [ %35, %124 ], [ %35, %126 ], [ %35, %128 ], [ %35, %130 ], [ %35, %132 ], [ %35, %134 ], [ %35, %136 ], [ %35, %138 ], [ %35, %59 ]
  %70 = phi i32 [ %36, %61 ], [ %36, %90 ], [ %36, %92 ], [ %36, %94 ], [ %36, %96 ], [ %36, %98 ], [ %101, %100 ], [ %36, %102 ], [ %36, %104 ], [ %36, %106 ], [ %36, %108 ], [ %36, %110 ], [ %36, %112 ], [ %36, %114 ], [ %36, %116 ], [ %36, %118 ], [ %36, %120 ], [ %36, %122 ], [ %36, %124 ], [ %36, %126 ], [ %36, %128 ], [ %36, %130 ], [ %36, %132 ], [ %36, %134 ], [ %36, %136 ], [ %36, %138 ], [ %36, %59 ]
  %71 = phi i32 [ %37, %61 ], [ %37, %90 ], [ %37, %92 ], [ %37, %94 ], [ %37, %96 ], [ %37, %98 ], [ %37, %100 ], [ %103, %102 ], [ %37, %104 ], [ %37, %106 ], [ %37, %108 ], [ %37, %110 ], [ %37, %112 ], [ %37, %114 ], [ %37, %116 ], [ %37, %118 ], [ %37, %120 ], [ %37, %122 ], [ %37, %124 ], [ %37, %126 ], [ %37, %128 ], [ %37, %130 ], [ %37, %132 ], [ %37, %134 ], [ %37, %136 ], [ %37, %138 ], [ %37, %59 ]
  %72 = phi i32 [ %38, %61 ], [ %38, %90 ], [ %38, %92 ], [ %38, %94 ], [ %38, %96 ], [ %38, %98 ], [ %38, %100 ], [ %38, %102 ], [ %105, %104 ], [ %38, %106 ], [ %38, %108 ], [ %38, %110 ], [ %38, %112 ], [ %38, %114 ], [ %38, %116 ], [ %38, %118 ], [ %38, %120 ], [ %38, %122 ], [ %38, %124 ], [ %38, %126 ], [ %38, %128 ], [ %38, %130 ], [ %38, %132 ], [ %38, %134 ], [ %38, %136 ], [ %38, %138 ], [ %38, %59 ]
  %73 = phi i32 [ %39, %61 ], [ %39, %90 ], [ %39, %92 ], [ %39, %94 ], [ %39, %96 ], [ %39, %98 ], [ %39, %100 ], [ %39, %102 ], [ %39, %104 ], [ %107, %106 ], [ %39, %108 ], [ %39, %110 ], [ %39, %112 ], [ %39, %114 ], [ %39, %116 ], [ %39, %118 ], [ %39, %120 ], [ %39, %122 ], [ %39, %124 ], [ %39, %126 ], [ %39, %128 ], [ %39, %130 ], [ %39, %132 ], [ %39, %134 ], [ %39, %136 ], [ %39, %138 ], [ %39, %59 ]
  %74 = phi i32 [ %40, %61 ], [ %40, %90 ], [ %40, %92 ], [ %40, %94 ], [ %40, %96 ], [ %40, %98 ], [ %40, %100 ], [ %40, %102 ], [ %40, %104 ], [ %40, %106 ], [ %109, %108 ], [ %40, %110 ], [ %40, %112 ], [ %40, %114 ], [ %40, %116 ], [ %40, %118 ], [ %40, %120 ], [ %40, %122 ], [ %40, %124 ], [ %40, %126 ], [ %40, %128 ], [ %40, %130 ], [ %40, %132 ], [ %40, %134 ], [ %40, %136 ], [ %40, %138 ], [ %40, %59 ]
  %75 = phi i32 [ %41, %61 ], [ %41, %90 ], [ %41, %92 ], [ %41, %94 ], [ %41, %96 ], [ %41, %98 ], [ %41, %100 ], [ %41, %102 ], [ %41, %104 ], [ %41, %106 ], [ %41, %108 ], [ %111, %110 ], [ %41, %112 ], [ %41, %114 ], [ %41, %116 ], [ %41, %118 ], [ %41, %120 ], [ %41, %122 ], [ %41, %124 ], [ %41, %126 ], [ %41, %128 ], [ %41, %130 ], [ %41, %132 ], [ %41, %134 ], [ %41, %136 ], [ %41, %138 ], [ %41, %59 ]
  %76 = phi i32 [ %42, %61 ], [ %42, %90 ], [ %42, %92 ], [ %42, %94 ], [ %42, %96 ], [ %42, %98 ], [ %42, %100 ], [ %42, %102 ], [ %42, %104 ], [ %42, %106 ], [ %42, %108 ], [ %42, %110 ], [ %113, %112 ], [ %42, %114 ], [ %42, %116 ], [ %42, %118 ], [ %42, %120 ], [ %42, %122 ], [ %42, %124 ], [ %42, %126 ], [ %42, %128 ], [ %42, %130 ], [ %42, %132 ], [ %42, %134 ], [ %42, %136 ], [ %42, %138 ], [ %42, %59 ]
  %77 = phi i32 [ %43, %61 ], [ %43, %90 ], [ %43, %92 ], [ %43, %94 ], [ %43, %96 ], [ %43, %98 ], [ %43, %100 ], [ %43, %102 ], [ %43, %104 ], [ %43, %106 ], [ %43, %108 ], [ %43, %110 ], [ %43, %112 ], [ %115, %114 ], [ %43, %116 ], [ %43, %118 ], [ %43, %120 ], [ %43, %122 ], [ %43, %124 ], [ %43, %126 ], [ %43, %128 ], [ %43, %130 ], [ %43, %132 ], [ %43, %134 ], [ %43, %136 ], [ %43, %138 ], [ %43, %59 ]
  %78 = phi i32 [ %44, %61 ], [ %44, %90 ], [ %44, %92 ], [ %44, %94 ], [ %44, %96 ], [ %44, %98 ], [ %44, %100 ], [ %44, %102 ], [ %44, %104 ], [ %44, %106 ], [ %44, %108 ], [ %44, %110 ], [ %44, %112 ], [ %44, %114 ], [ %117, %116 ], [ %44, %118 ], [ %44, %120 ], [ %44, %122 ], [ %44, %124 ], [ %44, %126 ], [ %44, %128 ], [ %44, %130 ], [ %44, %132 ], [ %44, %134 ], [ %44, %136 ], [ %44, %138 ], [ %44, %59 ]
  %79 = phi i32 [ %45, %61 ], [ %45, %90 ], [ %45, %92 ], [ %45, %94 ], [ %45, %96 ], [ %45, %98 ], [ %45, %100 ], [ %45, %102 ], [ %45, %104 ], [ %45, %106 ], [ %45, %108 ], [ %45, %110 ], [ %45, %112 ], [ %45, %114 ], [ %45, %116 ], [ %119, %118 ], [ %45, %120 ], [ %45, %122 ], [ %45, %124 ], [ %45, %126 ], [ %45, %128 ], [ %45, %130 ], [ %45, %132 ], [ %45, %134 ], [ %45, %136 ], [ %45, %138 ], [ %45, %59 ]
  %80 = phi i32 [ %46, %61 ], [ %46, %90 ], [ %46, %92 ], [ %46, %94 ], [ %46, %96 ], [ %46, %98 ], [ %46, %100 ], [ %46, %102 ], [ %46, %104 ], [ %46, %106 ], [ %46, %108 ], [ %46, %110 ], [ %46, %112 ], [ %46, %114 ], [ %46, %116 ], [ %46, %118 ], [ %121, %120 ], [ %46, %122 ], [ %46, %124 ], [ %46, %126 ], [ %46, %128 ], [ %46, %130 ], [ %46, %132 ], [ %46, %134 ], [ %46, %136 ], [ %46, %138 ], [ %46, %59 ]
  %81 = phi i32 [ %47, %61 ], [ %47, %90 ], [ %47, %92 ], [ %47, %94 ], [ %47, %96 ], [ %47, %98 ], [ %47, %100 ], [ %47, %102 ], [ %47, %104 ], [ %47, %106 ], [ %47, %108 ], [ %47, %110 ], [ %47, %112 ], [ %47, %114 ], [ %47, %116 ], [ %47, %118 ], [ %47, %120 ], [ %123, %122 ], [ %47, %124 ], [ %47, %126 ], [ %47, %128 ], [ %47, %130 ], [ %47, %132 ], [ %47, %134 ], [ %47, %136 ], [ %47, %138 ], [ %47, %59 ]
  %82 = phi i32 [ %48, %61 ], [ %48, %90 ], [ %48, %92 ], [ %48, %94 ], [ %48, %96 ], [ %48, %98 ], [ %48, %100 ], [ %48, %102 ], [ %48, %104 ], [ %48, %106 ], [ %48, %108 ], [ %48, %110 ], [ %48, %112 ], [ %48, %114 ], [ %48, %116 ], [ %48, %118 ], [ %48, %120 ], [ %48, %122 ], [ %125, %124 ], [ %48, %126 ], [ %48, %128 ], [ %48, %130 ], [ %48, %132 ], [ %48, %134 ], [ %48, %136 ], [ %48, %138 ], [ %48, %59 ]
  %83 = phi i32 [ %49, %61 ], [ %49, %90 ], [ %49, %92 ], [ %49, %94 ], [ %49, %96 ], [ %49, %98 ], [ %49, %100 ], [ %49, %102 ], [ %49, %104 ], [ %49, %106 ], [ %49, %108 ], [ %49, %110 ], [ %49, %112 ], [ %49, %114 ], [ %49, %116 ], [ %49, %118 ], [ %49, %120 ], [ %49, %122 ], [ %49, %124 ], [ %127, %126 ], [ %49, %128 ], [ %49, %130 ], [ %49, %132 ], [ %49, %134 ], [ %49, %136 ], [ %49, %138 ], [ %49, %59 ]
  %84 = phi i32 [ %50, %61 ], [ %50, %90 ], [ %50, %92 ], [ %50, %94 ], [ %50, %96 ], [ %50, %98 ], [ %50, %100 ], [ %50, %102 ], [ %50, %104 ], [ %50, %106 ], [ %50, %108 ], [ %50, %110 ], [ %50, %112 ], [ %50, %114 ], [ %50, %116 ], [ %50, %118 ], [ %50, %120 ], [ %50, %122 ], [ %50, %124 ], [ %50, %126 ], [ %129, %128 ], [ %50, %130 ], [ %50, %132 ], [ %50, %134 ], [ %50, %136 ], [ %50, %138 ], [ %50, %59 ]
  %85 = phi i32 [ %51, %61 ], [ %51, %90 ], [ %51, %92 ], [ %51, %94 ], [ %51, %96 ], [ %51, %98 ], [ %51, %100 ], [ %51, %102 ], [ %51, %104 ], [ %51, %106 ], [ %51, %108 ], [ %51, %110 ], [ %51, %112 ], [ %51, %114 ], [ %51, %116 ], [ %51, %118 ], [ %51, %120 ], [ %51, %122 ], [ %51, %124 ], [ %51, %126 ], [ %51, %128 ], [ %131, %130 ], [ %51, %132 ], [ %51, %134 ], [ %51, %136 ], [ %51, %138 ], [ %51, %59 ]
  %86 = phi i32 [ %52, %61 ], [ %52, %90 ], [ %52, %92 ], [ %52, %94 ], [ %52, %96 ], [ %52, %98 ], [ %52, %100 ], [ %52, %102 ], [ %52, %104 ], [ %52, %106 ], [ %52, %108 ], [ %52, %110 ], [ %52, %112 ], [ %52, %114 ], [ %52, %116 ], [ %52, %118 ], [ %52, %120 ], [ %52, %122 ], [ %52, %124 ], [ %52, %126 ], [ %52, %128 ], [ %52, %130 ], [ %133, %132 ], [ %52, %134 ], [ %52, %136 ], [ %52, %138 ], [ %52, %59 ]
  %87 = phi i32 [ %53, %61 ], [ %53, %90 ], [ %53, %92 ], [ %53, %94 ], [ %53, %96 ], [ %53, %98 ], [ %53, %100 ], [ %53, %102 ], [ %53, %104 ], [ %53, %106 ], [ %53, %108 ], [ %53, %110 ], [ %53, %112 ], [ %53, %114 ], [ %53, %116 ], [ %53, %118 ], [ %53, %120 ], [ %53, %122 ], [ %53, %124 ], [ %53, %126 ], [ %53, %128 ], [ %53, %130 ], [ %53, %132 ], [ %135, %134 ], [ %53, %136 ], [ %53, %138 ], [ %53, %59 ]
  %88 = phi i32 [ %54, %61 ], [ %54, %90 ], [ %54, %92 ], [ %54, %94 ], [ %54, %96 ], [ %54, %98 ], [ %54, %100 ], [ %54, %102 ], [ %54, %104 ], [ %54, %106 ], [ %54, %108 ], [ %54, %110 ], [ %54, %112 ], [ %54, %114 ], [ %54, %116 ], [ %54, %118 ], [ %54, %120 ], [ %54, %122 ], [ %54, %124 ], [ %54, %126 ], [ %54, %128 ], [ %54, %130 ], [ %54, %132 ], [ %54, %134 ], [ %137, %136 ], [ %54, %138 ], [ %54, %59 ]
  %89 = phi i32 [ %55, %61 ], [ %55, %90 ], [ %55, %92 ], [ %55, %94 ], [ %55, %96 ], [ %55, %98 ], [ %55, %100 ], [ %55, %102 ], [ %55, %104 ], [ %55, %106 ], [ %55, %108 ], [ %55, %110 ], [ %55, %112 ], [ %55, %114 ], [ %55, %116 ], [ %55, %118 ], [ %55, %120 ], [ %55, %122 ], [ %55, %124 ], [ %55, %126 ], [ %55, %128 ], [ %55, %130 ], [ %55, %132 ], [ %55, %134 ], [ %55, %136 ], [ %139, %138 ], [ %55, %59 ]
  br label %29, !llvm.loop !9

90:                                               ; preds = %59
  %91 = add nsw i32 %31, 1
  store i32 %91, i32* %27, align 8, !tbaa !5
  br label %63

92:                                               ; preds = %59
  %93 = add nsw i32 %32, 1
  store i32 %93, i32* %26, align 4, !tbaa !5
  br label %63

94:                                               ; preds = %59
  %95 = add nsw i32 %33, 1
  store i32 %95, i32* %25, align 16, !tbaa !5
  br label %63

96:                                               ; preds = %59
  %97 = add nsw i32 %34, 1
  store i32 %97, i32* %24, align 4, !tbaa !5
  br label %63

98:                                               ; preds = %59
  %99 = add nsw i32 %35, 1
  store i32 %99, i32* %23, align 8, !tbaa !5
  br label %63

100:                                              ; preds = %59
  %101 = add nsw i32 %36, 1
  store i32 %101, i32* %22, align 4, !tbaa !5
  br label %63

102:                                              ; preds = %59
  %103 = add nsw i32 %37, 1
  store i32 %103, i32* %21, align 16, !tbaa !5
  br label %63

104:                                              ; preds = %59
  %105 = add nsw i32 %38, 1
  store i32 %105, i32* %20, align 4, !tbaa !5
  br label %63

106:                                              ; preds = %59
  %107 = add nsw i32 %39, 1
  store i32 %107, i32* %19, align 8, !tbaa !5
  br label %63

108:                                              ; preds = %59
  %109 = add nsw i32 %40, 1
  store i32 %109, i32* %18, align 4, !tbaa !5
  br label %63

110:                                              ; preds = %59
  %111 = add nsw i32 %41, 1
  store i32 %111, i32* %17, align 16, !tbaa !5
  br label %63

112:                                              ; preds = %59
  %113 = add nsw i32 %42, 1
  store i32 %113, i32* %16, align 4, !tbaa !5
  br label %63

114:                                              ; preds = %59
  %115 = add nsw i32 %43, 1
  store i32 %115, i32* %15, align 8, !tbaa !5
  br label %63

116:                                              ; preds = %59
  %117 = add nsw i32 %44, 1
  store i32 %117, i32* %14, align 4, !tbaa !5
  br label %63

118:                                              ; preds = %59
  %119 = add nsw i32 %45, 1
  store i32 %119, i32* %13, align 16, !tbaa !5
  br label %63

120:                                              ; preds = %59
  %121 = add nsw i32 %46, 1
  store i32 %121, i32* %12, align 4, !tbaa !5
  br label %63

122:                                              ; preds = %59
  %123 = add nsw i32 %47, 1
  store i32 %123, i32* %11, align 8, !tbaa !5
  br label %63

124:                                              ; preds = %59
  %125 = add nsw i32 %48, 1
  store i32 %125, i32* %10, align 4, !tbaa !5
  br label %63

126:                                              ; preds = %59
  %127 = add nsw i32 %49, 1
  store i32 %127, i32* %9, align 16, !tbaa !5
  br label %63

128:                                              ; preds = %59
  %129 = add nsw i32 %50, 1
  store i32 %129, i32* %8, align 4, !tbaa !5
  br label %63

130:                                              ; preds = %59
  %131 = add nsw i32 %51, 1
  store i32 %131, i32* %7, align 8, !tbaa !5
  br label %63

132:                                              ; preds = %59
  %133 = add nsw i32 %52, 1
  store i32 %133, i32* %6, align 4, !tbaa !5
  br label %63

134:                                              ; preds = %59
  %135 = add nsw i32 %53, 1
  store i32 %135, i32* %5, align 16, !tbaa !5
  br label %63

136:                                              ; preds = %59
  %137 = add nsw i32 %54, 1
  store i32 %137, i32* %4, align 4, !tbaa !5
  br label %63

138:                                              ; preds = %59
  %139 = add nsw i32 %55, 1
  store i32 %139, i32* %3, align 8, !tbaa !5
  br label %63

140:                                              ; preds = %29, %144
  %141 = phi i64 [ %148, %144 ], [ 1, %29 ]
  %142 = phi i32 [ %147, %144 ], [ 0, %29 ]
  %143 = icmp eq i64 %141, 27
  br i1 %143, label %149, label %144

144:                                              ; preds = %140
  %145 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 %141
  %146 = load i32, i32* %145, align 4, !tbaa !5
  %147 = add nsw i32 %146, %142
  %148 = add nuw nsw i64 %141, 1
  br label %140, !llvm.loop !11

149:                                              ; preds = %140
  %150 = icmp eq i32 %142, 0
  br i1 %150, label %151, label %153

151:                                              ; preds = %149
  %152 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)) #5
  br label %166

153:                                              ; preds = %149, %164
  %154 = phi i64 [ %165, %164 ], [ 1, %149 ]
  %155 = icmp eq i64 %154, 27
  br i1 %155, label %166, label %156

156:                                              ; preds = %153
  %157 = getelementptr inbounds [27 x i32], [27 x i32]* %1, i64 0, i64 %154
  %158 = load i32, i32* %157, align 4, !tbaa !5
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %164, label %160

160:                                              ; preds = %156
  %161 = trunc i64 %154 to i32
  %162 = add i32 %161, 96
  %163 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %162, i32 %158) #5
  br label %164

164:                                              ; preds = %156, %160
  %165 = add nuw nsw i64 %154, 1
  br label %153, !llvm.loop !12

166:                                              ; preds = %153, %151
  call void @llvm.lifetime.end.p0i8(i64 108, i8* nonnull %2) #4
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @getchar() local_unnamed_addr #3

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { minsize nofree nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { minsize nofree nounwind optsize "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }
attributes #5 = { minsize optsize }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !10}
