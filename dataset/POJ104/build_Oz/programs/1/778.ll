; ModuleID = 'source-C-CXX/1/778.c'
source_filename = "source-C-CXX/1/778.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@__const.main.b = private unnamed_addr constant [26 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ", align 16
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%c\0A%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: minsize nofree nounwind optsize sspstrong uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1000 x [26 x i8]], align 16
  %3 = alloca [1000 x i32], align 16
  %4 = alloca i32, align 4
  %5 = alloca [26 x i32], align 16
  %6 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #5
  %7 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 26000, i8* nonnull %7) #5
  %8 = bitcast [1000 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4000, i8* nonnull %8) #5
  %9 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #5
  %10 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %1) #6
  br label %11

11:                                               ; preds = %15, %0
  %12 = phi i32 [ 0, %0 ], [ %20, %15 ]
  store i32 %12, i32* %4, align 4, !tbaa !5
  %13 = load i32, i32* %1, align 4, !tbaa !5
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %21

15:                                               ; preds = %11
  %16 = zext i32 %12 to i64
  %17 = getelementptr inbounds [1000 x i32], [1000 x i32]* %3, i64 0, i64 %16
  %18 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 %16, i64 0
  %19 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %17, i8* nonnull %18) #6
  %20 = add nuw nsw i32 %12, 1
  br label %11, !llvm.loop !9

21:                                               ; preds = %11
  %22 = bitcast [26 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %22) #5
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(104) %22, i8 0, i64 104, i1 false)
  %23 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 25
  %24 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 24
  %25 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 23
  %26 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 22
  %27 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 21
  %28 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 20
  %29 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 19
  %30 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 18
  %31 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 17
  %32 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 16
  %33 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 15
  %34 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 14
  %35 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 13
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 12
  %37 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 11
  %38 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 10
  %39 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 9
  %40 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 8
  %41 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 7
  %42 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 6
  %43 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 5
  %44 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 4
  %45 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 3
  %46 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 2
  %47 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 1
  %48 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 0
  %49 = call i32 @llvm.smax.i32(i32 %13, i32 0)
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %190, %21
  %52 = phi i32 [ %81, %190 ], [ 0, %21 ]
  %53 = phi i32 [ %82, %190 ], [ 0, %21 ]
  %54 = phi i32 [ %83, %190 ], [ 0, %21 ]
  %55 = phi i32 [ %84, %190 ], [ 0, %21 ]
  %56 = phi i32 [ %85, %190 ], [ 0, %21 ]
  %57 = phi i32 [ %86, %190 ], [ 0, %21 ]
  %58 = phi i32 [ %87, %190 ], [ 0, %21 ]
  %59 = phi i32 [ %88, %190 ], [ 0, %21 ]
  %60 = phi i32 [ %89, %190 ], [ 0, %21 ]
  %61 = phi i32 [ %90, %190 ], [ 0, %21 ]
  %62 = phi i32 [ %91, %190 ], [ 0, %21 ]
  %63 = phi i32 [ %92, %190 ], [ 0, %21 ]
  %64 = phi i32 [ %93, %190 ], [ 0, %21 ]
  %65 = phi i32 [ %94, %190 ], [ 0, %21 ]
  %66 = phi i32 [ %95, %190 ], [ 0, %21 ]
  %67 = phi i32 [ %96, %190 ], [ 0, %21 ]
  %68 = phi i32 [ %97, %190 ], [ 0, %21 ]
  %69 = phi i32 [ %98, %190 ], [ 0, %21 ]
  %70 = phi i32 [ %99, %190 ], [ 0, %21 ]
  %71 = phi i32 [ %100, %190 ], [ 0, %21 ]
  %72 = phi i32 [ %101, %190 ], [ 0, %21 ]
  %73 = phi i32 [ %102, %190 ], [ 0, %21 ]
  %74 = phi i32 [ %103, %190 ], [ 0, %21 ]
  %75 = phi i32 [ %104, %190 ], [ 0, %21 ]
  %76 = phi i32 [ %105, %190 ], [ 0, %21 ]
  %77 = phi i32 [ %106, %190 ], [ 0, %21 ]
  %78 = phi i64 [ %191, %190 ], [ 0, %21 ]
  %79 = icmp eq i64 %78, %50
  br i1 %79, label %192, label %80

80:                                               ; preds = %51, %162
  %81 = phi i32 [ %163, %162 ], [ %52, %51 ]
  %82 = phi i32 [ %164, %162 ], [ %53, %51 ]
  %83 = phi i32 [ %165, %162 ], [ %54, %51 ]
  %84 = phi i32 [ %166, %162 ], [ %55, %51 ]
  %85 = phi i32 [ %167, %162 ], [ %56, %51 ]
  %86 = phi i32 [ %168, %162 ], [ %57, %51 ]
  %87 = phi i32 [ %169, %162 ], [ %58, %51 ]
  %88 = phi i32 [ %170, %162 ], [ %59, %51 ]
  %89 = phi i32 [ %171, %162 ], [ %60, %51 ]
  %90 = phi i32 [ %172, %162 ], [ %61, %51 ]
  %91 = phi i32 [ %173, %162 ], [ %62, %51 ]
  %92 = phi i32 [ %174, %162 ], [ %63, %51 ]
  %93 = phi i32 [ %175, %162 ], [ %64, %51 ]
  %94 = phi i32 [ %176, %162 ], [ %65, %51 ]
  %95 = phi i32 [ %177, %162 ], [ %66, %51 ]
  %96 = phi i32 [ %178, %162 ], [ %67, %51 ]
  %97 = phi i32 [ %179, %162 ], [ %68, %51 ]
  %98 = phi i32 [ %180, %162 ], [ %69, %51 ]
  %99 = phi i32 [ %181, %162 ], [ %70, %51 ]
  %100 = phi i32 [ %182, %162 ], [ %71, %51 ]
  %101 = phi i32 [ %183, %162 ], [ %72, %51 ]
  %102 = phi i32 [ %184, %162 ], [ %73, %51 ]
  %103 = phi i32 [ %185, %162 ], [ %74, %51 ]
  %104 = phi i32 [ %186, %162 ], [ %75, %51 ]
  %105 = phi i32 [ %187, %162 ], [ %76, %51 ]
  %106 = phi i32 [ %188, %162 ], [ %77, %51 ]
  %107 = phi i64 [ %189, %162 ], [ 0, %51 ]
  %108 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 %78, i64 %107
  %109 = load i8, i8* %108, align 1, !tbaa !11
  switch i8 %109, label %162 [
    i8 0, label %190
    i8 65, label %110
    i8 66, label %112
    i8 67, label %114
    i8 68, label %116
    i8 69, label %118
    i8 70, label %120
    i8 71, label %122
    i8 72, label %124
    i8 73, label %126
    i8 74, label %128
    i8 75, label %130
    i8 76, label %132
    i8 77, label %134
    i8 78, label %136
    i8 79, label %138
    i8 80, label %140
    i8 81, label %142
    i8 82, label %144
    i8 83, label %146
    i8 84, label %148
    i8 85, label %150
    i8 86, label %152
    i8 87, label %154
    i8 88, label %156
    i8 89, label %158
    i8 90, label %160
  ]

110:                                              ; preds = %80
  %111 = add nsw i32 %106, 1
  store i32 %111, i32* %48, align 16, !tbaa !5
  br label %162

112:                                              ; preds = %80
  %113 = add nsw i32 %81, 1
  store i32 %113, i32* %47, align 4, !tbaa !5
  br label %162

114:                                              ; preds = %80
  %115 = add nsw i32 %82, 1
  store i32 %115, i32* %46, align 8, !tbaa !5
  br label %162

116:                                              ; preds = %80
  %117 = add nsw i32 %83, 1
  store i32 %117, i32* %45, align 4, !tbaa !5
  br label %162

118:                                              ; preds = %80
  %119 = add nsw i32 %84, 1
  store i32 %119, i32* %44, align 16, !tbaa !5
  br label %162

120:                                              ; preds = %80
  %121 = add nsw i32 %85, 1
  store i32 %121, i32* %43, align 4, !tbaa !5
  br label %162

122:                                              ; preds = %80
  %123 = add nsw i32 %86, 1
  store i32 %123, i32* %42, align 8, !tbaa !5
  br label %162

124:                                              ; preds = %80
  %125 = add nsw i32 %87, 1
  store i32 %125, i32* %41, align 4, !tbaa !5
  br label %162

126:                                              ; preds = %80
  %127 = add nsw i32 %88, 1
  store i32 %127, i32* %40, align 16, !tbaa !5
  br label %162

128:                                              ; preds = %80
  %129 = add nsw i32 %89, 1
  store i32 %129, i32* %39, align 4, !tbaa !5
  br label %162

130:                                              ; preds = %80
  %131 = add nsw i32 %90, 1
  store i32 %131, i32* %38, align 8, !tbaa !5
  br label %162

132:                                              ; preds = %80
  %133 = add nsw i32 %91, 1
  store i32 %133, i32* %37, align 4, !tbaa !5
  br label %162

134:                                              ; preds = %80
  %135 = add nsw i32 %92, 1
  store i32 %135, i32* %36, align 16, !tbaa !5
  br label %162

136:                                              ; preds = %80
  %137 = add nsw i32 %93, 1
  store i32 %137, i32* %35, align 4, !tbaa !5
  br label %162

138:                                              ; preds = %80
  %139 = add nsw i32 %94, 1
  store i32 %139, i32* %34, align 8, !tbaa !5
  br label %162

140:                                              ; preds = %80
  %141 = add nsw i32 %95, 1
  store i32 %141, i32* %33, align 4, !tbaa !5
  br label %162

142:                                              ; preds = %80
  %143 = add nsw i32 %96, 1
  store i32 %143, i32* %32, align 16, !tbaa !5
  br label %162

144:                                              ; preds = %80
  %145 = add nsw i32 %97, 1
  store i32 %145, i32* %31, align 4, !tbaa !5
  br label %162

146:                                              ; preds = %80
  %147 = add nsw i32 %98, 1
  store i32 %147, i32* %30, align 8, !tbaa !5
  br label %162

148:                                              ; preds = %80
  %149 = add nsw i32 %99, 1
  store i32 %149, i32* %29, align 4, !tbaa !5
  br label %162

150:                                              ; preds = %80
  %151 = add nsw i32 %100, 1
  store i32 %151, i32* %28, align 16, !tbaa !5
  br label %162

152:                                              ; preds = %80
  %153 = add nsw i32 %101, 1
  store i32 %153, i32* %27, align 4, !tbaa !5
  br label %162

154:                                              ; preds = %80
  %155 = add nsw i32 %102, 1
  store i32 %155, i32* %26, align 8, !tbaa !5
  br label %162

156:                                              ; preds = %80
  %157 = add nsw i32 %103, 1
  store i32 %157, i32* %25, align 4, !tbaa !5
  br label %162

158:                                              ; preds = %80
  %159 = add nsw i32 %104, 1
  store i32 %159, i32* %24, align 16, !tbaa !5
  br label %162

160:                                              ; preds = %80
  %161 = add nsw i32 %105, 1
  store i32 %161, i32* %23, align 4, !tbaa !5
  br label %162

162:                                              ; preds = %80, %112, %110, %114, %116, %118, %120, %122, %124, %126, %128, %130, %132, %134, %136, %138, %140, %142, %144, %146, %148, %150, %152, %154, %156, %158, %160
  %163 = phi i32 [ %81, %80 ], [ %113, %112 ], [ %81, %110 ], [ %81, %114 ], [ %81, %116 ], [ %81, %118 ], [ %81, %120 ], [ %81, %122 ], [ %81, %124 ], [ %81, %126 ], [ %81, %128 ], [ %81, %130 ], [ %81, %132 ], [ %81, %134 ], [ %81, %136 ], [ %81, %138 ], [ %81, %140 ], [ %81, %142 ], [ %81, %144 ], [ %81, %146 ], [ %81, %148 ], [ %81, %150 ], [ %81, %152 ], [ %81, %154 ], [ %81, %156 ], [ %81, %158 ], [ %81, %160 ]
  %164 = phi i32 [ %82, %80 ], [ %82, %112 ], [ %82, %110 ], [ %115, %114 ], [ %82, %116 ], [ %82, %118 ], [ %82, %120 ], [ %82, %122 ], [ %82, %124 ], [ %82, %126 ], [ %82, %128 ], [ %82, %130 ], [ %82, %132 ], [ %82, %134 ], [ %82, %136 ], [ %82, %138 ], [ %82, %140 ], [ %82, %142 ], [ %82, %144 ], [ %82, %146 ], [ %82, %148 ], [ %82, %150 ], [ %82, %152 ], [ %82, %154 ], [ %82, %156 ], [ %82, %158 ], [ %82, %160 ]
  %165 = phi i32 [ %83, %80 ], [ %83, %112 ], [ %83, %110 ], [ %83, %114 ], [ %117, %116 ], [ %83, %118 ], [ %83, %120 ], [ %83, %122 ], [ %83, %124 ], [ %83, %126 ], [ %83, %128 ], [ %83, %130 ], [ %83, %132 ], [ %83, %134 ], [ %83, %136 ], [ %83, %138 ], [ %83, %140 ], [ %83, %142 ], [ %83, %144 ], [ %83, %146 ], [ %83, %148 ], [ %83, %150 ], [ %83, %152 ], [ %83, %154 ], [ %83, %156 ], [ %83, %158 ], [ %83, %160 ]
  %166 = phi i32 [ %84, %80 ], [ %84, %112 ], [ %84, %110 ], [ %84, %114 ], [ %84, %116 ], [ %119, %118 ], [ %84, %120 ], [ %84, %122 ], [ %84, %124 ], [ %84, %126 ], [ %84, %128 ], [ %84, %130 ], [ %84, %132 ], [ %84, %134 ], [ %84, %136 ], [ %84, %138 ], [ %84, %140 ], [ %84, %142 ], [ %84, %144 ], [ %84, %146 ], [ %84, %148 ], [ %84, %150 ], [ %84, %152 ], [ %84, %154 ], [ %84, %156 ], [ %84, %158 ], [ %84, %160 ]
  %167 = phi i32 [ %85, %80 ], [ %85, %112 ], [ %85, %110 ], [ %85, %114 ], [ %85, %116 ], [ %85, %118 ], [ %121, %120 ], [ %85, %122 ], [ %85, %124 ], [ %85, %126 ], [ %85, %128 ], [ %85, %130 ], [ %85, %132 ], [ %85, %134 ], [ %85, %136 ], [ %85, %138 ], [ %85, %140 ], [ %85, %142 ], [ %85, %144 ], [ %85, %146 ], [ %85, %148 ], [ %85, %150 ], [ %85, %152 ], [ %85, %154 ], [ %85, %156 ], [ %85, %158 ], [ %85, %160 ]
  %168 = phi i32 [ %86, %80 ], [ %86, %112 ], [ %86, %110 ], [ %86, %114 ], [ %86, %116 ], [ %86, %118 ], [ %86, %120 ], [ %123, %122 ], [ %86, %124 ], [ %86, %126 ], [ %86, %128 ], [ %86, %130 ], [ %86, %132 ], [ %86, %134 ], [ %86, %136 ], [ %86, %138 ], [ %86, %140 ], [ %86, %142 ], [ %86, %144 ], [ %86, %146 ], [ %86, %148 ], [ %86, %150 ], [ %86, %152 ], [ %86, %154 ], [ %86, %156 ], [ %86, %158 ], [ %86, %160 ]
  %169 = phi i32 [ %87, %80 ], [ %87, %112 ], [ %87, %110 ], [ %87, %114 ], [ %87, %116 ], [ %87, %118 ], [ %87, %120 ], [ %87, %122 ], [ %125, %124 ], [ %87, %126 ], [ %87, %128 ], [ %87, %130 ], [ %87, %132 ], [ %87, %134 ], [ %87, %136 ], [ %87, %138 ], [ %87, %140 ], [ %87, %142 ], [ %87, %144 ], [ %87, %146 ], [ %87, %148 ], [ %87, %150 ], [ %87, %152 ], [ %87, %154 ], [ %87, %156 ], [ %87, %158 ], [ %87, %160 ]
  %170 = phi i32 [ %88, %80 ], [ %88, %112 ], [ %88, %110 ], [ %88, %114 ], [ %88, %116 ], [ %88, %118 ], [ %88, %120 ], [ %88, %122 ], [ %88, %124 ], [ %127, %126 ], [ %88, %128 ], [ %88, %130 ], [ %88, %132 ], [ %88, %134 ], [ %88, %136 ], [ %88, %138 ], [ %88, %140 ], [ %88, %142 ], [ %88, %144 ], [ %88, %146 ], [ %88, %148 ], [ %88, %150 ], [ %88, %152 ], [ %88, %154 ], [ %88, %156 ], [ %88, %158 ], [ %88, %160 ]
  %171 = phi i32 [ %89, %80 ], [ %89, %112 ], [ %89, %110 ], [ %89, %114 ], [ %89, %116 ], [ %89, %118 ], [ %89, %120 ], [ %89, %122 ], [ %89, %124 ], [ %89, %126 ], [ %129, %128 ], [ %89, %130 ], [ %89, %132 ], [ %89, %134 ], [ %89, %136 ], [ %89, %138 ], [ %89, %140 ], [ %89, %142 ], [ %89, %144 ], [ %89, %146 ], [ %89, %148 ], [ %89, %150 ], [ %89, %152 ], [ %89, %154 ], [ %89, %156 ], [ %89, %158 ], [ %89, %160 ]
  %172 = phi i32 [ %90, %80 ], [ %90, %112 ], [ %90, %110 ], [ %90, %114 ], [ %90, %116 ], [ %90, %118 ], [ %90, %120 ], [ %90, %122 ], [ %90, %124 ], [ %90, %126 ], [ %90, %128 ], [ %131, %130 ], [ %90, %132 ], [ %90, %134 ], [ %90, %136 ], [ %90, %138 ], [ %90, %140 ], [ %90, %142 ], [ %90, %144 ], [ %90, %146 ], [ %90, %148 ], [ %90, %150 ], [ %90, %152 ], [ %90, %154 ], [ %90, %156 ], [ %90, %158 ], [ %90, %160 ]
  %173 = phi i32 [ %91, %80 ], [ %91, %112 ], [ %91, %110 ], [ %91, %114 ], [ %91, %116 ], [ %91, %118 ], [ %91, %120 ], [ %91, %122 ], [ %91, %124 ], [ %91, %126 ], [ %91, %128 ], [ %91, %130 ], [ %133, %132 ], [ %91, %134 ], [ %91, %136 ], [ %91, %138 ], [ %91, %140 ], [ %91, %142 ], [ %91, %144 ], [ %91, %146 ], [ %91, %148 ], [ %91, %150 ], [ %91, %152 ], [ %91, %154 ], [ %91, %156 ], [ %91, %158 ], [ %91, %160 ]
  %174 = phi i32 [ %92, %80 ], [ %92, %112 ], [ %92, %110 ], [ %92, %114 ], [ %92, %116 ], [ %92, %118 ], [ %92, %120 ], [ %92, %122 ], [ %92, %124 ], [ %92, %126 ], [ %92, %128 ], [ %92, %130 ], [ %92, %132 ], [ %135, %134 ], [ %92, %136 ], [ %92, %138 ], [ %92, %140 ], [ %92, %142 ], [ %92, %144 ], [ %92, %146 ], [ %92, %148 ], [ %92, %150 ], [ %92, %152 ], [ %92, %154 ], [ %92, %156 ], [ %92, %158 ], [ %92, %160 ]
  %175 = phi i32 [ %93, %80 ], [ %93, %112 ], [ %93, %110 ], [ %93, %114 ], [ %93, %116 ], [ %93, %118 ], [ %93, %120 ], [ %93, %122 ], [ %93, %124 ], [ %93, %126 ], [ %93, %128 ], [ %93, %130 ], [ %93, %132 ], [ %93, %134 ], [ %137, %136 ], [ %93, %138 ], [ %93, %140 ], [ %93, %142 ], [ %93, %144 ], [ %93, %146 ], [ %93, %148 ], [ %93, %150 ], [ %93, %152 ], [ %93, %154 ], [ %93, %156 ], [ %93, %158 ], [ %93, %160 ]
  %176 = phi i32 [ %94, %80 ], [ %94, %112 ], [ %94, %110 ], [ %94, %114 ], [ %94, %116 ], [ %94, %118 ], [ %94, %120 ], [ %94, %122 ], [ %94, %124 ], [ %94, %126 ], [ %94, %128 ], [ %94, %130 ], [ %94, %132 ], [ %94, %134 ], [ %94, %136 ], [ %139, %138 ], [ %94, %140 ], [ %94, %142 ], [ %94, %144 ], [ %94, %146 ], [ %94, %148 ], [ %94, %150 ], [ %94, %152 ], [ %94, %154 ], [ %94, %156 ], [ %94, %158 ], [ %94, %160 ]
  %177 = phi i32 [ %95, %80 ], [ %95, %112 ], [ %95, %110 ], [ %95, %114 ], [ %95, %116 ], [ %95, %118 ], [ %95, %120 ], [ %95, %122 ], [ %95, %124 ], [ %95, %126 ], [ %95, %128 ], [ %95, %130 ], [ %95, %132 ], [ %95, %134 ], [ %95, %136 ], [ %95, %138 ], [ %141, %140 ], [ %95, %142 ], [ %95, %144 ], [ %95, %146 ], [ %95, %148 ], [ %95, %150 ], [ %95, %152 ], [ %95, %154 ], [ %95, %156 ], [ %95, %158 ], [ %95, %160 ]
  %178 = phi i32 [ %96, %80 ], [ %96, %112 ], [ %96, %110 ], [ %96, %114 ], [ %96, %116 ], [ %96, %118 ], [ %96, %120 ], [ %96, %122 ], [ %96, %124 ], [ %96, %126 ], [ %96, %128 ], [ %96, %130 ], [ %96, %132 ], [ %96, %134 ], [ %96, %136 ], [ %96, %138 ], [ %96, %140 ], [ %143, %142 ], [ %96, %144 ], [ %96, %146 ], [ %96, %148 ], [ %96, %150 ], [ %96, %152 ], [ %96, %154 ], [ %96, %156 ], [ %96, %158 ], [ %96, %160 ]
  %179 = phi i32 [ %97, %80 ], [ %97, %112 ], [ %97, %110 ], [ %97, %114 ], [ %97, %116 ], [ %97, %118 ], [ %97, %120 ], [ %97, %122 ], [ %97, %124 ], [ %97, %126 ], [ %97, %128 ], [ %97, %130 ], [ %97, %132 ], [ %97, %134 ], [ %97, %136 ], [ %97, %138 ], [ %97, %140 ], [ %97, %142 ], [ %145, %144 ], [ %97, %146 ], [ %97, %148 ], [ %97, %150 ], [ %97, %152 ], [ %97, %154 ], [ %97, %156 ], [ %97, %158 ], [ %97, %160 ]
  %180 = phi i32 [ %98, %80 ], [ %98, %112 ], [ %98, %110 ], [ %98, %114 ], [ %98, %116 ], [ %98, %118 ], [ %98, %120 ], [ %98, %122 ], [ %98, %124 ], [ %98, %126 ], [ %98, %128 ], [ %98, %130 ], [ %98, %132 ], [ %98, %134 ], [ %98, %136 ], [ %98, %138 ], [ %98, %140 ], [ %98, %142 ], [ %98, %144 ], [ %147, %146 ], [ %98, %148 ], [ %98, %150 ], [ %98, %152 ], [ %98, %154 ], [ %98, %156 ], [ %98, %158 ], [ %98, %160 ]
  %181 = phi i32 [ %99, %80 ], [ %99, %112 ], [ %99, %110 ], [ %99, %114 ], [ %99, %116 ], [ %99, %118 ], [ %99, %120 ], [ %99, %122 ], [ %99, %124 ], [ %99, %126 ], [ %99, %128 ], [ %99, %130 ], [ %99, %132 ], [ %99, %134 ], [ %99, %136 ], [ %99, %138 ], [ %99, %140 ], [ %99, %142 ], [ %99, %144 ], [ %99, %146 ], [ %149, %148 ], [ %99, %150 ], [ %99, %152 ], [ %99, %154 ], [ %99, %156 ], [ %99, %158 ], [ %99, %160 ]
  %182 = phi i32 [ %100, %80 ], [ %100, %112 ], [ %100, %110 ], [ %100, %114 ], [ %100, %116 ], [ %100, %118 ], [ %100, %120 ], [ %100, %122 ], [ %100, %124 ], [ %100, %126 ], [ %100, %128 ], [ %100, %130 ], [ %100, %132 ], [ %100, %134 ], [ %100, %136 ], [ %100, %138 ], [ %100, %140 ], [ %100, %142 ], [ %100, %144 ], [ %100, %146 ], [ %100, %148 ], [ %151, %150 ], [ %100, %152 ], [ %100, %154 ], [ %100, %156 ], [ %100, %158 ], [ %100, %160 ]
  %183 = phi i32 [ %101, %80 ], [ %101, %112 ], [ %101, %110 ], [ %101, %114 ], [ %101, %116 ], [ %101, %118 ], [ %101, %120 ], [ %101, %122 ], [ %101, %124 ], [ %101, %126 ], [ %101, %128 ], [ %101, %130 ], [ %101, %132 ], [ %101, %134 ], [ %101, %136 ], [ %101, %138 ], [ %101, %140 ], [ %101, %142 ], [ %101, %144 ], [ %101, %146 ], [ %101, %148 ], [ %101, %150 ], [ %153, %152 ], [ %101, %154 ], [ %101, %156 ], [ %101, %158 ], [ %101, %160 ]
  %184 = phi i32 [ %102, %80 ], [ %102, %112 ], [ %102, %110 ], [ %102, %114 ], [ %102, %116 ], [ %102, %118 ], [ %102, %120 ], [ %102, %122 ], [ %102, %124 ], [ %102, %126 ], [ %102, %128 ], [ %102, %130 ], [ %102, %132 ], [ %102, %134 ], [ %102, %136 ], [ %102, %138 ], [ %102, %140 ], [ %102, %142 ], [ %102, %144 ], [ %102, %146 ], [ %102, %148 ], [ %102, %150 ], [ %102, %152 ], [ %155, %154 ], [ %102, %156 ], [ %102, %158 ], [ %102, %160 ]
  %185 = phi i32 [ %103, %80 ], [ %103, %112 ], [ %103, %110 ], [ %103, %114 ], [ %103, %116 ], [ %103, %118 ], [ %103, %120 ], [ %103, %122 ], [ %103, %124 ], [ %103, %126 ], [ %103, %128 ], [ %103, %130 ], [ %103, %132 ], [ %103, %134 ], [ %103, %136 ], [ %103, %138 ], [ %103, %140 ], [ %103, %142 ], [ %103, %144 ], [ %103, %146 ], [ %103, %148 ], [ %103, %150 ], [ %103, %152 ], [ %103, %154 ], [ %157, %156 ], [ %103, %158 ], [ %103, %160 ]
  %186 = phi i32 [ %104, %80 ], [ %104, %112 ], [ %104, %110 ], [ %104, %114 ], [ %104, %116 ], [ %104, %118 ], [ %104, %120 ], [ %104, %122 ], [ %104, %124 ], [ %104, %126 ], [ %104, %128 ], [ %104, %130 ], [ %104, %132 ], [ %104, %134 ], [ %104, %136 ], [ %104, %138 ], [ %104, %140 ], [ %104, %142 ], [ %104, %144 ], [ %104, %146 ], [ %104, %148 ], [ %104, %150 ], [ %104, %152 ], [ %104, %154 ], [ %104, %156 ], [ %159, %158 ], [ %104, %160 ]
  %187 = phi i32 [ %105, %80 ], [ %105, %112 ], [ %105, %110 ], [ %105, %114 ], [ %105, %116 ], [ %105, %118 ], [ %105, %120 ], [ %105, %122 ], [ %105, %124 ], [ %105, %126 ], [ %105, %128 ], [ %105, %130 ], [ %105, %132 ], [ %105, %134 ], [ %105, %136 ], [ %105, %138 ], [ %105, %140 ], [ %105, %142 ], [ %105, %144 ], [ %105, %146 ], [ %105, %148 ], [ %105, %150 ], [ %105, %152 ], [ %105, %154 ], [ %105, %156 ], [ %105, %158 ], [ %161, %160 ]
  %188 = phi i32 [ %106, %80 ], [ %106, %112 ], [ %111, %110 ], [ %106, %114 ], [ %106, %116 ], [ %106, %118 ], [ %106, %120 ], [ %106, %122 ], [ %106, %124 ], [ %106, %126 ], [ %106, %128 ], [ %106, %130 ], [ %106, %132 ], [ %106, %134 ], [ %106, %136 ], [ %106, %138 ], [ %106, %140 ], [ %106, %142 ], [ %106, %144 ], [ %106, %146 ], [ %106, %148 ], [ %106, %150 ], [ %106, %152 ], [ %106, %154 ], [ %106, %156 ], [ %106, %158 ], [ %106, %160 ]
  %189 = add nuw i64 %107, 1
  br label %80, !llvm.loop !12

190:                                              ; preds = %80
  %191 = add nuw nsw i64 %78, 1
  br label %51, !llvm.loop !13

192:                                              ; preds = %51, %197
  %193 = phi i64 [ %204, %197 ], [ 0, %51 ]
  %194 = phi i32 [ %201, %197 ], [ %77, %51 ]
  %195 = phi i32 [ %203, %197 ], [ 0, %51 ]
  %196 = icmp eq i64 %193, 26
  br i1 %196, label %205, label %197

197:                                              ; preds = %192
  %198 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 %193
  %199 = load i32, i32* %198, align 4, !tbaa !5
  %200 = icmp sgt i32 %199, %194
  %201 = select i1 %200, i32 %199, i32 %194
  %202 = trunc i64 %193 to i32
  %203 = select i1 %200, i32 %202, i32 %195
  %204 = add nuw nsw i64 %193, 1
  br label %192, !llvm.loop !14

205:                                              ; preds = %192
  store i32 26, i32* %4, align 4, !tbaa !5
  %206 = sext i32 %195 to i64
  %207 = getelementptr inbounds [26 x i8], [26 x i8]* @__const.main.b, i64 0, i64 %206
  %208 = load i8, i8* %207, align 1, !tbaa !11
  %209 = sext i8 %208 to i32
  %210 = getelementptr inbounds [26 x i32], [26 x i32]* %5, i64 0, i64 %206
  %211 = load i32, i32* %210, align 4, !tbaa !5
  %212 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 %209, i32 %211) #6
  br label %213

213:                                              ; preds = %232, %205
  %214 = phi i32 [ 0, %205 ], [ %233, %232 ]
  store i32 %214, i32* %4, align 4, !tbaa !5
  %215 = load i32, i32* %1, align 4, !tbaa !5
  %216 = icmp slt i32 %214, %215
  br i1 %216, label %217, label %234

217:                                              ; preds = %213
  %218 = zext i32 %214 to i64
  %219 = getelementptr inbounds [1000 x i32], [1000 x i32]* %3, i64 0, i64 %218
  br label %220

220:                                              ; preds = %217, %230
  %221 = phi i64 [ 0, %217 ], [ %231, %230 ]
  %222 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %2, i64 0, i64 %218, i64 %221
  %223 = load i8, i8* %222, align 1, !tbaa !11
  %224 = icmp eq i8 %223, 0
  br i1 %224, label %232, label %225

225:                                              ; preds = %220
  %226 = icmp eq i8 %223, %208
  br i1 %226, label %227, label %230

227:                                              ; preds = %225
  %228 = load i32, i32* %219, align 4, !tbaa !5
  %229 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %228) #6
  br label %230

230:                                              ; preds = %225, %227
  %231 = add nuw i64 %221, 1
  br label %220, !llvm.loop !15

232:                                              ; preds = %220
  %233 = add nuw nsw i32 %214, 1
  br label %213, !llvm.loop !16

234:                                              ; preds = %213
  %235 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %22) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 4000, i8* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 26000, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #5
  ret i32 0
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smax.i32(i32, i32) #4

attributes #0 = { minsize nofree nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { minsize nofree nounwind optsize "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #4 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #5 = { nounwind }
attributes #6 = { minsize optsize }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!7, !7, i64 0}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !10}
!15 = distinct !{!15, !10}
!16 = distinct !{!16, !10}
