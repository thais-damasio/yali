; ModuleID = 'source-C-CXX/1/1120.c'
source_filename = "source-C-CXX/1/1120.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.shu = type { i32, [26 x i8] }

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%d %s\00", align 1
@__const.main.b = private unnamed_addr constant [26 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ", align 16
@.str.2 = private unnamed_addr constant [4 x i8] c"%c\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: minsize nofree nounwind optsize sspstrong uwtable
define dso_local void @main() local_unnamed_addr #0 {
  %1 = alloca [999 x %struct.shu], align 16
  %2 = alloca i32, align 4
  %3 = alloca [26 x i32], align 16
  %4 = bitcast [999 x %struct.shu]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 31968, i8* nonnull %4) #5
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #5
  %6 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %2) #6
  br label %7

7:                                                ; preds = %12, %0
  %8 = phi i64 [ %16, %12 ], [ 0, %0 ]
  %9 = load i32, i32* %2, align 4, !tbaa !5
  %10 = sext i32 %9 to i64
  %11 = icmp slt i64 %8, %10
  br i1 %11, label %12, label %17

12:                                               ; preds = %7
  %13 = getelementptr inbounds [999 x %struct.shu], [999 x %struct.shu]* %1, i64 0, i64 %8, i32 0
  %14 = getelementptr inbounds [999 x %struct.shu], [999 x %struct.shu]* %1, i64 0, i64 %8, i32 1, i64 0
  %15 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %13, i8* nonnull %14) #6
  %16 = add nuw nsw i64 %8, 1
  br label %7, !llvm.loop !9

17:                                               ; preds = %7
  %18 = bitcast [26 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %18) #5
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(104) %18, i8 0, i64 104, i1 false)
  %19 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 25
  %20 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 24
  %21 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 23
  %22 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 22
  %23 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 21
  %24 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 20
  %25 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 19
  %26 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 18
  %27 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 17
  %28 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 16
  %29 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 15
  %30 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 14
  %31 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 13
  %32 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 12
  %33 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 11
  %34 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 10
  %35 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 9
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 8
  %37 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 7
  %38 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 6
  %39 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 5
  %40 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 4
  %41 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 3
  %42 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 2
  %43 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 1
  %44 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 0
  %45 = call i32 @llvm.smax.i32(i32 %9, i32 0)
  %46 = zext i32 %45 to i64
  br label %47

47:                                               ; preds = %188, %17
  %48 = phi i32 [ %77, %188 ], [ 0, %17 ]
  %49 = phi i32 [ %78, %188 ], [ 0, %17 ]
  %50 = phi i32 [ %79, %188 ], [ 0, %17 ]
  %51 = phi i32 [ %80, %188 ], [ 0, %17 ]
  %52 = phi i32 [ %81, %188 ], [ 0, %17 ]
  %53 = phi i32 [ %82, %188 ], [ 0, %17 ]
  %54 = phi i32 [ %83, %188 ], [ 0, %17 ]
  %55 = phi i32 [ %84, %188 ], [ 0, %17 ]
  %56 = phi i32 [ %85, %188 ], [ 0, %17 ]
  %57 = phi i32 [ %86, %188 ], [ 0, %17 ]
  %58 = phi i32 [ %87, %188 ], [ 0, %17 ]
  %59 = phi i32 [ %88, %188 ], [ 0, %17 ]
  %60 = phi i32 [ %89, %188 ], [ 0, %17 ]
  %61 = phi i32 [ %90, %188 ], [ 0, %17 ]
  %62 = phi i32 [ %91, %188 ], [ 0, %17 ]
  %63 = phi i32 [ %92, %188 ], [ 0, %17 ]
  %64 = phi i32 [ %93, %188 ], [ 0, %17 ]
  %65 = phi i32 [ %94, %188 ], [ 0, %17 ]
  %66 = phi i32 [ %95, %188 ], [ 0, %17 ]
  %67 = phi i32 [ %96, %188 ], [ 0, %17 ]
  %68 = phi i32 [ %97, %188 ], [ 0, %17 ]
  %69 = phi i32 [ %98, %188 ], [ 0, %17 ]
  %70 = phi i32 [ %99, %188 ], [ 0, %17 ]
  %71 = phi i32 [ %100, %188 ], [ 0, %17 ]
  %72 = phi i32 [ %101, %188 ], [ 0, %17 ]
  %73 = phi i32 [ %102, %188 ], [ 0, %17 ]
  %74 = phi i64 [ %189, %188 ], [ 0, %17 ]
  %75 = icmp eq i64 %74, %46
  br i1 %75, label %190, label %76

76:                                               ; preds = %47, %160
  %77 = phi i32 [ %161, %160 ], [ %48, %47 ]
  %78 = phi i32 [ %162, %160 ], [ %49, %47 ]
  %79 = phi i32 [ %163, %160 ], [ %50, %47 ]
  %80 = phi i32 [ %164, %160 ], [ %51, %47 ]
  %81 = phi i32 [ %165, %160 ], [ %52, %47 ]
  %82 = phi i32 [ %166, %160 ], [ %53, %47 ]
  %83 = phi i32 [ %167, %160 ], [ %54, %47 ]
  %84 = phi i32 [ %168, %160 ], [ %55, %47 ]
  %85 = phi i32 [ %169, %160 ], [ %56, %47 ]
  %86 = phi i32 [ %170, %160 ], [ %57, %47 ]
  %87 = phi i32 [ %171, %160 ], [ %58, %47 ]
  %88 = phi i32 [ %172, %160 ], [ %59, %47 ]
  %89 = phi i32 [ %173, %160 ], [ %60, %47 ]
  %90 = phi i32 [ %174, %160 ], [ %61, %47 ]
  %91 = phi i32 [ %175, %160 ], [ %62, %47 ]
  %92 = phi i32 [ %176, %160 ], [ %63, %47 ]
  %93 = phi i32 [ %177, %160 ], [ %64, %47 ]
  %94 = phi i32 [ %178, %160 ], [ %65, %47 ]
  %95 = phi i32 [ %179, %160 ], [ %66, %47 ]
  %96 = phi i32 [ %180, %160 ], [ %67, %47 ]
  %97 = phi i32 [ %181, %160 ], [ %68, %47 ]
  %98 = phi i32 [ %182, %160 ], [ %69, %47 ]
  %99 = phi i32 [ %183, %160 ], [ %70, %47 ]
  %100 = phi i32 [ %184, %160 ], [ %71, %47 ]
  %101 = phi i32 [ %185, %160 ], [ %72, %47 ]
  %102 = phi i32 [ %186, %160 ], [ %73, %47 ]
  %103 = phi i64 [ %187, %160 ], [ 0, %47 ]
  %104 = icmp eq i64 %103, 26
  br i1 %104, label %188, label %105

105:                                              ; preds = %76
  %106 = getelementptr inbounds [999 x %struct.shu], [999 x %struct.shu]* %1, i64 0, i64 %74, i32 1, i64 %103
  %107 = load i8, i8* %106, align 1, !tbaa !11
  switch i8 %107, label %160 [
    i8 65, label %108
    i8 66, label %110
    i8 67, label %112
    i8 68, label %114
    i8 69, label %116
    i8 70, label %118
    i8 71, label %120
    i8 72, label %122
    i8 73, label %124
    i8 74, label %126
    i8 75, label %128
    i8 76, label %130
    i8 77, label %132
    i8 78, label %134
    i8 79, label %136
    i8 80, label %138
    i8 81, label %140
    i8 82, label %142
    i8 83, label %144
    i8 84, label %146
    i8 85, label %148
    i8 86, label %150
    i8 87, label %152
    i8 88, label %154
    i8 89, label %156
    i8 90, label %158
  ]

108:                                              ; preds = %105
  %109 = add nsw i32 %102, 1
  store i32 %109, i32* %44, align 16, !tbaa !5
  br label %160

110:                                              ; preds = %105
  %111 = add nsw i32 %77, 1
  store i32 %111, i32* %43, align 4, !tbaa !5
  br label %160

112:                                              ; preds = %105
  %113 = add nsw i32 %78, 1
  store i32 %113, i32* %42, align 8, !tbaa !5
  br label %160

114:                                              ; preds = %105
  %115 = add nsw i32 %79, 1
  store i32 %115, i32* %41, align 4, !tbaa !5
  br label %160

116:                                              ; preds = %105
  %117 = add nsw i32 %80, 1
  store i32 %117, i32* %40, align 16, !tbaa !5
  br label %160

118:                                              ; preds = %105
  %119 = add nsw i32 %81, 1
  store i32 %119, i32* %39, align 4, !tbaa !5
  br label %160

120:                                              ; preds = %105
  %121 = add nsw i32 %82, 1
  store i32 %121, i32* %38, align 8, !tbaa !5
  br label %160

122:                                              ; preds = %105
  %123 = add nsw i32 %83, 1
  store i32 %123, i32* %37, align 4, !tbaa !5
  br label %160

124:                                              ; preds = %105
  %125 = add nsw i32 %84, 1
  store i32 %125, i32* %36, align 16, !tbaa !5
  br label %160

126:                                              ; preds = %105
  %127 = add nsw i32 %85, 1
  store i32 %127, i32* %35, align 4, !tbaa !5
  br label %160

128:                                              ; preds = %105
  %129 = add nsw i32 %86, 1
  store i32 %129, i32* %34, align 8, !tbaa !5
  br label %160

130:                                              ; preds = %105
  %131 = add nsw i32 %87, 1
  store i32 %131, i32* %33, align 4, !tbaa !5
  br label %160

132:                                              ; preds = %105
  %133 = add nsw i32 %88, 1
  store i32 %133, i32* %32, align 16, !tbaa !5
  br label %160

134:                                              ; preds = %105
  %135 = add nsw i32 %89, 1
  store i32 %135, i32* %31, align 4, !tbaa !5
  br label %160

136:                                              ; preds = %105
  %137 = add nsw i32 %90, 1
  store i32 %137, i32* %30, align 8, !tbaa !5
  br label %160

138:                                              ; preds = %105
  %139 = add nsw i32 %91, 1
  store i32 %139, i32* %29, align 4, !tbaa !5
  br label %160

140:                                              ; preds = %105
  %141 = add nsw i32 %92, 1
  store i32 %141, i32* %28, align 16, !tbaa !5
  br label %160

142:                                              ; preds = %105
  %143 = add nsw i32 %93, 1
  store i32 %143, i32* %27, align 4, !tbaa !5
  br label %160

144:                                              ; preds = %105
  %145 = add nsw i32 %94, 1
  store i32 %145, i32* %26, align 8, !tbaa !5
  br label %160

146:                                              ; preds = %105
  %147 = add nsw i32 %95, 1
  store i32 %147, i32* %25, align 4, !tbaa !5
  br label %160

148:                                              ; preds = %105
  %149 = add nsw i32 %96, 1
  store i32 %149, i32* %24, align 16, !tbaa !5
  br label %160

150:                                              ; preds = %105
  %151 = add nsw i32 %97, 1
  store i32 %151, i32* %23, align 4, !tbaa !5
  br label %160

152:                                              ; preds = %105
  %153 = add nsw i32 %98, 1
  store i32 %153, i32* %22, align 8, !tbaa !5
  br label %160

154:                                              ; preds = %105
  %155 = add nsw i32 %99, 1
  store i32 %155, i32* %21, align 4, !tbaa !5
  br label %160

156:                                              ; preds = %105
  %157 = add nsw i32 %100, 1
  store i32 %157, i32* %20, align 16, !tbaa !5
  br label %160

158:                                              ; preds = %105
  %159 = add nsw i32 %101, 1
  store i32 %159, i32* %19, align 4, !tbaa !5
  br label %160

160:                                              ; preds = %105, %108, %112, %116, %120, %124, %128, %132, %136, %140, %144, %148, %152, %156, %158, %154, %150, %146, %142, %138, %134, %130, %126, %122, %118, %114, %110
  %161 = phi i32 [ %77, %105 ], [ %77, %108 ], [ %77, %112 ], [ %77, %116 ], [ %77, %120 ], [ %77, %124 ], [ %77, %128 ], [ %77, %132 ], [ %77, %136 ], [ %77, %140 ], [ %77, %144 ], [ %77, %148 ], [ %77, %152 ], [ %77, %156 ], [ %77, %158 ], [ %77, %154 ], [ %77, %150 ], [ %77, %146 ], [ %77, %142 ], [ %77, %138 ], [ %77, %134 ], [ %77, %130 ], [ %77, %126 ], [ %77, %122 ], [ %77, %118 ], [ %77, %114 ], [ %111, %110 ]
  %162 = phi i32 [ %78, %105 ], [ %78, %108 ], [ %113, %112 ], [ %78, %116 ], [ %78, %120 ], [ %78, %124 ], [ %78, %128 ], [ %78, %132 ], [ %78, %136 ], [ %78, %140 ], [ %78, %144 ], [ %78, %148 ], [ %78, %152 ], [ %78, %156 ], [ %78, %158 ], [ %78, %154 ], [ %78, %150 ], [ %78, %146 ], [ %78, %142 ], [ %78, %138 ], [ %78, %134 ], [ %78, %130 ], [ %78, %126 ], [ %78, %122 ], [ %78, %118 ], [ %78, %114 ], [ %78, %110 ]
  %163 = phi i32 [ %79, %105 ], [ %79, %108 ], [ %79, %112 ], [ %79, %116 ], [ %79, %120 ], [ %79, %124 ], [ %79, %128 ], [ %79, %132 ], [ %79, %136 ], [ %79, %140 ], [ %79, %144 ], [ %79, %148 ], [ %79, %152 ], [ %79, %156 ], [ %79, %158 ], [ %79, %154 ], [ %79, %150 ], [ %79, %146 ], [ %79, %142 ], [ %79, %138 ], [ %79, %134 ], [ %79, %130 ], [ %79, %126 ], [ %79, %122 ], [ %79, %118 ], [ %115, %114 ], [ %79, %110 ]
  %164 = phi i32 [ %80, %105 ], [ %80, %108 ], [ %80, %112 ], [ %117, %116 ], [ %80, %120 ], [ %80, %124 ], [ %80, %128 ], [ %80, %132 ], [ %80, %136 ], [ %80, %140 ], [ %80, %144 ], [ %80, %148 ], [ %80, %152 ], [ %80, %156 ], [ %80, %158 ], [ %80, %154 ], [ %80, %150 ], [ %80, %146 ], [ %80, %142 ], [ %80, %138 ], [ %80, %134 ], [ %80, %130 ], [ %80, %126 ], [ %80, %122 ], [ %80, %118 ], [ %80, %114 ], [ %80, %110 ]
  %165 = phi i32 [ %81, %105 ], [ %81, %108 ], [ %81, %112 ], [ %81, %116 ], [ %81, %120 ], [ %81, %124 ], [ %81, %128 ], [ %81, %132 ], [ %81, %136 ], [ %81, %140 ], [ %81, %144 ], [ %81, %148 ], [ %81, %152 ], [ %81, %156 ], [ %81, %158 ], [ %81, %154 ], [ %81, %150 ], [ %81, %146 ], [ %81, %142 ], [ %81, %138 ], [ %81, %134 ], [ %81, %130 ], [ %81, %126 ], [ %81, %122 ], [ %119, %118 ], [ %81, %114 ], [ %81, %110 ]
  %166 = phi i32 [ %82, %105 ], [ %82, %108 ], [ %82, %112 ], [ %82, %116 ], [ %121, %120 ], [ %82, %124 ], [ %82, %128 ], [ %82, %132 ], [ %82, %136 ], [ %82, %140 ], [ %82, %144 ], [ %82, %148 ], [ %82, %152 ], [ %82, %156 ], [ %82, %158 ], [ %82, %154 ], [ %82, %150 ], [ %82, %146 ], [ %82, %142 ], [ %82, %138 ], [ %82, %134 ], [ %82, %130 ], [ %82, %126 ], [ %82, %122 ], [ %82, %118 ], [ %82, %114 ], [ %82, %110 ]
  %167 = phi i32 [ %83, %105 ], [ %83, %108 ], [ %83, %112 ], [ %83, %116 ], [ %83, %120 ], [ %83, %124 ], [ %83, %128 ], [ %83, %132 ], [ %83, %136 ], [ %83, %140 ], [ %83, %144 ], [ %83, %148 ], [ %83, %152 ], [ %83, %156 ], [ %83, %158 ], [ %83, %154 ], [ %83, %150 ], [ %83, %146 ], [ %83, %142 ], [ %83, %138 ], [ %83, %134 ], [ %83, %130 ], [ %83, %126 ], [ %123, %122 ], [ %83, %118 ], [ %83, %114 ], [ %83, %110 ]
  %168 = phi i32 [ %84, %105 ], [ %84, %108 ], [ %84, %112 ], [ %84, %116 ], [ %84, %120 ], [ %125, %124 ], [ %84, %128 ], [ %84, %132 ], [ %84, %136 ], [ %84, %140 ], [ %84, %144 ], [ %84, %148 ], [ %84, %152 ], [ %84, %156 ], [ %84, %158 ], [ %84, %154 ], [ %84, %150 ], [ %84, %146 ], [ %84, %142 ], [ %84, %138 ], [ %84, %134 ], [ %84, %130 ], [ %84, %126 ], [ %84, %122 ], [ %84, %118 ], [ %84, %114 ], [ %84, %110 ]
  %169 = phi i32 [ %85, %105 ], [ %85, %108 ], [ %85, %112 ], [ %85, %116 ], [ %85, %120 ], [ %85, %124 ], [ %85, %128 ], [ %85, %132 ], [ %85, %136 ], [ %85, %140 ], [ %85, %144 ], [ %85, %148 ], [ %85, %152 ], [ %85, %156 ], [ %85, %158 ], [ %85, %154 ], [ %85, %150 ], [ %85, %146 ], [ %85, %142 ], [ %85, %138 ], [ %85, %134 ], [ %85, %130 ], [ %127, %126 ], [ %85, %122 ], [ %85, %118 ], [ %85, %114 ], [ %85, %110 ]
  %170 = phi i32 [ %86, %105 ], [ %86, %108 ], [ %86, %112 ], [ %86, %116 ], [ %86, %120 ], [ %86, %124 ], [ %129, %128 ], [ %86, %132 ], [ %86, %136 ], [ %86, %140 ], [ %86, %144 ], [ %86, %148 ], [ %86, %152 ], [ %86, %156 ], [ %86, %158 ], [ %86, %154 ], [ %86, %150 ], [ %86, %146 ], [ %86, %142 ], [ %86, %138 ], [ %86, %134 ], [ %86, %130 ], [ %86, %126 ], [ %86, %122 ], [ %86, %118 ], [ %86, %114 ], [ %86, %110 ]
  %171 = phi i32 [ %87, %105 ], [ %87, %108 ], [ %87, %112 ], [ %87, %116 ], [ %87, %120 ], [ %87, %124 ], [ %87, %128 ], [ %87, %132 ], [ %87, %136 ], [ %87, %140 ], [ %87, %144 ], [ %87, %148 ], [ %87, %152 ], [ %87, %156 ], [ %87, %158 ], [ %87, %154 ], [ %87, %150 ], [ %87, %146 ], [ %87, %142 ], [ %87, %138 ], [ %87, %134 ], [ %131, %130 ], [ %87, %126 ], [ %87, %122 ], [ %87, %118 ], [ %87, %114 ], [ %87, %110 ]
  %172 = phi i32 [ %88, %105 ], [ %88, %108 ], [ %88, %112 ], [ %88, %116 ], [ %88, %120 ], [ %88, %124 ], [ %88, %128 ], [ %133, %132 ], [ %88, %136 ], [ %88, %140 ], [ %88, %144 ], [ %88, %148 ], [ %88, %152 ], [ %88, %156 ], [ %88, %158 ], [ %88, %154 ], [ %88, %150 ], [ %88, %146 ], [ %88, %142 ], [ %88, %138 ], [ %88, %134 ], [ %88, %130 ], [ %88, %126 ], [ %88, %122 ], [ %88, %118 ], [ %88, %114 ], [ %88, %110 ]
  %173 = phi i32 [ %89, %105 ], [ %89, %108 ], [ %89, %112 ], [ %89, %116 ], [ %89, %120 ], [ %89, %124 ], [ %89, %128 ], [ %89, %132 ], [ %89, %136 ], [ %89, %140 ], [ %89, %144 ], [ %89, %148 ], [ %89, %152 ], [ %89, %156 ], [ %89, %158 ], [ %89, %154 ], [ %89, %150 ], [ %89, %146 ], [ %89, %142 ], [ %89, %138 ], [ %135, %134 ], [ %89, %130 ], [ %89, %126 ], [ %89, %122 ], [ %89, %118 ], [ %89, %114 ], [ %89, %110 ]
  %174 = phi i32 [ %90, %105 ], [ %90, %108 ], [ %90, %112 ], [ %90, %116 ], [ %90, %120 ], [ %90, %124 ], [ %90, %128 ], [ %90, %132 ], [ %137, %136 ], [ %90, %140 ], [ %90, %144 ], [ %90, %148 ], [ %90, %152 ], [ %90, %156 ], [ %90, %158 ], [ %90, %154 ], [ %90, %150 ], [ %90, %146 ], [ %90, %142 ], [ %90, %138 ], [ %90, %134 ], [ %90, %130 ], [ %90, %126 ], [ %90, %122 ], [ %90, %118 ], [ %90, %114 ], [ %90, %110 ]
  %175 = phi i32 [ %91, %105 ], [ %91, %108 ], [ %91, %112 ], [ %91, %116 ], [ %91, %120 ], [ %91, %124 ], [ %91, %128 ], [ %91, %132 ], [ %91, %136 ], [ %91, %140 ], [ %91, %144 ], [ %91, %148 ], [ %91, %152 ], [ %91, %156 ], [ %91, %158 ], [ %91, %154 ], [ %91, %150 ], [ %91, %146 ], [ %91, %142 ], [ %139, %138 ], [ %91, %134 ], [ %91, %130 ], [ %91, %126 ], [ %91, %122 ], [ %91, %118 ], [ %91, %114 ], [ %91, %110 ]
  %176 = phi i32 [ %92, %105 ], [ %92, %108 ], [ %92, %112 ], [ %92, %116 ], [ %92, %120 ], [ %92, %124 ], [ %92, %128 ], [ %92, %132 ], [ %92, %136 ], [ %141, %140 ], [ %92, %144 ], [ %92, %148 ], [ %92, %152 ], [ %92, %156 ], [ %92, %158 ], [ %92, %154 ], [ %92, %150 ], [ %92, %146 ], [ %92, %142 ], [ %92, %138 ], [ %92, %134 ], [ %92, %130 ], [ %92, %126 ], [ %92, %122 ], [ %92, %118 ], [ %92, %114 ], [ %92, %110 ]
  %177 = phi i32 [ %93, %105 ], [ %93, %108 ], [ %93, %112 ], [ %93, %116 ], [ %93, %120 ], [ %93, %124 ], [ %93, %128 ], [ %93, %132 ], [ %93, %136 ], [ %93, %140 ], [ %93, %144 ], [ %93, %148 ], [ %93, %152 ], [ %93, %156 ], [ %93, %158 ], [ %93, %154 ], [ %93, %150 ], [ %93, %146 ], [ %143, %142 ], [ %93, %138 ], [ %93, %134 ], [ %93, %130 ], [ %93, %126 ], [ %93, %122 ], [ %93, %118 ], [ %93, %114 ], [ %93, %110 ]
  %178 = phi i32 [ %94, %105 ], [ %94, %108 ], [ %94, %112 ], [ %94, %116 ], [ %94, %120 ], [ %94, %124 ], [ %94, %128 ], [ %94, %132 ], [ %94, %136 ], [ %94, %140 ], [ %145, %144 ], [ %94, %148 ], [ %94, %152 ], [ %94, %156 ], [ %94, %158 ], [ %94, %154 ], [ %94, %150 ], [ %94, %146 ], [ %94, %142 ], [ %94, %138 ], [ %94, %134 ], [ %94, %130 ], [ %94, %126 ], [ %94, %122 ], [ %94, %118 ], [ %94, %114 ], [ %94, %110 ]
  %179 = phi i32 [ %95, %105 ], [ %95, %108 ], [ %95, %112 ], [ %95, %116 ], [ %95, %120 ], [ %95, %124 ], [ %95, %128 ], [ %95, %132 ], [ %95, %136 ], [ %95, %140 ], [ %95, %144 ], [ %95, %148 ], [ %95, %152 ], [ %95, %156 ], [ %95, %158 ], [ %95, %154 ], [ %95, %150 ], [ %147, %146 ], [ %95, %142 ], [ %95, %138 ], [ %95, %134 ], [ %95, %130 ], [ %95, %126 ], [ %95, %122 ], [ %95, %118 ], [ %95, %114 ], [ %95, %110 ]
  %180 = phi i32 [ %96, %105 ], [ %96, %108 ], [ %96, %112 ], [ %96, %116 ], [ %96, %120 ], [ %96, %124 ], [ %96, %128 ], [ %96, %132 ], [ %96, %136 ], [ %96, %140 ], [ %96, %144 ], [ %149, %148 ], [ %96, %152 ], [ %96, %156 ], [ %96, %158 ], [ %96, %154 ], [ %96, %150 ], [ %96, %146 ], [ %96, %142 ], [ %96, %138 ], [ %96, %134 ], [ %96, %130 ], [ %96, %126 ], [ %96, %122 ], [ %96, %118 ], [ %96, %114 ], [ %96, %110 ]
  %181 = phi i32 [ %97, %105 ], [ %97, %108 ], [ %97, %112 ], [ %97, %116 ], [ %97, %120 ], [ %97, %124 ], [ %97, %128 ], [ %97, %132 ], [ %97, %136 ], [ %97, %140 ], [ %97, %144 ], [ %97, %148 ], [ %97, %152 ], [ %97, %156 ], [ %97, %158 ], [ %97, %154 ], [ %151, %150 ], [ %97, %146 ], [ %97, %142 ], [ %97, %138 ], [ %97, %134 ], [ %97, %130 ], [ %97, %126 ], [ %97, %122 ], [ %97, %118 ], [ %97, %114 ], [ %97, %110 ]
  %182 = phi i32 [ %98, %105 ], [ %98, %108 ], [ %98, %112 ], [ %98, %116 ], [ %98, %120 ], [ %98, %124 ], [ %98, %128 ], [ %98, %132 ], [ %98, %136 ], [ %98, %140 ], [ %98, %144 ], [ %98, %148 ], [ %153, %152 ], [ %98, %156 ], [ %98, %158 ], [ %98, %154 ], [ %98, %150 ], [ %98, %146 ], [ %98, %142 ], [ %98, %138 ], [ %98, %134 ], [ %98, %130 ], [ %98, %126 ], [ %98, %122 ], [ %98, %118 ], [ %98, %114 ], [ %98, %110 ]
  %183 = phi i32 [ %99, %105 ], [ %99, %108 ], [ %99, %112 ], [ %99, %116 ], [ %99, %120 ], [ %99, %124 ], [ %99, %128 ], [ %99, %132 ], [ %99, %136 ], [ %99, %140 ], [ %99, %144 ], [ %99, %148 ], [ %99, %152 ], [ %99, %156 ], [ %99, %158 ], [ %155, %154 ], [ %99, %150 ], [ %99, %146 ], [ %99, %142 ], [ %99, %138 ], [ %99, %134 ], [ %99, %130 ], [ %99, %126 ], [ %99, %122 ], [ %99, %118 ], [ %99, %114 ], [ %99, %110 ]
  %184 = phi i32 [ %100, %105 ], [ %100, %108 ], [ %100, %112 ], [ %100, %116 ], [ %100, %120 ], [ %100, %124 ], [ %100, %128 ], [ %100, %132 ], [ %100, %136 ], [ %100, %140 ], [ %100, %144 ], [ %100, %148 ], [ %100, %152 ], [ %157, %156 ], [ %100, %158 ], [ %100, %154 ], [ %100, %150 ], [ %100, %146 ], [ %100, %142 ], [ %100, %138 ], [ %100, %134 ], [ %100, %130 ], [ %100, %126 ], [ %100, %122 ], [ %100, %118 ], [ %100, %114 ], [ %100, %110 ]
  %185 = phi i32 [ %101, %105 ], [ %101, %108 ], [ %101, %112 ], [ %101, %116 ], [ %101, %120 ], [ %101, %124 ], [ %101, %128 ], [ %101, %132 ], [ %101, %136 ], [ %101, %140 ], [ %101, %144 ], [ %101, %148 ], [ %101, %152 ], [ %101, %156 ], [ %159, %158 ], [ %101, %154 ], [ %101, %150 ], [ %101, %146 ], [ %101, %142 ], [ %101, %138 ], [ %101, %134 ], [ %101, %130 ], [ %101, %126 ], [ %101, %122 ], [ %101, %118 ], [ %101, %114 ], [ %101, %110 ]
  %186 = phi i32 [ %102, %105 ], [ %109, %108 ], [ %102, %112 ], [ %102, %116 ], [ %102, %120 ], [ %102, %124 ], [ %102, %128 ], [ %102, %132 ], [ %102, %136 ], [ %102, %140 ], [ %102, %144 ], [ %102, %148 ], [ %102, %152 ], [ %102, %156 ], [ %102, %158 ], [ %102, %154 ], [ %102, %150 ], [ %102, %146 ], [ %102, %142 ], [ %102, %138 ], [ %102, %134 ], [ %102, %130 ], [ %102, %126 ], [ %102, %122 ], [ %102, %118 ], [ %102, %114 ], [ %102, %110 ]
  %187 = add nuw nsw i64 %103, 1
  br label %76, !llvm.loop !12

188:                                              ; preds = %76
  %189 = add nuw nsw i64 %74, 1
  br label %47, !llvm.loop !13

190:                                              ; preds = %47, %195
  %191 = phi i64 [ %202, %195 ], [ 0, %47 ]
  %192 = phi i32 [ %199, %195 ], [ %73, %47 ]
  %193 = phi i32 [ %201, %195 ], [ 0, %47 ]
  %194 = icmp eq i64 %191, 26
  br i1 %194, label %203, label %195

195:                                              ; preds = %190
  %196 = getelementptr inbounds [26 x i32], [26 x i32]* %3, i64 0, i64 %191
  %197 = load i32, i32* %196, align 4, !tbaa !5
  %198 = icmp slt i32 %192, %197
  %199 = select i1 %198, i32 %197, i32 %192
  %200 = trunc i64 %191 to i32
  %201 = select i1 %198, i32 %200, i32 %193
  %202 = add nuw nsw i64 %191, 1
  br label %190, !llvm.loop !14

203:                                              ; preds = %190
  %204 = sext i32 %193 to i64
  %205 = getelementptr inbounds [26 x i8], [26 x i8]* @__const.main.b, i64 0, i64 %204
  %206 = load i8, i8* %205, align 1, !tbaa !11
  %207 = sext i8 %206 to i32
  %208 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %207) #6
  %209 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %192) #6
  br label %210

210:                                              ; preds = %227, %203
  %211 = phi i64 [ %228, %227 ], [ 0, %203 ]
  %212 = load i32, i32* %2, align 4, !tbaa !5
  %213 = sext i32 %212 to i64
  %214 = icmp slt i64 %211, %213
  br i1 %214, label %215, label %229

215:                                              ; preds = %210, %218
  %216 = phi i64 [ %222, %218 ], [ 0, %210 ]
  %217 = icmp eq i64 %216, 26
  br i1 %217, label %227, label %218

218:                                              ; preds = %215
  %219 = getelementptr inbounds [999 x %struct.shu], [999 x %struct.shu]* %1, i64 0, i64 %211, i32 1, i64 %216
  %220 = load i8, i8* %219, align 1, !tbaa !11
  %221 = icmp eq i8 %220, %206
  %222 = add nuw nsw i64 %216, 1
  br i1 %221, label %223, label %215, !llvm.loop !15

223:                                              ; preds = %218
  %224 = getelementptr inbounds [999 x %struct.shu], [999 x %struct.shu]* %1, i64 0, i64 %211, i32 0
  %225 = load i32, i32* %224, align 16, !tbaa !16
  %226 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %225) #6
  br label %227

227:                                              ; preds = %215, %223
  %228 = add nuw nsw i64 %211, 1
  br label %210, !llvm.loop !18

229:                                              ; preds = %210
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 31968, i8* nonnull %4) #5
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smax.i32(i32, i32) #4

attributes #0 = { minsize nofree nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { minsize nofree nounwind optsize "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #4 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #5 = { nounwind }
attributes #6 = { minsize optsize }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!7, !7, i64 0}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !10}
!15 = distinct !{!15, !10}
!16 = !{!17, !6, i64 0}
!17 = !{!"shu", !6, i64 0, !7, i64 4}
!18 = distinct !{!18, !10}
