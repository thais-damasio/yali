; ModuleID = 'source-C-CXX/1/1265.c'
source_filename = "source-C-CXX/1/1265.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@__const.main.c = private unnamed_addr constant [26 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ", align 16
@.str.2 = private unnamed_addr constant [7 x i8] c"%c\0A%d\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: minsize nofree nounwind optsize sspstrong uwtable
define dso_local void @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1000 x i32], align 16
  %3 = alloca [1000 x [26 x i8]], align 16
  %4 = alloca [26 x i32], align 16
  %5 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  %6 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32* nonnull %1) #7
  %7 = bitcast [1000 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4000, i8* nonnull %7) #6
  %8 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %3, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 26000, i8* nonnull %8) #6
  br label %9

9:                                                ; preds = %14, %0
  %10 = phi i64 [ %18, %14 ], [ 0, %0 ]
  %11 = load i32, i32* %1, align 4, !tbaa !5
  %12 = sext i32 %11 to i64
  %13 = icmp slt i64 %10, %12
  br i1 %13, label %14, label %19

14:                                               ; preds = %9
  %15 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %10
  %16 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %3, i64 0, i64 %10
  %17 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* nonnull %15, [26 x i8]* nonnull %16) #7
  %18 = add nuw nsw i64 %10, 1
  br label %9, !llvm.loop !9

19:                                               ; preds = %9
  %20 = bitcast [26 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %20) #6
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(104) %20, i8 0, i64 104, i1 false)
  %21 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 24
  %22 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 23
  %23 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 22
  %24 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 21
  %25 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 20
  %26 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 19
  %27 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 18
  %28 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 17
  %29 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 16
  %30 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 15
  %31 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 14
  %32 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 13
  %33 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 12
  %34 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 11
  %35 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 10
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 9
  %37 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 8
  %38 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 7
  %39 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 6
  %40 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 5
  %41 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 4
  %42 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 3
  %43 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 2
  %44 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 1
  %45 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 0
  %46 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 25
  %47 = call i32 @llvm.smax.i32(i32 %11, i32 0)
  %48 = zext i32 %47 to i64
  br label %49

49:                                               ; preds = %197, %19
  %50 = phi i32 [ %85, %197 ], [ 0, %19 ]
  %51 = phi i32 [ %86, %197 ], [ 0, %19 ]
  %52 = phi i32 [ %87, %197 ], [ 0, %19 ]
  %53 = phi i32 [ %88, %197 ], [ 0, %19 ]
  %54 = phi i32 [ %89, %197 ], [ 0, %19 ]
  %55 = phi i32 [ %90, %197 ], [ 0, %19 ]
  %56 = phi i32 [ %91, %197 ], [ 0, %19 ]
  %57 = phi i32 [ %92, %197 ], [ 0, %19 ]
  %58 = phi i32 [ %93, %197 ], [ 0, %19 ]
  %59 = phi i32 [ %94, %197 ], [ 0, %19 ]
  %60 = phi i32 [ %95, %197 ], [ 0, %19 ]
  %61 = phi i32 [ %96, %197 ], [ 0, %19 ]
  %62 = phi i32 [ %97, %197 ], [ 0, %19 ]
  %63 = phi i32 [ %98, %197 ], [ 0, %19 ]
  %64 = phi i32 [ %99, %197 ], [ 0, %19 ]
  %65 = phi i32 [ %100, %197 ], [ 0, %19 ]
  %66 = phi i32 [ %101, %197 ], [ 0, %19 ]
  %67 = phi i32 [ %102, %197 ], [ 0, %19 ]
  %68 = phi i32 [ %103, %197 ], [ 0, %19 ]
  %69 = phi i32 [ %104, %197 ], [ 0, %19 ]
  %70 = phi i32 [ %105, %197 ], [ 0, %19 ]
  %71 = phi i32 [ %106, %197 ], [ 0, %19 ]
  %72 = phi i32 [ %107, %197 ], [ 0, %19 ]
  %73 = phi i32 [ %108, %197 ], [ 0, %19 ]
  %74 = phi i32 [ %109, %197 ], [ 0, %19 ]
  %75 = phi i32 [ %110, %197 ], [ 0, %19 ]
  %76 = phi i64 [ %198, %197 ], [ 0, %19 ]
  %77 = icmp eq i64 %76, %48
  br i1 %77, label %199, label %78

78:                                               ; preds = %49
  %79 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %3, i64 0, i64 %76, i64 0
  %80 = call i64 @strlen(i8* noundef nonnull %79) #8
  %81 = trunc i64 %80 to i32
  %82 = call i32 @llvm.smax.i32(i32 %81, i32 0)
  %83 = zext i32 %82 to i64
  br label %84

84:                                               ; preds = %169, %78
  %85 = phi i32 [ %170, %169 ], [ %50, %78 ]
  %86 = phi i32 [ %171, %169 ], [ %51, %78 ]
  %87 = phi i32 [ %172, %169 ], [ %52, %78 ]
  %88 = phi i32 [ %173, %169 ], [ %53, %78 ]
  %89 = phi i32 [ %174, %169 ], [ %54, %78 ]
  %90 = phi i32 [ %175, %169 ], [ %55, %78 ]
  %91 = phi i32 [ %176, %169 ], [ %56, %78 ]
  %92 = phi i32 [ %177, %169 ], [ %57, %78 ]
  %93 = phi i32 [ %178, %169 ], [ %58, %78 ]
  %94 = phi i32 [ %179, %169 ], [ %59, %78 ]
  %95 = phi i32 [ %180, %169 ], [ %60, %78 ]
  %96 = phi i32 [ %181, %169 ], [ %61, %78 ]
  %97 = phi i32 [ %182, %169 ], [ %62, %78 ]
  %98 = phi i32 [ %183, %169 ], [ %63, %78 ]
  %99 = phi i32 [ %184, %169 ], [ %64, %78 ]
  %100 = phi i32 [ %185, %169 ], [ %65, %78 ]
  %101 = phi i32 [ %186, %169 ], [ %66, %78 ]
  %102 = phi i32 [ %187, %169 ], [ %67, %78 ]
  %103 = phi i32 [ %188, %169 ], [ %68, %78 ]
  %104 = phi i32 [ %189, %169 ], [ %69, %78 ]
  %105 = phi i32 [ %190, %169 ], [ %70, %78 ]
  %106 = phi i32 [ %191, %169 ], [ %71, %78 ]
  %107 = phi i32 [ %192, %169 ], [ %72, %78 ]
  %108 = phi i32 [ %193, %169 ], [ %73, %78 ]
  %109 = phi i32 [ %194, %169 ], [ %74, %78 ]
  %110 = phi i32 [ %195, %169 ], [ %75, %78 ]
  %111 = phi i64 [ %196, %169 ], [ 0, %78 ]
  %112 = icmp eq i64 %111, %83
  br i1 %112, label %197, label %113

113:                                              ; preds = %84
  %114 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %3, i64 0, i64 %76, i64 %111
  %115 = load i8, i8* %114, align 1, !tbaa !11
  %116 = sext i8 %115 to i32
  switch i32 %116, label %167 [
    i32 65, label %117
    i32 66, label %119
    i32 67, label %121
    i32 68, label %123
    i32 69, label %125
    i32 70, label %127
    i32 71, label %129
    i32 72, label %131
    i32 73, label %133
    i32 74, label %135
    i32 75, label %137
    i32 76, label %139
    i32 77, label %141
    i32 78, label %143
    i32 79, label %145
    i32 80, label %147
    i32 81, label %149
    i32 82, label %151
    i32 83, label %153
    i32 84, label %155
    i32 85, label %157
    i32 86, label %159
    i32 87, label %161
    i32 88, label %163
    i32 89, label %165
  ]

117:                                              ; preds = %113
  %118 = add nsw i32 %110, 1
  store i32 %118, i32* %45, align 16, !tbaa !5
  br label %169

119:                                              ; preds = %113
  %120 = add nsw i32 %86, 1
  store i32 %120, i32* %44, align 4, !tbaa !5
  br label %169

121:                                              ; preds = %113
  %122 = add nsw i32 %87, 1
  store i32 %122, i32* %43, align 8, !tbaa !5
  br label %169

123:                                              ; preds = %113
  %124 = add nsw i32 %88, 1
  store i32 %124, i32* %42, align 4, !tbaa !5
  br label %169

125:                                              ; preds = %113
  %126 = add nsw i32 %89, 1
  store i32 %126, i32* %41, align 16, !tbaa !5
  br label %169

127:                                              ; preds = %113
  %128 = add nsw i32 %90, 1
  store i32 %128, i32* %40, align 4, !tbaa !5
  br label %169

129:                                              ; preds = %113
  %130 = add nsw i32 %91, 1
  store i32 %130, i32* %39, align 8, !tbaa !5
  br label %169

131:                                              ; preds = %113
  %132 = add nsw i32 %92, 1
  store i32 %132, i32* %38, align 4, !tbaa !5
  br label %169

133:                                              ; preds = %113
  %134 = add nsw i32 %93, 1
  store i32 %134, i32* %37, align 16, !tbaa !5
  br label %169

135:                                              ; preds = %113
  %136 = add nsw i32 %94, 1
  store i32 %136, i32* %36, align 4, !tbaa !5
  br label %169

137:                                              ; preds = %113
  %138 = add nsw i32 %95, 1
  store i32 %138, i32* %35, align 8, !tbaa !5
  br label %169

139:                                              ; preds = %113
  %140 = add nsw i32 %96, 1
  store i32 %140, i32* %34, align 4, !tbaa !5
  br label %169

141:                                              ; preds = %113
  %142 = add nsw i32 %97, 1
  store i32 %142, i32* %33, align 16, !tbaa !5
  br label %169

143:                                              ; preds = %113
  %144 = add nsw i32 %98, 1
  store i32 %144, i32* %32, align 4, !tbaa !5
  br label %169

145:                                              ; preds = %113
  %146 = add nsw i32 %99, 1
  store i32 %146, i32* %31, align 8, !tbaa !5
  br label %169

147:                                              ; preds = %113
  %148 = add nsw i32 %100, 1
  store i32 %148, i32* %30, align 4, !tbaa !5
  br label %169

149:                                              ; preds = %113
  %150 = add nsw i32 %101, 1
  store i32 %150, i32* %29, align 16, !tbaa !5
  br label %169

151:                                              ; preds = %113
  %152 = add nsw i32 %102, 1
  store i32 %152, i32* %28, align 4, !tbaa !5
  br label %169

153:                                              ; preds = %113
  %154 = add nsw i32 %103, 1
  store i32 %154, i32* %27, align 8, !tbaa !5
  br label %169

155:                                              ; preds = %113
  %156 = add nsw i32 %104, 1
  store i32 %156, i32* %26, align 4, !tbaa !5
  br label %169

157:                                              ; preds = %113
  %158 = add nsw i32 %105, 1
  store i32 %158, i32* %25, align 16, !tbaa !5
  br label %169

159:                                              ; preds = %113
  %160 = add nsw i32 %106, 1
  store i32 %160, i32* %24, align 4, !tbaa !5
  br label %169

161:                                              ; preds = %113
  %162 = add nsw i32 %107, 1
  store i32 %162, i32* %23, align 8, !tbaa !5
  br label %169

163:                                              ; preds = %113
  %164 = add nsw i32 %108, 1
  store i32 %164, i32* %22, align 4, !tbaa !5
  br label %169

165:                                              ; preds = %113
  %166 = add nsw i32 %109, 1
  store i32 %166, i32* %21, align 16, !tbaa !5
  br label %169

167:                                              ; preds = %113
  %168 = add nsw i32 %85, 1
  store i32 %168, i32* %46, align 4, !tbaa !5
  br label %169

169:                                              ; preds = %117, %119, %121, %123, %125, %127, %129, %131, %133, %135, %137, %139, %141, %143, %145, %147, %149, %151, %153, %155, %157, %159, %161, %163, %165, %167
  %170 = phi i32 [ %85, %117 ], [ %85, %119 ], [ %85, %121 ], [ %85, %123 ], [ %85, %125 ], [ %85, %127 ], [ %85, %129 ], [ %85, %131 ], [ %85, %133 ], [ %85, %135 ], [ %85, %137 ], [ %85, %139 ], [ %85, %141 ], [ %85, %143 ], [ %85, %145 ], [ %85, %147 ], [ %85, %149 ], [ %85, %151 ], [ %85, %153 ], [ %85, %155 ], [ %85, %157 ], [ %85, %159 ], [ %85, %161 ], [ %85, %163 ], [ %85, %165 ], [ %168, %167 ]
  %171 = phi i32 [ %86, %117 ], [ %120, %119 ], [ %86, %121 ], [ %86, %123 ], [ %86, %125 ], [ %86, %127 ], [ %86, %129 ], [ %86, %131 ], [ %86, %133 ], [ %86, %135 ], [ %86, %137 ], [ %86, %139 ], [ %86, %141 ], [ %86, %143 ], [ %86, %145 ], [ %86, %147 ], [ %86, %149 ], [ %86, %151 ], [ %86, %153 ], [ %86, %155 ], [ %86, %157 ], [ %86, %159 ], [ %86, %161 ], [ %86, %163 ], [ %86, %165 ], [ %86, %167 ]
  %172 = phi i32 [ %87, %117 ], [ %87, %119 ], [ %122, %121 ], [ %87, %123 ], [ %87, %125 ], [ %87, %127 ], [ %87, %129 ], [ %87, %131 ], [ %87, %133 ], [ %87, %135 ], [ %87, %137 ], [ %87, %139 ], [ %87, %141 ], [ %87, %143 ], [ %87, %145 ], [ %87, %147 ], [ %87, %149 ], [ %87, %151 ], [ %87, %153 ], [ %87, %155 ], [ %87, %157 ], [ %87, %159 ], [ %87, %161 ], [ %87, %163 ], [ %87, %165 ], [ %87, %167 ]
  %173 = phi i32 [ %88, %117 ], [ %88, %119 ], [ %88, %121 ], [ %124, %123 ], [ %88, %125 ], [ %88, %127 ], [ %88, %129 ], [ %88, %131 ], [ %88, %133 ], [ %88, %135 ], [ %88, %137 ], [ %88, %139 ], [ %88, %141 ], [ %88, %143 ], [ %88, %145 ], [ %88, %147 ], [ %88, %149 ], [ %88, %151 ], [ %88, %153 ], [ %88, %155 ], [ %88, %157 ], [ %88, %159 ], [ %88, %161 ], [ %88, %163 ], [ %88, %165 ], [ %88, %167 ]
  %174 = phi i32 [ %89, %117 ], [ %89, %119 ], [ %89, %121 ], [ %89, %123 ], [ %126, %125 ], [ %89, %127 ], [ %89, %129 ], [ %89, %131 ], [ %89, %133 ], [ %89, %135 ], [ %89, %137 ], [ %89, %139 ], [ %89, %141 ], [ %89, %143 ], [ %89, %145 ], [ %89, %147 ], [ %89, %149 ], [ %89, %151 ], [ %89, %153 ], [ %89, %155 ], [ %89, %157 ], [ %89, %159 ], [ %89, %161 ], [ %89, %163 ], [ %89, %165 ], [ %89, %167 ]
  %175 = phi i32 [ %90, %117 ], [ %90, %119 ], [ %90, %121 ], [ %90, %123 ], [ %90, %125 ], [ %128, %127 ], [ %90, %129 ], [ %90, %131 ], [ %90, %133 ], [ %90, %135 ], [ %90, %137 ], [ %90, %139 ], [ %90, %141 ], [ %90, %143 ], [ %90, %145 ], [ %90, %147 ], [ %90, %149 ], [ %90, %151 ], [ %90, %153 ], [ %90, %155 ], [ %90, %157 ], [ %90, %159 ], [ %90, %161 ], [ %90, %163 ], [ %90, %165 ], [ %90, %167 ]
  %176 = phi i32 [ %91, %117 ], [ %91, %119 ], [ %91, %121 ], [ %91, %123 ], [ %91, %125 ], [ %91, %127 ], [ %130, %129 ], [ %91, %131 ], [ %91, %133 ], [ %91, %135 ], [ %91, %137 ], [ %91, %139 ], [ %91, %141 ], [ %91, %143 ], [ %91, %145 ], [ %91, %147 ], [ %91, %149 ], [ %91, %151 ], [ %91, %153 ], [ %91, %155 ], [ %91, %157 ], [ %91, %159 ], [ %91, %161 ], [ %91, %163 ], [ %91, %165 ], [ %91, %167 ]
  %177 = phi i32 [ %92, %117 ], [ %92, %119 ], [ %92, %121 ], [ %92, %123 ], [ %92, %125 ], [ %92, %127 ], [ %92, %129 ], [ %132, %131 ], [ %92, %133 ], [ %92, %135 ], [ %92, %137 ], [ %92, %139 ], [ %92, %141 ], [ %92, %143 ], [ %92, %145 ], [ %92, %147 ], [ %92, %149 ], [ %92, %151 ], [ %92, %153 ], [ %92, %155 ], [ %92, %157 ], [ %92, %159 ], [ %92, %161 ], [ %92, %163 ], [ %92, %165 ], [ %92, %167 ]
  %178 = phi i32 [ %93, %117 ], [ %93, %119 ], [ %93, %121 ], [ %93, %123 ], [ %93, %125 ], [ %93, %127 ], [ %93, %129 ], [ %93, %131 ], [ %134, %133 ], [ %93, %135 ], [ %93, %137 ], [ %93, %139 ], [ %93, %141 ], [ %93, %143 ], [ %93, %145 ], [ %93, %147 ], [ %93, %149 ], [ %93, %151 ], [ %93, %153 ], [ %93, %155 ], [ %93, %157 ], [ %93, %159 ], [ %93, %161 ], [ %93, %163 ], [ %93, %165 ], [ %93, %167 ]
  %179 = phi i32 [ %94, %117 ], [ %94, %119 ], [ %94, %121 ], [ %94, %123 ], [ %94, %125 ], [ %94, %127 ], [ %94, %129 ], [ %94, %131 ], [ %94, %133 ], [ %136, %135 ], [ %94, %137 ], [ %94, %139 ], [ %94, %141 ], [ %94, %143 ], [ %94, %145 ], [ %94, %147 ], [ %94, %149 ], [ %94, %151 ], [ %94, %153 ], [ %94, %155 ], [ %94, %157 ], [ %94, %159 ], [ %94, %161 ], [ %94, %163 ], [ %94, %165 ], [ %94, %167 ]
  %180 = phi i32 [ %95, %117 ], [ %95, %119 ], [ %95, %121 ], [ %95, %123 ], [ %95, %125 ], [ %95, %127 ], [ %95, %129 ], [ %95, %131 ], [ %95, %133 ], [ %95, %135 ], [ %138, %137 ], [ %95, %139 ], [ %95, %141 ], [ %95, %143 ], [ %95, %145 ], [ %95, %147 ], [ %95, %149 ], [ %95, %151 ], [ %95, %153 ], [ %95, %155 ], [ %95, %157 ], [ %95, %159 ], [ %95, %161 ], [ %95, %163 ], [ %95, %165 ], [ %95, %167 ]
  %181 = phi i32 [ %96, %117 ], [ %96, %119 ], [ %96, %121 ], [ %96, %123 ], [ %96, %125 ], [ %96, %127 ], [ %96, %129 ], [ %96, %131 ], [ %96, %133 ], [ %96, %135 ], [ %96, %137 ], [ %140, %139 ], [ %96, %141 ], [ %96, %143 ], [ %96, %145 ], [ %96, %147 ], [ %96, %149 ], [ %96, %151 ], [ %96, %153 ], [ %96, %155 ], [ %96, %157 ], [ %96, %159 ], [ %96, %161 ], [ %96, %163 ], [ %96, %165 ], [ %96, %167 ]
  %182 = phi i32 [ %97, %117 ], [ %97, %119 ], [ %97, %121 ], [ %97, %123 ], [ %97, %125 ], [ %97, %127 ], [ %97, %129 ], [ %97, %131 ], [ %97, %133 ], [ %97, %135 ], [ %97, %137 ], [ %97, %139 ], [ %142, %141 ], [ %97, %143 ], [ %97, %145 ], [ %97, %147 ], [ %97, %149 ], [ %97, %151 ], [ %97, %153 ], [ %97, %155 ], [ %97, %157 ], [ %97, %159 ], [ %97, %161 ], [ %97, %163 ], [ %97, %165 ], [ %97, %167 ]
  %183 = phi i32 [ %98, %117 ], [ %98, %119 ], [ %98, %121 ], [ %98, %123 ], [ %98, %125 ], [ %98, %127 ], [ %98, %129 ], [ %98, %131 ], [ %98, %133 ], [ %98, %135 ], [ %98, %137 ], [ %98, %139 ], [ %98, %141 ], [ %144, %143 ], [ %98, %145 ], [ %98, %147 ], [ %98, %149 ], [ %98, %151 ], [ %98, %153 ], [ %98, %155 ], [ %98, %157 ], [ %98, %159 ], [ %98, %161 ], [ %98, %163 ], [ %98, %165 ], [ %98, %167 ]
  %184 = phi i32 [ %99, %117 ], [ %99, %119 ], [ %99, %121 ], [ %99, %123 ], [ %99, %125 ], [ %99, %127 ], [ %99, %129 ], [ %99, %131 ], [ %99, %133 ], [ %99, %135 ], [ %99, %137 ], [ %99, %139 ], [ %99, %141 ], [ %99, %143 ], [ %146, %145 ], [ %99, %147 ], [ %99, %149 ], [ %99, %151 ], [ %99, %153 ], [ %99, %155 ], [ %99, %157 ], [ %99, %159 ], [ %99, %161 ], [ %99, %163 ], [ %99, %165 ], [ %99, %167 ]
  %185 = phi i32 [ %100, %117 ], [ %100, %119 ], [ %100, %121 ], [ %100, %123 ], [ %100, %125 ], [ %100, %127 ], [ %100, %129 ], [ %100, %131 ], [ %100, %133 ], [ %100, %135 ], [ %100, %137 ], [ %100, %139 ], [ %100, %141 ], [ %100, %143 ], [ %100, %145 ], [ %148, %147 ], [ %100, %149 ], [ %100, %151 ], [ %100, %153 ], [ %100, %155 ], [ %100, %157 ], [ %100, %159 ], [ %100, %161 ], [ %100, %163 ], [ %100, %165 ], [ %100, %167 ]
  %186 = phi i32 [ %101, %117 ], [ %101, %119 ], [ %101, %121 ], [ %101, %123 ], [ %101, %125 ], [ %101, %127 ], [ %101, %129 ], [ %101, %131 ], [ %101, %133 ], [ %101, %135 ], [ %101, %137 ], [ %101, %139 ], [ %101, %141 ], [ %101, %143 ], [ %101, %145 ], [ %101, %147 ], [ %150, %149 ], [ %101, %151 ], [ %101, %153 ], [ %101, %155 ], [ %101, %157 ], [ %101, %159 ], [ %101, %161 ], [ %101, %163 ], [ %101, %165 ], [ %101, %167 ]
  %187 = phi i32 [ %102, %117 ], [ %102, %119 ], [ %102, %121 ], [ %102, %123 ], [ %102, %125 ], [ %102, %127 ], [ %102, %129 ], [ %102, %131 ], [ %102, %133 ], [ %102, %135 ], [ %102, %137 ], [ %102, %139 ], [ %102, %141 ], [ %102, %143 ], [ %102, %145 ], [ %102, %147 ], [ %102, %149 ], [ %152, %151 ], [ %102, %153 ], [ %102, %155 ], [ %102, %157 ], [ %102, %159 ], [ %102, %161 ], [ %102, %163 ], [ %102, %165 ], [ %102, %167 ]
  %188 = phi i32 [ %103, %117 ], [ %103, %119 ], [ %103, %121 ], [ %103, %123 ], [ %103, %125 ], [ %103, %127 ], [ %103, %129 ], [ %103, %131 ], [ %103, %133 ], [ %103, %135 ], [ %103, %137 ], [ %103, %139 ], [ %103, %141 ], [ %103, %143 ], [ %103, %145 ], [ %103, %147 ], [ %103, %149 ], [ %103, %151 ], [ %154, %153 ], [ %103, %155 ], [ %103, %157 ], [ %103, %159 ], [ %103, %161 ], [ %103, %163 ], [ %103, %165 ], [ %103, %167 ]
  %189 = phi i32 [ %104, %117 ], [ %104, %119 ], [ %104, %121 ], [ %104, %123 ], [ %104, %125 ], [ %104, %127 ], [ %104, %129 ], [ %104, %131 ], [ %104, %133 ], [ %104, %135 ], [ %104, %137 ], [ %104, %139 ], [ %104, %141 ], [ %104, %143 ], [ %104, %145 ], [ %104, %147 ], [ %104, %149 ], [ %104, %151 ], [ %104, %153 ], [ %156, %155 ], [ %104, %157 ], [ %104, %159 ], [ %104, %161 ], [ %104, %163 ], [ %104, %165 ], [ %104, %167 ]
  %190 = phi i32 [ %105, %117 ], [ %105, %119 ], [ %105, %121 ], [ %105, %123 ], [ %105, %125 ], [ %105, %127 ], [ %105, %129 ], [ %105, %131 ], [ %105, %133 ], [ %105, %135 ], [ %105, %137 ], [ %105, %139 ], [ %105, %141 ], [ %105, %143 ], [ %105, %145 ], [ %105, %147 ], [ %105, %149 ], [ %105, %151 ], [ %105, %153 ], [ %105, %155 ], [ %158, %157 ], [ %105, %159 ], [ %105, %161 ], [ %105, %163 ], [ %105, %165 ], [ %105, %167 ]
  %191 = phi i32 [ %106, %117 ], [ %106, %119 ], [ %106, %121 ], [ %106, %123 ], [ %106, %125 ], [ %106, %127 ], [ %106, %129 ], [ %106, %131 ], [ %106, %133 ], [ %106, %135 ], [ %106, %137 ], [ %106, %139 ], [ %106, %141 ], [ %106, %143 ], [ %106, %145 ], [ %106, %147 ], [ %106, %149 ], [ %106, %151 ], [ %106, %153 ], [ %106, %155 ], [ %106, %157 ], [ %160, %159 ], [ %106, %161 ], [ %106, %163 ], [ %106, %165 ], [ %106, %167 ]
  %192 = phi i32 [ %107, %117 ], [ %107, %119 ], [ %107, %121 ], [ %107, %123 ], [ %107, %125 ], [ %107, %127 ], [ %107, %129 ], [ %107, %131 ], [ %107, %133 ], [ %107, %135 ], [ %107, %137 ], [ %107, %139 ], [ %107, %141 ], [ %107, %143 ], [ %107, %145 ], [ %107, %147 ], [ %107, %149 ], [ %107, %151 ], [ %107, %153 ], [ %107, %155 ], [ %107, %157 ], [ %107, %159 ], [ %162, %161 ], [ %107, %163 ], [ %107, %165 ], [ %107, %167 ]
  %193 = phi i32 [ %108, %117 ], [ %108, %119 ], [ %108, %121 ], [ %108, %123 ], [ %108, %125 ], [ %108, %127 ], [ %108, %129 ], [ %108, %131 ], [ %108, %133 ], [ %108, %135 ], [ %108, %137 ], [ %108, %139 ], [ %108, %141 ], [ %108, %143 ], [ %108, %145 ], [ %108, %147 ], [ %108, %149 ], [ %108, %151 ], [ %108, %153 ], [ %108, %155 ], [ %108, %157 ], [ %108, %159 ], [ %108, %161 ], [ %164, %163 ], [ %108, %165 ], [ %108, %167 ]
  %194 = phi i32 [ %109, %117 ], [ %109, %119 ], [ %109, %121 ], [ %109, %123 ], [ %109, %125 ], [ %109, %127 ], [ %109, %129 ], [ %109, %131 ], [ %109, %133 ], [ %109, %135 ], [ %109, %137 ], [ %109, %139 ], [ %109, %141 ], [ %109, %143 ], [ %109, %145 ], [ %109, %147 ], [ %109, %149 ], [ %109, %151 ], [ %109, %153 ], [ %109, %155 ], [ %109, %157 ], [ %109, %159 ], [ %109, %161 ], [ %109, %163 ], [ %166, %165 ], [ %109, %167 ]
  %195 = phi i32 [ %118, %117 ], [ %110, %119 ], [ %110, %121 ], [ %110, %123 ], [ %110, %125 ], [ %110, %127 ], [ %110, %129 ], [ %110, %131 ], [ %110, %133 ], [ %110, %135 ], [ %110, %137 ], [ %110, %139 ], [ %110, %141 ], [ %110, %143 ], [ %110, %145 ], [ %110, %147 ], [ %110, %149 ], [ %110, %151 ], [ %110, %153 ], [ %110, %155 ], [ %110, %157 ], [ %110, %159 ], [ %110, %161 ], [ %110, %163 ], [ %110, %165 ], [ %110, %167 ]
  %196 = add nuw nsw i64 %111, 1
  br label %84, !llvm.loop !12

197:                                              ; preds = %84
  %198 = add nuw nsw i64 %76, 1
  br label %49, !llvm.loop !13

199:                                              ; preds = %49, %211
  %200 = phi i64 [ %214, %211 ], [ 1, %49 ]
  %201 = phi i32 [ %212, %211 ], [ %75, %49 ]
  %202 = phi i8 [ %213, %211 ], [ 65, %49 ]
  %203 = icmp eq i64 %200, 26
  br i1 %203, label %215, label %204

204:                                              ; preds = %199
  %205 = getelementptr inbounds [26 x i32], [26 x i32]* %4, i64 0, i64 %200
  %206 = load i32, i32* %205, align 4, !tbaa !5
  %207 = icmp sgt i32 %206, %201
  br i1 %207, label %208, label %211

208:                                              ; preds = %204
  %209 = getelementptr inbounds [26 x i8], [26 x i8]* @__const.main.c, i64 0, i64 %200
  %210 = load i8, i8* %209, align 1, !tbaa !11
  br label %211

211:                                              ; preds = %204, %208
  %212 = phi i32 [ %206, %208 ], [ %201, %204 ]
  %213 = phi i8 [ %210, %208 ], [ %202, %204 ]
  %214 = add nuw nsw i64 %200, 1
  br label %199, !llvm.loop !14

215:                                              ; preds = %199
  %216 = sext i8 %202 to i32
  %217 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i32 %216, i32 %201) #7
  br label %218

218:                                              ; preds = %241, %215
  %219 = phi i64 [ %242, %241 ], [ 0, %215 ]
  %220 = load i32, i32* %1, align 4, !tbaa !5
  %221 = sext i32 %220 to i64
  %222 = icmp slt i64 %219, %221
  br i1 %222, label %223, label %243

223:                                              ; preds = %218
  %224 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %3, i64 0, i64 %219, i64 0
  %225 = call i64 @strlen(i8* noundef nonnull %224) #8
  %226 = trunc i64 %225 to i32
  %227 = call i32 @llvm.smax.i32(i32 %226, i32 0)
  %228 = zext i32 %227 to i64
  br label %229

229:                                              ; preds = %232, %223
  %230 = phi i64 [ %236, %232 ], [ 0, %223 ]
  %231 = icmp eq i64 %230, %228
  br i1 %231, label %241, label %232

232:                                              ; preds = %229
  %233 = getelementptr inbounds [1000 x [26 x i8]], [1000 x [26 x i8]]* %3, i64 0, i64 %219, i64 %230
  %234 = load i8, i8* %233, align 1, !tbaa !11
  %235 = icmp eq i8 %234, %202
  %236 = add nuw nsw i64 %230, 1
  br i1 %235, label %237, label %229, !llvm.loop !15

237:                                              ; preds = %232
  %238 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %219
  %239 = load i32, i32* %238, align 4, !tbaa !5
  %240 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %239) #7
  br label %241

241:                                              ; preds = %229, %237
  %242 = add nuw nsw i64 %219, 1
  br label %218, !llvm.loop !16

243:                                              ; preds = %218
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 26000, i8* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 4000, i8* nonnull %7) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly minsize mustprogress nofree nounwind optsize readonly willreturn
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: minsize nofree nounwind optsize
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.smax.i32(i32, i32) #5

attributes #0 = { minsize nofree nounwind optsize sspstrong uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { minsize nofree nounwind optsize "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #4 = { argmemonly minsize mustprogress nofree nounwind optsize readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #6 = { nounwind }
attributes #7 = { minsize optsize }
attributes #8 = { minsize nounwind optsize readonly willreturn }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"clang version 13.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!7, !7, i64 0}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !10}
!15 = distinct !{!15, !10}
!16 = distinct !{!16, !10}
